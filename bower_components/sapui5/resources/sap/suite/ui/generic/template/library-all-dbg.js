// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.generic.template.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/SmartFilterBarExt",[
    "sap/ui/comp/smartfilterbar/SmartFilterBar",
    "sap/m/SegmentedButton",
    "sap/m/SegmentedButtonItem"
], function(SmartFilterBar, SegmentedButton, SegmentedButtonItem) {
    "use strict";

	// Need to integrate with the existing smart filter bar integration with the SmartChart and SmartTable.
	// Since we have no control over changing the SmartFilterBar, SmartTable and SmartChart, and we need the
	//   SmartVisualFilterBar to integrate with the SmartChart and SmartTable, it makes sense to extend the SmartFilterBar to act as a fascade.
	//   This fascade will return the correct set of filters when in either Visual Filter mode or the standard Compact filter mode.
	var SmartFilterBarExt = SmartFilterBar.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.SmartFilterBarExt", {
		metadata: {
			events: {
				switchToVisualFilter: {}
			}
		},
		renderer: {}
	});

	SmartFilterBarExt.prototype.checkSearchAllowed = function(oState) {
		if (oState && oState.oSmartFilterbar) {
			var aAllFields = oState.oSmartFilterbar.determineMandatoryFilterItems(),
			oFilterData = oState.oSmartFilterbar.getFilterData(),
			oTemplatePrivate = oState.oController.getView().getModel("_templPriv"),
			bIsSearchAllowed = true;
			for (var i = 0; i < aAllFields.length; i++) {
				if (!oFilterData[aAllFields[i].getName()]) {
					// if any one mandatory field/parameters does not have data
					// since sFieldValue = "" when there is no value
					// hence ternary operator to return boolean
					bIsSearchAllowed = false;
					break;
				}
			}

			if (bIsSearchAllowed) {
				// if fields have values check whether they are valid or not
				// if all mandatory fields have data
				var oSearchAllowed = SmartFilterBar.prototype.verifySearchAllowed.apply(this, arguments);
				if (oSearchAllowed.hasOwnProperty("error") || oSearchAllowed.hasOwnProperty("mandatory")) {
					bIsSearchAllowed = false;
				}
			}

			oTemplatePrivate.setProperty("/alp/searchable", bIsSearchAllowed);
		}
	};
});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/SmartFilterBarExt.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem",["sap/ui/core/Control", "sap/ui/model/Filter"],
	function(Control) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItem = Control.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItem", {
		metadata: {
			properties: {
				filterRestriction : { type: "string", group: "Misc", defaultValue: null },
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				dimensionField: { type: "string", group: "Misc", defaultValue: null },
				dimensionFieldIsDateTime: { type: "boolean", group: "Misc", defaultValue: false },
				dimensionFieldDisplay: { type: "string", group: "Misc", defaultValue: null },
				dimensionFilter: { type: "any", group: "Misc", defaultValue: null },
				dimensionFilterExternal: { type: "sap.ui.model.Filter", group: "Misc", defaultValue: null },
				measureField: { type: "string", group: "Misc", defaultValue: null },
				unitField: { type: "string", group: "Misc", defaultValue: null },
				isCurrency: { type: "boolean", group: "Misc", defaultValue: false },
				isMandatory: { type: "boolean", group: "Misc", defaultValue: false },
				width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue : null},
				title: { type: "string", group: "Misc", defaultValue: "" },
				outParameter: { type: "string", group: "Misc", defaultValue: null },
				inParameters: { type: "object[]", group: "Misc", defaultValue: null},
				parentProperty: { type: "string", group: "Misc", defaultValue: null },
				sortOrder: { type: "object[]", group: "Misc", defaultValue: null},
				scaleFactor : {type: "string", group: "Misc", defaultValue: null},
				numberOfFractionalDigits: {type: "string", group: "Misc", defaultValue: null},
				textArrangement: {type: "string", group: "Misc", defaultValue: sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId},
				chartQualifier: {type: "string", group: "Misc", defaultValue: null}
			},
			aggregations: {
				control: {type: "sap.ui.core.Control", multiple: false}
			},
			events: {
				filterChange: {},
				titleChange: {}
			}
		},
		renderer: {}
	});

	return FilterItem;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar.designtime') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the Design Time Metadata for the SmartVisualFilterBar
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar.designtime",[], function() {
	"use strict";
	return {
		properties: {
			entitySet: {
				ignore: true
			},
			config: {
				ignore: true
			},
			persistencyKey: {
				ignore: true
			},
			displayCurrency: {
				ignore: true
			},
			smartFilterId: {
				ignore: true
			},
			textArrangement: {
				ignore: true
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar.designtime.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController",["sap/m/SegmentedButtonItem", "sap/m/Button", "sap/m/ButtonType", "sap/ui/base/EventProvider", "sap/m/SegmentedButton","sap/ui/core/mvc/Controller"
    ],
    function(SegmentedButtonItem, Button, ButtonType, EventProvider, SegmentedButton, Controller) {
        "use strict";

		var	CONTAINER_VIEW_TABLE = "table",
			CONTAINER_VIEW_CHART = "chart",
			CONTAINER_VIEW_CHARTTABLE = "charttable",
			CONTAINER_VIEW_CUSTOMVIEW = "customview";

		var tbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.ToolbarController", {
			setState:function(oState) {
				var me = this;
				me.oState = oState;
				me._uiCompRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");

				var defaultView = oState.oController.getOwnerComponent().getDefaultContentView();

				// delay insertion out custom toolbar buttons until the
				// smartTable and smartChart are properly initialized
				me.oState._pendingTableToolbarInit = true;
				me.oState._pendingChartToolbarInit = true;

				//Creating the view switch buttons for the chart and table
				if (!me.oState.alr_viewSwitchButtonOnChart || !me.oState.alr_viewSwitchButtonOnTable ) {
					me.oState.alr_viewSwitchButtonOnChart = me.createViewSwitchButton(true);
					me.oState.alr_viewSwitchButtonOnTable = me.createViewSwitchButton(false);
				}
				var oTemplatePrivate = me.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/contentView', defaultView);
			},
			createViewSwitchButton:function(chartMode) {
				var oCustomModel = this.oState.oController.oView.getModel("alpCustomModel");
				var buttonItems = [];
				//The edges of the buttons are not rendering properly when visibility is set using custom model
				buttonItems.push(new sap.m.SegmentedButtonItem({
					tooltip: "{i18n>CONTAINER_VIEW_CHARTTABLE}",
					key: CONTAINER_VIEW_CHARTTABLE,
					icon: oCustomModel.getProperty("/icon/hybrid")
				}));
				
				if (oCustomModel.getProperty("/required/master")) {
					buttonItems.push(new sap.m.SegmentedButtonItem({
						tooltip: "{i18n>CONTAINER_VIEW_CHART}",
						key: CONTAINER_VIEW_CHART,
						icon: oCustomModel.getProperty("/icon/master")
					}));
				}
				if (this.oState.bCustomViewExist) {
					buttonItems.push(new sap.m.SegmentedButtonItem({
						tooltip: oCustomModel.getProperty("/tooltip/customview"),
						key: CONTAINER_VIEW_CUSTOMVIEW,
						icon: oCustomModel.getProperty("/icon/customview")
					}));
				}
				buttonItems.push(new sap.m.SegmentedButtonItem({
					tooltip: "{i18n>CONTAINER_VIEW_TABLE}",
					key: CONTAINER_VIEW_TABLE,
					icon: "sap-icon://table-view"
				}));
				var btnSettings = {
					select:  jQuery.proxy(function(){
								this.oState.oController._templateEventHandlers.onSegmentButtonPressed(!this.oState.oController.getOwnerComponent().getProperty('smartVariantManagement'));
						}, this),
					layoutData: new sap.m.OverflowToolbarLayoutData({
						priority:sap.m.OverflowToolbarPriority.NeverOverflow
					}),
					items:buttonItems,
					selectedKey: "{_templPriv>/alp/contentView}"
				};
				if (chartMode) {
					jQuery.extend(btnSettings, {
						visible: "{= (${_templPriv>/alp/contentView} === 'chart' || ${_templPriv>/alp/contentView} === 'charttable') && !${_templPriv>/alp/fullScreen} }"
					});
					var segBtn = new SegmentedButton(btnSettings);
				} else {
					jQuery.extend(btnSettings, {
						visible: "{= (${_templPriv>/alp/contentView} === 'table' ) && !${_templPriv>/alp/fullScreen} }"
					});
					var segBtn = new SegmentedButton(btnSettings);
				}
				return segBtn;
			}
		});
		return tbController;
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController",[
		"sap/ui/core/mvc/Controller"
	],
    function(Controller) {
		"use strict";
		var vfbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterBarController", {
			init: function(oState) {
				this.oState = oState;

				var ownerComp = this.oState.oController.getOwnerComponent();

				this._filterBar = this.oState.alr_visualFilterBar;
				this._filterBar.setEntitySet(ownerComp.getEntitySet());
			}
		});
		return vfbController;
	}
);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context",
        "sap/ui/model/odata/AnnotationHelper"
    ],
    function(BaseObject, Context, ODataAnnoHelper) {
        "use strict";

        var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper");

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper.criticalityConstants = {
            StateValues: {
                None: "None",
                Negative: "Error",
                Critical: "Warning",
                Positive: "Success"
            },
            ColorValues: {
                None: "Neutral",
                Negative: "Error",
                Critical: "Critical",
                Positive: "Good"
            }
        };

        AnnotationHelper.selectionPresentationVariantResolveWithQualifier = function(oContext) {
            //var oResult = Basics.followPath(oContext, oContext.getObject());

            var oKpi = oContext.getObject();
            var oModel = oContext.getModel();
            var oMetaModel = oModel.getProperty("/metaModel");
            var oEntitySet = oMetaModel.getODataEntitySet(oKpi.entitySet);
            var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
            var sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.SelectionPresentationVariant#" + oKpi.qualifier;
            return oMetaModel.createBindingContext(sAnnotationPath);

        };


        AnnotationHelper.resolveParameterizedEntitySet = function(oDataModel, oEntitySet, oSelectionVariant) {

            jQuery.sap.require("sap.ui.model.analytics.odata4analytics");
            var path = "";
            var o4a = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oDataModel));
            var queryResult = o4a.findQueryResultByName(oEntitySet.name);
            var queryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(queryResult);
            var parameterization = queryResult.getParameterization();

            if (parameterization) {
                var param;
                queryResultRequest.setParameterizationRequest(new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(parameterization));
                jQuery.each(oSelectionVariant.Parameters, function() {
                    if (this.RecordType === "com.sap.vocabularies.UI.v1.IntervalParameter") {
                        param = this.PropertyValueFrom.PropertyPath.split("/");
                        queryResultRequest.getParameterizationRequest().setParameterValue(
                            param[param.length - 1],
                            this.PropertyValueFrom.String,
                            this.PropertyValueTo.String
                        );
                    } else {
                        param = this.PropertyName.PropertyPath.split("/");
                        queryResultRequest.getParameterizationRequest().setParameterValue(
                            param[param.length - 1],
                            this.PropertyValue.String
                        );
                    }
                });
            }

            try {
                path = queryResultRequest.getURIToQueryResultEntitySet();
            } catch (exception) {
                queryResult = queryResultRequest.getQueryResult();
                path = "/" + queryResult.getEntitySet().getQName();
                jQuery.sap.log.error("getEntitySetPathWithParameters", "binding path with parameters failed - " + exception || exception.message);
            }
            return path;
        };

        return AnnotationHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",[
	"sap/ui/base/Object",
	"sap/ui/model/Context"
	],	function(BaseObject, Context) {
		"use strict";
		var KpiUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiUtil");

		/**
		 * [getNumberValue parses the oValue into the number value based on the type ]
		 * @param  {object} oValue [value]
		 * @return {number}        [returns the value in the number format  ]
		 */
		KpiUtil.getNumberValue = function (oValue) {
		//Here the oValue obj always returns one key which is either of value present in the array.
			if (oValue) {
				var val = Object.keys(oValue)[0];
				return (oValue && val && ["String","Int","Decimal","Double","Single"].indexOf(val) !== -1 ) ? Number(oValue[val]) : undefined;
			}
		};
		/**
		 * [getBooleanValue  get the boolean value ]
		 * @param  {object} oValue   [Value]
		 * @param  {boolean} bDefault [default value ]
		 * @return {boolean}          [returns true/false based on the value]
		 */
		KpiUtil.getBooleanValue = function(oValue, bDefault){
			if (oValue && oValue.Bool) {
				if (oValue.Bool.toLowerCase() === "true") {
					return true;
				} else if (oValue.Bool.toLowerCase() === "false") {
					return false;
				}
			}
			return bDefault;
		};


		/**
		 * [getPrimitiveValue returns the value with respective type]
		 * @param  {object} oValue [description]
		 * @return {*}        [returns the primitive type]
		 */
		KpiUtil.getPrimitiveValue = function (oValue) {
			var value;

			if (oValue) {
				if (oValue.String ) {
					value = oValue.String;
				} else if (oValue.Bool) {
					value = KpiUtil.getBooleanValue(oValue);
				} else if (oValue.EnumMember){
					value = oValue.EnumMember.split("/")[1];
				} else {
					value = KpiUtil.getNumberValue(oValue);
				}
			}
			return value;
		};

		/**
		 * [getPathOrPrimitiveValue returns the path of the oItem ]
		 * @param  {object} oModel [model name against which path to be verified]
		 * @param  {object} oItem     [oItem]
		 * @return {*}           [returns the path or its primitive Value]
		 */
		KpiUtil.getPathOrPrimitiveValue = function (oItem) {
			if (oItem) {
				return (oItem.Path) ? "{path:'" + oItem.Path + "'}" : KpiUtil.getPrimitiveValue(oItem);
			} else {
				return "";
			}
		};
	/**
	 * [isBindingValue  ]
	 * @param  {object}  oValue [value]
	 * @return {Boolean}        [returns true or false]
	 */
	KpiUtil.isBindingValue = function(oValue) {
		return (typeof oValue === "string") && oValue.charAt(0) === "{";
	};

	KpiUtil.getNumberFormatter = function(showMeasure, scale, maxFractionDigits) {
		var fixedInteger = sap.ui.core.format.NumberFormat.getIntegerInstance({
			style: "short",
			minFractionDigits: 0,
			maxFractionDigits: maxFractionDigits,
			showScale: showMeasure,
			shortRefNumber: scale
		});
		return fixedInteger;
	};

	KpiUtil.determineThousandsRefNumber = function(scaleFactor) {
		var shiftedFactor = scaleFactor;

		if (scaleFactor >= 1000) {
			var thousandsCount = 0;
			while (shiftedFactor >= 1000) {
				shiftedFactor /= 1000;
				thousandsCount++;
			}
			return thousandsCount == 0 ? undefined : thousandsCount * 1000;
		} else {
			return undefined;
		}
	};


	/**
	 * [formatNumberForPresentation formats the absolute number value]
	 * @param  {object} oValue                   [value to be formatted]
	 * @param  {boolean} bShowScale               [if if the scale has to be shown with the format]
	 * @param  {number} nNumberOfFractionalDigits [numberOfFractionalDigits from the datapoint annotation for the enityset]
	 * @return {sap.ui.core.format.NumberFormat}	[returns the float instance of the NumberFormat]
    */
	KpiUtil.formatNumberForPresentation = function(oValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor) {
		var num = Number(oValue);
		var sCurrentLocale = sap.ui.getCore().getConfiguration().getLanguage();
		var oCurrentLocale = new sap.ui.core.Locale(sCurrentLocale);
		if (nNumberOfFractionalDigits > 2) {
			nNumberOfFractionalDigits = 2 ; // additional check is required here since decimals param is taking precendence over maxFractionDigits below
		}
		var oNumberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
			style: "short",
			showScale: bShowScale,
			minFractionDigits: 0,
			maxFractionDigits: 2,
			decimals: nNumberOfFractionalDigits,
			shortRefNumber: fScaleFactor
		}, oCurrentLocale).format(num) ;
		return oNumberFormat;
	};

	/**
	 * [formatNumberForPercentPresentation formats the number with percent presentation]]
	 * @param  {object} oValue                   [value]
	 * @param  {number} nNumberOfFractionalDigits [number of fractional Digits from OdataPOint annotations]
	 * @return {sap.ui.core.format.NumberFormat}	[returns integer instance of the NumberFormat]

	 */
	KpiUtil.formatNumberForPercentPresentation = function (oValue, nNumberOfFractionalDigits) {
		var percentNumber = Number(oValue);
		if (nNumberOfFractionalDigits) {
			var minDigits = 0;
			//var maxDigits = nNumberOfFractionalDigits;
			var maxDigits = nNumberOfFractionalDigits ;
			if (nNumberOfFractionalDigits > 2) { // check to restrict the max allowed digit to two at all times
				maxDigits = 2;
			}
			var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
			style: "short",
			minFractionDigits: minDigits,
			maxFractionDigits: maxDigits
			});
			return percentFormatter.format(percentNumber);
		} else {
		 var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
			style: "short",
			minFractionDigits: 0,
			maxFractionDigits: 1
		});

		return percentFormatter.format(percentNumber);
		}
	};


	/**
	 * [getUnitofMeasure checks for unit of measure]
	 * @param  {object} oModel [Context   current context]
	 * @param  {object} oEntityTypeProperty [enity property for the respective entity type and enity set]
	 * @return {string}      [returns the Unit of Measure]
	 */
	KpiUtil.getUnitofMeasure = function(oModel, oEntityTypeProperty) {
		return (oEntityTypeProperty) ? oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"] || oEntityTypeProperty["Org.OData.Measures.V1.Unit"] : "";
	};


	/**
	 * [isRelative checks if the passed datapoint is relative]
	 * @param  {object}  oDataPoint [data point annotation]
	 * @return {Boolean}            [returns true/false]
	 */
	KpiUtil.isRelative = function(oDataPoint) {
		var trendCalc = oDataPoint.TrendCalculation;
		var relative = false;
		if (trendCalc) {
			var defaultVal = trendCalc.IsRelativeDifference.DefaultValue;
			relative = KpiUtil.getBooleanValue(trendCalc.IsRelativeDifference, defaultVal ? ({
				"true": true,
				"false": false
			})[defaultVal.toLowerCase()] : false);
		}
		return relative;
	};


	return KpiUtil;

}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil",[
	"sap/ui/base/Object"
	],	function(BaseObject) {
		"use strict";
		var ModelUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.ModelUtil");
		//Constants
		var FILTER = "Filter";
		/**
		 * [showFooterBar To determine if footerbar to be shown]
		 * @param  {[oContext]}  sEntitySet [ViewMode]
		 * @return {Boolean}              [Returns status of footerbar to the xml]
		 */
		ModelUtil.hasVisibleChild = function(oContext){
			var oChild = this.getContent();
			for (var i = 0; i < oChild.length; i++) {
				var sType = oChild[i].getMetadata().getName();
				if ( sType === 'sap.m.HBox' ) {
					var customData = oChild[i].data(FILTER);
					if ( oContext.indexOf(customData) !== -1 ) {
						return true;
					}
				}
			}
			return false;
		};
	return ModelUtil;
}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode') ) {
/**
* File for mapping operation code to operator
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode",function() {
  "use strict";
  jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode");
  //default position of the operator is left
  sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode = {
    "EQ": {
      "code": "="
    },
    "GT": {
      "code": ">"
    },
    "GE": {
      "code": ">="
    },
    "LT": {
      "code": "<"
    },
    "LE": {
      "code": "<="
    },
    "NE": {
      "code": "!"
    },
    "BT": {
      "code": "...",
      "position": "mid"
    },
    "EndsWith": {
      "code": "*"
    },
    "StartsWith": {
      "code": "*",
      "position": "last"
    },
    "Contains": {
      "code": "*",
      "position": "mid"
    }
  };
  return sap.suite.ui.generic.template.AnalyticalListPage.util.OperationCode;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms') ) {
/**
* File for keeping V4 Annotation Constants
* New Constants should be added in the below dictionary and then be used
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms",function() {
	"use strict";
	jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms");

	sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms = {
		Label: "com.sap.vocabularies.Common.v1.Label",
		CalendarYear: "com.sap.vocabularies.Common.v1.IsCalendarYear",
		CalendarYearMonth: "com.sap.vocabularies.Common.v1.IsCalendarYearMonth",
		CalendarYearMonthDay: "com.sap.vocabularies.Common.v1.IsCalendarDate",
		Unit: "Org.OData.Measures.V1.Unit",
		ISOCurrency: "Org.OData.Measures.V1.ISOCurrency",
		FilterRestrictions: "Org.OData.Capabilities.V1.FilterRestrictions",
		SelectionFields: "com.sap.vocabularies.UI.v1.SelectionFields",
		FieldGroup: "com.sap.vocabularies.UI.v1.FieldGroup",
		ValueList: "com.sap.vocabularies.Common.v1.ValueList",
		DataPoint: "com.sap.vocabularies.UI.v1.DataPoint",
		SelectionRangeSignType: "com.sap.vocabularies.UI.v1.SelectionRangeSignType",
		ValueListParameterIn: "com.sap.vocabularies.Common.v1.ValueListParameterIn",
		ValueListParameterOut: "com.sap.vocabularies.Common.v1.ValueListParameterOut",
		ValueListParameterInOut: "com.sap.vocabularies.Common.v1.ValueListParameterInOut",
		SelectionPresentationVariant: "com.sap.vocabularies.UI.v1.SelectionPresentationVariant"
	};
	return sap.suite.ui.generic.template.AnalyticalListPage.util.V4Terms;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.AnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/AnnotationHelper",[], function() {
	"use strict";
	/* Templating helper functions that are specific to the ListReport Template */
	var AnnotationHelper = {
		resolveMetaModelPath: function(oContext) {
			var sPath = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(sPath);
		},
		/* The context definition for the ListReport
			1. only check if there is a default presentation variant for now. If it exists we
			   need to check if it has a LineItem annotation and use this one rather than the default LineItem annotation
			Compare with similar function in AnalyticalListReport
		*/
		createWorkingContext: function(oContext) {
			var oParameter = oContext.getObject(),
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Find default PresentationVariant */
			sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant";
			oWorkingContext.presentationVariantQualifier = "";
			oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.presentationVariantPath = sAnnotationPath;
			/* Determine LineItem and Chart via PV */
			if (oWorkingContext.presentationVariant && oWorkingContext.presentationVariant.Visualizations) {
				oWorkingContext.presentationVariant.Visualizations.forEach(function(visualization) {
					/* get rid of the @ and put a / in front */
					var sPath = "/" + visualization.AnnotationPath.slice(1);
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}

			//PoC Chart begin
			oWorkingContext.tableChartTabs = [];
			var sAnnotation, oVariants, i, oItem, oVariant;
			oVariants = oParameter && oParameter.manifest && oParameter.manifest["sap.ui.generic.app"] && oParameter.manifest["sap.ui.generic.app"].pages && oParameter.manifest["sap.ui.generic.app"].pages[0].component && 
				oParameter.manifest["sap.ui.generic.app"].pages[0].component.settings && oParameter.manifest["sap.ui.generic.app"].pages[0].component.settings._quickVariantSelectionX &&
				oParameter.manifest["sap.ui.generic.app"].pages[0].component.settings. _quickVariantSelectionX.variants;
			for (i in oVariants) {
				oItem = {};
				oItem.key = oVariants[i].key;
				oItem.variantAnnotationPath = oVariants[i].annotationPath;
				oItem.variantQualifier = oItem.variantAnnotationPath.split("#")[1] || "";

				oVariant = oEntityType[oItem.variantAnnotationPath];
				// oVariant is SelectionPresentationVariant
				if (oVariant && oVariant.PresentationVariant) {
					// for the case that under PresentationVariant an annotation path is specified to the presentation variant
					if (oVariant.PresentationVariant.AnnotationPath) {
						var sPresentationVariantPath = oVariant.PresentationVariant.AnnotationPath.split("@")[1];
						var oPresentationVariantAnnotation = sPresentationVariantPath && oEntityType[sPresentationVariantPath];
					} else {
						oPresentationVariantAnnotation = oVariant.PresentationVariant;
					}
						sAnnotation = oPresentationVariantAnnotation.Visualizations && oPresentationVariantAnnotation.Visualizations[0].AnnotationPath;
				} else if (oVariant && oVariant.Visualizations) {
					// oVariant is PresentationVariant
					sAnnotation =  oVariant.Visualizations[0].AnnotationPath;
				}
				if (sAnnotation && sAnnotation.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
					oItem.smartControl = "chart";
					// get rid of the @ and put a / in front
					var sChartRelativePath = "/" + sAnnotation.slice(1);
					oItem.chartAbsolutePath = oEntityType.$path + sChartRelativePath;
				} else if (sAnnotation && sAnnotation.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
					oItem.smartControl = "table";
				}
				oItem.controlQualifier = sAnnotation && sAnnotation.split("#")[1] || "";
				oWorkingContext.tableChartTabs.push(oItem);
			}
			//PoC Chart end

			oModel.setProperty("/workingContext", oWorkingContext);
			return "/workingContext";
		},

		//PoC Chart begin
		checkIfSmartChart: function(oEntityType, oTabItem) {
			var bIsSmartChart = false, sAnnotation, sAnnotationPath, oVariant;
			sAnnotationPath = oTabItem.annotationPath;
			oVariant = !!sAnnotationPath && oEntityType[sAnnotationPath];
			if (oVariant && oVariant.PresentationVariant && oVariant.PresentationVariant.Visualizations) {
				// oVariant is SelectionPresentationVariant
				sAnnotation =  oVariant.PresentationVariant.Visualizations[0].AnnotationPath;
			} else if (oVariant && oVariant.Visualizations) {
				// oVariant is PresentationVariant
				sAnnotation =  oVariant.Visualizations[0].AnnotationPath;
			}
			if (sAnnotation && sAnnotation.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
				bIsSmartChart = true;
			}
			return bIsSmartChart;
		},

		checkIfChartQualifier: function(oWorkingContext, iTabItem) {
			return !!(AnnotationHelper.getChartQualifier(oWorkingContext, iTabItem));
		},

		getChartQualifier: function(oWorkingContext, iTabItem) {
			var sChartQualifier, i, sKey;
			for (i in oWorkingContext.tableChartTabs) {
				sKey = oWorkingContext.tableChartTabs[i].key;
				if (sKey === iTabItem.key) {
					sChartQualifier = oWorkingContext.tableChartTabs[i].controlQualifier;
					break;
				}
			}
			return sChartQualifier;
		},

		getPresentationVariantQualifier: function(oWorkingContext, iTabItem) {
			var sVariantQualifier, i, sKey;
			for (i in oWorkingContext.tableChartTabs) {
				sKey = oWorkingContext.tableChartTabs[i].key;
				if (sKey === iTabItem.key) {
					sVariantQualifier = oWorkingContext.tableChartTabs[i].variantQualifier;
					break;
				}
			}
			return sVariantQualifier;
		},

		getChartAnnotationPath: function(iTabItem) {
			var sChartAnnotationPath, oModel, oObject, i, aTableTabs, sVariantAnnotationPath, sChartAnnotationPath, sChartActionsAnnotationPath, oBindingContextPath;
			oModel = iTabItem.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			oObject = oModel.getObject(iTabItem.sPath);
			aTableTabs = oModel.getData("workingContext")["workingContext"].tableChartTabs;
			for (i in aTableTabs) {
				sVariantAnnotationPath = aTableTabs[i].variantAnnotationPath;
				if (sVariantAnnotationPath === oObject.annotationPath) {
					sChartAnnotationPath = aTableTabs[i].chartAbsolutePath;
					sChartActionsAnnotationPath = sChartAnnotationPath + '/Actions';
					oBindingContextPath = oMetaModel.createBindingContext(sChartActionsAnnotationPath);
					return oBindingContextPath;
				}
			}
		},

		checkIfNavigationIsEnabled: function(oItabItem) {
			var bTemp = oItabItem.showItemNavigationOnChart;
			return !!bTemp;
		}
		//PoC Chart end
	};

	return AnnotationHelper;
}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/ListReport/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.IappStateHandler') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.IappStateHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavError'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/IappStateHandler",["jquery.sap.global", "sap/ui/base/Object",
	"sap/ui/generic/app/navigation/service/NavError", "sap/ui/generic/app/navigation/service/SelectionVariant"], function(jQuery, BaseObject, NavError, SelectionVariant) {
	"use strict";

		// Constants which are used as property names for storing custom filter data and generic filter data
		var dataPropertyNameCustom = "sap.suite.ui.generic.template.customData",
			dataPropertyNameGeneric = "sap.suite.ui.generic.template.genericData";

		// variant contexts which should not lead to change the iappstate
		var aIrrelevantVariantLoadContext = ["INIT", "DATA_SUITE", "CANCEL", "RESET", "SET_VM_ID"];

	function fnNullify(oObject) {
		if (oObject) {
			for (var sProp in oObject) {
				oObject[sProp] = null;
			}
		}
	}

	function fnNotEqual(oObject1, oObject2){
		var aKeys1 = Object.keys(oObject1);
		if (aKeys1.length !== Object.keys(oObject2).length){
			return true;
		}
		for (var i = 0; i < aKeys1.length; i++){
			var sKey = aKeys1[i];
			var aPar1 = oObject1[sKey];
			var aPar2 = oObject2[sKey];
			if (aPar1.length !== aPar2.length){
				return true;
			}
			for (var j = 0; j < aPar1.length; j++){
				if (aPar1[j] !== aPar2[j]){
					return true;
				}
			}
		}
		return false;
	}

	function getMethods(oState, oController, oNavigationHandler) {

		var bSmartVariantManagement = oController.getOwnerComponent().getSmartVariantManagement();
		var oRealizedAppState = { // this object contains information which can be derived from url
			appStateKey: "",      // it represents the last url-state which has been adopted by the UI
			urlParams: {},
			selectionVariant: "",
			tableVariantId: ""
		};

		var bIsTransferringUrlStateToPageState = false;

		var fnNotifyRealizedAppStateConsistent = null; // when this variable is not null a url has been caught which has not yet been adopted.
		                                       // In this case it is a function that should be called when the adoption has been performed successfully.
		var oAppStateIsSetPromise = Promise.resolve(); // A Promise that is resolved when the current url and the content of oRealizedAppState are consistent
		                                               // Otherwise the Promise will be resolved as soon as this is again the case
		var bDataAreShownInTable = false;
		var bAppStateDirty = false;  // this property is true, when some url-relevant change has been performed by the user which has not yet been transferred to the url.
		var oEditStateFilter = oController.byId("editStateFilter");
		var bIsAutoBinding;

		var oStoringInformation = null; // when this parameter is not null a change of the url has been triggered which is not yet reflected in oRealizedAppState.
		                                // In this case it contains a property appStateKey which contains the appStateKey which has been put into the url
		var sAppStateKeyInUrl = null; // the appstateKey which is currently in the url. It is (normally) updated in function isStateChange.

		oState.oSmartFilterbar.setSuppressSelection(true);

		var getByDefaultNonVisibleCustomFilterNames = (function(){
			var aNonVisibleCustomFilterNames;
			return function(){
				aNonVisibleCustomFilterNames = aNonVisibleCustomFilterNames || oState.oSmartFilterbar.getNonVisibleCustomFilterNames();
				return aNonVisibleCustomFilterNames;
			};
		})();

		function areDataShownInTable(){
			return bDataAreShownInTable;
		}

		function getPageState() {
			var oCustomAndGenericData = {};
			oCustomAndGenericData[dataPropertyNameCustom] = {};
			// Store information about visible custom filters
			var aVisibleCustomFieldNames = [];
			var aByDefaultNonVisibleCustomFilterNames = getByDefaultNonVisibleCustomFilterNames();
			for (var i = 0; i < aByDefaultNonVisibleCustomFilterNames.length; i++){ // loop over all custom fields which are not visible in filterbar by default
				var sName = aByDefaultNonVisibleCustomFilterNames[i];
				if (oState.oSmartFilterbar.isVisibleInFilterBarByName(sName)){ // custom field is visible in filterbar now
					aVisibleCustomFieldNames.push(sName);
				}
			}
			oCustomAndGenericData[dataPropertyNameGeneric] = {
				suppressDataSelection: !bDataAreShownInTable,
				visibleCustomFields: aVisibleCustomFieldNames
			};
			if (oEditStateFilter) {
				oCustomAndGenericData[dataPropertyNameGeneric].editStateFilter = oEditStateFilter.getSelectedKey();
			}
			if (oState.oIconTabBar) {
				oCustomAndGenericData[dataPropertyNameGeneric].tableTabData = {
					selectedTab: oState.oIconTabBar.getSelectedKey(),
					tableVariantIds: {}
				};
				for (var i in oState.aSmartTables) {
					var oTmpTable = oState.aSmartTables[i];
					if (!oCustomAndGenericData[dataPropertyNameGeneric].tableTabData.tableVariantIds) {
						oCustomAndGenericData[dataPropertyNameGeneric].tableTabData.tableVariantIds = {};
					}
					oCustomAndGenericData[dataPropertyNameGeneric].tableTabData.tableVariantIds[oTmpTable.getId()] = oTmpTable.getCurrentVariantId() || "";
				}
			}
			var oTableViewData = oState.oMultipleViewsSingleTableModeHelper && oState.oMultipleViewsSingleTableModeHelper.getState();
			if (oTableViewData){
				oCustomAndGenericData[dataPropertyNameGeneric].tableViewData = oTableViewData;
			}

			// extension is responsible for retrieving custom filter state. The method has a more generic name
			// for historical reasons (change would be incompatible).

			oController.getCustomAppStateDataExtension(oCustomAndGenericData[dataPropertyNameCustom]);
			return oCustomAndGenericData;
		}

		function getCurrentAppState() {
			/*
			 * Special handling for selection fields, for which defaults are defined: If a field is visible in the
			 * SmartFilterBar and the user has cleared the input value, the field is not included in the selection
			 * variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by
			 * purpose, we have to store the selection with the value "", in order to set it again to an empty value,
			 * when restoring the selection after a back navigation. Otherwise, the default value would be set.
			 */
			var sCurrentSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
			var oSelectionVariant = new SelectionVariant(sCurrentSelectionVariant);
			var aVisibleFields = oController.getVisibleSelectionsWithDefaults();
			for (var i = 0; i < aVisibleFields.length; i++) {
				if (!oSelectionVariant.getValue(aVisibleFields[i])) {
					oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
				}
			}

			//If variant is dirty and if the selection variant has id, making the same empty for the filters to be applied correctly.
			if (oController.byId('template::PageVariant') && oController.byId('template::PageVariant').currentVariantGetModified() && oSelectionVariant.getID()){
				oSelectionVariant.setID("");
			}
			var oRet = {
				selectionVariant: oSelectionVariant.toJSONString(),
				tableVariantId: (!bSmartVariantManagement && oState.oSmartTable.getCurrentVariantId()) || "",
				customData: getPageState()
			};
			return oRet;
		}

		// This method is called when the app state has potentially changed, such that the url must be adopted.
		// bAppStateDirty tells us, whether there is really an open change
		function fnStoreCurrentAppStateAndAdjustURL() {
			// - nothing, if ushellContainer not available
			// - adjusts URL immediately
			// - stores appState for this URL (asynchronously)

			if (!bAppStateDirty){
				return;
			}

			bAppStateDirty = false;

			try {
				oStoringInformation = oNavigationHandler.storeInnerAppStateWithImmediateReturn(getCurrentAppState(), true);
			} catch (err){ // happens e.g. in voter. Would better be handled by Denver
				jQuery.sap.log.error("ListReport.fnStoreCurrentAppStateAndAdjustURL: " + err);
				return;
			}

			if (oStoringInformation instanceof NavError){
				bAppStateDirty = true;
				oStoringInformation = null;
				return;
			}
			oStoringInformation.promise.fail(function(oError){
				jQuery.sap.log.error("ListReport.fnStoreCurrentAppStateAndAdjustURL: Error when persisting appState" + oError);
			});
			if (sAppStateKeyInUrl !== oStoringInformation.appStateKey){ // if the appstateKey really represents a new state set it to hash
				oNavigationHandler.replaceHash(oStoringInformation.appStateKey);
			}
		}

		function fnRestoreGenericFilterState(oGenericData, bApplySearchIfConfigured) {
			if (oGenericData && oGenericData.editStateFilter !== undefined) {
				if (oEditStateFilter) {
					oEditStateFilter.setSelectedKey((oGenericData.editStateFilter === null) ? 0 : oGenericData.editStateFilter);
				}
			}
			// Restore information about visible custom filters
			var aVisibleCustomFields = oGenericData && oGenericData.visibleCustomFields;
			if (aVisibleCustomFields && aVisibleCustomFields.length > 0){
				var aItems = oState.oSmartFilterbar.getAllFilterItems();
				for (var i = 0; i < aItems.length; i++){
					var oItem = aItems[i];
					var sName = oItem.getName();
					if (aVisibleCustomFields.indexOf(sName) !== -1){
						oItem.setVisibleInFilterBar(true);
					}
				}
			}
			bDataAreShownInTable = bApplySearchIfConfigured && !(oGenericData && oGenericData.suppressDataSelection);
			if (bDataAreShownInTable){
				oState.oSmartFilterbar.search();
				//collapse header in case of bookmark or if iappstate is preserved on load of LR
				collapseLRHeaderonLoad(bDataAreShownInTable);
			}
		}

		// method is responsible for retrieving custom filter state. The correspomding extension-method has a more generic name
		// for historical reasons (change would be incompatible).
		function fnRestoreCustomFilterState(oCustomData) {
			oController.restoreCustomAppStateDataExtension(oCustomData || {});
		}

		// This method is responsible for restoring the data which have been stored via getPageState.
		// However, it must be taken care of data which have been stored with another (historical) format.
		// Therefore, it is checked whether oCustomAndGenericData possesses two properties with the right names.
		// If this is this case it is assumed that the data have been stored according to curreent logic. Otherwise, it is
		// assumed that the data have been stored with the current logic. Otherwise, it is assumed that the properties have been
		// stored with a logic containing only custom properties (with possible addition of _editStateFilter).
		function fnRestorePageState(oCustomAndGenericData, bApplySearchIfConfigured) {
			oCustomAndGenericData = oCustomAndGenericData || {};
			if (oCustomAndGenericData.hasOwnProperty(dataPropertyNameCustom) && oCustomAndGenericData.hasOwnProperty(dataPropertyNameGeneric)) {
				fnRestoreCustomFilterState(oCustomAndGenericData[dataPropertyNameCustom]);
				fnRestoreGenericFilterState(oCustomAndGenericData[dataPropertyNameGeneric], bApplySearchIfConfigured);
			} else {
				// historic format. May still have property _editStateFilter which was used generically.
				if (oCustomAndGenericData._editStateFilter !== undefined) {
					fnRestoreGenericFilterState({
						editStateFilter: oCustomAndGenericData._editStateFilter
					});
					delete oCustomAndGenericData._editStateFilter;
				}
				fnRestoreCustomFilterState(oCustomAndGenericData);
			}
		}

		// returns a Promise which resolves to an iAppstate-parameter-value pair
		function getUrlParameterInfo(){
			return oAppStateIsSetPromise.then(function(){
				if (oRealizedAppState.appStateKey){
					return {
						"sap-iapp-state": [oRealizedAppState.appStateKey]
					};
				}
				return oRealizedAppState.urlParams;
			});
		}

		// This method is called when some filters or settings are changed (bFilterOrSettingsChange = true) or the data selection for the table is triggered (bDataAreShown = true).
		// It is responsible for:
		// - triggering the creation of a new appState if neccessary
		// - setting global variable bDataAreShownInTable up to date
		function changeIappState(bFilterOrSettingsChange, bDataAreShown){
			if (bIsTransferringUrlStateToPageState){ // the changes are caused by ourselves adopting to the url. So the url needs not to be updated.
				return;
			}
			// if no settings are changed and the data shown state does not change we do not have to do anything (this is the case when the user presses 'Go' and the table is already filled).
			if (bFilterOrSettingsChange || bDataAreShown !== bDataAreShownInTable){
				bDataAreShownInTable = bDataAreShown;
				// Now we have to ensure that the new appstate is set (and put to the url). Therefore, two things have to be done:
				// - bAppStateDirty must be set to true
				// - fnStoreCurrentAppStateAndAdjustURL must be called
				// if bAppStateDirty is already true, we know that fnStoreCurrentAppStateAndAdjustURL is already registered for later execution -> nothing to do
				if (!bAppStateDirty){
					bAppStateDirty = true;
					// if filterbar dialog is open we do not call fnStoreCurrentAppStateAndAdjustURL directly. It has been registered at the filter dialog close event.
					if (!oState.oSmartFilterbar.isDialogOpen()){
						// If we are still in the process of evaluating an iappState in the url trigger the new appstate directly. Otherwise postpone it till the end of the thread.
						// Thus, when several filters are changed in one thread, fnStoreCurrentAppStateAndAdjustURL will only be called once.
						if (fnNotifyRealizedAppStateConsistent){
							fnStoreCurrentAppStateAndAdjustURL();
						} else {
							setTimeout(fnStoreCurrentAppStateAndAdjustURL, 0);
						}
					}
				}
			}
		}

		// This method is called asynchronously from fnParseUrlAndApplyAppState as soon as the appstate-information from the url has been parsed completely.
		// First we check whether the parsed Appstate is still the one which is currently in the url. This is done by comparing
		// the AppStateKey contained in parameter oAppData with sAppStateKeyInUrl. If they are not equal we do not have to deal with this case.
		// Note that there is one exception: During startup due to the order of initialization we do not have sAppStateKeyInUrl set
		// when this function is called. Therefore, the method also does its job, when sAppStateKeyInUrl is still null.
		// Moreover, note that there are two main scenarios in which this method can be called.
		// 1. The AppState in the url has been changed by fnStoreCurrentAppStateAndAdjustURL. This can be detected by oStoringInformation
		// being present and containing the same AppStateKey as oAppData. In this case only oRealizedAppState needs to be adapted.
		// 2. The AppState has been changed by a new url being set (via navigation, bookmarking...). In thsi case the state of the list (filters,...)
		// needs to be adapted.
		function fnAdaptToAppState(fnResolve, oAppData, oURLParameters, sNavType){
			oState.oSmartFilterbar.setSuppressSelection(false);
			var sAppStateKey = oAppData.appStateKey || "";
			if (bIsTransferringUrlStateToPageState){
				return;
			}
			if (sAppStateKeyInUrl === null){ // startup case
				sAppStateKeyInUrl = sAppStateKey;
			} else if (sAppStateKey !== sAppStateKeyInUrl){ // sAppStateKey is already outdated
				return;
			}
			bIsTransferringUrlStateToPageState = true;
			var sSelectedTabKey; // needed for table tabs
			var sSelectionVariant =  oAppData.selectionVariant || "";
			var sTableVariantId = (!bSmartVariantManagement && oAppData.tableVariantId) || "";
			var oNewUrlParameters = (!sAppStateKey && oURLParameters) || {};
			// if there is a navigation from external application to worklist,
			// the filters from external application should not be applied since the worklist does not show smartfilterbar
			// and there is no way for the user to modify the applied filters. Hence not applying the filters only if it is worklist
			if (!oState.bWorkListEnabled) {
			if ((oRealizedAppState.appStateKey !== sAppStateKey ||
				oRealizedAppState.selectionVariant !== sSelectionVariant ||
				oRealizedAppState.tableVariantId !== sTableVariantId ||
				fnNotEqual(oRealizedAppState.urlParams, oNewUrlParameters)) && sNavType !== sap.ui.generic.app.navigation.service.NavType.initial) {
				if (!oStoringInformation || oStoringInformation.appStateKey !== sAppStateKey){
					var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
					if (oAppData.oSelectionVariant && oRealizedAppState.selectionVariant !== sSelectionVariant){
						var aSelectionVariantProperties = oAppData.oSelectionVariant.getParameterNames().concat(
							oAppData.oSelectionVariant.getSelectOptionsPropertyNames());
						for (var i = 0; i < aSelectionVariantProperties.length; i++) {
							oState.oSmartFilterbar.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
						}
					}

					if (bHasOnlyDefaults && oState.oSmartFilterbar.isCurrentVariantStandard()){
						// given variant has only default values (set by user in FLP), and variant (already loaded) is not user specific
						// => default values have to be added without removing existing values (but overriding them if values for the same filter exist)
						oState.oSmartFilterbar.setDataSuiteFormat(sSelectionVariant);
					} else if (!bHasOnlyDefaults || oState.oSmartFilterbar.isCurrentVariantStandard()) {
						// A default variant could be loaded.
						oState.oSmartFilterbar.clearVariantSelection();
						oState.oSmartFilterbar.clear();
						oState.oSmartFilterbar.setDataSuiteFormat(sSelectionVariant, true);
					}
					if (sTableVariantId !== oRealizedAppState.tableVariantId) {
						oState.oSmartTable.setCurrentVariantId(sTableVariantId);
					}
					// in case of navigation with URL parameters but no xAppState, no CustomData is provided
					oAppData.customData = oAppData.customData || {};
					if (oAppData.customData[dataPropertyNameGeneric] && oAppData.customData[dataPropertyNameGeneric].tableTabData) {
						sSelectedTabKey = oAppData.customData[dataPropertyNameGeneric].tableTabData.selectedTab;
					}
					if (oState.oIconTabBar && sSelectedTabKey) {
						oState.oIconTabBar.setSelectedKey(sSelectedTabKey);

						// make selected table visible
						var oSmartTableOld, oSmartTableNew;
						oSmartTableOld = oState.oSmartTable;
						oSmartTableNew = oController.byId("listReport-" + sSelectedTabKey);
						if (oSmartTableNew) {
							oState.oSmartTable = oSmartTableNew;
							oSmartTableOld.setVisible(false);
							oState.oSmartTable.setVisible(true);
						}

						// apply table variants also for non-visible tables
						if (oAppData.customData[dataPropertyNameGeneric].tableTabData.tableVariantIds) {
							for (var j in oState.aSmartTables) {
								var oTmpTable = oState.aSmartTables[j];
								var sVariantId = oAppData.customData[dataPropertyNameGeneric].tableTabData.tableVariantIds[oTmpTable.getId()];
								if (sVariantId) {
									oTmpTable.setCurrentVariantId(sVariantId);
								}
							}
						}
					}
					if (oAppData.customData[dataPropertyNameGeneric] && oAppData.customData[dataPropertyNameGeneric].tableViewData) {
						oState.oMultipleViewsSingleTableModeHelper.restoreState(oAppData.customData[dataPropertyNameGeneric].tableViewData);
					}
					fnRestorePageState(oAppData.customData, true);
				}
				oRealizedAppState = {
					appStateKey: sAppStateKey,
					urlParams: oNewUrlParameters,
					selectionVariant: sSelectionVariant,
					tableVariantId: sTableVariantId
				};
			}
			}
			if (fnNotifyRealizedAppStateConsistent){
				fnNotifyRealizedAppStateConsistent();
				fnNotifyRealizedAppStateConsistent = null;
			}

			// If the NavType is iAppState the question of automated data selection is already settled.
			// Otherwise it must be done now. Note that automatisms have been disabled during startup
			// However, if bDataAreShownInTable is already true, the data have already been selected and nothing needs to be done anymore.
			// This is the case in FCL scenarios, when navigating from an automatically filled list to a detail.
			if (sNavType !== sap.ui.generic.app.navigation.service.NavType.iAppState && !bDataAreShownInTable){
				// If the app is reached via cross-app navigation by UX decision the data should be shown immediately
				var bIsCrossAppNavigation = (sNavType === sap.ui.generic.app.navigation.service.NavType.xAppState
					|| sNavType === sap.ui.generic.app.navigation.service.NavType.URLParams) && !oAppData.bNavSelVarHasDefaultsOnly;
				bDataAreShownInTable = bIsCrossAppNavigation || oState.bLoadListAndFirstEntryOnStartup || bIsAutoBinding || oState.oSmartFilterbar.isCurrentVariantExecuteOnSelectEnabled();
				if (bDataAreShownInTable){
					oState.oSmartFilterbar.search();
					//collapse header if execute on select is checked or enableautobinding is set
					collapseLRHeaderonLoad(bDataAreShownInTable);
				}
			}
			oStoringInformation = null;
			fnResolve();
			bIsTransferringUrlStateToPageState = false;
		}

		function fnParseUrlAndApplyAppState(){
			if (!fnNotifyRealizedAppStateConsistent){
				oAppStateIsSetPromise = new Promise(function(fnResolve){
					fnNotifyRealizedAppStateConsistent = fnResolve;
				});
			}
			var oRet = new Promise(function(fnResolve, fnReject){
				var oParseNavigationPromise = oNavigationHandler.parseNavigation();
				oParseNavigationPromise.done(fnAdaptToAppState.bind(null, fnResolve));
				oParseNavigationPromise.fail(fnReject);
			});
			return oRet;
		}

		function onBeforeSFBVariantFetch(){
			/* new event, that is - unless the old onBeforeSFBVariantSave - also called also before the adapt filter
			 * dialog opens. In all other cases, both events are called, so no need to implement onBeforeSFBVariantSave
			 * anymore
			 */
			var oCurrentAppState = getCurrentAppState();
			oState.oSmartFilterbar.setFilterData({
				_CUSTOM: oCurrentAppState.customData
			});
		}

		function onAfterSFBVariantSave(){
			changeIappState(true, bDataAreShownInTable);
		}

		function onAfterSFBVariantLoad(oEvent) {
			var sContext = oEvent.getParameter("context");
			var oData = oState.oSmartFilterbar.getFilterData();
			if (oData._CUSTOM !== undefined) {
				fnRestorePageState(oData._CUSTOM);
			} else {
				// make sure that the custom data are nulled for the STANDARD variant
				var oCustomAndGenericData = getPageState();
				fnNullify(oCustomAndGenericData[dataPropertyNameCustom]);
				fnNullify(oCustomAndGenericData[dataPropertyNameGeneric]);
				fnRestorePageState(oCustomAndGenericData);
			}
			// store navigation context
			if (aIrrelevantVariantLoadContext.indexOf(sContext) < 0) {
				bDataAreShownInTable = oEvent.getParameter("executeOnSelect");
				changeIappState(true, bDataAreShownInTable);
			}
		}

		function onAfterTableVariantSave() {
			if (!bSmartVariantManagement){
				changeIappState(true, bDataAreShownInTable);
			}
		}

		function onAfterApplyTableVariant() {
			if (!bSmartVariantManagement){
				changeIappState(true, bDataAreShownInTable);
			}
		}

		// This method is called by the NavigationController when a new url is caught. It is the task of this method to provide the information, whether
		// the url change is just an appstate-change which can be handled by this class alone. In this case whole route-matched logic would not be started.
		// Whether this is the case is found out by checking whether oStoringInformation is currently truthy and contains the same AppStateKey as the url.
		// If this is the case we direrctly call fnParseUrlAndApplyAppState. Otherwise, it will be called later via the ComponentActivate.
		// Anyway we use this method to keep sAppStateKeyInUrl up to date.
		function isStateChange(oEvent){
			var oArguments = oEvent.getParameter("arguments");
			var oQuery = oArguments && oArguments["?query"];
			sAppStateKeyInUrl = (oQuery && oQuery["sap-iapp-state"]) || ""; // better get a Denver API for this
			if (oStoringInformation){
				if (oStoringInformation.appStateKey !== sAppStateKeyInUrl){
					jQuery.sap.log.error("ListReport.fnStoreCurrentAppStateAndAdjustURL: Got AppstateKey " + sAppStateKeyInUrl + " expected " + oStoringInformation.appStateKey);
					return false;
				}
				fnParseUrlAndApplyAppState();
				return true;
			}
			return false;
		}

		function onSmartFilterBarInitialise(){
			bIsAutoBinding = oState.oSmartTable.getEnableAutoBinding();
			oState.oSmartFilterbar.attachFiltersDialogClosed(fnStoreCurrentAppStateAndAdjustURL);
		}

		//collapse dynamic header if data is preloaded in LR on launch
		function collapseLRHeaderonLoad(bDataAreShownInTable){
			if (oController && oController.getOwnerComponent && oController.getOwnerComponent().getModel) {
				var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
				if (bDataAreShownInTable) {
					// if data is shown, collapse header
					oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", false);
				} else {
					// if no data is shown on load, expand header
					oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", true);
				}
			}
		}

		// Make the getCurrentAppState function available for others via the oState object
		oState.getCurrentAppState = getCurrentAppState;

		return {
			areDataShownInTable: areDataShownInTable,
			parseUrlAndApplyAppState: fnParseUrlAndApplyAppState,
			getUrlParameterInfo: getUrlParameterInfo,
			changeIappState: changeIappState,
			onSmartFilterBarInitialise: onSmartFilterBarInitialise,
			onBeforeSFBVariantFetch: onBeforeSFBVariantFetch,
			onAfterSFBVariantSave: onAfterSFBVariantSave,
			onAfterSFBVariantLoad: onAfterSFBVariantLoad,
			onAfterTableVariantSave: onAfterTableVariantSave,
			onAfterApplyTableVariant: onAfterApplyTableVariant,
			isStateChange: isStateChange
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ListReport.controller.IappStateHandler", {
		constructor: function(oState, oController, oNavigationHandler) {
			jQuery.extend(this, getMethods(oState, oController, oNavigationHandler));
		}
	});
});

}; // end of sap/suite/ui/generic/template/ListReport/controller/IappStateHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.MultipleViewsSingleTableModeHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.MultipleViewsSingleTableModeHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/MultipleViewsSingleTableModeHelper",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/*
		 * This class is a helper class for the controller of the ListReport. More, precisely an instance of
		 * this class is created in onInit of the ListReport controller. That controller forwards all tasks
		 * connected to the single table mode of the multiple views feature to this instance.
		 * Note that, if the mode is switched on, it is realized either by a sap.m.SegmentedButton or by a sap.m.Select.
		 * The decision which control is used is taken while the view is templated. Thus, it is already available when the
		 * corresponding instance is created.
		 */

		function getMethods(oState, oController, oTemplateUtils) {
			// Begin: Instance variables
			
			// Variables set in the constructor and not changed afterwards
			var oImplementingControl; // the control (SegmentedButton or Select) realizing the feature (resp. undefined if mode is not switched on)
			var aPossibleItems; // list of items belonging either to oImplementingControl (resp. undefined if the mode is not switched on).
			var bIsControlSegmentedButton; // true if the logic is realized via a SegmentedButton
			var fnOnDataReceived = jQuery.noop; // default. Will be overwritten in constructor, if necessary
			var mItemData;
			
			// Variables representing the current state
			var oCurrentBindingParams = {}; // to send the correct $count requests, we need to access the current binding parameters

			// End: Instance variables

			// Begin private instance methods
			
			// Update the texts on all buttons/variants
			function fnUpdateCounts() {
				var oModel = oState.oSmartTable.getModel();
				var sTableEntitySet = oState.oSmartTable.getEntitySet();
				var sSearchValue = oState.oSmartFilterbar.getBasicSearchValue();
				var oSearch = {};
				if (sSearchValue !== "") {
					oSearch = {
						"search": sSearchValue
					};
				}
				for (var sKey in mItemData) {
					var oItemData = mItemData[sKey];
					oItemData.numberOfUpdates++;
					oItemData.updateStartFunction(oItemData.numberOfUpdates); // set counter busy
					var aFilters = oCurrentBindingParams.filters.concat(oItemData.selectionVariantFilters); // note, that this does not modify the arrays which are concatenated
					oModel.read("/" + sTableEntitySet + "/$count", {
						urlParameters: oSearch,
						filters: aFilters,
						groupId: "updateMultipleViewSingleTableModeItemCounts",
						success: oItemData.updateSuccessFunction.bind(null, oItemData.numberOfUpdates),
						error: oItemData.errorFunction.bind(null, oItemData.numberOfUpdates)
					});
				}
			}
			
			function onBeforeRebindTable(oEvent) {
				if (!oImplementingControl){ // do not do anything, if mode is switched off
					return;
				}
				var oBindingParams = oEvent.getParameter("bindingParams"); 
				oCurrentBindingParams.filters = oBindingParams.filters.slice(0); // copy filters
				var sKey = oImplementingControl.getSelectedKey();
				var oItemData = mItemData[sKey];
				var aSelectionVariantFilters = oItemData.selectionVariantFilters;
				for (var i in aSelectionVariantFilters) {
					oBindingParams.filters.push(aSelectionVariantFilters[i]);
				}
			}
			
			// event which is raised, when selection is changed
			function onAfterVariantChanged(oEvent) {
				if (bIsControlSegmentedButton){ // in SegmentedButton case the state of the button needs to be updated
					var oSButton = oEvent.getSource();
					var oSegmentedButton = oSButton.getParent();
					oSegmentedButton.setSelectedKey(oSButton.getKey());					
				}
				var bSearchButtonPressed = oState.oIappStateHandler.areDataShownInTable(); 
				if (bSearchButtonPressed) {
					//				as a new variant is selected, we need both - rebind and refresh
					oState.oSmartTable.rebindTable();
					oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
				}
				oState.oIappStateHandler.changeIappState(true, bSearchButtonPressed);
			}
			
			function fnDetermineSortOrder(){
				if (!oImplementingControl){ // do not do anything, if mode is switched off
					return null;
				}
				var sKey = oImplementingControl.getSelectedKey();
				var oItemData = mItemData[sKey];
				return oItemData.templateSortOrder;
			}
			
			// Functions for storing and restoring the state of the controls
			
			function getState(){
				return oImplementingControl && {
					selectedKey: oImplementingControl.getSelectedKey()
				};
			}
			
			function fnRestoreState(oDataToRestore){
				if (!oDataToRestore || !oImplementingControl || !oDataToRestore.selectedKey){
					return;
				}
				oImplementingControl.setSelectedKey(oDataToRestore.selectedKey);
			}
			
			// End of functions for storing and restoring the state of the controls
			
			function getVariantSelectionKey(){
				return oImplementingControl && oImplementingControl.getSelectedKey();	
			}
			
			// formatter for the text on the items
			function formatItemTextForMultipleView(oItemDataModel){
				if (!oItemDataModel){
					return "";
				}
				if (oItemDataModel.state === "error"){
					return oTemplateUtils.oCommonUtils.getText("SEG_BUTTON_ERROR", oItemDataModel.text);
				}
				return oTemplateUtils.oCommonUtils.getText("SEG_BUTTON_TEXT", [oItemDataModel.text, oItemDataModel.state === "busy" ? "..." : oItemDataModel.count]);
			}
			
			// End private instance methods

			(function() { // constructor coding encapsulated in order to reduce scope of helper variables 
				var oConfig = oController.getOwnerComponent().getAppComponent().getConfig();
				var oSettings = oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings;
				var oQuickVariantSelection = oSettings && oSettings.quickVariantSelection;
				if (!oQuickVariantSelection) { // no segmented buttons configured
					return;
				}
				if (!oQuickVariantSelection.variants) {
					throw new Error("Defining QuickVariantSelection without variants in the manifest is not allowed.");
				}
				if (oSettings.quickVariantSelectionX) {
					throw new Error("Defining both QuickVariantSelection and QuickVariantSelectionX in the manifest is not allowed.");
				}
				
				oImplementingControl = oController.byId("template::VariantSelect");
				bIsControlSegmentedButton = !oImplementingControl;
				oImplementingControl = oImplementingControl || oController.byId("template::SegmentedButton");

				aPossibleItems = oImplementingControl.getItems();
				jQuery.sap.log.info("This list supports multiple views with single table");
				var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
				var mItemDataModel = Object.create(null);
				mItemData = Object.create(null);
				var getUpdateFunction = function(sPath, oItemData){
					return function(sState, iNumberOfUpdates, iNewCount){
						if (oItemData.numberOfUpdates !== iNumberOfUpdates){ // this is the response for an outdated request
							return;
						}
						var oItemDataModel = jQuery.extend({}, oTemplatePrivateModel.getProperty(sPath)); // must create a new instance. Otherwise UI5 will not recognize the change
						oItemDataModel.state = sState;
						if (!sState){
							oItemDataModel.count = iNewCount;	
						}
						oTemplatePrivateModel.setProperty(sPath, oItemDataModel);
					};
				};
				for (var i = 0; i < aPossibleItems.length; i++) {
					var oItem = aPossibleItems[i];
					var sKey = oItem.getKey();
					var oItemData = {
						selectionVariantFilters: oTemplateUtils.oCommonUtils.getSelectionVariantFilters(oState.oSmartTable, oItem),
						templateSortOrder: oTemplateUtils.oCommonUtils.getElementCustomData(oItem).TemplateSortOrder
					};
					mItemData[sKey] = oItemData;
					if (oQuickVariantSelection.showCounts){
						var fnUpdateFunction = getUpdateFunction("/listReport/multipleViewsSingleTableMode/" + sKey, oItemData);
						oItemData.numberOfUpdates = 0;
						oItemData.updateStartFunction = fnUpdateFunction.bind(null, "busy");
						oItemData.updateSuccessFunction = fnUpdateFunction.bind(null, "");
						oItemData.errorFunction = fnUpdateFunction.bind(null, "error");
						mItemDataModel[sKey] = {
							text: oTemplateUtils.oCommonUtils.getElementCustomData(oItem).text,
							count: 0,
							state: ""
						};
					}
				}
				if (oQuickVariantSelection.showCounts){
					// Move initial setup of model entry to a point in time, when the creation of the instance is finished, since this will trigger synchronous formatter calls, which are forwarded to this instance
					setTimeout(oTemplatePrivateModel.setProperty.bind(oTemplatePrivateModel, "/listReport/multipleViewsSingleTableMode", mItemDataModel), 0);					
					fnOnDataReceived = fnUpdateCounts;	
				}
			})();

			// public instance methods
			return {
				onDataReceived: fnOnDataReceived,
				onBeforeRebindTable: onBeforeRebindTable,
				onAfterVariantChanged: onAfterVariantChanged,
				determineSortOrder: fnDetermineSortOrder,
				formatItemTextForMultipleView: formatItemTextForMultipleView,
				getState: getState,
				restoreState: fnRestoreState,
				getVariantSelectionKey: getVariantSelectionKey
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ListReport.controller.MultipleViewsSingleTableModeHelper", {
			constructor: function(oState, oController, oTemplateUtils) {
				jQuery.extend(this, getMethods(oState, oController, oTemplateUtils));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/ListReport/controller/MultipleViewsSingleTableModeHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.SmartChartController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.SmartChartController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/SmartChartController",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		/*
		 * This class is a helper class for the controller of the ListReport. More, precisely an instance of
		 * this class is created in onInit of the ListReport controller. That controller forwards all tasks
		 * connected to the smart chart to this instance.
		 */

		function getMethods(oState, oController, oTemplateUtils) {

			function onSmartChartInit() {

				var idx, i, sTabKey, sTableOrChartId, oCurrentControl;
				var oAppComponent = oController.getOwnerComponent().getAppComponent();
				var oConfig = oAppComponent.getConfig();

				if (oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings && oConfig.pages[0].component.settings._quickVariantSelectionX && 
						oConfig.pages[0].component.settings._quickVariantSelectionX.variants) {
					oState.oTableTabData = {
							aTableIsDirty: {},
							oCurrentBindingParams: {} // to send the correct $count requests, we need to access the current binding parameters
						};

					oState.oIconTabBar = oController.byId("template::IconTabBar");
					if (oConfig.pages[0].component.settings._quickVariantSelectionX.showCounts) {
						var aItems = oState.oIconTabBar.getItems();
						for (idx in aItems) {
							fnSetCount(aItems, idx, 0); // initially, set all counts to 0
						}
					}
					oState.aSmartTablesCharts = {};
					for (i in oConfig.pages[0].component.settings._quickVariantSelectionX.variants) {
						sTabKey = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oConfig.pages[0].component.settings._quickVariantSelectionX.variants[i]);
						sTableOrChartId = sap.suite.ui.generic.template.js.AnnotationHelper.getSmartTableId(oConfig.pages[0].component.settings._quickVariantSelectionX.variants[i]);
						oState.aSmartTablesCharts[sTabKey] = oController.byId(sTableOrChartId);
						if (!oState.oSmartTable) { // later rename oSmartTable as it can be both chart and table
							oState.oSmartTable = oState.aSmartTablesCharts[sTabKey]; // the first table is the default table that is initially visible
						} else {
							oState.aSmartTablesCharts[sTabKey].setVisible(false);
						}
						oState.oTableTabData.aTableIsDirty[oState.aSmartTablesCharts[sTabKey].getId()] = false;
					}

					// Attach to “Search” event on SmartFilterBar (in init of the view controller)
					oState.oSmartFilterbar.attachSearch(function(oEvent) {
						oCurrentControl = oState.oSmartTable;
						if (oCurrentControl instanceof sap.ui.comp.smartchart.SmartChart) {
							oCurrentControl.rebindChart(oEvent);
						} else if (oCurrentControl instanceof sap.ui.comp.smarttable.SmartTable) {
							oCurrentControl._reBindTable(oEvent);
						}
						if (oConfig.pages[0].component.settings._quickVariantSelectionX.showCounts) {
							fnUpdateTableTabCounts();
						}
						for (i in oState.oTableTabData.aTableIsDirty) {
							oState.oTableTabData.aTableIsDirty[i] = true;
						}
						oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()] = false;
						oState.oTableTabData.searchButtonPressed = true;


					});
					if (oConfig.pages[0].component.settings._quickVariantSelectionX.enableAutobinding) {
						oState.oSmartFilterbar.search(); //trigger enableAutobinding without getting a cancelled batch request 
					}
				}
			}

			function onChartSelectData(oEvent) {
				var oChart = oEvent.getSource();
				var oSmartChart = oChart.getParent();
				oState.fnUpdateTableOnSelectionChange(oSmartChart);
			}

			//replace it later with the existing function in Controller 
			function fnSetCount(aFilterTabs, index, oData) {
				aFilterTabs[index].setCount(oData);
			}

			//replace it later with the existing function in Controller
			function fnUpdateTableTabCounts() {
				var iTabIdx, i, sTableEntitySet;
				var oModel = oState.oSmartTable.getModel();
				var oIconTabBar = oController.byId("template::IconTabBar");
				var aFilterTabs = oIconTabBar.getItems();

				for (iTabIdx in aFilterTabs) {
					var aFilters = [];
					var oTmpTable = oController.byId("listReport-" + aFilterTabs[iTabIdx].getKey());
					var aSelectionVariantFilters = oTemplateUtils.oCommonUtils.getSelectionVariantFilters(oTmpTable);
					for (i in oState.oTableTabData.oCurrentBindingParams.filters) {
						aFilters.push(oState.oTableTabData.oCurrentBindingParams.filters[i]); // copy array content to prevent call by reference
					}
					for (i in aSelectionVariantFilters) {
						aFilters.push(aSelectionVariantFilters[i]);
					}
					sTableEntitySet = oTmpTable.getEntitySet();
					oModel.read("/" + sTableEntitySet + "/$count", {
						urlParameters: oState.oTableTabData.oCurrentBindingParams.parameters.select, // not needed, but for improving performance?
						filters: aFilters,
						groupId: "updateTabCounts",
						success: fnSetCount.bind(null, aFilterTabs, iTabIdx),
						error: function(oData, oResponse) {
							// clarify: how to indicate/handle errors?
						}
					});
				}
			}

			function onDetailsActionPress(oEvent) {
				var oEventSource = oEvent.getSource();
				var oBindingContext = oEvent.getParameter("itemContexts") && oEvent.getParameter("itemContexts")[0];
				oState.oTemplateUtils.oCommonEventHandlers.onListNavigate(oEventSource, oState, oBindingContext);
			}

			// public instance methods
			return {
				onSmartChartInit: onSmartChartInit,
				onChartSelectData: onChartSelectData,
				onDetailsActionPress: onDetailsActionPress
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ListReport.controller.SmartChartHelper_PoC", {
			constructor: function(oState, oController, oTemplateUtils) {
				jQuery.extend(this, getMethods(oState, oController, oTemplateUtils));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/ListReport/controller/SmartChartController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Non draft transaction controller to be used in extensions of ListReport. Breakout coding can access an instance of
	 * this class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * Note: Only one object can be edited at a given point in time.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var sEditingStatus = "none";

		function fnEditFinished() {
			sEditingStatus = "none";
		}

		return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController.prototype */ {
			/**
			 * Start editing one list entry
			 * 
			 * @param {sap.ui.model.Context} oContext the context identifying the entry to be edited
			 * @public
			 */
			edit: function(oContext) {
				if (!oContext) {
					throw new Error("Nothing to edit provided");
				}
				if (sEditingStatus !== "none") {
					throw new Error("Attempt to edit multiple contexts (" + oContext + ")");
				}
				if (oController.getView().getModel().hasPendingChanges()) {
					throw new Error("Attempt to edit while already pending changes exist");
				}
				sEditingStatus = "editing";
			},
			/**
			 * Cancel editing
			 * 
			 * @public
			 */
			cancel: function() {
				if (sEditingStatus !== "editing") {
					throw new Error("Nothing edited");
				}
				oTemplateUtils.oServices.oTransactionController.resetChanges();
				fnEditFinished();
			},
			/**
			 * Save the changes which have been applied to the OData model. Sets the application busy during execution 
			 * and doesn't execute if application is already busy when called (i.e. don't use <code>ExtensionAPI.securedExecution</code>
			 * to call this method).
			 * 
			 * @return {Promise} is resolved when entry is successfully saved and rejected when saving fails
			 * @public
			 */
			save: function() {
				
				var fnFunction = function() {
					if (sEditingStatus !== "editing") { throw new Error("Nothing edited"); }
					sEditingStatus = "saving";
					var oPromise = oTemplateUtils.oServices.oTransactionController.triggerSubmitChanges();
					oPromise.then(fnEditFinished, function() {
						sEditingStatus = "editing";
					});
					return oPromise;
				};

				// set default values for parameters
				var mParameters = {};
				mParameters = jQuery.extend(true, {
					busy: {
						set: true,
						check: true
					},
					dataloss: {
						popup: false,
						navigation: false
					}
				}, mParameters);

				return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 *
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the activate event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Detach a handler from the activate event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterActivate: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterActivate", fnFunction);
			},
			/**
			 * Attach a handler to the discard event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the discard event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			},
				/**
			 * Attach a handler to the delete event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 *
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * perform a draft saving operation, executed in a sequential order
			 *
			 * @param {function} fnFunction function that saves the draft and returns a promise
			 * @public
			 * @experimental
			 */
			saveDraft: function(fnFunction) {
				oTemplateUtils.oServices.oApplicationController.addOperationToQueue(fnFunction, {draftSave : true});
			},
			/**
			 * Cancel the draft. Note that this method only works when you are on the root of a draft.
			 * The normal navigation which follows the cancellation of a draft is executed.
			 * Moreover, note that executing this method will set the App to be busy. However, it does not ensure, that
			 * the method is only called, when the App is currently unbusy. If you want to ensure that, you have to use
			 * {@link sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI#securedExecution}.
			 *
			 * @return {function} a promise that is resolved when the draft is cancelled, rejected when this is not possible.
			 * @public
			 * @experimental
			 */
			discardDraft: function(){
				return oTemplateUtils.oCommonEventHandlers.discardDraftWithoutDialog();                         	
			},
			/**
			 * checks if side effects exist for the given properties or entities and executes them. if there are
			 *  pending changes in the model those pending changes are sent as a patch request with the side effect
			 *  batch request. If no source property and no source entity is passed a global side effect is executed
			 *
			 * @param {object} [oSideEffects] object containing any of the following properties:
			 * @param {array}  oSideEffects.sourceProperties array with property paths
			 * @param {array}  oSideEffects.sourceEntities array with navigation property paths
			 * @public
			 * @experimental
			 */
			executeSideEffects: function(oSideEffects) {
				oSideEffects = oSideEffects || {};
				oTemplateUtils.oServices.oApplicationController.executeSideEffects(oController.getView().getBindingContext(),oSideEffects.sourceProperties, oSideEffects.sourceEntities, false);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController", {
		constructor: function(oTemplateUtils, oController) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * Non Draft transaction controller to be used in extensions of ObjectPage. Breakout coding can access an instance of this
	 * class via <code>ExtensionAPI.getTransactionController</code>. Do not instantiate yourself.
	 * 
	 * @class
	 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController.prototype */	{
			/**
			 * Attach a handler to the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Detach a handler from the save event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterSave: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterSave", fnFunction);
			},
			/**
			 * Attach a handler to the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Detach a handler from the delete event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterDelete: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterDelete", fnFunction);
			},
			/**
			 * Attach a handler to the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			attachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.attach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Detach a handler from the cancel event
			 * 
			 * @param {function} fnFunction the handler function
			 * @public
			 */
			detachAfterCancel: function(fnFunction) {
				oTemplateUtils.oComponentUtils.detach(oController, "AfterCancel", fnFunction);
			},
			/**
			 * Registers a function that provides information whether there are unsaved custom data
			 * 
			 * This method must be used when an extension ui may contain user input that is <b>not</b> bound to
			 * the standard OData model of the app.
			 * In this case a function must be provided that returns the information whether the extension ui still
			 * contains unsaved user changes.
			 * @param {function} fnHasUnsavedData Callback function returning either true or false
			 * @public
			 */
			registerUnsavedDataCheckFunction: function(fnHasUnsavedData) {
				oState.aUnsavedDataCheckFunctions.push(fnHasUnsavedData);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock",['sap/uxap/BlockBase'],
	function (BlockBase) {
		"use strict";

		var DummyBlock = BlockBase.extend("sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock", {
			metadata: {
				views: {
					Collapsed: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					},
					Expanded: {
						viewName: "sap.suite.ui.generic.template.ObjectPage.view.fragments.DummyBlock",
						type: "XML"
					}
				}
			}.fragments
		});

		return DummyBlock;

	});
}; // end of sap/suite/ui/generic/template/ObjectPage/view/fragments/DummyBlock.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component') ) {
jQuery.sap.require('sap.ui.generic.app.AppComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component");

sap.ui.generic.app.AppComponent.extend("sap.suite.ui.generic.template.app.blankAnalyticalListPage.Component", {
	metadata: {
		manifest: "json"
	}
});
}; // end of sap/suite/ui/generic/template/app/blankAnalyticalListPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.NavigationController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/NavigationController",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";
	/**
	 * API to be used for navigation in extensions of Smart Template Applications. Breakout coding can access an instance
	 * of this class via {@link sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI} or
	 * {@link sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI}. Do not instantiate yourself.
	 * @class
	 * @name sap.suite.ui.generic.template.extensionAPI.NavigationController
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		return /** @lends sap.suite.ui.generic.template.extensionAPI.NavigationController.prototype */ {
			/**
			 * Navigates to the given intent
			 * 
			 * @param {string} sOutbound The name of the outbound defined in the manifest
			 * @param {object} [mParameters] map with parameters for the navigation. If no parameters are provided, default are the parameters defined in the manifest
			 * @public
			 */
			navigateExternal: function(sOutbound, mParameters) {
				var oManifestEntry = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app");
				var oOutbound = oManifestEntry.crossNavigation.outbounds[sOutbound];

				if (!oOutbound) {
					jQuery.sap.log.error("navigateExternal: mandatory parameter 'Outbound' is missing, or different from manifest entry");
					return;
				}

				if (mParameters){
					oOutbound.parameters = mParameters;
				} else {
					// todo: evaluate parameters
				}
				oTemplateUtils.oCommonUtils.navigateExternal(oOutbound, oState);
			},
			/**
			 * Triggers a navigation to another page within the application
			 * 
			 * @param {sap.ui.model.Context | String} vContext The target context for the navigation
			 * @param {object} [oNavigationData] object containing navigation data
			 * @param {string} [oNavigationData.navigationProperty] The navigation property identifying the target of the navigation
			 * @param {boolean} [oNavigationData.replaceInHistory] If this is truthy the page navigated to will replace the current page in the browser history
			 * @public
			 */
			navigateInternal: function(vContext, oNavigationData) {
				oTemplateUtils.oCommonUtils.navigateToContext(vContext, oNavigationData);
			},
			
			getCurrentKeys: function(){
				return oTemplateUtils.oComponentUtils.getCurrentKeys();
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.extensionAPI.NavigationController", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));
		}
	});
});
}; // end of sap/suite/ui/generic/template/extensionAPI/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.UIMode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides inactive support for controls
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.UIMode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/UIMode",[], function() {
    "use strict";
	/**
	 * Enumeration for uimode of SmartTemplates
	 * 
	 * The uimode describes the state of the UI in regards of the currently displayed
	 * object instance (e.g. a Sales Order, a Contact or a Purchasing Document)
	 * @readonly
	 * @enum {string}
	 */
	var UIMode = {
		//** The object instance has just been created */
		Create: "Create",
		//** The object instance is displayed read only
		Display: "Display",
		//** The object instance is open for editing
		Edit: "Edit"
	};

	return UIMode;
});
}; // end of sap/suite/ui/generic/template/extensionAPI/UIMode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.fragments.MessagePage.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.fragments.MessagePage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/fragments/MessagePage.controller",[
	"sap/ui/core/mvc/Controller"
], function(Controller) {
	"use strict";
	
	// Controller of the EmptyPage view
	return Controller.extend("sap.suite.ui.generic.template.fragments.MessagePage", {
		navButtonPress: function() {
			window.history.back();
		}
	});
});
}; // end of sap/suite/ui/generic/template/fragments/MessagePage.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelper') ) {
(function () {
	"use strict";
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained


	jQuery.sap.declare("sap.suite.ui.generic.template.js.AnnotationHelper");

	function fnExtensionLazyLoadEnabled(sExtensionPointId, oManifestExtend) {
		var oExtension = oManifestExtend[sExtensionPointId];
		var oExtensionGenericInfo = oExtension && oExtension["sap.ui.generic.app"];
		return !!(oExtensionGenericInfo && oExtensionGenericInfo.enableLazyLoading);
	}

	var oAnnotationHelper = {
		getBindingForPath: function (sPath) {
			return "{" + sPath + "}";
		},

		// returns the enablement expression for Delete buttons on Object Page toolbars
		buildDeleteButtonEnablementExpression: function (mFacet, oTabItem) {
			var sButtonId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(mFacet) + "::deleteEntry";
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			if (sSuffix) {
				sButtonId = sButtonId.concat(sSuffix);
			}
			return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
		},

		tabItemHasPresentationVariant: function(oEntityType, sVariantAnnotationPath) {
			var oVariant = oEntityType[sVariantAnnotationPath];
			if (oVariant.PresentationVariant || oVariant.Visualizations || oVariant.SortOrder) {
				return true;
			}
		},

		getPresentationVariantVisualisation: function(oEntityType, sVariantAnnotationPath) {
			var oVariant = oEntityType[sVariantAnnotationPath];
			if (oVariant.PresentationVariant && oVariant.PresentationVariant.Visualizations) {
				// oVariant is SelectionPresentationVariant
				return oVariant.PresentationVariant.Visualizations[0].AnnotationPath.split('#')[1];
			} else if (oVariant.Visualizations) {
				// oVariant is PresentationVariant
				return oVariant.Visualizations[0].AnnotationPath.split('#')[1];
			}
		},

		getPresentationVariantSortOrder: function(oEntityType, sVariantAnnotationPath) {
			var oVariant = oEntityType[sVariantAnnotationPath];
			var oSortOrder;
			if (oVariant.PresentationVariant) {
				// oVariant is SelectionPresentationVariant
				oSortOrder = oVariant.PresentationVariant.SortOrder;
			} else {
				// oVariant is PresentationVariant
				oSortOrder = oVariant.SortOrder;
			}
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSortOrder(oSortOrder);
		},

		// the following getXYId and getIconTabFilterKey/Text methods are needed for the table tab mode to correctly initialize the table instances
		// use same IDs as for non-table-tab mode and add a unique suffix (table tab filter key)
		// TODO move to list report annotation helper
		getSmartTableId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "listReport";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getAnalyticalTableId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "analyticalTable";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getGridTableId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "GridTable";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getTreeTableId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "TreeTable";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getRowActionsId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "rowActions";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getResponsiveTableId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "responsiveTable";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getAddEntryId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "addEntry";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getDeleteEntryId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "deleteEntry";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getShowDetailsId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "showDetails";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getDraftObjectMarkerId: function(oTabItem) {
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			var sResult = "DraftObjectMarker";
			if (sSuffix) {
				sResult = sResult.concat(sSuffix);
			}
			return sResult;
		},

		getBreakoutActionButtonId: function(oCustomAction, oTabItem) {
			if (oCustomAction.id) {
				var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
				var sResult = oCustomAction.id;
				if (sSuffix) {
					sResult = sResult.concat(sSuffix);
				}
				return sResult;
			}
		},

		getIconTabFilterKey: function(oTabItem) {
			if (oTabItem) {
				if (oTabItem.key) {
					return oTabItem.key;
				} else {
					return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oTabItem.annotationPath);
				}
			}
		},

		getSuffixFromIconTabFilterKey: function(oTabItem) {
			var sKey = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oTabItem);
			if (sKey) {
				return "-".concat(sKey);
			} else {
				return "";
			}
		},

		getIconTabFilterText: function(oInterface, oManifestEntry) {
			var oModel = oInterface.getModel();
			var sEntityType = oModel.oData.entityType;
			var oEntityType = oModel.oData.metaModel.getODataEntityType(sEntityType);
			var oSelectionVariant = oEntityType[oManifestEntry.annotationPath];
			if (oSelectionVariant && oSelectionVariant.Text) {
				return oSelectionVariant.Text.String;
			}
		},

		// returns the 'enabled' value for a button based on annotations
		buildAnnotatedActionButtonEnablementExpression: function (mInterface, mDataField, mFacet, mEntityType, bIsPhone, oTabItem) {
			var mFunctionImport, sButtonId, sAction, oMetaModel;

			// WORKAROUND: as analytical table/chart is not yet fully capable of supporting applicable path (issues with analytical binding), we always set enabled to true
			if (mEntityType && mEntityType["sap:semantics"] === "aggregate" && !bIsPhone) {
				return true;
			}
			// END OF WORKAROUND

			sAction =  mDataField && mDataField.Action && mDataField.Action.String;
			if (sAction) {
				sButtonId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartForDatafieldActionButton(mDataField, mFacet, oTabItem);
				 // if RecordType is UI.DataFieldForIntentBasedNavigation and RequiresContext is not "false" (default value is "true") then return binding expression
				if (mDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
					if (!mDataField.RequiresContext || mDataField.RequiresContext.Bool !== "false") {
						return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
					}
				} else if (mDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
					oMetaModel = mInterface.getInterface(0).getModel();
					mFunctionImport = oMetaModel.getODataFunctionImport(sAction);
					 // if RecordType is UI.DataFieldForAction and if sap:action-for is defined then return binding expression
					if (!mFunctionImport) {
						jQuery.sap.log.error("The function import " + sAction + " is not defined in the metadata. Buttons that call this function import will not behave as expected.");
					} else if (mFunctionImport["sap:action-for"] && mFunctionImport["sap:action-for"] !== "" && mFunctionImport["sap:action-for"] !== " ") {
						return "{= !!${_templPriv>/generic/controlProperties/" + sButtonId + "/enabled}}";
					}
				}

				return true; // default enabled value for annotated actions
			}
		},

		getLabelForDFwithIBN: function (oInterface, oDataField, oEntitySet, oGroupFacet) {
			var oModel, oTargetEntitySet, oEntityType, oProperty, sResult;
			if (oDataField.Label) {
				return oDataField.Label.String;
			} else {
				oModel = oInterface.getInterface(0).getModel();
				if (oModel && oEntitySet) {
					if (oGroupFacet && oGroupFacet.Target && oGroupFacet.Target.AnnotationPath) {
						oTargetEntitySet = sap.suite.ui.generic.template.js.AnnotationHelper.getTargetEntitySet(oModel, oEntitySet, oGroupFacet.Target.AnnotationPath);
						oEntityType = oModel.getODataEntityType(oTargetEntitySet.entityType);
					} else {
						oEntityType = oModel.getODataEntityType(oEntitySet.entityType);
					}
					if (oDataField.Value && oDataField.Value.Path) {
						oProperty = oModel.getODataProperty(oEntityType, oDataField.Value.Path);
						sResult = oProperty["sap:label"] || (oProperty["com.sap.vocabularies.Common.v1.Label"] || "").String || "";
						return sResult;
					}
				}
			}
		},

		getLinkTextForDFwithIBN: function(oInterface, oDataField, oEntitySet, oGroupFacet) {
			var oEntityType, oTargetEntitySet, oProperty, sResultPath;
			var oModel = oInterface.getInterface(0).getModel();
			if (oModel && oEntitySet) {
				if (oGroupFacet && oGroupFacet.Target && oGroupFacet.Target.AnnotationPath) {
					oTargetEntitySet = sap.suite.ui.generic.template.js.AnnotationHelper.getTargetEntitySet(oModel, oEntitySet, oGroupFacet.Target.AnnotationPath);
					oEntityType = oModel.getODataEntityType(oTargetEntitySet.entityType);
				} else {
					oEntityType = oModel.getODataEntityType(oEntitySet.entityType);
				}
				if (oDataField.Value && oDataField.Value.Path) {
					oProperty = oModel.getODataProperty(oEntityType, oDataField.Value.Path);
					sResultPath = oProperty["sap:text"] || (oProperty["com.sap.vocabularies.Common.v1.Text"] || oDataField.Value).Path || "";
					return "{" + sResultPath + "}";
				}
			}
		},

		getTargetEntitySet: function(oModel, oSourceEntitySet, sAnnotationPath) {
			var aNavigationProperty, sNavigationProperty, oEntityType, oAssociationEnd;
			aNavigationProperty = sAnnotationPath.split('/');
			if (aNavigationProperty.length > 1) {
				sNavigationProperty = aNavigationProperty[0];
			}
			if (sNavigationProperty) {
				oEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);
				oAssociationEnd = oModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					return oModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			}
			return oSourceEntitySet;
		},

		// returns the applicable-path - which is set to the property 'requestAtLeastFields' on the SmartChart
		// the requestAtLeastFields property will add to the $select OData parameter in order to get the necessary data
		getApplicablePathForChartToolbarActions: function (oInterface, mChartAnnotation, sEntityType) {
			var oMetaModel = oInterface.getInterface(0).getModel();
			var mEntityType = oMetaModel.getODataEntityType(sEntityType);
			var aActions = (mChartAnnotation && mChartAnnotation.Actions) || [];
			var sFunctionImport, mFunctionImport, mODataProperty, aFunctionImport = [], aApplicablePath = [], sApplicablePath;

			// check each annotation for UI.DataFieldForAction and verify that Inline & Determining are not set to true, which will imply that the Action is a toolbar action (based on Actions Concept)
			for (var i = 0; i < aActions.length; i++) {
				if (aActions[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" &&
						(!aActions[i].Inline || aActions[i].Inline.Bool !== "true") && (!aActions[i].Determining || aActions[i].Determining.Bool !== "true")) {
					sFunctionImport = aActions[i].Action && aActions[i].Action.String;
					mFunctionImport = oMetaModel.getODataFunctionImport(sFunctionImport);
					if (mFunctionImport) {
						aFunctionImport.push(mFunctionImport);
					}
				}
			}

			for (var i = 0; i < aFunctionImport.length; i++) {
				// verify that both the sap:action-for and sap:applicable-path annotation are applied to the function import
				mFunctionImport = aFunctionImport[i];
				if (mFunctionImport &&
					mFunctionImport["sap:action-for"] && mFunctionImport["sap:action-for"] !== "" && mFunctionImport["sap:action-for"] !== " " &&
					mFunctionImport["sap:applicable-path"] && mFunctionImport["sap:applicable-path"] !== "" && mFunctionImport["sap:applicable-path"] !== " ") {
					sApplicablePath = mFunctionImport["sap:applicable-path"];
					mODataProperty = oMetaModel.getODataProperty(mEntityType, sApplicablePath);

					// the applicable-path needs to point to a property that has the annotation 'sap:aggregation-role' equal to 'dimension' (and not 'measure' for example)
					if (mODataProperty && mODataProperty["sap:aggregation-role"] === "dimension") {
						aApplicablePath.push(sApplicablePath);
					} else {
						jQuery.sap.log.error("AnnotationHelper.js - method getApplicablePathForChartToolbarActions: the applicable-path " + sApplicablePath +
							" is either pointing to an entity type property which doesn't exist or does not have 'sap:aggregation-role' set to to 'dimension'.");
					}
				}
			}

			// if there are applicable paths in aApplicablePath, then return a comma separated string which contains each applicable path - e.g. ["property1", "property2"] -> "property1, property2"
			if (aApplicablePath.length > 0 ) {
				return aApplicablePath.join();
			}
		},

		// build expression binding for bread crumbs
		buildBreadCrumbExpression: function (oContext, oTitle, oTypeName) {
			var sBinding,
				sBindingTitle = sap.ui.model.odata.AnnotationHelper.format(oContext, oTitle);

			if (oTitle && oTitle.Path && oTypeName && oTypeName.String) {
				var sTypeNameEscaped = oTypeName.String.replace(/'/g, "\\'");
				sBinding = "{= $" + sBindingTitle + " ? $" + sBindingTitle + " : '" + sTypeNameEscaped + "' }";
				return sBinding;
			} else {
				// in case of a complex binding of the title we do not introduce our default text fallback
				if (!sBindingTitle) {
					// string "[[no title]]" should never been shown in UI therefore no transaltion needed
					return oTypeName && oTypeName.String || "[[no title]]";
				}
				return sBindingTitle;
			}
		},


		// builds the expression for the Rating Indicator Subtitle
		buildRatingIndicatorSubtitleExpression: function (mSampleSize) {
			if (mSampleSize) {
				return "{parts: [{path: '" + mSampleSize.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorSubTitle'}";
			}
		},

		// returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')
		formatRatingIndicatorSubTitle: function (iSampleSizeValue) {
			if (iSampleSizeValue) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, this.data("Subtitle")]);
				} else {
					var sSubTitleLabel = iSampleSizeValue > 1 ? oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResBundle.getText("RATING_INDICATOR_SUBTITLE_LABEL");
					return oResBundle.getText("RATING_INDICATOR_SUBTITLE", [iSampleSizeValue, sSubTitleLabel]);
				}
			}
		},

		// builds the expression for the Rating Indicator footer
		buildRatingIndicatorFooterExpression: function (mValue, mTargetValue) {
			if (mTargetValue) {
				return "{parts: [{path: '" + mValue.Path + "'}, {path: '" + mTargetValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorFooterText'}";
			}
			return "{parts: [{path: '" + mValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorFooterText'}";
		},

		// returns the text for the Rating Indicator footer (e.g. '2 out of 5')
		// note: the second placeholder (e.g. "5") for the text "RATING_INDICATOR_FOOTER" can come one from the following:
		// i. if the Property TargetValue for the term UI.DataPoint is a Path then the value is resolved by the method buildRatingIndicatorFooterExpression and passed to this method as 'targetValue'
		// ii. if the Property TargetValue is not a Path (i.e. 'Decimal') then we get the value from the control's Custom Data
		// iii. if neither i. or ii. apply then we use the default max value for the sap.m.RatingIndicator control
		formatRatingIndicatorFooterText: function (value, targetValue) {
			if (value) {
				var oResBundle = this.getModel("i18n").getResourceBundle();
				if (targetValue) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, targetValue]);
				} else if (this.getCustomData().length > 0) {
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, this.data("Footer")]);
				} else {
					var iRatingIndicatorDefaultMaxValue = sap.m.RatingIndicator.getMetadata().getPropertyDefaults().maxValue;
					return oResBundle.getText("RATING_INDICATOR_FOOTER", [value, iRatingIndicatorDefaultMaxValue]);
				}
			}
		},

		// builds the expression for the Rating Indicator aggregate Ccunt
		buildRatingIndicatorAggregateCountExpression: function (mValue) {
			return "{parts: [{path: '" + mValue.Path + "'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatRatingIndicatorAggregateCount'}";
		},

		// returns the text for the Rating Indicator aggregated count (e.g. (243))
		formatRatingIndicatorAggregateCount: function (value) {
			var oResBundle = this.getModel("i18n").getResourceBundle();
			var sText;
			if (value) {
				sText = oResBundle.getText("RATING_INDICATOR_AGGREGATE_COUNT", [value]);
			} else if (this.getCustomData().length > 0) {
				sText = oResBundle.getText("RATING_INDICATOR_AGGREGATE_COUNT", [this.data("AggregateCount")]);
			} else {
				sText = "";
			}

			return sText;
		},

		getEditActionButtonVisibility: function (oInterface, mRestrictions, sEntityType, bParameterEdit) {
			//Standard behaviour is that EDIT Button visbility is bound to ui>/editable
			//if an external EDIT has been specified in the manifest with bParameterEdit this can also be restricted by an applicable path
			var	oMetaModel = oInterface.getInterface(0).getModel();

			if (sap.suite.ui.generic.template.js.AnnotationHelper._areUpdateRestrictionsValid(oMetaModel, sEntityType, mRestrictions)) {
				var sUIEditableExpression = "!${ui>/editable}";
				if (mRestrictions) {
					if (mRestrictions.Updatable.Path) {
						sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, mRestrictions.Updatable.Path, sEntityType);
						return "{= ${" + mRestrictions.Updatable.Path + "} ? " + sUIEditableExpression + " : false}";
					} else if (mRestrictions.Updatable.Bool === "false" && !bParameterEdit) {
						return false;
					}
				}
				return "{=" + sUIEditableExpression + "}";
			} else {
				return false;
			}
		},

		/*To get the expression for visibility of delete button in Draft and NonDraft Applications
		In Draft applications, delete button is visible in Display mode on Object page
		in NonDraft applications delete button is visible in Display as well as edit mode.
		*/
		getDeleteActionButtonVisibility: function (oInterface, mRestrictions, sEntityType, bIsDraftEnabled) {
			var	oMetaModel = oInterface.getInterface(0).getModel();
			if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, sEntityType, mRestrictions)) {
				if (bIsDraftEnabled) {
					var sUIEditableExpression = "!${ui>/editable}";
				} else {
					var sUIEditableExpression = "!${ui>/createMode}";
				}
				if (mRestrictions) {
					if (mRestrictions.Deletable.Path) {
						sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, mRestrictions.Deletable.Path, sEntityType);
						return "{= ${" + mRestrictions.Deletable.Path + "} ? " + sUIEditableExpression + " : false}";
					} else if (mRestrictions.Deletable.Bool === "false") {
						return false;
					}
				}
				return "{=" + sUIEditableExpression + "}";
			} else {
				return false;
			}
		},

		/*This Function is to determine the visibility of delete button in sub object page.
		In Draft applications, delete button is visible in edit mode on SubObject page
		in NonDraft applications delete button is visible in Display as well as edit mode.
		*/
		getSubObjPageDeleteActionButtonVisibility: function (oInterface, mRestrictions, sEntityType, bIsDraftEnabled) {
			var	oMetaModel = oInterface.getInterface(0).getModel();
			var sUIEditableExpression;

			if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, sEntityType, mRestrictions)) {
				if (bIsDraftEnabled == true) {
					sUIEditableExpression = "${ui>/editable}";
				} else {
					sUIEditableExpression = "!${ui>/createMode}";
				}
				if (mRestrictions) {
					if (mRestrictions.Deletable.Path) {
						sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, mRestrictions.Deletable.Path, sEntityType);
						return "{= ${" + mRestrictions.Deletable.Path + "} ? " + sUIEditableExpression + " : false}";
					} else if (mRestrictions.Deletable.Bool === "false") {
						return false;
					}
				}
				return "{=" + sUIEditableExpression + "}";
			} else {
				return false;
			}
		},

		getIdForMoreBlockContent : function(oFacet){
			if (oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"] && oFacet["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
				return "::MoreContent";
			}
		},

		checkMoreBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, false);
		},

		checkBlockContent : function(oFacetContext){
			return sap.suite.ui.generic.template.js.AnnotationHelper.checkFacetContent(oFacetContext, true);
		},

		checkFacetContent : function(oFacetContext, bBlock){
			var sPath;
			var oInterface = oFacetContext.getInterface(0);
			var aFacets = oFacetContext.getModel().getProperty("", oFacetContext);

			//for Reference Facets directly under UI-Facets we need to check facets one level higher - by removing the last part of the path
			var aForPathOfFacetOneLevelHigher = oFacetContext.getPath().split("/Facets");
			var sContextOfFacetOneLevelHigher = oInterface.getModel().getContext(aForPathOfFacetOneLevelHigher[0]);
			if (oInterface.getModel().getProperty('', sContextOfFacetOneLevelHigher).RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet"){
				return sContextOfFacetOneLevelHigher.getPath();
			} else {
				if (!aFacets){
					return;
				}

				for (var iFacet = 0; iFacet < aFacets.length; iFacet++) {
					if (!bBlock){
						if (aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] && aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "false"){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					} else {
						if (aFacets[iFacet].RecordType !== "com.sap.vocabularies.UI.v1.ReferenceFacet" || (!aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"] || aFacets[iFacet]["com.sap.vocabularies.UI.v1.PartOfPreview"].Bool === "true")){
							sPath = oInterface.getPath() + "/" + iFacet;
							break;
						}
					}
				}
			}

			return sPath;
		},

        // Checks whether inline-create feature has been configured for the given facet
		isInlineCreate : function(oFacet, oSections){
			var oSettings = oSections[sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet)];
			return !!(oSettings && oSettings.createMode && oSettings.createMode === "inline");
		},

		/**
		 * Function to find out the type of table to be rendered on UI
		 * @param {object} oFacet - Object containing information about a facet
		 * @param {object} oSections - Object containing manifest settings of Object Page
		 */
		determineTableType: function(oFacet, oSections) {
			var oSettings; 				// contains properties of sections in object page
			if (oSections && oSections.sections) {
				oSettings = oSections.sections[sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet)];
			}
			return (oSettings && (((oSettings.tableType || oSettings.treeTable)) || (oSections && oSections.tableType)));
		},

		isImageUrl : function(oPropertyAnnotations) {
			var oShowImage = oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageURL"] || oPropertyAnnotations["com.sap.vocabularies.UI.v1.IsImageUrl"];
			if (oShowImage && oShowImage.Bool && oShowImage.Bool === "false") {
				return false;
			} else if (oShowImage) {
				return true;
			}
			return false;
		},

		// Handling of image urls
		//
		// If images are included in the UI app they need to specify the path relatively (e.g. images/image.jpg) to support
		// different platforms like ABAP and HCP. The relative path has to be used because the absolute paths differ from platform
		// to platform. The rule is if the image url doesn't start with a / or sap-icon:// or http(s):// then it's a relative url and the absolute
		// path has to be added by the framework. This path can be retrieved with jQuery.sap.getModulePath and the component name.

		_addFullPathToImageUrlIfNeeded: function (sImageUrl, sAppComponentName) {
			if (!sImageUrl) {
				return "";
			}
			if ((sImageUrl.substring(0,1) === "/") || (sImageUrl.substring(0,11) === "sap-icon://")
				|| (sImageUrl.substring(0,7) === "http://") || (sImageUrl.substring(0,8) === "https://")) {
				// Absolute URL, nothing has to be changed
				return sImageUrl;
			} else {
				// Relative URL, has to be adjusted
				return jQuery.sap.getModulePath(sAppComponentName, "/") + sImageUrl;
			}
		},

		formatImageUrl: function(oInterface, oImageUrl, sAppComponentName, bExpand) {
			if (oImageUrl && (oImageUrl.Path || oImageUrl.Apply) && bExpand) {
				oAnnotationHelper.formatWithExpandSimple(oInterface, oImageUrl);
			}
			if (oImageUrl && oImageUrl.Path) {
				return "{parts: [{path: '" + oImageUrl.Path + "'}, {path: '_templPrivGlobal>/generic/appComponentName'}], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatImageUrlRuntime'}";
			} else if (oImageUrl && oImageUrl.String) {
				return oAnnotationHelper._addFullPathToImageUrlIfNeeded(oImageUrl.String, sAppComponentName);
			} else if (oImageUrl && oImageUrl.Apply) {
				oImageUrl.Apply.Parameters[0].Value = oAnnotationHelper._addFullPathToImageUrlIfNeeded(oImageUrl.Apply.Parameters[0].Value, sAppComponentName);
				return sap.ui.model.odata.AnnotationHelper.format(oInterface, oImageUrl);
			} else {
				return "";
			}
		},

		formatImageOrTypeUrl: function(oInterface, oInputImageUrl, oTypeImageUrl, sAppComponentName, bExpand) {
			var oImageUrl = null;
			if (oInputImageUrl) {
				oImageUrl = oInputImageUrl;
			} else {
				oImageUrl = oTypeImageUrl;
			}
			return oAnnotationHelper.formatImageUrl(oInterface, oImageUrl, sAppComponentName, bExpand);
		},

		getPathWithExpandFromHeader: function(oInterface, oEntitySet, sNavigationProperty, oInputImageUrl, oTypeImageUrl) {
			var aExpand = [], sNavigationPath;
			if (( oInputImageUrl || oTypeImageUrl )){
				var oInterface = oInterface.getInterface(0);
				var oMetaModel = oInterface.getModel();
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

				//check for the image path
				var oImageUrl = null;
				if (oInputImageUrl) {
					oImageUrl = oInputImageUrl;
				} else {
					oImageUrl = oTypeImageUrl;
				}

				if (oImageUrl && oImageUrl.Path && oEntityType){
					//var oMetaModel = oInterface.getInterface(0).getModel(); does not include the full metamodel
					var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oImageUrl.Path);
					if (sExpand){
						aExpand.push(sExpand);
					}
				}
			}

			if (aExpand.length > 0) {
				if (aExpand.length > 1) {
					//remove duplicates
					aExpand = aExpand.filter(function(elem, index, self) {
					    return index == self.indexOf(elem);
					});
				}
				sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
			} else {
				sNavigationPath = "{ path : '" + sNavigationProperty + "' }";
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		disableSemanticObjectLinksOnPopups: function(oQuickView, oDataField) {
			var sIgnoredFields = "";
			if (oQuickView && oQuickView.ignoredFields &&
				oDataField && oDataField.Value && oDataField.Value.Path	){
				if (oQuickView.ignoredFields[oDataField.Value.Path]){
					sIgnoredFields = oDataField.Value.Path;
				}
			}
			return sIgnoredFields;
		},

		formatImageUrlRuntime: function (sImageUrl, sAppComponentName) {
			return oAnnotationHelper._addFullPathToImageUrlIfNeeded(sImageUrl, sAppComponentName);
		},

		formatHeaderImage: function (oInterface, oHeaderInfo, sAppComponentName) {
			if (oHeaderInfo.ImageUrl) {
				return oAnnotationHelper.formatImageUrl(oInterface, oHeaderInfo.ImageUrl, sAppComponentName, true);
			} else if (oHeaderInfo.TypeImageUrl) {
				return oAnnotationHelper.formatImageUrl(oInterface, oHeaderInfo.TypeImageUrl, sAppComponentName, true);
			} else {
				return "";
			}
		},

		// Handling of image urls - End

		matchesBreadCrumb: function(oInterface, oCandidate, sPath) {
			if (sPath) {
				var aSections = sPath.split("/");
				var oEntitySet, oEntityType, oAssociationEnd;

				if (aSections.length > 0) {
					// there's at least one section left - crate breadcrumbs
					var oMetaModel = oInterface.getInterface(0).getModel();
					var sEntitySet = aSections[0];

					for (var i = 0; i < aSections.length; i++) {
						if (i > 0) {
							oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
							oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
							oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, aSections[i]);
							sEntitySet = oAssociationEnd.entitySet;
						}

						if ((i + 1) === aSections.length) {
							if (sEntitySet === oCandidate.name) {
								return true;
							} else {
								return false;
							}
						}
					}
				}
			}
		},
		showFullScreenButton : function(oRouteConfig, oFacet) {
			if (oRouteConfig && oFacet) {
				var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				if (oRouteConfig.component
						&& oRouteConfig.component.settings
						&& oRouteConfig.component.settings.sections
						&& oRouteConfig.component.settings.sections[sFacetId]
						&& oRouteConfig.component.settings.sections[sFacetId].tableMode === "FullScreenTable") {
					return true;
				}
			}
			return false;
		},
		getPersistencyKeyForSmartTable : function(oRouteConfig) {
			// ListReport
			return "listReportFloorplanTable";
		},
		getCreateNavigationIntent: function (sListEntitySet, aSubPages, sAnnotationPath) {
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'create');
		},
		getDisplayNavigationIntent: function (sListEntitySet, aSubPages, sAnnotationPath) {
			return sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(sListEntitySet, aSubPages, sAnnotationPath, 'display');
		},
		getSubObjectPageIntent: function (sListEntitySet, aSubPages, sAnnotationPath, sMode, hideChevronForUnauthorizedExtNav) {
			// if variable hideChevronForUnauthorizedExtNav is true, then sub object outbound target is returned only if hideChevronForUnauthorizedExtNav (manifest flag) is set to true for the corresponding table.
			var sNavigationProperty;
			if (sAnnotationPath){
				//AnnotationPath is only filled on Object Page which contains facets->annotationPath
				sNavigationProperty = sAnnotationPath.split("/")[0];
			}
			if (sListEntitySet && aSubPages && aSubPages.length > 0) {
				if (sNavigationProperty) {
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && sNavigationProperty === aSubPages[i].navigationProperty && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							if (hideChevronForUnauthorizedExtNav) {
								if (aSubPages[i].component && aSubPages[i].component.settings && aSubPages[i].component.settings.hideChevronForUnauthorizedExtNav) {
									return aSubPages[i].navigation[sMode].target;
								}
							} else {
								return aSubPages[i].navigation[sMode].target;
							}
						}
					}
				} else {
					for (var i = 0; i < aSubPages.length; i++) {
						if (sListEntitySet === aSubPages[i].entitySet && aSubPages[i].navigation && aSubPages[i].navigation[sMode]) {
							if (hideChevronForUnauthorizedExtNav) {
								if (aSubPages[i].component && aSubPages[i].component.settings && aSubPages[i].component.settings.hideChevronForUnauthorizedExtNav) {
									return aSubPages[i].navigation[sMode].target;
								}
							} else {
								return aSubPages[i].navigation[sMode].target;
							}
						}
					}
				}
			}
		},
		extensionPointFragmentExists: function (oFacet, sFragmentId) {
			var sId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (sId === sFragmentId) {
				return true;
			} else {
				return false;
			}
		},
		containsFormWithBreakoutAction: function (oFacetCandidate, sIdCriterion) {
			var sCandidateId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacetCandidate);
			if (sCandidateId === sIdCriterion) {
				if (oFacetCandidate.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet" &&
						oFacetCandidate.Target &&
						oFacetCandidate.Target.AnnotationPath &&
						oFacetCandidate.Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") != -1) {
					return true;
				}
			}
			return false;
		},
		formatWithExpandSimple: function (oInterface, oDataField, oEntitySet) {
			var aExpand = [], sExpand, oEntityType;
			var oMetaModel = oInterface && oInterface.getModel && oInterface.getModel();
			if (!oMetaModel) {
				// called with entity set therefore use the correct interface
				oInterface = oInterface.getInterface(0);
				oMetaModel = oInterface.getModel();
			}

			if (oEntitySet) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				// TODO: check with UI2 if helper to get entity type can be used, avoid using this path
				var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oInterface.getPath());
				if (aMatches && aMatches.length && aMatches[0]) {
					var oEntityTypeContext = oMetaModel.getProperty(aMatches[0]);
					var sNamespace = oMetaModel.getODataEntityContainer().namespace;
					oEntityType = oMetaModel.getODataEntityType(sNamespace + '.' + oEntityTypeContext.name);
				}
			}

			if (oEntityType) {
				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function (oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		formatWithExpand: function (oInterface, oDataField, oEntitySet) {
			sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand(oInterface, oDataField, oEntitySet);

			oInterface = oInterface.getInterface(0);
			sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple(oInterface, oDataField, oEntitySet);
			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		_getNavigationPrefix: function (oMetaModel, oEntityType, sProperty) {
			var sExpand = "";
			var aParts = sProperty.split("/");

			if (aParts.length > 1) {
				for (var i = 0; i < (aParts.length - 1); i++) {
					var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
					if (oAssociationEnd) {
						oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
						if (sExpand) {
							sExpand = sExpand + "/";
						}
						sExpand = sExpand + aParts[i];
					} else {
						return sExpand;
					}
				}
			}

			return sExpand;
		},

		getCurrentPathWithExpand: function (oInterface, oContext, oEntitySetContext, sNavigationProperty ) {
			//oContext is needed to be set for having the correct "context" for oInterface
			oInterface = oInterface.getInterface(0);
			var aExpand = [], sNavigationPath;
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));
			var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);

			aExpand = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetExpand(sResolvedPath, oMetaModel, oEntityType, oEntitySet);

			if (aExpand.length > 0) {
				sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
			} else {
				sNavigationPath = "{ path : '" + sNavigationProperty + "' }";
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getCurrentPathWithExpandForContact: function (oInterface, oContext, oEntitySetContext, sNavigationProperty) {
			var aExpand = [], sNavigationPath;
			/*
			var sAnnotationPath = oContext && oContext.AnnotationPath;
			if (sAnnotationPath && sAnnotationPath.indexOf('/') > -1) {
				sNavigationProperty = sAnnotationPath.slice(0, sAnnotationPath.indexOf('/'));
			}*/

			//oContext is needed to be set for having the correct "context" for oInterface
			oInterface = oInterface.getInterface(0);

			var oMetaModel = oInterface.getModel();
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));
			var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);

			aExpand = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetExpandForContact(sResolvedPath, oMetaModel, oEntityType);

			if (aExpand.length > 0) {
				sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
			} else {
				sNavigationPath = "{ path : '" + sNavigationProperty + "' }";
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getFacetExpandForContact: function (sResolvedPath, oMetaModel, oEntityType) {
			var aExpand = [], oFacetContent;

			var fnGetDependents = function (sPath) {
				if (sPath){
					var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sPath);
					if (sExpand) {
						// check if already in expand array - if not yet add it
						if (aExpand.indexOf(sExpand) === -1) {
							aExpand.push(sExpand);
						}
					}
				}
			};

			if (sResolvedPath && sResolvedPath.indexOf("com.sap.vocabularies.Communication.v1.Contact") > -1) {
				oFacetContent = oMetaModel.getObject(sResolvedPath) || {};
				for (var i in oFacetContent) {
					var sPath;
					var oFacetObject = oFacetContent[i];
					if (oFacetObject && oFacetObject.Path) {
						sPath = oFacetObject.Path;
						fnGetDependents(sPath);
					} else if ( Object.prototype.toString.call( oFacetObject ) === '[object Array]' ){
						for (var j in oFacetObject){
							var oArrayEntry = oFacetObject[j];
							if (oArrayEntry && oArrayEntry.uri && oArrayEntry.uri.Path){
								sPath = oArrayEntry.uri.Path;
							}
							if (oArrayEntry && oArrayEntry.address && oArrayEntry.address.Path){
								sPath = oArrayEntry.address.Path;
							}
							fnGetDependents(sPath);
						}
					}
				}
			}
			return aExpand;
		},

		getCurrentPath: function (sNavigationProperty ) {
			var sNavigationPath = "{ path : '" + sNavigationProperty + "' }";
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getNavigationPathWithExpand: function (oInterface, oContext, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aExpand = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oInterface, oContext);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			} else {
				var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);
			}

			aExpand = sap.suite.ui.generic.template.js.AnnotationHelper.getFacetExpand(sResolvedPath, oMetaModel, oEntityType, oEntitySet);

			if (aExpand.length > 0) {
				if (sNavigationProperty === "") {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}
				} else {
					// add expand to navigation path
					sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
				}
			}
			//needed in Non Draft Case: binding="{}" NOT WORKING - the fields are NOT visible and editable after clicking + in List Report
			//XMLTemplateProcessor also supports empty string
			if (sNavigationPath === "{}"){
				sNavigationPath = "";
			}
			return sNavigationPath;
		},

		getFacetExpand: function (sResolvedPath, oMetaModel, oEntityType, oEntitySet){
			var aDependents = [], aExpand = [], oFacetContent, aFacetContent = [];

			if (sResolvedPath) {
				aFacetContent = oMetaModel.getObject(sResolvedPath) || [];
			}

			aFacetContent = aFacetContent.Data || aFacetContent;

			var fnGetDependents = function (sProperty, bIsValue) {
				var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sProperty);
				if (sExpand) {
					// check if already in expand array - if not yet add it
					if (aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
				if (bIsValue) {
					try {
						aDependents = sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths(oMetaModel, oEntitySet, sProperty, true) || [];
					} catch (e) {
						aDependents = [];
					}
					for (var i = 0; i < aDependents.length; i++) {
						if (aExpand.indexOf(aDependents[i]) === -1) {
							aExpand.push(aDependents[i]);
						}
					}
				}
			};

			var fnAnalyzeApplyFunctions = function (oParameter) {
				if (oParameter.Type === "LabeledElement") {
					fnGetDependents(oParameter.Value.Path);
				} else if (oParameter.Type === "Path") {
					fnGetDependents(oParameter.Value);
				}
			};

			for (var i = 0; i < aFacetContent.length; i++) {
				oFacetContent = aFacetContent[i];

				if (oFacetContent.Value && oFacetContent.Value.Path) {
					fnGetDependents(oFacetContent.Value.Path, true);
				}

				if (oFacetContent.Value && oFacetContent.Value.Apply && oFacetContent.Value.Apply.Name === "odata.concat") {
					oFacetContent.Value.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.Action && oFacetContent.Action.Path) {
					fnGetDependents(oFacetContent.Action.Path);
				}

				if (oFacetContent.Target) {
					if (oFacetContent.Target.Path){
						fnGetDependents(oFacetContent.Target.Path);
					}
					if (oFacetContent.Target.AnnotationPath){
						fnGetDependents(oFacetContent.Target.AnnotationPath);
					}
				}

				if (oFacetContent.SemanticObject && oFacetContent.SemanticObject.Path) {
					fnGetDependents(oFacetContent.SemanticObject.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Path) {
					fnGetDependents(oFacetContent.Url.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Apply && oFacetContent.Url.Apply.Parameters) {
					oFacetContent.Url.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}


				if (oFacetContent.UrlContentType && oFacetContent.UrlContentType.Path) {
					fnGetDependents(oFacetContent.UrlContentType.Path);
				}

			}

			if (aFacetContent.name) {
				fnGetDependents(aFacetContent.name, true);
			}

			return aExpand;
		},

		isSelf: function (sPath) {
			if (sPath === undefined || (sPath && sPath.indexOf('@') === 0 && sPath.indexOf('/') === -1)) {
				return true;
			}
			return false;
		},
		// Needed for analytics fragments
		number: function (val) {
			if (!val) {
				return NaN;
			} else if (val.Decimal) {
				return +val.Decimal;
			} else if (val.Path) {
				return '{' + val.Path + '}';
			} else {
				return NaN;
			}
		},
		// Needed for analytics fragments
		formatColor: (function () {
			function formatVal(val) {
				if (!val) {
					return NaN;
				} else if (val.Decimal) {
					return val.Decimal;
				} else if (val.EnumMember) {
					return '\'' + val.EnumMember + '\'';
				} else if (val.Path) {
					return '${' + val.Path + '}';
				} else {
					return NaN;
				}
			}

			function formatCriticality(oDataPoint) {
				var criticality = oDataPoint.Criticality;

				return '{= ' + formatVal(criticality) + ' === \'UI.CriticalityType/Negative\' ? \'Error\' : ' + formatVal(criticality) + '=== \'UI.CriticalityType/Critical\' ? \'Critical\' : \'Good\'}';
			}

			function formatCriticalityCalculation(oDataPoint) {
				var value = formatVal(oDataPoint.Value);
				var oCriticalityCalc = oDataPoint.CriticalityCalculation;

				return '{= (' + value + ' < ' + formatVal(oCriticalityCalc.DeviationRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.DeviationRangeHighValue) + ') ? \'Error\' : (' + value
					+ ' < ' + formatVal(oCriticalityCalc.ToleranceRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.ToleranceRangeHighValue) + ') ? \'Critical\' : \'Good\'}';
			}

			return function (oDataPoint) {
				if (oDataPoint.Criticality) {
					return formatCriticality(oDataPoint);
				} else if (oDataPoint.CriticalityCalculation) {
					return formatCriticalityCalculation(oDataPoint);
				}
			};
		})(),

		_determineColumnIndex: function (oContext) {
			var sColumn = oContext.getPath();
			var iColumnIndex = Number(sColumn.slice(sColumn.lastIndexOf("/") + 1));
			var sLineItem = sColumn.slice(0, sColumn.lastIndexOf("/"));
			var oLineItem = oContext.getModel().getObject(sLineItem);
			var index = 0;
			for (var iRecord = 0; iRecord < iColumnIndex; iRecord++) {
				if ((oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" ||
					oLineItem[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					(!oLineItem[iRecord].Inline || oLineItem[iRecord].Inline.Bool === "false")) {
					//	iColumnIndex--;
					continue;
				} else {
					index++;
				}
			}
			return index;

		},

		createP13NColumnForAction: function (iContext, oDataField) {
			//used by DataFieldForAction, DataFieldWithIntentBasedNavigation, DataFieldForIntentBasedNavigation
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( iContext );
			var sColumnKey = oAnnotationHelper.createP13NColumnKey(oDataField);
			var sP13N = '\\{"columnKey":"' + sColumnKey + '", "columnIndex":"' + iColumnIndex + '", "actionButton":"true" \\}';
			return sP13N;
		},

		// For Personalization and ContactPopUp for contact column
		createP13NColumnForContactPopUp: function (oInterface, oContextSet, oDataField, oDataFieldTarget, sAnnotationPath) {
			var sP13N = "";
			var sNavigation = "";
			var aAdditionalProperties = [];
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel){
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}
			// Make the Column Key unique for the contact. Check if Navigation exist then create P13N from Navigation path adding DatafieldTarget else create P13N from DataFieldTarget
			var sColumnKey = oAnnotationHelper.createP13NColumnKey(oDataField);
			if (sNavigation) {
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + sNavigation;
				sNavigation = sNavigation + "/";
			} else {
				sP13N = '\\{"columnKey":"' + sColumnKey;
			}
			// For the expand property of Navigation, add navigation and DataFieldTarget to the AdditionalProperties of P13N
			if (oDataFieldTarget.fn && oDataFieldTarget.fn.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.fn.Path);
			}
			// Form String to add to P13N from AdditionalProperties Array
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			// Determine column index
			var oContext = oInterface.getInterface(1);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( oContext );
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}
			sP13N += '" \\}'; // add terminator string again
			return sP13N;
		},

		createP13NColumnForIndicator: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue, sAnnotationPath) {
			var sP13N = "";
			var sNavigation = "";
			var aAdditionalProperties = [];
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel){
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}
			var sColumnKey = oAnnotationHelper.createP13NColumnKey(oDataField);
			if (sNavigation) {
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + sNavigation;
				sNavigation = sNavigation + "/";
			} else {
				sP13N = '\\{"columnKey":"' + sColumnKey;
			}
			if (oDataFieldTarget.Value && oDataFieldTarget.Value.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.Value.Path);
			}
			if (oDataFieldTarget.TargetValue && oDataFieldTarget.TargetValue.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.TargetValue.Path);
			}
			if (oDataFieldTarget.Criticality && oDataFieldTarget.Criticality.Path) {
				aAdditionalProperties.push(sNavigation + oDataFieldTarget.Criticality.Path);
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			// Determine column index
			var oContext = oInterface.getInterface(2);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex( oContext );
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}
			sP13N += '" \\}'; // add terminator string again
			return sP13N;
		},
		createP13NColumnForChart: function (oInterface, oContextSet, oDataField, oDataFieldTarget, sAnnotationPath) {
			var sP13N = "", aAdditionalProperties = [], sNavigation = "";
			var oMetaModel = oInterface.getInterface(0).getModel();
			if (oMetaModel) {
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sAnnotationPath);
				}
			}
			var sColumnKey = oAnnotationHelper.createP13NColumnKey(oDataField);
			if (sNavigation) {
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + sNavigation;
				sNavigation = sNavigation + "/";
			} else {
				sP13N = '\\{"columnKey":"' + sColumnKey;
			}
			if (Array.isArray(oDataFieldTarget.Dimensions)) {
				oDataFieldTarget.Dimensions.forEach(function(oDimension){
					aAdditionalProperties.push(sNavigation + oDimension.PropertyPath);
				});
			}
			if (Array.isArray(oDataFieldTarget.Measures)) {
				oDataFieldTarget.Measures.forEach(function(oMeasure){
					aAdditionalProperties.push(sNavigation + oMeasure.PropertyPath);
				});
			}

			if (aAdditionalProperties.length > 0) {
				sP13N += '", "additionalProperty":"' + aAdditionalProperties.join();
			}

			var oContext = oInterface.getInterface(1);
			var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex(oContext);
			if (iColumnIndex) {
				sP13N += '", "columnIndex":"' + iColumnIndex;
			}

			sP13N += '" \\}';

			return sP13N;
		},

		createP13NColumnKey: function (oDataField, oContextProp) {
			var sColumnKey = "";
			var sFioriTemplatePrefix = "template";
			var sSeperator = "::";
			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField"){
				/*
				if (oContextProp && oAnnotationHelper.isImageUrl(oContextProp)){
					//if the columnKey is defined like that, smart table renders an extra picture since it doesn't find the columnKey with only the oDataField.Value.Path
					sColumnKey = sFioriTemplatePrefix + sSeperator + "DataField" + sSeperator + "IsImageURL" + sSeperator + oDataField.Value.Path;
				} else {*/
				//compatible with Smart Table
				/* e.g.
				 * DataField "ProductCategory", "to_StockAvailability/StockAvailability"
				 */
				sColumnKey = oDataField.Value.Path;
				//}
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation"){
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldWithIntentBasedNavigation" + sSeperator + oDataField.SemanticObject.String + sSeperator + oDataField.Action.String + sSeperator + oDataField.Value.Path;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForIntentBasedNavigation" + sSeperator + oDataField.SemanticObject.String + sSeperator + oDataField.Action.String;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction"){
				sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForAction" + sSeperator + oDataField.Action.String;
			} else if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){
				if (oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.Communication.v1.Contact') >= 0 ||
					oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.UI.v1.DataPoint') >= 0		    ||
					oDataField.Target.AnnotationPath.indexOf('@com.sap.vocabularies.UI.v1.Chart') >= 0 ){
					sColumnKey = sFioriTemplatePrefix + sSeperator + "DataFieldForAnnotation" + sSeperator + oDataField.Target.AnnotationPath;
					//since DataFieldForAnnotation can contain an @ and this is not working with SmartTable.prototype._addTablePersonalisationToToolbar, it is removed
					sColumnKey = sColumnKey.replace('@', '');
				}
			}
			return sColumnKey;
		},

		createP13N: function (oInterface, oContextSet, oContextProp, oDataField, oDataFieldTarget, oDataFieldTargetValue) {
			var sP13N = "", aAdditionalProperties = [], sNavigation = "";

			if (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataField" || oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" ||
				oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {

			if (oDataField.Value.Path) {
			    var sColumnKey = oAnnotationHelper.createP13NColumnKey(oDataField, oContextProp);
				sP13N = '\\{"columnKey":"' + sColumnKey + '", "leadingProperty":"' + oDataField.Value.Path;
				// get Navigation Prefix
				var oMetaModel = oInterface.getInterface(0).getModel();
				if (oMetaModel){
					var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
					if (oEntityType){
						sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Value.Path);
						if (sNavigation){
							sNavigation = sNavigation + "/";
						}
					}
				}
			} else if (oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				oDataField.Value.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "Path") {
						if (!sP13N) {
							sP13N = '\\{"columnKey":"' + oParameter.Value + '", "leadingProperty":"' + oParameter.Value;
						} else {
							aAdditionalProperties.push(oParameter.Value);
						}
					}
				});
			}
			if ((oContextProp.type === "Edm.DateTime") && (oContextProp["sap:display-format"] === "Date")) {
				sP13N += '", "type":"date';
			}
			if (oDataField.Criticality && oDataField.Criticality.Path) {
				aAdditionalProperties.push(oDataField.Criticality.Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.Text"] && oContextProp["com.sap.vocabularies.Common.v1.Text"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.Text"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.ISOCurrency"] && oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.Unit"] && oContextProp["Org.OData.Measures.V1.Unit"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.Unit"].Path);
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.FieldControl"] && oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.FieldControl"].Path);
			}

			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Apply && oDataField.Url.Apply.Parameters) {
				oDataField.Url.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "LabeledElement") {
						aAdditionalProperties.push(oParameter.Value.Path);
					}
				});
			}
			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Path) {
				aAdditionalProperties.push(oDataField.Url.Path);
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			var bNotSortable = false;
			if (oContextSet["Org.OData.Capabilities.V1.SortRestrictions"] && oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties) {
				var aNonSortableProperties = oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties;
				for (var i = aNonSortableProperties.length - 1; i >= 0; i--) {
					if (aNonSortableProperties[i].PropertyPath === oDataField.Value.Path) {
						bNotSortable = true;
						break;
					}
				}
			}
			if (!bNotSortable) {
				if (sNavigation) {
					sP13N += '", "sortProperty":"' + sNavigation + oContextProp.name;
				} else {
					sP13N += '", "sortProperty":"' + oContextProp.name;
				}
			}
			var bNotFilterable = false;
			if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"]) {
				if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].Filterable !== 'false') {
					if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties) {
						var aNonFilterableProperties = oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties;
						for (var j = aNonFilterableProperties.length - 1; j >= 0; j--) {
							if (aNonFilterableProperties[j].PropertyPath === oDataField.Value.Path) {
								bNotFilterable = true;
								break;
							}
						}
					}
				} else {
					bNotFilterable = true;
				}
			}
			if (!bNotFilterable) {
				sP13N += '", "filterProperty":"' + oContextProp.name;
			}
			var oContext = oInterface.getInterface(2);
				var iColumnIndex = sap.suite.ui.generic.template.js.AnnotationHelper._determineColumnIndex(oContext);
				if (iColumnIndex >= 0) {
					sP13N += '", "columnIndex":"' + iColumnIndex;
				}
			}
			return sP13N + '" \\}';
		},
		hasActions: function (Par) {
			//Adding Inline check as selection mode should be enabled if DataFieldForAction and DataFieldForIntentBasedNavigation are not inline(in line item) - BCP 1770035232, 1770097243
			for (var i = 0; i < Par.length; i++) {
				if ((!Par[i].Inline || Par[i].Inline.Bool !== "true") && (Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")) {
					return true;
				}
			}
			return false;
		},
		hasCustomActions: function(oRouteConfig, sEntitySet, oManifestExt, oFacet) {
			if (sEntitySet && oManifestExt) {
				if (oFacet) {
					// helper was called from facet (i.e. Object Page table)
					if (oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							// helper was called from fragment (i.e. SmartTable)
							var sFacetId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
							if (!oManifestExtEntitySet.Sections) {
								return false;
							}
							var oSection = oManifestExtEntitySet.Sections[sFacetId];
							if (oSection && oSection.id === sFacetId && oSection.Actions) {
								for (var i in oSection.Actions) {
									if (oSection.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				} else {
					// helper was called from ListReport or AnalyticalListPage
					if (oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]) {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]["sap.ui.generic.app"];
					} else if (oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]) {
						oManifestExt = oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"];
					}
					if (oManifestExt && oManifestExt[sEntitySet]) {
						var oManifestExtEntitySet = oManifestExt[sEntitySet];
						if (oManifestExtEntitySet.EntitySet === sEntitySet) {
							if (oManifestExtEntitySet.Actions) {
								for (var i in oManifestExtEntitySet.Actions) {
									if (oManifestExtEntitySet.Actions[i].requiresSelection !== false) {
										return true;
									}
								}
							}
						}
					}
				}
			}
			return false;
		},
		// Determine selection mode of grid table
		getSelectionModeGridTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig, bIsDraftEnabled) {
			//Removing loop as selection mode should be enabled only if there are some actions for line item  - BCP 1770035232, 1770097243
			if ((sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet))){
				return "Single";
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if (bIsDraftEnabled){
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
						return "{= ${ui>/editable} ? 'Single' : 'None' }";
				}
			} else {
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
					return "{= !${ui>/editable} ? 'Single' : 'None' }";
				}
			}
			return "None";
		},
		// Determine selection mode of Tree table
		getSelectionModeTreeTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig, bIsDraftEnabled) {
			if ((sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet))){
				return "Single";
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if (bIsDraftEnabled){
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
						return "{= ${ui>/editable} ? 'Single' : 'None' }";
				}
			} else {
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
					return "{= !${ui>/editable} ? 'Single' : 'None' }";
				}
			}
			return "None";
		},
		// Determine selection mode of responsive table
		getSelectionModeResponsiveTable: function(aEntities, sRootEntitySet, oManifestExt, oFacet, oEntitySet, oRouteConfig, bIsDraftEnabled) {
			if ((sap.suite.ui.generic.template.js.AnnotationHelper.hasActions(aEntities) || sap.suite.ui.generic.template.js.AnnotationHelper.hasCustomActions(oRouteConfig, sRootEntitySet, oManifestExt, oFacet))){
				return "SingleSelectLeft";
			}
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			if (bIsDraftEnabled){
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
						return "{= ${ui>/editable} ? 'SingleSelectLeft' : 'None' }";
				}
			} else {
				if ((oDeleteRestrictions && oDeleteRestrictions.Deletable && ((oDeleteRestrictions.Deletable.Bool && oDeleteRestrictions.Deletable.Bool !== 'false') || oDeleteRestrictions.Deletable.Path)) || !oDeleteRestrictions){
					return "{= !${ui>/editable} ? 'SingleSelectLeft' : 'None' }";
				}
			}
			return "None";
		},

		getSortOrder: function (Par) {
			var str = '';
			for (var i = 0; i < Par.length; i++) {
				if (!str) {
					str = Par[i].Property.PropertyPath;
				} else {
					str = str + ', ' + Par[i].Property.PropertyPath;
				}
				if (Par[i].Descending) {
					str = str + ' ' + Par[i].Descending.Bool;
				}
			}
			return str;
		},
		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		},
		getStableIdPartFromDataField: function (oDataField) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
			} else if (oDataField.RecordType && (oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")) {
				if (oDataField.SemanticObject.String) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.String);
				} else if (oDataField.SemanticObject.Path) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.Path);
				}
				if (oDataField.Action && oDataField.Action.String) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
				} else if (oDataField.Action && oDataField.Action.Path) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.Path);
				}
				return sIdPart;
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Target.AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Path);
			} else if (oDataField.Value && oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataField.Value.Apply.Parameters.length; i++) {
					if (oDataField.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		},
		getStableIdPartFromDataPoint: function (oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		},
		getStableIdPartFromFacet: function (oFacet) {
			var sHeaderFacetPrefix = "";
			if (typeof this.getContext === "function" && this.getContext() && this.getContext().getPath() && this.getContext().getPath().indexOf("com.sap.vocabularies.UI.v1.HeaderFacets") >= 0) {
				sHeaderFacetPrefix = "headerEditable::";
			}
			if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					// If the ID is missing a random value is returned because a duplicate ID error will be thrown as soon as there is
					// more than one form on the UI.
					jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. You have to set an ID at all collection facets.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return sHeaderFacetPrefix + oFacet.ID.String;
				} else {
					return sHeaderFacetPrefix + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oFacet.Target.AnnotationPath);
				}
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		},
		extensionPointBeforeFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			if (oManifestExtend){
				var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				return oManifestExtend[sExtensionPointId];
			}
			return false;
		},
		extensionPointAfterFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			if (oManifestExtend){
				var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				return oManifestExtend[sExtensionPointId];
			}
			return false;
		},
		getExtensionPointBeforeFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getExtensionPointAfterFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend[sExtensionPointId];
			if (oExtension && oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		isExtensionPointBeforeFacetLazyLoadingEnabled: function (sEntitySet, oFacet, oManifestExtend) {
			return fnExtensionLazyLoadEnabled(
						"BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet),
						oManifestExtend);
		},
		isExtensionPointAfterFacetLazyLoadingEnabled: function (sEntitySet, oFacet, oManifestExtend) {
			return fnExtensionLazyLoadEnabled(
						"AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet),
						oManifestExtend);
		},
		isFacetLazyLoadingEnabled: function (sEntitySet, oFacet, oManifestExtend) {
			if (oManifestExtend){
				var sExtensionPointId = "ReplaceFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
				var oExtension = oManifestExtend[sExtensionPointId];
				if (oExtension) {
					return fnExtensionLazyLoadEnabled(sExtensionPointId, oManifestExtend);
				}
			}
			return true;
		},
		getRepeatIndex: function (oValue) {
			if (oValue && oValue.getPath()) {
				var sPadding = "0000000000";
				var sPaddedIndex = sPadding + ((parseInt(oValue.getPath().substring(oValue.getPath().lastIndexOf("/") + 1), 10) + 1 ) * 10).toString();
				return sPaddedIndex.substr(sPaddedIndex.length - sPadding.length);
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to get index.");
			}
		},
		getColumnListItemTypeForAppropriateDraftScenario: function (bIsDraftEnabled) {
			if (bIsDraftEnabled) {
				return "Navigation";
			} else {
				return "{= ${ui>/editable} ? 'Inactive' : 'Navigation' }";
			}
		},
		getColumnListItemType: function (oListEntitySet, aSubPages, bIsDraftEnabled) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oListEntitySet, aSubPages)) {
				return oAnnotationHelper.getColumnListItemTypeForAppropriateDraftScenario(bIsDraftEnabled);
			} else {
				return "Inactive";
			}
		},
		getColumnListItemTypeForDetailPage : function(oListEntitySet, aSubPages, oManifest, oManifestSettings, bIsDraftEnabled, sAnnotationPath) {
			// check if table has inline external navigation and hideChevronForUnauthorizedExtNav flag is set to true in manifest.
			var hideChevronForUnauthorizedExtNav = true;
			var sRouteConfigName = oManifestSettings && oManifestSettings.routeConfig && oManifestSettings.routeConfig.component.name;
			var sOutboundTarget = sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(oListEntitySet.name, aSubPages, sAnnotationPath, 'display', hideChevronForUnauthorizedExtNav);
			if (sOutboundTarget) {
				var oCrossNavTarget = oManifest["sap.app"].crossNavigation.outbounds[sOutboundTarget];
				var sSemanticObject = oCrossNavTarget.semanticObject;
				var sAction = oCrossNavTarget.action;
				// sPath is the unique key corresponding to the table to bind chevron visibility for that table in templPrivModel.
				var sPath = !!(sAnnotationPath) ? oListEntitySet.name + "::" + sAnnotationPath.split("/")[0] : oListEntitySet.name;
				if (bIsDraftEnabled || (!bIsDraftEnabled && sRouteConfigName == "sap.suite.ui.generic.template.ListReport")) {
					return "{= ${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/" + sPath + "/supported} ? 'Navigation' : 'Inactive'}";
				} else {
					return "{= ${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/" + sPath + "/supported} && !${ui>/editable} ? 'Navigation' : 'Inactive'}";
				}
			} else {
				// check the manifest.json if list report supports a navigation via navigationproperty to an ObjectPage
				sRouteConfigName = oManifestSettings && oManifestSettings.routeConfig && oManifestSettings.routeConfig.component && oManifestSettings.routeConfig.name;
				var bHasNavigationProperty = false;
				aSubPages.forEach(function(oSubPage) {
					if (oSubPage.navigationProperty) {
						bHasNavigationProperty = true;
						return;
					}
				});

				if (sRouteConfigName === "root" && bHasNavigationProperty) {
					return oAnnotationHelper.getColumnListItemTypeForAppropriateDraftScenario(bIsDraftEnabled);
				} else {
					return oAnnotationHelper.getColumnListItemType(oListEntitySet, aSubPages, bIsDraftEnabled);
				}
			}
		},
		// Returns the expression binding/ value for the row action count in the Grid/ Analytical table in the Detail Page for chevron display.
		getRowActionCountForDetailPage : function(oListEntitySet, aSubPages, oManifest, sAnnotationPath, bIsDraftEnabled) {
			// check if table has inline external navigation and hideChevronForUnauthorizedExtNav flag is set to true.
			var hideChevronForUnauthorizedExtNav = true;
			var sOutboundTarget = sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(oListEntitySet.name, aSubPages,sAnnotationPath, 'display', hideChevronForUnauthorizedExtNav);
			if (sOutboundTarget) {
				var oCrossNavTarget = oManifest["sap.app"].crossNavigation.outbounds[sOutboundTarget];
				var sSemanticObject = oCrossNavTarget.semanticObject;
				var sAction = oCrossNavTarget.action;
				// sPath is the unique key corresponding to the table to bind chevron visibility for that table in templPrivModel.
				var sPath = oListEntitySet.name + "::" + sAnnotationPath.split("/")[0];
				if (bIsDraftEnabled) {
					return "{= ${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/" + sPath + "/supported} ? 1 : 0}";
				} else {
					return "{= ${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/" + sPath + "/supported} && !${ui>/editable} ? 1 : 0}";
				}
			} else if (sap.suite.ui.generic.template.js.AnnotationHelper.hasSubObjectPage(oListEntitySet, aSubPages)) {
				if (!bIsDraftEnabled) {
					return "{= ${ui>/editable} ? 0 : 1 }";
				} else {
					return 1;
				}
			} else {
				return 0;
			}
		},
		// Returns the expression binding/value for the row action count in the Grid/ Analytical table in the List Report for chevron display.
		getRowActionCountForListReport : function(oListEntitySet, aSubPages, oManifest,oManifestSettings) {
			if (oManifestSettings.isLeaf === false) { // denotes that List Report has sub pages
				var sAnnotationPath = ""; // Annotation Path is not associated with the List Report
				// check if table has inline external navigation and hideChevronForUnauthorizedExtNav flag is set to true.
				var hideChevronForUnauthorizedExtNav = true;

				var sOutboundTarget = sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjectPageIntent(oListEntitySet.name, aSubPages,sAnnotationPath, 'display', hideChevronForUnauthorizedExtNav);
				if (sOutboundTarget) {
					var oCrossNavTarget = oManifest["sap.app"].crossNavigation.outbounds[sOutboundTarget];
					var sSemanticObject = oCrossNavTarget.semanticObject;
					var sAction = oCrossNavTarget.action;
					var sPath = oListEntitySet.name;
					return "{= ${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/" + sPath + "/supported} ? 1 : 0}";
				} else {
					return 1;
				}
			} else {
				return 0;
			}
		},

		hasSubObjectPage: function (oListEntitySet, aSubPages) {
			var bHasSubObjectPage = false;
			if (oListEntitySet.name && aSubPages && aSubPages.length > 0) {
				aSubPages.forEach(function (oSubPage) {
					if (oListEntitySet.name === oSubPage.entitySet) {
						bHasSubObjectPage = true;
						return bHasSubObjectPage;
					}
				});
			}
			return bHasSubObjectPage;
		},

		// Check for Creatable-Path. Returns either true, false, or creatable-path
		isRelatedEntityCreatable: function (oInterface, oSourceEntitySet, oRelatedEntitySet, aSubPages, oFacet, oSections, bIsDraftEnabled) {

			var result = false;
			var oModel = oInterface.getInterface(0).getModel();
			var oInsertRestrictions = oSourceEntitySet["Org.OData.Capabilities.V1.InsertRestrictions"];
			var oSourceEntityType = oModel.getODataEntityType(oSourceEntitySet.entityType);

			if (oAnnotationHelper.hasSubObjectPage(oRelatedEntitySet, aSubPages) || (oSections && oAnnotationHelper.isInlineCreate(oFacet, oSections))) {
				if (bIsDraftEnabled) {
					result = "{= ${ui>/editable}}";
				} else {
					result = "{= !${ui>/editable}}";
				}


				// check if there are Insert Restrictions.
				if (oInsertRestrictions && oInsertRestrictions.NonInsertableNavigationProperties && oInsertRestrictions.NonInsertableNavigationProperties.length > 0) {
					// find the Insert Restriction for the RelatedEntitySet if available
					for (var i = 0; i < oInsertRestrictions.NonInsertableNavigationProperties.length; i++) {
						var oNavigationProperty = oInsertRestrictions.NonInsertableNavigationProperties[i];
						var sNavigationPropertyPath = sap.suite.ui.generic.template.js.AnnotationHelper._getNonInsertableNavigationPropertyPath(oNavigationProperty);

						if (sNavigationPropertyPath) {	// if Navigation Property Path is undefined, skip this iteration
							var oAssociationSetEnd = oModel.getODataAssociationSetEnd(oSourceEntityType, sNavigationPropertyPath); // get the association set end

							//check if entity set of the Navigation Property Path matches to the input parameter RelatedEntitySet.
							if (oAssociationSetEnd && oAssociationSetEnd.entitySet === oRelatedEntitySet.name) {
								if (oNavigationProperty.If && oNavigationProperty.If.length === 2) { // 2 entries: 1st is the condition and the 2nd is the navigation path
									var oIfCondition = oNavigationProperty.If[0]; // 1st entry is the If condition
									var sFullCreatablePath = oIfCondition.Not ? oIfCondition.Not.Path : oIfCondition.Path;

									// Check if the creatable-path is valid.
									if (sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, oSourceEntitySet.entityType, sFullCreatablePath)) {
										sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sFullCreatablePath, oSourceEntityType.name); // expand the Creatable-Path
										if (bIsDraftEnabled) {
											if (oIfCondition.Not) {
												result = "{= ${ui>/editable} ? ${" + sFullCreatablePath + "} : false}";
											} else {
												result = "{= ${ui>/editable} ? !${" + sFullCreatablePath + "} : false}";
											}
										} else {
											if (oIfCondition.Not) {
												result = "{= !${ui>/editable} ? ${" + sFullCreatablePath + "} : false}";
											} else {
												result = "{= !${ui>/editable} ? !${" + sFullCreatablePath + "} : false}";
											}
										}
									} else {
										result = false; // if the creatable-path is not valid, disable creation; assuming error in the annotations
										jQuery.sap.log.warning("Creatable-Path is not valid. Creation for " + oRelatedEntitySet.name + " is disabled");
									}
								} else {
									result = false; //there is no IF condition therefore the creation for the related entity is disabled
								}
								break; // stop loop
							}
						}
					}
				}
			}
			return result;
		},
		/***************************************************************
			Get the Navigation Property Path from the annotations with IF or not.
		 ***************************************************************/
		_getNonInsertableNavigationPropertyPath: function (oNavigationProperty) {
			var sNavigationPropertyPath;
			if (oNavigationProperty.NavigationPropertyPath) {
				sNavigationPropertyPath = oNavigationProperty.NavigationPropertyPath; // no IF annotation
			} else if (oNavigationProperty.If) {
				sNavigationPropertyPath = oNavigationProperty.If[1].NavigationPropertyPath; // 2nd entry in for the IF is the Navigation Property Path
			}
			return sNavigationPropertyPath;
		},

		areDeleteRestrictionsValid: function (oModel, sEntityType, mRestrictions) {
			// Valid if there is no restrictions,
			var result = !(mRestrictions && mRestrictions.Deletable && mRestrictions.Deletable.Bool && mRestrictions.Deletable.Path) &&
				((!mRestrictions) || (mRestrictions.Deletable && mRestrictions.Deletable.Bool)
					|| (mRestrictions.Deletable && mRestrictions.Deletable.Path && sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, sEntityType, mRestrictions.Deletable.Path)));

			if (!result) {
				jQuery.sap.log.error("Service Broken: Delete Restrictions annotations are invalid. ");
			}
			return result;
		},

		_areUpdateRestrictionsValid: function (oModel, sEntityType, mRestrictions) {
			// Valid if there is no restrictions,
			var result = !(mRestrictions && mRestrictions.Updatable && mRestrictions.Updatable.Bool && mRestrictions.Updatable.Path) &&
				((!mRestrictions) || (mRestrictions.Updatable && mRestrictions.Updatable.Bool)
				|| (mRestrictions.Updatable && mRestrictions.Updatable.Path && sap.suite.ui.generic.template.js.AnnotationHelper._isPropertyPathBoolean(oModel, sEntityType, mRestrictions.Updatable.Path)));

			if (!result) {
				jQuery.sap.log.error("Service Broken: Delete Restrictions annotations are invalid. ");
			}
			return result;
		},

		_isPropertyPathBoolean: function (oModel, sEntityTypeName, sPropertyPath) {
			var sProperty = sPropertyPath;
			var oPathEntityType = oModel.getODataEntityType(sEntityTypeName);
			if (sProperty.indexOf("/") > -1) { // if it's a navigation path, we have to expand to find the right entity type
				var aPathParts = sProperty.split("/");
				for (var j = 0; j < aPathParts.length - 1; j++) {  // go through the parts finding the last entity type;
					var oAssociationEnd = oModel.getODataAssociationEnd(oPathEntityType, aPathParts[j]);
					oPathEntityType = oModel.getODataEntityType(oAssociationEnd.type);
				}
				sProperty = aPathParts[aPathParts.length - 1]; // last entry in array is a property
			}

			var oODataProperty = oModel.getODataProperty(oPathEntityType, sProperty);
			return (oODataProperty && oODataProperty.type === "Edm.Boolean");
		},
		actionControl: function (oInterface, sActionApplicablePath, sEntityType) {
			sap.suite.ui.generic.template.js.AnnotationHelper._actionControlExpand(oInterface, sActionApplicablePath, sEntityType);
			if (sActionApplicablePath) {
				return "{path: '" + sActionApplicablePath + "'}";
			} else {
				return "true";
			}
		},
		_actionControlExpand: function (oInterface, sPath, sEntityType) {
			var aExpand = [], sExpand;
			oInterface = oInterface.getInterface(0);
			var oMetaModel = oInterface.getModel();
			var oEntityType = oMetaModel.getODataEntityType(sEntityType);
			// check if expand is needed
			if (sPath) {
				sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sPath);
				if (sExpand) {
					aExpand.push(sExpand);
				}
			}
			if (aExpand.length > 0) {
				// we analyze a facet that is part of the root context
				// set expand to expand data bag
				var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
				if (oPreprocessorsData) {
					var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
					for (var j = 0; j < aExpand.length; j++) {
						if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
							aRootContextExpand.push(aExpand[j]);
						}
					}
					oPreprocessorsData.rootContextExpand = aRootContextExpand;
				}
			}
		},
		getEntityTypesForFormPersonalization: function (oInterface, oFacet, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aEntityTypes = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var aFacets = [];
			if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" && oFacet.Facets) {
				aFacets = oFacet.Facets;
			} else if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				aFacets.push(oFacet);
			}
			aFacets.forEach(function (oFacet) {
				var sNavigationProperty;
				if (oFacet.Target && oFacet.Target.AnnotationPath && oFacet.Target.AnnotationPath.indexOf("/") > 0) {
					sNavigationProperty = oFacet.Target.AnnotationPath.split("/")[0];
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
					if (oAssociationEnd && oAssociationEnd.entitySet) {
						oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
						if (aEntityTypes.indexOf(oEntitySet.entityType.split(".")[1]) === -1) {
							aEntityTypes.push(oEntitySet.entityType.split(".")[1]);
						}
					}
				} else {
					if (aEntityTypes.indexOf(oEntitySetContext.entityType.split(".")[1]) === -1) {
						aEntityTypes.push(oEntitySetContext.entityType.split(".")[1]);
					}
				}
			});
			return aEntityTypes.join(", ");
		},

		formatHeaderTitle: function(oInterface, oDataField) {
			// return Expression Binding for DefaultTitle in createMode
			return "{parts: [{path: 'ui>/createMode'}, {path: '" + oDataField.Title.Value.Path + "'}], formatter: '._templateFormatters.formatDefaultObjectTitle'}";
		},

		_mapTextArrangement4smartControl: function(sTextArrangementIn) {
			var sTextArrangement = "descriptionAndId";
			switch (sTextArrangementIn) {
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
					sTextArrangement = "idAndDescription";
					break;
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
					sTextArrangement = "idOnly";
					break;
				case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
					sTextArrangement = "descriptionOnly";
					break;
				default:
					break;
			}
			return sTextArrangement;
		},

		getTextArrangementForSmartControl: function (oInterface, oField, refEntitySet, oEntitySet) {
			oInterface = oInterface.getInterface(0);
			var oEntityType;
			var oMetaModel = oInterface.getModel();

			if (refEntitySet.name == undefined) {
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			} else {
				oEntityType = oMetaModel.getODataEntityType(refEntitySet.entityType);
			}

		    var sTextArrangement = "descriptionAndId";
			if  (oMetaModel.getODataProperty(oEntityType, oField.Value.Path)) {
				var oPropertyTextModel = oMetaModel.getODataProperty(oEntityType, oField.Value.Path)["com.sap.vocabularies.Common.v1.Text"];
				// 1. check TextArrangement definition for property
				if (oPropertyTextModel && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"] && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				  sTextArrangement = sap.suite.ui.generic.template.js.AnnotationHelper._mapTextArrangement4smartControl(
										oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
				}
			}
			// 2. check TextArrangement definition for entity type
			if (oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"] && oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				sTextArrangement = sap.suite.ui.generic.template.js.AnnotationHelper._mapTextArrangement4smartControl(
									oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
			}
			return sTextArrangement;
		},

		getTitle: function (oSourceEntityType, oSourceClickedField, sNavigationProperty) {
			var sResult;
			var oTextArrangement = oAnnotationHelper.getTextArrangementObject(oSourceEntityType, oSourceClickedField, sNavigationProperty);
			if (oTextArrangement){
				sResult = oAnnotationHelper.getTitleTextArrangementBindingPath(oTextArrangement.textArrangement, oTextArrangement.propertyPath, oTextArrangement.textPath);
			}
			return sResult;
		},

		getDescription: function (oSourceEntityType, oSourceClickedField, sNavigationProperty) {
			var sResult;
			var oTextArrangement = oAnnotationHelper.getTextArrangementObject(oSourceEntityType, oSourceClickedField, sNavigationProperty);
			if (oTextArrangement){
				sResult = oAnnotationHelper.getDescriptionTextArrangementBindingPath(oTextArrangement.textArrangement, oTextArrangement.propertyPath, oTextArrangement.textPath);
			}
			return sResult;
		},
		getTextArrangementObject: function (oSourceEntityType, oSourceClickedField, sNavigationProperty) {
		    var sTextArrangement, sPropertyPath, sTextPath;
			if (oSourceClickedField) {
				//title
				sPropertyPath = oSourceClickedField.name;
				//text
				var oPropertyTextModel = oSourceClickedField["com.sap.vocabularies.Common.v1.Text"];
				if (oPropertyTextModel){
					sTextPath = oPropertyTextModel.Path;
				}
				//evaluate text arrangement
				sTextArrangement = oAnnotationHelper.getTextArrangement(oSourceEntityType, oSourceClickedField);
				return {textArrangement : sTextArrangement,
						propertyPath : sPropertyPath,
						textPath : sTextPath};
			}
		},
		getTextArrangement: function (oEntityType, oField){
			var sTextArrangement;
			// 1. check TextArrangement definition for property directly - has prio 1
			if (oField["com.sap.vocabularies.UI.v1.TextArrangement"] && oField["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
				sTextArrangement = oAnnotationHelper._mapTextArrangement4smartControl(oField["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
			}
			// 2. check TextArrangement definition under property/text - has prio 2
			if (!sTextArrangement){
				var oPropertyTextModel = oField["com.sap.vocabularies.Common.v1.Text"];
				if (oPropertyTextModel && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"] && oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
					sTextArrangement = oAnnotationHelper._mapTextArrangement4smartControl(oPropertyTextModel["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
				}
			}
			// 3. check TextArrangement definition for entity type
			if (!sTextArrangement){
				if (oEntityType && oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"] && oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember) {
					sTextArrangement = oAnnotationHelper._mapTextArrangement4smartControl(oEntityType["com.sap.vocabularies.UI.v1.TextArrangement"].EnumMember);
				}
			}
			if (!sTextArrangement){ //coming from the title should get a readable description and underneath is the id - the default
				sTextArrangement = "descriptionAndId";
			}
			return sTextArrangement;
		},
		getTitleTextArrangementBindingPath: function (sTextArrangement, sPropertyPath, sTextPath) {
			var sPropertyBinding = "{" + sPropertyPath + "}";
			var sTextBinding = "{" + sTextPath + "}";
			//in case the text is not annotated it can't be first, so the property will be displayed
			if (!sTextPath){
				return sPropertyBinding;
			}

			if (sTextArrangement === "descriptionAndId"){ 			//TEXTFIRST
				return sTextBinding;
			} else if (sTextArrangement === "descriptionOnly"){		//TEXTONLY
				return sTextBinding;
			} else if (sTextArrangement === "idAndDescription"){	//TEXTLAST
				return sPropertyBinding;
			} else if (sTextArrangement === "idOnly"){				//TEXTSEPERATE
				return sPropertyBinding;
			}
		},
		getDescriptionTextArrangementBindingPath: function (sTextArrangement, sPropertyPath, sTextPath) {
			var sPropertyBinding = "{" + sPropertyPath + "}";
			var sTextBinding = "{" + sTextPath + "}";
			//in case the text is not annotated it will be shown in the title only
			if (!sTextPath){
				return "";
			}

			if (sTextArrangement === "descriptionAndId"){ 			//TEXTFIRST
				return sPropertyBinding;
			} else if (sTextArrangement === "descriptionOnly"){		//TEXTONLY
				return "";
			} else if (sTextArrangement === "idAndDescription"){	//TEXTLAST
				return sTextBinding;
			} else if (sTextArrangement === "idOnly"){				//TEXTSEPERATE
				return "";
			}
		},

		isDeepFacetHierarchy: function (oFacet) {
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
						return true;
					}
				}
			}
			return false;
		},

		doesCollectionFacetOnlyContainForms: function (oFacet) {
			var bReturn = true;
			if (oFacet.Facets) {
				for (var i = 0; i < oFacet.Facets.length; i++) {
					if (oFacet.Facets[i].Target && oFacet.Facets[i].Target.AnnotationPath) {
						if ((oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Identification") < 0)
							&& (oFacet.Facets[i].Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") < 0)) {
							bReturn = false;
						}
					}
				}
			} else {
				bReturn = false;
			}
			return bReturn;
		},

		doesFieldGroupContainOnlyOneMultiLineDataField: function (oFieldGroup, oFirstDataFieldProperties) {
			if (oFieldGroup.Data.length !== 1) {
				return false;
			}
			if ((oFirstDataFieldProperties['com.sap.vocabularies.UI.v1.MultiLineText'] === undefined)
				|| (oFieldGroup.Data[0].RecordType !== "com.sap.vocabularies.UI.v1.DataField")) {
				return false;
			}
			return true;
		},
		testFormatter: function(value) {
			return "formatted:" + value;
		},
		getFacetID: function(sEntitySet, oFacet) {
			return sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
		},
		isListReportTemplate: function(oRouteConfig) {
			if (oRouteConfig) {
				return oRouteConfig.template === "sap.suite.ui.generic.template.ListReport";
			}
		},
		isAnalyticalListPageOrListReportTemplate: function(oRouteConfig) {
			if (oRouteConfig) {
				return (oRouteConfig.template === "sap.suite.ui.generic.template.AnalyticalListPage" || oRouteConfig.template === "sap.suite.ui.generic.template.ListReport");
			}
		},

		getStableIdPartForDatafieldActionButton: function(oDatafield, oFacet, oTabItem) {
			var sStableId = "";
			var sDatafieldStableId = "";
			var sFacetStableId = "";
			if (oFacet) {
				sFacetStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			}
			if (oDatafield) {
				sDatafieldStableId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromDataField(oDatafield);
			}
			sStableId = (sFacetStableId !== "" ? sFacetStableId + "::" : "") + "action::" + sDatafieldStableId;
			var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
			if (sSuffix) {
				sStableId = sStableId.concat(sSuffix);
			}
			return sStableId;
		},
		_hasCustomDeterminingActionsInListReport: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Actions) {
					for (var action in oManifestExtEntitySet.Actions) {
						if (oManifestExtEntitySet.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		},
		_hasCustomDeterminingActionsInObjectPage: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Header && oManifestExtEntitySet.Header.Actions) {
					for (var action in oManifestExtEntitySet.Header.Actions) {
						if (oManifestExtEntitySet.Header.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		},
		hasDeterminingActionsRespectingApplicablePath: function(oContext, aTerm, sEntitySet, oManifestExt) {
			var sApplicablePaths = "";
			oContext = oContext.getInterface(0);
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.ObjectPage.view.Details"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInObjectPage(sEntitySet, oManifestExt["sap.suite.ui.generic.template.ObjectPage.view.Details"]["sap.ui.generic.app"])) {
						return "true";
				}
			if (aTerm){
				for (var iRecord = 0; iRecord < aTerm.length; iRecord++) {
					if ((aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") &&
							aTerm[iRecord].Determining && aTerm[iRecord].Determining.Bool === "true") {
						var sFunctionImport = oContext.getModel().getODataFunctionImport(aTerm[iRecord].Action.String, true);
						var oFunctionImport = oContext.getModel().getObject(sFunctionImport);
						if (oFunctionImport["sap:applicable-path"]) {
							if (sApplicablePaths.length > 0) {
								sApplicablePaths += " || ";
							}
							sApplicablePaths += "${path: '" + oFunctionImport["sap:applicable-path"] + "'}";
						} else {
							return "true";
						}
					}
				}
			}
			if (sApplicablePaths.length > 0) {
				return "{= " + sApplicablePaths +  " || ${ui>/editable}}";
			} else {
				return "{ui>/editable}";
			}
		},
		hasDeterminingActions: function(aTerm, sEntitySet, oManifestExt) {
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInListReport(sEntitySet, oManifestExt["sap.suite.ui.generic.template.ListReport.view.ListReport"]["sap.ui.generic.app"])) {
				return "true";
			} else if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"] &&
					sap.suite.ui.generic.template.js.AnnotationHelper._hasCustomDeterminingActionsInListReport(sEntitySet, oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"])) { //Check for AnalyticalListPage
				return "true";
			}
			for (var iRecord = 0; iRecord < aTerm.length; iRecord++) {
				if ((aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
						aTerm[iRecord].Determining && aTerm[iRecord].Determining.Bool === "true") {
						return "true";
					}
			}

			return "false";
		},

		actionControlDetermining: function(oRouteConfig, sActionApplicablePath) {
			if (sap.suite.ui.generic.template.js.AnnotationHelper.isListReportTemplate(oRouteConfig) || !sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},
		actionControlInline: function(sActionApplicablePath) {
			if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},
		actionControlBreakout: function(sActionApplicablePath) {
			if (!sActionApplicablePath) {
				return true;
			} else {
				return "{path: '" + sActionApplicablePath + "'}";
			}
		},

		/**
		 * Build a binding expression that will executed at runtime to calculate the percent value for a datapoint, so it can be consumed in the Progress Indicator.
		 * Rules to calculate:
		 * If the UoM is % then use the value as the percent value
		 * If the UoM is not % or is not provided then build the expression to calculate the percent value = data point value / target * 100
		 * The expression will be then resolved at runtime by the view
		 * Responsibility, resolve paths at pre-processing
		 * @function
		 * @private
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @parameter {map} [mUoM] A map containg the unit of measure as per the vocabulary term Org.OData.Measures.V1.Unit or Org.OData.Measures.V1.ISOCurrency
		 * @returns {string} A binding expression containing the formula to calculate the Progress Indicator percent value
		 */
		buildExpressionForProgressIndicatorPercentValue : function(oInterface, dataPoint, mUoM){
			var sPercentValueExpression = "0";

			if (dataPoint.Value && dataPoint.Value.Path){ // Value is mandatory and it must be a path
					var sValue = "$" + sap.ui.model.odata.AnnotationHelper.format(oInterface, dataPoint.Value); // Value is expected to be always a path. ${Property}
					var sTarget, sUoM;

					if (dataPoint.TargetValue){ // Target can be a path or Edm Primitive Type
						sTarget = sap.ui.model.odata.AnnotationHelper.format(oInterface, dataPoint.TargetValue);
						sTarget = dataPoint.TargetValue.Path ? "$" + sTarget : sTarget;
					}

					if (mUoM){ // UoM or Currency can be a path or directly in the annotation
						mUoM = mUoM['Org.OData.Measures.V1.Unit'] || mUoM["Org.OData.Measures.V1.ISOCurrency"];
						if (mUoM){
							sUoM = sap.ui.model.odata.AnnotationHelper.simplePath(oInterface, mUoM);
							sUoM = sUoM && mUoM.Path ?  "$" + sUoM : "'" + sUoM + "'";
						}
					}

					// The expression consists of the following parts:
					// 1) When UoM is '%' then percent = value (target is ignored), and check for boundaries (value > 100 and value < 0).
					// 2) When UoM is not '%' (or is not provided) then percent = value / target * 100, check for division by zero and boundaries:
					// percent > 100 (value > target) and percent < 0 (value < 0)
					// Where 0 is Value, 1 is Target, 2 is UoM
					var sExpressionForUoMPercent = "({0} > 100 ? 100 : {0} < 0 ? 0 : {0})";
					var sExpressionForUoMNotPercent = "(({1} > 0) ? (({0} > {1}) ? 100 : (({0} < 0) ? 0 : ({0} / {1} * 100))) : 0)";
					var sExpressionTemplate = "'{'= ({2} === ''%'') ? " + sExpressionForUoMPercent + " : " + sExpressionForUoMNotPercent + " '}'";
					sPercentValueExpression = jQuery.sap.formatMessage(sExpressionTemplate, [sValue, sTarget, sUoM]);
			}

			return sPercentValueExpression;
		},

		/**
		 * The resposibility of this method is to build an expression and its parts to call the runtime formatter to display value
		 * This formatter is called at pre-processing time
		 * @function
		 * @private
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @parameter {map} [mUoM] A map containg the unit of measure as per the vocabulary term Org.OData.Measures.V1.Unit or Org.OData.Measures.V1.ISOCurrency
		 * @returns {string} A binding expression containing the formatter and parts to compute the Progress Indicator display value
		 */
		buildExpressionForProgressIndicatorDisplayValue : function(oInterface, dataPoint, mUoM){
			var sParts;

			var buildPart = function(oInterface, oProperty){
				var sPropertyPath = sap.suite.ui.generic.template.js.AnnotationHelper.trimCurlyBraces(sap.ui.model.odata.AnnotationHelper.format(oInterface, oProperty));
				var sPart = "{path: '" + sPropertyPath + "'}";
				return sPart;
			};

			sParts = buildPart(oInterface, dataPoint.Value) + ", " + buildPart(oInterface, dataPoint.TargetValue) + ", " + buildPart(oInterface, mUoM);

			var sDisplayValueExpression = "{ parts: [" + sParts + "], formatter: 'sap.suite.ui.generic.template.js.AnnotationHelper.formatDisplayValue' }";
			return sDisplayValueExpression;
		},

		/**
		 * This function is meant ro run at runtime, so the control and resource bundle can be available
		 * @function
		 * @private
		 * @parameter {string} sValue A string containing the value
		 * @parameter {string} sTarget A string containing the target value
		 * @parameter {string} sUoM A string containing the unit of measure
		 * @returns {string} A string containing the text that will be used in the display value of the Progress Indicator
		 */
		formatDisplayValue : function(sValue, sTarget, sUoM){
			var sDisplayValue = "";

			if (sValue){
				var oControl = this;
				var oResourceBundle = oControl.getModel("i18n").getResourceBundle();
				var aCustomData = oControl.getCustomData();
				sTarget = sTarget || aCustomData[0].getValue();
				sUoM = sUoM || aCustomData[1].getValue();
				if (sUoM){
					if (sUoM === '%'){ // uom.String && uom.String === '%'
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_PERCENT", [sValue]);
					} else {// (uom.String and not '%') or uom.Path
						if (sTarget){
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT", [sValue, sTarget, sUoM]);
						} else {
							sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_UOM_IS_NOT_PERCENT_NO_TARGET_VALUE", [sValue, sUoM]);
						}
					}
				} else {
					if (sTarget){
						sDisplayValue = oResourceBundle.getText("PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [sValue, sTarget]);
					} else {
						sDisplayValue = sValue;
					}
				}
			} else { // Cannot do anything
				jQuery.sap.log.warning("Value property is mandatory, the default (empty string) will be returned");
			}

			return sDisplayValue;
		},

		/**
		 * Build a binding expression for criticality in the progress indicator data point.
		 * Step 1: Check if datapoint is annotated with CriticalityType or CriticalityCalculationType
		 * Step 2: For CriticalityType build the binding expression to check if the property contains, Name or Value of the enumType (Example: 'UI.CriticalityType/Neutral' or '0')
		 * Other cases are not valid and the default sap.ui.core.ValueState.None will be returned
		 * Step 3: For CriticalityCalculationType build the binding expression to calculate the criticality
		 * @parameter {sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context} oInterface Callback interface object
		 * @parameter {map} dataPoint A DataPoint map as per the vocabulary term com.sap.vocabularies.UI.v1.DataPoint
		 * @returns {string} A binding expression for the criticality property of the Progress Indicator
		 */
		buildExpressionForProgressIndicatorCriticality : function(oInterface, dataPoint){
			var sFormatCriticalityExpression = sap.ui.core.ValueState.None;
			var sExpressionTemplate;
			var oCriticalityProperty = dataPoint.Criticality;

			if (oCriticalityProperty) {
				sExpressionTemplate = "'{'= ({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Negative'') || ({0} === ''1'') || ({0} === 1) ? ''" + sap.ui.core.ValueState.Error + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Critical'') || ({0} === ''2'') || ({0} === 2) ? ''" + sap.ui.core.ValueState.Warning + "'' : " +
				"({0} === ''com.sap.vocabularies.UI.v1.CriticalityType/Positive'') || ({0} === ''3'') || ({0} === 3) ? ''" + sap.ui.core.ValueState.Success + "'' : " +
				"''" + sap.ui.core.ValueState.None + "'' '}'";
				if (oCriticalityProperty.Path){
					var sCriticalitySimplePath = '$' + sap.ui.model.odata.AnnotationHelper.simplePath(oInterface, oCriticalityProperty);
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticalitySimplePath);
				} else if (oCriticalityProperty.EnumMember){
					var sCriticality = "'" + oCriticalityProperty.EnumMember + "'";
					sFormatCriticalityExpression = jQuery.sap.formatMessage(sExpressionTemplate, sCriticality);
				} else {
					jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
				}
			} else {
				// Any other cases are not valid, the default value of 'None' will be returned
				jQuery.sap.log.warning("Case not supported, returning the default sap.ui.core.ValueState.None");
			}

			return sFormatCriticalityExpression;
		},

		trimCurlyBraces : function (value){
			return value ? value.replace("{","").replace("}","") : undefined;
		},

		/**
		 * Get entity set name for Smart Chart and Smart Microchart.
		 * Returns the name of the main entity set (current node in the object page) or the referenced entity set (as per the target of the annotation path).
		 * @parameter {object} refEntitySet The referenced entity set
		 * @parameter {object} entitySet The entity set of the current object in the page
		 * @returns {string} sEntitySetName The entity set name for the main object type or the referenced entity set
		 */
		getEntitySetName : function (refEntitySet, entitySet) {
			var sEntitySetName = "";
			try {
				sEntitySetName = refEntitySet.name || entitySet.name;
			} catch (oError) {
				jQuery.sap.log.warning("At least one of the input parameters is undefined. Returning default value for entity set name.");
			}
			return sEntitySetName;
		},

		getBreakoutActionEnabledKey: function (oAction, oTabItem) {
			var sButtonId = sap.suite.ui.generic.template.js.AnnotationHelper.getBreakoutActionButtonId(oAction, oTabItem);
			var sEnabledKey = "{_templPriv>/generic/listCommons/breakoutActionsEnabled/" + sButtonId + "/enabled}";
			return sEnabledKey;
		},

		buildVisibilityExprOfDataFieldForIntentBasedNaviButton: function (oDataField) {
			// oDataField.Inline is Nullable=true, i.e. it may be absent in the annotations
			//oDataField.RequiresContext is Nullable as well, its defaut value is "true"
			if (!!oDataField.RequiresContext && oDataField.RequiresContext.Bool == "false" && (!oDataField.Inline || oDataField.Inline.Bool === "false")) {
				var sSemanticObject = oDataField.SemanticObject.String;
				var sAction =  oDataField.Action.String;
				return "{= !!${_templPriv>/generic/supportedIntents/" + sSemanticObject + "/" + sAction + "/visible}}"; // maybe we can optimize it later and do one call for all buttons in the toolbar somewhere
			} else {
				return true; // if the button is inline or the button is in the toolbar and has requresContext=true the button is always visible and is enabled/disabled depending on the context
			}
		},

		searchForFirstSemKey_Title_Description: function(oEntityType) {
			var bTitle, bDescr, iDescIndex, iTitleIndex, oEntityTypeAnnotations, sFirstSemKeyPropPath, aLineItemAnnotations, oHeaderInfoAnnotations, sHeaderTitle, sHeaderDescription, iLineItemsNumber, i;
			var sEntityTypePath = oEntityType.getPath();
			var sTargetString = sEntityTypePath + '/' + "com.sap.vocabularies.UI.v1.LineItem" + '/';
			if (oEntityType) {
				oEntityTypeAnnotations = oEntityType.getObject();
				// we consider the first field of the semantic key only, the same way SmartTable does
				sFirstSemKeyPropPath = oEntityTypeAnnotations["com.sap.vocabularies.Common.v1.SemanticKey"] && oEntityTypeAnnotations["com.sap.vocabularies.Common.v1.SemanticKey"][0] && oEntityTypeAnnotations["com.sap.vocabularies.Common.v1.SemanticKey"][0].PropertyPath;
				aLineItemAnnotations = oEntityTypeAnnotations["com.sap.vocabularies.UI.v1.LineItem"];
				oHeaderInfoAnnotations = oEntityTypeAnnotations["com.sap.vocabularies.UI.v1.HeaderInfo"];
				sHeaderTitle = "";
				sHeaderDescription = "";
				if (oHeaderInfoAnnotations) {
					sHeaderTitle = oHeaderInfoAnnotations && oHeaderInfoAnnotations["Title"] && oHeaderInfoAnnotations["Title"].Value && oHeaderInfoAnnotations["Title"].Value.Path;
					sHeaderDescription = oHeaderInfoAnnotations && oHeaderInfoAnnotations["Description"] && oHeaderInfoAnnotations["Description"].Value && oHeaderInfoAnnotations["Description"].Value.Path;
				}
				iLineItemsNumber = aLineItemAnnotations && aLineItemAnnotations.length;
				for (i = 0; i < iLineItemsNumber; i++) {
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path === sFirstSemKeyPropPath) {
						if (oAnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						sTargetString = sTargetString + i + '/Value/Path';
						return sTargetString;
					}
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path === sHeaderTitle) {
						if (oAnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						bTitle = true;
						iTitleIndex = i;
					}
					if (aLineItemAnnotations[i].RecordType === "com.sap.vocabularies.UI.v1.DataField" && aLineItemAnnotations[i].Value.Path === sHeaderDescription) {
						if (oAnnotationHelper.isPropertyHidden(aLineItemAnnotations[i])) {
							continue;
						}
						bDescr = true;
						iDescIndex = i;
					}
				}
				if (bTitle) {
					sTargetString = sTargetString + iTitleIndex + '/Value/Path';
					return sTargetString;
				} else if (bDescr) {
					sTargetString = sTargetString + iDescIndex + '/Value/Path';
					return sTargetString;
				}
			} else { // Cannot do anything
				jQuery.sap.log.warning("No entity type provided");
			}
		},

		isPropertyHidden: function(oLineItemAnnotations) {
			var bHidden = false;
			// "com.sap.vocabularies.Common.v1.FieldControl" annotation is deprecated but we check it here for compatibility reasons
			if (oLineItemAnnotations["com.sap.vocabularies.UI.v1.Hidden"] || (oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"] &&
					oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember &&
					oLineItemAnnotations["com.sap.vocabularies.Common.v1.FieldControl"].EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden")) {
				bHidden = true;
			}
			return bHidden;
		},

		getColumnHeaderText: function(oDataFieldValue, oDataField) {
			var sResult;
			if (oDataField.Label) {
				return oDataField.Label.String;
			} else {
				sResult = oDataFieldValue["sap:label"] || (oDataFieldValue["com.sap.vocabularies.Common.v1.Label"] || "").String || "";
				return sResult;
			}
		},

		getTextForDataField: function(oDataFieldValue) {
			var sValue = oDataFieldValue["com.sap.vocabularies.Common.v1.Text"] && oDataFieldValue["com.sap.vocabularies.Common.v1.Text"].Path;
			return sValue;
		},

		getColumnCellFirstText: function(oDataFieldValue, oDataField, oEntityType) {
			var sResult, sTextArrangement;
			sTextArrangement = oAnnotationHelper.getTextArrangement(oEntityType, oDataFieldValue);
			switch (sTextArrangement) {
				case "idAndDescription":
					sResult = oDataField.Value.Path;
					if (!sResult) {
						sResult = oAnnotationHelper.getTextForDataField(oDataFieldValue);
					}
					break;
				case "idOnly":
					sResult = oDataField.Value.Path;
					if (!sResult) {
						sResult = oAnnotationHelper.getTextForDataField(oDataFieldValue);
					}
					break;
				case "descriptionAndId":
				case "descriptionOnly":
				default:
					sResult = oAnnotationHelper.getTextForDataField(oDataFieldValue);
					if (!sResult) {
						sResult = oDataField.Value.Path;
					}
					break;
			}
			if (sResult) {
				return "{" + sResult + "}";
			}
		},

		getColumnCellSecondText: function(oDataFieldValue, oDataField, oEntityType) {
			var sResult, sTextArrangement;
			sTextArrangement = oAnnotationHelper.getTextArrangement(oEntityType, oDataFieldValue);
			switch (sTextArrangement) {
				case "idOnly":
				case "descriptionOnly":
					break;
				case "idAndDescription":
					// if the Value.Path does not exist the v1.Text has been used as the first text already
					if (!oDataField.Value.Path) {
						break;
					}
					sResult = oAnnotationHelper.getTextForDataField(oDataFieldValue);
					break;
				case "descriptionAndId":
				default:
					// if this text does not exist oDataField.Value.Path has been already used as the first text so it should not be set as the second text again
					if (!oAnnotationHelper.getTextForDataField(oDataFieldValue)) {
						break;
					}
					// if no text arrangement annotation is maintained the second text should be oDataField.Value.Path if available
					sResult = oDataField.Value.Path;
					break;
			}
			if (sResult) {
				return "{" + sResult + "}";
			}
		},

		getAdditionalSemanticObjects: function(oDataFieldValue) {
			var oAnnotation;
			var aAdditionalSemObjects = [];
			for (oAnnotation in oDataFieldValue) {
				if (oAnnotation.indexOf("com.sap.vocabularies.Common.v1.SemanticObject#") != -1) {
					aAdditionalSemObjects.push(oDataFieldValue[oAnnotation].String);
				}
			}
			if (aAdditionalSemObjects.length > 0) {
				return aAdditionalSemObjects;
			}
		},

		getColumnCellFirstTextVisibility: function(oDataFieldValue, oDataField, oEntityType) {
			var bVisible = !!oAnnotationHelper.getColumnCellFirstText(oDataFieldValue, oDataField, oEntityType);
			return bVisible;
		},

		getColumnCellSecondTextVisibility: function(oDataFieldValue, oDataField, oEntityType){
			var bVisible = !!oAnnotationHelper.getColumnCellSecondText(oDataFieldValue, oDataField, oEntityType);
			return bVisible;
		},

		// Highlight the newly created row with blue color i.e. "Information" - FIORITECHP1-5021 (for sap.m.Table & sap.ui.table.Table)
		setInfoHighlight: function(isActiveEntity, hasActiveEntity) {
			// If the entity is not available in backend table then return Information (Blue Info line) else return None
			var uiModelData = this.getModel("ui").getData();
			if (uiModelData.editable === true && isActiveEntity === false && hasActiveEntity === false) {
				return "Information";
			} else {
				return "None";
			}
		}
	};

	sap.suite.ui.generic.template.js.AnnotationHelper = oAnnotationHelper;

	sap.suite.ui.generic.template.js.AnnotationHelper.getLinkTextForDFwithIBN.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getLabelForDFwithIBN.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getRepeatIndex.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getCurrentPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getCurrentPathWithExpandForContact.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEntityTypesForFormPersonalization.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.actionControl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatHeaderTitle.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getTextArrangementForSmartControl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.matchesBreadCrumb.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13N.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForIndicator.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForAction.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForContactPopUp.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.createP13NColumnForChart.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.hasDeterminingActionsRespectingApplicablePath.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorPercentValue.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorDisplayValue.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildExpressionForProgressIndicatorCriticality.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEditActionButtonVisibility.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getDeleteActionButtonVisibility.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getSubObjPageDeleteActionButtonVisibility.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.isRelatedEntityCreatable.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildBreadCrumbExpression.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getApplicablePathForChartToolbarActions.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.buildAnnotatedActionButtonEnablementExpression.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterText.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatImageUrl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getPathWithExpandFromHeader.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatImageOrTypeUrl.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatHeaderImage.requiresIContext = true;
})();

}; // end of sap/suite/ui/generic/template/js/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelperMultipleViews') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.AnnotationHelperMultipleViews'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/js/AnnotationHelperMultipleViews",["sap/suite/ui/generic/template/js/AnnotationHelper"],
	function(AnnotationHelper) {
		"use strict";
		
		// formatter called at templating time to decide whether the 'Multiple views in Single Table' feature should be realized via a SegmentedButton or a Select.
		function useSegmentedButton(oManifestPart) {
			var iCount = 0;
			for (var i in oManifestPart) {
				if (oManifestPart.hasOwnProperty(i)) {
					++iCount;
					if (iCount > 3) {
						return false;
					}
				}
			}
			return true;
		}
		
		// Formatter called at templating time to create the runtime binding for the text on the items
		function getTextForItem(oInterface, oQuickVariantSelection, oItemDef){
			if (oQuickVariantSelection.showCounts){
				return "{path: '_templPriv>/listReport/multipleViewsSingleTableMode/" + oItemDef.key + "', formatter: '._templateFormatters.formatItemTextForMultipleView'}";
			}
			return sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterText(oInterface.getInterface(0), oItemDef);                         
		}
		getTextForItem.requiresIContext = true;
		
		sap.suite.ui.generic.template.js.AnnotationHelperMultipleViews = {
			useSegmentedButton: useSegmentedButton,
			getTextForItem: getTextForItem
		};
		
		return sap.suite.ui.generic.template.js.AnnotationHelperMultipleViews;
	});
}; // end of sap/suite/ui/generic/template/js/AnnotationHelperMultipleViews.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelperReuseComponents') ) {
(function () {
	"use strict";

	jQuery.sap.declare("sap.suite.ui.generic.template.js.AnnotationHelperReuseComponents");
	
	
	var UIMode = sap.ui.require("sap/suite/ui/generic/template/extensionAPI/UIMode");

	function fnFormatId(oReuseComponent, sSuffix){
		return oReuseComponent.componentName + "::" + oReuseComponent.id + "::" + sSuffix;                         
	}
	
	var oAnnotationHelperReuseComponents = {
		
		formatIdComponentSection: function(oReuseComponent){
			return fnFormatId(oReuseComponent, "ComponentSection");	
		},

		formatIdComponentSubSection: function(oReuseComponent){
			return fnFormatId(oReuseComponent, "ComponentSubSection");	
		},
		
		formatIdComponentSubSectionContent: function(oReuseComponent){
			return fnFormatId(oReuseComponent, "ComponentSubSectionContent");	
		},
		
		formatIdComponentContainer: function(oReuseComponent){
			return fnFormatId(oReuseComponent, "ComponentContainer");	
		},
		
		formatVisibleComponentSection: function(oReuseComponent){
			return "{= !${_templPriv>/generic/embeddedComponents/" + oReuseComponent.id + "/hidden} }";
		},

		formatComponentSettings: function(oInterface, oEntitySet, oReuseComponent, oRoutingSpec)	{
			var oThisInterface = oInterface.getInterface(0),
				oMetaModel = oThisInterface.getModel(),
				oEntityType = oEntitySet.entityType ? oMetaModel.getODataEntityType(oEntitySet.entityType) : oRoutingSpec.oEntityType;
			var sNavigationProperty = oReuseComponent.binding;
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
					// fix the type to the target type
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				}
			}
			var sSemanticObject = oEntitySet ? sap.ui.model.odata.AnnotationHelper.format(oThisInterface, oEntitySet["com.sap.vocabularies.Common.v1.SemanticObject"]) : oRoutingSpec.semanticObject;
			var sObjectKeys = "";
			if (oEntityType && oEntityType.key){
				oEntityType.key.propertyRef.forEach(function (key) {
					sObjectKeys += "{" + key.name + "}::";
				});
				sObjectKeys = sObjectKeys.replace(/::$/, "");
			}
			var	settings = {
			        //Bind the UI mode to the component. Three states are allowed (display,edit,create)
					"uiMode": "{= ${ui>/createMode} ? '" +
					    UIMode.Create +
					    "' : ( ${ui>/editable} ? '" +
					    UIMode.Edit +
					    "' : '" +
					    UIMode.Display +
					    "') }",
                    // The semanti cobject is constant for this context
					"semanticObject": sSemanticObject || ""
				};


			if (oReuseComponent) {
				jQuery.extend(settings, oReuseComponent.settings);
				var sValue = JSON.stringify(settings);
				sValue = sValue.replace(/\}/g, "\\}").replace(/\{/g, "\\{"); // check bindingparser.js escape function
				return sValue;
			}
		}
	};
	
	sap.suite.ui.generic.template.js.AnnotationHelperReuseComponents = oAnnotationHelperReuseComponents;
	
	sap.suite.ui.generic.template.js.AnnotationHelperReuseComponents.formatComponentSettings.requiresIContext = true;

})();
}; // end of sap/suite/ui/generic/template/js/AnnotationHelperReuseComponents.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context",
      "sap/ui/model/odata/AnnotationHelper", "sap/ui/model/json/JSONModel"
    ],
    function (BaseObject, Context, ODataAnnoHelper, JSONModel) {
      "use strict";

    /*eslint camelcase: [2, {properties: "never"}]*/
    var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.AnnotationHelper");

    AnnotationHelper.TITLE_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/Title/Value",
      "com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value",
      "com.sap.vocabularies.UI.v1.Identification/0/Value"
    ];

    AnnotationHelper.HEADLINE_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/HeadLine/Value",
      "com.sap.vocabularies.Communication.v1.Contact/role",
      "com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value",
      "com.sap.vocabularies.UI.v1.Identification/0/Value",
      "com.sap.vocabularies.UI.v1.Identification/1/Value"
    ];
    AnnotationHelper.IMAGEURL_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/ImageUrl/Value",
      "com.sap.vocabularies.UI.v1.HeaderInfo/ImageUrl/Value"
    ];
    AnnotationHelper.ICONURL_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.Badge/TypeImageUrl/Value"
    ];
    AnnotationHelper.TYPENAME_ANNO_HEURISTIC = [
      "com.sap.vocabularies.UI.v1.HeaderInfo/TypeName/Value",
      "com.sap.vocabularies.Common.v1.SemanticObject/String"
    ];

    AnnotationHelper._getAnnotationItem = function (oContext, sVocabularyName, sFieldName, sFieldValue) {
      if (oContext && sVocabularyName && sFieldName) {
        var oVocabularyItem = oContext.getProperty(sVocabularyName);
        if (sFieldValue && oVocabularyItem && oVocabularyItem[sFieldName]) {
          var oItem = oVocabularyItem[sFieldName];
          return oItem[sFieldValue];
        }
        return oVocabularyItem ? oVocabularyItem[sFieldName] : null;
      }
      return undefined;
    };

    AnnotationHelper.getAnnotationItemForVocabulary = function (oContext, sVocabularyFullName) {
      if (sVocabularyFullName) {
        var aParts = sVocabularyFullName.split("/");
        return AnnotationHelper._getAnnotationItem(oContext, aParts[0], aParts.length > 1 ? aParts[1] : null, aParts.length > 2 ? aParts[2] : null);
      }
      return undefined;
    };

    AnnotationHelper.getAnnotationFirstItemFromVocabularies = function (oContext, aVocabularyList, oSkipObject) {
      var oItem = null;
      if (aVocabularyList && Array.isArray(aVocabularyList)) {
        for (var i = 0; !oItem && i < aVocabularyList.length; ++i) {
          oItem = AnnotationHelper.getAnnotationItemForVocabulary(oContext, aVocabularyList[i]);
          if (oSkipObject && oItem && AnnotationHelper._isEqualValues(oSkipObject, oItem)) {
            oItem = null; // Skip this object
          }
        }
      }
      return oItem;
    };

    AnnotationHelper._resolveBadgeImgUrl = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.IMAGEURL_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeIconUrl = function (oContext) {
      var oImageUrl = AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.ICONURL_ANNO_HEURISTIC);
      if (!oImageUrl) {
        // Default unknown icon
        oImageUrl = "sap-icon://form";
      }
      return oImageUrl;
    };

    AnnotationHelper._resolveBadgeTitle = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.TITLE_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeTypeName = function (oContext) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.TYPENAME_ANNO_HEURISTIC);
    };

    AnnotationHelper._resolveBadgeHeadline = function (oContext, sTitle) {
      return AnnotationHelper.getAnnotationFirstItemFromVocabularies(oContext, AnnotationHelper.HEADLINE_ANNO_HEURISTIC, sTitle);
    };

    // Supports old and new Annotation version (Label/Value)
    AnnotationHelper._getAnnotationObject = function (oItem) {
      if (oItem) {
        var oPathObj = {};
        if (oItem.Label) {
          oPathObj.Path = oItem.Label.Path || oItem.Label;
        } else if (oItem.Value) {
          oPathObj.Path = oItem.Value.Path || oItem.Value;
        } else if (oItem.String) {
          oPathObj.String = oItem.String;
        } else if (oItem.Path) {
          oPathObj.Path = oItem.Path;
        } else {
          oPathObj.String = oItem;
        }
        return oPathObj;
      }
      return undefined;
    };

    AnnotationHelper._isEqualValues = function (oItem1, oItem2) {
      if (oItem1 && oItem2) {
        if (oItem1.String && oItem2.String) {
          return oItem1.String === oItem2.String;
        }
        if (oItem1.Value && oItem2.Value) {
          return oItem1.Value.Path === oItem2.Value.Path;
        }
        if (oItem1.Label && oItem2.Label) {
          return oItem1.Label.Path === oItem2.Label.Path;
        }
      }
      return false;
    };

    AnnotationHelper._createBadgeContext = function (oImageUrl, oTypeIconUrl, oTitle, oTypeName, oSubTitle) {
      var oModel = new JSONModel();

      var oBadgeContext = new Context(oModel, "/");
      var oItem = {};
      var sImgUrl = AnnotationHelper._getAnnotationObject(oImageUrl);
      var sTypeUrl = AnnotationHelper._getAnnotationObject(oTypeIconUrl);

      // If the Image URL is set to a sap icon ignore to avoid broken image
      if (sImgUrl && sImgUrl.String && sImgUrl.String.toLowerCase().indexOf("sap-icon://") < 0) {
        oItem.ImageUrl = sImgUrl;
      } else {
        oItem.TypeImageUrl = sTypeUrl || sImgUrl;
      }

      oItem.Title = AnnotationHelper._getAnnotationObject(oTitle);
      oItem.TypeName = AnnotationHelper._getAnnotationObject(oTypeName);
      oItem.SubTitle = AnnotationHelper._getAnnotationObject(oSubTitle);

      oModel.setData(oItem);

      return oBadgeContext;
    };

    AnnotationHelper.resolveBadgeTarget = function (oContext) {
      if (oContext) {
        var sImageUrl = AnnotationHelper._resolveBadgeImgUrl(oContext);
        var sTypeImageUrl = AnnotationHelper._resolveBadgeIconUrl(oContext);
        var sTitle = AnnotationHelper._resolveBadgeTitle(oContext);
        var sTypeName = AnnotationHelper._resolveBadgeTypeName(oContext);
        var sHeadline = AnnotationHelper._resolveBadgeHeadline(oContext, sTitle);
        return AnnotationHelper._createBadgeContext(sImageUrl, sTypeImageUrl, sTitle, sTypeName, sHeadline);
      }
      return undefined;
    };

    AnnotationHelper.resolveFieldGroupTarget = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
      if (facet) {
        return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
      }
      return null;
    };

    AnnotationHelper.resolveLineItemTarget = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
      if (facet) {
        return ODataAnnoHelper.resolvePath(oContext.getModel().createBindingContext(oContext.getPath() + "/" + facet.index + "/Target"));
      }
      return null;
    };

    AnnotationHelper.resolveFieldGroupFacet = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "FieldGroup");
      if (facet) {
        return oContext.getPath() + "/" + facet.index;
      }
      return undefined;
    };

    AnnotationHelper.resolveLineItemFacet = function (oContext) {
      var facet = AnnotationHelper._getFacetOfType(oContext, "LineItem");
      if (facet) {
        return oContext.getPath() + "/" + facet.index;
      }
      return undefined;
    };

    AnnotationHelper.getTooltip = function (value) {
      var sTooltip = "";
      if (value.String) {
        sTooltip = value.String;
      }
      return sTooltip;
    };

    AnnotationHelper._getFacetOfType = function (oContext, facetType) {
      var facets = oContext.getObject();

      var targetIndex = -1;
      var targetFacet = null;
      if (Array.isArray(facets)) {
        jQuery.each(facets, function (i, facet) {
          if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
            targetIndex = i;
            targetFacet = facet;
          }
        });
      }

      if (targetIndex >= 0) {
        return {
          facet: targetFacet,
          index: targetIndex
        };

      }
      return undefined;
    };

    AnnotationHelper.getAllPropertyPathsFromFacet = function (context, facetType) {
      var oInterface = AnnotationHelper.createFormatterInterface(context);

      var oMetaModel = context.getModel().getMetaModel();
      var oMetaData = AnnotationHelper.getMetaDataForContext(context);
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface,
        oMetaData.entityType.namespace + "." + oMetaData.entityType.name, facetType);

      var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
      var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);

      var array = oResolvedProperty.Data || oResolvedProperty;

      var propertyPaths = [];

      if (array && Array.isArray(array)) {
        jQuery.each(array, function (index, anno) {
          if (anno.RecordType === 'com.sap.vocabularies.UI.v1.DataField' && anno.Value && anno.Value.Path) {
            propertyPaths.push(anno.Value.Path);
          }
        });
      }

      return propertyPaths;
    };

    AnnotationHelper.getMetaModelContextForFacetType = function (oInterface, entityType, facetType) {
      var oMetaModel = oInterface.getModel() || oInterface.getModel(0);

      var oEntityTypeMeta = oMetaModel.getODataEntityType(entityType);

      var aSupportedQuickActions = ["QuickCreate", "QuickView"];

      var sFacetKey = "";
      var oMetaDataContext = null;

      var facets = null;

      for (var i = 0; i < aSupportedQuickActions.length; i++) {
        sFacetKey = "com.sap.vocabularies.UI.v1." + aSupportedQuickActions[i] + "Facets";
        if (oEntityTypeMeta[sFacetKey]) {
          facets = oEntityTypeMeta[sFacetKey];
          break;
        }
      }

      if (facets) {
        var targetIndex = -1;
        if (Array.isArray(facets)) {
          jQuery.each(facets, function (i, facet) {
            if (facet.Target && facet.Target.AnnotationPath && facet.Target.AnnotationPath.indexOf(facetType) >= 0) {
              targetIndex = i;
            }
          });
        }

        if (targetIndex >= 0) {
          oMetaDataContext = new Context(oMetaModel, oEntityTypeMeta.$path + "/" + sFacetKey + "/" + targetIndex + "/Target");
        }
      }

      return oMetaDataContext;
    };

    AnnotationHelper.formatExpandBindingPathForHeaderObject = function (oInterface, entityType) {

      var headerPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "FieldGroup");

      return AnnotationHelper.formatExpandPaths(headerPaths);

    };

    AnnotationHelper.getMetaDataForContext = function (oContext) {

      var oMetaModel = oContext.getModel().getMetaModel();

      var oEntityTypeMeta = oMetaModel.getODataEntityType(oContext.getObject().__metadata.type);

      var sEntitySetName = null;
      var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(true)).entitySet;
      jQuery.each(oEntitySets, function (i, eSet) {
        if (eSet.entityType === oContext.getObject().__metadata.type) {
          sEntitySetName = eSet.name;
        }
      });

      var oEntitySetMeta = oMetaModel.getODataEntitySet(sEntitySetName);

      return {
        entityType: oEntityTypeMeta,
        entitySet: oEntitySetMeta
      };
    };

    AnnotationHelper.getNavigationPathsUsingAnnotationHeuristics = function (oObjectContext, entityType) {

      var oMetaData = {};
      var oMetaModel = oObjectContext.getModel().getMetaModel();
      if (oObjectContext && oObjectContext.getObject()) {
        oMetaData = AnnotationHelper.getMetaDataForContext(oObjectContext);
      } else if (entityType) {
        oMetaData.entityType = oMetaModel.getODataEntityType(entityType);
      }

      var oNavPathsMap = {};
      if (oMetaData && oMetaData.entityType) {
        var aTitleAndHeadlineAnnos = AnnotationHelper.TITLE_ANNO_HEURISTIC.concat(
          AnnotationHelper.HEADLINE_ANNO_HEURISTIC);

        // foreach annotation in heuristic
        var i = 0;
        for (; i < aTitleAndHeadlineAnnos.length; i++) {
          var metaContext = new Context(oMetaModel, oMetaData.entityType.$path + "/" + aTitleAndHeadlineAnnos[i]);
          var navPath = ODataAnnoHelper.getNavigationPath(metaContext);
          if (navPath) {
            navPath = navPath.replace(/[{}]/g, '');
            if (navPath) {
              oNavPathsMap[navPath] = "";
            }
          }
        }
      }
      return Object.keys(oNavPathsMap);
    };

    AnnotationHelper.getNavigationPathsFromFacet = function (oInterface, entityType, facetType) {
      var oMetaModel = oInterface.getModel() || oInterface.getModel(0);
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, facetType);

      if (!oMetaDataContext) {
        return [];
      }

      var oResolvedPath = ODataAnnoHelper.resolvePath(oMetaDataContext);
      var oResolvedProperty = oMetaModel.getProperty(oResolvedPath);
      var oNavPaths = {};
      var pathComponent = "/";
      if (oResolvedProperty.Data) {
        pathComponent += "Data/";
      }
      var array = oResolvedProperty.Data || oResolvedProperty;

      if (array && Array.isArray(array)) {
        jQuery.each(array, function (i, dataField) {
          if (dataField.RecordType == 'com.sap.vocabularies.UI.v1.DataField' && dataField.Value && dataField.Value.Path) {
            var metaContext = new Context(oMetaModel, oResolvedPath + pathComponent + i + "/Value");
            var navPath = ODataAnnoHelper.getNavigationPath(metaContext);
            navPath = navPath.replace(/[{}]/g, '');
            if (navPath) {
              oNavPaths[navPath] = "";
            }
          }
        });
      }

      return Object.keys(oNavPaths);

    };

    AnnotationHelper.getLineItemsNavPropertyName = function (oInterface, entityType) {
      var oMetaDataContext = AnnotationHelper.getMetaModelContextForFacetType(oInterface, entityType, "LineItem");
      if (oMetaDataContext) {
        var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
        sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
        return sChildPropertyPath;
      }
      return undefined;
    };

    AnnotationHelper.formatBindingPathForLineItems = function (oInterface, entityType, bIsDraft) {

      var sLineItemProperty = AnnotationHelper.getLineItemsNavPropertyName(oInterface, entityType);

      if (arguments.length === 2) {
        bIsDraft = false;
      }

      if (bIsDraft) {
        var lineItemNavPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, entityType, "LineItem");
        if (lineItemNavPaths && lineItemNavPaths.length > 0) {
          return "{path: '" + sLineItemProperty + "', parameters : {expand:'" +
            AnnotationHelper.formatExpandPaths(lineItemNavPaths) +
            "'}}";
        }
      }

      return "{path: '" + sLineItemProperty + "'}";

    };

    AnnotationHelper.formatExpandPaths = function (aExpandPaths) {
      var sExpandParam = "";
      for (var i = 0; i < aExpandPaths.length; i++) {
        sExpandParam += aExpandPaths[i];
        if (i < aExpandPaths.length - 1) {
          sExpandParam += ",";
        }
      }
      return sExpandParam;
    };

    AnnotationHelper.createFormatterInterface = function (oBindingContext) {

      var oMetaContext = oBindingContext.getModel().getMetaModel().getMetaContext(oBindingContext.getPath());

      var oInterface = {
        getModel: function () {
          return oBindingContext.getModel().getMetaModel();
        },

        getContext: function () {
          return oMetaContext;
        },

        getPath: function () {
          return oMetaContext.getPath();
        }
      };

      return oInterface;

    };

    AnnotationHelper.formatBindingPathForLineItems.requiresIContext = true;
    AnnotationHelper.getMetaModelContextForFacetType.requiresIContext = true;
    AnnotationHelper.formatExpandBindingPathForHeaderObject.requiresIContext = true;
    AnnotationHelper.resolveFieldGroupTarget.requiresIContext = true;
    AnnotationHelper.resolveLineItemTarget.requiresIContext = true;
    AnnotationHelper.resolveLineItemFacet.requiresIContext = true;
    AnnotationHelper.resolveFieldGroupFacet.requiresIContext = true;
    AnnotationHelper.resolveBadgeTarget.requiresIContext = true;

    return AnnotationHelper;

  }, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper",["sap/ui/base/Object", "./AnnotationHelper",
		"sap/ui/model/odata/AnnotationHelper", "sap/ui/model/Context"
	],
	function(BaseObject, QCAnnotationHelper, ODataAnnoHelper, Context) {
		"use strict";


		/*eslint camelcase: [2, {properties: "never"}]*/
		var ODataModelHelper = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.ODataModelHelper");

		ODataModelHelper.createKeyFromPath = function(sSourcePath, oTargetMetaModel, sTargetEntitySet) {

      try {
				var sourceKeyInfo = ODataModelHelper.parseEntityKeysFromContextPath(sSourcePath);
				var targetKeyInfo = ODataModelHelper.getKeyInfoForEntitySet(oTargetMetaModel, sTargetEntitySet);

				if (targetKeyInfo.entitySet === sourceKeyInfo.entitySet && sourceKeyInfo.keys.length === targetKeyInfo.keys.length) {
					if (sSourcePath.startsWith("/")) {
						return sSourcePath.substring(1);
					}

					return sSourcePath;
				}

				var retPath = "" + targetKeyInfo.entitySet + "(";

				jQuery.each(targetKeyInfo.keys, function(i, targetKey) {

					// 1.) try exact name and type mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.property === targetKey.property && sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 2.) try substring of name and exact type mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							var sourceLower = sourceKey.property.toLowerCase();
							var targetLower = targetKey.property.toLowerCase();

							if (targetLower.indexOf(sourceLower) >= 0 && sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 3.) try exact name only
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.property === targetKey.property) {
								if (sourceKey.type === "Edm.String" && targetKey.type !== "Edm.String") {
									targetKey.value = sourceKey.value.substring(1, sourceKey.value.length - 1);
								} else if (sourceKey.type !== "Edm.String" && targetKey.type === "Edm.String") {
									targetKey.value = "'" + sourceKey.value + "'";
								} else {
									targetKey.value = sourceKey.value;
								}
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					// 4.) try exact type only mapping
					if (!targetKey.mapped) {
						jQuery.each(sourceKeyInfo.keys, function(j, sourceKey) {
							if (sourceKey.type === targetKey.type) {
								targetKey.value = sourceKey.value;
								targetKey.mapped = true;
								return false;
							}
							return true;
						});
					}

					retPath += targetKey.property + "=" + targetKey.value;

					if (i < targetKeyInfo.keys.length - 1) {
						retPath += ",";
					}


				});

				retPath += ")";

				return retPath;

			} catch (e) {
        if (sSourcePath && sSourcePath.startsWith("/")) {
          return sSourcePath.substring(1);
        }

        return sSourcePath;
			}
		};


		ODataModelHelper.parseEntityKeysFromContextPath = function(sPath) {
			var path = sPath;

			var ret = {
				entitySet: "",
				keys: []
			};

			if (!path) {
				return ret;
			}

			if (path.startsWith("/")) {
				path = path.substring(1);
			}
			var comps = path.split("(");
			if (comps.length > 1) {
				ret.entitySet = comps[0];

				var keyString = comps[1].split(")")[0];
				if (keyString) {
					var keyComps = keyString.split(",");
					jQuery.each(keyComps, function(i, keyComp) {

						if (keyComp) {
							var fieldValue = keyComp.split("=");
							var key = {};
							if (fieldValue.length == 1) {
								key.value = fieldValue[0];
								key.property = "";
							} else if (fieldValue.length == 2) {
								key.property = fieldValue[0];
								key.value = fieldValue[1];
							}

							if (key.value) {
								if (key.value.indexOf("guid") == 0 && key.value.length == 42) {
									key.type = "Edm.Guid";
								} else if (key.value.charAt(0) === "'" && key.value.charAt(key.value.length - 1) === "'") {
									key.type = "Edm.String";
								} else if (key.value == "true" || key.value == "false") {
									key.type = "Edm.Boolean";
								} else if (jQuery.isNumeric(key.value)) {
									key.type = "Edm.Int";
								} else {
									key.type = "";
								}
								ret.keys.push(key);
							}
						}
					});
				}
			}
			return ret;
		};

		ODataModelHelper.getKeyInfoForEntitySet = function(oMetaModel, sEntitySet) {

			var ret = {
				entitySet: "",
				keys: []
			};

			var keyNames = {};

			if (oMetaModel && sEntitySet) {
				var entitySetMeta = oMetaModel.getODataEntitySet(sEntitySet);
				ret.entitySet = entitySetMeta.name;
				var entityTypeMeta = oMetaModel.getODataEntityType(entitySetMeta.entityType);

				jQuery.each(entityTypeMeta.key.propertyRef, function(i, propRef) {
					keyNames[propRef.name] = "1";
				});

				jQuery.each(entityTypeMeta.property, function(i, prop) {
					if (keyNames[prop.name]) {
						var key = {
							property: prop.name,
							value: ODataModelHelper.getDefaultKeyValueForProperty(prop),
							type: (prop.type.indexOf("Edm.Int") >= 0 ? "Edm.Int" : prop.type)
						};

						ret.keys.push(key);
					}
				});

			}

			return ret;
		};

		ODataModelHelper.getDefaultKeyValueForProperty = function(oProperty) {

			if (oProperty.name.indexOf("IsActive") >= 0 && oProperty.type === "Edm.Boolean") {
				return "true";
			} else {
				switch (oProperty.type) {
					case "Edm.String":
						{
							return "''";
						}
					case "Edm.Guid":
						{
							return "guid'00000000-0000-0000-0000-000000000000'";
						}
					case "Edm.Boolean":
						{
							return "false";
						}
					default:
						{
							if (oProperty.type.indexOf("Int") >= 0) {
								return "0";
							}

							return "''";
						}
				}
			}
		};


		ODataModelHelper.initializeObjectProperties = function(oObjectContext, propertyPaths, createParams) {
			var targetObjects = [];
			var key = oObjectContext.getModel().getKey(oObjectContext.getObject());
			var oOrigObject = oObjectContext.getModel().oData[key];
			if (oOrigObject) {
				targetObjects.push(oOrigObject);
			}
			var oChangedObject = oObjectContext.getModel().mChangedEntities[key];
			if (oChangedObject) {
				targetObjects.push(oChangedObject);
			}
			var oContextMetaData = QCAnnotationHelper.getMetaDataForContext(oObjectContext);
			var i = 0;
			if (propertyPaths && Array.isArray(propertyPaths)) {
				jQuery.each(propertyPaths, function(index, path) {
					var pathComps = path.split("/");
					var ownProperty = pathComps[0];
					var childPath = null;
					if (pathComps.length > 1) {
						childPath = pathComps.slice(1).join("/");
					}

					// if path component is a number, assume it is an index....just continue with next component
					if (jQuery.isNumeric(ownProperty) && childPath) {
						ODataModelHelper.initializeObjectProperties(oObjectContext, [childPath], createParams);
						return;
					}

					i = 0;
					var isNavProp = false;
					if (oContextMetaData.entityType.navigationProperty) {
						for (; i < oContextMetaData.entityType.navigationProperty.length; i++) {
							if (oContextMetaData.entityType.navigationProperty[i].name === ownProperty) {
								isNavProp = true;
								break;
							}
						}
					}

					if (isNavProp && !oOrigObject[ownProperty]) {
						var createdContext = oObjectContext.getModel().createEntry(oObjectContext.getPath() + "/" + ownProperty, createParams);
						oOrigObject[ownProperty] = {
							__deferred: {}
						};
						ODataModelHelper.restoreNavigationPropertyReferences(oObjectContext, ownProperty, createdContext);
						if (childPath) {
							ODataModelHelper.initializeObjectProperties(createdContext, [childPath], createParams);
						}
					}
				});
			}

		};

		ODataModelHelper.restoreLineItemReferences = function(entityType, oContext) {
			var oInterface = QCAnnotationHelper.createFormatterInterface(oContext);

			var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
				entityType, "LineItem");

			if (oMetaDataContext) {
				var sChildPropertyPath = ODataAnnoHelper.getNavigationPath(oMetaDataContext);
				sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
				ODataModelHelper.restoreNavigationPropertyReferences(oContext, sChildPropertyPath);
			}
		};

		ODataModelHelper.restoreNavigationPropertyReferences = function(oParentContext, navProp, oChildContext) {
			if (!navProp) {
				return;
			}


			if (!oParentContext.getObject()) {
				return;
			}

			var oMetaModel = oParentContext.getModel().getMetaModel();
			var sObjectKey = oParentContext.getModel().getKey(oParentContext.getObject());
			var oCurrentObject = oParentContext.getModel().oData[sObjectKey];
			var oEntityTypeMeta = oMetaModel.getODataEntityType(oCurrentObject.__metadata.type);


			var oNavPropAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityTypeMeta, navProp);

			var sNavPropEntitySetName = null;
			var oEntitySets = oMetaModel.getProperty(oMetaModel.getODataEntityContainer(oNavPropAssociationEnd.type)).entitySet;
			jQuery.each(oEntitySets, function(i, eSet) {
				if (eSet.entityType === oNavPropAssociationEnd.type) {
					sNavPropEntitySetName = eSet.name;
				}
			});

			if (!oCurrentObject[navProp]) {
				oCurrentObject[navProp] = {};
			}
			if (oCurrentObject[navProp].__list) {
				oCurrentObject[navProp].__list = [];
			}


			var addChildEntity = function(key) {
				if (oCurrentObject[navProp].__deferred) {
					delete oCurrentObject[navProp].__deferred;
				}
				if (oNavPropAssociationEnd.multiplicity === "*") {
					if (!oCurrentObject[navProp].__list) {
						oCurrentObject[navProp].__list = [];
					}
					oCurrentObject[navProp].__list.push(key);
				} else {
					oCurrentObject[navProp].__ref = key;
				}
			};

			if (!oChildContext) {
				var modelKeys = Object.keys(oParentContext.getModel().oData);
				jQuery.each(modelKeys, function(i, key) {
					if (key.indexOf(sNavPropEntitySetName) >= 0) {
						addChildEntity(key);
					}
				});
			} else {
				var key = oChildContext.getPath().substring(1);
				addChildEntity(key);
			}

		};

		ODataModelHelper.findObjects = function() {
			var parentObj, obj, params;
			if (arguments.length === 3) {
				parentObj = arguments[0];
				obj = arguments[1];
				params = arguments[2];
			} else if (arguments.length == 2) {
				obj = arguments[0];
				params = arguments[1];
			}

			var key = params.key || undefined,
				fnMatchCallBack = params.matchCallback || undefined,
				fnNonMatchCallback = params.noMatchCallback || undefined,
				maxNestedLevel = params.maxNestedLevel || 3;

			var doRecursion = true;

			if (!maxNestedLevel) {
				maxNestedLevel = 3;
			}

			if (!ODataModelHelper.findObjects._recursionCount) {
				ODataModelHelper.findObjects._recursionCount = 0;
			}
			ODataModelHelper.findObjects._recursionCount++;

			if (ODataModelHelper.findObjects._recursionCount > maxNestedLevel) {
				ODataModelHelper.findObjects._recursionCount--;
				return;
			}

			var isObject = function(o) {
				var s = Object.prototype.toString.call(o);
				return (s === '[object Array]' || s === '[object Object]');
			};
			var hasOwn = Object.prototype.hasOwnProperty.bind(obj);

			if (obj) {
				for (var i in obj) {
					if (hasOwn(i)) {

						var bIsObject = isObject(obj[i]);
						if (obj[i] && bIsObject) {
							obj[i].__nestedKey = i;
						}
						doRecursion = true;
						if (i === key && fnMatchCallBack) {
							doRecursion = fnMatchCallBack(parentObj, obj, obj[i]);
						} else if (fnNonMatchCallback) {
							doRecursion = fnNonMatchCallback(parentObj, obj, obj[i]);
						}
						if (doRecursion && bIsObject) {
							ODataModelHelper.findObjects(obj, obj[i], {
								key: key,
								matchCallback: fnMatchCallBack,
								noMatchCallback: fnNonMatchCallback,
								maxNestedLevel: maxNestedLevel
							});
						}
						if (obj[i] && bIsObject) {
							delete obj[i].__nestedKey;
						}
					}
				}
			}

			ODataModelHelper.findObjects._recursionCount--;
		};

		return ODataModelHelper;

	}, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/ODataModelHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController",["sap/ui/core/mvc/Controller", "sap/m/MessageBox", "./AnnotationHelper"], function (MVCController, MessageBox, AnnotationHelper) {
    "use strict";

    var BaseController = MVCController.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickActionBaseController", {

            onInit: function() {
                if (!this._bIsInitialized) {
                    this._bIsInitialized = true;
                    this.oComponent = this.getOwnerComponent() || this.getView().getViewData().component;
                    var oView = this.getView();
                    oView.setModel(this.oComponent.getModel());
                    this.sEntitySet = this.oComponent.getEntitySet();

                    this.oDraftController = this.oComponent.getTransactionController().getDraftController();
                    this.bDraftEnabled = this.oDraftController.getDraftContext().isDraftEnabled(this.sEntitySet);

                    var oMetaModel = this.getView().getModel().getMetaModel();

                    this.oEntitySetMeta = oMetaModel.getODataEntitySet(this.sEntitySet);
                    this.oEntityTypeMeta = oMetaModel.getODataEntityType(this.oEntitySetMeta.entityType);

                    this.oSmartFieldEventDelegate = {
                        onAfterRendering: jQuery.proxy(function (oEvent) {
                            this._onSmartFieldAfterRendering(oEvent);
                        }, this)
                    };
                }
            },

            _onMetaModelLoaded: function() {
                // redefine in subclass for initialization logic after meta data is available
            },

            _onSmartFieldAfterRendering: function(oEvent) {
              // redefine if controller needs to react to smart fields being created
            },

            onBeforeRendering: function () {
                if (!this._bMetaDataInit) {
                    this._bMetaDataInit = true;
                    this.getView().getModel().getMetaModel().loaded().then(jQuery.proxy(this._onMetaModelLoaded, this), jQuery.proxy(this.onError, this));
                }
                this.setBusy(false);
            },

            setBusy: function(bBusy) {
                if (this.getView().getModel("ui")) {
                    this.getView().getModel("ui").setProperty("/busy", bBusy);
                    this.getView().getModel("ui").updateBindings();
                }
            },

            bindView: function (oContext) {
                var oInterface = this._getFormatterInterface(oContext);

                var expandParam = AnnotationHelper.formatExpandBindingPathForHeaderObject(oInterface, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name);

                this.oContext = oContext;

                this.getView().bindElement({
                   path: oContext.getPath(),
                   parameters: {
                      expand: expandParam
                   }
                });

            },

            onError: function (oError) {
                this.setBusy(false);
                if (oError.message) {
                    this._showErrorMessage(oError);
                } else if (oError.response) {
                    this._showErrorMessage(oError.response);
                } else {
                    this._showErrorMessage({message: this.formatI18NMessage("QuickAction_Generic_Error")});
                }
            },

            onSmartFieldsCreated: function (oEvent) {
                var control = oEvent.getParameters()[0];
                if (control && typeof control.addEventDelegate === 'function') {
                    control.removeEventDelegate(this.oSmartFieldEventDelegate);
                    control.addEventDelegate(this.oSmartFieldEventDelegate);
                }
            },


            // used by XML views
            formatI18NMessage: function() {
                if (arguments && arguments[0]) {
                    var sI18N = arguments[0];

                    var resBundle = this.getView().getModel("i18n").getResourceBundle();

                    if (arguments.length > 1) {
                        var args = Array.prototype.slice.call(arguments);
                        return resBundle.getText(sI18N, args.splice(1, arguments.length - 1));
                    }
                    return resBundle.getText(sI18N);
                }

                return arguments;
            },

            _getFormatterInterface: function(oContext) {
                var context = oContext ? oContext : this.getView().getBindingContext();
                return AnnotationHelper.createFormatterInterface(context);
            },

            _setBindingContext: function(oContext) {
                this.getView().setBindingContext(oContext);
                this.setBusy(false);
            },

            _showErrorMessage: function (oError) {
                var error = oError.response || oError;
                var sDetails = error.message;
                if (error.statusText) {
                    sDetails = error.statusText;
                }
                if (error && error.responseText) {
                    try {
                        var oErrObj = jQuery.parseJSON(error.responseText);
                        var sErrDetail = this._getErrorDetail(oErrObj);
                        sDetails = (sErrDetail && sErrDetail.length > 0) ? sErrDetail : sDetails;
                    } catch (exc) {
                        // not a valid JSON string
                    }
                }
                //return details;
                MessageBox.show(sDetails, {
                        icon: MessageBox.Icon.ERROR,
                        title: this.formatI18NMessage("QuickAction_Error_Popover"),
                        actions: [MessageBox.Action.OK]
                    }
                );
            },

            _displaySeverity : function(errorSeverity) {
                var errorSeverityI18N;
               switch (errorSeverity) {
                   case "error":
                       errorSeverityI18N = "Error_Severity_Error";
                       break;
                   case "abort":
                       errorSeverityI18N = "Error_Severity_Abort";
                       break;
                   case "warning":
                       errorSeverityI18N = "Error_Severity_Warning";
                       break;
                   case "info":
                       errorSeverityI18N = "Error_Severity_Info";
                       break;
                   case "termination":
                       errorSeverityI18N = "Error_Severity_Termination";
                       break;
                   case "success":
                       errorSeverityI18N = "Error_Severity_Success";
                       break;
                   }
                   return errorSeverityI18N;
               },

            _getErrorDetail: function (oErrObj) {
                var sDetails = "";
                if (oErrObj && oErrObj.error && oErrObj.error.message) {
                    if (oErrObj.error.innererror && oErrObj.error.innererror.errordetails && oErrObj.error.innererror.errordetails.length > 0) {
                        jQuery.each(oErrObj.error.innererror.errordetails, jQuery.proxy(function (i, errorDetail) {
                            var errorSeverityI18N = this._displaySeverity(errorDetail.severity);
                            sDetails += this.formatI18NMessage(errorSeverityI18N, [errorDetail.message]);
                        }, this));
                    } else if (oErrObj.error.message.value) {
                        sDetails = oErrObj.error.message.value;
                    }
                }
                return sDetails;
            }


        });


        return BaseController;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickActionBaseController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.transaction.DraftContext'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI",["sap/ui/base/ManagedObject", "sap/ui/generic/app/transaction/DraftContext", "sap/m/MessageToast"], function (ManagedObject, DraftContext, MessageToast) {
    "use strict";


    var QuickCreateAPI = ManagedObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickCreateAPI", {

        metadata : {
            library : "sap.suite.ui.generic.template",
            properties : {

            },
            events:
            {
                objectCreated:
                {
                    parameters:
                    {
                        context: { type : "sap.ui.model.Context"}
                    }
                },

                destroyed:
                {
                    parameters:
                    {
                        collectionItemGuid: { type : "String"}
                    }
                },

                autofillLineItems:
                {
                    parameters:
                    {
                        numberOfLineItems: { type : "Number" }
                    }
                }

            }
        }
    });

    QuickCreateAPI.EVENT_CONSTANTS = {
        EventChannel : "sap.fiori.cp.quickactions.EventChannel",
        QUICKCREATE_LINE_ITEMS_FOUND : "LineItemsFound",
        QUICKCREATE_VIEW_CREATED: "QuickCreateViewCreated"
    };

    var ACCESS_COLL_CONSTANTS_ITEMS = "items",
        ACCESS_COLL_CONSTANTS_PARTICIPANTS = "participants";

    QuickCreateAPI.CopilotModelName = "FioriCopilotODataModel";

    QuickCreateAPI._Instances = {};

    QuickCreateAPI.getInstance = function(oCollItem) {

        if (!oCollItem) {
            return undefined;
        }

        if (oCollItem.copilotEntity) {
            return QuickCreateAPI._Instances[oCollItem.copilotEntity.getODataKey()];
        } else {
            return QuickCreateAPI._Instances[oCollItem];
        }

    };

    QuickCreateAPI.createAPI = function(oComponentContainer, oComponentInstance, oCopilotController) {

        function getCollectionItem() {
            return oCopilotController.getView().getBindingContext().getObject();
        }

        function getQuickCreateItem() {
            return oCopilotController.getQuickCreateItem();
        }


        function getComponentInstance() {
            return oComponentInstance;
        }

        function getComponentContainer() {
            return oComponentContainer;
        }

        function getCopilotModel() {
            return sap.ui.getCore().getModel(QuickCreateAPI.CopilotModelName);
        }

        function updateDraftID(draftid) {
            if (this._bDestroyed) {
                return;
            }
            var qcObject = this.getQuickCreateItem();

            if (qcObject.draftid === draftid) {
                return;
            }
            qcObject.draftid = draftid;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }


        function getRootControl() {
            return oComponentInstance.getAggregation("rootControl");
        }

        function getRootView() {
            return this.oRootView;
        }

        function setRootView(view) {
          this.oRootView = view;
          this.calculateViewHeight(this.oRootView, true);
        }

        function isDraftEnabled() {

            if (this.oRootView && this.oRootView.getController() && this.oRootView.getController().bDraftEnabled !== undefined) {
                return this.oRootView.getController().bDraftEnabled;
            }

            if (!this.oRootView || !this.oRootView.getBindingContext()) {
                return undefined;
            }


            var draftContext = new DraftContext(this.getQuickCreateModel());
            return draftContext.hasDraft(this.oRootView.getBindingContext());
        }

        function getQuickCreateModel() {
            var oModel = this.getComponentInstance().getModel();
            if (!oModel && this.oRootView) {
                oModel = this.oRootView.getModel();
            }

            return oModel;
        }

        function isCurrentUserCreator() {
            return oCopilotController.isCurrentUserCreator();
        }


        function getQuickCreateRootBindingContext() {
            if (!this.oRootView) {
                return undefined;
            }

            return this.oRootView.getBindingContext();
        }


        function getQuickCreateRootEntityType() {
            var context = this.getQuickCreateRootBindingContext();
            if (context && context.getObject()) {
                return context.getObject().__metadata.type;
            }

            return undefined;
        }

        function _onLineItemsFound(sChannel, sEventName, oParameters) {
            var numberLineItems = oParameters.numberOfLineItems;
            if (numberLineItems <= 0) {
                return;
            }

            this.fireAutofillLineItems({numberOfLineItems: numberLineItems});
        }

        function _onComponentContainerAfterRendering () {
            this._attachToModelBindingChanges();
            if (!this.oRootView) {
                var oView = oCopilotController.oViewUtils.findFirstViewFromControlHierarchy(this.getRootControl());
                if (oView) {
                    this.setRootView(oView);
                }
            }
        }

        function _attachToModelBindingChanges() {
          if (!this._bBindingChangeAttached) {
            var oModel = oComponentInstance.getModel();
            if (oModel) {
              var origAddBinding = oModel.addBinding.bind(oModel);
              var that = this;
              oModel.addBinding = function(binding) {
                origAddBinding(binding);
                binding.attachEvent("change", that._onDataBindingChanged);
              };
              this._bBindingChangeAttached = true;
            }
          }
        }

        function loadQuickCreateModelFromJSON() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oDataModel = this.getCopilotModel();

                oDataModel.read("/" + oDataModel.getKey(this.getQuickCreateItem()), {
                    success: jQuery.proxy(function (oData, oResponse) {
                        if (oData.modeljson) {
                            var oModel = this.getQuickCreateModel();
                            this._loadingJSON = true;
                            if (this.isDraftEnabled()) {
                                oModel.oData = JSON.parse(oData.modeljson);
                            } else {
                                var oModelState = JSON.parse(oData.modeljson);
                                oModel.mChangedEntities = oModelState.mChangedEntities;
                                oModel.mChangeHandles = oModelState.mChangeHandles;
                                oModel.mDeferredRequests = oModelState.mDeferredRequests;
                                oModel.oData = oModelState.oData;
                            }
                            oModel.updateBindings();
                        }
                        if (resolve) {
                            resolve();
                        }
                        delete this._loadingJSON;
                    }, this),
                    error: jQuery.proxy(function (oError) {

                        if (reject) {
                            reject(oError);
                        }

                    }, this)
                });

            }, this));
        }



        function _onDataBindingChanged() {
            if (!this._oUpdateModelJSONTimer) {
                this._oUpdateModelJSONTimer = setTimeout(this._updateModelJSON, 2000);
            }
        }



        function _updateModelJSON() {
            if (this._loadingJSON || this._bDestroyed || !this.isCurrentUserCreator()) {
                return;
            }

            this._oUpdateModelJSONTimer = null;

            var qcObject = this.getQuickCreateItem();

            var oModel = this.getQuickCreateModel();

            var newJSON = "";

            if (this.isDraftEnabled()) {
                var oEntities = {};

                var changedKeys = Object.keys(oModel.mChangedEntities);
                var keys = Object.keys(oModel.oData);
                var mergedEntity = {};
                jQuery.each(keys, jQuery.proxy(function(i, key) {

                    if (oModel.mChangedEntities[key]) {
                        mergedEntity = {};
                        jQuery.extend(mergedEntity, oModel.oData[key]);
                        jQuery.extend(mergedEntity, oModel.mChangedEntities[key]);
                        oEntities[key] = mergedEntity;
                    } else {
                        oEntities[key] = oModel.oData[key];
                    }

                }, this));

                jQuery.each(changedKeys, jQuery.proxy(function(i, key) {
                    if (!oEntities[key]) {
                        oEntities[key] = oModel.mChangedEntities[key];
                    }
                }, this));

                newJSON = JSON.stringify(oEntities);
            } else {
                var oModelState = {};

                oModelState.mChangedEntities = oModel.mChangedEntities;
                oModelState.mChangeHandles = oModel.mChangeHandles;
                oModelState.mDeferredRequests = oModel.mDeferredRequests;
                oModelState.oData = oModel.oData;

                newJSON = JSON.stringify(oModelState);
            }

            if (newJSON === qcObject.modeljson) {
                return;
            }


            qcObject.modeljson = newJSON;

            qcObject.copilotEntity.update(qcObject, {

              error: jQuery.proxy(function (oError) {
                       jQuery.sap.log.error(oError, "", "QuickCreateAPI");
                     }, this)

            });
        }

        function discardQuickCreateDraft() {

            return new Promise(jQuery.proxy(function(resolve, reject) {

                var oModel = this.getQuickCreateModel();

                if (this.oRootView && this.oRootView.getBindingContext()) {

                    if (this.isDraftEnabled()) {

                        oModel.remove(this.oRootView.getBindingContext().getPath(), {

                            success: function () {
                                MessageToast.show("Draft has been discarded");
                                resolve();
                            },

                            error: function (oError) {
                                reject(oError);
                            }

                        });
                    } else {
                        oModel.resetChanges();
                        resolve();
                    }
                } else {
                    resolve();
                }

            }, this));
        }


        function calculateViewHeight(oView, bIncrease) {
            if (oView) {
                oCopilotController.calculateViewHeight(oView, bIncrease);
            }
        }

        function setComponentContainerHeight(height) {
            oCopilotController.setComponentContainerHeight(height);
        }

        function objectCreated(oContext) {
            if (this._bDestroyed) {
                return;
            }
            this.fireObjectCreated({context: oContext});
        }

        function fireQuickCreateViewCreated() {
          // fire embedded view created event
          sap.ui.getCore().getEventBus().publish(
              QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
              QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_VIEW_CREATED,
              {
                  api: this
              }
          );
        }

        function destroy() {
            if (this._bDestroyed) {
                return;
            }
            if (this._oUpdateModelJSONTimer) {
                clearTimeout(this._oUpdateModelJSONTimer);
                this._oUpdateModelJSONTimer = null;
            }
            delete QuickCreateAPI._Instances[this._InstanceKey];
            if (oComponentContainer && !oComponentContainer._bIsBeingDestroyed && !oComponentContainer.bIsDestroyed) {
                oComponentContainer.destroy();
            }

            this.oRootView = undefined;

            // subscribe to line items found on quick create
            sap.ui.getCore().getEventBus().unsubscribe(
                QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
                QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
                this._onLineItemsFound,
                this);

            this.fireDestroyed({collectionItemGuid: this._InstanceKey});

            ManagedObject.prototype.destroy.call(this);

            this._bDestroyed = true;
        }

        function _getCollectionParts (sPart, aItemTypes) {

            if (this.getCollectionItem()
                && this.getCollectionItem().copilotEntity
                && this.getCollectionItem().copilotEntity.getParentEntity()
                && this.getCollectionItem().copilotEntity.getParentEntity().copilotEntity) {

                if (sPart === ACCESS_COLL_CONSTANTS_ITEMS) {
                    return this.getCollectionItem().copilotEntity.getParentEntity().copilotEntity.getItemsPublic(aItemTypes);
                } else if (sPart === ACCESS_COLL_CONSTANTS_PARTICIPANTS) {
                    return this.getCollectionItem().copilotEntity.getParentEntity().copilotEntity.getParticipantsPublic();
                } else {
                    return new Promise(function(resolve, reject){
                        if (reject) {
                            reject("Error: " + sPart + " is not a valid part of a collection.");
                        } else {
                            resolve([]);
                        }
                    });
                }
            }
            return new Promise(function(resolve, reject){
                if (reject) {
                    reject("Error: Cannot load collection " + sPart + ". Copilot collection entity cannot be accessed");
                } else {
                    resolve([]);
                }
            });
        }

        function getCollectionItems (aItemTypes) {
            return _getCollectionParts.call(this, ACCESS_COLL_CONSTANTS_ITEMS, aItemTypes);
        }

        function getCollectionParticipants () {
            return _getCollectionParts.call(this, ACCESS_COLL_CONSTANTS_PARTICIPANTS);
        }

        var api = new QuickCreateAPI();

        api.COLLECTION_ITEM_TYPES = {};
        api.COLLECTION_ITEM_TYPES.ITEM_TYPE_NOTE = "NOTE";
        api.COLLECTION_ITEM_TYPES.ITEM_TYPE_RELOBJ = "RO";
        api.COLLECTION_ITEM_TYPES.ITEM_TYPE_SCREENSHOT = "SCRS";
        api.COLLECTION_ITEM_TYPES.ITEM_TYPE_IMAGE = "IMG";
        api.COLLECTION_ITEM_TYPES.ITEM_TYPE_DOCUMENT = "DOC";
        api.COLLECTION_ITEM_TYPES = Object.freeze(api.COLLECTION_ITEM_TYPES);


        jQuery.extend(api, {

            getCollectionItem: getCollectionItem.bind(api),
            getQuickCreateItem: getQuickCreateItem.bind(api),
            updateDraftID: updateDraftID.bind(api),
            getRootControl: getRootControl.bind(api),
            isDraftEnabled: isDraftEnabled.bind(api),
            isCurrentUserCreator: isCurrentUserCreator.bind(api),
            getQuickCreateRootBindingContext: getQuickCreateRootBindingContext.bind(api),
            getQuickCreateRootEntityType: getQuickCreateRootEntityType.bind(api),
            _onComponentContainerAfterRendering: _onComponentContainerAfterRendering.bind(api),
            calculateViewHeight: calculateViewHeight.bind(api),
            setComponentContainerHeight: setComponentContainerHeight.bind(api),
            getQuickCreateModel: getQuickCreateModel.bind(api),
            objectCreated: objectCreated.bind(api),
            destroy: destroy.bind(api),
            getRootView: getRootView.bind(api),
            setRootView: setRootView.bind(api),
            getComponentInstance: getComponentInstance.bind(api),
            getComponentContainer: getComponentContainer.bind(api),
            _onDataBindingChanged: _onDataBindingChanged.bind(api),
            _attachToModelBindingChanges: _attachToModelBindingChanges.bind(api),
            loadQuickCreateModelFromJSON: loadQuickCreateModelFromJSON.bind(api),
            _updateModelJSON: _updateModelJSON.bind(api),
            getCopilotModel: getCopilotModel.bind(api),
            discardQuickCreateDraft: discardQuickCreateDraft.bind(api),
            _onLineItemsFound: _onLineItemsFound.bind(api),
            fireQuickCreateViewCreated:fireQuickCreateViewCreated.bind(api),
            getCollectionItems: getCollectionItems.bind(api),
            getCollectionParticipants: getCollectionParticipants.bind(api)
        });

        oComponentContainer.addEventDelegate({
            onAfterRendering: api._onComponentContainerAfterRendering
        });

        api._InstanceKey = api.getCollectionItem().copilotEntity.getODataKey();
        if (QuickCreateAPI._Instances[api._InstanceKey]) {
            QuickCreateAPI._Instances[api._InstanceKey].destroy();
        }
        delete QuickCreateAPI._Instances[api._InstanceKey];
        QuickCreateAPI._Instances[api._InstanceKey] = api;

        // subscribe to line items found on quick create
        sap.ui.getCore().getEventBus().subscribe(
            QuickCreateAPI.EVENT_CONSTANTS.EventChannel,
            QuickCreateAPI.EVENT_CONSTANTS.QUICKCREATE_LINE_ITEMS_FOUND,
            api._onLineItemsFound,
            api);

        oComponentInstance.oQuickCreateAPI = api;

        return oComponentInstance.oQuickCreateAPI;

    };

    return QuickCreateAPI;

}, true);

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickCreateAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory') ) {
/*global Promise */
jQuery.sap.declare('sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.ApplicationController'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/js/QuickTemplates/QuickTemplateComponentFactory",[
		"sap/ui/base/Object",
		"sap/ui/core/UIComponent",
		"sap/ui/model/resource/ResourceModel",
		"sap/ui/core/mvc/ViewType",
		"sap/ui/model/json/JSONModel",
		"sap/ui/generic/app/ApplicationController"
	],
	function(BaseObject, UIComponent, ResourceModel, ViewType, JSONModel, ApplicationController) {
		"use strict";


		var factory = BaseObject.extend("sap.suite.ui.generic.template.js.QuickTemplates.QuickTemplateComponentFactory");

		function fnEnhanceI18nModel(oComponent) {
			var oI18NModel = new ResourceModel({
				bundleName: "sap/suite/ui/generic/template/QuickCreate/i18n/i18n"
			});
			var oQVI18nModel = new ResourceModel({
				bundleName: "sap/suite/ui/generic/template/QuickView/i18n/i18n"
			});
			oI18NModel.enhance(oQVI18nModel.getResourceBundle());

			var oTemplateModel = oComponent.getModel("i18n");
			if (oTemplateModel) {
				oI18NModel.enhance(oTemplateModel.getResourceBundle());
			}
			oComponent.setModel(oI18NModel, "i18n");
		}

		function fnDetermineStableViewID(oComponent) {
			return oComponent.getMetadata().getComponentName() + "::" + oComponent.getViewName() + "::" + oComponent.getEntitySet();
		}

		function fnCreateParameterModel(oComponent, sEntityType) {
			var isDraftEnabled = oComponent.getTransactionController().getDraftController().getDraftContext().isDraftEnabled(oComponent.getEntitySet());
			var oSettings = null;
			var oAllSettings = oComponent.oContainer.getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				entityType: sEntityType,
				"sap-ui-debug": window["sap-ui-debug"],
				isDraftEnabled: isDraftEnabled,
				settings: oSettings,
				manifest: oComponent.getManifest()
			});
		}

		function fnCreateXMLView(oComponent) {

			return new Promise(jQuery.proxy(function(resolve, reject) {
				var oView = null;
				var oMetaModel = this.getModel().getMetaModel();
				oMetaModel.loaded().then(jQuery.proxy(function() {

					var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet());
					if (!oEntitySet || !oEntitySet.entityType) {
						jQuery.sap.log.error("The specified entity set " + this.getEntitySet() + " was not found in loaded metadata of service");
						if (reject) {
							reject();
						}
						return;
					}


					var sStableId = fnDetermineStableViewID(this);

					oView = sap.ui.getCore().byId(sStableId);
					if (oView) {
						jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
						try {
							oView.destroy();
						} catch (ex) {
							jQuery.sap.log.warning("Error destroying view: " + ex);
						}
						oView = null;
					}

					var preprocessorsData = this.getComponentData() ? this.getComponentData().preprocessorsData : null;
					oView = sap.ui.view({
						async: false,
						viewData: {
							component: this
						},
						preprocessors: {
							xml: {
								bindingContexts: {
									meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
									entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(this.getEntitySet(), true))
								},
								models: {
									meta: oMetaModel,
									entitySet: oMetaModel,
									parameter: fnCreateParameterModel(this, oEntitySet.entityType)
								},
								preprocessorsData: preprocessorsData
							}
						},
						id: sStableId,
						type: ViewType.XML,
						viewName: this.getViewName(),
						height: "100%"
					});

					resolve(oView);
				}, this));
			}, oComponent));

		}



		function fnInit() {
			// call super init (will call function "create content")
			UIComponent.prototype.init.apply(this, arguments);
			this._oApplicationController = new ApplicationController(this.getModel());
		}

		function fnExit() {
			if (this._oApplicationController) {
				this._oApplicationController.destroy();
			}
			this._oApplicationController = null;
		}

		factory.createQuickTemplateComponent = function(oComponentName, oComponentDefinition) {
			var genericDefinition = {

				metadata: {
					library: "sap.suite.ui.generic.template",
					properties: {
						/**
						 * Name of template
						 */
						viewName: {
							type: "string",
							defaultValue: null
						},
						/**
						 * Entity Set
						 */
						entitySet: {
							type: "string",
							defaultValue: null
						}
					}
				},

				getAppComponent: function() {
					return this;
				},

				onBeforeRendering: function() {
					var oContainer = this.oContainer;
					var oModel = !this.createViewStarted && this.getModel();
					if (oModel) {
						oModel.getMetaModel().loaded().then(function() { // Do the templating once the metamodel is loaded
							if (!this.createViewStarted) {
								this.createViewStarted = true;
								fnCreateXMLView(this).then(function(oView) {
									this.setAggregation("rootControl", oView);
									if (this.oQuickCreateAPI) { // does not exist in a QuickView
										this.oQuickCreateAPI.fireQuickCreateViewCreated();
									}
									fnEnhanceI18nModel(this);
									var i18n = this.getModel("i18n");
									if (i18n) {
										oView.setModel(i18n, "i18n");
									}
									oContainer.invalidate();
								}.bind(this));
							}
						}.bind(this));
					}
				},



				getTransactionController: function() {
					return this._oApplicationController.getTransactionController();
				},


				getApplicationController: function() {
					return this._oApplicationController;
				}


			};

			var definedInit = oComponentDefinition.init;
			oComponentDefinition.init = function() {
				fnInit.apply(this, arguments);
				if (typeof definedInit === "function") {
					definedInit.apply(this, arguments);
				}

			};

			var definedExit = oComponentDefinition.exit;
			oComponentDefinition.exit = function() {
				fnExit.apply(this, arguments);
				if (typeof definedExit === "function") {
					definedExit.apply(this, arguments);
				}
			};

			jQuery.extend(true, genericDefinition, oComponentDefinition);
			return UIComponent.extend(oComponentName, genericDefinition);
		};

		return factory;

	});

}; // end of sap/suite/ui/generic/template/js/QuickTemplates/QuickTemplateComponentFactory.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ComponentUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ComponentUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ComponentUtils",["jquery.sap.global", "sap/ui/base/Object"], function(jQuery, BaseObject) {
	"use strict";

	var CONTEXT_FAILED = {};  // constant indicating that reading failed
	
	function getMethods(oComponent, oComponentRegistryEntry) {

		// This promise if resolved when the element binding for the header data have been read. Note that the promise
		// stored in this variable is replaced each time the function fnRebindHeaderData is called.
		// Thus, the promise allways represents the loading of the currently relevant header data.
		var oHeaderDataAvailablePromise;
		var fnHeaderDataAvailableResolve = null; // function to resolve the promise (or null if it is resolved)
		
		var oContextToAdaptTo;  // a context for an element binding that is still waiting to be analyzed

		var fnBusyResolve;
		var bIsDataLoading = false;
		
		var aCurrentKeys = [];

		// Registry for the event handling facility (see fnAttach, fnDetach, and fnFire)
		var aEventHandlerRegistry = [];
		
		// Check whether this binding path represents a transient context. In our scenario this means that we
		// are in a create scenario for a non-draft entity.
		function isNonDraftCreate(sBindingPath) {
			var oEntity;
			var oModel = oComponent.getModel();
			if (sBindingPath) {
				if (oModel) {
					oEntity = oModel.getProperty(sBindingPath);
				}
			} else {
				var oContext = oComponent.getBindingContext();
				if (oContext) {
					oEntity = oContext.getObject();
				}
			}

			// workaround until ODataModel provides method
			return !!(oEntity && oEntity.__metadata && oEntity.__metadata.created);
		}
		
		function getTemplatePrivateModel() {
			return oComponent.getModel("_templPriv");
		}
		
		function getViewLevel(){
			return getTemplatePrivateModel().getProperty("/generic/viewLevel");
		}
		
		function getPreprocessorsData(){
			return oComponentRegistryEntry.preprocessorsData;	
		}
		
		function getParameterModelForTemplating(){
			return oComponentRegistryEntry.oParameterModel; // prepared by method createXMLView() in TemplateComponent
		}
		
		function getODataLoadFailedTexts() {
			var oRB = oComponent.getModel("i18n").getResourceBundle();
			return {
				dataLoadFailedTitle: oRB.getText("ST_ERROR"),
				dataLoadFailedText: oRB.getText("ST_GENERIC_ERROR_LOAD_DATA_TEXT")
			};
		}

		function fnAttach(sTemplate, sEvent, fnFunction) {
			if (typeof fnFunction !== "function") {
				throw new Error("Event handler must be a function");
			}
			aEventHandlerRegistry.push({
				template: sTemplate,
				event: sEvent,
				handler: fnFunction
			});
		}

		function fnDetach(sTemplate, sEvent, fnFunction) {
			for (var i = aEventHandlerRegistry.length; i--; ) {
				if (aEventHandlerRegistry[i].handler === fnFunction && aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template ===
					sTemplate) {
					aEventHandlerRegistry.splice(i, 1);
				}
			}
		}

		function fnFire(sTemplate, sEvent, oEvent) {
			for (var i = 0; i < aEventHandlerRegistry.length; i++) {
				if (aEventHandlerRegistry[i].event === sEvent && aEventHandlerRegistry[i].template === sTemplate) {
					aEventHandlerRegistry[i].handler(oEvent);
				}
			}
		}

		function getTemplateName(oController) {
			return oController.getMetadata().getName();
		}
		
		function isComponentActive(){
			return oComponentRegistryEntry.oApplication.isComponentActive(oComponent);	
		}

		function fnPageDataLoadedOnNavigation(oContext, bCallReuseCallbacks){
			var oNavigationFinishedPromise = oComponentRegistryEntry.oNavigationObserver.getProcessFinished(true);                                 
			oNavigationFinishedPromise.then(function() {
				if (isComponentActive()){
					if (bCallReuseCallbacks){
						fnCallReuseCallbacks(true);	
					}
					fnFire(getTemplateName(oComponentRegistryEntry.oController), "PageDataLoaded", {
						context: oContext
					});
				}
			});			
		}
		
		function fnPreparePageDataLoaded() {
			oHeaderDataAvailablePromise.then(function(oContext) {
				if (oContext) {
					fnPageDataLoadedOnNavigation(oContext);
				}
			});
		}
		
		function fnStartBusy(){
			oComponentRegistryEntry.oHeaderLoadingObserver.startProcess();
			if (!fnBusyResolve){
				var oBusyPromise = new Promise(function(fnResolve){
					fnBusyResolve = fnResolve;	
				});
				oComponentRegistryEntry.oApplication.getBusyHelper().setBusy(oBusyPromise);
			}			
		}

		function fnDataRequested() {
			bIsDataLoading = true;
			if (!fnHeaderDataAvailableResolve) { // the current HeaderDataAvailablePromise was already resoled -> create a new one
				oHeaderDataAvailablePromise = new Promise(function(fnResolve) {
					fnHeaderDataAvailableResolve = fnResolve;
				});
			}
			if (!oComponent.getComponentContainer().getElementBinding().isSuspended()) {
				fnStartBusy();
			}
		}

		function fnEndBusy(){
			if (fnBusyResolve){
				fnBusyResolve();
				fnBusyResolve = null;
			}
			oComponentRegistryEntry.oHeaderLoadingObserver.stopProcess();
		}
		
		function getReadContext(oEvent){
			var oRet = oEvent.getSource().getBoundContext();
			if (oRet) {
				return oRet;
			}
			if (oComponent.getComponentContainer().getElementBinding().isSuspended()) {
				oRet = null;
			} else {
				oRet = CONTEXT_FAILED;
			}
			fnUnbind();
			fnEndBusy();
			return oRet; 
		}
		
		function fnNavigateToDataLoadedFailedPage(){
			var oDataLoadFailedTexts = getODataLoadFailedTexts();
			var oNavigationController = oComponent.getAppComponent().getNavigationController();
			oNavigationController.navigateToMessagePage({
				title: oDataLoadFailedTexts.dataLoadFailedTitle,
				text: oDataLoadFailedTexts.dataLoadFailedText,
				description: "",
				viewLevel: getViewLevel()
			});
		}
		
		function fnAdaptToContext(){
			bIsDataLoading = false;
			if (!oContextToAdaptTo){
				return;
			}
			if (oContextToAdaptTo === CONTEXT_FAILED){
				fnNavigateToDataLoadedFailedPage();
			} else if (!oComponent.getComponentContainer().getElementBinding().isSuspended()) {
				if (fnHeaderDataAvailableResolve) {
					fnHeaderDataAvailableResolve(oContextToAdaptTo);
				}
				(oComponentRegistryEntry.methods.updateBindingContext || jQuery.noop)();
			} else {
				return;
			}
			fnHeaderDataAvailableResolve = null;
			oContextToAdaptTo = null;
		}
		
		function fnDataReceived(oEvent){
			fnEndBusy();
			if (bIsDataLoading){ // otherwise this has already been handled by the Change-Handler
				oContextToAdaptTo = getReadContext(oEvent);	
			}
			fnAdaptToContext();
		}

		function fnChange(oEvent) {
			oContextToAdaptTo = getReadContext(oEvent);
			fnAdaptToContext();
			oComponentRegistryEntry.oHeaderLoadingObserver.stopProcess();
		}
		
		// Note: This method is called by fnBindComponent only.
		// Therefore it is ensured, that oComponentRegistryEntry.viewRegisterd is already resolved, when this method is called.
		function fnRebindHeaderData(sBindingPath) {
			var oParameter = {};
			var oPreprocessorsData = getPreprocessorsData();
			if (oPreprocessorsData.rootContextExpand && oPreprocessorsData.rootContextExpand.length) {
				oParameter.expand = oPreprocessorsData.rootContextExpand.join(",");
			}
			oComponentRegistryEntry.oHeaderLoadingObserver.startProcess();
			//In case the component needs to prepare or reset anything
			if (oComponentRegistryEntry.methods.beforeRebind) {
				oComponentRegistryEntry.methods.beforeRebind();
			}			
			oHeaderDataAvailablePromise = new Promise(function(fnResolve) {
				oContextToAdaptTo = null;
				fnHeaderDataAvailableResolve = fnResolve;
				oComponent.getComponentContainer().bindElement({
					path: sBindingPath,
					events: {
						dataRequested: fnDataRequested,
						dataReceived: fnDataReceived,
						change: fnChange
					},
					parameters: oParameter,
					batchGroupId: "Changes", // get navigation controller constant?
					changeSetId: "Changes"
				});
			});
			//In case the component needs to reset anything
			if (oComponentRegistryEntry.methods.afterRebind) {
				oComponentRegistryEntry.methods.afterRebind();
			}			
		}
		
		function fnUnbind(){
			var oComponentContainer = oComponent.getComponentContainer();
			oComponentContainer.unbindElement();
			oContextToAdaptTo = null;
		}

		// Refreshes the content of aCurrentKeys and returns whether this was necessary.
		function fnCompareKeysAndStoreNewOnes(){
			var aNewKeys = getCurrentKeys();
			var bNoDifferenz = (aNewKeys.length === aCurrentKeys.length);
			for (var i = 0; i < aNewKeys.length && bNoDifferenz; i++){
				bNoDifferenz = aNewKeys[i] === aCurrentKeys[i];	
			}
			aCurrentKeys = aNewKeys;
			return !bNoDifferenz;
		}
		
		function fnCallReuseCallbacks(bUnconditional){
			var aReuseComponentProxies = oComponentRegistryEntry.reuseComponentProxies;	
			for (var i = 0; i < aReuseComponentProxies.length; i++){
				aReuseComponentProxies[i].pathUnchangedCallBack(bUnconditional);	
			}			
		}

		// Note: This method is called by TemplateComponent.onActivate. The definition can be found in class TemplateAssembler.
		// There it is ensured that oComponentRegistryEntry.viewRegisterd is already resolved, when this method is called.				
		function fnBindComponent(sBindingPath, bIsComponentCurrentlyActive) {
			var bAreKeysDifferent = fnCompareKeysAndStoreNewOnes();
			if (!sBindingPath){
				if (oComponentRegistryEntry.routingSpec && oComponentRegistryEntry.routingSpec.noOData){
					fnPageDataLoadedOnNavigation(null, bAreKeysDifferent);
				}				
				return;
			}
			var oComponentContainer = oComponent.getComponentContainer();
			if (!oComponentContainer){
				return;
			}
			if (isNonDraftCreate(sBindingPath)) {
				fnUnbind();
				oComponentContainer.setBindingContext(oComponentContainer.getModel().getContext(sBindingPath));
				Promise.all([oComponentRegistryEntry.oViewRenderdPromise, oComponentRegistryEntry.viewRegisterd]).then(fnCallReuseCallbacks.bind(null, true));
			} else {
				var oElementBinding = oComponentContainer.getElementBinding();
				if (oElementBinding){
					if (oElementBinding.getPath() === sBindingPath) {
						/*
						* component is already bound to this object - no rebound to avoid that 1:1, 1:N and expands are read
						* again
						*/
						if (oElementBinding.isSuspended()) {
							oElementBinding.resume();
							fnAdaptToContext();
						}
						if (bIsDataLoading){
							fnStartBusy();
						}
						oComponentRegistryEntry.oApplication.getBusyHelper().getUnbusy().then(fnCallReuseCallbacks.bind(null, bAreKeysDifferent && oComponentRegistryEntry.routingSpec.noOData));
						if (!bIsComponentCurrentlyActive){
							fnPreparePageDataLoaded();
						}
						return;
					} else if (!bIsComponentCurrentlyActive){
						fnUnbind();
					}
				}
				// set the UI model to not editable / enabled as long as the binding data is read
				var oUIModel = oComponent.getModel("ui");
				oUIModel.setProperty("/enabled", false);
				oUIModel.setProperty("/editable", false);
				// and read the header data if necessary
				fnRebindHeaderData(sBindingPath);

				fnPreparePageDataLoaded();
			}
		}
		
		function fnSuspendBinding(){
			var oComponentContainer = oComponent.getComponentContainer();
			var oContext = oComponentContainer.getBindingContext();
			var sBindingPath = oContext && oContext.getPath();
			var bIsNonDraftCreate = sBindingPath && isNonDraftCreate(sBindingPath);
			if (bIsNonDraftCreate){
				oComponentContainer.setBindingContext();
				return;
			}
			var oElementBinding = oComponentContainer.getElementBinding();
			if (oElementBinding && !oElementBinding.isSuspended()){ // suspend element bindings of inactive components
				// if there are validation messages remove the binding. This also removes the validation messages, such that they are not visible on the next page
				if (oComponentRegistryEntry.oTemplateContract.oValidationMessageBinding.getLength()){
					fnUnbind();
				} else {
					oElementBinding.suspend();
				}
				fnEndBusy();
			}			
		}

		function setBackNavigation(fnBackNavigation) {
			oComponentRegistryEntry.oApplication.setBackNavigation(fnBackNavigation);
		}

		function registerContext(oContext){
			return oComponentRegistryEntry.oApplication.registerContext(oContext);
		}
		
		function getBreadCrumbInfo(){
			return oComponentRegistryEntry.oApplication.getBreadCrumbInfo(oComponent.getEntitySet());
		}
		
		function getCurrentKeys(){
			return oComponentRegistryEntry.oApplication.getCurrentKeys(getViewLevel());
		}
		
		function getCommunicationModel(){
			return oComponentRegistryEntry.oApplication.getCommunicationModel(oComponent);
		}
		
		function getCommunicationObject(iLevel){
			return oComponentRegistryEntry.oApplication.getCommunicationObject(oComponent, iLevel);	
		}
		
		function fnNavigateRoute(sRouteName, sKey, sEmbeddedKey, bReplace){
			oComponentRegistryEntry.oApplication.navigateRoute(sRouteName, sKey, oComponentRegistryEntry, sEmbeddedKey, bReplace);	
		}
		
		function getTitleFromTreeNode(){
			var sEntitySet = oComponent.getEntitySet();
			var oTreeNode = oComponentRegistryEntry.oTemplateContract.mEntityTree[sEntitySet];
			return oTreeNode.headerTitle;
		}
		
		function isDraftEnabled() {
			var sEntitySet = oComponent.getEntitySet();
			var oTreeNode = oComponentRegistryEntry.oTemplateContract.mEntityTree[sEntitySet];
			return oTreeNode.isDraft;
		}
		
		function isODataBased(){
			return !(oComponentRegistryEntry.routingSpec && oComponentRegistryEntry.routingSpec.noOData);	
		}
		
		function getHeaderDataAvailablePromise(){
			return oHeaderDataAvailablePromise;
		}
		
		return {
			setEditableNDC: function(bIsEditable) {
				oComponentRegistryEntry.oApplication.setEditableNDC(bIsEditable);
			},
			getEditableNDC: function() {
				return oComponentRegistryEntry.oApplication.getEditableNDC();
			},

			getBusyHelper: function() {
				return oComponentRegistryEntry.oApplication.getBusyHelper();
			},

			isNonDraftCreate: isNonDraftCreate,

			attach: function(oController, sEvent, fnFunction) {
				fnAttach(getTemplateName(oController), sEvent, fnFunction);
			},
			detach: function(oController, sEvent, fnFunction) {
				fnDetach(getTemplateName(oController), sEvent, fnFunction);
			},
			fire: function(oController, sEvent, oEvent) {
				fnFire(getTemplateName(oController), sEvent, oEvent);
			},
			
			// temporary solution
			isListReportTemplate: function(){
				return sap.suite.ui.generic.template.js.AnnotationHelper.isListReportTemplate(oComponentRegistryEntry.routeConfig);	
			},

			getPreprocessorsData: getPreprocessorsData,
			getParameterModelForTemplating: getParameterModelForTemplating,
			bindComponent: fnBindComponent,
			suspendBinding: fnSuspendBinding,
			setBackNavigation: setBackNavigation,
			getTemplatePrivateModel: getTemplatePrivateModel,
			registerContext: registerContext,
			getViewLevel: getViewLevel,
			getBreadCrumbInfo: getBreadCrumbInfo,
			getCurrentKeys: getCurrentKeys,
			getCommunicationModel: getCommunicationModel,
			getCommunicationObject: getCommunicationObject,
			navigateRoute: fnNavigateRoute,
			getTitleFromTreeNode: getTitleFromTreeNode,
			isDraftEnabled: isDraftEnabled,
			isODataBased: isODataBased,
			isComponentActive: isComponentActive,
			navigateToDataLoadedFailedPage: fnNavigateToDataLoadedFailedPage,
			getHeaderDataAvailablePromise: getHeaderDataAvailablePromise
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ComponentUtils", {
		constructor: function(oComponent, oComponentRegistryEntry) {
			jQuery.extend(this, getMethods(oComponent, oComponentRegistryEntry));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ComponentUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ContextBookkeeping') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ContextBookkeeping'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ContextBookkeeping",["jquery.sap.global", "sap/ui/base/Object"
	],
	function(jQuery, BaseObject) {
		"use strict";

		/* This class is a helper class for supporting navigation to contexts.
		 * More precisely, for each App an instance of this class is created.
		 * This instance stores information about all 'header contexts' of entities which are loaded within the lifetime of the App.
		 * The public methods of this class can be divided into two categories:
		 * - registration methods: Contexts and actions on contexts are registered at this class in order to update the bookkeeping
		 * - retrieval methods: Methods that exploit the information which is stored in this registry
		 */
		function getMethods(oAppComponent) {
			
			// This is the central registry for all the contexts. It maps the path for this context onto a registry entry containing some metadata for this context.
			// More precisely, the entry contains the following properties:
			// - oContext: the context. Note that it is removed, when the entity is deleted.
			// - oContextInfo: information about the context. This object has the following attributes:
			//                 - bIsDraftSupported: Does the entity this context belongs to support draft at all			
			//                 - bIsDraft: is this context representing a draft (only possible when bIsDraftSupported is true)
			//                 - bIsCreate: Is this a create context
			// - oSiblingPromise: This property is only valid for non-create drafts. In this case it contains a Promise that resolves to the context of the
			//   active sibling. The property is filled when this Promise is requested the first time (via getDraftSiblingPromise).
			// - oEditingPromise: This property is only valid for top-level active contexts that support draft. In this case it is available, as soon as an editing
			//   session for this object has started. It is removed again, when the editing session ends.
			//   The promise resolves to EditingInfo when the editing really takes place. Thereby, EditingInfo has a property 'context' which contains the 
			//   context of the editing draft.
			//   The promise is rejected, when the editing session could not become active (e.g. because the object is currently locked by another user).
			// - oRemovalPromise: This property is only valid for top-level drafts. In this case it is available as soon as an cancellation (only for edit drafts) or activation session for this
			//   draft has started. If this session fails (e.g. because the activation is rejected) the Promise is rejected and oRemovalPromise is set to be faulty again.
			//   If the session succeeds the Promise resolves to an object with a property 'context' which contains the context of the active version.
			// Note that this registry only contains contexts that belong to existing backend entries. Thus, contexts being created in non-draft create scenarios
			// are not stored in this registry (since they do not yet exist on the server).
			var mPath2ContextData = { }; // currently only used for draft scearios

			/* Begin of registration methods */

			// Private method that creates the ContextInfo for a given context
			function fnCreateDraftInfo(oContext){
				var oDraftController = oAppComponent.getTransactionController().getDraftController();
				var oDraftContext = oDraftController.getDraftContext();
				var oActiveEntity = oContext.getObject();
				// check whether we are draft enabled AND the current context represents a draft
				var bIsDraftSupported = oDraftContext.hasDraft(oContext);
				var bIsDraft = bIsDraftSupported && !oActiveEntity.IsActiveEntity;
				var bIsCreate = bIsDraft && !oActiveEntity.HasActiveEntity;
				
				return {
					bIsDraft: bIsDraft,
					bIsDraftSupported: bIsDraftSupported,
					bIsCreate: bIsCreate
				};
			}
			
			// Public method that registers a context at this instance
			// Note this is the only method which can also be called in non draft scenarios
			function registerContext(oContext){
				var sPath = oContext.getPath();
				var oContextInfo = fnCreateDraftInfo(oContext);
				mPath2ContextData[sPath] = {
					oContextInfo: oContextInfo,
					oContext: oContext
				};
				return oContextInfo;
			}
			
			// Private method that retrieves the information for the given context. If the context is not yet registered, this happens now.
			function getContextData(oContext){
				var sPath = oContext.getPath();
				var oRet = mPath2ContextData[sPath];
				if (!oRet){
					registerContext(oContext);
					oRet = mPath2ContextData[sPath];
				}
				return oRet;
			}
			
			// Private method that is called when the removal (activation, cancellation) of top-level draft oContext is started.
			// bIsCancellation contains the information which case applies
			// oRemovalPromise must be a Promise that is resolved when the removal is executed successfully.
			// If there exists an active version of the draft afterwards (i.e. the operation was activation or the draft was an edit-draft) oRemovalPromise
			// must resolve to an object with property 'context' representing this active version.
			// If the removal fails oRemovalPromise must be rejected.
			function draftRemovalStarted(oContext, oRemovalPromise, bIsCancellation){
				// When the removal is successfull, property oContext of the context info is set to be faulty.
				// When we have an active version of the entity after the removal (i.e. we are not cancelling a create draft) the stored Promises need to be updated
				var oContextData = getContextData(oContext);
				if (!oContextData.oContextInfo.bIsCreate || !bIsCancellation){
					oContextData.oRemovalPromise = oRemovalPromise;
				}
				oRemovalPromise.then(function(oResponse){
					if (!oContextData.oContextInfo.bIsCreate || !bIsCancellation){ // remove Edit Promise from the active version
						var sDisplayPath = oResponse.context.getPath();
						var oDisplayContextInfo = mPath2ContextData[sDisplayPath];
						if (oDisplayContextInfo){
							delete oDisplayContextInfo.oEditingPromise;
						}
					}
					oContextData.oContext = null;  // remove deleted context
				},function(){
					delete oContextData.oRemovalPromise;	
				});				
			}
			
			// Public method that is called, when the activation of oContext is started. oActivationPromise must be a RemovalPromise like described in draftRemovalStarted
			function activationStarted(oContext, oActivationPromise){
				draftRemovalStarted(oContext, oActivationPromise, false);
			}
			
			// Public method that is called, when the cancellation of oContext is started. oCancellationPromise must be a RemovalPromise like described in draftRemovalStarted
			function cancellationStarted(oContext, oCancellationPromise){
				draftRemovalStarted(oContext, oCancellationPromise, true);	
			}
			
			// Public method called when the user has started an editing procedure (of a draft based object)
			// oContext: the context of the object to be edited
			// oEditingPromise: A promise that behaves as the Promise returned by function editEntity of CRUDManager 
			function editingStarted(oContext, oEditingPromise){
				var oContextData = getContextData(oContext);
				oContextData.oEditingPromise = new Promise(function(fnResolve, fnReject){
					var fnNoEdit = function(){
						delete oContextData.oEditingPromise;
						fnReject();
					};
					oEditingPromise.then(function(oEditInfo){
						if (oEditInfo.draftAdministrativeData){
							fnNoEdit();
						} else {
							fnResolve(oEditInfo);	
						}	
					}, fnNoEdit);					
				});
				oContextData.oEditingPromise.catch(jQuery.noop); // avoid ugly console messages
			}
			
			// Private method that is called when the object with path sPath has been deleted
			function fnAdaptAfterObjectDeleted(sPath){
				var oContextData = mPath2ContextData[sPath];
				if (oContextData){
					oContextData.oContext = null;
				}
			}
			
			// Public method that is called when one or more objects have been deleted.
			// The pathes for the deleted objects are contained in the array aDeletedPath
			function fnAdaptAfterDeletion(aDeletedPath){
				for (var i = 0; i < aDeletedPath.length; i++){
					fnAdaptAfterObjectDeleted(aDeletedPath[i]);	
				}
			}
			
			/* End of registration methods */
			
			/* Begin of retrieval methods */
			
			// Private method that creates and returns a Promise that resolves to the context for the sibling of the specified context.
			// If the determination of the sibling information fails or no sibling currently exists, the Promise is rejected.
			function createDraftSiblingPromise(oModel, sPath){
				return new Promise(function(fnResolve, fnReject) {
					oModel.read(sPath + "/SiblingEntity", {
						success: function(oResponseData) {
							var oActive = oModel.getContext("/" + oModel.getKey(oResponseData));
							fnResolve(oActive);
						},
						error: function(oError) {
							fnReject(oError);
						}
					});
				});				
			}
			
			// Public method that returns a Promise that resolves to the sibling of the given context.
			// More precisely:
			// - The Promise resolves to nothing, when oContext is a Create-draft
			// - The Promise resolves to oContext, if oContext does not support drafts
			// - The Promise is rejected if an error occurs
			// - The Promise is rejected if oContext is active, supports drafts, but does not have a sibling
			// - The Promise resolves to the sibling context of oContext if it has one (and the sibling context can be determined)
			function getDraftSiblingPromise(oContext){
				var oContextData = getContextData(oContext);
				if (oContextData.oContextInfo.bIsCreate){
					return Promise.resolve();
				}
				var oSiblingPromise = oContextData.oSiblingPromise;
				if (!oSiblingPromise){
					oSiblingPromise = oContextData.oContextInfo.bIsDraftSupported ? 
						createDraftSiblingPromise(oContext.getModel(), oContext.getPath()) :
						Promise.resolve(oContext);
					// For active draft supporting contexts the sibling can change over time. Therefore, the Promise can only be cached
					// for later reuse, when oContext is either a draft or does not support drafts
					if (oContextData.oContextInfo.bIsDraft || !oContextData.oContextInfo.bIsDraftSupported){
						oContextData.oSiblingPromise = oSiblingPromise;
					}
				}
				return oSiblingPromise;
			}
			
			// Public method that is used to check whether navigation to a context should be forwarded to another context.
			// sPath describes the path that is navigated to
			// Returns a Promise that either returns to faulty (no forwarding needed) or to an AlternativeContextInfo
			// AlternativeContextInfo is an object containing the following properties:
			// - context: The context that should be navigated to
			// - iDisplayMode: the display mode to be used as described in function init of sap.suite.ui.generic.template.ObjectPage.Component
			function getAlternativeContextPromise(sPath){
				var oContextData = mPath2ContextData[sPath];
				if (!oContextData){ // nothing known about this context -> no forwarding needed
					return Promise.resolve();
				}
				return new Promise(function(fnResolve){
					var oAlternativeContextInfo = null; // the object that will be resolved to -> current assumption: no forwarding needed
					var fnResolveToAlternativeContext = function(){ // execute the resolution
						fnResolve(oAlternativeContextInfo);	
					};
					var fnHandleEditingPromise = function(oEditingPromise){ // function to be called when there is an EditingPromise for the object to be displayed
						oEditingPromise.then(function(oEditingInfo){ // oEditingInfo contains the context for the draft that currently replaces the object
							// Currently we have the following problem: A delete operation on the draft does not delete the whole object, but only the draft.
							// However, in this case draftRemovalStarted is not called, but only fnAdaptAfterObjectDeleted.
							// This function does NOT remove the EditingPromise from the active version. Thus, although the EditingPromise is present
							// it still might be correct to show the active object.
							// Therefore, we check for the corresponsing entry of the draft. If this entry exists, but no context is available anymore
							// the draft has meanwhile been deleted.
							var sEditingPath = oEditingInfo.context.getPath();
							var oEditingContextData = mPath2ContextData[sEditingPath];
							if (!oEditingContextData || oEditingContextData.oContext){
								oAlternativeContextInfo = {
									context: oEditingInfo.context,
									iDisplayMode: 2
								};
							}
							fnResolveToAlternativeContext();
						}, fnResolveToAlternativeContext);						
					};
					
					if (oContextData.oRemovalPromise){ // sPath describes a draft for which an activation/cancellation has been started
						oContextData.oRemovalPromise.then(function(oResponse){ // activation was successfull
							oAlternativeContextInfo = { // forward to active entity
								context: oResponse.context,
								iDisplayMode: 1
							};								
							var sDisplayPath = oResponse.context.getPath();
							var oDisplayData = mPath2ContextData[sDisplayPath];
							var oEditingPromise =  oDisplayData && oDisplayData.oEditingPromise;
							if (oEditingPromise){ // active entity might already be in (another) draft
								fnHandleEditingPromise(oEditingPromise);									
							} else {
								fnResolveToAlternativeContext();
							}
						}, fnResolveToAlternativeContext);
					} else if (oContextData.oEditingPromise){ // sPath describes an active object for which a draft is being created 
						fnHandleEditingPromise(oContextData.oEditingPromise);
					} else {
						fnResolveToAlternativeContext();	
					}
				});
			}
			
			/* End of retrieval methods */

			return {
				registerContext: registerContext,
				adaptAfterDeletion: fnAdaptAfterDeletion,
				activationStarted: activationStarted,
				cancellationStarted: cancellationStarted,
				editingStarted: editingStarted,
				getDraftSiblingPromise: getDraftSiblingPromise,
				getAlternativeContextPromise: getAlternativeContextPromise
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.ContextBookkeeping", {
			constructor: function(oAppComponent) {
				jQuery.extend(this, getMethods(oAppComponent));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/ContextBookkeeping.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.FlexEnabler') ) {
jQuery.sap.declare("sap.suite.ui.generic.template.lib.FlexEnabler");

/**
 * Temporary notepad control to enable UI5 flexibility in list report.
 */
sap.ui.core.Control.extend("sap.suite.ui.generic.template.lib.FlexEnabler", {
	metadata: {
		properties: {
			/**
			 * Specifies whether the SAPUI5 flexibility features should be switched on.
			 */
			flexEnabled: {
				type: "boolean",
				group: "Misc",
				defaultValue: true
			}
		}
	},
	renderer: function(oRm, oControl) {
		"use strict";
	}
});

}; // end of sap/suite/ui/generic/template/lib/FlexEnabler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.f.FlexibleColumnLayoutSemanticHelper'); // unlisted dependency retained
jQuery.sap.require('sap.f.LayoutType'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler",["jquery.sap.global", "sap/ui/base/Object", "sap/f/FlexibleColumnLayoutSemanticHelper", "sap/f/LayoutType"],
	function(jQuery, BaseObject, FlexibleColumnLayoutSemanticHelper, LayoutType) {
		"use strict";
		
		// routing helper is not part of sap.ui.define in order to avoid cyclic dependencies
		function onRoutingHelper(fnOnRoutingHelper){
			sap.ui.require(["sap/suite/ui/generic/template/lib/routingHelper"], fnOnRoutingHelper);
		}
		
		var oResolvedPromise = Promise.resolve(); // constant for a trivial resolved Promise
		
		var iDefaultColumn = 2;
		
		var aColumnNames = ["begin", "mid", "end"];
		
		var aMessagePageTargets = ["messagePageBeginColumn", "messagePageMidColumn", "messagePageEndColumn"];

		var aOrderObjectShownAfterDelete = null;
		
		function tVL(iViewLevel){
			return aColumnNames[iViewLevel] ? iViewLevel : iDefaultColumn;
		}
		
		function isInsideFCL(iViewLevel){
			return 	tVL(iViewLevel) === iViewLevel;
		}
		
		function getPagesAggregation(iViewLevel){
			return 	aColumnNames[tVL(iViewLevel)] + "ColumnPages";
		}
		
		function createMessagePageTargets(fnCreateAdditionalMessageTarget){
			for (var i = 0; i < aColumnNames.length; i++){
				fnCreateAdditionalMessageTarget(aMessagePageTargets[i], getPagesAggregation(i));	
			}
		}
		
		function getTargetForMessagePage(iViewLevel){
			return aMessagePageTargets[tVL(iViewLevel)];
		}
		
		function getColumnForViewLevel(iViewLevel){
			return 	aColumnNames[tVL(iViewLevel)];
		}
		
		function isQueryRoute(oRoute){
			return oRoute.name.length > 5 && oRoute.name.lastIndexOf("query") === oRoute.name.length - "query".length;
		}

		function getItemsArrayFromTable(oTable) {
			var aItems;
			if (oTable instanceof sap.ui.table.Table) {
				aItems = oTable.getRows();
			} else if (oTable instanceof sap.m.Table) {
				aItems = oTable.getItems();
			}	
			return aItems;
		}

		function getFirstItemInTable(oTable) {
			// Returns the first item of the list which is not a grouping item. Returns a faulty value if list is empty.
			var aItems = getItemsArrayFromTable(oTable);
			var vRet = aItems ? aItems[0] : false;
			return vRet;
		}

		function getItemInTable(oTable, sContextPath) {
			var aItems = getItemsArrayFromTable(oTable);
			for (var i = 0; i < aItems.length; i++) {
				if (aItems[i].getBindingContextPath() === sContextPath) {
					return aItems[i];
				}
			}
		}

		function getMethods(oFlexibleColumnLayout, oNavigationControllerProxy) {
			var oManifestEntryGenricApp = oNavigationControllerProxy.oTemplateContract.oAppComponent.getConfig();
			var oFCLSettings = oManifestEntryGenricApp.settings && oManifestEntryGenricApp.settings.flexibleColumnLayout;
			var oFlexibleColumnLayoutSemanticHelper = FlexibleColumnLayoutSemanticHelper.getInstanceFor(oFlexibleColumnLayout, oFCLSettings);
			var oDefaultUiLayouts = oFlexibleColumnLayoutSemanticHelper.getDefaultLayouts();
			var oRouteMatchedEventEndColumn; // TODO1: Comment this
			var oLastRoute;
			var oUiState;
			var sCurrentLayout;
			var sStoredTargetLayout;
			var iMessagePageColumn = -1;
			var oExtendedRoutingInfo;
			
			var oTemplateContract =	oNavigationControllerProxy.oTemplateContract,
				oRouter = oNavigationControllerProxy.oRouter;
			
			// it is possible to use the FCL with 3 columns which is the default. But you can also have 2 columns as maximum. Further views are displayed in fullscreen mode	
			var iMaxColumnCountInFCL = oFCLSettings && oFCLSettings.maxColumnCountInFCL || 3;
			
			// if this is true we trigger a search in list report on startup and load the first entry for the second column. This is basically the master/detail mode.
			var bLoadListAndFirstEntryOnStartup = oFCLSettings && oFCLSettings.initialColumnsCount && oFCLSettings.initialColumnsCount === 2 || false;
			
			// if this is true we load the next item in the second column after the current object is deleted. If this is false we close the column.
			var bDisplayNextObjectAfterDelete = oFCLSettings && oFCLSettings.displayNextObjectAfterDelete && oFCLSettings.displayNextObjectAfterDelete === true; 
			
			function getPreferedColumnCount(iViewLevel){
				if (iViewLevel >= iMaxColumnCountInFCL || sap.ui.Device.system.phone) {
					return 1;
				} else {
					var initialColumnsCount = oFCLSettings && oFCLSettings.initialColumnsCount || 1;
					var iRet = Math.max(iViewLevel + 1, initialColumnsCount);
					if (sap.ui.Device.system.tablet && iRet > 2){
						iRet = 2;
					}
					return iRet;
				}
			}

			// Adapts the route and returns the control aggregation
			function fnAdaptRoutingInfo(oRoute, sTargetName, aPredecessorTargets) {
				oRoute.showBeginColumn = oRoute.viewLevel < 3;
				oRoute.showMidColumn = oRoute.viewLevel === 0 && bLoadListAndFirstEntryOnStartup || oRoute.viewLevel === 1 || oRoute.viewLevel === 2;
				oRoute.showEndColumn = oRoute.viewLevel > 1;

				var iPreferedColumnCount = getPreferedColumnCount(oRoute.viewLevel);
				if (bLoadListAndFirstEntryOnStartup && oRoute.viewLevel === 0){
					if (iPreferedColumnCount === 1) { // Phone Use Case
						oRoute.target = [oRoute.name];
						oRoute.showMidColumn = false;
					} else {
						oRoute.target = [oRoute.name, oRoute.pages[0].entitySet];
					}
				} else if (bLoadListAndFirstEntryOnStartup && oRoute.viewLevel === 1){
					if (iPreferedColumnCount === 1) { // Phone Use Case
						oRoute.target = [oRoute.name];
						oRoute.showBeginColumn = false;
					} else {
						oRoute.target = aPredecessorTargets;
					}
				} else {
					oRoute.target = oRoute.showMidColumn ? aPredecessorTargets.concat([sTargetName]) : sTargetName;
				}

				return getPagesAggregation(oRoute.viewLevel);
			}
			
			function isLayoutDefault(sLayout){
				// temporary solution
				if (sLayout === "OneColumn" && bLoadListAndFirstEntryOnStartup){
					return false;
				}
				
				return sLayout === oDefaultUiLayouts.defaultLayoutType || sLayout === oDefaultUiLayouts.defaultTwoColumnLayoutType || sLayout === oDefaultUiLayouts.defaultThreeColumnLayoutType;
			}
			
			function activateView(oActivationInfo, sPath, sRouteName) {
				var oPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRouteName];
				if (oPromise) {
					return oPromise.then(function(oComponent) {
						return oNavigationControllerProxy.activateOneComponent(sPath, oActivationInfo, oComponent);
					});
				}
				return oResolvedPromise;
			}

			function removeQueryInRouteName(sRouteName) {
				// remove query in sRouteName
				var checkForQuery = sRouteName.substring(sRouteName.length - 5, sRouteName.length);
				if (checkForQuery === "query") {
					return sRouteName.substring(0, sRouteName.length - 5);
				}
				return sRouteName;
			}
			
			function fnAfterActivation(aActivationPromises){
				return Promise.all(aActivationPromises).then(oNavigationControllerProxy.afterActivation);
			}
			
			function fnReplaceLayoutInHash(sNewLayout, bReplace) {
				var bIsDefault = isLayoutDefault(sNewLayout);
				// check wether we are in a query route
				if (oLastRoute && isQueryRoute(oLastRoute)) {
					oLastRoute.arguments.query = oLastRoute.arguments["?query"];
					if (bIsDefault){
						delete oLastRoute.arguments.query.FCLLayout;
						if (jQuery.isEmptyObject(oLastRoute.arguments.query)){
							delete oLastRoute.arguments.query;
							oLastRoute.name = removeQueryInRouteName(oLastRoute.name);
						}
					} else {
						oLastRoute.arguments.query.FCLLayout = sNewLayout;
					}
				} else if (!bIsDefault){
					oLastRoute.name = oLastRoute.name + "query";
					oLastRoute.arguments.query = {
						FCLLayout : sNewLayout
					};
				}

				var sHash = oRouter.getURL(oLastRoute.name, oLastRoute.arguments);
				// router put unwanted / to the end of the route
				sHash = sHash.replace("/?", "?");
				oNavigationControllerProxy.navigate(sHash, bReplace);
			}
			
			function getMidColumnPathPromise(oConfig, oEvent){
				return new Promise(function(fnResolve){
					onRoutingHelper(function(routingHelper) {
						fnResolve(routingHelper.determinePath(oConfig, oEvent, oTemplateContract.routeViewLevel1.pattern));
					});
				});
			}
			
			function fnDetermineRoutesAndPathes(){
				var fnPromise = function(fnResolve, fnReject){
					var oRet = {};
					if (!oLastRoute){ //this is the case if this method is called before first route matched (due to resize)
						fnReject();
						return;
					}
					var iViewLevel = oLastRoute.event.getParameter("config").viewLevel;
					if (iViewLevel < 3){
						oRet.begin = {
							route: "root",
							path: "",
							isVisible: oUiState.columnsVisibility.beginColumn
						};
						
						if (iViewLevel === 0){
							fnResolve(oRet);
							return;
						}
					}
					var sRouteName = removeQueryInRouteName(oLastRoute.name);
					
					if (iViewLevel > 0){
						var sPar = getColumnForViewLevel(iViewLevel);
						oRet[sPar] = {
							route: sRouteName,
							path: oLastRoute.path,
							isVisible: iViewLevel > 2 || (iViewLevel === 1 && oUiState.columnsVisibility.midColumn) || (iViewLevel === 2 && oUiState.columnsVisibility.endColumn)
						};
					}
					
					if (iViewLevel === 2) { // activate view in midColumn if we show endColumn
						getMidColumnPathPromise(oLastRoute.routeConfig, oLastRoute.event).then(function(sMidColumnPath){
							oRet.mid = {
								route: oTemplateContract.routeViewLevel1.name,
								path: sMidColumnPath,
								isVisible: oUiState.columnsVisibility.midColumn
							};
							fnResolve(oRet);
						});
					} else {
						fnResolve(oRet);
					}
				};
				return new Promise(fnPromise);
			}

			function fnAdaptToVisibilityChange(oVisibilityChanged){
				var oRoutesAndPathesPromise = fnDetermineRoutesAndPathes();
				oRoutesAndPathesPromise.then(function(oRoutesAndPathes){
					var aActivationPromises = [];
					var aStaysVisible = [oRoutesAndPathes.begin, oRoutesAndPathes.mid, oRoutesAndPathes.end];
					var oActivationInfo = oNavigationControllerProxy.performPseudoHashChange(aStaysVisible);
					for (var sColumn in oVisibilityChanged){
						if (oVisibilityChanged[sColumn]){
							var oColumnInfo = oRoutesAndPathes[sColumn];
							if (oColumnInfo){
								aActivationPromises.push(activateView(oActivationInfo, oColumnInfo.path, oColumnInfo.route));
							}
							// Note: deactivation is handled by the afterActivation
						}
					}
					fnAfterActivation(aActivationPromises);
				}, jQuery.noop);
			}
			
			function isVisuallyFullscreen(){
				return !(oUiState.columnsVisibility.beginColumn ? oUiState.columnsVisibility.midColumn :  oUiState.columnsVisibility.midColumn && oUiState.columnsVisibility.endColumn);
			}

			function fnAdaptLayout(bChangedRoute){
				var oNewUiState = oFlexibleColumnLayoutSemanticHelper.getCurrentUIState();
				var oVisibilityChanged = {};
				oVisibilityChanged.end = oUiState && (oUiState.columnsVisibility.endColumn !== oNewUiState.columnsVisibility.endColumn);
				oVisibilityChanged.mid = oUiState && (oUiState.columnsVisibility.midColumn !== oNewUiState.columnsVisibility.midColumn);
				oVisibilityChanged.begin = oUiState && (oUiState.columnsVisibility.beginColumn !== oNewUiState.columnsVisibility.beginColumn);
				oUiState = oNewUiState;
				
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/midActionButtons", {
					fullScreen: oUiState.actionButtonsInfo.midColumn.fullScreen !== null,
					exitFullScreen: oUiState.actionButtonsInfo.midColumn.exitFullScreen !== null,
					closeColumn: oUiState.actionButtonsInfo.midColumn.closeColumn !== null
				});
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/endActionButtons", {
					fullScreen: oUiState.actionButtonsInfo.endColumn.fullScreen !== null,
					exitFullScreen: oUiState.actionButtonsInfo.endColumn.exitFullScreen !== null,
					closeColumn: oUiState.actionButtonsInfo.endColumn.closeColumn !== null
				});
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/isVisuallyFullScreen", isVisuallyFullscreen());
				var iHighestViewLevel;
				if (oUiState.columnsVisibility.endColumn){
					iHighestViewLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");	
				} else if (oUiState.columnsVisibility.midColumn) {
					iHighestViewLevel = 1;
				} else {
					iHighestViewLevel = 0;
				}
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/highestViewLevel", iHighestViewLevel);
				
				var iLowestDetailViewLevel;
				if (oUiState.columnsVisibility.midColumn){
					iLowestDetailViewLevel = 1;
				} else {
					iLowestDetailViewLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");
				}
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL/lowestDetailViewLevel", iLowestDetailViewLevel);
				
				if (oLastRoute && sCurrentLayout !== oUiState.layout){
					fnReplaceLayoutInHash(oUiState.layout, true);
				} else if ((oVisibilityChanged.begin || oVisibilityChanged.mid || oVisibilityChanged.end)  && !bChangedRoute){
					fnAdaptToVisibilityChange(oVisibilityChanged);	
				}
			}

			// we expect oEvent to be a cloned version of UI5 event
			function fnDetermineAndSetContextPath(oEvent, oRouteConfig, sPath, oActivationInfo) {
				return new Promise(function(fnResolve){
					fnAdaptLayout(true);
					var oRoutesAndPathPromise = fnDetermineRoutesAndPathes();
					oRoutesAndPathPromise.then(function(oRoutesAndPathes){
						oExtendedRoutingInfo = oRoutesAndPathes;
						var aActivationPromises = [];
						for (var sColumn in oRoutesAndPathes){
							var oColumnInfo = oRoutesAndPathes[sColumn];
							if (oColumnInfo.isVisible){
								aActivationPromises.push(activateView(oActivationInfo, oColumnInfo.path, oColumnInfo.route));
							}
						}
						fnAfterActivation(aActivationPromises).then(fnResolve);
					});
				});
			}
			
			function fnHandleBeforeRouteMatched(oEvent){
				oEvent = jQuery.extend({}, oEvent); // as this handler works partially asynchronous and events are pooled by UI5, we create a defensive copy
				oLastRoute = {
					name: oEvent.getParameter("name"),
					arguments: oEvent.getParameter("arguments"),
					event: oEvent
				};
				
				var iViewLevel = oEvent.getParameter("config").viewLevel;
				var oQuery = oEvent.getParameter("arguments")["?query"];
				if (isInsideFCL(iViewLevel)){
					sCurrentLayout = (oQuery && oQuery.FCLLayout);
					if (!sCurrentLayout){
						switch (iViewLevel){
							case 0:
								var oColumnsVisibility = oFlexibleColumnLayoutSemanticHelper.getNextUIState(0).columnsVisibility;
								if (oColumnsVisibility.midColumn) {
									sCurrentLayout = oDefaultUiLayouts.defaultTwoColumnLayoutType;
								} else {
									// this is needed if we are in Master/Detail AND Device === Phone or desktop browser in size S
									sCurrentLayout = oDefaultUiLayouts.defaultLayoutType;
									if (getPreferedColumnCount(iViewLevel) > 1) { // this is the case if we have a desktop browser in size S
										fnReplaceLayoutInHash(oDefaultUiLayouts.defaultLayoutType,true);
									}
								}
								break;
							case 1:
								sCurrentLayout = oDefaultUiLayouts.defaultTwoColumnLayoutType;
								break;
							case 2:
								sCurrentLayout = oDefaultUiLayouts.defaultThreeColumnLayoutType;
						}
					}
				} else {
					sCurrentLayout = LayoutType.EndColumnFullScreen;
				}

				oFlexibleColumnLayout.setLayout(sCurrentLayout);
			}

			// we expect oEvent to be a cloned version of UI5 event
			function fnHandleRouteMatched(oEvent, oRouteConfig, sPath, oActivationInfo) {
				iMessagePageColumn = -1;
				var iRouteLevel = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/routeLevel");
				oRouteMatchedEventEndColumn = iRouteLevel === 2 ? oEvent : null;
				
				oLastRoute.path = sPath;
				oLastRoute.routeConfig = oRouteConfig;
				
				return fnDetermineAndSetContextPath(oEvent, oRouteConfig, sPath, oActivationInfo);
			}

			function getAppStateFromLayout(sLayout){
				return isLayoutDefault(sLayout) ? {}  : {
					FCLLayout: [sLayout]
				};
			}
			
			function isFullscreenLayout(sLayout){
				return sLayout === LayoutType.EndColumnFullScreen || sLayout === LayoutType.MidColumnFullScreen;
			}

			// returns a Promise that resolves to the parameter string for the given target level
			function getAppStateParStringForNavigation(iLevel, oAppStates) {
				if (!isInsideFCL(iLevel)) {
					return oNavigationControllerProxy.getParStringPromise(oAppStates, false);
				}				
				var sNextUiLayout = sStoredTargetLayout || oFlexibleColumnLayoutSemanticHelper.getNextUIState(iLevel).layout;		
				jQuery.extend(oAppStates, getAppStateFromLayout(sNextUiLayout));
				sStoredTargetLayout = null;
				if (isFullscreenLayout(sNextUiLayout)){
					return oNavigationControllerProxy.getParStringPromise(oAppStates, false);	
				}
				var oLevel1Promise = (iLevel === 2) ? oNavigationControllerProxy.addUrlParameterInfoForRoute(oTemplateContract.routeViewLevel1.name, oAppStates) : oResolvedPromise;
				return new Promise(function(fnResolve){
					oLevel1Promise.then(function(){
						oNavigationControllerProxy.getParStringPromise(oAppStates, true).then(fnResolve);	
					});	
				});				
			}

			/******************************************
			 * begin: Event Handlers for common FCL Action Buttons
			 ******************************************/

			function onCloseMidColumnPressed() {
				sStoredTargetLayout = oUiState.actionButtonsInfo.midColumn.closeColumn;
				oNavigationControllerProxy.navigateToRoot(true);
			}

			function onCloseEndColumnPressed() {
				sStoredTargetLayout = oUiState.actionButtonsInfo.endColumn.closeColumn;
				var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
				getMidColumnPathPromise(oRouteConfigEndColumn, oRouteMatchedEventEndColumn).then(function(sMidColumnPath){
					// TODO2: check whether DisplayMode can be determined in advance
					oNavigationControllerProxy.navigateToContext(sMidColumnPath, null, true, 0);
				});		
			}
			
			function fnNavigateByReplacingAppState(oAppStates, bAddLevel0Info){
				var sHash = oNavigationControllerProxy.oHashChanger.getHash() || "";
				sHash = sHash.split("?")[0];			
				var oParStringPromise = oNavigationControllerProxy.getParStringPromise(oAppStates, bAddLevel0Info);
				oNavigationControllerProxy.navigateToParStringPromise(sHash, oParStringPromise, false);					
			}

			function getFullscreenLayout(iViewLevel){
				if (iViewLevel === 0 && isListAndFirstEntryLoadedOnStartup()){
					return LayoutType.OneColumn;
				} else if (iViewLevel === 1){
					return LayoutType.MidColumnFullScreen;
				} else if (iViewLevel === 2){
					return LayoutType.EndColumnFullScreen;
				} else {
					return "";
				}
			}
			
			function onFullscreenColumnPressed() {
				// we rely on the fact that fullScreen property is not null for exactly one column
				var sTargetLayout = oUiState.actionButtonsInfo.midColumn.fullScreen;
				var sRoute;
				if (sTargetLayout === null){
					sTargetLayout = oUiState.actionButtonsInfo.endColumn.fullScreen;
					var aComponents = oNavigationControllerProxy.getActiveComponents();
					for (var i = 0; i < aComponents.length; i++){
						var oRegistryEntry = oTemplateContract.componentRegistry[aComponents[i]];
						if (oRegistryEntry.viewLevel === 2){
							sRoute = oRegistryEntry.route;
							break;
						}
					}
				} else {
					sRoute = oTemplateContract.routeViewLevel1.name;
				}
				var oAppStates = getAppStateFromLayout(sTargetLayout);
				oNavigationControllerProxy.addUrlParameterInfoForRoute(sRoute, oAppStates).then(function(){
					fnNavigateByReplacingAppState(oAppStates, false);
				});
			}

			function onExitFullscreenColumnPressed() {
				// we rely on the fact that exitFullScreen property is not null for exactly one column
				var sTargetLayout = oUiState.actionButtonsInfo.midColumn.exitFullScreen;
				var oLevel2Promise;
				var oMidColumnPathPromise;
				if (sTargetLayout === null){
					sTargetLayout = oUiState.actionButtonsInfo.endColumn.exitFullScreen;
				}
				var oAppStates = getAppStateFromLayout(sTargetLayout);
				if (sTargetLayout === oUiState.actionButtonsInfo.endColumn.exitFullScreen){
					var aComponents = oNavigationControllerProxy.getActiveComponents();
					var sComponentId = aComponents[0];
					var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
					if (oRegistryEntry){
						oLevel2Promise = oNavigationControllerProxy.addUrlParameterInfoForRoute(oRegistryEntry.route, oAppStates);
						oMidColumnPathPromise = getMidColumnPathPromise(oLastRoute.routeConfig, oLastRoute.event);
					}
				}
				(oLevel2Promise || oResolvedPromise).then(function(){
					(oMidColumnPathPromise || oResolvedPromise).then(function(sMidColumnPath){
						var oLevel1Promise = oNavigationControllerProxy.addUrlParameterInfoForRoute(oTemplateContract.routeViewLevel1.name, oAppStates, sMidColumnPath);
						oLevel1Promise.then(function(){
							fnNavigateByReplacingAppState(oAppStates, true);
						});
					});
				});
			}

			function getActionButtonHandlers(iViewLevel) {
				return isInsideFCL(iViewLevel) && {
					onCloseColumnPressed: iViewLevel === 1 ? onCloseMidColumnPressed : onCloseEndColumnPressed,
					onFullscreenColumnPressed: onFullscreenColumnPressed,
					onExitFullscreenColumnPressed: onExitFullscreenColumnPressed
				};
			}

			/******************************************
			 * end: Event Handlers for common FCL Action Buttons
			 *******************************************/
			 
			function getDraftSibling(oContext) {
				return oTemplateContract.oApplicationProxy.getDraftSiblingPromise(oContext);                         
			}
			
			 function fnNavigateToDraft(oDraftContextRootEntity) {
				// navigate to draft
				if (oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/FCL/highestViewLevel") === 2){
					var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[removeQueryInRouteName(oRouteConfigEndColumn.name)];
					var oNavigationPromise = new Promise(function(fnResolveNavigation, fnRejectNavigation){
						oComponentPromise.then(function(oComponent){
							var oBindingContextEndColumn = oComponent.getBindingContext();
							var oDraftSiblingPromise = getDraftSibling(oBindingContextEndColumn, true);
							oDraftSiblingPromise.then(function(oDraftContext){
								onRoutingHelper(function(routingHelper) {
									var sNavigationProperty = oRouteConfigEndColumn.navigationProperty;
									var sContextPath = oDraftContextRootEntity.getPath() + "/" + routingHelper.determineNavigationPath(oDraftContext, sNavigationProperty).path;
									sStoredTargetLayout = oUiState.layout;
									oNavigationControllerProxy.navigateToContext(sContextPath, null, true, 2);
									fnResolveNavigation();
								});
							},  fnRejectNavigation);
						},  fnRejectNavigation);
					});
					oTemplateContract.oBusyHelper.setBusy(oNavigationPromise);
				} else {
					oNavigationControllerProxy.navigateToContext(oDraftContextRootEntity, null, true, 2);
				}
			 }
			
			function getTargetAfterCancelPromise(oActive){
				if (oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/FCL/highestViewLevel") !== 2){
					return Promise.resolve(oActive);
				}
				var oRet = new Promise(function(fnResolve){
					var oRouteConfigEndColumn = oRouteMatchedEventEndColumn.getParameter("config");
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[removeQueryInRouteName(oRouteConfigEndColumn.name)];
					oComponentPromise.then(function(oComponent){
						var oBindingContextEndColumn = oComponent.getBindingContext();
						var oDraftSiblingPromise = getDraftSibling(oBindingContextEndColumn, true);
						oDraftSiblingPromise.then(function(oDraftContext){
							if (!oDraftContext){
								fnResolve(oActive);
								return;
							}
							onRoutingHelper(function(routingHelper) {
								var sNavigationProperty = oRouteConfigEndColumn.navigationProperty;
								var sContextPath = oActive.getPath() + "/" + routingHelper.determineNavigationPath(oDraftContext, sNavigationProperty).path;
								fnResolve(sContextPath);
							});
						});
					});
				});
				oTemplateContract.oBusyHelper.setBusy(oRet);
				return oRet;
			}
			
			// Asumption: Deleted Objects have level iViewLevel + 1 (deleteEntities)
			function adaptAfterDeletion(aDeletedPath, iViewLevel){
				var bMidColumnClose = oExtendedRoutingInfo.mid && aDeletedPath.indexOf(oExtendedRoutingInfo.mid.path) >= 0 && !bDisplayNextObjectAfterDelete;
				var bEndColumnClose = oExtendedRoutingInfo.end && aDeletedPath.indexOf(oExtendedRoutingInfo.end.path) >= 0;
				
				if (bMidColumnClose){
					oNavigationControllerProxy.navigateToRoot(true);
				} else if (bEndColumnClose){
					oNavigationControllerProxy.navigateToContext(oExtendedRoutingInfo.mid.path, null, true);
				}
			}
			
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/FCL", { });
			
			// This function indicates if a new HistoryEntry is required.
			// A new HistoryEntry is only required if the user navigates to an object which will be displayed in a new column.
			// If the object will be displayed in a column which is already visible no HistoryEntry is required
			function isNewHistoryEntryRequired(oTarget){
				var iTargetLevel = oNavigationControllerProxy.getTargetLevel(oTarget);
				
				switch (iTargetLevel){
					case 1:
						return !oUiState.columnsVisibility.midColumn;
					case 2:
						return !oUiState.columnsVisibility.endColumn;
					default:
						return true;
				}
			}
			
			function fnCloseRightColumns(iViewLevel) {
				sCurrentLayout = oFlexibleColumnLayoutSemanticHelper.getNextUIState(iViewLevel).layout;
				oFlexibleColumnLayout.setLayout(sCurrentLayout);
			}
			
			function isAppTitlePrefered(){
				return !isVisuallyFullscreen();
			}
			
			function fnDisplayMessagePage(mParameters){
				iMessagePageColumn = tVL(mParameters.viewLevel);
				fnCloseRightColumns(mParameters.viewLevel);
				var oTargets = oNavigationControllerProxy.oRouter.getTargets();
				var sTarget = getTargetForMessagePage(mParameters.viewLevel);
				oTargets.display(sTarget);
				var aStaysVisible;
				if (mParameters.viewLevel === iMessagePageColumn){
					aStaysVisible = [];
					for (var i = 0; i < mParameters.viewLevel; i++){
						aStaysVisible.push(true);
					}
				}
				return aStaysVisible;
			}
			
			// Is the view on level iViewLevel displayed and is it not the MessagePage
			function isLevelActive(iViewLevel){
				if (iViewLevel < iMessagePageColumn || iMessagePageColumn < 0){
					return oUiState.columnsVisibility[getColumnForViewLevel(iViewLevel) + "Column"];
				}
				return false;
			}
			
			function fnAdaptBreadCrumbUrl(sHash, iViewLevel){
				if (!isInsideFCL(iViewLevel)){
					return sHash;
				}
				var sLayout = oFlexibleColumnLayoutSemanticHelper.getNextUIState(iViewLevel).layout;
				if (isLayoutDefault(sLayout)){
					return sHash;
				}
				return sHash + "?FCLLayout=" + sLayout;
			}

			function getMaxColumnCountInFCL(){
				return iMaxColumnCountInFCL;
			}
			
			function handleDataReceived(oTable, oState, oTemplateUtils) {
				var oItem;
				var aOrder = getOrderToShowObjectPageAfterDelete();
				if (isNextObjectLoadedAfterDelete() && aOrder && aOrder.length > 0 && !isVisuallyFullscreen()) { // then onDataReceived was triggerd by a refresh after a delete action in Master/Detail mode
					for (var i = 0; i < aOrder.length; i++) {
						oItem = getItemInTable(oTable, aOrder[i]);
						if (oItem && oItem.getBindingContextPath() === aOrder[i]) {
							resetOrderToShowObjectPageAfterDelete();
							oTemplateUtils.oCommonEventHandlers.onListNavigate(oItem, oState);
							break;
						}
					}
				} else { // then the list was refreshed or the app has been started
					// store oTable in Application; this is needed to display the correct object after delete
					oItem = getFirstItemInTable(oTable);
					oTemplateContract.oApplicationProxy.setListReportTable(oTable);

					if (isListAndFirstEntryLoadedOnStartup && isListAndFirstEntryLoadedOnStartup()) {	
						handleListReceived(oItem, function() {
							setTimeout(function(){
								oTemplateUtils.oCommonEventHandlers.onListNavigate(oItem, oState);
							},0);
						});
					}
				}
			}

			function handleListReceived(oItem, fnNavigateToItem){
				if (!bLoadListAndFirstEntryOnStartup) {
					return;
				}
				var bNavigateToFirstListItem = false;
				var oColumnsVisibility = oFlexibleColumnLayoutSemanticHelper.getNextUIState(0).columnsVisibility;
				if (oColumnsVisibility.midColumn) {
					var iViewLevel = oLastRoute.event.getParameter("config").viewLevel;
					if (iViewLevel === 0) { // only ListReport is shown
						bNavigateToFirstListItem = true;
						if (isQueryRoute(oLastRoute)) {
							oLastRoute.arguments.query = oLastRoute.arguments["?query"];
							if (oLastRoute.arguments.query.FCLLayout === "OneColumn"){
								bNavigateToFirstListItem = false;	
							}
						}
					}
				}
				if (bNavigateToFirstListItem) {
					if (oItem) {
						fnNavigateToItem(oItem);
					} else {
						// closeSecondColumn
						oNavigationControllerProxy.navigateToRoot(true);
					}
				} else {
					return; // do nothing
				}
			}
			
			function isListAndFirstEntryLoadedOnStartup(){
				return bLoadListAndFirstEntryOnStartup;
			}
			
			function isNextObjectLoadedAfterDelete(){
				return bDisplayNextObjectAfterDelete;
			}

			function supressNavigationUpAfterDeletion() {
				var iViewLevel = oLastRoute.event.getParameter("config").viewLevel;
				return iViewLevel === 1 && bDisplayNextObjectAfterDelete && !isVisuallyFullscreen();
			}
			
			function setStoredTargetLayoutToOneColumn(){
				sStoredTargetLayout = LayoutType.OneColumn;
			}

			function storeTableToShowObjectPageAfterDelete(oTable, sPath){
				aOrderObjectShownAfterDelete = [];
				var iPositionOfCurrentObject;
				var aContextBindingPathsFromItems = [];
				var sContextBindingPath;
				var aItems;

				if (oTable instanceof sap.ui.table.Table)	{
					aItems = oTable.getRows();
				} else if (oTable instanceof sap.m.Table) {
					aItems = oTable.getItems();
				}
				for (var k = 0; k < aItems.length; k++) {
					sContextBindingPath = aItems[k].getBindingContextPath();
					aContextBindingPathsFromItems.push(sContextBindingPath);
				}

				for (var j = 0; j < aContextBindingPathsFromItems.length; j++) {
					if (aContextBindingPathsFromItems[j] === sPath){
						aOrderObjectShownAfterDelete.push(aContextBindingPathsFromItems[j]);
						iPositionOfCurrentObject = j;
						break;
					}
				}

				if (iPositionOfCurrentObject >= 0) {
					var aItemsAfterObject = aContextBindingPathsFromItems.slice(iPositionOfCurrentObject + 1, aContextBindingPathsFromItems.length);
					var aItemsBeforeObject;
					if (iPositionOfCurrentObject > 0) {
						aItemsBeforeObject = aContextBindingPathsFromItems.slice(0, iPositionOfCurrentObject);
						aItemsBeforeObject.reverse();
					}
					aOrderObjectShownAfterDelete = aOrderObjectShownAfterDelete.concat(aItemsAfterObject, aItemsBeforeObject);
				} else {
					aOrderObjectShownAfterDelete = aContextBindingPathsFromItems;
				}
			}

			function getOrderToShowObjectPageAfterDelete() {
				return aOrderObjectShownAfterDelete;
			}

			function resetOrderToShowObjectPageAfterDelete() {
				aOrderObjectShownAfterDelete = null;
			}
			
			function getFclProxyForView(iViewLevel) {
				return {
					oActionButtonHandlers: getActionButtonHandlers(iViewLevel),
					navigateToDraft: fnNavigateToDraft,
					getMaxColumnCountInFCL: getMaxColumnCountInFCL,
					isListAndFirstEntryLoadedOnStartup: isListAndFirstEntryLoadedOnStartup,
					isNextObjectLoadedAfterDelete: isNextObjectLoadedAfterDelete,
					handleListReceived: handleListReceived,
					storeTableToShowObjectPageAfterDelete: storeTableToShowObjectPageAfterDelete,
					getOrderToShowObjectPageAfterDelete: getOrderToShowObjectPageAfterDelete,
					resetOrderToShowObjectPageAfterDelete: resetOrderToShowObjectPageAfterDelete,
					supressNavigationUpAfterDeletion: supressNavigationUpAfterDeletion,
					handleDataReceived: handleDataReceived
				};
			}
			
			
			
			oFlexibleColumnLayout.attachStateChange(fnAdaptLayout.bind(null, false));
			
			return {
				adaptRoutingInfo: fnAdaptRoutingInfo,
				createMessagePageTargets: createMessagePageTargets,
				displayMessagePage: fnDisplayMessagePage,
				isLevelActive: isLevelActive,
				handleBeforeRouteMatched: fnHandleBeforeRouteMatched,
				handleRouteMatched: fnHandleRouteMatched,
				getAppStateParStringForNavigation: getAppStateParStringForNavigation,
				getActionButtonHandlers: getActionButtonHandlers,
				navigateToDraft: fnNavigateToDraft,
				getTargetAfterCancelPromise: getTargetAfterCancelPromise,
				adaptAfterDeletion: adaptAfterDeletion,
				isNewHistoryEntryRequired: isNewHistoryEntryRequired,
				adaptBreadCrumbUrl: fnAdaptBreadCrumbUrl,
				isAppTitlePrefered: isAppTitlePrefered,
				getFullscreenLayout: getFullscreenLayout,
				getMaxColumnCountInFCL: getMaxColumnCountInFCL,
				isListAndFirstEntryLoadedOnStartup: isListAndFirstEntryLoadedOnStartup,
				isNextObjectLoadedAfterDelete: isNextObjectLoadedAfterDelete,
				getFclProxyForView: getFclProxyForView,
				setStoredTargetLayoutToOneColumn: setStoredTargetLayoutToOneColumn
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.FlexibleColumnLayoutHandler", {
			constructor: function(oFlexibleColumnLayout, oNavigationControllerProxy) {
				jQuery.extend(this, getMethods(oFlexibleColumnLayout, oNavigationControllerProxy));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageUtils') ) {
/* Class containing static methods for message handling. */
jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.MessageUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageUtils",["sap/ui/generic/app/util/ModelUtil", "sap/ui/generic/app/util/MessageUtil", "sap/m/MessageBox"
	],
	function(ModelUtil, GenericMessageUtil, MessageBox) {
		"use strict";

		/**
		 * Logger for this class.
		 *
		 * @type {jQuery.sap.log.Logger}
		 * @static
		 * @private
		 * @ignore
		 */
		var oLogger = new jQuery.sap.log.getLogger("sap.suite.ui.generic.template.lib.MessageUtils");

		/**
		 * Handles errors for all of Smart Templates.
		 *
		 * @param {string} sOperation - String defined by the object sap.ui.generic.app.util.MessageUtil.operations.
		 * @param {sap.ui.core.mvc.Controller} oController - Controller instance of the calling function.
		 * @param {object} oServices - Object containing instances of the calling template's services.
		 * @param {object} oError - Error object fired by a variety of classes.
		 * @param {map} mParameters - Additional parameters that can be of use while handling an error.
		 * @private
		 * @ignore
		 */
		function fnHandleError(sOperation, oController, oServices, oError, mParameters) {
			mParameters = mParameters || {};

			var oErrorResponse = GenericMessageUtil.parseErrorResponse(oError);
			var sMessageText = oErrorResponse.messageText;
			var sMessageDescription;
			var bNavigateToMessagePage = false;

			// This tells this function not to add the
			// transient message at the end. I do this because
			// in the only case where the message popover is shown,
			// the ODataModel has already added the message to the
			// MessageManager's set of messages, and doesn't need to be
			// repeated by calling the GenericMessageUtil.addTransientErrorMessage
			// method at the end of the function.
			var bShowMessagePopover = false;
			var oComponent = oController && oController.getOwnerComponent();
			var oResourceBundle = mParameters.resourceBundle || oComponent.getModel("i18n").getResourceBundle();
			var oNavigationController = mParameters.navigationController || oServices.oNavigationController;
			var oModel = mParameters.model || oComponent.getModel();

			oLogger.debug("handleError has been called with operation " + sOperation + " and HTTP response status code " + oErrorResponse.httpStatusCode);
			switch (oErrorResponse.httpStatusCode) {
				case "400":
					switch (sOperation) {
						case GenericMessageUtil.operations.modifyEntity:
							// if a draft patch failed with a 400 we rely on a meaningful message from the backend
							break;
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_ACTION");
							break;
						case GenericMessageUtil.operations.deleteEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_DELETE");
							break;
						case GenericMessageUtil.operations.editEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_EDIT");
							break;
						case GenericMessageUtil.operations.saveEntity:
						case GenericMessageUtil.operations.activateDraftEntity:
							if (oServices &&
									oServices.oTemplateCapabilities &&
									oServices.oTemplateCapabilities.oMessageButtonHelper &&
									oServices.oTemplateCapabilities.oMessageButtonHelper.showMessagePopover) {
								oServices.oTemplateCapabilities.oMessageButtonHelper.showMessagePopover();
								bShowMessagePopover = true;
							} else {
								oLogger.info("A MessageButtonHelper class instance could not be found as one of the services' template capabilities.");
							}
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST");
							break;
					}
					break;
				case "401":
					bNavigateToMessagePage = true;
					sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_AUTHENTICATED_FAILED");
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_AUTHENTICATED_FAILED_DESC");
					break;
				case "403":
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_ACTION");
							break;
						case GenericMessageUtil.operations.deleteEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_DELETE");
							break;
						case GenericMessageUtil.operations.editEntity:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_EDIT");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED");
							sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_DESC");
							bNavigateToMessagePage = true;
							break;
					}
					break;
				case "404":
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST_ACTION");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_BAD_REQUEST");
							break;
					}
					break;
				case "409":
					// Conflict, we show the message returned from the backend in a dialog
					break;
				case "500":
				case "501":
				case "502":
				case "503":
				case "504":
				case "505":
					bNavigateToMessagePage = true;
					switch (sOperation) {
						case GenericMessageUtil.operations.callAction:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_FOR_ACTION");
							break;
						default:
							sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE");
							break;
					}
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC");
					break;
				case undefined:	
					/*adapted to have a reasonable processing for the Apply-Button - 
					 * workaround to not leave the page in case of apply */
					bNavigateToMessagePage = false;
					bShowMessagePopover = true;
					break;									
				default:
					// Even though the HTTP protocol doesn't specify status codes outside
					// of what is handled in this switch statement, the Checkmarx code scan
					// picks up a missing default case as problematic. This default case
					// is added here for the sake of the Checkmarx scan.
					bNavigateToMessagePage = true;
					sMessageText = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE");
					sMessageDescription = oResourceBundle.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC");
					break;
			}

			if (bNavigateToMessagePage) {
				var iViewLevel;
				if (oComponent){
					var oTemplPrivModel = oComponent.getModel("_templPriv");
					iViewLevel = oTemplPrivModel.getProperty("/generic/viewLevel");
				}
				// TODO: we shall remove the transient messages as they might come up later
				oNavigationController.navigateToMessagePage({
					title: oResourceBundle.getText("ST_GENERIC_ERROR_TITLE"),
					text: sMessageText,
					description: sMessageDescription,
					icon: "sap-icon://message-error",
					viewLevel: iViewLevel
				});
			} else {
				// When bShowMessagePopover is true we open the message popover and expect that the service returned either
				// state or transient messages, in case it's false and there's no transient message returned from
				// the backend we add our generic message as transient message
				if (!oErrorResponse.containsTransientMessage && !bShowMessagePopover) {
					GenericMessageUtil.addTransientErrorMessage(sMessageText, sMessageDescription, oModel);
				}
			}
		}

		return {
			operations: GenericMessageUtil.operations,
			handleTransientMessages: GenericMessageUtil.handleTransientMessages,
			handleError: fnHandleError,
			removeTransientMessages: GenericMessageUtil.removeTransientMessages
		};
	});
}; // end of sap/suite/ui/generic/template/lib/MessageUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ProcessObserver') ) {
// This class provides the possibility to observe a process.
// More precisely it provides the possibility to find out whether a process is currently running.
// If this is the case one can register for a point in time when the process has stopped.
// When creating an instance of this class one of two possibilities must be used to define the lifecycle of the process to be observed:
// 1. Single process: A single process is defined by calling startProcess and stopProcess directly
//    For convenience it is also possible to register for events that inform about start resp. stop of this process.
// 2. Compound process: A compound process is built out of several processes. 
//    It is considered to be running when at least one of the contained processes is running.

jQuery.sap.declare('sap.suite.ui.generic.template.lib.ProcessObserver'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ProcessObserver",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {
		"use strict";

		function getMethods(oSettings) {
			var oProcessFinishedPromise;	// If this is truthy, a process is running and oProcessFinishedPromise is a Promise that resolves when the process ends.
											// Moreover, the content of the variable remains unchanged until the process ends.
											// If the variable is faulty:
											// - For single processes the process is running
											// - For compound processes we actually do not know whether the process is running
			var fnProcessFinished; // truthy exactly if oProcessFinishedPromise is truthy. In this case it is the function that resolves that Promise. 
			
			function fnProcessStart(){ // called when it is detected that a process is running.
				if (oSettings.processName){
					jQuery.sap.log.info("Process " + oSettings.processName + " started");
				}
				// If oProcessFinishedPromise is already truthy, we do not have to do anything. Otherwise create oProcessFinishedPromise.  
				oProcessFinishedPromise = oProcessFinishedPromise || new Promise(function(fnResolve){
					fnProcessFinished = fnResolve;	
				});		
			}
			
			function fnProcessStop(){ // called when it is detected when a process is stopped
				if (oSettings.processName){
					jQuery.sap.log.info("Process " + oSettings.processName + " stopped");
				}
				// If oProcessFinishedPromise is already faulty, we do not have to do anything. Otherwise resolve oProcessFinishedPromise and make variable oProcessFinishedPromise faulty.
				if (oProcessFinishedPromise){
					fnProcessFinished(); // resolve oProcessFinishedPromise
					oProcessFinishedPromise = null; // set back variable oProcessFinishedPromise to faulty as the process is not running anymore
					fnProcessFinished = null;
				}
			}
			
			// Register event handlers for single processes
			if (oSettings.eventHandlers){
				oSettings.eventHandlers.attachProcessStart(fnProcessStart);
				oSettings.eventHandlers.attachProcessStop(fnProcessStop);
			}
			
			// This method is only called for compound processes.
			// It ensures that variable oProcessFinishedPromise is truthy exactly when the process is running.
			// Moreover, it ensures that we will not miss the end of the process if it is actually running.
			function fnHandleCompound(){
				// First we check whether any of the contained processes is currently running. Thereby, we stop as soon as we have found one.
				var oPromise = null;
				for (var i = 0; i < oSettings.processObservers.length && !oPromise; i++){
					var oProcessObserver = oSettings.processObservers[i];
					oPromise = oProcessObserver.getProcessFinished();
				}
				if (oPromise){ // At least one process contained in the compound process is running. oPromise will be resolved when this process is stopped.
					fnProcessStart(); // Ensure that oProcessFinishedPromise (and fnProcessFinished) are created if necessary 
					oPromise.then(fnHandleCompound); // Ensure that we will check again at next chance
				} else { // no process is currently running
					fnProcessStop(); // ensure that oProcessFinishedPromise is resolved and set the variable to faulty	
				}
			}
			
			// This is the method provided by this class.
			// It returns a faulty value, if the process is not currently running (resp. a resolved Promise if bAlwysReturnAPromise is true)
			// When the process is currently running it returns a Promise that is resolved as soon as the process is not running anymore.
			function getProcessFinished(bAlwysReturnAPromise){
				if (!oProcessFinishedPromise && oSettings.processObservers){ // this is the only case, in which we do not know whether oProcessFinishedPromise is already correct. 
					fnHandleCompound(); // So we end this uncertainty	
				}
				return oProcessFinishedPromise || (bAlwysReturnAPromise && Promise.resolve());
			}
			
			function addObserver(oObserver){
				oSettings.processObservers.push(oObserver);	
			}
			
			return {
				startProcess: fnProcessStart, // must not be used for compound processes
				stopProcess: fnProcessStop, // must not be used for compound processes
				getProcessFinished: getProcessFinished,
				addObserver: addObserver // must only be called for compound processes
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.ProcessObserver", {
			// Creates an instance of this class.
			// For single processes oSettings must be faulty or an object not not containing a property processObservers.
			// For convenience oSettings might contain a property eventHandlers. In this case this subobject must contain two functions 
			// namely attachProcessStart and attachProcessStop which are used to attach to the start and the stop of the process.
			// For compound processes oSettings must contain a property processObservers which must be an array of ProcessObservers representing
			// the processes contained in the compound process.
			constructor: function(oSettings) {
				jQuery.extend(this, getMethods(oSettings || {}));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/ProcessObserver.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateComponent') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Component'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateComponent",["jquery.sap.global", "sap/ui/core/CustomizingConfiguration", "sap/ui/core/mvc/ViewType", "sap/ui/core/Component", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel", "sap/ui/Device"],
	function(jQuery, CustomizingConfiguration, ViewType, Component, UIComponent, JSONModel, ResourceModel, Device) {
		"use strict";

		function getAppComponent(vObject) {
			// check whether a context is given and determine a componentId from it
			// - either it is a string, then this is the pre-processor use case and the string is a component id
			// - or it is a view or fragment and the Id of the owner component should be used
			var sComponentId = vObject && typeof vObject === "string" ? vObject : 
				(vObject && Component.getOwnerIdFor(vObject));
			// retrieve the component (if an Id is known)
			var oComponent = sComponentId && sap.ui.component(sComponentId);
			// only when it inherits from TemplateComponent, ask for the AppComponent instead
			// INFO: TemplateComponent is available via Hoisting and defined below
			if (oComponent instanceof TemplateComponent) {
				oComponent = oComponent.getAppComponent();
			}
			// return the AppComponent
			return oComponent;
		}

		// monkey patch the sap.ui.core.CustomizingConfiguration#getViewExtension:
		// as UI5 doesn't support viewExtensions for nested components we replace the
		// component in vObject with the parent component. The getAppComponent function
		// comes from the component property appComponent in
		// sap.ui.generic.template.TemplateComponent.js
		var fGetViewExtension = CustomizingConfiguration.getViewExtension;
		CustomizingConfiguration.getViewExtension = function(sViewName, sExtensionPointName, vObject) {
			var oComponent = getAppComponent(vObject),
				sComponentId = oComponent && oComponent.getId(),
				oResultConfig = fGetViewExtension.call(CustomizingConfiguration, sViewName, sExtensionPointName, sComponentId);
			return oResultConfig;
		};

		// monkey patch the sap.ui.core.CustomizingConfiguration#getControllerExtension:
		var fGetControllerExtension = CustomizingConfiguration.getControllerExtension;
		CustomizingConfiguration.getControllerExtension = function(sControllerName, vObject) {
			var oComponent = getAppComponent(vObject),
				sComponentId = oComponent && oComponent.getId(),
				oResultConfig = fGetControllerExtension.call(CustomizingConfiguration, sControllerName, sComponentId);
			return oResultConfig;
		};
		
		// This method enhances the i18n model which has been attached to the template component via the manifest.
		// For this purpose the following enhancement chain is built:
		// Generic Template texts <- Template specific texts <- Application specific texts
		// Note that the i18n model is actually replaced since the generic template texts are used as basis for this enhacement chain.
		function fnEnhanceI18nModel(oComponent) {
			var oI18NModel = new ResourceModel({ bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n" });
			var aChildModels = [];
			var oModelApplication = oComponent.getAppComponent().getModel("i18n|" + oComponent.getMetadata().getComponentName() + "|" + oComponent.getEntitySet());
			if (oModelApplication) {
				aChildModels.push(oModelApplication);
			}
			var oTemplateModel = oComponent.getModel("i18n");
			if (oTemplateModel){
				aChildModels.push(oTemplateModel);
			}
			var oParentModel = true;
			for (var sParentName = "i18n"; oParentModel; ){
				sParentName = sParentName + "||Parent";
				oParentModel = oComponent.getModel(sParentName);
				if (oParentModel){
					aChildModels.push(oParentModel);	
				}
			}
			for (var i = aChildModels.length - 1; i >= 0; i--){
				oI18NModel.enhance(aChildModels[i].getResourceBundle());	
			}
			oComponent.setModel(oI18NModel, "i18n");
		}

		function fnEnhanceTemplPrivForBreakoutActions(oComponent, oModel) {
			var oManifest = oComponent.getAppComponent().getManifestEntry("sap.ui5");
			var oExtensions = oManifest.extends && oManifest.extends.extensions && oManifest.extends.extensions["sap.ui.controllerExtensions"];
			var sTemplateName = oComponent.getTemplateName();
			var oTemplateExtensions = oExtensions && oExtensions[sTemplateName] && oExtensions[sTemplateName]["sap.ui.generic.app"];
			var sEntitySet = oComponent.getEntitySet();
			var oBreakoutActions = oTemplateExtensions && oTemplateExtensions[sEntitySet] && oTemplateExtensions[sEntitySet].Actions;
			var oBreakOutActionEnabled = {};
			var oTableTabs = fnGetTableTabs(oComponent);
			if (oBreakoutActions) {
				if (oTableTabs) {
					fnAddBreakoutEnablementForTableTabs(oBreakOutActionEnabled, oBreakoutActions, oTableTabs);
				} else {
					fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions);
				}
			} else {
				var oSections = oTemplateExtensions && oTemplateExtensions[sEntitySet];
					for (var sSection in oSections) {
						oBreakoutActions = oSections[sSection]["Actions"];
						if (oBreakoutActions) {
							fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions);
						}
					}
			}
			oComponent.getModel("_templPriv").setProperty("/generic/listCommons/breakoutActionsEnabled", oBreakOutActionEnabled);
		}

		function fnGetTableTabs(oComponent) {
			var oResult;
			var oConfig = oComponent.getAppComponent().getConfig();
			var oSettings = oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings;
			if (oSettings && oSettings.quickVariantSelectionX) {
				oResult = oSettings.quickVariantSelectionX.variants;
			}
			//Chart PoC begin
			if (oSettings && oSettings._quickVariantSelectionX) {
				oResult = oSettings._quickVariantSelectionX.variants;
			}
			//Chart PoC end
			return oResult;
		}

		function fnAddBreakoutEnablementForTableTabs(oBreakOutActionEnabled, oBreakoutActions, oTableTabs) {
			var bEnabled;
			for (var sAction in oBreakoutActions) {
				bEnabled = true;
				if (oBreakoutActions[sAction].requiresSelection) {
					bEnabled = false;
				}
				for (var i in oTableTabs) {
					var sActionId = oBreakoutActions[sAction].id;
					var oTabItem = oTableTabs[i];
					var sSuffix = sap.suite.ui.generic.template.js.AnnotationHelper.getSuffixFromIconTabFilterKey(oTabItem);
					if (sSuffix) {
						sActionId = sActionId.concat(sSuffix);
					}
					oBreakOutActionEnabled[sActionId] = {
							enabled: bEnabled
					};
				}
			}
		}

		function fnAddBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions) {
			var bEnabled;
			for (var sAction in oBreakoutActions) {
				bEnabled = true;
				if (oBreakoutActions[sAction].requiresSelection) {
					bEnabled = false;
				}
				oBreakOutActionEnabled[oBreakoutActions[sAction].id] = {
						enabled: bEnabled
				};
			}
		}

		function fnDetermineStableID(oComponent) {
			if (oComponent.getAppComponent().getMetadata().getComponentName() === "" || oComponent.getTemplateName() === "" || oComponent.getEntitySet() === "") {
				// TODO: Error Handling
			}
			return oComponent.getAppComponent().getMetadata().getComponentName() + "::" + oComponent.getTemplateName() + "::" + oComponent.getEntitySet();
		}

		function createParameterModel(sEntityType, oComponentRegistryEntry, oMetaModel, fnTemplateSpecificParameters) {
			var oComponent = oComponentRegistryEntry.oComponent;
			var oAppComponent = oComponent.getAppComponent();
			var sEntitySet = oComponent.getEntitySet();
			var isDraftEnabled = oComponentRegistryEntry.utils.isDraftEnabled();
			var oSettings = null;
			var oAllSettings = oComponent.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;
			
			// move non public settings inton the settings object for templating
				oSettings.subPages = oComponentRegistryEntry.routeConfig.pages;
				oSettings.routeConfig = oComponentRegistryEntry.routeConfig;			
			
			
			return new JSONModel({
				entitySet: sEntitySet,
				entityType: sEntityType,
				routingSpec: oComponentRegistryEntry.routingSpec,
				"sap-ui-debug": window["sap-ui-debug"],
				isDraftEnabled: isDraftEnabled,
				settings: oSettings,
				manifest: oAppComponent.getInternalManifest(),
				//Needed for annotation helper that resolve annotation paths or qualifier from the manifest
				metaModel: oMetaModel,
				templateSpecific: fnTemplateSpecificParameters && fnTemplateSpecificParameters(),
				appComponentName: oComponent.getAppComponent().getMetadata().getComponentName(),
				helper: {
					bool: {
						"true": true,
						"false": false
					}
				}
			});
		}

		/*
		 * Creates the XMLView based on some models.
		 * @param {object} oComponent current instance of the template component
		 * @param {string} sCacheKey represents application part of the cache key
		 *
		 * @return {sap.ui.core.mvc.View} A asnyc <code>View</code> object is returned that can be
		 * chained with the <code>Promise</code> returned by the view's loaded() function
		 *
		 * @private
		 */
		function createXMLView(oComponentRegistryEntry, aCacheKeys) {
			var oComponent = oComponentRegistryEntry.oComponent,
				fnCreateViewController = oComponentRegistryEntry.createViewController,
				fnTemplateSpecificParameters = oComponentRegistryEntry.methods && oComponentRegistryEntry.methods.getTemplateSpecificParameters,
				oModel = oComponent.getModel(),
				oMetaModel, sEntitySet, sEntityType, oEntitySetContext, oEntityTypeContext,
				bNoOData = oComponentRegistryEntry.routingSpec && oComponentRegistryEntry.routingSpec.noOData;
			if (bNoOData){
				oMetaModel = new JSONModel({
					entitySet: {},
					entityType: {}
				});
				oEntitySetContext = oMetaModel.createBindingContext("/entitySet");
				oEntityTypeContext = oMetaModel.createBindingContext("/entityType");
			
			} else {
				oMetaModel = oModel && oModel.getMetaModel();
				sEntitySet = oModel && oComponent.getEntitySet();
				var oEntitySet = sEntitySet && oMetaModel.getODataEntitySet(sEntitySet);
				sEntityType = oEntitySet && oEntitySet.entityType;
				if (!sEntityType) {
					// TODO: Error Handling?
					return null;
				}
				oEntitySetContext = oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(sEntitySet, true));
				oEntityTypeContext = oMetaModel.createBindingContext(oMetaModel.getODataEntityType(sEntityType, true));
			}

			fnEnhanceI18nModel(oComponent);
			fnEnhanceTemplPrivForBreakoutActions(oComponent, oModel);

			// TODO: how to get the helpers from a template definition
			jQuery.sap.require("sap.ui.model.odata.AnnotationHelper");

			var sStableId = fnDetermineStableID(oComponent);

			var oView = sap.ui.getCore().byId(sStableId);
			if (oView){
				jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
				try {
					oView.destroy();
				} catch (ex) {
					jQuery.sap.log.warning("Error destroying view: " + ex);
				}
				oView = null;
			}

			// device model
			var oDeviceModel = new JSONModel(Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			// This model will also be used in the templating for SmartFormSimpleView -> Therefore, it needs to be stored
			oComponentRegistryEntry.oParameterModel = createParameterModel(sEntityType, oComponentRegistryEntry, oMetaModel, fnTemplateSpecificParameters);
			
			oComponent.runAsOwner(function() {
				var oPreprocessorsData = oComponentRegistryEntry.preprocessorsData;
				var oViewSettings = {
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								entitySet: oEntitySetContext,
								entityType: oEntityTypeContext
							},
							models: {
								device: oDeviceModel,
								entitySet: oMetaModel,
								entityType: oMetaModel,
								parameter: oComponentRegistryEntry.oParameterModel
							},
							preprocessorsData: oPreprocessorsData
						}
					},
					id: sStableId,
					type: ViewType.XML,
					viewName: oComponent.getTemplateName(),
					height: "100%",
					cache: {
						keys: aCacheKeys,
						additionalData: [oPreprocessorsData]
					}
				};
				if (fnCreateViewController){
					var ControllerClass = fnCreateViewController();
					oViewSettings.controller = new ControllerClass();
				}
				oView = sap.ui.view(oViewSettings);
			});
			return oView;
		}

		var TemplateComponent = UIComponent.extend("sap.suite.ui.generic.template.lib.TemplateComponent", {

			metadata: {
				properties: {
					/**
					 * Name of template
					 */
					templateName: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Entity Set
					 */
					entitySet: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Navigation property of the current component
					 */
					navigationProperty: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Instance of AppComponent
					 */
					appComponent: {
						type: "object",
						defaultValue: null
					},
					/**
					 * Refresh required when the component is activated
					 */
					isRefreshRequired: {
						type: "boolean",
						defaultValue: false
					},
					isLeaf: {
						type: "boolean"
					}
				},
				library: "sap.suite.ui.generic.template"
			},

			init: function() {

				(UIComponent.prototype.init || jQuery.noop).apply(this, arguments);

				var oUIModel = new JSONModel({
					editable: false,
					enabled: false
				});
				this.setModel(oUIModel, "ui");

				var oParsingSerive = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");

				var oTemplatePrivate = new JSONModel({
					generic: {
						crossAppNavSupport: !!oParsingSerive && oParsingSerive.isIntentUrl(document.URL),
						draftIndicatorState: sap.m.DraftIndicatorState.Clear,
						listCommons : {
							functionEnabled: {}
						},
						viewLevel: this.getComponentData().registryEntry.viewLevel,
						controlProperties: {},
						supportedIntents: {},
						embeddedComponents: {}
					}
				});
				oTemplatePrivate.setDefaultBindingMode("TwoWay");
				this.setModel(oTemplatePrivate, "_templPriv");

			},

			// Monkey Patch for Services & Component Usage
			getManifestEntry: function(sKey) {
				var oValue = UIComponent.prototype.getManifestEntry.apply(this, arguments);
				// special handling for /sap.ui5/componentUsages:
				//   - merges the configuration of the TemplateComponent and the AppComponent (AppComponent wins)
				if (/^\/sap\.ui5\/componentUsages(\/.+)?$/.test(sKey)) {
					oValue = jQuery.extend(true, {}, oValue, UIComponent.prototype.getManifestEntry.apply(this.getAppComponent(), arguments));
				}
				return oValue;
			},

			// TODO: clarify with Marcel: this.oContainer
			getComponentContainer: function() {
				// TODO: align with UI5 - how to access component container
				return this.oContainer;
			},

			// oComponentRegistryEntry will be provided by TemplateAssembler
			onBeforeRendering: function(oComponentRegistryEntry) {
				// if Component is assembled without TemplateAssembler it could be that oComponentRegistryEntry is undefined
				// e.g. an application has an own implementation of Component
				if (oComponentRegistryEntry){
					var oContainer = oComponentRegistryEntry.oComponent.getComponentContainer();
					var oModel = !oComponentRegistryEntry.createViewStarted && oContainer && oContainer.getModel();
					if (oModel) {
						oModel.getMetaModel().loaded().then(function() { // Do the templating once the metamodel is loaded
							if (!oComponentRegistryEntry.createViewStarted) {
								var aCacheKeys = [];
								var pGetMetadataLastModified = oModel.metadataLoaded().then(function(mParams) {
									var sCacheKey;
									if (mParams && mParams.lastModified) {
										sCacheKey = new Date(mParams.lastModified).getTime() + "";
									} else {
										jQuery.sap.log.error("TemplateComponent: no valid cache key segment last modification date provided by the OData Model");
										sCacheKey = new Date().getTime() + ""; //to keep the application working the current timestamp is used
									}
									return sCacheKey;
								});
								aCacheKeys.push(pGetMetadataLastModified);
								var pGetAnnotationsLastModified = oModel.annotationsLoaded().then(function(mParams) {
									var iCacheKey = 0;
									if (mParams) {
										for (var i = 0; i < mParams.length; i++) {
											if (mParams[i].lastModified) {
												var iLastModified = new Date(mParams[i].lastModified).getTime();
												if (iLastModified > iCacheKey) {
													iCacheKey = iLastModified;
												}
											} else {
												jQuery.sap.log.error("TemplateComponent: no valid cache key segment last modification date provided by OData annotations");
												iCacheKey = new Date().getTime() + ""; //to keep the application working the current timestamp is used
											}
										}
									}
									if (iCacheKey === 0) {
										jQuery.sap.log.error("TemplateComponent: no valid cache key segment last modification date provided by OData annotations");
										iCacheKey = new Date().getTime(); //to keep the application working the current timestamp is used
									}

									return iCacheKey + "";
								});
								aCacheKeys.push(pGetAnnotationsLastModified);
								oComponentRegistryEntry.createViewStarted = true;
								createXMLView(oComponentRegistryEntry, aCacheKeys).loaded().then(function(oView) {
									oComponentRegistryEntry.oComponent.setAggregation("rootControl", oView);
									oContainer.invalidate();
								});
							}
						});
					}
				}
			},

			setContainer: function() {
				UIComponent.prototype.setContainer.apply(this, arguments);
			},

			// Overwrite method of UIComponent
			getRouter: function() {
				if (this.getAppComponent()) {
					return this.getAppComponent().getRouter();
				}
				return UIComponent.prototype.getRouter.apply(this, arguments);
			}

		});
		return TemplateComponent;

	});
}; // end of sap/suite/ui/generic/template/lib/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateViewController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateViewController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateViewController",["sap/ui/core/mvc/Controller"], function(mvcController) {
	"use strict";

	return mvcController.extend("sap.suite.ui.generic.template.lib.TemplateViewController", {

		metadata: {
			library: "sap.suite.ui.generic.template"
		}
	});
}, /* bExport= */true);
}; // end of sap/suite/ui/generic/template/lib/TemplateViewController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.testableHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/lib/testableHelper",[], function() {
	"use strict";

/*
 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
 * and methods which have to be called in the test code.
 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
 * other classes.
 * Moreover, it is best practice to write unit tests for public methods.
 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
 * accessible to unit tests.
 * Actually, making a private method accessible to unit tests has two aspects:
 * - Call this method directly in a unit test in order to test it
 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly
 *   (and prevent the private method from being executed in the context of this test)
 *
 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
 *
 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
 *
 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
 * Check method observableConstructor in order to find out, how this can be achieved.
 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];

	function createLogAccessFunction(oConstructor){
		return function(oInstance){
			if (iTestMode >= 0){
				return null;
			}
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++){
				var oLog = aLog[i];
				if (oLog.me === oInstance){
					return oLog.args;
				}
			}
		};
	}

	function removeConstructorObservation(oConstructor){
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log){
			if (oConstructor.isStatic){
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++){
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0){
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0){
					oConstructor.log = aNewLog;
				} else {
					delete oConstructor.log;
				}
			} else {
				delete oConstructor.log;
			}
		}
	}

	function removeConstructorObservations(){
		aConstructors.forEach(removeConstructorObservation);
	}

	function fnObservableConstructor(fnConstructor, bStatic){
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++){
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor){
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function(){
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)){
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace){
					oConstructor.observer(oRet, arguments);
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
	    // Call this method at the beginning of the setup of your unit test.
	    // This method returns a stub object. This stub possesses all functions prepared via testable as methods.
	    // Thereby, the name of the method is derived from the parameter sName of testable.
	    // Thus, when testing the private method just test the corresponding method of the stub.
	    // When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function() {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = { };
			return oPossessor;
		},

        // Call this method at the end of the teardown of your unit test.
		endTest: function() {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

        // This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
        // startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function() {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = { id: iCount };
			mStartedApps[iCount] = oRet;
			return oRet;
		},

        // End the effect of startApp
		endApp: function(oAppId) {
			if (iTestMode > 0) {
			    var id = oAppId.id;
			    if (oAppId === mStartedApps[id]){
				    iTestMode--;
				    delete mStartedApps[id];
			    }
			}
		},

        // Use this method to define a private instance method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function(fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = oPossessor[sName] || fnFunction; //Do not overwrite a pre-set function
				return function() {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},

		// Use this method to define a private static method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function(fnFunction, sName){
		    if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
		        return fnFunction;
		    }
		    oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function() {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},

		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function(){
			return iTestMode === -1 && oStaticFunctions;
		},


		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/lib/testableHelper"],
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to spy or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function(fnConstructor, bStatic){
			if (iTestMode > 0){
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},

		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function(fnConstructor, fnObserver, bReplace){
			if (iTestMode >= 0){
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer){
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});

}; // end of sap/suite/ui/generic/template/lib/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
 
/**
* @namespace reserved for Smart Temaplates
* @name sap.suite.ui.generic.template
* @public
*/

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.suite.ui.generic.template.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/library",[
	'jquery.sap.global', 'sap/ui/core/library'
], function(jQuery, library1) {
	"use strict";

	/**
	 * Library with generic Suite UI templates.
	 * 
	 * @namespace
	 * @name sap.suite.ui.generic.template
	 * @public
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.suite.ui.generic.template",
		dependencies: [
			"sap.ui.core"
		],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.50.5"
	});

	return sap.suite.ui.generic.template;

}, /* bExport= */false);
}; // end of sap/suite/ui/generic/template/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Fragment'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController",[
	"jquery.sap.global",
	"sap/ui/core/Fragment",
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/thirdparty/d3",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"
], function(jQuery, Fragment, Controller, JSONModel, D3, KpiUtil, V4Terms) {
	"use strict";
	jQuery.sap.require("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter");

	var oNavigationHandler,
		oSTCommonUtils;

	var cController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiCardController", {

		onInit: function(evt) {
			// CommonUtils will be taken from OVP lib
			jQuery.sap.require("sap.ovp.cards.CommonUtils");
		},
		onExit: function() {
		},
		onBeforeRendering: function() {
			// Define CommonUtils
			var oCommonUtils = sap.ovp.cards.CommonUtils;
			var sDataPointPath, sSPVPath;
			//get the view and other settings
			var oView = this.getView();
			//var oLocalCardContainer = oView.byId("template::ALPcardContainer");
			var oSettings = oView.data("qualifierSettings");
			var oQualifier = oSettings.qualifier;
			var oModel = oView.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

			// create a card name for OVP
			var oCardName = "kpiCard" + oQualifier;
			// create a card settings to pass to OVP
			var oCardSettings = {
				"cards":{}
			};
			//if qualifier present in the settings
			sSPVPath = V4Terms.SelectionPresentationVariant + (oQualifier ? "#" + oQualifier : "");
			// CDS Annotation gives Path instead of AnnotationPath
			var sPresentationVariant = oEntityType[sSPVPath].PresentationVariant &&  oEntityType[sSPVPath].PresentationVariant.Path;
			if (!sPresentationVariant) {
				jQuery.sap.log.error("PresentationVariant does not have Path.");
				return;
			}
			var oVisualizations = oEntityType[sPresentationVariant.split("@")[1]].Visualizations;

			oVisualizations.forEach(function(oAnno){
				if (oAnno.AnnotationPath.indexOf("DataPoint") > 0){
					sDataPointPath = oAnno.AnnotationPath.split("@")[1];
				}
			});

			oCardSettings["cards"][oCardName] = {
				"model": oSettings.model,
				"template": "sap.ovp.cards.charts.analytical",
				"settings": {
					"entitySet": oSettings.entitySet,
					"selectionPresentationAnnotationPath": sSPVPath,
					"dataPointAnnotationPath": sDataPointPath,
					"navigation": "chartNav"
				}
			};
			// create a card with OVP API
			oCommonUtils.createCardComponent(oView, oCardSettings, "template::ALPcardContainer");
			//Event handler on header clicked for navigation
			oCommonUtils.onHeaderClicked = function(oEvent){
				var oNavModel = oView.getModel("detailNavigation");
				this.handleNavigationPress(oNavModel);
			}.bind(this);
		},

		handleNavigationPress: function(oNavModel) {
			if (oNavModel) {
				var sTarget = oNavModel.getProperty("/target");
				var sAction = oNavModel.getProperty("/action");
				var sParameters = oNavModel.getProperty("/parameters");
				if (sTarget && sAction) {
					if (!oNavigationHandler) {
						oNavigationHandler = oSTCommonUtils.getNavigationHandler();
					}

					oNavigationHandler.navigate(sTarget, sAction, JSON.parse(sParameters), null, function (oError) {
						if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
							if (oError.getErrorCode() === "NavigationHandler.isIntentSupported.notSupported") {
								sap.m.MessageBox.show(oSTCommonUtils.getText("ST_NAV_ERROR_NOT_AUTHORIZED_DESC"), {
									title: oSTCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
								});
							} else {
								sap.m.MessageBox.show(oError.getErrorCode(), {
									title: oSTCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
								});
							}
						}
					});
				}
			}
		},
		_assignCommonUtils: function(oCommonUtils) {
			oSTCommonUtils = oCommonUtils;
			oNavigationHandler = oSTCommonUtils.getNavigationHandler();
		}
	});


	return cController;

});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController",["sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiCardController",
"sap/ui/model/json/JSONModel",
"sap/ui/model/json/JSONModel",
"sap/ui/core/mvc/ViewType",
"sap/m/Popover"
],
function(KpiCardController, JSONModel, Filter, ViewType, Popover) {
	"use strict";
	var OVPLoaded;
	jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController");

	sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController = {
		_kpiCards: [],
		init: function(oState) {
			var me = this;
			me.oState = oState;
			// create JSON model instance
			me.oGenericModel = new JSONModel();

			// JSON sample data

			var mGenericData = {
				header: "Some Header",
				title: "Some Title",
				titleUrl: "",
				icon: "sap-icon://camera"
			};

			// set the data for the model
			me.oGenericModel.setData(mGenericData);
			if (OVPLoaded === undefined) {
				OVPLoaded = sap.ui.getCore().loadLibrary("sap.ovp", { async: true });
			}
		},

		openKpiCard: function(oEvent) {
			var me = this;
			var oSource;
			if (typeof oEvent.currentTarget != "undefined") {
				oSource = sap.ui.getCore().byId(oEvent.currentTarget.id);
			} else {
				oSource = oEvent.getSource();
			}
			// if OVP is loaded then Open the KPI card
			OVPLoaded.then(function(){
				me.createPopover(function() {
					me._openCard(oSource);
				}.bind(me, oSource), oSource);
			});
		},

		_openCard: function(oSource) {
			var me = this;

			// delay because addDependent will do a async rerendering and the actionSheet will immediately close without it.

			jQuery.sap.delayedCall(0, this, function() {
				me._kpiCards[oSource.getQualifier()].openBy(oSource);
			});

		},

		handleKpiPress: function(oEvent) {
			this.openKpiCard(oEvent);
		},

		createPopover: function(fnOpenOnSucces, oSource) {
			var me = this;
			var sQualifier = oSource.getQualifier();

			var oComponent = me.oState.oController.getOwnerComponent();
			var oSettings = oComponent.getComponentContainer().getSettings();
			//Find the KPI setting based on qualifier
			var oKPISettings = oSettings.keyPerformanceIndicators;
			var oQualifierSettings;
			for (var sKey in oKPISettings){

				if (oKPISettings[sKey].hasOwnProperty("qualifier") && oKPISettings[sKey].qualifier === sQualifier){
					oQualifierSettings = oKPISettings[sKey];
					break;
				}
			}
			if (!oQualifierSettings){
				jQuery.sap.log.error("KPI settings not found with qualifier.");
				return;
			}
			var outboundTarget = oSettings.appComponent.getManifestEntry("/sap.app/crossNavigation/outbounds/" + oQualifierSettings.detailNavigation);
			var oModel = oComponent.getModel(oQualifierSettings.model);

			oModel.getMetaModel().loaded().then(function() {
				var me = this;
				var sDataPointPath;
				me._oCardController = new KpiCardController();
				var oComponent = me.oState.oController.getOwnerComponent();

				var oParamModel = new JSONModel();
				var oQualifierSettings = arguments[0];

				var oModel = oComponent.getModel(oQualifierSettings.model);
				var oMetaModel = oModel.getMetaModel();
				var oEntitySet = oMetaModel.getODataEntitySet(oQualifierSettings.entitySet);
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oSelectionPresentationVariant = oEntityType["com.sap.vocabularies.UI.v1.SelectionPresentationVariant#" + sQualifier];
				// CDS Annotation gives Path instead of AnnotationPath
				var oPresentationVariantPath = oSelectionPresentationVariant.PresentationVariant && oSelectionPresentationVariant.PresentationVariant.Path;
				if (!oPresentationVariantPath) {
					jQuery.sap.log.error("PresentationVariant does not have Path.");
					return;
				}
				var oVisualizations = oEntityType[oPresentationVariantPath.split("@")[1]].Visualizations;
				//Data Point is extracted from Visualizations of PV
				oVisualizations.forEach(function(oAnno){
					if (oAnno.AnnotationPath.indexOf("DataPoint") > 0){
						sDataPointPath = oAnno.AnnotationPath.split("@")[1];
					}
				});
				var oDataPoint = oEntityType[sDataPointPath];
				var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);

				var oDataPointMeasure;
				var oChart = oEntityType["com.sap.vocabularies.UI.v1.Chart#" + sQualifier];
				if (oChart.MeasureAttributes[0] && oChart.MeasureAttributes[0].DataPoint) {
					oDataPointMeasure = oEntityType[(oChart.MeasureAttributes[0].DataPoint.AnnotationPath).toString().substring(1)];
				}

				oQualifierSettings.metaModel = oMetaModel;
				oParamModel.setData(oQualifierSettings);

				// create a new view with template processing
				var oView = sap.ui.view({
					async: false,
					preprocessors: {
						xml: {
							bindingContexts: {
								entityType: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
								entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oQualifierSettings.entitySet, true))
							},
							models: {
								entitySet: oMetaModel,
								entityType: oMetaModel,
								parameter: oParamModel

							},
							dataModel: oModel,
							settings: oParamModel,
							preprocessorsData: oComponent.getComponentData().preprocessorsData
						}
					},

					type: ViewType.XML,
					viewName: "sap.suite.ui.generic.template.AnalyticalListPage.view.KpiCardSizeM",
					height: "100%"
				});


				oView.data({
					"qualifierSettings": oQualifierSettings,
					//"model": oModel,
					"dataPoint": oDataPoint,
					"dataPointMeasure": oDataPointMeasure,
					"chart": oChart,
					"entityTypeProperty": oEntityTypeProperty
				});

				oView.setModel(oComponent.getModel(oQualifierSettings.model));

				//Set model for detail action
				var actionModel = new sap.ui.model.json.JSONModel();
				var actionData = {"visible": oQualifierSettings.detailNavigation ? true : false};
				if (oQualifierSettings.detailNavigation && outboundTarget) {
					actionData.target = outboundTarget.semanticObject;
					actionData.action = outboundTarget.action;
					actionData.parameters = JSON.stringify(outboundTarget.parameters ? outboundTarget.parameters : {});
				} else {
					//Have to hide the button, no where to navigate
					actionData.visible = false;
				}
				actionModel.setData(actionData);
				oView.setModel(actionModel, "detailNavigation");

				if (typeof me._kpiCards[sQualifier] != "undefined") {
					me._kpiCards[sQualifier].destroy();
				}
				me._kpiCards[sQualifier] = new Popover();
				me._kpiCards[sQualifier].setShowHeader(false);
				me._kpiCards[sQualifier].addContent(oView);
				me._oKpiCardController = oView.getController();
				me._oKpiCardController._assignCommonUtils(me.oState.oTemplateUtils.oCommonUtils);
				me.oState.oController.getView().addDependent(me._kpiCards[sQualifier]);

				fnOpenOnSucces();

			}.bind(this, oQualifierSettings));


		},

		onExit: function() {
			if (this._oKpiCard) {
				this._oKpiCard.destroy();
			}
		},

		_setModel: function(oModel) {
			this._oKpiCard.setModel(oModel);
		}
	};

	return sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController;
});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI",["jquery.sap.global", "sap/ui/base/Object",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"],
		function(jQuery, BaseObject, NavigationController) {
	"use strict";
	/**
	 * API to be used in extensions of AnalyticalListPage. Breakout coding can access an instance of this class via
	 * <code>this.extensionAPI</code>. Do not instantiate yourself.
	 * @class
	 * @name sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI
	 * @public
	 */

	function getMethods(oTemplateUtils, oController, oState) {
		var oNavigationController;
		return /** @lends sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI.prototype */ {
			/**
			 * Get the list entries currently selected
			 * @param {string} sUiElementId the id identifying the ui element the selected context is requested for
			 * @return {sap.ui.model.Context[]} contains the entries selected
			 * @public
			 */
			getSelectedContexts: function(sUiElementId) {
				// Incase no ElementId is passed from the function call, we default oControl to smartTable and fetch the context of smartTable
				var oControl = oState.oSmartTable;
				if (sUiElementId) {
					oControl = oController.byId(sUiElementId);
				}
				return oTemplateUtils.oCommonUtils.getSelectedContexts(oControl);
			},
			/**
			 * Triggers rebinding on the list
			 * 
			 * @public
			 */
			rebindTable: function(){
				oState.oSmartTable.rebindTable();
			},
			/**
			 * Refreshes the SmartTable
			 *
			 * @public
			 */
			refreshTable: function() {
				if (oState.oSmartTable) {
					//Filters from SmartChart should be considered by table
					oState.oController.getOwnerComponent().getModel("_templPriv").setProperty('/alp/_ignoreChartSelections', false);
					oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
				}
			},
			/**
			* Refreshes the SmartChart Binding
			*
			* @private
			*/
			_refreshChart: function() {
				// Rebind chart
				if (oState.oSmartChart && oState.oSmartChart.rebindChart) {
					oState.oSmartChart.rebindChart();
				}
			},
			/**
			* Refreshes chart Items in SmartVisualFilterBar
			*
			* @private
			*/
			_refreshFilters: function() {
				//Update Binding in chart Items in Smart Filter Bar
				if (oState.alr_visualFilterBar && oState.alr_visualFilterBar.updateVisualFilterBindings) {
					oState.alr_visualFilterBar.updateVisualFilterBindings(true);
				}
			},
			/**
			* Refreshes KPI tags
			*
			* @private
			*/
			_refreshKpi: function() {

				if (oState.oKpiTagContainer) {
					var aContent = oState.oKpiTagContainer.mAggregations.content;
					for (var i in aContent){
						if (aContent[i].getModelName && aContent[i].getModelName() === "kpi"){
							aContent[i]._firstTime = true;
							aContent[i].onBeforeRendering();
						}
					}
				}
			},
			/**
			* Refreshes All controls in ALP
			*
			* @public
			*/
			refresh: function() {
				this._refreshFilters();
				this._refreshChart();
				this.refreshTable();
				this._refreshKpi();
			},
			/**
			 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
			 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares for
			 * defining dependency and handling device specific style classes
			 *
			 * @param {sap.ui.core.Control} oControl the control to be attached to the view
			 * @public
			 */
			attachToView: function(oControl){
				oTemplateUtils.oCommonUtils.attachControlToView(oControl);
			},
			/**
			 * TODO : Need to bring this to same level as LR
			 * Invokes multiple time the action with the given name and submits changes to the back-end.
			 *
			 * @param {string} sFunctionName The name of the function or action
			 * @param {array|sap.ui.model.Context} vContext The given binding contexts
			 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
			 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
			 */
			invokeActions: function(sFunctionName, vContext, mUrlParameters){
				var aContext, mParameters;
				if (!vContext) {
					aContext = [];
				} else if (vContext instanceof sap.ui.model.Context) {
					aContext = [ vContext ];
				} else {
					aContext = vContext;
				}
				if (mUrlParameters) {
					mParameters = {
						urlParameters: mUrlParameters
					};
				}
				return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
			},
			/**
			 * Get the navigation controller for navigation actions
			 *
			 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
			 * @public
			 */
			getNavigationController: function() {
				if (!oNavigationController) {
					oNavigationController = new NavigationController(oTemplateUtils, oController, oState);
				}
				return oNavigationController;
			},
			/**
			 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
			 * are fulfilled
			 *
			 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion
			 * of the execution. If nothing is returned, immediate completion is assumed.
			 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
			 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to
			 * false in case of immediate completion
			 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only
			 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of
			 * another function, that set the application busy
			 * @param {boolean} [mParameters.dataloss.popup=true] Provides a dataloss popup before execution of the function if
			 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
			 * @param {boolean} [mParameters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation,
			 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup
			 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
			 * @public
			 * @experimental
			 */
			securedExecution: function(fnFunction, mParameters) {
				return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
			}
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.extensionAPI.ExtensionAPI", {
		constructor: function(oTemplateUtils, oController, oState) {
			jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

		}
	});
});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper') ) {
(function() {
	"use strict";
	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained

	
	jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained

	sap.ui.require("sap/suite/ui/generic/template/extensionAPI/UIMode");
	jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper");
	sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper = {
		getDetailEntitySet: function(oContext) {
			var o = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(o, true));
		},
		// resolvePresentationVariant: function(oContext) {
		// 	var oParameter = oContext.getObject();
		// 	var oModel = oContext.getModel();
		// 	var oMetaModel = oModel.getProperty("/metaModel");
		// 	var oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet);
		// 	var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		// 	var sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant"
		// 		+ (oParameter.settings && oParameter.settings.presentationVariantQualifier ? "#" + oParameter.settings.presentationVariantQualifier : "");
		// 	return oMetaModel.createBindingContext(sAnnotationPath);
		// },
		resolveMetaModelPath: function(oContext) {
			var sPath = oContext.getObject();
			var oModel = oContext.getModel();
			var oMetaModel = oModel.getProperty("/metaModel");
			return oMetaModel.createBindingContext(sPath);
		},
		/* The context definition for the ALP:
			1. If there is a SelectionPresentationVariant (SVP) qualifier in the app. descriptor (paramter model)
				yes) Select that SVP
				no) Check if there is an SVP without a qualifier and choose it if exists
			2. Was a SVP found in 1.
				yes) Choose the PresentationVariant (PV) specified in the SVP
				no) Check if there is a PV qualifier in the parameter model
					yes) Choose the PV
					no) Check if there is a default PV and choose if it exists
			3. Was a PV found in 2.
				yes) Follow the Visualizations to LineItem and Chart or use default if not found
				no) use LineItem and Chart default annotations
		*/
		createWorkingContext: function(oContext) {
			var oParameter = oContext.getObject(),
				oSettings = oParameter.settings,
				oModel = oContext.getModel(),
				oMetaModel = oModel.getProperty("/metaModel"),
				oEntitySet = oMetaModel.getODataEntitySet(oParameter.entitySet),
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType),
				sAnnotationPath = "",
				oWorkingContext = {};
			/* Find SelectionPresentationVariant */
			sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.SelectionPresentationVariant" + (oSettings && oSettings.qualifier ? "#" + oSettings.qualifier : "");
			oWorkingContext.selectionPresentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.selectionPresentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			oWorkingContext.selectionPresentationVariantPath = sAnnotationPath;
			/* Find PresentationVariant */
			if (oWorkingContext.selectionPresentationVariant && oWorkingContext.selectionPresentationVariant.PresentationVariant) {
				sAnnotationPath =
					//Path is specified
					oWorkingContext.selectionPresentationVariant.PresentationVariant.Path ||
					//AnnotationPath is specified (for compatiblity reasons)
					oWorkingContext.selectionPresentationVariant.PresentationVariant.AnnotationPath ||
					//SVP points to PV type directly and NOT via annotation path
					oWorkingContext.selectionPresentationVariantPath + "/PresentationVariant";

					if (sAnnotationPath.indexOf("@") === 0) { // Relative path check, make is absolute path
						sAnnotationPath = oEntityType.$path + "/" + sAnnotationPath.substr(1);
					}
			} else {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.PresentationVariant" + (oSettings && oSettings.qualifier ? "#" + oSettings.qualifier : "");
			}
			if (typeof sAnnotationPath === "string") {
				/* Referene to PV via annotationPath */
				oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.presentationVariantPath = sAnnotationPath;
				oWorkingContext.presentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			}
			// If a qualifier was specified but no presentation variant exists for that qualifier or indirectly
			// through the SelectionPresentationVaraiant with qualifier it is a wrong qualifier
			if (oSettings.qualifier && !oWorkingContext.presentationVariant) {
				var e = new Error("Error in manifest.json: Not SelectionPresentationVariant or PresentationVariant found for qualifier: "
						+ oSettings.qualifier, "./manifest.json");
				throw e;
			}
			/* Determine LineItem and Chart via PV */
			if (oWorkingContext.presentationVariant && oWorkingContext.presentationVariant.Visualizations) {
				oWorkingContext.presentationVariant.Visualizations.forEach(function(visualization) {
					/* get rid of the @ and put a / in front */
					var sPath = "/" + visualization.AnnotationPath.slice(1);
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
					if (sPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
						sAnnotationPath = oEntityType.$path + sPath;
						oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.chartPath = sAnnotationPath;
						oWorkingContext.chartQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}
			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}
			if (!oWorkingContext.chart) {
				sAnnotationPath = oEntityType.$path + "/com.sap.vocabularies.UI.v1.Chart";
				oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.chartPath = sAnnotationPath;
				oWorkingContext.chartQualifier = "";
			}

			oModel.setProperty("/workingContext", oWorkingContext);
			return "/workingContext";
		},
		/**
		 * [hasDeterminingActionsForALP To check if determiningActions are defined in manifest or annotations]
		 * @param  {[String]}  aTableTerm   [Records of table actions from annotations]
		 * @param  {[String]}  aChartTerm   [Records of chart actions from annotations]
		 * @param  {[String]}  sEntitySet   [Entity set Records]
		 * @param  {Object}  oManifestExt [Extensions from manifest]
		 * @return {Boolean}              [Returns status of determining actions to the xml]
		 */
		hasDeterminingActionsForALP: function(aTableTerm, aChartTerm, sEntitySet, oManifestExt) {
			if (sEntitySet && oManifestExt && oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"] &&
				sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper._hasCustomDeterminingActionsInALP(sEntitySet, oManifestExt["sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"]["sap.ui.generic.app"])) { //Check for AnalyticalListPage
				return true;
			}
			//To bring determining buttons of table from annotations
			for (var iRecord = 0; iRecord < aTableTerm.length; iRecord++) {
				if ((aTableTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aTableTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					aTableTerm[iRecord].Determining && aTableTerm[iRecord].Determining.Bool === "true") {
					return true;
				}
			}
			//To bring determining buttons of chart from annotations
			for (var iRecord = 0; iRecord < aChartTerm.length; iRecord++) {
				if ((aChartTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || aChartTerm[iRecord].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") &&
					aChartTerm[iRecord].Determining && aChartTerm[iRecord].Determining.Bool === "true") {
					return true;
				}
			}
			return false;
		},
		/**
		 * [_hasCustomDeterminingActionsInALP To check if determiningActions are defined in manifest]
		 * @param  {[String]}  sEntitySet [Entity set Records]
		 * @param  {Object}  oManifestExt [Extensions from manifest]
		 * @return {Boolean}              [Returns status of determining actions to the xml]
		 */
		_hasCustomDeterminingActionsInALP: function(sEntitySet, oManifestExt) {
			if (oManifestExt && oManifestExt[sEntitySet]) {
				var oManifestExtEntitySet = oManifestExt[sEntitySet];
				if (oManifestExtEntitySet.Actions) {
					for (var action in oManifestExtEntitySet.Actions) {
						if (oManifestExtEntitySet.Actions[action].determining) {
							return true;
						}
					}
				}
			}
			return false;
		}
	};

	sap.suite.ui.generic.template.AnalyticalListPage.util.AnnotationHelper.getDetailEntitySet.requiresIContext = true;
})();

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",[
	"sap/ui/base/Object",
	"sap/ui/model/Context",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode",
	"jquery.sap.global"
	],  function(BaseObject, Context, OperationCode, jQuery) {
		"use strict";
		var FilterUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.FilterUtil");
		/**
		 * @private
		 * This function create a title by combining the label and id
		 * @param  {string} sDimValueDisplay the label field
		 * @param  {string} sDimValue the id field
		 * @return {string} the newly created title
		 */
		FilterUtil.createTitle = function (sDimValueDisplay, sDimValue) {
			var sTitle;
			if (!sDimValueDisplay) {
				return sDimValue;
			}
			if (sDimValue instanceof Date ) {
				return sDimValueDisplay;
			}
			//for donut chart
			if (sDimValueDisplay.indexOf(':') !== -1 ) {
				sDimValueDisplay = sDimValueDisplay.substring(0, sDimValueDisplay.indexOf(':'));
			}
			//if not already concatenated
			if (sDimValueDisplay.indexOf(sDimValue) === -1) {
				sTitle = sDimValueDisplay + " (" +  sDimValue + ")";
			} else {
				sTitle = sDimValueDisplay;
			}
			return sTitle;
		};

		/**
		 * This function access nested object and returns the correct value if it exists, and undefined in all other cases
		 * @param  {object} nested object
		 * @param  {string} sNestedProperty the property string
		 * @return {object} return the required object if exist otherwise return undefined
		 */
		FilterUtil.readProperty = function(oObject, sNestedProperty) {
			var i = 0,
			oProperties = typeof sNestedProperty === 'string' ? sNestedProperty.split(".") : [];
			while (i < oProperties.length) {
				if (!oObject) {
					return undefined;
				}
				oObject = oObject[oProperties[i++]];
			}
			return oObject;
		};
		/**
		 * This function execute a function associated with an object and return the result if the function is exists, and undefined in all other cases
		 * @param  {object}   oObject       nested object
		 * @param  {string}   sFunctionName full name of the function
		 * @param  {[object]} oArgs         array of object as arguments to the function
		 * @return {object}                 return the result after executing the function if the function is exists, otherwise return undefined 
		 */
		FilterUtil.executeFunction = function(oObject, sFunctionName, oArgs){
			var i = 0,
			oParent,
			oProperties = typeof sFunctionName === 'string' ? sFunctionName.split(".") : [];
			while (i < oProperties.length) {
				if (!oObject) {
					return undefined;
				}
				oParent = oObject;
				oObject = oObject[oProperties[i++]];
			}
			return typeof oObject === 'function' ? oObject.apply(oParent, oArgs) : undefined;
		};
		/**
		 * This function create a title from the operation code
		 * @param  {object} oFilterValueRange ranges
		 * @return {string} title
		 */
		FilterUtil.createTitleFromCode = function(oFilterValueRange) {
			var sValueA = FilterUtil.readProperty(oFilterValueRange, "value1"),
			sValueB = FilterUtil.readProperty(oFilterValueRange, "value2"),
			sOperation = FilterUtil.readProperty(oFilterValueRange, "operation"),
			sResult;
			if ( !sValueA || !sOperation || !OperationCode[sOperation]) {
				return undefined;
			}
			//if there's a range specified and operation is other than EQ eg : <,> ...
			if (sValueB && sOperation !== "EQ") {
				sResult = sValueA + OperationCode[sOperation].code + sValueB;
				//pre existing code. Need to check if required and to be removed
			} else if (OperationCode[sOperation].position === "last") {
				sResult = sValueA + OperationCode[sOperation].code;
				//pre existing code. Need to check if required and to be removed
			} else if (OperationCode[sOperation].position === "mid") {
				sResult = OperationCode[sOperation].code + sValueA + OperationCode[sOperation].code;
				// If there's a value present and Operation is "EQ", text is generated as below
			} else {
				sResult = OperationCode[sOperation].code + sValueA;
			}
			// This condition is when there's others selected.
			if (oFilterValueRange.exclude) {
				sResult = "!(" + sResult + ")";
			}
			return sResult;
		};

		/**
		 * Formatter to create Filters link text
		 * @param  {Object} oContext FilterData
		 * @return {string} Text for filters link
		 */
		FilterUtil.formatFiltersLink = function(oContext) {
			var i18n = this.getModel("i18n"),
			rb = i18n.getResourceBundle();
			var length = oContext ? (Object.keys(oContext).length - (Object.keys(oContext).indexOf("_CUSTOM") !== -1)) : 0;
			return (oContext && length) ? rb.getText("VISUAL_FILTER_FILTERS_WITH_COUNT", [length]) : rb.getText("VISUAL_FILTER_FILTERS");
		};
		/**
		 * [getBooleanValue  get the boolean value ]
		 * @param  {object} oValue   [Value]
		 * @param  {boolean} bDefault [default value ]
		 * @return {boolean}          [returns true/false based on the value]
		 */
		FilterUtil.getBooleanValue = function(oValue, bDefault){
			if (oValue && oValue.Bool) {
				if (oValue.Bool.toLowerCase() === "true") {
					return true;
				} else if (oValue.Bool.toLowerCase() === "false") {
					return false;
				}
			}
			return bDefault;
		};

		/**
		 * [getPrimitiveValue returns the value with respective type]
		 * @param  {object} oValue [description]
		 * @return {*}        [returns the primitive type]
		 */
		FilterUtil.getPrimitiveValue = function (oValue) {
			var value;

			if (oValue) {
				if (oValue.String ) {
					value = oValue.String;
				} else if (oValue.Bool) {
					value = FilterUtil.getBooleanValue(oValue);
				} else if (oValue.EnumMember){
					value = oValue.EnumMember.split("/")[1];
				} else {
					value = FilterUtil.getNumberValue(oValue);
				}
			}

			return value;
		};

		/**
		 * [getNumberValue parses the oValue into the number value based on the type ]
		 * @param  {object} oValue [value]
		 * @return {number}        [returns the value in the number format  ]
		 */
		FilterUtil.getNumberValue = function (oValue) {
		//Here the oValue obj always returns one key which is either of value present in the array.
			if (oValue) {
				var sVal = Object.keys(oValue)[0];
				return (oValue && sVal && ["String","Int","Decimal","Double","Single"].indexOf(sVal) !== -1 ) ? Number(oValue[sVal]) : undefined;
			}
		};

		/**
		 * [getPathOrPrimitiveValue returns the path of the oItem ]
		 * @param  {object} oModel [model name against which path to be verified]
		 * @param  {object} oItem     [oItem]
		 * @return {*}           [returns the path or its primitive Value]
		 */
		FilterUtil.getPathOrPrimitiveValue = function (oItem) {
			if (oItem) {
				return (oItem.Path) ? "{path:'" + oItem.Path + "'}" : FilterUtil.getPrimitiveValue(oItem);
			} else {
				return "";
			}
		};
		/**
		 * this method can be used to check if there has been change in the filters
		 * @param  {array/object} filter1
		 * @param  {array/object} filter2
		 * @return {boolean}
		 */
		FilterUtil.isFilterDiff = function(f1, f2) {
			if (jQuery.isArray(f1) != jQuery.isArray(f2)) {
				return true;
			}

			if (jQuery.isArray(f1)) {
				return this.isFilterListDiff(f1, f2);
			} else {
				return this.isFilterObjDiff(f1, f2);
			}
		};
		/**
		 * this method can be used to check if there has been change in the filters, when filter is of object type
		 * @param  {object} filter1
		 * @param  {object} filter2
		 * @return {boolean}
		 */
		FilterUtil.isFilterObjDiff = function(f1, f2) {
			if (!f1 || !f2) {
				return true;
			}
			for (var a in f1) {
				if (a == "aFilters") {
					if (this.isFilterListDiff(f1.aFilters, f2.aFilters)) {
						return true;
					}
				} else if (f1[a] != f2[a]) {
					return true;
				}
			}

			return false;
		};
		/**
		 * This method convert the date in to medium format
		 * @param  {Date} oDate [description]date object
		 * @return {string} date string in medium format
		 */
		FilterUtil.getDateInMedium = function(oDate) {
			return (oDate instanceof Date) ? sap.ui.core.format.DateFormat.getDateInstance({style : "medium"}).format(oDate) : undefined;
		};
		/**
		 * This function check whether the current and default variant are equal or not
		 * @param  {object}  oState
		 * @return {boolean} return true if variants are equal
		 */
		FilterUtil.isDefaultVariantSelected = function(oState) {
			var oVariant = oState.oSmartFilterbar.getSmartVariant();
			return (oVariant && oVariant.getCurrentVariantId() === oVariant.getDefaultVariantKey());
		};
		/**
		 * this method can be used to check if there has been change in the filters, when filter is of array type.
		 * @param  {array} filter1
		 * @param  {array} filter2
		 * @return {boolean}
		 */
		FilterUtil.isFilterListDiff = function(fList1, fList2) {
			if (!fList1 || !fList2) {
				return true;
			}
			if (fList1.length != fList2.length) {
				return true;
			}

			for (var i = 0; i < fList1.length; i++) {
				var f1 = fList1[i];
				var f2 = fList2[i];

				if (this.isFilterObjDiff(f1, f2)) {
					return true;
				}
			}
			return false;
		};
		/**
		 * This method formats the Dimension Label as per Text Arrangement from Annotation.
		 * @param  {string} sDescription [description]Dimension Text Desciption
		 * @param  {string} sId [id]Dimention value
		 * @param  {string} sTextArragement [arrangement]Text Arrangement
		 * @return {string} formatted string with id and description
		 */
		FilterUtil.getTextArrangement = function(sDescription, sId, sTextArragement) {
			var sLabel,
			sDescOrIdOnly = sDescription ? sDescription : sId,
			sDescAndId = ( sDescription && sId ) ? sDescription + " (" + sId + ")" : sDescOrIdOnly;
			if ( sId !== "__IS_OTHER__" && sId !== "Other" ){  //Incase of Other in Donut Chart we need not to apply Text Arrangements
				switch ( sTextArragement ){
					//TextFirst Arrangement
					case sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId : sLabel = sDescAndId;
					break;
					//TextOnly Arrangement
					case sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionOnly : sLabel = sDescription ? sDescription : "";
					break;
					//TextLast Arrangement
					case sap.ui.comp.smartfilterbar.DisplayBehaviour.idAndDescription : sLabel = ( sDescription && sId ) ? sId + " (" + sDescription + ")" : sDescOrIdOnly;
					break;
					//TextSeparate Arrangement
					case sap.ui.comp.smartfilterbar.DisplayBehaviour.idOnly : sLabel = sId ? sId : "";
					break;
					//Incase on Text Arrangemet Annotation not found then fallback to default arrangement i.e. descriptionAndId
					default : sLabel = sDescAndId;
					break;
				}
			} else {
				sLabel = sDescription;
			}
			return sLabel;
		};
		FilterUtil.getTooltipForValueHelp = function (bIsVisible, rb, selectedItemsTooltip) {
			//tooltip string for valuehelp button
			var valueHelpTooltip = bIsVisible ? rb.getText("VALUEHELP") : selectedItemsTooltip;
			//valuehelp with selections
			if (selectedItemsTooltip) {
				return bIsVisible ? (valueHelpTooltip + " " + rb.getText("WITH") + " " + selectedItemsTooltip) : selectedItemsTooltip;
			}
			return valueHelpTooltip;
		};
	return FilterUtil;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
* @fileOverview This file contains miscellaneous utility functions.
*/
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationFormatter",[
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper"
	],
	function(KpiUtil, V4Terms, KpiAnnotationHelper) {
		"use strict";

		jQuery.sap.declare("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter");

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter = {};
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions = {
			count: 0
		};
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.NumberFormatFunctions = {};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.criticalityConstants = {
			StateValues: {
				None: "None",
				Negative: "Error",
				Critical: "Warning",
				Positive: "Success"
			},
			ColorValues: {
				None: "Neutral",
				Negative: "Error",
				Critical: "Critical",
				Positive: "Good"
			}
		};

		function criticality2state(criticality, oCriticalityConfigValues) {
			var sState;
			if (oCriticalityConfigValues) {
				sState = oCriticalityConfigValues.None;
				if (criticality && criticality.EnumMember) {
					var val = criticality.EnumMember;
					if (endsWith(val, "Negative")) {
						sState = oCriticalityConfigValues.Negative;
					} else if (endsWith(val, "Critical")) {
						sState = oCriticalityConfigValues.Critical;
					} else if (endsWith(val, "Positive")) {
						sState = oCriticalityConfigValues.Positive;
					}
				}
			}
			return sState;
		}

		function endsWith(sString, sSuffix) {
			return sString && sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
		}
		/**
		* This function calculates criticality state;
		* @param	{string} sImproveDirection ImprovementDirection value
		* @param	{number} toleranceLow toleranceLow value from annotations
		* @param	{number} toleranceHigh deviationLow value from annotations
		* @param  {number} deviationLow toleranceHigh value from annotations
		* @param  {number} deviationHigh toleranceHigh value from annotations
		* @param 	{number} value Value for comparison
		* @param	{object} oCriticalityConfigValues different criticality values;
		*/
		function calculateCriticalityState(value, sImproveDirection, deviationLow, deviationHigh, toleranceLow, toleranceHigh,
			oCriticalityConfigValues) {

			var oCriticality = {};
			oCriticality.EnumMember = "None";

			// number could be a zero number so check if it is not undefined
			if (value !== undefined) {
				value = Number(value);
				if (endsWith(sImproveDirection, "Minimize") || endsWith(sImproveDirection, "Minimizing")) {
					oCriticality.EnumMember = "None";
					if (toleranceHigh || deviationHigh) {
						if (value <= toleranceHigh) {
							oCriticality.EnumMember = "Positive";
						} else if (value > deviationHigh) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}
				} else if (endsWith(sImproveDirection, "Maximize") || endsWith(sImproveDirection, "Maximizing")) {
					oCriticality.EnumMember = "None";
					if (toleranceLow || deviationLow) {
						if (value >= toleranceLow) {
							oCriticality.EnumMember = "Positive";
						} else if (value < deviationLow) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}

				} else if (endsWith(sImproveDirection, "Target")) {
					oCriticality.EnumMember = "None";
					if (toleranceLow && toleranceHigh) {
						if (value >= toleranceLow && value <= toleranceHigh) {
							oCriticality.EnumMember = "Positive";
						} else if (value < deviationLow || value > deviationHigh) {
							oCriticality.EnumMember = "Negative";
						} else {
							oCriticality.EnumMember = "Critical";
						}
					}
				}
			}

			return criticality2state(oCriticality, oCriticalityConfigValues);
		}

		/* Trend Direction for Header */
		function calculateTrendDirection(aggregateValue, referenceValue, upDifference, downDifference) {
			if (!aggregateValue || !referenceValue) {
				return;
			}

			aggregateValue = Number(aggregateValue);

			if (!upDifference && (aggregateValue - referenceValue >= 0)) {
				return "Up";
			}
			if (!downDifference && (aggregateValue - referenceValue <= 0)) {
				return "Down";
			}

			if (referenceValue && upDifference && (aggregateValue - referenceValue >= upDifference)) {
				return "Up";
			}
			if (referenceValue && downDifference && (aggregateValue - referenceValue <= downDifference)) {
				return "Down";
			}
		}

		/**
		* @private
		* [calculateFieldContentWithScale  this function calculates  KPI value]
		* @param  {object} aggregateValue            [KPI vlaue]
		* @param  {number} nNumberOfFractionalDigits [NumberOfFractionalDigits from the Datapoint value format annotation]
		* @param  {decimal} fScaleFactor 			 [scale factor from the data point annotation]
		* @param {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		* @return {number}                           [returns the formatted KPI Value]
		*/
		function calculateFieldContentWithScale(value, nNumberOfFractionalDigits, fScaleFactor, sUnitOfMeasure) {
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			var sValue = KpiUtil.formatNumberForPresentation(value, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
			return sValue + " " + ( sUnitOfMeasure ? sUnitOfMeasure : "" );
		}

		/**
		* @private
		* [calculateDeviationValue  this function calculates deviation from KPI value and TargetValue ]
		* @param  {object} aggregateValue            [KPI vlaue]
		* @param  {number} nNumberOfFractionalDigits [NumberOfFractionalDigits from the Datapoint value format annotation]
		* @param  {number} targetValue               [TargetValue from datapoint annotation]
		* @param  {decimal} fScaleFactor 			 [scale factor from the data point annotation]
		* @param {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		* @return {number}                           [returns the deviationValue]
		*/
		function calculateDeviationValue(aggregateValue, nNumberOfFractionalDigits, targetValue, fScaleFactor, sUnitOfMeasure) {
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			if (!aggregateValue) {
				return ;
			}
			aggregateValue = Number(aggregateValue);
			var iDeviationValue = aggregateValue - targetValue;
			var iDeviationReturnValue = KpiUtil.formatNumberForPresentation(iDeviationValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
			return iDeviationReturnValue + " " +  ( sUnitOfMeasure ? sUnitOfMeasure : "" );
		}

		function calculateReference(value, referenceValue, relative) {
			if (!referenceValue) {
				return;
			}
			referenceValue = Number(referenceValue);
			if (relative) {
				return referenceValue + "%";
			}
			return referenceValue;
		}


		/**
		 * @private
		 * [calculateTarget formats the the targetValue]
		 * @param  {string} value 				[Value to be formatted]
		 * @param  {number} targetValue 			[TargetValue from datapoint annotation]
		 * @param  {number} nNumberOfFractionalDigits   [numberOfFractionalDigits number ]
		 * @param  {decimal} fScaleFactor 				[scale factor from the data point annotation]
		 * @param  {string} sUnitOfMeasure 			 [Unit of Measure defined for the value]
		 * @return {sap.ui.core.format.NumberFormat}	[returns the float instance of the NumberFormat]
		 */
		function calculateTarget(value, targetValue, nNumberOfFractionalDigits, fScaleFactor, sUnitOfMeasure) {
			//var bShowScale = !fScaleFactor;//If scalefactor is present in the annotation, don't display scale and vice versa
			var bShowScale = true;
			if (!targetValue) {
				return ;
			} else {
				targetValue = Number(targetValue);
				var targetReturnValue = KpiUtil.formatNumberForPresentation(targetValue, bShowScale, nNumberOfFractionalDigits, fScaleFactor);
				return targetReturnValue + " " + ( sUnitOfMeasure ? sUnitOfMeasure : "" );
			}
		}

		/**
		 * [resolvePathForKpiTargetValue Creates binding path for NumericContent target value]
		 * @param  {object} iContext   [current context]
		 * @param  {object} oDataPoint [datapoint object from the annotation]
		 * @return {*}            		[returns binding path for KPI target value ]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiTargetValue = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.TargetValue  ) {
				return "";
			}
			var oSettings = iContext.getSetting("settings").getData();
			var value =  KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var targetValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TargetValue);
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model, oEntityTypeProperty);
			var bIsTargetValBinding = KpiUtil.isBindingValue(targetValue);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor;
			if ( oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			var isUnitofMeasurei18n = sUnitOfMeasure.match(/{@i18n>.+}/gi);
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure) && !isUnitofMeasurei18n;

			var bIsPercent = false;
			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");  // parts has to constructed without the value
			sParts += bIsTargetValBinding ? "," + targetValue : "";
			sParts += bIsUoMValBinding && !isUnitofMeasurei18n ? "," + sUnitOfMeasure : "";
			sParts += "]";
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}

			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) {
				nNumberOfFractionalDigits = 0;
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1;
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;

			var formatFunc = function() {
				var index = 1;
				if (bIsPercent) {
					return calculateTarget( bIsKpiValBinding ? arguments[0] : value,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						nNumberOfFractionalDigits,
						fScaleFactor,
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateTarget( bIsKpiValBinding ? arguments[0] : value,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						nNumberOfFractionalDigits,
						fScaleFactor
					);
				}
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatReferenceValueCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";

		};


		/* Creates binding path for NumericContent referenceValue  */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiReferenceValue = function(iContext, oDataPoint) {
			//var oSettings = iContext.getSetting("settings").getData();
			var value =  KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var referenceValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
			var relative = KpiUtil.isRelative(oDataPoint);
			var bIsRefValBinding = KpiUtil.isBindingValue(referenceValue);
			var sParts = "parts: [" + value;
			sParts += bIsRefValBinding ? "," + referenceValue : "";
			sParts += "]";
			var formatFunc = function() {
				var index = 1;
				return calculateReference(
					arguments[0],
					bIsRefValBinding ? arguments[index++] : referenceValue,
					relative
					);
			};
			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatReferenceValueCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};


		/**
		* [resolvePathForKpiValue Creates binding path for NumericContent KPI value ]
		* @param  {object} iContext  current binding context
		* @param  {object} oDataPoint datapoint object from annotation
		* @return {sap.ui.core.format.NumberFormat} returns binding path to resolve KPI value in number format
		*/
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiValue = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value) {
				return "";
			}

			var oSettings = iContext.getSetting("settings").getData();
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model , oEntityTypeProperty);
			var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var isUnitofMeasurei18n = sUnitOfMeasure.match(/{@i18n>.+}/gi);
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure) && !isUnitofMeasurei18n;
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);

			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");
			sParts += bIsUoMValBinding && !isUnitofMeasurei18n ? "," + sUnitOfMeasure : "";
			sParts += "]";

			var bIsPercent = false;
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor;
			if ( oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) { //when numerofFractional Digits not specified in Annotations
				nNumberOfFractionalDigits = 0; // 0 for absolute value
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1; // 1 for percentage based value
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;
			var formatFunc = function() {
				var index = 1;
				if (bIsPercent) {
					return calculateFieldContentWithScale(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						fScaleFactor, 
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateFieldContentWithScale(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						fScaleFactor
					);
				}
			};
			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatFieldWithScaleCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolveKpiHeaderState = function(iContext, oDataPoint) {
			return formatDataPointToValue(iContext, oDataPoint, sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.criticalityConstants.ColorValues);
		};

		/**
		 * [resolvePathForDeviation resolves binding parth for deviation]
		 * @param  {object} iContext   [current binding context]
		 * @param  {object} oDataPoint [datapoint object from the annotaion]
		 * @return {*}            [returns binding path for deviation]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForDeviation = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.TargetValue ) { // removed this check as currently deviation is not from calculated from trend  "!oDataPoint.TrendCalculation"
				return "";
			}
			var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var targetValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TargetValue);
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sUnitOfMeasure = KpiUtil.getUnitofMeasure(oSettings.model, oEntityTypeProperty);
			var bIsTargetValBinding = KpiUtil.isBindingValue(targetValue);
			var isUnitofMeasurei18n = sUnitOfMeasure.match(/{@i18n>.+}/gi);
			var bIsUoMValBinding = KpiUtil.isBindingValue(sUnitOfMeasure) && !isUnitofMeasurei18n;
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var bIsPercent = false ;
			var nNumberOfFractionalDigits = 0 ;
			var fScaleFactor ;
			if (oDataPoint.ValueFormat) {
				nNumberOfFractionalDigits = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.NumberOfFractionalDigits);
				fScaleFactor = KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor);
			}
			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path: 'DUMMY'}");
			sParts += bIsTargetValBinding ? "," + targetValue : "";
			sParts += bIsUoMValBinding  && !isUnitofMeasurei18n ? "," + sUnitOfMeasure : "";
			sParts += "]";
			if (sUnitOfMeasure === "%") {
				bIsPercent = true;
			}
			if (nNumberOfFractionalDigits === "" || nNumberOfFractionalDigits === undefined) {
				nNumberOfFractionalDigits = 0;
				if (bIsPercent) {
					nNumberOfFractionalDigits = 1;
				}
			}
			fScaleFactor =  fScaleFactor == "" ?  undefined : fScaleFactor;
			var formatFunc = function() {
				var index = 1 ;
				if (bIsPercent) {
					return calculateDeviationValue(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						fScaleFactor,
						bIsUoMValBinding ? arguments[index++] : sUnitOfMeasure
					);
				} else {
					return calculateDeviationValue(
						bIsKpiValBinding ? arguments[0] : value,
						nNumberOfFractionalDigits,
						bIsTargetValBinding ? arguments[index++] : targetValue,
						fScaleFactor
					);
				}
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatDeviationCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForTrendIcon = function(iContext, oDataPoint) {
			if (!oDataPoint || !oDataPoint.Value || !oDataPoint.Value.Path || !oDataPoint.TrendCalculation) {
				return "";
			}

			//var oSettings = iContext.getSetting("settings").getData();

			if (oDataPoint.Trend) {
				var trend = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Trend);
				return trend;
			}

			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var referenceValue = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.ReferenceValue);
			var downDifference = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.DownDifference);
			var upDifference = KpiUtil.getPathOrPrimitiveValue(oDataPoint.TrendCalculation.UpDifference);

			var bIsRefValBinding = KpiUtil.isBindingValue(referenceValue);
			var bIsDownDiffBinding = KpiUtil.isBindingValue(downDifference);
			var bIsUpDiffBinding = KpiUtil.isBindingValue(upDifference);

			var sParts = "parts: [" + value;
			sParts += bIsRefValBinding ? "," + referenceValue : "";
			sParts += bIsDownDiffBinding ? "," + downDifference : "";
			sParts += bIsUpDiffBinding ? "," + upDifference : "";
			sParts += "]";

			var formatFunc = function() {
				var index = 1;
				return calculateTrendDirection(
					arguments[0],
					bIsRefValBinding ? arguments[index++] : referenceValue,
					bIsDownDiffBinding ? arguments[index++] : downDifference,
					bIsUpDiffBinding ? arguments[index++] : upDifference
					);
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTrendDirection");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		};

		/**
		 * [formatDPTitle formats the KPI Card Title]
		 * @param  {object} iContext   [current binding context]
		 * @param  {object} oDataPoint [datapoint object from the annotaion]
		 * @return {*}            [returns binding path for KPI Card Title]
		 */
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatDPTitle = function(iContext, oDataPoint) {

			var oSettings = iContext.getSetting("settings").getData();
			var oModel = iContext.getSetting("dataModel");
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

			var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
			var sTitle = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Title);
			var result = "", sUnit = "";

			//Add unit using path or string
			if (oEntityTypeProperty["Org.OData.Measures.V1.Unit"]) {
				var oUnit = oEntityTypeProperty["Org.OData.Measures.V1.Unit"];
				sUnit = KpiUtil.getPathOrPrimitiveValue(oUnit);
			} else if (oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"]) {
				var oCurrency = oEntityTypeProperty["Org.OData.Measures.V1.ISOCurrency"];
				sUnit = KpiUtil.getPathOrPrimitiveValue(oCurrency);
			}

			var bIsUnitBinding = KpiUtil.isBindingValue(sUnit) && !sUnit.match(/{@i18n>.+}/gi),
				bIsTitleBinding = KpiUtil.isBindingValue(sTitle);

			var formatFunc = function(unit, title) {
				title = title || sTitle;
				unit = unit || sUnit;

				var bIsPercent = (sUnit === "%");

				if (unit === undefined) {
					return title;
				} else {
					//i18nstring valu is only parsed if the value isn't "%"
					if (!bIsPercent) {
						//Unit is first checked if it's i18n & then it's corresponding value is retrieved
						if (unit.match(/{@i18n>.+}/gi)) {
							return this.getModel('i18n').getResourceBundle().getText("KPI_CARD_TITLE_UNIT", [title, this.getModel('i18n').getResourceBundle().getText(unit.substring(7, sUnit.length - 1))]);
						} else {
							//else only unit is passed as the value to the key
							return this.getModel('i18n').getResourceBundle().getText("KPI_CARD_TITLE_UNIT", [title, unit]);
						}
					} else {
						//if it's "%" only title is shown with it.
						return title;
					}
				}
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatTitleForDP");

			var sParts = "[" + (bIsUnitBinding ? sUnit : "{path:'DUMMY'}") + ", " +
				(bIsTitleBinding ? sTitle : "{path: 'DUMMY'}") + "]";

			result = "{parts: " + sParts + ", formatter: '" + sFormatFuncName + "'}";

			return result;
		};

		function formatDataPointToValue(iContext, oDataPoint, oCriticalityConfigValues) {
			var sState = oCriticalityConfigValues.None;
			if (oDataPoint.Criticality) {
				var criticality = oDataPoint.Criticality ? oDataPoint.Criticality.EnumMember.split("/")[1] : undefined;
				var bIsCriticalityBinding = KpiUtil.isBindingValue(criticality);
				if (bIsCriticalityBinding) {
					sState = criticality;
				} else {
					sState = criticality2state(oDataPoint.Criticality, oCriticalityConfigValues);
				}

			} else if (oDataPoint.CriticalityCalculation && oDataPoint.Value && oDataPoint.Value) {
				sState = formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues);
			}

			return sState;
		}


		function formThePathForCriticalityStateCalculation(iContext, oDataPoint, oCriticalityConfigValues) {
			//var oSettings = iContext.getSetting("settings").getData();
			var value = KpiUtil.getPathOrPrimitiveValue(oDataPoint.Value);
			var bIsKpiValBinding = KpiUtil.isBindingValue(value);
			var sImprovementDirection = oDataPoint.CriticalityCalculation.ImprovementDirection.EnumMember;

			var deviationLow = oDataPoint.CriticalityCalculation.DeviationRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeLowValue) : undefined;
			var deviationHigh = oDataPoint.CriticalityCalculation.DeviationRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.DeviationRangeHighValue) : undefined;
			var toleranceLow = oDataPoint.CriticalityCalculation.ToleranceRangeLowValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue) : undefined;
			var toleranceHigh = oDataPoint.CriticalityCalculation.ToleranceRangeHighValue ? KpiUtil.getPathOrPrimitiveValue(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue) : undefined;

			var bIsDeviationLowBinding = KpiUtil.isBindingValue(deviationLow);
			var bIsDeviationHighBinding = KpiUtil.isBindingValue(deviationHigh);
			var bIsToleranceLowBinding = KpiUtil.isBindingValue(toleranceLow);
			var bIsToleranceHighBinding = KpiUtil.isBindingValue(toleranceHigh);

			var sParts = "parts: [" + (bIsKpiValBinding ? value : "{path:'DUMMY'}");
			sParts += bIsDeviationLowBinding ? "," + deviationLow : "";
			sParts += bIsDeviationHighBinding ? "," + deviationHigh : "";
			sParts += bIsToleranceLowBinding ? "," + toleranceLow : "";
			sParts += bIsToleranceHighBinding ? "," + toleranceHigh : "";
			sParts += "]";

			var formatFunc = function() {
				var index = 1;
				return calculateCriticalityState(
					bIsKpiValBinding ? arguments[0] : value,
					sImprovementDirection,
					bIsDeviationLowBinding ? arguments[index++] : deviationLow,
					bIsDeviationHighBinding ? arguments[index++] : deviationHigh,
					bIsToleranceLowBinding ? arguments[index++] : toleranceLow,
					bIsToleranceHighBinding ? arguments[index++] : toleranceHigh,
					oCriticalityConfigValues
					);
			};

			var sFormatFuncName = setFormatFunctionAndGetFunctionName(formatFunc, "formatCriticalityCalculation");
			return "{" + sParts + ", formatter: '" + sFormatFuncName + "'}";
		}

		function setFormatFunctionAndGetFunctionName(func, sNamePrefix) {
			if (!sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix]) {
				sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix] = 0;
			}
			sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix]++;

			var sFuncName = sNamePrefix + sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sNamePrefix];
			sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions[sFuncName] = func;

			return "sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatFunctions." + sFuncName;
		}

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.getAggregateNumber = function(iContext, oEntitySet, oDataPoint, oSelectionVariant, oSettings) {
			var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
			//var oSelectOption, sPropertyPath, oRange;
			var sPropertyPath;

			var filtersString = ",filters:";

			var filtersArray = [];

			if (aSelectOptions) {
				aSelectOptions.forEach(function(oSelectOption) {
					sPropertyPath = oSelectOption.PropertyName.PropertyPath;
					oSelectOption[sPropertyPath].forEach(function(oRange) {
						if (oRange.Sign.EnumMember === V4Terms.SelectionRangeSignType + "/I") {
							var oFilter = {
								path: sPropertyPath,
								operator: oRange.Option.EnumMember.split("/")[1],
								value1: oRange.Low.String,
								value2: oRange.High ? oRange.High.String : ""
							};
							filtersArray.push(oFilter);
						}
					});
				});
			}
			var measure = oDataPoint && oDataPoint.Value && oDataPoint.Value.Path;
			var target = oDataPoint && oDataPoint.TargetValue && oDataPoint.TargetValue.Path;
			var ret = "";

			filtersString += JSON.stringify(filtersArray);

			var sPath = KpiAnnotationHelper.resolveParameterizedEntitySet(iContext.getSetting("dataModel"), oEntitySet, oSelectionVariant);
			ret += "{path: '" + sPath + "',length:1";

			var oEntityType = oSettings.metaModel.getODataEntityType(oEntitySet.entityType, false);
			var oEntityTypeProperty = oSettings.metaModel.getODataProperty(oEntityType, measure);
			var unitColumn = oEntityTypeProperty && oEntityTypeProperty[V4Terms.Unit] && oEntityTypeProperty[V4Terms.Unit].Path;
			var currency = oEntityTypeProperty && oEntityTypeProperty[V4Terms.ISOCurrency] && oEntityTypeProperty[V4Terms.ISOCurrency].Path;

			var selectArr = [];
			selectArr.push(measure);
			if (unitColumn) {
				selectArr.push(unitColumn);
			}
			if (target) {
				selectArr.push(target);
			}
			if (currency) {
				selectArr.push(currency);
			}
			if (oDataPoint.TrendCalculation && oDataPoint.TrendCalculation.ReferenceValue && oDataPoint.TrendCalculation.ReferenceValue.Path) {
				selectArr.push(oDataPoint.TrendCalculation.ReferenceValue.Path);
			}

			return ret + ", parameters:{select:'" + selectArr.join(",") + "'}" + filtersString + "}";
		};

		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.getAggregateNumber.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolveKpiHeaderState.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForTrendIcon.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiValue.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForDeviation.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.resolvePathForKpiTargetValue.requiresIContext = true;
		sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter.formatDPTitle.requiresIContext = true;

		/*function getUnitColumn(measure, oEntityType) {
			var properties = oEntityType.property;
			for (var i = 0, len = properties.length; i < len; i++) {
				if (properties[i].name == measure) {
					if (properties[i].hasOwnProperty("sap:unit")) {
						return properties[i]["sap:unit"];
					}
					break;
				}
			}
			return null;
		}*/
		return sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationFormatter;
	}, true);
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationFormatter.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/KpiVizAnnotationHelper",["sap/ui/base/Object", "sap/ui/model/Context", "sap/ui/model/odata/AnnotationHelper", "sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"],
    function(BaseObject, Context, ODataAnnoHelper, V4Terms) {
        "use strict";

        var AnnotationHelper = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper");

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.constants = {
            LABEL_KEY: "sap:label",
            TEXT_KEY: "sap:text",
            TYPE_KEY: "type"
        };

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.config = {
            "Line": {
                "type": "line",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension",
                    "role": "Category"
                }, {
                    "uid": "color",
                    "type": "dimension",
                    "role": "Series"
                }]
            },
            "Column": {
                "type": "column",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1,
                    "defaultRole": "Axis1"
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "min": 1,
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension"
                }]
            },
            "Donut": {
                "type": "donut",
                "dimensions": {
                    "min": 1
                },
                "measures": {
                    "min": 1,
                    "max": 1
                },
                "feeds": [{
                    "uid": "size",
                    "min": 1,
                    "max": 1,
                    "type": "measure"
                }, {
                    "uid": "color",
                    "min": 1,
                    "type": "dimension"
                }]
            },
            "Bar": {
                "type": "bar",
                "dimensions": {
                    "min": 1,
                    "defaultRole": "Category"
                },
                "measures": {
                    "min": 1,
                    "defaultRole": "Axis1"
                },
                "feeds": [{
                    "uid": "valueAxis",
                    "min": 1,
                    "type": "measure"
                }, {
                    "uid": "categoryAxis",
                    "min": 1,
                    "type": "dimension"
                }]
            }
        };

        AnnotationHelper._createSortObject = function(oDimensions, oMeasures, oChartType) {
            var sSortBy = "";
            if (oChartType.EnumMember == "com.sap.vocabularies.UI.v1.ChartType/Line") {
                sSortBy = oDimensions[0].Dimension.PropertyPath;
            } else {
                sSortBy = oMeasures[0].Measure.PropertyPath;
            }
            return sSortBy;
        };

        AnnotationHelper.formatItems = function(iContext, oEntitySet, oSelectionVariant, oPresentationVariant, oDimensions, oMeasures, oChartType, oSettings) {
            var oModel = iContext.getSetting("dataModel");
            var resultString = "{";
            var dimensionsList = [];
            var measuresList = [];
            var sorterList = [];
            var bFilter = oSelectionVariant && oSelectionVariant.SelectOptions;
            var bParams = oSelectionVariant && oSelectionVariant.Parameters;
            var bSorter = oPresentationVariant && oPresentationVariant.SortOrder;
            var maxItemTerm = oPresentationVariant && oPresentationVariant.MaxItems,
                maxItems = null;
            var tmp;
            var entitySet = null;
            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;
            var textKey = "sap:text";

            if (maxItemTerm) {
                maxItems = maxItemTerm.Int32 ? maxItemTerm.Int32 : maxItemTerm.Int;
            }

            if (maxItems) {
                if (maxItems == "0") {
                    jQuery.sap.log.error("maxItems is configured as " +
                        maxItems);
                    resultString += "}";
                    return resultString;
                }
                if (!/^\d+$/.test(maxItems)) {
                    jQuery.sap.log.error("maxItems is Invalid. " +
                        "Please enter an Integer.");
                    resultString += "}";
                    return resultString;
                }
            }

            if (bParams) {
                var path = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiAnnotationHelper.resolveParameterizedEntitySet(oModel, oEntitySet, oSelectionVariant);
                resultString += "path: '" + path + "'";
            } else {
                resultString += "path: '" + oSettings.model + ">/" + oEntitySet.name + "'";
            }

            var filters = [];
            if (!oSettings) {
                jQuery.sap.log.error("NO KPI card settings in card formmater");
                resultString += "}";
                return resultString;
            }
            entitySet = oSettings.entitySet;
            if (!oModel || !entitySet) {
                return resultString;
            }
            var oMetadata = self.getMetadata(oModel, entitySet);

            if (bFilter) {
                bFilter.forEach(function(oSelectOption) {
                    var sPropertyPath = oSelectOption.PropertyName.PropertyPath;
                    oSelectOption[sPropertyPath].forEach(function(oRange) {
                        if (oRange.Sign.EnumMember === V4Terms.SelectionRangeSignType + "/I") {
                            var oFilter = {
                                path: sPropertyPath,
                                operator: oRange.Option.EnumMember.split("/")[1],
                                value1: oRange.Low.String,
                                value2: oRange.High ? oRange.High.String : ""
                            };
                            filters.push(oFilter);
                        }
                    });
                });
            }

            if (filters.length > 0) {
                resultString += ", filters: " + JSON.stringify(filters);
            }

            if (bSorter) {
                var oSortAnnotationCollection = oPresentationVariant.SortOrder;
                if (oSortAnnotationCollection.length < 1) {
                    jQuery.sap.log.warning("Kpi Card no Sort annotaion defined");
                } else {
                    var sSorterValue = "";
                    var oSortOrder;
                    var sSortOrder;
                    var sSortBy;
                    for (var i = 0; i < oSortAnnotationCollection.length; i++) {
                        oSortOrder = oSortAnnotationCollection[i];
                        sSortBy = oSortOrder.Property.PropertyPath;
                        if (!sSortBy || !oMetadata[sSortBy]) {
                            sSortBy = self._createSortObject(oDimensions, oMeasures, oChartType);
                        }
                        sorterList.push(sSortBy);
                        if (typeof oSortOrder.Descending == "undefined") {
                            sSortOrder = "true";
                        } else {
                            var sCheckFlag = oSortOrder.Descending.Bool;
                            if (!sCheckFlag) {
                                jQuery.sap.log.warning(self.errorMessages.CARD_WARNING + self.errorMessages.BOOLEAN_ERROR);
                                sSortOrder = "true";
                            } else {
                                sSortOrder = sCheckFlag.toLowerCase() === "true";
                            }
                        }
                        sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
                    }
                    /* trim the last ',' */
                    resultString += ", sorter: [" + sSorterValue.substring(0, sSorterValue.length - 1) + "]";
                }
            }

            jQuery.each(oMeasures, function(i, m) {
                tmp = m.Measure.PropertyPath;
                measuresList.push(tmp);
                if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    measuresList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            });
            jQuery.each(oDimensions, function(i, d) {
                tmp = d.Dimension.PropertyPath;
                dimensionsList.push(tmp);
                if (oMetadata && oMetadata[tmp] && oMetadata[tmp][textKey] && tmp != oMetadata[tmp][textKey]) {
                    dimensionsList.push(oMetadata[tmp][textKey] ? oMetadata[tmp][textKey] : tmp);
                }
            });
            resultString += ", parameters: {select:'" + [].concat(dimensionsList, measuresList).join(",");
            if (sorterList.length > 0) {
                resultString += "," + sorterList.join(",");
            }
            /* close `parameters` */
            resultString += "'}";

            if (maxItems) {
                resultString += ", length: " + maxItems;
            }
            resultString += "}";
            return resultString;
        };

        /*
         * Formatter for VizFrame type.
         * @param {Object} oChartType - Chart Annotation Object
         * @returns {String} Valid Enum for Vizframe type
         */
        AnnotationHelper.getChartType = function(oChartType) {

            var aChartAnno = [];
            if (!oChartType.EnumMember ||
                !(aChartAnno = oChartType.EnumMember.split("/")) ||
                aChartAnno.length < 2) {
                jQuery.sap.log.error("KPI Card M - wrong or missing chart type");
                return "";
            } else {
                return AnnotationHelper.config[aChartAnno[1]].type;
            }
        };

        /*
         * Construct VizProperties and Feeds for VizFrame
         * @param {Object} VizFrame
         */
        AnnotationHelper.setupChartAttributes = function(vizFrame, oSettings) {
            var oCardsModel, /* oEntityTypeModel, */ entityTypeObject, chartContext;
            var oChartType, chartType, config, aDimensions, aMeasures;
            var oVizProperties;
            var aQueuedProperties, aQueuedDimensions, aQueuedMeasures;
            var aPropertyWithoutRoles, aDimensionWithoutRoles = [],
                aMeasureWithoutRoles = [];

            config = AnnotationHelper.config;

            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;

            if (!(oCardsModel = oSettings)) {
                jQuery.sap.log.error("KPI Card no card settings");
                return;
            }

            var oModel = vizFrame.getModel();
            var oMetaModel = oModel.getMetaModel();
            var entitySet = oCardsModel.entitySet;
            var oEntitySet = oMetaModel.getODataEntitySet(entitySet);

            if (!oModel || !entitySet) {
                return;
            }

            entityTypeObject = oMetaModel.getODataEntityType(oEntitySet.entityType, false);

            if (!entityTypeObject) {
                jQuery.sap.log.error("KPI Card no entityType");
                return;
            }
            var oMetadata = self.getMetadata(oModel, entitySet);
            var chartAnno = "com.sap.vocabularies.UI.v1.Chart#" + oCardsModel.qualifier;
            if (!chartAnno || !(chartContext = entityTypeObject[chartAnno])) {
                jQuery.sap.log.error("KPI Card no chart annotations");
                return;
            }

            if (!(aDimensions = chartContext.DimensionAttributes) ||
                !aDimensions.length) {
                jQuery.sap.log.error("KPI Card no dimension annotations defined");
                return;
            }
            if (!(aMeasures = chartContext.MeasureAttributes) ||
                !aMeasures.length) {
                jQuery.sap.log.error("KPI Card no measure annotations defined");
                return;
            }

            var aChartAnno = [];
            oChartType = chartContext.ChartType;
            if (!oChartType.EnumMember ||
                !(aChartAnno = oChartType.EnumMember.split("/")) ||
                aChartAnno.length < 2) {
                jQuery.sap.log.error("KPI Card M - wrong or missing chart type");
            } else {
                chartType = aChartAnno[1];
            }

            var bHideAxisTitle = true;

            vizFrame.removeAllAggregation();
            /*
             * Default viz properties template
             */
            oVizProperties = {
                legend: {
                    isScrollable: false
                },
                general: {
                    background: {
                        color: "transparent"
                    },
                    layout: {
                        padding: 15
                    },
                    groupData: false
                },
                title: {
                    visible: false
                },
                interaction: {
                    noninteractiveMode: false,
                    selectability: {
                        legendSelection: false,
                        axisLabelSelection: false,
                        mode: "NONE",
                        plotLassoSelection: false,
                        plotStdSelection: true
                    }
                },
                plotArea: {
                    window: {
                        start: "firstDataPoint",
                        end: "lastDataPoint"
                    },
                    background: {
                        color: "transparent"
                    }
                }
            };

            aQueuedDimensions = aDimensions.slice();
            aQueuedMeasures = aMeasures.slice();
            jQuery.each(config[chartType].feeds, function(i, feed) {
                var uid = feed.uid;
                var aFeedProperties = [];
                if (feed.type) {
                    var iPropertiesLength, feedtype, propertyName;
                    if (feed.type === "dimension") {
                        iPropertiesLength = aDimensions.length;
                        feedtype = "Dimension";
                        propertyName = "dimensions";
                        aQueuedProperties = aQueuedDimensions;
                        aPropertyWithoutRoles = aDimensionWithoutRoles;
                    } else {
                        iPropertiesLength = aMeasures.length;
                        feedtype = "Measure";
                        propertyName = "measures";
                        aQueuedProperties = aQueuedMeasures;
                        aPropertyWithoutRoles = aMeasureWithoutRoles;
                    }
                    var min = 0,
                        max = iPropertiesLength;
                    if (feed.min) {
                        min = min > feed.min ? min : feed.min;
                    }
                    if (feed.max) {
                        max = max < feed.max ? max : feed.max;
                    }
                    /* If no roles configured - add the property to feed */
                    if (!feed.role) {
                        var len = aQueuedProperties.length;
                        for (var j = 0; j < len && aFeedProperties.length < max; ++j) {
                            var val = aQueuedProperties[j];
                            aQueuedProperties.splice(j, 1);
                            --len;
                            --j;
                            aFeedProperties.push(val);
                        }
                    } else {
                        var rolesByPrio = feed.role.split("|");
                        jQuery.each(rolesByPrio, function(j, role) {
                            if (aFeedProperties.length == max) {
                                return false;
                            }
                            var len = aQueuedProperties.length;
                            for (var k = 0; k < len && aFeedProperties.length < max; ++k) {
                                var val = aQueuedProperties[k];
                                if (val && val.Role && val.Role.EnumMember &&
                                    val.Role.EnumMember.split("/") && val.Role.EnumMember.split("/")[1]) {
                                    var annotationRole = val.Role.EnumMember.split("/")[1];
                                    if (annotationRole == role) {
                                        aQueuedProperties.splice(k, 1);
                                        --len;
                                        --k;
                                        aFeedProperties.push(val);
                                    }
                                } else if (jQuery.inArray(val, aPropertyWithoutRoles) == -1) {
                                    aPropertyWithoutRoles.push(val);
                                }
                            }
                        });
                        if (aFeedProperties.length < max) {
                            jQuery.each(aPropertyWithoutRoles, function(k, val) {
                                /* defaultRole is the fallback role */
                                var defaultRole;
                                var index;
                                if ((defaultRole = config[propertyName].defaultRole) &&
                                    (jQuery.inArray(defaultRole, rolesByPrio) !== -1) &&
                                    (index = jQuery.inArray(val, aQueuedProperties)) !== -1) {
                                    aQueuedProperties.splice(index, 1);
                                    aFeedProperties.push(val);
                                    if (aFeedProperties.length == max) {
                                        return false;
                                    }
                                }
                            });
                        }
                        if (aFeedProperties.length < min) {
                            jQuery.sap.log.error("KPI card feed propperties < min");
                            return false;
                        }
                    }
                    if (aFeedProperties.length) {
                        var aFeeds = [];
                        var dataset;
                        if (!(dataset = vizFrame.getDataset())) {
                            jQuery.sap.log.error("KPI Card Viz framework no Dataset");
                            return false;
                        }
                        jQuery.each(aFeedProperties, function(i, val) {
                            if (!val || !val[feedtype] || !val[feedtype].PropertyPath) {
                                jQuery.sap.log.error("KPI Card invalid chart annotations - propertypath");
                                return false;
                            }
                            var property = val[feedtype].PropertyPath;
                            var feedName = property;
                            var textColumn = property;

                            if (oMetadata && oMetadata[property]) {
                                feedName = oMetadata[property][self.constants.LABEL_KEY] || property;
                                textColumn = oMetadata[property][self.constants.TEXT_KEY] || property;
                            }

                            var displayBindingPath = "{" + textColumn + "}";
                            aFeeds.push(feedName);
                            if (feedtype == "Dimension") {
                                dataset.addDimension(new sap.viz.ui5.data.DimensionDefinition({
                                    name: feedName,
                                    value: "{" + property + "}",
                                    displayValue: displayBindingPath
                                }));
                            } else {
                                dataset.addMeasure(new sap.viz.ui5.data.MeasureDefinition({
                                    name: feedName,
                                    value: "{" + property + "}"
                                }));
                            }

                        });
                        var newFeed = new sap.viz.ui5.controls.common.feeds.FeedItem({
                            "uid": uid,
                            "type": feedtype,
                            "values": aFeeds
                        });
                        vizFrame.addFeed(newFeed);
                        oVizProperties[uid] = {
                            title: {
                                visible: bHideAxisTitle ? false : true,
                                text: aFeeds.join(", ")
                            },
                            label: {
                                formatString: "axisFormatter"
                            }
                        };
                        if (uid == "valueAxis") {
                            oVizProperties[uid].layout = {
                                maxWidth: 0.4
                            };
                        }
                    }
                }
            });


            vizFrame.setVizProperties(oVizProperties);
        };

        AnnotationHelper.formatByType = function(oMetadata, sProp, sVal) {
            var self = sap.ovp.cards.charts.VizAnnotationManager;
            var typeKey = self.constants.TYPE_KEY;
            if (!oMetadata || !oMetadata[sProp] || !oMetadata[sProp][typeKey]) {
                return sVal;
            }
            var aNumberTypes = [
                "Edm.Int",
                "Edmt.Int16",
                "Edm.Int32",
                "Edm.Int64",
                "Edm.Decimal"
            ];
            var currentType = oMetadata[sProp][typeKey];
            if (jQuery.inArray(currentType, aNumberTypes) !== -1) {
                return Number(sVal);
            }
            return sVal;
        };

        /*
         * Get the (cached) OData metadata information.
         */
        AnnotationHelper.getMetadata = function(model, entitySet) {
            var map = this.cacheODataMetadata(model);
            if (!map) {
                return undefined;
            }
            return map[entitySet];
        };


        /*
         * Cache OData metadata information with key as UI5 ODataModel id.
         */
        AnnotationHelper.cacheODataMetadata = function(model) {
            var self = sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper;
            if (model) {
                if (!jQuery.sap.getObject("sap.suite.ui.generic.template.AnalyticalListPage.kpi.cachedMetaModel")) {
                    self.cachedMetaModel = {};
                }
                var map = self.cachedMetaModel[model.getId()];
                if (!map) {
                    var metaModel = model.getMetaModel();
                    map = {};
                    var container = metaModel.getODataEntityContainer();
                    jQuery.each(container.entitySet, function(anIndex, entitySet) {
                        var entityType = metaModel.getODataEntityType(entitySet.entityType);
                        var entitysetMap = {};
                        jQuery.each(entityType.property, function(propertyIndex, property) {
                            entitysetMap[property.name] = property;
                        });
                        map[entitySet.name] = entitysetMap;
                    });
                    self.cachedMetaModel[model.getId()] = map;
                }
                return map;
            } else {
                jQuery.sap.log.error(self.errorMessages.CARD_ERROR + self.errorMessages.CACHING_ERROR);
            }
        };


        /*
         * formatChartAxes for setting the numericFormatter in charts of KPI card.
         */
        AnnotationHelper.formatChartAxes = function(iScaleFactorMeasure) {

            jQuery.sap.require("sap.viz.ui5.format.ChartFormatter");
            jQuery.sap.require("sap.ui.core.format.NumberFormat");
            jQuery.sap.require("sap.viz.ui5.api.env.Format");

            var chartFormatter = sap.viz.ui5.format.ChartFormatter.getInstance();
            var bShowScale = true;
            if (!iScaleFactorMeasure) {
                iScaleFactorMeasure = undefined;
            } else {
                bShowScale = false;
            }
            if (chartFormatter != null) {
                chartFormatter.registerCustomFormatter("axisFormatter", function(value) {
                    var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
                        style: "short",
                        minFractionDigits: 0,
                        maxFractionDigits: 1,
                        decimals: 2,
                        showScale: bShowScale,
                        shortRefNumber: iScaleFactorMeasure
                    });
                    return numberFormat.format(Number(value));
                });
                sap.viz.ui5.api.env.Format.numericFormatter(chartFormatter);
            }
        };

        sap.suite.ui.generic.template.AnalyticalListPage.util.KpiVizAnnotationHelper.formatItems.requiresIContext = true;

        return AnnotationHelper;

    }, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/KpiVizAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/Canvas/extensionAPI/ExtensionAPI",
	["jquery.sap.global", "sap/ui/base/Object", "sap/suite/ui/generic/template/extensionAPI/NavigationController"],
	function(jQuery, BaseObject, NavigationController) {
		"use strict";
		/**
		 * API to be used in extensions of Canvas. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oBase) {
			return /** @lends sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the transaction controller for editing actions on the page.
				 * Note that the methods provided by this transaction controller depend on whether the object supports drafts or not.
				 * @return {sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController|sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController} 
				 * the transaction controller
				 * @public
				 * @function
				 */
				getTransactionController: oBase.extensionAPI.getTransactionControllerFunction(),
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares
				 * for defining dependency and handling device specific style classes
				 *
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array|sap.ui.model.Context} vContext The given binding contexts
				 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, vContext, mUrlParameters) {
					var aContext, mParameters;
					if (!vContext) {
						aContext = [];
					} else if (vContext instanceof sap.ui.model.Context) {
						aContext = [ vContext ];
					} else {
						aContext = vContext;
					}
					if (mUrlParameters) {
						mParameters = {
							urlParameters: mUrlParameters
						};
					}
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
				},
				/**
				 * Attach a handler to the PageDataLoaded event.
				 * This event is fired each time the object page is navigated to or the object to be displayed is changed
				 * Note, that the event will not be fired before:
				 * <ul compact>
				 * <li>the navigation to the page has been completed
				 * <li>the header data of the object are available
				 * </ul>
				 * @param {function} fnFunction the handler function. Note that the event passed to this function possesses an attribute <code>context</code>
				 * which contains the current header context
				 * @public
				 */
				attachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.attach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Detach a handler from the PageDataLoaded event
				 * 
				 * @param {function} fnFunction the handler function
				 * @public
				 */
				detachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.detach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Registers a filter provider for the the message popover
				 * 
				 * @param {function} fnProviderCallback function which will be called each time a new context
				 * is set for the object page. The function should return an instance of sap.ui.model.Filter,
				 * an array of sap.ui.model.Filter or a Promise which resolves to one of these.
				 * @public
				 */
				registerMessageFilterProvider: function(fnProvider) {
					oBase.state.messageButtonHelper.registerMessageFilterProvider(fnProvider);
				},
				/**
				 * Get the navigation controller for navigation actions
				 *
				 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
				 * @public
				 * @function
				 */
				getNavigationController: oBase.extensionAPI.getNavigationControllerFunction(),
				/**
				 * @experimental
				 */
				getCommunicationObject: function(iLevel){
					return oTemplateUtils.oComponentUtils.getCommunicationObject(iLevel);	
				},
				/**
				 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
				 * are fulfilled
				 *
				 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion 
				 * of the execution. If nothing is returned, immediate completion is assumed.
				 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
				 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to 
				 * false in case of immediate completion
				 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only 
				 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of 
				 * another function, that set the application busy 
				 * @param {boolean} [mParameters.dataloss.popup=true] Provides a dataloss popup before execution of the function if 
				 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
				 * @param {boolean} [mParameters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation, 
				 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup 
				 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
				 * @public
				 * @experimental 
				 */
				securedExecution: function(fnFunction, mParameters) {
					return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oBase.state);
				},

				/**
				 * Can be used to add the standard footer bar for detail pages to this canvas page
				 * Note that the usage of the standard footer bar must have been switched on in the settings of the page
				 * @param oPage {sap.m.Page | sap.uxap.ObjectPageLayout} the page the standard footer bar should be set for
				 * @public
				 */				
				addFooterBarToPage: function(oPage){
					var oFooterBar = oController.byId("template::ObjectPage::FooterToolbar");
					if (oFooterBar){
						var oI18NModel = oController.getView().getModel("i18n");
						oFooterBar.setModel(oI18NModel, "i18n");
						oPage.setFooter(oFooterBar);
					}
				},
				
				/**
				 * @experimental
				 */
				getPaginatorButtons: function(){
					var oPaginatorButtons = oController.byId("template::UpAndDownNavigation");
					if (oPaginatorButtons){
						var oI18NModel = oController.getView().getModel("i18n");
						oPaginatorButtons.setModel(oI18NModel, "i18n");
						return oPaginatorButtons;
					}					
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.Canvas.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oBase) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oBase));

			}
		});
	});
}; // end of sap/suite/ui/generic/template/Canvas/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI",["jquery.sap.global", "sap/ui/base/Object",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/NonDraftTransactionController",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"	],
	function(jQuery, BaseObject, NonDraftTransactionController, NavigationController) {
		"use strict";
		/**
		 * API to be used in extensions of ListReport. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oState) {
			var oTransactionController;
			var oNavigationController;
			return /** @lends sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the list entries currently selected
				 * 
				 * @return {sap.ui.model.Context[]} contains one entry per line selected
				 * @public
				 */
				getSelectedContexts: function() {
					return oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartTable);
				},
				/**
				 * Get the transaction controller for editing actions on the list. Note: Currently implemented for non draft case
				 * 
				 * @return {sap.suite.ui.generic.template.ListReport.extensionAPI.NonDraftTransactionController} the transaction controller
				 * @public
				 */
				getTransactionController: function() {
					if (oTemplateUtils.oComponentUtils.isDraftEnabled()) {
						throw new Error("Transaction support on ListReport for draft case not implemented yet");
					}
					oTransactionController = oTransactionController ||
						new NonDraftTransactionController(oTemplateUtils, oController, oState);
					return oTransactionController;
				},
				/**
				 * Triggers rebinding on the list
				 * 
				 * @public
				 */
				rebindTable: function(){
					oState.oSmartTable.rebindTable();
				},
				/**
				 * Refreshes the List from the backend
				 * 
				 * @public
				 */
				refreshTable: function() {
					oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
					var oConfig = oController.getOwnerComponent().getAppComponent().getConfig();
					var oSettings = oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings;
					if (oSettings && oSettings.quickVariantSelectionX && oSettings.quickVariantSelectionX.variants) {
						// for table tabs, also trigger count request
						// NOTE: for segmented buttons, this will happen automatically
						oController._templateEventHandlers.updateTableTabCounts();
					}
				},
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares for
				 * defining dependency and handling device specific style classes
				 * 
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array|sap.ui.model.Context} vContext The given binding contexts
				 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, vContext, mUrlParameters) {
					var aContext, mParameters;
					if (!vContext) {
						aContext = [];
					} else if (vContext instanceof sap.ui.model.Context) {
						aContext = [ vContext ];
					} else {
						aContext = vContext;
					}
					if (mUrlParameters) {
						mParameters = {
							urlParameters: mUrlParameters
						};
					}
					if (oState.oSmartTable) {
						oState.oSmartTable.getTable().attachEventOnce("updateFinished", function () {
							oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oState.oSmartTable);
							oTemplateUtils.oCommonUtils.setEnabledFooterButtons(oState.oSmartTable);
						});
					}
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
				},
				/**
				 * Get the navigation controller for navigation actions
				 *
				 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
				 * @public
				 */
				getNavigationController: function() {
					if (!oNavigationController) {
						oNavigationController = new NavigationController(oTemplateUtils, oController, oState);
					}
					return oNavigationController;
				},
				/**
				 * @experimental
				 */
				getCommunicationObject: function(iLevel){
					return oTemplateUtils.oComponentUtils.getCommunicationObject(iLevel);	
				},
				/**
				 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
				 * are fulfilled.
				 *
				 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion 
				 * of the execution. If nothing is returned, immediate completion is assumed.
				 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
				 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to 
				 * false in case of immediate completion
				 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only 
				 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of 
				 * another function, that set the application busy 
				 * @param {boolean} [mParameters.dataloss.popup=true] Provides a dataloss popup before execution of the function if 
				 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
				 * @param {boolean} [mParameters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation, 
				 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup 
				 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
				 * @public
				 * @experimental 
				 */
				securedExecution: function(fnFunction, mParameters) {
					return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oState);
				},
				/**
				 * If switching between different table views is enabled, this function returns the selected key.
				 *
				 * @returns {string} The key of the variant item that is currently selected. 
				 * @public
				 * @experimental
				 */
				getQuickVariantSelectionKey: function() {
					if (oState.oIconTabBar){
						return oState.oIconTabBar.getSelectedKey();
					}
					return oState.oMultipleViewsSingleTableModeHelper.getVariantSelectionKey();                                        
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ListReport.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oState) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oState));

			}
		});
	});
}; // end of sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI",
	["jquery.sap.global", "sap/ui/base/Object", "sap/ui/table/Table", "sap/m/ListBase", "sap/ui/comp/smarttable/SmartTable",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",
		"sap/suite/ui/generic/template/extensionAPI/NavigationController"	],
	function(jQuery, BaseObject, UiTable, ListBase, SmartTable, DraftTransactionController, NonDraftTransactionController, NavigationController) {
		"use strict";
		/**
		 * API to be used in extensions of ObjectPage. Breakout coding can access an instance of this class via
		 * <code>this.extensionAPI</code>. Do not instantiate yourself.
		 * @class
		 * @name sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI
		 * @public
		 */

		function getMethods(oTemplateUtils, oController, oBase) {
			return /** @lends sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI.prototype */ {
				/**
				 * Get the entries currently selected in one ui element
				 *
				 * @param {string} sUiElementId the id identifying the ui element the selected context is requested for
				 * @return {sap.ui.model.Context[]} contains one entry per entry selected
				 * @public
				 */
				getSelectedContexts: function(sUiElementId) {
					var oControl = oController.byId(sUiElementId);
					return oTemplateUtils.oCommonUtils.getSelectedContexts(oControl);
				},

				/**
				 * Rebinds the given SmartTable
				 * 
				 * @param {string} sUiElementId the id identifying the control to refresh the binding
				 * @public
				 */
				rebind: function(sUiElementId){
					var oControl = oController.byId(sUiElementId);
					if (oControl instanceof SmartTable) {
						oControl.rebindTable();
					}
				},
				/**
				 * Refreshes the specified control from the backend. Currently only supported for tables.
				 * 
				 * @param {string} sUiElementId the id identifying the control that should be refeshed
				 * @public
				 */
				refresh: function(sUiElementId) {
					var oControl = oController.byId(sUiElementId);
					if (oControl instanceof SmartTable) {
						oTemplateUtils.oCommonUtils.refreshSmartTable(oControl);
						return;
					}
					var sAggregation;
					if (oControl instanceof ListBase) {
                        sAggregation = "items";
					} else if (oControl instanceof UiTable) {
                        sAggregation = "rows";
					}
					var oBinding = sAggregation && oControl.getBinding(sAggregation);
					if (oBinding){
					    oBinding.refresh();
					}
				},

				/**
				 * Get the transaction controller for editing actions on the page.
				 * Note that the methods provided by this transaction controller depend on whether the object supports drafts or not.
				 * @return {sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController|sap.suite.ui.generic.template.ObjectPage.extensionAPI.NonDraftTransactionController} 
				 * the transaction controller
				 * @function
				 * @public
				 */
				getTransactionController: oBase.extensionAPI.getTransactionControllerFunction(),
				/**
				 * Attaches a control to the current View. Should be called whenever a new control is created and used in the
				 * context of this view. This applies especially for dialogs, action sheets, popovers, ... This method cares
				 * for defining dependency and handling device specific style classes
				 *
				 * @param {sap.ui.core.Control} oControl the control to be attached to the view
				 * @public
				 */
				attachToView: function(oControl) {
					oTemplateUtils.oCommonUtils.attachControlToView(oControl);
				},
				/**
				 * Invokes multiple time the action with the given name and submits changes to the back-end.
				 *
				 * @param {string} sFunctionName The name of the function or action
				 * @param {array|sap.ui.model.Context} vContext The given binding contexts
				 * @param {map} [mUrlParameters] The URL parameters (name-value pairs) for the function or action
				 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
				 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
				 * @public
				 */
				invokeActions: function(sFunctionName, vContext, mUrlParameters) {
					var aContext, mParameters;
					if (!vContext) {
						aContext = [];
					} else if (vContext instanceof sap.ui.model.Context) {
						aContext = [ vContext ];
					} else {
						aContext = vContext;
					}
					if (mUrlParameters) {
						mParameters = {
							urlParameters: mUrlParameters
						};
					}
					return oTemplateUtils.oServices.oApplicationController.invokeActions(sFunctionName, aContext, mParameters);
				},
				/**
				 * Attach a handler to the PageDataLoaded event.
				 * This event is fired each time the object page is navigated to or the object to be displayed is changed
				 * Note, that the event will not be fired before:
				 * <ul compact>
				 * <li>the navigation to the page has been completed
				 * <li>the header data of the object are available
				 * </ul>
				 * @param {function} fnFunction the handler function. Note that the event passed to this function possesses an attribute <code>context</code>
				 * which contains the current header context
				 * @public
				 */
				attachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.attach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Detach a handler from the PageDataLoaded event
				 * 
				 * @param {function} fnFunction the handler function
				 * @public
				 */
				detachPageDataLoaded: function(fnFunction) {
					oTemplateUtils.oComponentUtils.detach(oController, "PageDataLoaded", fnFunction);
				},
				/**
				 * Registers a filter provider for the the message popover
				 * 
				 * @param {function} fnProviderCallback function which will be called each time a new context
				 * is set for the object page. The function should return an instance of sap.ui.model.Filter,
				 * an array of sap.ui.model.Filter or a Promise which resolves to one of these.
				 * @public
				 */
				registerMessageFilterProvider: function(fnProvider) {
					oBase.state.messageButtonHelper.registerMessageFilterProvider(fnProvider);
				},
				/**
				 * Get the navigation controller for navigation actions
				 *
				 * @return {sap.suite.ui.generic.template.extensionAPI.NavigationController} the navigation controller
				 * @public
				 * @function
				 */
				getNavigationController: oBase.extensionAPI.getNavigationControllerFunction(),
				/**
				 * @experimental
				 */
				getCommunicationObject: function(iLevel){
					return oTemplateUtils.oComponentUtils.getCommunicationObject(iLevel);	
				},
				/**
				 * Secured execution of the given function. Ensures that the function is only executed when certain conditions
				 * are fulfilled
				 *
				 * @param {function} fnFunction The function to be executed. Should return a promise that is settled after completion 
				 * of the execution. If nothing is returned, immediate completion is assumed.
				 * @param {object} [mParameters] Parameters to define the preconditions to be checked before execution
				 * @param {boolean} [mParameters.busy.set=true] Triggers a busy indication during function execution. Can be set to 
				 * false in case of immediate completion
				 * @param {boolean} [mParameters.busy.check=true] Checks whether the application is currently busy. Function is only 
				 * executed if not. Has to be set to false, if function is not triggered by direct user interaction, but as result of 
				 * another function, that set the application busy 
				 * @param {boolean} [mParameters.dataloss.popup=true] Provides a dataloss popup before execution of the function if 
				 * needed (i.e. in non-draft case when model or registered methods contain pending changes)
				 * @param {boolean} [mParameters.dataloss.navigation=false] Indicates that execution of the function leads to a navigation, 
				 * i.e. leaves the current page, which induces a slightly different text for the dataloss popup 
				 * @returns {Promise} A <code>Promise</code> that is rejected, if execution is prohibited, and settled equivalent to the one returned by fnFunction
				 * @public
				 * @experimental 
				 */
				securedExecution: function(fnFunction, mParameters) {
					return oTemplateUtils.oCommonUtils.securedExecution(fnFunction, mParameters, oBase.state);
				},

				/**
				* Allow parent components to be refreshed on next activation
				* @param {Integer} iLevel - Number of parent components to be refreshed
								* 1 - Refresh the immediate parent component
								* Undefined or faulty - Refresh all parent components
				* @public
				*/
				refreshAncestors: function(iLevel) {
					var oComponent = oController.getOwnerComponent();
					if (iLevel < 0) {
						iLevel = null;
					}
					oTemplateUtils.oServices.oViewDependencyHelper.setParentToDirty(oComponent, undefined, iLevel);
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.ObjectPage.extensionAPI.ExtensionAPI", {
			constructor: function(oTemplateUtils, oController, oBase) {
				jQuery.extend(this, getMethods(oTemplateUtils, oController, oBase));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/Component",["../js/QuickTemplates/QuickTemplateComponentFactory", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper", "sap/ca/ui/utils/Lessifier"], function(QuickTemplateComponentFactory, AnnotationHelper, QCAnnotationHelper, Lessifier) {
    "use strict";

    return QuickTemplateComponentFactory.createQuickTemplateComponent("sap.suite.ui.generic.template.QuickCreate.Component", {

            metadata: {
                library: "sap.suite.ui.generic.template",
                properties: {
                    "viewName": {
                        "type": "string",
                        "defaultValue": "sap.suite.ui.generic.template.QuickCreate.view.QuickCreate"
                    }
                },
                "manifest": "json",
                "includes": ["css/custom.css"]
            },

            init: function() {
              Lessifier.lessifyCSS("sap.suite.ui.generic.template.QuickCreate", "css/custom.css", true);

            }
        });

});

}; // end of sap/suite/ui/generic/template/QuickCreate/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller') ) {
/*global sap,Promise*/
jQuery.sap.declare('sap.suite.ui.generic.template.QuickCreate.view.QuickCreate.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller",["../../js/QuickTemplates/QuickActionBaseController", "../../js/QuickTemplates/QuickCreateAPI", "sap/m/MessageToast",
    "../../js/QuickTemplates/AnnotationHelper", "sap/ui/model/odata/AnnotationHelper", "../../js/QuickTemplates/ODataModelHelper", "sap/ui/model/json/JSONModel", "sap/ui/model/Context"],
    function (BaseController, QuickCreateAPI, MessageToast, QCAnnotationHelper, ModelAnnotationHelper, ODataModelHelper, JSONModel, Context) {
    "use strict";

    var QCController = BaseController.extend("sap.suite.ui.generic.template.QuickCreate.view.QuickCreate", {

        onInit: function () {
            if (!this._bIsInitialized) {
                BaseController.prototype.onInit.apply(this);

                this.oQuickCreateAPI = this.oComponent.oQuickCreateAPI;

                this.oTransactionController = this.oComponent.getTransactionController();

                if (this.oQuickCreateAPI) {
                  this.oQuickCreateAPI.setRootView(this.getView());
                }

                this.sDraftEntityPath = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().draftid : undefined;
                this.bIsCreator = this.oQuickCreateAPI ? this.oQuickCreateAPI.isCurrentUserCreator() : true;
                this.sQuickCreateUserName = this.oQuickCreateAPI ? this.oQuickCreateAPI.getQuickCreateItem().createdByName : "";

                this.bFormEnabled = this.bIsCreator;
                this._sDeferredGroupId = "QuickCreateChanges";

                var quickCreateModel = new JSONModel({});

                this._sQuickCreateUIModelName = "quickCreate";

                this.getView().setModel(quickCreateModel, this._sQuickCreateUIModelName);

                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/quickCreateUser", this.sQuickCreateUserName);

                if (!this.bDraftEnabled) {
                    this.getView().getModel().setDeferredGroups([this._sDeferredGroupId]);
                }

                // subscribe to line items found on quick create
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.attachAutofillLineItems(this._onLineItemsFound, this);
                }

                //Extension point: onQCViewInit
                if (typeof this.oComponent.onQCViewInit === "function") {
                  this.oComponent.onQCViewInit(this);
                }
            }
        },


        onExit: function () {

            if (this._bIsBeingDestroyed || this._bDestroyed) {
                return;
            }

            this._bIsBeingDestroyed = true;

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.destroy();
            }

            if (BaseController.prototype.onExit) {
                BaseController.prototype.onExit.apply(this);
            }

            this._bDestroyed = true;
            delete this._bIsBeingDestroyed;
        },

        onBeforeRendering: function () {
            BaseController.prototype.onBeforeRendering.apply(this);
            if (!this.getView().getModel("ui")) {
              var uiModel = new JSONModel({});
              this.getView().setModel(uiModel, "ui");
            }
            this.getView().getModel("ui").setProperty("/enabled", this.bFormEnabled);
            this.getView().getModel("ui").setProperty("/editable", true);
            //Extension point: onQCBeforeRendering
            if (typeof this.oComponent.onQCBeforeRendering === "function") {
              this.oComponent.onQCBeforeRendering(this.getView());
            }
        },


        _onMetaModelLoaded: function () {
            var that = this;
            this.setBusy(true);

            if (this.sDraftEntityPath) {
                // Open Existing QuickCreate
                var oContext = new Context(this.getView().getModel(), this.sDraftEntityPath);

                if (this.bDraftEnabled && !this.bIsCreator) {
                    oContext._bLocalBinding = true;
                } else if (!this.bDraftEnabled) {
                    oContext._bLocalBinding = true;
                }

                if (oContext._bLocalBinding) {
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.loadQuickCreateModelFromJSON().then(jQuery.proxy(function () {
                            if (oContext.getObject()) {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            } else {
                                this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            }
                            this.bindView(oContext);
                        }, this));
                    }
                } else {
                    //check if draft still exists
                    this.getView().getModel().read(this.sDraftEntityPath, {

                        success: jQuery.proxy(function (oData, oResponse) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", true);
                            this.bindView(oContext);
                        }, this),

                        error: jQuery.proxy(function (oError) {
                            this.getView().getModel(this._sQuickCreateUIModelName).setProperty("/draftExists", false);
                            this.bindView(oContext);
                        }, this)

                    });
                }
            } else if (this.bDraftEnabled) {
                    // create new Draft case
                    this.oDraftController.createNewDraftEntity(this.sEntitySet, "/" + this.sEntitySet).then(function (oResponse) {
                        if (that.oQuickCreateAPI) {
                            that.oQuickCreateAPI.updateDraftID(oResponse.context.getPath());
                        }

                        that.bindView(oResponse.context);

                    }, jQuery.proxy(this.onError, this));

             } else {
                    // create new non-Draft case
                    var context = this.getView().getModel().createEntry("/" + this.sEntitySet, {groupId: this._sDeferredGroupId});
                    context._bLocalBinding = true;
                    if (this.oQuickCreateAPI) {
                        this.oQuickCreateAPI.updateDraftID(context.getPath());
                    }
                    this._initializeObject(context, "FieldGroup");
                    this.bindView(context);
             }


        },

        onChange: function (oEvent) {
            if (this.bDraftEnabled) {
              var oBinding = this.getView().getElementBinding();
              var modifyPromise = new Promise(jQuery.proxy(function(resolve, reject) {
                var sEntitySet = this.oComponent.getEntitySet();
                var sValue = oEvent.getSource().getBindingPath("value");
                var oControl = oEvent.getSource();
                var oServiceController = null;
                if (oControl) {
                  oServiceController = this.oComponent.getApplicationController();
                } else {
                  oServiceController = this.oComponent.getTransactionController();
                }

                oServiceController.propertyChanged(sEntitySet, sValue, oBinding, oControl).then(
                        function(){
                            if (resolve) {
                              resolve();
                            }
                        },
                        function(){
                            if (reject) {
                              reject();
                            }
                        });
              }, this));

              modifyPromise.then(function(){
                oBinding.refresh();
              });
            }
        },

        onCreatePress: function (evt) {
            var that = this;
            this._createButton = evt.getSource();
            this._createButton.setEnabled(false);
            this.setBusy(true);


            var resolve = function (oResponse) {
                that.setBusy(false);
                var context = null;

                // search for odata entities in response
                var objects = [];

                var params = {
                    key: "__metadata",
                    matchCallback: function (parent, current, match) {
                        objects.push(current);
                        return false;
                    }
                };

                ODataModelHelper.findObjects(oResponse, params);


                var entityType = that.oEntityTypeMeta.namespace + "." + that.oEntityTypeMeta.name;
                jQuery.each(objects, function (i, obj) {
                    if (!context && obj.__metadata && obj.__metadata.type === entityType) {
                        var key = that.getView().getModel().getKey(obj);
                        context = new Context(that.getView().getModel(), "/" + key);
                    }
                });

                if (context) {
                    MessageToast.show(that.formatI18NMessage("QuickCreate_Success_CreateObject"));
                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.objectCreated(context);
                    }
                } else {
                    this._showErrorMessage({message: that.formatI18NMessage("QuickCreate_No_Created_Object")});
                }
            };

            var reject = function (oError) {
                that.setBusy(false);
                if (that._createButton) {
                    that._createButton.setEnabled(true);
                }
                that.onError(oError);
            };

            var onQCBeforeCreatePromise;
            if (this.bDraftEnabled) {
              //Extension point: onQCBeforeCreate
              var doActivateDraft = function () {
                  that.oDraftController.activateDraftEntity(that.getView().getBindingContext()).then(resolve, reject);
              };

              if (typeof this.oComponent.onQCBeforeCreate === "function") {
                  onQCBeforeCreatePromise = this.oComponent.onQCBeforeCreate(this.getView().getBindingContext(), this.getView().getBindingContext().getObject());
              }
              if (onQCBeforeCreatePromise && onQCBeforeCreatePromise instanceof Promise) {
                  onQCBeforeCreatePromise.then(doActivateDraft, reject);
              } else {
                  doActivateDraft();
              }
            } else {

                var context = this.getView().getBindingContext();
                var oModelObject = this.getView().getModel().getProperty(context.getPath(), context, /* make sure to expand all nav properties */ true);


                // remove "results" arrays from object by setting the array directly as the navigation property
                var params = {
                    key: "results",
                    matchCallback: function(parent, current, match) {
                        if (current.__nestedKey && Array.isArray(match)) {
                            parent[current.__nestedKey] = match;
                        }
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);


                // delete all "__metadata" properties from objects
                params = {
                    key: "__metadata",
                    matchCallback: function(parent, current, match) {
                        delete current["__metadata"];
                        return true;
                    },
                    maxNestedLevel: 5
                };

                ODataModelHelper.findObjects(oModelObject, params);

                //Extension point: onQCBeforeCreate
                var doCreate = function () {
                    that.getView().getModel().create("/" + that.sEntitySet, oModelObject, {
                        success: resolve,
                        error: reject
                    });
                };

                if (typeof this.oComponent.onQCBeforeCreate === "function") {
                    onQCBeforeCreatePromise = this.oComponent.onQCBeforeCreate(context, oModelObject);
                }
                if (onQCBeforeCreatePromise && onQCBeforeCreatePromise instanceof Promise) {
                    onQCBeforeCreatePromise.then(doCreate, reject);
                } else {
                    doCreate();
                }
            }
        },

        onAddLineItemPress: function (oEvent) {
            this._getLineItemsTableFromEvent(oEvent);
            var that = this;
            this.setBusy(true);
            var context = this.getView().getBindingContext();

            var createLineItem = function(submitChangesResponse) {
                that._createLineItem(context).then(function (oCreateResponse) {
                    that._refreshLineItems();

                    if (that.oQuickCreateAPI) {
                        that.oQuickCreateAPI.calculateViewHeight(that.getView(), true);
                    }
                    that.setBusy(false);

                }, jQuery.proxy(that.onError, that));
            };

            if (this.bDraftEnabled) {
                this.oTransactionController.triggerSubmitChanges().then(function (oSubmitResponse) {
                    createLineItem(oSubmitResponse);
                }, jQuery.proxy(this.onError, this));
            } else {
                createLineItem();
            }
        },

        onRemoveLineItemPress: function (oEvent) {
            var that = this;
            this.setBusy(true);
            var context = oEvent.getSource().getBindingContext();

            if (this.bDraftEnabled) {
                this.oTransactionController.triggerSubmitChanges().then(function (oResponse) {
                    that._deleteLineItem(context);
                }, jQuery.proxy(function (oError) {
                    this.setBusy(false);
                    this.onError(oError);

                }, this));
            } else {
                this.getView().getModel().deleteCreatedEntry(context);
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }
                this._refreshLineItems();

            }
        },


        bindView: function (oContext) {
            this.setBusy(false);

            if (this.getView().getModel(this._sQuickCreateUIModelName).getProperty("/draftExists") === false) {
                return;
            }

            if (oContext._bLocalBinding) {
                this._setBindingContext(oContext);
                this._refreshLineItems();
            } else {
                BaseController.prototype.bindView.apply(this, arguments);
            }

            this._updateFieldControl(oContext);

        },

        hasLineItemAnnotation: function () {
            var oInterface = this._getFormatterInterface();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            return oMetaDataContext !== null;
        },

        _onLineItemsFound: function (oEvent) {
            if (!this.hasLineItemAnnotation()) {
                return;
            }

            var numberLineItems = oEvent.getParameter("numberOfLineItems");
            if (numberLineItems <= 0) {
                return;
            }

            this.setBusy(true);
            var oMainEntityContext = this.getView().getBindingContext();
            var promises = [];
            for (var i = 0; i < numberLineItems; i++) {
                promises.push(this._createLineItem(oMainEntityContext));
            }

            Promise.all(promises).then(jQuery.proxy(function (result) {
                this._refreshLineItems();
                this.setBusy(false);
            }, this));
        },

        _createLineItem: function (oMainEntityContext) {
            var that = this;
            var oInterface = this._getFormatterInterface(oMainEntityContext);

            var oMetaModel = this.getView().getModel().getMetaModel();
            var oMetaDataContext = QCAnnotationHelper.getMetaModelContextForFacetType(oInterface,
                    this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "LineItem");

            var sChildPropertyPath = ModelAnnotationHelper.getNavigationPath(oMetaDataContext);
            sChildPropertyPath = sChildPropertyPath.replace(/[{}]/g, '');
            var oListEntityAssociationEnd = oMetaModel.getODataAssociationEnd(this.oEntityTypeMeta, sChildPropertyPath);
            var oListEntityTypeMeta = oMetaModel.getODataEntityType(oListEntityAssociationEnd.type);


            if (this.bDraftEnabled) {
                return this.oDraftController.createNewDraftEntity(oListEntityTypeMeta.name, oMainEntityContext.sPath + "/" + sChildPropertyPath);
            } else {
                return new Promise(function (resolve, reject) {
                    var context = that.getView().getModel().createEntry(oMainEntityContext.sPath + "/" + sChildPropertyPath, {groupId: that._sDeferredGroupId});
                    that._initializeObject(context, "LineItem");
                    resolve(context);
                });
            }
        },

        _deleteLineItem: function (oContext) {
            this.oTransactionController.deleteEntity(oContext).then(jQuery.proxy(function (oResponse) {
                this._refreshLineItems();
                this.setBusy(false);
                if (this.oQuickCreateAPI) {
                    this.oQuickCreateAPI.calculateViewHeight(this.getView(), false);
                }

            }, this), jQuery.proxy(function (oError) {
                this.setBusy(false);
                this.onError(oError);

            }, this));
        },


        _onSmartFieldAfterRendering: function (oEvent) {
            if (typeof oEvent.srcControl.setEnabled == 'function') {
                oEvent.srcControl.setEnabled(this.bFormEnabled);
            }

            if (this.oQuickCreateAPI) {
                this.oQuickCreateAPI.calculateViewHeight(this.getView(), true);
            }

            // remove element style so that we can style it via the CSS classes
            jQuery(".copilotQuickCreateContainerBox .sapQuickCreateFieldGroup label").css("text-align", "");

            jQuery(".sapQuickActionCreateButtonContainer > div").addClass("sapUiSmallMarginEnd");
            jQuery(".sapQuickActionCreateButtonContainer .sapMBtnInner").css("padding", "0");
        },

        _refreshLineItems: function() {
          if (this._lineItemsTable) {
            var context = this.getView().getBindingContext();
            if (context && context._bLocalBinding) {
              ODataModelHelper.restoreLineItemReferences(this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, context);
              this._lineItemsTable.getModel().updateBindings();
            } else {
              this._lineItemsTable.getModel().refresh();
            }
          }
        },

        onTableUpdateStarted: function (oEvent) {
            this._getLineItemsTableFromEvent(oEvent);

        },

        _getLineItemsTableFromEvent: function(oEvent) {
            if (!this._lineItemsTable && oEvent && oEvent.getSource) {
              var current = oEvent.getSource();
              while (current) {
                if (current instanceof sap.m.Table) {
                  this._lineItemsTable = current;
                  return;
                }

                if (typeof current.getParent === 'function') {
                  current = current.getParent();
                } else {
                  return;
                }
              }
            }
        },


        onTableUpdateFinished: function (oEvent) {
            // ensure header fields are editable in case Field control is overwriting this
            this._updateFieldControl();

        },

        _initializeObject: function(oContext, facetType) {

            var oMainContext = this.getView().getBindingContext() ? this.getView().getBindingContext() : oContext;

            var propertyPaths = QCAnnotationHelper.getAllPropertyPathsFromFacet(oMainContext, facetType);
            if (propertyPaths && propertyPaths.length > 0) {
                ODataModelHelper.initializeObjectProperties(oContext, propertyPaths, {groupId: this._sDeferredGroupId});
            }

        },

        _updateFieldControl: function (oContext) {
            // Find out more how to handle this, for now make sure header fields are editable!
            var context = oContext ? oContext : this.getView().getBindingContext();
            if (context && this.getView().getModel().getProperty(context.getPath() + "/Update_mc") !== undefined) {
                this.getView().getModel().setProperty(context.getPath() + "/Update_mc", true);
            }
        }

    });

    return QCController;

}, /* bExports */ true);

}; // end of sap/suite/ui/generic/template/QuickCreate/view/QuickCreate.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickView/Component",["../js/QuickTemplates/QuickTemplateComponentFactory", "../js/AnnotationHelper", "../js/QuickTemplates/AnnotationHelper", "sap/ca/ui/utils/Lessifier"], function(QuickTemplateComponentFactory, AnnotationHelper, QCAnnotationHelper, Lessifier) {
    "use strict";

    return QuickTemplateComponentFactory.createQuickTemplateComponent("sap.suite.ui.generic.template.QuickView.Component", {

            metadata: {
                library: "sap.suite.ui.generic.template",
                properties: {
                    "viewName": {
                        "type": "string",
                        "defaultValue": "sap.suite.ui.generic.template.QuickView.view.QuickView"
                    }
                },
                "manifest": "json",
                "includes": ["css/custom.css"]
            },

            init: function() {
              Lessifier.lessifyCSS("sap.suite.ui.generic.template.QuickView", "css/custom.css", true);

            }
        });

});

}; // end of sap/suite/ui/generic/template/QuickView/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.QuickView.view.QuickView.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.QuickView.view.QuickView.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/QuickView/view/QuickView.controller",["sap/ui/model/Context", "../../js/QuickTemplates/QuickActionBaseController", "../../js/QuickTemplates/AnnotationHelper", "../../js/QuickTemplates/ODataModelHelper", "sap/ui/model/json/JSONModel"], function(Context, BaseController, AnnotationHelper, ODataModelHelper, JSONModel) {
	"use strict";


	return BaseController.extend("sap.suite.ui.generic.template.QuickView.view.QuickView", {

		onInit: function() {
			if (!this._bIsInitialized) {
				BaseController.prototype.onInit.apply(this);
				this.sEntityPath = decodeURIComponent(this.oComponent.getComponentData().startupParameters["entityPath"]);
				this.sEntityPath = "/" + ODataModelHelper.createKeyFromPath(this.sEntityPath, this.getView().getModel().getMetaModel(), this.sEntitySet);
				var badgeModel = new JSONModel({});
				badgeModel.setProperty("/badgeVisible", false);
				badgeModel.setProperty("/fallbackBadgeVisible", false);
				this._sBadgeModelName = "badge";

				this.getView().setModel(badgeModel, this._sBadgeModelName);
			}
		},

		_onMetaModelLoaded: function() {
			var oContext = new Context(this.getView().getModel(), this.sEntityPath);
			this.bindView(oContext);

			oContext.getModel().attachRequestCompleted(this._resolveBadgeModel, this);
		},

		bindView: function(oContext) {
			var oInterface = this._getFormatterInterface(oContext);

			var facetPaths = AnnotationHelper.getNavigationPathsFromFacet(oInterface, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name, "FieldGroup");
			var heuristicPaths = AnnotationHelper.getNavigationPathsUsingAnnotationHeuristics(oContext, this.oEntityTypeMeta.namespace + "." + this.oEntityTypeMeta.name);

			var oCombined = {};
			jQuery.each(facetPaths, function(index, path) {
				oCombined[path] = "";
			});

			jQuery.each(heuristicPaths, function(index, path) {
				oCombined[path] = "";
			});

			var expandParam = AnnotationHelper.formatExpandPaths(Object.keys(oCombined));

			this.oContext = oContext;

			this.getView().bindElement({
				path: oContext.getPath(),
				parameters: {
					expand: expandParam
				}
			});

		},

		_resolveBadgeModel: function() {
			if (this._badgeResolved) {
				this.oContext.getModel().detachRequestCompleted(this._resolveBadgeModel, this);
				return;
			}
			var oContext = this.oContext;

			var ContextualManagedObject = this.oComponent.ContextualManagedObject;
			var badgeModel = this.getView().getModel(this._sBadgeModelName);
			if (ContextualManagedObject) {
				var oContextualManagedObject = new ContextualManagedObject({
					serviceUrl: (oContext.getModel().sServiceUrl) ? oContext.getModel().sServiceUrl : null,
					path: oContext.getPath(),
					entitytype: this.oEntitySetMeta.entityType,
					uiGroup: "Main Object",
					priority: "1"
				});

				// need to set model and binding context on managed object
				oContextualManagedObject.setModel(oContext.getModel());
				oContextualManagedObject.setBindingContext(oContext);
				oContextualManagedObject.resolveAnnotations();

				badgeModel.setProperty("/imgUrlDefined", (oContextualManagedObject.getProperty("imgUrl") != undefined && oContextualManagedObject.getProperty("imgUrl").indexOf("sap-icon") < 0));
				badgeModel.setProperty("/imgUrl", oContextualManagedObject.getProperty("imgUrl"));

				badgeModel.setProperty("/typeImgUrlDefined", (oContextualManagedObject.getProperty("typeImgUrl") != undefined && !badgeModel.getProperty("/imgUrlDefined")));
				badgeModel.setProperty("/typeImgUrl", oContextualManagedObject.getProperty("typeImgUrl"));

				if (!badgeModel.getProperty("/imgUrlDefined") && !badgeModel.getProperty("/typeImgUrlDefined")) {
					badgeModel.setProperty("/typeImgUrl", "sap-icon://form");
					badgeModel.setProperty("/typeImgUrlDefined", true);
				}

				badgeModel.setProperty("/title", oContextualManagedObject.getProperty("title"));
				if (oContextualManagedObject.getProperty("typeName")) {
					badgeModel.setProperty("/typeName", oContextualManagedObject.getProperty("typeName"));
				} else if (oContextualManagedObject.getProperty("titleMetadata") && oContextualManagedObject.getProperty("titleMetadata")["sap:label"]) {
					badgeModel.setProperty("/typeName", oContextualManagedObject.getProperty("titleMetadata")["sap:label"]);
				} else {
					badgeModel.setProperty("/typeName", "");
				}
				badgeModel.setProperty("/subtitle", oContextualManagedObject.getProperty("headline"));
				badgeModel.setProperty("/badgeVisible", true);

			} else {
				badgeModel.setProperty("/fallbackBadgeVisible", true);
			}
			this._badgeResolved = true;
		}

	});
}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/QuickView/view/QuickView.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.detailTemplates.PaginatorButtonsHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.detailTemplates.PaginatorButtonsHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/detailTemplates/PaginatorButtonsHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/suite/ui/generic/template/lib/testableHelper"], function(jQuery, BaseObject,
	testableHelper) {
	"use strict";

	var oTooltips = (function() {
		var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		return {
			navDownTooltip: oResource.getText("FACETFILTER_NEXT"),
			navUpTooltip: oResource.getText("FACETFILTER_PREVIOUS")
		};
	})();

	function getMethods(oControllerBase, oController, oTemplateUtils) {
		var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
		var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");

		function getPaginatorInfoPath() {
			var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel") - 1;
			return "/generic/paginatorInfo/" + iViewLevel;
		}

		function getPaginatorInformation() {
			var oPaginatorInfo = oTemplatePrivateGlobalModel.getProperty(getPaginatorInfoPath());
			return oPaginatorInfo;
		}
		
		function computeAndSetVisibleParamsForNavigationBtns() {
			var oPaginatorInfo = getPaginatorInformation();
			var bPaginatorAvailable = !!oPaginatorInfo && (!oControllerBase.fclInfo.isContainedInFCL || oTemplatePrivateGlobalModel.getProperty(
				"/generic/FCL/isVisuallyFullScreen"));
			var iLength = bPaginatorAvailable && (oPaginatorInfo.listBinding ? oPaginatorInfo.listBinding.getLength() : oPaginatorInfo.objectPageNavigationContexts.length);
			var bNavDownEnabled = bPaginatorAvailable && (oPaginatorInfo.selectedRelativeIndex !== (iLength - 1));
			var bNavUpEnabled = bPaginatorAvailable && oPaginatorInfo.selectedRelativeIndex > 0;
			oTemplatePrivateModel.setProperty("/objectPage/navButtons/navUpEnabled", bNavUpEnabled);
			oTemplatePrivateModel.setProperty("/objectPage/navButtons/navDownEnabled", bNavDownEnabled);
		}
		
		function fnHandleNavigateToObject(oPaginatorInfo, index){
			var oContext = oPaginatorInfo.objectPageNavigationContexts[index];
			oPaginatorInfo.selectedRelativeIndex = index;
			var sPaginatorInfoPath = getPaginatorInfoPath();
			oTemplatePrivateGlobalModel.setProperty(sPaginatorInfoPath, oPaginatorInfo);
			var oNavigationInfo = oPaginatorInfo.navigitionInfoProvider(oContext);
			var oMyNavigationData = jQuery.extend({}, oNavigationInfo.navigationData);
			oMyNavigationData.replaceInHistory = true; // using the paginator buttons does not create a new history entry                         
			oTemplateUtils.oCommonUtils.navigateToContext(oNavigationInfo.context, oMyNavigationData);                         
		}

		function handleShowOtherObject(iStep) {
			var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
			if (oBusyHelper.isBusy()) {
				return;
			}
			// now navigate to next object page
			var oPaginatorInfo = getPaginatorInformation();
			var oListBinding = oPaginatorInfo.listBinding;
			var iNextIdx = oPaginatorInfo.selectedRelativeIndex + iStep;
			var aAllContexts = oPaginatorInfo.objectPageNavigationContexts;
			if (aAllContexts && aAllContexts[iNextIdx]) {
				fnHandleNavigateToObject(oPaginatorInfo, iNextIdx);
			} else {
				var oFetchNewRecordsPromise = new Promise(function(fnResolve, fnReject) {
					var iTableGrowingIncrement = oPaginatorInfo.growingThreshold || Math.ceil(oListBinding.getLength() / 5);
					var iStartingPoint = aAllContexts ? aAllContexts.length : iNextIdx;
					var newEndIdx = iStartingPoint + iTableGrowingIncrement;
					var fetchAndUpdateRecords = function(mParameters) {
						// get new fetched contexts and do stuff
						var aNewAllContexts = mParameters.getSource().getContexts(0, newEndIdx);
						oPaginatorInfo.objectPageNavigationContexts = aNewAllContexts;
						oListBinding.detachDataReceived(fetchAndUpdateRecords);
						// also.. navigate
						fnHandleNavigateToObject(oPaginatorInfo, iNextIdx);
						fnResolve();
					};
					oListBinding.attachDataReceived(fetchAndUpdateRecords);
					oListBinding.loadData(0, newEndIdx);
				});
				oBusyHelper.setBusy(oFetchNewRecordsPromise);
			}
		}
		
		function handleShowNextObject() {
			handleShowOtherObject(1);	
		}

		function handleShowPrevObject() {
			handleShowOtherObject(-1);
		}		

		oTemplatePrivateModel.setProperty("/objectPage/navButtons", jQuery.extend({
			navDownEnabled: false,
			navUpEnabled: false
		}, oTooltips));
		if (oControllerBase.fclInfo.isContainedInFCL) {
			var oFullscreenBinding = oTemplatePrivateGlobalModel.bindProperty("/generic/FCL/isVisuallyFullScreen");
			oFullscreenBinding.attachChange(computeAndSetVisibleParamsForNavigationBtns);
		}

		return {
			computeAndSetVisibleParamsForNavigationBtns: computeAndSetVisibleParamsForNavigationBtns,
			handleShowNextObject: handleShowNextObject,
			handleShowPrevObject: handleShowPrevObject
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.detailTemplates.PaginatorButtonsHelper", {
		constructor: function(oControllerBase, oController, oTemplateUtils) {
			jQuery.extend(this, (testableHelper.testableStatic(getMethods, "PaginatorButtonsHelper"))(oControllerBase, oController,
				oTemplateUtils));
		}
	});
});
}; // end of sap/suite/ui/generic/template/detailTemplates/PaginatorButtonsHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.BusyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/BusyHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/suite/ui/generic/template/lib/MessageUtils", "sap/suite/ui/generic/template/lib/testableHelper"],
	function(jQuery, BaseObject, MessageUtils, testableHelper) {
		"use strict";

		// Class for busy handling
		// This class enables the notion of a 'busy session'.
		// More precisely: At each point in time the app is either in a busy session or is not.
		// Reasons for being in a busy session can be set by calling methods setBusy or setBusyReason (see below).
		// Note that each busy reason has a lifetime.
		// A new busy session is started, as soon as the two following two conditions are fulfilled:
		// - The app is currently not in a busy session
		// - There is at least one (living) busy reason
		// A busy session potentially ends when the number of living busy reasons is reduced to zero. However, the end of the busy session is
		// potponed until a navigation which is currently active has finished and the current thread execution has come to an end. When a new
		// busy reason has been set meanwhile (and is still alive) the busy session is prolonged accordingly.
		//
		// The following features are connected to a busy session:
		// - A busy indication is displayed while the app is in a busy session. This busy indication may either be displayed immediately or with the standard
		//   busy delay (can be parametrized when setting the busy reason)
		// - When a busy session starts all transient messages are removed from the Apps message model
		// - When a busy session ends all transient messages being contained in the message model are displayed to the user and removed from the message model
		// - It is possible to set parameters for a busy session (see parameter oSessionParams of setBusy and setBusyReason).
		//   oSessionParams may be an arbitrary object. However, curently only property actionLabel is evaluated. This may contain a human readable string
		//   that identifies the action that causes the busy session.
		// Moreover, this class provides the possibility to interact with busy sessions/reasons (see methods isBusy and getUnbusy).
		function getMethods(oTemplateContract) {
			var mBusyReasons = {}; // currently living busy reasons of type string
			var bIsBusy = false; // is the app in a busy session
			var bBusyDirty = false; // is it already ensured that fnApplyBusy will be called
			var iBusyPromiseCount = 0; // number of currently living busy reasons of type Promise
			var iBusyDelay = oTemplateContract.oNavigationHost.getBusyIndicatorDelay(); // standard busy delay of the App
			var oUnbusyPromise = Promise.resolve(); // a Promise which is resolved as soon as no busy session is running
			var fnUnbusyResolve = jQuery.noop; // function to be called when the current busy session ends
			var oBusySessionParams = {}; // params of this busy session

			// Returns information whether there is currently a living busy reason
			function isBusy(){
			    return iBusyPromiseCount !== 0 || !jQuery.isEmptyObject(mBusyReasons);    
			}
			
			var fnApplyBusyImmediately; // declare here to avoid use before declaration. Function that calls fnApplyBusy with bImmediate = true.
			// This function has the following tasks:
			// - If a busy session is running but no busy reason is available -> end the busy session (and thus display transient messages)
			// - Is a busy session is running set the app to busy, otherwise set it to unbusy
			// Note that ending the busy session will be postponed if a navugation is currently active and parameter bImmediate is false.
			// In this case the busy session might be prolonged if a new busy reason is set in the meantime
			function fnApplyBusy(bImmediate) {
				var bIsBusyNew = isBusy();
				if (bIsBusyNew || bImmediate) {
					bBusyDirty = false;
					oTemplateContract.oNavigationHost.setBusy(bIsBusyNew);
					jQuery.sap.log.info("Physical busy state has been changed to " + bIsBusyNew);
					if (bIsBusyNew !== bIsBusy) {
						bIsBusy = bIsBusyNew;
						if (!bIsBusy){ // end of a busy session 
							oTemplateContract.oNavigationHost.setBusyIndicatorDelay(iBusyDelay);
							MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment, oBusySessionParams.actionLabel);
							oBusySessionParams = {};
							fnUnbusyResolve();
						}
					}
				} else { // postpone removal of busy indicator until navigation visualisation is finished
					var oNavigationFinishedPromise = oTemplateContract.oNavigationObserver.getProcessFinished(true);
					oNavigationFinishedPromise.then(fnApplyBusyImmediately, fnApplyBusyImmediately);
				}
			}
			fnApplyBusyImmediately = fnApplyBusy.bind(null, true);

			// Ensure that method fnApplyBusy is called
			// If bImmediate is true the busy delay is temporarily set to 0 and fnApplyBusy is called synchronously.
			// Otherwise the call of fnApplyBusy is postponed until the current thread is finished.
			function fnEnsureApplyBusy(bImmediate) {
				if (bImmediate) {
					oTemplateContract.oNavigationHost.setBusyIndicatorDelay(0);
					fnApplyBusy();
				} else if (!bBusyDirty) {
					bBusyDirty = true;
					setTimeout(fnApplyBusy, 0);
				}
			}

			// function to be called when any Promise that serves as a busy reason is settled
			function fnBusyPromiseResolved() {
				iBusyPromiseCount--;
				if (!iBusyPromiseCount) {
					fnEnsureApplyBusy(false);
				}
			}
			
			// this method is called when a busy reason is set. It starts a busy session unless the App is already in a busy session.
			function fnMakeBusy(){
				if (bIsBusy){
					return;  // App is already in a busy session
				}
				// Start a new busy session
				bIsBusy = true;
				oUnbusyPromise = new Promise(function(fnResolve){ 
					fnUnbusyResolve = fnResolve; 
				});
				// All transient messages still being contained in the message model belong to previous actions.
				// Therefore, we remove them. If they have not been shown yet, it is anyway to late to show them when this busy session has ended.
				MessageUtils.removeTransientMessages();
			}

			// Sets or resets a busy reason of type string (parameter sReason).
			// Parameter bIsActive determines whether the busy reason is set or reset.
			// Note that resetting a reason applies to all living reasons using the same string (so calling this method with the same reason does not accumulate)
			// bImmediate is only evaluated when bIsActive is true. In this case it determines whether the busy indication should be displayed immediately or with
			// the usual delay.
			// oSessionParams (optional) can be used to set/overwrite additional params for the busy session. It is also only evaluated when bIsActive is true.
			// Note that it is preferred to use method setBusy to set a busy reason
			function setBusyReason(sReason, bIsActive, bImmediate, oSessionParams) {
				if (bIsActive) {
					jQuery.extend(oBusySessionParams, oSessionParams);
					fnMakeBusy();
					mBusyReasons[sReason] = true;
				} else {
					delete mBusyReasons[sReason];
				}
				fnEnsureApplyBusy(bImmediate);
			}

			// Sets a Promise (oBusyEndedPromise) as busy reason. This busy reason is alive until the promise is settled.
			// bImmediate determines whether the busy indication should be displayed immediately or with the usual delay.
			// oSessionParams (optional) can be used to set/overwrite additional params for the busy session.
			// Edge case: oBusyEndedPromise is already settled when this method is called (and the app is currently not in a busy session).
			// In this case, nevertheless a (probably short-living) busy session is started, such that the interaction with the message model is as defined above
			function setBusy(oBusyEndedPromise, bImmediate, oSessionParams) {
				jQuery.extend(oBusySessionParams, oSessionParams);
				iBusyPromiseCount++;
				fnMakeBusy();
				oBusyEndedPromise.then(fnBusyPromiseResolved, fnBusyPromiseResolved);
				fnEnsureApplyBusy(bImmediate);
			}

			return {
				setBusyReason: setBusyReason,
				setBusy: setBusy,
				isBusy: isBusy,
				getUnbusy: function(){ // returns a Promise that is resolved as soon as the App is not in a busy session
				    return oUnbusyPromise;
				}
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.BusyHelper", {
			constructor: function(oTemplateContract) {
				jQuery.extend(this, (testableHelper.testableStatic(getMethods, "BusyHelper"))(oTemplateContract));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/BusyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CRUDHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CRUDHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CRUDHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/model/Context", "sap/suite/ui/generic/template/lib/MessageUtils", "sap/ui/model/Filter", "sap/ui/model/FilterOperator"],
	function(jQuery, BaseObject, Context, MessageUtils, Filter, FilterOperator) {
		"use strict";

		function create(oDraftController, sEntitySet, sBindingPath, oModel, setEditableNDC) {
			sBindingPath = sBindingPath || "/" + sEntitySet;
			return new Promise(function(resolve, reject) {
				if (oDraftController.getDraftContext().isDraftEnabled(sEntitySet)) {
					oDraftController.createNewDraftEntity(sEntitySet, sBindingPath).then(function(oResponse) {
						resolve(oResponse.context);
					}, function(oError) {
						reject(oError);
					});
				} else {
					setEditableNDC(true);
					return resolve(oModel.createEntry(sBindingPath, {
						batchGroupId: "Changes",
						changeSetId: "Changes"
					}));
				}
			});
		}

		function fnReadDraftAdminstrativeData(oModel, sBindingPath, oTemplateContract) {
			var oPromise = new Promise(function(resolve, reject) {
				oModel.read(sBindingPath, {
					urlParameters: {
						"$expand": "DraftAdministrativeData"
					},
					success: function(oResponse) {
						resolve(oResponse);
					},
					error: function(oResponse) {
						reject(oResponse);
					}
				});
			});
			// not really needed for navigation (as there is always another promise still running), but maybe for internal
			// edit - and it doesn't hurt anyway
			oTemplateContract.oBusyHelper.setBusy(oPromise, true);
			return oPromise;
		}
		/*
		 * functionality similar to routingHelper - START - refactoring
		 * */
		function fnReadDraftAdminstrativeDataWithSemanticKey(oTransactionController, sEntitySet, aKeys, oStartupParameters, oModel, oTemplateContract) {
			var oPromise = new Promise(function(resolve, reject) {
				var i, iLen, sProperty, sValue, aFilters = [];
				if (aKeys && oStartupParameters && oModel) {
					iLen = aKeys.length;
					for (i = 0; i < iLen; i++) {
						// get property from property path
						sProperty = aKeys[i].PropertyPath;
						// get value from parameter array (should have only 1)
						sValue = oStartupParameters[sProperty][0];
						aFilters.push(new Filter(sProperty, FilterOperator.EQ, sValue));
					}
					if (oTransactionController.getDraftController()
							.getDraftContext().isDraftEnabled(sEntitySet)) {
						var oDraftFilter = new Filter({
							filters: [new Filter("IsActiveEntity", "EQ", false),
							          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
							          and: false
						});
						aFilters.push(oDraftFilter);
					}
					var oCompleteFilter = new Filter(aFilters, true);
					oModel.read("/" + sEntitySet, {
						urlParameters: {
							"$expand": "DraftAdministrativeData"
						},
						filters: [oCompleteFilter],
						success: function(oResult) {
							var oRowResult = fnReadObjectProcessResults(oResult, oModel, oStartupParameters);
							if (oRowResult) {
								resolve(oRowResult);
							} else {
								reject(oResult);
							}						
						},
						error: function(oResponse) {
							reject(oResponse);
						}
					});
				}
			});
			// not really needed for navigation (as there is always another promise still running), but maybe for internal
			// edit - and it doesn't hurt anyway
			oTemplateContract.oBusyHelper.setBusy(oPromise, true);
			return oPromise;
		}
		
		function fnReadObjectProcessResults(oResult, oModel, oStartupParameters) {

			
			var oRow, i, iLength, oRowResult;
			if (oResult && oResult.results){
				iLength = oResult.results.length;
				if (iLength == 0) {
					oRowResult = null;
				} else if (iLength == 1) {
					oRowResult = oResult.results[0];
				} else if (iLength >= 1) {
					var aDrafts  = [];
					var aActive = [];
					for (i = 0; i < iLength; i++) {
						oRow = oResult.results[i];
						if (oRow && oRow.IsActiveEntity) {
							aActive.push(oRow);
						} else if (oRow && oRow.IsActiveEntity == false) {
							aDrafts.push(oRow);
						}
					}
					if (aActive.length == 0 && aDrafts.length >= 2){
						//DraftUUID match?
						var oDraftRow;
						for (var j = 0; j < aDrafts.length; j++) {
							oDraftRow = aDrafts[j];
							if (oDraftRow.DraftUUID == oStartupParameters.DraftUUID){
								//show corresponding object
								oRowResult = oDraftRow;
								break;
							}
						}
						if (!oRowResult){
							oRowResult = aDrafts[0];							
						}
					} else if (aActive.length == 1 && aDrafts.length == 1){
						//no DraftUUID check
						oRowResult = aActive[0];
					} else if (aActive.length == 1 && aDrafts.length >= 2){
						oRowResult = aActive[0];
					}
				}
			}
			return oRowResult;
		}
		
		/*
		 * functionality similar to routingHelper - END
		 * */		

		/*
		 * This method is called during startup and ensures that all changes performed on draft objects are
		 * automatically saved.
		 * This is done by registering to the propertyChange-event of the OData model of the app.
		 * Note that this affects even changes that are done in breakouts or reuse componentgs as long as they use the standard OData model.
		 * Components using different channels (e.g. another OData model) for storing the data need to use method
		 * sap.suite.ui.generic.template.ObjectPage.extensionAPI.DraftTransactionController.saveDraft()
		*/
		function enableAutomaticDraftSaving(oTemplateContract){
			var oAppComponent = oTemplateContract.oAppComponent;
			var oModel = oAppComponent.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oNavigationController = oAppComponent.getNavigationController();
			var oApplicationController = oAppComponent.getApplicationController(); // instance of sap.ui.generic.app.ApplicationController
			var oDraftContext = oApplicationController.getTransactionController().getDraftController().getDraftContext();
			var fnErrorHandler = function(oError){
					/* TODO: change handleError API
				 we anyway want to modify the API for the handleError method. Until then we use the
				 mParameters to pass the needed resourceBundle and navigation Controller
				*/
				oTemplateContract.oApplicationProxy.getResourceBundleForEditPromise().then(function(oResourceBundle){		 
					MessageUtils.handleError(MessageUtils.operations.modifyEntity, null, null, oError, {
						resourceBundle: oResourceBundle,
						navigationController: oNavigationController,
						model: oModel
					});
					MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment);
				});				
			};
			var fnPropertyChanged = function(oEvent){
				var oContext = oEvent.getParameter("context");
				// Ignore all cases which are non-draft
				if (!oDraftContext.hasDraft(oContext)){
					return;	
				}				
				// for parameters of function imports special paths are introduced in the model, that are not known in the metamodel
				// as we don't need a merge call for changes to these properties, we can just ignore them				
				if (!oMetaModel.getODataEntitySet(oContext.getPath().split("(")[0].substring(1))){
					return;
				}
				var sPath = oEvent.getParameter("path");
				// delegate the draft saving to the ApplicationController
				oApplicationController.propertyChanged(sPath, oContext).catch(fnErrorHandler);
			};
			oModel.attachPropertyChange(fnPropertyChanged); // ensure that the handler is called whenever a user input (affecting the OData model) is performed
		}

		function fnUnsavedChangesDialog(oTemplateContract, oDraftAdministrativeData, fnBeforeDialogCallback) {
			return new Promise(function(resolve, reject) {
				var oUnsavedChangesDialog = oTemplateContract.oApplicationProxy.getDialogFragment(
					// todo: To avoid this undesired call from lib to object page, maybe the fragment should be moved to lib
					"sap.suite.ui.generic.template.ObjectPage.view.fragments.UnsavedChangesDialog", {
						onEdit: function() {
							oUnsavedChangesDialog.close();
							resolve();
						},
						onCancel: function() {
							oUnsavedChangesDialog.close();
							reject();
						}
					}, "Dialog");
				var sUnsavedChangesQuestion = oTemplateContract.getText("DRAFT_LOCK_EXPIRED", [oDraftAdministrativeData.LastChangedByUserDescription ||
					oDraftAdministrativeData.LastChangedByUser
				]);
				oUnsavedChangesDialog.getModel("Dialog").setProperty("/unsavedChangesQuestion", sUnsavedChangesQuestion);
				// promise from navigation controller needs to be resolved, as otherwise busyHelper would block the dialog
				(fnBeforeDialogCallback || jQuery.noop)();
				oTemplateContract.oBusyHelper.getUnbusy().then(function() {
					oUnsavedChangesDialog.open();
				});
			});
		}

		function edit(oTransactionController, sEntitySet, sBindingPath, oModel, oTemplateContract,
			fnBeforeDialogCallback, aKeys, oStartupParameters) {
			//refactoring needed
			if (sBindingPath === "" && aKeys && oStartupParameters ){
				return new Promise(function(resolve, reject) {
					fnReadDraftAdminstrativeDataWithSemanticKey(oTransactionController, sEntitySet, aKeys, oStartupParameters, oModel, oTemplateContract).then(
						function(oResponse) {
							var sResponseBindingPath = "/" + oModel.createKey(sEntitySet, oResponse);
							var oBindingContext = new Context(oModel, sResponseBindingPath);
							if (!oResponse.DraftAdministrativeData || oResponse.DraftAdministrativeData.DraftIsCreatedByMe) {
								// no or own draft
								resolve(oTransactionController.editEntity(oBindingContext, false));
							} else if (oResponse.DraftAdministrativeData.InProcessByUser) { // locked
								reject({
									lockedByUser: oResponse.DraftAdministrativeData.InProcessByUserDescription || oResponse.DraftAdministrativeData.InProcessByUser
								});
							} else { // unsaved changes
								fnUnsavedChangesDialog(oTemplateContract, oResponse.DraftAdministrativeData,
									fnBeforeDialogCallback).then(
									function() {
										resolve(oTransactionController.editEntity(oBindingContext, false));
									},
									function() {
										reject({
											lockedByUser: oResponse.DraftAdministrativeData.LastChangedByUserDescription || oResponse.DraftAdministrativeData.LastChangedByUser
										});
									});
							}
						},
						function(oResponse) {
							// DraftAdminData read failed
							reject({
								draftAdminReadResponse: oResponse
							});
						});
				});
			}			
			var oDraftContext = oTransactionController.getDraftController().getDraftContext();
			var oBindingContext = new Context(oModel, sBindingPath);
			if (oDraftContext.isDraftEnabled(sEntitySet)) {
				// todo: enable preserveChanges
				if (true || !oDraftContext.hasPreserveChanges(oBindingContext)) {
					return new Promise(function(resolve, reject) {
						fnReadDraftAdminstrativeData(oModel, sBindingPath, oTemplateContract).then(
							function(oResponse) {
								if (!oResponse.DraftAdministrativeData || oResponse.DraftAdministrativeData.DraftIsCreatedByMe) {
									// no or own draft
									resolve(oTransactionController.editEntity(oBindingContext, false));
								} else if (oResponse.DraftAdministrativeData.InProcessByUser) { // locked
									reject({
										lockedByUser: oResponse.DraftAdministrativeData.InProcessByUserDescription || oResponse.DraftAdministrativeData.InProcessByUser
									});
								} else { // unsaved changes
									fnUnsavedChangesDialog(oTemplateContract, oResponse.DraftAdministrativeData,
										fnBeforeDialogCallback).then(
										function() {
											resolve(oTransactionController.editEntity(oBindingContext, false));
										},
										function() {
											reject({
												lockedByUser: oResponse.DraftAdministrativeData.LastChangedByUserDescription || oResponse.DraftAdministrativeData.LastChangedByUser
											});
										});
								}
							},
							function(oResponse) {
								// DraftAdminData read failed
								reject({
									draftAdminReadResponse: oResponse
								});
							});
					});
				}
			} else {
				oTemplateContract.oApplicationProxy.setEditableNDC(true);
				return Promise.resolve({
					context: oBindingContext
				});
			}
		}

		return {
			create: create,
			edit: edit,
			enableAutomaticDraftSaving: enableAutomaticDraftSaving
		};
	}
);
}; // end of sap/suite/ui/generic/template/lib/CRUDHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CRUDManager') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CRUDManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ActionUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CRUDManager",["jquery.sap.global", "sap/ui/base/Object", "sap/m/MessageToast", "sap/ui/generic/app/util/ModelUtil",
		"sap/ui/generic/app/util/ActionUtil",
		"sap/suite/ui/generic/template/lib/MessageUtils", "sap/m/MessageBox", "sap/suite/ui/generic/template/lib/CRUDHelper",
		"sap/suite/ui/generic/template/lib/testableHelper"
	],
	function(jQuery, BaseObject, MessageToast, ModelUtil, ActionUtil, MessageUtils, MessageBox, CRUDHelper, testableHelper) {
		"use strict";

		var oRejectedPromise = Promise.reject();
		oRejectedPromise.catch(jQuery.noop);

		function getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {

			function handleError(sOperation, reject, oError, mParameters) {
				MessageUtils.handleError(sOperation, oController, oServices, oError, mParameters);
				return (reject || jQuery.noop)(oError);
			}

			function handleSuccess() {
				MessageUtils.handleTransientMessages(oServices.oApplication.getDialogFragmentForView.bind(null, null));
			}

			var fnEditEntityImpl; // declare function already here, to avoid usage before declaration
			// This method is called to check about drafts of other users for the entity to be edited.
			// It returns a promise that is settled when this question has been clarified.
			// Actually there are two scenarios in which this method can be called:
			// - If oError is faulty the method is called at the beginning of the editing process. In this case this method
			//   must find out whether
			//   a) Another user possesses a locking draft for the entity -> promise is rejected
			//   b) Another user possesses a non-locking draft for the entity -> promise is resolved as described for function editEntity (see below)
			//   c) No draft exists for this object -> promise is resolved to an empty object
			// - If oError is truthy the back-end has already been called in order to create an edit draft. Thereby the preserveChange-mode was used (see below).
			//   This backend call returned the information that another user possesses a (locking or non-locking) draft for the entity.
			//   oError is the object that was returned from the backend. In this case this method must find out whether
			//   a) The corresponding draft is locking -> promise is rejected
			//   b) The corresponding draft is non-locking -> promise is resolved as described for function editEntity (see below)
			//   c) The draft has meanwhile disappeared (edge case) -> in this case the promise should also resolve as described for function editEntity. Therefore, the function is called once more.
			// In both scenarios in case a) this method is also responsible for error handling. Note that there is a subtle difference between these scenarios in this case.
			// In the second scenario the error message that should be presented to the user can be taken from oError (and thus comes from the backend)
			// In the first scenario the error message is created locally.
			function checkForForeignUserLock(oError) {
				return new Promise(function(resolve, reject) {
					var oComponent = oController.getOwnerComponent();
					// check whether Draft exists
					var oBindingContext = oComponent.getBindingContext();
					var oModel = oComponent.getModel();
					oModel.read(oBindingContext.getPath(), {
						urlParameters: {
							"$expand": "DraftAdministrativeData"
						},
						success: function(oResponseData) {
							if (!oResponseData.DraftAdministrativeData) { // no draft exists for the object at all
								if (oError) { // It seems that the draft that was responsible for producing oError has meanwhile vanished -> Restart the process (edge case)
									//return fnEditEntityImpl(false).then(resolve);
									return handleError(MessageUtils.operations.editEntity, reject, oError);
								}
								return resolve({});
							}
							if (oResponseData.DraftAdministrativeData.InProcessByUser) { // locked by other user
								var sUserDescription = oResponseData.DraftAdministrativeData.InProcessByUserDescription || oResponseData.DraftAdministrativeData
									.InProcessByUser;
								oError = oError || new Error(oCommonUtils.getText("ST_GENERIC_DRAFT_LOCKED_BY_USER", [" ", sUserDescription]));
								return handleError(MessageUtils.operations.editEntity, reject, oError, oError);
							}
							return resolve({
								draftAdministrativeData: oResponseData.DraftAdministrativeData
							}); // draft for other user exists but is no lock anymore
						},
						error: handleError.bind(null, MessageUtils.operations.editEntity, reject)
					});
				});
			}

			// This method is called in order to call method editEntity on the TransactionController. It returns a promise as described
			// in the description of method editEntity (see below).
			// Parameter oPrereadData is an object that possily contains administrative data which have already been retrieved.
			// More precisely this object is either empty or contains a property draftAdministrativeData.
			// In this second case the promise returned by this method should just resolve to oPrereadData.
			function fnCallEdit(bIsDraftEnabled, bUnconditional, oPrereadData) {
				if (oPrereadData.draftAdministrativeData) {
					return Promise.resolve(oPrereadData);
				}
				return new Promise(
					function(resolve, reject) {
						oServices.oTransactionController.editEntity(oController.getView().getBindingContext(), !bUnconditional)
							.then(
								function(oResponse) { //success
									handleSuccess(oResponse);
									return resolve({
										context: oResponse.context
									});
								},
								function(oResponse) { // error handler
									if (oResponse && oResponse.response && oResponse.response.statusCode === "409" && bIsDraftEnabled && !bUnconditional) { //there might be unsaved changes
										//remove transient message associated with rc 409 in order to prevent message pop-up
										MessageUtils.removeTransientMessages();
										// var oMesssageManager = sap.ui.getCore().getMessageManager();
										// var aMessages =  oMesssageManager.getMessageModel().getData();
										// var aMessagesToBeRemoved = [];
										// for (var i = 0; i < aMessages.length; i++) {
										// 	 if (aMessages[i].getCode() === "SDRAFT_COMMON/000") {
										// 		 aMessagesToBeRemoved.push(aMessages[i]);
										// 	 }
										// }
										// if (aMessagesToBeRemoved.length > 0) {
										// 	oMesssageManager.removeMessages(aMessagesToBeRemoved);
										// }
										return checkForForeignUserLock(oResponse).then(resolve, reject);
									} else {
										handleError(MessageUtils.operations.editEntity, reject, oResponse, oResponse);
									}
								}
							);
					}
				);
			}

			// This method implements main functionality of  editEntity (see below). Only busy handling is not done in this function.
			fnEditEntityImpl = function(bUnconditional) {
				var bIsDraftEnabled = oComponentUtils.isDraftEnabled();
				var oRet;
				var oComponent = oController.getOwnerComponent();
				var oBindingContext = oComponent.getBindingContext();
				if (bIsDraftEnabled && !bUnconditional) {
					// In this case we must ensure that a non-locking draft of another user is not overwritten without notice.
					// There are two strategies for that:
					// - First read the draft administrative data in order to check for this information
					// - Call backend to create draft in a mode where every draft of another user is consideres as a lock
					// The second possibility is preferred. However it is only suitable when the OData Service supports this mode (called preserveChange-mode)
					var oDraftContext = oServices.oDraftController.getDraftContext();
					var bPreserveChanges = oDraftContext.hasPreserveChanges(oBindingContext);
					if (!bPreserveChanges) { // Must use strategy 1 -> first check for Foreign user locks then start editing
						oRet = checkForForeignUserLock().then(fnCallEdit.bind(null, true, true));
					}
				}
				// In non-draft case and in draft cases with strategy 2 call edit functionality directly
				oRet = oRet || fnCallEdit(bIsDraftEnabled, bUnconditional, {});
				if (bIsDraftEnabled) {
					oServices.oApplication.editingStarted(oBindingContext, oRet);
				}
				return oRet;
			};

			// This method is called when a user starts to edit the active entity.
			// This method deals with busy handling and sensing error messages, but not with other dialogs.
			// Parameter bUnconditional specifies whether the user has already confirmed that he is willing to overwrite other users non-locking drafts.
			// The method returns a promise.
			// The promise is rejected when the user must not edit the object (which may be caused by tecnical or semantical problems).
			// In this case error handling has been performed by this method.
			// The promise is resolved to an object with property 'draftAdministrativeData' when there exists a non-locking draft of another user (this can only be the case when bUnconditional is false)
			// In this case this property contains the draft administrative data of the non-locking draft.
			// The promise is resolved to an object with property 'context' when the editing can start.
			// In this case this property contains the context of the entity to be edited.
			function editEntity(bUnconditional) {
				if (oBusyHelper.isBusy()) {
					return oRejectedPromise;
				}
				var oRet = fnEditEntityImpl(bUnconditional);
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			function getDeleteEntityPromise(bIsActiveEntity, bHasActiveEntity, oContext, bDeleteDraftForActiveEntity) {
				var oRet = new Promise(
					function(resolve, reject) {
						var fnError = function(oError) {
							oController.getOwnerComponent().getComponentContainer().bindElement(oContext.getPath());
							return handleError(MessageUtils.operations.deleteEntity, reject, oError);
						};
						if (bIsActiveEntity && bDeleteDraftForActiveEntity) {
							// Current context is the active document. But we have to
							// delete the draft of this active document.
							oServices.oDraftController.getDraftForActiveEntity(oContext).then(
								function(oResponse) {
									oServices.oTransactionController.deleteEntity(oResponse.context).then(
										function() {
											oServices.oApplication.showMessageToast(oCommonUtils.getText("ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED"));
											return resolve();
										});
								}, fnError);
						} else {
							oServices.oTransactionController.deleteEntity(oContext).then(
								function() {
									var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
									var oDraftContext = oServices.oDraftController.getDraftContext();
									var bRoot = oDraftContext.isDraftRoot(sEntitySet);
									var sMessageText = oCommonUtils.getText("ST_GENERIC_OBJECT_DELETED");

									// replace the message only for the root.
									if (!bIsActiveEntity && bRoot) {
										sMessageText = oCommonUtils.getText(bHasActiveEntity ? "ST_GENERIC_DRAFT_WITH_ACTIVE_DOCUMENT_DELETED" :
											"ST_GENERIC_DRAFT_WITHOUT_ACTIVE_DOCUMENT_DELETED");
									}
									oServices.oApplication.showMessageToast(sMessageText);
									return resolve();
								}, fnError);
						}
					}
				);
				return oRet;
			}

			/*
			 * Deletes current OData entity. The entity can either be a
			 * non-draft document or a draft document. *
			 * Note: This method does not care for busy handling. So this has to be done by the caller.
			 *
			 * @param {boolean}
			 *          bDeleteDraftForActiveEntity Can be set to
			 *          <code>true</code> in order to delete the draft entity,
			 *          although the current binding context belongs to the
			 *          active entity
			 * @returns {Promise} A <code>Promise</code> for asynchronous
			 *          execution
			 * @public
			 */
			function deleteEntity(bDeleteDraftForActiveEntity){
				var oRet = new Promise(function(fnResolve, fnReject){
					var oContext = oController.getView().getBindingContext();
					var bIsActiveEntity = oServices.oDraftController.isActiveEntity(oContext);
					var bHasActiveEntity = oServices.oDraftController.hasActiveEntity(oContext);

					var oSiblingPromise;
					if (bDeleteDraftForActiveEntity) {
						oSiblingPromise = Promise.resolve(oContext);
					} else if (bHasActiveEntity && !bIsActiveEntity) {
						oSiblingPromise = oServices.oApplication.getDraftSiblingPromise(oContext);
					} else {
						oSiblingPromise = Promise.resolve();
					}
					oSiblingPromise.then(function(oActive){
						var oDeletePromise = getDeleteEntityPromise(bIsActiveEntity, bHasActiveEntity, oContext, bDeleteDraftForActiveEntity);
						oDeletePromise.then(fnResolve, fnReject);
						if (!bIsActiveEntity) { // cancellation of a draft
							var fnTransformActiveContext = function(){
								return  { context: oActive };
							};
							var oCancellationPromise = oDeletePromise.then(fnTransformActiveContext);
							oServices.oApplication.cancellationStarted(oContext, oCancellationPromise);
						}
					}, fnReject);
				});
				return oRet;
			}

			/**
			 * Deletes current OData entity. The entity can either be a non-draft document or a draft document. *
			 *
			 * @param {array} aPath Binding contexts or paths (strings) which identify the entities
			 * @returns {Promise} A <code>Promise</code> that receives an array with the responses of the delete requests
			 * @public
			 */
			function deleteEntities(aPath) {
				var oRet = new Promise(function(resolve, reject) {
					oServices.oTransactionController.deleteEntities(aPath).then(
						function(aDeleteResults) {
							var aFailedPath = []; // Failed paths
							var aODataMessage = sap.ui.getCore().getMessageManager().getMessageModel().getData(); // OData error messages

							// Find the failed entity paths by comparing aPath and the paths from the OData error messages
							for (var i = 0; i < aODataMessage.length; i++) {
								var sMessageObjectPath = aODataMessage[i].getTarget(); // entity path

								for (var j = 0; j < aPath.length; j++) {
									var sMessageType = aODataMessage[i].getType() || ""; // type of OData message
									if (sMessageObjectPath.indexOf(aPath[j]) > -1 && (sMessageType !== "Information" && sMessageType !== "Success" )/*&& aFailedPath.indexOf(sMessageObjectPath) === -1*/ ) { // match entity path
										aFailedPath.push(sMessageObjectPath);
										break;
									}
								}
							}
							return resolve(aFailedPath);
						},
						function(oError) {
							return reject(oError);
						}
					);
				});
				oRet.then(function(aFailedPath){
					var aDeletedPath = [];
					for (var i = 0; i < aPath.length; i++){
						if (aFailedPath.indexOf(aPath[i]) === -1){
							aDeletedPath.push(aPath[i]);
						}
					}
					oServices.oApplication.adaptAfterDeletion(aDeletedPath, oComponentUtils.getViewLevel());
				});
				return oRet;
			}

			function saveEntityImpl(resolve, reject) {
				if (oBusyHelper.isBusy()) {
					reject();
					return;
				}
				oServices.oTransactionController.triggerSubmitChanges().then(function(oResponse) {
					handleSuccess();
					resolve(oResponse.context);
				}, handleError.bind(null, MessageUtils.operations.saveEntity, reject));
			}

			/*
			 * Saves current OData entity. Only used in non-draft scenario.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function saveEntity() {
				var oRet = new Promise(function(fnResolve, fnReject) {
					oServices.oApplication.performAfterSideEffectExecution(saveEntityImpl.bind(null, fnResolve, fnReject));

				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			/*
			 * Activates a draft OData entity. Only the root entity can be activated.
			 *
			 * @returns {Promise} A <code>Promise</code> for asynchronous execution
			 * @public
			 */
			function activateDraftEntity() {
				if (oBusyHelper.isBusy()) {
					return oRejectedPromise;
				}
				var oRet = new Promise(function(resolve, reject) {
					var oContext = oController.getView().getBindingContext();
					var oActivationPromise = oServices.oDraftController.activateDraftEntity(oContext);
					oServices.oApplication.activationStarted(oContext, oActivationPromise);
					oActivationPromise.then(function(oResponse) {
						var sPath = oResponse.context.getPath();
						function fnProcessFinished() {
							handleSuccess();
							resolve(oResponse);
						}
						var aExpand = oComponentUtils.getPreprocessorsData().rootContextExpand;
						if (aExpand) {
							var sExpand = aExpand.join(",");
							oController.getView().getModel().read( sPath, {
								urlParameters: {
									"$select": sExpand,
									"$expand": sExpand
								},
								success: fnProcessFinished,
								error: fnProcessFinished  // Note: Error handling might have to be reinvestigated
							});
						} else {
							fnProcessFinished();
						}
					}, handleError.bind(null, MessageUtils.operations.activateDraftEntity, reject));
				});
				oBusyHelper.setBusy(oRet);
				return oRet;
			}

			function getActionUtil(mParameters){
				return new ActionUtil(mParameters);
			}

			function callActionImpl(mParameters, oState, fnResolve, fnReject) {
				if (oBusyHelper.isBusy()) {
					fnReject();
					return;
				}

				var sFunctionImportPath = mParameters.functionImportPath;
				var aCurrentContexts = mParameters.contexts;
				var oSourceControl = mParameters.sourceControl;
				var sFunctionImportLabel = mParameters.label;
				var sNavigationProperty = mParameters.navigationProperty;
				var sOperationGrouping = mParameters.operationGrouping;

				var oActionProcessor = getActionUtil({
					controller: oController,
					contexts: aCurrentContexts,
					applicationController: oServices.oApplicationController,
					operationGrouping: sOperationGrouping
				});

				var fnObjectPageExistsForEntitySet = function(oPage, sEntitySet) {
					if (oPage.pages) {
						for (var i in oPage.pages) {
							var oSubPage = oPage.pages[i];
							if (oSubPage.component.list != true && oSubPage.entitySet === sEntitySet) {
								return true;
							} else {
								var bResult = fnObjectPageExistsForEntitySet(oSubPage, sEntitySet);
								if (bResult) {
									return true;
								}
							}
						}
					}
					return false;
				};

				var fnNavigationAllowed = function(oComponent, oResponseContext) {
					var oConfig = oComponent.getAppComponent().getConfig();
					if (oResponseContext && oResponseContext.sPath) {
						var sResponseEntitySet = oResponseContext.sPath.split("(")[0].replace("/", "");
						return fnObjectPageExistsForEntitySet(oConfig.pages[0], sResponseEntitySet);
					}
					return false;
				};

				var fnActionCallResolve = function(aResponses) {
					var oResponse, oResponseContext, oComponent, bNavigationAllowed;

					if (jQuery.isArray(aResponses) && aResponses.length === 1) {
						// only one context, handle as single action call
						oResponse = aResponses[0];
					} else {
						oResponse = {
							response: {
								context: aResponses.context
							}
						};
					}
					oResponseContext = oResponse.response && oResponse.response.context;

					oComponent = oController.getOwnerComponent();

					bNavigationAllowed = fnNavigationAllowed(oComponent, oResponseContext);

					if (bNavigationAllowed && oResponseContext && oResponseContext !== oResponse.actionContext && oResponseContext.getPath() !==
						"/undefined") {
						if (oSourceControl) {
							oCommonUtils.navigateFromListItem(oResponseContext, oSourceControl);
						} else {
							oServices.oNavigationController.navigateToContext(oResponseContext, sNavigationProperty, false);
						}
					}

					// -> part of method onSelectionChange in each controller
					if (aResponses.length > 0) {
						var oTableBindingInfo = oCommonUtils.getTableBindingInfo(oSourceControl);
						var oListBinding = oTableBindingInfo && oTableBindingInfo.binding;
						if (oListBinding && oListBinding.oEntityType) {
							// update the enablement of toolbar buttons
							oCommonUtils.setEnabledToolbarButtons(oSourceControl);

							// update the enablement of footer button if on the List Report
							if (oComponentUtils.isListReportTemplate()){
								oCommonUtils.setEnabledFooterButtons(oSourceControl);	
							}
						}
					}

					fnResolve(aResponses);
				};

				var fnActionCallReject = function(oError) {
					if (jQuery.isArray(oError)) {
						if (oError.length === 1) {
							oError = oError[0].error;
						} else {
							oError = null;
						}
					}
					var mErrorParameters = {
						context: aCurrentContexts
					};
					if (aCurrentContexts && aCurrentContexts[0]) {
						var oModel = aCurrentContexts[0].oModel;
					//remove pending request from the last change of the model
						if (oModel && oModel.hasPendingChanges()) {
							oModel.resetChanges();
						}
					}
					handleError(MessageUtils.operations.callAction, null, oError, mErrorParameters);
					fnReject(oError);
				};

				oActionProcessor.call(sFunctionImportPath, sFunctionImportLabel).then(function(oResult){
					var oSessionParams = {};
					if (oResult && oResult.executionPromise){
//						new logic
						oSessionParams.actionLabel = sFunctionImportLabel;
						oBusyHelper.setBusy(oResult.executionPromise, null, oSessionParams);
						oResult.executionPromise.then(fnActionCallResolve,fnActionCallReject);
					} else {
//						old logic - can be deleted as soon as promise from actionUtil.call always resolves to a second promise
						if (!oResult){
//							user cancellation
							fnReject();
						} else {
							fnActionCallResolve(oResult);
						}
					}
				}, function(oError){
					if (!oError){
//						new logic
//						user cancellation
						fnReject();
					} else {
//						old logic - can be deleted as soon as promise from actionUtil.call always resolves to a second promise
						fnActionCallReject(oError);
					}
				});

			}

			/*
			 * Calls an OData action (also called OData function import). Afterwards the message handling
			 * is triggered for the returned messages.
			 *
			 * @param {object} mParameters Parameters which are used to identify and fire action
			 * @param {array} mParameters.contexts Contexts relevant for action
			 * @param {string} mParameters.functionImportPath Path to the OData function import
			 * @param {object} [mParameters.sourceControl] Control where a navigation starts (e.g. table)
			 * @param {object} [mParameters.navigationProperty] Property to navigate after action
			 * @param {string} [mParameters.label] Text for the confirmation popup
			 *
			 * @returns {Promise} A Promise that resolves if the action has been executed successfully
			 *
			 * @public
			 */
			function callAction(mParameters, oState) {
				var oRet = new Promise(function(fnResolve, fnReject){
					oServices.oApplication.performAfterSideEffectExecution(callActionImpl.bind(null, mParameters, oState, fnResolve, fnReject));
				});
				return oRet;
			}

			/*
			 * Adds an entry to a table.
			 *
			 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table to which an entry has been added
			 */
			function addEntry(oTable) {

				if (!oTable) {
					throw new Error("Unknown Table");
				}

				var sBindingPath = "";
				var sTableBindingPath = "";
				var oComponent = oController.getOwnerComponent();
				var sEntitySet = ( oComponent.getCreationEntitySet && oComponent.getCreationEntitySet() ) || oComponent.getEntitySet();
				var oEntityType, oEntitySet, oNavigationEnd, oMetaModel;
				var oView = oController.getView();
				var oModel = oView.getModel();

				var oViewContext = oView.getBindingContext();
				if (oViewContext) {
					// Detail screen
					sTableBindingPath = oCommonUtils.getTableBindingInfo(oTable).path;

					// get entityset of navigation property
					oMetaModel = oModel.getMetaModel();
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oNavigationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sTableBindingPath);
					if (oNavigationEnd) {
						sEntitySet = oNavigationEnd.entitySet;
					}

					// create binding path
					sTableBindingPath = "/" + sTableBindingPath;
					sBindingPath = oViewContext.getPath() + sTableBindingPath;
				} else {
					// on list, support only one entityset mapped to the root component
					sBindingPath = "/" + sEntitySet;
				}

				var oCreatePromise = CRUDHelper.create(oServices.oDraftController, sEntitySet, sBindingPath, oModel, oServices.oApplication.setEditableNDC);
				oServices.oApplication.getBusyHelper().setBusy(oCreatePromise);

				return oCreatePromise.then(
					function(oContext) {
						return {
							newContext: oContext,
							tableBindingPath: sTableBindingPath
						};
					},
					handleError.bind(null, MessageUtils.operations.addEntry, function(oError){throw oError;})
				);
			}

			/* eslint-disable */
			var handleError = testableHelper.testable(handleError, "handleError");
			var getActionUtil = testableHelper.testable(getActionUtil, "getActionUtil");
			/* eslint-enable */

			return {
				editEntity: editEntity,
				deleteEntity: deleteEntity,
				deleteEntities: deleteEntities,
				saveEntity: saveEntity,
				activateDraftEntity: activateDraftEntity,
				callAction: callAction,
				addEntry: addEntry
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.CRUDManager", {
				constructor: function(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper) {
					jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils, oBusyHelper));
				}
			});
	});
}; // end of sap/suite/ui/generic/template/lib/CRUDManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonEventHandlers') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonEventHandlers'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Time'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonEventHandlers",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/format/DateFormat", "sap/m/Select", "sap/m/MessageBox", "sap/m/MessageToast", "sap/m/Table",
	"sap/ui/model/Filter", "sap/ui/model/Sorter", "sap/ui/comp/smartfilterbar/SmartFilterBar","sap/ui/table/AnalyticalTable", "sap/ui/table/Table", "sap/ui/model/odata/type/Time",
	"sap/suite/ui/generic/template/lib/testableHelper","sap/ui/table/TreeTable","sap/ui/model/json/JSONModel","sap/ui/core/mvc/ViewType"
], function(jQuery, BaseObject, DateFormat, Select, MessageBox, MessageToast, Table, Filter, Sorter,
	SmartFilterBar, AnalyticalTable, UiTable, Time, testableHelper, TreeTable, JSONModel, ViewType) {

	"use strict";

	function fnGroupFunction(sPath) {
		// coding for finding the right key and label for the grouping row of a table
		// hope to replace this by core functionality soon
		var sText = "";
		var mTypeMap = []; // buffer for subsequent calls
		var sTextArrangement;
		return function(oContext) {
			var sLabel = "";
			var sTextPath = sPath;
			var oTypeMap;
			// check for existing entry in buffer
			for (var h in mTypeMap) {
				if (mTypeMap[h].path === sPath) {
					oTypeMap = mTypeMap[h];
					break;
				}
			}
			if (!oTypeMap) {
				// not in buffer
				var oMetaModel = oContext.getModel("entitySet").getMetaModel();
				var oMetaEntityType = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath).sPath);
				var oProperty = oMetaModel.getObject(oMetaModel.getMetaContext(oContext.sPath + "/" + sPath).sPath);
				if (oProperty) {
					var sFormat = " ";
					for (var k = 0; oProperty.extensions && k < oProperty.extensions.length; k++) {
						if (oProperty.extensions[k].namespace === "http://www.sap.com/Protocols/SAPData") {
							switch (oProperty.extensions[k].name) {
								case "display-format":
									sFormat = oProperty.extensions[k].value;
									break;
								case "label":
									sLabel = oProperty.extensions[k].value;
									break;
								case "text":
									var sTextProperty = oProperty.extensions[k].value;
									var aSplitPath = sPath.split("/");
									aSplitPath[aSplitPath.length - 1] = sTextProperty;
									sTextPath = aSplitPath.join("/");
									break;
								default:
									break;
							}
						}
					}
					if (sLabel === "") {
						sLabel = sPath;
					}
					// find the text arrangement of the grouping property.
					sTextArrangement = sap.suite.ui.generic.template.js.AnnotationHelper.getTextArrangement(oMetaEntityType, oProperty);
					// fill buffer
					oTypeMap = {
							path: sPath,
							data: {
								type: oProperty.type,
								displayFormat: sFormat,
								label: sLabel,
								textPath: sTextPath,
								textArrangement: sTextArrangement
							}
					};
					mTypeMap.push(oTypeMap);
				}
			}
			// Now it's time to fix the right label
			sLabel = oTypeMap.data.label;
			var sPropertyValue = oContext.getProperty(sPath);
			var sAssociatedText;
			if (oTypeMap.data.textPath && oTypeMap.data.textPath !== "") {
				sAssociatedText = oContext.getProperty(oTypeMap.data.textPath);
			}
			switch (oTypeMap.data.type) {
				case "Edm.DateTime":
					if (oTypeMap.data.displayFormat === "Date") {
						var dateFormat = DateFormat.getDateInstance({style : "medium"}); //better than specifying with a pattern since the language can be considered
						var TZOffsetMs = new Date(0).getTimezoneOffset() * 60 * 1000;
						if (sPropertyValue && sPropertyValue !== "" && sPropertyValue.getTime){
							sPropertyValue = dateFormat.format(new Date(sPropertyValue.getTime() + TZOffsetMs));
						}
					}
					break;
				case "Edm.Time":
					if (sPropertyValue && sPropertyValue !== ""){
						var oTime = new Time();
						sPropertyValue = oTime.formatValue(sPropertyValue, "string");
					}
					break;
				case "Edm.Boolean":
					if (sPropertyValue === true) {
						sPropertyValue = "{i18n>YES}";
					} else if (sPropertyValue === false) {
						sPropertyValue = "{i18n>NO}";
					}
					break;
				default:
					break;
			}
			if (!sAssociatedText || oTypeMap.data.textPath === sPath) { // when there is no text property or text association is null or undefined
				sText = sPropertyValue ? sPropertyValue : "" ;
			} else { // when there is text property or text association
				switch (oTypeMap.data.textArrangement) {
				case "idAndDescription":											//TEXT_LAST
					sText = sPropertyValue + " (" +  sAssociatedText  + ")";
					break;
				case "idOnly":														//TEXT_SEPARATE
					sText = sPropertyValue;
					break;
				case "descriptionOnly":												//TEXT_ONLY
					sText = sAssociatedText;
					break;
				default:
					sText = sAssociatedText + " (" + sPropertyValue  + ")";			//TEXT_FIRST
				break;
				}
			}
			return {
				key: sText ? sText : sPath,
				text: sLabel ? sLabel + ": " + sText : sText
			};
		};
	}

	function getMethods(oController, oComponentUtils, oServices, oCommonUtils) {

		function fnEvaluateParameters(oParameters){
			var result = {};
			for (var prop in oParameters){
				var oParameterValue = oParameters[prop];

				if (typeof oParameterValue === "string"){
					result[prop] = oParameterValue;
				} else if (typeof oParameterValue === "object"){
					if (oParameterValue.value){
						result[prop] = fnEvaluateParameters(oParameterValue).value;
					} else {
						result[prop] = oParameterValue;
					}
				}
			}
			return result;
		}

		// TODO: Check
		// Fix for BCP 1770053414 where error message is displayed instead of error code
		function fnHandleError(oError) {
			if (oError instanceof sap.ui.generic.app.navigation.service.NavError) {
				if (oError.getErrorCode() === "NavigationHandler.isIntentSupported.notSupported") {
					sap.m.MessageBox.show(oCommonUtils.getText("ST_NAV_ERROR_NOT_AUTHORIZED_DESC"), {
						title: oCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
					});
				} else {
					sap.m.MessageBox.show(oError.getErrorCode(), {
						title: oCommonUtils.getText("ST_GENERIC_ERROR_TITLE")
					});
				}
			}
		}

		function getActiveSibling() {
			var oContext = oController.getView().getBindingContext();
			return oServices.oApplication.getDraftSiblingPromise(oContext);
		}

        function storeObjectPageNavigationRelatedInformation(oEventSource) {
			var oRow = oEventSource;
			var iIdx = -1;
			var oTable = oCommonUtils.getOwnerControl(oEventSource);


			if (oTable.getTable) {
				oTable = oTable.getTable();
			}


			var bIsAnalyticalTbl = oTable instanceof AnalyticalTable;
			var iViewLevel = oComponentUtils.getViewLevel();
			var oPaginatorInformation;

			if (!bIsAnalyticalTbl) { // up/down navigation is not enabled in the analytical table scenario

				// get the table list binding now
				var oTableBindingInfo = oCommonUtils.getTableBindingInfo(oTable);
				var oListBinding = oTableBindingInfo && oTableBindingInfo.binding;
				var aCurrContexts = null;

				if (oListBinding) {
					//Getting context for Tree Table.
					if (oTable instanceof TreeTable) {
						var oContextsLenght = (oListBinding.getLength() > 0 ) ? oListBinding.getLength() : 0;
						if (oContextsLenght > 0) {
							aCurrContexts = [];
							for (var index = 0; index < oContextsLenght; index++) {
								aCurrContexts.push(oListBinding.getContextByIndex(index));
							}
						}
					} else	if (oTable instanceof UiTable) {
						// possibly a bug in the UI5 framework itself .. getCurrentContexts() only returns the contexts of selected rows in the table
						aCurrContexts = oListBinding.getContexts();
					} else if (oTable instanceof Table) {
						aCurrContexts = oListBinding.getCurrentContexts();
					}
				}


				var oContext = null;
				var aSelectedContexts = oCommonUtils.getSelectedContexts(oTable);
				var sSelectedBindingPath = null;

				if (aSelectedContexts && aSelectedContexts.length > 0) {
					sSelectedBindingPath = aSelectedContexts[0].getPath();
				} else if (oRow) {
						// When a row not selected explicitly - navigation using (list tab)/(row action)
						sSelectedBindingPath = oRow.getBindingContext() ? oRow.getBindingContext().sPath : null;
				}

				// get index of selected item
				if (oListBinding && oListBinding.getContexts && sSelectedBindingPath) {
					for (var i = 0; i < aCurrContexts.length; i++) {
						oContext = aCurrContexts[i];
						if (oContext.getPath() === sSelectedBindingPath) {
							iIdx = i;
							break;
						}
					}
				}

				if (oTable && iIdx !== -1 && aCurrContexts.length > 0) {
					var iThreshold;

					if (oTable instanceof Table) {
						iThreshold = oTable.getGrowingThreshold();
					} else if (oTable instanceof UiTable) {
						iThreshold = oTable.getThreshold();
					} // in all other cases a default value for the threshold will be determined by PaginatorButtonHelper on demand



		            // Get navigation property.. to be used in construction of new URL
					// check if it is to be navigation using a nav property
					var sNavigationProperty = iViewLevel > 0 ? oCommonUtils.getTableBindingInfo(oTable).path : null;

					var fnNavigitionInfoProvider = function(oCtx){
						return {
							context: oCtx,
							navigationData: {
								navigationProperty: sNavigationProperty
							}
						};
					};

					oPaginatorInformation = aCurrContexts && {
						listBinding: oListBinding,
						growingThreshold: iThreshold,
						selectedRelativeIndex: iIdx,
						objectPageNavigationContexts: aCurrContexts,
						navigitionInfoProvider: fnNavigitionInfoProvider
					};
				}
			}
			var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
			oTemplatePrivateGlobalModel.setProperty("/generic/paginatorInfo/" + iViewLevel, oPaginatorInformation);
		}

		// injection of $select for smart table - only subset of fields is requested (line items) but technical fields
		// are; required as well: semantic
		// key, technical key + IsDraft / HasTwin
		function getTableQueryParameters(sEntitySet, oExistingQueryParameters) { // #ListController
			var oMetaModel = oController.getView().getModel().getMetaModel();
			var oBindingParams = oExistingQueryParameters;
			var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet, false);
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
			var aMandatoryFields = oEntityType.key.propertyRef;
			var i;

			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet)) {
				aMandatoryFields = aMandatoryFields.concat(oDraftContext.getSemanticKey(sEntitySet));
				aMandatoryFields.push({
					name: "IsActiveEntity"
				}, {
					name: "HasDraftEntity"
				}, {
					name: "HasActiveEntity"
				});
			}

			if (oBindingParams.parameters.select && oBindingParams.parameters.select.length > 0) {
				// at least one select parameter
				var aSelects = oBindingParams.parameters.select.split(",");
				for (i = 0; i < aMandatoryFields.length; i++) {
					if (jQuery.inArray(aMandatoryFields[i].name, aSelects) === -1) {
						oBindingParams.parameters.select += "," + aMandatoryFields[i].name;
						// To make sure we don't query for same field more than once - BCP 1680262167
						aSelects = oBindingParams.parameters.select.split(",");
					}
				}
			}
			return oBindingParams;
		}

		function onSmartFieldUrlPressed(oEvent, oState) {
			var sUrl = oEvent.getSource().getUrl();
			oEvent.preventDefault();
			//determination if Url is pointing externally, and only then open in a new window - not yet implemented
			//only then the data loss popup is needed when replacing the existing page
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				sap.m.URLHelper.redirect(sUrl, false);
				}, jQuery.noop, oState);
		}

		function onBreadCrumbUrlPressed(oEvent, oState) {
			oEvent.preventDefault();
			/*Lokal - oEvent.getSource().getHref() returns #/STTA_C_SO_SalesOrder_ND('500000011')
			  HCP   - oEvent.getSource().getHref() returns #EPMSalesOrderND-manage_sttasond&//STTA_C_SO_SalesOrder_ND('500000011')
			  Techn - oEvent.getSource().getHref() returns #EPMProduct-manage_stta&/STTA_C_MP_Product(ProductDraftUUID=guid'00000000-0000-0000-0000-000000000000',ActiveProduct='HT-1001')/to_ProductText(ProductTextDraftUUID=guid'00000000-0000-0000-0000-000000000000',ActiveProduct='HT-1001',ActiveLanguage='ZH')*/
			var sHref = oEvent.getSource().getHref(); //return the hash that has been set during fnBindBreadcrumbs in OP controller
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				window.location.hash = sHref; //also updates the browser history
				}, jQuery.noop, oState);
		}

		/**
		 * Return an instance of the DeleteConfirmation fragment
		 *
		 * @param {sap.m.Table} table
		 * @return {sap.m.Dialog} - returns the Delete Confirmation Dialog
		 * @private
		 */
		function getDeleteDialog(smartTable) {
			var aDraftPathsToBeDeleted = [];  //contains target of draft only
			return oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.ListReport.view.fragments.DeleteConfirmation", {
				onCancel: function(oEvent) {
					var oDialog = oEvent.getSource().getParent();
					oDialog.close();
				},
				onDelete: function(oEvent) {
					var oDialog = oEvent.getSource().getParent();
					var oDialogModel = oDialog.getModel("delete");
					var aSelectedItems = oDialogModel.getProperty("/items");
					var aPathsToBeDeletedActive = []; // contains only active entities whose draft does not exist
					var aPathsToBeDeletedDraftActive = [];  // contains selected Drafts and all Active entities for fallback
					var aPathsToBeDeletedDActive = []; // contains active of draft entities
					aDraftPathsToBeDeleted = [];
					// determine which items to delete
					for (var i = 0; i < aSelectedItems.length; i++) {
						if (!aSelectedItems[i].draftStatus.locked && aSelectedItems[i].deletable) {
							if (!aSelectedItems[i].draftStatus.draft) {
								if (aSelectedItems[i].draftStatus.draftActive) {
									aPathsToBeDeletedDActive.push(aSelectedItems[i].context.sPath);
								} else if (aSelectedItems.length === oDialogModel.getProperty("/unsavedChangesItemsCount") || !aSelectedItems[i].draftStatus.unsavedChanges ||
									oDialogModel.getProperty("/checkboxSelected")) {
									aPathsToBeDeletedActive.push(aSelectedItems[i].context.sPath);
								}
							} else {
								aPathsToBeDeletedDraftActive.push(aSelectedItems[i].context.sPath);
								aDraftPathsToBeDeleted.push(aSelectedItems[i].context.sPath);
							}
						}
					}

					aPathsToBeDeletedDraftActive =  aPathsToBeDeletedDraftActive.concat(aPathsToBeDeletedActive).concat(aPathsToBeDeletedDActive);

					// delete
					oServices.oCRUDManager.deleteEntities(aPathsToBeDeletedDraftActive).then(
						function(aFailedPath) {
							//BCP 1780101314
							var iCountDeletedDraftTargetMatch = 0;
							var aFailedTargetPath = [];
							for (var i = 0; i < aFailedPath.length; i++) {
								//when property like unit of measure is included in the target property i.e. /EntityType(key='')/PropertyName
								aFailedTargetPath.push("/" + aFailedPath[i].split('/')[1]);
								if (aDraftPathsToBeDeleted.indexOf(aFailedTargetPath[i]) !== -1) {
									iCountDeletedDraftTargetMatch = iCountDeletedDraftTargetMatch + 1;
								}
							}
							// remove selections from the table and set the delete button to disabled
							var oTable = smartTable.getTable();
							oTable.getModel("_templPriv").setProperty("/listReport/deleteEnabled", false);
							var iSuccessfullyDeleted = aPathsToBeDeletedDraftActive.length - aPathsToBeDeletedDActive.length - (aFailedPath.length - iCountDeletedDraftTargetMatch);

							if ((aFailedPath.length - iCountDeletedDraftTargetMatch) > 0) {
								var sErrorMessage = "";
								if (iSuccessfullyDeleted > 0) {

									// successful delete
									sErrorMessage += (iSuccessfullyDeleted > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL_WITH_COUNT", [iSuccessfullyDeleted]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_WITH_COUNT", [iSuccessfullyDeleted]);

									// failed deletes
									sErrorMessage += "\n";
									sErrorMessage += (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL_WITH_COUNT", [aFailedPath.length]) :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_WITH_COUNT", [aFailedPath.length]);

								} else {
									sErrorMessage = (aFailedPath.length > 1) ?
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL") :
										oCommonUtils.getText("ST_GENERIC_DELETE_ERROR");
								}

								MessageBox.error(sErrorMessage);

							} else {
								var sSuccessMessage = "";
								sSuccessMessage = (iSuccessfullyDeleted > 1) ?
									oCommonUtils.getText("ST_GENERIC_DELETE_SUCCESS_PLURAL") :
									oCommonUtils.getText("ST_GENERIC_OBJECT_DELETED");

								oServices.oApplication.showMessageToast(sSuccessMessage);
							}

							oCommonUtils.refreshSmartTable(smartTable);
						},
						function(oError) {
							// this could be a different message b/c the batch request has failed here
							MessageBox.error(oCommonUtils.getText("ST_GENERIC_DELETE_ERROR_PLURAL", [aPathsToBeDeletedDraftActive.length]), {
								styleClass: oCommonUtils.getContentDensityClass()
							});
						}
					);
					oDialog.close();
				}
			}, "delete");
		}

		/**
		 * Return the promise containing draft's sibling entity
		 *
		 * @param {String} sPath - contains path of the entity
		 * @param {object} oModel - contains oDataModel
		 * @return Promise
		 * @private
		 */

		function createDraftSiblingPromise(sPath, oModel) {
		    return new Promise(function(fnResolve, fnReject) {
		        oModel.read(sPath + "/SiblingEntity", {
		            success: function(oResponseData) {
		                var sActive = "/" + oModel.getKey(oResponseData);
		                fnResolve(sActive);
		            },
		            error: function(oError) {
		                var sError = "Error";
		                fnResolve(sError);
		            }
		        });
		    });
		}

		/**
		 * Return the data necessary for the Delete Confirmation Dialog
		 *
		 * @param [sap.m.ListItemBase] selectedItems
		 * @return {map} JSON map containing the data for the Delete Confirmation Dialog
		 * @private
		 */
		function getDataForDeleteDialog(selectedItems) {
			var oModel = oController.getView().getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
			var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable &&  oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";

			var mJSONData = {
				items: undefined,
				itemsCount: selectedItems.length,
				text: {
					title: undefined,
					shortText: undefined,
					unsavedChanges: undefined,
					longText: undefined,
					undeletableText: undefined
				},
				lockedItemsCount: 0,
				unsavedChangesItemsCount: 0,
				undeletableCount: 0,
				checkboxSelected: true
			};

			// Enhance the items with their context and draft status. Also keep track of the number of locked and unsaved items
			// + Enhance with undeletable status and track number of undeletable items
			var aItems = [];
			var aActiveArray = []; // This array contains active entities of draft
			var oEntity, mDraftStatus, mActive, bDeletable, oActiveEntity;
			var aPromise = [];

			for (var i = 0; i < selectedItems.length; i++) {
				oEntity = oModel.getObject(selectedItems[i].getPath());
				if (!oEntity.IsActiveEntity) { // if the entity is not an active entity, we can assume it is a draft
					if (oEntity.HasActiveEntity) {
						aPromise.push(
							createDraftSiblingPromise(selectedItems[i].getPath(), oModel)
						);
					}
				}
			}
			var iActiveIterator = 0;

			return new Promise(function(fnResolve, fnReject) {
				Promise.all(aPromise).then(function(aResponses) {
					for (var i = 0; i < selectedItems.length; i++) {
						oEntity = oModel.getObject(selectedItems[i].getPath());
						mDraftStatus = {};
						mActive = {};
						bDeletable = true;
						oActiveEntity = {};

						if (!oEntity.IsActiveEntity) { // if the entity is not an active entity, we can assume it is a draft
							mDraftStatus.draft = true;

							if (oEntity.HasActiveEntity) {
								mActive.draft = false;
								mActive.draftActive = true;

								if (aResponses[iActiveIterator] != "Error") {
								    oActiveEntity["oModel"] = selectedItems[0].getModel();
								    oActiveEntity["sPath"] = aResponses[iActiveIterator++];
								}
							}
						} else if (oEntity.HasDraftEntity) { // if the entity is an active entity AND has a draft entity, we can assume someone else has a draft of the entity
							// check if first and last name are provided. If not then take technical user name
							var sLockedBy = oModel.getProperty("DraftAdministrativeData/CreatedByUserDescription", selectedItems[i]);
							if (!sLockedBy){
								sLockedBy = oModel.getProperty("DraftAdministrativeData/InProcessByUser", selectedItems[i]);
							}

							if (sLockedBy) { // if there is a user processing the entity, it is locked
								mDraftStatus.locked = true;
								mDraftStatus.user = sLockedBy;
								mJSONData.lockedItemsCount++;
							} else { // else the entity has unsaved changes
								mDraftStatus.unsavedChanges = true;
								mDraftStatus.user = oModel.getProperty("DraftAdministrativeData/LastChangedByUser", selectedItems[i]);
								mJSONData.unsavedChangesItemsCount++;
							}
						}

						if (sDeletablePath && sDeletablePath !== "") {
							if (oModel.getProperty(sDeletablePath, selectedItems[i]) === false) {
								bDeletable = false;
								mJSONData.undeletableCount++;
							}
						}

						aItems.push({
							context: selectedItems[i],
							draftStatus: mDraftStatus,
							deletable: bDeletable
						});

						// Pushing Active entities of Draft
						if (!oEntity.IsActiveEntity && oEntity.HasActiveEntity) {
							aActiveArray.push({
								context : oActiveEntity,
								draftStatus : mActive,
								deletable : bDeletable
							});
						}
					}

					if (aActiveArray.length > 0) {
						aItems = aItems.concat(aActiveArray);
					}
					mJSONData.items = aItems;

					// determine Dialog title
					if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
						mJSONData.text.title = oCommonUtils.getText("ST_GENERIC_ERROR_TITLE");
					} else {
						mJSONData.text.title = (mJSONData.itemsCount > 1) ?
							oCommonUtils.getText("ST_GENERIC_DELETE_TITLE_WITH_COUNT", [mJSONData.itemsCount]) :
							oCommonUtils.getText("ST_GENERIC_DELETE_TITLE");
					}

					// determine unsavedChanges Checkbox text
					mJSONData.text.unsavedChanges = oCommonUtils.getText("ST_GENERIC_UNSAVED_CHANGES_CHECKBOX");

					// determine short text
					if (mJSONData.itemsCount > 1) {
						if (mJSONData.lockedItemsCount === mJSONData.itemsCount) {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED_PLURAL");
						} else if (mJSONData.unsavedChangesItemsCount === mJSONData.itemsCount) {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES_PLURAL");
						} else if (mJSONData.lockedItemsCount > 0) {
							var iRemainingItems = mJSONData.itemsCount - mJSONData.lockedItemsCount;
							// 1st part of message
							mJSONData.text.shortText = (mJSONData.lockedItemsCount > 1) ?
								oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED_PLURAL", [mJSONData.lockedItemsCount, mJSONData.itemsCount]) :
								oCommonUtils.getText("ST_GENERIC_CURRENTLY_LOCKED", [mJSONData.itemsCount]);

							mJSONData.text.shortText += "\n";
							// 2nd part of message
							if (iRemainingItems === mJSONData.unsavedChangesItemsCount) {
								mJSONData.text.shortText += (iRemainingItems > 1) ?
									oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES_PLURAL") :
									oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_UNSAVED_CHANGES");
							} else {
								mJSONData.text.shortText += (iRemainingItems > 1) ?
									oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING_PLURAL", [iRemainingItems]) :
									oCommonUtils.getText("ST_GENERIC_DELETE_REMAINING");
							}
						} else {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED_PLURAL");
						}

						if (mJSONData.undeletableCount > 0) {
							mJSONData.text.undeletableText = oCommonUtils.getText("ST_GENERIC_DELETE_UNDELETABLE", [mJSONData.undeletableCount, mJSONData.itemsCount]);
						}
					} else {
						if (mJSONData.lockedItemsCount > 0) {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_LOCKED", [" ", mJSONData.items[0].draftStatus.user]);
						} else if (mJSONData.unsavedChangesItemsCount > 0) {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_UNSAVED_CHANGES", [" ", mJSONData.items[0].draftStatus.user]);
						} else {
							mJSONData.text.shortText = oCommonUtils.getText("ST_GENERIC_DELETE_SELECTED");
						}
					}

					fnResolve({
						"mJSONData": mJSONData
					});
				});
			});
		}

		function fnShowError(sErrorMessageKey) {
			MessageBox.error(oCommonUtils.getText(sErrorMessageKey), {
				styleClass: oCommonUtils.getContentDensityClass()
			});
		}

		function fnBuildSelectionVariantForNavigation(oOutbound, oLineContext, oPageContext, sFilterBarSelectionVariant){
			var oNavigationHandler = oCommonUtils.getNavigationHandler();
			var oOutboundParametersEmpty = {};
			var oOutboundParameters = {};
			for (var prop in oOutbound.parameters){
				if (jQuery.isEmptyObject(oOutbound.parameters[prop])){
					oOutboundParametersEmpty[prop] = oOutbound.parameters[prop];
				} else {
					oOutboundParameters[prop] = oOutbound.parameters[prop];
				}
			}
			oOutboundParameters = fnEvaluateParameters(oOutboundParameters);
			oNavigationHandler.mixAttributesAndSelectionVariant({}, sFilterBarSelectionVariant).getParameterNames().forEach(
					function(prop) {delete oOutboundParametersEmpty[prop];});
			var oPageContextObject = oPageContext && oPageContext.getObject();
			var oLineContextObject = oLineContext && oLineContext.getObject();
			var oMixedContextObject = jQuery.extend({}, oOutboundParametersEmpty, oPageContextObject, oLineContextObject, oOutboundParameters);
			return oNavigationHandler.mixAttributesAndSelectionVariant(oMixedContextObject, sFilterBarSelectionVariant);
		}

		function fnNavigateIntent(oOutbound, oContext, oSmartFilterBar, oSmartControl) {
			var oNavigationHandler = oCommonUtils.getNavigationHandler();
			var sSelectionVariant;
			if (oSmartFilterBar) {
				sSelectionVariant = oSmartFilterBar.getDataSuiteFormat();
			}
			var oSelectionVariant = fnBuildSelectionVariantForNavigation(oOutbound, oContext, oController.getView().getBindingContext(), sSelectionVariant);
			var oObjectInfo = {
					semanticObject: oOutbound.semanticObject,
					action: oOutbound.action
			};
			oController.adaptNavigationParameterExtension(oSelectionVariant, oObjectInfo);
			oNavigationHandler.navigate(oOutbound.semanticObject, oOutbound.action, oSelectionVariant.toJSONString(),
					null, fnHandleError);
			//null object has to be passed to the NavigationHandler as an
			//indicator that the state should not be overwritten
		}

		function fnNavigateIntentSmartLink(oOutbound) {
			var oNavigationHandler = oCommonUtils.getNavigationHandler();
			var oObjectInfo = {
				semanticObject: oOutbound.semanticObject,
				action: oOutbound.action
			};
			var oSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oOutbound.semanticAttributes);
			oController.adaptNavigationParameterExtension(oSelectionVariant, oObjectInfo);
			oNavigationHandler.navigate(oOutbound.semanticObject, oOutbound.action, oSelectionVariant.toJSONString(), null, fnHandleError);
		}

		function fnHideTitleArea(oSmLiContent,aContactTitleArea) {
			//get title data
			var oIcon = oSmLiContent.byId("icon");	// oIcon can be undefined, since the icon is optional
			var sIcon = oIcon && oIcon.getSrc();
			if (sIcon === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
				sIcon = undefined;
			}
			var oTitle = oSmLiContent.byId("title");
			var sTitle = oTitle && oTitle.getText();//oTitle must always be there
			if (sTitle === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
				sTitle = undefined;
			}
			var oDescription = oSmLiContent.byId("description");
			var sDescription = oDescription && oDescription.getText(); //oDescription must always be there
			if (sDescription === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
				sDescription = undefined;
			}

			//check against contacts
			for (var j = 0; j < aContactTitleArea.length; j++) {
				var oContactTitleArea = aContactTitleArea[j];
				var sContactTitleAreaIdIcon  = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oContactTitleArea) + "::contactTitleAreaIcon";
				var oContactTitleAreaIdIcon = oSmLiContent.byId(sContactTitleAreaIdIcon); 				// can be undefined
				var sContactTitleAreaIdTitle  = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oContactTitleArea) + "::contactTitleAreaTitle";
				var oContactTitleAreaIdTitle = oSmLiContent.byId(sContactTitleAreaIdTitle); 			// can be undefined
				var sContactTitleAreaIdDescription  = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oContactTitleArea) + "::contactTitleAreaDescription";
				var oContactTitleAreaIdDescription = oSmLiContent.byId(sContactTitleAreaIdDescription); // can be undefined

				var sContactTitleAreaIcon = oContactTitleAreaIdIcon && oContactTitleAreaIdIcon.getSrc();
				if (sContactTitleAreaIcon === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
					sContactTitleAreaIcon = undefined;
				}
				var sContactTitleAreaTitle = oContactTitleAreaIdTitle && oContactTitleAreaIdTitle.getText();
				if (sContactTitleAreaTitle === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
					sContactTitleAreaTitle = undefined;
				}
				var sContactTitleAreaDescription = oContactTitleAreaIdDescription && oContactTitleAreaIdDescription.getText();
				if (sContactTitleAreaDescription === ""){ // can be undefined - to make a later comparism easier set it to undefined if the value is ""
					sContactTitleAreaDescription = undefined;
				}

				//only hide the title area in case of filled fields - issue with timing of the hide check, therefore only checking if filled
				if ( sIcon 			&& sContactTitleAreaIcon &&
					sTitle 		&& sContactTitleAreaTitle &&
					sDescription 	&& sContactTitleAreaDescription) {

					if ( (sIcon === sContactTitleAreaIcon || !sContactTitleAreaIcon) &&
					 (sTitle === sContactTitleAreaTitle || !sContactTitleAreaTitle) &&
					 (sDescription === sContactTitleAreaDescription || !sContactTitleAreaDescription)) {
						var sContactTitleAreaId = sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oContactTitleArea) + "::contactTitleArea";
						var oContactTitleAreaId = oSmLiContent.byId(sContactTitleAreaId);
						if (oContactTitleAreaId && oContactTitleAreaId.setVisible) {
							oContactTitleAreaId.setVisible(false);
						}
						//below is the old way of doing it:
						/*oContactQuickViewPage.setDescription("ccc") is not possible since of 2 way binding, also other entries are updated
                          the QuickViewPage does not have property to hide only the header
                        var sContactQuickViewPageQueryId = "#" + oContactQuickViewPage.getId();
                        var oContactQuickViewPageQuery = jQuery(sContactQuickViewPageQueryId);
                        var oContactQuickViewPageQueryFirstChild = oContactQuickViewPageQuery && oContactQuickViewPageQuery.children() && oContactQuickViewPageQuery.children().first();
                        if (oContactQuickViewPageQueryFirstChild && oContactQuickViewPageQueryFirstChild.remove) {
                            oContactQuickViewPageQueryFirstChild.remove();
                        }*/
					}
				}
			}
		}

		function fnNavigateIntentManifest(oEventSource, oContext, oSmartFilterBar, oSmartChart) {
			var oManifestEntry = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app");
			var oOutbound = oManifestEntry.crossNavigation.outbounds[oEventSource.data("CrossNavigation")];
			var oSmartControl;
			if (oSmartFilterBar) {
				// To navigate from new showdetails item for chart
				if (oEventSource instanceof sap.ui.comp.smartchart.SmartChart){
					oSmartControl = oCommonUtils.getOwnerControl(oSmartChart);
				} else {
					oSmartControl = oCommonUtils.getOwnerControl(oEventSource).getParent();
				}
			}
			fnNavigateIntent(oOutbound, oContext, oSmartFilterBar, oSmartControl);
		}

		function fnExpandOnNavigationProperty (aPath, aExpands) {
			// check if any expand is neccessary
			for (var i = 0; i < aPath.length; i++) {
				// check if expand is neccessary
				if (aPath[i].indexOf("/") !== -1) {
					var aParts = aPath[i].split("/");
					// remove property from path
					aParts.pop();
					var sNavigation = aParts.join("/");
					if (aExpands.indexOf(sNavigation) === -1) {
						aExpands.push(sNavigation);
					}
				}
			}
		}

		function fnSemanticObjectLinkPopoverLinkPressed (oEvent, oState){
			//TODO: check if we need it ??? my Answer is NO.
			/*oEvent.preventDefault();
			var oTempEvent = jQuery.extend(true, {}, oEvent);
			oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
				//retrigger the navigation, but how?
			}, jQuery.noop, oState, jQuery.noop, true);
			*/
		}

		// TABLE TABS ONLY
		function fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oBindingParams) {
			var oConfig = oController.getOwnerComponent().getAppComponent().getConfig();
			if (oController.getMetadata().getName() === 'sap.suite.ui.generic.template.ListReport.view.ListReport'
					&& oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings && (oConfig.pages[0].component.settings.quickVariantSelectionX || oConfig.pages[0].component.settings._quickVariantSelectionX)) {
				// apply filters from smart filter bar
				var aFilters = oSmartFilterBar.getFilters();
				if (aFilters) {
					for (var i in aFilters) {
						oBindingParams.filters.push(aFilters[i]);
					}
				}
			}
		}

		function fnOnSemanticObjectLinkNavigationPressed(oEventSource, oEventParameters){
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var sSemanticObject = oEventSource.data('SemanticObject');
				var sAction = oEventSource.data('Action');
				var sSemanticAttributes = oEventSource.data('SemanticAttributes');
				if (sSemanticObject && sAction){
					var oOutbound = {
							semanticObject: sSemanticObject,
							action: sAction
					};
					if (sSemanticAttributes) {
						sSemanticAttributes = "{" + sSemanticAttributes + "}";
						oOutbound.semanticAttributes = JSON.parse(sSemanticAttributes);
					}
					fnNavigateIntentSmartLink(oOutbound);
				}
			}, jQuery.noop);
		}

		function fnOnSemanticObjectLinkNavigationTargetObtained(oEventSource, oEventParameters, oState, sTitle, oMainNavigation) {

			var sSourceClickedField = "";

			//var oClickedFieldProperty;
			var proceedWithClickedField = function(oReferentialConstraint){

				var sPropertyRefName = oReferentialConstraint.dependent.propertyRef[0].name;
				var sClickedFieldId = oEventParameters.originalId;

				//this works for fields on the object header which have a view relative id, but not in tables
				var oControl = oController.getView().byId(sClickedFieldId);
				if (oControl && oControl.mProperties.fieldName === sPropertyRefName){
					sSourceClickedField = sPropertyRefName;
					//oClickedFieldProperty = oControl.mProperties;
					return true;
				}

				//table fields get an absolute id "__link0-__clone34" - then jQuery is used to retrieve this absolut id (jQuery doesn't work with "::" as in ::Field-sl)
				if (!oControl ){
					var oElement = jQuery( "#" + sClickedFieldId.replace( /(:|\.|\[|\]|,|=)/g, "\\$1" ) );
					if (oElement){
						oControl = oElement.control(0);
						if (oControl){
							if (oControl.mProperties.fieldName === sPropertyRefName){ //standard field CMP field and own smart link
								sSourceClickedField = sPropertyRefName;
								return true;
							} else { //check for semantic key field
								var oTextBindingInfo = oControl.getBindingInfo("text");
								var bCompositeBinding = false;
								if (oTextBindingInfo && oTextBindingInfo.binding){
									var aBindings = oTextBindingInfo.binding.getBindings && oTextBindingInfo.binding.getBindings();
									if (aBindings && aBindings.length > 1){
										bCompositeBinding = true;
									}
									if ( !bCompositeBinding && oTextBindingInfo.binding.getPath && oTextBindingInfo.binding.getPath() === sPropertyRefName){
										sSourceClickedField = sPropertyRefName;
										return true;
									}
								}
								var oTitleBindingInfo = oControl.getBindingInfo("title");
								bCompositeBinding = false;
								if (oTitleBindingInfo && oTitleBindingInfo.binding){
									var aBindings = oTitleBindingInfo.binding.getBindings && oTitleBindingInfo.binding.getBindings();
									if (aBindings && aBindings.length > 1){
										bCompositeBinding = true;
									}
									if ( !bCompositeBinding && oTitleBindingInfo.binding.getPath && oTitleBindingInfo.binding.getPath() === sPropertyRefName){
										sSourceClickedField = sPropertyRefName;
										return true;
									}
								}
							}
						}
					}
				}

				return false;
			};

			var getTargetAnnotation = function() {
				/*  1.	Loop over all Navigation properties
					2.	Look into corresponding association
					3.	Look into referential constraint
					4.	If dependent role PropertyRef = property ==> success QuickView Facets from this entity type can be retrieved
				*/
				var oTargetAnnotation, oMetaModel, oEntitySet, oEntityType, oNavProp, oAssociationEnd, oTargetEntityType;
				oMetaModel = oEventSource.getModel().getMetaModel();
				oEntitySet = oMetaModel.getODataEntitySet(oEventSource.getEntitySet());
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

				if (!oEntityType || !oEntityType.navigationProperty){
					return;
				}

				for (var i = 0; i < oEntityType.navigationProperty.length; i++) {

					oNavProp = oEntityType.navigationProperty[i];
					if (oNavProp.name === "SiblingEntity" ||  oNavProp.name === "DraftAdministrativeData"){
						continue;
					}

					var sQualifiedName = oNavProp.relationship;
					var iSeparatorPos = sQualifiedName.lastIndexOf(".");
					var sNamespace = sQualifiedName.slice(0, iSeparatorPos);
					var sName = sQualifiedName.slice(iSeparatorPos + 1);
					var aSchemas = oMetaModel.getObject("/dataServices/schema");
					var oSchema;

					for (var j in aSchemas) {
						if (aSchemas[j].namespace === sNamespace) {
							oSchema = aSchemas[j];
							break;
						}
					}

					var aArray = oSchema.association;
					var oAssociation;

					for (var j in aArray) {
						if (aArray[j].name === sName) {
							oAssociation = aArray[j];
							break;
						}
					}

					var oReferentialConstraint = oAssociation.referentialConstraint;
					if (oReferentialConstraint && oReferentialConstraint.dependent && oReferentialConstraint.dependent.propertyRef) {
						var bProceed = proceedWithClickedField(oReferentialConstraint);
						if (bProceed){
							oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, oNavProp.name); //to_Supplier
							oTargetEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);

							var oEntityContainer = oMetaModel.getODataEntityContainer();
							var sTargetEntitySet = "";
							var sTargetEntityType = "";
							var sHeaderInfoPath = "";
							for (var j = 0; j < oEntityContainer.entitySet.length; j++) {
								var sTargetEntityTypeTemp = oTargetEntityType.entityType;
								if (!sTargetEntityTypeTemp){
									sTargetEntityTypeTemp = oTargetEntityType.namespace + "." + oTargetEntityType.name;
								}
								if (oEntityContainer.entitySet[j].entityType === sTargetEntityTypeTemp) {
									sTargetEntitySet =  oEntityContainer.entitySet[j].name;
									sTargetEntityType = oEntityContainer.entitySet[j].entityType;
									break;
								}
							}

							oTargetAnnotation = {
								navigation: 	oNavProp.name,
								entitySet:  	sTargetEntitySet,
								entityType: 	sTargetEntityType
							};

							if (oTargetEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] && sTargetEntityType) {
								var sHeaderInfoPath = oMetaModel.getODataEntityType(sTargetEntityType, true) + "/com.sap.vocabularies.UI.v1.HeaderInfo";
								oTargetAnnotation.headerInfoPath = sHeaderInfoPath;
							}

							if (oTargetEntityType["com.sap.vocabularies.UI.v1.QuickViewFacets"] && sTargetEntityType) {
								var sODataQuickViewFacetPath = oMetaModel.getODataEntityType(sTargetEntityType, true) + "/com.sap.vocabularies.UI.v1.QuickViewFacets";
								oTargetAnnotation.quickViewFacetODataPath = sODataQuickViewFacetPath; // e.g. /dataServices/schema/0/entityType/23/com.sap.vocabularies.UI.v1.QuickViewFacets/0/
							}

							return oTargetAnnotation;
						}
					}
				}
				return oTargetAnnotation;
			};

			var oTargetAnnotation = getTargetAnnotation();

			var bQuickViewFacetAvailable = false;
			var bFieldGroupAvailable = false;
			var bContactAvailable = false;
			var aContactTitleArea = [];
			var oComponent = oController.getOwnerComponent();
			var oModel = oComponent.getModel();
			var oMetaModel = oModel.getMetaModel();
			if (oTargetAnnotation){
				if (oTargetAnnotation.quickViewFacetODataPath){
					var oQuickViewFacetBindingContext = oMetaModel.createBindingContext(oTargetAnnotation.quickViewFacetODataPath, true);
					var aQuickViewFacet = oQuickViewFacetBindingContext && oQuickViewFacetBindingContext.getModel().getObject(oQuickViewFacetBindingContext.getPath());
					if (aQuickViewFacet){
						bQuickViewFacetAvailable = true;
						for (var j = 0; j < aQuickViewFacet.length; j++) {
							var oQuickViewFacet = aQuickViewFacet[j];
							if (oQuickViewFacet && oQuickViewFacet.Target && oQuickViewFacet.Target.AnnotationPath) {
								if (oQuickViewFacet.Target.AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.FieldGroup") > -1 ){
									bFieldGroupAvailable = true;
								} else if (oQuickViewFacet.Target.AnnotationPath.indexOf("com.sap.vocabularies.Communication.v1.Contact") > -1 ){
									bContactAvailable = true;
									aContactTitleArea.push(oQuickViewFacet);
								}
							}
						}
					}
				}
			}

			//only if the QuickViewFacet is available we show it AND we take over the CMP title area and if available show the contact
			if (bQuickViewFacetAvailable ){

				var oSourceEntitySet, oSourceEntityType;
				oSourceEntitySet = oMetaModel.getODataEntitySet(oEventSource.getEntitySet());
				oSourceEntityType = oMetaModel.getODataEntityType(oSourceEntitySet.entityType);

				/* --- NEW title area preparation
				   header info is expected for each entity type, if this is not filled  */
				var oHeaderInfoBindingContext = oTargetAnnotation.headerInfoPath && oMetaModel.createBindingContext(oTargetAnnotation.headerInfoPath, true);
				// set header title link if displayFactSheet is available
				var oMainNavigation = oEventParameters.mainNavigation; //for testing ownNavigation can be used if set
				var sSemanticObject = oEventParameters.semanticObject;
				var sAction, oMainNavigationIntent;
				if (sSemanticObject && oMainNavigation){
					//set target
					var sTarget = oMainNavigation.getTarget && oMainNavigation.getTarget() || "";
					//set navigation info
					var sKey = oMainNavigation.getKey && oMainNavigation.getKey();
					if (sKey){ //sKey = "EPMProduct-displayFactSheet"
						var aAction =  sKey.split(sSemanticObject + "-");
						sAction = aAction && aAction[1];
						if (sSemanticObject && sAction){
							oMainNavigationIntent = {
								"Target" : sTarget,
								"SemanticObject": sSemanticObject,
								"Action": sAction
							};
						}
						if (oEventParameters.semanticAttributes){
							oMainNavigationIntent.SemanticAttributes = oEventParameters.semanticAttributes;
							//limit the parameters that are transferred
							for (var i in oEventParameters.semanticAttributes){
								var sSemanticAttribute = oEventParameters.semanticAttributes[i];
								if (sSemanticAttribute.indexOf("{\"__deferred\":") > -1) {
									delete oMainNavigationIntent.SemanticAttributes[i];
								}
								if (sSemanticAttribute.indexOf("{\"__ref\":") > -1) {
									delete oMainNavigationIntent.SemanticAttributes[i];
								}
							}
							if (oMainNavigationIntent.SemanticAttributes) {
								var sTemp = JSON.stringify(oMainNavigationIntent.SemanticAttributes);
								if (sTemp && sTemp.length > 1) {
									oMainNavigationIntent.SemanticAttributes = sTemp.substring(1, sTemp.length - 1); //if a JSON object is passed it gets removed
								}
							}
						}
					}
				}
				// used to determine the header title
				var oSourceClickedField = oMetaModel.getODataProperty(oSourceEntityType, sSourceClickedField);

				/* --- QuickView Content area preparation */
				var aIgnoredFields = oEventSource && oEventSource.mProperties && oEventSource.mProperties.fieldSemanticObjectMap;

				var oQuickViewModel = new JSONModel({sourceClickedField:	oSourceClickedField,
													 sourceEntityType: 		oSourceEntityType,
													 //showTitleArea: 		true, 		//will always be shown if this coding is reached
													 //showQuickViewContent:true,		//will be shown if there is 1 fieldgroup, but nothing is shown if there is 0 fieldgroup
													 showFieldGroup:		bFieldGroupAvailable,
													 showContact:			bContactAvailable,
													 ignoredFields:  		aIgnoredFields,
													 navigationPath: 		oTargetAnnotation.navigation,
													 mainNavigation:	    oMainNavigationIntent});
				oQuickViewModel.setDefaultBindingMode("OneWay");

				var oSmartFormSimpleViewController = {};
				oSmartFormSimpleViewController.oState = oState;
				oSmartFormSimpleViewController._templateEventHandlers = {};
				oSmartFormSimpleViewController._templateEventHandlers.onSemanticObjectLinkNavigationPressed = oController._templateEventHandlers.onSemanticObjectLinkNavigationPressed.bind(oController._templateEventHandlers);
				oSmartFormSimpleViewController._templateEventHandlers.onDataFieldWithIntentBasedNavigation  = oController._templateEventHandlers.onDataFieldWithIntentBasedNavigation.bind(oController._templateEventHandlers);
				oSmartFormSimpleViewController.onInit = function() {};
				oSmartFormSimpleViewController.onExit = function() {};
				oSmartFormSimpleViewController.onAfterRendering = function() {
					//it will first be rendered if the batch is done
					//this is also called if a popover is repeatedly opened and no batch is needed
					var oController = this;
					var oSmartFormSimpleView = oController.oView;
					var oNavContainer = oSmartFormSimpleView.getParent().getParent().getParent(); //set to sap.ui.comp.navpopover.NavigationPopover
					oNavContainer.setBusy(false);
				};
				oSmartFormSimpleViewController.connectToView = oController.connectToView.bind(oSmartFormSimpleViewController);

				var oSmartFormSimpleView = sap.ui.view({
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								sourceEntitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oEventSource.getEntitySet(), true)),
								entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(oTargetAnnotation.entitySet, true)),
								header: oHeaderInfoBindingContext,
								facetCollection: oQuickViewFacetBindingContext
							},
							models: {
								sourceEntitySet: oMetaModel,
								entitySet: oMetaModel,
								header: oMetaModel,
								facetCollection: oMetaModel,
								quickView: oQuickViewModel,
								parameter: oComponentUtils.getParameterModelForTemplating()
							}
						}
					},
					controller: oSmartFormSimpleViewController,
					type: ViewType.XML,
					viewName: "sap.suite.ui.generic.template.fragments.QuickViewSmartForm",
					height: "100%"
				});

				/*take over the image */
				/* sMainNavigationId: 	with "" the header is be surpressed,
				 * oMainNavigation: 	with null the main navigation object will be removed.
				 * This will still show the CMP title area if there is an text arrangement */
				//oEventParameters.show("", null, undefined, oSmartFormSimpleView);

				/* sMainNavigationId: 	with undefined, the description is calculated using the binding context of a given source object (for example SmartLink control)
				 * oMainNavigation: 	with undefined the old object will remain.
				 * This will still show the CMP title area - this is needed especially in slow systems, since then the CMP title area will be shown until the FE title area is available */
				oEventParameters.show(undefined, undefined, undefined, oSmartFormSimpleView);

				//set the navcontainer to busy until everything is evaluated
				var fnBusy = function(oEvent) {
					var oSmLiContent = oEvent.getSource(); //content of the smart link popover
					if (oSmLiContent){
						var oNavContainer = oSmLiContent.getParent().getParent().getParent(); //set to sap.ui.comp.navpopover.NavigationPopover
						oNavContainer.setBusy(true);
						/* small enough to not show busy indicator if no time delay is there
						 * but not too big to show the busy indicator to late
						 * throttling OFF  - when it was set to 0 busy was shown shortly ==> flickers
						 * throttling GPRS - when set to 100 data is shown already
						 * */
						oNavContainer.setBusyIndicatorDelay(10);
					}
				};
				oSmartFormSimpleView.attachBeforeRendering(fnBusy.bind(this));

				// post processing after the navcontainer is rendered
				var fnChange = function(oEvent) {
					var oSmLiContent = oEvent.getSource(); //content of the smart link popover
					if (oSmLiContent){
						//handler is called one without content
						var oNewTitleArea = oSmLiContent.byId("ownTitleArea");
						if (oNewTitleArea){
							//set old title area to invisible if available - needed since double registering/calling of navigationTargetObtained can't be avoided
							var oSemOController = oSmLiContent.getParent();
							if (oSemOController && oSemOController.getItems){
								var oPossibleOldTitleArea = oSemOController.getItems() && oSemOController.getItems()[0]; //could also be quickview, if no old title area has been built
								if (oPossibleOldTitleArea &&
									oPossibleOldTitleArea != oSmLiContent){
									oPossibleOldTitleArea.setVisible(false);
								}
							}
						}
						if (bContactAvailable && aContactTitleArea && oNewTitleArea){
							/*if the oNewTitleArea is similar to the info showing in the Contacts
								title, decription and icon are similar to
								contact fn,    role   	and photo
							  then remove them */
							fnHideTitleArea(oSmLiContent,aContactTitleArea);
						}
					}
				};
				oSmartFormSimpleView.attachAfterRendering(fnChange.bind(this));
			} else {
				oEventParameters.show(sTitle, oMainNavigation, undefined, undefined);
			}
		}
		// Returns the values of Semantic Keys/ Technical Keys for the current Object Page.
		function getObjectPageParameters(oController, appComponent){
			var oViewBindingContext = oController.getView && oController.getView().getBindingContext();
			var oEntity = oViewBindingContext.getObject();
			var oMetaModel = oController.getOwnerComponent().getModel().getMetaModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
			var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
			var aSemKey = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
			var oParam = {};
			// Adding Semantic Keys as parameters
			if (aSemKey && aSemKey.length > 0) {
				for (var j = 0; j < aSemKey.length; j++) {
					var sSemKey = aSemKey[j].PropertyPath;
					if (!oParam[sSemKey]) {
						oParam[sSemKey] = [];
						oParam[sSemKey].push(oEntity[sSemKey]);
					}
				}
			} else {
				// Add technical keys if semantic keys are not defined.
				for (var k in oEntityType.key.propertyRef) {
					var sObjKey = oEntityType.key.propertyRef[k].name;
					if (!oParam[sObjKey]) {
						oParam[sObjKey] = [];
						oParam[sObjKey].push(oEntity[sObjKey]);
					}
				}
			}
			return oParam;
		}

		// Returns the inline external navigation target (defined in sap.app.crossNavigation.outbounds) for a given table entity set if hideChevronForUnauthorizedExtNav flag is set to true
		function findOutboundTarget(aPages, i, sTableEntitySet, sNavigationProperty){
			// if navigationProperty is defined.
			if (aPages[i].entitySet == sTableEntitySet && sNavigationProperty === aPages[i].navigationProperty && aPages[i].navigation && aPages[i].navigation["display"] && (aPages[i].component && aPages[i].component.settings && aPages[i].component.settings.hideChevronForUnauthorizedExtNav === true)) {
				return aPages[i].navigation.display.target;
			} else if (aPages[i].entitySet == sTableEntitySet && aPages[i].navigation && aPages[i].navigation["display"] && (aPages[i].component && aPages[i].component.settings && aPages[i].component.settings.hideChevronForUnauthorizedExtNav === true)) { //if navigationProperty is not defined.
				return aPages[i].navigation.display.target;
			} else if (aPages[i].pages) {
				for (var j = 0; j < (aPages[i].pages.length); j++) {
					var sOutboundTarget = findOutboundTarget(aPages[i].pages, j, sTableEntitySet, sNavigationProperty);
					if (sOutboundTarget !== undefined && sOutboundTarget !== null) {
						return sOutboundTarget;
					}
				}
			}
		}

		// This function updates the chevron binding for inline external navigation in templPriv model for the corresponding table.
		//The binding depends on the result whether the external navigation is supported or not.
		function displayChevronIfExtNavigationSupported(oEvent){
			var oTable = oEvent.getSource().getTable();
			var sTableEntitySet = oEvent.getSource().getEntitySet();
			var sNavigationProperty = oEvent.getSource().getTableBindingPath();

			// CrossApplicationNavigation checks whether external navigation is supported or not.
			var oXApplNavigation = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService && sap.ushell.Container.getService("CrossApplicationNavigation");

			// browse through the manifest pages to check if the corresponding table has inline external navigation defined and hideChevronForUnauthorizedExtNav flag is set to true.
			var aPages = oController.getOwnerComponent().getAppComponent().getConfig().pages;
			var sOutboundTarget = findOutboundTarget(aPages, 0, sTableEntitySet, sNavigationProperty); // 0 passed to enable traversing of pages from the top.

			if (sOutboundTarget !== undefined && sOutboundTarget !== null && oXApplNavigation) {
				var oCrossApp = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.app").crossNavigation.outbounds[sOutboundTarget];
				if (oCrossApp) {
					var sSemanticObj = oCrossApp.semanticObject;
					var sAction = oCrossApp.action;
					var oPrivModel = oController.getView().getModel("_templPriv");
					var oSupportedIntents = oPrivModel.getProperty("/generic/supportedIntents/");
					var sPath = (sNavigationProperty === "") ? sTableEntitySet : sTableEntitySet + "::" + sNavigationProperty; // unique path for corresponding table in the oPrivModel
					var oTablePathProp = oPrivModel.getProperty("/generic/supportedIntents/" + sSemanticObj + "/" + sAction + "/" + sPath);
					if (!oTablePathProp) {
						// No existing information in the model for corresponding table.
						var oOutboundParameters = {},oParam;
						var appComponent = oController.getOwnerComponent().getAppComponent();
						// Parameters defined in manifest for external navigation.
						for (var prop in oCrossApp.parameters) {
							if (!jQuery.isEmptyObject(oCrossApp.parameters[prop])){
								oOutboundParameters[prop] = oCrossApp.parameters[prop];
							}
						}
						// Get Semantic Key/ Technical Key values to be sent as parameters for external navigation check in case of an Object Page table.
						if (oController.getMetadata().getName() === 'sap.suite.ui.generic.template.ObjectPage.view.Details') {
							oParam = getObjectPageParameters(oController, appComponent);
						}

						var oTarget = {
								semanticObject : sSemanticObj,
								action: sAction
						};
						var oNavParams = jQuery.extend({}, oParam, oOutboundParameters);
						var oNavArguments = {
								target : oTarget,
								params : oNavParams
						};
						var oSupportedPromise = oXApplNavigation.isNavigationSupported([oNavArguments], appComponent);
						oSupportedPromise.done(function(oTargets){
							var oSemObjProp = oPrivModel.getProperty("/generic/supportedIntents/" + sSemanticObj);
							// Update model as per the result.
							if (!oSemObjProp) {
								oSupportedIntents[sSemanticObj] = {};
								oSupportedIntents[sSemanticObj][sAction] = {};
								oSupportedIntents[sSemanticObj][sAction][sPath] = {
										"supported": oTargets[0].supported
								};
							} else if (!oSemObjProp[sAction]) {
								oSemObjProp[sAction] = {};
								oSemObjProp[sAction][sPath] = {
										"supported": oTargets[0].supported
								};
							} else {
								oSemObjProp[sAction][sPath] = {
										"supported": oTargets[0].supported
								};
							}
							oPrivModel.updateBindings();
							// In case of UI Table, set chevron visibility to true if the outbound target is supported.
							// In case of Responsive table, this step is not required as visibility is automatically handled by model binding.
							if (oTargets[0].supported && oTable instanceof UiTable) {
								var rowActionTemplate = oTable.getRowActionTemplate();
								rowActionTemplate.getItems()[0].setVisible(true);	//There is only "navigation" defined in the row action items.
								oTable.setRowActionTemplate(rowActionTemplate);
							}
						});
					}
				}
			}
		}
		function onDataReceived(oEvent){
			// whenever new data has been received for a table, we have to check the enablement of the buttons in the corresponding toolbar
			oCommonUtils.setEnabledToolbarButtons(oEvent.getSource());

			// FooterButtons should not dependent on table content
			// however, if this would be needed it could be achieved like this:
//			var oSmartTable = oEvent.getSource();
//			if (oSmartTable instanceof SmartTable){
//				oCommonUtils.setEnabledFooterButtons(oSmartTable);
//			}
			// SmartTable would have to be define in sap.ui.define

			// update model binding for chevron display in table in case of inline external navigation.
			displayChevronIfExtNavigationSupported(oEvent);
		}

		function onBeforeRebindTable(oEvent, oCallbacks) {
			// For line item actions, popin display must not have a label
			var oSmartTable = oEvent.getSource();
			var oTable = oSmartTable.getTable();
			if (oTable instanceof Table) {
				var oColumns = oTable.getColumns();
				for (var iColumn = 0; iColumn < oColumns.length; iColumn++) {
					if (oColumns[iColumn].getCustomData()[0].getValue() && oColumns[iColumn].getCustomData()[0].getValue()["actionButton"] === "true") {
						oColumns[iColumn].setPopinDisplay("WithoutHeader");
					}
				}
			}
			// still open
			var oBindingParams = oEvent.getParameter("bindingParams");
			oBindingParams.parameters = oBindingParams.parameters || {};

			//OP search with personalization
			if (oSmartTable.data().allowSearch) {
				oBindingParams.parameters["custom"] = {
					"search": oEvent.getSource().data().searchString
				};
				oSmartTable.data("allowSearch", false);
			} else if (oSmartTable.getBindingContext() && oSmartTable.getBindingContext().getPath() === oSmartTable.data().objectPath) {
				if (oSmartTable.getId() === oSmartTable.data().tableId) {
					if (!!oEvent.getSource().data().searchString) {
						oBindingParams.parameters["custom"] = {
							"search": oEvent.getSource().data().searchString
						};
					}
				}
			}
			// WorkListLight search and personalization
			if (oSmartTable.data().allowSearchWorkListLight) {
				oBindingParams.parameters["custom"] = {
					"search": oEvent.getSource().data().searchString
				};
				oSmartTable.data("allowSearchWorkListLight", false);
				if (!!oEvent.getSource().data().searchString) {
					oBindingParams.parameters["custom"] = {
						"search": oEvent.getSource().data().searchString
					};
				}
			}

			var oSmartFilterBar = oController.byId(oSmartTable.getSmartFilterId());

			// TABLE TABS ONLY
			if (!oSmartFilterBar && oController.getMetadata().getName() === 'sap.suite.ui.generic.template.ListReport.view.ListReport') {
				oSmartFilterBar = oController.byId("listReportFilter");
				fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oBindingParams);
				var sSearchValue = oSmartFilterBar.getBasicSearchValue();
				if (sSearchValue !== "") {
					oBindingParams.parameters["custom"] = {
						"search": sSearchValue
					};
				}
			}
			// (END) TABLE TABS ONLY

			if (oSmartFilterBar instanceof SmartFilterBar) {
				var oCustomControl = oSmartFilterBar.getControlByKey("EditState");
				if (oCustomControl instanceof Select) {
					var vDraftState = oCustomControl.getSelectedKey();
					switch (vDraftState) {
						case "1": // Unchanged
							// IsActiveDocument and siblingEntity eq null
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("HasDraftEntity", "EQ", false));
							break;
						case "2": // Draft
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", false));
							break;
						case "3": // Locked
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "NE", ""));
							break;
						case "4": // Unsaved changes
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "EQ", ""));
							break;
						default: // All ==> Special handling for multiple multi-filters
							var oOwnMultiFilter = new Filter({
								filters: [new Filter("IsActiveEntity", "EQ", false),
								          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)
								],
								and: false
							});
						if (oBindingParams.filters[0] && oBindingParams.filters[0].aFilters) {
							var oSmartTableMultiFilter = oBindingParams.filters[0];
							oBindingParams.filters[0] = new Filter([oSmartTableMultiFilter, oOwnMultiFilter], true);
						} else {
							oBindingParams.filters.push(oOwnMultiFilter);
						}
						break;
					}
				}
			}
			//--- begin: expand binding --------------------------------------------------------------------------------------
			getTableQueryParameters(oSmartTable.getEntitySet(), oBindingParams);
			var aSelect = oBindingParams.parameters.select && oBindingParams.parameters.select.split(",") || [];
			var aExpands = oBindingParams.parameters && oBindingParams.parameters.expand && oBindingParams.parameters.expand.split(",") || [];
			var sEntitySet = oSmartTable.getEntitySet();

			if (aSelect && aSelect.length > 0) {
				var oMetaModel = oSmartTable.getModel().getMetaModel();
				var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);

				//needed for activating field control for DataField Annotation & when using the setting to add new columns
				var oProperty = {};
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				for (var index = 0; index < aSelect.length; index++) {
					var sSelect = aSelect[index];
					if (sSelect){
						var oProperty = oMetaModel.getODataProperty(oEntityType, sSelect);
						if (oProperty && oProperty["com.sap.vocabularies.Common.v1.FieldControl"] && oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path){
							var sPropertyFieldControl = oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path;
							if (sPropertyFieldControl !== " " && oBindingParams.parameters.select.search(sPropertyFieldControl) === -1) {
								oBindingParams.parameters.select += "," + sPropertyFieldControl;
								aSelect.push(sPropertyFieldControl);
							}
						}
					}
				}

				// Make sure sorter text property in select and expand list for grouping selection where column is not visible
				if (oTable instanceof Table) {
					var oSorter = oBindingParams.sorter[0];
					// Check if sorter is for Grouping
					if (oSorter && oSorter.vGroup) {
						var oSorterObject = oMetaModel.getODataProperty(oEntityType, oSorter.sPath);
						var sSorterText = oSorterObject["sap:text"] || (oSorterObject["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
						if (sSorterText) {
							if (jQuery.inArray(sSorterText, aSelect) === -1) {
								oBindingParams.parameters.select += "," + sSorterText;
								aSelect.push(sSorterText);
							}
						}
					}
				}

				// add deletable-path properties
				var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
				if (oDeleteRestrictions && oDeleteRestrictions.Deletable &&  oDeleteRestrictions.Deletable.Path &&
					oBindingParams.parameters.select.search(oDeleteRestrictions.Deletable.Path) === -1) {
						oBindingParams.parameters.select += "," + oDeleteRestrictions.Deletable.Path;
						aSelect.push(oDeleteRestrictions.Deletable.Path);
				}

				// add updatable-path properties as fix for incident 1770320335
				var oUpdateRestrictions = oEntitySet["Org.OData.Capabilities.V1.UpdateRestrictions"];
				if (oUpdateRestrictions && oUpdateRestrictions.Updatable &&  oUpdateRestrictions.Updatable.Path &&
					oBindingParams.parameters.select.search(oUpdateRestrictions.Updatable.Path) === -1) {
						oBindingParams.parameters.select += "," + oUpdateRestrictions.Updatable.Path;
						aSelect.push(oUpdateRestrictions.Updatable.Path);
				}

				// add applicable-path properties for annotated actions
				var sFunctionImport,
					oFunctionImport;
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oLineItem = oEntityType["com.sap.vocabularies.UI.v1.LineItem"] || [];
				for (var index = 0; index < oLineItem.length; index++) {
					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
						sFunctionImport = oMetaModel.getODataFunctionImport(oLineItem[index].Action.String, true);
						if (sFunctionImport) {   //else: break-out action, no backend data needed
							oFunctionImport = oMetaModel.getObject(sFunctionImport);
							if (oFunctionImport["sap:action-for"] !== " " && oFunctionImport["sap:applicable-path"] !== " " &&
									oBindingParams.parameters.select.search(oFunctionImport["sap:applicable-path"]) === -1) {
								oBindingParams.parameters.select += "," + oFunctionImport["sap:applicable-path"];
								aSelect.push(oFunctionImport["sap:applicable-path"]);
							}
						}
					}
					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
						var oLineItemProperty, sRequestField;
						if (oLineItem[index].Value && oLineItem[index].Value.Path) {
							oLineItemProperty = oMetaModel.getODataProperty(oEntityType, oLineItem[index].Value.Path);
							if (oLineItemProperty) {
								sRequestField = oLineItemProperty["sap:text"] || (oLineItemProperty["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
							}
							if (!sRequestField) {
								sRequestField = oLineItem[index].Value.Path;
							}
							if (aSelect.indexOf(sRequestField) === -1) {
								aSelect.push(sRequestField);
								oBindingParams.parameters.select = oBindingParams.parameters.select + "," + sRequestField;
							}
						}
					}
										//handles chart annotation if in same entity type
					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
						if (oLineItem[index].Target && oLineItem[index].Target.AnnotationPath) {
							var sAnnotationPath = oLineItem[index].Target.AnnotationPath;
							var sChartQualifier = sAnnotationPath.split("@")[1];
							var oRequiredData = oEntityType[sChartQualifier];
							// checks and adds MeasureAttributes properties
							if (oRequiredData && oRequiredData.MeasureAttributes) {
								if (oRequiredData.MeasureAttributes[0] && oRequiredData.MeasureAttributes[0].DataPoint &&
									oRequiredData.MeasureAttributes[0].DataPoint.AnnotationPath) {
									var sDataPointQualifier = oRequiredData.MeasureAttributes[0].DataPoint.AnnotationPath.split("@")[1];
									var oRequiredDataPoint = oEntityType[sDataPointQualifier];
									if (oRequiredDataPoint) {
										for (var sDataPointProperty in oRequiredDataPoint) {
											if (oRequiredDataPoint[sDataPointProperty] && oRequiredDataPoint[sDataPointProperty].Path && aSelect.indexOf(
													oRequiredDataPoint[sDataPointProperty].Path) === -1) {
												oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredDataPoint[sDataPointProperty].Path;
												aSelect.push(oRequiredDataPoint[sDataPointProperty].Path);
											}
											// handles criticality calculation annotation
											if (sDataPointProperty === "CriticalityCalculation" && oRequiredDataPoint.CriticalityCalculation) {
												for (var criticalityProperty in oRequiredDataPoint.CriticalityCalculation) {
													if (oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path && aSelect.indexOf(
															oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path) === -1) {
														oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredDataPoint.CriticalityCalculation[
															criticalityProperty].Path;
														aSelect.push(oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path);
													}
												}
											}
										}
									}
								}
							}
							// checks and adds Measures properties
							if (oRequiredData && oRequiredData.Measures) {
								if (oRequiredData.Measures[0] && oRequiredData.Measures[0].PropertyPath && aSelect.indexOf(
										oRequiredData.Measures[0].PropertyPath) === -1) {
									oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredData.Measures[0].PropertyPath;
									aSelect.push(oRequiredData.Measures[0].PropertyPath);
								}
							}
						}
					}
				}
				// add applicablePath properties for breakout actions
				var aButtons = oCommonUtils.getBreakoutActionsForTable(oSmartTable, oController);
				var oBreakoutActions = oCommonUtils.getBreakoutActionsFromManifest(oTable.getModel());
				for (var sAction in oBreakoutActions) {
					if (jQuery.inArray(oBreakoutActions[sAction].id, aButtons) !== -1) {
						if (oBreakoutActions[sAction].requiresSelection && oBreakoutActions[sAction].applicablePath) {
							if (oBindingParams.parameters.select.search(oBreakoutActions[sAction].applicablePath) === -1) {
								oBindingParams.parameters.select += "," + oBreakoutActions[sAction].applicablePath;
								aSelect.push(oBreakoutActions[sAction].applicablePath);
							}
						}
					}
				}
			}
			fnExpandOnNavigationProperty(aSelect, aExpands);

			// add Draft Admin Data to expand if entity is Draft and Draft Root and has Draft Admin Data
			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet) && oDraftContext.isDraftRoot(sEntitySet)) {
				if (oDraftContext.hasDraftAdministrativeData(sEntitySet)) {

					if (aSelect && aSelect.length > 0) {
						if (aSelect.indexOf("DraftAdministrativeData") === -1) {
							aSelect.push("DraftAdministrativeData");
							oBindingParams.parameters.select = oBindingParams.parameters.select + ",DraftAdministrativeData";
						}
					}

					if (aExpands.indexOf("DraftAdministrativeData") === -1) {
						aExpands.push("DraftAdministrativeData");
					}
				}
			}

			if (aExpands.length > 0) {
				oBindingParams.parameters.expand = aExpands.join(",");
			}

			// sortOrder Annotation of presentation variant - only relevant for sap.m.Table
			var aCustomData = oSmartTable.getCustomData();
			var oCustomData = {};
			for (var k = 0; k < aCustomData.length; k++) {
				oCustomData[aCustomData[k].getKey()] = aCustomData[k].getValue();
			}
			var oVariant = oSmartTable.fetchVariant();
			if (!oCustomData.TemplateSortOrder && oCallbacks && oCallbacks.determineSortOrder) {
				// if no sort order could be derived directly, maybe it is provided by a callback
				oCustomData.TemplateSortOrder = oCallbacks.determineSortOrder();
			}
			if ((!oVariant || !oVariant.sort) && oTable instanceof Table && oCustomData.TemplateSortOrder) {
				var aSortOrder = oCustomData.TemplateSortOrder.split(", ");
				for (var j = 0; j < aSortOrder.length; j++) {
					var aSort = aSortOrder[j].split(" ");
					if (aSort.length > 1) {
						oBindingParams.sorter.push(new Sorter(aSort[0], aSort[1] === "true"));
					} else {
						oBindingParams.sorter.push(new Sorter(aSort[0]));
					}
				}
			}

			if (oTable instanceof Table) {
				// Define grouping (wiki: SmartTable FAQs)
				var oSorter = oBindingParams.sorter[0];
				// Check if sorter is for Grouping
				if (oSorter && oSorter.vGroup) {
					// Replace the Group function
					oSorter.fnGroup = fnGroupFunction(oSorter.sPath);
				}
			}
		}

		/**
		 * Navigation from table
		 * @param {sap.ui.base.EventProvider} oEventSource - The source of the triggered event
		 * @param {object} oState
		 */
		function onListNavigate(oEventSource, oState, oBindingContext) {
			oBindingContext = oBindingContext || oEventSource.getBindingContext();
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				if (oEventSource.data("CrossNavigation")) {
					// intent based navigation
					fnNavigateIntentManifest(oEventSource, oBindingContext, oState.oSmartFilterbar);
					return;
				}
				// Get parent table from the event source
				var oTable = oCommonUtils.getOwnerControl(oEventSource);
				storeObjectPageNavigationRelatedInformation(oEventSource);
				oCommonUtils.navigateFromListItem(oBindingContext, oTable);
			}, jQuery.noop, oState);
		}

		function onShowDetails(oEventSource, oState) {
			var oTable = oEventSource.getParent().getParent().getTable();
			var aContexts = oCommonUtils.getSelectedContexts(oTable);
			switch (aContexts.length) {
				case 0:
					fnShowError("ST_GENERIC_NO_ITEM_SELECTED");
					return;
				case 1:
					oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
						//processing allowed
						if (oEventSource.data("CrossNavigation")){
							// intent based navigation
							fnNavigateIntentManifest(oEventSource, aContexts[0], oState.oSmartFilterbar);
							return;
						}
						// internal navigation
						storeObjectPageNavigationRelatedInformation(oEventSource);
						oCommonUtils.navigateFromListItem(aContexts[0], oTable);
					}, jQuery.noop, oState);
					return;
				default:
					fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
				return;
			}
		}

		function onDataFieldForIntentBasedNavigation(oEvent, oState) {
			var oEventSource = oEvent.getSource();
			var oControl = oCommonUtils.getOwnerControl(oEventSource);
			var aContexts = oCommonUtils.getSelectedContexts(oControl);
			switch (aContexts.length) {
				case 0:
				case 1:
					oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
						var oOutbound = {
								action: oEventSource.data('Action'),
								semanticObject:	oEventSource.data('SemanticObject')
						};
						fnNavigateIntent(oOutbound, aContexts[0], oState.oSmartFilterbar || undefined, oState.oSmartTable || undefined);
					}, jQuery.noop, oState);
					return;
				default:
					fnShowError("ST_GENERIC_MULTIPLE_ITEMS_SELECTED");
				return;
			}
		}

		function onDataFieldWithIntentBasedNavigation(oEvent, oState) {
			var oEventSource = oEvent.getSource();
			var oContext = oEventSource.getParent().getBindingContext();
			var sSemanticObject = oEventSource.data('SemanticObject');
			var sAction = oEventSource.data('Action');

			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						action: sAction,
						semanticObject:	sSemanticObject
				};
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar || undefined, oState.oSmartTable || undefined);
			}, jQuery.noop, oState);
		}

		function onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState) {
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						action: oCustomData.Action,
						semanticObject:	oCustomData.SemanticObject
				};
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar, oState.oSmartTable);
			}, jQuery.noop, oState);
		}

		function onInlineDataFieldForIntentBasedNavigation(oEventSource, oState){
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				var oOutbound = {
						semanticObject: oEventSource.data("SemanticObject"),
						action: oEventSource.data("Action")
				};
				var oContext = oEventSource.getParent().getBindingContext();
				fnNavigateIntent(oOutbound, oContext, oState.oSmartFilterbar, oState.oSmartTable);
			}, jQuery.noop, oState);
		}

		/**
		 * Action triggered from Control's toolbar
		 * @param {sap.ui.base.Event} oEvent - the triggered event (most likely a 'click')
		 * @param {object} oState
		 */
		function onCallActionFromToolBar(oEvent, oState) {
			var oSourceControl, sBindingPath = "";
			var oControl = oCommonUtils.getOwnerControl(oEvent.getSource());
			var oCustomData = oEvent.getSource().data();
			var aContexts = oCommonUtils.getSelectedContexts(oControl);
			var sControlName = oControl.getMetadata().getName();

			if (sControlName === "sap.ui.comp.smarttable.SmartTable") {
				oSourceControl = oControl.getTable();
				sBindingPath = oControl.getTableBindingPath();

			} else if (sControlName === "sap.ui.comp.smartchart.SmartChart") {
				oSourceControl = oControl.getChart();
				sBindingPath = oControl.getChartBindingPath();
			}

			CRUDManagerCallAction({
				functionImportPath: oCustomData.Action,
				contexts: aContexts,
				sourceControl: oSourceControl,
				label: oCustomData.Label,
				operationGrouping: oCustomData.InvocationGrouping,
				navigationProperty: ""
			}, oState, sBindingPath);
		}

		/**
		 * Call the CRUDManager callAction method
		 * @param {map} mParams - a map containing the parameters for the CRUDManager callAction method
		 * @param {object} oState
		 * @param {string} sBindingPath - the control's binding path
		 * @private
		 */
		function CRUDManagerCallAction(mParams, oState, sBindingPath) {
			var oResponse;

			// only for oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction"
			// DataFieldForIntentBasedNavigation separated within ToolbarButton.fragment, uses other event handler
			// NO ITEM SELECTED: supported - if selection is required then button will be disabled via applicable-path otherwise the button will always be enabled
			// ONE ITEM SELECTED: supported
			// MULTIPLE ITEMS SELECTED: supported
			oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
				//processing allowed
				// TODO check Denver implementation
				oServices.oCRUDManager.callAction({
					functionImportPath: mParams.functionImportPath,
					contexts: mParams.contexts,
					sourceControl: mParams.sourceControl,
					label: mParams.label,
					operationGrouping: mParams.operationGrouping,
					navigationProperty: mParams.navigationProperty
				}, oState).then(function(aResponses) {
					if (aResponses && aResponses.length && aResponses.length === 1) {
						oResponse = aResponses[0];

						if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response
								.context.getPath() !== oResponse.actionContext.getPath())) {
							oServices.oViewDependencyHelper.setMeToDirty(oController.getOwnerComponent(), sBindingPath);
						}
					}
				});
			}, jQuery.noop, oState, "Proceed");
		}

		var bIsDiscardDraftPopoverActive; // This variable (and its use) is necessary until BLI 3459 is solved
        var fnCurrentDiscardDraft; // Needed to store fnDiscardDraft in a global variable
		function getDiscardDraftPopover(fnDiscardDraft) {
			bIsDiscardDraftPopoverActive = true;
			fnCurrentDiscardDraft = fnDiscardDraft; // move variable to more global scope
			var oDraftPopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.DiscardDraftPopover", {
				onDiscardConfirm: function() {
					jQuery.sap.log.info("Draft cancellation confirmed");
					if (!bIsDiscardDraftPopoverActive) {
						jQuery.sap.log.info("Draft popover no longer active -> Ignore.");
						return;
					}
					fnCurrentDiscardDraft();
				}
			}, "discard");
			return oDraftPopover;
		}

		function fnDiscardDraftImpl(oActiveSiblingPromise, fnFinally){
			var oPromise = new Promise(function(fnResolve, fnReject){
				oActiveSiblingPromise.then(function(oActive) {
					jQuery.sap.log.info("Active information for current draft has been read. Start discarding the draft");
					var oActiveObject = oActive && oActive.getObject();
					var bIsActiveEntity = oActiveObject && oActiveObject.IsActiveEntity;
					var oTargetPromise = bIsActiveEntity ? oServices.oApplication.getTargetAfterCancelPromise(oActive) : Promise.resolve();
					oTargetPromise.then(function(vTarget){ // vTarget will be undefined when create draft is discarded; either a context or context path
						var oDiscardPromise = oServices.oCRUDManager.deleteEntity();
						oDiscardPromise.then(function() {
							jQuery.sap.log.info("Draft was discarded successfully");
							fnFinally();
							oServices.oViewDependencyHelper.setRootPageToDirty();
							oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
							if (vTarget) {
								jQuery.sap.log.info("Navigate to active entityy");
								oServices.oNavigationController.navigateToContext(vTarget, null, true, 1);
							} else {
								jQuery.sap.log.info("Deleted draft was create draft. Navigate back");
								// new document discarded, go back to previous page
								var oGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
								var bForceFullscreenCreate = oGlobalModel.getProperty("/generic/forceFullscreenCreate");
								if (bForceFullscreenCreate){
									oServices.oNavigationController.navigateBack(); // this should lead us back to the App where we have come from
								} else {
									oServices.oNavigationController.navigateToRoot(true);
								}
							}
							fnResolve();
						}, fnReject);
					}, fnReject);
				}, fnReject);
			});
			var oEvent = {
				discardPromise: oPromise
			};
			oComponentUtils.fire(oController, "AfterCancel", oEvent);
			oServices.oApplication.getBusyHelper().setBusy(oPromise);
			oPromise.catch(fnFinally);
			return oPromise;
		}

		function onDiscardDraft(oEvent) {
			var oActiveSiblingPromise = getActiveSibling();
			oServices.oApplication.performAfterSideEffectExecution(function(){
				if (oServices.oApplication.getBusyHelper().isBusy()) {
					jQuery.sap.log.info("Ignore discarding confirmation as app is already busy");
					return; // avoid firing the AfterCancel-event in this case
				}
				var oContext = oController.getView().getBindingContext();
				var oEntity = oContext.getObject();
				var bIsCreateDraft = oEntity.hasOwnProperty("HasActiveEntity") && !oContext.getProperty("IsActiveEntity") && !oContext.getProperty(
					"HasActiveEntity");

				// If the Object is deleted and we have to display the next item in the second column
				var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
				var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
				var sPath = oContext && oContext.getPath();
				if (iViewLevel === 1 && oServices.oApplication.isNextObjectLoadedAfterDelete()){
					var oTable = oServices.oApplication.getListReportTable();
					var oFCLProxy = oServices.oApplication.getFclProxyForView(iViewLevel);
					oFCLProxy.storeTableToShowObjectPageAfterDelete(oTable, sPath);
				}

				var oSource = oEvent.getSource();
				var oDiscardPopover;
				var fnFinally = function(){
					bIsDiscardDraftPopoverActive = false;
					oDiscardPopover.close();
					jQuery.sap.log.info("Draft popover closed");
				};
				oDiscardPopover = getDiscardDraftPopover(fnDiscardDraftImpl.bind(null, oActiveSiblingPromise, fnFinally));
				var oDiscardModel = oDiscardPopover.getModel("discard");
				oDiscardModel.setProperty("/placement", sap.m.PlacementType.Top);
				oDiscardModel.setProperty("/isCreateDraft", bIsCreateDraft);
				oDiscardPopover.openBy(oSource);
			});
		}

		// Performs a draft discard without asking the user. This is exposed via extensionAPI.
		function fnDiscardDraftWithoutDialog(){
			if (oComponentUtils.getViewLevel() !== 1 || !oComponentUtils.isDraftEnabled()){
				jQuery.sap.log.warning("Discard draft only possible on root level of draft enabled entities");
				return Promise.reject();
			}
			var oComponent = oController.getOwnerComponent();
			if (!(oComponentUtils.isComponentActive() && oComponent.getModel("ui").getProperty("/editable"))){
				jQuery.sap.log.warning("Discard draft only possible in edit mode");
				return Promise.reject();
			}
			var oActiveSiblingPromise = getActiveSibling();
			return fnDiscardDraftImpl(oActiveSiblingPromise, jQuery.noop);
		}

		function addEntry(oEventSource, bSuppressNavigation, oSmartFilterBar) {
			if (oEventSource.data("CrossNavigation")) {
				// intent based navigation
				fnNavigateIntentManifest(oEventSource, oEventSource.getBindingContext(), oSmartFilterBar);
				return new Promise(function(resolve) {
					resolve();
				});
			}

			var oTable = oCommonUtils.getOwnerControl(oEventSource);
			var sTablePath = oTable.getTableBindingPath();
			var oComponent = oController.getOwnerComponent();

			var oReturn = oServices.oCRUDManager.addEntry(oTable).then(
					function(oTargetInfo) {
						if (!bSuppressNavigation) {
							oServices.oNavigationController.navigateToContext(oTargetInfo.newContext,
									oTargetInfo.tableBindingPath, false, 4);
							// We expect that the content of the table we are navigating away from will be changed by the actions taking place on the follow-up page.
							// Therefore, we set it to dirty in advance. However, we have to postpone this until the table is no longer visible, since otherwise the
							// refresh of the table would be triggered immediately, which means before potential save actions being performed on the follow-up page.
							// In order to achieve this, setting this page to dirty is postponed until the busy session is finished (which means in particular, that
							// the navigation to the follow-up page has happened).
							oServices.oApplication.getBusyHelper().getUnbusy().then(oServices.oViewDependencyHelper.setMeToDirty.bind(null, oComponent, sTablePath));
						} else {
							oCommonUtils.refreshSmartTable(oTable);
							//execute side effects for inline create
							oServices.oApplicationController.executeSideEffects(oComponent.getBindingContext(), [], [sTablePath]);
						}
					});

			oReturn.catch(jQuery.noop);
			return oReturn;
		}
		/**
		 * Event handler for Delete on the List Report
		 * @param {sap.ui.base.Event} oEvent
		 * @public
		 */
		function deleteEntries(oEvent) {
			var oSmartTable = oCommonUtils.getOwnerControl(oEvent.getSource());
			var aSelectedItems = oCommonUtils.getSelectedContexts(oSmartTable);

			var sPath = oServices.oApplication.getPathForViewLevelOneIfVisible();
			if (oServices.oApplication.isNextObjectLoadedAfterDelete() && sPath){
				var oFclProxy = oServices.oApplication.getFclProxyForView(0);
				oFclProxy.storeTableToShowObjectPageAfterDelete(oSmartTable.getTable(), sPath);
			}

			if (aSelectedItems && aSelectedItems.length > 0) {
				var mJSONData = getDataForDeleteDialog(aSelectedItems);
				var oDeleteDialog = getDeleteDialog(oSmartTable);
				var oDeleteDialogModel = oDeleteDialog.getModel("delete");

				mJSONData.then(function(mJSONData) {
				    oDeleteDialogModel.setData(mJSONData.mJSONData);
				    oDeleteDialog.open();
				});
			} else {
				MessageBox.error(oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
					styleClass: oCommonUtils.getContentDensityClass()
				});
			}
		}

		function onContactDetails(oEvent) {
			var oPopover;
			if (oEvent.getSource().data("Location") === "Header") {
				oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
			} else if (oEvent.getSource().data("Location") === "Section") {		//ContactPopUpover in Section
				oPopover = oEvent.getSource().getParent().getElements()[0];
			} else if (oEvent.getSource().data("Location") === "SmartTable") {	//ContactPopUpOver in SmartTable
				oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
			} else {
				oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation(
						"items")[1];
			}
			oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
			oPopover.openBy(oEvent.getSource());
		}

		//PoC Chart
		function onBeforeRebindChart(oEvent) {
			// For line item actions, popin display must not have a label
			var oSmartChart = oEvent.getSource();
			// still open
			var oBindingParams = oEvent.getParameter("bindingParams");
			oBindingParams.parameters = oBindingParams.parameters || {};

			var oSmartFilterBar = oController.byId(oSmartChart.getSmartFilterId());

			if (!oSmartFilterBar) {
				oSmartFilterBar = oController.byId("listReportFilter");
				fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oBindingParams);
			}
			fnAdjustFiltersForChart(oEvent, oSmartChart, oBindingParams);
		}

		// tbd refactor with onBeforeRebindTable: for PoC just copied from there and adjusted
		function fnAdjustFiltersForChart(oEvent, oSmartChart, oBindingParams) {
			// For line item actions, popin display must not have a label
//			var oSmartTable = oEvent.getSource();
//			var oTable = oSmartTable.getTable();
//			if (oTable instanceof Table) {
//				var oColumns = oTable.getColumns();
//				for (var iColumn = 0; iColumn < oColumns.length; iColumn++) {
//					if (oColumns[iColumn].getCustomData()[0].getValue() && oColumns[iColumn].getCustomData()[0].getValue()["actionButton"] === "true") {
//						oColumns[iColumn].setPopinDisplay("WithoutHeader");
//					}
//				}
//			}
			// still open
		//	var oBindingParams = oEvent.getParameter("bindingParams");
		//	oBindingParams.parameters = oBindingParams.parameters || {};

			//OP search with personalization
			if (oSmartChart.data().allowSearch) {
				oBindingParams.parameters["custom"] = {
					"search": oEvent.getSource().data().searchString
				};
				oSmartChart.data("allowSearch", false);
			} else if (oSmartChart.getBindingContext() && oSmartChart.getBindingContext().getPath() === oSmartChart.data().objectPath) {
				if (oSmartChart.getId() === oSmartChart.data().tableId) {
					if (oEvent.getSource().data().searchString !== "") {
						oBindingParams.parameters["custom"] = {
							"search": oEvent.getSource().data().searchString
						};
					}
				}
			}


				var oSmartFilterBar = oController.byId("listReportFilter");
			//	fnVisitFiltersFromSmartFilterBar(oController, oSmartFilterBar, oBindingParams); // it is done in onBeforeRebindChart already



			if (oSmartFilterBar instanceof SmartFilterBar) {
				var oCustomControl = oSmartFilterBar.getControlByKey("EditState");
				if (oCustomControl instanceof Select) {
					var vDraftState = oCustomControl.getSelectedKey();
					switch (vDraftState) {
						case "1": // Unchanged
							// IsActiveDocument and siblingEntity eq null
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("HasDraftEntity", "EQ", false));
							break;
						case "2": // Draft
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", false));
							break;
						case "3": // Locked
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "NE", ""));
							break;
						case "4": // Unsaved changes
							oBindingParams.filters.push(new Filter("IsActiveEntity", "EQ", true));
							oBindingParams.filters.push(new Filter("SiblingEntity/IsActiveEntity", "EQ", null));
							oBindingParams.filters.push(new Filter("DraftAdministrativeData/InProcessByUser", "EQ", ""));
							break;
						default: // All ==> Special handling for multiple multi-filters
							var oOwnMultiFilter = new Filter({
								filters: [new Filter("IsActiveEntity", "EQ", false),
								          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)
								],
								and: false
							});
						if (oBindingParams.filters[0] && oBindingParams.filters[0].aFilters) {
							var oSmartTableMultiFilter = oBindingParams.filters[0];
							oBindingParams.filters[0] = new Filter([oSmartTableMultiFilter, oOwnMultiFilter], true);
						} else {
							oBindingParams.filters.push(oOwnMultiFilter);
						}
						break;
					}
				}
			}
			//--- begin: expand binding --------------------------------------------------------------------------------------
			var sEntitySet = oSmartChart.getEntitySet();
			getTableQueryParameters(sEntitySet, oBindingParams);
			var aSelect = oBindingParams.parameters.select && oBindingParams.parameters.select.split(",") || [];
			var aExpands = oBindingParams.parameters && oBindingParams.parameters.expand && oBindingParams.parameters.expand.split(",") || [];


			if (aSelect && aSelect.length > 0) {
				var oMetaModel = oSmartChart.getModel().getMetaModel();
				var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);

				//needed for activating field control for DataField Annotation & when using the setting to add new columns
				var oProperty = {};
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				for (var index = 0; index < aSelect.length; index++) {
					var sSelect = aSelect[index];
					if (sSelect){
						var oProperty = oMetaModel.getODataProperty(oEntityType, sSelect);
						if (oProperty && oProperty["com.sap.vocabularies.Common.v1.FieldControl"] && oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path){
							var sPropertyFieldControl = oProperty["com.sap.vocabularies.Common.v1.FieldControl"].Path;
							if (sPropertyFieldControl !== " " && oBindingParams.parameters.select.search(sPropertyFieldControl) === -1) {
								oBindingParams.parameters.select += "," + sPropertyFieldControl;
								aSelect.push(sPropertyFieldControl);
							}
						}
					}
				}

				//tbd check if we need sorter for the chart
				// Make sure sorter text property in select and expand list for grouping selection where column is not visible
//				if (oTable instanceof Table) {
//					var oSorter = oBindingParams.sorter[0];
//					// Check if sorter is for Grouping
//					if (oSorter && oSorter.vGroup) {
//						var oSorterObject = oMetaModel.getODataProperty(oEntityType, oSorter.sPath);
//						var sSorterText = oSorterObject["sap:text"] || (oSorterObject["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
//						if (sSorterText) {
//							if (jQuery.inArray(sSorterText, aSelect) === -1) {
//								oBindingParams.parameters.select += "," + sSorterText;
//								aSelect.push(sSorterText);
//							}
//						}
//					}
//				}

				// add deletable-path properties
				var oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
				if (oDeleteRestrictions && oDeleteRestrictions.Deletable &&  oDeleteRestrictions.Deletable.Path &&
					oBindingParams.parameters.select.search(oDeleteRestrictions.Deletable.Path) === -1) {
						oBindingParams.parameters.select += "," + oDeleteRestrictions.Deletable.Path;
						aSelect.push(oDeleteRestrictions.Deletable.Path);
				}
				//tbd check if we need something similar for the chart
				// add applicable-path properties for annotated actions
//				var sFunctionImport,
//					oFunctionImport;
//				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
//				var oLineItem = oEntityType["com.sap.vocabularies.UI.v1.LineItem"] || [];
//				for (var index = 0; index < oLineItem.length; index++) {
//					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
//						sFunctionImport = oMetaModel.getODataFunctionImport(oLineItem[index].Action.String, true);
//						if (sFunctionImport) {   //else: break-out action, no backend data needed
//							oFunctionImport = oMetaModel.getObject(sFunctionImport);
//							if (oFunctionImport["sap:action-for"] !== " " && oFunctionImport["sap:applicable-path"] !== " " &&
//									oBindingParams.parameters.select.search(oFunctionImport["sap:applicable-path"]) === -1) {
//								oBindingParams.parameters.select += "," + oFunctionImport["sap:applicable-path"];
//								aSelect.push(oFunctionImport["sap:applicable-path"]);
//							}
//						}
//					}
//					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
//						var oLineItemProperty, sRequestField;
//						if (oLineItem[index].Value && oLineItem[index].Value.Path) {
//							oLineItemProperty = oMetaModel.getODataProperty(oEntityType, oLineItem[index].Value.Path);
//							if (oLineItemProperty) {
//								sRequestField = oLineItemProperty["sap:text"] || (oLineItemProperty["com.sap.vocabularies.Common.v1.Text"] || "").Path || "";
//							}
//							if (!sRequestField) {
//								sRequestField = oLineItem[index].Value.Path;
//							}
//							if (aSelect.indexOf(sRequestField) === -1) {
//								aSelect.push(sRequestField);
//								oBindingParams.parameters.select = oBindingParams.parameters.select + "," + sRequestField;
//							}
//						}
//					}
//										//handles chart annotation if in same entity type
//					if (oLineItem[index].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
//						if (oLineItem[index].Target && oLineItem[index].Target.AnnotationPath) {
//							var sAnnotationPath = oLineItem[index].Target.AnnotationPath;
//							var sChartQualifier = sAnnotationPath.split("@")[1];
//							var oRequiredData = oEntityType[sChartQualifier];
//							// checks and adds MeasureAttributes properties
//							if (oRequiredData && oRequiredData.MeasureAttributes) {
//								if (oRequiredData.MeasureAttributes[0] && oRequiredData.MeasureAttributes[0].DataPoint &&
//									oRequiredData.MeasureAttributes[0].DataPoint.AnnotationPath) {
//									var sDataPointQualifier = oRequiredData.MeasureAttributes[0].DataPoint.AnnotationPath.split("@")[1];
//									var oRequiredDataPoint = oEntityType[sDataPointQualifier];
//									if (oRequiredDataPoint) {
//										for (var sDataPointProperty in oRequiredDataPoint) {
//											if (oRequiredDataPoint[sDataPointProperty] && oRequiredDataPoint[sDataPointProperty].Path && aSelect.indexOf(
//													oRequiredDataPoint[sDataPointProperty].Path) === -1) {
//												oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredDataPoint[sDataPointProperty].Path;
//												aSelect.push(oRequiredDataPoint[sDataPointProperty].Path);
//											}
//											// handles criticality calculation annotation
//											if (sDataPointProperty === "CriticalityCalculation" && oRequiredDataPoint.CriticalityCalculation) {
//												for (var criticalityProperty in oRequiredDataPoint.CriticalityCalculation) {
//													if (oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path && aSelect.indexOf(
//															oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path) === -1) {
//														oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredDataPoint.CriticalityCalculation[
//															criticalityProperty].Path;
//														aSelect.push(oRequiredDataPoint.CriticalityCalculation[criticalityProperty].Path);
//													}
//												}
//											}
//										}
//									}
//								}
//							}
//							// checks and adds Measures properties
//							if (oRequiredData && oRequiredData.Measures) {
//								if (oRequiredData.Measures[0] && oRequiredData.Measures[0].PropertyPath && aSelect.indexOf(
//										oRequiredData.Measures[0].PropertyPath) === -1) {
//									oBindingParams.parameters.select = oBindingParams.parameters.select + "," + oRequiredData.Measures[0].PropertyPath;
//									aSelect.push(oRequiredData.Measures[0].PropertyPath);
//								}
//							}
//						}
//					}
//				}

				//tbd later add for Chart probably
				// add applicablePath properties for breakout actions
//				var aButtons = oCommonUtils.getBreakoutActionsForTable(oSmartTable, oController);
//				var oBreakoutActions = oCommonUtils.getBreakoutActionsFromManifest(oTable.getModel());
//				for (var sAction in oBreakoutActions) {
//					if (jQuery.inArray(oBreakoutActions[sAction].id, aButtons) !== -1) {
//						if (oBreakoutActions[sAction].requiresSelection && oBreakoutActions[sAction].applicablePath) {
//							if (oBindingParams.parameters.select.search(oBreakoutActions[sAction].applicablePath) === -1) {
//								oBindingParams.parameters.select += "," + oBreakoutActions[sAction].applicablePath;
//								aSelect.push(oBreakoutActions[sAction].applicablePath);
//							}
//						}
//					}
//				}
			}
			fnExpandOnNavigationProperty(aSelect, aExpands);

			// add Draft Admin Data to expand if entity is Draft and Draft Root and has Draft Admin Data
			var oDraftContext = oServices.oDraftController.getDraftContext();
			if (oDraftContext.isDraftEnabled(sEntitySet) && oDraftContext.isDraftRoot(sEntitySet)) {
				if (oDraftContext.hasDraftAdministrativeData(sEntitySet)) {

					if (aSelect && aSelect.length > 0) {
						if (aSelect.indexOf("DraftAdministrativeData") === -1) {
							aSelect.push("DraftAdministrativeData");
							oBindingParams.parameters.select = oBindingParams.parameters.select + ",DraftAdministrativeData";
						}
					}

					if (aExpands.indexOf("DraftAdministrativeData") === -1) {
						aExpands.push("DraftAdministrativeData");
					}
				}
			}

			if (aExpands.length > 0) {
				oBindingParams.parameters.expand = aExpands.join(",");
			}

			//tbd check if similat sorting and grouping is applicable for SMartChart
			// sortOrder Annotation of presentation variant - only relevant for sap.m.Table
//			var aCustomData = oSmartTable.getCustomData();
//			var oCustomData = {};
//			for (var k = 0; k < aCustomData.length; k++) {
//				oCustomData[aCustomData[k].getKey()] = aCustomData[k].getValue();
//			}
//			var oVariant = oSmartTable.fetchVariant();
//			if (!oCustomData.TemplateSortOrder && oCallbacks && oCallbacks.determineSortOrder) {
//				// if no sort order could be derived directly, maybe it is provided by a callback
//				oCustomData.TemplateSortOrder = oCallbacks.determineSortOrder();
//			}
//			if ((!oVariant || !oVariant.sort) && oTable instanceof Table && oCustomData.TemplateSortOrder) {
//				var aSortOrder = oCustomData.TemplateSortOrder.split(", ");
//				for (var j = 0; j < aSortOrder.length; j++) {
//					var aSort = aSortOrder[j].split(" ");
//					if (aSort.length > 1) {
//						oBindingParams.sorter.push(new Sorter(aSort[0], aSort[1] === "true"));
//					} else {
//						oBindingParams.sorter.push(new Sorter(aSort[0]));
//					}
//				}
//			}
//
//			if (oTable instanceof Table) {
//				// Define grouping (wiki: SmartTable FAQs)
//				var oSorter = oBindingParams.sorter[0];
//				// Check if sorter is for Grouping
//				if (oSorter && oSorter.vGroup) {
//					// Replace the Group function
//					oSorter.fnGroup = fnGroupFunction(oSorter.sPath);
//				}
//			}
		}


		// PoC Chart

		/* eslint-disable */
		var fnBuildSelectionVariantForNavigation = testableHelper.testable(fnBuildSelectionVariantForNavigation, "fnBuildSelectionVariantForNavigation");
		var fnEvaluateParameters = testableHelper.testable(fnEvaluateParameters, "fnEvaluateParameters");
		var fnNavigateIntent = testableHelper.testable(fnNavigateIntent, "fnNavigateIntent");
		var fnHideTitleArea = testableHelper.testable(fnHideTitleArea, "fnHideTitleArea");
		/* eslint-enable */

		return {
			onDataReceived: onDataReceived,
			onBeforeRebindTable: onBeforeRebindTable,
			onListNavigate: onListNavigate,
			onShowDetails: onShowDetails,
			onEditNavigateIntent: fnNavigateIntentManifest,
			onSemanticObjectLinkPopoverLinkPressed: fnSemanticObjectLinkPopoverLinkPressed,
			onDataFieldForIntentBasedNavigation: onDataFieldForIntentBasedNavigation,
			onDataFieldForIntentBasedNavigationSelectedContext: onDataFieldForIntentBasedNavigationSelectedContext,
			onInlineDataFieldForIntentBasedNavigation: onInlineDataFieldForIntentBasedNavigation,
			onDataFieldWithIntentBasedNavigation: onDataFieldWithIntentBasedNavigation,
			onSmartFieldUrlPressed: onSmartFieldUrlPressed,
			onBreadCrumbUrlPressed: onBreadCrumbUrlPressed,
			onCallActionFromToolBar: onCallActionFromToolBar,
			onDiscardDraft: onDiscardDraft,
			discardDraftWithoutDialog: fnDiscardDraftWithoutDialog,
			addEntry: addEntry,
			deleteEntries: deleteEntries,
			onContactDetails: onContactDetails,
			onSemanticObjectLinkNavigationTargetObtained: fnOnSemanticObjectLinkNavigationTargetObtained,
			onSemanticObjectLinkNavigationPressed: fnOnSemanticObjectLinkNavigationPressed,
			//PoC Chart
			onBeforeRebindChart: onBeforeRebindChart
			//PoC Chart
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonEventHandlers", {
		constructor: function(oController, oComponentUtils, oServices, oCommonUtils) {
			jQuery.extend(this, getMethods(oController, oComponentUtils, oServices, oCommonUtils));
		}
	});
});

}; // end of sap/suite/ui/generic/template/lib/CommonEventHandlers.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.CommonUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.CommonUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListBase'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavigationHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.NavError'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/CommonUtils",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/Device", "sap/ui/model/Context", "sap/ui/model/json/JSONModel",
		"sap/ui/comp/smarttable/SmartTable", "sap/ui/table/Table", "sap/m/Table", "sap/m/ListBase", "sap/m/MessageBox",
		"sap/ui/generic/app/navigation/service/NavigationHandler", "sap/ui/generic/app/navigation/service/NavError",
		"sap/suite/ui/generic/template/lib/testableHelper"],
		function(jQuery, BaseObject, Device, Context, JSONModel, SmartTable, UiTable, ResponsiveTable, ListBase, MessageBox,
				NavigationHandler, NavError, testableHelper) {
	"use strict";

	function getNavigationProperty(oPageEntries, sEntitySet) {
		for (var i in oPageEntries) {
			var oEntry = oPageEntries[i];
			if (oEntry.entitySet === sEntitySet && oEntry.component.list && oEntry.navigationProperty) {
				return oEntry.navigationProperty;
			} else if (oEntry.pages) {
				var result = getNavigationProperty(oEntry.pages, sEntitySet);
				if (result) {
					return result;
				}
			}
		}
	}

	function getMethods(oController, oServices, oComponentUtils) {

		var oNavigationHandler; // initialized on demand

		// defines a dependency from oControl to the view
		function fnAttachControlToView(oControl) {
		    oServices.oApplication.attachControlToParent(oControl, oController.getView());
		}

		// See documentation of
		// sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment below
		function getDialogFragment(sName, oFragmentController, sModel, fnOnFragmentCreated) {
		    return oServices.oApplication.getDialogFragmentForView(oController.getView(), sName, oFragmentController, sModel, fnOnFragmentCreated);
		}

		var oResourceBundle; // initialized on first use
		function getText() {
			oResourceBundle = oResourceBundle || oController.getOwnerComponent().getModel("i18n").getResourceBundle();
			return oResourceBundle.getText.apply(oResourceBundle, arguments);
		}

		function getSelectedContexts(oControl) {
			var aSelectedContexts = [];
			if (oControl instanceof SmartTable) {
				oControl = oControl.getTable();
			} else if (oControl instanceof sap.ui.comp.smartchart.SmartChart) {
				oControl = oControl.getChart();
				if (oControl && oControl.getMetadata().getName() === "sap.chart.Chart") {
					var mDataPoints = oControl.getSelectedDataPoints();
					if (mDataPoints && mDataPoints.count > 0) {
						var aDataPoints = mDataPoints.dataPoints;
						for (var i = 0; i < aDataPoints.length; i++) {
							aSelectedContexts.push(aDataPoints[i].context);
						}
					}
				}
			}
			if (oControl instanceof ListBase) {
				aSelectedContexts = oControl.getSelectedContexts();
			} else if (oControl instanceof UiTable) {
				var aIndex = oControl.getSelectedIndices();
				for (var i = 0; i < aIndex.length; i++) {
					aSelectedContexts.push(oControl.getContextByIndex(aIndex[i]));
				}
			}
			return aSelectedContexts;
		}
		
		function getElementCustomData(oElement) {
			var oCustomData = {};
			if (oElement instanceof sap.ui.core.Element) {
				oElement.getCustomData().forEach(function(oCustomDataElement) {
					oCustomData[oCustomDataElement.getKey()] = oCustomDataElement.getValue();
				});
			}
			return oCustomData;
		}

		/*
		 * Sets the enabled value for Toolbar buttons
		 * @param {object} oSubControl
		 */
		function fnSetEnabledToolbarButtons (oSubControl) {
			var aToolbarControls, aButtons, oToolbarControl, sLocalButtonId, bEnabled, mCustomData;
			var oControl = getOwnerControl(oSubControl);  // look for parent table or chart
			var sControlName = oControl.getMetadata().getName();
			if (sControlName !==  "sap.ui.comp.smarttable.SmartTable" && sControlName !== "sap.ui.comp.smartchart.SmartChart") {
				oControl = oControl.getParent();
				sControlName = oControl.getMetadata().getName();
			}
			var aContexts = getSelectedContexts(oControl);
			var oModel = oControl.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oView = oController.getView();

			if (sControlName === "sap.ui.comp.smarttable.SmartTable") {
				aToolbarControls = oControl.getCustomToolbar() && oControl.getCustomToolbar().getContent();

				// Breakout Action buttons
				// for now the breakout actions is only for SmartTable and use a different approach to update the private model
				aButtons = getBreakoutActionsForTable(oControl);
				fnFillEnabledMapForBreakoutActions(aButtons, aContexts, oModel);
			} else if (sControlName === "sap.ui.comp.smartchart.SmartChart") {
				aToolbarControls = oControl.getToolbar() && oControl.getToolbar().getContent();
				//PoC Chart begin
				var oAppComponent = oController.getOwnerComponent().getAppComponent();
				var oConfig = oAppComponent.getConfig();
				if (oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings && oConfig.pages[0].component.settings._quickVariantSelectionX) {
					aButtons = getBreakoutActionsForChart(oControl);
					fnFillEnabledMapForBreakoutActions(aButtons, aContexts, oModel);
				//PoC Chart end
				}
			}

			// loop through the array of controls inside the toolbar
			if (aToolbarControls && aToolbarControls.length > 0) {
				for (var i = 0; i < aToolbarControls.length; i++) {
					bEnabled = undefined;
					oToolbarControl = aToolbarControls[i];

					if (oToolbarControl.getMetadata().getName() === "sap.m.Button" && oToolbarControl.getVisible()) {
						// we determine the type of button (e.g. Delete button, Annotated Action button etc...) via the CustomData "Type"
						mCustomData = getElementCustomData(oToolbarControl);
						if (mCustomData && mCustomData.Type) {
							// get the partial id, instead of the full id generated by ui5
							// partial id is used when initially building the expression - see method buildAnnotatedActionButtonEnablementExpression in AnnotationHelper.js
							sLocalButtonId = oView.getLocalId(oToolbarControl.getId());
							// 1. Type = "CRUDActionDelete" -> Delete button
							// 2. Type = "com.sap.vocabularies.UI.v1.DataFieldForAction" or "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" -> Annotated Action button
							if (mCustomData.Type === "CRUDActionDelete") {
								bEnabled = fnShouldDeleteButtonGetEnabled(oModel, oMetaModel, aContexts, oControl);
								oControl.getModel("_templPriv").setProperty("/listReport/deleteEnabled", bEnabled);
							} else if (mCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || mCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
								bEnabled = fnShouldAnnotatedActionButtonGetEnabled(oModel, oMetaModel, aContexts, mCustomData.Type, mCustomData.Action);
							}
						}

						// check if "enabled" is bound to the path '/generic/controlProperties/' in the model - otherwise it's bound to another path or has a hard coded true/false
						if (/generic\/controlProperties/.test(oToolbarControl.getBindingPath("enabled")) && bEnabled !== undefined) {
							fnSetPrivateModelControlProperty(sLocalButtonId, "enabled", bEnabled);
						}
					}
				}
			}
		}

		function fnSetEnabledFooterButtons (oTable) {
			var aButtons = getBreakoutActionsForFooter();
			var aContexts = getSelectedContexts(oTable);
			var oModel = oTable.getModel();
			fnFillEnabledMapForBreakoutActions(aButtons, aContexts, oModel);
		}

		/*
		 * Updates the private model control property
		 * @param {string} sId - the id of the button in the private model
		 * @param {string} sProperty - the name of the property in the private model
		 * @param {string} sValue - the value of the property
		 */
		function fnSetPrivateModelControlProperty (sId, sProperty, sValue) {
			var oTemplatePrivateModel = oController.getView().getModel("_templPriv");
			var mModelProperty = oTemplatePrivateModel.getProperty("/generic/controlProperties/" + sId);
			// check if the id exists in the model
			if (!mModelProperty) {
				mModelProperty = {};
				mModelProperty[sProperty] = sValue;
				oTemplatePrivateModel.setProperty("/generic/controlProperties/" + sId, mModelProperty);
			} else {
				oTemplatePrivateModel.setProperty("/generic/controlProperties/" + sId + "/" + sProperty, sValue);
			}
		}

		/*
		 * Determines whether an Annotated Action should be enabled or disabled
		 * @private
		 */
		function fnShouldAnnotatedActionButtonGetEnabled (oModel, oMetaModel, aContexts, sType, sAction) {
			var mFunctionImport, mData, sActionFor, sApplicablePath;
			var bEnabled = false;

			if (sType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				mFunctionImport = oMetaModel.getODataFunctionImport(sAction);
				sActionFor = mFunctionImport && mFunctionImport["sap:action-for"];
				// check if 'sap:action-for' is defined
				if (sActionFor && sActionFor !== "" && sActionFor !== " ") {
					if (aContexts.length > 0) {
						sApplicablePath = mFunctionImport["sap:applicable-path"];
						// check if 'sap:applicable-path' is defined
						if (sApplicablePath && sApplicablePath !== "" && sApplicablePath !== " ") {
							for (var j = 0; j < aContexts.length; j++) {
								mData = oModel.getObject(aContexts[j].getPath()); // get the data
								if (mData && mData[sApplicablePath] === true) {
									bEnabled = true;  //  'sap:action-for' defined, 'sap:applicable-path' defined, 'sap-applicable-path' value is true, more than 1 selection -> enable button
									break;
								}
							}
						} else {
							bEnabled = true; // 'sap:action-for' defined, 'sap:applicable-path' not defined, more than 1 selection -> enable button
						}
					}
				} else {
					bEnabled = true; // 'sap:action-for' not defined, no selection required -> enable button
				}
			} else if (sType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && aContexts.length > 0) { // to enable UI.DataFieldForIntentBasedNavigation action button at least one selection is required
				bEnabled = true;
			}

			return bEnabled;
		}

		/*
		 * Determines whether the Delete button should be enabled or disabled
		 * @private
		 */
		function fnShouldDeleteButtonGetEnabled (oModel, oMetaModel, aContexts, oControl) {
			// Get the DeleteRestrictions for the entity set
			var mDeleteRestrictions = fnGetDeleteRestrictions(oControl);

			// 1- Make Delete button disabled and assume all items are NOT deletable
			// 2- Check if the DeleteRestrictions are valid. if not-> Delete button disabled
			// 3- Check if the Deletable-path is defined. if not-> Delete button enabled.
			// if there is no DeleteRestrictions, this means the entities are deletable
			var bEnabled = false;
			var mRelatedEntitySet = oMetaModel.getODataEntitySet(oControl.getEntitySet());
			if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, mRelatedEntitySet.entityType, mDeleteRestrictions)) {
				if (aContexts.length > 0) {
					var sDeletablePath = mDeleteRestrictions && mDeleteRestrictions.Deletable && mDeleteRestrictions.Deletable.Path;
					if (sDeletablePath) {
						for (var i = 0; i < aContexts.length; i++) {
							if (oModel.getProperty(sDeletablePath, aContexts[i])) {
								bEnabled = true;
								break;
							}
						}
					} else {
						bEnabled = true;
					}
				}
			}

			return bEnabled;
		}

		/*
		 * Returns the Deletable Restrictions
		 * @param {object} oControl - must be of a Smart Control (e.g. SmartTable, SmartChart)
		 */
		function fnGetDeleteRestrictions(oControl) {
			var oMetaModel = oControl.getModel() && oControl.getModel().getMetaModel();
			var mEntitySet = oMetaModel && oMetaModel.getODataEntitySet(oControl.getEntitySet());
			var mDeleteRestrictions = mEntitySet && mEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
			return mDeleteRestrictions;
		}

		/*
		* Update map /generic/listCommons/functionEnabled from selected context,
		* considering the applicable path and action-for
		*/
		function fnFillEnabledMapForBreakoutActions(aButtons, aContexts, oModel) {
			var oBreakoutActions = fnGetBreakoutActionsFromManifest(oModel);
			var oTemplatePrivateModel = oController.getView().getModel("_templPriv");
			var oBreakOutActionEnabled = oTemplatePrivateModel.getProperty("/generic/listCommons/breakoutActionsEnabled");
			if (oBreakoutActions) {
				var oIconTabBar = oController.byId("template::IconTabBar");
				var sSelectedTabKey = "";
				if (oIconTabBar) {
					sSelectedTabKey = oIconTabBar.getSelectedKey();
				}
				fnUpdateBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions, aButtons, aContexts, oModel, sSelectedTabKey);
			}
			oTemplatePrivateModel.setProperty("/generic/listCommons/breakoutActionsEnabled", oBreakOutActionEnabled);
		}

		function fnUpdateBreakoutEnablement(oBreakOutActionEnabled, oBreakoutActions, aButtons, aContexts, oModel, sSelectedTabKey) {
			var bEnabled;
			for (var sAction in oBreakoutActions) {
				var sActionId = oBreakoutActions[sAction].id;
				if (sSelectedTabKey && !oBreakoutActions[sAction].determining) {
					sActionId = sActionId.concat("-", sSelectedTabKey);
				}
				if (jQuery.inArray(sActionId, aButtons) !== -1) {
					bEnabled = true;
					if (oBreakoutActions[sAction].requiresSelection) {
						if (aContexts.length > 0) { // context selected
							if (oBreakoutActions[sAction].applicablePath !== undefined && oBreakoutActions[sAction].applicablePath !== "") {
								// loop on all selected contexts: at least one must be selected with applicablePath = true
								bEnabled = false;
								for (var iContext = 0; iContext < aContexts.length; iContext++) {
									// check if applicablePath is true
									var sNavigationPath = "";
									var aPaths = oBreakoutActions[sAction].applicablePath.split("/");
									if (aPaths.length > 1) {
										for (var iPathIndex = 0; iPathIndex < aPaths.length - 1; iPathIndex++) {
											sNavigationPath +=  "/" + aPaths[iPathIndex];
										}
									}
									var oObject = oModel.getObject(aContexts[iContext].getPath() + sNavigationPath);
									var sApplicablePath = aPaths[aPaths.length - 1];
									if (oObject[sApplicablePath] === true) {
										bEnabled = true;
										break;
									}
								}
							}
						} else {
							// requiresSelection is defined, but no row is selected
							bEnabled = false;
						}
					}
					oBreakOutActionEnabled[sActionId] = {
							enabled: bEnabled
					};
				}
			}
		}

		function getBreakoutActionsForTable(oTable) {
			var aButtons = [];
			var aTableToolbarContent = jQuery.grep(oTable.getCustomToolbar().getContent(), function(oControl) {
				return oControl.getMetadata().getName() === "sap.m.Button";
			});
			for (var iTableToolbarContent = 0; iTableToolbarContent < aTableToolbarContent.length; iTableToolbarContent++) {
				var aSplitId = aTableToolbarContent[iTableToolbarContent].getId().split("--");
				aButtons.push(aSplitId[aSplitId.length - 1]);
			}
			return aButtons;
		}

		//PoC Chart begin
		function getBreakoutActionsForChart(oChart) {
			var aButtons = [];
			var aChartToolbarContent = jQuery.grep(oChart.getToolbar().getContent(), function(oControl) {
				return oControl.getMetadata().getName() === "sap.m.Button";
			});
			for (var iChartToolbarContent = 0; iChartToolbarContent < aChartToolbarContent.length; iChartToolbarContent++) {
				var aSplitId = aChartToolbarContent[iChartToolbarContent].getId().split("--");
				aButtons.push(aSplitId[aSplitId.length - 1]);
			}
			return aButtons;
		}
		//PoC Chart end

		function getBreakoutActionsForFooter() {
			var aButtons = [];
			var aFooterToolbarContent = [];
			var oPage = oController.byId("page");
			if (oPage && oPage.getFooter()) {
				aFooterToolbarContent = jQuery.grep(oPage.getFooter().getContent(), function(oControl) {
					return oControl.getMetadata().getName() === "sap.m.Button";
				});
			}
			for (var iFooterToolbarContent = 0; iFooterToolbarContent < aFooterToolbarContent.length; iFooterToolbarContent++) {
				var aSplitId = aFooterToolbarContent[iFooterToolbarContent].getId().split("--");
				aButtons.push(aSplitId[aSplitId.length - 1]);
			}
			return aButtons;
		}

		function fnGetBreakoutActionsFromManifest(oModel) {
			// Loop on manifest for breakout actions
			var oManifest = oController.getOwnerComponent().getAppComponent().getManifestEntry("sap.ui5");
			var oExtensions = oManifest.extends && oManifest.extends.extensions && oManifest.extends.extensions["sap.ui.controllerExtensions"];
			if (oExtensions) {
				var	oTemplateExtensions = (oExtensions[oController.getOwnerComponent().getTemplateName()] || {})["sap.ui.generic.app"] || {};
				var oMetaModel = oModel.getMetaModel();
				var oBreakoutActions = (oTemplateExtensions[oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet()).name] || {})["Actions"];
				if (!oBreakoutActions) {
					oBreakoutActions = {};
					var oSections = (oTemplateExtensions[oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet()).name] || {})["Sections"];
					if (oSections) {
						for (var sSection in oSections) {
							oBreakoutActions = jQuery.extend(oBreakoutActions, oSections[sSection]["Actions"]);
						}
					}
				}
				return oBreakoutActions;
			}
		}

		/*
		 * Returns a parental table of the given element or null
		 *
		 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a parental table
		 * @returns {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} The parent table or null
		 * @public
		 */
		function getOwnerControl(oSourceControl){
			var oCurrentControl = oSourceControl;
			while (oCurrentControl) {
					if (oCurrentControl instanceof ResponsiveTable || oCurrentControl instanceof UiTable || oCurrentControl instanceof SmartTable || oCurrentControl instanceof sap.ui.comp.smartchart.SmartChart) {
						return oCurrentControl;
					}

					if (oCurrentControl.getParent){
						oCurrentControl = oCurrentControl.getParent();
					} else {
						return null;
					}

				}
			return null;
		}

		/*
		 * Returns the binding of the given table
		 *
		 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table which's binding is to returned
		 * @returns {object} The found binding or null
		 * @public
		 */
		function getTableBindingInfo(oTable) {
			if (oTable instanceof SmartTable) {
				oTable = oTable.getTable(); // get SmartTable's inner table first
			}

			if (oTable instanceof UiTable) {
				return oTable.getBindingInfo("rows");
			} else if (oTable instanceof ResponsiveTable) {
				return oTable.getBindingInfo("items");
			}

			return null;
		}

		/*
		 * Refresh given SmartTable
		 * 
		 * This method should be provided by SmartTable itself
		 * 
		 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oSmartTable The table to refresh. Intended for SmartTable,
		 * but will also work if inner table is provided
		 */
		
		function fnRefreshSmartTable(oSmartTable) {
			var oBindingInfo = getTableBindingInfo(oSmartTable);
			if (oBindingInfo && oBindingInfo.binding) {
				oBindingInfo.binding.refresh();
			} else {
				oSmartTable.rebindTable();
			}
		}
		
		/*
		 * Triggers navigation from a given list item.
		 *
		 * @param {sap.ui.model.context} selected context for navigation
		 * @param {object} oTable The table from which navigation was triggered
		 *        control in the table
		 * @public
		 */
		function fnNavigateFromListItem(oContext, oTable) {
			var sSelectedPath = oContext.getPath();
			var oComponent = oController.getOwnerComponent();

			// binding path of component - either binding path of list (list screen e.g. /SalesOrder) or binding path of details screen (e.g.
			// /SalesOrder(123) )
			var oElementBinding = oComponent.getComponentContainer().getElementBinding();
			var sPath = oElementBinding ? oElementBinding.getPath() : "";

			// check whether it is a navigation property binding or just a collection
			var sNavigationProperty = null;

			if (sSelectedPath.indexOf(sPath) !== 0) {
				// relative binding - table bound to navigation property e.g. Item - get binding of embedded table in details screen
				sNavigationProperty = getTableBindingInfo(oTable).path;
			}

			var bReplace = !oServices.oApplication.isNewHistoryEntryRequired(oContext, sNavigationProperty);
			var iDisplayMode;
			if (oComponentUtils.isDraftEnabled()){
				iDisplayMode = oServices.oDraftController.isActiveEntity(oContext) ? 1 : 6;
			} else {
				iDisplayMode = oComponent.getModel("ui").getProperty("/editable") ? 6 : 1;
			}
			
			var iViewLevel = oComponentUtils.getViewLevel();
			if (iViewLevel === 0) {
				var sForwardNavigationProperty = oServices.oApplication.getForwardNavigationProperty(iViewLevel);
			}
			
			// check if forwardNavigationProperty is set and navigate to the corrosponding page
			if (sForwardNavigationProperty) {
				var oContextCreationBindingPromise = new Promise(function(fnResolve){
					oContext.getModel().createBindingContext(sForwardNavigationProperty, oContext, null, function(oNavigationContext) {
						if (oNavigationContext) {
							oServices.oNavigationController.navigateToContext(oNavigationContext, sNavigationProperty, bReplace, iDisplayMode);
							fnResolve();
						} else {
							oComponentUtils.navigateToDataLoadedFailedPage();
							fnResolve();
						}
					});
				});
				var oBusyHelper = oServices.oApplication.getBusyHelper();
				oBusyHelper.setBusy(oContextCreationBindingPromise);
			} else {
				 oServices.oNavigationController.navigateToContext(oContext, sNavigationProperty, bReplace, iDisplayMode);
			}
		}

		/*
		 * Triggers navigation to the specified context.
		 *
		 * @param {sap.ui.model.Context} context for navigation
		 * @param {object} [oNavigationData] object containing navigation data
		 */
		function fnNavigateToContext(vContext, oNavigationData) {
			// Normal navigation (via a context)
			if (vContext instanceof Context){
				oServices.oNavigationController.navigateToContext(vContext, oNavigationData && oNavigationData.navigationProperty, oNavigationData && oNavigationData.replaceInHistory);
				return;
			}
			// Navigation via a virtual navigation property
			var sRouteName = oNavigationData && oNavigationData.routeName;
			if (sRouteName){
				oComponentUtils.navigateRoute(sRouteName, vContext, null, oNavigationData && oNavigationData.replaceInHistory);
				return;
			}
			jQuery.sap.log.warning("navigateToContext called without context or route");
		}

		// Fix for BCP 1770053414 where error message is displayed instead of error code
		function fnHandleError(oError) {
			if (oError instanceof NavError) {
				if (oError.getErrorCode() === "NavigationHandler.isIntentSupported.notSupported") {
					MessageBox.show(getText("ST_NAV_ERROR_NOT_AUTHORIZED_DESC"), {
						title: getText("ST_GENERIC_ERROR_TITLE")
					});
			} else {
					MessageBox.show(oError.getErrorCode(), {
						title: getText("ST_GENERIC_ERROR_TITLE")
					});
				}
			}
		}

		function fnNavigateExternal(oOutbound, oState) {
			fnProcessDataLossConfirmationIfNonDraft(function() {
				oNavigationHandler = getNavigationHandler();
				var oObjectInfo = {
						semanticObject: oOutbound.semanticObject,
						action: oOutbound.action
				};
				var oSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oOutbound.parameters);
				oController.adaptNavigationParameterExtension(oSelectionVariant, oObjectInfo);
				oNavigationHandler.navigate(oOutbound.semanticObject, oOutbound.action, oSelectionVariant.toJSONString(), oState.getCurrentAppState
						&& oState.getCurrentAppState() || {}, fnHandleError);
			}, jQuery.noop, oState, "LeavePage");
		}

		function fnSemanticObjectLinkNavigation(oEventParameters, sSelectionVariant, oController) {
			var oSelectionVariant, sSelectionVariantPrepared, sParameter, sSemanticObject, aSelVariantPropertyNames, aSelOptionPropertyNames, aParameterNames;
			var oObjectInfo = {
				semanticObject : "",
				action : ""
			};
			oNavigationHandler = getNavigationHandler();
			for (sSemanticObject in oEventParameters.semanticAttributesOfSemanticObjects) {
				oSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant({}, sSelectionVariant);
				//collect the parameters without values!
				for (sParameter in oEventParameters.semanticAttributesOfSemanticObjects[sSemanticObject]) {
					if (!oSelectionVariant.getSelectOption(sParameter)) {
						oSelectionVariant.addParameter(sParameter, "");
					}
				}
				aSelVariantPropertyNames = oSelectionVariant.getPropertyNames();
				oObjectInfo.semanticObject = sSemanticObject; 
				oController.adaptNavigationParameterExtension(oSelectionVariant, oObjectInfo);
				aSelOptionPropertyNames = oSelectionVariant.getSelectOptionsPropertyNames();
				aParameterNames = oSelectionVariant.getParameterNames();
				for (var i = 0, length = aSelVariantPropertyNames.length; i < length; i++) {
					if (aSelOptionPropertyNames.indexOf(aSelVariantPropertyNames[i]) < 0 && aParameterNames.indexOf(aSelVariantPropertyNames[i]) < 0) {
					//remove the not selected parameters and selectOptions
						delete oEventParameters.semanticAttributesOfSemanticObjects[sSemanticObject][aSelVariantPropertyNames[i]];
						oSelectionVariant.removeSelectOption(aSelVariantPropertyNames[i]);
					}
				}
				if (sSemanticObject === oEventParameters.semanticObject){
					var oSemObjEmpty = oEventParameters.semanticAttributesOfSemanticObjects[""];
					for (var j = 0, length = aParameterNames.length; j < length; j++ ) {
						if (aParameterNames[j] in oSemObjEmpty) {
							oSelectionVariant.removeParameter(aParameterNames[j]);
						} else {
							oSelectionVariant.removeParameter(aParameterNames[j]);
							oSelectionVariant.addParameter(aParameterNames[j], oEventParameters.semanticAttributesOfSemanticObjects[oEventParameters.semanticObject][aParameterNames[j]]);
						}
					}
					oSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(oEventParameters.semanticAttributesOfSemanticObjects[sSemanticObject], sSelectionVariant);
					sSelectionVariantPrepared = oSelectionVariant.toJSONString();
				}
			}
			delete oEventParameters.semanticAttributes;
			oNavigationHandler.processBeforeSmartLinkPopoverOpens(oEventParameters, sSelectionVariantPrepared);
		}

		function formatDraftLockText(IsActiveEntity, HasDraftEntity, LockedBy) {
			if (!IsActiveEntity) {
				// current assumption: is my Draft as I don't see other's draft -> TODO: to be checked
				return getText("DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				return getText(LockedBy ? "LOCKED_OBJECT" : "UNSAVED_CHANGES");
			} else {
				return ""; // not visible
			}
		}

		function getDraftPopover() {
			var oDraftPopover = getDialogFragment("sap.suite.ui.generic.template.fragments.DraftAdminDataPopover", {
				formatText: function() {
					var aArgs = Array.prototype.slice.call(arguments, 1);
					var sKey = arguments[0];
					if (!sKey) {
						return "";
					}
					if (aArgs.length > 0 && (aArgs[0] === null || aArgs[0] === undefined || aArgs[0] === "")) {
						if (aArgs.length > 3 && (aArgs[3] === null || aArgs[3] === undefined || aArgs[3] === "")) {
							return (aArgs.length > 2 && (aArgs[1] === null || aArgs[1] === undefined || aArgs[1] === ""))
									? ""
									: aArgs[2];
						} else {
							return getText(sKey, aArgs[3]);
						}
					} else {
						return getText(sKey, aArgs[0]);
					}
				},
				closeDraftAdminPopover: function() {
					oDraftPopover.close();
				},
				formatDraftLockText: formatDraftLockText
			}, "admin");
			return oDraftPopover;
		}

		function fnProcessDataLossConfirmationIfNonDraftImpl(fnProcessFunction, fnCancelFunction, oState, sMode, bNoBusyCheck, oEvent) {
			var oBusyHelper = oServices.oApplication.getBusyHelper();
			if (!bNoBusyCheck && oBusyHelper.isBusy()) {
				return; // do not navigate away from a page that is currently busy
			}
			// DataLost Popup only for Non-Draft
			if ( !oComponentUtils.isDraftEnabled() ) {
				//Test all registered UnsavedDataCheckFunctions
				var bHasExternalChanges = false;
				if (oState && oState.aUnsavedDataCheckFunctions){
					bHasExternalChanges = oState.aUnsavedDataCheckFunctions.some(function(fnUnsavedCheck) {
						return fnUnsavedCheck();
					});
				}
				var oView = oController.getView();
				var oModel = oView.getModel();
				if ( bHasExternalChanges || oModel.hasPendingChanges() ) {
					var oExecutionPromise;
					fnDataLossConfirmation(function() {
						oView.setBindingContext(null);
						oModel.resetChanges();
						oView.setBindingContext();
						//Notification for reuse components and extensions
						oComponentUtils.fire(oController, "AfterCancel", {});
						oExecutionPromise = fnProcessFunction();
					},	function(){
						oExecutionPromise = fnCancelFunction();
					}, sMode, oEvent);
					return oExecutionPromise;
				}
			}
			return fnProcessFunction();
		}

		function fnProcessDataLossTechnicalErrorConfirmation(fnProcessFunction, fnCancelFunction, oState, sMode) {
			//Test all registered UnsavedDataCheckFunctions
			var bHasExternalChanges = false;
			if (oState && oState.aUnsavedDataCheckFunctions){
				bHasExternalChanges = oState.aUnsavedDataCheckFunctions.some(function(fnUnsavedCheck) {
					return fnUnsavedCheck();
				});
			}
			if ( bHasExternalChanges || oController.getView().getModel().hasPendingChanges() ) {
				var oExecutionPromise;
				fnDataLossTechnicalErrorConfirmation(
						function() {
							oController.getView().getModel().resetChanges();
							//Notification for reuse components and extensions
							oComponentUtils.fire(oController, "AfterCancel", {});
							oExecutionPromise = fnProcessFunction();
						},
						function(){
							oExecutionPromise = fnCancelFunction();
						},
						sMode );
				return oExecutionPromise;
			}
			return fnProcessFunction();
		}

		function fnProcessDataLossConfirmationIfNonDraft(fnProcessFunction, fnCancelFunction, oState, sMode, bNoBusyCheck, oEvent){
			if (bNoBusyCheck){
				return fnProcessDataLossConfirmationIfNonDraftImpl(fnProcessFunction, fnCancelFunction, oState, sMode, true, oEvent);
			}
			oServices.oApplication.performAfterSideEffectExecution(fnProcessDataLossConfirmationIfNonDraftImpl.bind(null, fnProcessFunction, fnCancelFunction, oState, sMode, false, oEvent));
		}

		var fnOnDataLossConfirmed; // the current handler for data loss confirmation
		/*
		Shows DataLoss popup or Discard popover in NonDraft Applications
		onBack, a dataloss popup is shown and in case on onCancel discardPopover is shown. oEvent is passed to attach popover on Cancel button
		*/
		function fnDataLossConfirmation(onDataLossConfirmed, onDataLossCancel, sMode, oEvent) {
			// note that we must pass the event handler to a global variable, since always the version of onDataLossOK will be
			// executed which was created, when fnDataLossConfirmation was called for the first time
			// (see documentation of getDialogFragment).
			var oDataLossModel;
			fnOnDataLossConfirmed = onDataLossConfirmed;
			// if sMode or oEvent is undefined then show DataLoss Popup
			if (!sMode || !oEvent) {
				var oDataLossPopup = getDialogFragment("sap.suite.ui.generic.template.fragments.DataLoss", {
				onDataLossOK: function() {
					oDataLossPopup.close();
					fnOnDataLossConfirmed(); // call the version of onDataLossConfirmed which is currently valid
				},
				onDataLossCancel: function() {
					oDataLossPopup.close();
					onDataLossCancel();
				}
			}, "dataLoss");
			if (!sMode) {
				sMode = "LeavePage";	
			}
			oDataLossModel = oDataLossPopup.getModel("dataLoss");
			oDataLossModel.setProperty("/mode", sMode);
			oDataLossPopup.open();
			} else { // if sMode is Proceed or LeavePage then show Popover
			var oDataLossPopover = getDialogFragment("sap.suite.ui.generic.template.fragments.DiscardDraftPopover", {
				onDiscardConfirm: function() {
					fnOnDataLossConfirmed();
				}
			}, "discard");
			oDataLossModel = oDataLossPopover.getModel("discard");
			oDataLossModel.setProperty("/placement", sap.m.PlacementType.Top);
			if (sMode !== "Proceed") {
				oDataLossModel.setProperty("/isCreateDraft", true);	
			} else {
				oDataLossModel.setProperty("/isCreateDraft", false);
			}
			oDataLossModel.setProperty("/mode", sMode);
			oDataLossPopover.openBy(oEvent.getSource());	
			}
		}

		var fnOnDataTechnicalErrorLossConfirmed; // the current handler for data loss confirmation
		function fnDataLossTechnicalErrorConfirmation(onDataTechnicalErrorLossConfirmed, onDataLossCancel, sMode) {

			fnOnDataTechnicalErrorLossConfirmed = onDataTechnicalErrorLossConfirmed;
			if (!sMode){
				sMode = "LeavePage";
			}
			var oDataLossPopup = getDialogFragment("sap.suite.ui.generic.template.fragments.DataLossTechnicalError", {
				onDataLossOK: function() {
					oDataLossPopup.close();
					fnOnDataTechnicalErrorLossConfirmed(); // call the version of onDataLossConfirmed which is currently valid
				},
				onDataLossCancel: function() {
					oDataLossPopup.close();
					onDataLossCancel();
				}
			}, "dataLoss");

			var oDataLossModel = oDataLossPopup.getModel("dataLoss");
			oDataLossModel.setProperty("/mode", sMode);
			oDataLossPopup.open();
		}

		function fnSecuredExecutionImpl(fnFunction, mParameters, oState, oBusyHelper, resolve, reject) {

			if (mParameters.busy.check && oBusyHelper.isBusy()) {
				reject();
				return;
			}
			// In case the app should be set busy we make sure that the corresponding busy session contains the call of fnFunction.
			// This way all transient messages which are added by fnFunction synchronously will be shown at the end of this busy session.
			var fnExecute = mParameters.busy.set ? function(){
				oBusyHelper.setBusy(Promise.resolve());
				return fnFunction();
			} : fnFunction;
			
			
			var oPromise = (mParameters.dataloss.popup ? fnProcessDataLossConfirmationIfNonDraft(fnExecute, reject,
				oState, (mParameters.dataloss.navigation ? "LeavePage" : "Proceed"), true) : fnExecute());

			if (oPromise instanceof Promise) {
				oPromise.then(resolve, reject);
			} else {
				resolve();
			}
		}

		function fnSecuredExecution(fnFunction, mParameters, oState) {
			mParameters = jQuery.extend(true, {
				busy: {set: true, check: true},
				dataloss: {popup: true, navigation: false}
			}, mParameters);
			var oBusyHelper = oServices.oApplication.getBusyHelper();
			var oResultPromise = new Promise(function(resolve, reject) {
				oServices.oApplication.performAfterSideEffectExecution(fnSecuredExecutionImpl.bind(null, fnFunction, mParameters, oState, oBusyHelper, resolve, reject));
			});
			if (mParameters.busy.set) {
				oBusyHelper.setBusy(oResultPromise);
			}
			return oResultPromise;
		}

		function getNavigationHandler() {
			oNavigationHandler = oNavigationHandler || new NavigationHandler(oController);
			return oNavigationHandler;
		}

		function fnCheckToolbarIntentsSupported(oSmartTable, oPrivModel) {
			var oAppComponent, oXApplNavigation, oSupportedIntents, aToolbarContent, iButtonsNumber, aLinksToCheck = [], aInternalLinks = [], i, oCustomData, sSemObj, sAction, oLink, oInternalLink, oDeferredLinks;
			var iLinksNumber, oSemObjProp;
			oAppComponent = oController.getOwnerComponent().getAppComponent();
			oXApplNavigation = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService && sap.ushell.Container.getService("CrossApplicationNavigation");
			oSupportedIntents = oPrivModel.getProperty("/generic/supportedIntents/");
			//handle toolbar buttons
			aToolbarContent = oSmartTable.getCustomToolbar().getContent();
			iButtonsNumber = aToolbarContent.length;
			for (i = 0; i < iButtonsNumber; i++) {
				oCustomData = getElementCustomData(aToolbarContent[i]);
				if (oCustomData.hasOwnProperty("SemanticObject") && oCustomData.hasOwnProperty("Action")) {
					sSemObj = oCustomData.SemanticObject;
					sAction = oCustomData.Action;
					oLink = {
						semanticObject: sSemObj,
						action: sAction,
						ui5Component: oAppComponent
					};
					aLinksToCheck.push([oLink]);
					oInternalLink = jQuery.extend({}, oLink);
					oInternalLink.bLinkIsSupported = false;
					aInternalLinks.push(oInternalLink);
				}
			}

			if (aLinksToCheck.length > 0 && !!oXApplNavigation) {
			oDeferredLinks = oXApplNavigation.getLinks(aLinksToCheck);
			oDeferredLinks
				.done(function(aLinks) {
					oSupportedIntents = oPrivModel.getProperty("/generic/supportedIntents/");
					iLinksNumber = aLinks.length;
					//entries in aLinks should correspond to aInternalLinks: if a link is not supported an empty object is returned by the method getLinks
					for (i = 0; i < iLinksNumber; i++) {
						if (aLinks[i][0].length > 0) {
							aInternalLinks[i].bLinkIsSupported = true;
						}
						// add the value to the model
						sSemObj = aInternalLinks[i].semanticObject;
						sAction = aInternalLinks[i].action;

						oSemObjProp = oPrivModel.getProperty("/generic/supportedIntents/" + sSemObj);
						if (!oSemObjProp) {  // no semantic object in the model yet
							oSupportedIntents[sSemObj] = {};
							oSupportedIntents[sSemObj][sAction] =
							{
								"visible" :aInternalLinks[i].bLinkIsSupported
							};
						} else if (!oSemObjProp[sAction]) {  // no action in the model yet
							oSemObjProp[sAction] =
							{
								"visible" :aInternalLinks[i].bLinkIsSupported
							};
						} else {
							oSemObjProp[sAction]["visible"] = aInternalLinks[i].bLinkIsSupported;
						}
					}
					oPrivModel.updateBindings();
				});
			}
		}

		function fnGetSelectionVariantFilters(oSmartTable, oSegButtonOrVariantSelectItem) {
			var aSelectionVariantFilters = [], oSelectionVariantPath;
			var sSelectionVariantPath = getElementCustomData(oSmartTable).variantAnnotationPath;
			if (!sSelectionVariantPath && oSegButtonOrVariantSelectItem) {
				sSelectionVariantPath = getElementCustomData(oSegButtonOrVariantSelectItem).variantAnnotationPath;
			}
			if (sSelectionVariantPath) {
				var oModel = oSmartTable.getModel();
				var oMetaModel = oModel.getMetaModel();
				var sEntitySet = oSmartTable.getEntitySet();
				var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oVariant = oEntityType[sSelectionVariantPath];
				if (!oVariant.SelectOptions && oVariant.SelectionVariant) {
					// for SelectionPresentationVariants, make sure to refer to SelectionVariant
					oVariant = oVariant.SelectionVariant;
				}
				if (oVariant.AnnotationPath) {
					oSelectionVariantPath = oVariant.AnnotationPath.split("@")[1];
					oVariant = oEntityType[oSelectionVariantPath];
				}
				for (var i in oVariant.SelectOptions) {
					if (oVariant.SelectOptions[i].PropertyName) {
						var sPath = oVariant.SelectOptions[i].PropertyName.PropertyPath;
						for (var j in oVariant.SelectOptions[i].Ranges) {
							var oOperator = oVariant.SelectOptions[i].Ranges[j].Option;
							oOperator.EnumMember = oOperator.EnumMember.replace("com.sap.vocabularies.UI.v1.SelectionRangeOptionType/", "");
							var oValueLow = oVariant.SelectOptions[i].Ranges[j].Low;
							var oValueHigh = oVariant.SelectOptions[i].Ranges[j].High;
							var sKeyLow = Object.keys(oValueLow)[0];
							if (oValueHigh) {
								var sKeyHigh = Object.keys(oValueHigh)[0];
								aSelectionVariantFilters.push(new sap.ui.model.Filter(sPath, oOperator.EnumMember, oValueLow[sKeyLow], oValueHigh[sKeyHigh]));
							} else {
								aSelectionVariantFilters.push(new sap.ui.model.Filter(sPath, oOperator.EnumMember, oValueLow[sKeyLow]));
							}
						}
					}
				}
			}
			return aSelectionVariantFilters;
		}

		// Expose selected private functions to unit tests
		// etBreakoutActionsForTable
		/* eslint-disable */
		var getNavigationHandler = testableHelper.testable(getNavigationHandler, "getNavigationHandler");
		var fnFillEnabledMapForBreakoutActions = testableHelper.testable(fnFillEnabledMapForBreakoutActions, "fillEnabledMapForBreakoutActions");
		var getBreakoutActionsForTable = testableHelper.testable(getBreakoutActionsForTable, "getBreakoutActionsForTable");
		var getOwnerControl = testableHelper.testable(getOwnerControl, "getOwnerControl");
		var getSelectedContexts = testableHelper.testable(getSelectedContexts, "getSelectedContexts");
		/* eslint-enable */

		return {
			getNavigationProperty: getNavigationProperty,
			getText: getText,
			getNavigationHandler: getNavigationHandler,

			executeGlobalSideEffect: function() {
				if (oComponentUtils.isDraftEnabled()) {
					var oView = oController.getView();
					oView.attachBrowserEvent(
							"keyup",
							function(oBrowserEvent) {
								var isSearchField = (oBrowserEvent.target.type === "search") ? true : false;
								var isTextArea = (oBrowserEvent.target.type === "textarea") ? true : false;
								if (oBrowserEvent.keyCode === 13 && oView.getModel("ui").getProperty("/editable") && !isSearchField && !isTextArea) {
									//Getting the value of bForceGlobalRefresh from Manifest
									var oConfig = oController.getOwnerComponent().getAppComponent().getConfig();
									var bForceGlobalRefresh = oConfig.settings && oConfig.settings.forceGlobalRefresh;
									var sideEffectPromise = oServices.oApplicationController.executeSideEffects(oView.getBindingContext(),null,null,bForceGlobalRefresh);
									sideEffectPromise.then(
										setTimeout(function() {
											document.getElementById(oBrowserEvent.target.id).focus(); //set focus back to the selected field
										}, 0));
								}
							});
				}
			},
			setEnabledToolbarButtons: fnSetEnabledToolbarButtons,
			setEnabledFooterButtons: fnSetEnabledFooterButtons,
			fillEnabledMapForBreakoutActions: fnFillEnabledMapForBreakoutActions,
			getBreakoutActionsForTable: getBreakoutActionsForTable,
			getBreakoutActionsFromManifest: fnGetBreakoutActionsFromManifest,
			getSelectedContexts: getSelectedContexts,
			getDeleteRestrictions: fnGetDeleteRestrictions,

			setPrivateModelControlProperty: fnSetPrivateModelControlProperty,

			navigateFromListItem: fnNavigateFromListItem,
			navigateToContext: fnNavigateToContext,
			navigateExternal: fnNavigateExternal,
			semanticObjectLinkNavigation: fnSemanticObjectLinkNavigation,

			getSelectionVariantFilters: fnGetSelectionVariantFilters,

			getCustomData: function(oEvent) {
				var aCustomData = oEvent.getSource().getCustomData();
				var oCustomData = {};
				for (var i = 0; i < aCustomData.length; i++) {
					oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
				}
				return oCustomData;
			},

			formatDraftLockText: formatDraftLockText,

			showDraftPopover: function(oBindingContext, oTarget) {
				var oPopover = getDraftPopover();
				var oAdminModel = oPopover.getModel("admin");
				oAdminModel.setProperty("/IsActiveEntity", oBindingContext.getProperty("IsActiveEntity"));
				oAdminModel.setProperty("/HasDraftEntity", oBindingContext.getProperty("HasDraftEntity"));
				oPopover.bindElement({
					path: oBindingContext.getPath() + "/DraftAdministrativeData"
				});
				if (oPopover.getBindingContext()) {
					oPopover.openBy(oTarget);
				} else {
					oPopover.getObjectBinding().attachDataReceived(function() {
						oPopover.openBy(oTarget);
					});
					// Todo: Error handling
				}
			},

			// provide the density class that should be used according to the environment (may be "")
			getContentDensityClass: function() {
				return oServices.oApplication.getContentDensityClass();
			},

			// defines a dependency from oControl to the view
			attachControlToView: fnAttachControlToView,

			/**
			 *
			 * @function
			 * @name sap.suite.ui.generic.template.lib.CommonUtils.prototype.getSelectedContexts.getDialogFragment(sName,
			 *       oFragmentController, sModel)
			 * @param sName name of a fragment defining a dialog for the current view
			 * @param oFragmentController controller for the fragment containing event handlers and formatters used by the
			 *          fragment
			 * @param sModel optional, name of a model. If this parameter is truthy a JSON model with the given name will be
			 *          attached to the dialog
			 * @return an instance of the specififed fragment which is already attached to the current view. Note that each
			 *         fragment will only be instantiated once. Hence, when the method is called several times for the same
			 *         name the same fragment will be returned in each case. <b>Attention:</b> The parameters
			 *         <code>oFragmentController</code> and <code>sModel</code> are only evaluated when the method is
			 *         called for the first time for the specified fragment. Therefore, it is essential that the functions in
			 *         <code>oFragmentController</code> do not contain 'local state'.
			 */
			getDialogFragment: getDialogFragment,
			processDataLossConfirmationIfNonDraft: fnProcessDataLossConfirmationIfNonDraft,
			processDataLossTechnicalErrorConfirmation: fnProcessDataLossTechnicalErrorConfirmation,
			securedExecution: fnSecuredExecution,
			getOwnerControl: getOwnerControl,
			getTableBindingInfo: getTableBindingInfo,
			refreshSmartTable: fnRefreshSmartTable,
			getElementCustomData: getElementCustomData,
			triggerAction: function(aContexts, sBindingPath, oCustomData, oControl, oState) {
				// Assuming that this action is triggered from an action inside a table row.
				// Also this action is intended for triggering an OData operation.
				// i.e: Action, ActionImport, Function, FunctionImport
				// We require some properties to be defined in the Button's customData:
				//   Action: Fully qualified name of an Action, ActionImport, Function or FunctionImport to be called
				//   Label: Used to display in error messages
				// Once the CRUDManager callAction promise is resolved, if we received a context back from the OData call
				// we check to see if the context that was sent (actionContext) and the context that is returned (oResponse.reponse.context).
				// If they are the same we do nothing. If they are different we trigger any required navigations and set the newly navigated
				// page to dirty using the setMeToDirty function of the NavigationController so as to enter into edit mode and set the page
				// to edit mode.
				fnProcessDataLossConfirmationIfNonDraft(function() {
					oServices.oCRUDManager.callAction({
						functionImportPath: oCustomData.Action,
						contexts: aContexts,
						sourceControl: oControl,
						label: oCustomData.Label,
						operationGrouping: "",
						navigationProperty: ""
					}).then(function(aResponses) {
						if (aResponses && aResponses.length > 0) {
							var oResponse = aResponses[0];

							if (oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())) {
								oServices.oViewDependencyHelper.setMeToDirty(oController.getOwnerComponent(), sBindingPath);
							}
						}
					});
				}, jQuery.noop, oState, "Proceed");
			},
			checkToolbarIntentsSupported: fnCheckToolbarIntentsSupported
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.CommonUtils", {
		constructor: function(oController, oServices, oComponentUtils) {

			jQuery.extend(this, getMethods(oController, oServices, oComponentUtils));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.MessageButtonHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.MessageButtonHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopoverItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/MessageButtonHelper",["jquery.sap.global", "sap/ui/base/Object", "sap/m/MessagePopover", "sap/m/MessagePopoverItem", "sap/ui/model/Filter",
	"sap/ui/model/FilterOperator", "sap/suite/ui/generic/template/lib/testableHelper"
], function(jQuery, BaseObject, MessagePopover, MessagePopoverItem, Filter, FilterOperator, testableHelper) {
	"use strict";
	
	Filter = testableHelper.observableConstructor(Filter, true);                        
	
	var oPersistentFilter = new Filter({
								path: "persistent",
								operator: FilterOperator.EQ,
								value1: false
							}); // exclude all messages that are persistent for frontend (i.e. transient for backend)
	var oValidationFilter = new Filter({
								path: "validation",
								operator: FilterOperator.EQ,
								value1: true
							}); // include all validation messages (i.e. frontend-messages)
							
	var oImpossibleFilter = new Filter({
								path: "validation",
								operator: FilterOperator.EQ,
								value1: "bla"
							});

	function getMethods(oCommonUtils, oController, bIsODataBased) {

		var oMaster;
		var aSlaves;
		
		var oMessageButton = oController.byId("showMessages");
		var oMessagePopover = oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.MessagePopover");
		// Add message model as an own model with name msg
		oMessagePopover.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "msg");
		var oItemBinding;
		var oEntityFilter; // fixed filter for the entity set of the component this instance belongs to. Will be ORed with a filter for the current binding path, oValidationFilter, and external filters
		(function(){
		    var oComponent = oController.getOwnerComponent();
		    oEntityFilter = new Filter({
				path: "target",
				operator: FilterOperator.EQ,
				value1: "/" + oComponent.getEntitySet()
			});		    
		    // Add message model as an own model with name msg
		    oItemBinding = oMessagePopover.getBinding("items");
			var oTemplatePrivate = oComponent.getModel("_templPriv");
			oTemplatePrivate.setProperty("/generic/messageCount", 0);
			var sMessageButtonTooltip = oCommonUtils.getText("MESSAGE_BUTTON_TOOLTIP_P", 0);
			oTemplatePrivate.setProperty("/generic/messageButtonTooltip", sMessageButtonTooltip);
			oItemBinding.attachChange(function() {
				var iCount = oItemBinding.getLength();
				oTemplatePrivate.setProperty("/generic/messageCount", iCount);
				sMessageButtonTooltip = oCommonUtils.getText(iCount === 1 ? "MESSAGE_BUTTON_TOOLTIP_S" : "MESSAGE_BUTTON_TOOLTIP_P", iCount);
				oTemplatePrivate.setProperty("/generic/messageButtonTooltip", sMessageButtonTooltip);
			});
		})();

		var aFilterProvider = []; //Callback functions registered by reuse components (or break-outs) that want to add their message filters
		var sCurrentBindingPath; // the binding path currently valid for the page this instance is responsible for
		var iCurrentCallCount = 0; // a counter which is increased each time sCurrentBinding path is changed
		var fnNewFilter; // function fnResolved (see below) with first parameter bound to iCurrentCallCount. Registered at Promises provided by external filter providers.
		var aCurrentFilters; // a list of filters currently set. They are combined by OR. The resulting filter will afterwards be ANDed with oPersistentFilter.
							// The result of this is used to filter the messages.

		// Adds an external filter definition
		// Returns whether filters have been changed synchronously
		function addAnExternalFilterDefinition(vFilterDefinition){
			if (jQuery.isArray(vFilterDefinition)) {
				var bRet = false;
				for (var i = 0; i < vFilterDefinition.length; i++){
					bRet = addAnExternalFilterDefinition(vFilterDefinition[i]) || bRet;
				}
				return bRet;
			}
			if (vFilterDefinition instanceof Promise){
				vFilterDefinition.then(fnNewFilter);
				return false;
			}
			// vFilterDefinition must in fact be a filter
			aCurrentFilters.push(vFilterDefinition);
			return true;
		}
		
		function getAllCurrentFilters(){
			var aMyFilters = aCurrentFilters;
			if (aSlaves){
				for (var i = 0; i < aSlaves.length; i++){
					aMyFilters = aMyFilters.concat(aSlaves[i].filters);	
				}	
			}
			return aMyFilters;
		}
		
		// Adapts the binding for the messages according to the current state of aCurrentFilters
		function fnAdaptBinding(){
			var aMyFilters = getAllCurrentFilters();
			if (oMaster){
				oMaster.propagateFilters(aMyFilters);	
			} else if (aSlaves){ // not suspended
				var oContextFilter = new Filter(aMyFilters.concat(oValidationFilter), false /* filter conjunction OR instead of AND */ );
				var aFilters = [oContextFilter, oPersistentFilter];
				oItemBinding.filter(aFilters);
			}
		}
		
		// This method is called when a Promise that has been provided by a filter provider is resolved.
		// iCallCount is the value of iCurrentCallCount that was valid when the Promise was provided by the filter provider.
		// Note that the function does nothing when the iCurrentCallCount meanwhile has a different value (i.e. sCurrentBindingPath has meanwhile changed)
		// vFilterDefinition is the FilterDefinition the filter resolves to.
		function fnResolved(iCallCount, vFilterDefinition){
			if (iCallCount === iCurrentCallCount && addAnExternalFilterDefinition(vFilterDefinition)){
				fnAdaptBinding(); // adapt the binding after the set of filters has been adapted
			}
		}
		
		// fnProvider is a filter provider which has been registered via registerMessageFilterProvider.
		// At each time registerMessageFilterProvider must be able to provide a FilterDefinition.
		// A FilterDefinition is either
		// - a filter or
		// - an array of FilterDefinitions or
		// - or a Promise that resolves to a FilterDefinition
		// This function calls fnProvider and ensures that the filter(s) provided by this call are added to aCurrentFilters.
		// In case the filters are provided asynchronously, it is also ensured that the changed filters will be applied afterwards.
		// Returns whether the filters have been changed (synchronously) 
		function addFilterFromProviderToCurrentFilter(fnProvider){
			var oFilterDefinition = fnProvider();
			return addAnExternalFilterDefinition(oFilterDefinition);	
		}
		
		// Ensure that addFilterFromProviderToCurrentFilter is called for all registered filter providers
		function addExternalFiltersToCurrentFilter() {
			aFilterProvider.forEach(addFilterFromProviderToCurrentFilter);
		}

		// adapt the filters to a new binding path
		function adaptToContext(sBindingPath) {
			sCurrentBindingPath = sBindingPath;
			iCurrentCallCount++;
			fnNewFilter = fnResolved.bind(null, iCurrentCallCount);

			// Show messages for current context including all "property children" AND for
			// messages given for the entire entity set
			aCurrentFilters = bIsODataBased ? [
				new Filter({
					path: "target",
					operator: FilterOperator.StartsWith,
					value1: sCurrentBindingPath
				}),
				oEntityFilter
			] : [];
			addExternalFiltersToCurrentFilter(); //Check/add external filters
			fnAdaptBinding();
		}

		// register a new filter provider. In case a binding path alrerady has been set, the new provider is called immediately
		function registerMessageFilterProvider(fnProvider) {
			aFilterProvider.push(fnProvider);
			if (sCurrentBindingPath !== undefined && addFilterFromProviderToCurrentFilter(fnProvider)){
				fnAdaptBinding();
			}
		}
		
		var fnShowMessagePopoverImpl;
		function fnShowMessagePopover(){
			if (oMaster){
				oMaster.showMessagePopover();
				return;
			}
			if (aSlaves){ // not resumed
				fnShowMessagePopoverImpl = fnShowMessagePopoverImpl || function(){
					if (oItemBinding.getLength() > 0){
						oMessagePopover.openBy(oMessageButton);	
					}	
				};
				// workaround to ensure that oMessageButton is rendered when openBy is called
				setTimeout(fnShowMessagePopoverImpl, 0);
			}
		}
		
		function fnSuspend(){
			oMaster = null;
			if (aSlaves){
				for (var i = 0; i < aSlaves.length; i++){
					aSlaves[i].free();
				}
				aSlaves = null;
				aCurrentFilters = null;
				oItemBinding.filter(oImpossibleFilter);				
			}
		}
		
		function fnPropagateFilters(iPosition, aPropagatedFilters){
			if (aSlaves){
				aSlaves[iPosition].filters = aPropagatedFilters;
				if (aCurrentFilters){ // adaptToContext has already been called
					fnAdaptBinding();
				}
			}
		}
		
		function fnResume(aSlaveButtonHelpers){
			aSlaves = [];
			for (var i = 0; i < aSlaveButtonHelpers.length; i++){
				var oMeAsMaster = {
					showMessagePopover: fnShowMessagePopover,
					propagateFilters: fnPropagateFilters.bind(null, i)
				};
				var oSlave = aSlaveButtonHelpers[i].serve(oMeAsMaster);
				aSlaves.push(oSlave);
				
			}
			if (aCurrentFilters){ // adaptToContext has already been called
				fnAdaptBinding();
			}
		}
		
		function fnFree(){
			oMaster = null;	
		}
		
		function fnServe(oMasterProxy){
			oMaster = oMasterProxy;
			oItemBinding.filter(oImpossibleFilter);
			return { 
				filters: aCurrentFilters ? getAllCurrentFilters() : [],
				free: fnFree
			};
		}

		return {
			adaptToContext: adaptToContext,
			toggleMessagePopover: oMessagePopover.toggle.bind(oMessagePopover, oMessageButton),
			showMessagePopover: fnShowMessagePopover,
			registerMessageFilterProvider: registerMessageFilterProvider,
			suspend: fnSuspend,
			resume: fnResume,
			serve: fnServe
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.MessageButtonHelper", {
		constructor: function(oCommonUtils, oController, bIsODataBased) {
			jQuery.extend(this, (testableHelper.testableStatic(getMethods, "MessageButtonHelper"))(oCommonUtils, oController, bIsODataBased));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/MessageButtonHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.ViewDependencyHelper') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.ViewDependencyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/ViewDependencyHelper",["sap/ui/base/Object", "sap/suite/ui/generic/template/js/AnnotationHelper", "sap/suite/ui/generic/template/lib/testableHelper"], 
		function(BaseObject, AnnotationHelper, testableHelper) {
	"use strict";

	// Class for busy handling
	function getMethods(oTemplateContract) {

		function setAllPagesDirty(aExcludeComponentIds){
			aExcludeComponentIds = aExcludeComponentIds || []; 
			for (var sId in oTemplateContract.componentRegistry){
				if (aExcludeComponentIds.indexOf(sId) === -1){
					var oComponentRegistryEntry = oTemplateContract.componentRegistry[sId];
					oComponentRegistryEntry.oComponent.setIsRefreshRequired(true);
				}
			}
		}
		
		/*
		 * Sets parent page to dirty
		 * @param {Object} oComponent - the component which parent shall be set to dirty
		 * @param {String} sNavigationProperty - only this navigation property is set to dirty
		 * @param {Integer} iLevel - Number of components to be set as dirty
		 */
		function setParentToDirty(oComponent, sNavigationProperty, iLevel) {
			var oParentRouteConfig, oParent, mRefreshInfos, mComponentRegistry = oTemplateContract.componentRegistry;

			// find current view and search its parent
			var sMyId = oComponent.getId();
			var oComponentRegistryEntry = oTemplateContract.componentRegistry[sMyId];
			var oRouteConfig = oComponentRegistryEntry.routeConfig;
			if (oRouteConfig){
				if (oRouteConfig.viewLevel === 0) {
					return false;
				} else {
					for (var sComponentId in mComponentRegistry){
						if (sComponentId !== sMyId){
							oParentRouteConfig = mComponentRegistry[sComponentId].routeConfig;
							if (oParentRouteConfig && oParentRouteConfig.viewLevel === (oRouteConfig.viewLevel - 1) && (oRouteConfig.viewLevel === 1 || oParentRouteConfig.entitySet === oRouteConfig.parentEntitySet)) {
								oParent = mComponentRegistry[sComponentId].oComponent;
								if (sNavigationProperty) {
									mRefreshInfos = mComponentRegistry[sComponentId].oGenericData.mRefreshInfos;
									mRefreshInfos[sNavigationProperty] = true;
								} else {
									if (typeof oParent.setIsRefreshRequired === "function") {
										oParent.setIsRefreshRequired(true);
									}
								}
								if (!iLevel || iLevel > 1) {
									var iSubLevel;
									iSubLevel = iLevel && iLevel - 1;
									setParentToDirty(oParent, undefined, iSubLevel);
								}
								// there could be more components with the same entity set on the parent level - not yet supported due to unique ID concept but will be replaced once we have the component hierarchy/	
								break;
							}
						}
					}
				}
			}
		}


		/*
		 * Sets parent page to dirty
		 * @param {Object} oComponent - the component that shall be set to dirty
		 * @param {String} sNavigationProperty - only this navigation property is set to dirty
		 */
		function setMeToDirty(oComponent, sNavigationProperty) {
			if (sNavigationProperty) {
				var mRefreshInfos = oTemplateContract.componentRegistry[oComponent.getId()].oGenericData.mRefreshInfos;
				mRefreshInfos[sNavigationProperty] = true;
			} else {
				if (typeof oComponent.setIsRefreshRequired === "function"){
					oComponent.setIsRefreshRequired(true);
				}
			}
		}

		
		/*
		 * get children - temporarily added, to be refactored
		 *
		 */
		function getChildren(oComponent) {
			var aChildren = [];
			var oRouteConfig = oTemplateContract.componentRegistry[oComponent.getId()].routeConfig;
			for (var sOtherComponentID in oTemplateContract.componentRegistry) {
				var oOtherRegistryEntry = oTemplateContract.componentRegistry[sOtherComponentID];
				var oOtherComponentRouteConfig = oOtherRegistryEntry.routeConfig;
				if (oRouteConfig.viewLevel + 1 === oOtherComponentRouteConfig.viewLevel
					&& oRouteConfig.entitySet === oOtherComponentRouteConfig.parentEntitySet) {
					aChildren.push(oOtherRegistryEntry.oComponent);
				}
			}
			return aChildren;
		}
		
		/*
		 * get successors - temporarily added, to be refactored
		 *
		 */
		function getSuccessors(oComponent) {
			var aSuccessors = [];
			var aChildren = getChildren(oComponent);
			for (var i = 0; i < aChildren.length; i++){
				aSuccessors = aSuccessors.concat(getSuccessors(aChildren[i]));
			}
			return aSuccessors.concat(aChildren);
		}
		
		/*
		 * Unbind all children components
		 * @param {Object} oComponent - the component which children should be unbinded
		 * @param {boolean} bAndMe - information whether the provided component itself is also affected
		 */
		function unbindChildren(oComponent, bAndMe) {
			var aSuccessors = getSuccessors(oComponent);
			for (var i = 0; i < aSuccessors.length; i++) {
				oTemplateContract.componentRegistry[aSuccessors[i].getId()].oComponent.getComponentContainer().unbindElement();
			}
			if (bAndMe){
				oComponent.getComponentContainer().unbindElement();	
			}
		}
		
		/*
		 * Sets the root page to dirty
		 *
		 */
		function setRootPageToDirty() {
			if (oTemplateContract.rootContainer){
				var oInstance = oTemplateContract.rootContainer.getComponentInstance();
				if (oInstance && typeof oInstance.setIsRefreshRequired === "function") {
						oInstance.setIsRefreshRequired(true);
				}
			}
		}

		// Expose selected private functions to unit tests
		/* eslint-disable */
		var setParentToDirty = testableHelper.testable(setParentToDirty, "setParentToDirty");
		/* eslint-enable */
		
		return {
			setAllPagesDirty: setAllPagesDirty,
			setParentToDirty: setParentToDirty,
			setMeToDirty: setMeToDirty,
			unbindChildren: unbindChildren,
			setRootPageToDirty: setRootPageToDirty
		};
	}

	return BaseObject.extend("sap.suite.ui.generic.template.lib.ViewDependencyHelper", {
		constructor: function(oTemplateContract) {
			jQuery.extend(this, getMethods(oTemplateContract));
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/ViewDependencyHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.routingHelper') ) {
/* Static helper class of NavigationController used to initialize the routing of the app during startup
 * More precisely the following tasks are performed:
 * - Create routes from the pages-section of the manifest
 * - Process startup parameters
 * - Finally, initialize router
 * Note that all methods of this class use a parameter oNavigationControllerProxy. This is a copy of the public NavigationController
 * enhanced by attributes oAppComponent, oRouter, oTemplateContract, and oHashChanger and a method fnInitializationResolve (which is to be called, when everything is done).
 */

jQuery.sap.declare('sap.suite.ui.generic.template.lib.routingHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.f.FlexibleColumnLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.routing.Targets'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/routingHelper",["sap/f/FlexibleColumnLayout", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/json/JSONModel", "sap/m/routing/Targets", "sap/ui/generic/app/util/ModelUtil",
		"sap/suite/ui/generic/template/lib/CRUDHelper", "sap/suite/ui/generic/template/lib/FlexibleColumnLayoutHandler",
		"sap/suite/ui/generic/template/lib/testableHelper", "sap/suite/ui/generic/template/js/AnnotationHelperReuseComponents",
		"sap/m/MessageBox"
	],
	function(FlexibleColumnLayout, Filter, FilterOperator, JSONModel, Targets, ModelUtil, CRUDHelper, FlexibleColumnLayoutHandler, testableHelper, AnnotationHelperReuseComponents, MessageBox) {
		"use strict";
		
		var sPatternDelimiter = "---";
		
		function createTarget(oRouter, sControlId, sViewName, sTargetName, sControlAggregation) {
			var oTarget = {};
			oTarget = {
				viewName: sViewName,
				controlId: sControlId,
				controlAggregation: sControlAggregation
			};

			var oTargets = oRouter.getTargets();
			oTargets.addTarget(sTargetName, oTarget);
		}
		
		function createMessagePageTargets(oNavigationControllerProxy, sTargetControlId){
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.createMessagePageTargets(createTarget.bind(null, oNavigationControllerProxy.oRouter, sTargetControlId, "sap.suite.ui.generic.template.fragments.MessagePage"));
			} else {
				createTarget(oNavigationControllerProxy.oRouter, sTargetControlId, "sap.suite.ui.generic.template.fragments.MessagePage", "messagePage", "pages");	
			}
		}
		
		function fnEnhanceEntityNode(mEntityTree, sEntitySet, oDraftController){
			var oEntityNode = mEntityTree[sEntitySet];
			if (!oEntityNode){
				oEntityNode = {
					draftSpec: "OData",
					level: 0,
					children: []
				};
				for (var sChildCandidate in mEntityTree){
					var oChildCandidate = mEntityTree[sChildCandidate];
					if (oChildCandidate.level === 1){
						oEntityNode.children.push(sChildCandidate);
						break;
					}
				}
				mEntityTree[sEntitySet] = oEntityNode;
			}
			if (oEntityNode.hasOwnProperty("isDraft")){
				return;
			}
			if (oEntityNode.draftSpec === "parent"){
				if (oEntityNode.parent){
					fnEnhanceEntityNode(mEntityTree, oEntityNode.parent, oDraftController);
					var oParent =  mEntityTree[oEntityNode.parent];
					oEntityNode.isDraft = oParent.isDraft;
				} else if (oEntityNode.level === 1){
					for (var sEntitySetCandidate in mEntityTree){
						var oParentCandidate = mEntityTree[sEntitySetCandidate];
						if (oParentCandidate.level === 0){
							oEntityNode.isDraft = oParentCandidate.isDraft;
							return;
						}
					}	
				}
				return;
			}
			if (oEntityNode.draftSpec === "OData"){
				var oDraftContext = oDraftController.getDraftContext();
				oEntityNode.isDraft = oDraftContext.isDraftEnabled(sEntitySet);
				return;
			}
			oEntityNode.isDraft = oEntityNode.draftSpec;
		}
		
		function fnEnhanceEntityTree(oNavigationControllerProxy, oTopRoute){
			var oModel = oNavigationControllerProxy.oAppComponent.getModel();
			var oMetaModel = oModel.getMetaModel();
			oMetaModel.loaded().then(function() {
				var mEntityTree = oNavigationControllerProxy.oTemplateContract.mEntityTree;
				var oDraftController = oNavigationControllerProxy.oAppComponent.getTransactionController().getDraftController();
				fnEnhanceEntityNode(mEntityTree, oTopRoute.entitySet, oDraftController);
				for (var sEntitySet in mEntityTree){
					fnEnhanceEntityNode(mEntityTree, sEntitySet, oDraftController);
				}
			});
		}
		
		/**
		 * Creates necessary routing metadata from configuration and adds it to the Router
		 *
		 * @public
		 * @param {String} sNavigationTargetId - the navigation target ID
		 * @returns {String} sEntitySet - the root EntitySet
		 */
		function generateRoutingMetadataAndGetRootEntitySet(oNavigationControllerProxy) {
			var sTargetControlId = oNavigationControllerProxy.oTemplateContract.oNavigationHost.getId();
			var oConfig = oNavigationControllerProxy.oAppComponent.getConfig();
			if (!oConfig.pages || !oConfig.pages.length) {
				throw new Error("Route Configuration missing");
			}
			if (oConfig.pages.length > 1) {
				throw new Error("Currently only one Top route supported");
			}

			// create Top-Route
			// currently only one top route supported
			var oTopPage = oConfig.pages[0];

			oNavigationControllerProxy.oTemplateContract.mEntityTree = {};

			var oTopRoute = createRoute([], oTopPage, "root", 0, null, oNavigationControllerProxy, sTargetControlId);
			oNavigationControllerProxy.oRouter.addRoute(oTopRoute);

			createQueryRoute(oTopRoute, oNavigationControllerProxy);

			createChildRoutes(oTopRoute.target, oTopPage, 0, null, oNavigationControllerProxy, sTargetControlId);
			
			createMessagePageTargets(oNavigationControllerProxy, sTargetControlId);
			
			fnEnhanceEntityTree(oNavigationControllerProxy, oTopRoute);
			
			return oTopPage.entitySet;
		}

		/**
		 * Creates child route from the specified route configuration
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {Number} iLevel - the level
		 * @param {Object} oParent - the parent route (if any)
		 * @param {Array} aNodes - optional: Add the names of entity sets for the created roots to this array
		 */
		function createChildRoutes(vPredecessorTargets, oPage, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject) {
			var i, iLen;
			if (oPage.pages) {
				iLen = oPage.pages.length;
				for (i = 0; i < iLen; i++) {
					createRoutes(vPredecessorTargets, oPage.pages[i], (iLevel + 1), oParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject);
				}
			}
		}
		
		function fnHandleEmbeddedComponentPages(oEmbeddedComponent, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject){
			var vPredecessorTargets = oParent.target;
			var oPseudoRoot = {
				pages: oEmbeddedComponent.pages
			};
			var oPseudoParent = {
				pattern: oParent.pattern + "/" + oEmbeddedComponent.id,
				entitySet: oParent.entitySet,
				name: oParent.name + "/" + oEmbeddedComponent.id,
				contextPath: oParent.contextPath,
				patternDelimiter: sPatternDelimiter,
				embeddedComponent: oEmbeddedComponent.id
			};
			createChildRoutes(vPredecessorTargets, oPseudoRoot, iLevel, oPseudoParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject);	
		}
		
		function fnHandleEmbeddedComponent(oTreeNode, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, sEmbeddedComponentKey, oEmbeddedComponent){
			var oCommunicationModel = new JSONModel();
			var oCommunicationObject = {};
			oTreeNode.embeddedComponents[sEmbeddedComponentKey] = {
				key: sEmbeddedComponentKey || "implementation",
				componentName: oEmbeddedComponent.componentName,
				containerId: sEmbeddedComponentKey ? AnnotationHelperReuseComponents.formatIdComponentContainer(oEmbeddedComponent) :  "template::ImplementingComponent",
				pages: oEmbeddedComponent.pages || [],
				communicationModel: oCommunicationModel,
				communicationObject: oCommunicationObject
			};
			if (oEmbeddedComponent.pages){
				fnHandleEmbeddedComponentPages(oEmbeddedComponent, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject);	
			}			
		}
		
		function fnHandleEmbeddedComponents(oTreeNode, oRoute, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes){
			oTreeNode.embeddedComponents = {};
			if (oRoute.implementingComponent){
				fnHandleEmbeddedComponent(oTreeNode, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, null, oRoute.implementingComponent);	
			} else if (oRoute.embeddedComponents){
				for (var sEmbeddedComponentKey in oRoute.embeddedComponents){
					var oEmbeddedComponent = oRoute.embeddedComponents[sEmbeddedComponentKey];
					fnHandleEmbeddedComponent(oTreeNode, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, sEmbeddedComponentKey, oEmbeddedComponent);
				}
			}
		}

		/**
		 * Creates all necessary route(s) metadata from configuration and adds it to the Router instance
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {Number} iLevel - the level
		 * @param {Object} oParent - the parent route (if any)
		 * @param {Array} aNodes - optional: Add the names of entity sets for the created roots to this array
		 */
		function createRoutes(vPredecessorTargets, oPage, iLevel, oParent, oNavigationControllerProxy, sTargetControlId, aNodes, oCommunicationModel, oCommunicationObject) {
			if (oPage.component) { //in case of intent there is no internal route to be created
				var oTreeNode = {
					parent: oParent && oParent.entitySet,
					parentEmbeddedComponent: oParent && oParent.embeddedComponent,
					navigationProperty: oPage.navigationProperty,
					level: iLevel,
					children: [],
					communicationModel: oCommunicationModel,
					communicationObject: oCommunicationObject,
					noKey: oPage.routingSpec && oPage.routingSpec.noKey,
					draftSpec: oPage.routingSpec ? oPage.routingSpec.draftSpec || "parent" : "OData"
				};
				
				var oNewRoute = createRoute(vPredecessorTargets, oPage, oPage.component.list ? "aggregation" : "detail", iLevel, oParent,
					oNavigationControllerProxy, sTargetControlId);
				oTreeNode.sRouteName = oNewRoute.name;
				oTreeNode.entitySet = oNewRoute.entitySet;
				if (aNodes){
					aNodes.push(oNewRoute.entitySet);
				}
				var oExistingTreeNode = oNavigationControllerProxy.oTemplateContract.mEntityTree[oNewRoute.entitySet];
				// Expected: oExistingTreeNode is faulty. However, there are scenarios with circular page structures.
				if (!oExistingTreeNode || oExistingTreeNode.level > oTreeNode.level){
					oNavigationControllerProxy.oTemplateContract.mEntityTree[oNewRoute.entitySet] = oTreeNode;
				}
				oNavigationControllerProxy.oRouter.addRoute(oNewRoute);
				createQueryRoute(oNewRoute, oNavigationControllerProxy);
				addTitleNameToEntityTree(oNavigationControllerProxy, oNewRoute);
				createChildRoutes(oNewRoute.target, oPage, iLevel, oNewRoute, oNavigationControllerProxy, sTargetControlId, oTreeNode.children, oCommunicationModel, oCommunicationObject);
				fnHandleEmbeddedComponents(oTreeNode, oPage, iLevel, oNewRoute, oNavigationControllerProxy, sTargetControlId, aNodes);     
			}
		}

		/**
		 * Creates a Query route from the specified route and adds it to the router
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 */
		function createQueryRoute(oRoute, oNavigationControllerProxy) {
			var oQueryRoute = jQuery.extend({}, oRoute);
			oQueryRoute.name = oRoute.name + "query";
			oQueryRoute.pattern = oRoute.pattern + "{?query}";
			oNavigationControllerProxy.oRouter.addRoute(oQueryRoute);
		}
		
		function addTitleNameToEntityTree(oNavigationControllerProxy, oRoute) {
			var oTreeNode = oNavigationControllerProxy.oTemplateContract.mEntityTree[oRoute.entitySet];
			if (oRoute.routingSpec && oRoute.routingSpec.noOData){
				oTreeNode.headerTitle = oRoute.routingSpec.headerTitle;
				oTreeNode.titleIconUrl = oRoute.routingSpec.titleIconUrl;
			} else {
				var oModel = oNavigationControllerProxy.oAppComponent.getModel();
				var oMetaModel = oModel.getMetaModel();
				oMetaModel.loaded().then(function() {
					var oModelEntitySet = oMetaModel.getODataEntitySet(oRoute.entitySet);
					var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);
					var oHeaderInfo = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
					var sHeaderTitle = (oHeaderInfo && oHeaderInfo.TypeName && oHeaderInfo.TypeName.String) || "";
					if (sHeaderTitle.substr(0,7) === "{@i18n>") {
						var sSubstr = sHeaderTitle.substring(1, sHeaderTitle.length - 1);
						var aString = sSubstr.split(">");
						sHeaderTitle = oNavigationControllerProxy.oAppComponent.getModel(aString[0]).getResourceBundle().getText(aString[1]);
					}
					oTreeNode.headerTitle = sHeaderTitle;
					var sTitleIconUrl = (oHeaderInfo && oHeaderInfo.Title && oHeaderInfo.Title.IconUrl && oHeaderInfo.Title.IconUrl.String) || "";
					oTreeNode.titleIconUrl = sTitleIconUrl;
				});
			}
		}
		
		/*
		 * get the context path from navigation path/pattern
		 * @param {Object} oRouteConfig - the route configuration
		 * @returns {String} the context path
		 */
		function fnDetermineContextPath(oRoute) {
			var sPath, sPathPattern, iIndex;
			if (oRoute) {
				// get the pattern from route configuration
				sPath = oRoute.pattern;
				// get the current path pattern from either navigation property or the entitySet
				sPathPattern = oRoute.navigationProperty || oRoute.entitySet;
				if (sPath && sPathPattern) {
					iIndex = sPath.indexOf("{?query}");
					// if the query is not at the beginning there is a query suffix
					if (iIndex > 0) {
						// get the current path by ignoring the query suffix
						sPath = sPath.substring(0, iIndex);
					}
					// reset the index
					iIndex = -1;
					// Look for path pattern with ({key
					sPathPattern += "({keys";
					iIndex = sPath.indexOf(sPathPattern);
					// if the pattern is not at the beginning there is a parent path prefix
					if (iIndex > 0) {
						// get the current path by ignoring the parent prefix
						sPath = sPath.substring(iIndex);
					}
					// replace the navigation property with entity set to form the binding context path
					if (oRoute.navigationProperty) {
						sPath = sPath.replace(oRoute.navigationProperty, oRoute.entitySet);
					}
					// context always needs to start with a "/"
					sPath = "/" + sPath;
				}
			}
			return sPath;
		}
		
		function fnDetermineContextPathForNonOData(oPage, oParentRoute){
			return oParentRoute ? oParentRoute.contextPath +  (oPage.routingSpec.binding ? ("/" + oPage.routingSpec.binding) : "") : "";
		}
		
		/**
		 * Creates and returns a route metadata from configuration
		 *
		 * @private
		 * @param {Object} oRoute - the route configuration
		 * @param {string} sOperation - the operation for which the route has to be created
		 * @param {Number} iLevel - the level
		 * @param {Object} oParentRoute - the parent route (if any)
		 * @returns {Object} the created route metadata
		 */
		function createRoute(vPredecessorTargets, oPage, sOperation, iLevel, oParentRoute, oNavigationControllerProxy, sTargetControlId) {
			var aPredecessorTargets = jQuery.isArray(vPredecessorTargets) ? vPredecessorTargets : [vPredecessorTargets];
			var sPathPattern, oNewRoute;
			sPathPattern = (iLevel === 1) ? oPage.entitySet : oPage.navigationProperty;

			oNewRoute = jQuery.extend({}, oPage);
			oNewRoute.path = "/" + oPage.entitySet;
			oNewRoute.operation = sOperation;
			oNewRoute.viewLevel = iLevel;
			// TODO: use only component name here?
			oNewRoute.template = oPage.component ? (oPage.component.name || oPage.component) : oPage.template;

			switch (sOperation) {
				case "root":
					oNewRoute.name = "root";
					oNewRoute.pattern = "";
					break;
				case "aggregation":
					oNewRoute.name = sPathPattern + "~aggregation";
					oNewRoute.pattern = sPathPattern;
					break;
				default:
					oNewRoute.name = sPathPattern;
					var sKeySpec = oPage.routingSpec && oPage.routingSpec.noKey ? "" : "({keys" + iLevel + "})";
					oNewRoute.pattern = sPathPattern + sKeySpec;
					break;
			}

			if (oParentRoute) {
				oNewRoute.name = oParentRoute.name + "/" + oNewRoute.name;
				oNewRoute.pattern = oParentRoute.pattern + (oParentRoute.patternDelimiter || "/") + oNewRoute.pattern;
				oNewRoute.parentEntitySet = oParentRoute.entitySet;
			}
			// Store information about root of entity set tree
			if (oNewRoute.viewLevel === 1){
				oNavigationControllerProxy.oTemplateContract.routeViewLevel1 = {
					pattern: oNewRoute.pattern,
					name: oNewRoute.name
				};
			}
			var sControlAggregation;
			var sTargetName = oNewRoute.name;
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler) { // In this case the view is hosted by the FCL
				sControlAggregation =  oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.adaptRoutingInfo(oNewRoute, sTargetName, aPredecessorTargets);
			} else { // In this case the view is hosted by the NavContainer
				sControlAggregation = "pages";
				oNewRoute.target = sTargetName;
			}
			createTarget(oNavigationControllerProxy.oRouter, sTargetControlId, oNewRoute.name, sTargetName, sControlAggregation);
			
			var oPromise = new Promise(function(fnResolve){
				oNavigationControllerProxy.mRouteToComponentResolve[oNewRoute.name] = fnResolve;
			});
			oNavigationControllerProxy.oTemplateContract.mRouteToTemplateComponentPromise[oNewRoute.name] = oPromise;
			oNewRoute.contextPath = (oPage.routingSpec && oPage.routingSpec.noOData) ? fnDetermineContextPathForNonOData(oPage, oParentRoute) : fnDetermineContextPath(oNewRoute);	
			return oNewRoute;
		}

		// - End methods for creating the routes

		/*
		 * Creates necessary routing info and initialises the Router
		 */
		function fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters) {
			var sHash;
			if (!oNavigationControllerProxy.oHashChanger.getHash()) {
				sHash = "";
				// no route is set yet, check if start entity was passed via parameter
				if (oStartupParameters && oStartupParameters.route && oStartupParameters.route.length === 1) {
					sHash = oStartupParameters.route[0];
					oNavigationControllerProxy.navigate(sHash, true);
				}
			}
			oNavigationControllerProxy.oRouter.initialize();
			oNavigationControllerProxy.fnInitializationResolve();
		}

		// - Start methods for processing the startup parameters

		/*
		 * perform a read with the specified data and trigger further initialisation of router
		 *
		 * @param {Array} aKeys - the keys used to create the filter
		 * @param {Object} oStartupParameters - object containing parameters
		 * @param {Object} oModel- the odata model instance
		 */
		function fnReadObject(oNavigationControllerProxy, sEntitySet, aKeys, oStartupParameters, oModel, oNavigationPossible) {
			var i, iLen, sProperty, sValue, aFilters = [], aSubPageFilter = [];
			if (aKeys && oStartupParameters && oModel) {
				iLen = aKeys.length;
				for (i = 0; i < iLen; i++) {
					// get property from property path
					sProperty = aKeys[i].PropertyPath;
					// get value from parameter array (should have only 1)
					sValue = oStartupParameters[sProperty][0];
					aFilters.push(new Filter(sProperty, FilterOperator.EQ, sValue));
				}
				if (oNavigationControllerProxy.oAppComponent.getTransactionController().getDraftController()
						.getDraftContext().isDraftEnabled(sEntitySet)) {
					var oDraftFilter = new Filter({
						filters: [new Filter("IsActiveEntity", "EQ", false),
						          new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
						          and: false
					});
					aFilters.push(oDraftFilter);
				}
				var oCompleteFilter = new Filter(aFilters, true);
				var oPagePromise = new Promise(function(resolve, reject){
					oModel.read("/" + sEntitySet, {
						filters: [oCompleteFilter],
						success: function(oResult) {
							var oRowResult = fnReadObjectProcessResults(oResult, oModel, oStartupParameters);
							if (oRowResult) {
								var sKey = oModel.getKey(oRowResult);
								if (sKey) {
									resolve(sKey);
								}
							}
							reject();
						},
						error: function(oError) {
							// just continue with initialisation in case of errors
							reject();
						}
					});
				});

				if (oNavigationPossible.bNavigationToSubPageWithSemanticKeyPossible) {
					iLen = oNavigationPossible.aSubPageSemanticKey.length;
					for (i = 0; i < iLen; i++) {
						// get property from property path
						sProperty = oNavigationPossible.aSubPageSemanticKey[i].PropertyPath;
						// get value from parameter array (should have only 1)
						sValue = oStartupParameters[sProperty][0];
						aSubPageFilter.push(new Filter(sProperty, FilterOperator.EQ, sValue));
					}
					if (oNavigationControllerProxy.oAppComponent.getTransactionController().getDraftController()
						.getDraftContext().isDraftEnabled(oNavigationPossible.sSemanticKeySubPageEntitySetName)) {
						var oDraftFilter = new Filter({
							filters: [new Filter("IsActiveEntity", "EQ", false),
							new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
							and: false
							});
						aSubPageFilter.push(oDraftFilter);
					}
					var oCompleteSubPageFilter = new Filter(aSubPageFilter, true);
					var oSubPagePromise = new Promise(function(resolve, reject) {
						oModel.read("/" + oNavigationPossible.sSemanticKeySubPageEntitySetName, {
							filters: [oCompleteSubPageFilter],
							success: function(oResult) {
								var oRowResult = fnReadObjectProcessResults(oResult, oModel, oStartupParameters);
								if (oRowResult) {
									var sSubPageKey = oModel.getKey(oRowResult);
									if (sSubPageKey) {
										resolve(sSubPageKey);
									}
								}
								reject();
							},
							error: function(oError) {
								// just continue with initialisation in case of errors
								reject();
							}
						});
					});
				}
				oPagePromise.then(function(sKey) {
					if (oSubPagePromise) {
							oSubPagePromise.then(function(sSubPageKey) {
								sKey = '/' + sKey;
								sSubPageKey = sSubPageKey.replace(oNavigationPossible.sSemanticKeySubPageEntitySetName, oNavigationPossible.sSemanticKeySubPageNavigationProperty);
								sSubPageKey = '/' + sSubPageKey;
								sKey = sKey.concat(sSubPageKey);
								oNavigationControllerProxy.navigate(sKey, true);
							}, function(oError) {
								oNavigationControllerProxy.navigate(sKey, true);
							});
					} else {
						if (oNavigationPossible.bNavigationToSubPageWithTechnicalKeyPossible) {
							var sSubPageHash = oModel.createKey(oNavigationPossible.sSubPageEntitySetName, oStartupParameters);
							if (sSubPageHash) {
								//Form URL for navigation to sub object page, replacing the Subpage entity set with the navigation property
								sKey = '/' + sKey;
								sSubPageHash = sSubPageHash.replace(oNavigationPossible.sSubPageEntitySetName,oNavigationPossible.sSubPageNavigationProperty);
								sSubPageHash = '/' + sSubPageHash;
								sKey = sKey.concat(sSubPageHash);
								oNavigationControllerProxy.navigate(sKey, true);
							}
							oNavigationControllerProxy.navigate(sKey, true);
						}
						oNavigationControllerProxy.navigate(sKey, true);
					}
					fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
				}, function(oError) {
					fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
				});
			}
			return [oPagePromise, oSubPagePromise];
		}
		
		function fnReadObjectProcessResults(oResult, oModel, oStartupParameters) {

			
			var oRow, i, iLength, oRowResult;
			if (oResult && oResult.results){
				iLength = oResult.results.length;
				if (iLength == 0) {
					oRowResult = null;
				} else if (iLength == 1) {
					oRowResult = oResult.results[0];
				} else if (iLength >= 1) {
					var aDrafts  = [];
					var aActive = [];
					for (i = 0; i < iLength; i++) {
						oRow = oResult.results[i];
						if (oRow && oRow.IsActiveEntity) {
							aActive.push(oRow);
						} else if (oRow && oRow.IsActiveEntity == false) {
							aDrafts.push(oRow);
						}
					}
					if (aActive.length == 0 && aDrafts.length >= 2){
						//DraftUUID match?
						var oDraftRow;
						for (var j = 0; j < aDrafts.length; j++) {
							oDraftRow = aDrafts[j];
							if (oDraftRow.DraftUUID == oStartupParameters.DraftUUID){
								//show corresponding object
								oRowResult = oDraftRow;
								break;
							}
						}
						if (!oRowResult){
							oRowResult = aDrafts[0];							
						}
					} else if (aActive.length == 1 && aDrafts.length == 1){
						//no DraftUUID check
						oRowResult = aActive[0];
					} else if (aActive.length == 1 && aDrafts.length >= 2){
						oRowResult = aActive[0];
					}
				}
			}
			return oRowResult;
		}

		function fnCombineMode(sPreferredMode, sMode) {
			// in case of not allowed combinations of mode navigate to the List Report
			if ((sPreferredMode && sMode) || (sMode === "display"))	{ 
				return { 
					mode: "unsupported"
				}; 
			}

			var oResult = {
					mode: "display",
					force: "false"
			}; // historic default behavior

			oResult.mode = sMode || sPreferredMode || oResult.mode;
			oResult.force = !!sMode;

			return oResult;
		}

		function fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode) {
			var oNavigationPossible = fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode);
			var sHash, sSubPageHash;
			if (oNavigationPossible.bNavigationWithSemanticKeyPossible) {
				fnReadObject(oNavigationControllerProxy, sEntitySet, oNavigationPossible.aSemanticKey, oStartupParameters, oModel, oNavigationPossible);
				// read will trigger the initialisation as needed
				return;
			} else if (oNavigationPossible.bNavigationWithTechnicalKeyPossible) {
				if (oStartupParameters.IsActiveEntity && oStartupParameters.IsActiveEntity[0] === "false" && 
					oStartupParameters.DraftUUID      && oStartupParameters.DraftUUID[0] !== ""){
					//3	Fiori parameter with TK call on existing draftobject but active also exists
					var aKeys = [];
					for (var i = 0; i < oNavigationPossible.aTechnicalKey.length; i++){
						var sTechnicalKeyProp = oNavigationPossible.aTechnicalKey[i] && oNavigationPossible.aTechnicalKey[i].name;
						if (sTechnicalKeyProp === "DraftUUID" ||
							sTechnicalKeyProp === "IsActiveEntity"){
							continue;
						}
						if (oStartupParameters.hasOwnProperty(sTechnicalKeyProp) ) {
							aKeys.push({ PropertyPath : sTechnicalKeyProp});
						}
					}
					fnReadObject(oNavigationControllerProxy, sEntitySet, aKeys, oStartupParameters, oModel, oNavigationPossible);
					// read will trigger the initialisation as needed
					return;
				}				
				// created
				sHash = oModel.createKey(sEntitySet, oStartupParameters);
				if (sHash) {
					if (oNavigationPossible.bNavigationToSubPageWithSemanticKeyPossible) {
						var aKeys = [];
						for (var i = 0; i < oNavigationPossible.aTechnicalKey.length; i++) {
								var sTechnicalKeyProp = oNavigationPossible.aTechnicalKey[i] && oNavigationPossible.aTechnicalKey[i].name;
								if (sTechnicalKeyProp === "DraftUUID" ||
									sTechnicalKeyProp === "IsActiveEntity"){
									continue;
								}
							if (oStartupParameters.hasOwnProperty(sTechnicalKeyProp) ) {
								aKeys.push({ PropertyPath : sTechnicalKeyProp});
							}
						}
						fnReadObject(oNavigationControllerProxy, sEntitySet, aKeys, oStartupParameters, oModel, oNavigationPossible);
						return;
					} else if (oNavigationPossible.bNavigationToSubPageWithTechnicalKeyPossible) {
						sSubPageHash = oModel.createKey(oNavigationPossible.sSubPageEntitySetName, oStartupParameters);
						if (sSubPageHash) {
							//Form URL for navigation to sub object page, replacing the Subpage entity set with the navigation property
							sSubPageHash = sSubPageHash.replace(oNavigationPossible.sSubPageEntitySetName, oNavigationPossible.sSubPageNavigationProperty);
							sSubPageHash = '/' + sSubPageHash;
							sHash = sHash.concat(sSubPageHash);
							oNavigationControllerProxy.navigate(sHash, true);
						}
					}
					oNavigationControllerProxy.navigate(sHash, true);
				}
			}  
			fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
		}

		function fnCheckKeys(aKeys, mParams) {
			var i, iLength, bSuccess = false, oKey, sKeyProperty;
			if (mParams && aKeys) {
				iLength = aKeys.length;
				for (i = 0; i < iLength; i++) {
					// assume key handling shall be successful
					bSuccess = true;
					oKey = aKeys[i];
					// Keys are located either at name (resource/entity key) or PropertyPath (SemanticKey annotation)
					sKeyProperty = oKey.name || oKey.PropertyPath;
					if (!mParams[sKeyProperty] || mParams[sKeyProperty].length > 1) {
						// if no key params or multiple key params are present set unsuccessful and break
						bSuccess = false;
						break;
					}
				}
			}
			return bSuccess;
		}

		function fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode) {
			var result = {};
			
			// if page exists, but for the current mode is replaced by external navigation, internal navigation is not allowed
			var oConfig = oNavigationControllerProxy.oAppComponent.getConfig();
			var oTopDetailPage = oConfig.pages && oConfig.pages[0] && oConfig.pages[0].pages && oConfig.pages[0].pages[0];
			if (!oTopDetailPage || (oTopDetailPage.navigation && oTopDetailPage.navigation[oMode.mode])){
				return {};
			}
			
			// if entitySet does not exist in metaModel, navigation is not allowed
			var oEntitySet = oModel.getMetaModel().getODataEntitySet(sEntitySet);
			if (!oEntitySet) {
				return {};
			}
			
			var oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
			
			var aSemanticKey = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
			if (aSemanticKey){
				// complete semantic key provided
				result = {
					bNavigationWithSemanticKeyPossible: fnCheckKeys(aSemanticKey, oStartupParameters),
					aSemanticKey: aSemanticKey
				};				
			}
			
			// full technical key provided?
			if (oEntityType.key.propertyRef){
				// technical key provided
				result.bNavigationWithTechnicalKeyPossible = fnCheckKeys(oEntityType.key.propertyRef, oStartupParameters);
				result.aTechnicalKey = oEntityType.key.propertyRef;
			}
			
			// Check if Sub object page(s) exists
			var aSubPages = oTopDetailPage && oTopDetailPage.pages;
			if (aSubPages) {
				var i, oSubPage, sSubPageEntitySet, oSubPageEntityType, aSubPageSemanticKey, oSubPageEntitySet, bAllowDeepLinking;
				//Check navigation via Semantic Key
				for (i = 0; i < aSubPages.length; i++) {
					oSubPage = aSubPages[i];
					if (oSubPage.routingSpec && oSubPage.routingSpec.noOData){ // ignore non OData subpages
						continue;
					}
					sSubPageEntitySet = oSubPage.entitySet;
					oSubPageEntitySet = oModel.getMetaModel().getODataEntitySet(sSubPageEntitySet);
					bAllowDeepLinking = oSubPage.component && oSubPage.component.settings && oSubPage.component.settings.allowDeepLinking;
					if (!oSubPage.navigationProperty || !oSubPageEntitySet || !bAllowDeepLinking){
						continue;
					}
					oSubPageEntityType = oModel.getMetaModel().getODataEntityType(oSubPageEntitySet.entityType);
					aSubPageSemanticKey = oSubPageEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
					if (aSubPageSemanticKey && fnCheckKeys(aSubPageSemanticKey, oStartupParameters)) {
						result.sSemanticKeySubPageEntitySetName = oSubPageEntitySet.name;
						result.bNavigationToSubPageWithSemanticKeyPossible = fnCheckKeys(aSubPageSemanticKey, oStartupParameters);
						result.aSubPageSemanticKey = aSubPageSemanticKey;
						result.sSemanticKeySubPageNavigationProperty = oSubPage.navigationProperty;
						break;
					}
				}
				//Check navigation via Technical Keys
				for (i = 0; i < aSubPages.length; i++) {
					oSubPage = aSubPages[i];
					if (oSubPage.routingSpec && oSubPage.routingSpec.noOData){ // ignore non OData subpages
						continue;
					}
					sSubPageEntitySet = oSubPage.entitySet;
					oSubPageEntitySet = oModel.getMetaModel().getODataEntitySet(sSubPageEntitySet);
					bAllowDeepLinking = oSubPage.component && oSubPage.component.settings && oSubPage.component.settings.allowDeepLinking;
					if (!oSubPage.navigationProperty || !oSubPageEntitySet || !bAllowDeepLinking){
						continue;
					}
					oSubPageEntityType = oModel.getMetaModel().getODataEntityType(oSubPageEntitySet.entityType);
					if (fnCheckKeys(oSubPageEntityType.key.propertyRef, oStartupParameters)) {
						result.bNavigationToSubPageWithTechnicalKeyPossible = true;
						result.sSubPageEntitySetName = oSubPageEntitySet.name;
						result.sSubPageNavigationProperty = oSubPage.navigationProperty;
						result.aSubPageTechnicalKeys = oSubPageEntityType.key.propertyRef;
						break;
					}
				}
			}

			return result;
		}
		
		function fnPrepareCreate(oNavigationControllerProxy){
			var oGlobalModel = oNavigationControllerProxy.oAppComponent.getModel("_templPrivGlobal");
			oGlobalModel.setProperty("/generic/forceFullscreenCreate", true);
		}

		function fnTransformEdmGuidParams(oModel, sEntitySet, oStartupParameters) {
			var oDataMetaModel, oEntitySet, sEntityType, oEntityType, aEntityTypeProperties, aPropertiesOfTypeGuid, i, oProperty, j, sGuid, iEntityTypeLength;
			if (jQuery.isEmptyObject(oStartupParameters)) {
				return;
			}
			oDataMetaModel = oModel && oModel.getMetaModel();
			oEntitySet = oDataMetaModel && oDataMetaModel.getODataEntitySet(sEntitySet);
			sEntityType = oEntitySet && oEntitySet.entityType;
			oEntityType = oDataMetaModel && oDataMetaModel.getODataEntityType(sEntityType);
			aEntityTypeProperties = oEntityType && oEntityType.property;
			aPropertiesOfTypeGuid = [];
			iEntityTypeLength = aEntityTypeProperties && aEntityTypeProperties.length;
			for (i = 0; i <  iEntityTypeLength; i++) {
				oProperty = aEntityTypeProperties[i];
				if (oProperty["type"] === "Edm.Guid") {
					aPropertiesOfTypeGuid.push(oProperty["name"]);
				}
			}
		//transform the Edm.Guid parameter
			for (j = 0; j < aPropertiesOfTypeGuid.length; j++) {
				if (!oStartupParameters[aPropertiesOfTypeGuid[j]]) {
					continue;
				}
				sGuid = oStartupParameters[aPropertiesOfTypeGuid[j]][0];
				sGuid = sGuid.toLowerCase().replace(/(guid')([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})(')/, "$2");
				if (!sGuid.match(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/)) {
					// assume legacy guid
					sGuid = sGuid.replace(/([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})/, "$1-$2-$3-$4-$5");
				}
				oStartupParameters[aPropertiesOfTypeGuid[j]][0] = sGuid;
			}
		}

		/* checks the startup parameters for triggering navigation
		 * Note: this function is only called when sEntitySet and oStartupParameters are truthy
		 */
		function fnProcessStartupParameters(oNavigationControllerProxy, sEntitySet, oStartupParameters) {
			var oModel;
			// wait for the ODataMetaModel to be loaded
			oModel = oNavigationControllerProxy.oAppComponent.getModel();
			oModel.attachMetadataFailed(oNavigationControllerProxy.fnInitializationResolve);
			oModel.getMetaModel().loaded().then(function() {
				var oEntitySet;
				// get all properties of type Edm.guid from the entityType and transform the strings if needed
				fnTransformEdmGuidParams(oModel, sEntitySet, oStartupParameters);

				var sPreferredMode = oStartupParameters.preferredMode && oStartupParameters.preferredMode[0];
				var sMode = oStartupParameters.mode && oStartupParameters.mode[0];
				var oMode = fnCombineMode(sPreferredMode, sMode);

				switch (oMode.mode) {
					case "create":
						fnPrepareCreate(oNavigationControllerProxy);

						var oCreatePromise = CRUDHelper.create(oNavigationControllerProxy.oAppComponent
								.getTransactionController().getDraftController(), sEntitySet, "/" + sEntitySet, oModel, oNavigationControllerProxy.oTemplateContract.oApplicationProxy.setEditableNDC);

						oCreatePromise.then(function(oContext) {
							oNavigationControllerProxy.navigateToContext(oContext, "", true, 4).then(fnInitialiseRouting.bind(null, oNavigationControllerProxy, oStartupParameters));
						}, function(oError) {
							fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
							oNavigationControllerProxy.navigateToMessagePage({
								title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
								text: oError.messageText,
								description: "",
								icon: "sap-icon://message-error",
								replaceURL: true
							});
						});
						oNavigationControllerProxy.oTemplateContract.oBusyHelper.setBusy(oCreatePromise, true);
						break;

						//Create with context
					case "createWithContext":
						fnPrepareCreate(oNavigationControllerProxy);
						oEntitySet = oModel.getMetaModel().getODataEntitySet(sEntitySet);
						var oDraftRoot = oEntitySet["com.sap.vocabularies.Common.v1.DraftRoot"];
						if (oDraftRoot && oDraftRoot.NewAction) {
							var oFunctionImport = oModel.getMetaModel().getODataFunctionImport(oDraftRoot.NewAction.String.split("/")[1]);
							var oUrlParameters = {};

							if (oFunctionImport && oFunctionImport.parameter) {
								for (var i = 0; i < oFunctionImport.parameter.length; i++) {
									if (oFunctionImport.parameter[i].mode === "In" && oStartupParameters[oFunctionImport.parameter[i].name][0]) {
										oUrlParameters[oFunctionImport.parameter[i].name] = oStartupParameters[oFunctionImport.parameter[i].name][0];
									}
								}

								// TODO: use Smart Templates busy indicator
								sap.ui.core.BusyIndicator.show();

								oModel.callFunction("/" + oFunctionImport.name, {
									success: function(oData, oResponse) {
										fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
										sap.ui.core.BusyIndicator.hide();
										var oModelUtil = new ModelUtil(oModel);
										var oContext = oModelUtil.getContextFromResponse(oData);
										if (oContext) {
											oNavigationControllerProxy.navigateToContext(oContext, null, true, 4).then(fnInitialiseRouting.bind(null, oNavigationControllerProxy, oStartupParameters));
										} else {
											fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
											oNavigationControllerProxy.navigateToMessagePage({
												title: oNavigationControllerProxy.oTemplateContract.getText("ST_ERROR"),
												text:  oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
												description: "",
												replaceURL: true
											});
										}
									},
									error: function(oError) {
										sap.ui.core.BusyIndicator.hide();
										oNavigationControllerProxy.navigateToMessagePage({
											title: oNavigationControllerProxy.oTemplateContract.getText("ST_ERROR"),
											text:  oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
											description: "",
											replaceURL: true
										});
									},
									method: "POST",
									urlParameters: oUrlParameters
								});
							} else {
								oNavigationControllerProxy.navigateToMessagePage({
									title: oNavigationControllerProxy.oTemplateContract.getText("ST_ERROR"),
									text:  oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
									description: "",
									replaceURL: true
								});
							}
						}
						break;

					case "edit":
						// App opens with an edit view, if there is a draft...if not, creates a draft
						var oNavigationPossible = fnCheckNavigation(oModel, oNavigationControllerProxy, sEntitySet,
								oStartupParameters, oMode);
						if (oNavigationPossible.bNavigationWithTechnicalKeyPossible || oNavigationPossible.bNavigationWithSemanticKeyPossible) {
							var sBindingPath = "";
							var oEditPromise;
							if (oNavigationPossible.bNavigationWithTechnicalKeyPossible){
								sBindingPath = oModel.createKey(sEntitySet, oStartupParameters);
								oEditPromise = CRUDHelper.edit(
										oNavigationControllerProxy.oAppComponent.getTransactionController(), sEntitySet,
										"/" + sBindingPath, oModel,
										oNavigationControllerProxy.oTemplateContract,
										oNavigationControllerProxy.fnInitializationResolve);								
							} else if (oNavigationPossible.bNavigationWithSemanticKeyPossible){
								sBindingPath = "";
								oEditPromise = CRUDHelper.edit(
										oNavigationControllerProxy.oAppComponent.getTransactionController(), 
										sEntitySet,
										sBindingPath, oModel,
										oNavigationControllerProxy.oTemplateContract,
										oNavigationControllerProxy.fnInitializationResolve,
										oNavigationPossible.aSemanticKey, oStartupParameters);								
							}
							
							oEditPromise.then(function(oResult) {
								oNavigationControllerProxy.navigate(oResult.context.getPath(), true);
								fnInitialiseRouting(oNavigationControllerProxy);
							}, function(oError) {
								if (oError.lockedByUser) {
									if (!oMode.force) {
										fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet,
												oStartupParameters, oMode);
									} else {
										oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator
										// before
										oNavigationControllerProxy.navigateToMessagePage({
											title: oNavigationControllerProxy.oTemplateContract
											.getText("LOCKED_OBJECT_POPOVER_TITLE"),
											text: oNavigationControllerProxy.oTemplateContract
											.getText("LOCKED_OBJECT_POPOVER_TITLE"),
											description: oNavigationControllerProxy.oTemplateContract.getText(
													"ST_GENERIC_LOCKED_OBJECT_POPOVER_TEXT", [oError.lockedByUser]),
													icon: "sap-icon://message-error",
													replaceURL: true
										});
									}
								} else if (oError.draftAdminReadResponse) {
									fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
									/*
									oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator before
									oNavigationControllerProxy
									.navigateToMessagePage({
										title: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_TITLE"),
										text: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE"),
										description: oNavigationControllerProxy.oTemplateContract
										.getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC"),
										icon: "sap-icon://message-error",
										replaceURL: true
									});*/
								} else {
									// in case user is not authorized to edit object HTTP400. Show popup and navigate to active object
									var oPopupText = oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_NOT_AUTORIZED_EDIT");
									MessageBox.warning(
													oPopupText,
													{
														onClose : function(sAction) {
															fnDefaultNavigationProcessing(
																	oModel,
																	oNavigationControllerProxy,
																	sEntitySet,
																	oStartupParameters,
																	{
																		mode : "display",
																		force : false
																	});
														}
													});											
								}
							});
						} else {
							fnInitialiseRouting(oNavigationControllerProxy, oStartupParameters);
						}
						break;

					case "display":
						fnDefaultNavigationProcessing(oModel, oNavigationControllerProxy, sEntitySet, oStartupParameters, oMode);
						break;

					default: // including case "unsupported"
						oNavigationControllerProxy.fnInitializationResolve(); // to finish busyIndicator before showing error page
					oNavigationControllerProxy.navigateToMessagePage({
						title: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
						text: oNavigationControllerProxy.oTemplateContract.getText("ST_GENERIC_ERROR_TITLE"),
						description: oNavigationControllerProxy.oTemplateContract.getText("PARAMETER_COMBINATION_NOT_SUPPORTED", [sMode, sPreferredMode]),
						icon: "sap-icon://message-error",
						replaceURL: true
					});
				}
			});
		}
		// - End methods for processing the startup parameters

		// The function exposed by this class: Startup the router
		function fnStartupRouter(oNavigationControllerProxy) {
			var oManifestEntryGenricApp = oNavigationControllerProxy.oAppComponent.getConfig();

			// check the manifest.json for the flexibleColumnLayout flag
			if (oManifestEntryGenricApp.settings && oManifestEntryGenricApp.settings.flexibleColumnLayout) {
				oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler = new FlexibleColumnLayoutHandler(
					oNavigationControllerProxy.oTemplateContract.oNavigationHost, oNavigationControllerProxy
				);
			}

			var sEntitySet = generateRoutingMetadataAndGetRootEntitySet(oNavigationControllerProxy);
			var oData = oNavigationControllerProxy.oAppComponent.getComponentData();
			var oStartupParameters = oData && oData.startupParameters;
			// check if there entitySet and startup parameters are present and no hash exists!
			if (sEntitySet && oStartupParameters && !oNavigationControllerProxy.oHashChanger.getHash()) {
				fnProcessStartupParameters(oNavigationControllerProxy, sEntitySet, oStartupParameters);
			} else {
				fnInitialiseRouting(oNavigationControllerProxy);
			}
		}

		// Determine path the component has to be bound to according to the event obtained from the router
		function fnDeterminePath(oRouteConfig, oEvent, sPattern){
			var sPath, oKeys, sKey;
			if (oRouteConfig.operation === "root") { // check for operation
				return null;
			}

			if (oRouteConfig.operation === "aggregation") {
				sPath = oRouteConfig.pattern;
			} else if (sPattern){
				sPath = sPattern;
			} else {
				// The view is for an instance
				sPath = oRouteConfig.contextPath;
			}
			if (!sPath){
				return "";
			}
			if (sPath.indexOf("/") !== 0){
				sPath = "/" + sPath;
			}
			oKeys = oEvent.getParameter("arguments");
			if (oKeys) {
				for (sKey in oKeys) {
					// replace each key in pattern with corresponding key in argument
					if (sKey !== "?query"){
						sPath = sPath.replace("{" + sKey + "}", oKeys[sKey]);
					}
				}
				return sPath;
			}
		}
		
		/*
		 * get the navigation path from binding context
		 * @param {Object} oTargetContext - the binding context
		 * @param {string} sNavigationProperty - the navigation property that should replace the entity
		 * @returns {string} the resolved path
		 */
		function fnDetermineNavigationPath(oTargetContext, sNavigationProperty) {
			var sPath, aPath, sEntitySet;
			// Get the path from binding context without "/"
			sPath = oTargetContext.getPath().substring(1);
			// Get the entityset from path
			aPath = sPath.split("(");
			if (aPath[0]) {
				sEntitySet = aPath[0];
			}
			// Replace the entitySet with navigationProperty in the path, if it is specified
			if (sNavigationProperty) {
				sPath = sPath.replace(sEntitySet, sNavigationProperty);
				if (sPath.indexOf("/") === 0) {
					sPath = sPath.substring(1);
				}
			}
			return { 
				entitySet: sEntitySet,
				path: sPath
			};
		}
		
		function getPatternDelimiter(){
			return sPatternDelimiter;
		}

		// Expose selected private functions to unit tests
		//
		/* eslint-disable */
		var generateRoutingMetadataAndGetRootEntitySet = testableHelper.testableStatic(generateRoutingMetadataAndGetRootEntitySet,
			"routingHelpergenerateRoutingMetadataAndGetRootEntitySet");
		var fnInitialiseRouting = testableHelper.testableStatic(fnInitialiseRouting, "routingHelper_initialiseRouting");
		var fnReadObject = testableHelper.testableStatic(fnReadObject, "routingHelper_readObject");
		var fnProcessStartupParameters = testableHelper.testableStatic(fnProcessStartupParameters, "routingHelper_processStartupParameters");
		var fnTransformEdmGuidParams = testableHelper.testableStatic(fnTransformEdmGuidParams, "routingHelper_transformStartupGuidParameters");
		/* eslint-enable */

		return {
			startupRouter: fnStartupRouter,
			determinePath: fnDeterminePath,
			determineNavigationPath: fnDetermineNavigationPath,
			getPatternDelimiter: getPatternDelimiter,
			readObjectProcessResults: fnReadObjectProcessResults
		};
	});
}; // end of sap/suite/ui/generic/template/lib/routingHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroChart') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroChart",[
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItem",
	"sap/ui/model/Sorter",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
],
function(FilterItem, Sorter, FilterUtil) {
	"use strict";

	var CHART_TYPE_DONUT = "Donut";
	var CHART_TYPE_LINE = "Line";
	var CHART_TYPE_BAR = "Bar";
	var IS_OTHERS = "__IS_OTHER__";

	var FilterItemChart = FilterItem.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroChart", {
		metadata: {
			properties: {
				smartFilterId: { type: "string", group: "Misc", defaultValue: null}
			},
			aggregations: {
				control: {type: "sap.ui5.controls.microchart", multiple: false}
			}
		},

		renderer: function(oRm, oControl) {
			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.writeClasses();
			oRm.addStyle("width", "100%");
			oRm.addStyle("height", "7.9rem");
			oRm.writeStyles();
			oRm.write(">");
			oRm.renderControl(oControl.getAggregation("control"));
			oRm.write("</div>");
		}
	});

	FilterItemChart.prototype._formattingId = "__UI5__ShortIntegerMaxFraction2";
	FilterItemChart.prototype._maxFractionalDigits = 2;
	FilterItemChart.prototype._maxFractionalDigitsValsLessThanZero = 7; // limit to 7 decimal places, e.g. if scale is B and value is 700 will show 0.0000007, if value is 70, the shortened value will be 0.
	FilterItemChart.prototype._minFractionalDigits = 0;
	FilterItemChart.prototype._shortRefNumber;
	FilterItemChart.prototype._isTriggeredBySync = false;
	FilterItemChart.prototype._multiUnit = false;
	FilterItemChart.prototype.technicalIssueMessage = "TECHNICAL_ISSUES_OVERLAY_MESSAGE";
	FilterItemChart.prototype.noDataIssueMessage = "NO_DATA_FOUND_OVERLAY_MESSAGE";
	FilterItemChart.prototype.requiredFilterMessage = "REQUIRED_FIELDS_OVERLAY_MESSAGE";
	FilterItemChart.prototype.multipleCurrencyMessage = "MULTIPLE_CURRENCY_OVERLAY_MESSAGE";
	FilterItemChart.prototype.multipleUnitMessage = "MULTIPLE_UNIT_OVERLAY_MESSAGE";
	FilterItemChart.prototype.init = function() {
		this._bAllowBindingUpdateOnPropertyChange = false;
		this._attachChartEvents();
	};

	FilterItemChart.prototype._attachChartEvents = function() {
		var me = this;
		this._chart.addEventDelegate({
			onAfterRendering : function () {
				if (me._getChartAggregations().length) {
					// if multi unit show overlay
					if (me._multiUnit) {
						me.applyOverlay(me.getIsCurrency() ? me.multipleCurrencyMessage : me.multipleUnitMessage);
					}
				}
			}
		});

		this._chart.attachSelectionChanged(this._onSelectionChanged, this);
	};

	FilterItemChart.prototype._getCurrentSelectedChart = function(bReturnChartType) {
		if (this._chart.getPoints) {
			return bReturnChartType ? CHART_TYPE_LINE : "point";
		} else if (this._chart.getSegments) {
			return bReturnChartType ? CHART_TYPE_DONUT : "segment";
		} else if (this._chart.getBars) {
			return bReturnChartType ? CHART_TYPE_BAR : "bar";
		}
	};

	FilterItemChart.prototype._getCustomData = function(ev) {
		var sCurrentSelectedChartType = this._getCurrentSelectedChart();
		var aCurrentItem = (sCurrentSelectedChartType) ? ev.getParameter(sCurrentSelectedChartType) : undefined;
		if (sCurrentSelectedChartType && aCurrentItem) {
			var aCustomData = aCurrentItem.getCustomData();
			var data = {
				dimValue: aCustomData[0].getValue(),
				dimValueDisplay: aCurrentItem.getLabel()
			};
			return data;
		}
	};

	FilterItemChart.prototype._onSelectionChanged = function(ev) {
		var sFilterRestriction = this.getFilterRestriction(),
		oCustomData = this._getCustomData(ev),
		bSelected = ev.getParameter("selected"),
		bClearOtherSelection = (sFilterRestriction === "single" && oCustomData.dimValue === IS_OTHERS && bSelected);
		if (bClearOtherSelection) {
			ev.getParameter("segment").setSelected(false);
		}
		if (bSelected && oCustomData.dimValue === IS_OTHERS && sFilterRestriction === "multiple" || (bSelected && oCustomData.dimValue !== IS_OTHERS)) {
			this._onChartSelectData(ev);
		} else if (!bSelected) {
			this._onChartDeselectData(ev);
		}
	};

	/**
	 * Triggered on selection of chart data point also triggers change to content area on chart selection
	 *
	 * @param {event} ev - event triggered by selecting data point
	 * @returns {void}
	 *
	 * @private
	 */
	FilterItemChart.prototype._onChartSelectData = function(ev) {
		var oDimensionFilter,
		sFilterRestriction = this.getFilterRestriction();

		if (sFilterRestriction === "multiple") {
			oDimensionFilter = jQuery.extend(true, {items: [], ranges: [], value: null}, this.getDimensionFilter());
			var oData = this._getCustomData(ev),
			sChartType = this._getCurrentSelectedChart(true);
			// if chart type is donut
			if (sChartType === CHART_TYPE_DONUT) {
				oDimensionFilter = this._applyDonutChartSelections(oData, oDimensionFilter);
			} else {
				oDimensionFilter.items.push({
					key: oData.dimValue,
					text: oData.dimValueDisplay // oData.dimValueDisplay comes with TextArrangement from custome data so applying directly.
				});
			}
		} else {
			oDimensionFilter = this.getDimensionFilter();
			// single-value
			if (oDimensionFilter) {
				// if there is a filter, remove it and add the new filter for filter restriction single value
				oDimensionFilter = null;

				var aSelectedChartAggregation = ev.getParameter("bar") || ev.getParameter("point") || ev.getParameter("segment");
				this._setSelectedAggregation(aSelectedChartAggregation);
				aSelectedChartAggregation.setSelected(true);
			}
			//var oData = aDataList[0].data;
			var oData = this._getCustomData(ev);
			oDimensionFilter = oData.dimValue;
		}

		this.setProperty("dimensionFilter", oDimensionFilter); // set without calling setDimensionFilter so that the selected points don't get reapplied
		// Fire filter change of filter item
		// handle in _onFilterChange in SmartVisualFilterBar.js
		this.fireFilterChange();
	};

	FilterItemChart.prototype._setSelectedAggregation = function (aSelectedChartAggregation) {
		var setSelectedAggregation = this._chart.setSelectedBars || this._chart.setSelectedPoints || this._chart.setSelectedSegments;
		setSelectedAggregation.call(this._chart, aSelectedChartAggregation);
	};

	FilterItemChart.prototype._getChartAggregations = function () {
		// determine aggregation function and call it to get all chart aggregations
		var getChartAggregations = this._chart.getPoints || this._chart.getSegments || this._chart.getBars;
		return getChartAggregations.call(this._chart);
	};

	FilterItemChart.prototype._onChartDeselectData = function(ev) {
		//var sDimensionFieldDisplay = this.getDimensionFieldDisplay(),
		var oDimensionFilter,
		sFilterRestriction = this.getFilterRestriction(),
		//aDataList = ev.getParameter('data'),
		//oData = aDataList[0].data,
		oData = this._getCustomData(ev),
		aUpdatedDimensionFilterItems = [],
		aUpdatedDimensionFilterRanges = [];
		if (sFilterRestriction === "single") {
			// set to null
			oDimensionFilter = null;
		} else {
			oDimensionFilter = jQuery.extend(true, {}, this.getDimensionFilter());
			var aDimensionFilterItems = (oDimensionFilter && oDimensionFilter.items) ? oDimensionFilter.items : undefined,
			aDimensionFilterRanges = (oDimensionFilter && oDimensionFilter.ranges) ? oDimensionFilter.ranges : undefined,
			sDimensionFilterValue = (oDimensionFilter && oDimensionFilter.value) ? oDimensionFilter.value : null;
			// consider items
			if (aDimensionFilterItems) {
				aDimensionFilterItems.forEach(function(element) {
					if (element.key !== oData.dimValue) {
						aUpdatedDimensionFilterItems.push(element);
					}
				});
			}
			oDimensionFilter.items = aUpdatedDimensionFilterItems;
			// consider value
			if (sDimensionFilterValue) {
				if (oData.dimValue === sDimensionFilterValue) {
					oDimensionFilter.value = null;
				}
			}
			// consider ranges EQ
			if (aDimensionFilterRanges) {
				aDimensionFilterRanges.forEach(function(element) {
					if (element.operation === "EQ" && oData.dimValue !== IS_OTHERS && element.exclude) {
						aUpdatedDimensionFilterRanges.push(element);
					} else if (element.operation === "EQ" && !element.exclude) {
						//To-Do : Suggestion, @jitin we could try to make a another util to compare two Dates.
						//More general which take the med or large as parameter.
						//we could remove this if provided its handled with undefined case. Hence, keeping it time being
						//Please recheck if this change works properly for you BLI.
						//Had to do it and your changes were breaking Donut deselection scenario.
						if (element.value1 instanceof Date && oData.dimValue instanceof Date) {
							if (FilterUtil.getDateInMedium(element.value1) !== FilterUtil.getDateInMedium(oData.dimValue)) {
								aUpdatedDimensionFilterRanges.push(element);
							}
						} else if (element.value1 !== oData.dimValue) {
							aUpdatedDimensionFilterRanges.push(element);
						}
					} else if (element.operation !== "EQ" && !element.exclude && element.value1 !== oData.dimValue) {
							aUpdatedDimensionFilterRanges.push(element);
					}

				});
			}
			oDimensionFilter.ranges = aUpdatedDimensionFilterRanges;
		}
		this.setProperty("dimensionFilter", oDimensionFilter); // set without calling setDimensionFilter so that the selected points don't get reapplied
		// Fire filter change of filter item
		// handle in _onFilterChange in SmartVisualFilterBar.js
		this.fireFilterChange();
	};

	/**
	*Function returns two arrays, an array of contructors for sorting and an array of sort order properties
	*params {[objects]} aSortOrder array of sortOrder property from annotations
	*return {object} oSorters Object that consists of array of construcotrs for sortig and array of sort order properties
	*/
	FilterItemChart._getSorter = function(aSortOrder) {
		var aSortFields = [], aSortDescending = [], aSorters = [];
		//For each type of sortOrder, we save the sortOrder Type and Ascending/descending values into  two arrays. Elements of these arrays are then passed into Sorter()
		for (var i = 0; i < aSortOrder.length; i++) {
			aSortFields[i] = aSortOrder[i].Field.String;
			aSortDescending[i] = aSortOrder[i].Descending.Boolean;
			aSorters.push(new Sorter(aSortFields[i], aSortDescending[i]));
		}
		var oSorter = {sorter : aSorters, sortFields: aSortFields};
		return oSorter;
	};

	FilterItemChart.prototype._getNumberFormatter = function(iShortRefNumber) {
		var fixedInteger = sap.ui.core.format.NumberFormat.getIntegerInstance({
			style: "short",
			showScale: false,
			shortRefNumber: iShortRefNumber
		});

		return fixedInteger;
	};

	FilterItemChart.prototype.setWidth = function(width) {
		this.setProperty("width", width);
	};

	FilterItemChart.prototype.setHeight = function(height) {
		this.setProperty("height", height);
	};

	FilterItemChart.prototype.setEntitySet = function(sEntitySetName) {
		this.setProperty("entitySet", sEntitySetName);
	};

	FilterItemChart.prototype.setDimensionField = function(dimensionField) {
		this.setProperty("dimensionField", dimensionField);
	};

	FilterItemChart.prototype.setDimensionFieldIsDateTime = function(dimensionFieldIsDateTime) {
		this.setProperty("dimensionFieldIsDateTime", dimensionFieldIsDateTime);
	};

	FilterItemChart.prototype.setDimensionFieldDisplay = function(dimensionFieldDisplay) {
		this.setProperty("dimensionFieldDisplay", dimensionFieldDisplay);
	};

	FilterItemChart.prototype.setMeasureField = function(measureField) {
		if (measureField && measureField.constructor === Object) {
			if (measureField.value) {
				this.setProperty("measureField", measureField.value);
			}
			if (measureField.bUpdateBinding) {
				this._updateBinding();
			}
		} else if (measureField && measureField.constructor === Array) {
			this.setProperty("measureField", measureField);
		} else {
			this.setProperty("measureField", measureField);
		}
	};

	FilterItemChart.prototype.setUnitField = function(unitField) {
		this.setProperty("unitField", unitField);
	};
	/**
	*Set Sortorder property so that chart data can be sorted
	*@param{array} sortOrder - Array of sortOrder Property objects from annotations
	*@return{void}
	*/
	FilterItemChart.prototype.setSortOrder = function(sortOrder) {
		if (sortOrder && sortOrder.constructor === Object) {
			if (sortOrder.value) {
				this.setProperty("sortOrder", sortOrder.value);
			}
			if (sortOrder.bUpdateBinding) {
				this._updateBinding();
			}
		} else if (sortOrder && sortOrder.constructor === Array) {
			this.setProperty("sortOrder", sortOrder);
		} else {
			this.setProperty("sortOrder", sortOrder);
		}
	};
	/**
	 * Set external dimension Filters so that the filter item can be rendered
	 *
	 * @param {array} filter - array of filters
	 * @param {boolean} bIsTriggeredBySync - whether filter was triggered by sync or not
	 * @returns {void}
	 */
	FilterItemChart.prototype.setDimensionFilterExternal = function(filter) {
		this.setProperty("dimensionFilterExternal", filter);
		if (this._bAllowBindingUpdateOnPropertyChange) {
			this._updateBinding();
		}
	};

	/**
	*Function returns config object with all the below mentioned properties.
	*return {object} Config object is returned by the object.
	*/
	FilterItemChart.prototype.getP13NConfig = function() {
		var aPropList = [
			"width", "height","filterRestriction", "sortOrder", "measureField", "scaleFactor", "numberOfFractionalDigits", "chartQualifier",
			"entitySet", "dimensionField", "dimensionFieldDisplay", "dimensionFieldIsDateTime", "dimensionFilter", "unitField", "isCurrency", "isMandatory", "outParameter", "inParameters", "parentProperty"
		];

		// simple properties
		var oConfig = {};
		for (var i = 0; i < aPropList.length; i++) {
			var name = aPropList[i];
			oConfig[name] = this.getProperty(name);
			if ((name == "outParameter" || name == "inParameters") && oConfig[name] == "") {
				oConfig[name] = undefined;
			}
		}

		return oConfig;
	};

	FilterItemChart.prototype.setDimensionFilter = function(dimFilter, bIsChartInteraction) {
		this.setProperty("dimensionFilter", dimFilter);
	};

	FilterItemChart.prototype._onDataReceived = function(data) {
		if (!data) {
			return;
		}
		this._determineUnit(data);
		this._getShortRefNumber(data.slice(0));
	};

	/**
	* @private
	* This function determine unit and set it.
	*	@param{array} data list from which unit determination to be done
	* @return{void}
	*/
	FilterItemChart.prototype._determineUnit = function (data){
		var unitField = this.getUnitField();
		if (unitField) {
			var prevUnit = data[0][unitField];
			this._multiUnit = false;
			for (var i = 1; i < data.length; i++) {
				//Others category in donut chart is not considered for unit determination
				if (data[i].dimensionValue !== IS_OTHERS){
					var unit = data[i][unitField];
				}
				if (unit != prevUnit) {
					if (data.length > 1){
						this._multiUnit = true;
					}
					break;
				}
				prevUnit = unit;
			}
			this._applyUnitValue(this._multiUnit ? "" : prevUnit);
			} else {
				// no unit field, so no unit displayed in title
				this._applyUnitValue("");
			}
	};
	FilterItemChart.prototype._applyUnitValue = function(val) {
		if (this._lastUnitValue != val) {
			this._lastUnitValue = val;
			this.fireTitleChange();
		}
	};

	/**
	 * Determines the scale factor and the scale to be used for the visual filter item
	 * Initially checks for scale factor from the annotation. If annotation does not have
	 * any scale factor then it is calculated on the basis of median deduced from the data received from the backend.
	 *
	 * @param {object} oData - Data received from the backend call
	 * @returns {void}
	 *
	 * @private
	 */
	FilterItemChart.prototype._getShortRefNumber = function(oData) {
		this._scaleValue = "";
		this._shortRefNumber = undefined; // reset
		// Determine the scale, to get scaleFactor from annotations or from locally defined values
		var iShortRefNumber = this.getScaleFactor(),
		scale;
		if (!iShortRefNumber) {
			// if annotation does not have scale factor
			var scaleFactor = this._getScaleFactorFromMedian(oData);
			iShortRefNumber = scaleFactor.iShortRefNumber;
			scale = scaleFactor.scale;
		} else {
			// if annotation has scale factor
			var fixedInteger = this._getNumberFormatter(iShortRefNumber);
			scale = fixedInteger.getScale() ? fixedInteger.getScale() : "";
		}

		this._shortRefNumber = iShortRefNumber;
		this._scaleValue = scale;
		this.fireTitleChange();
	};

	/**
	 * Determines the scale factor and the scale to be used for the Visual Filter Item
	 * on the basis of median deduced from the data received from the backend 
	 *
	 * @param {event} ev - event triggered by selecting data point
	 * @returns {void}
	 *
	 * @private
	 */
	FilterItemChart.prototype._getScaleFactorFromMedian = function(oData) {
		var sMeasureField = this.getMeasureField();
		// sort data
		oData.sort(function(a,b) {
			if (Number(a[sMeasureField]) < Number(b[sMeasureField])) {
				return -1;
			}
			if (Number(a[sMeasureField]) > Number(b[sMeasureField])) {
				return 1;
			}
			return 0;
		});
		// get median index
		var iMid = oData.length / 2, // get mid of array
		// if iMid is whole number, array length is even, calculate median
		// if iMid is not whole number, array length is odd, take median as iMid - 1
		iMedian = iMid % 1 === 0 ? (parseFloat(oData[iMid - 1][sMeasureField]) + parseFloat(oData[iMid][sMeasureField])) / 2 : parseFloat(oData[Math.floor(iMid)][sMeasureField]),
		// get scale factor on median
		val = iMedian,
		scaleFactor;
		for (var i = 0; i < 14; i++) {
			scaleFactor = Math.pow(10, i);
			if (Math.round(Math.abs(val) / scaleFactor) < 10) {
				break;
			}
		}

		var fixedInteger = this._getNumberFormatter(scaleFactor);

		// apply scale factor to other values and check
		for (var i = 0; i < oData.length; i++) {
			var aData = oData[i],
			sScaledValue = fixedInteger.format(aData[sMeasureField]),
			aScaledValueParts = sScaledValue.split(".");
			// if scaled value has only 0 before decimal or 0 after decimal (example: 0.02)
			// then ignore this scale factor else proceed with this scale factor
			// if scaled value divided by 1000 is >= 1000 then also ignore scale factor
			if ((!aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0) || (aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0 && aScaledValueParts[1].indexOf('0') === 0) || (sScaledValue / 1000) >= 1000) {
				scaleFactor = undefined;
				break;
			}
		}
		return {
			iShortRefNumber: scaleFactor,
			scale: scaleFactor ? fixedInteger.getScale() : ""
		};
	};
	FilterItemChart.prototype._getScaleFactor = function(val) {
		var val = parseFloat(val);
		var precision = this._minFractionalDigits;
		for (var i = 0; i < 14; i++) {
			var scaleFactor = Math.pow(10, i);
			if (Math.round(Math.abs(val) / scaleFactor, precision - 1) < 10) {
				return scaleFactor;
			}
		}

		return undefined;
	};
	FilterItemChart.prototype.getTitle = function() {
		var model = this.getModel();

		if (!model) {
			return "";
		}

		var basePath = "/" + this.getEntitySet() + "/";
		var measureLabel = model.getData(basePath + this.getMeasureField() + "/#@sap:label");
		// if sap:label is not defined
		if (measureLabel === undefined) {
			measureLabel = this.getMeasureField();
		}
		var dimLabel = model.getData(basePath + this.getDimensionField() + "/#@sap:label");
		// if sap:label is not defined
		if (dimLabel === undefined) {
			dimLabel = this.getDimensionField();
		}

		// Get the Unit
		var unitValue = this._lastUnitValue ? this._lastUnitValue : "";

		// Get the Scale factor
		var scaleValue = this._scaleValue ? this._scaleValue : "";

		var i18nModel = this.getModel("i18n");
		if (!i18nModel) {
			return "";
		}

		var rb = i18nModel.getResourceBundle();

		var title = "";
		if (scaleValue && unitValue) {
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT_CURR", [measureLabel, dimLabel, scaleValue, unitValue]);
		} else if (unitValue) {
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, unitValue]);
		} else if (scaleValue) {
			title = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, scaleValue]);
		} else {
			title = rb.getText("VIS_FILTER_TITLE_MD", [measureLabel, dimLabel]);
		}
		return title;
	};

	FilterItemChart.prototype.getFormattedNumber = function(value, bShouldShowScale) {

		var numberOfFractionalDigits = this.getNumberOfFractionalDigits();
		if (numberOfFractionalDigits === "" || numberOfFractionalDigits === undefined) {
			numberOfFractionalDigits = "1";
		} else {
			if (Number(numberOfFractionalDigits) > 1) {
				numberOfFractionalDigits = "1";
			}
		}

		var fixedInteger = sap.ui.core.format.NumberFormat.getFloatInstance({
			style: "short",
			decimals: Number(numberOfFractionalDigits),
			showScale: bShouldShowScale,
			shortRefNumber: this._shortRefNumber,
			minFractionDigits: this._minFractionalDigits,
			maxFractionDigits: this._maxFractionalDigits
		});
		// parseFloat(value) is required otherwise -ve value are worngly rounded off
		// Example: "-1.9" rounds off to -1 instead of -2. however -1.9 rounds off to -2
		return fixedInteger.format(parseFloat(value));
	};

	FilterItemChart.prototype._getFormattedNumberWithUoM = function(value, UoM) {
		UoM = (UoM) ? UoM : "";
		//As per the documentation default locale is taken.
		var oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
		var formattedValue = sap.ui.core.format.NumberFormat.getFloatInstance({
			maxFractionDigits: 2,
			groupingEnabled: true
		},
		oLocale
		).format(value);

		return (UoM === "%") ? formattedValue + "%" : formattedValue + " " + UoM;
	};

	FilterItemChart.prototype._getDisplayedValue =  function(value, sUnitFieldValue) {
		var bShouldShowScale = (this._scaleValue === ""),
		nScaledValue = this.getFormattedNumber(value, bShouldShowScale),
		bIsPercentage = (sUnitFieldValue === "%");
		return (bIsPercentage) ? nScaledValue + "%" : "" + nScaledValue;
	};

	FilterItemChart.prototype._getToolTip = function(dimLabel, dimValue, unitField) {
		var nFormattedNumberWithUoM = this._getFormattedNumberWithUoM(dimValue, unitField);
		return dimLabel + "\n" + nFormattedNumberWithUoM;
	};

	FilterItemChart.prototype._getSelected =  function(oContext, sDimFieldValue) {
		//TO DO : This function can be optimized; we don't have to iterate through all the data if we find a selection (true value).
		var bIsSelected = false,
			sFilterRestriction = this.getFilterRestriction(),
			aExcludeFilterValue = [];
		if (oContext) {
			if (sFilterRestriction === 'multiple') {
				if (oContext.items) {
					oContext.items.forEach(function(item) {
						if (item.key ===  sDimFieldValue) {
							bIsSelected = true;
						}
					});
				}
				if (oContext.value && oContext.value === sDimFieldValue) {
					bIsSelected = true;
				}
				// consider ranges EQ
				if (oContext.ranges) {
					for (var i = 0; i < oContext.ranges.length; i++) {
						var oRange = oContext.ranges[i];
						// in ranges only EQ can match to a data point on the chart
						if (oRange.operation ===  "EQ" && oRange.value1 && !oRange.exclude) {
							if (oRange.value1 instanceof Date && sDimFieldValue instanceof Date){
								if ( FilterUtil.getDateInMedium(oRange.value1) === FilterUtil.getDateInMedium(sDimFieldValue)) {
									bIsSelected = true;
									break;
								}
							} else if (oRange.value1 === sDimFieldValue) {
								bIsSelected = true;
								break;
							}
						} else if (oRange.exclude && oRange.operation === 'EQ') { // _IS_OTHER
							aExcludeFilterValue.push(oRange.value1);
						}
					}

					if (aExcludeFilterValue.length === 2 && sDimFieldValue === IS_OTHERS) {
						// if exclude filter count is 2 the may be other's should be selected
						var iValueMatchedCount = 0,
						aDonutSegments = this._chart.getSegments();
						aDonutSegments.forEach(function (oSegment) {
							var sValue = oSegment.getCustomData()[0].getValue();
							if (aExcludeFilterValue.indexOf(sValue) > -1) {
								iValueMatchedCount++;
							}
						});

						if (iValueMatchedCount === 2) {
							bIsSelected = true;
						}
					}
				}
			} else {
				if (oContext && oContext === sDimFieldValue) {
					bIsSelected = true;
				}
			}
		}
		return bIsSelected;
	};

	FilterItemChart.prototype._getChartAggregationSettings =  function(bIsDonut) {

		var sDimField = bIsDonut ? 'dimensionValue' : this.getDimensionField(),
			sDimFieldDisplay = this.getDimensionFieldDisplay(),
			sMeasureField = this.getMeasureField(),
			sUnitField = this.getUnitField(),
			aLabelParts = ( sDimField === sDimFieldDisplay ) ? [sDimFieldDisplay] : [sDimFieldDisplay, sDimField],
			aToolTipParts = ( sDimField === sDimFieldDisplay ) ? [sDimFieldDisplay, sMeasureField, ""] : [sDimFieldDisplay, sMeasureField, sDimField],
			aUnitFieldToolTipParts = sUnitField ? aToolTipParts.push(sUnitField) : aToolTipParts,
			me = this,
			oSettings = {
				label : {
					parts: aLabelParts,
					formatter: function(oDimFieldDisplay, sDimField) {
						var sTextArrangement = me.getTextArrangement();
						return ( oDimFieldDisplay instanceof Date ) ? FilterUtil.getDateInMedium(oDimFieldDisplay) : FilterUtil.getTextArrangement(oDimFieldDisplay, sDimField, sTextArrangement);
					}
				},
				value: {
					path: sMeasureField,
					formatter: function(value) {
						return parseFloat(value);
					}
				},
				displayedValue: {
					parts: [sMeasureField, sUnitField],
					formatter: function(value, sUnitFieldValue) {
						return me._getDisplayedValue(value, sUnitFieldValue);
					}
				},
				tooltip: {
					parts: aUnitFieldToolTipParts.constructor === Array ? aUnitFieldToolTipParts : aToolTipParts,
					formatter: function(dimLabel, dimValue, sDimField, unitField) {
						var sTextArrangement = me.getTextArrangement();
						sDimField = sDimField.constructor === Object ? undefined : sDimField;
						dimLabel = ( dimLabel instanceof Date ) ? FilterUtil.getDateInMedium(dimLabel) : FilterUtil.getTextArrangement(dimLabel, sDimField, sTextArrangement);
						return me._getToolTip(dimLabel, dimValue, unitField);
					}
				},
				selected: {
					parts: ["_filter>/" + me.getParentProperty(), sDimField],
					formatter: function(oContext, sDimFieldValue) {
						return me._getSelected(oContext, sDimFieldValue);
					}
				},
				customData: {
					Type:"sap.ui.core.CustomData",
				    key:sDimField,
				    value:"{" + sDimField + "}" // bind custom data
				},
				color: "{color}"
		};
		return oSettings;
	};
	/**
	 * This function enables or disables overlay
	 * @param  {string} sI18n  i18n string for overlay message
	 * @return {void}
	**/
	FilterItemChart.prototype.applyOverlay = function(sI18n) {
		var sPath = this.data("sPath");
		if (sPath) {
			var sShowOverlay =  sPath + "/showChartOverlay";
			var conFigModel = this.getModel('_visualFilterConfigModel');
			conFigModel.setProperty(sShowOverlay, (sI18n ? true : false));
			if (sI18n) {
				var sOverlayMessage =  sPath + "/overlayMessage";
				conFigModel.setProperty(sOverlayMessage, sI18n);
			}
		}
	};

	return FilterItemChart;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.VisualFilterProvider') ) {
// -----------------------------------------------------------------------------
// Generates the data-model required for SmartFilter using SAP-Annotations metadata
// -----------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.VisualFilterProvider'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider",[
	"sap/ui/comp/odata/MetadataAnalyser",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"
], function(MetadataAnalyser, FilterUtil, V4Terms) {
	"use strict";
	var VisualFilterProvider = function(filter) {
		this._filter = filter;
		this._oMetadataAnalyser = new MetadataAnalyser(filter.getModel());

		this._groupList = [];
		this._groupListByName = {};
		this._groupMap = {};
		this._measureList = [];
		this._measureMap = {};
		this._dimensionMap = {};
		this._selectionFieldsLength = 0;
		this._selectionFieldsParsed = 0;
		this._annotationData = {Filters: []};
		this._allSelectionFields;

		this._initMetadata();
	};

	VisualFilterProvider.prototype._initMetadata = function() {
		var entitySet = this._filter.getEntitySet();
		var entityNameFull = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);

		this._getFieldAnnotations(entitySet, entityNameFull);

		this._getVisualFilterAnnotation(entityNameFull);
	};

	VisualFilterProvider.prototype.getVisualFilterConfig = function() {
		return this._filterConfig;
	};

	VisualFilterProvider.prototype.getMetadataAnalyser = function() {
		return this._oMetadataAnalyser;
	};

	// Group Related
	VisualFilterProvider.prototype._getFieldAnnotations = function(entitySet, entityNameFull) {
		if (!entitySet) {
			return;
		}

		var entityType = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);
		if (!entityType) {
			return;
		}

		var model = this._filter.getModel();
		var metaModel = model.getMetaModel();
		if (!entityNameFull || !metaModel) {
			return;
		}

		// Go through the field group list and build up the group map
		var groupMapByField = {};
		var groupByName = {};

		var fieldGroupList = this._oMetadataAnalyser.getFieldGroupAnnotation(entityType);
		for (var i = 0; i < fieldGroupList.length; i++) {
			var fieldGroup = fieldGroupList[i];

			var group = {
				name: fieldGroup.groupName,
				label: fieldGroup.groupLabel,
				fieldList: fieldGroup.fields
			};

			groupByName[group.name] = group;

			for (var j = 0; j < fieldGroup.fields.length; j++) {
				groupMapByField[fieldGroup.fields[j]] = group;
			}
		}


		// Get all the selection fields, if selected and not part of a group, then in the _BASIC group
		var entityDef = metaModel.getODataEntityType(entityNameFull);
		var selFieldList = entityDef[V4Terms.SelectionFields];
		var selFieldMap = {};
		if (selFieldList) {
			for (var i = 0; i < selFieldList.length; i++) {
				var selField = selFieldList[i];
				selFieldMap[selField.PropertyPath] = selField;
			}
		}

		// Go through all the fields, check if they are dimensions or measures and add them to the groups for later sorting
		var usedGroupsByName = {};
		//var entityTypeName = this._oMetadataAnalyser.removeNamespace(entityType);
		var fieldList = this._oMetadataAnalyser.getFieldsByEntityTypeName(entityType);
		for (var i = 0; i < fieldList.length; i++) {
			var field = fieldList[i];
			var name = field.name;

			var prop = metaModel.getODataProperty(entityDef, name);
			var role = prop["sap:aggregation-role"];

			if (role == "dimension") { // only add dimensions to the possible groups
				var dim = { // Dimension definition
					name: name,
					fieldInfo: field,
					propInfo: prop
				};

				// Add to group for ordering purposes, e.g. in the dialog and display order in the filterbar
				var group = groupMapByField[name];

				if (group) {
					// if the field is stored as a string, replace it with the dim structure
					for (var j = 0; j < group.fieldList.length; j++) {
						if (group.fieldList[j] == name) {
							group.fieldList[j] = dim;
							break;
						}
					}
				} else {
					var sLabel = entityDef[V4Terms.Label] ? entityDef[V4Terms.Label].String : undefined;
					var groupName = selFieldMap[name] ? "_BASIC" : (entityDef[sLabel] || entityDef.name); // _BASIC is the standard used by the smart filter bar

					var group = groupByName[groupName];
					if (!group) { // if no group, then either use the _BASIC (if field in the selection list) or fallback EntityType.
						group = {
							name: groupName,
							label: groupName == "_BASIC" ? this._filter.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE") : groupName,
							fieldList: []
						};

						groupByName[groupName] = group;
					}

					group.fieldList.push(dim);
					groupMapByField[name] = group;
				}

				usedGroupsByName[group.name] = true;
			}
		}

		// Reorder the fields by the group list
		var groupList = [];
		if (usedGroupsByName["_BASIC"]) { // Make sure _BASIC is always first
			groupList.push(groupByName["_BASIC"]);
			delete groupByName["_BASIC"];
		}

		// Preferred order based on group list  Will need to check once getting group information from annotation
		for (var i = 0; i < fieldGroupList.length; i++) {
			var groupName = fieldGroupList[i].groupName;

			if (groupName == "_BASIC") {// already accounted for
				continue;
			}

			if (usedGroupsByName[groupName]) {
				groupList.push(groupByName[groupName]);
			}

			delete groupByName[groupName];
		}

		// Now add the remaining, e.g. the entity type
		for (var groupName in groupByName) {
			if (usedGroupsByName[groupName]) {
				groupList.push(groupByName[groupName]);
			}

			delete groupByName[groupName];
		}

		// Rebuild the group by name based on the used groupNames
		groupByName = {};
		for (var i = 0; i < groupList.length; i++) {
			var group = groupList[i];
			groupByName[group.name] = group;
		}
	};

	VisualFilterProvider.prototype.getGroupList = function() {
		return this._groupList ? this._groupList : [];
	};

	VisualFilterProvider.prototype.getGroupMap = function() {
		return this._groupMap ? this._groupMap : {};
	};

	VisualFilterProvider.prototype.getMeasureMap = function() {
		return this._measureMap;
	};

	VisualFilterProvider.prototype.getDimensionMap = function() {
		return this._dimensionMap;
	};

	VisualFilterProvider.prototype.getEntityType = function(entitySet) {
		return this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(entitySet);
	};

	VisualFilterProvider.prototype._updateGroupList = function(entityFullName, entityTypePath, parentProperty, dimension) {
		var isPartOfSelectionFields = function (element) {
			return element.PropertyPath === parentProperty;
		};
		var isPartOfSelectionField;
		//when SelectionFields has no property under it in annotations, 'this._allSelectionFields' is undefined.
		if (this._allSelectionFields) {
			isPartOfSelectionField = this._allSelectionFields.filter(isPartOfSelectionFields);
		}
		isPartOfSelectionField = (isPartOfSelectionField && isPartOfSelectionField.length) ? true : false;

		var metaModel = this._filter.getModel().getMetaModel();
		var mainEntityType = metaModel.getODataEntityType(entityFullName);
		mainEntityType = mainEntityType[V4Terms.Label] ? mainEntityType[V4Terms.Label].String : mainEntityType.name;

		var updateGroup = function (groupName, context) {
			for (var key in context._groupList) {
				var group = context._groupList[key],
					dimExistsInGroup = false;

				if (group.name === groupName) {
					var fieldList = group.fieldList;
					for (var fieldKey in fieldList) {
						if (fieldList[fieldKey].name === dimension) {
							dimExistsInGroup = true;
						} else {
							continue;
						}
					}

					if (!dimExistsInGroup) {

						var entityType = metaModel.getODataEntityType(entityTypePath);
						var allProps = context._oMetadataAnalyser.getFieldsByEntityTypeName(entityTypePath);

						for (var key in allProps) {

							if (allProps[key].name === dimension) {
								var prop = metaModel.getODataProperty(entityType, allProps[key].name);

								fieldList.push({ // Dimension definition
									name: allProps[key].name,
									fieldInfo: allProps[key],
									propInfo: prop
								});
								//dimMap[allProps[key].name] = dim;
								//dimMap[allProps[key].name] = dim;
							}
						}

						/*fieldList.push({
							name: dimension
						});*/
					}
				} else {
					continue;
				}
			}
		};

		// TODO: need to take care of field group
		if (isPartOfSelectionField) {
			updateGroup('_BASIC', this);
		} else {
			updateGroup(mainEntityType, this);
		}

	};

	VisualFilterProvider.prototype._createDimensionMap = function(entitySet, entityTypePath) {
		//if (!this._dimensionMap[entitySet]) {
			var allProps,
				model = this._filter.getModel(),
				metaModel = model.getMetaModel(),
				entityType,
				dimMap = {},
				prop,
				dim,
				measure,
				measureMap = {};

			if (!metaModel) {
				return false;
			}

			entityType = metaModel.getODataEntityType(entityTypePath);
			allProps = this._oMetadataAnalyser.getFieldsByEntityTypeName(entityTypePath);

			for (var key in allProps) {

				prop = metaModel.getODataProperty(entityType, allProps[key].name);
				if (allProps[key]['aggregationRole'] === 'dimension') {

					dim = { // Dimension definition
						name: allProps[key].name,
						fieldInfo: allProps[key],
						propInfo: prop
					};
					dimMap[allProps[key].name] = dim;
					//dimMap[allProps[key].name] = dim;
				} else if (allProps[key]['aggregationRole'] === 'measure') {
					measure = {
						name: allProps[key].name,
						label: allProps[key].fieldLabel,
						fieldInfo: allProps[key],
						propInfo: prop
					};
					measureMap[allProps[key].name] = measure;
				}
			}



			if (Object.keys(dimMap).length) {
				this._dimensionMap[entitySet] = dimMap;
			}

			if (Object.keys(measureMap).length) {
				this._measureMap[entitySet] = measureMap;
			}
		/*} else {
			return false;
		}*/
	};

	VisualFilterProvider.prototype._createGroupList = function(fieldInfo, propInfo, isBasic, sGroupName) {

		var groupLabel;
		// if property is part of seelction fields then it should be in BASIC group
		if (isBasic) {
			groupLabel = this._filter.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE");
			this._addToGroupListByName('_BASIC', groupLabel, fieldInfo, propInfo);
		} else {
			//if property is part of a field group or entity type
			groupLabel = fieldInfo.groupTitle;
			this._addToGroupListByName(sGroupName, groupLabel, fieldInfo, propInfo);
		}

	};

	VisualFilterProvider.prototype._addToGroupListByName = function (groupName, groupLabel, fieldInfo, propInfo) {
		if (this._groupListByName[groupName] === undefined) {
			this._groupListByName[groupName] = [];
			this._groupListByName[groupName].push({
				name: groupName,
				label: groupLabel,//
				fieldList: []
			});

			this._groupListByName[groupName][0].fieldList.push({
				name: fieldInfo.name,
				fieldInfo: fieldInfo,
				propInfo: propInfo
			});
		} else {
			this._groupListByName[groupName][0].fieldList.push({
				name: fieldInfo.name,
				fieldInfo: fieldInfo,
				propInfo: propInfo
			});
		}
	};

	/**
	 * @private
	 * This function sets the field groups to be displayed in the visual filter dialog
	 * @param  {string} sEntityGroupName - entity type name
	 * @return {void}
	 */
	VisualFilterProvider.prototype._setGroupListForDialog = function() {
		// check if any groups exists or not
		//removed the check for BASIC as the order of groups is maintained in the
		//array returned by getFilterBarViewMetadata()
		if (Object.keys(this._groupListByName).length) {
			for (var key in this._groupListByName) {
				this._groupList.push(this._groupListByName[key][0]);
			}
		}
		var groupByName = {};
		for (var i = 0; i < this._groupList.length; i++) {
			var group = this._groupList[i];
			groupByName[group.name] = group;
		}
		this._groupMap = groupByName;
	};
	/**
	* @private
	* This function changes the order of visual filter to the order specified in the SelectionFields.
	* The mandatory filter field that is not specified in the SelectionFields will show up first.
	* @param {object} allSelectionFields - list of the SelectionFields in the annotation
	* @param {object} config - list of the visual filters in the metadata definition
	* @return {object} config - the sorted object if selectionfields are present.
	**/
	VisualFilterProvider.prototype._sortVisualFilter = function(allSelectionFields, config) {
		if (config.filterList) {
			// Sort the visual filters taking 2 consecutive elements at a time (default sort function of array)
			config.filterList.sort(function(a, b) {
				var aIndex, bIndex;
				if (allSelectionFields) {
					// Get the index (occurance) of each element in the SelectionFields
					for (var i = 0; i < allSelectionFields.length; i++) {
						// Check if the Property Path is present in SelectionFields
						if (allSelectionFields[i].PropertyPath === a.parentProperty) {
							aIndex = i;
						}
						if (allSelectionFields[i].PropertyPath === b.parentProperty) {
							bIndex = i;
						}
						if (aIndex && bIndex) {
							break;
						}
					}
				}
				// Arrange the elements based on the order of indexes (ascending). Smaller indexes follwed by bigger ones.
				// If a mandatory property that is not present in SelectionFields comes before the SelectionFiled filters.
				if ((aIndex < bIndex) || (!aIndex && a.isMandatory)) {
					return -1;
				}
				if ((aIndex > bIndex) || (!bIndex && b.isMandatory)) {
					return 1;
				}
				// Return 0 when a non-mandatory field that is not matching with SelectionFields is found.
				return 0;
			});
		}
		return config;
	};

	/**@private
	 *This function is to obtain scale factor from annotations
	 *@param  {object} oEntityType  entity object
	 *@param  {string} sAnnotationPath  Annotation path containing scale factor
	 *@return {string} [scale factor value]
	 */

	VisualFilterProvider.prototype._getScaleFactor = function(oEntityType,sAnnotationPath){
		if (!sAnnotationPath) {
			return "";
		}
		//check if property has a Data point defined in annotation
		if (sAnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") > -1) {
			sAnnotationPath =  sAnnotationPath.toString();
			if (sAnnotationPath.charAt(0) === "@"){
				sAnnotationPath = sAnnotationPath.slice(1);
			}
			var oElem = oEntityType[sAnnotationPath];
			if (oElem && oElem.ValueFormat && oElem.ValueFormat.ScaleFactor) {
				return FilterUtil.getPathOrPrimitiveValue(oElem.ValueFormat.ScaleFactor);
			} else {
				return "";
			}
		}
	};

	/**@private
	 *This function is to obtain scale factor from annotations
	 *@param  {object} oEntityType  entity object
	 *@param  {string} sAnnotationPath  Annotation path containing scale factor
	 *@return {string} [scale factor value]
	 */

	VisualFilterProvider.prototype._getNumberOfFractionalDigits = function(oEntityType,sAnnotationPath){
		if (!sAnnotationPath) {
			return "";
		}
		//check if property has a Data point defined in annotation
		if (sAnnotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") > -1) {
			sAnnotationPath =  sAnnotationPath.toString();
			if (sAnnotationPath.charAt(0) === "@"){
				sAnnotationPath = sAnnotationPath.slice(1);
			}
			var oElem = oEntityType[sAnnotationPath];
			//return oElem.ValueFormat.ScaleFactor.Decimal;
			if (oElem && oElem.ValueFormat && oElem.ValueFormat.NumberOfFractionalDigits) {
				return FilterUtil.getPathOrPrimitiveValue(oElem.ValueFormat.NumberOfFractionalDigits);
			} else {
				return "";
			}
		}
	};

	/**
	 * @private
	 * This function read the filter annotation for visual filter and set the filter configuration
	 * @param  {string} sEntityNameFull full name of the entity
	 * @return {void}
	 */
	VisualFilterProvider.prototype._getVisualFilterAnnotation = function(sEntityNameFull) {
		var model = this._filter.getModel();
		var metaModel = model.getMetaModel();
		if (!sEntityNameFull || !metaModel) {
			return null;
		}
		var entityType = metaModel.getODataEntityType(sEntityNameFull);
		if (!entityType) {
			return null;
		}
		this._allSelectionFields = entityType[V4Terms.SelectionFields];
		////USING getFilterBarViewMetadata() to read the filter annotation for visual filter and set the filter configuration
		var allGroups = this._filter._smartFilterContext.getFilterBarViewMetadata(),
			isFilterable, filterRestriction, isMandatory, sGroupName, isRequired, valueList, currentPropName, isSelected, aFields = [],
			fieldInfo,propInfo;
		for (var oGroup in allGroups) {
			aFields = allGroups[oGroup].fields;
			sGroupName = allGroups[oGroup].groupName;
			for (var oProperty in aFields) {
				isFilterable = aFields[oProperty].filterable;
				filterRestriction = aFields[oProperty].filterRestriction;
				//sap:filter-restriction : undefined (default = "multi-value"), filterRestriction = "auto"
				//sap:filter-restriction : "multi-value", filterRestriction = "multiple"
				//sap:filter-restriction: "single-value", filterRestriction = "single"
				//sap:filter-restriction: "interval", filterRestriction = "interval"
				if (filterRestriction === "auto") {
					filterRestriction = "multiple";
				}
				if (filterRestriction !== "interval" && isFilterable !== "false") {
					fieldInfo = aFields[oProperty];
					currentPropName = aFields[oProperty].fieldName;
					isMandatory = aFields[oProperty].isMandatory;
					isRequired = aFields[oProperty].requiredFilterField;
					for (var propertyFields in aFields[oProperty]) {
						//checking if property has valuelist annotation defined along with a PV
						if (propertyFields.indexOf(V4Terms.ValueList) > -1 && aFields[oProperty][propertyFields].PresentationVariantQualifier) {
							isSelected = (sGroupName === "_BASIC") || isMandatory || isRequired;
							propInfo = metaModel.getODataProperty(entityType, currentPropName);
							valueList = aFields[oProperty][propertyFields];
							this._createGroupList(fieldInfo, propInfo, isSelected, sGroupName);
							this._getAnnotationFromValueList(sEntityNameFull, isSelected, valueList, currentPropName, filterRestriction, isMandatory);
						}
					}
				}
			}
		}
		this._setGroupListForDialog();
		this._filterConfig = this._getConfig(this._annotationData);
	};
	/* 	Success Callback for valueList promise
		Checks if valueList and presentationVariantQaulifier exists
		then and only then add chart to the config
	*/
	VisualFilterProvider.prototype._getAnnotationFromValueList = function (entityFullName, isSelected, valueListProperties, parentProperty, filterRestriction, bIsMandatoryProp, entityType) {
		var sPath = entityFullName;
		if (valueListProperties !== undefined) {
			//valueListProperties = valueListProperties[""] ? valueListProperties[""] : undefined;

			var annotationData = {Filters: []},
				presentationVariantQualifierString = FilterUtil.readProperty(valueListProperties,"PresentationVariantQualifier.String"),
				collectionPath = FilterUtil.readProperty(valueListProperties,"CollectionPath"),
				parameters = FilterUtil.readProperty(valueListProperties,"Parameters"),
				collectionPathString = FilterUtil.readProperty(collectionPath,"String"),
				sPath = this.getEntityType(collectionPathString),
				model = this._filter.getModel(),
				metaModel = model.getMetaModel(),
				entityTypeCollectionPath = metaModel.getODataEntityType(sPath);

			if (presentationVariantQualifierString) {
				var sQualifier = presentationVariantQualifierString,
					presentationVariantAnnotation = this._oMetadataAnalyser.getPresentationVariantAnnotation(sPath, sQualifier),
					annotationObject = {},
					dimension = FilterUtil.readProperty(presentationVariantAnnotation, "chartAnnotation.annotation.Dimensions.0.PropertyPath");
				if (dimension) {
					this._createDimensionMap(collectionPath.String, sPath);
					this._updateGroupList(entityFullName, sPath, parentProperty, dimension);

					// TODO: Saurabh, below function acts as a parser bewteen here and  _getConfig()
					// maybe change logic in _getConfig() to parse presentationVariant Object and form config
					// Needs to be done
					annotationObject = this._createConsumeableObjectFromAnnotation(presentationVariantAnnotation, collectionPath, isSelected, parameters, parentProperty, filterRestriction, bIsMandatoryProp, entityTypeCollectionPath);
					annotationData.Filters.push(annotationObject);
					this._annotationData.Filters.push(annotationObject);
				}
			}
		}
	};
	/**
	 * @private
	 * This function creates a default Sort Order for the charts, when sort order is not given in the annotations
	 * For Bar/Donut - Default sort order is measure descending
	 * For Line - 	If dimension field is DateTime, default sort order is dimension descending
	 * 				If dimension field is non DateTime, default sort order is dimension ascending
	 * @param  {string} sChartType chart type
	 * @param  {string} sMeasure Measure of the chart
	 * @param  {string} sDimension Dimension of the chart
	 * @param  {boolean} bDimensionIsDateTime whether field is date time or not
	 * @return {object} SortOrder object with property Field and Descending
	 */
	VisualFilterProvider.prototype._createSortObject = function(sChartType, sMeasure, sDimension, bDimensionIsDateTime) {
		var sSortOrderProperty = sMeasure,
		bSortOrderDescending = true;
		if (sChartType === "Line") {
			sSortOrderProperty = sDimension;
			if (!bDimensionIsDateTime) {
				// if type of dimension is not date time
				// then sort order is ascending, else it is descending
				bSortOrderDescending = false;
			}
		}
		//To include Field and Descending  Property to sortOrder
		var oSortObject = {};
		oSortObject.Field = {
			"String" : sSortOrderProperty
		};
		oSortObject.Descending = {
			"Boolean" : bSortOrderDescending
		};
		return oSortObject;
	};
	/**
	 * @private
	 * This function returns annotationObject with a new property SortOrder
	 * @param  {object} oPresentationVariantAnnotation  PresentationVariantAnnotation from annotation
	 * @param  {string} sMeasure Measure of the chart
	 * @param  {string} sDimension Dimension of the chart
	 * @param  {string} sChartType chart type
	 * @param  {object} oAnnotationObject objec to be modified
	 * @param  {boolean} bDimensionIsDateTime whether field is date time or not
	 * @return {object} returns annotationObject with property SortOrder
	*/
	VisualFilterProvider.prototype._createSortOrderFromAnnotation = function(oPresentationVariantAnnotation, sMeasure, sDimension, sChartType, oAnnotationObject, bDimensionIsDateTime) {
		/*
		* As per requirements
		* Bar/Donut - Should sort on measure descending, unless order is provided in annotaions
		* Line (time based) - Should always sort on dimension descending (Display should be ascending), sort order in annotations should be ignored in this case
		* Line (non-time based) - Should sort on dimension ascending, unless order is provide in annotations
		*/

		oAnnotationObject.SortOrder = [];
		var aSortOrderFields = oPresentationVariantAnnotation.annotation.SortOrder,
		bSortOrderDescending,
		sSortOrderProperty;
		// if annotation has sort order
		if (aSortOrderFields !== undefined && aSortOrderFields.length) {
			for (var i = 0; i < aSortOrderFields.length; i++) {
				var sSortOrderField = FilterUtil.readProperty(aSortOrderFields, i + ".Property.PropertyPath"),
				sIsDescending = FilterUtil.readProperty(aSortOrderFields, i + ".Descending.Bool");
				if (sSortOrderField && sIsDescending) {
					if (sChartType === "Line") {
						if (!bDimensionIsDateTime) {
							// if chart is line and dimension is not time based
							// then sort should be on dimension and order should be taken from annotations
							// sort order for line chart with time based dimension is defaulted to dimension descending later
							// via _createSortObject
							if (sSortOrderField === sDimension) {
								sSortOrderProperty = sDimension;
								bSortOrderDescending = !(sIsDescending === "false");
								break;
							}
						}
					} else if (sSortOrderField === sMeasure) {
						// if chart is not line it should always sort on measure
						// and order should be taken from annotations
						sSortOrderProperty = sMeasure;
						bSortOrderDescending = !(sIsDescending === "false");
						break;
					}
				}
			}
			// if sort order property is defined then only add sort
			// else default sort order
			if (sSortOrderProperty) {
				var oSortObject = {};
				oSortObject.Field = {
					"String": sSortOrderProperty
				};
				oSortObject.Descending = {
					"Boolean" : bSortOrderDescending
				};
				oAnnotationObject.SortOrder.push(oSortObject);
			}
		}
		// if sort order is not defined in annotations
		// or sort order is defined in annotations but chart sort order could not be determined
		// or Chart is line and dimension is time based (in this case only descending sort makes sense)
		// then sort order should be defaulted
		if (!oAnnotationObject.SortOrder.length) {
			oAnnotationObject.SortOrder.push(this._createSortObject(sChartType, sMeasure, sDimension, bDimensionIsDateTime));
		}

		return oAnnotationObject;
	};
	/**
	*Function returns the chart Qualifier
	*params {presentationVariantAnnotation} Presentation Variant Annottaion object
	*return {sAnnotationPath} String value of the chart Qualifier
	*/
	VisualFilterProvider.prototype._getChartQualifier = function(presentationVariantAnnotation) {
		var aVisualizations = presentationVariantAnnotation.annotation.Visualizations, sAnnotationPath;
		sAnnotationPath = aVisualizations ? (aVisualizations[0].AnnotationPath).substring(1) : undefined;
		return sAnnotationPath;
	};
	/**
	*Function to check if dimension is date time or not
	*params {string} Entity set of the property
	*params {string} dimension in the entity set
	*return {sAnnotationPath} String value of the chart Qualifier
	*/
	VisualFilterProvider.prototype._IsDimensionDateTime = function(sEntitySet, sDimension) {
		var oDimensionMap = this.getDimensionMap(),
		oDimensionFieldInfo = FilterUtil.readProperty(oDimensionMap, sEntitySet + "." + sDimension + ".fieldInfo"),
		bDimensionIsDateTime = false,
		sFieldSemantics;
		if (oDimensionFieldInfo.type === "Edm.DateTime" || oDimensionFieldInfo.type === "Edm.Time") {
			bDimensionIsDateTime = true;
		} else {
			// check V4 and V2. If V2 is present then it is directly converted to V4
			sFieldSemantics = oDimensionFieldInfo[V4Terms.CalendarYear] || oDimensionFieldInfo[V4Terms.CalendarYearMonth] || oDimensionFieldInfo[V4Terms.CalendarYearMonthDay];
			if (sFieldSemantics && sFieldSemantics.Bool && sFieldSemantics.Bool === "true") {
				bDimensionIsDateTime = true;
			}
		}
		return bDimensionIsDateTime;
	};
	/*
		Function to parse new annotation format
		and create object similar to experimental annotation so that it can be consumed here.
		TODO: Saurabh, It would be good to change logic in _getConfig() to parse the presentationVariantAnnotation object
		and form the config.
	*/
	VisualFilterProvider.prototype._createConsumeableObjectFromAnnotation = function (presentationVariantAnnotation, collectionPath, isSelected, parameters, parentProperty, filterRestriction, bIsMandatoryProp, entityType) {
		//commenting the unused variables due to the eslint issue
		//	var annotationData = {Filters: []};
		//	var allMeasureFields = presentationVariantAnnotation.chartAnnotation.mesaureFields;
		//	var allDimensionFields = presentationVariantAnnotation.chartAnnotation.dimensionFields;
		var annotationObject = {},
		sEntitySet = this._oMetadataAnalyser.getEntitySetNameFromEntityTypeName(this.getEntityType(collectionPath.String)),
		// TODO: Saurabh check if there is a chart then proceed
		parts = presentationVariantAnnotation.chartAnnotation.annotation.ChartType.EnumMember.split("/"),
		chartType = parts[parts.length - 1],
		bDimensionIsDateTime;

		if (chartType) {
			annotationObject.Type = {
				"String": chartType
			};
		}

		// assuming there will be only one dimension
		var dimension = FilterUtil.readProperty(presentationVariantAnnotation, "chartAnnotation.annotation.Dimensions.0.PropertyPath");

		// assuming there will be only one measure
		var measure = FilterUtil.readProperty(presentationVariantAnnotation, "chartAnnotation.annotation.Measures.0.PropertyPath");

		if (measure && dimension) {
			bDimensionIsDateTime = this._IsDimensionDateTime(sEntitySet, dimension);
			annotationObject.dimensionFieldIsDateTime = bDimensionIsDateTime;
			//To add the new propert SortOrder in annotationObject
			annotationObject = this._createSortOrderFromAnnotation(presentationVariantAnnotation, measure, dimension, chartType, annotationObject, bDimensionIsDateTime);
		}

		var sDataPoint = "";
		if (measure && presentationVariantAnnotation.chartAnnotation.measureAttributes[measure]) {
			sDataPoint = presentationVariantAnnotation.chartAnnotation.measureAttributes[measure].dataPoint;
		}

		var scaleFactor = this._getScaleFactor(entityType, sDataPoint);
		var numberOfFractionalDigits = this._getNumberOfFractionalDigits(entityType, sDataPoint);
		var chartQualifier = this._getChartQualifier(presentationVariantAnnotation);

		annotationObject.scaleFactor = {
			"String": scaleFactor
		};
		annotationObject.numberOfFractionalDigits = {
			"String": numberOfFractionalDigits
		};
		annotationObject.chartQualifier = chartQualifier;
		//adding filterRestiction property to annotationObject
		if (filterRestriction){
			annotationObject.filterRestriction = {
			"String" : filterRestriction
			};
		} else {
			annotationObject.filterRestriction = {
			"String" : undefined
			};
		}

		if (dimension) {
			annotationObject.Dimensions = [];
			var dimObject = {};

			dimObject.Field = {
				"String": dimension
			};

			annotationObject.Dimensions.push(dimObject);
		}

		if (measure) {
			annotationObject.Measures = [];
			var measureObject = {};

			measureObject.Field = {
				"String": measure
			};

			annotationObject.Measures.push(measureObject);
		}

		if (isSelected) {
			annotationObject.Selected = {
				"Boolean" : "true"
			};
		} else {
			annotationObject.Selected = {
				"Boolean" : "false"
			};
		}

		if (collectionPath) {
			annotationObject.CollectionPath = collectionPath;
		}

		if (parameters && parameters.length) {
			annotationObject.InParameters = [];

			for (var key in parameters) {
				var param = parameters[key] ? parameters[key] : undefined,
					recordType = (param && param.RecordType) ? param.RecordType : undefined,
					valueListProperty = (param.ValueListProperty && param.ValueListProperty.String) ? param.ValueListProperty.String : undefined,
					localDataProperty = (param.LocalDataProperty && param.LocalDataProperty.PropertyPath) ? param.LocalDataProperty.PropertyPath : undefined;

				if (param && recordType && valueListProperty && localDataProperty) {
					// take the parameter where valueListproperty matches the dimension
					if (annotationObject.OutParameter === undefined && (recordType === V4Terms.ValueListParameterOut || recordType === V4Terms.ValueListParameterInOut) && valueListProperty === dimension && localDataProperty === parentProperty) {
						annotationObject.OutParameter = localDataProperty;
						//break;
					}

					if (localDataProperty !== parentProperty && (recordType === V4Terms.ValueListParameterIn || recordType === V4Terms.ValueListParameterInOut)) {
						var metaModel 		= this._filter.getModel().getMetaModel(),
							entityFullName 	= this.getEntityType(collectionPath.String),
							entityDef 		= metaModel.getODataEntityType(entityFullName),
							entityProperty 	= metaModel.getODataProperty(entityDef, valueListProperty);

						if (entityProperty['sap:filterable'] === undefined || entityProperty['sap:filterable'] == "true") {
							annotationObject.InParameters.push({
								localDataProperty: localDataProperty,
								valueListProperty: valueListProperty
							});
						} else {
							jQuery.sap.log.error('IN Parameter valueListProperty: ' + valueListProperty + ' is not sap:filterable');
						}
					}
				}
			}

			if (annotationObject.InParameters.length === 0) {
				annotationObject.InParameters = undefined;
			}
		}

		if (parentProperty) {
			annotationObject.ParentProperty = parentProperty;
		}

		annotationObject.isMandatoryProperty = bIsMandatoryProp;

		return annotationObject;
	};
	VisualFilterProvider.prototype._getConfig = function(annotationData) {
		var config = {filterList: []};
		if (!annotationData) {
			return config;
		}

		// Convert into the configuration format for the Visual Filter Bar
		var filterByDimName = {};
		var filterByParentPropName = {};
		var filterList = annotationData.Filters;
		for (var i = 0; i < filterList.length; i++) {
			var filter = filterList[i];

			var parentProperty = filter.ParentProperty;

			var dimField = filter.Dimensions[0].Field.String;
			var entitySet = filter.CollectionPath.String;
			var dim = this._dimensionMap[entitySet][dimField];
			if (!dim) {
				jQuery.sap.log.error("Unknown Dimension :" + dimField);
				continue;
			}

			var measureField = filter.Measures[0].Field.String;
			var measure = this._measureMap[entitySet][measureField];
			if (!measure) {
				jQuery.sap.log.error("Unknown Measure :" + measureField);
				continue;
			}

			var dispField = dim.fieldInfo.description; // Use the description/sap:text annotation to determine the display value for the field.  E.g. Want to display "Sales Northern Region", not "100-00010"
			if (!dispField) {
				dispField = dimField; // if no display field, just use the technical field as a fallback
			}

			if (!filterByDimName[dimField]) {
				filterByDimName[dimField] = [];
			}

			if (!filterByParentPropName[parentProperty]) {
				filterByParentPropName[parentProperty] = [];
			}

			var configObject = {
				type: filter.Type.String,
				selected: filter.Selected.Boolean == "true",
				dimension: { // for now only supporting a single dimension (although the annotations allow for a collection)
					field: dimField,
					fieldDisplay: dispField
				},
				measure: { // for now only supporting a single measure (although the annotations allow for a collection)
					field: filter.Measures[0].Field.String
				},
				sortOrder : filter.SortOrder,
				scaleFactor : filter.scaleFactor.String,
				numberOfFractionalDigits : filter.numberOfFractionalDigits.String,
				chartQualifier : filter.chartQualifier,
				dimensionFieldIsDateTime: filter.dimensionFieldIsDateTime
			};

			configObject.collectionPath = filter.CollectionPath.String;
			configObject.outParameter = filter.OutParameter;
			configObject.inParameters = filter.InParameters;
			configObject.parentProperty = filter.ParentProperty;

			//adding filterRestriction property to configObject
			configObject.filterRestriction = filter.filterRestriction.String;

			//adding required-in-field property to configObject
			configObject.isMandatory = filter.isMandatoryProperty;

			filterByParentPropName[parentProperty].push(configObject);
			filterByDimName[dimField].push(configObject);
		}
		// Now add the filter to the config's filterList
		// Special note: groups determine the 1st level order of the filters.
		// E.g. If ordered in the VisualFilterSet as A B C, and B is part of the 1st group, then the order will show like: B A C
		// The second level ordering is based on the order within the VisualFilterSet
		var usedGroupsByName = {};
		for (var i = 0; i < this._groupList.length; i++) {
			var group = this._groupList[i];
			for (var j = 0; j < group.fieldList.length; j++) {
				var field = group.fieldList[j];
				var filterList = filterByParentPropName[field.name]; // One dimension can have multiple filters

				if (!filterList) {// Then no visual filters defined for that dimension
					continue;
				}

				usedGroupsByName[group.name] = true;
				for (var k = 0; k < filterList.length; k++) {
					config.filterList.push(filterList[k]);
				}
			}
		}

		// Remove unused groups
		for (var i = this._groupList.length - 1; i >= 0; i--) {
			var group = this._groupList[i];
			if (usedGroupsByName[group.name]) {
				continue;
			}

			// Unused
			this._groupList.splice(i, 1);
			delete this._groupMap[group.name];
		}
		config = this._sortVisualFilter(this._allSelectionFields, config);
		return config;
	};

	return VisualFilterProvider;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController') ) {
/* global $ */
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.personalization.Util'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterType'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController",[
		"sap/ui/base/EventProvider",
		"sap/ui/comp/personalization/Util",
		"sap/ui/table/AnalyticalTable",
		"sap/ui/core/mvc/Controller",
		"sap/ui/model/FilterType",
		"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
    function(EventProvider, PersonalizationControllerUtil, AnalyticalTable, Controller, FilterType, FilterUtil) {
		"use strict";
		var eventProvider = new EventProvider();

		var tController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.DetailController", {
			setState: function(oState) {
				var me = this;
				this.oState = oState;
				this._enableExpandByFilter = true;
				this._enableUpdateExpandLevelInfo = false;
				
				var smartTable = this.oState.oSmartTable;
				var table = smartTable.getTable();
				table.attachEvent("_rowsUpdated", function(ev) {
					if (me.oState.oSmartChart) {
						me._updateRows("_rowsUpdated");
					}
				});

				var oComponent = this.oState.oController.getOwnerComponent();
				//Default to filter behavior instead of highlight
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/autoHide', oComponent.getAutoHide() ? "filter" : "highlight");

				smartTable.attachInitialise(this._onSmartTableInit, this);
				smartTable.attachBeforeRebindTable(this._onBeforeRebindTable, this);

				// Since the SmartTable in this detail area is not directly connected to the SmartFilterBar, we need to intercept some of the regular events which
				// would cause an overlay to show on the SmartTable and simulate a direct connection.
				/*var origTableShowOverlay = this.oState.oSmartTable._showOverlay;
				this.oState.oSmartTable._showOverlay = function() {
					origTableShowOverlay.apply(me.oState.oSmartTable, arguments);
					smartTable._showOverlay.apply(smartTable, arguments);
				};*/
			},
			_onSmartTableInit: function() {
				var smartTable = this.oState.oSmartTable,
					toolbar = smartTable.getCustomToolbar(),
					oToolBarcontent = toolbar.getContent(),
					nSettingsLength ;

				//Adding view switch button to smart table toolbar
				//BUttons added here as opposed to XML because of maintaining their position in toolbar
				if (this.oState._pendingTableToolbarInit) {
					toolbar.insertContent(this.oState.alr_viewSwitchButtonOnTable, oToolBarcontent.length);
				}

				// Add to the SmartTable's toolbar to the left of the settings button.
				if ( this.oState._pendingTableToolbarInit ){
						// this block gets the position of the eye icon in the toolbar i.e just before the settins icon
						for (var i = 0; i < oToolBarcontent.length ;  i++) {
							if (oToolBarcontent[i].mProperties.text === "Settings") {
								nSettingsLength = i ;
                                                        }
						}
						toolbar.insertContent(this.oState._autoHideToggleBtn, nSettingsLength);
				}
				delete this.oState._pendingTableToolbarInit;

				//Disable the toolbars once search is triggered
				this.oState.oSmartTable.attachShowOverlay(function(oEvent){
					this.oState.oSmartTable.getCustomToolbar().setEnabled(!oEvent.getParameter("overlay").show);
				}, this);
			},
			_onBindingDataReceived: function() {
				var table = this.oState.oSmartTable.getTable();

				// check if table is analytical
				if (table instanceof AnalyticalTable) {
					// new data has arrived, expand if needed
					this._expandByFilter("bindingDataReceived");
				}
				if (!this.isFilter() && this.oState.oSmartChart ) {
					this._applyParamsToTableAsHighlight("bindingDataReceived");
				}
			},
			/**
			 * Called before rebinding table
			 * @param  {Object} oEvent Event Object
			 */
			_onBeforeRebindTable: function(oEvent) {
				var variant = this.oState.oSmartTable.fetchVariant(),
					lastVariant = variant,
					changeObject = {};
				if (!variant) {
					return;
				}
				var oTemplatePrivateModel = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				//Ignore chart selections when there are fresh filters from SmartFilterBar
				var _ignoreChartSelections = oTemplatePrivateModel.getProperty('/alp/_ignoreChartSelections');
				//To apply chart selections on the table without using _applyParamToTableAsFilters()
				if (this.isFilter() && this.oState.oSmartChart && !_ignoreChartSelections) {
					this._applyChartSelectionOnTableAsFilter(oEvent);
				}

				// Update the chart with the personalization state
				// Get the list of grouped columns
				var groupList = [];
				var colList = this.oState.oSmartTable.getTable().getColumns();
				for (var i = 0; i < colList.length; i++) {
					var col = colList[i];
					//getGrouped is only available for Analytical Table
					if (col.getGrouped && col.getGrouped()) {
						groupList.push(col.getLeadingProperty ? col.getLeadingProperty() : PersonalizationControllerUtil.getColumnKey(col));
					}
				}

				this._updateExpandLevelInfo(groupList);

				var sortList = [];
				if (variant.sort && variant.sort.sortItems) {
					for (var i = 0; i < variant.sort.sortItems.length; i++) {
						var isDescending = variant.sort.sortItems[i].operation === "Descending" ? true : false;
						sortList.push(new sap.ui.model.Sorter(variant.sort.sortItems[i].columnKey, isDescending));
					}
				} else if (!lastVariant.sort) { // check if last variant had sort, if not -> all sort removed from table
					changeObject.allTableSortRemoved = true;
				}
				//Reset _ignoreChartSelections so SmartChart slection is not ignored during Table personalization change
				oTemplatePrivateModel.setProperty('/alp/_ignoreChartSelections',false);

				//Make sure views with paramters are working and change the tableBindingPath to the pattern parameterSet(params)/resultNavProp
				if (this.oState.oSmartFilterbar && this.oState.oSmartFilterbar.getAnalyticBindingPath && this.oState.oSmartFilterbar.getConsiderAnalyticalParameters()) {
					//catching an exception if no values are yet set.
					//TODO: This event actually shoudn't be called before mandatory fields are populated
					try {
						var sAnalyticalPath = this.oState.oSmartFilterbar.getAnalyticBindingPath();
						if (sAnalyticalPath) {
							this.oState.oSmartTable.setTableBindingPath(sAnalyticalPath);
						}
					} catch (e) {
						jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
					}
				}

				//Setting the provideTotalResultSize in binding parameters to improve performance for Analytical Table
				if (this.oState.oController.getOwnerComponent().getModel().getDefaultCountMode() === "None" && this.oState.oSmartTable._isAnalyticalTable){
					oEvent.mParameters.bindingParams.parameters.provideTotalResultSize = false;
					this.oState.oSmartTable.setShowRowCount(false);
				}

				//Call controller extension
				this.oState.oController.onBeforeRebindTableExtension(oEvent);
			},
			///////////////////////
			// EVENT: TableChange
			///////////////////////
			attachTableChange: function(oData, fnFunction, oListener) {
				return eventProvider.attachEvent("TableChange", oData, fnFunction, oListener);
			},
			detachTableChange: function(fnFunction, oListener) {
				return eventProvider.detachEvent("TableChange", fnFunction, oListener);
			},
			/**
			 * Checks and confirm if autoHide mode is set for filter, if it is set for highlight then it will return false
			 * @return {Boolean} true for filter, false for highlight
			 */
			isFilter: function() {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				return oTemplatePrivate.getProperty("/alp/autoHide") === "filter";
			},
			applyParamsToTable: function() {
				// SmartChart has addtional filters , added to SmartTable in _onBeforeRebindTable
				this.oState.oController.getOwnerComponent().getModel("_templPriv").setProperty('/alp/_ignoreChartSelections', false);
				this.oState.oSmartTable.rebindTable();
			},
			_getBindingProperty: function(binding, name) {
				if (binding.getProperty) {
					return binding.getProperty(name);
				} else {
					var propList = binding.oEntityType.property;
					for (var i = 0; i < propList.length; i++) {
						if (propList[i].name == name) {
							return propList[i];
						}
					}
					return null;
				}
			},
			_getPageFilters: function(oBinding) {
				var pageFilterList = this.oState.oSmartFilterbar.getFilters();

				for (var i = 0; i < pageFilterList.length; i++) {
					// in case there are more than one value in the filter
					// or the filter property is sap:filter-restriction="multi-value"
					if (pageFilterList[i].aFilters !== undefined) {

						var filterList = pageFilterList[i].aFilters;

						for (var j = 0; j < filterList.length; j++) {
							var filter = filterList[j];
							var name = filter.sPath;

							// Check if the filter exits
							if (!oBinding.getProperty(name)) {
								jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
								continue;
							}

							filter.sPath = name;
						}
					} else {
						// in case property with sap:filter-restriction="single-value" is the only value in the filter
						// if there are multiple properties with sap:filter-restriction="single-value" then it goes to if condition above
						var filter = pageFilterList[i];
						var name = filter.sPath;

						// Check if the filter exits
						if (!oBinding.getProperty(name)) {
							jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
							continue;
						}

						filter.sPath = name;

					}
				}

				return pageFilterList;
			},
			_applyParamsToTableAsHighlight: function(updateType) {
				if (!this.oState) {
					return;
				}
				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}
				var paramList = this._getSelParamsFromChart(chart);
				var dimNameList = chart.getVisibleDimensions();
				var lastSelected = this.oState.oSmartChart._lastSelected;
				var table = this.oState.oSmartTable.getTable();
				var binding = this._getTableBinding(table);
				if (!binding) { // if columns haven't been choosen then binding is undefined
					jQuery.sap.log.error("No table binding to apply the selection(s) to");
					return;
				}

				// get only those with actual binding values, filter out those without matching properties
				var paramListFiltered = [];
				for (var i = 0; i < paramList.length; i++) {
					var param = paramList[i];

					var paramMap = {};
					for (var name in param) { // all parameters must match
						// parameter must exist in the binding and the name must be in the dimension list
						if (dimNameList.indexOf(name) == -1 || !this._getBindingProperty(binding, name)) {
							continue;
						}

						paramMap[name] = param[name];
					}

					paramListFiltered.push(paramMap);
				}

				//Add drill down filters for highlight
				var drillFiltersFromChart = this.oState.oSmartChart.getDrillStackFilters();
				drillFiltersFromChart.forEach(function(oFilter) {
					var name = oFilter.sPath,
						obj = {};
					obj[name] = oFilter.oValue1;
					paramListFiltered.push(obj);
				});


				//Creating map from paramFilterList array.
				var paramMap = {};
				paramListFiltered.forEach(function(obj){
					for (var key in obj){
						//Checking for existing key in the map if not exist then add it and value is the array of 
						//all the value of same filter name e.g. paramListFiltered = [{'CompanyCode':'EASI'},{'CompanyCode':'0001'}]
						//gets Converted to paramMap = {CompanyCode = ['EASI','0001']}
						if (!paramMap.hasOwnProperty(key)){
							paramMap[key] = [obj[key]];
						} else {
							paramMap[key].push(obj[key]);
						}
					}
				});

				this._paramListFiltered = paramListFiltered;
				this._lastSelected = lastSelected;
				this._paramMap = paramMap;

				this._updateRows(updateType);
			},
			_expandByFilter: function(updateType) {
				if (!this._enableExpandByFilter) {
					return;
				}

				var table = this.oState.oSmartTable.getTable();

				var binding = this._getTableBinding(table);
				if (binding && this._lastBinding != binding) {
					var me = this;

					binding.attachDataReceived(this._onBindingDataReceived, this);
					binding.attachEvent("change", function(ev) {
						if (me._expandingProgrammatically) {// then expansion triggered through the chart selection or data load, keep the current mode
							return;
						}

						var reason = ev.getParameter("reason");
						if (reason == "expand" ||  reason == "collapse") {// User triggered expansion, so don't sync Chart+Table
							me._inUserChartSelectMode = false;
						}
					});
					this._lastBinding = binding;
				}

				// no way to distinquish rowUpdate events that are data driven or user driven, but these must be distinquished in order to properly handle setting the first visible row of the table.
				// For example, the two events of end user scrolling, or the expansion completion cannot be distinguished.  But the first visible row should only be set if the expansion operation has completed (may require a backend call).
				if (updateType == "selection" || updateType == "bindingDataReceived") {
					this._firstVisibleRelevantEventTS = new Date().getTime();
				}

				if (updateType == "selection") {// User triggered selection in the chart, so sync Chart+Table
					this._inUserChartSelectMode = true;
				}

				if (!this._inUserChartSelectMode) {
					return;
				}

				var rowList = this._getTableRows();
				for (var i = 0; i < rowList.length; i++) {
					var row = rowList[i];

					// see if the row should be expanded
					var bindingCtxt = row.getBindingContext();
					if (!bindingCtxt) {
						continue;
					}

					var rowIndex = table.getFirstVisibleRow() + i;
					if (this._isRowHighlighted(bindingCtxt.getObject())) { // Row should be expanded
						if (table.isExpanded(rowIndex)) {// already expanded
							continue;
						}

						// Row should be expanded and is currently not expanded.
						if (!row._bHasChildren) {// not expandable
							continue;
						}

						if (!binding.findNode(rowIndex)) {// Not ready yet
							continue;
						}

						this._expandingProgrammatically = true;
						table.expand(rowIndex);
						this._expandingProgrammatically = false;
					} else { // Row should be collapsed
						if (!table.isExpanded(rowIndex)) {// already collapsed
							continue;
						}

						// Row should be collapsed and is currently not expanded.
						if (!row._bHasChildren) {// not collapsible
							continue;
						}

						if (!binding.findNode(rowIndex)) {// Not ready yet
							continue;
						}

						this._expandingProgrammatically = true;
						table.collapse(rowIndex);
						this._expandingProgrammatically = false;
					}
				}

				// determine the first visible row, find the first highlightable row
				this._updateFirstVisibleRow(updateType);
			},
			_updateFirstVisibleRow: function(updateType) {
				var table = this.oState.oSmartTable.getTable();

				var binding = this._getTableBinding(table);
				var count = binding.getTotalSize();
				if (count == 0 || (new Date().getTime() - this._firstVisibleRelevantEventTS) > 250) {
					return;
				}

				var table = this.oState.oSmartTable.getTable();
				if (updateType == "selection" && (!this._paramListFiltered || this._paramListFiltered.length == 0)) { // deselect all
					table.setFirstVisibleRow(0);
					return;
				}

				var bindingCtxtList = binding.getContexts(0, count);
				for (var i = 0; i < bindingCtxtList.length; i++) {
					// see if the row should be expanded
					var rowObj = bindingCtxtList[i].getObject();

					if (!this._isRowHighlighted(rowObj)) {
						continue;
					}

					if (this._lastSelected && !this._rowMatch(this._lastSelected, rowObj)) {// if a lastSelected, then use that to determine the firstVisibleRow
						continue;
					}

					var lastIndex = table.getFirstVisibleRow();
					if (updateType == "selection" || this.isFilter()) {
						table.setFirstVisibleRow(i);
					} else {
						if (i > lastIndex) {
							table.setFirstVisibleRow(i);
						}
					}

					break;
				}
			},
			_rowMatch: function(selObj, rowObj) {
				for (var name in selObj) {
					if (name.indexOf("__") != -1) {
						continue;
					}

					if (!rowObj.hasOwnProperty(name)) {// support for node level highlighting
						continue;
					}

					if (selObj[name] != rowObj[name]) {
						return false;
					}
				}

				return true;
			},
			_updateExpandLevelInfo: function(groupList) {
				if (!this._enableUpdateExpandLevelInfo) {// New design: don't autoexpand, keep code in case this is re-enabled
					return false;
				}

				var oTable = this.oState.oSmartTable.getTable();
				if (!oTable.getNumberOfExpandedLevels) {
					return false;
				}

				var oBinding = oTable.getBinding();
				if (!oBinding) {
					return false;
				}

				var expandLevels = groupList.length;

				var bLevelUpdate = false;
				if (expandLevels >= oBinding.aMaxAggregationLevel.length) {
					bLevelUpdate = true;
					expandLevels = oBinding.aMaxAggregationLevel.length - 1; // else null pointer exception
					this.wasAtMaxLevel = true;
				} else {
					bLevelUpdate = oTable.getNumberOfExpandedLevels() != expandLevels || this.wasAtMaxLevel;
					this.wasAtMaxLevel = false;
				}
				if (bLevelUpdate) {
					if (expandLevels >= 0) {
						oTable.setNumberOfExpandedLevels(expandLevels);
						oTable.bindRows(oTable.getBindingInfo("rows")); // trigger an update of the AnalyticalBinding's numberOfExpandedLevels property
					}

					// Firing the group event updates the personalization dialog, without this the table grouping state and personalization state would become inconsistent
					var groupedColList = oTable.getGroupedColumns();
					oTable.fireGroup({column: groupedColList[0], groupedColumns: groupedColList, type: sap.ui.table.GroupEventType.group});
				}

				return bLevelUpdate;
			},
			_updateRows: function(updateType) {
				var chart = this.oState.oSmartChart.getChart();
				var paramList = this._getSelParamsFromChart(chart);

				this._latestUpdateRow(paramList.length);

				var table = this.oState.oSmartTable.getTable();

				// check if table is analytical
				if (table instanceof AnalyticalTable) {
					// expand corresponding nodes
					this._expandByFilter(updateType);
				}
			},
			_getTableRows: function() {
				var table = this.oState.oSmartTable.getTable();
				if (table.getRows) {
					return table.getRows();
				} else {
					return table.getItems();
				}
			},
			_isRowHighlighted: function(rowObj) {

				var paramMap = this._paramMap;
				//Checks if paramMap exist and should not have blank object
				if (!paramMap || jQuery.isEmptyObject(paramMap)) {
					return false;
				}

				var bMatch = true;
				// perform this operation for the number of data records present
				for (var name in paramMap) { // all parameters must match
					if (!rowObj.hasOwnProperty(name)) {// support for node level highlighting
						continue;
					}

					if (paramMap[name].indexOf(rowObj[name]) == -1) { // if one doesnt' match then skip to the next segement
						bMatch = false;
					}
				}

				return bMatch;

			},
			_getTableBinding: function (table) {
				//In case of ResponsiveTable, the aggregation is items, else it is either rows or blank
				return table.getBinding() ? table.getBinding() : table.getBinding("items");
			},
			/**
			 * To apply chart selection to Table as filters from_onBeforeRebindTable()
			 * @param  {Object} oEvent Event Object
			 */
			_applyChartSelectionOnTableAsFilter: function(oEvent) {
				//Apply drill down filters if available
				var filtersFromChart = this.oState.oSmartChart.getDrillStackFilters();
				oEvent.mParameters.bindingParams.filters.push.apply(oEvent.mParameters.bindingParams.filters, filtersFromChart);

				//This needs to be revisit when SmartChart provide direct Api for getting selected params.
				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}
				var paramList = this._getSelParamsFromChart(chart);

				if (paramList.length > 0){
					var dimNameList = chart.getVisibleDimensions();

					for (var i = 0; i < paramList.length; i++) {
						var param = paramList[i];

						for (var name in param) {
							// Check if the filter exits
							if (dimNameList.indexOf(name) == -1) {
								jQuery.sap.log.warning("Could not apply filter with name \"" + name + "\" as that field does not exist in the entity type");
								continue;
							}
							var bPreventDuplicateFilter = false;
							var oFilterList = oEvent.mParameters.bindingParams.filters;
							// only if there are filters then check for duplicate filters
							if (oFilterList.length > 0) {
								var oFilterList = oFilterList[0].aFilters ? oFilterList[0].aFilters : oFilterList;
								for (var j = 0; j < oFilterList.length; j++) {
									//aFilters are not present if there is only one filter applied in the SmartFilterBar
									//the structure of oFilterList changes accordingly
									var oDimensionFilter = oFilterList[j].aFilters ? oFilterList[j].aFilters : oFilterList;
									//check only if the dimension has only one filter , below cases are considered
									//case one : single-value filter
									//case two : multi-value with one filter
									//if more then one filters are present then simply ignore
									if (oDimensionFilter.length == 1) {
										//assuming the data always is present in the zero index for single filters
										if (oDimensionFilter[0].sPath === name && oDimensionFilter[0].oValue1 === param[name]) {
											bPreventDuplicateFilter = true;
										}
									}
								}
							}
							if (!bPreventDuplicateFilter) {
								//Pushing the chart selection in to oEvent filter list
								oEvent.mParameters.bindingParams.filters.push(new sap.ui.model.Filter({
										path: name,
										operator: sap.ui.model.FilterOperator.EQ,
										value1: param[name]
								}));
							}
						}
					}

				}

				this._latestUpdateRow(paramList.length);
			},
			/**
			 * latest refactored update row code.
			 * @param  isHighlighted, boolean true/false.
			 */
			_latestUpdateRow: function(paramListLength){
				var isFilterMode = this.isFilter();
				var rowList = this._getTableRows();
				var isHighlighted = false;

				for (var i = 0; i < rowList.length; i++) {
					var row = rowList[i];

					if (!isFilterMode){
						if (row.getBindingContext()) {
							var rowObj = row.getBindingContext().getObject();
							isHighlighted = this._isRowHighlighted(rowObj);
						}
					}

					var domRef = row.getDomRefs ? row.getDomRefs(true) : row.getDomRef();
					if (!domRef) {
						continue;
					}
					if (domRef.row) {
						domRef.row.toggleClass("sapSmartTemplatesAnalyticalListPageRowHighlighted", (isFilterMode && paramListLength) ? isFilterMode : isHighlighted);
					} else {
						$(domRef).toggleClass("sapSmartTemplatesAnalyticalListPageRowHighlighted", (isFilterMode && paramListLength) ? isFilterMode : isHighlighted);
					}
				}
			},
			/**
			 * To extract selected param list from chart.
			 * @param  {Object} chart object
			 */
			_getSelParamsFromChart: function(chart) {
				var dpList = [];

				if (chart._getVizFrame().vizSelection()) {// workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					dpList = chart.getSelectedDataPoints().dataPoints;
				}
				return this._getSelParamsFromDPList(dpList);
			},
			/**
			 * To extract selected param list from selected datapoints list from chart.
			 * @param  {Object} dpList datapoint list
			 */
			_getSelParamsFromDPList: function(dpList) {
				if (!dpList) {
					return [];
				}
				var paramList = [];
				for (var i = 0; i < dpList.length; i++) {
					var dp = dpList[i];
					var ctxt = dp.context;
					if (!ctxt) {// happens when drill down state has changed, chart is inconsistent at this point
						continue;
					}

					var ctxtObj = ctxt.getProperty(ctxt.sPath);
					var param = {};
					if (this._selectFilterByMeasure) {
						for (var j = 0; j < dp.measures.length; j++) {
							var name = dp.measures[j];
							var val = ctxtObj[name];
							param[name] = val;
						}
					} else { // Filter by all measures/dimensions at the context path of the selected data point
						for (var name in ctxtObj) {
							param[name] = ctxtObj[name];
						}
					}
					paramList.push(param);
				}

				return paramList;
			}
		});

		return tController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController",["sap/m/OverflowToolbar","sap/m/ToolbarSpacer","sap/m/FlexItemData", "sap/m/ToolbarDesign",
		"sap/ui/core/mvc/Controller","sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
    function(OverflowToolbar, ToolbarSpacer, FlexItemData, ToolbarDesign, Controller, FilterUtil) {
		"use strict";
		var cController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.SmartChartController", {
			setState: function(oState) {
				this.triggeredByTableSort = false;
				this.tableSortSelection;
				this._selectFilterByMeasure = false; // else will filter by all dimensions/measures at the selection
				this.oState = oState;

				// Attach the init method to e.g., hook into the data selection event
				oState.oSmartChart.attachInitialise(this._onSmartChartInit, this);
				oState.oSmartChart.attachBeforeRebindChart(this._onBeforeRebindChart, this);

			},
			/**
			 * onBeforeRebindChart binds the table query params
			 * @param  {Object} oEvent Event object
			 */
			_onBeforeRebindChart: function (oEvent) {
				// modifying chart binding params to sort chart based on table data
				if (this.triggeredByTableSort && this.tableSortSelection) {
					var variant = this.oState.oSmartChart.fetchVariant();
					if (this.tableSortSelection.length > 0) {
						variant.sort = {};
						variant.sort.sortItems = [];
						for (var i = 0; i < (this.tableSortSelection.length); i++) {
							oEvent.mParameters.bindingParams.sorter.push(this.tableSortSelection[i]);
							variant.sort.sortItems.push({
								columnKey: this.tableSortSelection[i].sPath,
								operation: this.tableSortSelection[i].bDescending ? "Descending" : "Ascending"
							});
						}
					} else {
						oEvent.mParameters.bindingParams.sorter = this.tableSortSelection;
						// to set data in personalization dailog
						if (variant.sort) {
							delete variant.sort;
						}
					}

					// apply variant so that P13n is also updated, rebind chart does not update p13n
					this.oState.oSmartChart.applyVariant(variant);
					this.triggeredByTableSort = false;
				}

				//Make sure views with paramters are working
				if (this.oState.oSmartFilterbar && this.oState.oSmartFilterbar.getAnalyticBindingPath && this.oState.oSmartFilterbar.getConsiderAnalyticalParameters()) {
					try {
						var sAnalyticalPath = this.oState.oSmartFilterbar.getAnalyticBindingPath();
						if (sAnalyticalPath) {
							this.oState.oSmartChart.setChartBindingPath(sAnalyticalPath);
						}
					} catch (e) {
						jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
					}
				}

				this.oState.oController.onBeforeRebindChartExtension(oEvent);
				this.checkToPreventChartBinding(oEvent);
			},
			_onSmartChartInit: function() {
				var oState = this.oState;

				this.oChart = oState.oSmartChart.getChart();
				//Disable the toolbars once search is triggered
				oState.oSmartChart.attachShowOverlay(function(oEvent){
					oState.oSmartChart.getToolbar().setEnabled(!oEvent.getParameter("overlay").show);
				}, this);
				// TODO: check if need to handle chart type change
				this.oChart.attachSelectData(this._onChartSelectData, this);
				this.oChart.attachDeselectData(this._onChartDeselectData, this);
				this.oState.oSmartChart.attachChartDataChanged(this._onPersonalisationDimeasureChange, this);

				// Adding the view switch button to smartChart toolbar
				// Buttons added here as opposed to XML to maintain their position in toolbar
				//content view switch buttons are added only when both chart and table annotations are present
				if (this.oState._pendingChartToolbarInit && this.oState.oSmartTable) {
					this.oState.oSmartChart.getToolbar().insertContent(this.oState.alr_viewSwitchButtonOnChart, this.oState.oSmartChart.getToolbar().getContent().length);
				}

				delete this.oState._pendingChartToolbarInit;

				this.oState.oSmartChart.getChart().setVizProperties({
					"valueAxis":{
						"title":{
							"visible":false
						}
					},
					"legendGroup":{
						"layout":{
							"position":"bottom"
						}
					}
				});
				/**
				 * * attachSelectionDetailsActionPress Navigates from showDetails button of chart
				 * @param { object} [oEvent] [The event clicked - here this is chart]
				 * *
				*/
				this.oState.oSmartChart.attachSelectionDetailsActionPress(function(oEvent) {
					var oEventSource = oEvent.getSource();
					//Based on smart chart's new implementation every list can hold as many buttons as required
					//Each button will hold the binding context and is placed as each item in an array
					//We get this array by invoking oEvent.getParameter("itemContexts")
					//As we have only one show details button, Our binding context will be only the first item of this array
					//So we refer to the index 0 of this array to fetch the binding context of the selected item.
					var bindingContext = oEvent.getParameter("itemContexts") && oEvent.getParameter("itemContexts")[0];
					// Internal and Cross Navigation
					oState.oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
						//processing allowed
						if (!bindingContext){
							jQuery.sap.log.error("Binding context for the selected chart item is missing");
							return;
						}
						if (oEventSource.data("CrossNavigation")) {
						// outbound navigation
							oState.oTemplateUtils.oCommonEventHandlers.onEditNavigateIntent(oEventSource, bindingContext, oState.oSmartFilterbar, oState.oSmartChart.getChart());
							return;
						}
						// // internal navigation
						oState.oTemplateUtils.oCommonUtils.navigateFromListItem(bindingContext, oState.oSmartChart);
					}, jQuery.noop, oState);
				});
				jQuery.sap.log.info("Smart Chart Annotation initialized");
			},
			_onChartSelectData: function(ev) {
				var chart = this.oState.oSmartChart.getChart();
				if (chart._getVizFrame().vizSelection()) { // workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					var selList = chart.getSelectedDataPoints().dataPoints;
					this._lastSelected = this._getLastSel(selList, this._lastSelectedList);
					this._lastSelectedList = selList;
				}
				// get the set of filter critera based on the selection, could be differences based on type, so get in a different function
				this._updateTable("selection");
			},
			/*_onPersonalisationDimeasureChange is used to attach the recently implemented chartDataChanged from smartChart team.
				it returns a oEvent with changeTypes of object with boolean properties dimeasure, filter & sort.
				We only consider dimeasure to consider here rest event changes direclty triggers table changes from begining.
				So its kept as is.*/
			_onPersonalisationDimeasureChange: function(oEvent) {
				var oChangeTypes = oEvent.getParameters().changeTypes;
				if (oChangeTypes.dimeasure && !oChangeTypes.filter && !oChangeTypes.sort) {
					this._onChartSelectData(oEvent);
				}
			},
			_getLastSel: function(newList, oldList) {
				var chart = this.oState.oSmartChart.getChart();
				var newSelList = this.oState.detailController && this.oState.detailController._getSelParamsFromDPList(newList);
				var oldSelList = this.oState.detailController && this.oState.detailController._getSelParamsFromDPList(oldList);
				if (newSelList) {
					for (var i = 0; i < newSelList.length; i++) {
						var newSel = newSelList[i];
						var match = false;
						for (var j = 0; j < oldSelList.length; j++) {
							var oldSel = oldSelList[j];

							match = true;
							for (var a in oldSel) {
								if (a.indexOf("__") != -1) {
									continue;
								}

								if (newSel[a] != oldSel[a]) {
									match = false;
									break;
								}
							}

							if (match) {
								break;
							}
						}

						if (!match) {
							var dimList = chart.getVisibleDimensions();
							var newSelOnlyDim = {};
							for (var j = 0; j < dimList.length; j++) {
								var name = dimList[j];
								newSelOnlyDim[name] = newSel[name];
							}

							return newSelOnlyDim;
						}
					}
				}

				return null;
			},
			_onChartDeselectData: function(ev) {
				var me = this;
				this._lastSelected = null;
				setTimeout(function() { // due to the selection data points not being updated during the deselectData event, must check again asynchronously
					var chart = me.oState.oSmartChart.getChart();
					if (chart.getSelectedDataPoints().count == 0) {// Clear the filter if no selections remain.  If a selection exists it would have come through the SelectData event
						me._updateTable("selection");
					} else if (chart.getSelectionMode() == "MULTIPLE") {// Treat an unselect with remaining selection points as a select
						me._onChartSelectData(ev);
					}
				}, 1);

				// A drilldown via the breadcrumb (no other event to listen to drilldown events), the drilledUp event doesn't get triggered in this case
				var evtSrc = ev.getParameter("oSource");
				if (evtSrc && evtSrc instanceof sap.m.Link && evtSrc.getParent() instanceof sap.m.Breadcrumbs) {
					me._onChartDrilledUp(ev);
				}
			},
			_onChartDrilledUp: function(ev) {
				this._updateTable();
			},
			_onChartDrilledDown: function(ev) {
				this._updateTable();
			},
			updateTable: function() {
				var variant = this.oState.oSmartChart.fetchVariant(),
				sortData = {};

				if (variant && variant.sort && variant.sort.sortItems) {
					sortData.sortList = variant.sort.sortItems;
					sortData.allSortRemoved = false;
				} else {
					sortData.sortList = undefined;
					sortData.allSortRemoved = true;
				}

				this._updateTable(undefined, sortData);
			},
			_updateTable: function(updateType) {
				var chart = this.oState.oSmartChart.getChart();
				if (!chart) {
					return;
				}
				var dpList = [];
				if (chart._getVizFrame().vizSelection()) {// workaround for bug in chart, will get null pointer exception if vizSelection is not checked
					dpList = chart.getSelectedDataPoints().dataPoints;
				}
				if (!dpList || dpList.length == 0) {
					this._lastSelected = null;
				}
				if (this.oState.detailController) {
					this.oState.detailController.applyParamsToTable();
				}
			},
			checkToPreventChartBinding: function(oEvent){
				//this check is to prevent rebind of chart triggered by table via smartFilterBar
				var preventChartBinding = false;

				var currentFilter = oEvent.mParameters.bindingParams.filters;
				var currentSorter = oEvent.mParameters.bindingParams.sorter;
				//comparing previous list of applied filters with current filters list
				preventChartBinding = this._lastFilter && !FilterUtil.isFilterDiff(this._lastFilter, currentFilter);

				//comparing previous list of applied sorter with current sorter list
				preventChartBinding = preventChartBinding ? this._lastSorter && !FilterUtil.isFilterDiff(this._lastSorter, currentSorter) : false;
				this._lastFilter = currentFilter;
				this._lastSorter = currentSorter;

				//comparing the Fuzzy search string if any from previous search string
				var oSearchParam = oEvent.mParameters.bindingParams.parameters.custom && oEvent.mParameters.bindingParams.parameters.custom.search;
				var sCurrentSearch = oSearchParam ? oEvent.mParameters.bindingParams.parameters.custom.search : oSearchParam;
				if (this._lastSearch || sCurrentSearch){
					preventChartBinding = preventChartBinding ? (this._lastSearch === sCurrentSearch) : false;
					this._lastSearch = sCurrentSearch;
				}

				var oFilterData = this.oState.oSmartFilterbar.getFilterData();
				var oCurrentParam = {};
				//creating separate object of mandatory parameters from filter data.
				for (var key in oFilterData){
					if (key.indexOf("$Parameter") !== -1){
						oCurrentParam[key] = oFilterData[key];
					}
				}
				//comparing mandatory parameters values from any previous values.
				preventChartBinding = preventChartBinding ? this._lastParam && !FilterUtil.isFilterObjDiff(this._lastParam, oCurrentParam) : false;
				this._lastParam = oCurrentParam;

				if (preventChartBinding) {
						oEvent.mParameters.bindingParams.preventChartBind = true;
						this.oState.oSmartChart.showOverlay(false);
						//To enable the Toolbar in chart mode
						this.oState.oSmartChart.getToolbar().setEnabled(true);
				}
			}
		});
		return cController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListSeparators'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",[
		"sap/m/Button", "sap/m/ButtonType", "sap/m/Label", "sap/m/Dialog", "sap/m/Bar", "sap/m/SearchField",
		"sap/m/Toolbar", "sap/m/ToolbarSpacer", "sap/m/Title", "sap/m/VBox", "sap/m/HBox", "sap/m/CheckBox",
		"sap/m/Link", "sap/m/List", "sap/m/TextArea","sap/m/Text", "sap/m/StandardListItem", "sap/m/ListSeparators", "sap/m/Popover",
		"sap/ui/layout/form/SimpleForm", "sap/ui/layout/GridData",
		"sap/ui/core/mvc/Controller", "sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
		"sap/m/SegmentedButton","sap/m/SegmentedButtonItem", "sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms"
	], function(Button, ButtonType, Label, Dialog, Bar, SearchField, Toolbar, ToolbarSpacer, Title,
			VBox, HBox, CheckBox, Link, List, TextArea, Text, StandardListItem, ListSeparators, Popover, SimpleForm,
			GridData, Controller, FilterUtil, SegmentedButton, SegmentedButtonItem, V4Terms) {
	"use strict";

	var BASIC_GROUP = "_BASIC";

	// Chart Default Settings
	var chartWidth = "100%";
	var labelWidthPercent = 0.33;
	var labelWidthPercentDonut = 0.5; //Donut should cover half the area

	var vfdController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController", {
		/**
		 * Initialize the control
		 *
		 * @public
		 * @param {oState} oState - state of the application
		 */
		init: function(oState) {
			this.oState = oState;
			this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.comp");
			this.bIsTimeBasedLine;
			this.bSortOrder;
		},
		_createForm: function() {
			// store as a string to parse later ad restore
			// since cloning via jquery extend is not working on json model
			this.sJsonModel = this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel').getJSON();
			this.oConfig = JSON.parse(this.sJsonModel);
			this._filterModified = false;
			this.filterCompList = [];
			this.filterChartList = [];
			this._buildFiltersFromConfig();

			this.oVerticalBox = new VBox();

			this.oVerticalBox.setModel(this.oState.oController.getView().getModel("_templPriv"), "_templPriv");
			this.oVerticalBox.setModel(this.oState.oController.getView().getModel());
			this.oVerticalBox.setModel(this.oState.oController.getView().getModel("i18n"), "i18n");
			this.oVerticalBox.setModel(this.oState.oController.getOwnerComponent().getModel("_filter"), "_filter");
			this.oVerticalBox.setModel(this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel'), "_visualFilterConfigModel");

			this._addFilterSwitch();
			this._addGroupsAndFilters();
			return this.oVerticalBox;
		},

		_toggle: function() {
			var aContent = this.oState.oSmartFilterbar.getFilterDialogContent();
			if (aContent && (aContent.length === 2)) {
				//If CF is visible switch to VF and hide CF
				if (aContent[0].getVisible()) {
					aContent[0].setVisible(false);
					aContent[1].setVisible(true);
				} else {
				//If VF is visible switch to CF and hide VF
					aContent[0].setVisible(true);
					aContent[1].setVisible(false);
				}
			}
		},

		_addFilterSwitch: function() {
			var filterSwitchItems = [
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:"compact", tooltip:"{i18n>FILTER_COMPACT}"}),
				new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:"visual", tooltip:"{i18n>FILTER_VISUAL}"})
			];

			var filterSwitch = new SegmentedButton({
				width:"inherit",
				selectedKey:"visual",
				items: filterSwitchItems
			});

			filterSwitch.attachSelect(function(oEvent){
				var oSwitch = oEvent.getSource();
				//Keep the selected key as visual on this content
				oSwitch.setSelectedKey("visual");
				this._toggle();
			}.bind(this));

			var oToolbar = new sap.m.OverflowToolbar({
				design: sap.m.ToolbarDesign.Transparent,
				content: [
					new sap.m.ToolbarSpacer(),
					filterSwitch
				]
			}).addStyleClass("sapSmartTemplatesAnalyticalListPageFilterDialogToolbar");

			this.oVerticalBox.addItem(oToolbar);
		},
		_searchDialog: function() {
			this.oState.alr_visualFilterBar._setVariantModified();
		},
		_restoreDialog: function() {
			// restore visual filter bar
			this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel').setData(JSON.parse(this.sJsonModel));
			this.oConfig = JSON.parse(this.sJsonModel);
			this._reloadForm();
			this._filterModified = false;
		},

		_cancelDialog: function() {
			if (this._filterModified) {
				var oVisualFilterConfigModel = this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel');
				oVisualFilterConfigModel.setData(JSON.parse(this.sJsonModel));
				this.oState.alr_visualFilterBar.updateVisualFilterBindings(true);
			}
		},

		_buildFiltersFromConfig: function() {
			var i;
			this.filterCompList = [];
			this.filterChartList = [];
			for (i = 0; i < this.oConfig.filterCompList.length; i++) {
				var aSortOrder = this.oConfig.filterCompList[i].component.properties.sortOrder;

				if (aSortOrder.constructor === Object && aSortOrder.value) {
					this.oConfig.filterCompList[i].component.properties.sortOrder = aSortOrder.value;
				}

				this.filterCompList.push({
					obj: {
						shownInFilterBar: this.oConfig.filterCompList[i].shownInFilterBar,
						shownInFilterDialog: this.oConfig.filterCompList[i].shownInFilterDialog,
						cellHeight: this.oConfig.filterCompList[i].cellHeight,
						component: {
							type: this.oConfig.filterCompList[i].component.type,
							cellHeight: this.oConfig.filterCompList[i].component.cellHeight
						},
						group: {
							label: this.oConfig.filterCompList[i].group.label,
							name: this.oConfig.filterCompList[i].group.name
						}
					},
					//Update searchVisible based on results of search in filter dialog
					searchVisible: this.oConfig.filterCompList[i].searchVisible === undefined || this.oConfig.filterCompList[i].searchVisible
				});
			}
		},

		_rebuildConfig: function() {
			var i;
			var config = {
					filterCompList: []
				};
			for (i = 0; i < this.filterCompList.length; i++) {
				config.filterCompList.push({
					shownInFilterBar: this.filterCompList[i].obj.shownInFilterBar && this.filterCompList[i].obj.shownInFilterDialog,
					shownInFilterDialog: this.filterCompList[i].obj.shownInFilterDialog,
					cellHeight: this.filterCompList[i].obj.cellHeight,
					group: {
						label: this.filterCompList[i].obj.group.label,
						name: this.filterCompList[i].obj.group.name
					},
					component: {
						type: this.filterCompList[i].obj.component.type,
						cellHeight: this.filterCompList[i].obj.component.cellHeight,
						properties: {
							scaleFactor: this.filterChartList[i].getScaleFactor(),
							numberOfFractionalDigits: this.filterChartList[i].getNumberOfFractionalDigits(),
							sortOrder: this.filterChartList[i].getSortOrder(),
							filterRestriction: this.oConfig.filterCompList[i].component.properties.filterRestriction,
							entitySet: this.filterChartList[i].getEntitySet(),
							width: this.oConfig.filterCompList[i].component.properties.width,
							height: this.oConfig.filterCompList[i].component.properties.height,
							dimensionField: this.filterChartList[i].getDimensionField(),
							dimensionFieldDisplay: this.filterChartList[i].getDimensionFieldDisplay(),
							dimensionFieldIsDateTime: this.filterChartList[i].getDimensionFieldIsDateTime(),
							dimensionFilter: this.filterChartList[i].getDimensionFilter(),
							unitField: this.filterChartList[i].getUnitField(),
							isCurrency: this.filterChartList[i].getIsCurrency(),
							isMandatory: this.oConfig.filterCompList[i].component.properties.isMandatory,
							measureField: this.filterChartList[i].getMeasureField(),
							outParameter: this.oConfig.filterCompList[i].component.properties.outParameter,
							inParameters: this.oConfig.filterCompList[i].component.properties.inParameters,
							parentProperty: this.oConfig.filterCompList[i].component.properties.parentProperty,
							chartQualifier: this.oConfig.filterCompList[i].component.properties.chartQualifier
						}
					}
				});
			}
			return config;
		},
		/*
		* @private
		* Destroys all the items in the verticalBox and recreates filters and groups it.
		*/
		_reloadForm : function () {
			this.oVerticalBox.destroyItems();
			this._buildFiltersFromConfig();
			//Restore SegmentedButtons
			this._addFilterSwitch();
			this._addGroupsAndFilters();
		},
		/*
		* @private
		* adds group containers and filters based on visual filters and hidden filters that exists
		*/
		_addGroupsAndFilters: function() {
			var i;
			var groupName;
			var groupContainer;
			var groupList = [];
			var filtersGroupCount = 0;
			//this._mergeFilters();
			for (i = 0; i < this.filterCompList.length; i++) {
				if (!Array.isArray(this.filterCompList[i])) {
					if (this.filterCompList[i].searchVisible === false) {
						continue;
					}
					//get the group name of the filter and add it to appropriate group container
					if (!(groupList.indexOf(this.filterCompList[i].obj.group.name) > -1)) {
						if (groupContainer) {
							this.oVerticalBox.addItem(groupContainer);
						}
						groupName = this.filterCompList[i].obj.group.name;
						groupList.push(groupName);
						groupContainer = new VBox();
						groupContainer.setWidth("100%");
						groupContainer.setLayoutData(new GridData({
							span: "L12 M12 S12"
						}));
						groupContainer.addStyleClass("sapUiSmallMarginTop");
						filtersGroupCount++;
						this._addGroupToolbar(groupContainer,  this.filterCompList[i].obj.group.label, this.filterCompList[i].obj.group.name);
					}
					if (this.filterCompList[i].obj.shownInFilterDialog) {
						// Add toolbar and chart only if filters are visible
						this.filterCompList[i].toolbar = this._addChartCustomToolbar(this.oConfig.filterCompList[i], i);
						this.filterCompList[i].overlay = this._addChartOverlay(this.oConfig.filterCompList[i] , i);
						this.filterChartList[i] = this._addChart(this.oConfig.filterCompList[i].component.type, this.oConfig.filterCompList[i].component.properties, i);

						var that = this,
						sShowInFBCheckBoxId = this.filterChartList[i].getParentProperty().replace(/[^\w]/gi, '') + "checkBox";

						var oChartBox = new HBox({
							items: [
								new VBox({
									items: [
										that.filterCompList[i].toolbar,
										that.filterCompList[i].overlay,
										that.filterChartList[i]
									]
								}).setWidth("100%").addStyleClass("sapUiSmallMarginEnd"),
								new VBox({
									items: [
										new Label({
											text: "{i18n>SHOW_ON_FILTER_BAR}",
											labelFor: sShowInFBCheckBoxId
										}).addStyleClass("sapUiTinyMarginTop"),
										new CheckBox({
											id: sShowInFBCheckBoxId,
											text: "",
											selected: that.oConfig.filterCompList[i].shownInFilterBar
										}).data("idx", i).attachSelect(null, that._onCheckBoxSelect, that)
									]
								}).setAlignItems("Center")
							]
						}).addStyleClass("sapUiSmallMarginTop").setWidth("100%");
						groupContainer.addItem(oChartBox);
					}
				}
				//add to dialog
				if (groupContainer) {
					this.oVerticalBox.addItem(groupContainer);
				}
			}
			if (filtersGroupCount == 1 && groupName === BASIC_GROUP) {
				FilterUtil.executeFunction(groupContainer, "mAggregations.items.0.setVisible", [false]);
			}
		},

		_onCheckBoxSelect: function(oEvent) {
			var idx = oEvent.getSource().data("idx");
			this.selectCheckBox(idx, oEvent.getSource().getSelected());
		},

		/*
		* @private
		* adds a group container for the group to which visual filter belongs
		* @param {object} groupContainer - box containing all visual filters under a group
		* @param {string} groupTitle - title for the groupContainer
		* @param {string} groupName - name of the group
		*/
		_addGroupToolbar: function(groupContainer, groupTitle, groupName) {
			var oGroupTitle = new Title({text: groupTitle});
			var groupToolbar = new Toolbar({
				content: [
					oGroupTitle,
					new ToolbarSpacer()
				]
			});
			if (groupName != BASIC_GROUP) {
				groupToolbar.addContent(this._createMoreFiltersLink(groupName, oGroupTitle));
			}
			groupContainer.addItem(groupToolbar);
		},
		/*
		* @public
		* Function to update shownInFilterBar according to visibility of filteritems/checkbox selection
		* @param {number} idx - index of the filterCompList[]
		* @param {boolean} bVisible - true or false value for vilibility
		*/
		selectCheckBox : function (idx, bVisible) {
			this._filterModified = true;
			var oVisualConfigModel = this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel'),
			oVisualConfigModelClone = jQuery.extend(true, {}, oVisualConfigModel);
			oVisualConfigModelClone.setProperty('/filterCompList/' + idx + '/shownInFilterBar', bVisible);
			oVisualConfigModel.setData(oVisualConfigModelClone.getData());
			//update config object when VFConfig model is updated
			this.oConfig = JSON.parse(oVisualConfigModel.getJSON());
			this.oState.alr_visualFilterBar.updateVisualFilterBindings(true);
			//to enable Restore button on change of chart type, sort order, measure field and  show in filter bar changes 
			this.oState.oSmartFilterbar._oVariantManagement.currentVariantSetModified(true);
		},
		/**
		 * Adds overlay in the filter dialog
		 * @param {object} obj
		 * @param {int} idx index in config object
		 */
		_addChartOverlay: function(obj, idx) {
			var oHeaderOverlay = new VBox({
				width: "100%",
				height: obj.component.properties.height,
				items: [
				new sap.m.Label({
					text : {
						path: '_visualFilterConfigModel>/filterCompList/' + idx  + '/overlayMessage',
						formatter: function(sOverlayMessage) {
							return this.getModel("i18n").getResourceBundle().getText(sOverlayMessage);
						}
					}
				})
				],
				visible: {
					path: '_visualFilterConfigModel>/filterCompList/' + idx + '/showChartOverlay',
					formatter: function( bValue) {
						return bValue;
					}
				}
			});
			oHeaderOverlay.addStyleClass("sapUiOverlay");
			oHeaderOverlay.addStyleClass("sapSmartTemplatesAnalyticalListPageVFOverflow");
			return oHeaderOverlay;

		},
		_addChartCustomToolbar: function(obj, idx) {
			var that = this;
			//This var would be needed to distinguish option button on line chart
			//var isItLineChart = (obj.component.type === "Line");

			var sParentProperty = obj.component.properties.parentProperty,
			sMeasureButtonIdParentProperty = sParentProperty.replace(/[^\w]/gi, ''),
			sMeasureButtonIdEntityType = this.oState.alr_visualFilterBar._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(obj.component.properties.entitySet),
			sortDescending = obj.component.properties.sortOrder[0].Descending.Boolean, //Inorder to consider the sort Order of only the first property
			bIsSortOrderButtonHidden = FilterUtil.readProperty(obj, "component.type") === "Line" && FilterUtil.readProperty(obj, "component.properties.dimensionFieldIsDateTime"),
			chartType = this.oState.alr_visualFilterBar._resolveChartType(obj.component.type),
			chartTypeIcon = this._getChartTypeIconLink(chartType),
			customToolbar = new HBox({
				items: [
					new Label({
						text: that._getChartTitle(obj, idx)
					})
				]
			});
			if (this.oConfig.filterCompList[idx].component.properties.isMandatory) {
				customToolbar.getItems()[0].addStyleClass("sapMLabelRequired");
			}
			//Get the input control for corresponding property needed to fire valuehelp request
			var oInput = this.oState.oSmartFilterbar.getControlByKey(obj.component.properties.parentProperty);
			//ensure that value help annotations are loaded
			this.oState.oSmartFilterbar.ensureLoadedValueHelp(obj.component.properties.parentProperty);
			//Value help button is needed only if input control is defined
			var bIsVisible = oInput && oInput.getShowValueHelp && oInput.getShowValueHelp();
			var selectedItemsTooltip;
			var rb = this.oVerticalBox.getModel("i18n").getResourceBundle();
			var items = [
					new Button({
						type: "Transparent",
						icon: "sap-icon://line-chart-time-axis",
						visible: false, //isItLineChart To drop support for this button in Wave 15
						press: function(oEvent) {
							that._showLineChartTimeAxisPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: bIsVisible ? "sap-icon://value-help" : "",
						visible: {
							path: "_filter>/" + sParentProperty,
							formatter: function(oContext) {
								if (bIsVisible) { //for valuehelp
									return true;
								} else { //non value-help case
									if (!oContext) { //No filter set for this property
										return false;
									}
									//Handle multiple values
									if (typeof oContext === "object") {
										return (oContext.value || (oContext.items && oContext.items.length) || (oContext.ranges && oContext.ranges.length)) ? true : false;
									}
									//Single value fields
									return true;
								}
							}
						},
						text: {
							path: "_filter>/" + sParentProperty,
							formatter: function(oContext) {
								selectedItemsTooltip = "";
								if (oContext) {
									var count = 0;
									if (typeof oContext === "object") {	//For multi value
										if (oContext.value) {	//Add single value
											count++;
										}
										//Add items
										if (oContext.items) {	//items can be null
											count += oContext.items.length;
										}
										//Add ranges
										if (oContext.ranges) {	//ranges can be null
											count += oContext.ranges.length;
										}
									} else {	//For single value, it can be string or int
										count++;
									}
								}
								if (count) {
									//tooltip string for selected items button
									selectedItemsTooltip = (count === 1) ? rb.getText("SINGLE_SELECTED", count) : rb.getText("MULTI_SELECTED", count);
								}
								return count ? "(" + count + ")" : "";
							}
						},
						press: function(oEvent) {
							if (bIsVisible) {
								oInput.fireValueHelpRequest.call(oInput);
							} else {
								sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController.launchAllFiltersPopup(oEvent.getSource(), that.filterChartList[oEvent.getSource().data("idx")], oEvent.getSource().getModel('i18n'));
							}
						},
						tooltip: {
							path: "_filter>/" + sParentProperty,
							formatter: function() {
								return FilterUtil.getTooltipForValueHelp(bIsVisible, rb, selectedItemsTooltip);
							}
						}
					}).data("idx",idx),
					new Button({
						type: "Transparent",
						icon: (sortDescending ? "sap-icon://sort-descending" : "sap-icon://sort-ascending"),
						visible: !bIsSortOrderButtonHidden,
						tooltip:"{i18n>VISUAL_FILTER_SORT_ORDER}",
						press: function(oEvent) {
							that._showChartSortPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						type: "Transparent",
						icon: chartTypeIcon,
						tooltip:"{i18n>VISUAL_FILTER_CHART_TYPE}",
						press: function(oEvent) {
							that._showChartTypesPopup(oEvent);
						}
					}).data("idx", idx),
					new Button({
						//Stable ID for measure field
						id: "template::VisualFilterDialog::MeasureChangeButton::" + sMeasureButtonIdEntityType + "::" + sMeasureButtonIdParentProperty,
						type: "Transparent",
						icon: "sap-icon://measure",
						tooltip:"{i18n>VISUAL_FILTER_MEASURE}",
						press: function(oEvent) {
							that._showChartMeasuresPopup(oEvent);
						}
					}).data("idx", idx)
			];
			var iconBox = new HBox({
				items: items
			});
			iconBox.setWidth("100%");
			iconBox.setJustifyContent(sap.m.FlexJustifyContent.End);
			customToolbar.getItems()[0].addStyleClass("sapUiTinyMarginTop");
			customToolbar.getItems()[0].addStyleClass("sapSmartTemplatesAnalyticalListPageVFDialogChartTitle");
			customToolbar.setWidth("100%");
			customToolbar.addItem(iconBox);

			return customToolbar;
		},
		_addChart: function (chartType, prop, idx) {
			var chart;
			var that = this;

			var oProp = {
					scaleFactor : prop.scaleFactor,
					numberOfFractionalDigits: prop.numberOfFractionalDigits,
					sortOrder: prop.sortOrder,
					filterRestriction: prop.filterRestriction,
					width: chartWidth,
					height: prop.height,
					labelWidthPercent: labelWidthPercent,
					entitySet: prop.entitySet,
					dimensionField: prop.dimensionField,
					dimensionFieldDisplay: prop.dimensionFieldDisplay,
					dimensionFieldIsDateTime: prop.dimensionFieldIsDateTime,
					unitField: prop.unitField,
					isCurrency: prop.isCurrency,
					isMandatory: prop.isMandatory,
					measureField: prop.measureField,
					dimensionFilter: prop.dimensionFilter,
					outParameter: prop.outParameter,
					inParameters: prop.inParameters,
					parentProperty: prop.parentProperty,
					textArrangement: prop.textArrangement,
					chartQualifier: prop.chartQualifier
			};

			var sPath = "/filterCompList/" + idx;

			if (chartType === "Donut") {
				oProp.labelWidthPercent = labelWidthPercentDonut;
			}

			chartType = this.oState.alr_visualFilterBar._resolveChartType(chartType);

			var chart = this.oState.alr_visualFilterBar._createFilterItemOfType(chartType, oProp);
			chart.data("idx", idx);
			chart.addCustomData(new sap.ui.core.CustomData({
				key: 'sPath',
				value: sPath
			}));
			chart.bindProperty('visible', {
				path: '_visualFilterConfigModel>/filterCompList/' + idx + '/showChartOverlay',
				formatter: function(bValue) {
					return !bValue;
				}
			});
			// bind dimension filter property for seletions on the chart
			chart.bindProperty('dimensionFilter', {
				path: '_filter>/' + chart.getParentProperty()
			});
			var aInParameters = chart.getInParameters(),
			aBindingParts = [];

			if (aInParameters && aInParameters.length > 0) {
				aInParameters.forEach(function (element) {
					aBindingParts.push({
						path: "_filter>/" + element.localDataProperty
					});
				});
			}

			if (that.oState.alr_visualFilterBar.getEntitySet() === chart.getEntitySet()) {
				var aMandatoryFields = that.oState.alr_visualFilterBar._smartFilterContext.determineMandatoryFilterItems();
				if (aMandatoryFields && aMandatoryFields.length > 0) {
					aMandatoryFields.forEach(function (element) {
						aBindingParts.push({
							path: '_filter>/' + element.getName()
						});
					});
				}
			}

			if (aBindingParts && aBindingParts.length > 0) {
				// create property binding to handle In parameter changes
				chart.bindProperty('dimensionFilterExternal', {
			        parts: aBindingParts,
			        formatter: function () {
						var	aInParameters = this.getInParameters(),
							sParentProperty = this.getParentProperty(), oFilter, oCurrencyProperty;
						// If the Main EntitySet and the filterItem EntitySet is the same and the main EntitySet
						// is Parameterized, then we do not proceed. So we only procees in 3 cases.
						// 1. VH!=ME(Parameterized)
						// 2. VH=ME(Non-Parameterized)
						// 3. VH!=ME(Non-Paramterized)
						// Since we already have set a parameter, therefore
						// we do not need an explicit currency filter and the parameter takes care of the conversions.
						// Considering the above 3 cases, we proceed only if
						// 1. The ME is Non-Parameterized
						// 2. The ME is Parameterized but the parameter is only P_DisplayCurrency
						if (!(that.oState.alr_visualFilterBar.getEntitySet() === this.getEntitySet() && that.oState.oSmartFilterbar.getAnalyticBindingPath() !== "") && (that.oState.oSmartFilterbar.getAnalyticBindingPath() === "" || ((that.oState.oSmartFilterbar.getAnalyticBindingPath().indexOf("P_DisplayCurrency")) != -1))) {
							var displayCurrency = that.oState.alr_visualFilterBar.getProperty("displayCurrency");
							// If displayCurrency is set only then we proceed.
							if (displayCurrency) {
								var measureField = this.getMeasureField();
								var oModel = that.oState.alr_visualFilterBar.getModel();
								var metaModel = oModel.getMetaModel();
								var oEntityType = metaModel.getODataEntityType(that.oState.alr_visualFilterBar._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.getEntitySet()));
								var oProperty = metaModel.getODataProperty(oEntityType, measureField);

								if (oProperty) {
									var sCurrencyPath = oProperty[V4Terms.ISOCurrency];
									if (sCurrencyPath) {
										// Check the cuurency property associated with the measure.
										var sCurrencyField = sCurrencyPath.Path;

										for (var key = (aInParameters.length - 1); key > -1; key--) {
											var sValueListProperty = aInParameters[key].valueListProperty;
											var sLocalDataProperty = aInParameters[key].localDataProperty;
											if (sValueListProperty === sCurrencyField) {
												var aFilterData = that.oState.oSmartFilterbar.getFilterData();
												if (!aFilterData[sLocalDataProperty]) {
													oCurrencyProperty = metaModel.getODataProperty(oEntityType, sCurrencyField);
													if (oCurrencyProperty && oCurrencyProperty["sap:filterable"] !== "false") {
														oFilter = new sap.ui.model.Filter({
															aFilters: [
																new sap.ui.model.Filter({ path: sCurrencyField, operator: "EQ", value1: displayCurrency, value2: undefined })
															],
															and: false
														});
													}
												}
												break;
											}
										}
									}
								}
							}
						}
						return that.oState.alr_visualFilterBar._getFiltersForFilterItem(aInParameters, sParentProperty, oFilter, sCurrencyField);
					}
				});
			}
			chart._updateBinding();
			chart._bAllowBindingUpdateOnPropertyChange = true;

			//chart click handler
			chart.attachFilterChange(function(oEvent) {
				//var idx = oEvent.getSource().data("idx");
				that._filterModified = true;

				// fire visual filter change event to get compact filter data for in params
				// so that other visual filter items can react
				that.oState.alr_visualFilterBar.fireFilterChange();
			});

			chart.attachTitleChange(function(oEvent) {
				var idx = oEvent.getSource().data("idx");
				if (that.filterCompList[idx].toolbar.getItems().length > 0) {
					// If Mandatory property then add an (*)
					if (oProp.isMandatory) {
						that.filterCompList[idx].toolbar.getItems()[0].addStyleClass("sapMLabelRequired");
					}
					that.filterCompList[idx].toolbar.getItems()[0].setText(that._getChartTitle(that.filterCompList[idx].obj, idx));
				}
			});

			return chart;
		},
		_createMoreFiltersLink: function(groupName, oGroupTitle) {
			var that = this;
			var count = 0;
			var i;
			var oLink = new Link();

			for (i = 0; i < this.filterCompList.length; i++) {
				if (this.filterCompList[i].searchVisible &&
						this.filterCompList[i].obj.group.name === groupName &&
						!this.filterCompList[i].obj.shownInFilterDialog) {
					count++;
				}
			}
			if (count > 0) {
				oLink.setText(this.oRb.getText("FILTER_BAR_SHOW_MORE_FILTERS", [count]));
			} else {
				oLink.setText(this.oRb.getText("FILTER_BAR_SHOW_CHANGE_FILTERS"));
			}

			oLink.attachPress(function(evnt) {
				that._createAddRemoveFiltersDialog(groupName, oLink);
			});
			//BCP: 1780364662 accessibility support for reading out group title in the visual filter dialog when the focus is on it's groupContainer element.
			if (oGroupTitle) {
				oLink.addAriaLabelledBy(oGroupTitle);
			}

			return oLink;
		},
		_showChartMeasuresPopup: function(oEvent) {
			var that = this;
			var idx = oEvent.getSource().data("idx");
			var collectionPath = this.filterChartList[idx].getProperty("entitySet");
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_MEASURES");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft,
				includeItemInSelection: true
			});
			oList.data("idx", idx);
			oDialog.addContent(oList);
			var measures = this.oState.alr_visualFilterBar._getMeasureMap()[collectionPath];
			oList.addStyleClass("sapUiSizeCompact");
			//measures will be undefined if collectionPath does not exist in measures.
			if (measures) {
				for (var item in measures) {
					var oListItem = new StandardListItem({
						title: measures[item].label
					}).data("measureName", measures[item].name);
					oList.addItem(oListItem);
					if (this.filterChartList[idx].getMeasureField() === measures[item].name) {
						oList.setSelectedItem(oListItem);
					}
				}
			}

			oList.attachSelectionChange(function (oEvent) {
				var idx = oEvent.getSource().data("idx"),
				sMeasureName = oEvent.getSource().getSelectedItem().data("measureName");
				that.filterChartList[idx].setProperty("unitField", measures[sMeasureName].fieldInfo.unit);
				that.filterCompList[idx].toolbar.getItems()[0].setText(that._getChartTitle(that.filterCompList[idx].obj, idx));
				that.oConfig.filterCompList[idx].component.properties.measureField = sMeasureName;

				// if chart is line sort order should not change on measure change
				if (!that.filterChartList[idx]._chart.getPoints) {
					// set Sort Order without updating vf items
					var aSortProperty = jQuery.extend(true, [], that.filterChartList[idx].getSortOrder());
					//We consider only first sortProperty, hence 0 index is used
					aSortProperty[0].Field.String = sMeasureName;
					that.filterChartList[idx].setSortOrder(aSortProperty);
					that._updateVisualFilterConfigModel(idx, '/component/properties/sortOrder', aSortProperty);
				}

				var oMeasureProperty = {
					bUpdateBinding: true,
					value: sMeasureName
				};
				that.filterChartList[idx].setMeasureField(oMeasureProperty);
				// This triggers setMeasure for the filter item on the bar
				// passed as an oject so that update binding can be called
				that._updateVisualFilterConfigModel(idx, '/component/properties/measureField', oMeasureProperty);
				// set measure as string in the model so that it can be normally used at other places
				that._updateVisualFilterConfigModel(idx, '/component/properties/measureField', sMeasureName);
				that._updateVisualFilterConfigModel(idx, '/component/properties/unitField', measures[sMeasureName].fieldInfo.unit);
				that._filterModified = true;
				oDialog.close();
			});

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());

		},

		_showChartTypesPopup: function(oEvent) {
			var that = this;
			var button = oEvent.getSource();
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_CHART_TYPES");
			var compList = this.oState.alr_visualFilterBar._getSupportedFilterItemList();
			var listItems = [];
			var bSelectionChanged = false;
			for (var i = 0; i < compList.length; i++) {
				var comp = compList[i];
				var listItem = new StandardListItem({
						title: "{i18n>" + comp.textKey + "}",
						icon: comp.iconLink,
						selected: button.getIcon() === comp.iconLink
					}).data("type", comp.type);
				listItems.push(listItem);
			}
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectMaster,
				items: listItems
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				var idx = oEvent.getSource().data("button").data("idx"),
				chartType = oEvent.getSource().getSelectedItem().data("type"),
				oFilterItem = that.filterChartList[idx],
				sDimension = oFilterItem.getDimensionField(),
				sMeasure = oFilterItem.getMeasureField(),
				bDimensionIsDateTime = oFilterItem.getDimensionFieldIsDateTime(),
				sSortField = FilterUtil.readProperty(that.oConfig, "filterCompList." + idx + ".component.properties.sortOrder.0.Field.String"),
				oVisualConfigModel = that.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel'),
				oModelData = jQuery.extend(true, {}, oVisualConfigModel.getProperty('/filterCompList/' + idx)),
				sModelSortField = FilterUtil.readProperty(oModelData, "component.properties.sortOrder.0.Field.String");
				// change chart type in VFD config
				that.oConfig.filterCompList[idx].component.type = chartType; // Updating new chart type to oConfig
				oEvent.getSource().data("button").setIcon(that._getChartTypeIconLink(chartType));

				// change sort order based on chart selected
				if (sSortField && sModelSortField) {
					if (chartType === "Line") {
						// for line chart sort should always be on dimension
						that.oConfig.filterCompList[idx].component.properties.sortOrder[0].Field.String = sDimension;
						oModelData.component.properties.sortOrder[0].Field.String = sDimension;

						if (bDimensionIsDateTime) {
							// in case dimension is date time the order should be descending
							// else previous order should prevail
							// Store the value of previous sort order so that when chart type is changed back, sort order is correct
							that.bSortOrder = that.oConfig.filterCompList[idx].component.properties.sortOrder[0].Descending.Boolean;
							that.oConfig.filterCompList[idx].component.properties.sortOrder[0].Descending.Boolean = true;
							oModelData.component.properties.sortOrder[0].Descending.Boolean = true;
							// Making this.bLine = true to indicate that sortorder is changed for Time based Line chart
							that.bIsTimeBasedLine = true;
						}
					} else {
						// for line chart sort should always be on measure
						that.oConfig.filterCompList[idx].component.properties.sortOrder[0].Field.String = sMeasure;
						oModelData.component.properties.sortOrder[0].Field.String = sMeasure;
						if (that.bIsTimeBasedLine) { // if sort order is changed for time based line chart, we have to revert back to old sort order when chart type is changed
							that.oConfig.filterCompList[idx].component.properties.sortOrder[0].Descending.Boolean = that.bSortOrder;
							oModelData.component.properties.sortOrder[0].Descending.Boolean = that.bSortOrder;
							that.bIsTimeBasedLine = false;
						}
						// no change in sort order required here
					}
				}

				oModelData.component.type = chartType;
				oVisualConfigModel.setProperty('/filterCompList/' + idx, oModelData);
				that.oState.oSmartFilterbar._oVariantManagement.currentVariantSetModified(true);
				that.oState.alr_visualFilterBar.updateVisualFilterBindings(true);

				bSelectionChanged = true;
				oDialog.close();
			});
			oDialog.attachBeforeClose(function() {
				//to avoid reload of charts in the dialog when chart type is not changed
				if (bSelectionChanged) {
					that._filterModified = true;
					that._reloadForm();
				}
			});
			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		_showLineChartTimeAxisPopup: function(oEvent) {
			var idx = oEvent.getSource().data("idx");
			var button = oEvent.getSource();
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(oEvent.getSource().getModel('i18n'), "VISUAL_FILTER_LINE_CHART_TIME_LINE");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft,
				items: [
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_DAYS}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_MONTH}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_QUARTERS}"
					}).data("idx", idx),
					new StandardListItem({
						title: "{i18n>VISUAL_FILTER_LINE_CHART_TIME_LINE_YEARS}"
					}).data("idx", idx)
				]
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				// add logic
				oDialog.close();
			});

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		_showChartSortPopup: function(oEvent) {
			var that = this;
			var idx = oEvent.getSource().data("idx");
			var button = oEvent.getSource();
			var i18n = oEvent.getSource().getModel('i18n');
			var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(i18n, "VISUAL_FILTER_SORTING");
			var oList = new List({
				mode: sap.m.ListMode.SingleSelectLeft,
				includeItemInSelection: true,
				items: [
					new StandardListItem({
						title: i18n.getResourceBundle().getText("VISUAL_FILTER_SORTING_ASCENDING")
					}).data("idx", idx),
					new StandardListItem({
						title: i18n.getResourceBundle().getText("VISUAL_FILTER_SORTING_DESCENDING")
					}).data("idx", idx)
				]
			});
			oList.data("button", button);
			oList.addStyleClass("sapUiSizeCompact");
			if (this.filterChartList[idx].getSortOrder()[0].Descending.Boolean) {
				oList.setSelectedItem(oList.getItems()[1], true);
			} else {
				oList.setSelectedItem(oList.getItems()[0], true);
			}
			oDialog.addContent(oList);

			oList.attachSelectionChange(function (oEvent) {
				var button = oEvent.getSource().data("button");
				var idx = button.data("idx");
				var aSortProperty = jQuery.extend(true, [], that.filterChartList[idx].getSortOrder());
				//We consider only first sortProperty, hence 0 index is used
				aSortProperty[0].Descending.Boolean = oEvent.getSource().getItems()[1].isSelected();
				if (aSortProperty[0].Descending.Boolean) {
					button.setIcon("sap-icon://sort-descending");
				} else {
					button.setIcon("sap-icon://sort-ascending");
				}
				var oSortProperty = {
					bUpdateBinding: true,
					value: aSortProperty
				};
				that.filterChartList[idx].setSortOrder(oSortProperty);
				// This triggers setSortOrder for the filter item on the bar
				// passed as an oject so that update binding can be called
				that._updateVisualFilterConfigModel(idx, '/component/properties/sortOrder', oSortProperty);
				// set sortOrder as array in the model so that it can be normally used at other places
				that._updateVisualFilterConfigModel(idx, '/component/properties/sortOrder', aSortProperty);
				that._filterModified = true;
				oDialog.close();
			});
			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.openBy(oEvent.getSource());
		},
		/**
		 * Creates the 'Add/Remove Filters' - dialog.
		 *
		 * @private
		 * @param {string} groupName filter group name
		 * @param {sap.m.Link} oLink more/clear filters link
		 */

		_createAddRemoveFiltersDialog: function(groupName, oLink) {
			var i; //, oDialog,
			var that = this;

			var oDialog = new sap.m.Dialog();
			oDialog.setTitle(this.oRb.getText("SELECT_FILTER_FIELDS"));
			oDialog.addStyleClass("sapUiPopupWithPadding");
			oDialog.addStyleClass("sapUiCompAddRemoveFilterDialog");
			oDialog.addStyleClass("sapUiSizeCompact");
			oDialog.setVerticalScrolling(true);

			var oSubHeader = new Bar();
			var oSearchField = new SearchField({
				placeholder: this.oRb.getText("FILTER_BAR_SEARCH")
			});

			this._oSearchField = oSearchField;
			oSearchField.attachLiveChange(function(oEvent) {
				that._onAddRemoveFiltersSearch(oEvent);
			});

			oSubHeader.addContentRight(oSearchField);
			oDialog.setSubHeader(oSubHeader);

			this.addRemoveList = new List({
				mode: sap.m.ListMode.MultiSelect
			});
			this.addRemoveList.setShowSeparators(ListSeparators.None);
			oDialog.addContent(this.addRemoveList);

			for (i = 0; i < this.filterCompList.length; i++) {
				if (this.filterCompList[i].obj.group.name === groupName && this.filterCompList[i].searchVisible) {
					var oListItem = new StandardListItem({
						title: this._getChartTitle(this.filterCompList[i].obj, i, true)
					}).data("idx", i);
					this.addRemoveList.addItem(oListItem);
					if (this.filterCompList[i].obj.shownInFilterDialog) {
						this.addRemoveList.setSelectedItem(oListItem, true);
					}
				}
			}
			//on selection Change of filters in more filters link
			this.addRemoveList.attachSelectionChange(function(oEvent) {
				if (oEvent) {
					var oParams = oEvent.getParameters();
					if (oParams) {
						var oListItem = oParams.listItem;
						var idx = oListItem.data("idx");
						if (oListItem) {
							var oVisibilityChange = {
								bVisible : oParams.selected,
								propertyName : that.oConfig.filterCompList[idx].component.properties.parentProperty
							};
							that.oState.alr_visualFilterBar.fireFilterChange(oVisibilityChange);
						}
					}
				}
			});
			// OK button
			var oOKButton = new Button({
				text: this.oRb.getText("FORM_PERS_DIALOG_OK")
			});
			oOKButton.attachPress(function() {
				var i;
				var items = that.addRemoveList.getItems();
				var oVisualConfigModel = that.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel'),
					oVisualConfigModelClone = jQuery.extend(true, {}, oVisualConfigModel);
				for (i = 0; i < items.length; i++) {
					var idx = items[i].data("idx");
					var bSelected = items[i].isSelected();
					//if the chart is deselected in 'change filters' dialog of a field group, update VFConfigModel to hide the chart..
					//.. in dialog and VF bar.
					oVisualConfigModelClone.setProperty('/filterCompList/' + idx + '/shownInFilterBar', bSelected);
					oVisualConfigModelClone.setProperty('/filterCompList/' + idx + '/shownInFilterDialog', bSelected);
				}
				oVisualConfigModel.setData(oVisualConfigModelClone.getData());
				//update config object when VFConfig model is updated
				that.oConfig = JSON.parse(oVisualConfigModel.getJSON());
				that.oState.alr_visualFilterBar.updateVisualFilterBindings(true);
				//to enable Restore button on change of chart type, sort order, measure field and  show in filter bar changes 
				that.oState.oSmartFilterbar._oVariantManagement.currentVariantSetModified(true);
				that._filterModified = true;
				that._reloadForm();
				oDialog.close();
			});
			oDialog.addAggregation("buttons", oOKButton);
			oDialog.setInitialFocus(this._oSearchField);
			oDialog.setContentHeight("23.25rem"); // 30.25 - 2*2.5rem - 2rem

			// Cancel button
			var oCancelButton = new Button({
				text: this.oRb.getText("FORM_PERS_DIALOG_CANCEL"),
				press: function() {
					oDialog.close();
				}
			});
			oDialog.addAggregation("buttons", oCancelButton);

			oDialog.attachAfterClose(function() {
				oDialog.destroy();
				oDialog = null;
			});

			oDialog.open();
		},
		_onAddRemoveFiltersSearch : function (oEvent) {
			var i;

			if (!oEvent) {
				return;
			}

			var parameters = oEvent.getParameters();
			if (!parameters) {
				return;
			}

			var sValue = (parameters.newValue ? parameters.newValue : "").toLowerCase();
			var items = this.addRemoveList.getItems();
			for (i = 0; i < items.length; i++) {
				var sText = (items[i].getTitle()).toLowerCase();
				items[i].setVisible(sText.indexOf(sValue) >= 0);
			}
		},
		_getChartTypeIconLink: function(icon) {
			var compMap = this.oState.alr_visualFilterBar._getSupportedFilterItemMap();
			var comp = compMap[icon];
			return !comp ? "" : comp.iconLink;
		},
		_getChartTitle: function (obj, idx, useConfig) {
			var title = "";
			if (this.filterChartList[idx]) {
				if (useConfig) {
					obj.component.properties = this.filterChartList[idx].getP13NConfig();
					title = this.oState.alr_visualFilterBar.getTitleByFilterItemConfig(obj);
				} else {
					title = this.filterChartList[idx].getTitle();
				}
			} else {
				//Provide properties from config when chart is not created (hidden)
				obj.component.properties = this.oConfig.filterCompList[idx].component.properties;
				title = this.oState.alr_visualFilterBar.getTitleByFilterItemConfig(obj);
			}
			return title;
		},
		_adjustToolbarIcons: function(idx) {
			if (this.filterCompList[idx].obj.component.type === "Line") {
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[1].setVisible(true);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[2].setVisible(false);
			} else {
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[1].setVisible(false);
				this.filterCompList[idx].toolbar.getItems()[1].getItems()[2].setVisible(true);
			}
		},
		_updateVisualFilterConfigModel: function(idx, path, value, bIsUpdate) {
			var oVisualConfigModel = this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel');
			oVisualConfigModel.setProperty('/filterCompList/' + idx + path, value);
			if (bIsUpdate) {
				//To reload the aggregation,so that the chart will be rendered
				var oModelData = jQuery.extend(true, {}, oVisualConfigModel.getProperty('/filterCompList/' + idx));
				oVisualConfigModel.setProperty('/filterCompList/' + idx, oModelData);
				this.oState.alr_visualFilterBar.updateVisualFilterBindings(true);
			}
			//update config object when VFConfig model is updated
			this.oConfig = JSON.parse(oVisualConfigModel.getJSON());
			//to enable Restore button on change of chart type, sort order, measure field and  show in filter bar changes 
			this.oState.oSmartFilterbar._oVariantManagement.currentVariantSetModified(true);
		},
		/**
		 * Reacts to search from 'Filters'- dialog.
		 *
		 * @private
		 * @param {object} oEvent containing the search string
		 */
		_triggerSearchInFilterDialog: function (oEvent) {
			var i;

			if (!oEvent) {
				return;
			}

			var parameters = oEvent.getParameters();
			if (!parameters) {
				return;
			}

			var sValue = (parameters.newValue ? parameters.newValue : "").toLowerCase();
			for (i = 0; i < this.oConfig.filterCompList.length; i++) {
				var obj = this.oConfig.filterCompList[i].component.properties;
				// Search inside dialog looks for matches in parentProperty as well as measurefield
				this.oConfig.filterCompList[i].searchVisible = (obj.parentProperty.toLowerCase().indexOf(sValue) >= 0) || (obj.measureField.toLowerCase().indexOf(sValue) >= 0);
			}
			this._reloadForm();
		}
	});

	/**
	 * @private
	 * [_createPopoverDialog description]
	 * @param  {object} i18n object
	 * @param  {object} title string to display in dialog
	 * @return {object} oDialog object
	 */
	sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog = function(i18n, title) {
		//to avoid multiple popovers being created on each press event of the chart toolbar buttons
		if (this._oPopoverDialog) {
			this._oPopoverDialog.destroy();
		}
		this._oPopoverDialog = new sap.m.Popover();
		this._oPopoverDialog.setTitle(i18n.getResourceBundle().getText(title));
		this._oPopoverDialog.setPlacement(sap.m.PlacementType.PreferredBottomOrFlip);
		this._oPopoverDialog.addStyleClass("sapUiPopupWithPadding");
		return this._oPopoverDialog;
	};

	sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createFilterItemSelectedList = function(oChart, oDialog) {
		var oList = new List({
			mode: sap.m.ListMode.Delete
		}),
		// get a clone of dimension filter so that _filter model is not updated yet
		oFilters,
		sFilterRestriction = oChart.getFilterRestriction();

		oList.data("chart", oChart);

		if (sFilterRestriction === 'multiple') {
			// multi-value
			oFilters = jQuery.extend(true, {}, oChart.getDimensionFilter());
			var aFilterItems = (oFilters && oFilters.items) ? oFilters.items : undefined,
			aFilterRanges = (oFilters && oFilters.ranges) ? oFilters.ranges : undefined,
			aFilterValue = (oFilters && oFilters.value) ? oFilters.value : null;
			oFilters = jQuery.extend(true, {}, oChart.getDimensionFilter());
			if (aFilterItems) {
				for (var i = 0; i < aFilterItems.length; i++) {
					var oListItem = new StandardListItem({
						title: aFilterItems[i].text ? aFilterItems[i].text : aFilterItems[i].key
					});
					// add custom data to determine whether value is part of items/ranges/value
					if ( oListItem ) {
						oListItem.addCustomData(new sap.ui.core.CustomData({
							key: 'items',
							value: i
						}));
					}
					oList.addItem(oListItem);
				}
			}


			if (aFilterRanges) {
				for (var i = 0; i < aFilterRanges.length; i++) {
					var oListItem = new StandardListItem({
						title: aFilterRanges[i].tokenText ? aFilterRanges[i].tokenText : FilterUtil.createTitleFromCode(aFilterRanges[i])
					});
					// add custom data to determine whether value is part of items/ranges/value
					// so that accessing the filter is easier while it is removed from the list
					oListItem.addCustomData(new sap.ui.core.CustomData({
						key: 'ranges',
						value: i
					}));
					oList.addItem(oListItem);
				}
			}

			// consider user typed in values
			if (aFilterValue) {
				var oListItem = new StandardListItem({
					title: aFilterValue
				});
				// add custom data to determine whether value is part of items/ranges/value
				// so that accessing the filter is easier while it is removed from the list
				oListItem.addCustomData(new sap.ui.core.CustomData({
					key: 'value'
				}));
				oList.addItem(oListItem);
			}
		} else {
			// single-value
			oList.addItem( new StandardListItem({ title: oChart.getDimensionFilter() }));
		}

		oList.attachDelete(function (oEvent) {
			var oItem = oEvent.getParameter("listItem"),
			chart = oList.data('chart'),
			oDimensionFilters;

			if (sFilterRestriction === 'single') {
				oDimensionFilters = null;
			} else {
				oDimensionFilters = jQuery.extend(true, {}, chart.getDimensionFilter());
				var aCustomData = oItem.getCustomData()[0],
				sFilterType = aCustomData.getKey(),
				aFilters = oDimensionFilters[sFilterType];
				if (sFilterType !== 'value') {
					// if type is items or ranges get index for filter
					var sIndex = aCustomData.getValue();
					// and remove index from filters
					aFilters.splice(sIndex, 1);
				} else {
					oDimensionFilters.value = null;
				}
			}
			oList.removeItem(oItem);
			chart.setDimensionFilter(oDimensionFilters);
			chart.fireFilterChange();
			// remove content from Dialog and add alist to dialog again
			// so that custom data (items/ranges/value) of list item
			// is always in sync with indexes of dimension filter
			oDialog.removeContent(oList);
			var oNewList = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createFilterItemSelectedList(chart, oDialog);
			// add new list to dialog only if list has list items
			if (oNewList.getItems().length > 0) {
				oDialog.addContent(oNewList);
				// setting the focus to dialog keeps the dialog open
				oDialog.focus();
			} else {
				oDialog.close();
			}
		});

		return oList;
	};

	/**
	 * Launches the All Filters Popup
	 *
	 * @public
	 * @param {Control}  oControl the control requesting the popup
	 * @param {Chart}    oChart the selected chart
	 */
	sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController.launchAllFiltersPopup = function(oControl, oChart, i18n) {
		var oDialog = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createPopoverDialog(i18n, "VISUAL_FILTER_ALL_SELECTED_FILTERS"),
		oList = sap.suite.ui.generic.template.AnalyticalListPage.controller.VisualFilterDialogController._createFilterItemSelectedList(oChart, oDialog);
		oDialog.addContent(oList);
		oDialog.addStyleClass("sapUiSizeCompact");
		oDialog.addStyleClass("sapSmartTemplatesAnalyticalListPageSelectedLinkDialog");

		//Adding a footer bar with a clear all button
		var oFooter = new sap.m.Bar();
		var oClearButton = new Button({
			text: i18n.getResourceBundle().getText("CLEAR_FILTERS_ALL"),
			press: function(oEvent) {
				// reset all filters to default
				var chart = oList.data('chart'),
				sFilterRestriction = chart.getFilterRestriction(),
				oDimensionFilters;
				if (sFilterRestriction === 'multiple') {
					oDimensionFilters = jQuery.extend(true, {}, chart.getDimensionFilter());
					oDimensionFilters.items = [];
					oDimensionFilters.ranges = [];
					oDimensionFilters.value = null;
				} else {
					oDimensionFilters = null;
				}
				// remove filter list from the dialog
				oDialog.removeContent(oList);
				// set dimension filter to trigger two-way binding
				chart.setDimensionFilter(oDimensionFilters);
				chart.fireFilterChange();
				// setting the focus to dialog keeps the dialog open
				oDialog.close();
			}
		});
		oFooter.addContentRight(oClearButton);
		oDialog.setFooter(oFooter);
		oDialog.attachAfterClose(function() {
			oDialog.destroy();
			oDialog = null;
		});

		oDialog.openBy(oControl);
	};

	return vfdController;
});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.util.CriticalityUtil') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.util.CriticalityUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil",[
	"sap/ui/base/Object",
	"sap/ui/model/Context",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/OperationCode",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
	"jquery.sap.global"
	],  function(BaseObject, Context, OperationCode, FilterUtil, jQuery) {
		"use strict";
	var POSITIVE = "Positive",
	NEGATIVE = "Negative",
	CRITICAL = "Critical",
	NEUTRAL = "Neutral",
	GOOD = "Good",
	ERROR = "Error",
	TARGET = "Target",
	MAXIMIZE = "Maximize",
	MINIMIZE = "Minimize";
	var CriticalityUtil = BaseObject.extend("sap.suite.ui.generic.template.AnalyticalListPage.util.CriticalityUtil");
		/**
		* This function set values for all the keys
		* @param  {number} vToleranceLow toleranceLow value from annotations
		* @param  {number} vToleranceHigh deviationLow value from annotations
		* @param  {number} vDeviationLow toleranceHigh value from annotations
		* @param  {number} vDeviationHigh toleranceHigh value from annotations
		* @param {number} vValue Value for comparison
		*/
		CriticalityUtil.setVals = function(vToleranceLow, vToleranceHigh, vDeviationLow, vDeviationHigh, vValue) {
			this.toleranceLow = vToleranceLow;
			this.toleranceHigh = vToleranceHigh;
			this.deviationLow = vDeviationLow;
			this.deviationHigh = vDeviationHigh;
			this._value = vValue;
			this.state = undefined;
		};
		/**
		* This calculate the Criticality color for Maximizing KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		CriticalityUtil.Maximize = function() {
			if (this.toleranceLow || this.deviationLow) {
				if (this._value >= this.toleranceLow) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value < this.deviationLow) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		};
		CriticalityUtil.Maximizing = function(){
			this.Maximize();
		};
		/**
		* This function calculate the the criticality color for Minimizing KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		CriticalityUtil.Minimize = function(){
			if (this.toleranceHigh || this.deviationHigh) {
				if (this._value <= this.toleranceHigh) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value > this.deviationHigh) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		};
		CriticalityUtil.Minimizing = function(){
			this.Minimize();
		};
		/**
		* This function calculate the Criticality color for Target KPI
		* @return {state} returns the state for Criticality color indicator
		*/
		CriticalityUtil.Target = function(){
			if (this.toleranceLow && this.toleranceHigh) {
				if (this._value >= this.toleranceLow && this._value <= this.toleranceHigh) {
					this.state = sap.m.ValueColor.Good;
				} else if (this._value < this.deviationLow || this._value > this.deviationHigh) {
					this.state = sap.m.ValueColor.Error;
				} else {
					this.state = sap.m.ValueColor.Critical;
				}
			}
			return this.state;
		};
		/**
		* This function returns the datapoint associated with the particular chart
		* @param {oModel} The model object
		* @param {me} The particular FilterItemChart context
		* @return {oDatapoint} returns Datapoint Object related to that chart
		*/
		CriticalityUtil.getDataPoint = function(oModel, me) {
			var metaModel = oModel.getMetaModel(),
			oEntityType = metaModel.getODataEntityType(metaModel.getODataEntitySet(me.getEntitySet()).entityType),
			oChart = me.getChartQualifier() in oEntityType ? oEntityType[me.getChartQualifier()] : undefined,
			oDatapoint,
			count  = 0,
			measureAttribute = oChart ? oChart.MeasureAttributes : undefined;
			if (measureAttribute) {
				for (var i = 0; i < measureAttribute.length; i++) {
					if (measureAttribute[i].Measure && measureAttribute[i].Measure.PropertyPath === me.getMeasureField()) {
						oDatapoint = measureAttribute[i].DataPoint ? oEntityType[measureAttribute[i].DataPoint.AnnotationPath.substring(1)] : undefined;
						if (oDatapoint) {
							count++;
							break;
						}
					}
				}
			}
			if (count === 0) {
				jQuery.sap.log.error("There is no datapoint for the measure " + me.getMeasureField());
			}
			return oDatapoint;
		};
		/**
		* This function returns the path properties if any mentioned in the datapoint annoataion
		* @param {oDatapoint} Datapoint Object related to that chart
		* @return [aRelativeToProperties] returns the array of path properties in datapoint annotation
		*/
		CriticalityUtil.getCriticalityRefProperties = function(oDataPoint) {
			var aRelativeToProperties = [];
			var crit = oDataPoint.Criticality;
			if (crit) {
				var sCritPath = FilterUtil.readProperty(crit,"Path");
				if (sCritPath) {
					aRelativeToProperties.push(sCritPath);
				}
			} else {
				var cCalc = oDataPoint.CriticalityCalculation,
				sImproveDirection = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ImprovementDirection.EnumMember") ? FilterUtil.getPrimitiveValue(oDataPoint.CriticalityCalculation.ImprovementDirection) : undefined,
				sDeviationRangeLow = FilterUtil.readProperty(cCalc,"DeviationRangeLowValue.Path"),
				sDeviationRangeHigh = FilterUtil.readProperty(cCalc,"DeviationRangeHighValue.Path"),
				sToleranceRangeLow = FilterUtil.readProperty(cCalc,"ToleranceRangeLowValue.Path"),
				sToleranceRangeHigh = FilterUtil.readProperty(cCalc,"ToleranceRangeHighValue.Path");
				if (sImproveDirection === MAXIMIZE) {
					if (sDeviationRangeLow) {
						aRelativeToProperties.push(sDeviationRangeLow);
					}
					if (sToleranceRangeLow) {
						aRelativeToProperties.push(sToleranceRangeLow);
					}
				} else if (sImproveDirection === MINIMIZE) {
					if (sToleranceRangeHigh) {
						aRelativeToProperties.push(sToleranceRangeHigh);
					}
					if (sDeviationRangeHigh) {
						aRelativeToProperties.push(sDeviationRangeHigh);
					}
				} else if (sImproveDirection === TARGET) {
					if (sDeviationRangeLow) {
						aRelativeToProperties.push(sDeviationRangeLow);
					}
					if (sToleranceRangeLow) {
						aRelativeToProperties.push(sToleranceRangeLow);
					}
					if (sDeviationRangeHigh) {
						aRelativeToProperties.push(sDeviationRangeHigh);
					}
					if (sToleranceRangeHigh) {
						aRelativeToProperties.push(sToleranceRangeHigh);
					}
				}
			}
			return aRelativeToProperties.length > 0 ? aRelativeToProperties : undefined;
		};
		/**
		* This function returns the chart data with color property added to it
		* @param {oDatapoint} Datapoint Object related to that chart
		* @param {data} Data returned from back end with result array
		* @param {measureField} measureField for which the Criticality is calculated
		* @return {data} returns the data object obtained from back end but with Color property added to it
		*/
		CriticalityUtil.CalculateCriticality = function(oDataPoint,data,measureField) {
			for (var i = 0; i < data.results.length; i++) {
				if (oDataPoint && oDataPoint.Criticality) {
					var criticality = (oDataPoint.Criticality.EnumMember || oDataPoint.Criticality.Path) ? FilterUtil.getPathOrPrimitiveValue(oDataPoint.Criticality) : undefined;
					if (criticality) {
						if (criticality.indexOf("path") !== -1) {
							criticality = oDataPoint.Criticality.Path ? data.results[i][oDataPoint.Criticality.Path] : undefined;
						}
						if (criticality === NEGATIVE) {
							data.results[i].color = ERROR;
						} else if (criticality === POSITIVE) {
							data.results[i].color = GOOD;
						} else if (criticality === CRITICAL) {
							data.results[i].color = CRITICAL;
						} else if (criticality === NEUTRAL) {
							data.results[i].color = NEUTRAL;
						}
					}
				} else {
					var sImproveDirection = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ImprovementDirection.EnumMember") ? FilterUtil.getPrimitiveValue(oDataPoint.CriticalityCalculation.ImprovementDirection) : undefined;
					if (sImproveDirection) {
						//checks if each of the threshold values are defined, if not, returns undefined
						//If defined and value is hard-coded, returns that value and if path is mentioned, returns value from path
						if (FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ToleranceRangeLowValue")) {
							var toleranceLow = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ToleranceRangeLowValue.Int") ? Number(oDataPoint.CriticalityCalculation.ToleranceRangeLowValue.Int) : Number(data.results[i][oDataPoint.CriticalityCalculation.ToleranceRangeLowValue.Path]);
						}
						if (FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ToleranceRangeHighValue")) {
							var toleranceHigh = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.ToleranceRangeHighValue.Int") ? Number(oDataPoint.CriticalityCalculation.ToleranceRangeHighValue.Int) : Number(data.results[i][oDataPoint.CriticalityCalculation.ToleranceRangeHighValue.Path]);
						}
						if (FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.DeviationRangeLowValue")) {
							var deviationLow = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.DeviationRangeLowValue.Int") ? Number(oDataPoint.CriticalityCalculation.DeviationRangeLowValue.Int) : Number(data.results[i][oDataPoint.CriticalityCalculation.DeviationRangeLowValue.Path]);
						}
						if (FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.DeviationRangeHighValue")) {
							var deviationHigh = FilterUtil.readProperty(oDataPoint,"CriticalityCalculation.DeviationRangeHighValue.Int") ? Number(oDataPoint.CriticalityCalculation.DeviationRangeHighValue.Int) : Number(data.results[i][oDataPoint.CriticalityCalculation.DeviationRangeHighValue.Path]);
						}
						//This is to ensure that any value other than number is treated as undefined
						if (isNaN(deviationLow)) {
							deviationLow = undefined;
						}
						if (isNaN(deviationHigh)) {
							deviationHigh = undefined;
						}
						if (isNaN(toleranceLow)) {
							toleranceLow = undefined;
						}
						if (isNaN(toleranceHigh)) {
							toleranceHigh = undefined;
						}
						var value = Number(data.results[i][measureField]);
						this.setVals(toleranceLow, toleranceHigh, deviationLow, deviationHigh, value);
						data.results[i].color = (this[sImproveDirection]());
					}
				}
			}
			return data;
		};
	return CriticalityUtil;
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation') ) {
/* global hasher */
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.navpopover.LinkData'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation",["jquery.sap.global", "sap/ui/model/json/JSONModel", "sap/m/ObjectIdentifier", "sap/m/Table",
		"sap/m/Text", "sap/ui/comp/smartfield/SmartField", "sap/ui/generic/app/navigation/service/SelectionVariant",
		"sap/suite/ui/generic/template/ListReport/extensionAPI/ExtensionAPI", "sap/m/MessageBox", "sap/suite/ui/generic/template/js/AnnotationHelper",
		"sap/suite/ui/generic/template/lib/MessageUtils", 
		"sap/suite/ui/generic/template/ListReport/controller/IappStateHandler", "sap/suite/ui/generic/template/ListReport/controller/MultipleViewsSingleTableModeHelper",
		"sap/ui/table/Table", "sap/ui/table/AnalyticalTable", "sap/ui/model/Filter", "sap/ui/comp/navpopover/LinkData", "sap/suite/ui/generic/template/ListReport/controller/SmartChartController"],
	function(jQuery, JSONModel, ObjectIdentifier, Table, Text, SmartField, SelectionVariant, ExtensionAPI, MessageBox, AnnotationHelper, MessageUtils, IappStateHandler, MultipleViewsSingleTableModeHelper, UiTable, AnalyticalTable, Filter, LinkData, SmartChartController) {
		"use strict";

		return {
			getMethods: function(oViewProxy, oTemplateUtils, oController) {
				var oState = {}; // contains instance attributes that are shared with helper classes:
				                 // oSmartFilterbar, oSmartTable, oIappStateHandler, oMultipleViewsSingleTableModeHelper, bWorkListEnabled
				                 // aSmartTables, oIconTabBar (if using table tabs)
				                 //and (from oIappStateHandler) function getCurrentAppState. 
				                 // Initialized in onInit.
				//PoC Chart begin
				// Make the fnUpdateTableOnSelectionChange function available for others via the oState object
				oState.fnUpdateTableOnSelectionChange = fnUpdateTableOnSelectionChange;
				//PoC Chart end
				var bIsStartingUp = true;
				var oFclProxy;

				// only needed for table tabs, initialized in fnPrepare
			//	var oTableTabData;

				// -- Begin of methods that are used in onInit only
				function fnSetIsLeaf() {
					var oComponent = oController.getOwnerComponent();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/isLeaf", oComponent.getIsLeaf());
				}

				function fnSetShareModel() {
					var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
					var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";
					// share Model: holds all the sharing relevant texts and info used in the XML view
					var oShareInfo = {
						// BOOKMARK
						bookmarkIcon: sBookmarkIcon,
						bookmarkCustomUrl: function() {
							var sHash = hasher.getHash();
							return sHash ? ("#" + sHash) : window.location.href;
						},
						bookmarkServiceUrl: function() {
							var oTable = oState.oSmartTable.getTable();
							var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
							return oBinding ? oBinding.getDownloadUrl() + "&$top=0&$inlinecount=allpages" : "";
						},
						// JAM
						isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
					};
					var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
				}

				// TABLE TABS ONLY
				function fnPrepareForTableTabs() {
					var oAppComponent = oController.getOwnerComponent().getAppComponent();
					var oConfig = oAppComponent.getConfig();
					if (oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings && oConfig.pages[0].component.settings.quickVariantSelectionX && oConfig.pages[0].component.settings.quickVariantSelectionX.variants) {
						oState.oTableTabData = {
							aTableIsDirty: {},
							oCurrentBindingParams: {} // to send the correct $count requests, we need to access the current binding parameters
						};
						oState.oIconTabBar = oController.byId("template::IconTabBar");
						if (oConfig.pages[0].component.settings.quickVariantSelectionX.showCounts) {
							var aItems = oState.oIconTabBar.getItems();
							for (var idx in aItems) {
								fnSetCount(aItems, idx, 0); // initially, set all counts to 0
							}
						}
						oState.aSmartTables = {};
						for (var i in oConfig.pages[0].component.settings.quickVariantSelectionX.variants) {
							var sTabKey = sap.suite.ui.generic.template.js.AnnotationHelper.getIconTabFilterKey(oConfig.pages[0].component.settings.quickVariantSelectionX.variants[i]);
							var sTableId = sap.suite.ui.generic.template.js.AnnotationHelper.getSmartTableId(oConfig.pages[0].component.settings.quickVariantSelectionX.variants[i]);
							oState.aSmartTables[sTabKey] = oController.byId(sTableId);
							if (!oState.oSmartTable) {
								oState.oSmartTable = oState.aSmartTables[sTabKey]; // the first table is the default table that is initially visible
							} else {
								oState.aSmartTables[sTabKey].setVisible(false);
							}
							oState.oTableTabData.aTableIsDirty[oState.aSmartTables[sTabKey].getId()] = false;
						}
						// Attach to “Search” event on SmartFilterBar (in init of the view controller)
						oState.oSmartFilterbar.attachSearch(function(oEvent){
							oState.oSmartTable._reBindTable(oEvent);
							if (oConfig.pages[0].component.settings.quickVariantSelectionX.showCounts) {
								fnUpdateTableTabCounts();
							}
							for (var i in oState.oTableTabData.aTableIsDirty) {
								oState.oTableTabData.aTableIsDirty[i] = true;
							}
							oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()] = false;
							oState.oTableTabData.searchButtonPressed = true;
						});
						if (oConfig.pages[0].component.settings.quickVariantSelectionX.enableAutoBinding) {
							oState.oSmartFilterbar.search(); //trigger enableAutoBinding without getting a cancelled batch request 
						}
					}
				}
				// -- End of used in onInit only

				function onSmartFilterBarInitialise(oEvent){
					oController.onInitSmartFilterBarExtension(oEvent);
					oState.oIappStateHandler.onSmartFilterBarInitialise();
				}

				function onSmartFilterBarInitialized(){
					var oAppStatePromise = oState.oIappStateHandler.parseUrlAndApplyAppState();
					oAppStatePromise.then(function(){
						bIsStartingUp = false;
					}, function(oError){ // improve?
						if (oError instanceof Error) {
							oError.showMessageBox(); // improve?
							bIsStartingUp = false;
						}
					});
				}

				function onFilterChange(){
					if (!bIsStartingUp){
						oState.oIappStateHandler.changeIappState(true, false);
					}
				}

				function fnUpdateTableOnSelectionChange(oTable) {
					var oModel = oTable.getModel(),
					oPrivModel = oTable.getModel("_templPriv");
					var oMetaModel = oModel.getMetaModel(),
						oEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet()),
						oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];
					var bDeleteEnabled = false;
					if (sap.suite.ui.generic.template.js.AnnotationHelper.areDeleteRestrictionsValid(oMetaModel, oEntitySet.entityType, oDeleteRestrictions)) {
						var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";
						var bAllLocked = true;
						var bAllNotDeletable = (sDeletablePath && sDeletablePath !== ""); // if Deletable-Path is undefined, then the items are deletable.
						var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
						if (aContexts.length > 0) {
							for (var i = 0; i < aContexts.length; i++) {
								var oObject = oModel.getObject(aContexts[i].getPath());
								// check if item is locked
								if (!(oObject.IsActiveEntity && oObject.HasDraftEntity && oObject.DraftAdministrativeData && oObject.DraftAdministrativeData.InProcessByUser)) {
									bAllLocked = false;
								}
								// check if item is deletable
								if (bAllNotDeletable) {
									if (oModel.getProperty(sDeletablePath, aContexts[i])) {
										bAllNotDeletable = false;
									}
								}
								if (!bAllLocked && !bAllNotDeletable) {
									bDeleteEnabled = true;
									break;
								}
							}
						}
					}
					oPrivModel.setProperty("/listReport/deleteEnabled", bDeleteEnabled);
					oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oTable);
					//PoC Chart begin
					if (oTable instanceof sap.ui.comp.smartchart.SmartChart) {
						return;
					}
					//PoC Chart end
					oTemplateUtils.oCommonUtils.setEnabledFooterButtons(oTable);
				}
				
				function onMultipleViewSingleTableModeVariantChanged(oEvent){
					oState.oMultipleViewsSingleTableModeHelper.onAfterVariantChanged(oEvent);                         	
				}

				// TABLE TABS ONLY
				function fnUpdateTableTabCounts() {
					var oModel = oState.oSmartTable.getModel();
					var oIconTabBar = oController.byId("template::IconTabBar");
					var aFilterTabs = oIconTabBar.getItems();

					for (var iTabIdx in aFilterTabs) {
						var aFilters = [];
						var oTmpTable = oController.byId("listReport-" + aFilterTabs[iTabIdx].getKey());
						var aSelectionVariantFilters = oTemplateUtils.oCommonUtils.getSelectionVariantFilters(oTmpTable);
						for (var i in oState.oTableTabData.oCurrentBindingParams.filters) {
							aFilters.push(oState.oTableTabData.oCurrentBindingParams.filters[i]); // copy array content to prevent call by reference
						}
						for (var i in aSelectionVariantFilters) {
							aFilters.push(aSelectionVariantFilters[i]);
						}
						var sTableEntitySet = oTmpTable.getEntitySet();
						oModel.read("/" + sTableEntitySet + "/$count", {
							urlParameters: oState.oTableTabData.oCurrentBindingParams.parameters.custom,
							filters: aFilters,
							groupId: "updateTabCounts",
							success: fnSetCount.bind(null, aFilterTabs, iTabIdx),
							error: function(oData, oResponse) {
								// clarify: how to indicate/handle errors?
							}
						});
					}
				}

				// TABLE TABS ONLY
				function fnSetCount(aFilterTabs, index, oData) {
					aFilterTabs[index].setCount(oData);
				}

				// TABLE TABS ONLY
				function fnStoreAndApplyFiltersForTableTabs(oBindingParams, oTable) {
					oState.oTableTabData.oCurrentBindingParams.filters = [];
					for (var i in oBindingParams.filters) {
						oState.oTableTabData.oCurrentBindingParams.filters.push(oBindingParams.filters[i]);
					}
					oState.oTableTabData.oCurrentBindingParams.parameters = oBindingParams.parameters;
					var aSelectionVariantFilters = oTemplateUtils.oCommonUtils.getSelectionVariantFilters(oTable);
					for (var i in aSelectionVariantFilters) {
						oBindingParams.filters.push(aSelectionVariantFilters[i]);
					}
				}
				
				function fnOnSemanticObjectLinkNavigationPressed(oEvent){
					var oEventParameters = oEvent.getParameters();
					var oEventSource = oEvent.getSource();
					oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationPressed(oEventSource, oEventParameters);
				}
				
				function fnOnSemanticObjectLinkNavigationTargetObtained(oEvent) {
					var oEventParameters, oEventSource;
					oEventParameters = oEvent.getParameters();
					oEventSource = oEvent.getSource();	//set on semanticObjectController	
					oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationTargetObtained(oEventSource, oEventParameters, oState, undefined, undefined);
				}

				function fnOnSemanticObjectLinkNavigationTargetObtainedSmartLink(oEvent) {
					var oMainNavigation, sTitle, oCustomData, sDescription, oEventParameters, oEventSource;
					oMainNavigation = oEvent.getParameters().mainNavigation;
					oEventParameters = oEvent.getParameters();
					oEventSource = oEvent.getSource(); //set on smart link
					if (oMainNavigation) {
						sTitle = oEventSource.getText && oEventSource.getText();
						oCustomData = oTemplateUtils.oCommonUtils.getCustomData(oEvent);
						if (oCustomData && oCustomData["LinkDescr"]) {
							sDescription = oCustomData["LinkDescr"];
							oMainNavigation.setDescription(sDescription);
						}
					}
					oEventSource = oEventSource.getParent().getParent().getParent().getParent(); //set on smart table
					oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationTargetObtained(oEventSource, oEventParameters, oState, sTitle, oMainNavigation);
					//oEventParameters.show(sTitle, oMainNavigation, undefined, undefined);
				}

				// Generation of Event Handlers
				return {
					onInit: function() {
						oState.oSmartFilterbar = oController.byId("listReportFilter");
						oState.oSmartTable = oController.byId("listReport");
						oFclProxy = oTemplateUtils.oServices.oApplication.getFclProxyForView(0);
						oState.bLoadListAndFirstEntryOnStartup = oFclProxy && oFclProxy.isListAndFirstEntryLoadedOnStartup && oFclProxy.isListAndFirstEntryLoadedOnStartup();

						// TABLE TABS ONLY
						fnPrepareForTableTabs();
						// (END) TABLE TABS ONLY

						// Chart PoC begin
						var oAppComponent = oController.getOwnerComponent().getAppComponent();
						var oConfig = oAppComponent.getConfig();
						// check if worklist is enabled
						oState.bWorkListEnabled = oConfig.pages[0].component.settings && oConfig.pages[0].component.settings.isWorklist || false;
						if (oConfig && oConfig.pages[0] && oConfig.pages[0].component && oConfig.pages[0].component.settings && oConfig.pages[0].component.settings._quickVariantSelectionX &&
								oConfig.pages[0].component.settings._quickVariantSelectionX.variants) {
							oState.oSmartChartController = new SmartChartController(oState, oController, oTemplateUtils);
							oState.oSmartChartController.onSmartChartInit();
						}
						oState.oTemplateUtils = oTemplateUtils;
						//Chart PoC end

						oState.oIappStateHandler = new IappStateHandler(oState, oController, oTemplateUtils.oCommonUtils.getNavigationHandler());
						oTemplateUtils.oServices.oApplication.registerStateChanger({
							isStateChange: oState.oIappStateHandler.isStateChange
						});
						// Give component access to some methods
						oViewProxy.getUrlParameterInfo = oState.oIappStateHandler.getUrlParameterInfo;
						oViewProxy.onComponentActivate = function(){
							if (!bIsStartingUp){
								oState.oIappStateHandler.parseUrlAndApplyAppState();
							}
						};
						oViewProxy.refreshBinding = function(){
							// refresh list, but only if the list is currently showing data
							if (oState.oIappStateHandler.areDataShownInTable()){
								oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
							}
						};

						fnSetIsLeaf();
						fnSetShareModel();
						var oComponent = oController.getOwnerComponent();
						oController.byId("template::FilterText").attachBrowserEvent("click", function () {
							oController.byId("page").setHeaderExpanded(true);
						});
						var oTemplatePrivateModel = oComponent.getModel("_templPriv");
						// oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", true);
						// setting isHeaderExpanded property in onSmartFilterBarInitialise

						// set property for enable/disable of the Delete button
						oTemplatePrivateModel.setProperty("/listReport/deleteEnabled", false);

						// Chart PoC begin
						var oView, oBody, sCozyClass = "sapUiSizeCozy", sCompactClass = "sapUiSizeCompact", sCondensedClass = "sapUiSizeCondensed";
						//At switching between tables and charts the UI "jumps" so this should prevent it
						if (oState.oSmartTable instanceof sap.ui.comp.smartchart.SmartChart) {
							oView = oController.getView();
							oBody = jQuery(document.body);
							if (oBody.hasClass(sCozyClass) || oView.hasStyleClass(sCozyClass)){
								oState.oSmartTable.addStyleClass(sCozyClass);
							} else if (oBody.hasClass(sCompactClass) || oView.hasStyleClass(sCompactClass)){
								var bCondensedTableLayout = oComponent.getComponentContainer().getSettings().condensedTableLayout;
								if (bCondensedTableLayout === true){
									//https://openui5.hana.ondemand.com/#docs/guide/13e6f3bfc54c4bd7952403e20ff447e7.html
									//setting sapUiSizeCompact AND sapUiSizeCondensed might mix up the required css
									//oState.oSmartTable.addStyleClass(sCompactClass);
									oState.oSmartTable.addStyleClass(sCondensedClass);
								} else {
									oState.oSmartTable.addStyleClass(sCompactClass);
								}
							}
						}
						
						//do not execute the coding below for Chart
//						if (!(oState.oSmartTable instanceof sap.ui.comp.smarttable.SmartTable)) {
//							return;
//						}

						//Chart PoC end
						//the following layout definition should only be executed for the List Report (Object Page will use here the new complex table concept)
						//condensed shouldn't be the default, only if the manifest specifies it
						//compare the following logic with Application.js->getContentDensityClass:
						//compact and condensed needs to be set together
						if (oState.oSmartTable instanceof sap.ui.comp.smarttable.SmartTable) {
							var oTable = oState.oSmartTable.getTable();
							if ( oTable instanceof UiTable || oTable instanceof AnalyticalTable) {
								oView = oController.getView();
								oBody = jQuery(document.body);
								if (oBody.hasClass(sCozyClass) || oView.hasStyleClass(sCozyClass)){
									oState.oSmartTable.addStyleClass(sCozyClass);
								} else if (oBody.hasClass(sCompactClass) || oView.hasStyleClass(sCompactClass)){
									var bCondensedTableLayout = oComponent.getComponentContainer().getSettings().condensedTableLayout;
									if (bCondensedTableLayout === true){
										//https://openui5.hana.ondemand.com/#docs/guide/13e6f3bfc54c4bd7952403e20ff447e7.html
										//setting sapUiSizeCompact AND sapUiSizeCondensed might mix up the required css
										//oState.oSmartTable.addStyleClass(sCompactClass);
										oState.oSmartTable.addStyleClass(sCondensedClass);
									} else {
										oState.oSmartTable.addStyleClass(sCompactClass);
									}
								}
							}
						}
						if (oState.bWorkListEnabled) {
							oState.oSmartFilterbar.setSuppressSelection(false);
							oState.oSmartFilterbar.search();
						}
					},

					handlers: {
						addEntry: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false, oState.oSmartFilterbar);
							}, jQuery.noop, oState);
						},
						deleteEntries: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.deleteEntries(oEvent);
						},
						updateTableTabCounts: fnUpdateTableTabCounts,
						onSelectionChange: function(oEvent) {
							var oTable = oEvent.getSource();
							fnUpdateTableOnSelectionChange(oTable);
						},
						onChange: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
						},
						onSmartFieldUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oState);
						},
						onBreadCrumbUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBreadCrumbUrlPressed(oEvent, oState);
						},
						onContactDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
						},
						onSmartFilterBarInitialise: onSmartFilterBarInitialise,
						onSmartFilterBarInitialized: onSmartFilterBarInitialized,

						onBeforeSFBVariantFetch: function() {
							oState.oIappStateHandler.onBeforeSFBVariantFetch();
						},

						onAfterSFBVariantSave: function(){
							oState.oIappStateHandler.onAfterSFBVariantSave();
						},

						onAfterSFBVariantLoad: function(oEvent) {
							oState.oIappStateHandler.onAfterSFBVariantLoad(oEvent);
						},
						onDataReceived: function(oEvent){
							oTemplateUtils.oCommonEventHandlers.onDataReceived(oEvent);
							oState.oMultipleViewsSingleTableModeHelper.onDataReceived(oEvent);

							var oTable = oEvent.getSource().getTable();
							oFclProxy.handleDataReceived(oTable, oState, oTemplateUtils);
						},
						onBeforeRebindTable: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent, {
								determineSortOrder: oState.oMultipleViewsSingleTableModeHelper.determineSortOrder
							});
							oController.onBeforeRebindTableExtension(oEvent);
							// TABLE TABS ONLY
							if (oState.oTableTabData) {
								fnStoreAndApplyFiltersForTableTabs(oEvent.getParameter("bindingParams"), oEvent.getSource());
							}
							oState.oMultipleViewsSingleTableModeHelper.onBeforeRebindTable(oEvent);                      
						},
						onShowDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oState);
						},
						onListNavigate: function(oEvent) {
							if (!oController.onListNavigationExtension(oEvent)) {
								oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oState);
							}
						},
						onCallActionFromToolBar: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oState);
						},
						onDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent, oState);
						},
						onDataFieldWithIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldWithIntentBasedNavigation(oEvent, oState);
						},
						onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {

							var oEventParameters = oEvent.getParameters();

							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
							  //Success function
									var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
									oTemplateUtils.oCommonUtils.semanticObjectLinkNavigation(oEventParameters, sSelectionVariant, oController);
							}, jQuery.noop, oState, jQuery.noop);
						},
						onSemanticObjectLinkNavigationPressed: fnOnSemanticObjectLinkNavigationPressed,
						onSemanticObjectLinkNavigationTargetObtained: fnOnSemanticObjectLinkNavigationTargetObtained,
						onSemanticObjectLinkNavigationTargetObtainedSmartLink: fnOnSemanticObjectLinkNavigationTargetObtainedSmartLink,
						onDraftLinkPressed: function(oEvent) {
							var oButton = oEvent.getSource();
							var oBindingContext = oButton.getBindingContext();
							oTemplateUtils.oCommonUtils.showDraftPopover(oBindingContext, oButton);
						},
						onAssignedFiltersChanged: function(oEvent) {
							if (oEvent.getSource()) {
								oController.byId("template::FilterText").setText(oEvent.getSource().retrieveFiltersWithValuesAsText());
							}
						},
						onFilterChange: onFilterChange,
						onToggleFiltersPressed: function() {
							var oComponent = oController.getOwnerComponent();
							var oTemplatePrivateModel = oComponent.getModel("_templPriv");
							oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", !oTemplatePrivateModel.getProperty("/listReport/isHeaderExpanded"));
						},
						// ---------------------------------------------
						// store navigation context
						// note: function itself is handled by the corresponding control
						// ---------------------------------------------
						onSearchButtonPressed: function() {
							var oModel = oController.getOwnerComponent().getModel();
							var fnRequestFailed = function(oEvent) {
								MessageUtils.handleError("getCollection", oController, oTemplateUtils.oServices, oEvent.getParameters());
								oState.oSmartTable.getTable().setBusy(false);
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, oController.getView()));
							};
							oState.oIappStateHandler.changeIappState(false, true);
							oModel.attachEvent('requestFailed', fnRequestFailed);
							oModel.attachEventOnce('requestCompleted', function() {
								if (oState.oSmartTable instanceof sap.ui.comp.smarttable.SmartTable) {
									oState.oSmartTable.getTable().setBusy(false);
								}
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, oController.getView()));
								oModel.detachEvent('requestFailed', fnRequestFailed);
							});
						},
						onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oState);
						},
						onAfterTableVariantSave: function() {
							oState.oIappStateHandler.onAfterTableVariantSave();
						},
						onAfterApplyTableVariant: function() {
							if (!bIsStartingUp) {
								oState.oIappStateHandler.onAfterApplyTableVariant();
							}
						},
						//PoC Chart begin
						onAfterChartVariantInitialised: function(oEvent) {
						},
						onAfterChartVariantSave: function(oEvent) {
							oState.oIappStateHandler.onAfterTableVariantSave();
						},
						onAfterApplyChartVariant: function(oEvent) {
							if (!bIsStartingUp) {
								oState.oIappStateHandler.onAfterApplyTableVariant();
							}
						},
						onBeforeRebindChart: function(oEvent) {
							//Make sure views with parameters are working
							if (oState.oSmartFilterbar && oState.oSmartFilterbar.getAnalyticBindingPath && oState.oSmartFilterbar.getConsiderAnalyticalParameters()) {
								try {
									var sAnalyticalPath = oState.oSmartFilterbar.getAnalyticBindingPath();
									if (sAnalyticalPath) {
										oState.oSmartTable.setChartBindingPath(sAnalyticalPath);
									}
								} catch (e) {
									jQuery.sap.log.warning("Mandatory parameters have no values", "", "List Report");
								}
							}

							oTemplateUtils.oCommonEventHandlers.onBeforeRebindChart(oEvent);
							if (oState.oTableTabData) {
								fnStoreAndApplyFiltersForTableTabs(oEvent.getParameter("bindingParams"), oEvent.getSource());
							}
							oController.onBeforeRebindChartExtension(oEvent);
						},

						onChartInitialise: function(oEvent) {
							var oSmartChart = oEvent.getSource();
							var oChart = oSmartChart.getChart();
							//attach to the selectData event of the sap.chart.Chart
							oChart.attachSelectData(oState.oSmartChartController.onChartSelectData);
							oChart.attachDeselectData(oState.oSmartChartController.onChartSelectData);
							oSmartChart.attachSelectionDetailsActionPress(oState.oSmartChartController.onDetailsActionPress);
						},
						//PoC Chart end

						// ---------------------------------------------
						// END store navigation context
						// ---------------------------------------------

						onShareListReportActionButtonPress: function (oEvent) {
							var oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
								"sap.suite.ui.generic.template.fragments.lists.ShareSheet", {
									shareEmailPressed: function() {
										sap.m.URLHelper.triggerEmail(null, oTemplateUtils.oCommonUtils.getText("EMAIL_HEADER", [oTemplateUtils.oServices.oApplication.getAppTitle()]), document.URL);
									},
									shareJamPressed: function() {
										var oShareDialog = sap.ui.getCore().createComponent({
											name: "sap.collaboration.components.fiori.sharing.dialog",
											settings: {
												object: {
													id: document.URL,
													share: oTemplateUtils.oServices.oApplication.getAppTitle()
												}
											}
										});
										oShareDialog.open();
									}

								}, "share", function(oFragment, oShareModel) {
									var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
									oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
									oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
									oShareModel.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
									var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
									oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
								});
							oShareActionSheet.openBy(oEvent.getSource());

							// workaround for focus loss issue for AddBookmarkButton ("save as tile" button)
							var oShareButton = this.getView().byId("template::Share");
							var oBookmarkButton = this.getView().byId("bookmarkButton");
							oBookmarkButton.setBeforePressHandler(function() {
								// set the focus to share button
								oShareButton.focus();
							});
						},
						onInlineDataFieldForAction: function(oEvent) {
							var oEventSource = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oEventSource);
							var oTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
							var sTableBindingPath = oTable.getParent().getTableBindingPath();
							var aContexts = [oEventSource.getBindingContext()];
							oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable, oState);
						},
						onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onInlineDataFieldForIntentBasedNavigation(oEvent.getSource(), oState);
						},
						onDeterminingDataFieldForAction: function(oEvent) {
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sTableBindingPath = oState.oSmartTable.getTableBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable);
							}
						},
						onDeterminingDataFieldForIntentBasedNavigation: function(oEvent) {
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							var bRequiresContext = !(oCustomData.RequiresContext && oCustomData.RequiresContext === "false");
							if (bRequiresContext && aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else if (bRequiresContext && aContexts.length > 1) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_MULTIPLE_ITEMS_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oContext = bRequiresContext ? aContexts[0] : null;
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState);
							}
						},

						// TABLE TABS ONLY
						onIconTabBarSelect: function(oEvent) {
							var sKey = oEvent.getSource().getSelectedKey();
							var oSmartTableOld, oSmartTableNew;
							oSmartTableOld = oState.oSmartTable;
							oSmartTableNew = oState.aSmartTables[sKey];
							if (oSmartTableNew) {
								oState.oSmartTable = oSmartTableNew;
								oSmartTableOld.setVisible(false);
								oState.oSmartTable.setVisible(true);
								if (oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()]) {
//								as a new variant is selected, we need both - rebind and refresh
									oState.oSmartTable.rebindTable();
									oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
									oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()] = false;
								}
								fnUpdateTableOnSelectionChange(oState.oSmartTable);
								oState.oIappStateHandler.changeIappState(true, oState.oTableTabData.searchButtonPressed);
							}
						},
						
						multipleViewSingleTableModeVariantChanged: onMultipleViewSingleTableModeVariantChanged,

						//Chart PoC begin
						onSmartChartSelect: function(oEvent) {
							var sKey = oEvent.getSource().getSelectedKey();
							var oSmartTableOld, oSmartTableNew;
							oSmartTableOld = oState.oSmartTable;
							oSmartTableNew = oState.aSmartTablesCharts[sKey];
							if (oSmartTableNew) {
								oState.oSmartTable = oSmartTableNew;
								oSmartTableOld.setVisible(false);
								oState.oSmartTable.setVisible(true);
								if (oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()]) {
									if (oState.oSmartTable instanceof sap.ui.comp.smartchart.SmartChart) {
										oState.oSmartTable.rebindChart(oEvent);
									} else if (oState.oSmartTable instanceof sap.ui.comp.smarttable.SmartTable) {
//										as a new variant is selected, we need both - rebind and refresh
										oState.oSmartTable.rebindTable();
										oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
										oState.oTableTabData.aTableIsDirty[oState.oSmartTable.getId()] = false;
									}
								}
								if (oState.oSmartTable instanceof sap.ui.comp.smarttable.SmartTable) {
									fnUpdateTableOnSelectionChange(oState.oSmartTable);
								}
								oState.oIappStateHandler.changeIappState(true, oState.oTableTabData.searchButtonPressed);
							}
						},
						//Chart PoC end

						onTableInit: function(oEvent) {
							var oSmartTable = oEvent.getSource();
							var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
							oTemplateUtils.oCommonUtils.checkToolbarIntentsSupported(oSmartTable, oTemplatePrivateModel);
							oState.oMultipleViewsSingleTableModeHelper = new MultipleViewsSingleTableModeHelper(oState, oController, oTemplateUtils);
						},
						//search function called in worklist light version of LR
						onSearchWorkListLight: function(oEvent) {
							var oSmartTable = oState.oSmartTable;
							oSmartTable.data("searchString", oEvent.getSource().getValue());
							oSmartTable.data("allowSearchWorkListLight", true);
							oSmartTable.rebindTable();

							var oModel = oController.getOwnerComponent().getModel();
							var fnRequestFailed = function(oEvent) {
								MessageUtils.handleError("getCollection", oController, oTemplateUtils.oServices, oEvent.getParameters());
								oState.oSmartTable.getTable().setBusy(false);
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, oController.getView()));
							};
							oModel.attachEvent('requestFailed', fnRequestFailed);
							oModel.attachEventOnce('requestCompleted', function() {
								oModel.detachEvent('requestFailed', fnRequestFailed);
							});
						},
						// functions for sort, filter group in table header in worklist light
						onWorkListLightTableSort: function(oEvent) {
							var oSmartTable = oState.oSmartTable;
							if (oSmartTable) {
								oSmartTable.openPersonalisationDialog("Sort");
							}
						},
						onWorkListLightTableFilter: function() {
							var oSmartTable = oState.oSmartTable;
							if (oSmartTable) {
								oSmartTable.openPersonalisationDialog("Filter");
							}
						},
						onWorkListLightTableGroup: function() {
							var oSmartTable = oState.oSmartTable;
							if (oSmartTable) {
							oSmartTable.openPersonalisationDialog("Group");
							}
						},
						onWorkListLightTableColumns: function() {
							var oSmartTable = oState.oSmartTable;
							if (oSmartTable) {
								oSmartTable.openPersonalisationDialog("Columns");
							}
						}
					},
					formatters: {
						formatDraftType: function(oDraftAdministrativeData, bIsActiveEntity, bHasDraftEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								if (!bIsActiveEntity) {
									return sap.m.ObjectMarkerType.Draft;
								} else if (bHasDraftEntity) {
									return oDraftAdministrativeData.InProcessByUser ? sap.m.ObjectMarkerType.Locked : sap.m.ObjectMarkerType.Unsaved;
								}
							}
							return sap.m.ObjectMarkerType.Flagged;
						},

						formatDraftVisibility: function(oDraftAdministrativeData, bIsActiveEntity) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								if (!bIsActiveEntity) {
									return sap.m.ObjectMarkerVisibility.TextOnly; //for Draft mode only the text will be shown
								}
							}
							return sap.m.ObjectMarkerVisibility.IconAndText; //Default text and icon
						},

						formatDraftLineItemVisible: function(oDraftAdministrativeData) {
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID) {
								return true;
							}
							return false;
						},

						// Returns full user name or ID of owner of a draft with status "unsaved changes" or "locked" in the format "by full name" or "by UserId"
						// If the user names and IDs are not maintained we display for example "locked by another user"
						formatDraftOwner: function(oDraftAdministrativeData, bHasDraftEntity) {
							var sDraftOwnerDescription = "";
							if (oDraftAdministrativeData && oDraftAdministrativeData.DraftUUID && bHasDraftEntity) {
								var sUserDescription = oDraftAdministrativeData.InProcessByUserDescription || oDraftAdministrativeData.InProcessByUser || oDraftAdministrativeData.LastChangedByUserDescription || oDraftAdministrativeData.LastChangedByUser;
								if (sUserDescription){
									sDraftOwnerDescription = oTemplateUtils.oCommonUtils.getText("ST_DRAFT_OWNER", [sUserDescription]);
								} else {
									sDraftOwnerDescription = oTemplateUtils.oCommonUtils.getText("ST_DRAFT_ANOTHER_USER");
								}
							}
							return sDraftOwnerDescription;
						},
						
						formatItemTextForMultipleView: function(oItem){
							return oState.oMultipleViewsSingleTableModeHelper ? oState.oMultipleViewsSingleTableModeHelper.formatItemTextForMultipleView(oItem) : "";
						}
					},

					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
				};
			}
		};

	});
}; // end of sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.detailTemplates.detailUtils') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.detailTemplates.detailUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.m.DraftIndicator'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/detailTemplates/detailUtils",["jquery.sap.global", "sap/ui/core/routing/HashChanger", "sap/suite/ui/generic/template/extensionAPI/NavigationController",
	"sap/suite/ui/generic/template/lib/MessageButtonHelper", "sap/suite/ui/generic/template/lib/testableHelper", "sap/suite/ui/generic/template/detailTemplates/PaginatorButtonsHelper",
		"sap/suite/ui/generic/template/ObjectPage/extensionAPI/DraftTransactionController", "sap/suite/ui/generic/template/ObjectPage/extensionAPI/NonDraftTransactionController",	
	"sap/m/DraftIndicator"], 
	function(jQuery, HashChanger, NavigationController, MessageButtonHelper, testableHelper, PaginatorButtonsHelper, DraftTransactionController, NonDraftTransactionController) {
		"use strict";
		
		var DraftIndicatorState = sap.m.DraftIndicatorState; // namespace cannot be imported by sap.ui.define
		
		function getComponentBase(oComponent, oComponentUtils, oViewProxy){
			function init(){
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				oTemplatePrivateModel.setProperty("/objectPage", {
					displayMode: 0 // 0 = unknown, 1 = display, 2 = edit, 4 = add, 6 = change (edit or add)
				});
			}
			
			function onActivate(sBindingPath) {
				// preliminary: in draft case maybe on first time property is not set
				var oUIModel = oComponent.getModel("ui");
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				if (oComponentUtils.getEditableNDC()) {
					oUIModel.setProperty("/editable", true);
					var bCreateMode = oComponentUtils.isNonDraftCreate();
					oUIModel.setProperty("/createMode", bCreateMode);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", bCreateMode ? 4 : 2);
				} else if (!oComponentUtils.isDraftEnabled()) {
					oUIModel.setProperty("/editable", false);
					oUIModel.setProperty("/createMode", false);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", 1);
				}
				(oViewProxy.onComponentActivate || jQuery.noop)(sBindingPath);
			}
			
			// This method is called when a new binding context has been retrieved for this Component.
			// If the entity is draft enabled this happens whenever a different instance is displayed or the edit status changes.
			// If the entity is not draft enabled this only happens when a different instance is displayed.
			// It does not happen when changing to edit mode or creating a new instance. In this case the adjustment of the JSON models is already done in onActivate.
			function updateBindingContext() {

				var oBindingContext = oComponent.getBindingContext();
				var oTemplatePrivateModel = oComponentUtils.getTemplatePrivateModel();
				var oContextInfo = oComponentUtils.registerContext(oBindingContext);
				// set draft status to blank according to UI decision
				oTemplatePrivateModel.setProperty("/generic/draftIndicatorState", DraftIndicatorState.Clear);

				//call the rebindTable explicitly since the smart table enableAutoBinding=true 
				//didn't trigger GET of 1:n all cases
				(oViewProxy.refreshFacets || jQuery.noop)(null, true);
				
				(oViewProxy.getHeaderInfoTitleForNavigationMenue || jQuery.noop)();
				
				var oActiveEntity = oBindingContext.getObject();
				var oUIModel = oComponent.getModel("ui");
				var bIsEditable;
				if (oContextInfo.bIsDraft) {
					bIsEditable = true;
					oUIModel.setProperty("/enabled", true);
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", oContextInfo.bIsCreate ? 4 : 2);
				} else {
					bIsEditable = oComponentUtils.getEditableNDC();
					oTemplatePrivateModel.setProperty("/objectPage/displayMode", bIsEditable ? 2 : 1);
					if (oActiveEntity.hasOwnProperty("HasDraftEntity") && oActiveEntity.HasDraftEntity) {
						oUIModel.setProperty("/enabled", false);
						var oModel = oComponent.getModel();
						var oReadDraftInfoPromise = new Promise(function(fnResolve, fnReject) {
							oModel.read(
								oBindingContext.getPath(), {
									urlParameters: {
										"$expand": "SiblingEntity,DraftAdministrativeData"
									},
									success: fnResolve,
									error: fnReject
								});
						});
						var oBusyHelper = oComponentUtils.getBusyHelper();
						oBusyHelper.setBusy(oReadDraftInfoPromise);
						oReadDraftInfoPromise.then(
							function(oResponseData) {
								var oSiblingContext = oModel.getContext(
									"/" + oModel.getKey(oResponseData.SiblingEntity));
								if (oSiblingContext) {
									(oViewProxy.draftResume || jQuery.noop)(oSiblingContext, oActiveEntity,
										oResponseData.DraftAdministrativeData);
								}
								// enable the buttons
								oUIModel.setProperty("/enabled", true);
							},
							function(oError) {
								// open: error handling
							}
						);
					} else {
						// enable the buttons
						oUIModel.setProperty("/enabled", true);
					}
				}
				oUIModel.setProperty("/createMode", oContextInfo.bIsCreate);
				oUIModel.setProperty("/editable", bIsEditable);
			}
			
			return {
				init: init,
				onActivate: onActivate,
				getTitle: oComponentUtils.getTitleFromTreeNode,
				updateBindingContext: updateBindingContext
			};
			
		}
		
		function getControllerBase(oViewProxy, oTemplateUtils, oController){
			
			var oControllerBase;
			var aEntitySets; // initialized in onInit
			var sLinkUp;
			
			var oPaginatorButtonsHelper; // initialized in onInit, if needed
			
			var oHashChanger; // initialized on first use
			function fnGetHashChangerInstance() {
				return oHashChanger || HashChanger.getInstance();
			}
			
			function fnCreateBreadCrumbLinkHandler(j, oMyLink){
				return function(){
					oTemplateUtils.oServices.oApplication.subTitleForViewLevelChanged(j, oMyLink.getText());
				};
			}
			
			// this method is called, when the editablity status is changed
			function setEditable(bIsEditable) {
				var bIsNonDraft = !oTemplateUtils.oComponentUtils.isDraftEnabled();
				// Setting editable to false is done immidiately
				// Setting editable to true is (in draft case) postponed until the header data are read (method updateBindingContext).
				if (bIsNonDraft || !bIsEditable){
					var oUIModel = oController.getView().getModel("ui");
					oUIModel.setProperty("/editable", bIsEditable);
				}
				if (bIsNonDraft) {
					oTemplateUtils.oComponentUtils.setEditableNDC(bIsEditable);
				}
			}
			
			function fnOnBack() {
				oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
					// only for Non-Draft the editable must be set to false
					var bIsDraft = oTemplateUtils.oComponentUtils.isDraftEnabled();
					if (!bIsDraft){
						setEditable(false);
					}
					oTemplateUtils.oServices.oNavigationController.navigateBack();
				}, jQuery.noop, oControllerBase.state);
			}
			
			function fnAdaptLinksToUpperLevels(){
				var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
				var iUpLinksCount = oTemplatePrivateModel.getProperty("/generic/viewLevel") - 1;
				var aSections = iUpLinksCount ? oTemplateUtils.oServices.oApplication.getHierarchySectionsFromCurrentHash() : [];
				// there's at least one section left - create / bind breadcrumbs
				var aBreadCrumbs = oViewProxy.aBreadCrumbs;
				oHashChanger = fnGetHashChangerInstance();

				sLinkUp = "";
				var sDelimiter = "";
				for (var i = 0; i < iUpLinksCount; i++) {
					var sSection = aSections[i];
					sLinkUp = sLinkUp + sDelimiter + sSection;
					sDelimiter = "/";
					/*
					 * we don't use the navigation path but the canonical URL. The reason for this is that there's no
					 * join done in the backend, therefore the GET-request is much faster in deeper breadcrumbs. Also
					 * the UI5 Odata model keeps track of already requested ressources, so if user navigates from the
					 * top level there's no additional request, if he uses a bookmark the request is only done once. We
					 * assume that the key of the navigation path is the same as the canonical URL. This is an
					 * assumption that does not fit to all ODATA services (but 99% of them) - BUT: Smart Templates and
					 * the navigation controller already takes this assumption. Once this is changed also this coding
					 * needs to be changed. Ideally with a configuration as most of the ODATA services have a big
					 * benefit through reading with the canonical URL
					 */
					var sEntitySet = aEntitySets[i];
					var aSubSections = sSection.split("(");
					if (aSubSections && aSubSections[1]) {
						var oLink = aBreadCrumbs && aBreadCrumbs[i];
						if (oLink){
							var sHash = oHashChanger.hrefForAppSpecificHash ? oHashChanger.hrefForAppSpecificHash(sLinkUp) : "#/" + sLinkUp;
							sHash = oTemplateUtils.oServices.oApplication.adaptBreadCrumbUrl(sHash, i + 1);
							var sCanonicalUrl = "/" + sEntitySet + "(" + aSubSections[1];
							oLink.setHref(sHash);
							oLink.bindElement({
								path: sCanonicalUrl,
								events: {
									change: fnCreateBreadCrumbLinkHandler(i + 1, oLink)
								}
							});
						}
					}
				}
			}			
			
			function getApplyChangesPromise(oControl){
				var oContext = oControl.getBindingContext();
				var sHash = fnGetHashChangerInstance().getHash();
				return oTemplateUtils.oServices.oApplicationController.propertyChanged(sHash, oContext);
			}
			
			function fnNavigateUp(){
				if (sLinkUp){
					oTemplateUtils.oServices.oNavigationController.navigateToContext(sLinkUp, "", true);
				} else {
					oTemplateUtils.oServices.oNavigationController.navigateToRoot(true);
				}
			}
			
			// Event handler for the Apply button. Only visible in draft scenarios and not on the object root.
			function fnApplyAndUp(oEvent) {
				var oControl = oEvent.getSource();
				oTemplateUtils.oServices.oApplication.performAfterSideEffectExecution(function(){
					var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
					if (oBusyHelper.isBusy()){
						return; // Ignore the button if something is already running
					}
					var oUIModel = oController.getView().getModel("ui");
					var oTemplatePrivateGlobalModel = oController.getOwnerComponent().getModel("_templPrivGlobal");
					var oApplyPromise = getApplyChangesPromise(oControl).then(function(oReponse){
						if (!oControllerBase.fclInfo.isContainedInFCL || oTemplatePrivateGlobalModel.getProperty("/generic/FCL/isVisuallyFullScreen")){
							fnNavigateUp();
						}
						//the toast is shown independent of FCL
						//the next statement should not be deleted but a comment!!
//						oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("ST_CHANGES_APPLIED"));
					}, function(){
						oBusyHelper.getUnbusy().then(function(oReponse){
							if (!oControllerBase.fclInfo.isContainedInFCL || oTemplatePrivateGlobalModel.getProperty("/generic/FCL/isVisuallyFullScreen")) {
								oTemplateUtils.oCommonUtils.processDataLossTechnicalErrorConfirmation(function() {
									fnNavigateUp();
									oUIModel.setProperty("/enabled", true); //in case you leave the page set this
								}, jQuery.noop, oControllerBase.state);
							} else {
							//if the UI show FCL, one object next to the other, then another popup is needed						
							oTemplateUtils.oCommonUtils.processDataLossTechnicalErrorConfirmation(jQuery.noop, jQuery.noop, oControllerBase.state, "StayOnPage");
							}
						});
					});
					oBusyHelper.setBusy(oApplyPromise);
				});
			}
			
			function onShowMessages() {
				oControllerBase.state.messageButtonHelper.toggleMessagePopover();
			}
			
			function getNavigationControllerFunction(){
				var oNavigationController;
				return function(){
					oNavigationController = oNavigationController || new NavigationController(oTemplateUtils, oController, oControllerBase.state);
					return oNavigationController;
				};
			}
			
			function getTransactionControllerFunction() {
				var oTransactionController;
				return function(){
					if (!oTransactionController) {
						var Class = oTemplateUtils.oComponentUtils.isDraftEnabled() ? DraftTransactionController : NonDraftTransactionController;
						oTransactionController = new Class(oTemplateUtils, oController, oControllerBase.state);
					}
					return oTransactionController;
				};
			}
			
			function handleShowNextObject(){
				oPaginatorButtonsHelper.handleShowNextObject();
			}
			
			function handleShowPrevObject(){
				oPaginatorButtonsHelper.handleShowPrevObject();
			}
			
			// Expose selected private functions to unit tests
			/* eslint-disable */
			var fnGetHashChangerInstance = testableHelper.testable(fnGetHashChangerInstance, "getHashChangerInstance");
			var fnAdaptLinksToUpperLevels = testableHelper.testable(fnAdaptLinksToUpperLevels, "adaptLinksToUpperLevels");
			/* eslint-enable */
			
			oControllerBase = {
				onInit: function(oRequiredControls){
					aEntitySets = oTemplateUtils.oServices.oApplication.getSections(oController.getOwnerComponent().getEntitySet(), true);
					if (!oRequiredControls || oRequiredControls.footerBar){
						var bIsODataBased = oTemplateUtils.oComponentUtils.isODataBased();
						oControllerBase.state.messageButtonHelper = new MessageButtonHelper(oTemplateUtils.oCommonUtils, oController, bIsODataBased);
						oTemplateUtils.oServices.oTemplateCapabilities.oMessageButtonHelper = oControllerBase.state.messageButtonHelper;
					}
					if (!oRequiredControls || oRequiredControls.paginatorButtons){
						oPaginatorButtonsHelper = new PaginatorButtonsHelper(oControllerBase, oController, oTemplateUtils);
					}
				},
				handlers: {
					handleShowNextObject: handleShowNextObject,
					handleShowPrevObject: handleShowPrevObject,
					onShowMessages: onShowMessages,
					applyAndUp: fnApplyAndUp,
					onBack: fnOnBack
				},
				extensionAPI: {
					getNavigationControllerFunction: getNavigationControllerFunction,
					getTransactionControllerFunction: getTransactionControllerFunction
				},
				fclInfo: {
					isContainedInFCL: false	
				},
				state: {},
				onComponentActivate: function(sBindingPath){
					if (oControllerBase.state.messageButtonHelper){
						oControllerBase.state.messageButtonHelper.adaptToContext(sBindingPath);
					}
					oTemplateUtils.oComponentUtils.setBackNavigation(fnOnBack);
					fnAdaptLinksToUpperLevels();
					// set visibility of up/down buttons
					if (oPaginatorButtonsHelper){
                        oPaginatorButtonsHelper.computeAndSetVisibleParamsForNavigationBtns();
					}
				}
			};
			
			oViewProxy.navigateUp = fnNavigateUp;
			oViewProxy.setEditable = setEditable;
			
			var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
			var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
			var oFclProxy = oTemplateUtils.oServices.oApplication.getFclProxyForView(iViewLevel);
			if (oFclProxy.oActionButtonHandlers){
				oControllerBase.handlers.fclActionButtonHandlers = oFclProxy.oActionButtonHandlers;
				oControllerBase.fclInfo.isContainedInFCL = true;
				oControllerBase.fclInfo.isNextObjectLoadedAfterDelete = oFclProxy.isNextObjectLoadedAfterDelete;
			}
			oControllerBase.fclInfo.navigteToDraft = oFclProxy.navigateToDraft;
			
			return oControllerBase;
		}
		
		return {
			getComponentBase: getComponentBase,
			getControllerBase: getControllerBase
		};
	});
}; // end of sap/suite/ui/generic/template/detailTemplates/detailUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.Application') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.Application'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HistoryDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSheet'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/Application",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/Device", "sap/ui/model/json/JSONModel", "sap/ui/core/routing/History",
		"sap/ui/core/routing/HistoryDirection", "sap/m/MessageToast", "sap/m/ActionSheet", "sap/m/Dialog", "sap/m/Popover",
		"sap/suite/ui/generic/template/lib/routingHelper", "sap/suite/ui/generic/template/lib/ContextBookkeeping", "sap/suite/ui/generic/template/lib/testableHelper"
	],
	function(jQuery, BaseObject, Device, JSONModel, History, HistoryDirection, MessageToast, ActionSheet, Dialog, Popover, routingHelper, ContextBookkeeping, testableHelper) {
		"use strict";

		var sContentDensityClass = (testableHelper.testableStatic(function(bTouch, oBody) {
			var sCozyClass = "sapUiSizeCozy",
				sCompactClass = "sapUiSizeCompact";
			if (oBody.hasClass(sCozyClass) || oBody.hasClass(sCompactClass)) { // density class is already set by the FLP
				return "";
			} else {
				return bTouch ? sCozyClass : sCompactClass;
			}
		}, "Application_determineContentDensityClass")(Device.support.touch, jQuery(document.body)));
		
		function getContentDensityClass() {
			return sContentDensityClass;
		}

		// defines a dependency from oControl to a parent
		function fnAttachControlToParent(oControl, oParent) {
			jQuery.sap.syncStyleClass(sContentDensityClass, oParent, oControl);
			oParent.addDependent(oControl);
		}

		// Expose selected private static functions to unit tests
		/* eslint-disable */
		var fnAttachControlToParent = testableHelper.testableStatic(fnAttachControlToParent, "Application_attachControlToParent");
		/* eslint-enable */

		/* An instance of this class represents a Smart Template based application. Thus, there is a one-to-one relationship between
		 * instances of this class and instances of sap.suite.ui.generic.template.lib.AppComponent.
		 * However, this class is only used inside the sap.suite.ui.generic.template.lib package. It is not accessible to template developers
		 * or breakout developers.
		 * Instances of this class are generated in sap.suite.ui.generic.template.lib.TemplateAssembler.
		 * Note that TemplateAssembler also possesses a reference to the instance of this class which represents the app currently
		 * running.
		 * oTemplateContract: An object which is used for communication between this class and the AppComponent and its helper classes.
		 * Note that this class injects its api to these classes into the template contract object.
		 * Currently this class supports two use cases:
		 * 1. For non-draft apps it contains the information whether the app is currently in display or in edit state (methods set/getEditableNDC)
		 * 2. A 'navigation' model is supported. Thereby, we consider navigation to take place each time a route name or a route pattern is changed (but not when only the parameters added to the route are changed)
		 */
		function getMethods(oTemplateContract) {

			var oContextBookkeeping = new ContextBookkeeping(oTemplateContract.oAppComponent);
			var oListReportTable;
			
			function getListReportTable(){
				return oListReportTable;
			}

			function setListReportTable(oTable){
				oListReportTable = oTable;
			}

			function isComponentActive(oComponent){
				var aActiveComponents = oTemplateContract.oNavigationControllerProxy.getActiveComponents();
				return aActiveComponents.indexOf(oComponent.getId()) >= 0;
			}
			
			var bIsWaitingForSideEffectExecution = false;
			
			// Executes fnFunction as soon as all side-effects have been executed.
			function fnPerformAfterSideEffectExecution(fnFunction){
				if (bIsWaitingForSideEffectExecution){
					return;   // do not let two operation wait for side effect execution
				}
				var i = 0;
				for (; i < oTemplateContract.aRunningSideEffectExecutions.length && !oTemplateContract.aRunningSideEffectExecutions[i]; i++){
					i++;
				}
				if (oTemplateContract.aRunningSideEffectExecutions[i]){
					bIsWaitingForSideEffectExecution = true;
					var oPromise = oTemplateContract.aRunningSideEffectExecutions[i];
					oPromise.then(function(){
						if (oTemplateContract.aRunningSideEffectExecutions[i] === oPromise){
							oTemplateContract.aRunningSideEffectExecutions[i] = null;	
						}
						bIsWaitingForSideEffectExecution = false;
						fnPerformAfterSideEffectExecution(fnFunction);
					});	
				} else {
					fnFunction();
				}
			}

			function fnMakeBusyAware(oControl) {
				var sOpenFunction;
				if (oControl instanceof Dialog) {
					sOpenFunction = "open";
				} else if (oControl instanceof Popover || oControl instanceof ActionSheet) {
					sOpenFunction = "openBy";
				}
				if (sOpenFunction) {
					var fnOpenFunction = oControl[sOpenFunction];
					oControl[sOpenFunction] = function() {
						var myArguments = arguments;
						fnPerformAfterSideEffectExecution(function(){
							if (!oTemplateContract.oBusyHelper.isBusy()) { // suppress dialogs while being busy
								oTemplateContract.oBusyHelper.getUnbusy().then(function() { // but the busy dialog may still not have been removed
									fnOpenFunction.apply(oControl, myArguments);
								});
							}
						});
					};
				}
			}

			var mFragmentStores = {};

			function getDialogFragmentForView(oView, sName, oFragmentController, sModel, fnOnFragmentCreated) {
				oView = oView || oTemplateContract.oNavigationHost;
				var sViewId = oView.getId();
				var mFragmentStore = mFragmentStores[sViewId] || (mFragmentStores[sViewId] = {});
				var oFragment = mFragmentStore[sName];
				if (!oFragment) {
					oFragment = sap.ui.xmlfragment(sViewId, sName, oFragmentController);
					fnAttachControlToParent(oFragment, oView);
					var oModel;
					if (sModel) {
						oModel = new JSONModel();
						oFragment.setModel(oModel, sModel);
					}
					(fnOnFragmentCreated || jQuery.noop)(oFragment, oModel);
					mFragmentStore[sName] = oFragment;
					fnMakeBusyAware(oFragment);
				}
				return oFragment;
			}

			function getOperationEndedPromise() {
				return new Promise(function(fnResolve) {
					oTemplateContract.oNavigationObserver.getProcessFinished(true).then(function(){
						oTemplateContract.oBusyHelper.getUnbusy().then(fnResolve);	
					});
				});
			}

			function setBackNavigation(fnBackNavigation) {
				oTemplateContract.oShellServicePromise.then(function(oShellService){
					oShellService.setBackNavigation(fnBackNavigation);
				});
			}
			
			function getFclProxyForView(iViewLevel) {
				if (!oTemplateContract.oFlexibleColumnLayoutHandler){
					return {
						isNextObjectLoadedAfterDelete: function(){ return false; },
						getOrderToShowObjectPageAfterDelete: function(){ return false; },
						isListAndFirstEntryLoadedOnStartup: function(){ return false; },
						supressNavigationUpAfterDeletion: function(){ return false; },
						handleDataReceived: function(){ return false; }
					};
				}
				return oTemplateContract.oFlexibleColumnLayoutHandler.getFclProxyForView(iViewLevel);
			}

			var bIsEditable = false;
			
			function setEditableNDC(isEditable) {
				bIsEditable = isEditable;
			}
			
			// This function indicates if a new HistoryEntry is required.
			// A new HistoryEntry is only required if the user navigates to an object which will be displayed in a new column.
			// If the object will be displayed in a column which is already visible no HistoryEntry is required
			function isNewHistoryEntryRequired(oTargetContext, sNavigationProperty){
				if (!oTemplateContract.oFlexibleColumnLayoutHandler){
					return true;
				}
				var oTarget = routingHelper.determineNavigationPath(oTargetContext, sNavigationProperty);
				return oTemplateContract.oFlexibleColumnLayoutHandler.isNewHistoryEntryRequired(oTarget);
			}
			
			function fnRegisterStateChanger(oStateChanger){
				oTemplateContract.aStateChangers.push(oStateChanger);
			}
			
			function getTargetAfterCancelPromise(oActive){
				return oTemplateContract.oFlexibleColumnLayoutHandler ? oTemplateContract.oFlexibleColumnLayoutHandler.getTargetAfterCancelPromise(oActive) : Promise.resolve(oActive);
			}
			
			function adaptAfterDeletion(aDeletedPath, iViewLevel){
				oContextBookkeeping.adaptAfterDeletion(aDeletedPath);
				if (aDeletedPath.length === 0 || !oTemplateContract.oFlexibleColumnLayoutHandler){
					return;
				}
				oTemplateContract.oFlexibleColumnLayoutHandler.adaptAfterDeletion(aDeletedPath, iViewLevel);
			}
			
			function fnBuildSections(sEntitySet, bOnlyEntitySetNames, aSections){
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				var sNewEntry;
				if (oTreeNode.navigationProperty && oTreeNode.parent){
					sNewEntry = bOnlyEntitySetNames ? oTreeNode.entitySet : oTreeNode.navigationProperty;
				} else {
					sNewEntry = sEntitySet;
				}
				if (aSections.indexOf(sNewEntry) < 0){
					aSections.unshift(sNewEntry);
					if (oTreeNode.navigationProperty && oTreeNode.parent){
						fnBuildSections(oTreeNode.parent, bOnlyEntitySetNames, aSections);
					}
				}
			}
			
			function getSections(sEntitySet, bOnlyEntitySetNames){
				var aRet = [];
				fnBuildSections(sEntitySet, bOnlyEntitySetNames, aRet);
				return aRet;				
			}
			
			function getBreadCrumbInfo(sEntitySet){
				var aSections = getSections(sEntitySet);
				// remove the last one - this is the current shown section
				aSections.pop();
				var sPath = "";
				var delimiter = "";
				var aRet = [];
				for (var i = 0; i < aSections.length; i++){
					sPath = sPath + delimiter + aSections[i];
					aRet.push(sPath);
					delimiter = "/";
				}
				return aRet;
			}
			
			function getHierarchySectionsFromCurrentHash(){
				var sHash = oTemplateContract.oNavigationControllerProxy.oHashChanger.getHash();
						// remove query part if there's one
				var	sPath = sHash.split("?")[0];
				var aSections = sPath.split("/");

				if (aSections[0] === "" || aSections[0] === "#") {
					// Path started with a / - remove first section
					aSections.splice(0, 1);
				}
				return aSections;
			}
			
			function fnAdaptBreadCrumbUrl(sHash, iViewLevel, bIsHash){
				if (oTemplateContract.oFlexibleColumnLayoutHandler){
					return oTemplateContract.oFlexibleColumnLayoutHandler.adaptBreadCrumbUrl(sHash, iViewLevel, bIsHash);
				}
				return sHash;
			}
			
			function getResourceBundleForEditPromise(){
				var aActiveComponents = oTemplateContract.oNavigationControllerProxy.getActiveComponents();
				var iMinViewLevel = 0;
				var oComponent;
				for (var i = 0; i < aActiveComponents.length; i++){
					var oRegistryEntry = oTemplateContract.componentRegistry[aActiveComponents[i]];
					if (oRegistryEntry.viewLevel > 0 && (iMinViewLevel === 0 || oRegistryEntry.viewLevel < iMinViewLevel)){
						iMinViewLevel = oRegistryEntry.viewLevel;
						oComponent = oRegistryEntry.oComponent;
					}
				}
				var oComponentPromise = oComponent ? Promise.resolve(oComponent) : oTemplateContract.oNavigationControllerProxy.getRootComponentPromise();
				return oComponentPromise.then(function(oComp){
					return oComp.getModel("i18n").getResourceBundle();                         	
				});
			}
			
			function getAppTitle() {
				return oTemplateContract.oNavigationControllerProxy.getAppTitle();
			}
			
			function fnSubTitleForViewLevelChanged(iViewLevel, sBreadCrumbText){
				oTemplateContract.oNavigationControllerProxy.subTitleForViewLevelChanged(iViewLevel, sBreadCrumbText);
			}
			
			function getCurrentKeys(iViewLevel){
				return oTemplateContract.oNavigationControllerProxy.getCurrentKeys(iViewLevel);
			}

			function getPathForViewLevelOneIfVisible() {
				for (var sComponentId in oTemplateContract.componentRegistry){
					var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
					if (oRegistryEntry.viewLevel === 1) {
						if (isComponentActive(oRegistryEntry.oComponent)) {
							var oElementBinding = oRegistryEntry.oComponent.getComponentContainer().getElementBinding();
							return oElementBinding && oElementBinding.getPath();
						} else {
							return null;
						}
					}
				}
				return null;
			}
			
			function fnNavigateRoute(sRouteName, sKey, oComponentRegistryEntry, sEmbeddedKey, bReplace){
				var sEntitySet = oComponentRegistryEntry.oComponent.getEntitySet();
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				var bIsEmbedded = false;
				var sFullRouteName;
				var bWithKey = true;
				for (var i = 0; i < oTreeNode.children.length && !sFullRouteName; i++){
					var sChild = oTreeNode.children[i];
					var oChildNode = oTemplateContract.mEntityTree[sChild];
					if (oChildNode.navigationProperty === sRouteName){
						sFullRouteName = oChildNode.sRouteName;
						bWithKey = !oChildNode.noKey; 
					}
				}
				if (sEmbeddedKey && !sFullRouteName){
					var oEmbeddedComponent = oTreeNode.embeddedComponents[sEmbeddedKey];
					if (oEmbeddedComponent){
						for (var j = 0; j < oEmbeddedComponent.pages.length && !bIsEmbedded; j++){
							var oPage = oEmbeddedComponent.pages[j];
							if (oPage.navigationProperty === sRouteName){
								bIsEmbedded = true;
								sFullRouteName = sEntitySet + "/" + sEmbeddedKey + "/" + sRouteName;
								bWithKey = !(oPage.routingSpec && oPage.routingSpec.noKey);
							}
						}
					}
				}
				if (sFullRouteName){
					var sInfix = bIsEmbedded ? sEmbeddedKey + routingHelper.getPatternDelimiter() : "";
					var sKeyClause = bWithKey ? "(" + sKey + ")" : "";
					var sSuffix = sInfix + sRouteName + sKeyClause;
					oTemplateContract.oNavigationControllerProxy.navigateToSuffix(sSuffix, oComponentRegistryEntry.viewLevel + 1, sFullRouteName, bReplace);                    					
				}
			}
			
			var oFallbackModel;
			function getCommunicationModel(oComponent){
				var sEntitySet = oComponent.getEntitySet();
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				if (oTreeNode && oTreeNode.communicationModel){
					return oTreeNode.communicationModel;                        
				}
				oFallbackModel = oFallbackModel || new JSONModel();
				return oFallbackModel;
			}
			
			var oGlobalObject;
			function getCommunicationObject(oComponent, iLevel){
				var i = iLevel || 0;
				if (i > 0){
					// This is only allowed for ReuseComponents, which is not handled here
					return null;
				}
				var sEntitySet = oComponent.getEntitySet();
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				var oRet = oTreeNode && oTreeNode.communicationObject;
				for (; i < 0 && oRet; ){
					oTreeNode = oTemplateContract.mEntityTree[oTreeNode.parent];
					if (oTreeNode.communicationObject !== oRet){
						i++;
						oRet = oTreeNode.communicationObject;
					}
				}
				if (i < 0 || oRet){
					return oRet;
				}
				oGlobalObject = oGlobalObject || {};
				return oGlobalObject;
			}
			
			function getForwardNavigationProperty(iViewLevel){
				for (var sKey in oTemplateContract.mEntityTree) {
					if (oTemplateContract.mEntityTree[sKey].navigationProperty && (oTemplateContract.mEntityTree[sKey].level === iViewLevel + 1)) {
						return oTemplateContract.mEntityTree[sKey].navigationProperty;
					}
				}
			}
			
			function getMaxColumnCountInFCL(){
				return oTemplateContract.oFlexibleColumnLayoutHandler ? oTemplateContract.oFlexibleColumnLayoutHandler.getMaxColumnCountInFCL() : false;
			}
			
			function isListAndFirstEntryLoadedOnStartup(){
				return oTemplateContract.oFlexibleColumnLayoutHandler && oTemplateContract.oFlexibleColumnLayoutHandler.isListAndFirstEntryLoadedOnStartup();
			}
			
			function isNextObjectLoadedAfterDelete(){
				return oTemplateContract.oFlexibleColumnLayoutHandler && oTemplateContract.oFlexibleColumnLayoutHandler.isNextObjectLoadedAfterDelete();
			}
			
			oTemplateContract.oApplicationProxy = { // inject own api for AppComponent into the Template Contract. Other classes (NavigationController, BusyHelper) will call these functions accordingly.
				getDraftSiblingPromise: oContextBookkeeping.getDraftSiblingPromise,
				
				getAlternativeContextPromise: oContextBookkeeping.getAlternativeContextPromise,
				
				getResourceBundleForEditPromise: getResourceBundleForEditPromise,
				
				getHierarchySectionsFromCurrentHash: getHierarchySectionsFromCurrentHash,
				getContentDensityClass: getContentDensityClass,
				setEditableNDC: setEditableNDC,
				getDialogFragment: getDialogFragmentForView.bind(null, null),
				destroyView: function(sViewId){
					delete mFragmentStores[sViewId];
				},
				setListReportTable: setListReportTable
			};

			return {
				setEditableNDC: setEditableNDC,
				getEditableNDC: function() {
					return bIsEditable;
				},
				getContentDensityClass: getContentDensityClass,
				attachControlToParent: fnAttachControlToParent,
				getDialogFragmentForView: getDialogFragmentForView,
				getBusyHelper: function() {
					return oTemplateContract.oBusyHelper;
				},
				performAfterSideEffectExecution: fnPerformAfterSideEffectExecution,
				isComponentActive: isComponentActive,
				showMessageToast: function() {
					var myArguments = arguments;
					var fnMessageToast = function() {
						jQuery.sap.log.info("Show message toast");
						MessageToast.show.apply(MessageToast, myArguments);
					};
					Promise.all([getOperationEndedPromise(true), oTemplateContract.oBusyHelper.getUnbusy()]).then(fnMessageToast);
				},
				setBackNavigation: setBackNavigation,
				getFclProxyForView: getFclProxyForView,
				isNewHistoryEntryRequired: isNewHistoryEntryRequired,
				registerStateChanger: fnRegisterStateChanger,
				getDraftSiblingPromise: oContextBookkeeping.getDraftSiblingPromise,
				registerContext: oContextBookkeeping.registerContext,
				activationStarted: oContextBookkeeping.activationStarted,
				cancellationStarted: oContextBookkeeping.cancellationStarted,
				editingStarted: oContextBookkeeping.editingStarted,
				getTargetAfterCancelPromise: getTargetAfterCancelPromise,
				adaptAfterDeletion: adaptAfterDeletion,
				getBreadCrumbInfo: getBreadCrumbInfo,
				adaptBreadCrumbUrl: fnAdaptBreadCrumbUrl,
				getSections: getSections,
				getHierarchySectionsFromCurrentHash: getHierarchySectionsFromCurrentHash,
				getAppTitle: getAppTitle,
				subTitleForViewLevelChanged: fnSubTitleForViewLevelChanged,
				getCurrentKeys: getCurrentKeys,
				getPathForViewLevelOneIfVisible: getPathForViewLevelOneIfVisible,
				getCommunicationModel: getCommunicationModel,
				getCommunicationObject: getCommunicationObject,
				navigateRoute: fnNavigateRoute,
				getForwardNavigationProperty: getForwardNavigationProperty,
				getMaxColumnCountInFCL: getMaxColumnCountInFCL,
				isListAndFirstEntryLoadedOnStartup: isListAndFirstEntryLoadedOnStartup,
				isNextObjectLoadedAfterDelete: isNextObjectLoadedAfterDelete,
				getListReportTable: getListReportTable
			};
		}

		return BaseObject.extend("sap.suite.ui.generic.template.lib.Application", {
			constructor: function(oTemplateContract) {
				jQuery.extend(this, getMethods(oTemplateContract));
			}
		});
	});
}; // end of sap/suite/ui/generic/template/lib/Application.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.NavigationController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ------------------------------------------------------------------------------------------------------------
// This class handles inner app navigation for Smart Template based apps.
// The class exposes its services in two ways:
// 1. There is a public API providing the navigation methods navigateToRoot, navigateToContext, navigateToMessagePage, and navigateBack
//    to Template developers and even Breakout developers.
// 2. A richer object oNavigationControllerProxy is created (see constructor) which is used by the core classes of the SmartTemplate framework.
//    This object allows more detailed interaction with navigation.

// Moreover, this class is responsible for handling the route matched events occuring within a Smart Template based App.

// Within this class we differentiate between a number of different scenarios for navigation/url-changes:
// 1. A state change is a change of the url which does not lead to a new route, but just modifies the encoding of the internal state of one view in the
//    url. Whenever a route matched event occurs it is first checked, whether this corresponds to a state change.
//    If this is true, we do not consider it as a navigation and all further handling of the url within this class is stopped.
//    It is assumed that the state change is totally controlled by the component that has initiated the state change.
//    Note that agents might register themselves as possible state changers via sap.suite.ui.generic.template.lib.Application.registerStateChanger.
//    A new url is passed to the registered state changers one after the other (method isStateChange). If any of those returns true the processing
//    of the url is stopped.
// 2. Illegal urls: The user enters a url which belongs to this App but not to a legal route. This is not considered as a navigation.
// 3. Back navigation: Back navigation can be triggered by the user pressing the browser-back button (then we have no control), the user pressing the
//    back button within the App, or programmatically (e.g. after cancelling an action).
// 4. Programmatic (forward) navigation: The program logic often demands the navigation to be triggerd programmatically. Such navigation is always forwarded to
//    function fnNavigate. Note that this function automatically performs a back navigation, when the navigation target is the same as the last history entry.
//    Note that it is also possible to navigate programmatically to the MessagePage. However, this does not change the url and is therefore not considered as navigation.
// 5. Manual navigation: The user can navigate inside the running App by modifying the url manually (more probable: by selecting a bookmark/history entry
//    which leads to some other place within the App). Note that in this case the navigation may be totally uncontrolled within the App.
// 6. Follow-up navigation: In some cases a navigation directly triggers another navigation. For the user only one navigation step is performed although the url changes several times.
//    In principle there are two possible flavours of the follow-up navigation:
//    a) The url-change is performed programmatically. Already at this point in time it is known, that a follow-up navigation needs to be performed.
//       Actually this is only important in case that more than one back-navigation needs to be performed in order to 'clean' the history.
//    b) The need for follow-up navigation is detected when a route-matched event is processed. In this case the url-change may have been performed programmatically
//       or manually. This case, e.g. applies when the url points to a draft which has meanwhile been activated.
// 7. Pseudo navigation: The url is not changed, but the set of views to be displayed changes. This can happen, when the message page is displayed or when the
//    user changes the size of the browser in an FCL-based App.
//
// We also use the notion of 'logical navigation steps'.
// Cases 3, 4, 5, and 7 are considered to be logical navigation steps.
// 2 is no logical navigation step, but will be forwarded to 7 (message page displayed) which is a logical navigation step.
// State changes (1) and follow-up navigation (6) will not create a new logical navigation step.
// ------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HistoryDirection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/NavigationController",[
	"jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/ComponentContainer", "sap/ui/core/routing/HashChanger", "sap/ui/core/routing/History", "sap/ui/core/routing/HistoryDirection",
	"sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/m/MessageBox", "sap/m/MessagePage", "sap/m/Link",
	"sap/suite/ui/generic/template/lib/ProcessObserver", "sap/suite/ui/generic/template/lib/routingHelper",
	"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/lib/testableHelper"
], function(jQuery, BaseObject, ComponentContainer, HashChanger, History, HistoryDirection, Filter, FilterOperator, MessageBox, MessagePage, Link,
	ProcessObserver, routingHelper, TemplateComponent, testableHelper) {
	"use strict";

	var oHistory = History.getInstance();

	// Private static methods

	// The part of the url specifying in detail the target within the App is called the hash. Note that this hash sometimes comes with a leading "/", sometimes without. Both
	// representations are equivalent. This function creates a normalized representation (always containing the leading "/"). Below this representation is called "normalized hash".
	function fnNormalizeHash(sHash) {
		if (sHash.indexOf("/") === 0){
			return sHash;
		}
		return "/" + sHash;
	}
	/*
	 * Creates a new ComponentContainer with template from routing configuration
	 * @param {Object}oAppComponentg - the application component
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {sap.ui.core.ComponentContainer} instance of the component container
	 */
	function fnCreateComponentInstance(oTemplateContract, oRouteConfig, fnComponentCreateResolve) {
		var sTemplate = oRouteConfig.template;
		var sEntitySet = oRouteConfig.entitySet;
		var iViewLevel = oRouteConfig.viewLevel;
		var iObserverIndex = -1;
		if (oTemplateContract.oFlexibleColumnLayoutHandler){
			iObserverIndex = iViewLevel < 3 ? iViewLevel : 0;
		}
		var oNavigationObserver = iObserverIndex < 0 ? oTemplateContract.oNavigationObserver : oTemplateContract.aNavigationObservers[iObserverIndex];
		var oHeaderLoadingObserver = new ProcessObserver();
		var oLoadingObserverParent = iObserverIndex < 0 ? oTemplateContract.oHeaderLoadingObserver : oTemplateContract.aHeaderLoadingObservers[iObserverIndex];
		oLoadingObserverParent.addObserver(oHeaderLoadingObserver);
		var oPreprocessorsData = {};
		var oSettings = {
			appComponent: oTemplateContract.oAppComponent,
			isLeaf: !oRouteConfig.pages || !oRouteConfig.pages.length,
			entitySet: sEntitySet,
			navigationProperty: oRouteConfig.navigationProperty,
			componentData: {
				registryEntry: {
					componentCreateResolve: fnComponentCreateResolve,
					route: oRouteConfig.name,
					routeConfig: oRouteConfig,
					viewLevel: iViewLevel,
					routingSpec: oRouteConfig.routingSpec,
					oNavigationObserver: oNavigationObserver,
					oHeaderLoadingObserver: oHeaderLoadingObserver,
					preprocessorsData: oPreprocessorsData
				}
			}
		};

		if (oRouteConfig.component.settings) {
			// consider component specific settings from app descriptor
			jQuery.extend(oSettings, oRouteConfig.component.settings);
		}

		var oComponentContainer;
		// Note: settings are passed to Component and to ComponentContainer. This has to be revisited.
		oTemplateContract.oAppComponent.runAsOwner(function() {
			try {
				var oComponentPromise = sap.ui.component({
					name: sTemplate,
					settings: oSettings,
					handleValidation: true,
					async: true
				});

				var oLoadedPromise;

				oComponentContainer = new ComponentContainer({
					propagateModel: true,
					width: "100%",
					height: "100%",
					settings: oSettings
				});

				oLoadedPromise = oComponentPromise.then(function(oComponent) {
					oComponentContainer.setComponent(oComponent);
					return oComponentContainer;
				});


				// add the 'loaded' function to make the component container behave the same as a view
				oComponentContainer.loaded = function() {
					return oLoadedPromise;
				};
			} catch (e) {
				throw new Error("Component " + sTemplate + " could not be loaded");
			}
		});
		return oComponentContainer;
	}

	// Definition of instance methods
	function getMethods(oTemplateContract, oNavigationControllerProxy) {

		/* support templating QUnit tests */
		testableHelper.testable(fnCreateComponentInstance, "fnCreateComponentInstance");

		var mMessagePageParams = {};
		// oCurrentHash contains some information about the current navigation state. A new instance is created for each logical navigation step (when the url is caught)
		var oCurrentHash = {
			iHashChangeCount: 0, // the value of this property is increased with each logical navigation step. It is used to identify the logical navigation steps.
			backTarget: 0   // the hashChangeCount of the logical navigation step that will be reached via back navigation
		};
		// The following properties are added to the currentHash during runtime
		// - oEvent           A copy of the route-matched event that was used to come here
		// - hash:            The (normalized) hash of the current url
		// - targetHash:      If the logical step is navigated away via fnNavigate: (normalized) hash that is navigated to
		// - LeaveByBack:     Information whether the logical navigation step was left via back functionality
		// - LeaveByReplace   Information whether the logical navigation step was removed from history
		// - backwardingInfo: This property is truthy in case the logical step was left via a 'complex' back navigation.
		//                    A complex back navigation can navigate more then one step back and it can be followed by a follow-up
		//                    forward navigation (in order to adjust state)
		//                    backwardingInfo contains the following properties
		//					  * backCount: (maximal) number of back navigations that have to be performed
		//				      * targetViewLevel: optional. If the property is set the back navigation stops when this view level
		//                      is reached (even if backCount requires more back steps)
		//				      * targetHash: The (normalized) hash that finally should be reached
		// - forwardingInfo:  This property is only set temporarily. It is added (in fnHandleRouteMatched) in the following cases
		//                    * If oCurrentHash.backwardingInfo is truthy, a new logical navigation step is started. Therefore, a new instance for oCurrentHash
		//                      is created. Properties backCount, targetViewLevel, and targetHash are copied from backwardingInfo of the previous instance into
		//                      forwardingInfo of the new instance.
		//                      Moreover, properties bIsProgrammatic and bIsBack of forwardingInfo are set to true and iHashChangeCount is set to the same value as
		//                      in the enclosing oCurrentHash.
		//                    * The current url points to a context that is not valid anymore. Method ContextBookkeeping.getAlternativeContextPromise has delivered
		//                      (a Promise to) an alternative context which should be navigated to. In this case only properties bIsProgrammatic, bIsBack, and
		//                      iHashChangeCount are set. bIsProgrammatic contains information whether the logical navigation was triggered programmatically.
		//                      bIsBack contains the information whether the logical navigation step was reached by backward navigation.
		//                      iHashChangeCount is set to the same value as in the enclosing oCurrentHash.
		//                    The property is removed again when the final physical navigation step of a logical navigation step has been performed.

		var aPreviousHashes = []; // array of previous instances of oCurrentHash. Length is always be identical to oCurrentHash.iHashChangeCount. iHashChangeCount of each entry is equal to its position.

		var oActivationPromise = Promise.resolve(); // Enables to wait for the end of the current activation of all components

		// Variables needed to build the navigation menu
		var aBreadCrumbTexts = [];
		var aNavigationMenue = [];

		var aCurrentKeys = [];

		/* get all pages that may be created for functional testing */
		function fnGetAllPages() {
			var oRouter = oNavigationControllerProxy.oRouter,
				oTargets = oRouter.getTargets()._mTargets,
				aAllPages = [];

			Object.keys(oTargets).forEach(function(sTargetKey) {
				var oTarget = oTargets[sTargetKey],
					oOptions = oTarget._oOptions,
					oRoute = oRouter.getRoute(oOptions.viewName),
					oConfig = oRoute && oRoute._oConfig;
				if (oConfig && (!oConfig.navigation || !oConfig.navigation.display)) {
					aAllPages.push({
						oConfig: oConfig
					});
				}
			});
			return aAllPages;
		}

		/* get configurations of all pages defined in the manifest in QUnit tests */
		testableHelper.testable(fnGetAllPages, "fnGetAllPages");

		/* create page(s) of an application for testing result of templating or view creation */
		function fnCreatePages(vPages /* optional array or single object of page configurations as created in fnGetAllPages */) {
			var aPages = vPages || fnGetAllPages();
			if (!Array.isArray(aPages)) {
				aPages = [aPages];
			}
			aPages.forEach(function(oPage) {
				oPage.oComponentContainer = fnCreateComponentInstance(oTemplateContract, oPage.oConfig, function(){} );
			});

			return aPages;
		}

		/* support templating all pages in QUnit tests */
		testableHelper.testable(fnCreatePages, "fnCreatePages");

		function getRootComponentPromise(){
			// Make sure that the loading of the root component starts
			var oViews = oNavigationControllerProxy.oRouter.getViews();
			oViews.getView({
				viewName: "root"
			});
			return oTemplateContract.mRouteToTemplateComponentPromise.root;
		}

		function getAppTitle(){
			return oNavigationControllerProxy.oAppComponent.getManifestEntry("sap.app").title;
		}

		function getCurrenActivationTakt(){
			return oCurrentHash.iHashChangeCount;
		}

		// Begin: Helper methods for creating the navigation menu

		function fnAddUrlParameterInfoForRoute(sRoute, oAppStates, sPath) {
			var fnExtendPars = function(oNewPars){
				jQuery.extend(oAppStates, oNewPars);
			};
			for (var sPar in oTemplateContract.componentRegistry){
				var oComponentRegistryEntry = oTemplateContract.componentRegistry[sPar];
				if (oComponentRegistryEntry.route === sRoute){
					var getUrlParameterInfo = oComponentRegistryEntry.methods.getUrlParameterInfo;
					return getUrlParameterInfo ? getUrlParameterInfo(sPath).then(fnExtendPars) : Promise.resolve();
				}
			}
			return Promise.resolve();
		}

		function fnGetParStringPromise(oAppStates, bAddLevel0Info){
			var oAppStatePromise = bAddLevel0Info ? fnAddUrlParameterInfoForRoute("root", oAppStates) : Promise.resolve();
			return oAppStatePromise.then(function(){
				var sDelimiter = "";
				var sRet = "";
				for (var sPar in oAppStates){
					var aValues = oAppStates[sPar];
					for (var i = 0; i < aValues.length; i++){
						var sValue = aValues[i];
						sRet = sRet + sDelimiter + sPar + "=" + sValue;
						sDelimiter = "&";
					}
				}
				return sRet;
			});
		}

		function getIntent(mHierarchySectionsFromCurrentHash, iViewLevel){
			var sCurrentIntent = location.hash.split("&")[0] + "&/";

			for (var k = 0; k < iViewLevel; k++){
				sCurrentIntent = sCurrentIntent + mHierarchySectionsFromCurrentHash[k];
				if (k < (iViewLevel - 1)){
					sCurrentIntent = sCurrentIntent + "/";
				}
			}
			return sCurrentIntent;
		}

		function setHierarchy(aHierarchy){
			for (var i = 0; i < aHierarchy.length; i++){
				if (aHierarchy[i].title !== aBreadCrumbTexts[aHierarchy.length - i - 1] || ""){ // only case tilte != subtitle should be considerd
					aHierarchy[i].subtitle = aBreadCrumbTexts[aHierarchy.length - i - 1] || "";
				}
			}
			aNavigationMenue = aHierarchy;
			oTemplateContract.oShellServicePromise.then(function(oShellService){
				oShellService.setHierarchy(aHierarchy);
			});
		}

		function fnSubTitleForViewLevelChanged(iViewLevel, sBreadCrumbText){
			aBreadCrumbTexts[iViewLevel] = sBreadCrumbText;

			var oNavigationMenueEntry = aNavigationMenue[aNavigationMenue.length - iViewLevel - 1];
			if (oNavigationMenueEntry){
				if (oNavigationMenueEntry.title !== sBreadCrumbText){ // only case tilte != subtitle should be considerd
					oNavigationMenueEntry.subtitle = sBreadCrumbText;
				}
				oTemplateContract.oShellServicePromise.then(function(oShellService) {
					oShellService.setHierarchy(aNavigationMenue);
				});
			}
		}

		function fnHandleNavigationMenuEntryToOwnView(aHierarchy, oCurrentEntity, mHierarchySectionsFromCurrentHash){
			var sTitle = oCurrentEntity.headerTitle;
			var sTitleIconUrl = oCurrentEntity.titleIconUrl;
			var sFullscreenLayout = oTemplateContract.oFlexibleColumnLayoutHandler.getFullscreenLayout(oCurrentEntity.level);
			var intent = getIntent(mHierarchySectionsFromCurrentHash, oCurrentEntity.level) + "?" + "FCLLayout=" + sFullscreenLayout;

			var oHierarchyEntry = {
				title: sTitle,
				icon: sTitleIconUrl,
				intent: intent
			};
			// for views which are shown in fullscreen there should NOT be an entry in navigation menu
			var bIsVisuallyFullscreen = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/FCL/isVisuallyFullScreen");
			if (oCurrentEntity.level < 3 && !bIsVisuallyFullscreen){
				aHierarchy.push(oHierarchyEntry);
			}
		}

		var oCurrentTitleProvider;

		function fnHandleNavigationMenu(){
			var sTitle, oHierarchyEntry, sTitleIconUrl, oEntity;
			var mHierarchySectionsFromCurrentHash = oTemplateContract.oApplicationProxy.getHierarchySectionsFromCurrentHash();

			if (oCurrentTitleProvider && oCurrentTitleProvider instanceof TemplateComponent){
				var sEntitySet = oCurrentTitleProvider.getProperty("entitySet");
				oEntity = oNavigationControllerProxy.oTemplateContract.mEntityTree[sEntitySet];
			} else {
				return;
			}

			var aHierarchy = [];
			var oCurrentEntity, intent;
			if (oTemplateContract.oFlexibleColumnLayoutHandler){
				oCurrentEntity = oEntity;
			}
			if (mHierarchySectionsFromCurrentHash.length > 0) {
				// If we use FlexibleColumnLayout we need an entry to own view
				if (oTemplateContract.oFlexibleColumnLayoutHandler){
					fnHandleNavigationMenuEntryToOwnView(aHierarchy, oCurrentEntity, mHierarchySectionsFromCurrentHash);
				}
				for (var j = 0; j < mHierarchySectionsFromCurrentHash.length - 1; j++){
					if (oEntity.parent){
						var oParentEntity = oNavigationControllerProxy.oTemplateContract.mEntityTree[oEntity.parent];
						if (oTemplateContract.oFlexibleColumnLayoutHandler){
							intent = getIntent(mHierarchySectionsFromCurrentHash, oParentEntity.level) + "?" + "FCLLayout=" + oTemplateContract.oFlexibleColumnLayoutHandler.getFullscreenLayout(oParentEntity.level);
						} else {
							intent = getIntent(mHierarchySectionsFromCurrentHash, oParentEntity.level);
						}
						sTitle = oParentEntity.headerTitle;
						sTitleIconUrl = oParentEntity.titleIconUrl;
						oEntity = oParentEntity;
					} else {
						if (oTemplateContract.oFlexibleColumnLayoutHandler){
							intent = getIntent(mHierarchySectionsFromCurrentHash, oEntity.level) + "?" + "FCLLayout=" + oTemplateContract.oFlexibleColumnLayoutHandler.getFullscreenLayout(oEntity.level);
						} else {
							intent = getIntent(mHierarchySectionsFromCurrentHash, oEntity.level);
						}
						sTitle = oNavigationControllerProxy.oTemplateContract.mEntityTree[oEntity.entitySet].headerTitle;
						sTitleIconUrl = oNavigationControllerProxy.oTemplateContract.mEntityTree[oEntity.entitySet].titleIconUrl;
					}

					oHierarchyEntry = {
						title: sTitle,
						icon: sTitleIconUrl,
						intent: intent
					};
					aHierarchy.push(oHierarchyEntry);
				}

				// Entry for ListReport
				oHierarchyEntry = {
					title: getAppTitle()
				};
				oHierarchyEntry.intent = location.hash.split("&")[0];
				
				if (oTemplateContract.oFlexibleColumnLayoutHandler && oTemplateContract.oFlexibleColumnLayoutHandler.isListAndFirstEntryLoadedOnStartup()){
					oHierarchyEntry.intent = oHierarchyEntry.intent + "&/?" + "FCLLayout=" + oTemplateContract.oFlexibleColumnLayoutHandler.getFullscreenLayout(0);
				}

				fnGetParStringPromise({}, true).then(function(sPar){
					if (sPar){
						if (oTemplateContract.oFlexibleColumnLayoutHandler && oTemplateContract.oFlexibleColumnLayoutHandler.isListAndFirstEntryLoadedOnStartup()){	 //then "/?" is already there; see statement above
							oHierarchyEntry.intent = oHierarchyEntry.intent + "&" + sPar;
						} else {
							oHierarchyEntry.intent = oHierarchyEntry.intent + "&/?" + sPar;
						}
					}
					aHierarchy.push(oHierarchyEntry);
					setHierarchy(aHierarchy);
				});
			}
		}

		// End: Helper methods for creating the navigation menu

		function fnSetTitleForComponent(isAppTitlePrefered, oTitleProvider){
			var sTitle;
			if (!isAppTitlePrefered && oTitleProvider instanceof TemplateComponent){
				var oRegistryEntry = oTitleProvider && oTemplateContract.componentRegistry[oTitleProvider.getId()];
				var fnGetTitle = oRegistryEntry && oRegistryEntry.methods.getTitle;
				sTitle = fnGetTitle && fnGetTitle();
			} else if (!isAppTitlePrefered && oTitleProvider && oTitleProvider.title){
				sTitle = oTitleProvider.title;
			}
			sTitle = sTitle || getAppTitle();
			oCurrentTitleProvider = oTitleProvider;

			oTemplateContract.oShellServicePromise.then(function (oShellService) {
				oShellService.setTitle(sTitle);
				fnHandleNavigationMenu();
			});
		}

		function fnActivateMessageButtonHelpers(mViewLevel2MessageButtonHelper, maxActiveViewLevel){
			var oMaster;
			var aSlaves = [];
			for (var i = 0; i <= maxActiveViewLevel; i++){
				var oMessageButtonHelper = mViewLevel2MessageButtonHelper[i];
				if (oMessageButtonHelper){
					if (oMaster){
						aSlaves.push(oMessageButtonHelper);
					} else {
						oMaster = oMessageButtonHelper;
					}
				}
			}
			if (oMaster){
				oMaster.resume(aSlaves);
			}
		}

		// This method is called when all views have been set to their places
		function fnAfterActivationImpl(oTitleProvider){
			var aPageDataLoadedPromises = [oTemplateContract.oPagesDataLoadedObserver.getProcessFinished(true)];
			var oActiveComponent = null;
			var iCurrentHashCount = oCurrentHash.iHashChangeCount;
			var maxActiveViewLevel = -1;
			var mViewLevel2MessageButtonHelper = {};
			for (var sComponentId in oTemplateContract.componentRegistry){
				var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
				var oMessageButtonHelper = oRegistryEntry.oControllerRegistryEntry && oRegistryEntry.oControllerRegistryEntry.oTemplateUtils.oServices.oTemplateCapabilities.oMessageButtonHelper;
				if (oRegistryEntry.activationTakt < iCurrentHashCount){ // component is currently not active
					oRegistryEntry.utils.suspendBinding();
					if (oMessageButtonHelper){
						oMessageButtonHelper.suspend();
					}
				} else {
					aPageDataLoadedPromises.push(oRegistryEntry.oViewRenderdPromise);
					if (oRegistryEntry.viewLevel > maxActiveViewLevel){
						maxActiveViewLevel = oRegistryEntry.viewLevel;
						oActiveComponent = oRegistryEntry.oComponent;
					}
					mViewLevel2MessageButtonHelper[oRegistryEntry.viewLevel] = oMessageButtonHelper;
				}
			}
			fnActivateMessageButtonHelpers(mViewLevel2MessageButtonHelper, maxActiveViewLevel);

			var isAppTitlePrefered = oTemplateContract.oFlexibleColumnLayoutHandler && oTemplateContract.oFlexibleColumnLayoutHandler.isAppTitlePrefered();
			fnSetTitleForComponent(isAppTitlePrefered, oTitleProvider || oActiveComponent);

			Promise.all(aPageDataLoadedPromises).then(function(){
				if (iCurrentHashCount === oCurrentHash.iHashChangeCount && jQuery.isEmptyObject(mMessagePageParams)){
					oTemplateContract.oAppComponent.firePageDataLoaded();
				}
			});
		}

		// Default call
		var fnAfterActivation = fnAfterActivationImpl.bind(null, null); // do not pass a TitleProvider/forward to fnAfterActivationImpl

		// Start: navigation methods

		function fnNavigateBack(){
			jQuery.sap.log.info("Navigate back");
			if (oCurrentHash.backTarget && fnNormalizeHash(oHistory.getPreviousHash() || "") !== fnNormalizeHash(oCurrentHash.hash)){
				oTemplateContract.oBusyHelper.setBusyReason("HashChange", true);
			}
			oCurrentHash.LeaveByBack = true;
			window.history.back();
		}

		/*
		 * Sets/Replaces the hash via the router/hash changer
		 * @param {string} sHash - the hash string
		 * @param {boolean} bReplace - whether the hash should be replaced
		 */
		function fnNavigate(sHash, bReplace) {
			sHash = fnNormalizeHash(sHash || "");
			jQuery.sap.log.info("Navigate to hash: " + sHash);
			if (sHash === oCurrentHash.hash){
				jQuery.sap.log.info("Navigation suppressed since hash is the current hash");
				return; // ignore navigation that does nothing
			}
			oTemplateContract.oBusyHelper.setBusyReason("HashChange", true);
			oCurrentHash.targetHash = sHash;
			if (oCurrentHash.backTarget && fnNormalizeHash(oHistory.getPreviousHash() || "") === sHash){
				fnNavigateBack();
				return;
			}
			oCurrentHash.LeaveByReplace = bReplace;
			if (bReplace) {
				oNavigationControllerProxy.oHashChanger.replaceHash(sHash);
			} else {
				oNavigationControllerProxy.oHashChanger.setHash(sHash);
			}
		}

		function fnNavigateToParStringPromise(sPath, oParStringPromise, bReplace, oBackwardingInfo){
			var oRet = oParStringPromise.then(function(sPars){
				if (sPars){
					sPath = sPath + "?" + sPars;
				}
				if (oBackwardingInfo){
					oCurrentHash.backwardingInfo = {
						backCount: oBackwardingInfo.backCount,
						targetViewLevel: oBackwardingInfo.targetViewLevel,
						targetHash: fnNormalizeHash(sPath)
					};
					fnNavigateBack();
				} else {
					fnNavigate(sPath, bReplace);
				}
				return sPath;
			});
			oTemplateContract.oBusyHelper.setBusy(oRet);
			return oRet;
		}

		function getBackLengthToRoot(bOnlyDirect){
			var iRet = 0;
			for (var oHash = oCurrentHash; oHash.oEvent; ){
				var iViewLevel = oHash.oEvent.getParameter("config").viewLevel;
				if (iViewLevel === 0){
					return iRet;
				}
				if (bOnlyDirect && iRet > 0){
					return -1;
				}
				iRet++;
				oHash = aPreviousHashes[oHash.backTarget];
			}
			return -1;
		}

		function fnGetBackwardingInfoForTarget(bReplace, sPath, iTargetLevel){
			if (iTargetLevel === 0){
				var iBackLengthToRoot = getBackLengthToRoot(!bReplace);
				return (iBackLengthToRoot > 0) && {
					backCount: iBackLengthToRoot,
					targetViewLevel: 0
				};				
			}
			var oPreviousHash = aPreviousHashes[oCurrentHash.backTarget];
			return oPreviousHash && oPreviousHash.hash && fnNormalizeHash(oPreviousHash.hash.split("?")[0]) === fnNormalizeHash(sPath) && { backCount: 1 };
		}
		
		// Navigates to the root page. Thereby it restores the iappstate the root page was left (if we have already been there)
		function fnNavigateToRoot(bReplace) {
			if (oTemplateContract.oFlexibleColumnLayoutHandler) { // If we are in FCL mode we will always navigate to root route (ListReport)
				oTemplateContract.oFlexibleColumnLayoutHandler.setStoredTargetLayoutToOneColumn();
			}
			fnNavigateToPath("root", "", 0, bReplace);
		}

		function getTargetComponentPromises(oTarget){
			var sRouteName = oTemplateContract.mEntityTree[oTarget.entitySet].sRouteName;
			var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRouteName];
			return [oComponentPromise];
		}

		function fnPresetDisplayMode(aTargetComponentPromises, iDisplayMode){
			var iCurrentTakt = oCurrentHash.iHashChangeCount;
			var fnPreset = function(oComponent){
				var oRegistryEntry = oTemplateContract.componentRegistry[oComponent.getId()];
				(oRegistryEntry.methods.presetDisplayMode || jQuery.noop)(iDisplayMode, iCurrentTakt === oRegistryEntry.activationTakt);
			};
			for (var i = 0; i < aTargetComponentPromises.length; i++){
				var oTargetPromise = aTargetComponentPromises[i];
				oTargetPromise.then(fnPreset);
			}
		}

		function getTargetLevel(oTarget) {
			var oTargetTreeNode = oTarget && oTemplateContract.mEntityTree[oTarget.entitySet];
			var iTargetLevel = oTargetTreeNode ? oTargetTreeNode.level : 1;
			return iTargetLevel;
		}


		function fnAddSuffixToCurrentHash(sSuffix, iViewLevel){
			var aParts = oTemplateContract.oApplicationProxy.getHierarchySectionsFromCurrentHash();
			var sRet = sSuffix;
			for (var i = iViewLevel - 2; i >= 0; i--){
				sRet = aParts[i] + "/" + sRet;
			}
			return "/" + sRet;
		}

		function fnNavigateToPath(sRoute, sPath, iTargetLevel, bReplace){
			var oAppStates = {};
			// Currently, it seems cumbersome to get the route name in case no target is available (i.e. vTargetContext was only a string).
			// It is however only needed for the theoretical case of object pages providing appstates, which is currently not the case.
			// Therefore, the routename is not determined in the cumbersome cases.
			var oNavigationPromise = new Promise(function(fnResolve){
				fnAddUrlParameterInfoForRoute(sRoute, oAppStates, sPath).then(function(){
					var oParStringPromise = oTemplateContract.oFlexibleColumnLayoutHandler ?
						oTemplateContract.oFlexibleColumnLayoutHandler.getAppStateParStringForNavigation(iTargetLevel, oAppStates) :
						fnGetParStringPromise(oAppStates, false);
					var oBackwardingInfo = fnGetBackwardingInfoForTarget(bReplace, sPath, iTargetLevel);
					fnNavigateToParStringPromise(sPath, oParStringPromise, bReplace, oBackwardingInfo).then(fnResolve);
				});
			});
			oTemplateContract.oBusyHelper.setBusy(oNavigationPromise);
			return oNavigationPromise;
		}

		function fnNavigateToSuffix(sSuffix, iViewLevel, sRoute, bReplace){
			var sPath = fnAddSuffixToCurrentHash(sSuffix, iViewLevel);
			fnNavigateToPath(sRoute, sPath, iViewLevel, bReplace);
		}

		// vTargetContext is either a string or an object. Only in the second case sNavigationProperty may be used.
		function fnNavigateToContextImpl(vTargetContext, sNavigationProperty, bReplace, iDisplayMode, oQuery) {
			var sPath;

			var oTarget, iTargetLevel;
			var aTargetComponentPromises = [];
			if (typeof vTargetContext === "string"){
				sPath = vTargetContext;
				iTargetLevel = fnNormalizeHash(sPath).split("/").length - 1;
			} else {
			// get the navigation path from binding context
				oTarget = routingHelper.determineNavigationPath(vTargetContext, sNavigationProperty);
				iTargetLevel = getTargetLevel(oTarget);
				sPath = oTarget.path;
				aTargetComponentPromises = getTargetComponentPromises(oTarget);
			}
			if (sPath) {
				if (sNavigationProperty) {
					sPath = fnAddSuffixToCurrentHash(sPath, iTargetLevel);
				}
				fnPresetDisplayMode(aTargetComponentPromises, iDisplayMode || 0);
				// navigate to context
				if (oQuery){
					var sQuery = "";
					var sDelim = "&";
					for (var sPar in oQuery){
						sQuery = sQuery + sDelim + sPar + "=" + oQuery[sPar];
						sDelim = "&";
					}
					if (sQuery){
						sPath = sPath + "?" + sQuery;
					}
					fnNavigate(sPath, bReplace);
					return Promise.resolve(sPath);
				} else {
					var sRoute = oTarget && oTemplateContract.mEntityTree[oTarget.entitySet].sRouteName;
					return fnNavigateToPath(sRoute, sPath, iTargetLevel, bReplace);
				}
			}
		}

		function fnNavigateToContext(vTargetContext, sNavigationProperty, bReplace, iDisplayMode) {
			return fnNavigateToContextImpl(vTargetContext, sNavigationProperty, bReplace, iDisplayMode);
		}

		function fnPerformPseudoHashChange(aStaysVisible){
			var iLastHashCount = oCurrentHash.iHashChangeCount;
			oCurrentHash.iHashChangeCount++;
			aPreviousHashes.push(null);
			if (aStaysVisible){
				for (var sPar in oTemplateContract.componentRegistry){
					var oRegistryEntry = oTemplateContract.componentRegistry[sPar];
					if (oRegistryEntry.activationTakt === iLastHashCount && aStaysVisible[oRegistryEntry.viewLevel]){
						oRegistryEntry.activationTakt = oCurrentHash.iHashChangeCount;
					}
				}
			}
			return {
				iHashChangeCount: oCurrentHash.iHashChangeCount
			};
		}

		function fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters) {
			var sEntitySet, sText, oEntitySet, oEntityType, oHeaderInfo, sIcon = null,
				oMetaModel, sDescription;
			if (mParameters) {
				sEntitySet = mParameters.entitySet;
				sText = mParameters.text;
				sIcon = mParameters.icon;
				sDescription = mParameters.description;
			}

			if (sEntitySet) {
				oMetaModel = oTemplateContract.oAppComponent.getModel().getMetaModel();
				if (oMetaModel) {
					oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
					oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					oHeaderInfo = oEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"];
				}
				if (oHeaderInfo && oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
					sIcon = oHeaderInfo.TypeImageUrl.String;
				}
			}

			oTemplateContract.oShellServicePromise.then(function(oShellService) {
				if (oShellService.setBackNavigation) {
					oShellService.setBackNavigation(undefined);
				}
			});
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/messagePage", {
				text: sText,
				icon: sIcon,
				description: sDescription
			});

			var aLevelsBecomingInvisible;
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				aLevelsBecomingInvisible = oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler.displayMessagePage(mParameters);
			} else {
				var oTargets = oNavigationControllerProxy.oRouter.getTargets();
				oTargets.display("messagePage");
			}
			fnPerformPseudoHashChange(aLevelsBecomingInvisible);
			fnAfterActivationImpl(mParameters);
		}

		function fnShowStoredMessage(){
			if (!jQuery.isEmptyObject(mMessagePageParams)){
				var mParameters = null;
				for (var i = 0; !mParameters; i++){
					mParameters = mMessagePageParams[i];
				}
				mMessagePageParams = {};
				fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters);
			}
		}

		function fnNavigateToMessagePage(mParameters) {
			if (oNavigationControllerProxy.oTemplateContract.oFlexibleColumnLayoutHandler){
				mParameters.viewLevel = mParameters.viewLevel || 0;
				mMessagePageParams[mParameters.viewLevel] = mParameters;
				var oLoadedFinishedPromise = Promise.all([oActivationPromise, oNavigationControllerProxy.oTemplateContract.oPagesDataLoadedObserver.getProcessFinished(true)]);
				oLoadedFinishedPromise.then(fnShowStoredMessage);
				return;
			}
			fnTransferMessageParametersToGlobalModelAndDisplayMessage(mParameters);
		}

		// End: Navigation methods

		function getActiveComponents(){
			var aRet = [];
			var iCurrentHashCount = oCurrentHash.iHashChangeCount;
			for (var sComponentId in oTemplateContract.componentRegistry){
				var oRegistryEntry = oTemplateContract.componentRegistry[sComponentId];
				if (oRegistryEntry.activationTakt === iCurrentHashCount){ // component is currently active
					aRet.push(sComponentId);
				}
			}
			return aRet;
		}

		function getCurrentKeys(iViewLevel){
			return aCurrentKeys.slice(0, iViewLevel + 1);
		}

		// Start: Handling url-changes

		/*
		 * calls onActivate on the specified view, if it exists
		 * @param {Object} oView - the view
		 * @param {string} sPath - the path in the model
		 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
		 */
		function fnActivateOneComponent(sPath, oActivationInfo, oComponent) {
			var oRegistryEntry = oTemplateContract.componentRegistry[oComponent.getId()] || {};
			var bIsComponentCurrentlyActive = (oRegistryEntry.activationTakt === oActivationInfo.iHashChangeCount - 1);
			oRegistryEntry.activationTakt = oActivationInfo.iHashChangeCount;
			// trigger onActivate on the component instance
			// if Component is assembled without TemplateAssembler it could be that oComponent.onActivate is undefined
			// e.g. an application has an own implementation of Component
			var oRet;
			if (oComponent && oComponent.onActivate) {
				oRet = oComponent.onActivate(sPath, bIsComponentCurrentlyActive);
			}
			return oRet || oRegistryEntry.viewRegisterd;
		}

		/*
		 * calls onActivate on the specified view, if it exists. Only used in the Non-FCL case
		 * @param {Object} oView - the view
		 * @param {string} sPath - the path in the model
		 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
		 */
		function fnActivateComponent(sPath, oActivationInfo, oComponent) {
			return fnActivateOneComponent(sPath, oActivationInfo, oComponent).then(fnAfterActivation);
		}

		function fnAdaptPaginatorInfoAfterNavigation(oEvent, bIsProgrammatic, bIsBack){
			var oNewPaginatorInfo = {};
			if (bIsProgrammatic || bIsBack){
				var iViewLevel = oEvent.getParameter("config").viewLevel;
				var oCurrentPaginatorInfo = oTemplateContract.oTemplatePrivateGlobalModel.getProperty("/generic/paginatorInfo");
				for (var iLevel = 0; iLevel < iViewLevel; iLevel++){
					oNewPaginatorInfo[iLevel] = oCurrentPaginatorInfo[iLevel];
				}
			}
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/paginatorInfo", oNewPaginatorInfo);
		}

		function fnGetAlternativeContextPromise(sPath){
			return oTemplateContract.oApplicationProxy.getAlternativeContextPromise(sPath);
		}

		function fnHandleBeforeRouteMatched(oEvent){
			if (oTemplateContract.oFlexibleColumnLayoutHandler){
				oTemplateContract.oFlexibleColumnLayoutHandler.handleBeforeRouteMatched(oEvent);
			}
		}

		function fnExtractKeys(oKeys, iViewLevel){
			aCurrentKeys = [""];
			for (var iLevel = 1; iLevel <= iViewLevel; iLevel++){
				var sKey = "keys" + iLevel;
				aCurrentKeys.push(oKeys[sKey]);
			}
		}

		// This handler is registered at the route matched event of the router. It is thus called whenever the url changes within the App (if the new url is legal)
		function fnHandleRouteMatched(oEvent) {
			oEvent = jQuery.extend({}, oEvent); // as this handler works partially asynchronous and events are pooled by UI5, we create a defensive copy
			var iViewLevel = oEvent.getParameter("config").viewLevel;
			var sHash = fnNormalizeHash(oNavigationControllerProxy.oHashChanger.getHash() || "");
			jQuery.sap.log.info("Route matched with hash " + sHash);
			var oPreviousHash; // will be oCurrentHash soon
			if (oCurrentHash.backwardingInfo){   // then this is the first step of a 'complex back navigation'
				// Store oCurrentHash in aPreviousHashes and create a new instance of oCurrentHash for the newly started logical navigation step
				oPreviousHash = oCurrentHash;
				aPreviousHashes.push(oPreviousHash);
				var iNewHashChangeCount = oPreviousHash.iHashChangeCount + 1;
				oCurrentHash = {
					iHashChangeCount: iNewHashChangeCount,
					forwardingInfo: {
						bIsProgrammatic: true,
						bIsBack: true,
						iHashChangeCount: iNewHashChangeCount,
						backCount: oPreviousHash.backwardingInfo.backCount,
						targetHash: oPreviousHash.backwardingInfo.targetHash,
						targetViewLevel: oPreviousHash.backwardingInfo.targetViewLevel
					},
					backTarget: oPreviousHash.backTarget // temporary. Will be adapted below
				};
			}
			if (oCurrentHash.forwardingInfo){ // This can be either, because we are processing a complex back navigation or we are processing a follow-up navigation to an alternative context
				if (oCurrentHash.forwardingInfo.backCount){ // if we are in the complex back navigation scenario -> we have come here via back and need to update our book-keeping
					oCurrentHash.backTarget = aPreviousHashes[oCurrentHash.backTarget].backTarget; // oCurrentHash.backTarget is, what we have come to. So our new backTarget is the backTarget of that entry.
					oCurrentHash.forwardingInfo.backCount--; // we need to get back one step less
					if (oCurrentHash.forwardingInfo.backCount && iViewLevel !== oCurrentHash.forwardingInfo.targetViewLevel){ // if we still need to get back?
						oCurrentHash.hash = sHash;
						fnNavigateBack(); // so navigate back.
						return; // fnHandleRouteMatched will be called with the new url, so leave further processing to that call
					}
					delete oCurrentHash.forwardingInfo.backCount; // no more back navigation -> remove the property
				}
				if (oCurrentHash.forwardingInfo.targetHash && oCurrentHash.forwardingInfo.targetHash !== sHash){
					// if the targetHash is not reached yet, we need to perform another navigation
					oCurrentHash.hash = sHash;
					var sTargetHash = oCurrentHash.forwardingInfo.targetHash;
					delete oCurrentHash.forwardingInfo.targetHash; // the targetHash will be reached with next physical navigation step -> remove the property
					fnNavigate(sTargetHash, true);
					return; // fnHandleRouteMatched will be called with the new url, so leave further processing to that call
				}
			}
			// State changers may identify the hash change as something which can be handled by them internally. In this case we do not need to run the whole mechanism.
			// Since isStateChange is allowed to have side-effects we call all StateChangers (currently only one exists).
			var bIsStateChange = false;
			for (var i = 0; i < oTemplateContract.aStateChangers.length; i++){
				var oStateChanger = oTemplateContract.aStateChangers[i];
				if (oStateChanger.isStateChange(oEvent)){
					bIsStateChange = true;
				}
			}

			if (bIsStateChange){
				oCurrentHash.hash = sHash;
				// If state was changed rebuild the navigation menu because AppState is needed in the URL
				fnHandleNavigationMenu();
				return;
			}
			// When we come here, oCurrentHash does not contain any information about need to forward anymore, and the url-change was not triggered by a state changer.
			// At this point in time oCurrentHash may still represent the previous logical navigation step or already represent the current logical navigation step.
			// These two scenarios can be distinguished via property forwardingInfo of oCurrentHash. If this property is truthy the first option applies.
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/routeLevel", iViewLevel);
			// oActivationInfo is an object that will be passed to helper functions that deal with follow-up activities.
			// It contains the following properties:
			// - iHashChangeCount the current hashChangeCount
			// - bIsProgrammatic  information whether the logical navigation was triggered programmatically
			// - bIsBack          information whether the logical navigation step was reached by backward navigation
			var oActivationInfo = oCurrentHash.forwardingInfo; // If there is a forwardingInfo it already provides the required properties
			delete oCurrentHash.forwardingInfo;
			if (!oActivationInfo){ // then we have to create oActivationInfo AND a new instance for oCurrentHash
				oActivationInfo = {};
				var iPreviousHashChangeCount = oCurrentHash.iHashChangeCount;
				oActivationInfo.iHashChangeCount = iPreviousHashChangeCount + 1;
				oActivationInfo.bIsProgrammatic = (sHash === oCurrentHash.targetHash);
				oActivationInfo.bIsBack = !!(oCurrentHash.LeaveByBack || (!oActivationInfo.bIsProgrammatic && (oHistory.getDirection() === HistoryDirection.Backwards)));
				oCurrentHash.LeaveByBack = oActivationInfo.bIsBack;
				oCurrentHash.LeaveByReplace = oActivationInfo.bIsProgrammatic && oCurrentHash.LeaveByReplace;
				oPreviousHash = oCurrentHash;
				aPreviousHashes.push(oPreviousHash);
				oCurrentHash = {
					iHashChangeCount: oActivationInfo.iHashChangeCount
				};
				// identify the back target
				if (oPreviousHash.LeaveByReplace){
					oCurrentHash.backTarget = oPreviousHash.backTarget; // url is replaced  -> back target remains unchanged
				} else if (oActivationInfo.bIsBack){
					oCurrentHash.backTarget = aPreviousHashes[oPreviousHash.backTarget].backTarget; // -> new back target is the back target of the previous back target
				} else {
					oCurrentHash.backTarget = iPreviousHashChangeCount;	// last url is back target
				}
			}
			oCurrentHash.oEvent = oEvent;
			oCurrentHash.hash = sHash;

			// The link we are navigating to might have been made obsolete during the runtime of the App. This would happen in the following cases:
			// - Link points to a draft, but the draft has been activated or cancelled meanwhile.
			// - Link points to an active entity. Meanwhile, a draft for this active entity has been created within this session.
			// - Link points to an object which has been deleted meanwhile.
			// Whereas we cannot do anything in the third case (thus, a message page will be displayed then), in the first two cases we want to
			// automatically forward the user to the correct instance.
			// In order to achieve this, we use method fnGetAlternativeContextPromise which may provide an alternative context to navigate to.
			// However, there are two limitations for that:
			// - In general the functionality only covers activation/cancellation/draft-creation actions which have been performed within this session.
			//   These actions have been registered within class ContextBookkeeping.
			// - For hashes pointing to item level (viewLevel > 1) it is currently not possible to determine the alternative path. Therefore, the determination
			//   whether an alternative context is required is done on root object level. Thus, the root object is navigated to, if one of the cases above is
			//   discovered.
			var oRouteConfig = oEvent.getParameter("config");
			var sPath = routingHelper.determinePath(oRouteConfig, oEvent);
			// sTestPath is the path for which we check, whether one of the cases described above, occurs. As discussed above, for viewLevel > 1 we
			// cannot use sPath (which points to the item), but must use the corresponding path pointing to the root.
			var sTestPath = iViewLevel < 2 ? sPath : routingHelper.determinePath(oRouteConfig, oEvent, oTemplateContract.routeViewLevel1.pattern);
			fnGetAlternativeContextPromise(sTestPath).then(function(oAlternativeContextInfo){
				var oKeys = oEvent.getParameter("arguments");
				if (oAlternativeContextInfo){ // then one of the cases described above occurs
					var oQuery = oKeys["?query"]; // We want to navigate to another context, but the query parameters should stay the same
					oCurrentHash.forwardingInfo = oActivationInfo; // Note: This is the second scenario for forwardingInfo as described in the comment for oCurrentHash (see above)
					fnNavigateToContextImpl(oAlternativeContextInfo.context, null, true, oAlternativeContextInfo.iDisplayMode, oQuery || {}); // Navigate to the other context
					return; // note that fnHandleRouteMatched will be called again
				}
				// When we reach this point, the logical navigation step has reached its final url.
				// Now we have to adapt the state of the application
				fnExtractKeys(oKeys, iViewLevel);
				setHierarchy([]);
				fnAdaptPaginatorInfoAfterNavigation(oEvent, oActivationInfo.bIsProgrammatic, oActivationInfo.bIsBack);

				if (oTemplateContract.oFlexibleColumnLayoutHandler){
					oActivationPromise = oTemplateContract.oFlexibleColumnLayoutHandler.handleRouteMatched(oEvent, oRouteConfig, sPath, oActivationInfo);
				} else {

					if (oRouteConfig.viewLevel === 0 || !(oActivationInfo.bIsProgrammatic || oActivationInfo.bIsBack)){
						oTemplateContract.oApplicationProxy.setEditableNDC(false);
					}

					var sRoute = oRouteConfig.target;   // Note: Route and targetnames are identical
					var oComponentPromise = oTemplateContract.mRouteToTemplateComponentPromise[sRoute];
					oActivationPromise = new Promise(function(fnResolve){
						oComponentPromise.then(function(oComponent){
							fnActivateComponent(sPath, oActivationInfo, oComponent).then(fnResolve);
						});
					});
				}
				oActivationPromise.then(oTemplateContract.oBusyHelper.setBusyReason.bind(null, "HashChange", false));
			});
		}

		// Event handler fired by router when no matching route is found
		function fnHandleBypassed() {
			fnNavigateToMessagePage({
				title: oTemplateContract.getText("ST_ERROR"),
				text:  oTemplateContract.getText("ST_GENERIC_UNKNOWN_NAVIGATION_TARGET"),
				description: "",
				replaceURL: true
			});
		}

		if (oTemplateContract.sRoutingType === "f"){
			oNavigationControllerProxy.oRouter.attachBeforeRouteMatched(fnHandleBeforeRouteMatched);
		}
		oNavigationControllerProxy.oRouter.attachRouteMatched(fnHandleRouteMatched);

		oNavigationControllerProxy.oRouter.attachBypassed(fnHandleBypassed);
		// End: Handling url-changes

		// Expose methods via NavigationController proxy
		oNavigationControllerProxy.navigate = fnNavigate;
		oNavigationControllerProxy.navigateToParStringPromise = fnNavigateToParStringPromise;
		oNavigationControllerProxy.activateOneComponent = fnActivateOneComponent;
		oNavigationControllerProxy.afterActivation = fnAfterActivation;
		oNavigationControllerProxy.addUrlParameterInfoForRoute = fnAddUrlParameterInfoForRoute;
		oNavigationControllerProxy.getParStringPromise = fnGetParStringPromise;
		oNavigationControllerProxy.performPseudoHashChange = fnPerformPseudoHashChange;
		oNavigationControllerProxy.getActiveComponents = getActiveComponents;
		oNavigationControllerProxy.getRootComponentPromise = getRootComponentPromise;
		oNavigationControllerProxy.getCurrenActivationTakt = getCurrenActivationTakt;
		oNavigationControllerProxy.getCurrentKeys = getCurrentKeys;
		oNavigationControllerProxy.getTargetLevel = getTargetLevel;
		oNavigationControllerProxy.getAppTitle = getAppTitle;
		oNavigationControllerProxy.subTitleForViewLevelChanged = fnSubTitleForViewLevelChanged;
		oNavigationControllerProxy.navigateToSuffix = fnNavigateToSuffix;

		return {
			/**
			* Navigates to the root view.
			*
			* @public
			* @param {boolean} bReplace If this is true the navigation/hash will be replaced
			*/
			navigateToRoot: fnNavigateToRoot,

			/**
			 * Navigates to the specified context.
			 *
			 * @public
			 * @param {Object} oTargetContext - The context to navigate to (or null - e.g. when the navigationProperty should be appended to the current path)
			 * @param {string} sNavigationProperty - The navigation property
			 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
			 */
			navigateToContext: fnNavigateToContext,
			/**
			 * Navigates to the message page and shows the specified content.
			 *
			 * @public
			 * @param {Object} mParameters - The parameters for message page
			 */
			navigateToMessagePage: fnNavigateToMessagePage,

			/**
			 * Navigate back
			 *
			 * @public
			 */
			navigateBack: fnNavigateBack
		};
	}

	function constructor(oNavigationController, oTemplateContract){
		var oNavigationControllerProxy = {
			oAppComponent: oTemplateContract.oAppComponent,
			oRouter: oTemplateContract.oAppComponent.getRouter(),
			oTemplateContract: oTemplateContract,
			oHashChanger: HashChanger.getInstance(),
			mRouteToComponentResolve: {}
		};
		oTemplateContract.oNavigationControllerProxy = oNavigationControllerProxy;
		var oFinishedPromise = new Promise(function(fnResolve){
			// remark: In case of inbound navigation with edit-mode and an existing draft, this promise will be resolved
			// before the initialization is actually finished.
			// This is necessary to be able to show the unsavedChanges-Dialog
			oNavigationControllerProxy.fnInitializationResolve = fnResolve;
		});
		oTemplateContract.oBusyHelper.setBusy(oFinishedPromise);
		jQuery.extend(oNavigationController, getMethods(oTemplateContract, oNavigationControllerProxy));
		jQuery.extend(oNavigationControllerProxy, oNavigationController);
		var mViews = {};
		// TODO: this has to be clarified and fixed
		oNavigationControllerProxy.oRouter._oViews._getViewWithGlobalId = function(oView) {
			// Test only
			if (!mViews[oView.viewName]){
				var oRoute = oNavigationControllerProxy.oRouter.getRoute(oView.viewName);
				var oContainer;
				if (oRoute && oRoute._oConfig) {
					oContainer = fnCreateComponentInstance(oTemplateContract, oRoute._oConfig, oNavigationControllerProxy.mRouteToComponentResolve[oView.viewName]);
				} else {
					oContainer = sap.ui.view({
						viewName: oView.viewName,
						type: oView.type,
						height: "100%"
					});
				}
				mViews[oView.viewName] = oContainer;
				if (oView.viewName === "root") {
					oTemplateContract.rootContainer = oContainer;
				}
			}
			return mViews[oView.viewName];
		};
		routingHelper.startupRouter(oNavigationControllerProxy);
	}

	/*
	 * Handles all navigation and routing-related tasks for the application.
	 *
	 * @class The NavigationController class creates and initializes a new navigation controller with the given
	 *        {@link sap.suite.ui.generic.template.lib.AppComponent AppComponent}.
	 * @param {sap.suite.ui.generic.template.lib.AppComponent} oAppComponent The AppComponent instance
	 * @public
	 * @extends sap.ui.base.Object
	 * @version 1.50.5
	 * @since 1.30.0
	 * @alias sap.suite.ui.generic.template.lib.NavigationController
	 */
	var NavigationController = BaseObject.extend("sap.suite.ui.generic.template.lib.NavigationController", {
		metadata: {
			library: "sap.suite.ui.generic.template"
		},
		constructor: function(oTemplateContract) {
			// inherit from base object.
			BaseObject.apply(this, arguments);
			testableHelper.testableStatic(constructor, "NavigationController")(this, oTemplateContract);
		}
	});

	NavigationController._sChanges = "Changes";
	return NavigationController;
});
}; // end of sap/suite/ui/generic/template/lib/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateAssembler') ) {
// This class is the central facility assembling Templates that can be used within a Smart Template application.
// Moreover, it serves as a registry for all central objects used in context of Smart Templates. 
// In order to achieve this it provides three static methods:
// - getTemplateComponent creates a Template out of an abstract Template definition
// - getRegisterAppComponent is used by class AppComponent to establish a communication between the classes AppComponent and TemplateAssembler. 
//   Note that this method cannot be used by any other class.
// - getExtensionAPIPromise provides access to the instance of the extensionAPI suitable for a certain control

jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateAssembler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/lib/TemplateAssembler",["jquery.sap.global", "sap/ui/core/mvc/View", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel",
			"sap/suite/ui/generic/template/lib/TemplateViewController",
			"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/lib/Application",
			"sap/suite/ui/generic/template/lib/CRUDManager", "sap/suite/ui/generic/template/lib/CommonUtils",
			"sap/suite/ui/generic/template/lib/ComponentUtils", "sap/suite/ui/generic/template/lib/CommonEventHandlers",
			"sap/suite/ui/generic/template/lib/ViewDependencyHelper", "sap/suite/ui/generic/template/lib/routingHelper",
			"sap/suite/ui/generic/template/lib/testableHelper"
		],
		function(jQuery, View, JSONModel, ResourceModel, TemplateViewController, TemplateComponent, Application, CRUDManager, CommonUtils,
			ComponentUtils, CommonEventHandlers, ViewDependencyHelper, routingHelper, testableHelper) {
			"use strict";

			var mAppRegistry = Object.create(null); // Registry for the AppComponents (mapping the id of the AppComponent onto its registry entry).
			                                        // Note that currently there is no scenario known, in which more than one AppComponent is active at the same time.
			                                        // Therefore, this map will never contain more than one entry.
			                                        // fnRegisterAppComponent (see below) is used to register/deregister an AppComponent into this registry.
			                                        // See also there for information, which properties are contained in a registry entry.
			var mControllerRegistry = Object.create(null); // Registry for the controllers (instances of TemplateViewController) of TemplateComponents.
			                                               // It maps the id of the controller onto the corresponding registry entry.
			                                               // See below (function getTemplateViewController) for the mechanism of registering (oControllerDefinition.constructor)
			                                               // resp. deregistering (oControllerDefinition.onExit) from this registry.
			                                               // The registry entry itself is created within the method fnGenericOnInit which is temporarily attached
			                                               // to the controller.
			                                               // Note that this instance is also added as property oControllerRegistryEntry to the registry entry of the
			                                               // corresponding TemplateComponent.
			                                               // The registry entry contains the following properties:
			                                               // - onExit: exit function of the controller as defined in the methods-object provided in the controller definition
			                                               // - oTemplateUtils: utils object being passed to the controller
			                                               // - oAppRegistryEntry: registry entry for the AppComponent the controller belongs to
			                                               
			// This function is handed over to class AppComponent. The variable will be set to null, once this has happened.
			// oAppRegistryEntry is a registry entry for the AppComponent. When it is registered it contains the following properties:
			// - appComponent: the AppComponent to be registered
			// - oTemplateContract: the TemplateContract for this App, as described in AppComponent
			// - application: instance of class Application 
			// - oViewDependencyHelper: instance of class ViewDependencyHelper
			// This function returns a function that can be used to deregister the AppComponent from the registry when it is exited.
			var fnRegisterAppComponent = function(oAppRegistryEntry){
				var sAppComponentId = oAppRegistryEntry.appComponent.getId();
				mAppRegistry[sAppComponentId] = oAppRegistryEntry;
				return function(){
					delete mAppRegistry[sAppComponentId];
				};
			};

			// retrieve the registry entry for an AppComponent
			function getAppRegistryEntry(oAppComponent) {
				var sAppComponentId = oAppComponent.getId();
				var oRet = mAppRegistry[sAppComponentId];
				return oRet;
			}

			// retrieve the registry entry of a TemplateComponent. Note that the component registry is stored within the TemplateContract.
			function getComponentRegistryEntry(oComponent) {
				return getAppRegistryEntry(oComponent.getAppComponent()).oTemplateContract.componentRegistry[oComponent.getId()];
			}

			// Returns the view (instance of sap.ui.core.mvc.View) hosting the given control. Returns a faulty value if oControl is not directly or indirectly
			// hosted within a view.
			function fnFindView(oControl) {
				while (oControl && !(oControl instanceof View)) {
					oControl = oControl.getParent();
				}
				return oControl;
			}

			// Returns the registry entry for the TemplateComponent hosting the given control. Returns a faulty value if oControl is not directly or indirectly
			// hosted within a TemplateComponent.
			function fnGetComponentRegistryEntryForControl(oControl) {
				while (oControl) {
					var oView = fnFindView(oControl);
					var oController = oView && oView.getController();
					var oComponent = oController && oController.getOwnerComponent();
					if (oComponent instanceof TemplateComponent) {
						var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
						return oComponentRegistryEntry;
					} else {
						oControl = oComponent && oComponent.oContainer;
					}
				}
			}

			function getTemplateViewController(getMethods, sControllerName, oControllerDefinition, oTemplateUtils, oAppRegistryEntry) {
				oControllerDefinition = oControllerDefinition || {};

				oControllerDefinition.constructor = function() {
					TemplateViewController.prototype.constructor.apply(this, arguments);
					var oMethods = getMethods(oTemplateUtils, this);
					this._templateEventHandlers = Object.freeze(oMethods.handlers || {});
					this._templateFormatters = Object.freeze(oMethods.formatters || {});
					this.extensionAPI = Object.freeze(oMethods.extensionAPI || {});
					this.fnGenericOnInit = function(oController) {
						var oView = oController.getView();
						var sViewId = oView.getId();
						jQuery.sap.log.info("Init view " + sViewId + " of template " + sControllerName);
						var oComponent = oController.getOwnerComponent();
						var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);
						oComponentRegistryEntry.oControllerRegistryEntry = {
							onExit: oMethods.onExit || jQuery.noop,
							oTemplateUtils: oTemplateUtils,
							oAppRegistryEntry: oAppRegistryEntry
						};
						mControllerRegistry[sViewId] = oComponentRegistryEntry.oControllerRegistryEntry;
						oTemplateUtils.oServices.oApplicationController.registerView(oView);
						oTemplateUtils.oCommonUtils = new CommonUtils(oController, oTemplateUtils.oServices, oTemplateUtils.oComponentUtils);
						oTemplateUtils.oServices.oCRUDManager = new CRUDManager(oController,
							oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils, oAppRegistryEntry.oTemplateContract.oBusyHelper
						);
						oTemplateUtils.oCommonEventHandlers = new CommonEventHandlers(oController,
							oTemplateUtils.oComponentUtils, oTemplateUtils.oServices, oTemplateUtils.oCommonUtils);
						(oMethods.onInit || jQuery.noop)();
						// Note: This relies on the fact, that there is a 1-1 relationship between TemplateView and
						// TemplateComponent.
						// If we introduce Templates using more then one view, this must be reworked.
						oComponentRegistryEntry.oController = this;
						oComponentRegistryEntry.fnViewRegisteredResolve();
						delete oComponentRegistryEntry.fnViewRegisteredResolve;
					};
				};

				oControllerDefinition.onInit = function() {
					this.fnGenericOnInit(this);
					delete this.fnGenericOnInit;
				};
				oControllerDefinition.onExit = function() {
					var sViewId = this.getView().getId();
					var oControllerRegistryEntry = mControllerRegistry[sViewId];
					oControllerRegistryEntry.oAppRegistryEntry.oTemplateContract.oApplicationProxy.destroyView(sViewId);
					oControllerRegistryEntry.onExit();
					delete mControllerRegistry[sViewId];
					jQuery.sap.log.info("View " + sViewId + " of template " + sControllerName + " exited");
				};

				return TemplateViewController.extend(sControllerName, oControllerDefinition);
			}

			function fnGetViewControllerCreator(oComponentRegistryEntry) {
				var oControllerSpecification = oComponentRegistryEntry.methods.oControllerSpecification;
				return oControllerSpecification && function(){
					var oAppComponent = oComponentRegistryEntry.oComponent.getAppComponent();
					var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);
					var oTransactionController = oAppComponent.getTransactionController();					
					var oTemplateUtils = {
						oComponentUtils: oComponentRegistryEntry.utils,
						oServices: {
							oTemplateCapabilities: {}, // Templates will add their capabilities which are used by the framework into this object
							oApplicationController: oAppComponent.getApplicationController(),
							oTransactionController: oTransactionController,
							oNavigationController: oAppComponent.getNavigationController(),
							oDraftController: oTransactionController.getDraftController(),
							oApplication: oAppRegistryEntry.application,
							oViewDependencyHelper: oAppRegistryEntry.oViewDependencyHelper
						}
					};
					return getTemplateViewController(oControllerSpecification.getMethods, oComponentRegistryEntry.oComponent.getTemplateName(), oControllerSpecification.oControllerDefinition, oTemplateUtils, oAppRegistryEntry);
				};
			}
			
			function dealWithEmbeddedComponent(oComponentRegistryEntry, oControl){
				var sEntitySet = oComponentRegistryEntry.oComponent.getEntitySet();
				var oTemplateContract = getAppRegistryEntry(oComponentRegistryEntry.oComponent.getAppComponent()).oTemplateContract;
				var oTreeNode = oTemplateContract.mEntityTree[sEntitySet];
				var mEmbeddedComponents = oTreeNode.embeddedComponents;
				for (var sEmbeddedKey in mEmbeddedComponents){
					var oEmbeddedComponent = mEmbeddedComponents[sEmbeddedKey];
					if (oComponentRegistryEntry.oController.byId(oEmbeddedComponent.containerId) === oControl){
						var oReuseComponent = oControl.getComponentInstance();
						oComponentRegistryEntry.reuseComponentProxies.push(oReuseComponent._stProxy);
						var oTemplateModel = oComponentRegistryEntry.utils.getTemplatePrivateModel();                         
						oTemplateModel.setProperty("/generic/embeddedComponents/" + sEmbeddedKey, {});
						return {
							embeddedKey: sEmbeddedKey,
							embeddedComponent: oEmbeddedComponent,
							templateContract: oTemplateContract,
							reuseComponent: oReuseComponent
						};
					}
				}
			}
			
			function fnEnhanceExtensionAPI4Reuse(oComponentRegistryEntry, oEmbeddedComponentInfo){
				var oExtensionAPI = oComponentRegistryEntry.oController.extensionAPI;
				var oRet = jQuery.extend({}, oExtensionAPI);
				if (oExtensionAPI.getNavigationController){
					var oNavigationController = jQuery.extend({}, oExtensionAPI.getNavigationController());
					var fnNavigateInternal = oNavigationController.navigateInternal;
					oNavigationController.navigateInternal = function(vContext, oNavigationData){
						var sRoutename = oNavigationData && oNavigationData.routeName;
						if (sRoutename){
							oComponentRegistryEntry.utils.navigateRoute(sRoutename, vContext, oEmbeddedComponentInfo.embeddedKey, oNavigationData && oNavigationData.replaceInHistory);
						} else {
							fnNavigateInternal(vContext, oNavigationData);	
						}
					};                     
					oRet.getNavigationController = function(){
						return oNavigationController;
					};
					oNavigationController.getSubCommunicationModel = function(){
						return oEmbeddedComponentInfo.embeddedComponent.communicationModel;      
					};
				}
				oRet.getCommunicationObject = function(iLevel){
					return iLevel === 1 ? oEmbeddedComponentInfo.embeddedComponent.communicationObject : oComponentRegistryEntry.utils.getCommunicationObject(iLevel);
				};
				(oComponentRegistryEntry.methods.enhanceExtensionAPI4Reuse || jQuery.noop)(oRet, oEmbeddedComponentInfo);
				return oRet;
			}
			
			fnRegisterAppComponent = testableHelper.testableStatic(fnRegisterAppComponent, "TemplateComponent_RegisterAppComponent");
			
			return {
				// This method assembles a Template that can be used in Smart Template applications.
				// Thereby, getMethods, sComponentName, and oComponentDefinition describe the behaviour of the component in detail.
				// More precisely the meaning of the parameters is as follows:
				// - sComponentName is the name of the component that realizes the Template. More precisely it describes the path (.-separated) 
				//   to a folder which contains a file Component.js which is built using this function.
				// - oComponentDefinition is an object containing a property metadata which contains the metadata for the TemplateComponent realizing the Template.
				// - getMethods is a function that will be called once for each instance of the Template to be assembled.
				//   The parameters passed to this function are oComponent and oComponentUtils
				//   ~ oComponent is the instance of class TemplateComponent that is created (can be considered as 'this')
				//   ~ oComponentUtils is an instance of class ComponentUtils that provides certain reusable tasks
				//   the return value of getMethods must be an object possessing the following (optional) properties:
				//   ~ init: a function that serves as init for the component. Note that it is not necessary to call init of a superclass
				//   ~ onActivate: a function that is called when the component becomes visible resp. its binding should be adapted.
				//     For non-list Templates parameter sBindingPath is passed to this function.
				//   ~ refreshBinding: a function with parameters bUnconditional and mRefreshInfos which is called when the data displayed by the
				//     Template instance should be refreshed. If bUnconditional is true, all data should be refreshed. Otherwise mRefreshInfos
				//     contains detailed information which data should be refreshed.
				//   ~ getUrlParameterInfo a function that allows the instance to pass its current state into url parameters. getUrlParameterInfo must return
				//     a Promise which resolves to a map mapping parameter names onto arrays of their values.
				//   ~ presetDisplayMode: a function possessing parameters iDisplayMode and bIsAlreadyDisplayed that may be called before onActivate is called.
				//     iDisplayMode contains information whether the data shown in the instance will be in display, edit, or create mode.
				//     bIsAlreadyDisplayed contains the information whether the Template instance is already inplace or will be navigated to.
				//   ~ updateBindingContext: a function that is called when a new binding context is available for the Template instance.
				//     Note that when switching to change (edit or create) this method will only be called in draft scenarios, since in non-draft scenarios
				//     no binding context from the backend is retrieved.
				//   ~ oControllerSpecification: an object specifying the controller for the view realizing this Template.
				//     For more details see comments at function fnGetViewControllerCreator
				getTemplateComponent: function(getMethods, sComponentName, oComponentDefinition) {
					var sComponentNameFull = sComponentName + ".Component";
					oComponentDefinition = oComponentDefinition || {};

					oComponentDefinition.init = function() {
						var oComponentRegistryEntry = this.getComponentData().registryEntry;
						oComponentRegistryEntry.viewRegisterd = new Promise(function(fnResolve) {
							oComponentRegistryEntry.fnViewRegisteredResolve = fnResolve;
						});
						oComponentRegistryEntry.oViewRenderdPromise = new Promise(function(fnResolve) {
							oComponentRegistryEntry.fnViewRenderdResolve = fnResolve;
						});
						oComponentRegistryEntry.reuseComponentProxies = [];
						(TemplateComponent.prototype.init || jQuery.noop).apply(this, arguments);
						oComponentRegistryEntry.componentName = sComponentNameFull;
						oComponentRegistryEntry.oComponent = this;
						oComponentRegistryEntry.activationTakt = 0;
						oComponentRegistryEntry.utils = new ComponentUtils(this, oComponentRegistryEntry);
						oComponentRegistryEntry.methods = getMethods(this, oComponentRegistryEntry.utils) || {};
						oComponentRegistryEntry.oGenericData = {
							mRefreshInfos: {}
						};
						(oComponentRegistryEntry.methods.init || jQuery.noop)();
					};

					oComponentDefinition.exit = function() {
						var sId = this.getId();
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						var oAppRegistryEntry = getAppRegistryEntry(this.getAppComponent());
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.exit || jQuery.noop)();
						delete oAppRegistryEntry.oTemplateContract.componentRegistry[sId];
						(TemplateComponent.prototype.exit || jQuery.noop).apply(this, arguments);
					};

					oComponentDefinition.onBeforeRendering = function() {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						if (!oComponentRegistryEntry.oTemplateContract){
							var oAppRegistryEntry = getAppRegistryEntry(this.getAppComponent());
							oComponentRegistryEntry.oTemplateContract = oAppRegistryEntry.oTemplateContract;
						}
						(TemplateComponent.prototype.onBeforeRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.onBeforeRendering || jQuery.noop)();
					};
					
					oComponentDefinition.onAfterRendering = function() {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						if (oComponentRegistryEntry.fnViewRenderdResolve && !oComponentRegistryEntry.fnViewRegisteredResolve){
							oComponentRegistryEntry.fnViewRenderdResolve();
							delete oComponentRegistryEntry.fnViewRenderdResolve;
						}
						(TemplateComponent.prototype.onAfterRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
						var oMethods = oComponentRegistryEntry.methods;
						(oMethods.onAftereRendering || jQuery.noop)();
					};

					oComponentDefinition.onActivate = function(sBindingPath, bIsComponentCurrentlyActive) {
						var oComponentRegistryEntry = getComponentRegistryEntry(this);
						oComponentRegistryEntry.sCurrentBindingPath = sBindingPath;
						var fnActivate = function() {
							oComponentRegistryEntry.utils.bindComponent(oComponentRegistryEntry.sCurrentBindingPath, bIsComponentCurrentlyActive);
							var bUnconditionalRefresh = this.getIsRefreshRequired();
							if (bUnconditionalRefresh || !jQuery.isEmptyObject(oComponentRegistryEntry.oGenericData.mRefreshInfos)) {
								(oComponentRegistryEntry.methods.refreshBinding || jQuery.noop)(bUnconditionalRefresh,
									bUnconditionalRefresh ? {} :
									oComponentRegistryEntry.oGenericData.mRefreshInfos);
								this.setIsRefreshRequired(false);
								oComponentRegistryEntry.oGenericData.mRefreshInfos = {};
							}
							return (oComponentRegistryEntry.methods.onActivate || jQuery.noop)(sBindingPath);
						}.bind(this);
						// If view is not registered yet ( == oComponentRegistryEntry.fnViewRegisteredResolve still available) perform fnActivate asyncronously, otherwise synchronosly
						return oComponentRegistryEntry.fnViewRegisteredResolve ? oComponentRegistryEntry.viewRegisterd.then(fnActivate) : (fnActivate() || Promise.resolve());
					};

					oComponentDefinition.setContainer = function() {
						TemplateComponent.prototype.setContainer.apply(this, arguments);
						var sId = this.getId();
						var oAppComponent = this.getAppComponent();
						var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

						if (!oAppRegistryEntry.oTemplateContract.componentRegistry[sId]) {
							var oComponentData = this.getComponentData();
							var oComponentRegistryEntry = oComponentData.registryEntry;
							delete oComponentData.registryEntry;
							oComponentRegistryEntry.componentCreateResolve(this);
							delete oComponentRegistryEntry.componentCreateResolve;
							oAppRegistryEntry.oTemplateContract.componentRegistry[sId] = oComponentRegistryEntry;

							oAppRegistryEntry.oTemplateContract.oBusyHelper.setBusy(oComponentRegistryEntry.viewRegisterd, true);
							oComponentRegistryEntry.oApplication = oAppRegistryEntry.application;
							oComponentRegistryEntry.createViewController = fnGetViewControllerCreator(oComponentRegistryEntry);
							(oComponentRegistryEntry.methods.setContainer || jQuery.noop)();
						}
					};
					
					oComponentDefinition.setIsRefreshRequired = function(bIsRefreshRequired) {
						if (bIsRefreshRequired){ // check whether refresh must be performed immediately
							var oComponentRegistryEntry = getComponentRegistryEntry(this);
							if (oComponentRegistryEntry.methods.refreshBinding && oComponentRegistryEntry.utils.isComponentActive()){
								oComponentRegistryEntry.viewRegisterd.then(oComponentRegistryEntry.methods.refreshBinding.bind(null, true, {}));
								bIsRefreshRequired = false;
							}	
						}
						this.setProperty("isRefreshRequired", bIsRefreshRequired);
					};

					oComponentDefinition.onDeactivate = jQuery.noop;

					return TemplateComponent.extend(sComponentNameFull, oComponentDefinition);
				},
				
				// This method is called by class AppComponent when it is initialized. It hands over a registration method to this class.
				// This registration method can be used to register an AppComponent in the central AppComponentRegistry handled by this class.
				// See fnRegisterAppComponent for details.
				// Note that getRegisterAppComponent can only be called once.
				getRegisterAppComponent: function(){
					var fnRet = fnRegisterAppComponent;
					fnRegisterAppComponent = null;
					return fnRet;
				},                                

				getExtensionAPIPromise: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					if (!oComponentRegistryEntry) {
						return Promise.reject();
					}
					return oComponentRegistryEntry.viewRegisterd.then(function() {
						// first check whether oControl is the ComponentContainer of a reuse component
						var oEmbeddedComponentInfo = dealWithEmbeddedComponent(oComponentRegistryEntry, oControl);
						if (oEmbeddedComponentInfo){
							return fnEnhanceExtensionAPI4Reuse(oComponentRegistryEntry, oEmbeddedComponentInfo);
						}
						return oComponentRegistryEntry.oController.extensionAPI;
					});
				},

				// Obsolete. Use getExtensionAPIPromise instead.
				getExtensionAPI: function(oControl) {
					var oComponentRegistryEntry = fnGetComponentRegistryEntryForControl(oControl);
					return oComponentRegistryEntry && oComponentRegistryEntry.oController && oComponentRegistryEntry.oController.extensionAPI;
				}
			};
		});
}; // end of sap/suite/ui/generic/template/lib/TemplateAssembler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.NumericContent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/KpiTag",[
	"sap/ui/core/Control",
	"sap/m/Label",
	"sap/m/NumericContent",
	"sap/ui/model/json/JSONModel",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/KpiTagController",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/KpiAnnotationHelper",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
], function(Control, Label, NumericContent, JSONModel, KpiTagController, KpiUtil, KpiAnnotationHelper, CriticalityUtil, FilterUtil) {
	"use strict";

	return Control.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.KpiTag", {
		metadata: {
			properties: {
				value: {
					type: "string",
					defaultValue: "",
					bindable: true
				},
				name: {
					type: "string",
					defaultValue: "",
					bindable: true
				},
				scale: {
					type: "string",
					defaultValue: undefined,
					bindable: true
				},
				indicator: {
					type: "sap.m.ValueColor",
					defaultValue: undefined
				},
				entitySet: {
					type: "string",
					defaultValue: "",
					bindable: false
				},
				qualifier: {
					type: "string",
					defaultValue: "",
					bindable: false
				},
				modelName: {
					type: "string",
					defaultValue: undefined,
					bindable: false
				}
			},
			aggregations: {
				_name: {
					type: "sap.m.Label",
					multiple: false,
					visibility: "visible"
				},
				_value: {
					type: "sap.m.Label",
					multiple: false,
					visibility: "visible"
				},
				_content: {
					type: "sap.m.NumericContent",
					multiple: false,
					visibility: "visible"
				}
			},
			events: {
				press: {}
			}
		},
		_firstTime: true,
		_dataModel: undefined,
		_controller: undefined,
		_isRelative: false,
		_isPercent: false,
		_sUnitofMeasure: "",
		_relativeToProperties: [],
		_getDataModel: function() {
			if (!this._dataModel) {
				this._dataModel = new JSONModel();
			}
			return this._dataModel;
		},
		_getController: function() {
			if (!this._controller) {
				this._controller = new KpiTagController();
			}
			return this._controller;
		},
		onBeforeRendering: function() {
			if (this._firstTime) {
				this.setBusy(true);
				this._firstTime = false;
				if (this.getModelName()) {
					var oModel = this.getModel(this.getModelName());
					oModel.getMetaModel().loaded().then(function() {
						var oMetaModel = oModel.getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet());
						var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);

						var selectionPresentationVariantPath = "com.sap.vocabularies.UI.v1.SelectionPresentationVariant#" + this.getQualifier();
						var oSelectionPresentationVariant = oEntityType[selectionPresentationVariantPath];
						if (!oSelectionPresentationVariant) {
							return;
						}

						// CDS Annotation gives Path instead of AnnotationPath
						var oSelectionVariantPath = oSelectionPresentationVariant.SelectionVariant && oSelectionPresentationVariant.SelectionVariant.Path;
						if (!oSelectionVariantPath) {
							jQuery.sap.log.error("SelectionVariant does not have Path.");
							return;
						}
						if (/^@/.test(oSelectionVariantPath)) {
							oSelectionVariantPath = oSelectionVariantPath.slice(1);
						}
						var oSelectionVariant = oEntityType[oSelectionVariantPath];
						var aFilters = [];
						var aSelectOptions = oSelectionVariant && oSelectionVariant.SelectOptions;
						var oSelectOption, sPropertyPath, oRange;

						if (aSelectOptions) {
							for (var i = 0; i < aSelectOptions.length; i++) {
								oSelectOption = aSelectOptions[i];
								sPropertyPath = oSelectOption.PropertyName.PropertyPath;
								for (var j = 0; j < oSelectOption["Ranges"].length; j++) {
									oRange = oSelectOption["Ranges"][j];
									if (oRange.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
										var oFilter = {
											path: sPropertyPath,
											operator: oRange.Option.EnumMember.split("/")[1],
											value1: oRange.Low.String,
											value2: oRange.High ? oRange.High.String : ""
										};
										aFilters.push(new sap.ui.model.Filter(oFilter));
									}
								}
							}
						}

						// CDS Annotation gives Path instead of AnnotationPath
						var oPresentationVariantPath = oSelectionPresentationVariant.PresentationVariant && (oSelectionPresentationVariant.PresentationVariant.AnnotationPath || oSelectionPresentationVariant.PresentationVariant.Path);
						if (!oPresentationVariantPath) {
							return;
						}
						if (/^@/.test(oPresentationVariantPath)) {
							oPresentationVariantPath = oPresentationVariantPath.slice(1);
						}
						//Data Point is extracted from Visualizations of PV
						var sDataPointPath;
						var oVisualizations = oEntityType[oPresentationVariantPath].Visualizations;

						oVisualizations.forEach(function(oAnno){
							if (oAnno.AnnotationPath.indexOf("DataPoint") > 0){
								sDataPointPath = oAnno.AnnotationPath.split("@")[1];
							}
						});

						var oDatapoint = oEntityType[sDataPointPath];

						this.dataPointAnnotation = oDatapoint;
						var oEntityTypeProperty = oMetaModel.getODataProperty(oEntityType, oDatapoint.Value.Path);

						this._checkForPercent(oModel, oEntityTypeProperty);
						//this._checkIfRelative(oDatapoint);
						this._getCriticalityRefProperties(oDatapoint);

						this.setModel(this._getDataModel());

						var sPath = KpiAnnotationHelper.resolveParameterizedEntitySet(oModel, oEntitySet, oSelectionVariant);

						if (oDatapoint.Value) {
							if (oDatapoint.Value.Path) {
								//TODO:Understand why binding path is set like "/0/<properties>" ?
								this.bindValue("/0/" + oDatapoint.Value.Path);
							} else {
								this.setProperty("value", oDatapoint.Value.String);
							}
						}

						oModel.read(sPath ,{
							async: true,
							filters: aFilters,
							urlParameters: {
								"$select": [oDatapoint.Value.Path].concat(this._relativeToProperties).join(","),
								"$top": 1
							},
							success: function(data, response) {
								this._getDataModel().setData(data.results);
								data = FilterUtil.readProperty(this.dataPointAnnotation,"Value.Path") ? CriticalityUtil.CalculateCriticality(this.dataPointAnnotation, data, this.dataPointAnnotation.Value.Path) : data;
								this.setIndicator(data.results[0].color);
								this._setScaleInformation(this.dataPointAnnotation);
								this._setNameInformation(this.dataPointAnnotation);
								this.setBusy(false);
							}.bind(this),
							error: function(error) {
								jQuery.sap.log.error("Error reading URL:" + error);
							}
						});

					}.bind(this));
				}
			}
		},
		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init.call(this);
			}
		},
		_onMouseClick: function(oEvent) {
			KpiTagController.openKpiCard(oEvent);
		},
		_onKeyPress: function(oEvent) {
			if (oEvent.which === jQuery.sap.KeyCodes.ENTER || oEvent.which === jQuery.sap.KeyCodes.SPACE) {
				KpiTagController.openKpiCard(oEvent);
			}
		},
		/**
		* @private
		* this Methods checks if the returned unit of Measure is a percent
		* @param  oModel              [model from the annotation]
		* @param  oEntityTypeProperty [Entity property which has the UoM]
		* @return                     [returns true/false ]
		*/
		_checkForPercent: function(oModel, oEntityTypeProperty) {
			this._sUnitofMeasure = KpiUtil.getUnitofMeasure(oModel, oEntityTypeProperty);
			if (this._sUnitofMeasure == "%") {// this hardcoded checks needs to be relooked.
				this._isPercent = true;
			}

		},

		_checkIfRelative: function(oDataPoint) {

			var trendCalc = oDataPoint.TrendCalculation;
			this._isRelative = KpiUtil.isRelative(oDataPoint);
			if (this._isRelative) {
				if (trendCalc.ReferenceValue.Path) {
					this._relativeToProperties.push(trendCalc.ReferenceValue.Path);
				}
			}
		},
		_setNameInformation: function(oDataPoint) {
			var titlePath = oDataPoint.Title;
			var rb = this.getModel("i18n").getResourceBundle();
			//var nameFromPath = this._getPathOrPrimitive(titlePath);
			//var nameFromPath = KpiUtil.getPathOrPrimitiveValue(this._getDataModel(),titlePath);
			var nameFromPath = KpiUtil.getPathOrPrimitiveValue(titlePath);
			//Handle cases where DataPoint.title may not be present
			if ( nameFromPath === undefined ) {
				nameFromPath = "";
			}
			this.setProperty("name", this._getNameFromHeuristic(nameFromPath), false);
			var rightTooltip = this._isPercent ? (KpiUtil.formatNumberForPresentation(this.getValue(), true, 1, this.getProperty("scale")) + this._sUnitofMeasure) : (KpiUtil.formatNumberForPresentation(this.getValue(), true, 0, this.getProperty("scale")));
			var KPITooltipKey;
			switch (this.getIndicator()) {
				case sap.m.ValueColor.Error:
					KPITooltipKey = "KPI_TOOLTIP_ERROR";
					break;
				case sap.m.ValueColor.Good:
					KPITooltipKey = "KPI_TOOLTIP_GOOD";
					break;
				case sap.m.ValueColor.Critical:
					KPITooltipKey = "KPI_TOOLTIP_CRITICAL";
					break;
				case sap.m.ValueColor.Neutral:
					KPITooltipKey = "KPI_TOOLTIP_NEUTRAL";
					break;
				default:
					KPITooltipKey = "KPI_TOOLTIP_UNDETERMINED";
					break;
			}
			this.setTooltip(rb.getText(KPITooltipKey, [nameFromPath, rightTooltip]));
		},
		_setScaleInformation: function(oDataPoint) {
			if ( oDataPoint.ValueFormat ) {
				if ( oDataPoint.ValueFormat.ScaleFactor ) {
					this.setProperty("scale", KpiUtil.getPathOrPrimitiveValue(oDataPoint.ValueFormat.ScaleFactor));
				}
			}
		},
		_getCriticalityRefProperties: function(oDataPoint) {
			var cCalc = oDataPoint.CriticalityCalculation;
			var crit = oDataPoint.Criticality;
			if (crit && crit.Path) {
				this._relativeToProperties.push(crit.Path);
			} else if (cCalc) {
				if (cCalc.DeviationRangeLowValue && cCalc.DeviationRangeLowValue.Path) {
					this._relativeToProperties.push(cCalc.DeviationRangeLowValue.Path);
				}
				if (cCalc.DeviationRangeHighValue && cCalc.DeviationRangeHighValue.Path) {
					this._relativeToProperties.push(cCalc.DeviationRangeHighValue.Path);
				}
				if (cCalc.ToleranceRangeLowValue && cCalc.ToleranceRangeLowValue.Path) {
					this._relativeToProperties.push(cCalc.ToleranceRangeLowValue.Path);
				}
				if (cCalc.ToleranceRangeHighValue && cCalc.ToleranceRangeHighValue.Path) {
					this._relativeToProperties.push(cCalc.ToleranceRangeHighValue.Path);
				}
			}
		},
		_getTitleRefProperty: function(oDataPoint) {
			var titlePath = oDataPoint.Title;
			if (titlePath && titlePath.Path) {
				this._relativeToProperties.push(titlePath.Path);
			}
		},
		_getNameFromHeuristic: function(sentence) {
			var parts = sentence.split(/\s/);
			return parts.length === 1 ? this._getNameFromSingleWordHeuristic(sentence) : this._getNameFromMultiWordHeuristic(parts);
		},
		/**
		* [_getNameFromSingleWordHeuristic Extract logic for single word]
		* @param  {String} word which needs to be changed to short title
		* @return {String} KPI Short title
		*/
		_getNameFromSingleWordHeuristic: function(word) {
			return word.substr(0,3).toUpperCase();
		},
		_getNameFromMultiWordHeuristic: function(words) {
			var parts = [];
			parts.push(words[0].charAt(0));
			parts.push(words[1].charAt(0));
			if (words.length >= 3) {
				parts.push(words[2].charAt(0));
			}
			return parts.join("").toUpperCase();
		},
		renderer: function(oRM, oControl) {
			oRM.write("<div");
			oRM.writeAttributeEscaped("tabIndex", 0);
			oRM.writeControlData(oControl);
			oRM.addClass("sapSmartTemplatesAnalyticalListPageKpiTag sapUiSmallMarginEnd");
			oControl._addColorClasses(oRM);
			oRM.writeClasses();
			oRM.writeAttributeEscaped("title", oControl.getTooltip());
			oRM.write(">");
			oRM.write("<div");
			oRM.addClass("sapSmartTemplatesAnalyticalListPageKpiTagName");
			oRM.writeClasses();
			oRM.write(">");
			oRM.writeEscaped(oControl.getName());
			oRM.write("</div>");
			oRM.write("<div");
			oRM.addClass("sapSmartTemplatesAnalyticalListPageKpiTagValue");
			oRM.writeClasses();
			oRM.write(">");
			oRM.writeEscaped(oControl._isPercent ? KpiUtil.formatNumberForPresentation(oControl.getValue(), true, 1, oControl.getProperty("scale")) + oControl._sUnitofMeasure : KpiUtil.formatNumberForPresentation(oControl.getValue(), true, 0, oControl.getProperty("scale")));
			oRM.write("</div>");
			oRM.write("</div>");
		},
		_addColorClasses: function(rm) {
			switch (this.getIndicator()) {
				case sap.m.ValueColor.Neutral:
				rm.addClass("sapSmartTemplatesAnalyticalListPageKPINeutral");
				break;
				case sap.m.ValueColor.Error:
				rm.addClass("sapSmartTemplatesAnalyticalListPageKPINegative");
				break;
				case sap.m.ValueColor.Good:
				rm.addClass("sapSmartTemplatesAnalyticalListPageKPIPositive");
				break;
				case sap.m.ValueColor.Critical:
				rm.addClass("sapSmartTemplatesAnalyticalListPageKPICritical");
				break;
				default:
				rm.addClass("sapSmartTemplatesAnalyticalListPageKPIUndetermined");
				break;
			}
		},
		onAfterRendering: function() {
			setTimeout(function() {
				this.detachBrowserEvent("click", this._onMouseClick).attachBrowserEvent("click", this._onMouseClick);
				this.detachBrowserEvent("keypress", this._onKeyPress).attachBrowserEvent("keypress", this._onKeyPress);
			}.bind(this), 1);
		},

		exit: function() {
			this._relativeToProperties = [];
		}
	});
}, true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/KpiTag.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveBarChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveBarChartBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroBar",["sap/suite/ui/microchart/InteractiveBarChart",
	"sap/suite/ui/microchart/InteractiveBarChartBar",
	"sap/ui/model/json/JSONModel",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroChart",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"],
	function(InteractiveBarChart, InteractiveBarChartBar, JSONModel, FilterItemMicroChart, CriticalityUtil, FilterUtil) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItemMicroBar = FilterItemMicroChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar", {
		metadata: {
			properties: {
				fixedCount: {type: "int", defaultValue: 3},
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 }
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveBarChart", multiple: false}
			}
		},
		renderer:{}
	});

	FilterItemMicroBar.prototype.init = function() {
		this._chart = new sap.suite.ui.microchart.InteractiveBarChart({
			maxDisplayedBars : 3,
			selectionEnabled : true,
			bars : []
		});
		this.setControl(this._chart);
		this.setModel(new JSONModel(), '__alp_chartJSONModel');
		this._sorters = [];
		FilterItemMicroChart.prototype.init.apply(this, arguments);
	};

	FilterItemMicroBar.prototype._updateBinding = function() {
		this.applyOverlay();
		//To show the Busy Indicator immediately,
		//so that blank screen/chart is not shown
		this._chart.setBusyIndicatorDelay(0);
		// Set Chart to busy before rebinding
		this._chart.setBusy(true);
		this._chart.unbindBars();
		// Make sure all binding are available
		var entityName = this.getEntitySet(),
		dimField = this.getDimensionField(),
		dimFieldDisplay = this.getDimensionFieldDisplay(),
		measureField = this.getMeasureField(),
		unitField = this.getUnitField(),
		filter = this.getDimensionFilterExternal(),
		aSortFields = [],
		aSortOrder = this.getSortOrder(),
		oSortObject = FilterItemMicroChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;

		if (!entityName || !measureField || !dimField || !dimFieldDisplay) {// All fields must be present
			return;
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay) {
			selectFields.push(dimFieldDisplay);
		}

		if (unitField) {
			selectFields.push(unitField);
		}

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length) {
			filterList = [filter];
		}

		var me = this;
		var count = this.getFixedCount();

		var oModel = this.getModel();
		var sBindingPath = "/" + entityName;
		// odata call to get top 4 data
		if (oModel) {
			var oDatapoint = CriticalityUtil.getDataPoint(oModel, this);
			if (oDatapoint) {
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.ScaleFactor) ? this.setScaleFactor(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.ScaleFactor)) : this.setScaleFactor(null);
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.NumberOfFractionalDigits) ? this.setNumberOfFractionalDigits(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.NumberOfFractionalDigits)) : this.setNumberOfFractionalDigits(null);
				var aRelativeToProperties = CriticalityUtil.getCriticalityRefProperties(oDatapoint);
			}
			if (this.getSmartFilterId()) {//If it has reference to SmartFilterBar
				var oSmartFilterBar = sap.ui.getCore().byId(this.getSmartFilterId());
				if (oSmartFilterBar && oSmartFilterBar.getEntitySet() === entityName) {
					var oTemplatePrivate = this.getModel("_templPriv"),
					bIsSearchable = oTemplatePrivate.getProperty('/alp/searchable');
					if (bIsSearchable) {
						if (oSmartFilterBar && oSmartFilterBar.getAnalyticBindingPath && oSmartFilterBar.getConsiderAnalyticalParameters()) {
							try {
								var sAnalyticalPath = oSmartFilterBar.getAnalyticBindingPath();
								if (sAnalyticalPath) {
									sBindingPath = sAnalyticalPath;
								}
							} catch (e) {
								jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
							}
						}
					} else {
						this.applyOverlay(this.requiredFilterMessage);
						return;
					}
				}
			}

			oModel.read(sBindingPath ,{
				async: true,
				filters: filterList,
				sorters: this._sorters,
				urlParameters: {
					"$select":  aRelativeToProperties ? [aRelativeToProperties].concat(selectFields).join(",") : selectFields.join(","),
					"$top": count
				},
				success: function(data, response) {
					data = oDatapoint ? CriticalityUtil.CalculateCriticality(oDatapoint, data, me.getMeasureField()) : data;
					me._onDataReceived(data);
				},
				error: function(error) {
					jQuery.sap.log.error("Error reading URL:" + error);
					me.applyOverlay(me.technicalIssueMessage);
				}
			});
		}
	};

	FilterItemMicroBar.prototype._onDataReceived = function(data) {
		if (!data || !data.results || !data.results.length) {
			this.applyOverlay(this.noDataIssueMessage);
			return;
		}

		FilterItemMicroChart.prototype._onDataReceived.call(this, data.results);
		this.getModel('__alp_chartJSONModel').setData(data.results);
		this._chart.setModel(this.getModel('__alp_chartJSONModel'));

		var count = this.getFixedCount(),
			dataBinding = {
			path: '/',
			template: new InteractiveBarChartBar(this._getChartAggregationSettings()),
			startIndex: 0,
			length: count
		};

		this._chart.bindBars(dataBinding);
		this._chart.setBusy(false);
	};
	return FilterItemMicroBar;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveDonutChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveDonutChartSegment'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroDonut",["sap/suite/ui/microchart/InteractiveDonutChart",
	"sap/suite/ui/microchart/InteractiveDonutChartSegment",
	"sap/ui/model/json/JSONModel",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroChart",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"],
	function(InteractiveDonutChart, InteractiveDonutChartSegment, JSONModel, FilterItemMicroChart, CriticalityUtil, FilterUtil) {
	"use strict";


	var IS_OTHERS = "__IS_OTHER__";
	/* all visual filters should extend this class */
	var FilterItemMicroDonut = FilterItemMicroChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut", {
		metadata: {
			properties: {
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 2 }
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveDonutChart", multiple: false}
			}
		},
		renderer:{}
	});

	FilterItemMicroDonut.prototype.init = function() {
		this._chart = new sap.suite.ui.microchart.InteractiveDonutChart({
			selectionEnabled : true,
			segments : []
		});
		this.setControl(this._chart);
		this.setModel(new JSONModel(), '__alp_chartJSONModel');
		this._otherField = "__IS_OTHER__"; // may need to replace if the data contains this
		this._sorters = [];
		FilterItemMicroChart.prototype.init.apply(this, arguments);
	};

	/**
	* Function to apply selections on the Donut
	* @param{object} custom data which has the dimension of the current segment
	* @param{object} Filters already present in this property
	* @return{object} Filters to be applied for this proeprty
	*
	*/
	FilterItemMicroDonut.prototype._applyDonutChartSelections = function (oCustomData, oDimensionFilter) {
		var aSegments = this._chart.getSegments(),
		sParentProperty = this.getParentProperty(),
		aSelectedItems = [],
		sSegmentCustomValue,
		oRange;
		// if others is selected
		if (oCustomData.dimValue === IS_OTHERS) {
			aSegments.forEach(function(oSegment) {
				sSegmentCustomValue = oSegment.getCustomData()[0].getValue();
				// get values of other segments that are selected
				if (sSegmentCustomValue !== IS_OTHERS) {
					if (oSegment.getSelected()) {
						aSelectedItems.push(sSegmentCustomValue);
						// remove selection
						//oSegment.setSelected(false);
					}
					oRange = {"exclude":true,"operation":"EQ"};
					oRange.keyField = sParentProperty;
					oRange.value1 = sSegmentCustomValue;
					oDimensionFilter.ranges.push(oRange);
				}
			});
			// if any segment other than others is selected
			// remove the selection from filter Data
			if (aSelectedItems.length > 0) {
				// remove from filter items
				oDimensionFilter.items = oDimensionFilter.items.filter(function (oItem) {
					return aSelectedItems.indexOf(oItem.key) === -1;
				});

				// remove from ranges
				oDimensionFilter.ranges = oDimensionFilter.ranges.filter(function (oRange) {
					return !(oRange.exclude === false
						&& oRange.operation === "EQ"
						&& oRange.keyField === sParentProperty
						&& aSelectedItems.indexOf(oRange.value1) > -1);
				});
			}
		} else {
			// if segment A or B is selected
			oDimensionFilter.items.push({
				key: oCustomData.dimValue,
				text: oCustomData.dimValueDisplay // oData.dimValueDisplay comes with TextArrangement from custome data so applying directly.
			});

			var bIsOthersSelected = false;
			// go through all segments, to check if others is selected
			aSegments.forEach(function(oSegment) {
				sSegmentCustomValue = oSegment.getCustomData()[0].getValue();
				if (sSegmentCustomValue === IS_OTHERS && oSegment.getSelected()) {
					// if others is selected
					bIsOthersSelected = true;
				}
				// get values of other segments that are selected
				if (sSegmentCustomValue !== IS_OTHERS) {
					aSelectedItems.push(sSegmentCustomValue);
				}
			});
			// if others is  already selected
			// remove all filters related to others selection from Dimension Filter
			// which will trigger the binding to remove the highlight
			if (bIsOthersSelected) {
				oDimensionFilter.ranges = oDimensionFilter.ranges.filter(function (oRange) {
					return !(oRange.exclude === true
						&& oRange.operation === "EQ"
						&& oRange.keyField === sParentProperty
						&& aSelectedItems.indexOf(oRange.value1) > -1);
				});
			}
		}
		return oDimensionFilter;
	};

	FilterItemMicroDonut.prototype._updateBinding = function() {
		this.applyOverlay();
		//To show the Busy Indicator immediately,
		//so that blank screen/chart is not shown
		this._chart.setBusyIndicatorDelay(0);
		// Set Chart to busy before rebinding
		this._chart.setBusy(true);
		this._chart.unbindSegments();
		// Make sure all binding are available
		var entityName = this.getEntitySet(),
		dimField = this.getDimensionField(),
		dimFieldDisplay = this.getDimensionFieldDisplay(),
		measureField = this.getMeasureField(),
		unitField = this.getUnitField(),
		filter = this.getDimensionFilterExternal(),
		aSortOrder = [], aSortFields = [],
		aSortOrder = this.getSortOrder(),
		oSortObject = FilterItemMicroChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;

		if (!entityName || !measureField || !dimField || !dimFieldDisplay) {// All fields must be present
			return;
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay) {
			selectFields.push(dimFieldDisplay);
		}

		if (unitField) {
			selectFields.push(unitField);
		}

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length) {
			filterList = [filter];
		}

		var me = this;
		var oModel = this.getModel();
		var sBindingPath = "/" + entityName;
		// odata call to get top 4 data
		if (oModel) {
			var oDatapoint = CriticalityUtil.getDataPoint(oModel, this);
			if (oDatapoint) {
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.ScaleFactor) ? this.setScaleFactor(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.ScaleFactor)) : this.setScaleFactor(null);
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.NumberOfFractionalDigits) ? this.setNumberOfFractionalDigits(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.NumberOfFractionalDigits)) : this.setNumberOfFractionalDigits(null);
				var aRelativeToProperties = CriticalityUtil.getCriticalityRefProperties(oDatapoint);
			}
			if (this.getSmartFilterId()) {//If it has reference to SmartFilterBar
				var oSmartFilterBar = sap.ui.getCore().byId(this.getSmartFilterId());
				if (oSmartFilterBar && oSmartFilterBar.getEntitySet() === entityName) {
					var oTemplatePrivate = this.getModel("_templPriv"),
					bIsSearchable = oTemplatePrivate.getProperty('/alp/searchable');
					if (bIsSearchable) {
						if (oSmartFilterBar && oSmartFilterBar.getAnalyticBindingPath && oSmartFilterBar.getConsiderAnalyticalParameters()) {
							try {
								var sAnalyticalPath = oSmartFilterBar.getAnalyticBindingPath();
								if (sAnalyticalPath) {
									sBindingPath = sAnalyticalPath;
								}
							} catch (e) {
								jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
							}
						}
					} else {
						this.applyOverlay(this.requiredFilterMessage);
						return;
					}
				}
			}
			//Here count replaced with true or false to it's corresponding function parameter bToFetchTotalData in fetchData() method.
			//It's recommended to keep false in the last parameter than leaving it blank which also serves the purpose.
			var oTop4DataPromise = this._fetchData(oModel, sBindingPath, filterList, selectFields, false, aRelativeToProperties, oDatapoint),
			oTotalDataPromise = this._fetchData(oModel, sBindingPath, filterList, [measureField], true);
			// jQuery.when either waits for all promises to be resolved before executing handler, or
			// it executes the handler as soon as any promise is rejected,i.e., results in an error
			// For the sake of performance and code simplicity, even if one query fails we show technical issue overlay, and
			// we are not covering the scenario where total query might fail and top4 query will result in <=3 data
			jQuery.when(oTop4DataPromise, oTotalDataPromise).then(function(aTop4Data, aTotalData) {
				// all promsises are resolved
				// promise resolution is received as an array, index 0 is data and 1 is length
				if (!aTop4Data[1]) {
					// No Data overlay should show if top4data length === 0
					me.applyOverlay(me.noDataIssueMessage);
				} else if (aTop4Data[1] <= 3) {
					// chart should show if top4 data length <3
					me._onDataReceived(aTop4Data[0]);
				} else if (aTop4Data[1] > 3) {
					// chart should show if top4 data length > 3 and total data length > 0
					if (aTotalData[1]) {
						// show chart
						me._onDataReceived(aTop4Data[0], aTotalData[0]);
					} else {
						// show no data overlay
						me.applyOverlay(me.noDataIssueMessage);
					}
				}
			}, function() {
				// any one promise is rejected
				// show technical overlay in case of failure
				me.applyOverlay(me.technicalIssueMessage);
			});
		}
	};

	//Count is replaced with bToFetchTotalData to determing wheter this fuction is going to make call to fetch top4 results or the total records.
	FilterItemMicroDonut.prototype._fetchData = function (oModel, sBindingPath, filterList, selectFields, bToFetchTotalData, aRelativeToProperties, oDatapoint) {
		var me  = this;
		var oDeferred = new jQuery.Deferred();
		if (!oModel && !sBindingPath) {
			// set rejected
			oDeferred.reject();
		} else {
			var oDataBindingInfo = {
				async: true,
				filters: filterList,
				urlParameters: {
					"$select": aRelativeToProperties ? [aRelativeToProperties].concat(selectFields).join(",") : selectFields.join(","),
					"$top": (bToFetchTotalData) ? 1 : 4
				},
				success: function(data, response) {
					//set resolved
					data = oDatapoint ? CriticalityUtil.CalculateCriticality(oDatapoint, data, me.getMeasureField()) : data;
					var iDataLength = (data && data.results && data.results.length) ? data.results.length : 0;
					oDeferred.resolve(data, iDataLength);
				},
				error: function(error) {
					// set rejected
					oDeferred.reject();
				}
				};
				//Used bToFetchTotalData instead of bToFetchTop4Data for better readability
				if (!bToFetchTotalData) {
					//Only set if its a top4Data call
					oDataBindingInfo.sorters = this._sorters;
				}

			oModel.read(sBindingPath, oDataBindingInfo);
		}
		return oDeferred.promise();
	};

	FilterItemMicroDonut.prototype._onDataReceived = function(oTop4Data, oTotalData) {
		var results = [],
		sDimensionFieldDisplay = this.getDimensionFieldDisplay(),
		sMeasureField = this.getMeasureField(),
		sDimensionField = this.getDimensionField();
		if (!oTotalData) {
			oTop4Data.results.forEach(function(data, index) {
				data['dimensionValue'] = data[sDimensionField];
				results.push(data);
			});
		} else {
			var fTotalTwo = 0,
			fOthers = 0;

			oTop4Data.results.forEach(function(data, index) {
				if (index < 2) {
					data['dimensionValue'] = data[sDimensionField];
					results.push(data);
					fTotalTwo += parseFloat(data[sMeasureField]);
				}
			});

			if (oTotalData) {
				oTotalData.results.forEach(function (data) {
					var i18nModel = this.getModel("i18n"),
					oDataObject	= jQuery.extend(true, {}, data);
					// if dimensionField and dimension field display are the same property
					// then '__IS_OTHER__' becomes 'Other' and there is no proper way to find out
					// which whether other section was clicked or not. Hence storing __IS_OTHER__
					// as dimensionValue
					oDataObject['dimensionValue'] = this._otherField;
					oDataObject[sDimensionField] = this._otherField;
					oDataObject[sDimensionFieldDisplay] = i18nModel ? i18nModel.getResourceBundle().getText("VIS_FILTER_DONUT_OTHER") : "";

					if (fTotalTwo < 0) {
						fOthers = parseFloat(data[sMeasureField]) + fTotalTwo;
					} else {
						fOthers = parseFloat(data[sMeasureField]) - fTotalTwo;
					}
					oDataObject[sMeasureField] = fOthers;
					results.push(oDataObject);
				}.bind(this));
			}
		}

		FilterItemMicroChart.prototype._onDataReceived.call(this, results);
		this.getModel('__alp_chartJSONModel').setData(results);
		this._chart.setModel(this.getModel('__alp_chartJSONModel'));

		var count = 3,
			dataBinding = {
			path: '/',
			template: new InteractiveDonutChartSegment(this._getChartAggregationSettings(true)),
			startIndex: 0,
			length: count
		};

		this._chart.bindSegments(dataBinding);
		this._chart.setBusy(false);
	};

	return FilterItemMicroDonut;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroDonut.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.suite.ui.microchart.InteractiveLineChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.InteractiveLineChartPoint'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroLine",["sap/suite/ui/microchart/InteractiveLineChart",
	"sap/suite/ui/microchart/InteractiveLineChartPoint",
	"sap/ui/model/json/JSONModel",
	"sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroChart",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/CriticalityUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"],
	function(InteractiveLineChart, InteractiveLineChartPoint, JSONModel, FilterItemMicroChart, CriticalityUtil, FilterUtil) {
	"use strict";

	/* all visual filters should extend this class */
	var FilterItemMicroLine = FilterItemMicroChart.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine", {
		metadata: {
			properties: {
				labelWidthPercent: { type: "float", group: "Misc", defaultValue: 1 / 3 },
				fixedCount: {type: "int", defaultValue: 6}
			},
			aggregations: {
				control: {type: "sap.suite.ui.microchart.InteractiveLineChart", multiple : false}
			}
		},
		renderer:{}
	});

	FilterItemMicroLine.prototype.init = function() {
		this._chart = new sap.suite.ui.microchart.InteractiveLineChart({
			maxDisplayedPoints : 6,
			selectionEnabled : true,
			points : []
		});
		this.setControl(this._chart);
		this.setModel(new JSONModel(), '__alp_chartJSONModel');
		this._sorters = [];
		FilterItemMicroChart.prototype.init.apply(this, arguments);
	};

	FilterItemMicroLine.prototype._updateBinding = function() {
		this.applyOverlay();
		//To show the Busy Indicator immediately,
		//so that blank screen/chart is not shown
		this._chart.setBusyIndicatorDelay(0);
		// Set Chart to busy before rebinding
		this._chart.setBusy(true);
		this._chart.unbindPoints();
		// Make sure all binding are available
		var entityName = this.getEntitySet(),
		dimField = this.getDimensionField(),
		dimFieldDisplay = this.getDimensionFieldDisplay(),
		measureField = this.getMeasureField(),
		unitField = this.getUnitField(),
		filter = this.getDimensionFilterExternal(),
		aSortFields = [],
		aSortOrder = this.getSortOrder(),
		oSortObject = FilterItemMicroChart._getSorter(aSortOrder);
		this._sorters = oSortObject.sorter;
		aSortFields = oSortObject.sortFields;

		if (!entityName || !measureField || !dimField || !dimFieldDisplay) {// All fields must be present
			return;
		}

		// Collect the select fields, so that duplicates can be removed
		var selectFields = [measureField, dimField, aSortFields];

		if (dimField != dimFieldDisplay) {
			selectFields.push(dimFieldDisplay);
		}

		if (unitField) {
			selectFields.push(unitField);
		}

		var filterList = [];
		if (filter && filter.aFilters && filter.aFilters.length > 0) {
			filterList = [filter];
		}

		var me = this;
		var count = this.getFixedCount();

		var oModel = this.getModel();
		var sBindingPath = "/" + entityName;

		// odata call to get top 4 data
		if (oModel) {
			var oDatapoint = CriticalityUtil.getDataPoint(oModel, this);
			if (oDatapoint) {
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.ScaleFactor) ? this.setScaleFactor(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.ScaleFactor)) : this.setScaleFactor(null);
				(oDatapoint.ValueFormat && oDatapoint.ValueFormat.NumberOfFractionalDigits) ? this.setNumberOfFractionalDigits(FilterUtil.getPrimitiveValue(oDatapoint.ValueFormat.NumberOfFractionalDigits)) : this.setNumberOfFractionalDigits(null);
				var aRelativeToProperties = CriticalityUtil.getCriticalityRefProperties(oDatapoint);
			}
			if (this.getSmartFilterId()) {//If it has reference to SmartFilterBar
				var oSmartFilterBar = sap.ui.getCore().byId(this.getSmartFilterId());
				if (oSmartFilterBar && oSmartFilterBar.getEntitySet() === entityName) {
					var oTemplatePrivate = this.getModel("_templPriv"),
					bIsSearchable = oTemplatePrivate.getProperty('/alp/searchable');
					if (bIsSearchable) {
						if (oSmartFilterBar && oSmartFilterBar.getAnalyticBindingPath && oSmartFilterBar.getConsiderAnalyticalParameters()) {
							try {
								var sAnalyticalPath = oSmartFilterBar.getAnalyticBindingPath();
								if (sAnalyticalPath) {
									sBindingPath = sAnalyticalPath;
								}
							} catch (e) {
								jQuery.sap.log.warning("Mandatory parameters have no values", "", "AnalyticalListPage");
							}
						}
					} else {
						this.applyOverlay(this.requiredFilterMessage);
						return;
					}
				}
			}
			oModel.read(sBindingPath, {
				async: true,
				filters: filterList,
				sorters: this._sorters,
				urlParameters: {
					"$select": aRelativeToProperties ? [aRelativeToProperties].concat(selectFields).join(",") : selectFields.join(","),
					"$top": count
				},
				success: function(data, response) {
					data = oDatapoint ? CriticalityUtil.CalculateCriticality(oDatapoint, data, me.getMeasureField()) : data;
					me._onDataReceived(data);
				},
				error: function(error) {
					jQuery.sap.log.error("Error reading URL:" + error);
					me.applyOverlay(me.technicalIssueMessage);
				}
			});
		}
	};

	FilterItemMicroLine.prototype._onDataReceived = function(data) {
		if (!data || !data.results || !data.results.length) {
			this.applyOverlay(this.noDataIssueMessage);
			return;
		}

		var aData = this.getDimensionFieldIsDateTime() ? data.results.slice().reverse() : data.results;
		FilterItemMicroChart.prototype._onDataReceived.call(this, data.results);
		this.getModel('__alp_chartJSONModel').setData(aData);
		this._chart.setModel(this.getModel('__alp_chartJSONModel'));

		var count = this.getFixedCount(),
			dataBinding = {
			path: '/',
			template: new InteractiveLineChartPoint(this._getChartAggregationSettings()),
			startIndex: 0,
			length: count
		};

		this._chart.bindPoints(dataBinding);
		this._chart.setBusy(false);
	};
	return FilterItemMicroLine;

}, /* bExport= */ true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/FilterItemMicroLine.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.HeaderContainer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.ODataModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.FilterProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.PersonalizableInfo'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartvariants.SmartVariantManagement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.MetadataAnalyser'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar",[
	"sap/m/HeaderContainer", "sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController","sap/m/Label",
	"sap/ui/comp/odata/ODataModelUtil",
	"sap/ui/comp/smartfilterbar/FilterProvider", "sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/VisualFilterProvider",
	"sap/ui/comp/smartvariants/PersonalizableInfo", "sap/ui/comp/smartvariants/SmartVariantManagement",
	"sap/ui/model/Filter",
	"sap/m/OverflowToolbar", "sap/m/ToolbarSpacer", "sap/ui/comp/odata/MetadataAnalyser",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil",
	"sap/suite/ui/generic/template/AnalyticalListPage/util/V4Terms","sap/m/VBox",
	"sap/m/Button"

], function(HeaderContainer, VisualFilterDialogController,
		Label,
		ODataModelUtil,
		FilterProvider, VisualFilterProvider,
		PersonalizableInfo, SmartVariantManagement,
		Filter,
		OverflowToolbar, ToolbarSpacer, MetadataAnalyser, FilterUtil, V4Terms, VBox, Button) {
	"use strict";
	// create simple type to handle two-way binding (model -> view and view -> model)
	var oDimensionFilterType = sap.ui.model.SimpleType.extend("sap.ui.model.DimensionFilterType", {
	    formatValue: function(oValue) {
			// handles model -> view changes
			return oValue;
	    },
	    parseValue: function(oValue) {
			// handles view -> model changes
			return oValue;
	    },
	    validateValue: function(oValue) {
			// can extra validation on the value after successful parsing
			// not doing anything for now
	    }
	});

	var SmartVisualFilterBar = HeaderContainer.extend("sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar", {
		metadata: {
			designTime: true,
			properties: {
				entitySet: { type: "string", group: "Misc", defaultValue: null },
				config: { type: "object", group: "Misc", defaultValue: null },
				persistencyKey: { type: "string", group: "Misc", defaultValue: null },
				displayCurrency: { type: "string", group: "Misc", defaultValue: null },
				smartFilterId: { type: "string", group: "Misc", defaultValue: null },
				textArrangement: {type: "string", group: "Misc", defaultValue: sap.ui.comp.smartfilterbar.DisplayBehaviour.descriptionAndId}
			},
			associations: {
				smartVariant: { type: "sap.ui.core.Control", multiple: false }
			},
			events: {
				filterChange: {}
			}
		},
		renderer: {}
	});

	SmartVisualFilterBar.prototype.init = function() {
		if (HeaderContainer.prototype.init) {
			HeaderContainer.prototype.init.apply(this, arguments);
		}

		// Default settings
		//TODO: Get this through CSS rather than hard coding
		this._cellItemHeightNorth = "2.0rem";
		this._cellItemHeightSouth = "7.9rem";
		this._cellHeight = "10.9rem";
		this._cellWidth = "20rem";
		this.labelHeight = 2.0;
		this.compHeight = 7.9;
		this.cellHeightPadding = 1;
		this.cellHeight = (this.labelHeight + this.compHeight + this.cellHeightPadding) + "rem";  // Add cell padding due to the focus on the chart being clipped by the outer cell container, shouldn't have to do this
		this.cellWidth = 320;
		this._dialogFilters = {};
		this._compactFilters = {};
		this._oVariantConfig = {};
		this._smartFilterContext;
		this._oMetadataAnalyser;
		this.setModel(new sap.ui.model.json.JSONModel(), '_visualFilterConfigModel');
		this.addStyleClass("sapSmartTemplatesAnalyticalListPageVisualFilterBar");
	};

	/**
	 * It could happen that the entity type information is set already in the view, but there is no model attached yet. This method is called once the
	 * model is set on the parent and can be used to initialise the metadata, from the model, and finally create the visual filter bar.
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype.propagateProperties = function() {
		HeaderContainer.prototype.propagateProperties.apply(this, arguments);
		this._initMetadata();
	};

	/**
	 * Initialises the OData metadata necessary to create the visual filter bar
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._initMetadata = function() {
		if (!this.bIsInitialised) {
			ODataModelUtil.handleModelInit(this, this._onMetadataInit);
		}
	};

	/**
	 * Called once the necessary Model metadata is available
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._onMetadataInit = function() {
		if (this.bIsInitialised) {
			return;
		}

		this._annoProvider = this._createVisualFilterProvider();
		if (!this._annoProvider) {
			return;
		}

		this._oMetadataAnalyser = this._annoProvider.getMetadataAnalyser();
		this.bIsInitialised = true;

		//Retrieving the Text Arrangement for the Entity Type
		var entityType = this._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.getEntitySet());
		this.setTextArrangement(this._oMetadataAnalyser.getTextArrangementValue(entityType));

		this._updateFilterBar();
	};

	/**
	 * Creates an instance of the visual filter provider
	 *
	 * @private
	 */
	SmartVisualFilterBar.prototype._createVisualFilterProvider = function() {
		var model = this.getModel();
		var entitySet = this.getEntitySet();

		if (!model || !entitySet) {// Model and entity set must be available
			return null;
		}

		return new VisualFilterProvider(this);
	};

	/*
	* @private
	* obtains the string for '_BASIC' group from i18n property
	* @return {string}
	*/
	SmartVisualFilterBar.prototype._getBasicGroupTitle = function() {
		return this.getModel("i18n").getResourceBundle().getText("VIS_FILTER_GRP_BASIC_TITLE");
	};

	SmartVisualFilterBar.prototype._getFieldGroupForProperty = function(oEntityType,sCurrentPropName) {
		return this._annoProvider ? this._annoProvider._getFieldGroupForProperty(oEntityType,sCurrentPropName) : undefined;
	};

	SmartVisualFilterBar.prototype._getGroupList = function() {
		return this._annoProvider ? this._annoProvider.getGroupList() : [];
	};

	SmartVisualFilterBar.prototype._getGroupMap = function() {
		return this._annoProvider ? this._annoProvider.getGroupMap() : {};
	};

	SmartVisualFilterBar.prototype._getMeasureMap = function() {
		return this._annoProvider ? this._annoProvider.getMeasureMap() : {};
	};

	SmartVisualFilterBar.prototype._getDimensionMap = function() {
		return this._annoProvider ? this._annoProvider.getDimensionMap() : {};
	};

	/*
	* @public
	* sets the smart filter bar reference in the visual filter
	* so that it can be accessed if required
	* @param {object} oContext reference to smart filter bar
	* @return {void}
	*/
	SmartVisualFilterBar.prototype.setSmartFilterContext = function(oContext) {
		this._smartFilterContext = oContext;
	};

	SmartVisualFilterBar.prototype._updateFilterBar = function() {
		// Centrally handle the various settings: Application Configuration, OData Annotations, Variant settings...
		// Order of precedence, highest to lowest, highest precedence overwrites the lower precedence:
		//   1. Variant
		//   2. OData Annotations


		var annoSettings = this._getAnnotationSettings();
		if (annoSettings && annoSettings.filterList) {
			var config = this._convertSettingsToConfig(annoSettings);
		} else {
			// Default, no filters
			config = {
				filterCompList: []
			};
			this.getModel('_visualFilterConfigModel').setData(config);
			return;
		}

		// Variant store the variables of a property (Measure, sort order, chart type, shown in filterbar)
		var variantJSON = this._getVariantConfig();
		if (variantJSON && variantJSON.config) {
			// merge variant into config based on property
			config.filterCompList.forEach(function (element) {
				// if parent property exists in variant json override config
				if (variantJSON.config[element.component.properties.parentProperty]) {
					jQuery.extend(true, element, variantJSON.config[element.component.properties.parentProperty]);
				}
			});
			// store config only for later use after smart filter bar variant load when mergeCompactFilters is called
			this._oVariantConfig = config;
			//return;
		}
		this.unbindAggregation('content', true);

		this.getModel('_visualFilterConfigModel').setData(config);
		this.bindAggregation('content', {
			path: "_visualFilterConfigModel>/filterCompList",
			factory: function (sId, oContext) {
				var oComponentProperties = oContext.getProperty('component'),
				oProperties = oComponentProperties ? oComponentProperties.properties : undefined,
				sChartType = this._resolveChartType(oComponentProperties ? oComponentProperties.type : undefined);
				// create header items
				return this._createHeaderItems(oContext.sPath, sChartType, oProperties);
			}.bind(this),
			//Filter the items based on shownInFilterBar=true
			filters: new sap.ui.model.Filter("shownInFilterBar", sap.ui.model.FilterOperator.EQ, true)
		});
		return;

	};
	// spath - path to object in visual filter config model
	SmartVisualFilterBar.prototype._createHeaderItems = function (sPath, sType, oProperties) {
		// Component initialization, create chart
		var oFilterItem = this._createFilterItemOfType(sType, oProperties),
		aInParameters = oFilterItem.getInParameters(),
		aBindingParts = [],
		me = this;
		if (aInParameters && aInParameters.length > 0) {
			aInParameters.forEach(function (element) {
				aBindingParts.push({
					path: '_filter>/' + element.localDataProperty
				});
			});
		}
		oFilterItem.addCustomData(new sap.ui.core.CustomData({
			key: 'sPath',
			value: sPath
		}));
		if (me.getEntitySet() === oFilterItem.getEntitySet()) {
			var aMandatoryFields = me._smartFilterContext.determineMandatoryFilterItems();
			if (aMandatoryFields && aMandatoryFields.length > 0) {
				aMandatoryFields.forEach(function (element) {
					aBindingParts.push({
						path: '_filter>/' + element.getName()
					});
				});
			}
		}
		// set models on the filter items
		oFilterItem.bindProperty('dimensionFilter', {
			path: '_filter>/' + oFilterItem.getParentProperty(),
			// type ensure two-way data binding in case value has to be formatted
			type: new oDimensionFilterType()
		});

		oFilterItem.bindProperty('measureField', {
			path: '_visualFilterConfigModel>' + sPath + '/component/properties/measureField'
		});

		oFilterItem.bindProperty('sortOrder', {
			path: '_visualFilterConfigModel>' + sPath + '/component/properties/sortOrder'
		});
		oFilterItem.bindProperty('unitField', {
			path: '_visualFilterConfigModel>' + sPath + '/component/properties/measureField',
			formatter: function() {
				var measureMap = me._getMeasureMap();
				var measureField = measureMap[this.getEntitySet()][this.getMeasureField()];
				return measureField ? measureField.fieldInfo.unit : "";
			}
		});
		if (aBindingParts && aBindingParts.length > 0) {
			oFilterItem.bindProperty('dimensionFilterExternal', {
				parts: aBindingParts,
				formatter: function () {
					var	aInParameters = this.getInParameters(),
					sParentProperty = this.getParentProperty();
					var oFilter, oCurrencyProperty;
					// If the Main EntitySet and the filterItem EntitySet is the same and the main EntitySet
					// is Parameterized, then we do not proceed. So we only procees in 3 cases.
					// 1. VH!=ME(Parameterized)
					// 2. VH=ME(Non-Parameterized)
					// 3. VH!=ME(Non-Paramterized)
					// Since we already have set a parameter, therefore
					// we do not need an explicit currency filter and the parameter takes care of the conversions.
					// Considering the above 3 cases, we proceed only if
					// 1. The ME is Non-Parameterized
					// 2. The ME is Parameterized but the parameter is only P_DisplayCurrency
					if (!(me.getEntitySet() === this.getEntitySet() && me._smartFilterContext.getAnalyticBindingPath() !== "") && (me._smartFilterContext.getAnalyticBindingPath() === "" || ((me._smartFilterContext.getAnalyticBindingPath().indexOf("P_DisplayCurrency")) != -1))) {
						var displayCurrency = me.getProperty("displayCurrency");
						// If displayCurrency is set only then we proceed.
						if (displayCurrency) {
							var measureField = this.getMeasureField();
							var oModel = me.getModel();
							var metaModel = oModel.getMetaModel();
							var oEntityType = metaModel.getODataEntityType(me._oMetadataAnalyser.getEntityTypeNameFromEntitySetName(this.getEntitySet()));
							var oProperty = metaModel.getODataProperty(oEntityType, measureField);

							if (oProperty) {
								var sCurrencyPath = oProperty[V4Terms.ISOCurrency];
								if (sCurrencyPath) {
									// Check the cuurency property associated with the measure.
									var sCurrencyField = sCurrencyPath.Path;

									for (var key = (aInParameters.length - 1); key > -1; key--) {
										var sValueListProperty = aInParameters[key].valueListProperty;
										var sLocalDataProperty = aInParameters[key].localDataProperty;
										if (sValueListProperty === sCurrencyField) {
											var aFilterData = me._smartFilterContext.getFilterData();
											if (!aFilterData[sLocalDataProperty]) {
												oCurrencyProperty = metaModel.getODataProperty(oEntityType, sCurrencyField);
												if (oCurrencyProperty && oCurrencyProperty["sap:filterable"] !== "false") {
													oFilter = new sap.ui.model.Filter({
														aFilters: [
															new sap.ui.model.Filter({ path: sCurrencyField, operator: "EQ", value1: displayCurrency, value2: undefined })
														],
														and: false
													});
												}
											}
											break;
										}
									}
								}
							}
						}
					}
					return me._getFiltersForFilterItem(aInParameters, sParentProperty, oFilter, sCurrencyField);
				}
			});
		}

		// Attach events
		if (oFilterItem.attachFilterChange) {
			oFilterItem.attachFilterChange(this._onFilterChange, this);
		}

		if (oFilterItem.attachTitleChange) {
			oFilterItem.attachTitleChange(this._onTitleChange, this);
		}

		// Create title toolbar for the cell
		var oToolbar = this._createTitleToolbar(oProperties, oFilterItem),
		oHeaderTitleBar = new VBox({
			height: this._cellItemHeightNorth,
			items: [oToolbar]
		});

		var oHeaderOverlay = new VBox({
			width: "100%",
			height: this._cellItemHeightSouth,
			items: [
				new sap.m.Text({
					width: this.cellWidth + "px",
					textAlign: sap.ui.core.TextAlign.Center,
					text: {
						path: '_visualFilterConfigModel>' + sPath + '/overlayMessage',
						formatter: function(sOverlayMessage) {
							return this.getModel("i18n").getResourceBundle().getText(sOverlayMessage);
						}
					}
				})
			],
			visible: {
				path: '_visualFilterConfigModel>' + sPath + '/showChartOverlay',
				formatter: function( bValue) {
					return bValue;
				}
			}
		});

		oHeaderOverlay.addStyleClass("sapUiOverlay");
		oHeaderOverlay.addStyleClass("sapSmartTemplatesAnalyticalListPageVFOverflow");

		var oHeaderChartBar = new VBox({
			height: this._cellItemHeightSouth,
			items: [oFilterItem],
			visible: {
				path: "_visualFilterConfigModel>" + sPath + "/showChartOverlay",
				formatter: function( bValue) {
					return !bValue;
				}
			}
		});

		var oCell = new VBox({
			fieldGroupIds: ["headerBar"],
			height: this._cellHeight,
			width: this.cellWidth + "px",
			items:[
				oHeaderTitleBar,
				oHeaderOverlay,
				oHeaderChartBar
			]
		});

		return oCell;
	};

	SmartVisualFilterBar.prototype._getAnnotationSettings = function() {
		return this._annoProvider ? this._annoProvider.getVisualFilterConfig() : null;
	};

	/*
	* @private
	* Convert setting from annotations to config for visual filter
	* @param {object} settings - parsed annotations data from visual filter provider
	* @param {boolean} bIsVariantConfig	- if called  by variant management to get variant config
	* @return {object} config used to render the charts or get variant management object based on bIsVariantConfig
	*/
	SmartVisualFilterBar.prototype._convertSettingsToConfig = function(settings, bIsVariantConfig) {
		var config = {
			filterCompList: []
		};

		// Include group information, prepare the group information by field
		var groupList = this._getGroupList();
		var groupByFieldName = {};
		for (var i = 0; i < groupList.length; i++) {
			var group = groupList[i];

			for (var j = 0; j < group.fieldList.length; j++) {
				var field = group.fieldList[j];
				groupByFieldName[field.name] = {
					name: group.name,
					label: group.label
				};
			}
		}

		// By default the basic group is all available in the filter dialog, so get all field names and in the shownInFilterDialog, set the value to true if in this list
		var groupMap = this._getGroupMap();
		var basicGroup = groupMap["_BASIC"];
		var basicFieldNameList = [];
		if (basicGroup && basicGroup.fieldList) {
			for (var i = 0; i < basicGroup.fieldList.length; i++) {
				basicFieldNameList.push(basicGroup.fieldList[i].name);
			}
		}

		var measureMap = this._getMeasureMap(),
			filterList = settings.filterList,
			oVariantConfig = {};
		for (var i = 0; i < filterList.length; i++) {
			var filterCfg = filterList[i];

			var dimField = filterCfg.dimension.field;

			var measureField = measureMap[filterCfg.collectionPath][filterCfg.measure.field];
			var bIsCurrency = false;

			if (measureField.fieldInfo[V4Terms.ISOCurrency]){
				bIsCurrency = true;
			}

			var oConfigObject = {
				shownInFilterBar: filterCfg.selected,
				component: {
					type: filterCfg.type,
					properties: {
						sortOrder : filterCfg.sortOrder,
						measureField: filterCfg.measure.field,
						parentProperty: filterCfg.parentProperty ? filterCfg.parentProperty : undefined
					}
				}
			};

			if (!bIsVariantConfig) {
				// if not variant management add other properties to config object
				var oConfigExtendedObject = {
					shownInFilterDialog: filterCfg.selected || basicFieldNameList.indexOf(dimField) != -1,
					group: groupByFieldName[filterCfg.parentProperty],
					component: {
						properties: {
							scaleFactor : filterCfg.scaleFactor,
							numberOfFractionalDigits: filterCfg.numberOfFractionalDigits,
							filterRestriction: filterCfg.filterRestriction,
							width: this.cellWidth + "px",
							height: this.compHeight + "rem",
							entitySet: filterCfg.collectionPath ? filterCfg.collectionPath : this.getEntitySet(),
							dimensionField: dimField,
							dimensionFieldDisplay: filterCfg.dimension.fieldDisplay,
							dimensionFilter: filterCfg.dimensionFilter,
							unitField: measureField ? measureField.fieldInfo.unit : "",
							isCurrency: bIsCurrency,
							isMandatory: filterCfg.isMandatory,
							outParameter: filterCfg.outParameter ? filterCfg.outParameter : undefined,
							inParameters: filterCfg.inParameters ? filterCfg.inParameters : undefined,
							textArrangement: this.getTextArrangement(),
							chartQualifier: filterCfg.chartQualifier ? filterCfg.chartQualifier : undefined,
							dimensionFieldIsDateTime: filterCfg.dimensionFieldIsDateTime
						}
					}
				};
				jQuery.extend(true, oConfigObject, oConfigExtendedObject);
				// convert the filter properties from the configuration (variant, annotation) into the control specific properties
				config.filterCompList.push(oConfigObject);
			} else {
				// create variant management object
				oVariantConfig[filterCfg.parentProperty] = oConfigObject;
			}
		}

		return bIsVariantConfig ? oVariantConfig : config;
	};

	SmartVisualFilterBar.prototype._setVariantModified = function() {
		if (this._oVariantManagement) {
			this._oVariantManagement.currentVariantSetModified(true);
		}
	};

	SmartVisualFilterBar.prototype._onFilterChange = function(ev) {
		this._setVariantModified();
		// Fire the external filter change event
		// event handler should always call setCompactFilterData with compact filter data
		// handled in filter bar controller
		this.fireFilterChange();
	};

	/**
	 * @private
	 * Get AND query filters for all in parameters for a visual filter instance instance
	 *
	 * @param {array} inParams - array of in parameters
	 * @param {string} parentProperty - parent property of the visual filter instance
	 * @returns {array} filter query of the visual filter item
	 */
	SmartVisualFilterBar.prototype._getFiltersForFilterItem = function(inParams, parentProperty,oFilter, currencyField) {

		var oPropertyFilters = {},
		mappedLocalDataProperty	= [],
		filters = new sap.ui.model.Filter({
			aFilters: [],
			and: true
		});

		if (inParams) {
			var replaceSPath = function (element) {
				// change property path from local data property to value list property
				// since query for filter item will be made to collection path
				element.sPath = valueListProperty;
			};
			// reverse loop since for compact filters also the last in param is considered first
			for (var key = (inParams.length - 1); key > -1; key--) {
				var localDataProperty = inParams[key].localDataProperty,
				valueListProperty = inParams[key].valueListProperty;

				// Build the set of filters
				if (localDataProperty !== parentProperty && mappedLocalDataProperty.indexOf(localDataProperty) === -1) {
					// get filters for property from smart filter bar
					oPropertyFilters = this._smartFilterContext.getFilters([localDataProperty]);
					if (oPropertyFilters && oPropertyFilters.length > 0) {
						// since filter is for specific property hence
						// there will always be one global filter with index 0
						if (oPropertyFilters[0].aFilters) {
							// if in param property is filter-restriction=multi-value
							oPropertyFilters[0].aFilters.forEach(replaceSPath.bind(this));
						} else {
							// if in param property is filter-restriction=single-value or filter-restriction=interval
							replaceSPath(oPropertyFilters[0]);
						}
						// map of properties that have already been considered for in params
						mappedLocalDataProperty.push(localDataProperty);
						// add to main filter with and condition
						filters.aFilters.push(oPropertyFilters[0]);
					}
				}
			}
			if (oFilter) {
				filters.aFilters.push(oFilter);
			}
		}
		return filters;
	};

	SmartVisualFilterBar.prototype._createTitleToolbar = function(props, filterItem) {
		var title = new Label({
			text: {
				path: "i18n>VIS_FILTER_TITLE_MD",
				formatter: function() {
					return filterItem.getTitle();
				}
			}
		});
		if (filterItem.getProperty("isMandatory")) {
			title.addStyleClass("sapMLabelRequired");
		}
		//Get the input control for corresponding property needed to fire valuehelp request
		var oInput = this._smartFilterContext.getControlByKey(props.parentProperty);
		//ensure that value help annotations are loaded
		this._smartFilterContext.ensureLoadedValueHelp(props.parentProperty);
		//Value help button is needed only if input control is defined
		if (oInput) {
			var selectedItemsTooltip;
			var rb = this.getModel("i18n").getResourceBundle();
			var bIsVisible = oInput.getShowValueHelp && oInput.getShowValueHelp(),
				selectedBtn = new Button({
				text: {
					path: "_filter>/" + filterItem.getParentProperty(),
					formatter: function(oContext) {
						selectedItemsTooltip = "";
						var sFilterRestriction = filterItem.getFilterRestriction(),
							count = 0;
						if (oContext) {
							if (sFilterRestriction === 'single') {
								count = 1;
							} else {
								if (typeof oContext === "object") {	//For multi value
									if (oContext.value) {	//Add single value
										count++;
									}
									//Add items
									if (oContext.items && oContext.items.length) {	//items can be null
										count += oContext.items.length;
									}
									//Add ranges
									if (oContext.ranges && oContext.ranges.length) {	//ranges can be null
										count += oContext.ranges.length;
									}
								} else {	//For single value, it can be string or int
									count++;
								}
							}
						}
						if (count) {
							//tooltip string for selected items button for VF chart
							selectedItemsTooltip = (count === 1) ? rb.getText("SINGLE_SELECTED", count) : rb.getText("MULTI_SELECTED", count);
						}
						return count ? "(" + count + ")" : "";
					}
				},
				icon: bIsVisible ? "sap-icon://value-help" : "",
				visible: {
					path: "_filter>/" + filterItem.getParentProperty(),
					formatter: function(oContext) {
						if (bIsVisible) { //for valuehelp
							return true;
						} else { //non value-help case
							if (!oContext) { //No filter set for this property
								return false;
							}
							//Handle multiple values
							if (typeof oContext === "object") {
								return (oContext.value || (oContext.items && oContext.items.length) || (oContext.ranges && oContext.ranges.length)) ? true : false;
							}
							//Single value fields
							return true;
						}
					}
				},
				press: function(oEvent) {
					if (bIsVisible) {
						oInput.fireValueHelpRequest.call(oInput);
					} else {
						VisualFilterDialogController.launchAllFiltersPopup(selectedBtn, filterItem, oEvent.getSource().getModel('i18n'));
					}
				},
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.NeverOverflow
				}),
				tooltip: {
					path: "_filter>/" + filterItem.getParentProperty(),
					formatter: function() {
						return FilterUtil.getTooltipForValueHelp(bIsVisible, rb, selectedItemsTooltip);
					}
				}
			});
		}

		var toolbar = new OverflowToolbar({
			design: sap.m.ToolbarDesign.Transparent,
			width: this.cellWidth + "px",
			content: [
				title,
				new ToolbarSpacer(),
				selectedBtn
			]
		});

		toolbar.addStyleClass("sapSmartTemplatesAnalyticalListPageVisualFilterTitleToolbar");

		return toolbar;
	};

	SmartVisualFilterBar.prototype.getTitleByFilterItemConfig = function(filterConfig, unitValue, scaleValue) { // used when the filter item + data is not present, ideally called on the filter item iteslf
		var props = filterConfig.component.properties;
		var entitySet = props.entitySet;
		var model = this.getModel();

		if (!model) {
			return "";
		}

		var basePath = "/" + entitySet + "/";
		var measureLabel = model.getData(basePath + props.measureField + "/#@sap:label");
		var dimLabel = model.getData(basePath + props.dimensionField + "/#@sap:label");

		// Get the Unit
		if (!unitValue) {
			unitValue = "";
		}

		// Get the Scale factor
		if (!scaleValue) {
			scaleValue = "";
		}

		var titleText = "";
		var rb = this.getModel("i18n").getResourceBundle();
		if (scaleValue && unitValue) {
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT_CURR", [measureLabel, dimLabel, scaleValue, unitValue]);
		} else if (unitValue) {
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, unitValue]);
		} else if (scaleValue) {
			titleText = rb.getText("VIS_FILTER_TITLE_MD_UNIT", [measureLabel, dimLabel, scaleValue]);
		} else {
			titleText = rb.getText("VIS_FILTER_TITLE_MD", [measureLabel, dimLabel]);
		}

		return titleText;
	};

	SmartVisualFilterBar.prototype._onTitleChange = function(ev) {
		var oCell = ev.getSource().getParent().getParent();
		//Select label from toolbar
		var oLabel = oCell.getItems()[0].getItems()[0].getContent()[0];
		if (ev.getSource().getProperty("isMandatory")) {
			oLabel.addStyleClass("sapMLabelRequired");
		}
		oLabel.setText(ev.getSource().getTitle());
		oLabel.setTooltip(ev.getSource().getTitle());
	};

	SmartVisualFilterBar.prototype._getSupportedFilterItemList = function() {
		// predefined set of controls, order preserved
		if (!this._supportedFilterItemList) {
			this._supportedFilterItemList = [{
					type: "Bar",
					//className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartBar",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroBar",
					iconLink: "sap-icon://horizontal-bar-chart",
					textKey: "VISUAL_FILTER_CHART_TYPE_BAR"
				}, {
					type: "Donut",
					//className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartDonut",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroDonut",
					iconLink: "sap-icon://donut-chart",
					textKey: "VISUAL_FILTER_CHART_TYPE_Donut"
				}, {
					type: "Line",
					//className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemChartLine",
					className: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.FilterItemMicroLine",
					iconLink: "sap-icon://line-charts",
					textKey: "VISUAL_FILTER_CHART_TYPE_Line"
				}
			];
		}

		return this._supportedFilterItemList;
	};

	SmartVisualFilterBar.prototype._getSupportedFilterItemMap = function() {
		if (!this._supportedFilterItemMap) {
			this._supportedFilterItemMap = {};

			var compList = this._getSupportedFilterItemList();
			for (var i = 0; i < compList.length; i++) {
				var comp = compList[i];
				this._supportedFilterItemMap[comp.type] = comp;
			}
		}

		return this._supportedFilterItemMap;
	};

	SmartVisualFilterBar.prototype._resolveChartType = function(type) {
		var compMap = this._getSupportedFilterItemMap();

		var compInfo = compMap[type];
		if (!compInfo) {
			var aType;
			for (aType in compMap) {
				compInfo = compMap[aType];
				break;
			}

			jQuery.sap.log.error("Could not resolve the filter component type: \"" + type + "\", falling back to " + aType);
			type = aType;
		}

		return type;
	};

	SmartVisualFilterBar.prototype._createFilterItemOfType = function(type, properties) {
		var compMap = this._getSupportedFilterItemMap();
		var compInfo = compMap[type];

		var className = compInfo.className;

		jQuery.sap.require(className);
		var compClass = jQuery.sap.getObject(className);

		var compInst = new compClass(properties); // Instantiate and apply properties
		compInst.setSmartFilterId(this.getSmartFilterId());	//Needed to fire parameterized query
		compInst.setModel(this.getModel('_filter'), '_filter');
		compInst.setModel(this.getModel('i18n'), 'i18n');
		compInst.setModel(this.getModel("_templPriv"), "_templPriv");
		compInst.setModel(this.getModel('_visualFilterConfigModel'), "_visualFilterConfigModel");
		compInst.setModel(this.getModel());
		//compInst._updateBinding();
		return compInst;
	};
	/**
	* Returns config for visual filter
	*
	* @param {boolean} bIsVariantConfig - if config should be for variant or not
	* @returns {object} config for the visual filter to determine behaviour of each filter item
	*/
	SmartVisualFilterBar.prototype.getConfig = function(bIsVariantConfig) {
		var config = this.getModel('_visualFilterConfigModel').getData(),
			oVariantConfig = {};

		if (!config) {
			return {filterCompList: []};
		}

		var itemIndex = 0;
		//var itemList = this.getContent();
		var itemList = sap.ui.getCore().byFieldGroupId("headerBar");
		for (var i = 0; i < config.filterCompList.length; i++) {
			var compConfig = config.filterCompList[i];
			if (bIsVariantConfig) {
				// generate config for variant management
				oVariantConfig[compConfig.component.properties.parentProperty] = {
					shownInFilterBar: compConfig.shownInFilterBar,
					component: {
						type: compConfig.component.type,
						properties: {
							measureField: compConfig.component.properties.measureField,
							sortOrder: compConfig.component.properties.sortOrder,
							parentProperty: compConfig.component.properties.parentProperty
						}
					}
				};
			} else {
				// generate config for visual filter bar
				if (!compConfig.shownInFilterBar) {// If not shown, then no changes to collect, so go to the next
					continue;
				}

				// there will be a corresponding UI entry, ask for the latest configuration from each
				var item = itemList[itemIndex];
				if (!item) {
					jQuery.sap.log.error("The configured selected filter bar items do not correspond to the actual filter bar items.  Could be an error during initialization, e.g. a chart class not found");
					return {filterCompList: []};
				}

				itemIndex++;
				if (item._chart) {
					var compInst = item;
					compConfig.component.properties = compInst.getP13NConfig();
				}
			}
		}

		return bIsVariantConfig ? oVariantConfig : config;
	};

	/////////////////////
	// Variant handling
	/////////////////////
	SmartVisualFilterBar.prototype.setSmartVariant = function(oSmartVariantId) {
		this.setAssociation("smartVariant", oSmartVariantId);

		if (oSmartVariantId) {
	        var oPersInfo = new PersonalizableInfo({
	            type: "sap.suite.ui.generic.template.AnalyticalListPage.control.visualfilterbar.SmartVisualFilterBar",
	            keyName: "persistencyKey"
	        });
			oPersInfo.setControl(this);
		}

		this._oVariantManagement = this._getVariantManagementControl(oSmartVariantId);
		if (this._oVariantManagement) {
			this._oVariantManagement.addPersonalizableControl(oPersInfo);
			this._oVariantManagement.initialise(this._variantInitialised, this);
			this._oVariantManagement.attachSave(this._onVariantSave, this);
		} else if (oSmartVariantId) {
			if (typeof oSmartVariantId === "string") {
				jQuery.sap.log.error("Variant with id=" + oSmartVariantId + " cannot be found");
			} else if (oSmartVariantId instanceof sap.ui.core.Control) {
				jQuery.sap.log.error("Variant with id=" + oSmartVariantId.getId() + " cannot be found");
			}
		} else {
			jQuery.sap.log.error("Missing SmartVariant");
		}
	};

	SmartVisualFilterBar.prototype._getVariantManagementControl = function(oSmartVariantId) {
		var oSmartVariantControl = null;
		if (oSmartVariantId) {
			oSmartVariantControl = typeof oSmartVariantId == "string" ? sap.ui.getCore().byId(oSmartVariantId) : oSmartVariantId;

			if (oSmartVariantControl && !(oSmartVariantControl instanceof SmartVariantManagement)) {
				jQuery.sap.log.error("Control with the id=" + oSmartVariantId.getId ? oSmartVariantId.getId() : oSmartVariantId + " not of expected type");
				return null;
			}
		}
		return oSmartVariantControl;
	};

	SmartVisualFilterBar.prototype._variantInitialised = function() {
		if (!this._oCurrentVariant) {
			this._oCurrentVariant = "STANDARD";
		}
	};

	SmartVisualFilterBar.prototype._onVariantSave = function() {
		if (this._oCurrentVariant == "STANDARD") {// changes were made, so get the current configuration
			this._oCurrentVariant = {
				config: this.getConfig(true)
			};
		}
	};


	SmartVisualFilterBar.prototype.applyVariant = function(oVariantJSON, sContext) {
		this._oCurrentVariant = oVariantJSON;
		if (this._oCurrentVariant == "STANDARD") {
			this._oCurrentVariant = null;
		}
		// check if this is old variant
		// old variant used to store filterCompList in config
		if (this._oCurrentVariant && this._oCurrentVariant.config && this._oCurrentVariant.config.filterCompList) {
			// if old variant, set config to null so that annotations can be considered for the chart
			this._oCurrentVariant.config = null;
		}

		if (this._oCurrentVariant && this._oCurrentVariant.config == null) { // then STANDARD, but STANDARD variant was requested before annotations were ready
			var annoSettings = this._getAnnotationSettings();
			if (annoSettings && annoSettings.filterList) {
				this._oCurrentVariant.config = this._convertSettingsToConfig(annoSettings, true);
			}
		}

		this._updateFilterBar();

		//Need to unmark the dirty flag because this is framework
		//applying the variant and firing filter to update table/chart
		if (this._oVariantManagement) {
			this._oVariantManagement.currentVariantSetModified(false);
		}
	};

	SmartVisualFilterBar.prototype._getVariantConfig = function() {
		return this._oCurrentVariant;
	};

	SmartVisualFilterBar.prototype.fetchVariant = function() {
		if (!this._oCurrentVariant || this._oCurrentVariant == "STANDARD") {
			var annoSettings = this._getAnnotationSettings();
			if (annoSettings && annoSettings.filterList) {
				this._oCurrentVariant = {
					config: this._convertSettingsToConfig(annoSettings, true)
				};
				return this._oCurrentVariant;
			} else {
				return {
					config: null
				};
			}
		}

		return {
			config: this.getConfig(true)
		};
	};
	/**
	 * Refresh the visual filter charts in SmartVisualFilterBar.
	 * Iterate over all the chart items in VisualFilters and call their _updateBinding methods.
	 */
	SmartVisualFilterBar.prototype.updateVisualFilterBindings = function(bAllowBindingUpdateOnPropertyChange){
		//var itemList = this.getContent();
		var itemList = sap.ui.getCore().byFieldGroupId("headerBar");
		for (var i = 0; i < itemList.length; i++) {
			if (itemList[i]._chart) {
				itemList[i]._updateBinding();
				itemList[i]._bAllowBindingUpdateOnPropertyChange = bAllowBindingUpdateOnPropertyChange === true;
			}
		}
	};

	/**
	* Function to update the visual filter bar
	*
	* @param {array} aProperties - array of properties for which visual filter item should be added to BasicArea
	* @return {boolean} true if filter successfully added to basic area else false
	*/
	SmartVisualFilterBar.prototype.addVisualFiltersToBasicArea = function(aProperties) {
		var config = jQuery.extend(true, {}, this.getModel('_visualFilterConfigModel').getData()),
		iPropertiesLength = (aProperties && aProperties.constructor === Array && aProperties.length) ? aProperties.length : 0,
		iCountFiltersAddedtoBasicArea = 0;

		if (!config) {
			jQuery.sap.log.error("Could not add filter to basic area. No config found!");
			return false;
		} else if (!iPropertiesLength) {
			jQuery.sap.log.error("Improper parameter passed. Pass an array of properties.");
			return false;
		} else {
			for (var i = 0; i < config.filterCompList.length; i++) {
				var compConfig = config.filterCompList[i];
				if (aProperties.indexOf(FilterUtil.readProperty(compConfig.component.properties.parentProperty)) !== -1 && !compConfig.shownInFilterBar) {
					compConfig.shownInFilterBar = true;
					compConfig.shownInFilterDialog = true;
					iCountFiltersAddedtoBasicArea++;
				}
			}

			if (iCountFiltersAddedtoBasicArea) {
				// set the data
				this.getModel('_visualFilterConfigModel').setData(config);
				return true;
			} else {
				jQuery.sap.log.info("Filters already present in visual filter basic area");
				return false;
			}
		}
	};
	return SmartVisualFilterBar;
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/control/visualfilterbar/SmartVisualFilterBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.ContentAreaController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.ContentAreaController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/ContentAreaController",["sap/m/OverflowToolbar","sap/m/ToolbarSpacer","sap/m/FlexItemData", "sap/m/ToolbarDesign",
		"sap/ui/core/mvc/Controller",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/SmartChartController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/DetailController"
	],
	function(OverflowToolbar, ToolbarSpacer, FlexItemData, ToolbarDesign, Controller, SmartChartController, DetailController ) {
		"use strict";
		var oController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.ContentAreaController", {

			/**
			 * This function set the object state
			 * @param  {object} oState object state
			 * @return {void}
			 */
			setState: function(oState) {
				if (oState.oSmartChart) {
					oState.chartController = new SmartChartController();
					oState.chartController.setState(oState);
				}
				if (oState.oSmartTable) {
					oState.detailController = new DetailController();
					oState.detailController.setState(oState);
				}
				this.oState = oState;
				oState.bCustomViewExist = (oState.oController.byId("template::contentViewExtensionToolbar") !== undefined);
				oState.toolbarController.setState(oState);
			},
			/**
			 * This function enables the toolbar
			 * @return {void}
			 */
			enableToolbar: function() {
				if (this.oState.oSmartChart) {
					this.oState.oSmartChart.getToolbar().setEnabled(true);
				}
				if (this.oState.oSmartTable) {
					this.oState.oSmartTable.getCustomToolbar().setEnabled(true);
				}
			},
			/**
			 * This function create a custom model for app developer
			 * @return {void}
			 */
			createAndSetCustomModel: function(oState) {
				var oCustomModel = new sap.ui.model.json.JSONModel();
				oCustomModel.setData({
					required: {
						master: true
					},
					icon: {
						master: "sap-icon://vertical-bar-chart-2",
						hybrid: "sap-icon://chart-table-view",
						customview: "sap-icon://grid"
					},
					tooltip: {
						master: "{i18n>CONTAINER_VIEW_CHART}",
						hybrid: "{i18n>CONTAINER_VIEW_CHARTTABLE}",
						customview: "Custom View"
					}
				});
				//provides a way to change the data in custom model
				oState.oController.onAfterCustomModelCreation(oCustomModel);
				oState.oController.oView.setModel(oCustomModel, "alpCustomModel");
			}
		});
		return oController;
	});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/ContentAreaController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController') ) {

jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController",["sap/m/SegmentedButtonItem", "sap/m/Button", "sap/m/ButtonType", "sap/m/Text", "sap/m/Dialog", "sap/m/SegmentedButton",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
	"sap/ui/core/mvc/Controller", "sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
	function(
		SegmentedButtonItem, Button, ButtonType, Text,
		Dialog, SegmentedButton, VisualFilterDialogController,
		Controller, FilterUtil) {
		"use strict";

		var FILTER_MODE_VISUAL = "visual";

		var fbController = Controller.extend("sap.suite.ui.generic.template.AnalyticalListPage.controller.FilterBarController", {
			init: function(oState) {
				this.compactFilterData = {};
				var me = this;

				me.oState = oState;

				var bShowGoButtonOnFilter = me.oState.oController.getOwnerComponent().getShowGoButtonOnFilterBar() ? true : false;
				oState.oSmartFilterbar.setShowGoOnFB(bShowGoButtonOnFilter);
				//live mode on when go button is disabled
				//TODO: should be moved to view fragment
				oState.oSmartFilterbar.setLiveMode(!bShowGoButtonOnFilter);
				//Show messages only if GO button is enabled
				oState.oSmartFilterbar.setShowMessages(bShowGoButtonOnFilter);
				//load data on initial launch for live mode
				//TODO: should be moved to view fragment
				if (oState.oSmartTable) {
					oState.oSmartTable.setEnableAutoBinding(!bShowGoButtonOnFilter);
				}
				//Enable "AdaptFilter" beside the "Go" button
				if (!bShowGoButtonOnFilter) {
					//TODO:Hiding "AdaptFilter" button using private API , public API to be used when available
					me.oState.oSmartFilterbar._oFiltersButton.setVisible(false);
				}

				oState.oHeader = oState.oPage.getHeader();
				oState.oTitle = oState.oPage.getTitle();

				if (oState.oKpiTagContainer) {
					oState.alr_filterContainer.removeContent(oState.oKpiTagContainer);
					oState.oKpiTagContainer.addStyleClass("sapSmartTemplatesAnalyticalListPageKpiTagContainer");
				}

				if (oState.alr_visualFilterBar) {
					oState.alr_visualFilterBar.setSmartFilterContext(this.oState.oSmartFilterbar);
					oState.alr_visualFilterBar.attachFilterChange(this._onVisualFilterChange.bind(this));
				}
				oState.oSmartFilterbar.attachAfterVariantLoad(this._afterVariantLoad.bind(this));
			},
			_updateFilterLink: function () {
				 var oFilterData = this.oState.oSmartFilterbar.getFilterData(),
				 oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				 oTemplatePrivate.setProperty('/alp/filtersLink', oFilterData);
			},
			/**
			 * Filter bar callback after variant load
			 *
			 * @returns {void}
			 * @private
			 */
			_afterVariantLoad : function (oEvent) {
				if (this.oState.alr_visualFilterBar) {
					this.oState.alr_visualFilterBar.updateVisualFilterBindings(true);
				}
				//in live mode manually trigger search after setting filterData to the compactFilter
				if (this.oState.oSmartFilterbar.isLiveMode() && oEvent.mParameters.context != "INIT") {
					// call search
					this.oState.oSmartFilterbar.search();
				}
			},
			/**
			 * Callback for visual filter change event
			 *
			 * @param {object} oEvent - object generated by the visual filter filterChange event
			 * @returns {void}
			 * @private
			 */
			 _onVisualFilterChange : function (oEvent) {
				var oFilterModel = this.oState.oController.getOwnerComponent().getModel("_filter"),
				oFilterModelData = oFilterModel.getData();
				//check for added or removed filteritems in VFD
				if (oEvent.getParameter('propertyName') && oEvent.getParameter('bVisible') !== undefined) {
					var oFilterItem = this.oState.oSmartFilterbar.determineFilterItemByName(oEvent.getParameter('propertyName'));
					if (oEvent.getParameter('bVisible')) {
						//setting corresponding filterItem visible/hidden in compact filter bar and dialog
						if (!oFilterItem.getPartOfCurrentVariant()) {
							oFilterItem.setPartOfCurrentVariant(true);
							oFilterItem.setVisibleInFilterBar(true);
						}
					} else {
						oFilterItem.setPartOfCurrentVariant(false);
						oFilterItem.setVisibleInFilterBar(false);
					}
				}
				this.oState.oSmartFilterbar.setFilterData(oFilterModelData, true);
				//in live mode manually trigger search after setting filterData to the compactFilter
				if (this.oState.oSmartFilterbar.isLiveMode()) {
					this.oState.oSmartFilterbar.search();
				}
			},
			//go button search event handler
			onGoFilter: function(){
				this.oState.oSmartFilterbar.search();
			},
			setDefaultFilter:function(mode) {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivate.setProperty('/alp/filterMode', mode);
				this.handleFilterSwitch(mode); // Don't want to trigger a mode change event, this will cause the data to be reloaded too earlier, the reload will happen when variants are processed
			},
			/**
			 * press handler for filter switch button
			 *
			 * @param {string} mode - compact or visual
			 * @param {boolean} bApplyingVariant - true is variant is being applied
			 *
			 * @returns {void}
			 */
			handleFilterSwitch:function(mode, bApplyingVariant) {
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");

				if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
					this.fnCheckMandatory();
				}
			},
			// If filter mode is visual and if mandatory fields/params are not filled launch CompactFilter Dialog.
			fnCheckMandatory: function(){
				this.oState.oSmartFilterbar.checkSearchAllowed(this.oState);
				var oTemplatePrivate = this.oState.oController.getOwnerComponent().getModel("_templPriv");
				if (!oTemplatePrivate.getProperty('/alp/searchable')) {
					this.oState.oSmartFilterbar.showFilterDialog();
				}
			},
			//check the filter mode and then show the corresponding filter dialog
			showDialog: function(){
				this.oState.oSmartFilterbar.showFilterDialog();
			},
			clearFilters:function(){
				var oFilterData = this.oState.oSmartFilterbar.getFilterData();
				for (var prop in oFilterData) {
					if (oFilterData.hasOwnProperty( prop ) ) {
						delete oFilterData[prop];
					}
				}
				this.oState.oSmartFilterbar.setFilterData(oFilterData, true);
				//clear the table selections
				if (this.oState.chartController) {
					this.oState.chartController.updateTable();
				}
			},
			/*
			* @public
			* Function to update shownInFilterBar/shownInFilterDialog according to visibility of filteritems/checkbox selection in CFD
			* @param {object} oEvent - Event object that containes thee filterItem whose visibility has been changed and added/deleted object
			*/
			changeVisibility: function(oEvent) {
				var oFilterItem = oEvent.getParameters().filterItem.filterItem,
				bVisible = oEvent.getParameters().added ? true : false,
				aFilterItemList = this.oState.alr_visualFilterBar.getModel('_visualFilterConfigModel').getData().filterCompList,
				oVisualFilterDialogContainer = this.oState.visualFilterDialogContainer;
				for (var i = 0; i < aFilterItemList.length; i++) {
					if (oFilterItem && oFilterItem.getName() === aFilterItemList[i].component.properties.parentProperty) {
					//Updating the properties shownInFilterBar and shownInFilterDialog to be in sync with CompactFilter
					//Update in filterCompList and _visualFilterConfigModel
						//Update shownInFilterDialog
						oVisualFilterDialogContainer.oConfig.filterCompList[i].shownInFilterDialog = bVisible;
						oVisualFilterDialogContainer.oConfig.filterCompList[i].shownInFilterBar = bVisible;
						oVisualFilterDialogContainer._updateVisualFilterConfigModel(i, '/shownInFilterDialog', bVisible);
						//For the checkbox in the chart toolbar in VFD
						//Update shownInFilterBar
						oVisualFilterDialogContainer.selectCheckBox(i, bVisible);
						break;
					}
				}
				oVisualFilterDialogContainer._reloadForm();
			}
		});
		return fbController;
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.Canvas.controller.ControllerImplementation') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.Canvas.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/Canvas/controller/ControllerImplementation",["jquery.sap.global", "sap/suite/ui/generic/template/detailTemplates/detailUtils", "sap/suite/ui/generic/template/Canvas/extensionAPI/ExtensionAPI"],
	function(jQuery, detailUtils, ExtensionAPI) {
		"use strict";

		return {
			getMethods: function(oViewProxy, oTemplateUtils, oController) {
				
				var oBase = detailUtils.getControllerBase(oViewProxy, oTemplateUtils, oController);
				// Generation of Event Handlers
				var oControllerImplementation = {
					onInit: function() {
						var oComponent = oController.getOwnerComponent();
						var oRequiredControls = oComponent.getRequiredControls();
						oBase.onInit(oRequiredControls);
					},

					handlers: {

					},

					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oBase)
				};
				
				oControllerImplementation.handlers = jQuery.extend(oBase.handlers, oControllerImplementation.handlers);
				oViewProxy.onComponentActivate = oBase.onComponentActivate;
					
				return oControllerImplementation;
			}
		};
	});
}; // end of sap/suite/ui/generic/template/Canvas/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/ListReport/controller/ControllerImplementation"
], function(TemplateAssembler, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy = {};

		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					getVisibleSelectionsWithDefaults: function() {
						// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
						// (see method setSmartFilterBarDefaults) and which are currently visible.
						// This is needed by _getBackNavigationParameters in the NavigationController.
						var aVisibleFields = [];
							// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
						// aVisibleFields.push("KeyDate");
						// }
						return aVisibleFields;
					},

					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onInitSmartFilterBarExtension: function(oEvent) {},
					getCustomAppStateDataExtension: function(oCustomData) {},
					restoreCustomAppStateDataExtension: function(oCustomData) {},
					onBeforeRebindTableExtension: function(oEvent) {},
					onBeforeRebindChartExtension: function(oEvent) {},
					adaptNavigationParameterExtension: function(oSelectionVariant, oObjectInfo) {},
					onListNavigationExtension: function(oEvent) {}
				}
			},
			init: function() {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				oTemplatePrivate.setProperty("/listReport", {}); // Note that component properties are not yet available here
			},
			onActivate: function() {
				oComponentUtils.setBackNavigation(undefined);
				oViewProxy.onComponentActivate();
			},
			refreshBinding: function(bUnconditional) {
				oViewProxy.refreshBinding();
			},
			getUrlParameterInfo: function() {
				return oViewProxy.getUrlParameterInfo();
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.ListReport", {
			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.ListReport.view.ListReport"
					},
					// hide chevron for unauthorized inline external navigation?
					"hideChevronForUnauthorizedExtNav": {
						"type": "boolean",
						"defaultValue": "false"
					},
					"treeTable": "boolean",
					"tableType": "string",
					"gridTable": "boolean",
					"condensedTableLayout": "boolean",
					"multiSelect": "boolean",
					"smartVariantManagement": "boolean",      // true = one variant for filter bar and table, false = separate variants for filter and table
					"hideTableVariantManagement": "boolean",
					"variantManagementHidden": "boolean",
					"creationEntitySet": "string",
					"isWorklist": "boolean"
				},
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
sap.ui
	.define("sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation",
		["jquery.sap.global", "sap/ui/core/format/DateFormat",
			"sap/m/MessageBox", "sap/m/MessageToast", "sap/ui/model/Filter", "sap/ui/model/Sorter",
			"sap/ui/table/AnalyticalTable", "sap/ui/comp/smarttable/SmartTable", "sap/ui/generic/app/navigation/service/SelectionVariant",
			"sap/suite/ui/generic/template/lib/testableHelper", "sap/suite/ui/generic/template/detailTemplates/detailUtils",
			"sap/suite/ui/generic/template/ObjectPage/extensionAPI/ExtensionAPI", "sap/ui/model/json/JSONModel","sap/suite/ui/generic/template/js/AnnotationHelper", "sap/ui/core/mvc/ViewType", "sap/ui/table/Table", "sap/m/Table"
		],
		function(jQuery, DateFormat, MessageBox, MessageToast, Filter, Sorter,
			AnalyticalTable, SmartTable, SelectionVariant, testableHelper, detailUtils, ExtensionAPI, JSONModel, AnnotationHelper, ViewType, UiTable, ResponsiveTable) {
			"use strict";
			function fnIsEventForTableWithInlineCreate(oSmartTable){
				return oSmartTable.data("inlineCreate") === "true";
			}
			
			// helper functions for setting sections to lazy loading
			function isCustomDataLazyLoading(oCustomData){
				return oCustomData.getProperty("key") === "enableLazyLoading" && oCustomData.getProperty("value") === "true";	
			}
					
			function fnLazyLoadSubsection(oSubSection){
				if (oSubSection.getCustomData().some(isCustomDataLazyLoading)){
					oSubSection.setBindingContext(null); // passing null causes the sub section to decouple from data loading
				}						
			}
					
			function fnLazyLoadSection(oSection){
				oSection.getSubSections().forEach(fnLazyLoadSubsection);	
			}
			// end of helper functions for setting sections to lazy loading
			
			return {
				getMethods: function(oViewProxy, oTemplateUtils, oController) {
					var oBase = detailUtils.getControllerBase(oViewProxy, oTemplateUtils, oController);
					oBase.state.aUnsavedDataCheckFunctions = []; //array for external unsaved data check functions that can be registered
					var bIsObjectRoot; // will currently be set first time, when edit button is pressed
					var oObjectPage;  // the object page, initialized in onInit
					
					function onActivateImpl() {
						if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
							jQuery.sap.log.info("Activation of object suppressed, since App is currently busy");
							return; // this is again tested by the CRUDManager. But in order to suppress the AfterActivate-Event in the busy case we also need to check this here.
						}
						jQuery.sap.log.info("Activate object");
						var oActivationPromise = oTemplateUtils.oServices.oCRUDManager.activateDraftEntity();
						oActivationPromise.then(function(oResponse) {
							oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED"));
							if (oResponse && oResponse.context) {
								// it's not enough to set root to dirty: Scenario: subitem has been displayed (active document), then changed (draft) and shall be
								// displayed again after activation - now data has to be read again
								// therefore we set all pages to dirty, excluding the current one (here the active data is already returned by the function import)
								oTemplateUtils.oServices.oViewDependencyHelper.setAllPagesDirty([oController.getOwnerComponent().getId()]);
								oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
								// navigate to activate document
								oTemplateUtils.oServices.oNavigationController.navigateToContext(
									oResponse.context, undefined, true);
							}
						});
						var oEvent = {
							activationPromise: oActivationPromise
						};
						oTemplateUtils.oComponentUtils.fire(oController, "AfterActivate", oEvent);
					}
					
					function onActivate(){
						oTemplateUtils.oServices.oApplication.performAfterSideEffectExecution(onActivateImpl);                         	
					}
					
					function fnAdaptBindingParamsForInlineCreate(oEvent) {
						if (fnIsEventForTableWithInlineCreate(oEvent.getSource())) {
							var oBindingParams = oEvent.getParameter("bindingParams");
							if (oBindingParams.filters && oBindingParams.filters.length) {
								/*
								 * Add a new filter condition to always show all items that are just created. In case we are in a draft,
								 * that just means to add "or HasActiveEntity = false". For active documents however, that condition
								 * would always be true. Thus, we have to add 
								 * "or (HasActiveEntity = false and IsActiveEntity = false)". 
								 * However, this condition is not evaluated correctly by gateway, so we have to transform it to
								 * (IsActvieEntity = true and x) or (Is ActvieEntity = false and (x or HasActvieEntity = false)), 
								 * where x is the condition provided by the user
								 */
								var oUserFilter = new Filter(oBindingParams.filters);
								oBindingParams.filters = new Filter({
									filters: [new Filter({
										filters: [new Filter({
											path: "IsActiveEntity",
											operator: "EQ",
											value1: true
										}), oUserFilter],
										and: true
									}), new Filter({
										filters: [new Filter({
											path: "IsActiveEntity",
											operator: "EQ",
											value1: false
										}), new Filter({
											filters: [oUserFilter, new Filter({
												path: "HasActiveEntity",
												operator: "EQ",
												value1: false
											})],
											and: false
										})],
										and: true
									})],
									and: false
								});
							}
							var fnGroup = oBindingParams.sorter[0] && oBindingParams.sorter[0].getGroupFunction();
							var fnGroupExtended = fnGroup && function(oContext){
								var oObject = oContext.getObject();
								if (oObject.IsActiveEntity || oObject.HasActiveEntity){
									var oRet =  jQuery.extend({}, fnGroup(oContext));
									oRet.key = oRet.key.charAt(0) === "§" ? "§" + oRet.key : oRet.key;
									return oRet;
								}
								return {
									key: "§",
									text: oTemplateUtils.oCommonUtils.getText("NEW_ENTRY_GROUP")
								};
							};
							oBindingParams.sorter.unshift(new Sorter("HasActiveEntity", false, fnGroupExtended));
						}
					}
					function fnOnShareObjectPageEmailPress(sObjectTitle, sObjectSubtitle) {
						var sEmailSubject = sObjectTitle;
						if (sObjectSubtitle) {
							sEmailSubject = sEmailSubject + " - " + sObjectSubtitle;
						}
						var emailBody = document.URL;
						if ((emailBody.indexOf("(") == 0)) {
							emailBody = "%28" + emailBody.slice(1, emailBody.length);
						}
						if ((emailBody.lastIndexOf(")") == (emailBody.length - 1))) {
							emailBody = emailBody.slice(0, (emailBody.length - 1)) + "%29";
						}
						sap.m.URLHelper.triggerEmail(null, sEmailSubject, emailBody);
					}
					function fnOnShareObjectPageInJamPress(sObjectTitle, sObjectSubtitle) {
						var oShareDialog = sap.ui.getCore().createComponent({
							name: "sap.collaboration.components.fiori.sharing.dialog",
							settings: {
								object: {
									id: document.URL,
									share: sObjectTitle + " " + sObjectSubtitle
								}
							}
						});
						oShareDialog.open();
					}

					function getObjectHeader() {
						return oObjectPage.getHeaderTitle();
					}

					function onShareObjectPageActionButtonPress(oEvent) {
						var oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.fragments.ShareSheet", {
								shareEmailPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageEmailPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								},
								shareJamPressed: function() {
									var oShareModel = oShareActionSheet.getModel("share");
									fnOnShareObjectPageInJamPress(oShareModel.getProperty("/objectTitle"), oShareModel
										.getProperty("/objectSubtitle"));
								}
							}, "share", function(oFragment, oShareModel) {
								var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
								oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
								oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
								oShareModel
									.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
								var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
								oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
							});
						var oShareModel = oShareActionSheet.getModel("share");
						var oObjectHeader = getObjectHeader();
						oShareModel.setProperty("/objectTitle", oObjectHeader.getProperty("objectTitle"));
						oShareModel.setProperty("/objectSubtitle", oObjectHeader.getProperty("objectSubtitle"));
						oShareModel.setProperty("/bookmarkCustomUrl", document.URL);
						oShareActionSheet.openBy(oEvent.getSource());
					}

					function getRelatedAppsSheet() {
						var oRelatedAppsSheet = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.RelatedAppsSheet", {
								buttonPressed: function(oEvent) {
									var oButton = oEvent.getSource();
									var oButtonsContext = oButton.getBindingContext("buttons");
									var oLink = oButtonsContext.getProperty("link");
									var oParam = oButtonsContext.getProperty("param");
									var str = oLink.intent;
									var sSemanticObject = str.split('#')[1].split('-')[0];
									var sAction = str.split('-')[1].split('?')[0].split('~')[0];
									var oNavArguments = {
										target: {
											semanticObject: sSemanticObject,
											action: sAction
										},
										params: oParam
									};
								//Extension point to remove properties from link for external navigation will be NOT supported for related apps
									sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
								}
							}, "buttons");
						return oRelatedAppsSheet;
					}

					function onDeleteImpl() {
						var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
						if (oBusyHelper.isBusy()){
							return;
						}
						var oComponent = oController.getOwnerComponent();
						var sNavigationProperty = oComponent.getNavigationProperty();
						var oUtils = oTemplateUtils.oCommonUtils;
						var oPageHeader = oController.byId("objectPageHeader");
						var sMessageText, aParams;
						if (oPageHeader.getProperty("objectTitle") !== "") {
							if (oPageHeader.getProperty("objectSubtitle") !== "") {
								aParams = [" ", oPageHeader.getProperty("objectTitle").trim(), oPageHeader.getProperty("objectSubtitle")];
								sMessageText = oUtils.getText("DELETE_WITH_OBJECTINFO", aParams);
							} else {
								aParams = [oPageHeader.getProperty("objectTitle").trim()];
								sMessageText = oUtils.getText("DELETE_WITH_OBJECTTITLE", aParams);
							}
						} else {
							sMessageText = oUtils.getText("ST_GENERIC_DELETE_SELECTED");
						}
						
						// If the Object is deleted and we have to display the next item in the second column
						var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
						var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
						var oFCLProxy = oTemplateUtils.oServices.oApplication.getFclProxyForView(iViewLevel);						
						if (iViewLevel === 1 && oFCLProxy.isNextObjectLoadedAfterDelete()){
							var oTable = oTemplateUtils.oServices.oApplication.getListReportTable();
							oFCLProxy.storeTableToShowObjectPageAfterDelete(oTable, oComponent.getBindingContext() && oComponent.getBindingContext().getPath());
						}

						MessageBox.show(sMessageText, {
							icon: MessageBox.Icon.WARNING,
							styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass(),
							title: oUtils.getText("DELETE"),
							actions: [MessageBox.Action.DELETE, MessageBox.Action.CANCEL],
							onClose: function(oAction) {
								if (oAction === MessageBox.Action.DELETE) {
									var oDeleteEntityPromise = oTemplateUtils.oServices.oCRUDManager.deleteEntity();
									oDeleteEntityPromise.then(function() {
										oTemplateUtils.oServices.oViewDependencyHelper.setParentToDirty(oComponent, sNavigationProperty, 1);
										oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oComponent, true);

										// document was deleted, go back to previous page
										if (!oFCLProxy.supressNavigationUpAfterDeletion()){
											oViewProxy.navigateUp();
										}
									});
									var oEvent = {
										deleteEntityPromise: oDeleteEntityPromise
									};
									oBusyHelper.setBusy(oDeleteEntityPromise);
									oTemplateUtils.oComponentUtils.fire(oController, "AfterDelete", oEvent);
								}
							}
						});
					}
					
					function onDelete(oEvent) {
						oTemplateUtils.oServices.oApplication.performAfterSideEffectExecution(onDeleteImpl);
					}
					
					// This method is called when editing of an entity has started and the corresponding context is available
					function fnStartEditing(oResult){
						var oDraft, oContext;
						if (oResult) {
							oContext = oResult.context || oResult;
							if (oTemplateUtils.oServices.oDraftController.getDraftContext().hasDraft(oContext)) {
								oTemplateUtils.oServices.oViewDependencyHelper.setRootPageToDirty();
								oDraft = oResult.context && oResult.context.context || oResult.context || oResult;
							}
						}
						if (oDraft) {
							// navigate to draft
							if (oBase.fclInfo.navigteToDraft) {
								oBase.fclInfo.navigteToDraft(oDraft);
							} else {
								oTemplateUtils.oServices.oNavigationController.navigateToContext(oDraft, undefined, true, 2);
							}
						} else {
							var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
							oTemplatePrivateModel.setProperty("/objectPage/displayMode", 2);
						}
						//set Editable independent of the fact that the instance is a draft or not
						oViewProxy.setEditable(true);
					}

					var fnExpiredLockDialog;  // declare function already here, to avoid usage before declaration
					// This method is called when the user decides to edit an entity.
					// Parameter bUnconditional contains the information, whether the user has already confirmed to take over unsaved changes of another user, or whether this is still open
					function fnEditEntity(bUnconditional) {
						oTemplateUtils.oServices.oCRUDManager.editEntity(bUnconditional).then(function(oEditInfo){
							if (oEditInfo.draftAdministrativeData){
								fnExpiredLockDialog(oEditInfo.draftAdministrativeData.CreatedByUserDescription || oEditInfo.draftAdministrativeData.CreatedByUser);
							} else {
								fnStartEditing(oEditInfo.context);
							}
						});
					}

					// This method is called when the user wants to edit an entity, for which a non-locking draft of another user exists.
					// The method asks the user, whether he wants to continue editing anyway. If this is the case editing is triggered.
					// sCreatedByUser is the name of the user possessing the non-locking draft
					fnExpiredLockDialog = function(sCreatedByUser) {
						var oUnsavedChangesDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.UnsavedChangesDialog", {
								onEdit: function() {
									oUnsavedChangesDialog.close();
									fnEditEntity(true);
								},
								onCancel: function() {
									oUnsavedChangesDialog.close();
								}
							}, "Dialog");
						var oDialogModel = oUnsavedChangesDialog.getModel("Dialog");
						var sDialogContentText = oTemplateUtils.oCommonUtils.getText("DRAFT_LOCK_EXPIRED", [sCreatedByUser]);
						oDialogModel.setProperty("/unsavedChangesQuestion", sDialogContentText);
						oUnsavedChangesDialog.open();
					};

					var sDefaultObjectTitleForCreated; // instantiated on demand

					function getDefaultObjectTitleForCreated() {
						sDefaultObjectTitleForCreated = sDefaultObjectTitleForCreated || oTemplateUtils.oCommonUtils.getText("NEW_OBJECT");
						return sDefaultObjectTitleForCreated;
					}

					function fnRefreshBlock(mRefreshInfos, bForceRefresh, oBlock){
						if (!oBlock.getContent){ // dummy-blocks need not to be refreshed
							return;
						}
						oBlock.getContent().forEach(function (oContent) {
							if (oContent instanceof SmartTable) {
								if (bForceRefresh || mRefreshInfos[oContent.getTableBindingPath()]) {
									if (oContent.isInitialised()){
										oTemplateUtils.oCommonUtils.refreshSmartTable(oContent);
									} else {
										oContent.attachInitialise(function(){
											oTemplateUtils.oCommonUtils.refreshSmartTable(oContent);
										});
									}

									if (!bForceRefresh) {
										oTemplateUtils.oServices.oApplicationController.executeSideEffects(oController.getOwnerComponent().getBindingContext(), [], [oContent.getTableBindingPath()]);
									}
								}
							}
						});
					}

					function setLockButtonVisible(bVisible) {
						var oLockButton = sap.ui.getCore().byId(getObjectHeader().getId() + "-lock");
						oLockButton.setVisible(bVisible);
					}

					function getSelectionVariant() {
						// oTemplateUtils, oController
						// if there is no selection we pass an empty one with the important escaping of ", passing "" or
						// null...was not possible
						// "{\"SelectionVariantID\":\"\"}";
						var sResult = "{\"SelectionVariantID\":\"\"}";

						/*
						 * rules don't follow 1:1 association, only header entity type fields don't send fields with empty
						 * values also send not visible fields remove Ux fields (e.g. UxFcBankStatementDate) send all kinds of
						 * types String, Boolean, ... but stringify all types
						 */

						var oComponent = oController.getOwnerComponent();
						var sEntitySet = oComponent.getEntitySet();
						var model = oComponent.getModel();
						var oMetaModel = model.getMetaModel();
						var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
						var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
						var aAllFieldsMetaModel = oEntityType.property;

						//collect the names of attributes to be deleted 
						//objects with existing sap:field-control -> mapped to com.sap.vocabularies.Common.v1.FieldControl attribute
						//e.g. ProductForEdit_fc field control fields shouldn't be transferred
						var aFieldsToBeIgnored = [];
						for (var x in aAllFieldsMetaModel) {
							var controlname = aAllFieldsMetaModel[x]["com.sap.vocabularies.Common.v1.FieldControl"] &&
								aAllFieldsMetaModel[x]["com.sap.vocabularies.Common.v1.FieldControl"].Path;
							if (controlname && aFieldsToBeIgnored.indexOf(controlname) < 0) {
								aFieldsToBeIgnored.push(controlname);
							}
						}

						var context = oController.getView().getBindingContext();
						var object = context.getObject();

						var oSelectionVariant = new SelectionVariant();
						for (var i in aAllFieldsMetaModel) {
							var type = aAllFieldsMetaModel[i].type;
							var name = aAllFieldsMetaModel[i].name;
							var value = object[aAllFieldsMetaModel[i].name];

							if (aFieldsToBeIgnored.indexOf(name) > -1) {
								continue;
							}

							if (name && (value || type === "Edm.Boolean")) { // also if boolean is false this must be sent
								if (type === "Edm.Time" && value.ms !== undefined) { // in case of Time an object is returned
									value = value.ms;
								}
								if (typeof value !== "string") {
									try {
										value = value.toString();
									} catch (e) {
										value = value + "";
									}
								}
								oSelectionVariant.addParameter(name, value);
							}
						}

						sResult = oSelectionVariant.toJSONString();
						return sResult;
					}

					function fnIsEntryDeletable(oContext, oSmartTable) {
						var bDeletable = true;
						var oModel = oSmartTable.getModel();
						var oDeleteRestrictions = oTemplateUtils.oCommonUtils.getDeleteRestrictions(oSmartTable);
						var sDeletablePath = oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path;
						if (sDeletablePath) {
							 bDeletable = oModel.getProperty(sDeletablePath, oContext);
						}
						return bDeletable;
					}
					
					function fnDeleteEntries(oEvent){
						var oBusyHelper = oTemplateUtils.oServices.oApplication.getBusyHelper();
						if (oBusyHelper.isBusy()){
							return; // this is again tested by the CRUDManager. But in order to suppress the check for selected lines in the busy case we also need to check this here.
						}
						var oEventSource = oEvent.getSource();
						var oSmartTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
						var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oSmartTable);
						if (aContexts.length === 0){
							MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
								styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
							});
							return;
						}
						var aPath = [];
						var aNonDeletableContext = [];
						for (var i = 0; i < aContexts.length; i++){
							// check if item is deletable
							if (fnIsEntryDeletable(aContexts[i], oSmartTable)) {
							aPath.push(aContexts[i].getPath());
							} else {
								aNonDeletableContext.push(aContexts[i]);
							}
						}
						if (aNonDeletableContext.length > 0) {
							MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_DELETE_UNDELETABLE_SUBITEMS", [aNonDeletableContext.length, aContexts.length]), {
								styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
							});
						}
						
						var oDeletePromise = oTemplateUtils.oServices.oCRUDManager.deleteEntities(aPath);
						oBusyHelper.setBusy(oDeletePromise);
						oTemplateUtils.oServices.oApplicationController.executeSideEffects(oSmartTable.getBindingContext(), [], [oSmartTable.getTableBindingPath()]);

						oDeletePromise.then(function() {
							oTemplateUtils.oServices.oViewDependencyHelper.unbindChildren(oController.getOwnerComponent());
							oTemplateUtils.oCommonUtils.refreshSmartTable(oSmartTable);
						});
					}

					function getImageDialog() {
						var oImageDialog = oController.byId("imageDialog") || oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.ImageDialog", {
								onImageDialogClose: function() {
									oImageDialog.close();
								}
							}, "headerImage");

						return oImageDialog;
					}
					
					// Begin: Filling the viewProxy with functions provided for the TemplateComponent to be called on the view
					
					
					oViewProxy.refreshFacets = function(mRefreshInfos, bForceRefresh) {
						var fnMyRefreshBlock = fnRefreshBlock.bind(null, mRefreshInfos, bForceRefresh);
						var fnRefreshSubSection = function(oSubSection){
							oSubSection.getBlocks().forEach(fnMyRefreshBlock);
							oSubSection.getMoreBlocks().forEach(fnMyRefreshBlock);							
						};
						oObjectPage.getSections().forEach(function(oSection){
							oSection.getSubSections().forEach(fnRefreshSubSection);
						});
					};
					
					oViewProxy.getHeaderInfoTitleForNavigationMenue = function(){
						var oPageHeader = oController.byId("objectPageHeader");
						var sTitle = oPageHeader.getProperty("objectTitle");
						
						var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
						var iViewLevel = oTemplatePrivateModel.getProperty("/generic/viewLevel");
						
						oTemplateUtils.oServices.oApplication.subTitleForViewLevelChanged(iViewLevel, sTitle);
					};
					
					oViewProxy.onComponentActivate = oBase.onComponentActivate;
					
					//Function is called if there is a draft document and the user navigate via bookmark to the active document
					oViewProxy.draftResume = function(oSiblingContext, oActiveEntity, oDraftAdministrativeData) {
						var oSiblingEntity = oSiblingContext.getObject();
						if (!oSiblingEntity || !oSiblingEntity.hasOwnProperty("IsActiveEntity") || oSiblingEntity.IsActiveEntity !== false) {
							return;
						}

						var oModel = oController.getView().getModel();
						var oMetaModel = oModel.getMetaModel();
						var oModelEntitySet = oMetaModel.getODataEntitySet(oController.getOwnerComponent().getEntitySet());
						var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);

						var sType = "";
						var sObjectKey = "";
						var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
						for (var i in aSemKey) {
							var oPropertyRef = aSemKey[i];
							if (sObjectKey === "") {
								sObjectKey = oActiveEntity[oPropertyRef.PropertyPath];
							} else {
								sObjectKey = sObjectKey + "-" + oActiveEntity[oPropertyRef.PropertyPath];
							}
						}

						var sChangedAt = "-";
						if (oDraftAdministrativeData && oDraftAdministrativeData.LastChangeDateTime !== null) {
							var oDateFormatter = DateFormat.getDateTimeInstance({
								pattern: "MMMM d, yyyy HH:mm",
								style: "long"
							});
							sChangedAt = oDateFormatter.format(oDraftAdministrativeData.LastChangeDateTime);
						}

						var aParams = [sType, sObjectKey, sChangedAt];
						var sDraftFoundText = oTemplateUtils.oCommonUtils.getText("DRAFT_FOUND_RESUME", aParams);

						var oDialogModel;
						var oResumeDialog = oTemplateUtils.oCommonUtils.getDialogFragment(
							"sap.suite.ui.generic.template.ObjectPage.view.fragments.DraftResumeDialog", {
								onDraftResume: function() {
									oResumeDialog.close();
									// Do not use variable oSiblingContext directly, because this will always be the instance used
									// at the first use of this fragment!
									oTemplateUtils.oServices.oNavigationController.navigateToContext(
										oDialogModel.getProperty("/siblingContext"), null, true);
								},
								onDraftDiscard: function() {
									oResumeDialog.close();
									// enable the buttons
									oController.getView().getModel("ui").setProperty("/enabled", true);
									// delete the draft node
									oTemplateUtils.oServices.oCRUDManager.deleteEntity(true);
									setLockButtonVisible(false);
									// Do not use variable oActiveEntity directly, because this will always be the instance used at
									// the first use of this fragment!
									oDialogModel.getProperty("/activeEntity").HasDraftEntity = false;
									// refresh the nodes
									oTemplateUtils.oServices.oViewDependencyHelper.setAllPagesDirty();
								},
								onResumeDialogClosed: function() {
									// support garbage collection
									oDialogModel.setProperty("/siblingContext", null);
									oDialogModel.setProperty("/activeEntity", null);
								}
							}, "Dialog");
						oDialogModel = oResumeDialog.getModel("Dialog");
						oDialogModel.setProperty("/draftResumeText", sDraftFoundText);
						oDialogModel.setProperty("/siblingContext", oSiblingContext);
						oDialogModel.setProperty("/activeEntity", oActiveEntity);
						oResumeDialog.open();
					};
					
					oViewProxy.beforeRebind = function(){
						oObjectPage.getSections().forEach(fnLazyLoadSection);
					};

					oViewProxy.afterRebind = function(){
						oObjectPage._triggerVisibleSubSectionsEvents();
					};
					
					// End: Filling the viewProxy with functions provided for the TemplateComponent to be called on the view.
					// Note that one last member is added to the viewProxy in onInit, since it is only available at this point in time.

					// Expose selected private functions to unit tests
					/* eslint-disable */
					var fnEditEntity = testableHelper.testable(fnEditEntity, "editEntity");
					var fnIsEntryDeletable = testableHelper.testable(fnIsEntryDeletable, "isEntryDeletable");
					/* eslint-enable */
					
					// Generation of Event Handlers
					var oControllerImplementation = {
						onInit: function() {
							oObjectPage = oController.byId("objectPage");													// there's at least one section left - create / bind breadcrumbs
							var oTitle = getObjectHeader();
							oViewProxy.aBreadCrumbs = oTitle && oTitle.getBreadCrumbsLinks();
							oBase.onInit();
							oTemplateUtils.oCommonUtils.executeGlobalSideEffect();
							oObjectPage.attachEvent("subSectionEnteredViewPort", function(oEvent) {
								var oSubSection = oEvent.getParameter("subSection");
								if (oSubSection) {
									var oHeaderDataAvailablePromise = oTemplateUtils.oComponentUtils.getHeaderDataAvailablePromise() || Promise.resolve();
									oHeaderDataAvailablePromise.then(function(){
										oSubSection.setBindingContext(); // passing no parameter (i.e. undefined) causes the sub section to load data again
									});
								}
							});
						},

						handlers: {
							addEntry: function(oEvent) {
								var oEventSource = oEvent.getSource();
								var oSmartTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
								var bSuppressNavigation = fnIsEventForTableWithInlineCreate(oSmartTable);

								if (!oEventSource.data("CrossNavigation") && bSuppressNavigation) {
									oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, true);
									return;
								}
								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
									oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false);
								}, jQuery.noop, oBase.state);
							},

							deleteEntries: fnDeleteEntries,

							onSelectionChange: function(oEvent) {
								oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oEvent.getSource());
							},

							//Cancel event is only triggered in non-draft scenario. For draft see onDiscardDraft
							// oEvent is passed to attach the DiscardPopover on Cancel button in case of NonDraft Applications
							onCancel: function(oEvent) {
								var sMode = "Proceed";
								var bNoBusyCheck; // Passed to processDataLossConfirmationIfNonDraft along with oEvent 
								if (oTemplateUtils.oComponentUtils.isNonDraftCreate() || !bIsObjectRoot){
									sMode = "LeavePage";
								}
								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
									var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
									oTemplatePrivateModel.setProperty("/objectPage/displayMode", 1);
									if (oTemplateUtils.oComponentUtils.isNonDraftCreate()) {
										oViewProxy.setEditable(false);
									} else if (bIsObjectRoot){
										oViewProxy.setEditable(false);
									}
									if (oTemplateUtils.oComponentUtils.isNonDraftCreate() || !bIsObjectRoot) {
										oTemplateUtils.oServices.oNavigationController.navigateBack();
									}
								}, jQuery.noop, oBase.state, sMode, bNoBusyCheck, oEvent);
							},

							onContactDetails: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
							},
							onPressDraftInfo: function(oEvent) {
								var oBindingContext = oController.getView().getBindingContext();
								var oLockButton = sap.ui.getCore().byId(
									oEvent.getSource().getId() + (oEvent.getId() === "markChangesPress" ? "-changes" : "-lock"));

								oTemplateUtils.oCommonUtils.showDraftPopover(oBindingContext, oLockButton);
							},
							onShareObjectPageActionButtonPress: onShareObjectPageActionButtonPress,
							onRelatedApps: function(oEvent) {
								var oButton, oURLParsing, oParsedUrl, oViewBindingContext, oAppComponent, oXApplNavigation, oLinksDeferred;
								var oActionSheet, oButtonsModel, oUshellContainer, sCurrentSemObj, sCurrentAction;
								oButton = oEvent.getSource();
								oUshellContainer = sap.ushell && sap.ushell.Container;
								oURLParsing = oUshellContainer && oUshellContainer.getService("URLParsing");
								oParsedUrl = oURLParsing.parseShellHash(
									document.location.hash);
								sCurrentSemObj = oParsedUrl.semanticObject;
								sCurrentAction = oParsedUrl.action;
								oViewBindingContext = oController.getView && oController.getView().getBindingContext();

								var oMetaModel = oController.getOwnerComponent().getModel().getMetaModel();

								var oEntity = oViewBindingContext.getObject();
								var sEntityType = oEntity.__metadata.type;
								var oDataEntityType = oMetaModel.getODataEntityType(sEntityType);
								var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
								var oParam = {};
								// var oSemKeyParam = {};
								if (aSemKey && aSemKey.length > 0) {
									for (var j = 0; j < aSemKey.length; j++) {
										var sSemKey = aSemKey[j].PropertyPath;
										if (!oParam[sSemKey]) {
											oParam[sSemKey] = [];
											oParam[sSemKey].push(oEntity[sSemKey]);
										}
									}
								} else {
									// Fallback if no SemanticKey
									for (var k in oDataEntityType.key.propertyRef) {
										var sObjKey = oDataEntityType.key.propertyRef[k].name;
										if (!oParam[sObjKey]) {
											oParam[sObjKey] = [];
											oParam[sObjKey].push(oEntity[sObjKey]);
										}
									}
								}

								oAppComponent = oController.getOwnerComponent().getAppComponent();
								oXApplNavigation = oUshellContainer && oUshellContainer.getService("CrossApplicationNavigation");

								oLinksDeferred = oXApplNavigation.getLinks({
									semanticObject: sCurrentSemObj,
									params: oParam,
									ui5Component: oAppComponent
								});

								oActionSheet = getRelatedAppsSheet();
								oButtonsModel = oActionSheet.getModel("buttons");
								oButtonsModel.setProperty("/buttons", []);
								oActionSheet.openBy(oButton);
								oLinksDeferred
									.done(function(aLinks) {
										var aButtons = [];
										// Sorting the related app links alphabetically to align with Navigation Popover in List Report - BCP(1770251716)
										aLinks.sort(function(oLink1, oLink2){
											if (oLink1.text < oLink2.text) {
                                                                                          return -1;
                                                                                        }
											if (oLink1.text > oLink2.text) {
                                                                                          return 1;
                                                                                        }
											return 0;
										});
										// filter current semanticObject-action
										for (var i = 0; i < aLinks.length; i++) {
											var oLink = aLinks[i];
											var sIntent = oLink.intent;
											var sAction = sIntent.split("-")[1].split("?")[0];
											if (sAction !== sCurrentAction) {
												aButtons.push({
													enabled: true, // used in declarative binding
													text: oLink.text, // used in declarative binding
													link: oLink, // used by the event handler
													param: oParam
													// used by the event handler
												});
											}
										}
										if (aButtons.length === 0) {
											aButtons.push({
												enabled: false, // used in declarative binding
												text: oTemplateUtils.oCommonUtils.getText("NO_RELATED_APPS")
												// used in declarative binding
											});
										}
										oButtonsModel.setProperty("/buttons", aButtons);
									});
							},
							onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oBase.state);
							},

							onEdit: function(oEvent) {
								var oEventSource = oEvent.getSource();
								if (oEventSource.data("CrossNavigation")) {
									// intent based navigation
									oTemplateUtils.oCommonEventHandlers.onEditNavigateIntent(oEventSource);
									return;
								}
								bIsObjectRoot = true; // temporarily logic until we know how to decide this in onInit
								fnEditEntity();
							},
							// The event is only called in a non-draft scenario. For draft see onActivate
							onSave: function() {
								if (oTemplateUtils.oServices.oApplication.getBusyHelper().isBusy()){
									return; // this is again tested by the CRUDManager. But in order to suppress the AfterSave-Event in the busy case we also need to check this here.
								}
								var oCurrentContext = oController.getView().getBindingContext();
								var oPendingChanges =  oController.getView().getModel().getPendingChanges();
								oPendingChanges = oPendingChanges && oPendingChanges[oCurrentContext.getPath().replace("/", "")] || {};
								var aPendingChanges = Object.keys(oPendingChanges) || [];
								var bCreateMode = oTemplateUtils.oComponentUtils.isNonDraftCreate();
								/*	The OData model returns also a __metadata object with the canonical URL and further
									information. As we don't want to check if sideEffects are annotated for this
									property we remove it from the pending changes
								*/
								var iMetaDataIndex = aPendingChanges.indexOf("__metadata");
								if (iMetaDataIndex > -1){
									aPendingChanges.splice(iMetaDataIndex,1);
								}

								var oSaveEntityPromise = oTemplateUtils.oServices.oCRUDManager.saveEntity();
								oSaveEntityPromise.then(function(oContext) {
									var oTemplatePrivateModel = oTemplateUtils.oComponentUtils.getTemplatePrivateModel();
									oTemplatePrivateModel.setProperty("/objectPage/displayMode", 1);
									//	switch to display mode
									if (!oTemplateUtils.oComponentUtils.isDraftEnabled()) {
										oViewProxy.setEditable(false);
									} else if ( oTemplateUtils.oComponentUtils.isDraftEnabled() ) {
										oViewProxy.setEditable(false);
									}

									if (bCreateMode) {
										// in case of create mode navigate to new item
										if (oContext && oContext.getPath() !== "/undefined") {
											oTemplateUtils.oServices.oNavigationController.navigateToContext(oContext, undefined, true);
										} else {
											// fallback no context returned / correct path determined by transaction controller
											oViewProxy.setEditable(false);
											oTemplateUtils.oServices.oNavigationController.navigateBack();
										}
										oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_CREATED"));
									} else {
										oTemplateUtils.oServices.oApplication.showMessageToast(oTemplateUtils.oCommonUtils.getText("OBJECT_SAVED"));
										//for NON-Draft: navigate back after save if not root object
										if (!oTemplateUtils.oComponentUtils.isDraftEnabled() && !bIsObjectRoot) {
											oTemplateUtils.oServices.oNavigationController.navigateBack();
										}
									}
									if (aPendingChanges.length > 0){
										oTemplateUtils.oServices.oApplicationController.executeSideEffects(oCurrentContext, aPendingChanges);
									}
								});
								var oEvent = {
									saveEntityPromise: oSaveEntityPromise
								};
								oTemplateUtils.oComponentUtils.fire(oController, "AfterSave", oEvent);
							},
							onActivate: onActivate,
							onSmartFieldUrlPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oBase.state);
							},
							onBreadCrumbUrlPressed: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onBreadCrumbUrlPressed(oEvent, oBase.state);
							},
							onDiscardDraft: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDiscardDraft(oEvent);
							},
							onDelete: onDelete         ,
							onCallActionFromToolBar: function (oEvent) {
								oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oBase.state);
							},
							onCallAction: function(oEvent) {
								var oComponent = oController.getOwnerComponent();
								var sNavigationProperty = oComponent.getNavigationProperty();
								var oCustomData = oTemplateUtils.oCommonUtils.getCustomData(oEvent);
								var aContext = [];
								aContext.push(oController.getView().getBindingContext());
								if (aContext[0] && oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
									//var oEventSource = oEvent.getSource();
									oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function() {
										var mParameters = {
											functionImportPath: oCustomData.Action,
											contexts: aContext,
											sourceControl: "",
											label: oCustomData.Label,
											operationGrouping: oCustomData.InvocationGrouping,
											navigationProperty: oController.getOwnerComponent().getNavigationProperty()
										};
										oTemplateUtils.oServices.oCRUDManager.callAction(mParameters).then(function(aResponses){
											var oResponse = aResponses && aResponses[0];
											if (oResponse && oResponse.response && oResponse.response.context && (!oResponse.actionContext || oResponse.actionContext && oResponse.response.context.getPath() !== oResponse.actionContext.getPath())){
												// set my parent page to dirty
												oTemplateUtils.oServices.oViewDependencyHelper.setParentToDirty(oComponent, sNavigationProperty, 1);
											}
										});
									}, jQuery.noop, oBase.state, "Proceed");
								}
							},
							onDataFieldForIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent,oBase.state);
							},
							onDataFieldWithIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onDataFieldWithIntentBasedNavigation(oEvent, oBase.state);
							},
							onChartInit: function (oEvent) {
								var oChart = oEvent.getSource().getChart();
								var fnOnSelectionChange = oController._templateEventHandlers.onSelectionChange;
								oChart.attachSelectData(fnOnSelectionChange).attachDeselectData(fnOnSelectionChange);
							},
							onDataReceived: function(oEvent){
								oTemplateUtils.oCommonEventHandlers.onDataReceived(oEvent);
							},
							onBeforeRebindDetailTable: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
								oController.onBeforeRebindTableExtension(oEvent);
								fnAdaptBindingParamsForInlineCreate(oEvent);
								if (oEvent.getSource().getTable() instanceof AnalyticalTable) {
									var oBindingParams = oEvent.getParameter("bindingParams");
									oBindingParams.parameters.entitySet = oEvent.getSource().getEntitySet();
								}
							},
							onShowDetails: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oBase.state);
							},
							onListNavigate: function(oEvent) {
								if (!oController.onListNavigationExtension(oEvent)){
								oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oBase.state);
								}
							},
							onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {
								var oEventParameters = oEvent.getParameters();
								oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
									//Success function
									var sSelectionVariant = getSelectionVariant();
									oTemplateUtils.oCommonUtils.semanticObjectLinkNavigation(oEventParameters, sSelectionVariant, oController);
								}, jQuery.noop, oBase.state, jQuery.noop);
							},
							
							onSemanticObjectLinkNavigationPressed : function(oEvent) {
								var oEventParameters = oEvent.getParameters();
								var oEventSource = oEvent.getSource();
								oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationPressed(oEventSource, oEventParameters);
							},
							
							onSemanticObjectLinkNavigationTargetObtained : function(oEvent) {
								var oEventParameters = oEvent.getParameters();
								var oEventSource = oEvent.getSource(); //set on semanticObjectController
								oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationTargetObtained(oEventSource, oEventParameters, oBase.state);
								//fnOnSemanticObjectLinkNavigationTargetObtained(oEvent);
							},
							onSemanticObjectLinkNavigationTargetObtainedSmartLink : function(oEvent) {
								var oEventParameters, oEventSource;
								oEventParameters = oEvent.getParameters();
								oEventSource = oEvent.getSource(); //set on smart link
								oEventSource = oEventSource.getParent().getParent().getParent().getParent(); //set on smart table
								oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkNavigationTargetObtained(oEventSource, oEventParameters, oBase.state);
							},
							onHeaderImagePress: function(oEvent) {
								var oImageDialog = getImageDialog();
								var sId = oEvent.getSource().getId();
								oImageDialog.addAriaLabelledBy(sId);
								var oImageDialogModel = oImageDialog.getModel("headerImage");
								oImageDialogModel.setProperty("/src", oEvent.getSource().getSrc());
								if (sap.ui.Device.system.phone) {
									oImageDialog.setProperty("stretch", true);
								}
								oImageDialog.open();
							},
							onInlineDataFieldForAction: function(oEvent) {
								var oEventSource = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oEventSource);
								var oTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
								var sTableBindingPath = oTable.getParent().getTableBindingPath();
								var aContexts = [oEventSource.getBindingContext()];
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oEventSource, oBase.state);
							},
							onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
								oTemplateUtils.oCommonEventHandlers.onInlineDataFieldForIntentBasedNavigation(oEvent.getSource(), oBase.state);
							},
							onDeterminingDataFieldForAction: function(oEvent) {
								var aContexts = [this.getView().getBindingContext()];
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sBindingPath = this.getView().getBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sBindingPath, oCustomData);
							},
							onBeforeRebindChart: function(oEvent) {
								var oSmartChart = oEvent.getSource();
								oSmartChart.oModels = oSmartChart.getChart().oPropagatedProperties.oModels;
							},
							onTableInit: function(oEvent) {
								var oSmartTable = oEvent.getSource();
								var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
								oTemplateUtils.oCommonUtils.checkToolbarIntentsSupported(oSmartTable, oTemplatePrivateModel);
							},
							onSearchObjectPage: function (oEvent) {
								var oSmartTable = (oEvent.getSource().getParent()).getParent();
								oSmartTable.data("searchString", oEvent.getSource().getValue());
								oSmartTable.data("allowSearch", true);
								oSmartTable.data("tableId", oSmartTable.getId());
								oSmartTable.data("objectPath", oSmartTable.getBindingContext().getPath());
// check whether oCommonUtils.refreshSmartTable has to called instead or additionally
								oSmartTable.rebindTable();
							}
						},
						formatters: {
							formatDefaultObjectTitle: function(bCreateMode, sHeaderInfoTitle) {
								// return DefaultTitle in createMode
								if (sHeaderInfoTitle || !bCreateMode) {
									return;
								}
								var oContext = oController.getView().getBindingContext();
								var oObject = oContext && oContext.getObject();
								if (bCreateMode && oObject && (oObject.IsActiveEntity === undefined || oObject.IsActiveEntity === false || oObject.HasActiveEntity ===
									false)) {
									return getDefaultObjectTitleForCreated();
								}
							}
						},
						extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oBase)
					};
					
					oControllerImplementation.handlers = jQuery.extend(oBase.handlers, oControllerImplementation.handlers);
					
					return oControllerImplementation;
				}
			};
		});
}; // end of sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.extensionAPI') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.extensionAPI'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui
	.define("sap/suite/ui/generic/template/extensionAPI/extensionAPI",["sap/suite/ui/generic/template/lib/TemplateAssembler"],
		function(TemplateAssembler) {
			"use strict";

			/**
			 * Static access to extension API for Smart Template Application development
			 * @namespace sap.suite.ui.generic.template.extensionAPI.extensionAPI
			 * @public
			 */

			return /** @lends sap.suite.ui.generic.template.extensionAPI.extensionAPI */ {
				/**
				 * @deprecated use <code>getExtensionAPIPromise</code> instead.
				 */
				getExtensionAPI: function(oControl) {
					return TemplateAssembler.getExtensionAPI(oControl);
				},
				
				/**
				 * Get the extension API valid for the specified control embedded in a Smart Template view.  Note that extension API
				 * can also be retrieved directly from the controller of the Smart Template view. Therefore, this method needs only
				 * be called in scenarios where this controller is not directly accessible. The most prominent use case for this would be
				 * the context of a controller of a view extension. In this case it is recommended to pass the extending view to this method. </br>
				 * Note that this method does not return the extension API directly, but a Promise that resolves to the extension API.
				 * Thus, a typical use of this method might look as follows: </br>
				 * <code>sap.ui.define(["sap/suite/ui/generic/template/extensionAPI/extensionAPI"], function(extensionAPI){</br>
				 *   ...</br>
				 *   extensionAPI.getExtensionAPIPromise(oView).then(function(oExtensionAPI){</br> 
				 *     oExtensionAPI.someMethod();</br> 
				 *   });</br>
				 *   ...</br>
				 * });</code>
				 *
				 * @param {sap.ui.core.Control} oControl a control which is embedded into a Smart Template view.
				 * @return {Promise} A <code>Promise</code> which resolves to the extension API for the embedding Smart Template view
				 * @public
				 */
				getExtensionAPIPromise: function(oControl) {
					return TemplateAssembler.getExtensionAPIPromise(oControl);
				}				
			};
		});
}; // end of sap/suite/ui/generic/template/extensionAPI/extensionAPI.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// This abstract class is used as common base class for all Components implementing a Smart Template based application.
// More precisely, when generating a project for a Smart Template based App a subclass of this class is generated as root component for the project.
//
// An instance of this class represents the Smart Template Application as a whole. Note that this instance is accessible for Template developers, for Break-out developers and even for external tools (e.g. Co-pilot).
// Therefore, the set of (public) methods is reduced to a minimum.
// Note that there are two other instances that represent the application as a whole:
// - the TemplateContract is responsible for data interchange between objects on framework level. Note that no class has been modelled for the TemplateContract.
//   See documentation below for more information about TemplateContract.
// - the Application (instance of sap.suite.ui.generic.template.lib.Application) represents the App for Template developers.
//
// Note that there are additional helper classes which are instantiated once per App (during startup of this class):
// - sap.ui.generic.app.ApplicationController from Denver layer
// - NavigationController, BusyHelper, ViewDependencyHelper from namespace sap.suite.ui.generic.template.lib
// -----------------------------------------------------------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.suite.ui.generic.template.lib.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.f.FlexibleColumnLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.ApplicationController'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/AppComponent",[
	"jquery.sap.global",
	"sap/ui/core/UIComponent", "sap/m/NavContainer",
	"sap/f/FlexibleColumnLayout",
	"sap/ui/model/Filter", "sap/ui/model/FilterOperator",
	"sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel",
	"sap/ui/generic/app/ApplicationController",
	"sap/suite/ui/generic/template/lib/Application",
	"sap/suite/ui/generic/template/lib/BusyHelper",
	"sap/suite/ui/generic/template/lib/NavigationController",
	"sap/suite/ui/generic/template/lib/ProcessObserver",
	"sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/lib/CRUDHelper",
	"sap/suite/ui/generic/template/lib/ViewDependencyHelper",
	"sap/suite/ui/generic/template/lib/testableHelper",
	"sap/suite/ui/generic/template/library"
], function(jQuery, UIComponent, NavContainer, FlexibleColumnLayout, Filter, FilterOperator, JSONModel, ResourceModel, ApplicationController,
	Application, BusyHelper, NavigationController,  ProcessObserver, TemplateAssembler, CRUDHelper, ViewDependencyHelper, testableHelper) {
	"use strict";

	ApplicationController = testableHelper.observableConstructor(ApplicationController); // make the constructor accessible for unit tests

	var DraftIndicatorState = sap.m.DraftIndicatorState; // namespace cannot be imported by sap.ui.define

	var fnRegisterAppComponent = TemplateAssembler.getRegisterAppComponent(); // Retrieve the possibility to register at TemplateAssembler

	var oRB; // initialized on demand
	function getText() { // static method used to read texts from the i18n-file in the lib folder. Should only be used when no view is available.
		oRB = oRB || new ResourceModel({
			bundleName: "sap/suite/ui/generic/template/lib/i18n/i18n"
		}).getResourceBundle();
		return oRB.getText.apply(oRB, arguments);
	}

	function compoundObserver(){
		return new ProcessObserver({ processObservers: [] });
	}

	var oMessageModel = sap.ui.getCore().getMessageManager().getMessageModel();
	var oValidationMessasageFilter = new Filter({
			path: "validation",
			operator: FilterOperator.EQ,
			value1: true
		});

	// "Constructor": oAppComponent is the instance to be created. oAppId is an id provided by the testableHelper that can be used to end the productive mode
	function getMethods(oAppComponent, oAppId) {

		var	oTemplateContract = { // template contract object which is used for data interchange between framework classes
			oAppComponent: oAppComponent,
			componentRegistry: {},	// registry for all TemplateComponents instantiated in the context of this App
									// maps the ids of these components on an object (called registry entry)
									// The registry entries are instantiated in function fnCreateComponentInstance of NavigationController
									// They are inserted into the registry in method setContainer of TemplateComponent which can actually be found in TemplateAssembler
			aRunningSideEffectExecutions: [], // an array containing Promises for running side-effect executions
			getText: getText,
			mRouteToTemplateComponentPromise: {}, // maps the name of a route onto a Promise that resolves
			                                      // to the TemplateComponent that implements the view the route points to.
			                                      // The Promise is entered into the map in function createRoute of routingHelper
			                                      // Note that the map does not contain entries for the query-routes.
			oTemplatePrivateGlobalModel: (new JSONModel()).setDefaultBindingMode("TwoWay"), // a global model that can be used for declarative binding
			                                                                                // in the whole App as named model _templPrivGlobal.
			                                                                                // In function createGlobalTemplateModel it gets initial data
			                                                                                // and is attached to oAppComponent
			aStateChangers: [], // an array of agents that modify the url in order to store their state
			                   // a state changer can be added via Application.registerStateChanger.
			oValidationMessageBinding: oMessageModel.bindList("/", null, null, oValidationMessasageFilter) // a list binding that filters all validation messages
		};

		// the following additional properties are added to TemplateContract later:
		// - oBusyHelper (instance of BusyHelper) by function createContent
		// - oNavigationHost (the navigation control hosting the App) by function createContent
		// - oNavigationControllerProxy an instance providing access to some internal methods of the NavigationController.
		//   It is added in the constructor of the NavigationController.
		// - sRoutingType constant describing the type of oNavigationHost ("m" = NavContainer, "f" = FlexibleColumnLayout) by function createContent
		// - function createContent adds several instances and arrays of class ProcessObserver, namely:
		//   # oNavigationObserver observes wether any navigation is currently running
		//   # aNavigationObservers only available if App runs in FCL. Contains an observer for each column.
		//   # oHeaderLoadingObserver observes whether any header data are currently loaded. It is started and stopped in ComponentUtils.
		//   # aHeaderLoadingObservers only available if App runs in FCL. Contains an observer for each column.
		//   # oPagesDataLoadedObserver observes whether header data are currently loaded or a navigation is currently running.
		// - oApplicationProxy an 'interface' provided by Application for the framework classes. It is added in the constructor of Application.
		// - oShellServicePromise a Promise that resolves to the ShellService. Added in init().
		//   Note that the following methods are used setTitle, setBackNavigation, and setHierarchy.
		// - rootContainer The ComponentContainer for the Component of the root-view. Added in the constructor of the NavigationController.
		//                 Note that this property will be available as soon as the root view is displayed (which may be delayed due to use of deep links).
		// - mEntityTree Initialized (generateRoutingMetadataAndGetRootEntitySet) and filled (function createRoutes) by the routingHelper, while creating the routes.
		//               Maps the names of the entity sets onto objects containing metadata about the target of the route
		//               Metadata properties are: 
		//               # sRouteName: name of the route
		//               # parent: name of parent entity set, if existing
		//               # level: hierarchy level
		//               # children: array containing the names of the child entity sets
		//               # navigationProperty: Navigation property leading to this entity set (if existing)
		//               # embeddedComponents: Map that maps the ids of the embedded reuse components defined on the corresponding page onto some metadata of these reuse components.
		//                 This property is filled in function fnHandleSubComponents.
		//               # communicationObject: For pages which are embedded via reuse components: An object which can be used for communication with other pages
		// - oFlexibleColumnLayoutHandler (instance of FlexibleColumnLayoutHandler) only available if App runs in FCL. Added by function fnStartupRouter of routingHelper
		// - routeViewLevel1 an object containing information about the route to the main object. Properties are pattern and name.
		//                   Added by function createRoute of routingHelper.

		oTemplateContract.oValidationMessageBinding.attachChange(jQuery.noop); // initialization step required by UI5

		var oApplicationController; // instance of sap.ui.generic.app.ApplicationController
		var oNavigationController; // instance of NavigationController
		var fnDeregister; // function to be called to deregister at TemplateContract

		// Begin: Private helper methods called in init

		function createGlobalTemplateModel(){
			oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic", {
					draftIndicatorState: DraftIndicatorState.Clear,
					// if the ShellService is unavailable some of its tasks have to be done by ourselves. Assume that this is not the case.
					shellServiceUnavailable: false,
					paginatorInfo: {},
					forceFullscreenCreate: false
			});
			oAppComponent.setModel(oTemplateContract.oTemplatePrivateGlobalModel, "_templPrivGlobal");
			oTemplateContract.oShellServicePromise.catch(function(){
				// it turns out that the ShellService is not available
				oTemplateContract.oTemplatePrivateGlobalModel.setProperty("/generic/shellServiceUnavailable", true);
			});
		}

		function attachToApplicationController() {
			oApplicationController.attachEvent("beforeSideEffectExecution", function (oEvent) {
				if (oEvent.getParameter("valueChange") || oEvent.getParameter("fieldControl")) {
					var oPromise = oEvent.getParameter("promise");
					oTemplateContract.oBusyHelper.setBusy(oPromise);
					var i = 0;
					for (; oTemplateContract.aRunningSideEffectExecutions[i]; ){
						i++;
					}
					oTemplateContract.aRunningSideEffectExecutions[i] = oPromise;
					var fnRemovePromise = function(){
						oTemplateContract.aRunningSideEffectExecutions[i] = null;
					};
					oPromise.then(fnRemovePromise, fnRemovePromise);
				}
			});

			var oTemplatePrivateGlobal = oAppComponent.getModel("_templPrivGlobal");
			var sDraftIndicatorState = "/generic/draftIndicatorState";

			oApplicationController.attachBeforeQueueItemProcess(function (oEvent) {
				if (oEvent.draftSave) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Saving);
				}
			});
			oApplicationController.attachOnQueueCompleted(function () {
				if (oTemplatePrivateGlobal.getProperty(sDraftIndicatorState) === DraftIndicatorState.Saving) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Saved);
				}
			});
			oApplicationController.attachOnQueueFailed(function () {
				if (oTemplatePrivateGlobal.getProperty(sDraftIndicatorState) === DraftIndicatorState.Saving) {
					oTemplatePrivateGlobal.setProperty(sDraftIndicatorState, DraftIndicatorState.Clear);
				}
			});

			oTemplatePrivateGlobal.setProperty("/generic/appComponentName", oAppComponent.getMetadata().getComponentName());
		}

		// End private helper methods called in init

		// Begin: Implementation of standard lifecycle methods

		function init(){
			var oAppRegistryEntry = {
				appComponent: oAppComponent,
				oTemplateContract: oTemplateContract,
				application: new Application(oTemplateContract),
				oViewDependencyHelper: new ViewDependencyHelper(oTemplateContract)
			};
			var oShellServiceFactory = sap.ui.core.service.ServiceFactoryRegistry.get("sap.ushell.ui5service.ShellUIService");
			oTemplateContract.oShellServicePromise = (oShellServiceFactory && oShellServiceFactory.createInstance()) || Promise.reject();
			oTemplateContract.oShellServicePromise.catch(function(){
				jQuery.sap.log.warning("No ShellService available");
			});
			(UIComponent.prototype.init || jQuery.noop).apply(oAppComponent, arguments);
			oTemplateContract.oBusyHelper.setBusy(oTemplateContract.oShellServicePromise);
			fnDeregister = fnRegisterAppComponent(oAppRegistryEntry);

			var oModel = oAppComponent.getModel();
			// workaround until Modules Factory is available
			oApplicationController = new ApplicationController(oModel);
			createGlobalTemplateModel();
			oNavigationController = new NavigationController(oTemplateContract);

			attachToApplicationController();
			CRUDHelper.enableAutomaticDraftSaving(oTemplateContract);

			// Error handling for erroneous metadata request
			// TODO replace access to oModel.oMetadata with official API call when available (recheck after 03.2016)
			// TODO move error handling to central place (e.g. create new MessageUtil.js)
			if ( (!oModel.oMetadata || !oModel.oMetadata.isLoaded()) || oModel.oMetadata.isFailed()) {
				oModel.attachMetadataFailed(function() {
					oNavigationController.navigateToMessagePage({
						title: getText("ST_GENERIC_ERROR_TITLE"),
						text: getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE"),
						icon: "sap-icon://message-error",
						description: getText("ST_GENERIC_ERROR_SYSTEM_UNAVAILABLE_DESC")
					});
					/* When the application's OData service's metadata document
					 * can't be retrieved or loaded, then none of children components
					 * can load. It is therefore important to look through those components
					 * and resolve their promises to register themselves with a view. */
					for (var childComponent in oTemplateContract.componentRegistry) {
						oTemplateContract.componentRegistry[childComponent].fnViewRegisteredResolve();
					}
				});
			}
			oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", false);
		}

		function createContent(){
			// Method must only be called once
			if (oTemplateContract.oNavigationHost){
				return "";
			}
			if (oTemplateContract.sRoutingType === "f"){
				var oFCL = new FlexibleColumnLayout();
				oTemplateContract.oNavigationHost = oFCL;
				oTemplateContract.aNavigationObservers = [
					new ProcessObserver({
						processName: "BeginColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachBeginColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterBeginColumnNavigate.bind(oFCL)
					}}),
					new ProcessObserver({
						processName: "MidColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachMidColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterMidColumnNavigate.bind(oFCL)
					}}), new ProcessObserver({
						processName: "EndColumnNavigation",
						eventHandlers: {
							attachProcessStart: oFCL.attachEndColumnNavigate.bind(oFCL),
							attachProcessStop: oFCL.attachAfterEndColumnNavigate.bind(oFCL)
					}})
				];
				oTemplateContract.oNavigationObserver = new ProcessObserver({
					processObservers: oTemplateContract.aNavigationObservers
				});
				oTemplateContract.aHeaderLoadingObservers = [compoundObserver(), compoundObserver(), compoundObserver()];
			} else {
				var oNavContainer = new NavContainer({
					id: oAppComponent.getId() + "-appContent"
				});
				oTemplateContract.oNavigationHost = oNavContainer;
				oTemplateContract.oNavigationObserver = new ProcessObserver({
					processName: "Navigation",
					eventHandlers: {
						attachProcessStart: oNavContainer.attachNavigate.bind(oNavContainer),
						attachProcessStop: oNavContainer.attachAfterNavigate.bind(oNavContainer)
				}});
			}
			oTemplateContract.oHeaderLoadingObserver = new ProcessObserver({
				processObservers: oTemplateContract.aHeaderLoadingObservers || []
			});
			oTemplateContract.oPagesDataLoadedObserver = new ProcessObserver({
				processObservers: [oTemplateContract.oHeaderLoadingObserver, oTemplateContract.oNavigationObserver]
			});
			oTemplateContract.oNavigationHost.addStyleClass(oTemplateContract.oApplicationProxy.getContentDensityClass());
			oTemplateContract.oBusyHelper = new BusyHelper(oTemplateContract);
			oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", true, true);
			return oTemplateContract.oNavigationHost;
		}

		function exit() {
			if (oTemplateContract.oNavigationHost) {
				oTemplateContract.oNavigationHost.destroy();
			}
			if (oApplicationController) {
				oApplicationController.destroy();
			}
			if (oNavigationController) {
				oNavigationController.destroy();
			}
			if (oTemplateContract.oValidationMessageBinding){
				oTemplateContract.oValidationMessageBinding.destroy();
			}
			(UIComponent.prototype.exit || jQuery.noop).apply(oAppComponent, arguments);
			fnDeregister();
			testableHelper.endApp(oAppId); // end of productive App
		}

		// End: Implementation of standard lifecycle methods

		function pagesMap2Array(input) {
			var output = Object.keys(input).map(function(key) {
				var page = input[key];
				//add the key to the array for reference
				//page["id"] = key;
				//Recursive call for nested pages
				if (page.pages) {
					page.pages = pagesMap2Array(page.pages);
				}
				return input[key];
			});
			return output;
		}
		
		// This is a temporary solution. It maps routing information onto 'virtual OData information', since the implementation currently
		// derives routing information only from OData information.
		function fnNormalizeRoutingInformation(aPages){
			if (!aPages){
				return;
			}
			for (var i = 0; i < aPages.length; i++){
				var oPage = aPages[i];
				if (oPage.routingSpec && oPage.routingSpec.noOData){
					oPage.entitySet = oPage.routingSpec.routeName;
					oPage.navigationProperty = oPage.routingSpec.routeName;
				}
				fnNormalizeRoutingInformation(oPage.pages);
				if (oPage.embeddedComponents){
					for (var sComponentId in oPage.embeddedComponents){
						var oEmbeddedComponent = oPage.embeddedComponents[ sComponentId];
						fnNormalizeRoutingInformation(oEmbeddedComponent.pages);
					}
				}
				fnNormalizeRoutingInformation(oPage.implementingComponent && oPage.implementingComponent.pages);
			}
		}

		var oConfig; // initialized on demand
		function getConfig() {
			if (!oConfig) {
				var oMeta = oAppComponent.getMetadata();
				oConfig = oMeta.getManifestEntry("sap.ui.generic.app");
				//Version 1.3.0 is made only to have a map in the app. descriptor with the runtime that accepts only pages
				//Background for the map are appdescriptor variants which are based on changes on an app. descriptor
				//Arrays don't work for changes as they do not have a stable identifier besides the position (index)
				//Once we have a runtime that accepts a map we need to increase the version to higher than 1.3.0 e.g. 1.4.0
				if (oConfig._version === "1.3.0" && oConfig.pages && jQuery.isPlainObject(oConfig.pages)) {
					oConfig.pages = pagesMap2Array(oConfig.pages);
				}
				fnNormalizeRoutingInformation(oConfig.pages);
			}
			return oConfig;
		}

		var oInternalManifest;  // initialized on demand
		function getInternalManifest() {
			if (!oInternalManifest) {
				//We need to copy the original manifest due to read-only settings of the object
				oInternalManifest = jQuery.extend({}, oAppComponent.getMetadata().getManifest());
				//Overwrite the part with our app. descriptor (see getConfig)
				oInternalManifest["sap.ui.generic.app"] = getConfig();
			}
			return oInternalManifest;
		}

		function getRouterClassName(){
			var oManifestObject = oAppComponent.getManifestObject();
			var oSettings = oManifestObject.getEntry("sap.ui.generic.app").settings;
			oTemplateContract.sRoutingType = (oSettings && oSettings.flexibleColumnLayout) ? "f" : "m";
			return "sap." + oTemplateContract.sRoutingType + ".routing.Router";
		}

		return {
			init: init,
			createContent: createContent,
			exit: exit,
			_getRouterClassName: getRouterClassName,
			getConfig: getConfig,
			getInternalManifest: getInternalManifest,

			getTransactionController: function() {
				return oApplicationController.getTransactionController();
			},

			getApplicationController: function() {
				return oApplicationController;
			},

			/*
			 * Returns the reference to the navigation controller instance that has been created by AppComponent.
			 *
			 * @returns {sap.suite.ui.generic.template.lib.NavigationController} the navigation controller instance
			 * @public
			 */
			getNavigationController: function() {
				return oNavigationController;
			}
		};
	}

	return UIComponent.extend("sap.suite.ui.generic.template.lib.AppComponent", {
		metadata: {
			config: {
				title: "SAP UI Application Component", // TODO: This should be set from App descriptor
				fullWidth: true
			},
			properties: {
				forceGlobalRefresh: {
					type: "boolean",
					defaultValue: true
				}
			},
			events: {
				pageDataLoaded: {}
			},
			routing: {
				config: {
					async: true,
					viewType: "XML",
					viewPath: "",
					clearTarget: false
				},
				routes: [],
				targets: []
			},
			library: "sap.suite.ui.generic.template"
		},

		constructor: function() {
			var oAppId = testableHelper.startApp(); // suppress access to private methods in productive coding
			jQuery.extend(this, getMethods(this, oAppId));
			(UIComponent.prototype.constructor || jQuery.noop).apply(this, arguments);
		}
	});
});
}; // end of sap/suite/ui/generic/template/lib/AppComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.controller.ControllerImplementation') ) {
/* global hasher sap */
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.navigation.service.SelectionVariant'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.AnalyticalTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation",["jquery.sap.global", "sap/ui/base/Object", "sap/ui/model/json/JSONModel", "sap/m/ObjectIdentifier", "sap/m/Table",
		"sap/m/Text", "sap/ui/comp/smartfield/SmartField", "sap/ui/generic/app/navigation/service/SelectionVariant",
		"sap/ui/base/EventProvider",
		"sap/suite/ui/generic/template/AnalyticalListPage/extensionAPI/ExtensionAPI", "sap/ui/core/ResizeHandler",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/FilterBarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/ToolbarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterBarController",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/VisualFilterDialogController",
		"sap/suite/ui/generic/template/lib/MessageUtils",
		"sap/m/MessageBox", "sap/ui/table/Table", "sap/ui/table/AnalyticalTable",
		"sap/ui/model/odata/AnnotationHelper",
		"sap/ui/model/analytics/odata4analytics",
		"sap/suite/ui/generic/template/AnalyticalListPage/util/ModelUtil",
		"sap/suite/ui/generic/template/AnalyticalListPage/controller/ContentAreaController",
		"sap/suite/ui/generic/template/AnalyticalListPage/util/FilterUtil"
	],
    function(jQuery, BaseObject, JSONModel, ObjectIdentifier, Table, Text, SmartField, SelectionVariant, EventProvider, ExtensionAPI, ResizeHandler,
			FilterBarController, ToolbarController, VisualFilterBarController, VisualFilterDialogController,MessageUtils, MessageBox, UiTable, AnalyticalTable,
			ODataAnnotationHelper, Analytics, ModelUtil, ContentAreaController, FilterUtil) {
		"use strict";

		// Constants which are used as property names for storing custom filter data and generic filter data
		var customDataPropertyName  = "sap.suite.ui.generic.template.customData",
			genericDataPropertyName = "sap.suite.ui.generic.template.genericData",
			CONTAINER_VIEW_CHART	= "chart",
			FILTER_MODE_VISUAL      = "visual",
			FILTER_MODE_COMPACT     = "compact",
			FILTER                  = "Filter";

		function fnNullify(oObject) {
			if (oObject) {
				for (var sProp in oObject) {
					oObject[sProp] = null;
				}
			}
		}

		return {
			getMethods: function(oViewProxy, oTemplateUtils, oController) {
				var oState = {};// contains attributes oSmartFilterbar and oSmartTable. Initialized in onInit.
				var bIsTransferringUrlStateToPageState = false;
				var oStoringInformation = null;
				var sAppStateKeyInUrl = null;
				var oRealizedAppState = { // this object contains information which can be derived from url
					appStateKey: "",      // it represents the last url-state which has been adopted by the UI
					urlParams: {}
					//LR is storing some additional information like table variant id in this object, in ALP it is not required
				};
				// To prevent multiple calls to app state handler on initial load.
				var bTableInitialized = false;
				var bChartInitialized = false;
				var bSVMLoaded        = false;

				// Helper Functions

				function getFilterState() {
					var oCustomAndGenericData = {};
					oCustomAndGenericData[customDataPropertyName] = {};
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
					//Adding chartVariantId , filterMode and containerView to the generic data
					//because of the limitation of NavigationHandler
					oCustomAndGenericData[genericDataPropertyName] = {
						chartVariantId: oState.oSmartChart && oState.oSmartChart.getCurrentVariantId(),
						filterMode: oTemplatePrivate.getProperty('/alp/filterMode'),
						contentView: oTemplatePrivate.getProperty('/alp/contentView'),
						autoHide: oTemplatePrivate.getProperty('/alp/autoHide')
					};
					var oEditStateFilter = oController.byId("editStateFilter");
					if (oEditStateFilter) {
						oCustomAndGenericData[genericDataPropertyName].editStateFilter = oEditStateFilter.getSelectedKey();
					}
					// extension is responsible for retrieving custom filter state. The method has a more generic name
					// for historical reasons (change would be incompatible).
					oController.getCustomAppStateDataExtension(oCustomAndGenericData[customDataPropertyName]);
					return oCustomAndGenericData;
				}

				function getCurrentAppState() {
					/*
					 * Special handling for selection fields, for which defaults are defined: If a field is visible in the
					 * SmartFilterBar and the user has cleared the input value, the field is not included in the selection
					 * variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by
					 * purpose, we have to store the selection with the value "", in order to set it again to an empty value,
					 * when restoring the selection after a back navigation. Otherwise, the default value would be set.
					 */
					var oSelectionVariant = new SelectionVariant(oState.oSmartFilterbar.getDataSuiteFormat());
					var aVisibleFields = oController.getVisibleSelectionsWithDefaults();
					for (var i = 0; i < aVisibleFields.length; i++) {
						if (!oSelectionVariant.getValue(aVisibleFields[i])) {
							oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
						}
					}
					//BCP: 1780225744 If variant is dirty and if the selection variant has id, making the same empty. For the filters to be applied correctly
					if (oState.oController.byId('template::PageVariant').currentVariantGetModified() && oSelectionVariant.getID()){
						oSelectionVariant.setID("");
					}
					return {
						selectionVariant: oSelectionVariant.toJSONString(),
						tableVariantId: oState.oSmartTable && oState.oSmartTable.getCurrentVariantId(),
						customData: getFilterState()
					};
				}

				/**
				 * This function store the app state url
				 * @return {void}
				 */
				function fnStoreCurrentAppStateAndAdjustURL() {
					// oCurrentAppState is optional
					// - nothing, if NavigationHandler not available
					// - adjusts URL immediately
					// - stores appState for this URL (asynchronously)
					var oCurrentAppState  = getCurrentAppState();
					// currently NavigationHandler raises an exception when ushellContainer is not available, should be changed
					// by
					// Denver
					try {
						//storage information object
						oStoringInformation =  oTemplateUtils.oCommonUtils.getNavigationHandler().storeInnerAppStateWithImmediateReturn(oCurrentAppState);
					} catch (err) {
						jQuery.sap.log.error("AnalyticalListPage.fnStoreCurrentAppStateAndAdjustURL: " + err);
					}
					if (oStoringInformation instanceof sap.ui.generic.app.navigation.service.NavError) {
						oStoringInformation = null;
						return;
					}
					//LR is using replaceHash function of NavigationHandler to update the key.
					//LR’s logic is creating the navigation promise and triggering the resolve function on every app state change
					//For ALP that logic will create performance issue. So using a different logic 
					if (sAppStateKeyInUrl !== oStoringInformation.appStateKey) {
						//No need to wait for oStoringInformation.promise, app state is directly accessible from oStoringInformation object
						oRealizedAppState.appStateKey = oStoringInformation.appStateKey;
					}
				}

				// -- Begin of methods that are used in onInit only
				function fnSetIsLeaf() {
					var oComponent = oController.getOwnerComponent();
					var oTemplatePrivateModel = oComponent.getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/isLeaf", oComponent.getIsLeaf());
				}

				function fnSetShareModel() {
					var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
					var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
					var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";
					// share Model: holds all the sharing relevant texts and info used in the XML view
					var oShareInfo = {
						// BOOKMARK
						bookmarkIcon: sBookmarkIcon,
						bookmarkCustomUrl: function() {
							fnStoreCurrentAppStateAndAdjustURL();
							return hasher.getHash() ? ("#" + hasher.getHash()) : window.location.href;
						},
						bookmarkServiceUrl: function() {
							var oTable = oState.oSmartTable.getTable();
							var oBinding;
							if (oTable) {
								oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
							} else {
								oBinding = "";  // ToDo : Add Chart Count/context based on clarification.
							}
							return oBinding ? oBinding.getDownloadUrl() + "&$top=0&$inlinecount=allpages" : "";
						},
						// JAM
						isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
					};
					var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
					oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
				}
				// -- End of used in onInit only

				function fnRestoreGenericFilterState(oGenericData) {
					if (oGenericData && oGenericData.editStateFilter !== undefined) {
						var oEditStateFilter = oController.byId("editStateFilter");
						if (oEditStateFilter) {
							oEditStateFilter.setSelectedKey((oGenericData.editStateFilter === null) ? 0 : oGenericData.editStateFilter);
						}
					}
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
					if (oGenericData.chartVariantId && oState.oSmartChart) {
						oState.oSmartChart.setCurrentVariantId(oGenericData.chartVariantId);
					}
					if (oGenericData.filterMode) {
						oTemplatePrivate.setProperty('/alp/filterMode', oGenericData.filterMode);
						oState.filterBarController.handleFilterSwitch(oGenericData.filterMode);
					} else {
						fnSetDefaultFilter();
					}
					if (oGenericData.contentView) {
						oTemplatePrivate.setProperty('/alp/contentView', oGenericData.contentView);
					}
					if (oGenericData.autoHide) {
						oTemplatePrivate.setProperty('/alp/autoHide', oGenericData.autoHide);
						//TODO RC Do we need to refresh table binding to change the highlight / filter behaviour
					}
				}

				// method is responsible for retrieving custom filter state. The correspomding extension-method has a more generic name
				// for historical reasons (change would be incompatible).
				function fnRestoreCustomFilterState(oCustomData) {
					oController.restoreCustomAppStateDataExtension(oCustomData || {});
				}

				// This method is responsible for restoring the data which have been stored via getFilterState.
				// However, it must be taken care of data which have been stored with another (historical) format.
				// Therefore, it is checked whether oCustomAndGenericData possesses two properties with the right names.
				// If this is this case it is assumed that the data have been stored according to curreent logic. Otherwise, it is
				// assumed that the data have been stored with the current logic. Otherwise, it is assumed that the properties have been
				// stored with a logic containing only custom properties (with possible addition of _editStateFilter).
				function fnRestoreFilterState(oCustomAndGenericData) {
					oCustomAndGenericData = oCustomAndGenericData || {};
					if (oCustomAndGenericData.hasOwnProperty(customDataPropertyName) && oCustomAndGenericData.hasOwnProperty(genericDataPropertyName)) {
						fnRestoreGenericFilterState(oCustomAndGenericData[genericDataPropertyName]);
						fnRestoreCustomFilterState(oCustomAndGenericData[customDataPropertyName]);
					} else { // historic format. May still have property _editStateFilter which was used generically.
						if (oCustomAndGenericData._editStateFilter !== undefined) {
							fnRestoreGenericFilterState({
								editStateFilter: oCustomAndGenericData._editStateFilter
							});
							delete oCustomAndGenericData._editStateFilter;
						}
						fnSetDefaultFilter();
						fnRestoreCustomFilterState(oCustomAndGenericData);
					}
				}

				var oParseNavigationPromise;


				function determineDefaultValues(oEntityType, sTerm) {
					var aProperties = oEntityType && oEntityType.property;
					return aProperties.filter(function(property) {
						return typeof property[sTerm] !== "undefined";
					});
				}

				function createDefaultFilter(oSmartFilterbar) {
					var oModel = oSmartFilterbar.getModel(),
						oMetaModel = oModel && oModel.getMetaModel(),
						oResultEntityType = oMetaModel && oMetaModel.getODataEntityType(oSmartFilterbar.getEntityType()),
						sResultEntityType = oMetaModel && oMetaModel.getODataEntityType(oSmartFilterbar.getEntityType(), true),
						aResultDefaultProperties = oResultEntityType && determineDefaultValues(oResultEntityType, "com.sap.vocabularies.Common.v1.FilterDefaultValue"),
						oDataSuiteFormat, o4AnaModel, oParameterization, oParameterEntitySet, oParameterEntityType,
						oQueryResult, aParameterDefaultProperties = [];

					try {
						//Find the parameter set and check the properties
						o4AnaModel = new Analytics.Model(new Analytics.Model.ReferenceByModel(oModel));
						oQueryResult = o4AnaModel && o4AnaModel.findQueryResultByName(oSmartFilterbar.getEntitySet());
						oParameterization = oQueryResult && oQueryResult.getParameterization();
						oParameterEntitySet = oParameterization && oMetaModel.getODataEntitySet(oParameterization.getEntitySet().getQName());
						oParameterEntityType = oParameterEntitySet && oMetaModel.getODataEntityType(oParameterEntitySet.entityType);
						aParameterDefaultProperties = oParameterEntityType ? determineDefaultValues(oParameterEntityType, "defaultValue") : [];
					} catch (e) {
						jQuery.sap.log.Error(e);
					}

					if (aResultDefaultProperties.length > 0 || aParameterDefaultProperties.length > 0) {
						oDataSuiteFormat = {
							"SelectOptions": [],
							"Parameters": []
						};

						aResultDefaultProperties.forEach(function (property) {
							var oContext = oMetaModel.createBindingContext(sResultEntityType + "/property/[${path:'name'}===\'" + property.name + "']/com.sap.vocabularies.Common.v1.FilterDefaultValue"),
								oSelectOption = {
									"PropertyName": property.name,
									"Ranges": [{
										"Sign": "I",
										"Option": "EQ",
										"Low": ODataAnnotationHelper.format(oContext),
										"High": null
									}]
								};
							oDataSuiteFormat.SelectOptions.push(oSelectOption);
						});

						aParameterDefaultProperties.forEach(function (property) {
							var //oContext = oMetaModel.createBindingContext(sParameterEntityType + "/property/[sap.suite.ui.generic.template===\'" + property.name + "']/DefaultValue"),
								oParameter = {
									"PropertyName": "$Parameter." + property.name,
									"PropertyValue": property.defaultValue//Seems I can't use the formatter here ODataAnnotationHelper.format(oContext)
								};
							oDataSuiteFormat.Parameters.push(oParameter);
						});
					}
					return oDataSuiteFormat;

				}

				function fnSetDefaultFilter() {
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv"),
						defaultFilterMode = oState.oSmartFilterbar.isCurrentVariantStandard() ? oState.oController.getOwnerComponent().getDefaultFilterMode() : oTemplatePrivate.getProperty('/alp/filterMode');
					//If the App Developer wants to hide Visual Filter, switch to Compact Filter
					if (defaultFilterMode === FILTER_MODE_VISUAL && oState.hideVisualFilter) {
						jQuery.sap.log.error("Visual filter is hidden defaulting to compact");
						defaultFilterMode = FILTER_MODE_COMPACT;
					}
					oState.filterBarController.setDefaultFilter(defaultFilterMode);
				}

				function fnCheckToLaunchDialog() {
					var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
					if (oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
						if (!oTemplatePrivate.getProperty("/alp/searchable")) { //If missing mandatory or parameters
							oState.oSmartFilterbar.showFilterDialog();
						}
					}
				}

				function onSmartFilterBarInitialise(oEvent){
					var oSmartFilterbar = oEvent.getSource(),
						oDefaultFilterSuiteFormat = createDefaultFilter(oSmartFilterbar);
					//Set default values if available
					if (oDefaultFilterSuiteFormat) {
						oSmartFilterbar.setDataSuiteFormat(JSON.stringify(oDefaultFilterSuiteFormat), true);
					}
					oParseNavigationPromise  = oTemplateUtils.oCommonUtils.getNavigationHandler().parseNavigation();
					oController.onInitSmartFilterBarExtension(oEvent);
				}
				function fnCheckMandatory(){
					//check if smartfilterbar is searchable only after it has been initialized.
					if (oState.oSmartFilterbar.isInitialised()) {
						oState.oSmartFilterbar.checkSearchAllowed(oState);
					}
				}

				function fnUpdateSVFB() {
					// If filter mode is visual and if mandatory fields/params are not filled launch CompactFilter Dialog
					fnCheckMandatory();
					fnCheckToLaunchDialog();
					// set filter model so that default values (user settings etc.) can also be accounted for
					var filterModel = oState.oController.getOwnerComponent().getModel("_filter");
					filterModel.setData(jQuery.extend(true, {}, oState.oSmartFilterbar.getFilterData(true)));
					oState.filterBarController._updateFilterLink();
					//Update Binding in chart Items in Smart Visual Filter Bar
					if (oState.alr_visualFilterBar && oState.alr_visualFilterBar.updateVisualFilterBindings) {
						oState.alr_visualFilterBar.updateVisualFilterBindings(true);
					}
				}

				/**
				 * This function add the display currency field
				 * @param {object} oSelectionVariant
				 * @param {object} oAppData
				 * @return {void}
				 */
				function addDisplayCurrency(oSelectionVariant, oAppData) {
					var mandatoryFilterItems = oState.oSmartFilterbar.determineMandatoryFilterItems();
					var displayCurrency;
					for (var item = 0;item < mandatoryFilterItems.length; item++) {
						if (mandatoryFilterItems[item].getName().indexOf("$Parameter.P_DisplayCurrency") !== -1) {
							var sCurrency = oAppData.oSelectionVariant.getSelectOption("DisplayCurrency");
							if (sCurrency && sCurrency[0] && sCurrency[0].Low) {
								displayCurrency = sCurrency[0].Low;
							} else if (FilterUtil.readProperty(oAppData,"oDefaultedSelectionVariant._mSelectOptions.DisplayCurrency.0.Low")) {
								displayCurrency = oAppData.oDefaultedSelectionVariant._mSelectOptions.DisplayCurrency[0].Low;
							}
							if (displayCurrency) {
								oSelectionVariant.addParameter("$Parameter.P_DisplayCurrency", displayCurrency);
							}
							if (oState.alr_visualFilterBar && displayCurrency) {
								oState.alr_visualFilterBar.setDisplayCurrency(displayCurrency);
							}
							break;
						}
					}
				}

				/**
				 * This function apply selection properties to the smart filter bar
				 * @param  {object} oSelectionVariant
				 * @return {void}
				 */
				function applySelectionProperties(oSelectionVariant) {
					var aSelectionVariantProperties = oSelectionVariant.getParameterNames().concat(oSelectionVariant.getSelectOptionsPropertyNames());
					for (var i = 0; i < aSelectionVariantProperties.length; i++) {
						oState.oSmartFilterbar.addFieldToAdvancedArea(aSelectionVariantProperties[i]);
					}
					// add filters to visual filter basic area if not already added
					if (oState.alr_visualFilterBar) {
						oState.alr_visualFilterBar.addVisualFiltersToBasicArea(aSelectionVariantProperties);
					}
				}

				/**
				 * This function update the smart filter bar
				 * @param  {object} oSelectionVariant
				 * @return {void}
				 */
				function updateSmartFilterBar(oSelectionVariant) {
					// A default variant could be loaded.
					// Do not clear oSmartFilterbar.clearVariantSelection and oSmartFilterbar.clear due to BCP 1680012595 is not valid anymore
					// with BCP 1670406892 it was made clear that both clear are needed when this GIT change 1941921 in navigation handler is available
					oState.oSmartFilterbar.clearVariantSelection();
					oState.oSmartFilterbar.clear();
					// oSelectionVariant object is used in place of oAppData.selectionVariant
					// because we add a Parameter to the SelectionVariant if user settings
					// specify a DisplayCurrency.
					oState.oSmartFilterbar.setDataSuiteFormat(oSelectionVariant.toJSONString(), true);
				}

				/**
				 * This function trigger the merge
				 * @return {void}
				 */
				function triggerMerge() {
					var oCompactFilterData = jQuery.extend(true, {}, oState.oSmartFilterbar.getFilterData(true)),
					filterModel = oState.oController.getOwnerComponent().getModel("_filter");
					filterModel.setData(oCompactFilterData);
					oState.filterBarController._updateFilterLink();
				}

				/**
				 * This function resolve the app state promise
				 * @param  {object} oAppData       app data
				 * @param  {object} oURLParameters url parameters
				 * @param  {string} sNavType       navigation type
				 * @return {void}
				 */
				function resolveAppStatePromise (oAppData, oURLParameters, sNavType) {
					oState.oSmartFilterbar.setSuppressSelection(false);
					var sAppStateKey = oAppData.appStateKey || "";
					//Make sure that no two resolve functions are executing at the same time.
					if (bIsTransferringUrlStateToPageState){
						return;
					}
					sAppStateKeyInUrl = sAppStateKey;
					bIsTransferringUrlStateToPageState = true;
					var oNewUrlParameters = (!sAppStateKey && oURLParameters) || {};
					if (sNavType !== sap.ui.generic.app.navigation.service.NavType.initial) {
						var bHasOnlyDefaults = oAppData && oAppData.bNavSelVarHasDefaultsOnly;
						var oSelectionVariant = new SelectionVariant(oAppData.selectionVariant);
						addDisplayCurrency(oSelectionVariant, oAppData);
						applySelectionProperties(oSelectionVariant);
						//according to BCP 1770187504, 1670373497 and 1670406892 '|| oState.oSmartFilterbar.isCurrentVariantStandard() is needed
						if (!bHasOnlyDefaults || oState.oSmartFilterbar.isCurrentVariantStandard()) {
							updateSmartFilterBar(oSelectionVariant);
						}
						if (oAppData.tableVariantId && oState.oSmartTable) {
							oState.oSmartTable.setCurrentVariantId(oAppData.tableVariantId);
						}
						//in case of visual filter mode triggering the merge
						var oTemplatePrivate = oState.oController.getOwnerComponent().getModel("_templPriv");
						if ( sNavType === sap.ui.generic.app.navigation.service.NavType.xAppState && oTemplatePrivate.getProperty('/alp/filterMode') === FILTER_MODE_VISUAL) {
							triggerMerge();
						}
						if (oAppData.customData) {
							fnRestoreFilterState(oAppData.customData);
						} else {
							fnSetDefaultFilter();
						}
						if (!bHasOnlyDefaults) {
							oState.oSmartFilterbar.search();
						}
						oRealizedAppState = {
							appStateKey: sAppStateKey,
							urlParams: oNewUrlParameters
						};
					} else {
						fnSetDefaultFilter();
					}
					fnUpdateSVFB();
					oStoringInformation = null;
					bIsTransferringUrlStateToPageState = false;
				}

				function onSmartFilterBarInitialized(){
					try {
						oParseNavigationPromise.done(resolveAppStatePromise);
						oParseNavigationPromise.fail(function(oError) {
							if (oError instanceof Error) {
								oError.showMessageBox();
							}
							// Set Default filter when app state fails (if filter mode is visual) and if mandatory fields/params are not filled launch CompactFilter Dialog
							fnSetDefaultFilter();
							fnUpdateSVFB();
						});

					} catch (oException) {
						// In case the app is launched outside of launch pad the navigation promise will throw exception
						// Set Default filter when app state fails (if filter mode is visual) and if mandatory fields/params are not filled launch CompactFilter Dialog
						fnSetDefaultFilter();
						fnUpdateSVFB();
					}
				}

				// Generation of Event Handlers
				return {
					onInit: function() {
						var oComponent = oController.getOwnerComponent();

						var oTemplatePrivateModel = oComponent.getModel("_templPriv");
						oTemplatePrivateModel.setProperty("/alp", {
							filterMode: oComponent.getHideVisualFilter() ? FILTER_MODE_COMPACT : oComponent.getDefaultFilterMode(),
							contentView: oComponent.getDefaultContentView(),
							autoHide: oComponent.getAutoHide()
						});
						oState.hideVisualFilter = oComponent.getHideVisualFilter();
						oState.hideVisualFilter = (oState.hideVisualFilter === undefined || oState.hideVisualFilter !== true) ? false : true;

						oState.oSmartFilterbar = oController.byId("template::SmartFilterBar");
						oState.oSmartTable = oController.byId("table");
						oState.oPage = oController.byId("template::Page");
						oState.oSmartChart = oController.byId("chart");
						oState.alr_compactFilterContainer = oController.byId("template::CompactFilterContainer");
						oState.alr_visualFilterContainer = oController.byId("template::VisualFilterContainer");
						oState.alr_filterContainer = oController.byId("template::FilterContainer");
						oState.alr_visualFilterBar = oController.byId("template::VisualFilterBar");
						if (oState.alr_visualFilterBar) {
							oState.alr_visualFilterBar.setSmartFilterId(oState.oSmartFilterbar.getId());
						}
						oState.oKpiTagContainer = oController.byId("template::KpiTagContainer");
						if (oState.oKpiTagContainer) {
							jQuery.sap.require("sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController");
							sap.suite.ui.generic.template.AnalyticalListPage.controller.KpiTagController.init(oState);
						}
						oState.oContentArea = new ContentAreaController();
						oState.oTemplateUtils = oTemplateUtils;
						oState.toolbarController = new ToolbarController();
						oState.oController = oController;
						oState.filterBarController = new FilterBarController();
						oState.filterBarController.init(oState);
						oState.oContentArea.createAndSetCustomModel(oState);
						oState.oContentArea.setState(oState);
						if (!oState.hideVisualFilter) {
							oState.visualFilterBarContainer = new VisualFilterBarController();
							oState.visualFilterBarContainer.init(oState);
						}

						fnSetIsLeaf();
						fnSetShareModel();

						oController.byId("template::FilterText").attachBrowserEvent("click", function () {
							oController.byId("template::Page").setHeaderExpanded(true);
						});

						oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", true);

						//Making Condense is the default mode in ALP,but in List Report Compact is the default
						//compare the following logic with Application.js->getContentDensityClass:
						if (oState.oSmartTable) {
							var oTable = oState.oSmartTable.getTable();
						}
						var sCompactClass = "sapUiSizeCompact", sCondensedClass = "sapUiSizeCondensed";
						if ( oTable instanceof UiTable || oTable instanceof AnalyticalTable) {
							var oView = oController.getView();
							var oBody = jQuery(document.body);
							if (oBody.hasClass(sCompactClass) || oView.hasStyleClass(sCompactClass)) {
								var bCondensedTableLayout = oComponent.getComponentContainer().getSettings().condensedTableLayout;
								if (bCondensedTableLayout === false) {
									oState.oSmartTable.addStyleClass(sCompactClass);
								} else {
									oState.oSmartTable.addStyleClass(sCondensedClass);
								}
							}
						}

						/**
						 * This function return the URL parameter info
						 * @return {promise}
						 */
						oViewProxy.getUrlParameterInfo = function(){
							return oParseNavigationPromise.then(function(){
								if (oRealizedAppState.appStateKey){
									return {
										"sap-iapp-state": [oRealizedAppState.appStateKey]
									};
								}
								return oRealizedAppState.urlParams;
							});
						};

						// Give component access to below methods via oViewProxy
						oViewProxy.onComponentActivate = function(){
							//TODO Need to implements this as ListReport has implemented.
							//require to implements IappStateHandler to be implemented in ALP.
							/*if (!bIsStartingUp){
								oIappStateHandler.parseUrlAndApplyAppState();
							}*/
						};
						oViewProxy.refreshBinding = function(){
							//Update Binding in chart Items in Smart Filter Bar
							if (oState.alr_visualFilterBar && oState.alr_visualFilterBar.updateVisualFilterBindings) {
								oState.alr_visualFilterBar.updateVisualFilterBindings();
							}
							// Rebind chart
							if (oState.oSmartChart && oState.oSmartChart.rebindChart) {
								oState.oSmartChart.rebindChart();
							}
							// Rebind table
							if (oState.oSmartTable) {
								oTemplateUtils.oCommonUtils.refreshSmartTable(oState.oSmartTable);
							}
							//Refresh Kpi
							if (oState.oKpiTagContainer) {
								var aContent = oState.oKpiTagContainer.mAggregations.content;
								for (var i in aContent){
									if (aContent[i].getModelName && aContent[i].getModelName() === "kpi"){
										aContent[i]._firstTime = true;
										aContent[i].onBeforeRendering();
									}
								}
							}
						};

						//Update filter model so that UI can adapt on each filter change
						oState.oSmartFilterbar.attachFilterChange(function(oEvent) {
							//check the chart is initialized or not to get the drillStackFilters
							var drillFiltersFromChart = oState.oSmartChart && oState.oSmartChart.getChart() && oState.oSmartChart.getDrillStackFilters();
							//Ignore SmartChart selections based on drilldown
							if (drillFiltersFromChart && drillFiltersFromChart.length) {
								oState.oController.getOwnerComponent().getModel("_templPriv").setProperty('/alp/_ignoreChartSelections', false);
							} else {
								oState.oController.getOwnerComponent().getModel("_templPriv").setProperty('/alp/_ignoreChartSelections', true);
							}
							// check if search can be performed or not after filter change
							fnCheckMandatory();	//Check and update searchable property
							var sfb  = oEvent.getSource(),
							// get filter data for all fields so that model change via two-way binding does not
							// re-trigger set dimension filter in visual filter
							oAllFilterData = jQuery.extend(true, {}, sfb.getFilterData(true)),
							filterModel = oState.oController.getOwnerComponent().getModel("_filter");
							filterModel.setData(oAllFilterData);
							if (oEvent.getParameters().filterItem) { // call changeVisibility() only if a filterItem is added or deleted
								oState.filterBarController.changeVisibility(oEvent);
								// BCP: 1770556353 - When visibility of filter item is changed in dialog, search is triggered.
								//chart rebind is prevented; however table is rebound. In this case chart selection must be applied to table.
								oState.oController.getOwnerComponent().getModel("_templPriv").setProperty('/alp/_ignoreChartSelections', false);
							}
							oState.filterBarController._updateFilterLink();
						});
					},

					handlers: {
						onBack: function() {
							oTemplateUtils.oServices.oNavigationController.navigateBack();
						},
						addEntry: function(oEvent) {
							var oEventSource = oEvent.getSource();
							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								oTemplateUtils.oCommonEventHandlers.addEntry(oEventSource, false, oState.oSmartFilterbar);
							}, jQuery.noop, oState);
						},
						deleteEntries: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.deleteEntries(oEvent);
						},
						onSelectionChange: function(oEvent) {
							var oTable = oEvent.getSource(),
								oModel = oTable.getModel(),
								oPrivModel = oTable.getModel("_templPriv");

							var oMetaModel = oModel.getMetaModel(),
								oEntitySet = oMetaModel.getODataEntitySet(this.getOwnerComponent().getEntitySet()),
								oDeleteRestrictions = oEntitySet["Org.OData.Capabilities.V1.DeleteRestrictions"];

							var sDeletablePath = (oDeleteRestrictions && oDeleteRestrictions.Deletable && oDeleteRestrictions.Deletable.Path) ? oDeleteRestrictions.Deletable.Path : "";
							var bDeleteEnabled = false;

							var bAllLocked = true;
							var bAllNotDeletable = (sDeletablePath && sDeletablePath !== ""); // if Deletable-Path is undefined, then the items are deletable.

							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length > 0) {
								for (var i = 0; i < aContexts.length; i++) {
									var oObject = oModel.getObject(aContexts[i].getPath());

									// check if item is locked
									if (!(oObject.IsActiveEntity && oObject.HasDraftEntity && oObject.DraftAdministrativeData && oObject.DraftAdministrativeData.InProcessByUser)) {
										bAllLocked = false;
									}
									// check if item is deletable
									if (bAllNotDeletable) {
										if (oModel.getProperty(sDeletablePath, aContexts[i])) {
											bAllNotDeletable = false;
										}
									}
									if (!bAllLocked && !bAllNotDeletable) {
										bDeleteEnabled = true;
										break;
									}
								}
							}
							oPrivModel.setProperty("/listReport/deleteEnabled", bDeleteEnabled);

						},
						onChange: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onChange(oEvent);
						},
						onSmartFieldUrlPressed: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onSmartFieldUrlPressed(oEvent, oState);
						},
						onContactDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onContactDetails(oEvent);
						},
						onSmartFilterBarInitialise: onSmartFilterBarInitialise,
						onSmartFilterBarInitialized: onSmartFilterBarInitialized,

						onEditStateFilterChanged: function(oEvent) {
							oEvent.getSource().fireChange();
						},
						onFilterPress: function(oEvent){
							oState.filterBarController.showDialog.call(oState.filterBarController);
						},
						onClearPress: function(oEvent){
							oState.filterBarController.clearFilters();
							oController.onClearFilterExtension(oEvent);
						},
						//Event handler for go button press
						onGoPress: function(oEvent){
							oState.filterBarController.onGoFilter();
						},

						onBeforeSFBVariantSave: function() {
							/*
							 * When the app is started, the VariantManagement of the SmartFilterBar saves the initial state in the
							 * STANDARD (=default) variant and therefore this event handler is called. So, even though the name of
							 * the event handler is confusing, we need to provide the initial state to allow the SmartFilterBar to
							 * restore it when needed (i.e. when the user clicks on restore). Thus, no check against STANDARD
							 * context is needed!
							 */
							var oCurrentAppState = getCurrentAppState();
							if (!this.getOwnerComponent().getProperty('smartVariantManagement')) {
								delete oCurrentAppState.customData["sap.suite.ui.generic.template.genericData"].contentView;
							}
							oState.oSmartFilterbar.setFilterData({
								_CUSTOM: oCurrentAppState.customData
							});
						},
						onAfterSFBVariantLoad: function() {
							var oData = oState.oSmartFilterbar.getFilterData();
							if (oData._CUSTOM !== undefined) {
								fnRestoreFilterState(oData._CUSTOM);
							} else {
								// make sure that the custom data are nulled for the STANDARD variant
								var oCustomAndGenericData = getFilterState();
								fnNullify(oCustomAndGenericData[customDataPropertyName]);
								fnNullify(oCustomAndGenericData[genericDataPropertyName]);
								fnRestoreFilterState(oCustomAndGenericData);
							}
							//No need to generate or save app state during initial load of application
							if (!bSVMLoaded && FilterUtil.isDefaultVariantSelected(oState)) {
								bSVMLoaded = true;
								return;
							} else if (!bSVMLoaded && !FilterUtil.isDefaultVariantSelected(oState)) {
								bSVMLoaded = true;
							}
							// store navigation context
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onBeforeRebindTable: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onBeforeRebindTable(oEvent);
							oController.onBeforeRebindTableExtension(oEvent);
						},
						onBeforeRebindChart: function(oEvent) {
							//oState.oSmartChart.oModels = oState.oSmartChart.getChart().oPropagatedProperties.oModels;
						},
						onShowDetails: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetails(oEvent.getSource(), oState);
						},
						onListNavigate: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onListNavigate(oEvent.getSource(), oState);
						},
						onCallActionFromToolBar: function(oEvent) {
							// Since our content toolbar is detached from the SmartTable, the standard util function getParentTable
							// would not work in our case.  We need to override this function when this action is triggered from our table

							var getParentTable_orig = oTemplateUtils.oCommonUtils.getParentTable;
							oTemplateUtils.oCommonUtils.getParentTable = function(){return oState.oSmartTable;};
							oTemplateUtils.oCommonEventHandlers.onCallActionFromToolBar(oEvent, oState);
							oTemplateUtils.oCommonUtils.getParentTable = getParentTable_orig;
							getParentTable_orig = null;
						},
						onShowDetailsIntent: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onShowDetailsIntent(oEvent, oState.oSmartFilterbar);
						},
						onCallActionFromList: function(oEvent) {

						},
						onDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigation(oEvent, oState);
						},
						onBeforeSemanticObjectLinkPopoverOpens: function(oEvent) {

							var oEventParameters = oEvent.getParameters();

							oTemplateUtils.oCommonUtils.processDataLossConfirmationIfNonDraft(function(){
								//Success function
								var sSelectionVariant = oState.oSmartFilterbar.getDataSuiteFormat();
								oTemplateUtils.oCommonUtils.semanticObjectLinkNavigation(oEventParameters, sSelectionVariant, oController);
							}, jQuery.noop, oState, jQuery.noop);
						},
						onAssignedFiltersChanged: function(oEvent) {
							if (oEvent && oEvent.getSource()) {
								if (oState && oState.oSmartFilterbar && oState.filterBarController) {
									oController.byId("template::FilterText").setText(oState.oSmartFilterbar.retrieveFiltersWithValuesAsText());
								}
							}
						},
						onToggleFiltersPressed: function() {
							var oComponent = oController.getOwnerComponent();
							var oTemplatePrivateModel = oComponent.getModel("_templPriv");
							oTemplatePrivateModel.setProperty("/listReport/isHeaderExpanded", (oTemplatePrivateModel.getProperty("/listReport/isHeaderExpanded") === true) ? false : true);
						},

						// ---------------------------------------------
						// store navigation context
						// note: function itself is handled by the corresponding control
						// ---------------------------------------------
						onSearchButtonPressed: function() {
							var oModel = oController.getOwnerComponent().getModel();
							oModel.attachEventOnce("requestSent", function() {
								fnStoreCurrentAppStateAndAdjustURL();
							});
							var fnRequestFailed = function(oEvent) {
								MessageUtils.handleError("getCollection", this, oTemplateUtils.oServices, oEvent.getParameters());
								var oSmartTable = this.getView().byId("table");
								oSmartTable.getTable().setBusy(false);
								MessageUtils.handleTransientMessages(oTemplateUtils.oServices.oApplication.getDialogFragmentForView.bind(null, null));
							}.bind(this);
							oModel.attachEventOnce("requestFailed", fnRequestFailed);
							oModel.attachEventOnce("requestCompleted", function(oEvent) {
								if (oEvent.getParameter("success")) {
									oModel.detachEvent("requestFailed", fnRequestFailed);
								}
							});

						},
						onSemanticObjectLinkPopoverLinkPressed: function(oEvent) {
							fnStoreCurrentAppStateAndAdjustURL();
							oTemplateUtils.oCommonEventHandlers.onSemanticObjectLinkPopoverLinkPressed(oEvent, oState);
						},
						onAfterTableVariantSave: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterApplyTableVariant: function() {
							//No need to generate or save app state during initial load of application
							if (!bTableInitialized && FilterUtil.isDefaultVariantSelected(oState)) {
								bTableInitialized = true;
								return;
							} else if (!bTableInitialized && !FilterUtil.isDefaultVariantSelected(oState)) {
								bTableInitialized = true;
							}
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterChartVariantSave: function() {
							fnStoreCurrentAppStateAndAdjustURL();
						},
						onAfterApplyChartVariant: function() {
							//No need to generate or save app state during initial load of application
							if (!bChartInitialized && FilterUtil.isDefaultVariantSelected(oState)) {
								bChartInitialized = true;
								return;
							} else if (!bChartInitialized && !FilterUtil.isDefaultVariantSelected(oState)) {
								bChartInitialized = true;
							}
						    fnStoreCurrentAppStateAndAdjustURL();
						},
						onFilterModeSegmentedButtonChange: function(oEvent) {
							oState.filterBarController.handleFilterSwitch(oEvent.getParameter("key"), oEvent.oSource._bApplyingVariant);
							oState.oController._templateEventHandlers.onSegmentButtonPressed();
						},
						/**
						* Called from Segmented Button to update the selected key to the variant and adjust the app state
						* @param {boolean} bIgnoreVariant - if true then do not store the selected key in variant
						**/
						onSegmentButtonPressed: function(bIgnoreVariant){
							if (!bIgnoreVariant) {
									oState.oController.byId('template::PageVariant').currentVariantSetModified(true);
									oState.oSmartFilterbar.setFilterData({
										_CUSTOM : getFilterState()
									});
							}
							fnStoreCurrentAppStateAndAdjustURL();
						},
						// ---------------------------------------------
						// END store navigation context
						// ---------------------------------------------

						onShareListReportActionButtonPress: function (oEvent) {
							if (!oState.oShareActionSheet) {
								oState.oShareActionSheet = oTemplateUtils.oCommonUtils.getDialogFragment("sap.suite.ui.generic.template.fragments.lists.ShareSheet", {
									shareEmailPressed: function() {
										fnStoreCurrentAppStateAndAdjustURL();
										sap.m.URLHelper.triggerEmail(null, oTemplateUtils.oCommonUtils.getText("EMAIL_HEADER", [oTemplateUtils.oServices.oApplication.getAppTitle()]), document.URL);
									},
									shareJamPressed: function() {
										fnStoreCurrentAppStateAndAdjustURL();
										var oShareDialog = sap.ui.getCore().createComponent({
											name: "sap.collaboration.components.fiori.sharing.dialog",
											settings: {
												object: {
													id: document.URL,
													share: oTemplateUtils.oServices.oApplication.getAppTitle()
												}
											}
										});
										oShareDialog.open();
									}
								}, "share", function(oFragment, oShareModel) {
									var oResource = sap.ui.getCore().getLibraryResourceBundle("sap.m");
									oShareModel.setProperty("/emailButtonText", oResource.getText("SEMANTIC_CONTROL_SEND_EMAIL"));
									oShareModel.setProperty("/jamButtonText", oResource.getText("SEMANTIC_CONTROL_SHARE_IN_JAM"));
									oShareModel.setProperty("/bookmarkButtonText", oResource.getText("SEMANTIC_CONTROL_SAVE_AS_TILE"));
									var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
									oShareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());

									oFragment.openBy(oEvent.getSource());
								});
							} else {
								oState.oShareActionSheet.openBy(oEvent.getSource());
							}
						},
						/**
						 * Called from Determining Button belonging to Chart's Annotaation of type DataFieldForAction
						 * @param  {Object} oEvent object
						 */
						onChartDeterminingDataFieldForAction: function(oEvent) {
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartChart);
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var sBindingPath = this.getView().getBindingPath();
							oTemplateUtils.oCommonUtils.triggerAction(aContexts, sBindingPath, oCustomData);
						},
						/**
						 * Called from Determining Button belonging to Table's Annotation of type DataFieldForAction
						 * @param  {object} oEvent
						 */
						onDeterminingDataFieldForAction: function(oEvent) {
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oButton = oEvent.getSource();
								var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
								var sTableBindingPath = oState.oSmartTable.getTableBindingPath();
								oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable);
							}
						},
						/**
						 * Called from Determining Button belonging to Table and Chart Annotation of type DataFieldForIntentBasedNavigation
						 * @param  {object} oEvent
						 */
						onDeterminingDataFieldForIntentBasedNavigation: function(oEvent) {
							var oButton = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oButton);
							var oContainerCustomData = oButton.getParent().data(FILTER);
							var oTable = oState.oSmartTable.getTable();
							var aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oTable);
							if (oContainerCustomData === CONTAINER_VIEW_CHART){
								aContexts = oTemplateUtils.oCommonUtils.getSelectedContexts(oState.oSmartChart);
							}
							var bRequiresContext = !(oCustomData.RequiresContext && oCustomData.RequiresContext === "false");
							if (bRequiresContext && aContexts.length === 0) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_NO_ITEM_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else if (bRequiresContext && aContexts.length > 1) {
								MessageBox.error(oTemplateUtils.oCommonUtils.getText("ST_GENERIC_MULTIPLE_ITEMS_SELECTED"), {
									styleClass: oTemplateUtils.oCommonUtils.getContentDensityClass()
								});
							} else {
								var oContext = bRequiresContext ? aContexts[0] : null;
								oTemplateUtils.oCommonEventHandlers.onDataFieldForIntentBasedNavigationSelectedContext(oContext, oCustomData, oState);
							}
						},
						/**
						* onInlineDataFieldForAction Trigger the action as specified in the inline buttons
						* @param  {Object} oEvent Event object
						*/
						onInlineDataFieldForAction: function(oEvent) {
							var oEventSource = oEvent.getSource();
							var oCustomData = oTemplateUtils.oCommonUtils.getElementCustomData(oEventSource);
							var oTable = oTemplateUtils.oCommonUtils.getOwnerControl(oEventSource);
							var sTableBindingPath = oTable.getParent().getTableBindingPath();
							var aContexts = [oEventSource.getBindingContext()];
							oTemplateUtils.oCommonUtils.triggerAction(aContexts, sTableBindingPath, oCustomData, oTable, oState);
						},
						/**
						* onInlineDataFieldForIntentBasedNavigation Trigger the navigation as specified in the inline buttons
						* @param  {Object} oEvent Event object
						*/
						onInlineDataFieldForIntentBasedNavigation: function(oEvent) {
							oTemplateUtils.oCommonEventHandlers.onInlineDataFieldForIntentBasedNavigation(oEvent.getSource(), oState);
						},
						/**
						 * Select handler for Auto Hide Segment Button
						 * @param  {Object} oEvent object
						 */
						onAutoHideToggle: function() {
							oState.chartController.updateTable();
							fnStoreCurrentAppStateAndAdjustURL();
						},
						/**
						 * Event handler when SmartControl full screen mode is changed
						 * @param  {sap.ui.base.Event} oEvent object
						 */
						onFullScreenToggled: function(oEvent) {
							var fullScreen = oEvent.getParameter("fullScreen");
							var oTemplatePrivate = oEvent.getSource().getModel("_templPriv");
							oTemplatePrivate.setProperty("/alp/fullScreen", fullScreen);
						},
						/**
						 * Event handler when Filter Dialog is launched
						 * @param  {Object} oEvent object
						 */
						onDialogOpened: function(oEvent) {
							//If VF are not used, none of this is needed
							//getFilterDialogContent() returns dialog contents as an array
							var aContent = oState.oSmartFilterbar.getFilterDialogContent();

							if (!oState.visualFilterDialogContainer) {
								oState.visualFilterDialogContainer = new VisualFilterDialogController();
								oState.visualFilterDialogContainer.init(oState);
							}
							//Make sure only CF contents is present and then add segmented button and VF contents.
							if (aContent.length < 2) {

								var filterSwitchItems = [
									new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-fields", width:"inherit", key:FILTER_MODE_COMPACT, tooltip:"{i18n>FILTER_COMPACT}"}),
									new sap.m.SegmentedButtonItem({icon:"sap-icon://filter-analytics", width:"inherit", key:FILTER_MODE_VISUAL, tooltip:"{i18n>FILTER_VISUAL}", enabled: "{_templPriv>/alp/searchable}"})
								];

								var filterSwitch = new sap.m.SegmentedButton({
									width:"inherit",
									selectedKey:FILTER_MODE_COMPACT,
									items: filterSwitchItems,
									select: function(oEvent) {
										var oSwitch = oEvent.getSource();
										//Keep the selected key as compact on this content
										oSwitch.setSelectedKey(FILTER_MODE_COMPACT);
										oState.visualFilterDialogContainer._toggle.call(oState.visualFilterDialogContainer);
									}
								});

								var oForm = oState.visualFilterDialogContainer._createForm();

								oState.oSmartFilterbar.addFilterDialogContent(oForm);

								var oToolbar = new sap.m.OverflowToolbar({
									design: sap.m.ToolbarDesign.Transparent,
									content: [
										new sap.m.ToolbarSpacer(),
										filterSwitch
									]
								}).addStyleClass("sapSmartTemplatesAnalyticalListPageFilterDialogToolbar");

								//Add segmented buttons to Compact filter form.
								aContent[0].setToolbar(oToolbar);

								filterSwitch.setModel(oState.oController.getView().getModel("_templPriv"), "_templPriv");
							}
							//filter dialog content should be decided based on current filterMode and bSearchable
							//If bSearchable then which mode is on that content should be active
							//if bSearchable is false then compact should come up first
							var oTemplatePrivate = oState.oController.getView().getModel("_templPriv");
							if (oTemplatePrivate.getProperty("/alp/searchable")) { //if searchable
								if (oTemplatePrivate.getProperty("/alp/filterMode") === FILTER_MODE_VISUAL) {
									oState.oSmartFilterbar.addFilterDialogContent(aContent[1]);
									//Set content width and content height while adding custom content.
									oState.oSmartFilterbar.setContentWidth(790);
									oState.oSmartFilterbar.setContentHeight(685);
								} else {
									oState.oSmartFilterbar.addFilterDialogContent(aContent[0]);
								}
							} else { //else always launch compact dialog
								oState.oSmartFilterbar.addFilterDialogContent(aContent[0]);
							}
						},
						//Event handling for dialog buttons
						onSearchForFilters: function(oEvent) {
							oState.visualFilterDialogContainer._triggerSearchInFilterDialog.call(oState.visualFilterDialogContainer, oEvent);
						},
						onDialogSearch: function(oEvent) {
							oState.visualFilterDialogContainer._searchDialog.call(oState.visualFilterDialogContainer);
						},
						onDialogCancel: function(oEvent) {
							oState.visualFilterDialogContainer._cancelDialog.call(oState.visualFilterDialogContainer);
						},
						onRestore: function(oEvent) {
							oState.visualFilterDialogContainer._restoreDialog.call(oState.visualFilterDialogContainer);
						},
						//Enable/Disable toolbar butttons on data receive - currently only SmartTable
						onDataReceived: function(oEvent) {
							//enable toolbar before enabling the buttons.
							oState.oContentArea.enableToolbar();
							oTemplateUtils.oCommonEventHandlers.onDataReceived(oEvent);
						},
						//Enable/Disable toolbar buttons on row selection in table
						onRowSelectionChange: function(oEvent) {
							var oTable = oEvent.getSource();
							oTemplateUtils.oCommonUtils.setEnabledToolbarButtons(oTable);
						}
					},
					extensionAPI: new ExtensionAPI(oTemplateUtils, oController, oState)
				};
			}
		};
	});

}; // end of sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.Canvas.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.Canvas.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/Canvas/Component",["jquery.sap.global", "sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/detailTemplates/detailUtils",
	"sap/suite/ui/generic/template/Canvas/controller/ControllerImplementation"
], function(jQuery,TemplateAssembler, TemplateComponent, detailUtils, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy = {};

		var oBase = detailUtils.getComponentBase(oComponent, oComponentUtils, oViewProxy);                         

		var oSpecific =  {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
				}
			}
		};
		return jQuery.extend(oBase, oSpecific);
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.Canvas", {

			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					// reference to smart template
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.Canvas.view.Canvas"
					},
					"requiredControls": "object"
				},
				// app descriptor format
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/Canvas/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/Component",["jquery.sap.global", "sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/lib/TemplateComponent", "sap/suite/ui/generic/template/detailTemplates/detailUtils",
	"sap/suite/ui/generic/template/ObjectPage/controller/ControllerImplementation"
], function(jQuery, TemplateAssembler, TemplateComponent, detailUtils, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent, oComponentUtils) {
		var oViewProxy = {};
		
		var oBase = detailUtils.getComponentBase(oComponent, oComponentUtils, oViewProxy);                         

		var oSpecific = {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					adaptNavigationParameterExtension: function(oSelectionVariant, oObjectInfo) {},
					onBeforeRebindTableExtension: function(oEvent) {},
					onListNavigationExtension: function(oEvent){}
				}
			},
			getTemplateSpecificParameters: function(){
				return {
					breadCrumb: oComponentUtils.getBreadCrumbInfo()	
				};
			},
			refreshBinding: function(bUnconditional, mRefreshInfos) {
				// default implementation: refresh element binding
				if (bUnconditional) {
					var oElementBinding = oComponent.getComponentContainer().getElementBinding();
					if (oElementBinding) {
						oElementBinding.refresh(true);
					}
				} else {
					oViewProxy.refreshFacets(mRefreshInfos);
				}
			},
			presetDisplayMode: function(iDisplayMode, bIsAlreadyDisplayed){
				if (bIsAlreadyDisplayed){
					return; // wait for the data to come for the case that the view is already displayed
				}
				var oTemplateModel = oComponentUtils.getTemplatePrivateModel();
				oTemplateModel.setProperty("/objectPage/displayMode", iDisplayMode);
			},
			beforeRebind: function(){
				oViewProxy.beforeRebind();
			},
			afterRebind: function(){
				oViewProxy.afterRebind();
			},
			enhanceExtensionAPI4Reuse: function(oExtensionAPI, oEmbeddedComponentInfo){
				oExtensionAPI.setSectionHidden = function(bHidden){
					var oTemplateModel = oComponentUtils.getTemplatePrivateModel();
					oTemplateModel.setProperty("/generic/embeddedComponents/" + oEmbeddedComponentInfo.embeddedKey + "/hidden", bHidden);					
				};	
			}
		};
		return jQuery.extend(oBase, oSpecific);
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.ObjectPage", {

			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					// reference to smart template
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.ObjectPage.view.Details"
					},
					// shall button "Related Apps" be visible on the object page?
					"showRelatedApps": {
						"type": "boolean",
						"defaultValue": "false"
					},
					// hide chevron for unauthorized inline external navigation?
					"hideChevronForUnauthorizedExtNav": {
						"type": "boolean",
						"defaultValue": "false"
					},
					// shall it be possible to edit the contents of the header?
					"editableHeaderContent": {
						"type": "boolean",
						"defaultValue": "false"
					},
					"gridTable": "boolean",
					"tableType": "string",
					"sections": "object",
					// Shall the simple header facets be used?
					"simpleHeaderFacets": {
						"type": "boolean",
						"defaultValue": "false"
					},
					//Allow deep linking to sub object pages?
					"allowDeepLinking": "boolean"
				},
				// app descriptor format
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/ObjectPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport",["jquery.sap.global", "sap/ui/core/UIComponent", "sap/ui/model/json/JSONModel",
		"sap/suite/ui/generic/template/extensionAPI/extensionAPI"
	],
	function(jQuery, UIComponent, JSONModel, extensionAPI) {
		"use strict";
		var ReuseComponentSupport = {},
			sJQueryDebugLogName = "sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport";

		function fnHandleCallback(oComponentContext, bUnconditional) {
			if (!oComponentContext.extensionAPI){
				return;
			}
			var oDefaultModelBindingContext = oComponentContext.component.getBindingContext();
			var sDefaultModelBindingContextPath = oDefaultModelBindingContext && oDefaultModelBindingContext.getPath();
			if (!bUnconditional && (!oDefaultModelBindingContext || sDefaultModelBindingContextPath === oComponentContext.currentContextPath)){
				return;
			}
			oComponentContext.currentContextPath = sDefaultModelBindingContextPath;
			var	oModel = oComponentContext.component.getModel();
			var fnCurrentCallback = (oComponentContext.firstTime && oComponentContext.component.stStart) || oComponentContext.component.stRefresh;
			oComponentContext.firstTime = false;
			if (fnCurrentCallback){
				fnCurrentCallback.call(oComponentContext.component, oModel, oDefaultModelBindingContext, oComponentContext.extensionAPI);
			}
		}

		function mixInto(oComponent, sComponentModelName, bTwoWaySync) {
			/* Initialize smart template context */
			var oComponentContext =  {
				component: oComponent,
				firstTime: true,
				currentContextPath: null
			};
			
			var fnHandleCallbackLocalized = fnHandleCallback.bind(null, oComponentContext);
			var oReuseComponentProxy = {
				pathUnchangedCallBack: fnHandleCallbackLocalized
			};
			oComponentContext.proxy = oReuseComponentProxy;

			//Subscribe to context ready-events (only if the reuse components shows interest by defining at least one of the corresponding functions)
			if (oComponent.stRefresh || oComponent.stStart) {
				oComponent.attachEvent("modelContextChange", fnHandleCallbackLocalized.bind(null, false));
			}
			
			var fnOnBeforeRendering = oComponent.onBeforeRendering;
			oComponent.onBeforeRendering = function(){
				oComponent.onBeforeRendering = fnOnBeforeRendering;
				oComponent._stProxy = oReuseComponentProxy;
				var oExtensionAPIPromise = extensionAPI.getExtensionAPIPromise(oComponent.oContainer);
				oExtensionAPIPromise.then(function(oExtensionAPI){
					oComponentContext.extensionAPI = oExtensionAPI;
					delete oComponent._stProxy;
					fnHandleCallbackLocalized();
				});
				if (fnOnBeforeRendering){
					fnOnBeforeRendering.apply(oComponent, arguments);	
				}
			};

			//Create component model in case specified
			if (sComponentModelName) {
				var oProperties = oComponent.getMetadata().getProperties();
				var oModelData = {}; // initial data for the component model
				for (var sProperty in oProperties){
					oModelData[sProperty] = oComponent.getProperty(sProperty);	// transfer property values to the model
				}				
				var oComponentModel = new JSONModel(oModelData);
				oComponent.setModel(oComponentModel, sComponentModelName);
				var fnSetProperty = oComponent.setProperty || jQuery.noop;
				//overwrite set property
				oComponent.setProperty = function(sName, value) {
					/* we overwrite the set property function of UI5 to automatically update the component model
					 * but first we need to call the original (aka super in other languages)
					 */
					fnSetProperty.apply(oComponent, arguments);
					oComponentModel.setProperty("/" + sName, value);
					jQuery.sap.log.debug(oComponent.getId() + ":" + oComponent.getMetadata().getName() + ": setProperty " + sName + "=" + value, sJQueryDebugLogName);
				};
				oComponent.getComponentModel = oComponent.getComponentModel || function(){ return oComponentModel; };
				if (bTwoWaySync){
					var fnUpdateProperty = function(sProp, oBinding){
						var oValue = oBinding.getValue();
						if (oValue !== oComponent.getProperty(sProp)){
							fnSetProperty.call(oComponent, sProp, oValue);
						}
					};
					for (sProperty in oProperties){
						var oBinding = oComponentModel.bindProperty("/" + sProperty);
						oBinding.attachChange(fnUpdateProperty.bind(null, sProperty, oBinding));
					}
				}
			}
		}

		/**
		 * Mixin function to transform a regular UIComponent instance into a reuse component for smart templates
		 *
		 * By using the mixInto method the existing component is checked if it implements the following functions:
		 * <ul>
		 *  <li><code>stStart(oModel, oBindingContext, oExtensionAPI)</code> - is called when the model and the context is set for the first time above the compoenent</li>
		 *  <li><code>stRefresh(oModel, oBindingContext, oExtensionAPI)</code> - is called everytime a new context is set above the component</li>
		 * </ul>
		 * Note that both functions can be called with <code>oBindingContext</code> being empty. This happens in case the page the component is positioned on is opened for creating
		 * a new object in a non-draft scenario.
		 *
		 * @name sap.suite.ui.generic.template.extensionAPI.ReuseComponentSupport.mixInto
		 * @param {sap.ui.core.UIComponent} oComponent the component to be transformed. The following restrictions apply to this component:
		 * <ul>
		 *  <li>The object must not define or access any properties or methods starting with <code>_st</code>. This namespace is reserved for smart template specific coding.
		 *	<li>The object must not define any property or method starting with <code>st</code> with the exception of the methods described above.
		 * </ul>
		 * @param {string} [sComponentModelName] if this paramater is truthy a JSON model will created that contains the properties defined in the meatdata of <code>oComponent</code>.
		 * The model will be attached to the component with the given name. Moreover, a method <code>getComponentModel</code> will be added to <code>oComponent</code> giving access
		 * to this model.
		 * The properties in the <i>component model</i> will be automatically synced with the corresponding properties of <code>oComponent</code>.
		 * @param {boolean} [bTwoWaySync] This parameters specifies the synchronisation between the properties of the component and the corresponding properties
		 * of the component model. </br>
		 * Changes applied to a property of the component will always be forwarded to the corresponding property of the component model. </br>
		 * Changes applied to a property of the component model which corresponds to a property of the component will only be forwwarded accordingly if the
		 * parameter <code>bTwoWaySync</code> is truthy.
		 * @public
		 */
		ReuseComponentSupport.mixInto = function(oComponent, sComponentModelName, bTwoWaySync) {
		    if (!(oComponent instanceof UIComponent)){
				throw new Error("Reuse component must be an instance of sap.ui.core.UIComponent");
			}
			mixInto(oComponent, sComponentModelName, bTwoWaySync);
		};

		return ReuseComponentSupport;
	});
}; // end of sap/suite/ui/generic/template/extensionAPI/ReuseComponentSupport.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.AnalyticalListPage.Component') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.AnalyticalListPage.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/AnalyticalListPage/Component",["sap/suite/ui/generic/template/lib/TemplateAssembler",
	"sap/suite/ui/generic/template/AnalyticalListPage/controller/ControllerImplementation"
], function(TemplateAssembler, ControllerImplementation) {
	"use strict";

	function getMethods(oComponent,oComponentUtils) {
		var oViewProxy = {};

		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					getVisibleSelectionsWithDefaults: function() {
						// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
						// (see method setSmartFilterBarDefaults) and which are currently visible.
						// This is needed by _getBackNavigationParameters in the NavigationController.
						var aVisibleFields = [];
						// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
						// aVisibleFields.push("KeyDate");
						// }
						return aVisibleFields;
					},

					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onInitSmartFilterBarExtension: function(oEvent) {},
					getCustomAppStateDataExtension: function(oCustomData) {},
					restoreCustomAppStateDataExtension: function(oCustomData) {},
					onBeforeRebindTableExtension: function(oEvent) {},
					onBeforeRebindChartExtension: function(oEvent) {},
					onClearFilterExtension: function(oEvent) {},
					adaptNavigationParameterExtension: function(oSelectionVariant, oObjectInfo) {},
					onAfterCustomModelCreation: function(oCustomModel) {}
				}
			},
			init: function() {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				// Note that component properties are not yet available here
				oTemplatePrivate.setProperty("/listReport", {});
				// Property to store UI settings of ALP
				oTemplatePrivate.setProperty("/alp", {
					visualFilter: {}
				}); // Note that component properties are not yet available here

				//Filter model
				var filterModel = new sap.ui.model.json.JSONModel();
				//Model is bound to the component as it affects various controls
				oComponent.setModel(filterModel, "_filter");
			},
			//Adds Pageheader to the FIORI shell
			onActivate: function() {
				oComponentUtils.setBackNavigation(undefined);
				oViewProxy.onComponentActivate();
			},
			refreshBinding: function() {
				oViewProxy.refreshBinding();
			},
			getUrlParameterInfo: function() {
				return oViewProxy.getUrlParameterInfo();
			},
			overwrite: {
				updateBindingContext: function() {

					sap.suite.ui.generic.template.lib.TemplateComponent.prototype.updateBindingContext.apply(oComponent, arguments);

					//commented below as here we get the metamodel only if the oBindingContext is present.
					/*var oBindingContext = oComponent.getBindingContext();
					if (oBindingContext) {
						oComponent.getModel().getMetaModel().loaded()
						.then(
							function() {
								//var oUIModel = oComponent.getModel("ui");

									// set draft status to blank according to UI decision
									// oUIModel.setProperty("/draftStatus", "");

									var oActiveEntity = oBindingContext.getObject();
									if (oActiveEntity) {

										var oDraftController = oComponent.getAppComponent().getTransactionController()
										.getDraftController();
										var oDraftContext = oDraftController.getDraftContext();
										var bIsDraft = oDraftContext.hasDraft(oBindingContext) && !oActiveEntity.IsActiveEntity;
										//var bHasActiveEntity = oActiveEntity.HasActiveEntity;
										if (bIsDraft) {
											oUIModel.setProperty("/editable", true);
											oUIModel.setProperty("/enabled", true);
										}
									}
								});
						//fnBindBreadCrumbs();
					}*/
				}
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.suite.ui.generic.template.AnalyticalListPage", {
			metadata: {
				library: "sap.suite.ui.generic.template",
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.suite.ui.generic.template.AnalyticalListPage.view.AnalyticalListPage"
					},
					"qualifier": {
						/*
							optional qualifier for a SelectionPresentationVariant or a PresentationVariant
							annotation. If no SelectionPresentationVariant exists with or without qualifier
							a PresentationVariant with the qualifier is searched. It always falls back to default
							of first SPV and than PV if qualifier can not be found
						 */
						"type": "string",
						"defaultValue": ""
					},
					"gridTable": {
						/*
							This setting allows app developer to use GridTable in content area
							If sap:semantics=aggregate then AnalyticalTable is used and this setting have no effect
							If the display type is not desktop but mobile or tablet or other devices always responsive table is shown.
							Note: This Property is depricated. Use tableType Property to achieve the same henceforth.
							using tableType to get gridTable --> instead of using gridTable === true, use tableType === GridTable.
						 */
						"type": "boolean",
						"defaultValue": false
					},
					"multiSelect": {
						/*
							This setting allows app developer to show checkbox for selecting multiple items in table.
							Only if there are Actions (annotation or manifest), this setting would come into effect.
						 */
						"type": "boolean",
						"defaultValue": false
					},
					"smartVariantManagement": {
						/*
							This setting allows developer to choose Control level variant instead of Page Variant
							CAUTION: Change in this setting would require app developer to recreate all previously
							saved variants.
						 */
						"type": "boolean",
						"defaultValue": true
					},
					"defaultContentView":{
						/*
							This setting allows developer to set the content view which will be displayed on app launch
							If the end user has chosen any other view in their default variants then that will have priority
							over this setting.
							Default is hybrid view (charttable).
							Valid values "charttable", "chart", "table"
						 */
						"type": "string",
						"defaultValue": "charttable"
					},
					"defaultFilterMode": {
						/*
							This setting allows developer to set the default filter mode which will be displayed on app launch
							If the end user has chosen a different filter mode in their default variants then that will have priority
							over this setting.
							Default is visual filter.
							Valid values "visual", "compact"
						 */
						"type": "string",
						"defaultValue": "visual"
					},
					/*
						This setting allows developer to define KPI Tags in ALP, e.g.
						"ActualCosts": {
							"model": "kpi",	//model defined in the manifest sap.ui5.models
							"entitySet": "CZ_PROJECTKPIS",	//name of the entity set, in case of parameterized set please mention result entity set name
							"qualifier": "ActualCosts",	//Qualifier of SelectionPresentationVariant which have a DataPoint and Chart visualization
							"detailNavigation": "ActualCostsKPIDetails"	//[Optional] Key of Outbound navigation defined in sap.app.crossNavigation.outbounds
						}
					*/
					"keyPerformanceIndicators": "array",
					"autoHide": {
						/*
							This setting allows developer to determine chart / table interaction. 'true' would mean chart act as
							filter for table, 'false' would mean that matching table rows are highlighted but table is not
							filtered.
						 */
						"type": "boolean",
						"defaultValue": true
					},
					"showAutoHide": {
						/*
							This setting allows developer to hide the autoHide segmented button. When the button is hidden, default
							chart/table interaction is filter.
						 */
						"type": "boolean",
						"defaultValue": true
					},
					"hideVisualFilter": {
						/*
							DEPRECATED:	This setting allows developer to hide the visual filters.
							PLEASE DO NOT USE THIS SETTING IN NEW PROJECTS
						 */
						"type": "boolean",
						"defaultValue": false
					},
					"showGoButtonOnFilterBar": {
						/*
							This setting allows developer to run ALP in non live mode. When it is set to true, app have a "GO"
							button in the Filter Bar and the filter selections are not applied till Go is pressed.
						 */
						"type": "boolean",
						"defaultValue": false
					},
					"tableType": {
						/*
							This setting allows developer to define the table type of their choice.
							It takes more precedence from any other settings like gridTable.
							Eg : if gridTable == true and tableType === AnalyticalTable it takes more precedence and render Analytical table.
							@since 1711
							Valid values: AnalyticalTable, GridTable or ResponsiveTable
						 */
						"type": "string",
						"defaultValue": ""
					},
					"showItemNavigationOnChart": {
						/*
							This setting allows developer to display a Item Navigation on SmartChart's "Detail" popover list.
						 */
						"type": "boolean",
						"defaultValue": false
					},
					"condensedTableLayout": {
						/*
							This setting allows user to display SmartTable in condensed mode. More line items are visible
							in this mode compared to compact.
						 */
						"type": "boolean",
						"defaultValue": true
					}
				},
				"manifest": "json"
			}
		});
});
}; // end of sap/suite/ui/generic/template/AnalyticalListPage/Component.js
