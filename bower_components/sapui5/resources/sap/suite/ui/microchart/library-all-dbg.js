// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.microchart.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.AreaMicroChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.AreaMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/AreaMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";

	/**
	 * AreaMicroChartRenderer renderer.
	 * @namespace
	 */
	var AreaMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *			the RenderManager that can be used for writing to
	 *			the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *			the control to be rendered
	 */
	AreaMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		var sAriaLabel = oControl.getAltText();

		var sTopLblType = ((oControl.getView() == "Normal" && oControl.getFirstYLabel() && oControl.getFirstYLabel().getLabel()) ? "L" : "")
			+ ((oControl.getMaxLabel() && oControl.getMaxLabel().getLabel()) ? "C" : "")
			+ ((oControl.getView() == "Normal" && oControl.getLastYLabel() && oControl.getLastYLabel().getLabel()) ? "R" : "");

		var sBtmLblType = ((oControl.getView() == "Normal" && oControl.getFirstXLabel() && oControl.getFirstXLabel().getLabel()) ? "L" : "")
			+ ((oControl.getMinLabel() && oControl.getMinLabel().getLabel()) ? "C" : "")
			+ ((oControl.getView() == "Normal" && oControl.getLastXLabel() && oControl.getLastXLabel().getLabel()) ? "R" : "");

		var bLeftLbls, bRightLbls;
		bRightLbls = bLeftLbls = oControl.getView() == "Wide";

		oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addStyle("width", oControl.getIsResponsive() ? "100%" : oControl.getWidth());
			oRm.addStyle("height", oControl.getIsResponsive() ? "100%" : oControl.getHeight());
			oRm.writeStyles();
			oRm.writeAttribute("role", "presentation");
			oRm.writeAttributeEscaped("aria-label", sAriaLabel);
			oRm.addClass("sapSuiteAMC");
			if (oControl.hasListeners("press")) {
				oRm.addClass("sapSuiteUiMicroChartPointer");
				oRm.writeAttribute("tabindex", "0");
			}

			if (sTopLblType) {
				oRm.addClass("sapSuiteAMCTopLbls");
			}
			if (sBtmLblType) {
				oRm.addClass("sapSuiteAMCBtmLbls");
			}

			oRm.writeClasses();
			oRm.write(">");
				if (sTopLblType && oControl.getShowLabel()) {
					var sTopLblTypeClass = "sapSuiteAMCLblType" + sTopLblType;
					oRm.write("<div");
					oRm.writeAttributeEscaped("id", oControl.getId() + "-top-labels");
					oRm.addClass("sapSuiteAMCLabels");
					oRm.addClass("sapSuiteAMCPositionTop");
					oRm.writeClasses();
					oRm.write(">");
						this._writeLabel(oRm, oControl, oControl.getFirstYLabel(), "-top-left-lbl", "sapSuiteAMCPositionLeft", sTopLblTypeClass);
						this._writeLabel(oRm, oControl, oControl.getMaxLabel(), "-top-center-lbl", "sapSuiteAMCPositionCenter", sTopLblTypeClass);
						this._writeLabel(oRm, oControl, oControl.getLastYLabel(), "-top-right-lbl", "sapSuiteAMCPositionRight", sTopLblTypeClass);
					oRm.write("</div>");
				}

				if (bLeftLbls && oControl.getShowLabel()) {
					oRm.write("<div");
					oRm.writeAttributeEscaped("id", oControl.getId() + "-left-labels");
					oRm.addClass("sapSuiteAMCSideLabels");
					oRm.addClass("sapSuiteAMCPositionLeft");
					oRm.writeClasses();
					oRm.write(">");
						this._writeLabel(oRm, oControl, oControl.getFirstYLabel(), "-top-left-lbl", "sapSuiteAMCPositionTop", "sapSuiteAMCPositionLeft");
						this._writeLabel(oRm, oControl, oControl.getFirstXLabel(), "-btm-left-lbl", "sapSuiteAMCPositionBtm", "sapSuiteAMCPositionLeft");
					oRm.write("</div>");
				}

				oRm.write("<div");
				oRm.writeAttributeEscaped("id", oControl.getId() + "-canvas-cont");
				oRm.addClass("sapSuiteAMCCanvas");
				oRm.writeClasses();
				oRm.write(">");
					oRm.write("<canvas");
					oRm.writeAttributeEscaped("id", oControl.getId() + "-canvas");
					oRm.addStyle("width", "100%");
					oRm.addStyle("height", "100%");
					oRm.addStyle("position", "absolute");
					oRm.addStyle("display", "block");
					oRm.writeStyles();
					oRm.write("></canvas>");
				oRm.write("</div>");

				if (bRightLbls && oControl.getShowLabel()) {
					oRm.write("<div");
					oRm.writeAttributeEscaped("id", oControl.getId() + "-right-labels");
					oRm.addClass("sapSuiteAMCSideLabels");
					oRm.addClass("sapSuiteAMCPositionRight");
					oRm.writeClasses();
					oRm.write(">");
						this._writeLabel(oRm, oControl, oControl.getLastYLabel(), "-top-right-lbl", "sapSuiteAMCPositionTop", "sapSuiteAMCPositionRight");
						this._writeLabel(oRm, oControl, oControl.getLastXLabel(), "-btm-right-lbl", "sapSuiteAMCPositionBtm", "sapSuiteAMCPositionRight");
					oRm.write("</div>");
				}

				if (sBtmLblType && oControl.getShowLabel()) {
					var sBtmLblTypeClass = "sapSuiteAMCLblType" + sBtmLblType;
					oRm.write("<div");
					oRm.writeAttributeEscaped("id", oControl.getId() + "-bottom-labels");
					oRm.addClass("sapSuiteAMCLabels");
					oRm.addClass("sapSuiteAMCPositionBtm");
					oRm.writeClasses();
					oRm.write(">");
						this._writeLabel(oRm, oControl, oControl.getFirstXLabel(), "-btm-left-lbl", "sapSuiteAMCPositionLeft", sBtmLblTypeClass);
						this._writeLabel(oRm, oControl, oControl.getMinLabel(), "-btm-center-lbl", "sapSuiteAMCPositionCenter", sBtmLblTypeClass);
						this._writeLabel(oRm, oControl, oControl.getLastXLabel(), "-btm-right-lbl", "sapSuiteAMCPositionRight", sBtmLblTypeClass);
					oRm.write("</div>");
				}

				oRm.write("<div");
				oRm.writeAttributeEscaped("id", oControl.getId() + "-css-helper");
				oRm.addStyle("display", "none");
				oRm.writeStyles();
				oRm.write("></div>");

		oRm.write("</div>");
	};

	AreaMicroChartRenderer._writeLabel = function(oRm, oControl, oLabel, sId, sClass, sType) {
		var sLabel = oLabel ? oLabel.getLabel() : "";
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + sId);

		if (oLabel) {
			oRm.addClass(jQuery.sap.encodeHTML("sapSuiteAMCSemanticColor" + oLabel.getColor()));
		}

		oRm.addClass("sapSuiteAMCLbl");
		oRm.addClass(jQuery.sap.encodeHTML(sClass));
		oRm.addClass(jQuery.sap.encodeHTML(sType));
		oRm.writeClasses();
		oRm.write(">");
			oRm.writeEscaped(sLabel);
		oRm.write("</div>");
	};

	return AreaMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/AreaMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ColumnMicroChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.ColumnMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ColumnMicroChartRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * ColumnMicroChartRenderer renderer.
	 * @namespace
	 */
	var ColumnMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to	the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl the control to be rendered
	 */
	ColumnMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		function fnWriteLbl(oLabel, sId, sClass, bWideBtmLbl) {
			oRm.write("<div");
			oRm.writeAttributeEscaped("id", oControl.getId() + sId);
			oRm.addClass("sapSuiteClMCLbl");
			oRm.addClass(jQuery.sap.encodeHTML(sClass));
			oRm.addClass(jQuery.sap.encodeHTML("sapSuiteClMCSemanticColor" + oLabel.getColor()));
			if (bWideBtmLbl) {
				oRm.addClass("sapSuiteClMCWideBtmLbl");
			}
			oRm.writeClasses();
			oRm.write(">");
				oRm.writeEscaped(oLabel.getLabel());
			oRm.write("</div>");
		}

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteClMC");
		var sSize = "sapSuiteClMCSize" + oControl.getSize();
		if (oControl.getIsResponsive()) {
			sSize = "sapSuiteClMCResponsive";
		}
		oRm.addClass(sSize);
		var sAriaLabel = oControl.getAltText();

		if (oControl.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);

		oRm.writeClasses();
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", oControl.getHeight());
		oRm.writeStyles();
		oRm.write(">");
			var bLeftTopLbl = oControl.getLeftTopLabel() && oControl.getLeftTopLabel().getLabel() != "";
			var bRightTopLbl = oControl.getRightTopLabel() && oControl.getRightTopLabel().getLabel() != "";
			var bLeftBtmLbl = oControl.getLeftBottomLabel() && oControl.getLeftBottomLabel().getLabel() != "";
			var bRightBtmLbl = oControl.getRightBottomLabel() && oControl.getRightBottomLabel().getLabel() != "";

			if (bLeftTopLbl || bRightTopLbl) {
				oRm.write("<div");
				oRm.writeAttributeEscaped("id", oControl.getId() + "-top-lbls");
				oRm.addClass("sapSuiteClMCLbls");
				oRm.addClass("sapSuiteClMCPositionTop");
				oRm.writeClasses();
				oRm.write(">");
					var bWideTopLbl = bLeftTopLbl ^ bRightTopLbl;
					if (bLeftTopLbl) {
						fnWriteLbl(oControl.getLeftTopLabel(), "-left-top-lbl", "sapSuiteClMCPositionLeft", bWideTopLbl);
					}

					if (bRightTopLbl) {
						fnWriteLbl(oControl.getRightTopLabel(), "-right-top-lbl", "sapSuiteClMCPositionRight", bWideTopLbl);
					}
				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.writeAttributeEscaped("id", oControl.getId() + "-content");
			oRm.addClass("sapSuiteClMCCnt");
			if (bLeftTopLbl || bRightTopLbl) {
				oRm.addClass("sapSuiteClMCPositionTop");
			}
			if (bLeftBtmLbl || bRightBtmLbl) {
				oRm.addClass("sapSuiteClMCPositionBtm");
			}
			oRm.writeClasses();
			oRm.write(">");
				oRm.write("<div");
				oRm.writeAttributeEscaped("id", oControl.getId() + "-bars");
				oRm.addClass("sapSuiteClMCBars");
				oRm.writeClasses();
				oRm.write(">");
					var iColumnsNum = oControl.getColumns().length;
					for (var i = 0; i < iColumnsNum; i++) {
						var oColumn = oControl.getColumns()[i];
						oRm.write("<div");
						oRm.writeAttributeEscaped("id", oControl.getId() + "-bar-" + i);
						oRm.writeAttribute("data-bar-index", i);
						oRm.addClass("sapSuiteClMCBar");
						oRm.addClass(jQuery.sap.encodeHTML("sapSuiteClMCSemanticColor" + oColumn.getColor()));
						if (oColumn.hasListeners("press")) {
							oRm.writeAttribute("tabindex", "0");
							oRm.writeAttribute("role", "presentation");
							var sBarAltText = oControl._getBarAltText(i);
							oRm.writeAttributeEscaped("title", sBarAltText);
							oRm.writeAttributeEscaped("aria-label", sBarAltText);
							oRm.addClass("sapSuiteUiMicroChartPointer");
						}
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");
					}
				oRm.write("</div>");
			oRm.write("</div>");

			if (bLeftBtmLbl || bRightBtmLbl) {
				oRm.write("<div");
				oRm.writeAttributeEscaped("id", oControl.getId() + "-btm-lbls");
				oRm.addClass("sapSuiteClMCLbls");
				oRm.addClass("sapSuiteClMCPositionBtm");
				oRm.writeClasses();
				oRm.write(">");
					var bWideBtmLbl = bLeftBtmLbl ^ bRightBtmLbl;
					if (bLeftBtmLbl) {
						fnWriteLbl(oControl.getLeftBottomLabel(), "-left-btm-lbl", "sapSuiteClMCPositionLeft", bWideBtmLbl);
					}

					if (bRightBtmLbl) {
						fnWriteLbl(oControl.getRightBottomLabel(), "-right-btm-lbl", "sapSuiteClMCPositionRight", bWideBtmLbl);
					}
				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.writeAttributeEscaped("id", oControl.getId() + "-hidden");
			oRm.writeAttribute("aria-hidden", "true");
			oRm.writeAttribute("tabindex", "0");
			oRm.writeStyles();
			oRm.write(">");
			oRm.write("</div>");
		oRm.write("</div>");
	};

	return ColumnMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/ColumnMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.DeltaMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.DeltaMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/DeltaMicroChartRenderer",[ 'jquery.sap.global' ],
	function(jQuery) {
	"use strict";

	/**
	 * DeltaMicroChart renderer.
	 * @namespace
	 */
	var DeltaMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	DeltaMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		var sDv1 = oControl.getDisplayValue1();
		var sDv2 = oControl.getDisplayValue2();
		var fVal1 = oControl.getValue1();
		var fVal2 = oControl.getValue2();
		var sDdv = oControl.getDeltaDisplayValue();
		var sAdv1ToShow = sDv1 ? sDv1 : "" + fVal1;
		var sAdv2ToShow = sDv2 ? sDv2 : "" + fVal2;
		var sAddvToShow = sDdv ? sDdv : "" + Math.abs(fVal1 - fVal2).toFixed(Math.max(oControl._digitsAfterDecimalPoint(fVal1), oControl._digitsAfterDecimalPoint(fVal2)));
		var sColor = "sapSuiteDMCSemanticColor" + oControl.getColor();
		var sAriaLabel = oControl.getAltText();

		var sSize;
		if (oControl.getIsResponsive()) {
			sSize = "sapSuiteDMCResponsive";
		} else {
			sSize = "sapSuiteDMCSize" + oControl.getSize();
		}

		var bNoTitles = (!oControl.getTitle1() && !oControl.getTitle2());

		function getDir(bLeft) {
			return bLeft ? "sapSuiteDMCDirectionLeft" : "sapSuiteDMCDirectionRight";
		}

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteDMC");
			if (oControl.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		oRm.addClass(sSize);
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);
		oRm.writeClasses();
		if (oControl.getWidth()) {
			oRm.addStyle("width", oControl.getWidth());
			oRm.writeStyles();
		}

		oRm.write(">");

			oRm.write("<div");
			oRm.addClass("sapSuiteDMCVerticalAlignmentContainer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("<div");
			oRm.addClass("sapSuiteDMCCnt");
			oRm.addClass(sSize);
			oRm.writeClasses();
			oRm.write(">");
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-title1");
				oRm.addClass("sapSuiteDMCTitle");
				oRm.addClass("sapSuiteDMCPositionTop");
				oRm.writeClasses();
				oRm.write(">");
					oRm.writeEscaped(oControl.getTitle1());
				oRm.write("</div>");

				oRm.write("<div");
				oRm.addClass("sapSuiteDMCChart");
				oRm.addClass(sSize);
				if (bNoTitles){
					oRm.addClass("sapSuiteDMCNoTitles");
				}
				oRm.writeClasses();
				oRm.writeAttribute("id", oControl.getId() + "-dmc-chart");
				oRm.write(">");
					oRm.write("<div");
					oRm.addClass("sapSuiteDMCBar");
					oRm.addClass("sapSuiteDMCBar1");
					oRm.addClass(sSize);
					if (oControl._oChartData.delta.isMax) {
						oRm.addClass("sapSuiteDMCBarDeltaMaxDelta");
					}
					if (oControl._oChartData.bar1.isSmaller) {
						oRm.addClass("sapSuiteDMCBarSizeSmaller");
					}
					if (parseFloat(oControl._oChartData.bar1.width) === 0) {
						oRm.addClass("sapSuiteDMCBarZeroWidth");
					} else if (parseFloat(oControl._oChartData.bar2.width) === 0) {
						oRm.addClass("sapSuiteDMCBarUniqueNonzero");
					}
					oRm.addClass(jQuery.sap.encodeHTML(getDir(oControl._oChartData.bar1.left)));
					oRm.writeClasses();
					oRm.addStyle("width", jQuery.sap.encodeHTML(oControl._oChartData.bar1.width + "%"));
					oRm.writeStyles();
					oRm.writeAttribute("id", oControl.getId() + "-dmc-bar1");
					oRm.write(">");
						oRm.write("<div");
						oRm.addClass("sapSuiteDMCBarInternal");
						oRm.addClass(jQuery.sap.encodeHTML(getDir(oControl._oChartData.bar2.left)));
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");
					oRm.write("</div>");

					oRm.write("<div");
					oRm.addClass("sapSuiteDMCBar");
					oRm.addClass("sapSuiteDMCBar2");
					oRm.addClass(sSize);
					if (oControl._oChartData.delta.isMax) {
						oRm.addClass("sapSuiteDMCBarDeltaMaxDelta");
					}
					if (oControl._oChartData.bar2.isSmaller) {
						oRm.addClass("sapSuiteDMCBarSizeSmaller");
					}
					if (parseFloat(oControl._oChartData.bar2.width) === 0) {
						oRm.addClass("sapSuiteDMCBarZeroWidth");
					} else if (parseFloat(oControl._oChartData.bar1.width) === 0) {
						oRm.addClass("sapSuiteDMCBarUniqueNonzero");
					}
					oRm.addClass(jQuery.sap.encodeHTML(getDir(oControl._oChartData.bar2.left)));
					oRm.writeClasses();
					oRm.addStyle("width", jQuery.sap.encodeHTML(oControl._oChartData.bar2.width + "%"));
					oRm.writeStyles();
					oRm.writeAttribute("id", oControl.getId() + "-dmc-bar2");
					oRm.write(">");
						oRm.write("<div");
						oRm.addClass("sapSuiteDMCBarInternal");
						oRm.addClass(jQuery.sap.encodeHTML(getDir(oControl._oChartData.bar1.left)));
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");
					oRm.write("</div>");

					oRm.write("<div");
					oRm.addClass("sapSuiteDMCBar");
					oRm.addClass("sapSuiteDMCBarDelta");
					oRm.addClass(sSize);
					if (!oControl._oChartData.delta.isMax) {
						oRm.addClass("sapSuiteDMCBarDeltaNotMax");
					}
					if (oControl._oChartData.delta.isZero) {
						oRm.addClass("sapSuiteDMCBarDeltaZero");
					}
					if (oControl._oChartData.delta.isEqual) {
						oRm.addClass("sapSuiteDMCBarDeltaEqual");
					}
					oRm.addClass(jQuery.sap.encodeHTML(getDir(oControl._oChartData.delta.left)));
					oRm.writeClasses();
					oRm.addStyle("width", jQuery.sap.encodeHTML(oControl._oChartData.delta.width + "%"));
					oRm.writeStyles();
					oRm.writeAttribute("id", oControl.getId() + "-dmc-bar-delta");
					oRm.write(">");
						oRm.write("<div");
						oRm.addClass(sColor);
						oRm.addClass("sapSuiteDMCBarDeltaInt");
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");

						oRm.write("<div");
						oRm.addClass("sapSuiteDMCBarDeltaStripe");
						oRm.addClass(jQuery.sap.encodeHTML(getDir(true)));
						if (oControl._oChartData.delta.isEqual) {
							oRm.addClass("sapSuiteDMCBarDeltaEqual");
						}
						oRm.addClass("sapSuiteDMCBarDeltaFirstStripe" + (oControl._oChartData.delta.isFirstStripeUp ? "Up" : "Down"));
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");

						oRm.write("<div");
						oRm.addClass("sapSuiteDMCBarDeltaStripe");
						oRm.addClass(jQuery.sap.encodeHTML(getDir(false)));
						oRm.addClass("sapSuiteDMCBarDeltaFirstStripe" + (oControl._oChartData.delta.isFirstStripeUp ? "Down" : "Up"));
						oRm.writeClasses();
						oRm.write(">");
						oRm.write("</div>");
					oRm.write("</div>");

				oRm.write("</div>");

				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-title2");
				oRm.addClass("sapSuiteDMCTitle");
				oRm.addClass("sapSuiteDMCPositionBtm");
				oRm.writeClasses();
				oRm.write(">");
					oRm.writeEscaped(oControl.getTitle2());
				oRm.write("</div>");
			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass("sapSuiteDMCLbls");
			oRm.addClass(sSize);
			oRm.writeClasses();
			oRm.write(">");
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-value1");
				oRm.addClass("sapSuiteDMCValue1");
				oRm.writeClasses();
				oRm.write(">");
					oRm.writeEscaped(sAdv1ToShow);
				oRm.write("</div>");

				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-delta");
				oRm.addClass("sapSuiteDMCDelta");
				oRm.addClass(sColor);
				oRm.writeClasses();
				oRm.write(">");
					oRm.writeEscaped(sAddvToShow);
				oRm.write("</div>");

				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-value2");
				oRm.addClass("sapSuiteDMCValue2");
				oRm.writeClasses();
				oRm.write(">");
					oRm.writeEscaped(sAdv2ToShow);
				oRm.write("</div>");
			oRm.write("</div>");

			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-calc");
			oRm.addClass("sapSuiteDMCCalc");
			oRm.writeClasses();
			oRm.write(">");
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-calc1");
				oRm.addClass("sapSuiteDMCCalc1");
				oRm.writeClasses();
				oRm.write("></div>");
				oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-calc2");
				oRm.addClass("sapSuiteDMCCalc2");
				oRm.writeClasses();
				oRm.write("></div>");
			oRm.write("</div>");
			oRm.write("</div>");
		oRm.write("</div>");
	};

	return DeltaMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/DeltaMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveBarChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.InteractiveBarChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveBarChartRenderer",[ "jquery.sap.global", "sap/m/library" ],
	function(jQuery, MobileLibrary) {
	"use strict";

	/**
	* InteractiveBarChartRenderer renderer.
	* @namespace
	*/
	var InteractiveBarChartRenderer = {};

	// bar direction positive constants
	InteractiveBarChartRenderer.BAR_DIRECTION_POSITIVE = {
		NAME: "positive",
		WRAPPER_CSSCLASS: "sapSuiteIBCBarWrapperPositive",
		CSSCLASS: "sapSuiteIBCBarPositive"
	};
	// bar direction negative constants
	InteractiveBarChartRenderer.BAR_DIRECTION_NEGATIVE = {
		NAME: "negative",
		WRAPPER_CSSCLASS: "sapSuiteIBCBarWrapperNegative",
		CSSCLASS: "sapSuiteIBCBarNegative"
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	InteractiveBarChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}

		var aBars = oControl.getBars(),
			iBarsNum =  Math.min(oControl.getDisplayedBars(), aBars.length);

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteIBC");
		oRm.writeClasses();
		oRm.writeStyles();

		// tooltip for chart (non-interactive mode)
		if (!oControl._isChartEnabled()) {
			var sAreaTooltip = oControl.getTooltip_AsString();
			if (jQuery.type(sAreaTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sAreaTooltip);
			}
		}

		// container accessibility
		var oAccOptions = {};
		oAccOptions.role = "listbox";
		oAccOptions.multiselectable = true;
		oAccOptions.disabled = !oControl._isChartEnabled();
		oAccOptions.labelledby = oControl.getAriaLabelledBy();
		oAccOptions.describedby = this._getAriaDescribedBy(oControl, iBarsNum);
		oRm.writeAccessibilityState(oControl, oAccOptions);

		oRm.write(">");
		if (!oControl.getSelectionEnabled()) {
			this.renderDisabledOverlay(oRm, oControl);
		}
		for (var i = 0; i < iBarsNum; i++) {
			this._renderBar(oRm, oControl, aBars[i], i, iBarsNum);
		}
		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the given bar, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {sap.suite.ui.microchart.InteractiveBarChartBar} bar The bar segment to be rendered
	 * @param {int} barIndex The index of the bar inside the bars aggregation
	 * @param {int} barsCount The total number of displayed bars
	 * @private
	 */
	InteractiveBarChartRenderer._renderBar = function(oRm, oControl, bar, barIndex, barsCount) {
		var sValue, sLabel, sTooltip, sAriaLabel, sColor, sLocalizedColor;

		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-interactionArea-" + barIndex);
		oRm.writeAttributeEscaped("data-sap-ui-ibc-selection-index", barIndex);
		oRm.addClass("sapSuiteIBCBarInteractionArea");
		if (bar.getSelected()) {
			oRm.addClass("sapSuiteIBCBarSelected");
		}
		// the first bar has tab-index at the first rendering
		if (barIndex === 0 && oControl._isChartEnabled()) {
			oRm.writeAttribute("tabindex", "0");
		}
		// tooltip for bar (interactive mode)
		if (oControl._isChartEnabled()) {
			sTooltip = bar.getTooltip_AsString();
			if (jQuery.type(sTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sTooltip);
			}
		}

		// bar accessibility
		sLabel = bar.getLabel();
		sAriaLabel = sLabel;
		if (oControl._bMinMaxValid) {
			sValue = this._getDisplayValue(bar, oControl);
			var sTooltip = bar.getTooltip_Text();
			if (sTooltip && jQuery.trim(sTooltip).length > 0) {
				sAriaLabel = sTooltip;
			} else {
				if (sAriaLabel) {
					sAriaLabel = sAriaLabel + " " + sValue;
				} else {
					sAriaLabel = sValue;
				}
				if (oControl._bUseSemanticTooltip) {
					sColor = bar.getColor();
					sLocalizedColor = oControl._oRb.getText(("SEMANTIC_COLOR_" + sColor.toUpperCase()));
					sAriaLabel += " " + sLocalizedColor;
				}
			}
		}

		var oAccOptions = {};
		oAccOptions.role = "option";
		oAccOptions.label = sAriaLabel;
		oAccOptions.selected = bar.getSelected();
		oAccOptions.posinset = barIndex + 1;
		oAccOptions.setsize = barsCount;
		oRm.writeAccessibilityState(bar, oAccOptions);

		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write(">");
		sLabel = bar.getLabel();
		if (bar.getColor() !== MobileLibrary.ValueColor.Neutral) {
			oRm.write("<div");
			oRm.addClass("sapSuiteIBCSemanticMarker");
			oRm.addClass("sapSuiteIBCSemantic" + bar.getColor());
			oRm.writeClasses();
			oRm.write("/>");
		}
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-label-" + barIndex);
		oRm.addClass("sapSuiteIBCBarLabel");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("<div");
		oRm.addClass("sapSuiteIBCBarLabelText");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sLabel);
		oRm.write("</div>");
		oRm.write("</div>");
		if (oControl._bMinMaxValid) {

			//renders the wrapper
			oRm.write("<div");
			oRm.addClass("sapSuiteIBCBarWrapper");
			oRm.writeClasses();
			oRm.write(">");

			//renders the negative bar
			this._renderBarDirection(oRm, oControl, bar, barIndex, sValue, InteractiveBarChartRenderer.BAR_DIRECTION_NEGATIVE);

			//renders the divider
			oRm.write("<div");
			oRm.addClass("sapSuiteIBCDivider");
			oRm.writeClasses();
			oRm.write("/>");

			//renders the positive bar
			this._renderBarDirection(oRm, oControl, bar, barIndex, sValue, InteractiveBarChartRenderer.BAR_DIRECTION_POSITIVE);

			oRm.write("</div>");
		}
		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the given bar direction, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {sap.suite.ui.microchart.InteractiveBarChartBar} bar The bar segment to be rendered
	 * @param {int} barIndex The index of the bar inside the bars aggregation
	 * @param {string} displayValue The bar value to be displayed
	 * @param {int} barDirection The direction of the bar (positive or negative)
	 * @private
	 */
	InteractiveBarChartRenderer._renderBarDirection = function(oRm, oControl, bar, barIndex, displayValue, barDirection) {
		var fValue = bar.getValue();
		oRm.write("<div");
		oRm.addClass(barDirection.WRAPPER_CSSCLASS);
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-bar-" + barDirection.NAME + "-" + barIndex);
		oRm.addClass("sapSuiteIBCBar");
		oRm.addClass(barDirection.CSSCLASS);
		if (fValue > 0) {
			oRm.addClass("sapSuiteIBCValuePositive");
		} else if (fValue === 0 || bar._bNullValue) {
			oRm.addClass("sapSuiteIBCBarValueNull");
		} else {
			oRm.addClass("sapSuiteIBCValueNegative");
		}
		oRm.writeClasses();
		oRm.write(">");
		this._renderDisplayedValue(oRm, oControl, bar, oControl.getId(), barIndex, displayValue, barDirection);
		oRm.write("</div>");
		oRm.write("</div>");
	};

	/**
	 * Renders the value to be displayed for the given bar, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {sap.suite.ui.microchart.InteractiveBarChartBar} bar The bar segment to be rendered
	 * @param {string} controlId The id of the control to be rendered
	 * @param {int} barIndex The index of the bar inside the bars aggregation
	 * @param {string} displayValue The bar value to be displayed
	 * @param {object} barDirection The direction of the bar (positive or negative)
	 * @private
	 */
	InteractiveBarChartRenderer._renderDisplayedValue = function(oRm, oControl, bar, controlId, barIndex, displayValue, barDirection) {
		var bPositiveValue;
		if (bar._bNullValue) {
			if (oControl._fMin < 0 && oControl._fMax > 0) {
				// N/A position for mixed values: check which space is bigger for the label
				bPositiveValue = Math.abs(oControl._fMax) >= Math.abs(oControl._fMin);
			} else {
				// N/A position for non-mixed values: determine the direction of the space
				bPositiveValue = oControl._fMin >= 0;
			}
		} else {
			// Label position for non N/A
			bPositiveValue = bar.getValue() >= 0;
		}

		// only draw the span containing the displayedValue once in the correct corresponding positive/negative area as both areas always exist
		if (barDirection === InteractiveBarChartRenderer.BAR_DIRECTION_POSITIVE && bPositiveValue ||
				barDirection === InteractiveBarChartRenderer.BAR_DIRECTION_NEGATIVE && !bPositiveValue) {
			if (bar._bNullValue) {
				oRm.addClass("sapSuiteIBCBarValueNA");
				oRm.addClass("sapSuiteIBCBarValueOutside");
			}
			oRm.write("<span");
			oRm.writeAttributeEscaped("id", controlId + "-displayedValue-" + barIndex);
			oRm.addClass("sapSuiteIBCBarValue");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(displayValue);
			oRm.write("</span>");
		}
	};

	/**
	 * Renders an additional disabling overlay.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	InteractiveBarChartRenderer.renderDisabledOverlay = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapSuiteIBCDisabledOverlay");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
	};

	/**
	 * Creates the value to be displayed for the given bar.
	 *
	 * @param {sap.suite.ui.microchart.InteractiveBarChartBar} bar The bar segment to be rendered
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @returns {string} The display value for the bar
	 * @private
	 */
	InteractiveBarChartRenderer._getDisplayValue = function(bar, oControl) {
		var sValue, fValue;
		sValue = bar.getDisplayedValue();
		fValue = bar.getValue();
		if (bar._bNullValue) {
			// 'N/A' is displayed if value does not exist (regardless of whether the displayedValue exists or not)
			sValue = oControl._oRb.getText("INTERACTIVECHART_NA");
		} else if (!sValue) {
			sValue = fValue.toString();
		}
		return sValue;
	};

	/**
	 * Creates the value of the aria-describedby accessibility attribute
	 *
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} barsNum The amount of bars
	 * @returns {string} A comma-separated list of all InteractionArea's IDs
	 * @private
	 */
	InteractiveBarChartRenderer._getAriaDescribedBy = function(oControl, barsNum) {
		var aAreaIds = [];
		for (var i = 0; i < barsNum; i++) {
			aAreaIds.push(oControl.getId() + "-interactionArea-" + i);
		}
		return aAreaIds.join(",");
	};
	return InteractiveBarChartRenderer;

}, /* bExport */ true);

}; // end of sap/suite/ui/microchart/InteractiveBarChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveLineChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.InteractiveLineChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveLineChartRenderer",["jquery.sap.global", "sap/m/library"], function(jQuery, MobileLibrary) {
	"use strict";

	/**
	 * InteractiveLineChartRenderer renderer.
	 * @namespace
	 */
	var InteractiveLineChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render - Output - Buffer
	 * @param {sap.ui.core.Control} oControl the control to be rendered
	 */
	InteractiveLineChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}

		var nPointsLength = oControl._iVisiblePointsCount,
			nPercentageWidth = 100 / nPointsLength;
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteILC");
		oRm.writeClasses();

		//container accessibility
		var oAccOptions = {};
		oAccOptions.role = "listbox";
		oAccOptions.multiselectable = true;
		oAccOptions.disabled = !oControl._isChartEnabled();
		oAccOptions.labelledby = oControl.getAriaLabelledBy();
		oAccOptions.describedby = this._getAriaDescribedBy(oControl, nPointsLength);
		oRm.writeAccessibilityState(oControl, oAccOptions);

		//tooltip for non-interactive chart
		if (!oControl._isChartEnabled()) {
			var sAreaTooltip = oControl.getTooltip_AsString();
			if (jQuery.type(sAreaTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sAreaTooltip);
			}
		}

		oRm.write(">");
		if (!oControl.getSelectionEnabled()) {
			this._renderDisabledOverlay(oRm, oControl);
		}
		this._renderChartCanvas(oRm, oControl, nPointsLength, nPercentageWidth);
		oRm.write("<div");
		oRm.addClass("sapSuiteILCBottomLabelArea");
		if (oControl._fNormalizedZero) {
			oRm.addClass("sapSuiteILCBottomLabelAreaNoDivider");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapSuiteILCInteraction");
		oRm.writeClasses();
		oRm.write(">");

		for (var iIndex = 0; iIndex < nPointsLength; iIndex++) {
			this._renderPoint(oRm, oControl, iIndex, nPointsLength, nPercentageWidth);
		}
		oRm.write("</div>");
		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the given point, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} index The index of the point to be rendered inside the points aggregation
	 * @param {int} pointsLength The amount of points to be displayed
	 * @param {int} percentageWidth The width of the current point expressed in percentage from the total available chart width
	 * @private
	 */
	InteractiveLineChartRenderer._renderPoint = function(oRm, oControl, index, pointsLength, percentageWidth) {
		var oPoint = oControl.getPoints()[index];

		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-point-area-" + index);
		oRm.addClass("sapSuiteILCSection");
		oRm.addClass("sapSuiteILCCanvasLayout");
		if (oPoint.getSelected()) {
			oRm.addClass("sapSuiteILCSelected");
		}
		oRm.writeClasses();
		oRm.addStyle("width", jQuery.sap.encodeHTML(percentageWidth + "%"));
		oRm.addStyle("left", jQuery.sap.encodeHTML(index * percentageWidth + "%"));
		oRm.writeStyles();
		oRm.write(">");

		//render point
		var sColor = oPoint.getColor();

		oRm.write("<div");

		if (!oPoint._bNullValue) {
			if (oPoint.getSelected()) {
				oRm.addClass("sapSuiteILCSelected");
			}
			if (sColor !== MobileLibrary.ValueColor.Neutral) {
				oRm.addClass("sapSuiteICSemanticColor" + sColor);
			}
			oRm.writeAttributeEscaped("id", oControl.getId() + "-point-" + index);
			oRm.addClass("sapSuiteILCPoint");
			oRm.addStyle("bottom", jQuery.sap.encodeHTML(oControl._aNormalizedValues[index] + "%"));
		}
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write("/>"); //point

		oRm.write("<div");
		oRm.addClass("sapSuiteILCBackgroundArea");
		oRm.writeClasses();
		oRm.write("/>");

		var sAriaLabel = this._renderPointLabel(oRm, oControl, index, pointsLength);
		var sSemanticColor = oPoint._getSemanticColor();
		if (sSemanticColor) {
			sAriaLabel += " " + sSemanticColor;
		}
		var sTooltip = oPoint.getTooltip_Text();
		if (sTooltip && jQuery.trim(sTooltip).length > 0) {
			sAriaLabel = sTooltip;
		}

		oRm.write("<div");
		oRm.addClass("sapSuiteILCInteractionArea");
		oRm.addClass("sapMPointer");
		oRm.writeClasses();
		if (index === 0 && oControl._isChartEnabled()) {
			oRm.writeAttribute("tabindex", "0");
		}

		// point accessibility
		var oAccOptions = {};
		oAccOptions.role = "option";
		oAccOptions.label = sAriaLabel;
		oAccOptions.selected = oPoint.getSelected();
		oAccOptions.posinset = index + 1;
		oAccOptions.setsize = pointsLength;
		oRm.writeAccessibilityState(oPoint, oAccOptions);

		//tooltip for interactive mode
		if (oControl._isChartEnabled()) {
			var sAreaTooltip = oPoint.getTooltip_AsString();
			if (jQuery.type(sAreaTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sAreaTooltip);
			}
		}

		oRm.write("/>");
		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the given chart canvas, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} displayedPoints The amount of points to be displayed
	 * @param {int} percentageWidth The width corresponding to each point expressed in percentage from the total available chart width
	 * @private
	 */
	InteractiveLineChartRenderer._renderChartCanvas = function(oRm, oControl, displayedPoints, percentageWidth) {
		var i,
			aPoints = oControl.getPoints();

		oRm.write("<div");
		oRm.addClass("sapSuiteILCChartCanvas");
		oRm.addClass("sapSuiteILCCanvasLayout");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<svg");
		oRm.addClass("sapSuiteILCSvgElement");
		oRm.writeClasses();
		oRm.writeAttribute("focusable", "false");
		oRm.write(">");

		if (oControl._fNormalizedZero) {
			oRm.write("<line");
			oRm.writeAttribute("x1", "1%");
			oRm.writeAttributeEscaped("y1", 100 - oControl._fNormalizedZero + "%");
			oRm.writeAttribute("x2", "99%");
			oRm.writeAttributeEscaped("y2", 100 - oControl._fNormalizedZero + "%");
			oRm.writeAttribute("stroke-width", "1");
			oRm.addClass("sapSuiteILCDivider");
			oRm.writeClasses();
			oRm.write("/>");
		}
		for (i = 1; i < displayedPoints; i++) {
			if (!aPoints[i - 1]._bNullValue && !aPoints[i]._bNullValue) {
				oRm.write("<line");
				oRm.writeAttributeEscaped("x1", percentageWidth / 2 + (i - 1) * percentageWidth + "%");
				oRm.writeAttributeEscaped("y1", 100 - oControl._aNormalizedValues[i - 1] + "%");
				oRm.writeAttributeEscaped("x2", percentageWidth / 2 + (i * percentageWidth) + "%");
				oRm.writeAttributeEscaped("y2", 100 - oControl._aNormalizedValues[i] + "%");
				oRm.writeAttribute("stroke-width", "2");
				oRm.write("/>");
			}
		}
		oRm.write("</svg>");

		oRm.write("</div>");
	};

	/**
	 * Renders the label to be displayed for the current point, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} index The index of the point to be rendered inside the points aggregation
	 * @param {int} pointsLength The amount of points to be displayed
	 * @returns {string} The value of the aria-label accessibility attribute
	 * @private
	 */
	InteractiveLineChartRenderer._renderPointLabel = function(oRm, oControl, index, pointsLength) {
		var oPoint = oControl.getPoints()[index];
		var sBottomLabelText = oPoint.getLabel() || "", sTopLabelText = oPoint.getDisplayedValue();
		var aHeights;
		oRm.write("<div");
		oRm.addClass("sapSuiteILCTextElement");
		oRm.addClass("sapSuiteILCBottomText");
		oRm.addClass("sapMPointer");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sBottomLabelText);
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapSuiteILCTextElement");
		oRm.addClass("sapSuiteILCToplabel");
		oRm.addClass("sapMPointer");
		if (!oPoint._bNullValue) {
			if (!sTopLabelText) {
				sTopLabelText = oPoint.getValue().toString();
			}
			aHeights = [oControl._aNormalizedValues[index]];
			if (index > 0 && !oControl.getPoints()[index - 1]._bNullValue) {
				aHeights.push((oControl._aNormalizedValues[index] + oControl._aNormalizedValues[index - 1]) / 2);
			}
			if (index < pointsLength - 1 && !oControl.getPoints()[index + 1]._bNullValue) {
				aHeights.push((oControl._aNormalizedValues[index] + oControl._aNormalizedValues[index + 1]) / 2);
			}
			aHeights.sort(function(a, b) {
				return a - b;
			});
			if (oPoint.getValue() === oControl.nMax && oControl.nMax !== oControl.nMin) {
				oRm.addStyle("bottom", jQuery.sap.encodeHTML(aHeights[aHeights.length - 1] + "%"));
				oRm.addClass("sapSuiteILCShiftAbove");
			} else if (oPoint.getValue() === oControl.nMin && oControl.nMax !== oControl.nMin) {
				oRm.addStyle("bottom", jQuery.sap.encodeHTML(aHeights[0] + "%"));
				oRm.addClass("sapSuiteILCShiftBelow");
			} else if (Math.abs(oControl._aNormalizedValues[index] - aHeights[0]) < Math.abs(oControl._aNormalizedValues[index] - aHeights[aHeights.length - 1])) {
				oRm.addStyle("bottom", jQuery.sap.encodeHTML(aHeights[0] + "%"));
				oRm.addClass("sapSuiteILCShiftBelow");
			} else {
				oRm.addStyle("bottom", jQuery.sap.encodeHTML(aHeights[aHeights.length - 1] + "%"));
				oRm.addClass("sapSuiteILCShiftAbove");
			}
		} else {
			sTopLabelText = oControl._oRb.getText("INTERACTIVECHART_NA");
			oRm.addClass("sapSuiteILCShiftBelow");
			oRm.addClass("sapSuiteILCNaLabel");
		}
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write(">");
		oRm.writeEscaped(sTopLabelText);
		oRm.write("</div>");

		return sBottomLabelText + " " + sTopLabelText;
	};

	/**
	 * Renders an additional disabling overlay.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the rendering buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	InteractiveLineChartRenderer._renderDisabledOverlay = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapSuiteILCDisabledOverlay");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
	};

	/**
	 * Creates the value of the aria-describedby accessibility attribute
	 *
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} pointsLength The amount of points
	 * @returns {string} A comma-separated list of all InteractionAreas' IDs
	 * @private
	 */
	InteractiveLineChartRenderer._getAriaDescribedBy = function(oControl, pointsLength) {
		var aAreaIds = [];
		for (var i = 0; i < pointsLength; i++) {
			aAreaIds.push(oControl.getId() + "-point-area-" + i);
		}
		return aAreaIds.join(",");
	};

	return InteractiveLineChartRenderer;

}, /* bExport */ true);

}; // end of sap/suite/ui/microchart/InteractiveLineChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.LineMicroChartPoint') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.suite.ui.microchart.LineMicroChartPoint control.
jQuery.sap.declare('sap.suite.ui.microchart.LineMicroChartPoint'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/LineMicroChartPoint",['sap/ui/core/Control'],
	function(Control) {
	"use strict";

	/**
	 * Constructor for a new LineMicroChartPoint.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the point of the line micro chart.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.48.0
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.LineMicroChartPoint
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LineMicroChartPoint = Control.extend("sap.suite.ui.microchart.LineMicroChartPoint", /** @lends sap.suite.ui.microchart.LineMicroChartPoint.prototype */ {
		metadata: {
			properties: {
				/**
				 * The point's horizontal position.
				 */
				x: {type: "float", group: "Data", defaultValue: 0},
				/**
				 * The point's vertical position.
				 */
				y: {type: "float", group: "Data", defaultValue: 0}
			}
		}
	});

	return LineMicroChartPoint;

});
}; // end of sap/suite/ui/microchart/LineMicroChartPoint.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.RadialMicroChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.RadialMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/RadialMicroChartRenderer",[ "jquery.sap.global", "sap/ui/Device", "sap/m/ValueColor" ],
	function(jQuery, Device, ValueColor) {
	"use strict";

	/**
	* RadialMicroChartRenderer renderer.
	* @namespace
	* @since 1.36.0
	*/
	var RadialMicroChartRenderer = {};

	//Constants
	RadialMicroChartRenderer.FORM_RATIO = 100; //Form ratio for the control, means the calculation base
	RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH = 1;
	RadialMicroChartRenderer.BACKGROUND_CIRCLE_RADIUS = (RadialMicroChartRenderer.FORM_RATIO / 2.0) - (RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH / 2.0);
	RadialMicroChartRenderer.RING_WIDTH = 8.75; //Calculated by: RadialMicroChartRenderer.BACKGROUND_CIRCLE_RADIUS * 0.175<WHEEL_WIDTH_FACTOR
	RadialMicroChartRenderer.RING_CORE_RADIUS = RadialMicroChartRenderer.BACKGROUND_CIRCLE_RADIUS - (RadialMicroChartRenderer.RING_WIDTH / 2.0) - RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH;
	RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR = "50%";
	RadialMicroChartRenderer.X_ROTATION = 0;
	RadialMicroChartRenderer.SWEEP_FLAG = 1;
	RadialMicroChartRenderer.PADDING_WIDTH = 0.22;//Should be 1 px
	RadialMicroChartRenderer.NUMBER_FONT_SIZE = 23.5; //Calculated by: RadialMicroChartRenderer.BACKGROUND_CIRCLE_RADIUS * 0.47<NUMBER_FONT_SIZE_FACTOR>
	RadialMicroChartRenderer.EDGE_CASE_SIZE_USE_SMALL_FONT = 54; // this value corresponds to 14 px for text font size
	RadialMicroChartRenderer.EDGE_CASE_SIZE_SHOW_TEXT = 46;
	RadialMicroChartRenderer.EDGE_CASE_SIZE_MICRO_CHART = 24;

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render - Output - Buffer
	 * @param {sap.ui.core.Control} oControl the control to be rendered
	 */
	RadialMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}

		// Write the HTML into the render manager
		this._writeDivStartElement(oControl, oRm);
		this._writeSVGStartElement(oControl, oRm);
		this._writeBackground(oRm);
		if (this._renderingOfInnerContentIsRequired(oControl)) {
			this._writeBorders(oRm);
			if (this._innerCircleRequired(oControl)) {
				this._writeCircle(oControl, oRm);
			} else {
				this._writeCircleWithPathElements(oControl, oRm);
			}
			this._writeText(oControl, oRm);
		}
		oRm.write("</svg>");
		oRm.write("</div>");
	};

	/* Rendering Write-Helpers */

	/**
	 * Writes the start tag for the surrounding div-element incl. ARIA text and required classes
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeDivStartElement = function(control, oRm) {
		oRm.write("<div");
		oRm.writeControlData(control);
		var sAriaLabel = control._getTooltipText();
		oRm.writeAttribute("role", "img");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);
		if (control.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		oRm.addClass("sapSuiteRMC");
		var sSizeClass = "sapSuiteRMCSize" + control.getSize();
		oRm.addClass(jQuery.sap.encodeHTML(sSizeClass));
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write(">");
	};

	/**
	 * Writes the start tag for the SVG element.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeSVGStartElement = function(control, oRm) {
		var sPreserveAspectRatio;
		if (!sap.ui.getCore().getConfiguration().getRTL()) {
			sPreserveAspectRatio = "xMaxYMid meet";
		} else {
			sPreserveAspectRatio = "xMinYMid meet";
		}
		var sSizeClass = "sapSuiteRMCSize" + control.getSize();
		oRm.write("<svg class=\"sapSuiteRMC " + jQuery.sap.encodeHTML(sSizeClass) + "\" focusable=\"false" + "\" viewBox=\"0 0 " + RadialMicroChartRenderer.FORM_RATIO + ' ' + RadialMicroChartRenderer.FORM_RATIO + "\" preserveAspectRatio=\"" + jQuery.sap.encodeHTML(sPreserveAspectRatio) + "\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">");
	};

	/**
	 * Writes the background circle.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeBackground = function(oRm) {
		oRm.write("<circle class=\"sapSuiteRMCCircleBackground\" cx=\"" + RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR + "\" cy=\"" + RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR + "\" r=\"" + RadialMicroChartRenderer.BACKGROUND_CIRCLE_RADIUS + "\" stroke-width=\"" + this.BACKGROUND_CIRCLE_BORDER_WIDTH + "\" />");
	};

	/**
	 * Writes the Borders, required for High Contrast themes.
	 * In case of other themes, they are also available to avoid issues while switching themes.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeBorders = function(oRm) {
		var fRadius1 = RadialMicroChartRenderer.RING_CORE_RADIUS + (RadialMicroChartRenderer.RING_WIDTH / 2.0) - (RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH / 2.0),
			fRadius2 = RadialMicroChartRenderer.RING_CORE_RADIUS - (RadialMicroChartRenderer.RING_WIDTH / 2.0) + (RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH / 2.0);

		oRm.write("<circle");
		oRm.addClass("sapSuiteRMCRing");
		oRm.writeClasses();
		oRm.writeAttribute("cx", RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR);
		oRm.writeAttribute("cy", RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR);
		oRm.writeAttribute("r", fRadius1);
		oRm.writeAttribute("stroke-width", RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH);
		oRm.write("/>");

		oRm.write("<circle");
		oRm.addClass("sapSuiteRMCRing");
		oRm.writeClasses();
		oRm.writeAttribute("cx", RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR);
		oRm.writeAttribute("cy", RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR);
		oRm.writeAttribute("r", fRadius2);
		oRm.writeAttribute("stroke-width", RadialMicroChartRenderer.BACKGROUND_CIRCLE_BORDER_WIDTH);
		oRm.write("/>");
	};

	/**
	 * Writes the circle element, required for 0% and 100% cases.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeCircle = function(control, oRm) {
		var sColor = this._getFullCircleColor(control);
		oRm.write("<circle");
		if (control._isValueColorValid() || sColor === "sapSuiteRMCRemainingCircle") {
			oRm.addClass(jQuery.sap.encodeHTML(sColor));
		} else {
			oRm.writeAttributeEscaped("stroke", sColor);
		}
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write("cx=\"" + RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR + "\" cy=\"" + RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR + "\" r=\"" + RadialMicroChartRenderer.RING_CORE_RADIUS + "\" fill=\"transparent\" stroke-width=\"" + RadialMicroChartRenderer.RING_WIDTH + "px\" />");
	};

	/**
	 * Writes the two path elements, required for all cases between 1% and 99%.
	 * Keeps a padding of 1px between the paths.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeCircleWithPathElements = function(control, oRm) {
		var iLargeArcFlag = control.getPercentage() > 50 ? 1 : 0;
		//decrease/increase the percentage to have a padding between paths
		var fPercentage = this._getPercentageForCircleRendering(control) - RadialMicroChartRenderer.PADDING_WIDTH;
		var aPathCoordinates = this._calculatePathCoordinates(control, fPercentage, false);
		this._writePath1(iLargeArcFlag, aPathCoordinates, control, oRm);
		fPercentage = this._getPercentageForCircleRendering(control) + RadialMicroChartRenderer.PADDING_WIDTH;
		aPathCoordinates = this._calculatePathCoordinates(control, fPercentage, true);
		this._writePath2(iLargeArcFlag, aPathCoordinates, control, oRm);
	};

	/**
	 * Writes the first path element for cases between 1% and 99%.
	 *
	 * @private
	 * @param {int} largeArcFlag for check of smaller or bigger than 180 degrees
	 * @param {float[]} pathCoordinates array containing specific coordinates for the path
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writePath1 = function(largeArcFlag, pathCoordinates, control, oRm) {
		var sPathData1 = "M" + pathCoordinates[0] + " " + pathCoordinates[1] + " A " + RadialMicroChartRenderer.RING_CORE_RADIUS + " " + RadialMicroChartRenderer.RING_CORE_RADIUS +
		", " + RadialMicroChartRenderer.X_ROTATION + ", " + largeArcFlag + ", " + RadialMicroChartRenderer.SWEEP_FLAG + ", " + pathCoordinates[2] + " " + pathCoordinates[3];

		var sColor = this._getPathColor(control);
		oRm.write("<path");
		oRm.addClass("sapSuiteRMCPath");
		if (control._isValueColorValid() || sColor === "sapSuiteRMCRemainingCircle") {
			oRm.addClass(jQuery.sap.encodeHTML(sColor));
		} else {
			oRm.writeAttributeEscaped("stroke", sColor);
		}
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write("d=\"" + jQuery.sap.encodeHTML(sPathData1) + "\" fill=\"transparent\" stroke-width=\"" + RadialMicroChartRenderer.RING_WIDTH + "px\" />");
	};

	/**
	 * Writes the second path element for cases between 1% and 99%.
	 *
	 * @private
	 * @param {int} largeArcFlag for check of smaller or bigger than 180 degrees
	 * @param {float[]} pathCoordinates array containing specific coordinates for the path
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writePath2 = function(largeArcFlag, pathCoordinates, control, oRm) {
		var sPathData2 = "M" + pathCoordinates[2] + " " + pathCoordinates[3] + " A " + RadialMicroChartRenderer.RING_CORE_RADIUS + " " + RadialMicroChartRenderer.RING_CORE_RADIUS +
		", " + RadialMicroChartRenderer.X_ROTATION + ", " + (1 - largeArcFlag) + ", " + RadialMicroChartRenderer.SWEEP_FLAG + ", " + pathCoordinates[0] + " " + pathCoordinates[1];

		oRm.write("<path class=\"sapSuiteRMCPath sapSuiteRMCRemainingCircle\" d=\"" + jQuery.sap.encodeHTML(sPathData2) + "\" fill=\"transparent\" stroke-width=\"" + RadialMicroChartRenderer.RING_WIDTH + "px\" />");
	};

	/**
	 * Writes the text content inside the chart.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @param {sap.ui.core.RenderManager} oRm the render manager
	 */
	RadialMicroChartRenderer._writeText = function(control, oRm) {
		oRm.write("<text class=\"sapSuiteRMCFont\" text-anchor=\"middle\" alignment-baseline=\"middle\"" + "\" font-size=\"" + RadialMicroChartRenderer.NUMBER_FONT_SIZE + "\" x=\"" + RadialMicroChartRenderer.SVG_VIEWBOX_CENTER_FACTOR + "\" y=\"" + jQuery.sap.encodeHTML(this._getVerticalViewboxCenterFactorForText()) + "\"> " + jQuery.sap.encodeHTML(this._generateTextContent(control)) + "</text>");
	};

	/* Helpers */

	/**
	 * Checks if rendering of inner content (circle or path-elements) is required.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {boolean} true if rendering is required, false if rendering is not required
	 */
	RadialMicroChartRenderer._renderingOfInnerContentIsRequired = function(control) {
		if (control._getPercentageMode() || (control.getTotal() !== 0)){
			return true;
		} else {
			return false;
		}
	};

	/**
	 * Returns the center factor for the text element.
	 * Since browsers interpret the text differently, the constant SVG_VIEWBOX_CENTER_FACTOR can not be used.
	 *
	 * @private
	 * @returns {string} factor for vertical center of text
	 */
	RadialMicroChartRenderer._getVerticalViewboxCenterFactorForText = function() {
		if (Device.browser.msie || Device.browser.mozilla || Device.browser.edge) {
			return "57%";
		} else {
			return "51%";
		}
	};

	/**
	 * Checks if the inner circle is required. This is valid for 0% or 100% scenarios.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {boolean} True if inner circle has to be rendered, false if inner circle is not required
	 */
	RadialMicroChartRenderer._innerCircleRequired = function(control) {
		return control.getPercentage() >= 100 || control.getPercentage() <= 0;
	};

	/**
	 * Generates the coordinates needed for drawing the two path elements.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control - the current chart control
	 * @param {float} percentage The calculated percentage value for bar rendering
	 * @param {boolean} hasPadding Padding is required or not
	 * @returns {float[]} Array with calculated coordinates
	 */
	RadialMicroChartRenderer._calculatePathCoordinates = function(control, percentage, hasPadding) {
		var aCoordinates = [];
		var fPadding = 0;
		var fCenter = RadialMicroChartRenderer.FORM_RATIO / 2;

		if (hasPadding) {
			fPadding = 2 * RadialMicroChartRenderer.PADDING_WIDTH / 100 * 2 * Math.PI;
		}

		aCoordinates.push(fCenter + RadialMicroChartRenderer.RING_CORE_RADIUS * Math.cos(-Math.PI / 2.0 - fPadding));
		aCoordinates.push(fCenter + RadialMicroChartRenderer.RING_CORE_RADIUS * Math.sin(-Math.PI / 2.0 - fPadding));
		aCoordinates.push(fCenter + RadialMicroChartRenderer.RING_CORE_RADIUS * Math.cos(-Math.PI / 2.0 + percentage / 100 * 2 * Math.PI));
		aCoordinates.push(fCenter + RadialMicroChartRenderer.RING_CORE_RADIUS * Math.sin(-Math.PI / 2.0 + percentage / 100 * 2 * Math.PI));

		return aCoordinates;
	};

	/**
	 * Generates percentage value for rendering the circle.
	 * For edge cases (99% and 1%) a specific handling is implemented.
	 * For values between 99.0% - 99.9%, 99% will be retrieved to make sure the circle is not completely filled setting thos big values.
	 * For values between 0.1% - 0.9%, 1% will be returned to make sure the circle is not completely empty settings those small values.
	 * This is only used for painting the circle by path elements. For the text area, the value of the percentage property can be used.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {float} the calculated percentage value for bar rendering
	 */
	RadialMicroChartRenderer._getPercentageForCircleRendering = function(control) {
		var fPercentage = control.getPercentage();
		var fPercentageForEdgeCases = fPercentage;
		if (fPercentage > 99 - RadialMicroChartRenderer.PADDING_WIDTH) {
			fPercentageForEdgeCases = 99 - RadialMicroChartRenderer.PADDING_WIDTH;
		}
		if (fPercentage < 1 + RadialMicroChartRenderer.PADDING_WIDTH) {
			fPercentageForEdgeCases = 1 + RadialMicroChartRenderer.PADDING_WIDTH;
		}
		return fPercentageForEdgeCases;
	};

	/**
	 * Handles the UI specific stuff in onAfterRendering.
	 *
	 * @private
	 * @param {object} control instance of RadialMicroChart
	 */
	RadialMicroChartRenderer._handleOnAfterRendering = function(control) {
		var sParentWidth, sParentHeight;
		var $Text = control.$().find("text");
		var $Svg = control.$().children("svg");
		if (control.getSize() === "Responsive") {
			//Applies fixed size of parent to make SVG work in all browsers.
			if (control.getParent() !== undefined && control.getParent() !== null &&
					control.getParent().getHeight !== undefined && control.getParent().getHeight !== null) {
				// Two pixels are subtracted from the original value. Otherwise, there's not enough space for the outline and it won't render correctly.
				sParentHeight = parseFloat(control.getParent().$().height()) - 2;
				control.$().height(sParentHeight); //Required for rendering in page element. Otherwise element is cutted at the top.
				$Svg.height(sParentHeight);
			}
			if (control.getParent() !== undefined && control.getParent() !== null &&
					control.getParent().getWidth !== undefined && control.getParent().getWidth !== null) {
				// Two pixels are subtracted from the original value. Otherwise, there's not enough space for the outline and it won't render correctly.
				sParentWidth = parseFloat(control.getParent().$().width()) - 2;
				control.$().width(sParentWidth); //Required for rendering in page element. Otherwise element is cutted at the top.
				$Svg.width(sParentWidth);
			}
		}
		if (control.getSize() === "Responsive") {
			//Hides control when threshold for visibility reached
			if (parseInt($Svg.css("height"), 10) < RadialMicroChartRenderer.EDGE_CASE_SIZE_MICRO_CHART ||
					parseInt($Svg.css("width"), 10) < RadialMicroChartRenderer.EDGE_CASE_SIZE_MICRO_CHART) {
				control.$().hide();
				return;
			}
			//Hides text element for small elements (<46px)
			if (parseInt($Svg.css("height"), 10) <= RadialMicroChartRenderer.EDGE_CASE_SIZE_SHOW_TEXT ||
					parseInt($Svg.css("width"), 10) <= RadialMicroChartRenderer.EDGE_CASE_SIZE_SHOW_TEXT) {
				$Text.hide();
			}
		}
		//Applies correct color classes
		var sTextColorClass = this._getTextColorClass(control); // Gets the correct color
		var sCurrentSVGClass = $Svg.attr("class") || ""; // Gets all the classes applied to the SVG element or uses an empty string if none are found
		if (sCurrentSVGClass.indexOf(sTextColorClass) < 0) {
			var sNewClasses = sCurrentSVGClass + " " + sTextColorClass;
			// If the SVG element is small, then additional class should be added indicating that small fonts are applied
			var iSvgElementHeight = parseInt($Svg.css("height"), 10);
			if (iSvgElementHeight <= RadialMicroChartRenderer.EDGE_CASE_SIZE_USE_SMALL_FONT) {
				sNewClasses += " sapSuiteRMCSmallFont";
			}
			// Writes a new class attribute with all the other classes and the new correct color
			// SVG instead of Text element is used to work around a bug on mobile devices using the Edge browser
			$Svg.attr("class", sNewClasses );
		}
	};

	/**
	 * Returns the text color of the control. Also handles switch for accessibility features.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {string} value for CSS Text color class
	 */
	RadialMicroChartRenderer._getTextColorClass = function(control) {
		switch (control.getValueColor()){
			case ValueColor.Good:
				return "sapSuiteRMCGoodTextColor";
			case ValueColor.Error:
				return "sapSuiteRMCErrorTextColor";
			case ValueColor.Critical:
				return "sapSuiteRMCCriticalTextColor";
			default:
				return "sapSuiteRMCNeutralTextColor";
		}
	};

	/**
	 * Returns the color for full circles required for 100% or 0% charts.
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {string} value for full circle CSS color class or css attribute
	 */
	RadialMicroChartRenderer._getFullCircleColor = function(control) {
		if (control.getPercentage() >= 100) {
			return this._getPathColor(control);
		}
		if (control.getPercentage() <= 0) {
			return "sapSuiteRMCRemainingCircle";
		}
	};

	/**
	 * Gets the CSS class or CSS attribute to apply the right color to the circle path
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {string} containing the name of the CSS class or the CSS value
	 */
	RadialMicroChartRenderer._getPathColor = function(control) {
		var sValueColor = control.getValueColor();
		if (control._isValueColorValid()) {
			switch (sValueColor){
				case ValueColor.Good:
					return "sapSuiteRMCPathGood";
				case ValueColor.Error:
					return "sapSuiteRMCPathError";
				case ValueColor.Critical:
					return "sapSuiteRMCPathCritical";
				default:
					return "sapSuiteRMCPathNeutral";
			}
		} else {
			return sValueColor;
		}
	};

	/**
	 * Generates the text content of the chart
	 *
	 * @private
	 * @param {sap.suite.ui.microchart.RadialMicroChart} control the current chart control
	 * @returns {string} value for text element in the chart
	 */
	RadialMicroChartRenderer._generateTextContent = function(control) {
		if (control.getPercentage() === 100) {
			return control._rb.getText("RADIALMICROCHART_PERCENTAGE_TEXT", [100]);
		}
		if (control.getPercentage() === 0) {
			return control._rb.getText("RADIALMICROCHART_PERCENTAGE_TEXT", [0]);
		}
		if (control.getPercentage() >= 100) {
			jQuery.sap.log.error("Values over 100%(" + control.getPercentage() + "%) are not supported");
			return control._rb.getText("RADIALMICROCHART_PERCENTAGE_TEXT", [100]);
		}
		if (control.getPercentage() <= 0) {
			jQuery.sap.log.error("Values below 0%(" + control.getPercentage() + "%) are not supported");
			return control._rb.getText("RADIALMICROCHART_PERCENTAGE_TEXT", [0]);
		}
		return control._rb.getText("RADIALMICROCHART_PERCENTAGE_TEXT", [control.getPercentage()]);
	};

	return RadialMicroChartRenderer;
}, /* bExport */ true);

}; // end of sap/suite/ui/microchart/RadialMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.StackedBarMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.StackedBarMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/StackedBarMicroChartRenderer",['jquery.sap.global', 'sap/m/ValueColor', 'sap/ui/core/theming/Parameters'],
	function(jQuery, ValueColor, Parameters) {
	"use strict";

	/**
	 * StackedBarMicroChart renderer.
	 * @namespace
	 */
	var StackedBarMicroChartRenderer = {};

	StackedBarMicroChartRenderer.LABEL_COLOR_LIGHT = "#ffffff";
	StackedBarMicroChartRenderer.LABEL_COLOR_DARK = "#000000";
	StackedBarMicroChartRenderer.COLORNAME_TO_HEX_MAP = {aliceblue: "#f0f8ff", antiquewhite: "#faebd7", aqua: "#00ffff", aquamarine: "#7fffd4", azure: "#f0ffff", beige: "#f5f5dc",
		bisque: "#ffe4c4", black: "#000000", blanchedalmond: "#ffebcd", blue: "#0000ff", blueviolet: "#8a2be2", brown: "#a52a2a", burlywood: "#deb887", cadetblue: "#5f9ea0",
		chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", cornflowerblue: "#6495ed", cornsilk: "#fff8dc", crimson: "#dc143c", cyan: "#00ffff",
		darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkgray: "#a9a9a9", darkgrey: "#a9a9a9", darkgreen: "#006400", darkkhaki: "#bdb76b", darkmagenta: "#8b008b",
		darkolivegreen: "#556b2f", darkorange: "#ff8c00", darkorchid: "#9932cc", darkred: "#8b0000", darksalmon: "#e9967a", darkseagreen: "#8fbc8f",
		darkslateblue: "#483d8b", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", darkturquoise: "#00ced1", darkviolet: "#9400d3", deeppink: "#ff1493", deepskyblue: "#00bfff",
		dimgray: "#696969", dimgrey: "#696969", dodgerblue: "#1e90ff", firebrick: "#b22222", floralwhite: "#fffaf0", forestgreen: "#228b22", fuchsia: "#ff00ff", gainsboro: "#dcdcdc",
		ghostwhite: "#f8f8ff", gold: "#ffd700", goldenrod: "#daa520", gray: "#808080", grey: "#808080", green: "#008000", greenyellow: "#adff2f", honeydew: "#f0fff0", hotpink: "#ff69b4",
		indianred: "#cd5c5c", indigo: "#4b0082", ivory: "#fffff0", khaki: "#f0e68c", lavender: "#e6e6fa", lavenderblush: "#fff0f5", lawngreen: "#7cfc00",
		lemonchiffon: "#fffacd", lightblue: "#add8e6", lightcoral: "#f08080", lightcyan: "#e0ffff", lightgoldenrodyellow: "#fafad2", lightgrey: "#d3d3d3", lightgray: "#d3d3d3",
		lightgreen: "#90ee90", lightpink: "#ffb6c1", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", lightskyblue: "#87cefa", lightslategray: "#778899", lightslategrey: "#778899",
		lightsteelblue: "#b0c4de", lightyellow: "#ffffe0", lime: "#00ff00", limegreen: "#32cd32", linen: "#faf0e6", magenta: "#ff00ff", maroon: "#800000",
		mediumaquamarine: "#66cdaa", mediumblue: "#0000cd", mediumorchid: "#ba55d3", mediumpurple: "#9370d8", mediumseagreen: "#3cb371", mediumslateblue: "#7b68ee",
		mediumspringgreen: "#00fa9a", mediumturquoise: "#48d1cc", mediumvioletred: "#c71585", midnightblue: "#191970", mintcream: "#f5fffa", mistyrose: "#ffe4e1",
		moccasin: "#ffe4b5", navajowhite: "#ffdead", navy: "#000080", oldlace: "#fdf5e6", olive: "#808000", olivedrab: "#6b8e23", orange: "#ffa500", orangered: "#ff4500",
		orchid: "#da70d6", palegoldenrod: "#eee8aa", palegreen: "#98fb98", paleturquoise: "#afeeee", palevioletred: "#d87093", papayawhip: "#ffefd5", peachpuff: "#ffdab9",
		peru: "#cd853f", pink: "#ffc0cb", plum: "#dda0dd", powderblue: "#b0e0e6", purple: "#800080", rebeccapurple: "#663399", red: "#ff0000", rosybrown: "#bc8f8f",
		royalblue: "#4169e1", saddlebrown: "#8b4513", salmon: "#fa8072", sandybrown: "#f4a460", seagreen: "#2e8b57", seashell: "#fff5ee", sienna: "#a0522d",
		silver: "#c0c0c0", skyblue: "#87ceeb", slateblue: "#6a5acd", slategray: "#708090", slategrey: "#708090", snow: "#fffafa", springgreen: "#00ff7f", steelblue: "#4682b4", tan: "#d2b48c",
		teal: "#008080", thistle: "#d8bfd8", tomato: "#ff6347", turquoise: "#40e0d0", violet: "#ee82ee", wheat: "#f5deb3", white: "#ffffff", whitesmoke: "#f5f5f5",
		yellow: "#ffff00", yellowgreen: "#9acd32"};

	StackedBarMicroChartRenderer.SEMANTIC_COLORS = {
		Good: "Positive",
		Error: "Negative"
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	StackedBarMicroChartRenderer.render = function (oRm, oControl) {
		var aChartData = oControl._calculateChartData();

		if (!oControl._bThemeApplied) {
			return;
		}
		this._aBars = oControl.getAggregation("bars");
		oRm.write("<div");
		oRm.writeControlData(oControl);
		if (oControl.hasListeners("press")) {
			oRm.writeAttribute("tabindex", "0");
			oRm.addClass("sapSuiteUiMicroChartPointer");
		}
		oRm.addClass("sapSuiteStackedMC");
		oRm.addClass("sapSuiteStackedMCSize" + oControl.getSize());
		oRm.writeClasses();

		// tooltip and aria label
		var sTooltip = oControl._getTooltip(aChartData);
		if (sTooltip && typeof sTooltip === "string") {
			oRm.writeAttributeEscaped("title", sTooltip);
		}
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", oControl._createTooltipText(aChartData));

		oRm.writeStyles();
		oRm.write(">");
		this._renderInnerContent(oRm, oControl, aChartData);
		oRm.write("</div>");
	};

	/**
	 * Renders the control's inner content, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {Object} chartData The calculated data needed for the chart to be displayed
	 */
	StackedBarMicroChartRenderer._renderInnerContent = function(oRm, oControl, chartData) {
		for (var i = 0; i < chartData.length; i++) {
			this._renderChartBar(oRm, oControl, chartData[i], i, i === chartData.length - 1);
		}
	};

	/**
	 * Renders the bar area for the given control.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {Object} dataBar The calculated data needed for the bar to be displayed
	 * @param {int} index The index inside bars aggregation
	 * @param {Boolean} isLastBar Flag indicating if the current bar is the last bar inside bars aggregation
	 */
	StackedBarMicroChartRenderer._renderChartBar = function(oRm, oControl, dataBar, index, isLastBar) {
		var sColor;
		if (dataBar.width > 0) {
			oRm.write("<div");
			oRm.addClass("sapSuiteStackedMCBar");
			if (!isLastBar) {
				oRm.addClass("sapSuiteStackedMCBarNoLast");
			}
			if (!dataBar.color) {
				oRm.addStyle("background-color", "transparent");
			} else if (ValueColor[dataBar.color]) {
				oRm.addClass("sapSuiteStackedMCBarSemanticColor" + jQuery.sap.encodeHTML(dataBar.color));
				sColor = Parameters.get(this._getValueCssParameter(dataBar.color));
			} else {
				sColor = Parameters.get(dataBar.color);
				if (!sColor) {
					sColor = dataBar.color;
				}
				oRm.addStyle("background-color", jQuery.sap.encodeHTML(sColor));
			}
			oRm.addStyle("width", jQuery.sap.encodeHTML(dataBar.width + "%"));
			oRm.writeClasses();
			oRm.writeStyles();
			oRm.write(">");
			if (sColor) {
				this._renderChartBarLabel(oRm, oControl, dataBar.displayValue, sColor);
			}
			oRm.write("</div>");
		}
	};

	/**
	 * Renders the label text for the current bar area.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {String} displayValue The value that should be displayed
	 * @param {String} backgroundColor The background color of the current bar area
	 */
	StackedBarMicroChartRenderer._renderChartBarLabel = function(oRm, oControl, displayValue, backgroundColor) {
		if (!displayValue) {
			return;
		}
		oRm.write("<div");
		oRm.addClass("sapSuiteStackedMCBarLabel");
		oRm.writeClasses();
		oRm.addStyle("color", jQuery.sap.encodeHTML(this._getLabelColor(backgroundColor)));
		oRm.writeStyles();
		oRm.write(">");
		oRm.writeEscaped(displayValue);
		oRm.write("</div>");
	};

	/**
	 * Returns the color value of the label by calculating the data point color brightness
	 *
	 * @private
	 * @param {string} backgroundColor The background color
	 * @returns {string} The color of the label
	 */
	StackedBarMicroChartRenderer._getLabelColor = function(backgroundColor) {
		var sHexColor = this._colorNameToHex(backgroundColor);
		// convert 3-digit hexcolor to 6-digit first (e.g.: #abc -> #aabbcc)
		if (!sHexColor && backgroundColor.length === 4) {
			// concatinate each char after repeating it twice
			sHexColor = "#" + new Array(3).join(backgroundColor.substring(1, 2)) + new Array(3).join(backgroundColor.substring(2, 3)) + new Array(3).join(backgroundColor.substring(3, 4));
		} else if (!sHexColor) {
			sHexColor = backgroundColor;
		}
		var iRedValue = parseInt(sHexColor.substring(1, 3), 16),
			iGreenValue = parseInt(sHexColor.substring(3, 5), 16),
			iBlueValue = parseInt(sHexColor.substring(5, 7), 16);

		// apply the data point color brightness algorithm
		var fDataPoint = ((iRedValue * 299) + (iGreenValue * 587) + (iBlueValue * 114)) / 1000;
		if (fDataPoint > 127.5) {
			return StackedBarMicroChartRenderer.LABEL_COLOR_DARK;
		} else {
			return StackedBarMicroChartRenderer.LABEL_COLOR_LIGHT;
		}
	};

	/**
	 * Returns the color css parameter
	 *
	 * @private
	 * @param {string} color The bar color
	 * @returns {string} The css parameter
	 */
	StackedBarMicroChartRenderer._getValueCssParameter = function(color) {
		var sSemanticColor = this.SEMANTIC_COLORS[color] || color;
		return "sapUi" + sSemanticColor + "Element";
	};

	/**
	 * Converts a color keyword to its HEX color value.
	 *
	 * @private
	 * @param {string} color The css color name
	 * @returns {string} The css hex representation or undefined if the keyword cannot be found
	 */
	StackedBarMicroChartRenderer._colorNameToHex = function(color) {
		return StackedBarMicroChartRenderer.COLORNAME_TO_HEX_MAP[color];
	};

	return StackedBarMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/StackedBarMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.suite.ui.microchart.
 */
jQuery.sap.declare('sap.suite.ui.microchart.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/library",['jquery.sap.global', 'sap/ui/core/library', 'sap/ui/core/Core', 'sap/m/library'],
	function(jQuery, coreLibrary, Core, mLibrary) {
	"use strict";

	/**
	 * UI5 library: sap.suite.ui.microchart.
	 *
	 * @namespace sap.suite.ui.microchart
	 * @name sap.suite.ui.microchart
	 * @author SAP SE
	 * @version 1.50.6
	 * @public
	 */

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.suite.ui.microchart",
		version: "1.50.6",
		// library dependencies
		dependencies : ["sap.ui.core", "sap.m"],
		types: [
			"sap.suite.ui.microchart.AreaMicroChartViewType",
			"sap.suite.ui.microchart.BulletMicroChartModeType",
			"sap.suite.ui.microchart.CommonBackgroundType",
			"sap.suite.ui.microchart.ComparisonMicroChartViewType",
			"sap.suite.ui.microchart.LoadStateType"
		],
		interfaces: [],
		controls: [
			"sap.suite.ui.microchart.AreaMicroChart",
			"sap.suite.ui.microchart.BulletMicroChart",
			"sap.suite.ui.microchart.ColumnMicroChart",
			"sap.suite.ui.microchart.ComparisonMicroChart",
			"sap.suite.ui.microchart.DeltaMicroChart",
			"sap.suite.ui.microchart.HarveyBallMicroChart",
			"sap.suite.ui.microchart.LineMicroChart",
			"sap.suite.ui.microchart.InteractiveBarChart",
			"sap.suite.ui.microchart.InteractiveDonutChart",
			"sap.suite.ui.microchart.InteractiveLineChart",
			"sap.suite.ui.microchart.RadialMicroChart",
			"sap.suite.ui.microchart.StackedBarMicroChart"
		],
		elements: [
			"sap.suite.ui.microchart.AreaMicroChartPoint",
			"sap.suite.ui.microchart.AreaMicroChartItem",
			"sap.suite.ui.microchart.AreaMicroChartLabel",
			"sap.suite.ui.microchart.BulletMicroChartData",
			"sap.suite.ui.microchart.ColumnMicroChartData",
			"sap.suite.ui.microchart.ColumnMicroChartLabel",
			"sap.suite.ui.microchart.ComparisonMicroChartData",
			"sap.suite.ui.microchart.HarveyBallMicroChartItem",
			"sap.suite.ui.microchart.LineMicroChartPoint",
			"sap.suite.ui.microchart.LineMicroChartEmphasizedPoint",
			"sap.suite.ui.microchart.InteractiveBarChartBar",
			"sap.suite.ui.microchart.InteractiveDonutChartSegment",
			"sap.suite.ui.microchart.InteractiveLineChartPoint",
			"sap.suite.ui.microchart.StackedBarMicroChartBar"
		]
	});

	/**
	 * Enum of available views for the area micro chart concerning the position of the labels.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @since 1.34
	 */
	sap.suite.ui.microchart.AreaMicroChartViewType = {

		/**
		 * The view with labels on the top and bottom.
		 * @public
		 */
		Normal : "Normal",

		/**
		 * The view with labels on the left and right.
		 * @public
		 */
		Wide : "Wide"

	};

	/**
	 * Defines if the horizontal bar represents a current value only or if it represents the delta between a current value and a threshold value.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @since 1.34
	 */
	sap.suite.ui.microchart.BulletMicroChartModeType = {
		/**
		 * Displays the Actual value.
		 * @public
		 */
		Actual: "Actual",

		/**
		 * Displays delta between the Actual and Threshold values.
		 * @public
		 */
		Delta: "Delta"
	};

	/**
	 * Lists the available theme-specific background colors.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @since 1.34
	 */
	sap.suite.ui.microchart.CommonBackgroundType = {
		/**
		 * The lightest background color.
		 * @public
		 */
		Lightest: "Lightest",

		/**
		 * Extra light background color.
		 * @public
		 */
		ExtraLight: "ExtraLight",

		/**
		 * Light background color.
		 * @public
		 */
		Light: "Light",

		/**
		 * Medium light background color.
		 * @public
		 */
		MediumLight: "MediumLight",

		/**
		 * Medium background color.
		 * @public
		 */
		Medium: "Medium",

		/**
		 * Dark background color.
		 * @public
		 */
		Dark: "Dark",

		/**
		 * Extra dark background color.
		 * @public
		 */
		ExtraDark: "ExtraDark",

		/**
		 * The darkest background color.
		 * @public
		 */
		Darkest: "Darkest",

		/**
		 * The transparent background color.
		 * @public
		 */
		Transparent: "Transparent"
	};

	/**
	 * Lists the views of the comparison micro chart concerning the position of titles and labels.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @since 1.34
	 */
	sap.suite.ui.microchart.ComparisonMicroChartViewType = {
		/**
		 * Titles and values are displayed above the bars.
		 * @public
		 */
		Normal: "Normal",

		/**
		 * Titles and values are displayed in the same line with the bars.
		 * @public
		 */
		Wide: "Wide"
	};

	/**
	 * Contains available loading states.
	 *
	 * @deprecated Since 1.46
	 */
	sap.suite.ui.microchart.LoadStateType = {
		/**
		 * LoadableView is loading the control.
		 * @public
		 */
		Loading: "Loading",

		/**
		 * LoadableView has loaded the control.
		 * @public
		 */
		Loaded: "Loaded",

		/**
		 * LoadableView failed to load the control.
		 * @public
		 */
		Failed: "Failed",

		/**
		 * LoadableView disabled to load the control.
		 * @public
		 */
		Disabled: "Disabled"
	};

	sap.suite.ui.microchart._aStandardMarginClassNames = [
		"sapUiTinyMargin", "sapUiSmallMargin", "sapUiMediumMargin", "sapUiLargeMargin", "sapUiTinyMarginBeginEnd", "sapUiTinyMarginTopBottom", "sapUiSmallMarginBeginEnd",
		"sapUiSmallMarginTopBottom", "sapUiMediumMarginBeginEnd", "sapUiMediumMarginTopBottom", "sapUiLargeMarginBeginEnd", "sapUiLargeMarginTopBottom", "sapUiTinyMarginTop",
		"sapUiTinyMarginBottom", "sapUiTinyMarginBegin", "sapUiTinyMarginEnd", "sapUiSmallMarginTop", "sapUiSmallMarginBottom", "sapUiSmallMarginBegin", "sapUiSmallMarginEnd",
		"sapUiMediumMarginTop", "sapUiMediumMarginBottom", "sapUiMediumMarginBegin", "sapUiMediumMarginEnd", "sapUiLargeMarginTop", "sapUiLargeMarginBottom", "sapUiLargeMarginBegin",
		"sapUiLargeMarginEnd", "sapUiResponsiveMargin", "sapUiNoMargin", "sapUiNoMarginTop", "sapUiNoMarginBottom", "sapUiNoMarginBegin",  "sapUiNoMarginEnd"
	];

	/**
	 * Checks if the chart is in the GenericTile.
	 * @param {Object} oChart The microchart control instance that has to be checked whether it is in the GenericTile.
	 * @returns {boolean} True if the chart is in a GenericTile, false if not.
	 * @private
	 */
	sap.suite.ui.microchart._isInGenericTile = function (oChart) {
		var oParent = oChart.getParent();
		if (!oParent) {
			return false;
		}
		if (oParent instanceof sap.m.TileContent || oParent instanceof sap.m.GenericTile) {
			if (oParent instanceof sap.m.TileContent) {
				if (this._isInGenericTile(oParent)) {
					return true;
				}
			}
			if (oParent instanceof sap.m.GenericTile) {
				return true;
			}
		} else if (this._isInGenericTile(oParent)) {
			return true;
		}
	};

	/**
	 * Removes all SAP standard margin classes from control.
	 * @param {Object} oChart The outer Chart instance wrapper
	 * @private
	 */
	sap.suite.ui.microchart._removeStandardMargins = function (oChart) {
		for (var i = 0; i < sap.suite.ui.microchart._aStandardMarginClassNames.length; i++) {
			if (oChart.hasStyleClass(sap.suite.ui.microchart._aStandardMarginClassNames[i])) {
				oChart.removeStyleClass(sap.suite.ui.microchart._aStandardMarginClassNames[i]);
			}
		}
	};

	/**
	 * Passes the parent container context to the child of the chart.
	 * @param {Object} oChart The microchart control instance that may have sapMargins as a custom style.
	 * @param {Object} oChildChart The inner Chart instance which gets the outer Chart instance wrapper instance context
	 * @private
	 */
	sap.suite.ui.microchart._passParentContextToChild = function (oChart, oChildChart) {
		if (oChart.data("_parentRenderingContext")) {
			oChildChart.data("_parentRenderingContext", oChart.data("_parentRenderingContext"));
		} else if (jQuery.isFunction(oChart.getParent)) {
			oChildChart.data("_parentRenderingContext", oChart.getParent());
		}
	};

	/**
	 * Tests if tooltip consists of empty characters. In such case the tooltip should be suppressed.
	 * @param {string} tooltip The string to be checked.
	 * @returns {boolean} True if the tooltip consists of only whitespace characters, false otherwise.
	 * @private
	 */
	sap.suite.ui.microchart._isTooltipSuppressed = function (tooltip) {
		return tooltip !== null && tooltip !== undefined && !tooltip.trim();
	};

	/**
	 * Checks the given control's visibility in a defined interval and calls the given callback function when the control becomes visible.
	 *
	 * @param {sap.ui.core.Control} control The control whose visibility is to be checked
	 * @param {function} callback The callback function to be called when the control becomes visible
	 * @private
	 */
	sap.suite.ui.microchart._checkControlIsVisible = function (control, callback) {
		function isControlVisible() {
			return control.getVisible() && control.getDomRef() && control.$().is(":visible") && control.getDomRef().getBoundingClientRect().width !== 0;
		}

		/**
		 * Checks the control's visibility in a defined interval
		 */
		function doVisibilityCheck() {
			if (isControlVisible()) {
				sap.ui.getCore().detachIntervalTimer(doVisibilityCheck);
				callback.call(control);
			}
		}

		var fnOriginalExit = control.exit;
		control.exit = function() {
			sap.ui.getCore().detachIntervalTimer(doVisibilityCheck);
			if (fnOriginalExit) {
				fnOriginalExit.call(control);
			}
		};

		if (isControlVisible()) {
			callback.call(control);
		} else {
			sap.ui.getCore().attachIntervalTimer(doVisibilityCheck);
		}
	};

	/**
	 * Checks whether the current theme is a high contrast theme like sap_belize_hcb or sap_belize_hcw.
	 * @returns {boolean} True if the theme name contains hcb or hcw, false otherwise
	 * @private
	 */
	sap.suite.ui.microchart._isThemeHighContrast = function() {
		return /(hcw|hcb)/g.test(sap.ui.getCore().getConfiguration().getTheme());
	};

	return sap.suite.ui.microchart;
});

}; // end of sap/suite/ui/microchart/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.AreaMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.AreaMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/AreaMicroChart",['jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/Device', 'sap/m/FlexBox'],
	function(jQuery, library, Control, Device, FlexBox) {
	"use strict";

	/**
	 * Constructor for a new AreaMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Chart that displays the history of values and target values as segmented lines and shows thresholds as colored background. This control replaces the deprecated sap.suite.ui.commons.MicroAreaChart.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.AreaMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time metamodel
	 */
	var AreaMicroChart = Control.extend("sap.suite.ui.microchart.AreaMicroChart", /** @lends sap.suite.ui.microchart.AreaMicroChart.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The width of the chart.
				 */
				width: {type: "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},

				/**
				 * The height of the chart.
				 */
				height: {type: "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},

				/**
				 * If this property is set it indicates the value X axis ends with.
				 */
				maxXValue: {type: "float", group : "Misc", defaultValue : null},

				/**
				 * If this property is set it indicates the value X axis ends with.
				 */
				minXValue: {type : "float", group : "Misc", defaultValue : null},

				/**
				 * If this property is set it indicates the value X axis ends with.
				 */
				maxYValue: {type: "float", group : "Misc", defaultValue : null},

				/**
				 * If this property is set it indicates the value X axis ends with.
				 */
				minYValue: {type: "float", group : "Misc", defaultValue : null},

				/**
				 * The view of the chart.
				 */
				view: {type: "sap.suite.ui.microchart.AreaMicroChartViewType", group : "Appearance", defaultValue : "Normal"},

				/**
				 * The color palette for the chart. If this property is set,
				 * semantic colors defined in AreaMicroChartItem are ignored.
				 * Colors from the palette are assigned to each line consequentially.
				 * When all the palette colors are used, assignment of the colors begins
				 * from the first palette color.
				 */
				colorPalette: {type: "string[]", group : "Appearance", defaultValue : [] },

				/**
				 * Determines if the labels are displayed or not.
				 */
				showLabel: { type: "boolean", group: "Misc", defaultValue: true },

				/**
				 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Width and height properties are ignored in such case.
				 * @since 1.38.0
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}

			},
			events : {

				/**
				 * The event is triggered when the chart is pressed.
				 */
				press: {}

			},
			defaultAggregation : "lines",
			aggregations: {
				/**
				 * The configuration of the actual values line.
				 * The color property defines the color of the line.
				 * Points are rendered in the same sequence as in this aggregation.
				 */
				chart: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem", bindable : "bindable" },

				/**
				 * The configuration of the max threshold area. The color property defines the color of the area above the max threshold line. Points are rendered in the same sequence as in this aggregation.
				 */
				maxThreshold: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem" },

				/**
				 * The configuration of the upper line of the inner threshold area. The color property defines the color of the area between inner thresholds. For rendering of the inner threshold area, both innerMaxThreshold and innerMinThreshold aggregations must be defined. Points are rendered in the same sequence as in this aggregation.
				 */
				innerMaxThreshold: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem" },

				/**
				 * The configuration of the bottom line of the inner threshold area. The color property is ignored. For rendering of the inner threshold area, both innerMaxThreshold and innerMinThreshold aggregations must be defined. Points are rendered in the same sequence as in this aggregation.
				 */
				innerMinThreshold: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem" },

				/**
				 * The configuration of the min threshold area. The color property defines the color of the area below the min threshold line. Points are rendered in the same sequence as in this aggregation.
				 */
				minThreshold: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem" },

				/**
				 * The configuration of the target values line. The color property defines the color of the line. Points are rendered in the same sequence as in this aggregation.
				 */
				target: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartItem", bindable : "bindable" },

				/**
				 * The label on X axis for the first point of the chart.
				 */
				firstXLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The label on Y axis for the first point of the chart.
				 */
				firstYLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The label on X axis for the last point of the chart.
				 */
				lastXLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The label on Y axis for the last point of the chart.
				 */
				lastYLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The label for the maximum point of the chart.
				 */
				maxLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The label for the minimum point of the chart.
				 */
				minLabel: { multiple: false, type: "sap.suite.ui.microchart.AreaMicroChartLabel" },

				/**
				 * The set of lines.
				 */
				lines: { multiple: true, type: "sap.suite.ui.microchart.AreaMicroChartItem", bindable : "bindable" }
			}

		}
	});

	// Constants
	AreaMicroChart.EDGE_CASE_WIDTH_SHOWCHART = 32; // 2rem on the basis of design
	AreaMicroChart.EDGE_CASE_HEIGHT_WIDE_VIEW_SHOWCHART = 27;
	AreaMicroChart.EDGE_CASE_HEIGHT_SHOWCANVAS = 16; // 1rem on the basis of design
	AreaMicroChart.EDGE_CASE_HEIGHT_SHOWBOTTOMLABEL = 16; // 1rem on the basis of design
	AreaMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL = 32; // 2rem on the basis of design
	AreaMicroChart.EDGE_CASE_HEIGHT_SHOWLABEL = 16; // 1rem on the basis of design
	AreaMicroChart.EDGE_CASE_WIDTH_RESIZEFONT = 168; // Corresponds to M size 10.5rem
	AreaMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT = 72; // Corresponds to M size 4.5rem
	AreaMicroChart.WIDE_MODE_LABEL_PADDING = 8; // 0.5rem on the basis of design
	AreaMicroChart.ITEM_NEUTRAL_COLOR = "sapSuiteAMCSemanticColorNeutral";
	AreaMicroChart.ITEM_NEUTRAL_NOTHRESHOLD_CSSCLASS = "sapSuiteAMCNeutralNoThreshold";

	AreaMicroChart.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
		if (Device.system.tablet || Device.system.phone) {
			Device.orientation.attachHandler(this._onOrientationChange, this);
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all
	 * themes are loaded and everything is properly initialized. We attach a theme
	 * check here.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
	};

	/**
	 * The chart will only be rendered if the theme is applied. If this is the case,
	 * the control invalidates itself.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
	};

	AreaMicroChart.prototype._getCssValues = function() {
		this._cssHelper.className = Array.prototype.slice.call(arguments).join(" ");
		var oCsses = window.getComputedStyle(this._cssHelper);

		if (oCsses.backgroundColor == undefined) {
			oCsses.backgroundColor = oCsses["background-color"];
		}

		if (oCsses.outlineStyle == undefined) {
			oCsses.outlineStyle = oCsses["outline-style"];
		}

		if (oCsses.outlineWidth == undefined) {
			oCsses.outlineWidth = oCsses["outline-width"];
		}
		return oCsses;
	};

	AreaMicroChart.prototype.__fillThresholdArea = function(c, aPoints1, aPoints2, color) {
		c.beginPath();
		c.moveTo(aPoints1[0].x, aPoints1[0].y);

		for (var i = 1, length = aPoints1.length; i < length; i++) {
			c.lineTo(aPoints1[i].x, aPoints1[i].y);
		}

		for (var j = aPoints2.length - 1; j >= 0; j--) {
			c.lineTo(aPoints2[j].x, aPoints2[j].y);
		}

		c.closePath();

		c.fillStyle = "white";
		c.fill();

		c.fillStyle = color;
		c.fill();

		c.lineWidth = 1;
		c.strokeStyle = "white";
		c.stroke();

		c.strokeStyle = color;
		c.stroke();
	};

	AreaMicroChart.prototype._renderDashedLine = function(c, aPoints, d, aDashes) {
		if (c.setLineDash) {
			c.setLineDash(aDashes);
			this._renderLine(c, aPoints, d);
			c.setLineDash([]);
		} else {
			c.beginPath();
			for (var i = 0, length = aPoints.length - 1; i < length; i++) {
				c._dashedLine(aPoints[i].x, aPoints[i].y, aPoints[i + 1].x, aPoints[i + 1].y, aDashes);
			}
			c.stroke();
		}
	};

	AreaMicroChart.prototype._renderLine = function(c, aPoints, d) {
		c.beginPath();
		c.moveTo(aPoints[0].x, aPoints[0].y);

		for (var i = 1, length = aPoints.length; i < length; i++) {
			c.lineTo(aPoints[i].x, aPoints[i].y);
		}

		c.stroke();
	};

	/**
	 * Defines the color class based on the threshold values.
	 *
	 * @private
	 * @param {object} canvasDimensions The canvas' calculated dimensions object.
	 * @param {boolean} targetColor Flag indicating render target.
	 * @returns {String} The CSS class used for line color.
	 */
	AreaMicroChart.prototype._getItemColor = function(canvasDimensions, targetColor) {
		var sItemColor;
		if (targetColor && this.getTarget()) {
			sItemColor = "sapSuiteAMCSemanticColor" + this.getTarget().getColor();
		} else if (!targetColor && this.getChart()){
			sItemColor = "sapSuiteAMCSemanticColor" + this.getChart().getColor();
		}
		if ((sItemColor === AreaMicroChart.ITEM_NEUTRAL_COLOR) && !this._isThresholdPresent(canvasDimensions)) {
			return AreaMicroChart.ITEM_NEUTRAL_NOTHRESHOLD_CSSCLASS;
		} else {
			return sItemColor;
		}
	};

	/**
	 * Identifies if the control has thresholds based on the threshold's number of elements.
	 *
	 * @private
	 * @param {object} canvasDimensions - the canvas' calculated dimensions object
	 * @returns {boolean} - flag showing if thresholds exist
	 */
	AreaMicroChart.prototype._isThresholdPresent = function(canvasDimensions) {
		var aThreshold = [canvasDimensions.minThreshold.length, canvasDimensions.maxThreshold.length, canvasDimensions.innerMinThreshold.length, canvasDimensions.innerMaxThreshold.length];
		for (var i = 0; i < aThreshold.length; i++) {
			if (aThreshold[i] > 1) {
				return true;
			}
		}

		return false;
	};

	AreaMicroChart.prototype._renderTarget = function(c, d) {
		if (d.target.length > 1) {
			var sColorClass = this._getItemColor(d, true);
			var oCsses = this._getCssValues("sapSuiteAMCTarget", sColorClass);
			c.strokeStyle = oCsses.color;
			c.lineWidth = parseFloat(oCsses.width);

			if (oCsses.outlineStyle == "dotted") {
				this._renderDashedLine(c, d.target, d, [parseFloat(oCsses.outlineWidth), 3]);
			} else {
				this._renderLine(c, d.target, d);
			}
		} else if (d.target.length == 1) {
			jQuery.sap.log.warning("Target is not rendered because only 1 point was given");
		}
	};

	AreaMicroChart.prototype._renderThresholdLine = function(c, aPoints, d) {
		if (aPoints && aPoints.length) {
			var oCsses = this._getCssValues("sapSuiteAMCThreshold");

			c.strokeStyle = oCsses.color;
			c.lineWidth = oCsses.width;
			this._renderLine(c, aPoints, d);
		}
	};

	AreaMicroChart.prototype._fillMaxThreshold = function(c, d) {
		if (d.maxThreshold.length > 1) {
			var oCsses = this._getCssValues("sapSuiteAMCThreshold", "sapSuiteAMCSemanticColor" + this.getMaxThreshold().getColor());
			this.__fillThresholdArea(c, d.maxThreshold, [
				{x: d.maxThreshold[0].x, y: d.minY},
				{x: d.maxThreshold[d.maxThreshold.length - 1].x, y: d.minY}
			], oCsses.backgroundColor);
			this._renderThresholdLine(c, d.maxThreshold, d);
		} else if (d.maxThreshold.length == 1) {
			jQuery.sap.log.warning("Max Threshold is not rendered because only 1 point was given");
		}
	};

	AreaMicroChart.prototype._fillMinThreshold = function(c, d) {
		if (d.minThreshold.length > 1) {
			var oCsses = this._getCssValues("sapSuiteAMCThreshold", "sapSuiteAMCSemanticColor" + this.getMinThreshold().getColor());
			this.__fillThresholdArea(c, d.minThreshold, [
				{x: d.minThreshold[0].x, y: d.maxY},
				{x: d.minThreshold[d.minThreshold.length - 1].x, y: d.maxY}
			], oCsses.backgroundColor);
		} else if (d.minThreshold.length == 1) {
			jQuery.sap.log.warning("Min Threshold is not rendered because only 1 point was given");
		}
	};

	AreaMicroChart.prototype._fillThresholdArea = function(c, d) {
		if (d.minThreshold.length > 1 && d.maxThreshold.length > 1) {
			var oCsses = this._getCssValues("sapSuiteAMCThreshold", "sapSuiteAMCSemanticColorCritical");

			this.__fillThresholdArea(c, d.maxThreshold, d.minThreshold, oCsses.backgroundColor);
		}
	};

	AreaMicroChart.prototype._fillInnerThresholdArea = function(c, d) {
		if (d.innerMinThreshold.length > 1 && d.innerMaxThreshold.length > 1) {
			var oCsses = this._getCssValues("sapSuiteAMCThreshold", "sapSuiteAMCSemanticColor" + this.getInnerMaxThreshold().getColor());

			this.__fillThresholdArea(c, d.innerMaxThreshold, d.innerMinThreshold, oCsses.backgroundColor);
		} else if (d.innerMinThreshold.length || d.innerMaxThreshold.length) {
			jQuery.sap.log.warning("Inner threshold area is not rendered because inner min and max threshold were not correctly set");
		}
	};

	AreaMicroChart.prototype._renderChart = function(c, d) {
		if (d.chart.length > 1) {
			var sColorClass = this._getItemColor(d);
			var oCsses = this._getCssValues("sapSuiteAMCChart", sColorClass);
			c.strokeStyle = oCsses.color;
			c.lineWidth = parseFloat(oCsses.width);

			this._renderLine(c, d.chart, d);
		} else if (d.chart.length == 1) {
			jQuery.sap.log.warning("Actual values are not rendered because only 1 point was given");
		}
	};

	AreaMicroChart.prototype._renderLines = function(c, d) {
		var iCpLength = this.getColorPalette().length;
		var iCpIndex = 0;
		var that = this;

		var fnNextColor = function() {
			if (iCpLength) {
				if (iCpIndex == iCpLength) {
					iCpIndex = 0;
				}
				return that.getColorPalette()[iCpIndex++];
			}
		};

		var oCsses = this._getCssValues("sapSuiteAMCLine");
		c.lineWidth = parseFloat(oCsses.width);

		var iLength = d.lines.length;
		for (var i = 0; i < iLength; i++) {
			if (d.lines[i].length > 1) {
				if (iCpLength) {
					c.strokeStyle = fnNextColor();
				} else {
					oCsses = this._getCssValues("sapSuiteAMCLine", "sapSuiteAMCSemanticColor" + this.getLines()[i].getColor());
					c.strokeStyle = oCsses.color;
				}
				this._renderLine(c, d.lines[i], d);
			}
		}
	};

	/**
	 * Renders the canvas.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._renderCanvas = function() {
		this._cssHelper = document.getElementById(this.getId() + "-css-helper");

		var $this = this.$();
		var sLabelsWidth = $this.find(".sapSuiteAMCSideLabels").css("width");
		$this.find(".sapSuiteAMCCanvas, .sapSuiteAMCLabels").css("right", sLabelsWidth).css("left", sLabelsWidth);

		var canvas = document.getElementById(this.getId() + "-canvas");
		var canvasSettings = window.getComputedStyle(canvas);

		var fWidth = parseFloat(canvasSettings.width);
		canvas.setAttribute("width", fWidth ? fWidth : 360);

		var fHeight = parseFloat(canvasSettings.height);
		canvas.setAttribute("height", fHeight ? fHeight : 242);

		var c = canvas.getContext("2d");

		c.lineJoin = "round";

		c._dashedLine = function(x, y, x2, y2, dashArray) {
			var dashCount = dashArray.length;
			this.moveTo(x, y);
			var dx = (x2 - x), dy = (y2 - y);
			var slope = dx ? dy / dx : 1e15;
			var distRemaining = Math.sqrt(dx * dx + dy * dy);
			var dashIndex = 0, draw = true;
			while (distRemaining >= 0.1) {
				var dashLength = dashArray[dashIndex++ % dashCount];
				if (dashLength > distRemaining) {
					dashLength = distRemaining;
				}
				var xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
				if (dx < 0) {
					xStep = -xStep;
				}
				x += xStep;
				y += slope * xStep;
				this[draw ? 'lineTo' : 'moveTo'](x, y);
				distRemaining -= dashLength;
				draw = !draw;
			}
		};
		var d = this._calculateDimensions(canvas.width, canvas.height);

		if (this._isThresholdPresent(d)) {
			$this.find(".sapSuiteAMCCanvas").addClass("sapSuiteAMCWithThreshold");
		}

		this._fillMaxThreshold(c, d);
		this._fillMinThreshold(c, d);
		this._fillThresholdArea(c, d);
		this._renderThresholdLine(c, d.minThreshold, d);
		this._renderThresholdLine(c, d.maxThreshold, d);
		this._fillInnerThresholdArea(c, d);
		this._renderThresholdLine(c, d.innerMinThreshold, d);
		this._renderThresholdLine(c, d.innerMaxThreshold, d);
		this._renderTarget(c, d);
		this._renderChart(c, d);
		this._renderLines(c, d);
	};

	/**
	 * Calculates dimensions
	 *
	 * @private
	 * @param {float} fWidth Canvas width
	 * @param {float} fHeight Canvas height
	 * @returns {object} An object containing the dimensions calculation results
	 */
	AreaMicroChart.prototype._calculateDimensions = function(fWidth, fHeight) {
		var maxX, maxY, minX, minY;
		maxX = maxY = minX = minY = undefined;
		var that = this;

		function calculateExtrema() {
			if (!that._isMinXValue || !that._isMaxXValue || !that._isMinYValue || !that._isMaxYValue) {
				var lines = that.getLines();
				if (that.getMaxThreshold()) {
					lines.push(that.getMaxThreshold());
				}

				if (that.getMinThreshold()) {
					lines.push(that.getMinThreshold());
				}

				if (that.getChart()) {
					lines.push(that.getChart());
				}

				if (that.getTarget()) {
					lines.push(that.getTarget());
				}

				if (that.getInnerMaxThreshold()) {
					lines.push(that.getInnerMaxThreshold());
				}

				if (that.getInnerMinThreshold()) {
					lines.push(that.getInnerMinThreshold());
				}

				for (var i = 0, numOfLines = lines.length; i < numOfLines; i++) {
					var aPoints = lines[i].getPoints();

					for (var counter = 0, a = aPoints.length; counter < a; counter++) {
						var tmpVal = aPoints[counter].getXValue();
						if (tmpVal > maxX || maxX === undefined) {
							maxX = tmpVal;
						}
						if (tmpVal < minX || minX === undefined) {
							minX = tmpVal;
						}

						tmpVal = aPoints[counter].getYValue();
						if (tmpVal > maxY || maxY === undefined) {
							maxY = tmpVal;
						}
						if (tmpVal < minY || minY === undefined) {
							minY = tmpVal;
						}
					}
				}
			}
			if (that._isMinXValue) {
				minX = that.getMinXValue();
			}

			if (that._isMaxXValue) {
				maxX = that.getMaxXValue();
			}

			if (that._isMinYValue) {
				minY = that.getMinYValue();
			}

			if (that._isMaxYValue) {
				maxY = that.getMaxYValue();
			}
		}

		calculateExtrema();

		var oResult = {
			minY: 0,
			minX: 0,
			maxY: fHeight,
			maxX: fWidth,
			lines: []
		};

		var kx;
		var fDeltaX = maxX - minX;

		if (fDeltaX > 0) {
			kx = fWidth / fDeltaX;
		} else if (fDeltaX == 0) {
			kx = 0;
			oResult.maxX /= 2;
		} else {
			jQuery.sap.log.warning("Min X is more than max X");
		}

		var ky;
		var fDeltaY = maxY - minY;

		if (fDeltaY > 0) {
			ky = fHeight / (maxY - minY);
		} else if (fDeltaY == 0) {
			ky = 0;
			oResult.maxY /= 2;
		} else {
			jQuery.sap.log.warning("Min Y is more than max Y");
		}

		function calculateCoordinates(line) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();

			var fnCalcX = function(fValue) {
				var x = kx * (fValue - minX);

				if (bRtl) {
					x = oResult.maxX - x;
				}
				return x;
			};

			var fnCalcY = function(fValue) {
				return oResult.maxY - ky * (fValue - minY);
			};

			var aResult = [];
			if (line && kx != undefined && ky != undefined) {
				var aPoints = line.getPoints();
				var iLength = aPoints.length;
				var xi, yi, tmpXValue, tmpYValue;

				if (iLength == 1) {
					tmpXValue = aPoints[0].getXValue();
					tmpYValue = aPoints[0].getYValue();

					if (tmpXValue == undefined ^ tmpYValue == undefined) {
						var xn, yn;
						if (tmpXValue == undefined) {
							yn = yi = fnCalcY(tmpYValue);
							xi = oResult.minX;
							xn = oResult.maxX;
						} else {
							xn = xi = fnCalcX(tmpXValue);
							yi = oResult.minY;
							yn = oResult.maxY;
						}

						aResult.push({x: xi, y: yi}, {x: xn, y: yn});
					} else {
						jQuery.sap.log.warning("Point with coordinates [" + tmpXValue + " " + tmpYValue + "] ignored");
					}
				} else {
					for (var i = 0; i < iLength; i++) {
						tmpXValue = aPoints[i].getXValue();
						tmpYValue = aPoints[i].getYValue();

						if (tmpXValue != undefined && tmpYValue != undefined) {
							xi = fnCalcX(tmpXValue);
							yi = fnCalcY(tmpYValue);

							aResult.push({x: xi, y: yi});
						} else {
							jQuery.sap.log.warning("Point with coordinates [" + tmpXValue + " " + tmpYValue + "] ignored");
						}
					}
				}
			}
			return aResult;
		}

		oResult.maxThreshold = calculateCoordinates(that.getMaxThreshold());
		oResult.minThreshold = calculateCoordinates(that.getMinThreshold());
		oResult.chart = calculateCoordinates(that.getChart());
		oResult.target = calculateCoordinates(that.getTarget());
		oResult.innerMaxThreshold = calculateCoordinates(that.getInnerMaxThreshold());
		oResult.innerMinThreshold = calculateCoordinates(that.getInnerMinThreshold());

		var iLength = that.getLines().length;
		for (var i = 0; i < iLength; i++) {
			oResult.lines.push(calculateCoordinates(that.getLines()[i]));
		}
		return oResult;
	};

	/**
	 * Property setter for the Min X value
	 *
	 * @param {float} value - new value Min X
	 * @param {boolean} bSuppressInvalidate - Suppress in validate
	 * @returns {void}
	 * @public
	 */
	AreaMicroChart.prototype.setMinXValue = function(value, bSuppressInvalidate) {
		this._isMinXValue = this._isNumber(value);

		return this.setProperty("minXValue", this._isMinXValue ? value : NaN, bSuppressInvalidate);
	};

	/**
	 * Property setter for the Max X value
	 *
	 * @param {float} value - new value Max X
	 * @param {boolean} bSuppressInvalidate - Suppress in validate
	 * @returns {void}
	 * @public
	 */
	AreaMicroChart.prototype.setMaxXValue = function(value, bSuppressInvalidate) {
		this._isMaxXValue = this._isNumber(value);

		return this.setProperty("maxXValue", this._isMaxXValue ? value : NaN, bSuppressInvalidate);
	};

	/**
	 * Property setter for the Min Y value
	 *
	 * @param {float} value - new value Min Y
	 * @param {boolean} bSuppressInvalidate - Suppress in validate
	 * @returns {void}
	 * @public
	 */
	AreaMicroChart.prototype.setMinYValue = function(value, bSuppressInvalidate) {
		this._isMinYValue = this._isNumber(value);

		return this.setProperty("minYValue", this._isMinYValue ? value : NaN, bSuppressInvalidate);
	};

	/**
	 * Property setter for the Max Y value
	 *
	 * @param {float} value - new value Max Y
	 * @param {boolean} bSuppressInvalidate - Suppress in validate
	 * @returns {void}
	 * @public
	 */
	AreaMicroChart.prototype.setMaxYValue = function(value, bSuppressInvalidate) {
		this._isMaxYValue = this._isNumber(value);

		return this.setProperty("maxYValue", this._isMaxYValue ? value : NaN, bSuppressInvalidate);
	};

	AreaMicroChart.prototype._isNumber = function(n) {
		return typeof n === 'number' && !isNaN(n) && isFinite(n);
	};

	AreaMicroChart.prototype.onBeforeRendering = function() {
		if (this._bUseIndex) {
			this._indexChartItems();
		}
		if (this.getIsResponsive() && !this.data("_parentRenderingContext") && jQuery.isFunction(this.getParent)) {
			this.data("_parentRenderingContext", this.getParent());
		}
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}

		this._unbindMouseEnterLeaveHandler();
	};

	AreaMicroChart.prototype.onAfterRendering = function() {
		if (this.getIsResponsive()) {
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);

		this._bindMouseEnterLeaveHandler();
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._onControlIsVisible = function() {
		if (this.getIsResponsive()) {
			this._onResize();
		} else {
			this._renderCanvas();
		}
	};

	AreaMicroChart._CHARTITEM_AGGREGATIONS = ["chart", "target", "minThreshold", "maxThreshold", "innerMinThreshold", "innerMaxThreshold"];

	/**
	 * Applies numeric indices to the x-coordinates of all points in all AreaMicroChartItem aggregations in order to have them be enumerable.
	 * This simple enumeration causes an equidistant point distribution on the x-axis.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._indexChartItems = function() {
		var oChartItem, n = AreaMicroChart._CHARTITEM_AGGREGATIONS.length;
		for (var i = 0; i < n; i++) {
			oChartItem = this.getAggregation(AreaMicroChart._CHARTITEM_AGGREGATIONS[i]);
			if (oChartItem) {
				this._indexChartItemPoints(oChartItem);
			}
		}
	};

	/**
	 * Sets the property "x" of all points in the given AreaMicroChartItem to their respective index in the "points" aggregation.
	 *
	 * @param {sap.suite.ui.microchart.AreaMicroChartItem} chartItem The AreaMicroChartItem whose points are to be indexed.
	 * @private
	 */
	AreaMicroChart.prototype._indexChartItemPoints = function(chartItem) {
		var oPoints = chartItem.getPoints();
		for (var i = 0; i < oPoints.length; i++) {
			oPoints[i].setProperty("x", i, true);
		}
	};

	/**
	 * Enables x-values of all points are automatically indexed with numeric, equidistant values.
	 *
	 * @param {boolean} useIndex Flag to activate automatic index
	 * @protected
	 */
	AreaMicroChart.prototype.enableXIndexing = function(useIndex) {
		this._bUseIndex = useIndex;
	};

	/**
	 * Handles the responsiveness.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._onResize = function() {
		this.$().addClass("sapSuiteMicroChartsResponsive");
		this._resizeHorizontally();
		this._resizeVertically();
	};

	/**
	 * Handles the orientation change. The position and width of the canvas need to be
	 * recalculated after an orientation change.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._onOrientationChange = function() {
		this._renderCanvas(this.$());
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._adjustToParent = function() {
		if (this.data("_parentRenderingContext") && this.data("_parentRenderingContext") instanceof FlexBox) {
			// Subtracts two pixels, otherwise there's not enough space for the outline, and the chart won't be rendered properly
			var $Parent = this.data("_parentRenderingContext").$();
			var iParentWidth = parseFloat($Parent.width()) - 2;
			var iParentHeight = parseFloat($Parent.height()) - 2;
			this.$().outerWidth(iParentWidth).outerHeight(iParentHeight);
		}
	};

	/**
	 * Resizes the chart vertically. If the height of the chart is less or equal to min-height (less), it hides the chart. Assuming that all the CSS has already been loaded and are available.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._resizeVertically = function() {
		var $this = this.$(),
			fCurrentControlHeight = parseFloat($this.css("height")),
			$Canvas = $this.find(".sapSuiteAMCCanvas"),
			fCurrentCanvasContentHeight = parseFloat($Canvas.css("height"));

		// Hides the canvas' content if needed
		if (fCurrentCanvasContentHeight <= AreaMicroChart.EDGE_CASE_HEIGHT_SHOWCANVAS) {
			$Canvas.hide();
		} else {
			this._renderCanvas($this);
		}
		// Resizes the fonts
		if (fCurrentControlHeight <= AreaMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT) {
			$this.addClass("sapSuiteAMCSmallFont");
		}
		// Hides chart in wide and normal view
		if (this.getView() === library.AreaMicroChartViewType.Wide) {
			if (this._hideWholeChartInWideMode(true)) {
				$this.hide();
			}
		} else {
			// Hides the top labels EDGE_CASE_HEIGHT_SHOWBOTTOMLABEL
			if (fCurrentControlHeight <= AreaMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL) {
				$this.find(".sapSuiteAMCPositionTop.sapSuiteAMCLabels").hide();
			}
			// Hides the bottom labels
			if (fCurrentControlHeight <= AreaMicroChart.EDGE_CASE_HEIGHT_SHOWBOTTOMLABEL) {
				$this.find(".sapSuiteAMCPositionBtm.sapSuiteAMCLabels").hide();
			}
		}
	};

	/**
	 * Resizes the chart horizontally. If the width of the chart is less or equal to min-width (less), it hides the chart. Assumes that all the CSS has already been loaded and are available.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		var iCurrentControlWidth = parseFloat($this.css("width"));
		var $TopLabelContainer = $this.find(".sapSuiteAMCPositionTop.sapSuiteAMCLabels");
		var $BottomLabelContainer = $this.find(".sapSuiteAMCPositionBtm.sapSuiteAMCLabels");
		var sView = this.getView();
		// Hides the entire chart if needed
		if (iCurrentControlWidth <= AreaMicroChart.EDGE_CASE_WIDTH_SHOWCHART || this.getView() === library.AreaMicroChartViewType.Wide && this._hideWholeChartInWideMode(false)){
			$this.hide();
		} else {
			this._renderCanvas($this);
			// Resizes the fonts
			if (iCurrentControlWidth <= AreaMicroChart.EDGE_CASE_WIDTH_RESIZEFONT) {
				$this.addClass("sapSuiteAMCSmallFont");
			}
			// Hides the labels if truncated
			var $LabelContainer = [];
			$LabelContainer.push($TopLabelContainer, $BottomLabelContainer);
			for (var i = 0; i < $LabelContainer.length; i++){
				var $Labels;
				if (sView === library.AreaMicroChartViewType.Wide) {
					$Labels = $LabelContainer[i].find(".sapSuiteAMCPositionCenter");
				} else {
					$Labels = $LabelContainer[i].find(".sapSuiteAMCLbl");
				}
				for (var j = 0; j < $Labels.size(); j++){
					if (this._isLabelTruncated($Labels[j])) {
						$LabelContainer[i].hide();
						if (jQuery($Labels[j]).parent().is($TopLabelContainer)) {
							$this.removeClass("sapSuiteAMCTopLbls");
						} else if (jQuery($Labels[j]).parent().is($BottomLabelContainer)) {
							$this.removeClass("sapSuiteAMCBtmLbls");
						}
						break;
					}
				}
			}
		}
	};

	/**
	 * Checks if the chart should be hidden in wide mode.
	 *
	 * @private
	 * @param {Boolean} vertical true indicates the size change comes from vertical direction, otherwise is horizontal direction
	 * @returns {boolean} True if the chart should be hidden, otherwise not.
	 */
	AreaMicroChart.prototype._hideWholeChartInWideMode = function(vertical) {
		var $this = this.$();
		var $RightLabels = this.$().find(".sapSuiteAMCPositionRight.sapSuiteAMCSideLabels");
		var $LeftLabels = this.$().find(".sapSuiteAMCPositionLeft.sapSuiteAMCSideLabels");
		if (vertical) {
			return $RightLabels.height() < AreaMicroChart.EDGE_CASE_HEIGHT_WIDE_VIEW_SHOWCHART || $LeftLabels.height() <= AreaMicroChart.EDGE_CASE_HEIGHT_WIDE_VIEW_SHOWCHART;
		} else {
			var iRightLabelWidth = $RightLabels.width();
			var iLeftLabelWidth = $LeftLabels.width();
			// Hides the chart especially for safari browser
			if (iRightLabelWidth + iLeftLabelWidth >= $this.width()) {
				$this.find(".sapSuiteAMCCanvas").hide();
			}
			// Removes the padding width from the label to the chart
			iRightLabelWidth = iRightLabelWidth ? iRightLabelWidth - AreaMicroChart.WIDE_MODE_LABEL_PADDING : 0;
			iLeftLabelWidth = iLeftLabelWidth ? iLeftLabelWidth - AreaMicroChart.WIDE_MODE_LABEL_PADDING : 0;
			return iRightLabelWidth + iLeftLabelWidth >= this.$().width();
		}
	};

	/**
	 * Checks if the label should be truncated.
	 *
	 * @private
	 * @param {Object} label The label to be checked
	 * @returns {boolean} True if the label should be truncated, false if not.
	 */
	AreaMicroChart.prototype._isLabelTruncated = function(label) {
		var iSubtrahend;

		/* Both Internet Explorer and Edge browser compute the scrollWidth with 1px too much.
		 * In this case the scrollWidth needs to be reduced by 1px */
		if (Device.browser.msie || Device.browser.edge) {
			iSubtrahend = 1;
		} else {
			iSubtrahend = 0;
		}
		return label.offsetWidth < label.scrollWidth - iSubtrahend;
	};

	AreaMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	AreaMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	AreaMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	AreaMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);

		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}

		return this;
	};

	AreaMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);

		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	AreaMicroChart.prototype._getLocalizedColorMeaning = function(sColor) {
		return this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
	};

	AreaMicroChart.prototype.getAltText = function() {
		var sAltText = "";
		var oFirstXLabel = this.getFirstXLabel();
		var oFirstYLabel = this.getFirstYLabel();
		var oLastXLabel = this.getLastXLabel();
		var oLastYLabel = this.getLastYLabel();
		var oMinLabel = this.getMinLabel();
		var oMaxLabel = this.getMaxLabel();
		var oActual = this.getChart();
		var oTarget = this.getTarget();
		var bIsFirst = true;
		if (oFirstXLabel && oFirstXLabel.getLabel() || oFirstYLabel && oFirstYLabel.getLabel()) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_START")) + ": " + (oFirstXLabel ? oFirstXLabel.getLabel() : "") + " " + (oFirstYLabel ? oFirstYLabel.getLabel()  + " " + this._getLocalizedColorMeaning(oFirstYLabel.getColor()) : "");
			bIsFirst = false;
		}
		if (oLastXLabel && oLastXLabel.getLabel() || oLastYLabel && oLastYLabel.getLabel()) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_END")) + ": " + (oLastXLabel ? oLastXLabel.getLabel() : "") + " " + (oLastYLabel ? oLastYLabel.getLabel()  + " " + this._getLocalizedColorMeaning(oLastYLabel.getColor()) : "");
			bIsFirst = false;
		}
		if (oMinLabel && oMinLabel.getLabel()) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_MINIMAL_VALUE")) + ": " + oMinLabel.getLabel() + " " + this._getLocalizedColorMeaning(oMinLabel.getColor());
			bIsFirst = false;
		}
		if (oMaxLabel && oMaxLabel.getLabel()) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_MAXIMAL_VALUE")) + ": " + oMaxLabel.getLabel() + " " + this._getLocalizedColorMeaning(oMaxLabel.getColor());
			bIsFirst = false;
		}
		if (oActual && oActual.getPoints() && oActual.getPoints().length > 0) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_ACTUAL_VALUES")) + ":";
			bIsFirst = false;
			var aActual = oActual.getPoints();
			for (var i = 0; i < aActual.length; i++) {
				sAltText += " " + aActual[i].getY();
			}
		}
		if (oTarget && oTarget.getPoints() && oTarget.getPoints().length > 0) {
			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("AREAMICROCHART_TARGET_VALUES")) + ":";
			var aTarget = oTarget.getPoints();
			for (var j = 0; j < aTarget.length; j++) {
				sAltText += " " + aTarget[j].getY();
			}
		}
		for (var k = 0; k < this.getLines().length; k++) {
			var oLine = this.getLines()[k];
			if (oLine.getPoints() && oLine.getPoints().length > 0) {
				sAltText += (bIsFirst ? "" : "\n") + oLine.getTitle() + ":";
				var aLine = oLine.getPoints();
				for (var y = 0; y < aLine.length; y++) {
					sAltText += " " + aLine[y].getY();
				}

				if (this.getColorPalette().length == 0) {
					sAltText += " " + this._getLocalizedColorMeaning(oLine.getColor());
				}
			}
		}
		return sAltText;
	};

	AreaMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	AreaMicroChart.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
		var oClone = Control.prototype.clone.apply(this, arguments);
		oClone._isMinXValue = this._isMinXValue;
		oClone._isMaxXValue = this._isMaxXValue;
		oClone._isMinYValue = this._isMinYValue;
		oClone._isMaxYValue = this._isMaxYValue;
		return oClone;
	};

	AreaMicroChart.prototype.exit = function() {
		if (Device.system.tablet || Device.system.phone) {
			Device.orientation.detachHandler(this._onOrientationChange, this);
		}
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._addTitleAttribute = function() {
		if (!this.$().attr("title")) {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Binds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._bindMouseEnterLeaveHandler = function () {

		// handlers need to be saved intermediately in order to unbind successfully
		if (!this._oMouseEnterLeaveHandler) {
			this._oMouseEnterLeaveHandler = {
				mouseEnterChart: this._addTitleAttribute.bind(this),
				mouseLeaveChart: this._removeTitleAttribute.bind(this)
			};
		}
		// bind events on chart
		this.$().bind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
		this.$().bind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
	};

	/**
	 * Unbinds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	AreaMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
		if (this._oMouseEnterLeaveHandler) {
			this.$().unbind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
			this.$().unbind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
		}
	};

	return AreaMicroChart;

});

}; // end of sap/suite/ui/microchart/AreaMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.AreaMicroChartItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.AreaMicroChartItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/AreaMicroChartItem",['./library', 'sap/ui/core/Element'],
	function(library, Element) {
	"use strict";

	/**
	 * The configuration of the graphic element on the chart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Graphical representation of the area micro chart regarding the value lines, the thresholds, and the target values.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.AreaMicroChartItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var AreaMicroChartItem = Element.extend("sap.suite.ui.microchart.AreaMicroChartItem", /** @lends sap.suite.ui.microchart.AreaMicroChartItem.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The graphic element color.
				 */
				color: { group: "Misc", type: "sap.m.ValueColor", defaultValue: "Neutral" },

				/**
				 * The line title.
				 */
				title: { type: "string", group: "Misc", defaultValue: null}
			},
			defaultAggregation : "points",
			aggregations: {

				/**
				 * The set of points for this graphic element.
				 */
				"points": { multiple: true, type: "sap.suite.ui.microchart.AreaMicroChartPoint", bindable : "bindable" }
			}
		}
	});

	return AreaMicroChartItem;
});

}; // end of sap/suite/ui/microchart/AreaMicroChartItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.AreaMicroChartLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.AreaMicroChartLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/AreaMicroChartLabel",['./library', 'sap/ui/core/Element'],
	function(library, Element) {
	"use strict";

	/**
	 * Constructor for a new AreaMicroChart control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Displays or hides the labels for start and end dates, start and end values, and minimum and maximum values.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.AreaMicroChartLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var AreaMicroChartLabel = Element.extend("sap.suite.ui.microchart.AreaMicroChartLabel", /** @lends sap.suite.ui.microchart.AreaMicroChartLabel.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {

				/**
				 * The graphic element color.
				 */
				color: { group: "Misc", type: "sap.m.ValueColor", defaultValue: "Neutral" },

				/**
				 * The line title.
				 */
				label: {type : "string", group : "Misc", defaultValue : "" }
			}
		}
	});

	return AreaMicroChartLabel;
});

}; // end of sap/suite/ui/microchart/AreaMicroChartLabel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.AreaMicroChartPoint') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.AreaMicroChartPoint'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/AreaMicroChartPoint",['./library', 'sap/ui/core/Element', 'sap/ui/core/Control'],
	function(library, Element, Control) {
	"use strict";

	/**
	 * This control contains data for the point.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the data for the point.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.AreaMicroChartPoint
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var AreaMicroChartPoint = Element.extend("sap.suite.ui.microchart.AreaMicroChartPoint", /** @lends sap.suite.ui.microchart.AreaMicroChartPoint.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {
				/**
				 * X value for the given point.
				 */
				x: { type : "float", group : "Misc", defaultValue : null },

				/**
				 * Y value for the given point.
				 */
				y: { type : "float", group : "Misc", defaultValue : null }
			}
		}
	});

	AreaMicroChartPoint.prototype.setX = function(value, bSuppressInvalidate) {
		this._isXValue = this._isNumber(value);

		return this.setProperty("x", this._isXValue ? value : NaN, bSuppressInvalidate);
	};


	AreaMicroChartPoint.prototype.setY = function(value, bSuppressInvalidate) {
		this._isYValue = this._isNumber(value);

		return this.setProperty("y", this._isYValue ? value : NaN, bSuppressInvalidate);
	};

	/**
	 * Returns the x value. It returns 'undefined', if the x property was not set or an invalid number was set.
	 *
	 * @public
	 * @returns {float} The x-value, or undefined if the value set was invalid
	 */
	AreaMicroChartPoint.prototype.getXValue = function() {
		return this._isXValue ? this.getX() : undefined;
	};

	/**
	 * Returns the y value. It returns 'undefined', if the y property was not set or an invalid number was set.
	 *
	 * @public
	 * @returns {float} The y-value, or undefined if the value set was invalid
	 */
	AreaMicroChartPoint.prototype.getYValue = function() {
		return this._isYValue ? this.getY() : undefined;
	};

	AreaMicroChartPoint.prototype._isNumber = function(n) {
	    return typeof n == 'number' && !isNaN(n) && isFinite(n);
	};

	AreaMicroChartPoint.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
		var oClone = Control.prototype.clone.apply(this, arguments);
		oClone._isXValue = this._isXValue;
		oClone._isYValue = this._isYValue;
		return oClone;
	};

	return AreaMicroChartPoint;
});

}; // end of sap/suite/ui/microchart/AreaMicroChartPoint.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.BulletMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.BulletMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/BulletMicroChart",[ "jquery.sap.global", "./library", "sap/m/library", "sap/ui/core/Control", "sap/m/FlexBox", "sap/ui/Device", "sap/ui/core/ResizeHandler" ],
	function(jQuery, library, MobileLibrary, Control, FlexBox, Device, ResizeHandler) {
	"use strict";

	/**
	 * Constructor for a new BulletMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Displays a colored horizontal bar representing a current value on top of a background bar representing the compared value. The vertical bars can represent the numeric values, the scaling factors, the thresholds, and the target values.  This control replaces the deprecated sap.suite.ui.commons.BulletChart.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.BulletMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time metamodel
	 */
	var BulletMicroChart = Control.extend("sap.suite.ui.microchart.BulletMicroChart", /** @lends sap.suite.ui.microchart.BulletMicroChart.prototype */ { metadata : {

		library: "sap.suite.ui.microchart",
		properties: {
			/**
			 * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
			 */
			size: {type: "sap.m.Size", group: "Misc", defaultValue: "Auto"},

			/**
			 * The mode of displaying the actual value itself or the delta between the actual value and the target value. If not set, the actual value is displayed.
			 */
			mode: {type: "sap.suite.ui.microchart.BulletMicroChartModeType", group: "Misc", defaultValue: "Actual"},

			/**
			 * The scaling suffix that is added to the actual and target values.
			 */
			scale: {type: "string", group: "Misc", defaultValue: ""},

			/**
			 * The forecast value that is displayed in Actual  mode only. If set, the forecast value bar appears in the background of the actual value bar.
			 */
			forecastValue: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * The target value that is displayed as a black vertical bar.
			 */
			targetValue: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * The minimum scale value for the bar chart used for defining a fixed size of the scale in different instances of this control.
			 */
			minValue: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * The maximum scale value for the bar chart used for defining a fixed size of the scale in different instances of this control.
			 */
			maxValue: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * If set to true, shows the numeric actual value. This property works in Actual mode only.
			 */
			showActualValue: {type: "boolean", group: "Misc", defaultValue: true},

			/**
			 * If set to true, shows the calculated delta value instead of the numeric actual value regardless of the showActualValue setting. This property works in Delta mode only.
			 */
			showDeltaValue: {type: "boolean", group: "Misc", defaultValue: true},

			/**
			 * If set to true, shows the numeric target value.
			 */
			showTargetValue: {type: "boolean", group: "Misc", defaultValue: true},

			/**
			 * If set to true, shows the value marker.
			 */
			showValueMarker: {type: "boolean", group: "Misc", defaultValue: false},

			/**
			 * If set, displays a specified label instead of the numeric actual value.
			 */
			actualValueLabel: {type: "string", group: "Misc", defaultValue: ""},

			/**
			 * If set, displays a specified label instead of the calculated numeric delta value.
			 */
			deltaValueLabel: {type: "string", group: "Misc", defaultValue: ""},

			/**
			 * If set, displays a specified label instead of the numeric target value.
			 */
			targetValueLabel: {type: "string", group: "Misc", defaultValue: ""},

			/**
			 * The width of the chart. If it is not set, the size of the control is defined by the size property.
			 */
			width: {type: "sap.ui.core.CSSSize", group: "Misc"},

			/**
			 * The background color of the scale. The theming is enabled only for the default value of this property.
			 */
			scaleColor: {type: "sap.suite.ui.microchart.CommonBackgroundType", group: "Misc", defaultValue: "MediumLight"},

			/**
			 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size and Width properties are ignored in such case.
			 * @since 1.38.0
			 */
			isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
		},
		defaultAggregation : "actual",
		aggregations: {
			/**
			 * Actual data of the BulletMicroChart.
			 */
			actual: {type: "sap.suite.ui.microchart.BulletMicroChartData", multiple: false, bindable : "bindable"},

			/**
			 * Threshold data of the BulletMicroChart.
			 */
			thresholds: {type: "sap.suite.ui.microchart.BulletMicroChartData", multiple: true, singularName: "threshold", bindable : "bindable"}
		},
		events: {
			/**
			 * The event is triggered when the chart is pressed.
			 */
			press : {}
		}
	}});

	BulletMicroChart.EDGE_CASE_WIDTH_RESIZEFONT = 168;

	BulletMicroChart.prototype.init = function() {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all
	 * themes are loaded and everything is properly initialized. We attach a theme
	 * check here.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	/**
	 * Calculates the width in percents of the chart elements according to the provided chart values.
	 *
	 * @returns {Object} object that contains calculated values for actual value, target value, thresholds and their colors.
	 * @private
	 */
	BulletMicroChart.prototype._calculateChartData = function() {
		var fScaleWidthPct = 98,
			aThresholds = this.getThresholds(),
			aCalculatedThresholds = [],
			fTarget = this.getTargetValue(),
			fForecast = this.getForecastValue(),
			fActual = this.getActual() && this.getActual().getValue() ? this.getActual().getValue() : 0,
			aValues = [],
			fLowestValue = 0,
			fHighestValue = 0,
			fTotal = 0,
			i;

		if (this.getActual() && this.getActual()._isValueSet) {
			aValues.push(fActual);
		}

		if (this._isForecastValueSet) {
			aValues.push(fForecast);
		}

		if (this._isTargetValueSet) {
			aValues.push(fTarget);
		}

		if (this._isMinValueSet) {
			aValues.push(this.getMinValue());
		}

		if (this._isMaxValueSet) {
			aValues.push(this.getMaxValue());
		}

		for (i = 0; i < aThresholds.length; i++) {
			aValues.push(aThresholds[i].getValue());
		}

		if (aValues.length > 0) {
			fLowestValue = fHighestValue = aValues[0];
			for (i = 0; i < aValues.length; i++){
				if (aValues[i] < fLowestValue) {
					fLowestValue = aValues[i];
				}
				if (aValues[i] > fHighestValue) {
					fHighestValue = aValues[i];
				}
			}

			fHighestValue = (fHighestValue < 0 && fHighestValue < 3 * (fLowestValue - fHighestValue)) ? 0 : fHighestValue;
			fLowestValue = (fLowestValue > 0 && fLowestValue > 3 * (fHighestValue - fLowestValue)) ? 0 : fLowestValue;

			fTotal = fHighestValue - fLowestValue;

			for (i = 0; i < aThresholds.length; i++) {
				aCalculatedThresholds[i] = {color: aThresholds[i].getColor(), valuePct: (!aThresholds[i]._isValueSet || fTotal === 0) ? 0 : ((aThresholds[i].getValue() - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2)};
			}
		}

		var nActualValuePct, nTargetValuePct;
		if (this.getMode() === library.BulletMicroChartModeType.Delta) {
			// In case delta mode is used, the zero handling is different, as the left position is 49 instead of 0
			nActualValuePct = (!this.getActual() || !this.getActual()._isValueSet || (fTotal === 0 && this.getActual().getValue() === 0)) ? 49 : (0.05 + (fActual - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2);
			nTargetValuePct = (!this._isTargetValueSet || fTotal === 0) ? 49 : ((fTarget - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2);
		} else {
			nActualValuePct = (!this.getActual() || !this.getActual()._isValueSet || fTotal === 0 || fLowestValue === 0 && this.getActual().getValue() === 0) ? 0 : (0.05 + (fActual - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2);
			nTargetValuePct = (!this._isTargetValueSet || fTotal === 0) ? 0 : ((fTarget - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2);
		}
		return {
			actualValuePct: nActualValuePct,
			targetValuePct: nTargetValuePct,
			forecastValuePct: (!this._isForecastValueSet || fTotal === 0) ? 0 : ((fForecast - fLowestValue) * fScaleWidthPct / fTotal).toFixed(2),
			thresholdsPct: aCalculatedThresholds,
			fScaleWidthPct: fScaleWidthPct
		};
	};

	/**
	 * Calculates the number of digits after the decimal point.
	 *
	 * @param {float} fValue float value
	 * @returns {int} number of digits after the decimal point in fValue.
	 * @private
	 */
	BulletMicroChart.prototype._digitsAfterDecimalPoint = function(fValue) {
		var sAfter = ("" + fValue).match(/[.,](\d+)/g);
		return (sAfter) ? ("" + sAfter).length - 1 : 0;
	};

	/**
	 * Calculates the delta between actual value and threshold.
	 *
	 * @returns {number} Delta value of delta between actual value and threshold.
	 * @private
	 */
	BulletMicroChart.prototype._calculateDeltaValue = function() {
		if (!this.getActual()._isValueSet || !this._isTargetValueSet) {
			return 0;
		} else {
			var fActual = this.getActual().getValue();
			var fTarget = this.getTargetValue();
			return Math.abs(fActual - fTarget).toFixed(Math.max(this._digitsAfterDecimalPoint(fActual), this._digitsAfterDecimalPoint(fTarget)));
		}
	};


	BulletMicroChart.prototype.setMinValue = function(fMinValue) {
		this._isMinValueSet = this._fnIsNumber(fMinValue);
		return this.setProperty("minValue", this._isMinValueSet ? fMinValue : NaN);
	};


	BulletMicroChart.prototype.setMaxValue = function(fMaxValue) {
		this._isMaxValueSet = this._fnIsNumber(fMaxValue);
		return this.setProperty("maxValue", this._isMaxValueSet ? fMaxValue : NaN);
	};


	BulletMicroChart.prototype.setTargetValue = function(fTargetValue) {
		this._isTargetValueSet = this._fnIsNumber(fTargetValue);
		return this.setProperty("targetValue", this._isTargetValueSet ? fTargetValue : NaN);
	};


	BulletMicroChart.prototype.setForecastValue = function(fForecastValue) {
		this._isForecastValueSet = this._fnIsNumber(fForecastValue);
		return this.setProperty("forecastValue", this._isForecastValueSet ? fForecastValue : NaN);
	};

	BulletMicroChart.prototype.setSize = function(size) {
		if (this.getSize() !== size) {
			if (size === MobileLibrary.Size.Responsive) {
				this.setProperty("isResponsive", true, true);
			} else {
				this.setProperty("isResponsive", false, true);
			}
			this.setProperty("size", size, false);
		}
		return this;
	};

	BulletMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	BulletMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which ===  jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	BulletMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.ENTER || oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	BulletMicroChart.prototype._fnIsNumber = function(value) {
		return typeof value === 'number' && !isNaN(value) && isFinite(value);
	};

	BulletMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	BulletMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	BulletMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}
		if (this._sChartResizeHandlerId ) {
			ResizeHandler.deregister(this._sChartResizeHandlerId);
		}
		if (this.getIsResponsive() && !this.data("_parentRenderingContext") && jQuery.isFunction(this.getParent)) {
			this.data("_parentRenderingContext", this.getParent());
		}

		//removes handler for mouseenter event
		this._unbindMouseEnterLeaveHandler();
	};

	BulletMicroChart.prototype.onAfterRendering = function() {
		if (this.getIsResponsive()) {
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);

		//attaches handler for mouseenter event
		this._bindMouseEnterLeaveHandler();
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._onControlIsVisible = function() {
		this._onResize();
		this._sChartResizeHandlerId = ResizeHandler.register(this, jQuery.proxy(this._onResize, this));
		if (this.getShowValueMarker()) {
			this._adjustValueToMarker();
		}
	};

	/**
	 * Conducts size adjustments that are necessary if the dimensions of the chart change.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._onResize = function() {
		if (this.getIsResponsive()) {
			this.$().removeClass("sapSuiteBMCSmallFont sapSuiteBMCNoLabels");
			this._adjustLabelsPos();
			this._resizeHorizontally();
			this._resizeVertically();
		} else {
			this._adjustLabelsPos();
		}
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._adjustToParent = function() {
		if (this.data("_parentRenderingContext") && this.data("_parentRenderingContext") instanceof FlexBox) {
			var $Parent = this.data("_parentRenderingContext").$();
			var sParentHeight = parseInt($Parent.height(), 10);
			var sParentWidth = parseInt($Parent.width(), 10);
			var $this = this.$();
			$this.outerHeight(sParentHeight - parseInt($this.css("margin-top"), 10) - parseInt($this.css("margin-bottom"), 10));
			$this.outerWidth(sParentWidth - parseInt($this.css("margin-left"), 10) - parseInt($this.css("margin-right"), 10));
		}
	};

	/**
	 * Performs vertical responsiveness adjustment. Assumes that the height of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._resizeVertically  = function() {
		var $this = this.$();
		var $OuterVerticalAlignmentContainer = $this.find(".sapSuiteBMCVerticalAlignmentContainer.sapSuiteBMCWholeControl");
		var $Canvas = $this.find(".sapSuiteBMCChartCanvas");
		// preparing resizing thresholds
		var iMaxChartHeight = parseInt($OuterVerticalAlignmentContainer.css("max-height"), 10);
		var iMinChartHeight = parseInt($OuterVerticalAlignmentContainer.css("min-height"), 10);
		var iMinCanvasHeight = parseInt($Canvas.css("min-height"), 10);
		var iCurrentControlHeight = parseInt($this.css("height"), 10);

		// font resizing
		if (iCurrentControlHeight < iMaxChartHeight) {
			$this.addClass("sapSuiteBMCSmallFont");
		}
		// vertical resizing
		if (iCurrentControlHeight < iMinCanvasHeight) {
			$this.hide();
		} else if (iCurrentControlHeight < iMinChartHeight) {
			$this.addClass("sapSuiteBMCNoLabels");
		}
	};

	/**
	 * Performs horizontal responsiveness adjustment. Assumes that the width of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		var $OuterVerticalAlignmentContainer = $this.find(".sapSuiteBMCVerticalAlignmentContainer.sapSuiteBMCWholeControl");
		var iMinChartWidth = parseInt($OuterVerticalAlignmentContainer.css("min-width"), 10);
		var iCurrentControlWidth = parseInt($this.css("width"), 10);

		if (iCurrentControlWidth <= iMinChartWidth) {
			$this.hide();
			return;
		}
		if (iCurrentControlWidth < BulletMicroChart.EDGE_CASE_WIDTH_RESIZEFONT || this._isTruncatedLabel($this)) {
			$this.addClass("sapSuiteBMCSmallFont");
		}
		if (this._isTruncatedLabel($this)) {
			$this.hide();
		}
	};

	/**
	 * Checks if any label on the chart is truncated.
	 * @returns {boolean} True if the label is truncated, false if not.
	 * @private
	 */
	BulletMicroChart.prototype._isTruncatedLabel = function() {
		var $Labels = this.$().find(".sapSuiteBMCItemValue, .sapSuiteBMCTargetBarValue");
		for (var i = 0; i < $Labels.length; i++) {
			if ($Labels[i].scrollWidth > $Labels[i].offsetWidth) {
				return true;
			}
		}
		return false;
	};

	BulletMicroChart.prototype.exit = function() {
		ResizeHandler.deregister(this._sChartResizeHandlerId);
	};

	BulletMicroChart.prototype._adjustLabelsPos = function() {
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		var oTBarVal = jQuery.sap.byId(this.getId() + "-bc-target-bar-value");
		var oChartBar = jQuery.sap.byId(this.getId() + "-chart-bar");
		var fFullWidth = oChartBar.width();
		if (fFullWidth) {
			var fTValWidth = 0;
			if (oTBarVal && oTBarVal.offset()) {
				fTValWidth = oTBarVal.offset().left - oChartBar.offset().left;
				if (bRtl) {
					fTValWidth = fFullWidth - fTValWidth;
				}
				this._adjustLabelPos(jQuery.sap.byId(this.getId() + "-bc-target-value"), fFullWidth, fTValWidth, bRtl);
			}

			var oValMarker = jQuery.sap.byId(this.getId() + "-bc-bar-value-marker");
			if (oValMarker && oValMarker.offset()) {
				var fAValWidth = oValMarker.offset().left - oChartBar.offset().left;
				if (bRtl) {
					fAValWidth = fFullWidth - fAValWidth;
				}

				if (this.getMode() === library.BulletMicroChartModeType.Delta) {
					fAValWidth = (fAValWidth + fTValWidth) / 2;
				}

				this._adjustLabelPos(jQuery.sap.byId(this.getId() + "-bc-item-value"), fFullWidth, fAValWidth, bRtl);
			}
		}
	};

	BulletMicroChart.prototype._adjustLabelPos = function(oLabel, fFullWidth, fOffset, bRtl) {
		var sDirection = bRtl ? "right" : "left";
		var fLabelWidth = oLabel.width();
		if (fLabelWidth > fFullWidth) {
			oLabel.css("width", "" + fFullWidth + "px");
			oLabel.css(sDirection, "0");
		} else {
			var fLabelLeft = fOffset - 0.5 * fLabelWidth;
			if (fLabelLeft < 0) {
				fLabelLeft = 0;
			}

			if (fLabelLeft + fLabelWidth > fFullWidth) {
				fLabelLeft = fFullWidth - fLabelWidth;
			}
			oLabel.css(sDirection, fLabelLeft);
			oLabel.css("width", "" + (parseInt(fLabelWidth, 10) + 1) + "px");
		}
	};

	BulletMicroChart.prototype._adjustValueToMarker = function() {
		var oValue = this.$("bc-bar-value");
		var oMarker = this.$("bc-bar-value-marker");
		if (oValue.offset() && oMarker.offset()) {
			var fValueWidth = oValue.width();
			var fValueLeft = oValue.offset().left;
			var fMarkerWidth = oMarker.width();
			var fMarkerLeft = oMarker.offset().left;

			if (sap.ui.getCore().getConfiguration().getRTL()) {
				if (fMarkerLeft < fValueLeft) { // browser's subpixel problem fix
					oMarker.css("right", "");
					oMarker.offset({left: fValueLeft});
				}
				if (fMarkerLeft + fMarkerWidth > fValueLeft + fValueWidth) { // bar value is less than marker min-width
					oMarker.css("right", "");
					oMarker.offset({left: fValueLeft + fValueWidth - fMarkerWidth});
				}
			} else {
				if (fMarkerLeft < fValueLeft) { // bar value is less than marker min-width
					oMarker.offset({left: fValueLeft});
				}
				if (fMarkerLeft + fMarkerWidth > fValueLeft + fValueWidth) { // browser's subpixel problem fix
					oValue.width(fMarkerLeft + fMarkerWidth - fValueLeft);
				}
			}
		}
	};

	BulletMicroChart.prototype._getLocalizedColorMeaning = function(sColor) {
		return this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
	};

	BulletMicroChart.prototype.getAltText = function() {
		var bIsActualSet = this.getActual() && this.getActual()._isValueSet;
		var sScale = this.getScale();
		var sTargetValueLabel = this.getTargetValueLabel();
		var sMeaning = !this.getActual() || !this.getActual().getColor() ? "" : this._getLocalizedColorMeaning(this.getActual().getColor());

		var sAltText = "";

		if (bIsActualSet) {
			var sActualValueLabel = this.getActualValueLabel();
			var sAValToShow = (sActualValueLabel) ? sActualValueLabel : "" + this.getActual().getValue();
			sAltText += this._oRb.getText("BULLETMICROCHART_ACTUAL_TOOLTIP", [sAValToShow + sScale, sMeaning]);
		}
		if (this.getMode() === library.BulletMicroChartModeType.Delta) {
			if (this._isTargetValueSet && bIsActualSet) {
				var sDeltaValueLabel = this.getDeltaValueLabel();
				var sDValToShow = (sDeltaValueLabel) ? sDeltaValueLabel : "" + this._calculateDeltaValue();
				sAltText += "\n" + this._oRb.getText("BULLETMICROCHART_DELTA_TOOLTIP", [sDValToShow + sScale, sMeaning]);
			}
		} else if (this._isForecastValueSet) {
			sAltText += (this._isForecastValueSet) ? "\n" + this._oRb.getText("BULLETMICROCHART_FORECAST_TOOLTIP", [this.getForecastValue() + sScale, sMeaning]) : "";
		}

		if (this._isTargetValueSet) {
			var sTValToShow = (sTargetValueLabel) ? sTargetValueLabel : "" + this.getTargetValue();
			sAltText += "\n" + this._oRb.getText("BULLETMICROCHART_TARGET_TOOLTIP", [sTValToShow + sScale]);
		}

		var aThresholds = this.getThresholds().sort(function(oFirst, oSecond) { return oFirst.getValue() - oSecond.getValue(); });

		for (var i = 0; i < aThresholds.length; i++) {
			var oThreshold = aThresholds[i];
			sAltText += "\n" + this._oRb.getText("BULLETMICROCHART_THRESHOLD_TOOLTIP", [oThreshold.getValue() + this.getScale(), this._getLocalizedColorMeaning(oThreshold.getColor())]);
		}

		return sAltText;
	};

	BulletMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	BulletMicroChart.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
		var oClone = Control.prototype.clone.apply(this, arguments);
		oClone._isMinValueSet = this._isMinValueSet;
		oClone._isMaxValueSet = this._isMaxValueSet;
		oClone._isForecastValueSet = this._isForecastValueSet;
		oClone._isTargetValueSet = this._isTargetValueSet;
		return oClone;
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._addTitleAttribute = function() {
		if (!this.$().attr("title")) {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Binds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._bindMouseEnterLeaveHandler = function () {

		// handlers need to be saved intermediately in order to unbind successfully
		if (!this._oMouseEnterLeaveHandler) {
			this._oMouseEnterLeaveHandler = {
				mouseEnterChart: this._addTitleAttribute.bind(this),
				mouseLeaveChart: this._removeTitleAttribute.bind(this)
			};
		}
		// bind events on chart
		this.$().bind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
		this.$().bind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
	};

	/**
	 * Unbinds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	BulletMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
		if (this._oMouseEnterLeaveHandler) {
			this.$().unbind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
			this.$().unbind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
		}
	};

	return BulletMicroChart;
});

}; // end of sap/suite/ui/microchart/BulletMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.BulletMicroChartData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.BulletMicroChartData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/BulletMicroChartData",['jquery.sap.global', './library', 'sap/ui/core/Element', 'sap/ui/core/Control'],
	function(jQuery, library, Element, Control) {
	"use strict";

	/**
	 * Constructor for a new BulletMicroChartData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the thresholds data.
	 * @extends sap.ui.core.Element
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.BulletMicroChartData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var BulletMicroChartData = Element.extend("sap.suite.ui.microchart.BulletMicroChartData", /** @lends sap.suite.ui.microchart.BulletMicroChartData.prototype */ { metadata : {
		library: "sap.suite.ui.microchart",
		properties: {
			/**
			 * The actual value.
			 */
			value: {type: "float", group: "Misc", defaultValue: "0"},

			/**
			 * The semantic color of the actual value.
			 */
			color: {type: "sap.m.ValueColor", group: "Misc", defaultValue: "Neutral"}
		}
	}});


	BulletMicroChartData.prototype.setValue = function(fValue) {
		this._isValueSet = this._fnIsNumber(fValue);
		return this.setProperty("value", this._isValueSet ? fValue : NaN);
	};

	BulletMicroChartData.prototype._fnIsNumber = function(n) {
		return typeof n == 'number' && !isNaN(n) && isFinite(n);
	};

	BulletMicroChartData.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
		var oClone = Control.prototype.clone.apply(this, arguments);
		oClone._isValueSet = this._isValueSet;
		return oClone;
	};

	return BulletMicroChartData;

});

}; // end of sap/suite/ui/microchart/BulletMicroChartData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.BulletMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.BulletMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/BulletMicroChartRenderer",['jquery.sap.global', './library', 'sap/m/library'],
	function(jQuery, library, MobileLibrary) {
	"use strict";

	/**
	 * BulletMicroChart renderer.
	 * @namespace
	 */
	var BulletMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.suite.ui.microchart.BulletMicroChart} oControl the control to be rendered
	 */
	BulletMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		var oChartData = oControl._calculateChartData();
		var fForecastValuePct = +oChartData.forecastValuePct;
		var sSize;
		if (oControl.getIsResponsive()) {
			sSize = "sapSuiteBMCResponsive";
		} else {
			sSize = "sapSuiteBMCSize" + oControl.getSize();
		}
		var sScale = oControl.getScale();
		var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
		var sMode = "sapSuiteBMCModeType" + oControl.getMode();
		var sDeltaValue = oControl.getMode() === library.BulletMicroChartModeType.Delta ? oControl._calculateDeltaValue() : 0;
		var bIsActualSet = oControl.getActual() && oControl.getActual()._isValueSet;
		var bShowActualValue = oControl.getShowActualValue() && oControl.getSize() !== MobileLibrary.Size.XS && oControl.getMode() ===  library.BulletMicroChartModeType.Actual;
		var bShowDeltaValue = oControl.getShowDeltaValue() && oControl.getSize() !== MobileLibrary.Size.XS && oControl.getMode() === library.BulletMicroChartModeType.Delta;
		var bShowTargetValue = oControl.getShowTargetValue() && oControl.getSize() !== MobileLibrary.Size.XS;
		var sActualValueLabel = oControl.getActualValueLabel();
		var sDeltaValueLabel = oControl.getDeltaValueLabel();
		var sTargetValueLabel = oControl.getTargetValueLabel();
		var aData = oControl.getThresholds();
		var sAriaLabel = oControl.getAltText();

		var sSemanticColor;
		if (bIsActualSet) {
			sSemanticColor = "sapSuiteBMCSemanticColor" + oControl.getActual().getColor();
		}

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteBMC");
		oRm.addClass("sapSuiteBMCContent");
		oRm.addClass(jQuery.sap.encodeHTML(sSize));
		if (oControl.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);

		oRm.writeClasses();

		if (oControl.getWidth()) {
			oRm.addStyle("width", oControl.getWidth());
			oRm.writeStyles();
		}
		oRm.writeAttribute("id", oControl.getId() + "-bc-content");
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapSuiteBMCVerticalAlignmentContainer");
		oRm.addClass("sapSuiteBMCWholeControl");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapSuiteBMCChart");
		oRm.addClass(jQuery.sap.encodeHTML(sSize));
		oRm.writeClasses();
		oRm.writeAttribute("id", oControl.getId() + "-bc-chart");
		oRm.write(">");
		var sValScale = "";
		oRm.write("<div");
		oRm.addClass("sapSuiteBMCTopLabel");
		oRm.writeClasses();
		oRm.write(">");
		if (bIsActualSet && bShowActualValue) {
			var sActualValueToRender = sActualValueLabel ? sActualValueLabel : "" + oControl.getActual().getValue();
			sValScale = sActualValueToRender + sScale;
			oRm.write("<div");
			oRm.addClass("sapSuiteBMCItemValue");
			oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
			oRm.addClass(jQuery.sap.encodeHTML(sSize));
			oRm.writeClasses();
			oRm.writeStyles();
			oRm.writeAttribute("id", oControl.getId() + "-bc-item-value");
			oRm.write(">");
			oRm.writeEscaped(sValScale);
			oRm.write("</div>");
		} else if (bIsActualSet && oControl._isTargetValueSet && bShowDeltaValue) {
			var sDeltaValueToRender = sDeltaValueLabel ? sDeltaValueLabel : "" + sDeltaValue;
			sValScale = sDeltaValueToRender + sScale;
			oRm.write("<div");
			oRm.addClass("sapSuiteBMCItemValue");
			oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
			oRm.addClass(jQuery.sap.encodeHTML(sSize));
			oRm.writeClasses();
			oRm.writeStyles();
			oRm.writeAttribute("id", oControl.getId() + "-bc-item-value");
			oRm.write(">");
			oRm.write("&Delta;");
			oRm.writeEscaped(sValScale);
			oRm.write("</div>");
		}
		oRm.write("</div>");
		oRm.write("<div");
		oRm.addClass("sapSuiteBMCChartCanvas");
		oRm.writeClasses();
		oRm.write(">");
		for (var i = 0; i < oChartData.thresholdsPct.length; i++) {
			if (aData[i]._isValueSet) {
				this.renderThreshold(oRm,  oControl, oChartData.thresholdsPct[i], sSize);
			}
		}

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-chart-bar");
		oRm.addClass("sapSuiteBMCBar");
		oRm.addClass(jQuery.sap.encodeHTML(sSize));
		oRm.addClass("sapSuiteBMCScaleColor" + oControl.getScaleColor());
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		if (bIsActualSet) {
			//render forecast value bar
			if (oControl._isForecastValueSet && oControl.getMode() === library.BulletMicroChartModeType.Actual) {
				oRm.write("<div");
				oRm.addClass("sapSuiteBMCForecastBarValue");
				oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
				oRm.addClass(jQuery.sap.encodeHTML(sSize));
				oRm.writeClasses();
				oRm.addStyle("width", fForecastValuePct + "%");
				oRm.writeStyles();
				oRm.writeAttribute("id", oControl.getId() + "-forecast-bar-value");
				oRm.write("></div>");
			}

			oRm.write("<div");
			oRm.addClass("sapSuiteBMCBarValueMarker");
			oRm.addClass(sMode);
			if (!oControl.getShowValueMarker()) {
				oRm.addClass("sapSuiteBMCBarValueMarkerHidden");
			}
			oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
			oRm.addClass(jQuery.sap.encodeHTML(sSize));
			oRm.writeClasses();
			oRm.addStyle(jQuery.sap.encodeHTML(sDirection), jQuery.sap.encodeHTML(parseFloat(oChartData.actualValuePct) + parseFloat(1) + "%"));
			if (oControl.getMode() === library.BulletMicroChartModeType.Delta && oChartData.actualValuePct <= oChartData.targetValuePct) {
				oRm.addStyle("margin", "0");
			}
			oRm.writeStyles();
			oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value-marker");
			oRm.write("></div>");

			//render actual value bar
			if (oControl.getMode() === library.BulletMicroChartModeType.Actual && oChartData.actualValuePct !== 0) {
				oRm.write("<div");
				oRm.addClass("sapSuiteBMCBarValue");
				oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
				oRm.addClass(jQuery.sap.encodeHTML(sSize));
				if (oControl._isForecastValueSet) {
					oRm.addClass("sapSuiteBMCForecast");
				}
				oRm.writeClasses();
				oRm.addStyle("width", jQuery.sap.encodeHTML(oChartData.actualValuePct + "%"));
				oRm.writeStyles();
				oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value");
				oRm.write("></div>");
			} else if (oControl._isTargetValueSet && oControl.getMode() === library.BulletMicroChartModeType.Delta) {
				oRm.write("<div");
				oRm.addClass("sapSuiteBMCBarValue");
				oRm.addClass(jQuery.sap.encodeHTML(sSemanticColor));
				oRm.addClass(jQuery.sap.encodeHTML(sSize));
				oRm.writeClasses();
				oRm.addStyle("width", jQuery.sap.encodeHTML(Math.abs(oChartData.actualValuePct - oChartData.targetValuePct) + "%"));
				oRm.addStyle(jQuery.sap.encodeHTML(sDirection), jQuery.sap.encodeHTML(1 + Math.min(oChartData.actualValuePct, oChartData.targetValuePct) + "%"));
				oRm.writeStyles();
				oRm.writeAttribute("id", oControl.getId() + "-bc-bar-value");
				oRm.write("></div>");
			}
		}

		if (oControl._isTargetValueSet) {
			oRm.write("<div");
			oRm.addClass("sapSuiteBMCTargetBarValue");
			oRm.addClass(jQuery.sap.encodeHTML(sSize));
			oRm.writeClasses();
			oRm.addStyle(jQuery.sap.encodeHTML(sDirection), jQuery.sap.encodeHTML(parseFloat(oChartData.targetValuePct).toFixed(2) + "%"));
			oRm.writeStyles();
			oRm.writeAttribute("id", oControl.getId() + "-bc-target-bar-value");
			oRm.write("></div>");
			oRm.write("</div>");

			if (bShowTargetValue) {
				oRm.write("<div");
				oRm.addClass("sapSuiteBMCBottomLabel");
				oRm.writeClasses();
				oRm.write(">");
				var sTValToShow = sTargetValueLabel ? sTargetValueLabel : "" + oControl.getTargetValue();
				var sTValScale = sTValToShow + sScale;
				oRm.write("<div");
				oRm.addClass("sapSuiteBMCTargetValue");
				oRm.addClass(jQuery.sap.encodeHTML(sSize));
				oRm.writeClasses();
				oRm.writeStyles();
				oRm.writeAttribute("id", oControl.getId() + "-bc-target-value");
				oRm.write(">");
				oRm.writeEscaped(sTValScale);
				oRm.write("</div>");
				oRm.write("</div>");
			}
		} else {
			oRm.write("</div>");
		}
		oRm.write("</div>");

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-info");
		oRm.writeAttribute("aria-hidden", "true");
		oRm.addStyle("display", "none");
		oRm.writeStyles();
		oRm.write(">");
		oRm.write("</div>");
		oRm.write("</div>");
		oRm.write("</div>");
	};
	/**
	 * Renders the HTML for the thresholds, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.microchart.BulletMicroChart} oControl the control to be rendered
	 * @param {object} oThreshold an object containing threshold values and colors
	 * @param {string} sSize a string representing the size CSS class
	 */
	BulletMicroChartRenderer.renderThreshold = function(oRm, oControl, oThreshold, sSize) {
		var sDirection = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left",
			fValuePct = 0.98 * oThreshold.valuePct + 1,
			sColor = "sapSuiteBMCSemanticColor" + oThreshold.color;

		if (sColor === "sapSuiteBMCSemanticColor" + MobileLibrary.ValueColor.Error) {
			oRm.write("<div");
			oRm.addClass("sapSuiteBMCDiamond");
			oRm.addClass(jQuery.sap.encodeHTML(sSize));
			oRm.addClass(jQuery.sap.encodeHTML(sColor));
			oRm.writeClasses();
			oRm.addStyle(jQuery.sap.encodeHTML(sDirection), jQuery.sap.encodeHTML(fValuePct + "%"));
			oRm.writeStyles();
			oRm.write("></div>");
		}
		oRm.write("<div");
		oRm.addClass("sapSuiteBMCThreshold");
		oRm.addClass(jQuery.sap.encodeHTML(sSize));
		oRm.addClass(jQuery.sap.encodeHTML(sColor));
		oRm.writeClasses();
		oRm.addStyle(jQuery.sap.encodeHTML(sDirection), jQuery.sap.encodeHTML(fValuePct + "%"));
		oRm.writeStyles();
		oRm.write("></div>");
	};

	return BulletMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/BulletMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ColumnMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides control sap.suite.ui.microchart.Example.
jQuery.sap.declare('sap.suite.ui.microchart.ColumnMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Size'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ColumnMicroChart",[ 'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/m/Size', 'sap/ui/Device', 'sap/ui/core/ResizeHandler' ],
	function(jQuery, library, Control, Size, Device, ResizeHandler) {
	"use strict";

	/**
	 * Constructor for a new ColumnMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Compares different values which are represented as vertical bars. This control replaces the deprecated sap.suite.ui.commons.ColumnMicroChart.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.ColumnMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
	 */
	var ColumnMicroChart = Control.extend("sap.suite.ui.microchart.ColumnMicroChart", /** @lends sap.suite.ui.microchart.ColumnMicroChart.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * Updates the size of the chart. If not set then the default size is applied based on the device tile.
				 */
				size: {group: "Misc", type: "sap.m.Size", defaultValue: "Auto"},

				/**
				 * The width of the chart. If it is not set, the width of the control is defined by the size property.
				 */
				width: {group: "Misc", type: "sap.ui.core.CSSSize"},

				/**
				 * The height of the chart. If it is not set, the height of the control is defined by the size property.
				 */
				height: {group: "Misc", type: "sap.ui.core.CSSSize"},

				/**
				 * If set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size, width and height properties are ignored in this case.
				 * @since 1.38.0
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
			},

			events : {

				/**
				 * The event is triggered when the chart is pressed.
				 */
				press : {}
			},
			defaultAggregation : "columns",
			aggregations: {

				/**
				 * The column chart data.
				 */
				columns: { multiple: true, type: "sap.suite.ui.microchart.ColumnMicroChartData", defaultValue : null, bindable : "bindable"},

				/**
				 * The label on the left top corner of the chart.
				 */
				leftTopLabel: {  multiple: false, type: "sap.suite.ui.microchart.ColumnMicroChartLabel", defaultValue : null},

				/**
				 * The label on the right top corner of the chart.
				 */
				rightTopLabel: { multiple: false, type: "sap.suite.ui.microchart.ColumnMicroChartLabel", defaultValue : null},

				/**
				 * The label on the left bottom corner of the chart.
				 */
				leftBottomLabel: { multiple: false, type: "sap.suite.ui.microchart.ColumnMicroChartLabel", defaultValue: null},

				/**
				 * The label on the right bottom corner of the chart.
				 */
				rightBottomLabel: { multiple: false, type: "sap.suite.ui.microchart.ColumnMicroChartLabel", defaultValue : null}
			}
		}
	});

	//Constants
	ColumnMicroChart.EDGE_CASE_WIDTH_SHOWCHART = 32; // 2rem for hiding the chart
	ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWCANVAS = 16; // 1rem for hiding the canvas (bars)
	ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWLABELS = 16; // 1rem for hiding the labels
	ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL = 32; // 2rem for hiding the top label
	ColumnMicroChart.EDGE_CASE_WIDTH_RESIZEFONT = 168; // Corresponds to M size 10.5rem
	ColumnMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT = 72; // Corresponds to M size 4.5rem

	ColumnMicroChart.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all themes are loaded
	 * and everything is properly initialized. We attach a theme check here.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	ColumnMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}

		this.$().unbind("mouseenter", this._addTitleAttribute);
		this.$().unbind("mouseleave", this._removeTitleAttribute);
	};

	ColumnMicroChart.prototype.onAfterRendering = function() {
		if (this._sChartResizeHandlerId) {
			ResizeHandler.deregister(this._sChartResizeHandlerId);
		}

		this._sChartResizeHandlerId = ResizeHandler.register(jQuery.sap.domById(this.getId()),  jQuery.proxy(this._calcColumns, this));
		this._fChartWidth = undefined;
		this._fChartHeight = undefined;
		this._aBars = [];

		var iColumnsNum = this.getColumns().length;

		for (var i = 0; i < iColumnsNum; i++) {
			this._aBars.push({});
		}
		this._adjustToParent();
		library._checkControlIsVisible(this, this._onControlIsVisible);

		//attaches handler for mouse enter event
		this.$().bind("mouseenter", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave", this._removeTitleAttribute.bind(this));
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._onControlIsVisible = function() {
		this._calcColumns();
		this._resize();
	};

	ColumnMicroChart.prototype.exit = function() {
		ResizeHandler.deregister(this._sChartResizeHandlerId);
	};

	/**
	 * Resizes the control based on parent dimensions (width and height)
	 * Required for rendering in page element. Otherwise, the element is cut at the top.
	 * Two pixels are subtracted from the parent values. Otherwise, there's not enough space for the outline and it won't render correctly.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._adjustToParent = function() {
		if (this.getIsResponsive()) {
			//checks if there is a parent method available
			if (!jQuery.isFunction(this.getParent)) {
				return;
			}
			//set width and height
			var oParent = this.getParent();
			var $this = this.$();
			if (jQuery.isFunction(oParent.getHeight)) {
				var sParentHeight = parseFloat(oParent.$().height()) - 2;
				$this.height(sParentHeight);
			}
			if (jQuery.isFunction(oParent.getWidth)) {
				var sParentWidth = parseFloat(oParent.$().width()) - 2;
				$this.width(sParentWidth);
			}
		}
	};

	/**
	 * Handles the responsiveness.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._resize = function() {
		if (this.getIsResponsive()) {
			//width threshold
			this._resizeHorizontally();

			//height threshold
			this._resizeVertically();

			//resize when bars are too small
			this._resizeBars();
		}
	};

	/**
	 * Resizes vertically the control
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._resizeVertically = function() {
		var $this = this.$();
		//for canvas
		var $Canvas = $this.find(".sapSuiteClMCBars");
		var iHeightCanvas = parseFloat($Canvas.css("height"));
		if (iHeightCanvas <= ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWCANVAS) {
			$Canvas.hide();
		}

		//for control
		var iHeight = parseFloat($this.css("height"));
		if ($this.find(".sapSuiteClMCPositionBtm.sapSuiteClMCLbls").length !== 0) {
			//hide the top label when there is a bottom label
			if (iHeight <= ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL) {
				$this.find(".sapSuiteClMCPositionTop.sapSuiteClMCLbls").hide();
			}
			//hide the bottom label
			if (iHeight <= ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWLABELS) {
				$this.find(".sapSuiteClMCPositionBtm.sapSuiteClMCLbls").hide();
			}
		} else if (iHeight <= ColumnMicroChart.EDGE_CASE_HEIGHT_SHOWLABELS) {
			//hide the top label when there is no bottom label
			$this.find(".sapSuiteClMCPositionTop.sapSuiteClMCLbls").hide();
		}
		//resize the font
		if (iHeight <= ColumnMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT) {
			this._resizeFont();
		}
	};

	/**
	 * Resizes horizontally the control
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		//for control and canvas at the same time as the width is the same
		var iWidth = parseFloat($this.css("width"));
		if (iWidth <= ColumnMicroChart.EDGE_CASE_WIDTH_SHOWCHART) {
			$this.hide();
			return;
		}
		//resize the font when less than threshold
		if (iWidth <= ColumnMicroChart.EDGE_CASE_WIDTH_RESIZEFONT) {
			this._resizeFont();
		}

		//check for labels truncated in case of width shrinking
		var $LabelsParent = $this.find(".sapSuiteClMCPositionTop.sapSuiteClMCLbls");
		//top labels
		if (this._isTruncatedLabel($LabelsParent)) {
			$LabelsParent.hide();
		}
		//bottom labels
		$LabelsParent = $this.find(".sapSuiteClMCPositionBtm.sapSuiteClMCLbls");
		if (this._isTruncatedLabel($LabelsParent)) {
			$LabelsParent.hide();
		}
	};

	/**
	 * Resizes the bars
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._resizeBars = function() {
		//if bars cannot be properly displayed, hide the chart
		var iWidth = this.getDomRef().getBoundingClientRect().width - 1;
		var $this = this.$();
		var iNumBars = $this.find(".sapSuiteClMCBar").size();
		var iMinBarWidth = parseFloat($this.find(".sapSuiteClMCBar").css("min-width"));
		if ((iMinBarWidth === 0) || isNaN(iMinBarWidth)) {
			iMinBarWidth = 1;
		}
		var iNumMargins = iNumBars - 1;
		if (iNumBars * iMinBarWidth + iNumMargins >= iWidth) {
			$this.hide();
		} else if (parseFloat($this.find(".sapSuiteClMCBar:last").css("margin-left")) < 1) {
			//divide the space equally among the bars
			$this.find(".sapSuiteClMCBar:not(:first)").css("margin-left", "1px");
			$this.find(".sapSuiteClMCBar").css("width", (((iWidth - iNumMargins) / iNumBars)));
		}
	};

	/**
	 * Resizes the labels font if they are truncated;
	 * Hides the labels if they are still truncated after font resizing
	 *
	 * @private
	 * @param {Object} $LabelsParent The parent of labels right and left
	 * @returns {boolean} Returns true if the label is still truncated after font resizing, otherwise false
	 */
	ColumnMicroChart.prototype._isTruncatedLabel = function($LabelsParent) {
		var $Labels = $LabelsParent.find(".sapSuiteClMCPositionRight.sapSuiteClMCLbl,.sapSuiteClMCPositionLeft.sapSuiteClMCLbl");
		for (var i = 0; i < $Labels.size(); i++) {
			//resize the font (+1 is needed in IE because of flickering)
			if ($Labels[i].offsetWidth + 1 < $Labels[i].scrollWidth) {
				this._resizeFont();
			}
			//the label is truncated (+1 is needed in IE because of flickering)
			if ($Labels[i].offsetWidth + 1 < $Labels[i].scrollWidth) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Resizes the font
	 * Font resizing happens for all labels inside the chart even if only one label is affected (keep the same font size overall)*
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._resizeFont = function() {
		this.$().find(".sapSuiteClMCLbl").addClass("sapSuiteClMCSmallFont");
	};

	ColumnMicroChart.prototype._calcColumns = function() {
		var iColumnsNum = this.getColumns().length;
		if (iColumnsNum) {
			var fChartWidth = parseFloat(this.$().css("width"));
			if (fChartWidth != this._fChartWidth) {
				this._fChartWidth = fChartWidth;

				var iColumnMargin = 0;
				var oBar;
				if (iColumnsNum > 1) {
					oBar = jQuery.sap.byId(this.getId() + "-bar-1");
					var bRtl = sap.ui.getCore().getConfiguration().getRTL();
					iColumnMargin = parseInt(oBar.css("margin-" + (bRtl ? "right" : "left")), 10);
				} else {
					oBar = jQuery.sap.byId(this.getId() + "-bar-0");
				}

				var iColumMinWidth = parseInt(oBar.css("min-width"), 10);

				this._calcColumnsWidth(iColumnMargin, iColumMinWidth, fChartWidth, this._aBars);
			}

			var fChartHeight = parseFloat(this.$().css("height"));
			if (fChartHeight != this._fChartHeight) {
				this._fChartHeight = fChartHeight;
				this._calcColumnsHeight(fChartHeight, this._aBars);
			}

			for (var i = 0; i < iColumnsNum; i++) {
				jQuery.sap.byId(this.getId() + "-bar-" + i).css(this._aBars[i]);
			}

			if (this._aBars.overflow) {
				jQuery.sap.log.warning(this.toString() + " Chart overflow",  "Some columns were not rendered");
			}
		}
	};

	ColumnMicroChart.prototype._calcColumnsWidth = function(iColumnMargin, iColumMinWidth, fChartWidth, aBars) {
		var iColumnsNum = this.getColumns().length;
		var iVisibleColumnsNum = Math.floor((fChartWidth + iColumnMargin) / (iColumMinWidth + iColumnMargin));
		var iMarginWidthPercent = 2;
		var iColumnWidthPercent = (100 - iMarginWidthPercent * (iColumnsNum - 1)) / iColumnsNum;

		for (var i = 0; i < iColumnsNum; i++) {
			if (i < iVisibleColumnsNum) {
				aBars[i].width = iColumnWidthPercent + "%";
				if (i > 0) {
					aBars[i]["margin-left"] = iMarginWidthPercent + "%";
				}
			} else {
				aBars[i].display = "none";
			}
		}

		aBars.overflow = iVisibleColumnsNum != iColumnsNum;
	};

	ColumnMicroChart.prototype._calcColumnsHeight = function(fChartHeight, aBars) {
		var iClmnsNum = this.getColumns().length;

		var fMaxVal, fMinVal, fValue;
		fMaxVal = fMinVal = 0;

		for (var i = 0; i < iClmnsNum; i++) {
			var oClmn = this.getColumns()[i];
			if (fMaxVal < oClmn.getValue()) {
				fMaxVal = oClmn.getValue();
			} else if (fMinVal > oClmn.getValue()) {
				fMinVal = oClmn.getValue();
			}
		}

		var fDelta = fMaxVal - fMinVal;
		var fOnePxVal = fDelta / fChartHeight;

		var fDownShift, fTopShift;
		fDownShift = fTopShift = 0;

		for (var iCl = 0; iCl < iClmnsNum; iCl++) {
			fValue = this.getColumns()[iCl].getValue();

			if (Math.abs(fValue) < fOnePxVal) {
				if (fValue >= 0) {
					if (fValue == fMaxVal) {
						fTopShift = fOnePxVal - fValue;
					}
				} else if (fValue == fMinVal) {
					fDownShift = fOnePxVal + fValue;
				}
			}
		}

		if (fTopShift) {
			fMaxVal += fTopShift;
			fMinVal -= fTopShift;
		}

		if (fDownShift) {
			fMaxVal -= fDownShift;
			fMinVal += fDownShift;
		}

		var fNegativeOnePxVal =  0 - fOnePxVal;

		for (var iClmn = 0; iClmn < iClmnsNum; iClmn++) {
			fValue = this.getColumns()[iClmn].getValue();
			var fCalcVal = fValue;

			if (fValue >= 0) {
				fCalcVal = Math.max(fCalcVal + fTopShift - fDownShift, fOnePxVal);
			} else {
				fCalcVal = Math.min(fCalcVal + fTopShift - fDownShift, fNegativeOnePxVal);
			}

			aBars[iClmn].value = fCalcVal;
		}

		function calcPersent(fValue) {
			return (fValue / fDelta * 100).toFixed(2) + "%";
		}

		var fZeroLine = calcPersent(fMaxVal);

		for (var iCol = 0; iCol < iClmnsNum; iCol++) {
			fValue = aBars[iCol].value;
			aBars[iCol].top = (fValue < 0) ? fZeroLine : calcPersent(fMaxVal - fValue);
			aBars[iCol].height = calcPersent(Math.abs(fValue));
		}
	};

	ColumnMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	ColumnMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	ColumnMicroChart.prototype.getLocalizedColorMeaning = function(sColor) {
		if (sColor) {
			return this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
		}
	};

	ColumnMicroChart.prototype.setSize = function(size) {
		if (this.getSize() !== size) {
			if (size === Size.Responsive) {
				this.setProperty("isResponsive", true, true);
			} else {
				this.setProperty("isResponsive", false, true);
			}
			this.setProperty("size", size, false);
		}
		return this;
	};

	ColumnMicroChart.prototype.getAltText = function() {
		var sAltText = "";
		var bIsFirst = true;
		var oLeftTopLabel = this.getLeftTopLabel();
		var oRightTopLabel = this.getRightTopLabel();
		var oLeftBtmLabel = this.getLeftBottomLabel();
		var oRightBtmLabel = this.getRightBottomLabel();

		var sColor;

		if (oLeftTopLabel && oLeftTopLabel.getLabel() || oLeftBtmLabel && oLeftBtmLabel.getLabel()) {
			if (oLeftTopLabel) {
				sColor = oLeftTopLabel.getColor();
			} else if (oLeftBtmLabel){
				sColor = oLeftBtmLabel.getColor();
			} else {
				sColor = "";
			}

			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("COLUMNMICROCHART_START")) + ": " + (oLeftBtmLabel ? oLeftBtmLabel.getLabel() + " " : "")
				+ (oLeftTopLabel ? oLeftTopLabel.getLabel() + " " : "") + this.getLocalizedColorMeaning(sColor);
			bIsFirst = false;
		}

		if (oRightTopLabel && oRightTopLabel.getLabel() || oRightBtmLabel && oRightBtmLabel.getLabel()) {
			if (oRightTopLabel) {
				sColor = oRightTopLabel.getColor();
			} else if (oRightBtmLabel){
				sColor = oRightBtmLabel.getColor();
			} else {
				sColor = "";
			}

			sAltText += (bIsFirst ? "" : "\n") + this._oRb.getText(("COLUMNMICROCHART_END")) + ": " + (oRightBtmLabel ? oRightBtmLabel.getLabel() + " " : "")
				+ (oRightTopLabel ? oRightTopLabel.getLabel() + " " : "") + this.getLocalizedColorMeaning(sColor);
			bIsFirst = false;
		}

		var aColumns = this.getColumns();
		for (var i = 0; i < aColumns.length; i++) {
			var oBar = aColumns[i];
			var sMeaning = this.getLocalizedColorMeaning(oBar.getColor());
			sAltText += ((!bIsFirst || i != 0) ? "\n" : "") + oBar.getLabel() + " " + oBar.getValue() + " " + sMeaning;
		}

		return sAltText;
	};

	ColumnMicroChart.prototype.getTooltip_AsString  = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	ColumnMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.edge) {
			this.onclick(oEvent);
		}
	};

	ColumnMicroChart.prototype.onclick = function(oEvent) {
		if (!this.fireBarPress(oEvent)) {
			if (Device.browser.msie || Device.browser.edge) {
				this.$().focus();
			}
			this.firePress();
		}
	};

	ColumnMicroChart.prototype.onkeydown = function(oEvent) {
		var iThis, oFocusables;
		switch (oEvent.keyCode) {
			case jQuery.sap.KeyCodes.SPACE:
				oEvent.preventDefault();
				break;

			case jQuery.sap.KeyCodes.ARROW_LEFT:
			case jQuery.sap.KeyCodes.ARROW_UP:
				oFocusables = this.$().find(":focusable"); // all tabstops in the control
				iThis = oFocusables.index(oEvent.target);  // focused element index
				if (oFocusables.length > 0) {
					oFocusables.eq(iThis - 1).get(0).focus();	// previous tab stop element
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
				break;

			case jQuery.sap.KeyCodes.ARROW_DOWN:
			case jQuery.sap.KeyCodes.ARROW_RIGHT:
				oFocusables = this.$().find(":focusable"); // all tabstops in the control
				iThis = oFocusables.index(oEvent.target);  // focused element index
				if (oFocusables.length > 0) {
					oFocusables.eq((iThis + 1 < oFocusables.length) ? iThis + 1 : 0).get(0).focus(); // next tab stop element
					oEvent.preventDefault();
					oEvent.stopPropagation();
				}
				break;
			default:
		}
	};

	ColumnMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which == jQuery.sap.KeyCodes.ENTER || oEvent.which == jQuery.sap.KeyCodes.SPACE) {
			if (!this.fireBarPress(oEvent)) {
				this.firePress();
				oEvent.preventDefault();
			}
		}
	};

	ColumnMicroChart.prototype.fireBarPress = function(oEvent) {
		var oBar = jQuery(oEvent.target);
		if (oBar && oBar.attr("data-bar-index")) {
			var iIndex = parseInt(oBar.attr("data-bar-index"), 10);
			var oCmcData = this.getColumns()[iIndex];
			if (oCmcData && oCmcData.hasListeners("press")) {
				oCmcData.firePress();
				oEvent.preventDefault();
				oEvent.stopPropagation();
				if (Device.browser.msie) {
					oBar.focus();
				}
				return true;
			}
		}
		return false;
	};

	ColumnMicroChart.prototype._getBarAltText = function(iBarIndex) {
		var oBar = this.getColumns()[iBarIndex];
		var sMeaning = this.getLocalizedColorMeaning(oBar.getColor());
		return oBar.getLabel() + " " + oBar.getValue() + " " + sMeaning;
	};

	ColumnMicroChart.prototype.setBarPressable = function(iBarIndex, bPressable) {
		if (bPressable) {
			var sBarAltText = this._getBarAltText(iBarIndex);
			jQuery.sap.byId(this.getId() + "-bar-" + iBarIndex).addClass("sapSuiteUiMicroChartPointer").attr("tabindex", 0).attr("title", sBarAltText).attr("role", "presentation").attr("aria-label", sBarAltText);
		} else {
			jQuery.sap.byId(this.getId() + "-bar-" + iBarIndex).removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer").removeAttr("title").removeAttr("role").removeAttr("aria-label");
		}
	};

	ColumnMicroChart.prototype.onsaptabnext = function(oEvent) {
		var oLast = this.$().find(":focusable").last();  // last tabstop in the control
		if (oLast) {
			this._bIgnoreFocusEvt = true;
			oLast.get(0).focus();
		}
	};

	ColumnMicroChart.prototype.onsaptabprevious = function(oEvent) {
		if (oEvent.target.id != oEvent.currentTarget.id) {
			var oFirst = this.$().find(":focusable").first(); // first tabstop in the control
			if (oFirst) {
				oFirst.get(0).focus();
			}
		}
	};

	ColumnMicroChart.prototype.onfocusin = function(oEvent) {
		if (this._bIgnoreFocusEvt) {
			this._bIgnoreFocusEvt = false;
			return;
		}
		if (this.getId() + "-hidden" == oEvent.target.id) {
			this.$().focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	/**
	 * Adds title attribute to show tooltip when the mouse enters chart.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._addTitleAttribute = function() {
		if (this.$().attr("title")) {
			return;
		} else {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes title attribute to let tooltip disappear when the mouse left the chart.
	 *
	 * @private
	 */
	ColumnMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	return ColumnMicroChart;
});

}; // end of sap/suite/ui/microchart/ColumnMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ColumnMicroChartData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.ColumnMicroChartData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ColumnMicroChartData",['jquery.sap.global', './library', 'sap/ui/core/Element', 'sap/ui/core/Control'],
	function(jQuery, library, Element, Control) {
	"use strict";

	/**
	 * Constructor for a new ColumnMicroChartData control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Defines the column chart data.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.ColumnMicroChartData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ColumnMicroChartData = Element.extend("sap.suite.ui.microchart.ColumnMicroChartData", /** @lends sap.suite.ui.microchart.ColumnMicroChartData.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {

				/**
				 * The graphic element color.
				 */
				color: { group: "Misc", type: "sap.m.ValueColor", defaultValue: "Neutral" },

				/**
				 * The line title.
				 */
				label: {type : "string", group : "Misc", defaultValue : "" },

				/**
				 * The actual value.
				 */
				value: {type: "float", group : "Misc"}
			},
			events: {
				/**
				 * The event is fired when the user chooses the column data.
				 */
				press: {}
			}
		}
	});

	ColumnMicroChartData.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.getParent()) {
			this.getParent().setBarPressable(this.getParent().getColumns().indexOf(this), true);
		}
		return this;
	};

	ColumnMicroChartData.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (this.getParent()) {
			this.getParent().setBarPressable(this.getParent().getColumns().indexOf(this), false);
		}
		return this;
	};

	return ColumnMicroChartData;

});

}; // end of sap/suite/ui/microchart/ColumnMicroChartData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ColumnMicroChartLabel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// This control displays the history of values as a line mini chart or an area mini chart.
jQuery.sap.declare('sap.suite.ui.microchart.ColumnMicroChartLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ColumnMicroChartLabel",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for a new ColumnMicroChartLabel control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Displays or hides the labels of a column micro chart.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.ColumnMicroChartLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ColumnMicroChartLabel = Element.extend("sap.suite.ui.microchart.ColumnMicroChartLabel", /** @lends sap.suite.ui.microchart.ColumnMicroChartLabel.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {

				/**
				 * The graphic element color.
				 */
				color: { group: "Misc", type: "sap.m.ValueColor", defaultValue: "Neutral" },

				/**
				 * The line title.
				 */
				label: { type : "string", group : "Misc", defaultValue : "" }
			}
		}
	});

	return ColumnMicroChartLabel;

});

}; // end of sap/suite/ui/microchart/ColumnMicroChartLabel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ComparisonMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.ComparisonMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Size'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ComparisonMicroChart",[ 'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/m/Size', 'sap/ui/Device', 'sap/m/FlexBox' ],
	function(jQuery, library, Control, Size, Device, FlexBox) {
	"use strict";

	/**
	 * Constructor for a new ComparisonMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Illustrates values as colored bar charts with title, numeric value, and scaling factor in the content area. This control replaces the deprecated sap.suite.ui.commons.ComparisonChart.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.ComparisonMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) design time metamodel
	 */
	var ComparisonMicroChart = Control.extend("sap.suite.ui.microchart.ComparisonMicroChart", /** @lends sap.suite.ui.microchart.ComparisonMicroChart.prototype */ { metadata : {

		library: "sap.suite.ui.microchart",
		properties: {
			/**
			 * The size of the chart. If not set, the default size is applied based on the size of the device tile.
			 */
			size: {type: "sap.m.Size", group: "Misc", defaultValue: "Auto"},

			/**
			 * The scaling suffix that is added to the actual and target values.
			 */
			scale: {type: "string", group: "Misc", defaultValue: ""},

			/**
			 * The minimum scale value for the chart used to define the value range of the scale for comparing different values.
			 * @since 1.42.0
			 */
			minValue: {type: "float", group: "Appearance", defaultValue: null},

			/**
			 * The maximum scale value for the chart used to define the value range of the scale for comparing different values.
			 * @since 1.42.0
			 */
			maxValue: {type: "float", group: "Appearance", defaultValue: null},

			/**
			 * The view of the chart. If not set, the Normal view is used by default.
			 */
			view: {type: "sap.suite.ui.microchart.ComparisonMicroChartViewType", group: "Appearance", defaultValue: "Normal"},

			/**
			 * The color palette for the chart. If this property is set, semantic colors defined in ComparisonData are ignored. Colors from the palette are assigned to each bar consequentially. When all the palette colors are used, assignment of the colors begins from the first palette color.
			 */
			colorPalette: {type: "string[]", group: "Appearance", defaultValue: []},

			/**
			 * If it is set to true, the height of the control is defined by its content.
			 */
			shrinkable: {type: "boolean", group: "Misc", defaultValue: false},

			/**
			 * The width of the chart. If it is not set, the size of the control is defined by the size property.
			 */
			width: {type: "sap.ui.core.CSSSize", group: "Misc"},

			/**
			 * Height of the chart.
			 */
			height: {type: "sap.ui.core.CSSSize", group: "Appearance"},

			/**
			 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size and Width properties are ignored in such case.
			 * @since 1.38.0
			 * */
			isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
		},
		defaultAggregation : "data",
		aggregations: {
			/**
			 * The comparison chart bar data.
			 */
			data: {type: "sap.suite.ui.microchart.ComparisonMicroChartData", multiple: true, bindable : "bindable"}
		},
		events: {
			/**
			 * The event is triggered when the chart is pressed.
			 */
			press : {}
		}
	}});

	ComparisonMicroChart.WIDTH_FONT_THRESHOLD = 168;
	ComparisonMicroChart.HEIGHT_PER_CHART_DISAPPEAR_THRESHOLD = 16;
	ComparisonMicroChart.EDGE_CASE_WIDTH_HIDE_CHART = 32;

	/* =========================================================== */
	/* API events */
	/* =========================================================== */

	ComparisonMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}

		return this;
	};

	ComparisonMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	ComparisonMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.edge) {
			this.onclick(oEvent);
		}
	};

	ComparisonMicroChart.prototype.onclick = function(oEvent) {
		if (!this.fireBarPress(oEvent)) {
			this.firePress();
			if (Device.browser.msie || Device.browser.edge) {
				this.$().focus();
				oEvent.preventDefault();
			}
		}
	};

	ComparisonMicroChart.prototype.fireBarPress = function(oEvent) {
		var oBar = jQuery(oEvent.target);
		if (oBar && oBar.attr("data-bar-index")) {
			var iIndex = parseInt(oBar.attr("data-bar-index"), 10);
			var oComparisonData = this.getData()[iIndex];
			if (oComparisonData && oComparisonData.hasListeners("press")) {
				oComparisonData.firePress();
				oEvent.preventDefault();
				oEvent.stopImmediatePropagation();
				if (Device.browser.msie) {
					jQuery.sap.byId(this.getId() + "-chart-item-bar-" + iIndex).focus();
				}
				// find out which bar has tabindex = 0 at this moment
				var $Bars = this.$().find(".sapSuiteCpMCChartBar");
				var iBarFocusedIndex = $Bars.index(this.$().find(".sapSuiteCpMCChartBar[tabindex='0']"));
				this._switchTabindex(iBarFocusedIndex, iIndex, $Bars);
				return true;
			}
		}
		return false;
	};

	ComparisonMicroChart.prototype.onsaptabprevious = function() {
		this.$().css("outline-color", "");
	};

	ComparisonMicroChart.prototype.onsaptabnext = function() {
		var $Next = this.$().next();
		// when the next element is a focusable comparison chart, activate the outline
		if ($Next.hasClass("sapSuiteCpMC") && $Next.attr("tabindex")) {
			$Next.css("outline-color", "");
		}
	};

	ComparisonMicroChart.prototype.onsapenter = function(event) {
		if (!this.fireBarPress(event)) {
			this.firePress();
			event.preventDefault();
			event.stopImmediatePropagation();
		}
	};

	ComparisonMicroChart.prototype.onsapspace = ComparisonMicroChart.prototype.onsapenter;

	ComparisonMicroChart.prototype.onsapup = function(event) {
		var $Bars = this.$().find(".sapSuiteUiMicroChartPointer");
		if ($Bars.length > 0) {
			var iIndex = $Bars.index(event.target);
			this._switchTabindex(iIndex, iIndex - 1, $Bars);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	ComparisonMicroChart.prototype.onsapdown = function(event) {
		var $Bars = this.$().find(".sapSuiteUiMicroChartPointer");
		if ($Bars.length > 0) {
			var iIndex = $Bars.index(event.target);
			this._switchTabindex(iIndex, iIndex + 1, $Bars);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	ComparisonMicroChart.prototype.onsaphome = function(event) {
		var $Bars = this.$().find(".sapSuiteUiMicroChartPointer");
		var iIndex = $Bars.index(event.target);
		if (iIndex !== 0 && $Bars.length > 0) {
			this._switchTabindex(iIndex, 0, $Bars);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	ComparisonMicroChart.prototype.onsapend = function(event) {
		var $Bars = this.$().find(".sapSuiteUiMicroChartPointer");
		var iIndex = $Bars.index(event.target),
			iLength = $Bars.length;
		if (iIndex !== iLength - 1 && iLength > 0) {
			this._switchTabindex(iIndex, iLength - 1, $Bars);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	ComparisonMicroChart.prototype.onsapleft = ComparisonMicroChart.prototype.onsapup;

	ComparisonMicroChart.prototype.onsapright = ComparisonMicroChart.prototype.onsapdown;

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */

	ComparisonMicroChart.prototype.setMinValue = function(fMinValue) {
		this._isMinValueSet = jQuery.isNumeric(fMinValue);
		return this.setProperty("minValue", this._isMinValueSet ? fMinValue : NaN);
	};

	ComparisonMicroChart.prototype.setMaxValue = function(fMaxValue) {
		this._isMaxValueSet = jQuery.isNumeric(fMaxValue);
		return this.setProperty("maxValue", this._isMaxValueSet ? fMaxValue : NaN);
	};

	ComparisonMicroChart.prototype.setSize = function(size) {
		if (this.getSize() !== size) {
			if (size === Size.Responsive) {
				this.setProperty("isResponsive", true, true);
			} else {
				this.setProperty("isResponsive", false, true);
			}
			this.setProperty("size", size, false);
		}
		return this;
	};

	/* =========================================================== */
	/* Protected methods */
	/* =========================================================== */

	ComparisonMicroChart.prototype.init = function() {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._isMinValueSet = false;
		this._isMaxValueSet = false;
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all
	 * themes are loaded and everything is properly initialized. We attach a theme
	 * check here.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If the theme is applied, rendering starts by the control itself.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	ComparisonMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}

		//removes handler for mouseenter event
		this._unbindMouseEnterLeaveHandler();
	};

	ComparisonMicroChart.prototype.onAfterRendering = function() {
		if (this.getIsResponsive()) {
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);

		//attaches handler for mouseenter event
		this._bindMouseEnterLeaveHandler();
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._onControlIsVisible = function() {
		if (this.getHeight() !== "" || this.getIsResponsive()) {
			Device.media.attachHandler(this._onResize, this);
			this._onResize();
		}
	};

	ComparisonMicroChart.prototype.setBarPressable = function(iBarIndex, bPressable) {
		if (bPressable) {
			var sBarAltText = this._getBarAltText(iBarIndex);
			jQuery.sap.byId(this.getId() + "-chart-item-bar-" + iBarIndex).addClass("sapSuiteUiMicroChartPointer").attr("tabindex", 0).attr("title", sBarAltText).attr("role", "presentation").attr("aria-label", sBarAltText);
		} else {
			jQuery.sap.byId(this.getId() + "-chart-item-bar-" + iBarIndex).removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer").removeAttr("title").removeAttr("role").removeAttr("aria-label");
		}
	};

	ComparisonMicroChart.prototype.getAltText = function() {
		var sAltText = "", sBarText;
		for (var i = 0; i < this.getData().length; i++) {
			sBarText = this._getBarAltText(i);
			if (!library._isTooltipSuppressed(sBarText)) {
				if (!library._isTooltipSuppressed(sAltText)) {
					sAltText += "\n";
				}
				sAltText += sBarText;
			}
		}
		return sAltText;
	};

	ComparisonMicroChart.prototype.getTooltip_AsString  = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */
	/**
	 * Calculates the width in percents of chart bars' elements accordingly with provided chart values.
	 *
	 * @returns {Array} array of calculated values for each chart bar.
	 * @private
	 */
	ComparisonMicroChart.prototype._calculateChartData = function() {
		var aResult = [];
		var aData = this.getData();
		var iCount = aData.length;
		var iMaxValue = 0;
		var iMinValue = 0;
		var iTotal;
		var iMaxPercent;
		var iMinPercent;
		var i;

		for (i = 0; i < iCount; i++) {
			var iDataValue = isNaN(aData[i].getValue()) ? 0 : aData[i].getValue();
			iMaxValue = Math.max(iMaxValue, iDataValue);
			iMinValue = Math.min(iMinValue, iDataValue);
		}
		if (this._isMinValueSet) {
			iMinValue = Math.min(iMinValue, this.getMinValue());
		}
		if (this._isMaxValueSet) {
			iMaxValue = Math.max(iMaxValue, this.getMaxValue());
		}

		iTotal = iMaxValue - iMinValue;
		iMaxPercent = (iTotal == 0) ? 0 : Math.round(iMaxValue * 100 / iTotal);

		if (iMaxPercent == 0 && iMaxValue != 0) {
			iMaxPercent = 1;
		} else if (iMaxPercent == 100 && iMinValue != 0) {
			iMaxPercent = 99;
		}

		iMinPercent = 100 - iMaxPercent;

		for (i = 0; i < iCount; i++) {
			var oItem = {};
			var iDataVal = isNaN(aData[i].getValue()) ? 0 : aData[i].getValue();

			oItem.value = (iTotal == 0) ? 0 : Math.round(iDataVal * 100 / iTotal);

			if (oItem.value == 0 && iDataVal != 0) {
				oItem.value = (iDataVal > 0) ? 1 : -1;
			} else if (oItem.value == 100) {
				oItem.value = iMaxPercent;
			} else if (oItem.value == -100) {
				oItem.value = -iMinPercent;
			}

			if (oItem.value >= 0) {
				oItem.negativeNoValue = iMinPercent;
				oItem.positiveNoValue = iMaxPercent - oItem.value;
			} else {
				oItem.value = -oItem.value;
				oItem.negativeNoValue = iMinPercent - oItem.value;
				oItem.positiveNoValue = iMaxPercent;
			}

			aResult.push(oItem);
		}

		return aResult;
	};

	ComparisonMicroChart.prototype._getLocalizedColorMeaning = function(sColor) {
		return this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
	};

	ComparisonMicroChart.prototype._getBarAltText = function(iBarIndex) {
		var oBar = this.getData()[iBarIndex];
		var oBarTooltip = this.getData()[iBarIndex].getTooltip();
		if (oBarTooltip) {
			return oBarTooltip;
		} else {
			var sMeaning = this.getColorPalette().length ? "" : this._getLocalizedColorMeaning(oBar.getColor());
			return oBar.getTitle() + " " + (oBar.getDisplayValue() ? oBar.getDisplayValue() : oBar.getValue()) + this.getScale() + " " + sMeaning;
		}
	};

	ComparisonMicroChart.prototype._adjustBars = function() {
		var iBarContainerHeight;
		var iHeight = parseFloat(this.$().find(".sapSuiteCpMCVerticalAlignmentContainer").css("height"));
		var iBarCount = this.getData().length;
		var aBarContainers = this.$().find(".sapSuiteCpMCChartItem");
		var iMinHeight = parseFloat(aBarContainers.css("min-height"));
		var iMaxHeight = parseFloat(aBarContainers.css("max-height"));

		if (iBarCount !== 0) {
			iBarContainerHeight = this._calculateBarContainerHeight(Device.browser.firefox, iHeight, iBarCount);

			if (iBarContainerHeight > iMaxHeight) {
				iBarContainerHeight = iMaxHeight;
			} else if (iBarContainerHeight < iMinHeight) {
				iBarContainerHeight = iMinHeight;
			}
			aBarContainers.css("height", iBarContainerHeight);

			var iChartsHeightDelta = (iHeight - iBarContainerHeight * iBarCount) / 2;
			if (iChartsHeightDelta > 0) {
				jQuery(aBarContainers[0]).css("margin-top", iChartsHeightDelta + "px");
			}
		}
	};

	/**
	 * Calculates the bar container height based on the browser, responsiveness, and view mode.
	 *
	 * @param {Boolean} firefox Flag showing if the used browser is Firefox.
	 * @param {int} height Height of the alignment container.
	 * @param {int} barCount The number of bars in the chart.
	 * @returns {int} Height of each individual bar.
	 * @private
	 */
	ComparisonMicroChart.prototype._calculateBarContainerHeight = function(firefox, height, barCount) {
		if (firefox && !this.getIsResponsive() && this.getView() !== "Wide") {
			var iHeaderHeight = this.$().find(".sapSuiteCpMCChartItemHeader").outerHeight(true);
			var iBarHeight = this.$().find(".sapSuiteCpMCChartBar").outerHeight(true);
			return iHeaderHeight + iBarHeight;
		} else {
			return height / barCount;
		}
	};

	/**
	 * Conducts size adjustments that are necessary if the dimensions of the chart change.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._onResize = function() {
		if (this.getIsResponsive()) {
			this._adjustBars();
			this._resizeVertically();

			this._resizeHorizontally();
		} else {
			this._adjustBars();
		}
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._adjustToParent = function() {
		if (jQuery.isFunction(this.getParent) && this.getParent() instanceof FlexBox) {
			var sParentHeight = parseInt(this.getParent().$().height(), 10);
			var sParentWidth = parseInt(this.getParent().$().width(), 10);
			var $this = this.$();
			$this.outerHeight(sParentHeight - parseInt($this.css("margin-top"), 10) - parseInt($this.css("margin-bottom"), 10));
			$this.outerWidth(sParentWidth - parseInt($this.css("margin-left"), 10) - parseInt($this.css("margin-right"), 10));
		}
	};

	/**
	 * Performs vertical responsiveness adjustment. Assumes that the height of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._resizeVertically = function() {
		var $this = this.$();
		var $OuterVerticalAlignmentContainer = $this.find(".sapSuiteCpMCVerticalAlignmentContainer");
		var iMaxChartHeight = parseInt($OuterVerticalAlignmentContainer.css("max-height"), 10);
		var iCurrentControlHeight = parseInt($this.css("height"), 10);
		var iCurrentChartHeight = parseInt($OuterVerticalAlignmentContainer.css("height"), 10);
		var iBarHeight = this.$().find(".sapSuiteCpMCChartBar").outerHeight();
		var iBarCount = this.getData().length;

		if (iCurrentControlHeight <= iMaxChartHeight) {
			$this.addClass("sapSuiteCpMCSmallFont");
		}
		if (this.getView() === "Normal" && iCurrentChartHeight < (ComparisonMicroChart.HEIGHT_PER_CHART_DISAPPEAR_THRESHOLD + iBarHeight) * iBarCount ) {
			$this.find(".sapSuiteCpMCChartBar>div").hide();
		}
		if (iCurrentChartHeight < ComparisonMicroChart.HEIGHT_PER_CHART_DISAPPEAR_THRESHOLD * iBarCount ) {
			$this.hide();
		}
	};

	/**
	 * Performs horizontal responsiveness adjustment. Assumes that the width of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		var $Bars = $this.find(".sapSuiteCpMCChartBar");
		var iBarWidth = parseInt($Bars.width(), 10);
		var iWidth = parseInt($this.width(), 10);
		if (this.getView() === "Wide" && iBarWidth < ComparisonMicroChart.EDGE_CASE_WIDTH_HIDE_CHART) {
			$Bars.hide();
		}

		if (iWidth < ComparisonMicroChart.WIDTH_FONT_THRESHOLD || this._isTruncatedLabel(".sapSuiteCpMCChartItemTitle, .sapSuiteCpMCChartItemValue")) {
			$this.addClass("sapSuiteCpMCSmallFont");
		}
		if (iWidth < ComparisonMicroChart.EDGE_CASE_WIDTH_HIDE_CHART) {
			$this.hide();
		}
		if (this._isTruncatedLabel(".sapSuiteCpMCChartItemValue")) {
			$this.hide();
		}
	};

	/**
	 * Checks if any label of the specified CSS class on the chart is truncated.
	 *
	 * @private
	 * @param {string} sClassSelector Representation of CSS classes
	 * @returns {boolean} True if the label is truncated, false if not.
	 */
	ComparisonMicroChart.prototype._isTruncatedLabel = function(sClassSelector) {
		var $Labels = this.$().find(sClassSelector);
		for (var i = 0; i < $Labels.length; i++) {
			if ($Labels[i].offsetWidth < $Labels[i].scrollWidth - 1) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._addTitleAttribute = function() {
		var sTooltip = this.getTooltip_AsString();
		if (!library._isTooltipSuppressed(sTooltip)) {
			if (this.getIsResponsive()){
				this.$().find(".sapSuiteCpMCVerticalAlignmentContainer").attr("title", sTooltip);
			} else {
				this.$().attr("title", sTooltip);
			}
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	ComparisonMicroChart.prototype._removeTitleAttribute = function() {
		if (this.getIsResponsive()){
			this.$().find(".sapSuiteCpMCVerticalAlignmentContainer").removeAttr("title");
		} else {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Resolves the chart focus in case a chart bar is activated/released.
	 * @param {jQuery.Event} oEvent The jQuery event object.
	 * @private
	 */
	ComparisonMicroChart.prototype._resolveFocus = function(oEvent) {
		var oBar = jQuery(oEvent.target);
		if (oBar && oBar.attr("data-bar-index")) {
			var iIndex = parseInt(oBar.attr("data-bar-index"), 10);
			var oData = this.getData()[iIndex];
			if (oData && oData.hasListeners("press")) {
				this.$().css("outline-color", "transparent");
			} else {
				this.$().css("outline-color", "");
			}
		} else {
			this.$().css("outline-color", "");
		}
	};

	/**
	 * Adds and removes the tabindex between elements to support keyboard navigation.
	 *
	 * @param {int} oldIndex The index of the previously focused bar
	 * @param {int} newIndex The index of the bar that is to be focused
	 * @param {jQuery} bars All valid clickable bars inside the chart
	 * @private
	 */
	ComparisonMicroChart.prototype._switchTabindex = function(oldIndex, newIndex, bars) {
		if (oldIndex >= 0 && oldIndex < bars.length && newIndex >= 0 && newIndex < bars.length) {
			bars.eq(oldIndex).removeAttr("tabindex");
			bars.eq(newIndex).attr("tabindex", "0").focus();
		}
	};

		/**
		 * Binds the handlers for mouseenter mouseleave events.
		 *
		 * @private
		 */
		ComparisonMicroChart.prototype._bindMouseEnterLeaveHandler = function () {

			// handlers need to be saved intermediately in order to unbind successfully
			if (!this._oMouseEnterLeaveHandler) {
				this._oMouseEnterLeaveHandler = {
					mouseEnterChart: this._addTitleAttribute.bind(this),
					mouseLeaveChart: this._removeTitleAttribute.bind(this),
					mouseDownChart: this._resolveFocus.bind(this)
				};
			}
			// bind events on chart
			this.$().bind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
			this.$().bind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
			this.$().bind("mousedown", this._oMouseEnterLeaveHandler.mouseDownChart);
		};

		/**
		 * Unbinds the handlers for mouseenter mouseleave events.
		 *
		 * @private
		 */
		ComparisonMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
			if (this._oMouseEnterLeaveHandler) {
				this.$().unbind("mouseenter", this._oMouseEnterLeaveHandler.mouseEnterChart);
				this.$().unbind("mouseleave", this._oMouseEnterLeaveHandler.mouseLeaveChart);
				this.$().unbind("mousedown", this._oMouseEnterLeaveHandler.mouseDownChart);
			}
		};

	return ComparisonMicroChart;

});

}; // end of sap/suite/ui/microchart/ComparisonMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ComparisonMicroChartData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.ComparisonMicroChartData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ComparisonMicroChartData",['jquery.sap.global', './library', 'sap/ui/core/Element', 'sap/ui/core/Control'],
	function(jQuery, library, Element, Control) {
	"use strict";

	/**
	 * Constructor for a new ComparisonMicroChartData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the values of the comparison chart.
	 * @extends sap.ui.core.Element
	 *
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.ComparisonMicroChartData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ComparisonMicroChartData = Element.extend("sap.suite.ui.microchart.ComparisonMicroChartData", /** @lends sap.suite.ui.microchart.ComparisonMicroChartData.prototype */ {
		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The value for comparison.
				 */
				value: {type: "float", group: "Misc", defaultValue: "0"},

				/**
				 * The semantic color of the value.
				 */
				color: {type: "sap.m.ValueColor", group: "Misc", defaultValue: "Neutral"},

				/**
				 * The comparison bar title.
				 */
				title: {type: "string", group: "Misc", defaultValue: ""},

				/**
				 * If this property is set then it will be displayed instead of value.
				 */
				displayValue: {type: "string", group: "Misc", defaultValue: ""}
			},
			events: {
				/**
				 * The event is fired when the user chooses the comparison chart bar.
				 */
				press : {}
			}
		}
	});

	ComparisonMicroChartData.prototype.setValue = function(fValue, bSuppressInvalidate) {
		this._isValueSet = this._fnIsNumber(fValue);
		return this.setProperty("value", this._isValueSet ? fValue : NaN, bSuppressInvalidate);
	};

	ComparisonMicroChartData.prototype._fnIsNumber = function(n) {
		return typeof n == 'number' && !isNaN(n) && isFinite(n);
	};

	ComparisonMicroChartData.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
		var oClone = Control.prototype.clone.apply(this, arguments);
		oClone._isValueSet = this._isValueSet;
		return oClone;
	};

	ComparisonMicroChartData.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.getParent()) {
			this.getParent().setBarPressable(this.getParent().getData().indexOf(this), true);
		}
			return this;
	};

	ComparisonMicroChartData.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (this.getParent()) {
			this.getParent().setBarPressable(this.getParent().getData().indexOf(this), false);
		}
		return this;
	};

	return ComparisonMicroChartData;

});

}; // end of sap/suite/ui/microchart/ComparisonMicroChartData.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.ComparisonMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.ComparisonMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/ComparisonMicroChartRenderer",['jquery.sap.global', './library'],
	function(jQuery, library) {
	"use strict";

	/**
	 * ComparisonMicroChart renderer.
	 * @namespace
	 */
	var ComparisonMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *			the RenderManager that can be used for writing to
	 *			the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *			the control to be rendered
	 */
	ComparisonMicroChartRenderer.render = function (oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		var sAriaLabel = oControl.getAltText();

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteCpMC");
		oRm.addClass("sapSuiteCpMCChartContent");
		var sSize = oControl.getIsResponsive() ? "sapSuiteCpMCResponsive" : "sapSuiteCpMCSize" + oControl.getSize();
		oRm.addClass(sSize);
		if (oControl.hasListeners("press")) {
			oRm.writeAttribute("tabindex", "0");
			oRm.addClass("sapSuiteUiMicroChartPointer");
		}
		oRm.writeClasses();
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);

		if (oControl.getShrinkable()) {
			oRm.addStyle("min-height", "0px");
		}
		if (!oControl.getIsResponsive() && oControl.getWidth()) {
			oRm.addStyle("width", oControl.getWidth());
		}
		if (!oControl.getIsResponsive() && oControl.getHeight()) {
			oRm.addStyle("height", oControl.getHeight());
		}
		oRm.writeStyles();
		oRm.write(">");
		this._renderInnerContent(oRm, oControl, sAriaLabel);
			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-info");
			oRm.writeAttribute("aria-hidden", "true");
			oRm.addStyle("display", "none");
			oRm.writeStyles();
			oRm.write(">");
				oRm.writeEscaped(sAriaLabel);
			oRm.write("</div>");

			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-hidden");
			oRm.writeAttribute("aria-hidden", "true");
			oRm.writeAttribute("tabindex", "-1");
			oRm.writeStyles();
			oRm.write(">");
			oRm.write("</div>");
		oRm.write("</div>");
	};

	ComparisonMicroChartRenderer._renderInnerContent = function(oRm, oControl, sAriaLabel) {
		var iCPLength = oControl.getColorPalette().length;
		var iCPIndex = 0;

		var fnNextColor = function() {
			if (iCPLength) {
				if (iCPIndex == iCPLength) {
					iCPIndex = 0;
				}
				return oControl.getColorPalette()[iCPIndex++];
			}
		};
		oRm.write("<div");
		oRm.addClass("sapSuiteCpMCVerticalAlignmentContainer");
		oRm.writeClasses();
		oRm.write(">");

		var aChartData = oControl._calculateChartData();
		for (var i = 0; i < aChartData.length; i++) {
			this._renderChartItem(oRm,  oControl, aChartData[i], i, fnNextColor());
		}
		oRm.write("</div>");
	};

	ComparisonMicroChartRenderer._renderChartItem = function(oRm, oControl, oChartData, iIndex, sColor) {
		var sSize = oControl.getIsResponsive() ? "sapSuiteCpMCResponsive" : "sapSuiteCpMCSize" + oControl.getSize();
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex);
		oRm.addClass("sapSuiteCpMCChartItem");
		oRm.addClass("sapSuiteCpMCViewType" + oControl.getView());
		if (!oControl.getIsResponsive()) {
			oRm.addClass(sSize);
		}
		oRm.writeClasses();
		oRm.write(">");
			this._renderChartHeader(oRm, oControl, iIndex, sColor);
			this._renderChartBar(oRm, oControl, oChartData, iIndex, sColor);
		oRm.write("</div>");
	};

	ComparisonMicroChartRenderer._renderChartBar = function(oRm, oControl, oChartData, iIndex, sColor) {
		var sSize = oControl.getIsResponsive() ? "sapSuiteCpMCResponsive" : "sapSuiteCpMCSize" + oControl.getSize();
		var oData = oControl.getData()[iIndex];

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-chart-item-bar-" + iIndex);
		oRm.addClass("sapSuiteCpMCChartBar");
		oRm.addClass("sapSuiteCpMCViewType" + oControl.getView());
		oRm.addClass(sSize);
		if (oControl.getData()[iIndex].hasListeners("press")) {
			if (iIndex === 0) {
				oRm.writeAttribute("tabindex", "0");
			}
			oRm.writeAttribute("role", "presentation");
			oRm.writeAttributeEscaped("aria-label", oControl._getBarAltText(iIndex));
			if (!library._isTooltipSuppressed(oControl._getBarAltText(iIndex))) {
				oRm.writeAttributeEscaped("title", oControl._getBarAltText(iIndex));
			} else {
				// By setting the empty title attribute on the bar, the followng desired behavior is achieved:
				// no tooltip is displayed when hovering over the bar press area, independent whether the tooltip of the chart is suppressed or displayed.
				oRm.writeAttribute("title", "");
			}
			oRm.writeAttribute("data-bar-index", iIndex);
			oRm.addClass("sapSuiteUiMicroChartPointer");
		}
		oRm.writeClasses();
		oRm.write(">");

		if (oChartData.negativeNoValue > 0) {
			oRm.write("<div");
			oRm.writeAttribute("data-bar-index", iIndex);
			oRm.addClass("sapSuiteCpMCChartBarNegNoValue");
			if (oChartData.value > 0 || oChartData.positiveNoValue > 0) {
				oRm.addClass("sapSuiteCpMCNotLastBarPart");
			}
			oRm.writeClasses();
			oRm.addStyle("width", jQuery.sap.encodeHTML(oChartData.negativeNoValue + "%"));
			oRm.writeStyles();
			oRm.write("></div>");
		}

		if (oChartData.value > 0) {
			oRm.write("<div");
			oRm.writeAttribute("data-bar-index", iIndex);
			oRm.addClass("sapSuiteCpMCChartBarValue");
			oRm.addClass(jQuery.sap.encodeHTML("sapSuiteCpMCSemanticColor" + oData.getColor()));
			oRm.writeClasses();
			oRm.addStyle("background-color", sColor ? jQuery.sap.encodeHTML(sColor) : "");
			oRm.addStyle("width", jQuery.sap.encodeHTML(oChartData.value + "%"));
			oRm.writeStyles();
			oRm.write("></div>");
		}

		if (oChartData.positiveNoValue > 0) {
			oRm.write("<div");
			oRm.writeAttribute("data-bar-index", iIndex);
			oRm.addClass("sapSuiteCpMCChartBarNoValue");
			if (!!oChartData.negativeNoValue && !oChartData.value) {
				oRm.addClass("sapSuiteCpMCNegPosNoValue");
			} else if (!!oChartData.negativeNoValue || !!oChartData.value) {
				oRm.addClass("sapSuiteCpMCNotFirstBarPart");
			}
			oRm.writeClasses();
			oRm.addStyle("width", jQuery.sap.encodeHTML(oChartData.positiveNoValue + "%"));
			oRm.writeStyles();
			oRm.write("></div>");
		}

		oRm.write("</div>");
	};

	ComparisonMicroChartRenderer._renderChartHeader = function(oRm, oControl, iIndex, sColor) {
		var sSize = oControl.getIsResponsive() ? "sapSuiteCpMCResponsive" : "sapSuiteCpMCSize" + oControl.getSize();
		var oData = oControl.getData()[iIndex];
		var sScale = oControl.getScale();
		var sDisplayValue = oData.getDisplayValue();
		var sAValToShow = sDisplayValue ? sDisplayValue : "" + oData.getValue();
		var sValScale = sAValToShow + sScale;

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-header");
		oRm.addClass("sapSuiteCpMCChartItemHeader");
		oRm.addClass("sapSuiteCpMCViewType" + oControl.getView());
		oRm.addClass(sSize);
		oRm.writeClasses();
		oRm.write(">");
			oRm.write("<div");
				oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-value");
				oRm.addClass("sapSuiteCpMCChartItemValue");
				oRm.addClass(sSize);
				oRm.addClass(jQuery.sap.encodeHTML("sapSuiteCpMCViewType" + oControl.getView()));
				if (!sColor) {
					oRm.addClass(jQuery.sap.encodeHTML("sapSuiteCpMCSemanticColor" + oData.getColor()));
				}

				if (oData.getTitle()) {
					oRm.addClass("sapSuiteCpMCTitle");
				}
				oRm.writeClasses();
				oRm.write(">");
				if (!isNaN(oData.getValue())) {
					oRm.writeEscaped(sValScale);
				}
			oRm.write("</div>");

			oRm.write("<div");
			oRm.writeAttribute("id", oControl.getId() + "-chart-item-" + iIndex + "-title");
			oRm.addClass("sapSuiteCpMCChartItemTitle");
			oRm.writeClasses();
			oRm.write(">");
				oRm.writeEscaped(oData.getTitle());
			oRm.write("</div>");
		oRm.write("</div>");
	};

	return ComparisonMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/ComparisonMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.DeltaMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.DeltaMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/DeltaMicroChart",[ 'jquery.sap.global', './library', 'sap/m/library', 'sap/m/FlexBox', 'sap/ui/core/Control', 'sap/ui/Device', 'sap/ui/core/ResizeHandler' ],
	function(jQuery, library, MobileLibrary, FlexBox, Control, Device, ResizeHandler) {
	"use strict";

	/**
	 * Constructor for a new DeltaMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Represents the delta of two values as a chart. This control replaces the deprecated sap.suite.ui.commons.DeltaMicroChart.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.DeltaMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
	 */
	var DeltaMicroChart = Control.extend("sap.suite.ui.microchart.DeltaMicroChart", /** @lends sap.suite.ui.microchart.DeltaMicroChart.prototype */ { metadata: {

		library: "sap.suite.ui.microchart",
		properties: {

			/**
			 * The first value for delta calculation.
			 */
			value1: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * The second value for delta calculation.
			 */
			value2: {type: "float", group: "Misc", defaultValue: null},

			/**
			 * The first value title.
			 */
			title1: {type: "string", group: "Misc", defaultValue: null},

			/**
			 * The second value title.
			 */
			title2: {type: "string", group: "Misc", defaultValue: null},

			/**
			 * If this property is set, it is rendered instead of value1.
			 */
			displayValue1: {type: "string", group: "Misc", defaultValue: null},

			/**
			 * If this property is set, it is rendered instead of value2.
			 */
			displayValue2: {type: "string", group: "Misc", defaultValue: null},

			/**
			 * If this property is set, it is rendered instead of a calculated delta.
			 */
			deltaDisplayValue: {type: "string", group: "Misc", defaultValue: null},

			/**
			 * The semantic color of the delta value.
			 */
			color: {type: "sap.m.ValueColor", group: "Misc", defaultValue: "Neutral"},

			/**
			 * The width of the chart.
			 */
			width: {type: "sap.ui.core.CSSSize", group: "Misc"},

			/**
			 * The size of the chart. If is not set, the default size is applied based on the device type.
			 */
			size: {type: "sap.m.Size", group: "Misc", defaultValue: "Auto"},

			/**
			 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size and Width properties are ignored in such case.
			 * @since 1.38.0
			 */
			isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}

		},

		events: {

			/**
			 * The event is triggered when the chart is pressed.
			 */
			press: {}

		}

	}});

	DeltaMicroChart.EDGE_CASE_WIDTH_RESIZEFONT = 168; // Corresponds to M size width 10.5rem
	DeltaMicroChart.EDGE_CASE_HEIGHT_SHOW_BOTTOM_LABEL = 16; // 1rem on the basis of design
	DeltaMicroChart.EDGE_CASE_HEIGHT_SHOW_TOP_BOTTOM_LABELS = 32; // 2rem on the basis of design

	DeltaMicroChart.prototype.init = function() {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	DeltaMicroChart.prototype.setSize = function(size) {
		if (this.getSize() !== size) {
			if (size === MobileLibrary.Size.Responsive) {
				this.setProperty("isResponsive", true, true);
			} else {
				this.setProperty("isResponsive", false, true);
			}
			this.setProperty("size", size, false);
		}
		return this;
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all themes are loaded
	 * and everything is properly initialized. We attach a theme check here.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	DeltaMicroChart.prototype._calcChartData = function() {
		var fVal1 = this.getValue1();
		var fVal2 = this.getValue2();

		var fMin = Math.min(fVal1, fVal2, 0);
		var fMax = Math.max(fVal1, fVal2, 0);
		var fTotal = fMax - fMin;

		function calcPercent(fVal) {
			return (fTotal === 0 ?  0 : Math.abs(fVal) / fTotal * 100).toFixed(2);
		}

		var oConf = {};
		var fDelta = fVal1 - fVal2;

		oConf.delta = {
			left: fMax === 0,
			width: calcPercent(fDelta),
			isFirstStripeUp: fVal1 < fVal2,
			isMax: (fVal1 < 0 && fVal2 >= 0) || (fVal1 >= 0 && fVal2 < 0),
			isZero: fVal1 === 0 && fVal2 === 0,
			isEqual: fDelta === 0
		};

		oConf.bar1 = {
			left: fVal2 >= 0,
			width: calcPercent(fVal1),
			isSmaller: Math.abs(fVal1) < Math.abs(fVal2)
		};

		oConf.bar2 = {
			left: fVal1 >= 0,
			width: calcPercent(fVal2),
			isSmaller: Math.abs(fVal2) < Math.abs(fVal1)
		};

		return oConf;
	};

	DeltaMicroChart.prototype._getLocalizedColorMeaning = function(sColor) {
		return this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
	};

	/**
	 * Calculates the number of digits after the decimal point.
	 *
	 * @param {float} fValue float value
	 * @returns {int} number of digits after the decimal point in fValue.
	 * @private
	 */
	DeltaMicroChart.prototype._digitsAfterDecimalPoint = function(fValue) {
		var sAfter = ("" + fValue).match(/[.,](\d+)/g);
		return (sAfter) ? ("" + sAfter).length - 1 : 0;
	};

	DeltaMicroChart.prototype.getAltText = function() {
		var sDv1 = this.getDisplayValue1();
		var sDv2 = this.getDisplayValue2();
		var sDdv = this.getDeltaDisplayValue();
		var fVal1 = this.getValue1();
		var fVal2 = this.getValue2();
		var sAdv1ToShow = sDv1 ? sDv1 : "" + fVal1;
		var sAdv2ToShow = sDv2 ? sDv2 : "" + fVal2;
		var sAddvToShow = sDdv ? sDdv : "" + Math.abs(fVal1 - fVal2).toFixed(Math.max(this._digitsAfterDecimalPoint(fVal1), this._digitsAfterDecimalPoint(fVal2)));
		var sMeaning = this._getLocalizedColorMeaning(this.getColor());

		return this.getTitle1() + " " + sAdv1ToShow + "\n" + this.getTitle2() + " " + sAdv2ToShow + "\n" +  this._oRb.getText("DELTAMICROCHART_DELTA_TOOLTIP", [sAddvToShow, sMeaning]);
	};

	DeltaMicroChart.prototype.getTooltip_AsString  = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	DeltaMicroChart.prototype._isCalcSupported = function() {
		return jQuery.sap.byId(this.getId() + "-calc").css("max-width") === "11px";
	};

	DeltaMicroChart.prototype._isRoundingSupported = function() {
		return jQuery.sap.byId(this.getId() + "-calc1").width() === 4;
	};

	DeltaMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}
		this._oChartData = this._calcChartData();
		if (this._sResizeHandlerId) {
			ResizeHandler.deregister(this._sResizeHandlerId);
		}
		this.$().unbind("mouseenter", this._addTitleAttribute);
		this.$().unbind("mouseleave", this._removeTitleAttribute);
	};

	DeltaMicroChart.prototype.onAfterRendering = function() {
		this._bCalc = this._isCalcSupported();
		this._bRounding = this._isRoundingSupported();

		if (this.getIsResponsive()){
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);

		//attaches handler for mouse enter event
		this.$().bind("mouseenter", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave", this._removeTitleAttribute.bind(this));
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._onControlIsVisible = function() {
		if (this.getIsResponsive()){
			this._resizeVertically();
			this._resizeHorizontally();
		}
		if (!this._bCalc || !this._bRounding) {
			var oChart = jQuery.sap.domById(this.getId() + "-dmc-chart");
			this._sResizeHandlerId = ResizeHandler.register(oChart,  jQuery.proxy(this._adjust, this));

			if (!this._bCalc) {
				this._adjustCalc();
			}

			if (!this._bRounding) {
				this._adjustRound();
			}
		}
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._adjustToParent = function() {
		if (jQuery.isFunction(this.getParent) && this.getParent() instanceof FlexBox) {
			var sParentHeight = parseInt(this.getParent().$().height(), 10);
			var sParentWidth = parseInt(this.getParent().$().width(), 10);
			var $this = this.$();
			$this.outerHeight(sParentHeight - parseInt($this.css("margin-top"), 10) - parseInt($this.css("margin-bottom"), 10));
			$this.outerWidth(sParentWidth - parseInt($this.css("margin-left"), 10) - parseInt($this.css("margin-right"), 10));
		}
	};

	/**
	 * Performs vertical responsiveness adjustment. Assumes that the height of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._resizeVertically = function() {
		var $this = this.$();
		var $VerticalCenteredWrapper = $this.find(".sapSuiteDMCVerticalAlignmentContainer");
		var $Chart = $this.find(".sapSuiteDMCResponsive.sapSuiteDMCChart");
		var $LeftTopLabel = $this.find(".sapSuiteDMCPositionTop.sapSuiteDMCTitle");
		var $RightTopLabel = $this.find(".sapSuiteDMCLbls .sapSuiteDMCValue1");
		var $RightMiddleLabel = $this.find(".sapSuiteDMCLbls .sapSuiteDMCDelta");

		// preparing resizing thresholds
		var iHeightThrescholdHideChart = DeltaMicroChart.EDGE_CASE_HEIGHT_SHOW_TOP_BOTTOM_LABELS + parseInt($Chart.css("min-height"), 10);

		// font resizing
		var iVerticalCenteredWrapperHeigth = parseInt($VerticalCenteredWrapper.css("height"), 10);
		var iHeight = parseInt($this.css("height"), 10);
		if (iHeight <= iVerticalCenteredWrapperHeigth){
			$this.addClass("sapSuiteDMCSmallFont");
		}

		// vertical resizing
		if (iHeight < DeltaMicroChart.EDGE_CASE_HEIGHT_SHOW_BOTTOM_LABEL){
			$this.hide();
		} else if (iHeight < DeltaMicroChart.EDGE_CASE_HEIGHT_SHOW_TOP_BOTTOM_LABELS){
			$RightTopLabel.hide();
			$RightMiddleLabel.hide();
			$LeftTopLabel.hide();
			$Chart.hide();
		} else if (iHeight <= iHeightThrescholdHideChart){
			$RightMiddleLabel.hide();
			$Chart.hide();
		}
	};

	/**
	 * Performs horizontal responsiveness adjustment. Assumes that the width of the control will not change afterwards. Assumes that all the CSS have already been loaded and are available.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		// jQuery objects necessary for resizing
		var $LeftSide = $this.find(".sapSuiteDMCResponsive.sapSuiteDMCCnt");
		var $RightSide = $this.find(".sapSuiteDMCResponsive.sapSuiteDMCLbls");
		var iCurrentControlWidth = parseInt($this.css("width"), 10);

		// preparing resizing thresholds
		var iWidthThrescholdHideLeftSide = parseInt($LeftSide.css("min-width"), 10);

		if (iCurrentControlWidth < DeltaMicroChart.EDGE_CASE_WIDTH_RESIZEFONT || !this._rightSideTruncated($RightSide)) {
			$this.addClass("sapSuiteDMCSmallFont");
		}

		if (!this._rightSideTruncated($RightSide)) {
			//Never truncate numeric values on the right
			$this.hide();
		}

		if (parseInt($LeftSide.css("width"), 10) <= iWidthThrescholdHideLeftSide) {
			// The space on the left is too small even for truncated text in labels
			$LeftSide.hide();
		}
	};

	/**
	 * Checks if the whole control has enough width to display the right side of the control without truncation.
	 * @param {jQuery} $RightSide The label part of the row
	 * @returns {boolean} True if the given element's width is smaller than or equal to the chart's, otherwise false
	 * @private
	 */
	DeltaMicroChart.prototype._rightSideTruncated = function($RightSide) {
		return parseInt(this.$().css("width"), 10) >= parseInt($RightSide.css("width"), 10);
	};

	DeltaMicroChart.prototype._adjust = function() {
		if (!this._bCalc) {
			this._adjustCalc();
		}

		if (!this._bRounding) {
			this._adjustRound();
		}
	};

	DeltaMicroChart.prototype._adjustRound = function() {
		var iChartWidth = jQuery.sap.byId(this.getId() + "-dmc-chart").width();
		var iDeltaWidth = Math.round(iChartWidth * this._oChartData.delta.width / 100);

		jQuery.sap.byId(this.getId() + "-dmc-bar-delta").width(iDeltaWidth);

		if (this._oChartData.bar1.isSmaller && !this._oChartData.delta.isMax) {
			jQuery.sap.byId(this.getId() + "-dmc-bar1").width(iChartWidth - iDeltaWidth);
		}

		if (this._oChartData.bar2.isSmaller && !this._oChartData.delta.isMax) {
			jQuery.sap.byId(this.getId() + "-dmc-bar2").width(iChartWidth - iDeltaWidth);
		}
	};

	DeltaMicroChart.prototype._adjustCalc = function() {
		var iChartWidth = jQuery.sap.byId(this.getId() + "-dmc-chart").width();

		function adjustBar(oBar) {
			oBar.css("max-width", iChartWidth - parseInt(oBar.css("max-width"), 10) + "px");
		}

		adjustBar(jQuery.sap.byId(this.getId() + "-dmc-bar1"));
		adjustBar(jQuery.sap.byId(this.getId() + "-dmc-bar2"));
		adjustBar(jQuery.sap.byId(this.getId() + "-dmc-bar-delta"));
	};

	DeltaMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	DeltaMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	DeltaMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	DeltaMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	DeltaMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.ENTER || oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	/**
	 * Adds title attribute to show tooltip when the mouse enters chart.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._addTitleAttribute = function() {
		if (this.$().attr("title")) {
			return;
		} else {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes title attribute to let tooltip disappear when the mouse left the chart.
	 *
	 * @private
	 */
	DeltaMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};
	return DeltaMicroChart;
});

}; // end of sap/suite/ui/microchart/DeltaMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.HarveyBallMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.HarveyBallMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/HarveyBallMicroChart",[ 'jquery.sap.global', './library', 'sap/m/library', 'sap/ui/core/Control', 'sap/ui/Device'],
	function(jQuery, library, MobileLibrary, Control, Device) {
	"use strict";

	/**
	 * The configuration of the graphic element on the chart.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Displays a pie chart with highlighted sectors.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.HarveyBallMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
	 */
	var HarveyBallMicroChart = Control.extend("sap.suite.ui.microchart.HarveyBallMicroChart", /** @lends sap.suite.ui.microchart.HarveyBallMicroChart.prototype */ {
		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {

				/**
				 * The total value. This is taken as 360 degrees value on the chart.
				 */
				total: {group:"Misc", type:"float", defaultValue: null},

				/**
				 * The total label. If specified, it is displayed instead of the total value.
				 */
				totalLabel: {group:"Misc", type:"string"},

				/**
				The scaling factor that is displayed next to the total value.
				*/
				totalScale: {group:"Misc", type:"string"},

				/**
				If set to true, the totalLabel parameter is considered as the combination of the total value and its scaling factor. The default value is false. It means that the total value and the scaling factor are defined separately by the total and the totalScale properties accordingly.
				*/
				formattedLabel: {group:"Misc", type:"boolean", defaultValue:false},

				/**
				If it is set to true, the total value is displayed next to the chart. The default setting is true.
				*/
				showTotal: {group:"Misc", type:"boolean", defaultValue:true},

				/**
				If it is set to true, the fraction values are displayed next to the chart. The default setting is true.
				*/
				showFractions: {group:"Misc", type:"boolean", defaultValue:true},

				/**
				The size of the chart. If it is not set, the default size is applied based on the device type.
				*/
				size: {group:"Misc", type:"sap.m.Size", defaultValue:"Auto"},

				/**
				The color palette for the chart. Currently only a single color (first color of the array) is supported.
				If this property is set, the semantic color defined in HarveyBallMicroChartItem is ignored.
				*/
				colorPalette: {type: "string[]", group : "Appearance", defaultValue : [] },

				/**
				The width of the chart. If it is not set, the size of the control is defined by the size property.
				*/
				width: {group:"Misc", type:"sap.ui.core.CSSSize"},

				/**
				 * If this set to true, width and height of the control are determined by the width and height of the container in which the control is placed. Size and Width properties are ignored in such case.
				 * @since 1.38.0
				 */
				isResponsive: {type: "boolean", group: "Appearance", defaultValue: false}
			},
			events: {
				/**
				 * The event is triggered when the chart is pressed.
				 */
				press: {}
			},
			defaultAggregation : "items",
			aggregations: {
				/**
				 * The set of items. Currently only a single item is supported.
				 */
				"items": { multiple: true, type: "sap.suite.ui.microchart.HarveyBallMicroChartItem", bindable : "bindable" }
			}
		}
	});

	HarveyBallMicroChart._iSmallestChartSize = 24;
	HarveyBallMicroChart._iSmallestFontSize = 12;

	///**
	// * This file defines behavior for the control,
	// */
	HarveyBallMicroChart.prototype.getAltText = function() {
		var sAltText = "";
		var bIsFirst = true;

		var aItems = this.getItems();
		for (var i = 0; i < aItems.length; i++) {
			var oItem = aItems[i];
			var sColor = (this.getColorPalette().length == 0) ? this._rb.getText(("SEMANTIC_COLOR_" + oItem.getColor()).toUpperCase()) : "";
			var sLabel = oItem.getFractionLabel();
			var sScale = oItem.getFractionScale();
			if (!sLabel && sScale) {
				sLabel = oItem.getFormattedLabel() ? oItem.getFraction() : oItem.getFraction() + oItem.getFractionScale().substring(0,3);
			} else if (!oItem.getFormattedLabel() && oItem.getFractionLabel()) {
				sLabel += oItem.getFractionScale().substring(0,3);
			}

			sAltText += (bIsFirst ? "" : "\n") + sLabel + " " + sColor;
			bIsFirst = false;
		}

		if (this.getTotal()) {
			var sTLabel = this.getTotalLabel();
			if (!sTLabel) {
				sTLabel = this.getFormattedLabel() ? this.getTotal() : this.getTotal() + this.getTotalScale().substring(0,3);
			} else if (!this.getFormattedLabel()) {
				sTLabel += this.getTotalScale().substring(0,3);
			}

			sAltText += (bIsFirst ? "" : "\n") + this._rb.getText("HARVEYBALLMICROCHART_TOTAL_TOOLTIP") + " " + sTLabel;
		}
		return sAltText;
	};

	HarveyBallMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var oTooltip = this.getTooltip();
		var sTooltip = this.getAltText();

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip ? oTooltip : "";
	};

	HarveyBallMicroChart.prototype.init = function() {
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		Device.media.attachHandler(this.rerender, this, Device.media.RANGESETS.SAP_STANDARD);
		this._sChartResizeHandlerId = null;
		this._$Control = null;
		this._$ParentContainer = null;
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	HarveyBallMicroChart.prototype.setSize = function(size) {
		if (this.getSize() !== size) {
			if (size === MobileLibrary.Size.Responsive) {
				this.setProperty("isResponsive", true, true);
			} else {
				this.setProperty("isResponsive", false, true);
			}
			this.setProperty("size", size, false);
		}
		return this;
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all themes are loaded
	 * and everything is properly initialized. We attach a theme check here.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	HarveyBallMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			this.setIsResponsive(true);
			library._removeStandardMargins(this);
		}
		this._unbindMouseEnterLeaveHandler();
	};

	HarveyBallMicroChart.prototype.onAfterRendering = function() {
		if (this.getIsResponsive()) {
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);
		this._bindMouseEnterLeaveHandler();
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._onControlIsVisible = function() {
		// If chart is smaller than 24, hides the chart
		if (this.$().width() < HarveyBallMicroChart._iSmallestChartSize || this.$().height() < HarveyBallMicroChart._iSmallestChartSize) {
			this.$().hide();
		}
		// If the font size is lower than 12, hides the texts
		this._hideLabels();
	};

	HarveyBallMicroChart.prototype._adjustToParent = function() {
		// Checks that there's a getParent method available
		if (!jQuery.isFunction(this.getParent)) {
			return;
		}
		var oParent = this.getParent();
		if (jQuery.isFunction(oParent.getHeight)) {
			// Two pixels are subtracted from the original value. Otherwise, there's not enough space for the outline and it won't render correctly.
			var sParentHeight = parseFloat(oParent.$().height()) - 2;
			this.$().height(sParentHeight); //Required for rendering in page element. Otherwise element is cutted at the top.
			this.$().find("svg").height(sParentHeight);
		}
		if (jQuery.isFunction(oParent.getWidth)) {
			// Two pixels are subtracted from the original value. Otherwise, there's not enough space for the outline and it won't render correctly.
			var sParentWidth = parseFloat(oParent.$().width()) - 2;
			this.$().width(sParentWidth); //Required for rendering in page element. Otherwise element is cutted at the top.
			this.$().find("svg").width(sParentWidth);
		}
	};

	HarveyBallMicroChart.prototype._hideLabels = function() {
		// Gets the font size of the two texts
		var iTextTopFontSize;
		var iTextBottomFontSize;
		var $TextTop = this.$().find("#sapSuiteHBMCTopText");
		var $TextBottom = this.$().find("#sapSuiteHBMCBottomText");
		if ($TextTop.length > 0) {
			iTextTopFontSize = $TextTop[0].getBoundingClientRect().height;
		}
		if ($TextBottom.length > 0) {
			iTextBottomFontSize = $TextBottom[0].getBoundingClientRect().height;
		}
		// If the font size is lower than 12, hides the texts
		if (iTextTopFontSize < HarveyBallMicroChart._iSmallestFontSize || iTextBottomFontSize < HarveyBallMicroChart._iSmallestFontSize) {
			this.$().find("text").hide();
		}
	};

	HarveyBallMicroChart.prototype._parseFormattedValue = function(sValue) {
		return {
			scale: sValue.replace(/.*?([^+-.,\d]*)$/g, "$1").trim(),
			value: sValue.replace(/(.*?)[^+-.,\d]*$/g, "$1").trim()
		};
	};

	HarveyBallMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	HarveyBallMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which == jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	HarveyBallMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which == jQuery.sap.KeyCodes.ENTER
				|| oEvent.which == jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	HarveyBallMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	HarveyBallMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	HarveyBallMicroChart.prototype.exit = function(oEvent) {
		Device.media.detachHandler(this.rerender, this, Device.media.RANGESETS.SAP_STANDARD);
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._addTitleAttribute = function() {
		if (!this.$().attr("title")) {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Binds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._bindMouseEnterLeaveHandler = function () {
		this.$().bind("mouseenter.tooltip", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave.tooltip", this._removeTitleAttribute.bind(this));
	};

	/**
	 * Unbinds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	HarveyBallMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
		this.$().unbind("mouseenter.tooltip");
		this.$().unbind("mouseleave.tooltip");
	};

	return HarveyBallMicroChart;

});

}; // end of sap/suite/ui/microchart/HarveyBallMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.HarveyBallMicroChartItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// This control displays the history of values as a line mini chart or an area mini chart.
jQuery.sap.declare('sap.suite.ui.microchart.HarveyBallMicroChartItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/HarveyBallMicroChartItem",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";

	/**
	 * The configuration of the graphic element on the chart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Configures the slices of the pie chart.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.34
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.HarveyBallMicroChartItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var HarveyBallMicroChartItem = Element.extend("sap.suite.ui.microchart.HarveyBallMicroChartItem", /** @lends sap.suite.ui.microchart.HarveyBallMicroChartItem.prototype */ {
		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {

				/**
				*The value label color.
				*/
				color: {group:"Misc", type:"sap.m.ValueColor", defaultValue:"Neutral"},

				/**
				*The fraction value.
				*/
				fraction: {group:"Misc", type:"float", defaultValue:"0"},

				/**
				*The fraction label. If specified, it is displayed instead of the fraction value.
				*/
				fractionLabel: {group:"Misc", type:"string"},

				/**
				*The scaling factor that is displayed after the fraction value.
				*/
				fractionScale: {group:"Misc", type:"string"},

				/**
				*If set to true, the fractionLabel parameter is considered as the combination of the fraction value and scaling factor. The default value is false. It means that the fraction value and the scaling factor are defined separately by the fraction and the fractionScale properties accordingly.
				*/
				formattedLabel: {group:"Misc", type:"boolean", defaultValue:false}

			}
		}
	});

	return HarveyBallMicroChartItem;

});

}; // end of sap/suite/ui/microchart/HarveyBallMicroChartItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.HarveyBallMicroChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.HarveyBallMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/HarveyBallMicroChartRenderer",[ 'jquery.sap.global', 'sap/m/library', "sap/ui/Device", "./library" ],
	function(jQuery, MobileLibrary, Device, library) {
	"use strict";

	/**
	* HarveyBallMicroChartRenderer renderer.
	* @namespace
	*/
	var HarveyBallMicroChartRenderer = {};

	HarveyBallMicroChartRenderer._iReferenceControlHeight = 72;
	HarveyBallMicroChartRenderer._iReferenceControlWidth = 168;

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render - Output - Buffer
	 * @param {sap.ui.core.Control} oControl the control to be rendered
	 */
	HarveyBallMicroChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		this._calculatePath(oControl);
		var aColorPalette = oControl.getColorPalette();
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		var sAriaLabel = oControl.getAltText();
		var sTotalScale = "";
		var sValueLabel = "";
		var sValueScale = "";
		var bFmtLabel = false;
		var fValue = 0;
		var sColorClass = "";
		var sColor = aColorPalette.length > 0 ? aColorPalette[0] : null;
		var iCircleRadius = this._oPath.center;

		if (library._isThemeHighContrast()) {
			iCircleRadius -= 1;
		}

		if (MobileLibrary.ValueCSSColor.isValid(sColor)) {
			sColor = jQuery.sap.encodeHTML(aColorPalette[0]);
		} else {
			sColor = null;
		}

		// currently only value from first item is supported
		if (oControl.getItems().length) {
			var oPieItem = oControl.getItems()[0];
			fValue = oPieItem.getFraction();
			sColorClass = "sapSuiteHBMCSemanticColor" + jQuery.sap.encodeHTML(oPieItem.getColor());
			sValueLabel = oPieItem.getFractionLabel() ? oPieItem.getFractionLabel() : sValueLabel + oPieItem.getFraction();
			sValueScale = oPieItem.getFractionScale() ? oPieItem.getFractionScale().substring(0, 3) : sValueScale;
			bFmtLabel = oPieItem.getFormattedLabel();
		}

		if (bFmtLabel) {
			var oFormattedValue = oControl._parseFormattedValue(sValueLabel);

			sValueScale = oFormattedValue.scale.substring(0, 3);
			sValueLabel = oFormattedValue.value;
		}

		var fTotal = oControl.getTotal();
		var sTotalLabel = oControl.getTotalLabel() ? oControl.getTotalLabel() : "" + oControl.getTotal();
		if (oControl.getTotalScale()) {
			sTotalScale = oControl.getTotalScale().substring(0, 3);
		}

		if (oControl.getFormattedLabel()) {
			var oFormattedTotal = oControl._parseFormattedValue(sTotalLabel);
			sTotalScale = oFormattedTotal.scale.substring(0, 3);
			sTotalLabel = oFormattedTotal.value;
		}
		var iTrunc = 5; // truncate values to 5 chars
		if (sValueLabel) {
			sValueLabel = (sValueLabel.length >= iTrunc && (sValueLabel[iTrunc - 1] === "." || sValueLabel[iTrunc - 1] === ","))
					? sValueLabel.substring(0, iTrunc - 1)
					: sValueLabel.substring(0, iTrunc);
		}
		if (sTotalLabel) {
			sTotalLabel = (sTotalLabel.length >= iTrunc && (sTotalLabel[iTrunc - 1] === "." || sTotalLabel[iTrunc - 1] === ","))
					? sTotalLabel.substring(0, iTrunc - 1)
					: sTotalLabel.substring(0, iTrunc);
		}

		var sSizeClass = "sapSuiteHBMCSize" + oControl.getSize();
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);
		oRm.addClass("sapSuiteHBMC");
		oRm.addClass(oControl.getIsResponsive() ? "sapSuiteHBMCResponsive" : jQuery.sap.encodeHTML(sSizeClass));
		if (oControl.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		oRm.writeClasses();

		if (!oControl.getIsResponsive() && oControl.getWidth()){
			oRm.addStyle("width", oControl.getWidth());
		}
		oRm.writeStyles();
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapSuiteHBMCChart");
		oRm.addClass(oControl.getIsResponsive() ? "sapSuiteHBMCResponsive" : jQuery.sap.encodeHTML(sSizeClass));
		oRm.writeClasses();
		oRm.addStyle("display", "inline-block");
		oRm.writeStyles();
		oRm.write(">");

		oRm.write("<svg");
		oRm.writeAttribute("id", oControl.getId() + "-harvey-ball");
		if (oControl.getIsResponsive()) {
			oRm.addClass("sapSuiteHBMCChart");
			oRm.addClass("sapSuiteHBMCResponsive");
			oRm.writeClasses();
			oRm.writeAttributeEscaped("viewBox", this._getSvgViewBoxProperties());
		} else {
			oRm.writeAttributeEscaped("width", this._oPath.size);
			oRm.writeAttributeEscaped("height", this._oPath.size);
		}
		oRm.writeAttribute("focusable", false);
		oRm.write(">");
		oRm.write("<g>");
		oRm.write("<circle");
		if (bRtl && oControl.getIsResponsive()) {
			oRm.writeAttributeEscaped("cx", HarveyBallMicroChartRenderer._iReferenceControlWidth - this._oPath.center);
		} else {
			oRm.writeAttributeEscaped("cx", this._oPath.center);
		}
		oRm.writeAttributeEscaped("cy", this._oPath.center);
		oRm.writeAttributeEscaped("r", iCircleRadius);
		oRm.addClass("sapSuiteHBMCBackgroundCircle");
		oRm.writeClasses();
		oRm.write("/>");

		if (fValue && fValue >= fTotal) {
			oRm.write("<circle");
			if (bRtl && oControl.getIsResponsive()) {
				oRm.writeAttributeEscaped("cx", HarveyBallMicroChartRenderer._iReferenceControlWidth - this._oPath.center);
			} else {
				oRm.writeAttributeEscaped("cx", this._oPath.center);
			}
			oRm.writeAttributeEscaped("cy", this._oPath.center);
			oRm.writeAttributeEscaped("r", iCircleRadius - this._oPath.border);
			oRm.addClass("sapSuiteHBMCSegment");
			if (sColor) {
				oRm.addStyle("fill", sColor);
				oRm.writeStyles();
			} else {
				oRm.addClass(jQuery.sap.encodeHTML(sColorClass));
			}
			oRm.writeClasses();


			oRm.write("/>");
		} else if (fValue > 0) {
			oRm.write("<path");
			oRm.writeAttribute("id", oControl.getId() + "-segment");
			oRm.addClass("sapSuiteHBMCSegment");
			if (sColor) {
				oRm.addStyle("fill", sColor);
				oRm.writeStyles();
			} else {
				oRm.addClass(jQuery.sap.encodeHTML(sColorClass));
			}
			oRm.writeClasses();
			oRm.writeAttributeEscaped("d", this._serializePieChart());


			oRm.write("/>");
		}

		oRm.write("</g>");
		if (oControl.getIsResponsive()) {
			if (oControl.getShowFractions()) {
				oRm.write("<text");
				oRm.writeAttribute("id", "sapSuiteHBMCTopText");
				if (bRtl && (Device.browser.msie || Device.browser.edge)) {
					oRm.writeAttribute("text-anchor", "end");
				} else {
					oRm.writeAttribute("text-anchor", "start");
				}
				oRm.writeAttribute("x", "80");
				oRm.writeAttribute("y", "30");
				oRm.addClass("sapSuiteHBMCResponsive");
				oRm.addClass("sapSuiteHBMCValueContainer");
				if (!sColor) {
					oRm.addClass(jQuery.sap.encodeHTML(sColorClass));
				}
				oRm.writeClasses();
				oRm.write(">");
				if (!bRtl) {
					this.renderFractionLabel(oRm, sValueLabel, sColor, bRtl);
					this.renderFractionScale(oRm, sValueScale, sColor, bRtl);
				} else {
					this.renderFractionScale(oRm, sValueScale, sColor, bRtl);
					this.renderFractionLabel(oRm, sValueLabel, sColor, bRtl);
				}
				oRm.write("</text>");
			}
			if (oControl.getShowTotal()) {
				oRm.write("<text");
				oRm.writeAttribute("id", "sapSuiteHBMCBottomText");
				if (!bRtl) {
					oRm.writeAttributeEscaped("x", HarveyBallMicroChartRenderer._iReferenceControlWidth);
				} else {
					oRm.writeAttribute("x", "0");
				}
				oRm.writeAttribute("y", "65");

				if (bRtl && (Device.browser.msie || Device.browser.edge)) {
					oRm.writeAttribute("text-anchor", "start");
				} else {
					oRm.writeAttribute("text-anchor", "end");
				}

				oRm.addClass("sapSuiteHBMCResponsive");
				oRm.addClass("sapSuiteHBMCTotal");
				oRm.addClass("sapSuiteHBMCTotalContainer");
				oRm.writeClasses();
				oRm.write(">");
				if (!bRtl) {
					this.renderTotalLabel(oRm, sTotalLabel, bRtl);
					this.renderTotalScale(oRm, sTotalScale, bRtl);
				} else {
					this.renderTotalScale(oRm, sTotalScale, bRtl);
					this.renderTotalLabel(oRm, sTotalLabel, bRtl);
				}
				oRm.write("</text>");
			}
		}
		oRm.write("</svg>");
		oRm.write("</div>");

		if (!oControl.getIsResponsive()){
			oRm.write("<div");
			oRm.addClass("sapSuiteHBMCValueContainer");
			oRm.addClass(jQuery.sap.encodeHTML(sSizeClass));
			oRm.writeClasses();
			oRm.addStyle("display", oControl.getShowFractions() ? "inline-block" : "none");
			oRm.writeStyles();
			oRm.write(">");
			this.renderLabel(oRm, oControl, [sColorClass, sSizeClass, "sapSuiteHBMCValue"], sValueLabel, sColor, "-fraction");
			this.renderLabel(oRm, oControl, [sColorClass, sSizeClass, "sapSuiteHBMCValueScale"], sValueScale, sColor, "-fraction-scale");
			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass("sapSuiteHBMCTotalContainer");
			oRm.addClass(jQuery.sap.encodeHTML(sSizeClass));
			oRm.writeClasses();
			if (bRtl) {
				oRm.addStyle("left", "0");
			} else {
				oRm.addStyle("right", "0");
			}
			oRm.addStyle("display", oControl.getShowTotal() ? "inline-block" : "none");
			oRm.writeStyles();
			oRm.write(">");
			this.renderLabel(oRm, oControl, [sColorClass, sSizeClass, "sapSuiteHBMCTotal"], sTotalLabel, sColor, "-total");
			this.renderLabel(oRm, oControl, [sColorClass, sSizeClass, "sapSuiteHBMCTotalScale"], sTotalScale, sColor, "-total-scale");
			oRm.write("</div>");
		}
		oRm.write("</div>");
	};

	HarveyBallMicroChartRenderer.renderFractionLabel = function(oRm, sFractionLabel, sColor, bRtl) {
		oRm.write("<tspan");
		if (bRtl) {
			// px is used instead of rem for IE compatibility reasons
			oRm.writeAttribute("dx", "4.8px");
		}
		if (sColor) {
			oRm.addStyle("fill", sColor);
			oRm.writeStyles();
		}
		oRm.write(">");
		oRm.writeEscaped(sFractionLabel);
		oRm.write("</tspan>");
	};

	HarveyBallMicroChartRenderer.renderFractionScale = function(oRm, sFractionScale, sColor, bRtl) {
		oRm.write("<tspan");
		oRm.writeAttribute("font-size", "0.8rem");
		if (!bRtl) {
			// px is used instead of rem for IE compatibility reasons
			oRm.writeAttribute("dx", "4.8px");
		}
		if (sColor) {
			oRm.addStyle("fill", sColor);
			oRm.writeStyles();
		}
		oRm.write(">");
		oRm.writeEscaped(sFractionScale);
		oRm.write("</tspan>");
	};

	HarveyBallMicroChartRenderer.renderTotalLabel = function(oRm, sTotalLabel, bRtl) {
		oRm.write("<tspan");
		if (bRtl) {
			// px is used instead of rem for IE compatibility reasons
			oRm.writeAttribute("dx", "4.8px");
		} else if (Device.browser.msie || Device.browser.edge) {
			oRm.writeAttribute("dx", "-4.8px");
		}
		oRm.write(">");
		oRm.writeEscaped(sTotalLabel);
		oRm.write("</tspan>");
	};

	HarveyBallMicroChartRenderer.renderTotalScale = function(oRm, sTotalScale, bRtl) {
		oRm.write("<tspan");
		if (!bRtl) {
			// px is used instead of rem for IE compatibility reasons
			oRm.writeAttribute("dx", "4.8px");
		}
		oRm.write(">");
		oRm.writeEscaped(sTotalScale);
		oRm.write("</tspan>");
	};

	HarveyBallMicroChartRenderer.renderLabel = function(oRm, oControl, aClasses, sLabel, sColor, sId) {
		var bUseColorPalette = !(aClasses.indexOf("sapSuiteHBMCTotal") > -1 || aClasses.indexOf("sapSuiteHBMCTotalScale") > -1);
		oRm.write("<span");
		oRm.writeAttribute("id", oControl.getId() + sId);
		for (var i = 0; i < aClasses.length; i++) {
			// uses palette color only for fraction label and scale
			if (i === 0 && sColor && bUseColorPalette) {
				oRm.addStyle("color", sColor);
				oRm.writeStyles();
			} else {
				oRm.addClass(jQuery.sap.encodeHTML(aClasses[i]));
			}
		}
		oRm.writeClasses();
		oRm.write(">");
		if (sLabel) {
			oRm.writeEscaped(sLabel);
		}
		oRm.write("</span>");

	};

	HarveyBallMicroChartRenderer._getSvgViewBoxProperties = function() {
		return "0 0 " + HarveyBallMicroChartRenderer._iReferenceControlWidth + " " + HarveyBallMicroChartRenderer._iReferenceControlHeight;
	};

	HarveyBallMicroChartRenderer._calculatePath = function(oControl) {
		var oSize = oControl.getSize();
		var fTot = oControl.getTotal();
		var fFrac = 0;
		if (oControl.getItems().length) {
			fFrac = oControl.getItems()[0].getFraction();
		}
		var bIsPhone = false;

		if (oSize == "Auto") {
			bIsPhone = jQuery("html").hasClass("sapUiMedia-Std-Phone");
		}

		if (oSize == "S" || oSize == "XS") {
			bIsPhone = true;
		}

		var iMediaSize = bIsPhone ? 56 : 72;
		if (oControl.getIsResponsive()){
			iMediaSize = HarveyBallMicroChartRenderer._iReferenceControlHeight;
		}
		var iCenter = iMediaSize / 2;
		var iBorder = 4;
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		var bRtlResponsive;
		if (oControl.getIsResponsive() && bRtl) {
			bRtlResponsive = true;
		} else {
			bRtlResponsive = false;
		}
		this._oPath = {
			initial : {
				x : !bRtlResponsive ? iCenter : HarveyBallMicroChartRenderer._iReferenceControlWidth - iCenter,
				y : iCenter,
				x1 : !bRtlResponsive ? iCenter : HarveyBallMicroChartRenderer._iReferenceControlWidth - iCenter,
				y1 : iCenter
			},
			lineTo : {
				x : !bRtlResponsive ? iCenter : HarveyBallMicroChartRenderer._iReferenceControlWidth - iCenter,
				y : iBorder
			},
			arc : {
				x1 : iCenter - iBorder,
				y1 : iCenter - iBorder,
				xArc : 0,
				largeArc : 0,
				sweep : 1,
				x2 : "",
				y2 : ""
			},
			size : iMediaSize,
			border : iBorder,
			center : iCenter
		};

		var fAngle = fFrac / fTot * 360;
		if (fAngle < 10) {
			this._oPath.initial.x -= 1.5;
			this._oPath.initial.x1 += 1.5;
			this._oPath.arc.x2 = this._oPath.initial.x1;
			this._oPath.arc.y2 = this._oPath.lineTo.y;
		} else if (fAngle > 350 && fAngle < 360) {
			this._oPath.initial.x += 1.5;
			this._oPath.initial.x1 -= 1.5;
			this._oPath.arc.x2 = this._oPath.initial.x1;
			this._oPath.arc.y2 = this._oPath.lineTo.y;
		} else {
			var fRad = Math.PI / 180.0;
			var fRadius = this._oPath.center - this._oPath.border;
			var ix;
			if (!bRtlResponsive) {
				ix = fRadius * Math.cos((fAngle - 90) * fRad) + this._oPath.center;
			} else {
				ix = fRadius * Math.cos((fAngle - 90) * fRad) + HarveyBallMicroChartRenderer._iReferenceControlWidth - this._oPath.center;
			}
			var iy = this._oPath.size - (fRadius * Math.sin((fAngle + 90) * fRad) + this._oPath.center);
			this._oPath.arc.x2 = ix.toFixed(2);
			this._oPath.arc.y2 = iy.toFixed(2);
		}
		var iLargeArc = fTot / fFrac < 2 ? 1 : 0;

		this._oPath.arc.largeArc = iLargeArc;
	};

	HarveyBallMicroChartRenderer._serializePieChart = function() {
		var p = this._oPath;
		return ["M", p.initial.x, ",", p.initial.y, " L", p.initial.x, ",", p.lineTo.y, " A", p.arc.x1, ",", p.arc.y1,
				" ", p.arc.xArc, " ", p.arc.largeArc, ",", p.arc.sweep, " ", p.arc.x2, ",", p.arc.y2, " L", p.initial.x1,
				",", p.initial.y1, " z"].join("");
	};

	return HarveyBallMicroChartRenderer;

}, /* bExport */ true);

}; // end of sap/suite/ui/microchart/HarveyBallMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveBarChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveBarChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveBarChart",['jquery.sap.global', './library', 'sap/m/library', 'sap/ui/core/Control', 'sap/ui/Device', 'sap/m/FlexBox', 'sap/ui/core/ResizeHandler'],
	function(jQuery, library, MobileLibrary, Control, Device, FlexBox, ResizeHandler) {
	"use strict";

	/**
	 * Constructor for a new InteractiveBarChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The InteractiveBarChart control belongs to a chart control group in the MicroChart library with a number of interactive features. These interactive features provide more information on a chart value.
	 * For example, by selecting a bar you can get more details on the displayed value.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveBarChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 *
	 */
	var InteractiveBarChart = Control.extend("sap.suite.ui.microchart.InteractiveBarChart", /** @lends sap.suite.ui.microchart.InteractiveBarChart.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {
				/**
				 * The number of displayed bars.
				 */
				displayedBars : {type : "int", group : "Appearance", defaultValue : 3},
				/**
				 * Width of the labels column in the resulting layout (in percentage). Possible range of values from 0 to 100.
				 * A value of 40 results in the labels column taking up 40% of available space.
				 */
				labelWidth : {type : "sap.ui.core.Percentage", group : "Appearance", defaultValue : "40%"},
				/**
				 * Enables the selection in the chart.
				 */
				selectionEnabled : {type : "boolean", group : "Behavior", defaultValue : true},
				/**
				 * Begin of displayed scale.
				 */
				min: {type : "float", group : "Appearance"},
				/**
				 * End of displayed scale.
				 */
				max: {type : "float", group : "Appearance"}
			},
			defaultAggregation : "bars",
			aggregations : {
				/**
				 * Bars displayed on the chart.
				 */
				bars : {type : "sap.suite.ui.microchart.InteractiveBarChartBar", multiple : true, bindable : "bindable"}
			},
			events : {
				/**
				 * Event is fired when user has selected or deselected a bar.
				 */
				selectionChanged : {
					parameters : {
						/**
						 * All bars which are in selected state.
						 */
						selectedBars : {type : "sap.suite.ui.microchart.InteractiveBarChartBar[]"},
						/**
						 * The bar being selected or deselected.
						 */
						bar : {type : "sap.suite.ui.microchart.InteractiveBarChartBar"},
						/**
						 * The selection state of the bar being selected or deselected.
						 */
						selected : {type : "boolean"}
					}
				},
				/**
				 * The event is fired when the user presses the chart while its bars are not selectable in non-interactive mode. This is decided internally, depending on the size of the bars.
				 */
				press: {}
			},
			associations : {
				/**
				 * Association to controls which label this control (see WAI-ARIA attribute aria-labelledby).
				 */
				ariaLabelledBy : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
			}
		}
	});

	/* Constants */
	InteractiveBarChart.MIN_BAR_WIDTH_IN_PX = 1; // minimum bar width for small values (px)
	InteractiveBarChart.BAR_VALUE_PADDING_LEFT_IN_PX = 4; // 0.25rem space between the bar and the displayed value in case of the value is displayed outside of the bar
	InteractiveBarChart.BAR_VALUE_PADDING_RIGHT_IN_PX = 4; // 0.25rem space between the displayed value and the end of the bar
	InteractiveBarChart.SELECTION_AREA_BORDER_IN_PX = 1; // border width of selection area of each side
	InteractiveBarChart.DIVIDER_WIDTH_IN_PX = 1; // width of the divider separating negative and positive values
	// Responsiveness height
	InteractiveBarChart.AREA_HEIGHT_MINVALUE = 18; // area height threshold for which the chart should be hidden (px)
	InteractiveBarChart.BAR_HEIGHT_FONT_SMALLER = 22; // bar height threshold for a switch to smaller font (px)
	InteractiveBarChart.BAR_HEIGHT_MINVALUE = 6; // bar height threshold for which the chart should be hidden (px)
	InteractiveBarChart.BAR_HEIGHT_LABEL_HIDE = 16; // bar height threshold for which the labels inside bars should be hidden (px)
	// Responsiveness width
	InteractiveBarChart.CHART_WIDTH_FONT_SMALLER = 288; // chart width threshold for a switch to smaller font (px)
	InteractiveBarChart.LABEL_WIDTH_MINVALUE = 80; // label width threshold for a switch to move labels above bars (px)
	InteractiveBarChart.CHART_WIDTH_MINVALUE = 130; // chart width threshold for a switch to an invisible chart (px)
	// Responsiveness cozy vs compact mode
	InteractiveBarChart.AREA_HEIGHT_INTERACTIVE_MINVALUE = 48; // the minimum area height for an interactive mode (px)
	InteractiveBarChart.AREA_HEIGHT_INTERACTIVE_MINVALUE_COMPACT = 32;
	InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE1 = 34; // the area height threshold for a smaller padding between bar and area - stage1 (px)
	InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE1_COMPACT = 32;
	InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE2 = 28; // the area height threshold for a smaller padding between bar and area - stage2 (px)
	InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE2_COMPACT = 31;

	InteractiveBarChart.prototype.init = function() {
		/* Internal properties */
		this._iVisibleBars = 0; // visible bars is always a minimum value between available bars and displayed bars
		this._bInteractiveMode = true; // in non-interactive mode, the user cannot interact with the chart (user actions are ignored)
		this._bMinMaxValid = null;
		this._fDividerPositionRight = 0;
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this._fMin = null;
		this._fMax = null;

		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. In order for the control to be rendered only if all themes
	 * are loaded and everything is properly initialized, we attach a theme check in here.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart is not being rendered until the theme was applied.
	 * If the theme is applied, rendering starts by the control itself.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	InteractiveBarChart.prototype.onBeforeRendering = function() {
		this._bCompact = this._isCompact();
		this._bInteractiveMode = true;
		// set the data needed for responsiveness
		this._setResponsivenessData();
		this._setInternalMinMax();
		this._bMinMaxValid = this._checkIfMinMaxValid();
		if (this.getAggregation("bars") && this.getDisplayedBars()) {
			this._iVisibleBars = Math.min(this.getAggregation("bars").length, this.getDisplayedBars());
		}
		if (!this.data("_parentRenderingContext") && jQuery.isFunction(this.getParent)) {
			this.data("_parentRenderingContext", this.getParent());
		}
		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);
		this._updateUseSemanticTooltip();
	};

	InteractiveBarChart.prototype.onAfterRendering = function() {
		this._adjustToParent();
		library._checkControlIsVisible(this, this._onControlIsVisible);
	};

	/**
	 * Determines if the information about semantic colors should be added to the tooltip
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._updateUseSemanticTooltip = function() {
		var aBars = this.getBars();
		this._bUseSemanticTooltip = false;
		for (var i = 0; i < this._iVisibleBars; i++) {
			if (aBars[i].getColor() !== MobileLibrary.ValueColor.Neutral) {
				this._bUseSemanticTooltip = true;
				return;
			}
		}
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._onControlIsVisible = function() {
		this._sResizeHandlerId = ResizeHandler.register(this, this._onResize.bind(this));
		this._calcBarsWidth();
		this._onResize();

		// attach an interval timer in order to check the control's density mode and invalidate on change
		sap.ui.getCore().attachIntervalTimer(this._checkContentDensity, this);
	};

	InteractiveBarChart.prototype.exit = function() {
		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);
	};

	/* =========================================================== */
	/* Event handling */
	/* =========================================================== */

	/**
	 * Event handler for click. In non-interactive mode, all user actions are ignored.
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onclick = function(event) {
		// no click for disabled mode
		if (!this.getSelectionEnabled()) {
			 return;
		}
		if (this._bInteractiveMode) {
			var sId = jQuery(event.target).attr("id") || jQuery(event.target).parents(".sapSuiteIBCBarInteractionArea").attr("id"),
				$Focusables = this.$().find(".sapSuiteIBCBarInteractionArea"),
				iIndex, iHasFocus;
			if (sId) {
				iIndex = sId.substring(sId.lastIndexOf("-") + 1);
				if (isNaN(iIndex)) {
					return;
				} else {
					iIndex = parseInt(iIndex, 10);
				}
				this._toggleSelected(iIndex);
				// find out which bar has tabindex = 0 at this moment
				iHasFocus = $Focusables.index(this.$().find(".sapSuiteIBCBarInteractionArea[tabindex='0']"));
				this._switchTabindex(iHasFocus, iIndex, $Focusables);
			}
		} else {
			this.firePress();
			if (Device.browser.msie) {
				this.$().focus();
				event.preventDefault();
			}
		}
	};

	/**
	 * Handler for enter button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapenter = function(event) {
		if (this._bInteractiveMode) {
			var iIndex = this.$().find(".sapSuiteIBCBarInteractionArea").index(event.target);
			if (iIndex !== -1) {
				this._toggleSelected(iIndex);
			}
			event.preventDefault();
			event.stopImmediatePropagation();
		} else {
			this.firePress();
		}
	};

	/**
	 * Handler for space button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapspace = InteractiveBarChart.prototype.onsapenter;

	/**
	 * Handler for up arrow button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapup = function(event) {
		var $Focusables = this.$().find(".sapSuiteIBCBarInteractionArea");
		var iIndex = $Focusables.index(event.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex - 1, $Focusables);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	/**
	 * Handler for down arrow button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapdown = function(event) {
		var $Focusables = this.$().find(".sapSuiteIBCBarInteractionArea");
		var iIndex = $Focusables.index(event.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex + 1, $Focusables);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	/**
	 * Handler for home button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsaphome = function(event) {
		var $Focusables = this.$().find(".sapSuiteIBCBarInteractionArea");
		var iIndex = $Focusables.index(event.target);
		if (iIndex !== 0 && $Focusables.length > 0) {
			this._switchTabindex(iIndex, 0, $Focusables);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	/**
	 * Handler for end button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapend = function(event) {
		var $Focusables = this.$().find(".sapSuiteIBCBarInteractionArea"),
			iIndex = $Focusables.index(event.target),
			iLength = $Focusables.length;
		if (iIndex !== iLength - 1 && iLength > 0) {
			this._switchTabindex(iIndex, iLength - 1, $Focusables);
		}
		event.preventDefault();
		event.stopImmediatePropagation();
	};

	/**
	 * Handler for left arrow button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapleft = InteractiveBarChart.prototype.onsapup;

	/**
	 * Handler for right arrow button event
	 *
	 * @param {sap.ui.base.Event} event which was fired
	 */
	InteractiveBarChart.prototype.onsapright = InteractiveBarChart.prototype.onsapdown;

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */

	/**
	 * Gets all selected bars.
	 *
	 * @returns {sap.suite.ui.microchart.InteractiveBarChartBar[]} All selected bars
	 * @public
	 */
	InteractiveBarChart.prototype.getSelectedBars = function() {
		var aBars = this.getAggregation("bars"),
			aSelectedBars = [], i;

		for (i = 0; i < aBars.length; i++) {
			if (aBars[i].getSelected()) {
				aSelectedBars.push(aBars[i]);
			}
		}
		return aSelectedBars;
	};

	/**
	 * Already selected bars will be deselected and members of the selectedBars parameter which are part of the bars aggregation will be set to selected state.
	 *
	 * @param {sap.suite.ui.microchart.InteractiveBarChartBar | sap.suite.ui.microchart.InteractiveBarChartBar[]} selectedBars A bar element or an array of bars for which the status should be set to selected.
	 * @returns {sap.suite.ui.microchart.InteractiveBarChart} this to allow method chaining
	 * @public
	 */
	InteractiveBarChart.prototype.setSelectedBars = function(selectedBars) {
		var aBars = this.getAggregation("bars"),
			i, iIndex;
		this._deselectAllSelectedBars();
		if (!selectedBars) {
			return this;
		}
		if (selectedBars instanceof library.InteractiveBarChartBar) {
			selectedBars = [selectedBars];
		}
		if (jQuery.isArray(selectedBars)) {
			for (i = 0; i < selectedBars.length; i++) {
				iIndex = this.indexOfAggregation("bars", selectedBars[i]);
				if (iIndex >= 0) {
					aBars[iIndex].setProperty("selected", true, true);
				} else {
					jQuery.sap.log.warning("setSelectedBars method called with invalid InteractiveBarChartBar element");
				}
			}
		}
		this.invalidate();
		return this;
	};

	InteractiveBarChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		if (!sTooltip) { //Tooltip will be set by control
			sTooltip = this._createTooltipText();
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}


		return sTooltip;
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Looks for the class '.sapUiSizeCompact' on the control and its parents to determine whether to render cozy or compact density mode.
	 *
	 * @returns {boolean} True if class 'sapUiSizeCompact' was found, otherwise false.
	 * @private
	 */
	InteractiveBarChart.prototype._isCompact = function() {
		return jQuery("body").hasClass("sapUiSizeCompact") || this.$().is(".sapUiSizeCompact") || this.$().closest(".sapUiSizeCompact").length > 0;
	};

	/**
	 * Changes data for compact mode related to cozy (default) mode.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._setResponsivenessData = function() {
		if (this._bCompact) {
			this._iAreaHeightInteractiveMinValue = InteractiveBarChart.AREA_HEIGHT_INTERACTIVE_MINVALUE_COMPACT;
			this._iAreaHeightPaddingStage1 = InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE1_COMPACT;
			this._iAreaHeightPaddingStage2 = InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE2_COMPACT;
		} else {
			this._iAreaHeightInteractiveMinValue = InteractiveBarChart.AREA_HEIGHT_INTERACTIVE_MINVALUE;
			this._iAreaHeightPaddingStage1 = InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE1;
			this._iAreaHeightPaddingStage2 = InteractiveBarChart.AREA_HEIGHT_PADDING_STAGE2;
		}
	};

	/**
	 * Checks the current content density and invalidates the control if it is changed in order to trigger a re-rendering.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._checkContentDensity = function() {
		if (this.$().length > 0) {
			var bCompact = this._isCompact();
			if (bCompact !== this._bCompact) {
				this._bCompact = bCompact;
				this.invalidate();
			}
		}
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._adjustToParent = function() {
		var $this = this.$();
		if (this.data("_parentRenderingContext") && this.data("_parentRenderingContext") instanceof FlexBox) {
			// Subtracts two pixels, otherwise there's not enough space for the outline, and the chart won't be rendered properly
			var $Parent = this.data("_parentRenderingContext").$();
			var iParentWidth = $Parent.width() - 2;
			var iParentHeight = $Parent.height() - 2;
			$this.outerWidth(iParentWidth);
			$this.outerHeight(iParentHeight);
		}
	};

	/**
	 * Calculates the width of the bars.
	 * @returns {sap.suite.ui.microchart.InteractiveBarChart} this if min and max are invalid, otherwise undefined
	 * @private
	 */
	InteractiveBarChart.prototype._calcBarsWidth = function() {
		var $this = this.$(),
			$BarLabels = $this.find(".sapSuiteIBCBarLabel"),
			fDividerWidth = InteractiveBarChart.DIVIDER_WIDTH_IN_PX,
			fLabelAreaWidth = parseFloat(this.getLabelWidth()),
			fBarAreaWidth, fTotal,
			fBarActualNegativeSpaceInPercent, fBarActualPositiveSpaceInPercent,
			fLabelAreaWidthFullWidth, fLabelLeftPositionFullWidth,
			fValue, fEffectiveValue,
			$BarNegative, $BarPositive,
			bRTL = sap.ui.getCore().getConfiguration().getRTL();

		if (!this._bMinMaxValid) {
			return this;
		}
		if (this._bFullWidth) {
			fLabelAreaWidth = 100;
			fBarAreaWidth = 100;
		} else {
			fBarAreaWidth = 100 - fLabelAreaWidth;
		}

		fTotal = Math.abs(this._fMax - this._fMin);
		if (this._fMin >= 0 && this._fMax >= 0) {
			fBarActualNegativeSpaceInPercent = 0;
			fBarActualPositiveSpaceInPercent = 1;
		} else if (this._fMin < 0 && this._fMax < 0) {
			fBarActualNegativeSpaceInPercent = 1;
			fBarActualPositiveSpaceInPercent = 0;
		} else {
			fBarActualNegativeSpaceInPercent = Math.abs(this._fMin / fTotal);
			fBarActualPositiveSpaceInPercent = Math.abs(this._fMax / fTotal);
		}

		if (this._bFullWidth) {
			if (fBarActualPositiveSpaceInPercent >= fBarActualNegativeSpaceInPercent) {
				fLabelAreaWidthFullWidth = fBarActualPositiveSpaceInPercent * 100;
				fLabelLeftPositionFullWidth = fBarActualNegativeSpaceInPercent * 100;
			} else {
				fLabelAreaWidthFullWidth = fBarActualNegativeSpaceInPercent * 100;
				fLabelLeftPositionFullWidth = 0;
			}
			$BarLabels.css("width", fLabelAreaWidthFullWidth + "%");
			$BarLabels.css(bRTL ? "right" : "left", fLabelLeftPositionFullWidth + "%");
		} else {
			$BarLabels.css("width", fLabelAreaWidth + "%");
			$BarLabels.css(bRTL ? "right" : "left", "");
		}
		$this.find(".sapSuiteIBCBarWrapper").css("width", fBarAreaWidth + "%");

		if (fBarActualNegativeSpaceInPercent > 0) {
			$this.find(".sapSuiteIBCBarWrapperNegative").width("calc(" + fBarActualNegativeSpaceInPercent * 100 + "% - " + fDividerWidth + "px)");
		} else {
			$this.find(".sapSuiteIBCBarWrapperNegative").width("0%");
		}
		if (fBarActualPositiveSpaceInPercent > 0) {
			$this.find(".sapSuiteIBCBarWrapperPositive").width("calc(" + fBarActualPositiveSpaceInPercent * 100 + "% - " + fDividerWidth + "px)");
		} else {
			$this.find(".sapSuiteIBCBarWrapperPositive").width("0%");
		}

		for (var i = 0; i < this._iVisibleBars; i++) {
			fValue = this.getBars()[i].getValue();

			$BarNegative = this.$("bar-negative-" + i);
			$BarPositive = this.$("bar-positive-" + i);

			if (this.getBars()[i]._bNullValue || fValue === 0) {
				$BarPositive.add($BarNegative).css("min-width", 0);

			} else if (!this.getBars()[i]._bNullValue) {
				if (fValue > 0) { //positive value
					fEffectiveValue = Math.min(Math.max(fValue, this._fMin), this._fMax);

					$BarPositive.css({
						"width": this._calcPercent(fEffectiveValue, fTotal, Math.max(0, this._fMin), fBarActualPositiveSpaceInPercent),
						"min-width": 1
					});
					$BarNegative.css("min-width", 0);
				} else { //negative value
					fEffectiveValue = Math.max(Math.min(fValue, this._fMax), this._fMin);

					$BarNegative.css({
						"width": this._calcPercent(fEffectiveValue, fTotal, Math.min(0, this._fMax), fBarActualNegativeSpaceInPercent),
						"min-width": 1
					});
					$BarPositive.css("min-width", 0);
				}
			}
		}
	};

	/**
	 * Calculates the percentage from the total width needed for the positive or negative bars.
	 *
	 * @param {float} value The value of the bar.
	 * @param {float} total The full scale of values in the chart.
	 * @param {float} start The start value marking the beginning of the scale.
	 * @param {float} availableSpaceFactor The value of the available space for the bar as a value between 0 and 1 representing 0% - 100%.
	 * @returns {string} The percentage value of the bar's width
	 * @private
	 */
	InteractiveBarChart.prototype._calcPercent = function(value, total, start, availableSpaceFactor) {
		return Math.abs((value - start) / (total * availableSpaceFactor) * 100).toFixed(5) + "%";
	};

	/**
	 * Deselects all selected bars.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._deselectAllSelectedBars = function() {
		var aBars = this.getAggregation("bars"),
			iBarsCount = aBars.length, i;

		for (i = 0; i < iBarsCount; i++) {
			aBars[i].setProperty("selected", false, true);
		}
	};

	/**
	 * Toggles the selection state of the bar element.
	 *
	 * @param {int} index The index of the bar element
	 * @private
	 */
	InteractiveBarChart.prototype._toggleSelected = function(index) {
		var aBars = this.getAggregation("bars"),
			oBar = aBars[index];

		if (index < 0 || index >= aBars.length) {
			return;
		}
		var $InteractionArea = this.$("interactionArea-" + index);
		if (oBar.getSelected()) {
			$InteractionArea.removeClass("sapSuiteIBCBarSelected");
			oBar.setProperty("selected", false, true);
		} else {
			$InteractionArea.addClass("sapSuiteIBCBarSelected");
			oBar.setProperty("selected", true, true);
		}
		$InteractionArea.attr("aria-selected", oBar.getSelected());
		this.fireSelectionChanged({
			selectedBars: this.getSelectedBars(),
			bar: oBar,
			selected: oBar.getSelected()
		});
	};

	/**
	 * Sets the displayed value outside of the bar if there is not enough space in the bar.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._showValueOutsideBar = function() {
		var $this = this.$(),
			$BarValues, iValueShift, fBarValueWidthWithPadding,
			fBarPositiveWidth, fBarNegativeWidth,
			fBarWrapperPositiveOuterWidth, fBarWrapperNegativeOuterWidth,
			fBarWrapperPositiveWidth = this.$("bar-positive-0").parent().width(),
			fBarWrapperNegativeWidth = this.$("bar-negative-0").parent().width(),
			bRTL = sap.ui.getCore().getConfiguration().getRTL();

		$BarValues = $this.find(".sapSuiteIBCBarValue");
		if ($BarValues.length === 0) {
			return;
		}
		for (var i = 0; i < this._iVisibleBars; i++) {
			fBarValueWidthWithPadding = ($BarValues.eq(i).width() + InteractiveBarChart.BAR_VALUE_PADDING_LEFT_IN_PX + InteractiveBarChart.BAR_VALUE_PADDING_RIGHT_IN_PX);
			fBarPositiveWidth = this.$("bar-positive-" + i).width();
			fBarNegativeWidth = this.$("bar-negative-" + i).width();
			fBarWrapperPositiveOuterWidth = fBarWrapperPositiveWidth - fBarPositiveWidth;
			fBarWrapperNegativeOuterWidth = fBarWrapperNegativeWidth - fBarNegativeWidth;
			if (this.getBars()[i].getValue() >= 0 || (this.getBars()[i]._bNullValue && this._fMin + this._fMax >= 0)) {
				// align positive labels
				if (fBarValueWidthWithPadding > fBarPositiveWidth && fBarValueWidthWithPadding > fBarWrapperPositiveOuterWidth) {
					$BarValues.eq(i).css("visibility", "hidden");
				} else {
					$BarValues.eq(i).css("visibility", "inherit");
				}
				if (fBarValueWidthWithPadding > fBarPositiveWidth) {
					// bar value width plus margins don't fit into the bar
					iValueShift = (this.$("bar-positive-" + i).width() + InteractiveBarChart.BAR_VALUE_PADDING_LEFT_IN_PX) + "px";
					$BarValues.eq(i).addClass("sapSuiteIBCBarValueOutside");
				} else {
					iValueShift = "";
					$BarValues.eq(i).removeClass("sapSuiteIBCBarValueOutside");
				}
				if (bRTL) {
					$BarValues.eq(i).css({ "right": iValueShift });
				} else {
					$BarValues.eq(i).css({ "left": iValueShift });
				}
			} else {
				// align negative labels
				if (fBarValueWidthWithPadding > fBarNegativeWidth && fBarValueWidthWithPadding > fBarWrapperNegativeOuterWidth) {
					$BarValues.eq(i).css("visibility", "hidden");
				} else {
					$BarValues.eq(i).css("visibility", "inherit");
				}
				if (fBarValueWidthWithPadding > fBarNegativeWidth) {
					//bar value width plus margins don't fit into the bar
					iValueShift = (this.$("bar-negative-" + i).width() + InteractiveBarChart.BAR_VALUE_PADDING_RIGHT_IN_PX) + "px";
					$BarValues.eq(i).addClass("sapSuiteIBCBarValueOutside");
				} else {
					iValueShift = "";
					$BarValues.eq(i).removeClass("sapSuiteIBCBarValueOutside");
				}

				if (bRTL) {
					$BarValues.eq(i).css({ "left": iValueShift });
				} else {
					$BarValues.eq(i).css({ "right": iValueShift });
				}
			}
		}
	};

	/**
	 * Checks if min and max properties contain valid data.
	 *
	 * @returns {boolean} flag for valid min / max data
	 * @private
	 */
	InteractiveBarChart.prototype._checkIfMinMaxValid = function() {
		if (this._fMin > this._fMax) {
			jQuery.sap.log.warning("Min value for InteractiveBarChart is larger than Max value.");
			return false;
		}
		return true;
	};

	/**
	 * Sets internal values for Min and Max scale in case min, max or both are omitted
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._setInternalMinMax = function() {
		// loop over available bars to retrieve lowest and highest value
		var fMinBarValue = null, fMaxBarValue = null, fBarValue, oBars = this.getBars(),
			iRenderedBars = Math.min(this.getDisplayedBars(), oBars.length);
		for (var i = 0; i < iRenderedBars; i++) {
			if (!oBars[i]._bNullValue) {
				fBarValue = oBars[i].getValue();
				fMinBarValue = Math.min(fMinBarValue, fBarValue);
				fMaxBarValue = Math.max(fMaxBarValue, fBarValue);
			}
		}
		// initialize internal min, max with set properties and overwrite them if they are not set.
		this._fMin = this.getMin();
		this._fMax = this.getMax();
		// overwrite min and max with observed min/max if they are not set explicitly
		if (!jQuery.isNumeric(this._fMin) || !jQuery.isNumeric(this._fMax)) {
			// only positive values
			if (fMinBarValue >= 0 && fMaxBarValue >= 0) {
				// no min set translates to min being zero regardless of actual minimal value
				if (!jQuery.isNumeric(this._fMin)) {
					this._fMin = 0;
				}
				// no max set translates to max being determined by maximum bar value
				if (!jQuery.isNumeric(this._fMax)) {
					this._fMax = fMaxBarValue;
				}
			// only negative values
			} else if (fMinBarValue < 0 && fMaxBarValue < 0) {
				// no min set translates to min being determined by minimum bar value
				if (!jQuery.isNumeric(this._fMin)) {
					this._fMin = fMinBarValue;
				}
				// no max set translates to max being zero regardless of actual maximum value
				if (!jQuery.isNumeric(this._fMax)) {
					this._fMax = 0;
				}
			// both positive and negative values
			} else {
				// no min set translates to min being determined by minimum bar value
				if (!jQuery.isNumeric(this._fMin)) {
					this._fMin = fMinBarValue;
				}
				// no max set translates to max being determined by maximum bar value
				if (!jQuery.isNumeric(this._fMax)) {
					this._fMax = fMaxBarValue;
				}
			}
		}
	};

	InteractiveBarChart.prototype.validateProperty = function(propertyName, value) {
		if (propertyName === "labelWidth" && (value !== null || value !== undefined)) {
			var fValue = parseFloat(value);
			if (fValue < 0 || fValue > 100) {
				jQuery.sap.log.warning("LabelWidth for InteractiveBarChart is not between 0 and 100.");
				value = null;
			}
		}
		return Control.prototype.validateProperty.apply(this, [propertyName, value]);
	};

	/**
	 * Adds and removes the tabindex between elements to support keyboard navigation.
	 *
	 * @param {int} oldIndex which is the bar index whose tabindex is 0 previously.
	 * @param {int} newIndex which is the bar index whose tabindex should be set to 0 this time.
	 * @param {jQuery} focusables all the elements who can have tabindex attribute.
	 * @private
	 */
	InteractiveBarChart.prototype._switchTabindex = function(oldIndex, newIndex, focusables) {
		if (oldIndex >= 0 && oldIndex < focusables.length && newIndex >= 0 && newIndex < focusables.length) {
			focusables.eq(oldIndex).removeAttr("tabindex");
			focusables.eq(newIndex).attr("tabindex", "0");
			focusables.eq(newIndex).focus();
		}
	};

	/**
	 * Verifies if the chart is enabled for user actions or not.
	 *
	 * @returns {boolean} True if the chart is enabled for user actions, otherwise false.
	 * @private
	 */
	InteractiveBarChart.prototype._isChartEnabled = function() {
		return this.getSelectionEnabled() && this._bInteractiveMode;
	};

	/**
	 * Resizes the chart vertically. All use cases depend on the area height.
	 * Assuming that all the CSS files have already been loaded and they are available.
	 *
	 * @param {object} flags Some flags used for defining the visibility of specific chart elements
	 * @private
	 */
	InteractiveBarChart.prototype._resizeVertically = function(flags) {
		var iAreaHeight, iMargin, iBarHeight, $this = this.$(), bSwitchMode = false,
			$SelectionAreas = $this.find(".sapSuiteIBCBarInteractionArea"),
			iCurrentControlHeight = $this.height(), iInteractiveModeMarginDelta = 0,
			iVisibleBars = this._iVisibleBars;

		// margin
		if (this._bInteractiveMode) {
			iInteractiveModeMarginDelta = 1;
		}
		iMargin = parseInt($SelectionAreas.css("margin-bottom"), 10) + parseInt($SelectionAreas.css("margin-top"), 10);

		// selection area height
		iAreaHeight = ((iCurrentControlHeight - ((iMargin + 2 * InteractiveBarChart.SELECTION_AREA_BORDER_IN_PX) * iVisibleBars)) / iVisibleBars);

		// non-interactive mode
		if (iAreaHeight + iInteractiveModeMarginDelta < this._iAreaHeightInteractiveMinValue) {
			if (this._bInteractiveMode) {
				this._bInteractiveMode = false;
				bSwitchMode = true;
				$this.addClass("sapSuiteIBCNonInteractive");
				// set the focus area
				if (this.getSelectionEnabled()) {
					var $ActiveArea = this.$().find(".sapSuiteIBCBarInteractionArea[tabindex='0']");
					this._iActiveElement = $SelectionAreas.index($ActiveArea);
					$ActiveArea.removeAttr("tabindex");
					this.$().attr("tabindex", "0");
				}
				this.$().attr({
					"role": "button",
					"aria-multiselectable": "false",
					"aria-disabled": !this._isChartEnabled()
				});
			}
		} else if (!this._bInteractiveMode) {
			this._bInteractiveMode = true;
			bSwitchMode = true;
			$this.removeClass("sapSuiteIBCNonInteractive");
			// set the focus area
			if (this.getSelectionEnabled()) {
				this.$().removeAttr("tabindex");
				if (!this._iActiveElement || this._iActiveElement < 0) {
					this._iActiveElement = 0;
				}
				$SelectionAreas.eq(this._iActiveElement).attr("tabindex", "0");
			}
			this.$().attr({
				"role": "listbox",
				"aria-multiselectable": "true",
				"aria-disabled": !this._isChartEnabled()
			});
		}

		// set the tooltip in case of mode switch
		if (bSwitchMode) {
			if (this._isChartEnabled()) {
				$this.removeAttr("title");
				this._addInteractionAreaTooltip($SelectionAreas);
			} else {
				$SelectionAreas.removeAttr("title");
				$this.attr("title", this.getTooltip_AsString());
			}
		}

		// adjust the bar height
		$SelectionAreas.height(iAreaHeight);

		// adjust the paddings
		if (iAreaHeight <= this._iAreaHeightPaddingStage2) {
			$this.addClass("sapSuiteIBCStage2");
		} else {
			$this.removeClass("sapSuiteIBCStage2");
			if (iAreaHeight <= this._iAreaHeightPaddingStage1) {
				$this.addClass("sapSuiteIBCStage1");
			} else {
				$this.removeClass("sapSuiteIBCStage1");
			}
		}


		// adjust the font-size for value and label (based on exact dimension in float; if rounded, it will flicker)
		var $Bars = this.$().find(".sapSuiteIBCBar");
		if ($Bars.length > 0) {
			iBarHeight = $Bars[0].getBoundingClientRect().height;
		}
		if (iBarHeight <= InteractiveBarChart.BAR_HEIGHT_FONT_SMALLER) {
			$this.addClass("sapSuiteIBCSmallFont");
		}

		// hide the labels inside the bars
		if (iBarHeight <= InteractiveBarChart.BAR_HEIGHT_LABEL_HIDE) {
			$this.find(".sapSuiteIBCBarValue").css("visibility", "hidden");
			flags.labelsVisible = false;
		} else {
			$this.find(".sapSuiteIBCBarValue").css("visibility", "inherit");
		}

		// hide the chart
		if (iAreaHeight < InteractiveBarChart.AREA_HEIGHT_MINVALUE) {
			$this.css("visibility", "hidden");
			flags.labelsVisible = false;
			flags.chartVisible = false;
		}
	};

	/**
	 * Resizes the chart horizontally. The use cases depend on the labels' area width and truncation.
	 * Assuming that all the CSS files have already been loaded and they are available.
	 *
	 * @param {object} flags Some flags used for defining the visibility of specific chart elements
	 * @private
	 */
	InteractiveBarChart.prototype._resizeHorizontally = function(flags) {
		if (!flags.chartVisible) {
			return;
		}

		var $this = this.$(),
			$SelectionAreas = $this.find(".sapSuiteIBCBarInteractionArea"),
			$BarLabel = $this.find(".sapSuiteIBCBarLabel"),
			iBarLabelWidth = parseFloat(this.getLabelWidth()) / 100 * $SelectionAreas.eq(0).width(),
			iBarLabelPaddingDelta = 0,
			iChartWidth = $this.width(), iBarHeight,
			bIsEllipsisActive = false;

		// font-size smaller
		if (iChartWidth < InteractiveBarChart.CHART_WIDTH_FONT_SMALLER) {
			$this.addClass("sapSuiteIBCSmallFont");
			// iBarLabelWidth to be recalculated because of possible width's changes related to font change
			iBarLabelWidth = parseFloat(this.getLabelWidth()) / 100 * $SelectionAreas.eq(0).width();
		}
		// account for changes in left padding of interactionarea present in fullwidth mode before calculating elipsis
		if (this._bFullWidth) {
			iBarLabelPaddingDelta = 6;
		}
		// verify if at least one label would be truncated if LabelArea was its original size
		for (var i = 0; i < $BarLabel.length; i++) {
			// check if label ellipsis would be active for the given labelWidth when fullWidth is not active
			$BarLabel.eq(i).css("width", iBarLabelWidth + "px");
			if ($BarLabel.eq(i).children(".sapSuiteIBCBarLabelText").prop("clientWidth") < $BarLabel.eq(i).children(".sapSuiteIBCBarLabelText").prop("scrollWidth") - iBarLabelPaddingDelta) {
				bIsEllipsisActive = true;
			}
			$BarLabel.eq(i).css("width", "100%");
		}

		// labels above
		if ( iBarLabelWidth < InteractiveBarChart.LABEL_WIDTH_MINVALUE && bIsEllipsisActive) {
			$this.addClass("sapSuiteIBCFullWidth");
			this._bFullWidth = true;
			this._calcBarsWidth();
		} else {
			$this.removeClass("sapSuiteIBCFullWidth");
			this._bFullWidth = false;
			this._calcBarsWidth();
		}

		// hide the chart
		var $Bars = this.$().find(".sapSuiteIBCBar");
		if ($Bars.length > 0) {
			iBarHeight = $Bars[0].getBoundingClientRect().height;
		}
		if (iChartWidth < InteractiveBarChart.CHART_WIDTH_MINVALUE ||
				iBarHeight < InteractiveBarChart.BAR_HEIGHT_MINVALUE) {
			$this.css("visibility", "hidden");
			flags.labelsVisible = false;
			flags.chartVisible = false;
		} else if (iBarHeight <= InteractiveBarChart.BAR_HEIGHT_LABEL_HIDE) {
			$this.find(".sapSuiteIBCBarValue").css("visibility", "hidden");
			flags.labelsVisible = false;
		}
	};

	/**
	 * Handles the responsiveness.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._onResize = function() {
		var $this = this.$(),
			flags = {chartVisible : true, labelsVisible: true};

		// restore to normal state (needed to perform further processings)
		$this.css("visibility", "visible");
		$this.removeClass("sapSuiteIBCSmallFont");

		// responsiveness logic
		this._resizeVertically(flags);
		this._resizeHorizontally(flags);

		// labels
		if (flags.labelsVisible) {
			this._showValueOutsideBar();
		}
	};

	/**
	 * Deregisters all handlers.
	 *
	 * @private
	 */
	InteractiveBarChart.prototype._deregisterResizeHandler = function() {
		if (this._sResizeHandlerId) {
			ResizeHandler.deregister(this._sResizeHandlerId);
			this._sResizeHandlerId = null;
		}
	};

	/**
	 * Adds a tooltip for every interaction area
	 *
	 * @param {jQuery} selectionAreas All valid selection areas inside the chart
	 * @private
	 */
	InteractiveBarChart.prototype._addInteractionAreaTooltip = function(selectionAreas) {
		var oBars = this.getBars(),
			$Element, iSelectionIndex;
		selectionAreas.each(function(index, element) {
			$Element = jQuery(element);
			iSelectionIndex = parseInt($Element.attr("data-sap-ui-ibc-selection-index"), 10);
			$Element.attr("title", oBars[iSelectionIndex].getTooltip_AsString());
		});
	};

	/**
	 * Creates tooltip value for the chart.
	 * If tooltip was set to an empty string (using whitespaces) by the application or the tooltip was not set (null/undefined), the tooltip is generated by the control.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveBarChart.prototype._createTooltipText = function() {
		var bIsFirst = true, oBars = this.getBars(), sBarTooltip,
			sTooltipText = "";
		for (var i = 0; i < this._iVisibleBars; i++) {
			// concatenate individual tooltips
			sBarTooltip = oBars[i]._getBarTooltip(this._bUseSemanticTooltip);
			if (sBarTooltip) {
				sTooltipText += (bIsFirst ? "" : "\n") + sBarTooltip;
				bIsFirst = false;
			}
		}

		return sTooltipText;
	};

	return InteractiveBarChart;
});

}; // end of sap/suite/ui/microchart/InteractiveBarChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveBarChartBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveBarChartBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveBarChartBar",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for the bar element of the InteractiveBarChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class A bar element for the InteractiveBarChart.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveBarChartBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var InteractiveBarChartBar = Element.extend("sap.suite.ui.microchart.InteractiveBarChartBar", /** @lends sap.suite.ui.microchart.InteractiveBarChartBar.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The label for the chart bar.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines if the chart bar is selected.
				 */
				selected: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				},

				/**
				 * The value label to be displayed on the bar in the chart.
				 */
				displayedValue: {
					type: "string",
					group: "Data",
					defaultValue: null
				},

				/**
				 * Determines the color of the bar.
				 * @since 1.50.0
				 */
				color: {
					type: "sap.m.ValueColor",
					group: "Misc",
					defaultValue: "Neutral"
				},

				/**
				 * The numeric value of the chart bar to be displayed on the bar.
				 */
				value: {
					type: "float",
					group: "Data"
				}
			}
		}
	});

	InteractiveBarChartBar.prototype.init = function() {
		this._bNullValue = true;
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
	};

	InteractiveBarChartBar.prototype.validateProperty = function(sPropertyName, oValue) {
		if (sPropertyName === "value" && (oValue === null || oValue === undefined || isNaN(oValue))) {
			this._bNullValue = true;
		} else if (sPropertyName === "value") {
			this._bNullValue = false;
		}
		return Element.prototype.validateProperty.apply(this, arguments);
	};

	InteractiveBarChartBar.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		this._bCustomTooltip = true;
		if (!sTooltip) { // tooltip will be set by the control
			sTooltip = this._createTooltipText();
			this._bCustomTooltip = false;
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Creates internal tooltip value for the bar.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveBarChartBar.prototype._createTooltipText = function() {
		var sTooltipText = "",
			sLabel = this.getLabel(),
			bIncludeColor = this.getParent() && this.getParent()._bUseSemanticTooltip,
			sColor, sLocalizedColor;
		if (sLabel && sLabel.length > 0) {
			sTooltipText = sLabel + ":\n";
		}
		if (this._bNullValue) {
			sTooltipText += this._oRb.getText("INTERACTIVECHART_NA");
		} else {
			sTooltipText += this.getValue();
		}
		if (bIncludeColor) {
			sColor = this.getColor();
			sLocalizedColor = this._oRb.getText(("SEMANTIC_COLOR_" + sColor).toUpperCase());
			sTooltipText += " " + sLocalizedColor;
		}
		return sTooltipText;
	};

	/**
	 * Returns the bar tooltip to be used for creating the chart tooltip text.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveBarChartBar.prototype._getBarTooltip = function() {
		var sTooltip = this.getTooltip_AsString();
		if (sTooltip && !this._bCustomTooltip) {
			sTooltip = sTooltip.replace("\n", " ");
		}

		return sTooltip;
	};

	return InteractiveBarChartBar;
});

}; // end of sap/suite/ui/microchart/InteractiveBarChartBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveDonutChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveDonutChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveDonutChart",[ "jquery.sap.global", "./library", "sap/m/library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "sap/ui/Device", "sap/m/FlexBox" ],
	function(jQuery, library, MobileLibrary, Control, ResizeHandler, Device, FlexBox) {
	"use strict";

	/**
	 * Constructor for InteractiveDonutChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The InteractiveDonutChart control belongs to a chart control group in the MicroChart library with a number of interactive features. These interactive features provide more information on a chart value.
	 * For example, by selecting a segment you can get more details on the displayed value.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveDonutChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var InteractiveDonutChart = Control.extend("sap.suite.ui.microchart.InteractiveDonutChart", /** @lends sap.suite.ui.microchart.InteractiveDonutChart.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * Number of segments to be displayed.
				 */
				displayedSegments: { type: "int", group: "Appearance", defaultValue: 3 },
				/**
				 * Switch which enables or disables selection.
				 */
				selectionEnabled: { type: "boolean", group: "Behavior", defaultValue: true }
			},
			defaultAggregation: "segments",
			aggregations: {
				/**
				 * Aggregation which contains all segments.
				 */
				segments: {
					type: "sap.suite.ui.microchart.InteractiveDonutChartSegment",
					multiple: true,
					bindable: "bindable"
				}
			},
			events: {
				/**
				 * Event is fired when a user has selected or deselected a segment or a legend entry.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * Contains all selected segments.
						 */
						selectedSegments: { type: "sap.suite.ui.microchart.InteractiveDonutChartSegment[]" },
						/**
						 * The segment whose selection state has changed.
						 */
						segment: { type: "sap.suite.ui.microchart.InteractiveDonutChartSegment" },
						/**
						 * Indicates whether the segment "segment" is selected or not.
						 */
						selected: { type: "boolean" }
					}
				},
				/**
				 * The event is fired when the user presses the chart while its segments are not selectable in non-interactive mode. This is decided internally, depending on the size of the chart.
				 */
				press: {}
			},
			associations: {
				/**
				 * Association to controls which label this control (see WAI-ARIA attribute aria-labelledby).
				 */
				ariaLabelledBy: { type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy" }
			}
		}
	});

	/* =========================================================== */
	/* Variables and Constants */
	/* =========================================================== */

	//legend segment constants
	InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED = "sapSuiteIDCLegendSegmentSelected";
	InteractiveDonutChart.SEGMENT_CSSCLASS_HIGHLIGHT = "sapSuiteIDCLegendSegmentHover";
	InteractiveDonutChart.CHART_SEGMENT_LABEL_MAXLENGTH = 7;

	//chart segment constants
	InteractiveDonutChart.CHART_SEGMENT = {
		CSSCLASS: "sapSuiteIDCChartSegment",
		CSSCLASS_HIGHLIGHT: "sapSuiteIDCChartSegmentHighlight",
		CSSCLASS_SELECTED: "sapSuiteIDCChartSegmentSelected"
	};
	//chart segment ghost constants
	InteractiveDonutChart.CHART_SEGMENT_GHOST = {
		CSSCLASS: "sapSuiteIDCChartSegmentGhost",
		CSSCLASS_HIGHLIGHT: "sapSuiteIDCChartSegmentGhostHighlight",
		CSSCLASS_SELECTED: "sapSuiteIDCChartSegmentGhostSelected"
	};
	// Responsiveness (cozy vs compact)
	InteractiveDonutChart.AREA_HEIGHT_INTERACTIVE_MINVALUE = 48;
	InteractiveDonutChart.AREA_HEIGHT_INTERACTIVE_MINVALUE_COMPACT = 32;
	InteractiveDonutChart.AREA_HEIGHT_SMALLFONT = 36;
	InteractiveDonutChart.AREA_HEIGHT_SMALLFONT_COMPACT = 32;
	// Responsiveness (cozy and compact)
	InteractiveDonutChart.AREA_HEIGHT_MINVALUE = 18;
	InteractiveDonutChart.LEGEND_HEIGHT_PADDING = 6; // the legend top and bottom padding
	InteractiveDonutChart.CHART_HEIGHT_MINVALUE = 110;
	InteractiveDonutChart.CHART_WIDTH_MINVALUE = 130;
	InteractiveDonutChart.CHART_WIDTH_HIDEDONUT_MINVALUE = 225;
	InteractiveDonutChart.CHART_WIDTH_LEGENDPADDING_MINVALUE = 300; // corresponds to legend width of 180px
	InteractiveDonutChart.CHART_WIDTH_FULLWIDTH_SMALLFONT_MINVALUE = 180;

	/* =========================================================== */
	/* API events */
	/* =========================================================== */
	/**
	 * Event handler for InteractiveDonutChart click event.
	 *
	 * Calls the method to update the selection change and fires selection changes event.
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onclick = function(oEvent) {
		// no click for disabled mode
		if (!this.getSelectionEnabled()) {
			return;
		}
		if (this._bInteractiveMode) {
			var $Target = jQuery(oEvent.target),
				iIndex = $Target.data("sap-ui-idc-selection-index"),
				aSegments = this.getAggregation("segments"),
				$Focusables = this.$().find(".sapSuiteIDCLegendSegment"),
				iHasFocus;

			if (!(iIndex >= 0)) {
				iIndex = $Target.closest(".sapSuiteIDCLegendSegment").data("sap-ui-idc-selection-index");
			}
			if (isNaN(iIndex) || iIndex < 0 || iIndex >= aSegments.length) {
				return;
			}
			this._toggleSelected(iIndex);

			//find out which segment has now tabindex = 0
			iHasFocus = $Focusables.index(this.$().find(".sapSuiteIDCLegendSegment[tabindex='0']"));
			this._switchTabindex(iHasFocus, iIndex, $Focusables);
		} else {
			this.firePress();
			if (Device.browser.msie) {
				this.$().focus();
				oEvent.preventDefault();
			}
		}
	};

	/**
	 * Handler for up arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapup = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteIDCLegendSegment");
		var iIndex = $Focusables.index(oEvent.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex - 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for down arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapdown = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteIDCLegendSegment");
		var iIndex = $Focusables.index(oEvent.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex + 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for home button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsaphome = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteIDCLegendSegment");
		var iIndex = $Focusables.index(oEvent.target);
		if (iIndex !== 0 && $Focusables.length > 0) {
			this._switchTabindex(iIndex, 0, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for end button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapend = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteIDCLegendSegment");
		var iIndex = $Focusables.index(oEvent.target);
		var iLength = $Focusables.length;
		if (iIndex !== iLength - 1 && iLength > 0) {
			this._switchTabindex(iIndex, iLength - 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for enter button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapenter = function(oEvent) {
		if (this._bInteractiveMode) {
			var iIndex = this.$().find(".sapSuiteIDCLegendSegment").index(oEvent.target);
			if (iIndex !== -1) {
				this._toggleSelected(iIndex);
			}
			oEvent.preventDefault();
			oEvent.stopImmediatePropagation();
		} else {
			this.firePress();
		}
	};

	/**
	 * Handler for left arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapleft = InteractiveDonutChart.prototype.onsapup;

	/**
	 * Handler for right arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapright = InteractiveDonutChart.prototype.onsapdown;

	/**
	 * Handler for space button event
	 *
	 * @param {sap.ui.base.Event} oEvent Event which was fired
	 */
	InteractiveDonutChart.prototype.onsapspace = InteractiveDonutChart.prototype.onsapenter;

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */

	InteractiveDonutChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		if (!sTooltip) { // tooltip will be set by the control
			sTooltip = this._createTooltipText();
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};
	/**
	 * Gets all selected segments or an empty array if there is no segment selected yet
	 *
	 * @returns {sap.suite.ui.microchart.InteractiveDonutChartSegment[]} All selected segments
	 * @public
	 */
	InteractiveDonutChart.prototype.getSelectedSegments = function() {
		var aSegments, aSelectedSegments;

		aSegments = this.getAggregation("segments");
		aSelectedSegments = [];
		for (var i = 0; i < aSegments.length; i++) {
			if (aSegments[i].getSelected()) {
				aSelectedSegments.push(aSegments[i]);
			}
		}

		return aSelectedSegments;
	};

	/**
	 * Already selected segments will be unselected and members of selectedSegments attribute which are part of the segments aggregation will be set to selected state.
	 *
	 * @param {sap.suite.ui.microchart.InteractiveDonutChartSegment | sap.suite.ui.microchart.InteractiveDonutChartSegment[]} selectedSegments A segment element or an array of segments for which the status should be set to selected
	 * @returns {sap.suite.ui.microchart.InteractiveDonutChart} The current object in order to allow method chaining
	 * @public
	 */
	InteractiveDonutChart.prototype.setSelectedSegments = function(selectedSegments) {
		var aSegments, iIndex, iSelectedSegments;

		aSegments = this.getAggregation("segments");
		this._deselectAllSelectedSegments();
		if (!selectedSegments) {
			return this;
		}

		//function is overloaded: selectedSegments can be an array or a single instance
		if (selectedSegments instanceof library.InteractiveDonutChartSegment) {
			selectedSegments = [ selectedSegments ];
		}

		if (jQuery.isArray(selectedSegments)) {
			iSelectedSegments = selectedSegments.length;
			for (var i = 0; i < iSelectedSegments; i++) {
				iIndex = this.indexOfAggregation("segments", selectedSegments[i]);
				if (iIndex >= 0 && aSegments[iIndex]) {
					aSegments[iIndex].setProperty("selected", true, true);
				} else {
					jQuery.sap.log.warning("Method setSelectedSegments called with invalid InteractiveDonutChartSegment element");
				}
			}
		}
		this.invalidate();

		return this;
	};

	/* =========================================================== */
	/* Protected methods */
	/* =========================================================== */
	InteractiveDonutChart.prototype.init = function() {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");

		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	InteractiveDonutChart.prototype.onBeforeRendering = function() {
		this._bCompact = this._isCompact();
		this._bInteractiveMode = true;

		var aSegments = this.getSegments();
		// visible segments are determined by the lower limit of displayedSegments and actual segments present in the aggregation segments
		this._iVisibleSegments = Math.min(this.getDisplayedSegments(), aSegments.length);

		// set the data needed for responsiveness
		this._setResponsivenessData();
		var $Segments = this.$().find(".sapSuiteIDCChartSegment, .sapSuiteIDCLegendSegment, .sapSuiteIDCChartSegmentGhost");

		//remove all event handlers
		$Segments.off();

		if (!this.data("_parentRenderingContext") && jQuery.isFunction(this.getParent)) {
			this.data("_parentRenderingContext", this.getParent());
		}

		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);

		this._bSemanticTooltip = false;
		for (var i = 0; i < this._iVisibleSegments; i++) {
			if (aSegments[i].getColor() !== MobileLibrary.ValueColor.Neutral) {
				this._bSemanticTooltip = true;
				break;
			}
		}
	};

	InteractiveDonutChart.prototype.onAfterRendering = function() {
		this._adjustToParent(this.$());
		library._checkControlIsVisible(this, this._onControlIsVisible);
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._onControlIsVisible = function() {
		if (this._bInteractiveMode) {
			this._sResizeHandlerId = ResizeHandler.register(this, this._onResize.bind(this));
			// attach an interval timer in order to check the control's density mode and invalidate on change
			sap.ui.getCore().attachIntervalTimer(this._checkContentDensity, this);
			this._onResize();
			if (Device.system.desktop) {
				this._attachHoverHandlers();
			}
		}
	};

	InteractiveDonutChart.prototype.exit = function() {
		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Handler for the core's init event. In order for the control to be rendered only if all themes
	 * are loaded and everything is properly initialized, we attach a theme check in here.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart is not being rendered until the theme was applied.
	 * If the theme is applied, rendering starts by the control itself.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	/**
	 * Deselects all selected segments.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._deselectAllSelectedSegments = function() {
		var aSegments = this.getAggregation("segments");
		for (var i = 0; i < aSegments.length; i++) {
			if (aSegments[i].getSelected()) {
				aSegments[i].setProperty("selected", false, true);
			}
		}
	};

	/**
	 * Attaches hover handling functions to donut segments and legend entries.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._attachHoverHandlers = function() {
		var that = this,
			$Segments = this.$().find(".sapSuiteIDCChartSegment, .sapSuiteIDCLegendSegment, .sapSuiteIDCChartSegmentGhost");

		$Segments.on({
			mousemove: function() {
				that._handleHoverSync(jQuery(this).data("sap-ui-idc-selection-index"));
			},
			mouseleave: function() {
				that._handleHoverSync(jQuery(this).data("sap-ui-idc-selection-index"), true);
			}
		});
	};

	/**
	 * Executes jQuery class assignments based on the current segment's state and mousein/mouseout interaction flag.
	 *
	 * @param {int} index The index of the legend item or donut segment
	 * @param {boolean} out Indicated whether the mouse has left or entered the segment
	 * @private
	 */
	InteractiveDonutChart.prototype._handleHoverSync = function(index, out) {
		//show segment selection ghost
		if (this._bInteractiveMode) {
			var aSegments = this.getAggregation("segments"),
				bSelected = aSegments[index].getSelected();

			this._setSegmentInteractionState(InteractiveDonutChart.CHART_SEGMENT, index, bSelected, out);
			this._setSegmentInteractionState(InteractiveDonutChart.CHART_SEGMENT_GHOST, index, bSelected, out);
			this._setLegendEntryInteractionState(index, bSelected, out);
		}
	};

	/**
	 * Sets the interaction state of a particular segment based on parameters.
	 *
	 * @param {Object} segment The segment to have interaction classes assigned
	 * @param {int} index The segment to have interaction classes assigned
	 * @param {boolean} selected Whether the segment is selected or not
	 * @param {boolean} out Whether the mouse has left or entered the segment
	 * @private
	 */
	InteractiveDonutChart.prototype._setSegmentInteractionState = function(segment, index, selected, out) {
		var $Segment = this.$().find("." + segment.CSSCLASS + "[data-sap-ui-idc-selection-index='" + index + "']");

		$Segment.removeClass(segment.CSSCLASS_SELECTED);
		$Segment.removeClass(segment.CSSCLASS_HIGHLIGHT);

		if (!out) { //mouse-in
			$Segment.addClass(segment.CSSCLASS_HIGHLIGHT);
		}
		if (selected) {
			$Segment.addClass(segment.CSSCLASS_SELECTED);
		}
	};

	/**
	 * Sets the interaction state of a particular legend entry based on parameters.
	 *
	 * @param {int} index The index of the legend entry to have interaction classes assigned
	 * @param {boolean} selected Whether the entry is selected or not
	 * @param {boolean} out Whether the mouse has left or entered the legend entry
	 * @private
	 */
	InteractiveDonutChart.prototype._setLegendEntryInteractionState = function(index, selected, out) {
		var $Entry = this.$().find(".sapSuiteIDCLegendSegment[data-sap-ui-idc-selection-index='" + index + "']");
		$Entry.removeClass(InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED);
		$Entry.removeClass(InteractiveDonutChart.SEGMENT_CSSCLASS_HIGHLIGHT);

		if (!out) { //mouse-in
			$Entry.addClass(InteractiveDonutChart.SEGMENT_CSSCLASS_HIGHLIGHT);
		}
		if (selected) {
			$Entry.addClass(InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED);
		}
	};

	/**
	 * Switches the mode from interactive to non-interactive depending on the logic behind
	 *
	 * @param {int} areaHeight The current area selection width
	 * @private
	 */
	InteractiveDonutChart.prototype._switchModeInteractive = function(areaHeight) {
		var $this = this.$(), bSwitchMode = false;
		if (areaHeight < this._iAreaHeightInteractiveMinValue) {
			bSwitchMode = true;
			if (this._bInteractiveMode) {
				this._bInteractiveMode = false;
				$this.addClass("sapSuiteIDCNonInteractive");
				// set the focus area
				if (this.getSelectionEnabled()) {
					var $ActiveArea = $this.find(".sapSuiteIDCLegendSegment[tabindex='0']");
					this._iActiveElement = $this.find(".sapSuiteIDCLegendSegment").index($ActiveArea);
					$ActiveArea.removeAttr("tabindex");
					$this.attr("tabindex", "0");
				}
				$this.attr({
					"role": "button",
					"aria-multiselectable": "false",
					"aria-disabled": !this._isChartEnabled()
				});
			}
		} else if (!this._bInteractiveMode) {
			bSwitchMode = true;
			this._bInteractiveMode = true;
			$this.removeClass("sapSuiteIDCNonInteractive");
			// set the focus area
			if (this.getSelectionEnabled()) {
				$this.removeAttr("tabindex");
				if (!this._iActiveElement || this._iActiveElement < 0) {
					this._iActiveElement = 0;
				}
				$this.find(".sapSuiteIDCLegendSegment").eq(this._iActiveElement).attr("tabindex", "0");
			}
			$this.attr({
				"role": "listbox",
				"aria-multiselectable": "true",
				"aria-disabled": !this._isChartEnabled()
			});
		}
		//set the tooltip in case of mode switch
		if (bSwitchMode) {
			if (this._isChartEnabled()) {
				$this.removeAttr("title");
				this._addInteractionAreaTooltip();
			} else {
				// remove tooltip from the svg segments
				$this.find(".sapSuiteIDCChartSegment title, .sapSuiteIDCChartSegmentGhost title").remove();
				// remove tooltip from the legend
				$this.find(".sapSuiteIDCLegendSegment").removeAttr("title");
				$this.attr("title", this.getTooltip_AsString());
			}
		}
	};

	/**
	 * Adds a tooltip for every interaction area
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._addInteractionAreaTooltip = function() {
		// add tooltip for svg segments
		var $Title,
			$Element,
			iSelectionIndex,
			$this = this.$(),
			aSegments = this.getSegments();

		$this.find(".sapSuiteIDCChartSegment, .sapSuiteIDCChartSegmentGhost").each(function(index, element) {
			$Element = jQuery(element);
			iSelectionIndex = parseInt($Element.attr("data-sap-ui-idc-selection-index"), 10);
			// create virtual dom for retrieval of encoded text.
			$Title = jQuery("<div/>").text(aSegments[iSelectionIndex].getTooltip_AsString());
			$Element.html("<title>" + $Title.getEncodedText() + "</title>");
		});

		// add tooltip for legend
		$this.find(".sapSuiteIDCLegendSegment").each(function(index, element) {
			$Element = jQuery(element);
			iSelectionIndex = parseInt($Element.attr("data-sap-ui-idc-selection-index"), 10);
			$Element.attr("title", aSegments[iSelectionIndex].getTooltip_AsString());
		});
	};

	/**
	 * Handles the responsiveness.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._onResize = function() {
		var iInteractionAreaHeight, iInteractionAreaPadding,
			$this = this.$(),
			$InteractionArea = $this.find(".sapSuiteIDCLegendSegment"),
			$DonutContainer = $this.find(".sapSuiteIDCChart"),
			iContainerHorizontalPadding = parseInt($DonutContainer.css("padding-right"), 10) + parseInt($DonutContainer.css("padding-left"), 10),
			iCurrentControlHeight = $this.height(),
			iCurrentControlWidth = $this.width();

		// Interaction area height
		if (this._bInteractiveMode) {
			iInteractionAreaPadding = 2;
		} else {
			iInteractionAreaPadding = 1;
		}
		iInteractionAreaHeight = ((iCurrentControlHeight - InteractiveDonutChart.LEGEND_HEIGHT_PADDING - ($InteractionArea.length * iInteractionAreaPadding)) / $InteractionArea.length);
		$InteractionArea.height(iInteractionAreaHeight + "px");

		// chart visibility
		if (iCurrentControlWidth < InteractiveDonutChart.CHART_WIDTH_MINVALUE ||
			iCurrentControlHeight < InteractiveDonutChart.CHART_HEIGHT_MINVALUE ||
			iInteractionAreaHeight < InteractiveDonutChart.AREA_HEIGHT_MINVALUE) {
			$this.css("visibility", "hidden");
			return;
		}

		// restore visibility
		$this.css("visibility", "");

		// width adjustments
		if (iCurrentControlWidth < InteractiveDonutChart.CHART_WIDTH_HIDEDONUT_MINVALUE) {
			$this.addClass("sapSuiteIDCFullWidth");
			if (iCurrentControlWidth < InteractiveDonutChart.CHART_WIDTH_FULLWIDTH_SMALLFONT_MINVALUE) {
				$this.addClass("sapSuiteIDCFullWidthSmallFont");
			} else {
				$this.removeClass("sapSuiteIDCFullWidthSmallFont");
			}
		} else {
			$this.removeClass("sapSuiteIDCFullWidth");
			if ($DonutContainer.innerWidth() < $DonutContainer.innerHeight()) {
				$this.find(".sapSuiteIDCChartSVG").css("width", "100%").css("height", $DonutContainer.innerWidth() + "px");
			} else {
				$this.find(".sapSuiteIDCChartSVG").css("height", "100%").css("width", ($DonutContainer.innerHeight() - iContainerHorizontalPadding) + "px");
			}
			// small padding between chart and legend
			if (iCurrentControlWidth < InteractiveDonutChart.CHART_WIDTH_LEGENDPADDING_MINVALUE) {
				$this.addClass("sapSuiteIDCSmallLegendPadding");
			} else {
				$this.removeClass("sapSuiteIDCSmallLegendPadding");
			}
		}

		// height adjustments
		if (iInteractionAreaHeight < this._iAreaHeightSmallFontMinValue) {
			$this.addClass("sapSuiteIDCSmallFont");
		} else {
			$this.removeClass("sapSuiteIDCSmallFont");
		}

		// position legend and inline labels
		this._handleLegendEntrySizing();

		// determine non-interactive mode
		this._switchModeInteractive(iInteractionAreaHeight);
	};

	/**
	 * Sets max-width of the legend labels in order to have them truncated when legend item space is not sufficient.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._handleLegendEntrySizing = function() {
		var $Legend = this.$().find(".sapSuiteIDCLegend"),
			$Labels = $Legend.find(".sapSuiteIDCLegendLabel"),
			$Values = $Legend.find(".sapSuiteIDCLegendValue"),
			iValueWidthMax = 0;

		$Values.each(function() {
			var iValueWidth = jQuery(this).outerWidth(true); //outer width including margins
			iValueWidthMax = Math.max(iValueWidthMax, iValueWidth);
		});

		$Labels.css("width", "calc(100% - " + iValueWidthMax + "px)");
		$Values.css("width", iValueWidthMax + "px");
	};

	/**
	 * Verifies if the chart is enabled for user actions or not.
	 *
	 * @returns {boolean} True if the chart is enabled for user actions, otherwise false.
	 * @private
	 */
	InteractiveDonutChart.prototype._isChartEnabled = function() {
		return this.getSelectionEnabled() && this._bInteractiveMode;
	};

	/**
	 * Looks for the class 'sapUiSizeCompact' on the control and its parents to determine whether to render cozy or compact density mode.
	 *
	 * @returns {boolean} True if class 'sapUiSizeCompact' was found, otherwise false.
	 * @private
	 */
	InteractiveDonutChart.prototype._isCompact = function() {
		return jQuery("body").hasClass("sapUiSizeCompact") || this.$().is(".sapUiSizeCompact") || this.$().closest(".sapUiSizeCompact").length > 0;
	};

	/**
	 * Updates the selection state of the segment.
	 *
	 * @param {int} index The index of the segment
	 * @private
	 */
	InteractiveDonutChart.prototype._toggleSelected = function(index) {
		var oSegment = this.getSegments()[index],
			bSegmentSelected = !oSegment.getSelected(), //new state is reversed
			$InteractionArea = this.$("interactionArea-" + index),
			$Segment = this.$().find("." + InteractiveDonutChart.CHART_SEGMENT.CSSCLASS + "[data-sap-ui-idc-selection-index='" + index + "']"),
			$Ghost = this.$().find("." + InteractiveDonutChart.CHART_SEGMENT_GHOST.CSSCLASS + "[data-sap-ui-idc-selection-index='" + index + "']");

		oSegment.setProperty("selected", bSegmentSelected, true);
		$InteractionArea.attr("aria-selected", oSegment.getSelected());

		if (bSegmentSelected) {
			$InteractionArea.addClass(InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED);
			$Segment.addClass(InteractiveDonutChart.CHART_SEGMENT.CSSCLASS_SELECTED);
			$Ghost.addClass(InteractiveDonutChart.CHART_SEGMENT_GHOST.CSSCLASS_SELECTED);
		} else {
			$InteractionArea.removeClass(InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED);
			$Segment.removeClass(InteractiveDonutChart.CHART_SEGMENT.CSSCLASS_SELECTED);
			$Ghost.removeClass(InteractiveDonutChart.CHART_SEGMENT_GHOST.CSSCLASS_SELECTED);
		}

		this.fireSelectionChanged({
			selectedSegments: this.getSelectedSegments(),
			segment: oSegment,
			selected: bSegmentSelected
		});
	};

	/**
	 * Adds and removes the tabindex between elements to support keyboard navigation.
	 *
	 * @param {int} oldIndex The bar index whose tabindex was 0 previously
	 * @param {int} newIndex The bar index whose tabindex should be now set to 0
	 * @param {jQuery} focusables All the elements who can have a tabindex attribute
	 * @private
	 */
	InteractiveDonutChart.prototype._switchTabindex = function(oldIndex, newIndex, focusables) {
		if (oldIndex !== newIndex && oldIndex >= 0 && oldIndex < focusables.length && newIndex >= 0 && newIndex < focusables.length) {
			focusables.eq(oldIndex).removeAttr("tabindex");
			focusables.eq(newIndex).attr("tabindex", "0");
			focusables.eq(newIndex).focus();
		}
	};

	/**
	 * Adjusts the height and width of the whole control, if this is required, depending on parent control.
	 *
	 * @param {jQuery} control the control object
	 * @private
	 */
	InteractiveDonutChart.prototype._adjustToParent = function(control) {
		var oParent = this.data("_parentRenderingContext");
		if (oParent && oParent instanceof FlexBox) {
			var $Parent = oParent.$();
			var iParentWidth = parseFloat($Parent.innerWidth());
			var iParentHeight = parseFloat($Parent.innerHeight());
			control.outerWidth(iParentWidth);
			control.outerHeight(iParentHeight);
		}
	};

	/**
	 * Changes data for compact mode related to cozy (default) mode.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._setResponsivenessData = function() {
		if (this._bCompact) {
			this._iAreaHeightInteractiveMinValue = InteractiveDonutChart.AREA_HEIGHT_INTERACTIVE_MINVALUE_COMPACT;
			this._iAreaHeightSmallFontMinValue = InteractiveDonutChart.AREA_HEIGHT_SMALLFONT_COMPACT;
		} else {
			this._iAreaHeightInteractiveMinValue = InteractiveDonutChart.AREA_HEIGHT_INTERACTIVE_MINVALUE;
			this._iAreaHeightSmallFontMinValue = InteractiveDonutChart.AREA_HEIGHT_SMALLFONT;
		}
	};

	/**
	 * Checks the current content density and invalidates the control if it is changed in order to trigger a re-rendering.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._checkContentDensity = function() {
		if (this.$().length > 0) {
			var bCompact = this._isCompact();
			if (bCompact !== this._bCompact) {
				this._bCompact = bCompact;
				this.invalidate();
			}
		}
	};

	/**
	 * Deregisters all handlers.
	 *
	 * @private
	 */
	InteractiveDonutChart.prototype._deregisterResizeHandler = function() {
		if (this._sResizeHandlerId) {
			ResizeHandler.deregister(this._sResizeHandlerId);
			this._sResizeHandlerId = null;
		}
	};

	/**
	 * Creates the tooltip value for the chart.
	 * If the tooltip was set to an empty string (using whitespaces) by the application or the tooltip was not set (null/undefined),
	 * the tooltip gets internally generated by the control.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveDonutChart.prototype._createTooltipText = function() {
		var bIsFirst = true, sSegmentTooltip,
			sTooltipText = "", oSegments = this.getSegments();
		for (var i = 0; i < this._iVisibleSegments; i++) {
			// concatenate individual tooltips
			sSegmentTooltip = oSegments[i]._getSegmentTooltip();
			if (sSegmentTooltip) {
				sTooltipText += (bIsFirst ? "" : "\n") + sSegmentTooltip;
				bIsFirst = false;
			}
		}

		return sTooltipText;
	};

	return InteractiveDonutChart;
});

}; // end of sap/suite/ui/microchart/InteractiveDonutChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveDonutChartRenderer') ) {
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveDonutChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveDonutChartRenderer",[ "jquery.sap.global", './library', "sap/ui/core/theming/Parameters", "sap/ui/Device", "sap/m/library" ],
	function(jQuery, library, Parameters, Device, MobileLibrary) {
	"use strict";

	/**
	 * InteractiveDonutChartRenderer renderer.
	 * @namespace
	 */
	var InteractiveDonutChartRenderer = {};

	InteractiveDonutChartRenderer.TOTAL_RADIUS_ABSOLUTE = 3.625;
	InteractiveDonutChartRenderer.OUTER_RADIUS_ABSOLUTE = 3.25;
	InteractiveDonutChartRenderer.SELECTION_THICKNESS_ABSOLUTE = 0.375;
	InteractiveDonutChartRenderer.HOLE_SIZE_RATIO_COMPACT = 0.48;
	InteractiveDonutChartRenderer.HOLE_SIZE_RATIO_COZY = 0.48; //donut hole: 48% of diameter
	InteractiveDonutChartRenderer.SEGMENT_HALF_GAP_SIZE = 0; // gap width between segments equal to 0px
	InteractiveDonutChartRenderer.SEGMENT_HALF_GAP_SIZE_HCB = 0.5; // gap width between segments equal to 1px for sap_hcb theme only
	InteractiveDonutChartRenderer.GHOST_BORDER_HALF_THICKNESS_HCB = 0.5; // the ghost segment has a border of 1 px for hcb theme

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @public
	 */
	InteractiveDonutChartRenderer.render = function(oRm, oControl) {
		if (!oControl._bThemeApplied) {
			return;
		}
		this._aSegments = oControl.getSegments();
		var iSegmentsNum = oControl._iVisibleSegments;

		// in case of sap_hcb or sap_belize_hcb theme, activate the gap size and deactivate the stroke inside css
		this._fSegmentHalfGapSize = this.SEGMENT_HALF_GAP_SIZE;
		this._fGhostHalfGapSize = 0;
		if (this._isThemeHighContrast()) {
			this._fSegmentHalfGapSize = this.SEGMENT_HALF_GAP_SIZE_HCB;
			this._fGhostHalfGapSize = this.GHOST_BORDER_HALF_THICKNESS_HCB;
		}

		oRm.write("<div");
		oRm.addClass("sapSuiteIDC");
		oRm.writeControlData(oControl);
		oRm.writeClasses();

		//tooltip for non-interactive chart
		if (!oControl._isChartEnabled()) {
			var sAreaTooltip = oControl.getTooltip_AsString();
			if (jQuery.type(sAreaTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sAreaTooltip);
			}
		}
		// container accessibility
		var oAccOptions = {};
		oAccOptions.role = "listbox";
		oAccOptions.multiselectable = true;
		oAccOptions.disabled = !oControl._isChartEnabled();
		oAccOptions.labelledby = oControl.getAriaLabelledBy();
		oAccOptions.describedby = this._getAriaDescribedBy(oControl, iSegmentsNum);
		oRm.writeAccessibilityState(oControl, oAccOptions);
		oRm.write(">");

		//adds an extra overlay for a disabled chart
		if (!oControl.getSelectionEnabled()) {
			this._renderDisabledOverlay(oRm, oControl);
		}

		this._renderDonut(oRm, oControl, iSegmentsNum);
		this._renderLegend(oRm, oControl, iSegmentsNum);

		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the donut.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} segmentsNum The amount of segments
	 * @private
	 */
	InteractiveDonutChartRenderer._renderDonut = function(oRm, oControl, segmentsNum) {
		var oSegment, fSum, fStart, sSegmentPath, iTotalRadius, iInnerRadius, iOuterRadius, iHoverThickness,
			bCompact = oControl._bCompact;

		oRm.write("<div");
		oRm.addClass("sapSuiteIDCChart");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<svg");
		oRm.addClass("sapSuiteIDCChartSVG");
		oRm.writeClasses();
		oRm.writeAttribute("viewBox", "-2 -2 104 104");
		oRm.writeAttribute("focusable", "false");
		oRm.write(">");
		oRm.write("<g");
		// the shift in fractional parts is added to avoid pixel rastering issues that
		// are caused by defining the width of the separating line between segments being equal to 1 px.
		oRm.writeAttribute("transform", "translate(50.5 50.5)");
		oRm.write(">");

		//size calculations to convert absolute units to SVG-units
		iTotalRadius = 50; //radius including hover ghost thickness (in relative SVG-units)
		iOuterRadius = (this.OUTER_RADIUS_ABSOLUTE / this.TOTAL_RADIUS_ABSOLUTE) * iTotalRadius;
		if (bCompact) {
			//compact mode
			iInnerRadius = this.HOLE_SIZE_RATIO_COMPACT * iOuterRadius;
		} else {
			//cozy mode
			iInnerRadius = this.HOLE_SIZE_RATIO_COZY * iOuterRadius;
		}
		iHoverThickness = iTotalRadius * (this.SELECTION_THICKNESS_ABSOLUTE / this.TOTAL_RADIUS_ABSOLUTE);

		//render segments ghosts, i.e. the highlighting paths for selection
		fSum = this._calculateSum(oControl);
		fStart = 0.0;
		var i;
		for (i = 0; i < segmentsNum; i++) {
			oSegment = this._aSegments[i];
			if (oSegment.getValue() > 0) {
				sSegmentPath = this._calculateSegmentPath(fSum, oSegment.getValue(), fStart, iOuterRadius + iHoverThickness, iInnerRadius - iHoverThickness, this._fGhostHalfGapSize);

				oRm.write("<path");
				oRm.writeAttributeEscaped("d", sSegmentPath);
				oRm.writeAttribute("data-sap-ui-idc-selection-index", i);
				oRm.addClass(library.InteractiveDonutChart.CHART_SEGMENT_GHOST.CSSCLASS);
				if (oSegment.getSelected()) {
					oRm.addClass(library.InteractiveDonutChart.CHART_SEGMENT_GHOST.CSSCLASS_SELECTED);
				}
				oRm.writeClasses();
				oRm.writeStyles();
				oRm.write(">");
				// write tooltip for ghost segment
				if (oControl._isChartEnabled()) {
					this._renderTitle(oSegment.getTooltip_AsString(), oRm);
				}
				oRm.write("</path>");

				fStart += this._aSegments[i].getValue();
			}
		}

		//render donut segments
		fStart = 0.0;
		for (i = 0; i < segmentsNum; i++) {
			oSegment = this._aSegments[i];
			if (oSegment.getValue() > 0) {
				sSegmentPath = this._calculateSegmentPath(fSum, oSegment.getValue(), fStart, iOuterRadius, iInnerRadius, 0);

				oRm.write("<path");
				oRm.writeAttributeEscaped("d", sSegmentPath);
				oRm.writeAttributeEscaped("fill", this._getSegmentColor(i, segmentsNum));
				oRm.writeAttribute("cursor", "pointer");
				oRm.writeAttribute("data-sap-ui-idc-selection-index", i);
				oRm.addClass(library.InteractiveDonutChart.CHART_SEGMENT.CSSCLASS);
				if (oSegment.getSelected()) {
					oRm.addClass(library.InteractiveDonutChart.CHART_SEGMENT.CSSCLASS_SELECTED);
				}
				oRm.writeClasses();
				oRm.write(">");
				// write tooltip for donut segment
				if (oControl._isChartEnabled()) {
					this._renderTitle(oSegment.getTooltip_AsString(), oRm);
				}
				oRm.write("</path>");

				fStart += this._aSegments[i].getValue();
			}
		}
		oRm.write("</g>");
		oRm.write("</svg>");

		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the legend.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} segmentsNum The amount of segments
	 * @private
	 */
	InteractiveDonutChartRenderer._renderLegend = function(oRm, oControl, segmentsNum) {
		oRm.write("<div");
		oRm.addClass("sapSuiteIDCLegend");
		oRm.writeClasses();
		oRm.write(">");

		for (var i = 0; i < segmentsNum; i++) {
			this._renderLegendSegment(oRm, oControl, i, segmentsNum);
		}

		oRm.write("</div>");
	};

	/**
	 * Renders the legend area for the given control.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} index The index inside segments aggregation
	 * @param {int} segmentsNum The amount of segments
	 * @private
	 */
	InteractiveDonutChartRenderer._renderLegendSegment = function(oRm, oControl, index, segmentsNum) {
		var oSegment = this._aSegments[index],
			sLabel = oSegment.getLabel(),
			sDisplayedValue = oSegment.getDisplayedValue() || String(oSegment.getValue()),
			sTooltip,
			sColor = oSegment._getSemanticColor();

		// 'N/A' is displayed if value does not exist (regardless of whether the displayedValue exists or not)
		if (oSegment._bNullValue) {
			sDisplayedValue = oControl._oRb.getText("INTERACTIVECHART_NA");
		}
		sDisplayedValue = sDisplayedValue.substring(0, library.InteractiveDonutChart.CHART_SEGMENT_LABEL_MAXLENGTH);

		// segment accessibility
		var sTooltip = oSegment.getTooltip_Text();
		var sAriaLabel;
		if (sTooltip && jQuery.trim(sTooltip).length > 0) {
			sAriaLabel = sTooltip;
		} else {
			sAriaLabel = sLabel;
			if (sAriaLabel) {
				sAriaLabel = sAriaLabel + " " + sDisplayedValue;
			} else {
				sAriaLabel = sDisplayedValue;
			}
			if (sColor) {
				sAriaLabel += " " + sColor;
			}
		}
		var oAccOptions = {};
		oAccOptions.role = "option";
		oAccOptions.label = sAriaLabel.trim();
		oAccOptions.selected = oSegment.getSelected();
		oAccOptions.posinset = index + 1;
		oAccOptions.setsize = segmentsNum;

		oRm.write("<div");
		oRm.writeAccessibilityState(oSegment, oAccOptions);
		oRm.writeAttributeEscaped("id", oControl.getId() + "-interactionArea-" + index);
		oRm.writeAttributeEscaped("data-sap-ui-idc-selection-index", index);
		oRm.addClass("sapSuiteIDCLegendSegment");
		if (oSegment.getSelected()) {
			oRm.addClass(library.InteractiveDonutChart.SEGMENT_CSSCLASS_SELECTED);
		}
		// the first segment has tabindex 0
		if (index === 0 && oControl.getSelectionEnabled()) {
			oRm.writeAttribute("tabindex", "0");
		}
		// tooltip for legend segment
		if (oControl._isChartEnabled()) {
			sTooltip = oSegment.getTooltip_AsString();
			if (jQuery.type(sTooltip) === "string") {
				oRm.writeAttributeEscaped("title", sTooltip);
			}
		}
		oRm.writeClasses();
		oRm.write(">");

		sColor = oSegment.getColor();
		if (sColor !== MobileLibrary.ValueColor.Neutral) {
			oRm.write("<div");
			oRm.addClass("sapSuiteIDCSemanticMarker");
			oRm.addClass("sapSuiteICSemanticColor" + sColor);
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
		}

		//writes the square marker
		oRm.write("<div");
		oRm.addClass("sapSuiteIDCLegendMarker");
		oRm.writeClasses();
		oRm.writeAttributeEscaped("style", "background-color: " + this._getSegmentColor(index, segmentsNum));
		oRm.write(">");
		oRm.write("</div>");

		oRm.write("<div");
		oRm.addClass("sapSuiteIDCLegendLabelValue");
		oRm.writeClasses();
		oRm.write(">");

		//writes the label
		oRm.write("<div");
		oRm.addClass("sapSuiteIDCLegendLabel");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sLabel);
		oRm.write("</div>");

		//writes the value with unit
		oRm.write("<div");
		oRm.addClass("sapSuiteIDCLegendValue");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(sDisplayedValue);
		oRm.write("</div>");

		oRm.write("</div>"); //.sapSuiteIDCLegendLabelValue
		oRm.write("</div>"); //.sapSuiteIDCLegendSegment
	};

	/**
	 * Returns the color value of the less parameter for the segment at the given position
	 * of the color palette.
	 *
	 * @param {int} position The position in the color palette array
	 * @param {int} segmentsNum The amount of segments
	 * @returns {string} The color of the segment
	 * @private
	 */
	InteractiveDonutChartRenderer._getSegmentColor = function(position, segmentsNum) {
		var fWeight = 1 - (segmentsNum - position) / segmentsNum,
			sColor = Parameters.get("_sap_suite_ui_microchart_InteractiveDonutChart_SegmentFillColor") || "white"; //fallback to white

		if (this._isThemeHighContrast()) {
			return sColor;
		}

		return this._mixColors(sColor, "#ffffff", fWeight);
	};

	/**
	 * Creates the object needed for SVG containing the necessary values.
	 * Based on scalable units from 0 to 100 the attributes of the SVG are computed. We assume to
	 * have an outer radius of 50 and an inner radius of 30, which corresponds to 60% of diameter for
	 * the donut hole.
	 *
	 * @param {float} sum The sum for the complete circle
	 * @param {float} segmentValue The proportional value
	 * @param {float} start The start point inside the circle
	 * @param {float} outerRadius The radius of the outer circle (whole size)
	 * @param {float} innerRadius The radius of the inner circle (hole size)
	 * @param {float} borderWidth The width of the border applied for the element
	 * @returns {string} The segment path in the form of a string
	 * @private
	 */
	InteractiveDonutChartRenderer._calculateSegmentPath = function(sum, segmentValue, start, outerRadius, innerRadius, borderWidth) {
		var iMinimumValue = 0.01,
			sSVGData,
			oLinePointA,
			oLinePointB,
			oLinePointC,
			oLinePointD,
			fStartAngle,
			fEndAngle,
			fSegmentAngle,
			bLargeAngle,
			fSegmentWithBorderHalfGapSize = this._fSegmentHalfGapSize + borderWidth,
			fGapSizeSqr = Math.pow(2 * fSegmentWithBorderHalfGapSize, 2),
			fGapRadiusInner,
			fGapRadiusOuter,
			fGapAngleInner,
			fGapAngleOuter;

		outerRadius = this._formatFloat(outerRadius); //format float to only contain 2 digits
		innerRadius = this._formatFloat(innerRadius); //format float to only contain 2 digits

		fStartAngle = this._calculateCircleFraction(sum, start);
		fEndAngle = this._calculateCircleFraction(sum, start + segmentValue);
		fSegmentAngle = this._calculateCircleFraction(sum, segmentValue);
		/* bLargeAngle: If the segment angle is <= PI, SVG has to render a small arc (bLargeAngle = 0)
		 * and if the segment angle is > PI, it has to render a large arc (bLargeAngle = 1) */
		if (fSegmentAngle <= Math.PI) {
			bLargeAngle = 0;
		} else {
			bLargeAngle = 1;
		}

		//calculations for 1 unit gap between segments
		if (sum === segmentValue) { //only one segment is to be displayed
			fGapRadiusInner = innerRadius;
			fGapRadiusOuter = outerRadius;
			fGapAngleInner = 0;
			fGapAngleOuter = 0;
		} else {
			fGapRadiusInner = Math.sqrt(Math.pow(innerRadius, 2) + fGapSizeSqr);
			fGapRadiusOuter = Math.sqrt(Math.pow(outerRadius, 2) + fGapSizeSqr);
			fGapAngleInner = Math.atan(fSegmentWithBorderHalfGapSize / innerRadius);
			fGapAngleOuter = Math.atan(fSegmentWithBorderHalfGapSize / outerRadius);
		}

		oLinePointA = {
			"x" : this._formatFloat(fGapRadiusInner * Math.sin(fStartAngle + fGapAngleInner)),
			"y" : this._formatFloat(-fGapRadiusInner * Math.cos(fStartAngle + fGapAngleInner))
		};
		oLinePointB = {
			"x" : this._formatFloat(fGapRadiusOuter * Math.sin(fStartAngle + fGapAngleOuter)),
			"y" : this._formatFloat(-fGapRadiusOuter * Math.cos(fStartAngle + fGapAngleOuter))
		};
		// subtract the minimum coordinate value (0.01) from x values of point C & D to avoid having start and end at the same point
		oLinePointC = {
			"x" : this._formatFloat(outerRadius * Math.sin(fEndAngle - fGapAngleOuter) - iMinimumValue),
			"y" : this._formatFloat(-outerRadius * Math.cos(fEndAngle - fGapAngleOuter))
		};
		oLinePointD = {
			"x" : this._formatFloat(innerRadius * Math.sin(fEndAngle - fGapAngleInner) - iMinimumValue),
			"y" : this._formatFloat(-innerRadius * Math.cos(fEndAngle - fGapAngleInner))
		};

		sSVGData = "";
		// Draw a line from A (inner circle start) to B (outer circle start)
		sSVGData += "M" + oLinePointA.x + " " + oLinePointA.y + " ";
		sSVGData += "L" + oLinePointB.x + " " + oLinePointB.y + " ";
		// Draw an arc from B (outer circle start) to C (outer circle end), clockwise
		sSVGData += "A" + outerRadius + "," + outerRadius + " 0 " + bLargeAngle + ",1" +
			" " + oLinePointC.x + "," + oLinePointC.y + " ";
		// Draw a line from C (outer circle end) to D (inner circle end)
		sSVGData += "L" + oLinePointD.x + " " + oLinePointD.y + " ";
		// Draw the arc back from D (inner circle end) to A (inner circle start), counterclockwise
		sSVGData += "A" + innerRadius + "," + innerRadius + " 0 " + bLargeAngle + ",0" +
			" " + oLinePointA.x + "," + oLinePointA.y;

		return sSVGData;
	};

	/**
	 * First formats the given value to two places after the decimal point, then parses the result to float.
	 *
	 * @param {float} value The value which is formatted and parsed
	 * @returns {float} The result as float value
	 * @private
	 */
	InteractiveDonutChartRenderer._formatFloat = function(value) {
		return parseFloat(value.toFixed(2));
	};

	/**
	 * Calculates the sum of the values of the first displayed segments.
	 *
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @returns {float} The sum of the values of the first displayed segments
	 * @private
	 */
	InteractiveDonutChartRenderer._calculateSum = function(oControl) {
		var fSum = 0;
		var iDisplayedSegments = oControl.getDisplayedSegments();

		for (var i = 0; i < this._aSegments.length && i < iDisplayedSegments; i++) {
			var fValue = this._aSegments[i].getValue();
			if (fValue > 0) {
				fSum += fValue;
			}
		}

		return fSum;
	};

	/**
	 * Calculates the fraction of the current segment.
	 *
	 * @param {float} sum The sum of all segment values
	 * @param {float} segmentValue The value of the current segment
	 * @returns {float} The fraction based on segmentValue
	 * @private
	 */
	InteractiveDonutChartRenderer._calculateCircleFraction = function(sum, segmentValue) {
		return (2 * Math.PI * segmentValue) / sum;
	};

	/**
	 * Adds an extra disabling overlay
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager It can be used for writing to the Render-Output-Buffer
	 * @private
	 */
	InteractiveDonutChartRenderer._renderDisabledOverlay = function(oRm) {
		oRm.write("<div");
		oRm.addClass("sapSuiteIDCDisabledOverlay");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
	};

	/**
	 * Creates the value of the aria-describedby accessibility attribute
	 *
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} segmentsNum The amount of segments
	 * @returns {string} A comma-separated list of all InteractionArea's IDs
	 * @private
	 */
	InteractiveDonutChartRenderer._getAriaDescribedBy = function(oControl, segmentsNum) {
		var aAreaIds = [];
		for (var i = 0; i < segmentsNum; i++) {
			aAreaIds.push(oControl.getId() + "-interactionArea-" + i);
		}
		return aAreaIds.join(",");
	};

	/**
	 * Mixes two hex colors with the given weight
	 * This function is equivalent to the LESS function "mix"
	 *
	 * @param {string} color1 The first color to mix
	 * @param {string} color2 The second color to mix
	 * @param {float} weight The mixing weight applied to color1
	 * @returns {string} The hex representation of the mixed colors
	 * @private
	 */
	InteractiveDonutChartRenderer._mixColors = function(color1, color2, weight) {
		if (weight === 1 || color1.toLowerCase() === color2.toLowerCase()) {
			return color1;
		}

		var aColor1 = this._hexToRgb(color1);
		var aColor2 = this._hexToRgb(color2);
		var sColorMixR = Math.round((aColor1[0] + (Math.abs(aColor1[0] - aColor2[0]) * weight)) % 255);
		var sColorMixG = Math.round((aColor1[1] + (Math.abs(aColor1[1] - aColor2[1]) * weight)) % 255);
		var sColorMixB = Math.round((aColor1[2] + (Math.abs(aColor1[2] - aColor2[2]) * weight)) % 255);

		return "#" + this._intToHex(sColorMixR) + this._intToHex(sColorMixG) + this._intToHex(sColorMixB);
	};

	/**
	 * Checks whether the current theme is a high contrast theme like sap_belize_hcb or sap_belize_hcw.
	 * @returns {boolean} True if the theme name contains hcb or hcw, false otherwise
	 * @private
	 */
	InteractiveDonutChartRenderer._isThemeHighContrast = function() {
		return /(hcw|hcb)/g.test(sap.ui.getCore().getConfiguration().getTheme());
	};

	/**
	 * Converts hexadecimal color string to array containing RGB values
	 *
	 * @param {string} hexColor The hexadecimal representation of a color
	 * @returns {array} The RGB representation of the color
	 * @private
	 */
	InteractiveDonutChartRenderer._hexToRgb = function(hexColor) {
		var aColor = [];
		hexColor = hexColor.replace(/[^0-9a-f]+/ig, '');
		if (hexColor.length === 3) {
			aColor = hexColor.split('');
		} else if (hexColor.length === 6) {
			aColor = hexColor.match(/(\w{2})/g);
		} else {
			jQuery.sap.log.warning("Invalid color input: hex string must be in the format #FFFFFF or #FFF");
		}
		return aColor.map(function(x) { return parseInt(x, 16); });
	};

	/**
	 * Converts decimal integers into hexadecimal string
	 *
	 * @param {integer} value The decimal number
	 * @returns {string} The hexadecimal representation of the input value
	 * @private
	 */
	InteractiveDonutChartRenderer._intToHex = function(value) {
		var sHex = value.toString(16);
		if (sHex.length === 1) {
			sHex = '0' + sHex;
		}
		return sHex;
	};

	/**
	 * Renders the title attribute for the tooltip as part of the SVG DOM elements
	 *
	 * @param {string} tooltip The tooltip of the instance to render
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @private
	 */
	InteractiveDonutChartRenderer._renderTitle = function(tooltip, oRm) {
		if (jQuery.type(tooltip) === "string") {
			oRm.write("<title>");
			if (Device.browser.msie) {
				tooltip = tooltip.split("\n");
				for (var j = 0; j < tooltip.length; j++) {
					oRm.writeEscaped(tooltip[j]);
					if (j < tooltip.length - 1) {
						oRm.write("<br>");
					}
				}
			} else {
				oRm.writeEscaped(tooltip);
			}
			oRm.write("</title>");
		}
	};

	return InteractiveDonutChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/InteractiveDonutChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveDonutChartSegment') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveDonutChartSegment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveDonutChartSegment",[ "jquery.sap.global", "./library", "sap/ui/core/Element" ], function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for InteractiveDonutChartSegment element.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new element
	 *
	 * @class A donut chart segment.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveDonutChartSegment
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var InteractiveDonutChartSegment = Element.extend("sap.suite.ui.microchart.InteractiveDonutChartSegment", /** @lends sap.suite.ui.microchart.InteractiveDonutChartSegment.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * Displayed text for the segment.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Indicator for the selected state.
				 */
				selected: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				},

				/**
				 * The value representing a percentage or an absolute value.
				 */
				value: {
					type: "float",
					group: "Data",
					defaultValue: null
				},

				/**
				 * The value that is directly displayed on the legend.
				 */
				displayedValue: {
					type: "string",
					group: "Data",
					defaultValue: null
				},

				/**
				 * Determines the color of the segment.
				 * @since 1.50.0
				 */
				color: {
					type: "sap.m.ValueColor",
					group: "Misc",
					defaultValue: "Neutral"
				}
			}
		}
	});

	InteractiveDonutChartSegment.prototype.init = function() {
		this._bNullValue = true;
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
	};

	InteractiveDonutChartSegment.prototype.validateProperty = function(sPropertyName, oValue) {
		if (sPropertyName === "value") {
			// negative values are not allowed
			this._bNullValue = (oValue === null) || isNaN(oValue) || (typeof oValue === "undefined") || (oValue < 0);
		}
		return Element.prototype.validateProperty.apply(this, arguments);
	};

	InteractiveDonutChartSegment.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		this._bCustomTooltip = true;
		if (!sTooltip) { // tooltip will be set by the control
			sTooltip = this._createTooltipText();
			this._bCustomTooltip = false;
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Creates internal tooltip value for the segment.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveDonutChartSegment.prototype._createTooltipText = function() {
		var sTooltipText = "";
		var sLabel = this.getLabel();
		if (sLabel && sLabel.length > 0) {
			sTooltipText = sLabel + ":\n";
		}
		if (this._bNullValue) {
			sTooltipText += this._oRb.getText("INTERACTIVECHART_NA");
		} else {
			sTooltipText += this.getValue();
		}

		var sColor = this._getSemanticColor();
		if (sColor) {
			sTooltipText += " " + sColor;
		}

		return sTooltipText;
	};

	/**
	 * Determines the localized name of the segment's semantic color.
	 *
	 * @returns {string} The localized color name or an empty string
	 * @private
	 */
	InteractiveDonutChartSegment.prototype._getSemanticColor = function() {
		var sColor = this.getColor();
		var oParent = this.getParent();

		if (oParent && oParent._bSemanticTooltip) {
			return this._oRb.getText("SEMANTIC_COLOR_" + sColor.toUpperCase());
		}
		return "";
	};

	/**
	 * Returns the segment tooltip to be used for creating the chart tooltip text.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveDonutChartSegment.prototype._getSegmentTooltip = function() {
		var sTooltip = this.getTooltip_AsString();
		if (sTooltip && !this._bCustomTooltip) {
			sTooltip = sTooltip.replace("\n", " ");
		}

		return sTooltip;
	};

	return InteractiveDonutChartSegment;
});

}; // end of sap/suite/ui/microchart/InteractiveDonutChartSegment.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveLineChartPoint') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveLineChartPoint'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveLineChartPoint",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";

	/**
	 * Constructor for the point element of the InteractiveLineChart.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class A point element for the InteractiveLineChart.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveLineChartPoint
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var InteractiveLineChartPoint = Element.extend("sap.suite.ui.microchart.InteractiveLineChartPoint", /** @lends sap.suite.ui.microchart.InteractiveLineChartPoint.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The bottom label for the chart point.
				 */
				label: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Determines if the chart point is selected.
				 */
				selected: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				},

				/**
				 * The numeric value of the chart point.
				 */
				value: {
					type: "float",
					group: "Data",
					defaultValue: null
				},

				/**
				 * The value label to be displayed near the point in the chart.
				 */
				displayedValue: {
					type: "string",
					group: "Data",
					defaultValue: null
				},

				/**
				 * Determines the color of the point.
				 * @since 1.50.0
				 */
				color: {
					type: "sap.m.ValueColor",
					group: "Misc",
					defaultValue: "Neutral"
				}
			}
		}
	});

	InteractiveLineChartPoint.prototype.init = function() {
		this._bNullValue = true;
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
	};

	InteractiveLineChartPoint.prototype.validateProperty = function(sPropertyName, oValue) {
		if (sPropertyName === "value" && (oValue === null || oValue === undefined)) {
			this._bNullValue = true;
		} else if (sPropertyName === "value") {
			this._bNullValue = false;
		}
		return Element.prototype.validateProperty.apply(this, arguments);
	};

	InteractiveLineChartPoint.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		this._bCustomTooltip = true;
		if (!sTooltip) { // tooltip will be set by the control
			sTooltip = this._createTooltipText();
			this._bCustomTooltip = false;
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Creates internal tooltip value for the interaction area.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveLineChartPoint.prototype._createTooltipText = function() {
		var sTooltipText = "";
		var sLabel = this.getLabel();
		if (sLabel && sLabel.length > 0) {
			sTooltipText = sLabel + ":\n";
		}
		if (this._bNullValue) {
			sTooltipText += this._oRb.getText("INTERACTIVECHART_NA");
		} else {
			sTooltipText += this.getValue();
		}
		var sColor = this._getSemanticColor();
		if (sColor) {
			sTooltipText += " " + sColor;
		}

		return sTooltipText;
	};

	/**
	 * Determines the semantic color of the localized point.
	 *
	 * @returns {string} The localized color name or an empty string
	 * @private
	 */
	InteractiveLineChartPoint.prototype._getSemanticColor = function() {
		var sColor = this.getColor();
		var oParent = this.getParent();

		if (oParent && oParent._bSemanticTooltip) {
			return this._oRb.getText("SEMANTIC_COLOR_" + sColor.toUpperCase());
		}
		return "";
	};

	/**
	 * Returns the interaction area tooltip to be used for creating the chart tooltip text.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveLineChartPoint.prototype._getAreaTooltip = function() {
		var sTooltip = this.getTooltip_AsString();
		if (sTooltip && !this._bCustomTooltip) {
			sTooltip = sTooltip.replace("\n", " ");
		}

		return sTooltip;
	};

	return InteractiveLineChartPoint;
});

}; // end of sap/suite/ui/microchart/InteractiveLineChartPoint.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.LineMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.suite.ui.microchart.LineMicroChart control.
jQuery.sap.declare('sap.suite.ui.microchart.LineMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/LineMicroChart",['jquery.sap.global', './library', 'sap/m/library', 'sap/ui/core/Control', 'sap/ui/Device', "sap/ui/core/ResizeHandler"],
	function(jQuery, library, MobileLibrary, Control, Device, ResizeHandler) {
	"use strict";

	/**
	 * Constructor for a new LineMicroChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Chart that displays the history of values as segmented lines along a threshold line. The scale is optional and showing the points is also optional.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.48.0
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.LineMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
	 */
	var LineMicroChart = Control.extend("sap.suite.ui.microchart.LineMicroChart", /** @lends sap.suite.ui.microchart.LineMicroChart.prototype */ {
		metadata: {
			library: "sap.suite.ui.microchart",
			properties: {

				/**
				 * The size of the chart. If not set, the default size is applied based on the type of the device.
				 */
				size: {type: "sap.m.Size", group: "Appearance", defaultValue: "Auto"},

				/**
				 * Determines the chart threshold which is used for vertical normalization.
				 * If the threshold does not belong to the value range given by minYValue...maxYValue, the threshold is ignored.
				 * By setting the threshold property's value to null, the threshold is disabled and excluded from range calculations.
				 */
				threshold: {type: "float", group: "Appearance", defaultValue: 0},

				/**
				 * If this property is set, it indicates the value the X-axis starts with.
				 */
				minXValue: {type: "float", group: "Appearance"},

				/**
				 * If this property is set, it indicates the value the X-axis ends with.
				 */
				maxXValue: {type: "float", group: "Appearance"},

				/**
				 * If this property is set, it indicates the value the Y-axis starts with.
				 */
				minYValue: {type: "float", group: "Appearance"},

				/**
				 * If this property is set, it indicates the value the Y-axis ends with.
				 */
				maxYValue: {type: "float", group: "Appearance"},

				/**
				 * Describes the left top label of the chart.
				 * The label color is determined by the color property of the first LineMicroChartPoint in the points aggregation.
				 * The space for the label is not reserved if the label is not set.
				 */
				leftTopLabel: {type: "string", group: "Data", defaultValue: null},

				/**
				 * Describes the right top label of the chart.
				 * The label color is determined by the color property of the last LineMicroChartPoint in the points aggregation.
				 * The space for the label is not reserved if the label is not set.
				 */
				rightTopLabel: {type: "string", group: "Data", defaultValue: null},

				/**
				 * Describes the left bottom label of the chart.
				 * The label color is set internally.
				 * The space for the label is not reserved if the label is not set.
				 */
				leftBottomLabel: {type: "string", group: "Data", defaultValue: null},

				/**
				 * Describes the right bottom label of the chart.
				 * The label color is set automatically.
				 * The space for the label is not reserved if the label is not set.
				 */
				rightBottomLabel: {type: "string", group: "Data", defaultValue: null},

				/**
				 * Describes the color of the chart.
				 * In conjunction with emphasized points, it is only used if all points have the sap.m.ValueColor.Neutral color.
				 * The color can be set as an {@link sap.m.ValueCSSColor} or as a plain object with the properties 'above' and 'below' which determine the color of the graph above and below the threshold, respectively.
				 */
				color: {type: "any", group: "Appearance", defaultValue: "Neutral"},

				/**
				 * Defines if the control should render the points or not.
				 * It has no effect if emphasized points are used.
				 * If true, then the points inside the aggregation will not be shown.
				 */
				showPoints: {type : "boolean", group : "Appearance", defaultValue : false}

			},
			defaultAggregation: "points",
			aggregations: {
				/**
				 * Aggregation which contains all points.
				 */
				points : {type : "sap.suite.ui.microchart.LineMicroChartPoint", multiple : true,  bindable : "bindable"}
			},
			events: {
				/**
				 * The event is triggered when the chart is pressed.
				 */
				press: {}
			}
		}
	});

	LineMicroChart.MIN_SIZE_CHART = 5; // 1rem - 11pixel (2* 5,5 pixels padding to make space for points radius on each side)
	LineMicroChart.EDGE_CASE_HEIGHT_SHOWBOTTOMLABEL = 16; // 1rem on the basis of design
	LineMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL = 32; // 2rem on the basis of design
	LineMicroChart.EDGE_CASE_WIDTH_RESIZEFONT = 168; // Corresponds to M size 10.5rem
	LineMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT = 72; // Corresponds to M size 4.5rem

	/* =========================================================== */
	/* Events */
	/* =========================================================== */
	LineMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	LineMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	LineMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.ENTER || oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	LineMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}

		return this;
	};

	LineMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	/**
	 * Handler for click event
	 */
	LineMicroChart.prototype.onclick = function() {
		if (Device.browser.msie || Device.browser.edge) {
			this.$().focus();
		}
		this.firePress();
	};

	/**
	 * Handler for space button event
	 */
	LineMicroChart.prototype.onsapspace = LineMicroChart.prototype.onclick;

	/**
	 * Handler for enter button event
	 */
	LineMicroChart.prototype.onsapenter = LineMicroChart.prototype.onclick;

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */

	LineMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		if (!sTooltip) { //tooltip will be set by the control
			sTooltip = this._createTooltipText();
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};

	LineMicroChart.prototype.getThreshold = function() {
		if (this._bThresholdNull) {
			return null;
		} else {
			return this.getProperty("threshold");
		}
	};

	/* =========================================================== */
	/* Protected methods */
	/* =========================================================== */
	LineMicroChart.prototype.init = function() {
		this._bFocusMode  = false;
		this._bSemanticMode = false;
		this._aNormalizedPoints = [];
		this._minXScale = null;
		this._maxXScale = null;
		this._minYScale = null;
		this._maxYScale = null;
		this._fNormalizedThreshold = 0;
		this._bScalingValid = false;
		this._bThresholdNull = false;
		this._bNoTopLabels = false;
		this._bNoBottomLabels = false;

		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this._bThemeApplied = true;

		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all themes are loaded
	 * and everything is properly initialized. We attach a theme check here.
	 *
	 * @private
	 */
	LineMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	LineMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	LineMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			library._removeStandardMargins(this);
		}
		if (this.getPoints().length > 0) {
			this._setModeFlags();
			this._normalizePoints();
		}
		this._unbindMouseEnterLeaveHandler();
	};

	LineMicroChart.prototype.onAfterRendering = function() {
		if (this.getSize() === MobileLibrary.Size.Responsive) {
			this._sResizeHandlerId = ResizeHandler.register(this, this._onResize.bind(this));
			this._onResize();
		}
		this._bindMouseEnterLeaveHandler();
	};

	LineMicroChart.prototype.exit = function() {
		this._deregisterResizeHandler();
	};

	LineMicroChart.prototype.validateProperty = function(propertyName, value) {
		if (propertyName === "threshold") {
			if (value === null) {
				this._bThresholdNull = true;
			} else {
				this._bThresholdNull = false;
			}
		}
		if (value === null || value === undefined) {
			return Control.prototype.validateProperty.apply(this, [propertyName, null]);
		}
		// a valid color must consist of either a single valid ValueCSSColor or an object composed of the valid ValueCSSColor properties 'above' and 'below'
		if (propertyName === "color" &&
			((!MobileLibrary.ValueCSSColor.isValid(value) || value === "") &&
			(!MobileLibrary.ValueCSSColor.isValid(value.below) || value.below === "" || !MobileLibrary.ValueCSSColor.isValid(value.above) || value.above === ""))) {
				jQuery.sap.log.warning("Color property of LineMicroChart must be of type sap.m.ValueCSSColor either as single value or as composite value (above: value, below: value)");
				value = null;
		} else if (jQuery.inArray(propertyName, ["minXValue", "maxXValue", "minYValue", "maxYValue"]) >= 0) {
			// min and max X/Y values must not be smaller/greater than their respective min/max coordinate;
			// otherwise, a warning will be logged and the property value will be set to null
			if (!jQuery.isNumeric(value)) {
				jQuery.sap.log.warning("Property " + propertyName + " of LineMicroChart is not numeric and it will be reset to default");
				value = null;
			}
		}
		return Control.prototype.validateProperty.apply(this, [propertyName, value]);
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */
	/**
	 * Determines the semantic and focused modes.
	 *
	 * @private
	 */
	LineMicroChart.prototype._setModeFlags = function(){
		this._bFocusMode = false;
		this._bSemanticMode = false;
		var oPoints = this.getPoints();

		// initialize scale variables with first point coordinates for future comparison.
		this._minXScale = this._maxXScale = oPoints[0].getX();
		// initialize with threshold value if not null. Upper/lower boundries will be overwritten later if applicable.
		if (this._bThresholdNull) {
			this._minYScale = this._maxYScale = oPoints[0].getY();
		}else {
			this._minYScale = this._maxYScale = this.getThreshold();
		}
		for (var i = 0; i < oPoints.length; i++) {
			this._minXScale =  Math.min(oPoints[i].getX(), this._minXScale);
			this._maxXScale = Math.max(oPoints[i].getX(), this._maxXScale);
			this._minYScale = Math.min(oPoints[i].getY(), this._minYScale);
			this._maxYScale = Math.max(oPoints[i].getY(), this._maxYScale);
			// focusMode is activated if emphasizedPoints are used
			if (oPoints[i].getMetadata().getName() === "sap.suite.ui.microchart.LineMicroChartEmphasizedPoint") {
				this._bFocusMode = true;
				// semanticMode is only active for emphasized points if at least one emphasized point is shown and has a different color than Neutral.
				if (oPoints[i].getColor() !== MobileLibrary.ValueColor.Neutral && oPoints[i].getShow()) {
					this._bSemanticMode = true;
				}
			}
		}

		// if focusMode is not active, only simple points can be used
		if (!this._bFocusMode) {
			// semanticMode is only active if the chart's color property is an object composed of both above and below entries.
			if (this.getColor() && this.getColor().above && this.getColor().below && !this._bThresholdNull) {
				this._bSemanticMode = true;
			} else {
				this._bSemanticMode = false;
			}
		}

		// log warnings for invalid properties if they are different from the default value
		if (this._bFocusMode && this._bSemanticMode && this.getColor() !== MobileLibrary.ValueColor.Neutral) {
			jQuery.sap.log.info("Property Color of LineMicroChart has no effect if EmphasizedPoints with colors different from Neutral are used.");
		}
		if (this._bFocusMode && this.getShowPoints()) {
			jQuery.sap.log.info("Property ShowPoints of LineMicroChart has no effect if EmphasizedPoints are used.");
		}
		if (this.getColor() && this.getColor().above && this.getColor().below && this._bThresholdNull) {
			jQuery.sap.log.info("Property Color of LineMicroChart has no effect if it is composed of colors for above and below when property Threshold is null");
		}

		// set markers for space allocation of labels
		var sLeftTopLabel = this.getLeftTopLabel(), sRightTopLabel = this.getRightTopLabel(),
			sLeftBottomLabel = this.getLeftBottomLabel(), sRightBottomLabel = this.getRightBottomLabel();
		if (sRightBottomLabel.length === 0 && sLeftBottomLabel.length === 0) {
			this._bNoBottomLabels = true;
		} else {
			this._bNoBottomLabels = false;
		}
		if (sLeftTopLabel.length === 0 && sRightTopLabel.length === 0) {
			this._bNoTopLabels = true;
		} else {
			this._bNoTopLabels = false;
		}
	};

	/**
	 * Normalizes the points based on the scale determined by the min and max values.
	 *
	 * @private
	 */
	LineMicroChart.prototype._normalizePoints = function() {
		this._aNormalizedPoints = [];

		// compute min and max chart values
		var iMinXActual = this._minXScale,
			iMaxXActual = this._maxXScale,
			iMinYActual = this._minYScale,
			iMaxYActual = this._maxYScale;

		// determine if set min/max values are smaller/greater than their non-set min/max counterpart and log errors.
		// e.g.: maxXValue = 50 & observed minimal X value = 51
		if (jQuery.isNumeric(this.getMinXValue())) {
			this._minXScale = this.getMinXValue();
			if (!jQuery.isNumeric(this.getMaxXValue()) && this._minXScale > iMaxXActual) {
				jQuery.sap.log.error("Property minXValue of LineMicroChart must be smaller to at least one X value of the points aggregation if property maxXValue is not set");
			}
		}
		if (jQuery.isNumeric(this.getMaxXValue())) {
			this._maxXScale = this.getMaxXValue();
			if (!jQuery.isNumeric(this.getMinXValue()) && this._maxXScale < iMinXActual) {
				jQuery.sap.log.error("Property maxXValue of LineMicroChart must be greater to at least one X value of the points aggregation if property minXValue is not set");
			}
		}
		if (jQuery.isNumeric(this.getMinYValue())) {
			this._minYScale = this.getMinYValue();
			if (!jQuery.isNumeric(this.getMaxYValue()) && this._minYScale > iMaxYActual) {
				jQuery.sap.log.error("Property minYValue of LineMicroChart must be greater to threshold or at least one Y value of the points aggregation if property maxYValue is not set");
			}
		}
		if (jQuery.isNumeric(this.getMaxYValue())) {
			this._maxYScale = this.getMaxYValue();
			if (!jQuery.isNumeric(this.getMinYValue()) && this._maxYScale < iMinYActual) {
				jQuery.sap.log.error("Property maxYValue of LineMicroChart must be smaller to threshold or at least one Y value of the points aggregation if property minYValue is not set");
			}
		}
		// log error if X or Y boundaries overlap.
		if (this.getMaxYValue() < this.getMinYValue()) {
			jQuery.sap.log.error("Property maxYValue of LineMicroChart must not be smaller to minYValue");
		}
		if (this.getMaxXValue() < this.getMinXValue()) {
			jQuery.sap.log.error("Property maxXValue of LineMicroChart must not be smaller to minXValue");
		}

		var oPoints = this.getPoints(),
			fXScale = this._maxXScale - this._minXScale,
			fYScale = this._maxYScale - this._minYScale,
			fNormalizedX, fNormalizedY;
		// set flag for valid scaling which influences the rendering of points and lines (used in renderer).
		// no point will be drawn if delta of min and max X/Y is negative
		this._bScalingValid = fXScale >= 0 && fYScale >= 0;
		if (this._bScalingValid) {
			for (var i = 0; i < oPoints.length; i++) {
				// normalize Points in relation to scale but draw straight line in the middle of the chart
				if (this._minXScale === this._maxXScale && oPoints[i].getX() === this._maxXScale) {
					fNormalizedX = 50;
				} else {
					fNormalizedX = (((oPoints[i].getX() - this._minXScale) / fXScale) * 100);
				}
				if (this._minYScale === this._maxYScale && oPoints[i].getY() === this._maxYScale) {
					fNormalizedY = 50;
				} else {
					fNormalizedY = (((oPoints[i].getY() - this._minYScale) / fYScale) * 100);
				}
				this._aNormalizedPoints.push({x: fNormalizedX, y: fNormalizedY});
			}
			this._fNormalizedThreshold = ((this.getThreshold() - this._minYScale) / fYScale) * 100;
		}
	};

	/**
	 * Performs size adjustments that are necessary if the dimensions of the chart change.
	 *
	 * @private
	 */
	LineMicroChart.prototype._onResize = function() {
		this._adjustToParent();
		var $Control = this.$(),
			$Canvas = this.$("sapSuiteLMCSvgElement"),
			$PointsContainer = this.$("sapSuiteLMCPointsContainer"),
			iControlWidth = parseInt($Control.width(), 10),
			iControlHeight = parseInt($Control.height(), 10),
			iChartWidth,
			iChartHeight,
			$TopLabels = $Control.find(".sapSuiteLMCLeftTopLabel, .sapSuiteLMCRightTopLabel"),
			$BottomLabels = $Control.find(".sapSuiteLMCLeftBottomLabel, .sapSuiteLMCRightBottomLabel");

		// resizes the fonts
		if (iControlHeight <= LineMicroChart.EDGE_CASE_HEIGHT_RESIZEFONT || iControlWidth <= LineMicroChart.EDGE_CASE_WIDTH_RESIZEFONT) {
			$Control.addClass("sapSuiteLMCSmallFont");
		} else {
			$Control.removeClass("sapSuiteLMCSmallFont");
		}

		// calculate svg dimensions after font sizes have been applied
		iChartWidth = parseInt($Canvas.width(), 10);
		iChartHeight = parseInt($Canvas.height(), 10);

		// show/hide svg canvas
		if (iChartHeight <= LineMicroChart.MIN_SIZE_CHART || iChartWidth < LineMicroChart.MIN_SIZE_CHART) {
			$Canvas.css("visibility", "hidden");
			$PointsContainer.hide();
		} else {
			$Canvas.css("visibility", "");
			$PointsContainer.show();
		}

		// hides the top labels
		if (iControlHeight <= LineMicroChart.EDGE_CASE_HEIGHT_SHOWTOPLABEL) {
			$TopLabels.css("visibility", "hidden");
		} else if (this._updateLabelVisibility($TopLabels)) { // verifies if the labels are truncated
			$Control.addClass("sapSuiteLMCNoTopLabels");
		}

		// hides the bottom labels
		if (iControlHeight <= LineMicroChart.EDGE_CASE_HEIGHT_SHOWBOTTOMLABEL) {
			$BottomLabels.css("visibility", "hidden");
		} else if (this._updateLabelVisibility($BottomLabels)) { // verifies if the labels are truncated
			$Control.addClass("sapSuiteLMCNoBottomLabels");
		}
	};

	/**
	 * Checks if the label is truncated.
	 *
	 * @private
	 * @param {HTMLElement} label The label to be checked
	 * @returns {boolean} True if the label is truncated, false otherwise.
	 */
	LineMicroChart.prototype._isLabelTruncated = function(label) {
		var $Label = jQuery(label);
		return $Label.prop("offsetWidth") < $Label.prop("scrollWidth") || $Label.prop("offsetLeft") < 0;
	};

	/**
	 * Hide/show the label.
	 *
	 * @private
	 * @param {jQuery} labels The set of labels (top/bottom) to be checked.
	 * @returns {boolean} True if the labels are truncated, otherwise false.
	 */
	LineMicroChart.prototype._updateLabelVisibility = function(labels) {
		if (labels.length === 0) {
			return false;
		}
		var bTruncated = this._isLabelTruncated(labels[0]);
		if (!bTruncated && labels.length > 1) {
			bTruncated = this._isLabelTruncated(labels[1]);
		}
		if (bTruncated) {
			labels.css("visibility", "hidden");
		} else {
			labels.css("visibility", "");
		}

		return bTruncated;
	};

	/**
	 * Adjusts the height and width of the whole control, depending on the parent control.
	 *
	 * @private
	 * @param {Object} the control object
	 */
	LineMicroChart.prototype._adjustToParent = function() {
		var $Control = this.$(),
			sParentHeight, sParentWidth,
			oParent = this.getParent();
		if (!oParent) {
			return;
		}

		// flexbox and tile content
		if (oParent.getMetadata().getName() === "sap.m.FlexBox") {
			sParentHeight = oParent.getHeight();
			sParentWidth = oParent.getWidth();
		} else if (jQuery.isFunction(oParent.getRootNode)) {
			sParentHeight = Math.round(jQuery(oParent.getRootNode()).height());
			sParentWidth = Math.round(jQuery(oParent.getRootNode()).width());
		}
		if (sParentHeight) {
			$Control.height(sParentHeight);
		}
		if (sParentWidth) {
			$Control.width(sParentWidth);
		}
	};

	/**
	 * Creates text for ARIA label and tooltip value.
	 * If tooltip was set to an empty string (using whitespaces) by the application or the tooltip was not set (null/undefined),
	 * the ARIA text gets generated by the control. Otherwise, the given tooltip will also be set as ARIA text.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	LineMicroChart.prototype._createTooltipText = function() {
		var sTooltipText = "";
		var sStartTopLabel = this.getLeftTopLabel();
		var sStartBottomLabel = this.getLeftBottomLabel();
		var sEndTopLabel = this.getRightTopLabel();
		var sEndBottomLabel = this.getRightBottomLabel();
		var bIsFirst = true;

		// add the start labels
		if (sStartTopLabel || sStartBottomLabel) {
			sTooltipText += this._oRb.getText(("LINEMICROCHART_START")) + ": " + sStartBottomLabel + " " + sStartTopLabel;
			bIsFirst = false;
		}
		// add the end labels
		if (sEndTopLabel || sEndBottomLabel) {
			sTooltipText += (bIsFirst ? "" : "\n") + this._oRb.getText(("LINEMICROCHART_END")) + ": " + sEndBottomLabel + " " + sEndTopLabel;
		}

		return sTooltipText;
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	LineMicroChart.prototype._addTitleAttribute = function() {
		if (!this.$().attr("title")) {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	LineMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Binds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	LineMicroChart.prototype._bindMouseEnterLeaveHandler = function () {
		this.$().bind("mouseenter.tooltip", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave.tooltip", this._removeTitleAttribute.bind(this));
	};

	/**
	 * Unbinds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	LineMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
		this.$().unbind("mouseenter.tooltip");
		this.$().unbind("mouseleave.tooltip");
	};

	/**
	 * Deregisters all handlers.
	 *
	 * @private
	 */
	LineMicroChart.prototype._deregisterResizeHandler = function() {
		if (this._sResizeHandlerId) {
			ResizeHandler.deregister(this._sResizeHandlerId);
			this._sResizeHandlerId = null;
		}
	};

	return LineMicroChart;

});

}; // end of sap/suite/ui/microchart/LineMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.LineMicroChartEmphasizedPoint') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.suite.ui.microchart.LineMicroChartEmphasizedPoint control.
jQuery.sap.declare('sap.suite.ui.microchart.LineMicroChartEmphasizedPoint'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/LineMicroChartEmphasizedPoint",["sap/m/library", "sap/suite/ui/microchart/LineMicroChartPoint"],
	function(MobileLibrary, LineMicroChartPoint) {
	"use strict";

	/**
	 * Constructor for a new LineMicroChartEmphasizedPoint.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the emphasized point of the line micro chart.
	 * @extends sap.suite.ui.microchart.LineMicroChartPoint
	 *
	 * @version 1.50.6
	 * @since 1.48.0
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.LineMicroChartEmphasizedPoint
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var LineMicroChartEmphasizedPoint = LineMicroChartPoint.extend("sap.suite.ui.microchart.LineMicroChartEmphasizedPoint", /** @lends sap.suite.ui.microchart.LineMicroChartEmphasizedPoint.prototype */ {
		metadata: {
			properties: {
				/**
				 * Determines the color of the emphasized point.
				 * The property has an effect only if the 'show' property is true.
				 * If at least one emphasized point has a color different from Neutral, the graph is grey; otherwise, the graph is blue.
				 */
				color: {type: "sap.m.ValueColor", group: "Misc", defaultValue: "Neutral"},
				/**
				 * Determines whether the chart point should be displayed or not.
				 */
				show: {type: "boolean", group: "Appearance", defaultValue: false}
			}
		}
	});

	LineMicroChartEmphasizedPoint.prototype.setColor = function(sValue) {
		return this.setProperty("color", MobileLibrary.ValueColor[sValue] || null);
	};

	return LineMicroChartEmphasizedPoint;

});
}; // end of sap/suite/ui/microchart/LineMicroChartEmphasizedPoint.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.LineMicroChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.LineMicroChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/LineMicroChartRenderer",[ 'jquery.sap.global', './library', 'sap/m/library', 'sap/ui/core/theming/Parameters' ],
	function(jQuery, library, MobileLibrary, Parameters) {
	"use strict";

	/**
	 * LineMicroChart renderer.
	 * @namespace
	 */
	var LineMicroChartRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @public
	 */
	LineMicroChartRenderer.render = function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteLMC");
		if (!library._isInGenericTile(oControl)) {
			// no focus for generic tile
			oRm.addClass("sapSuiteLMCFocus");
		}
		if (oControl._bSemanticMode) {
			oRm.addClass("sapSuiteLMCSemanticMode");
		}
		if (oControl._bFocusMode) {
			oRm.addClass("sapSuiteLMCFocusMode");
		}
		if (oControl.getSize()) {
			oRm.addClass("sapSuiteLMCSize" + oControl.getSize());
		}
		if (oControl.hasListeners("press")) {
			oRm.addClass("sapSuiteUiMicroChartPointer");
			oRm.writeAttribute("tabindex", "0");
		}
		if (oControl._bNoBottomLabels) {
			oRm.addClass("sapSuiteLMCNoBottomLabels");
		}
		if (oControl._bNoTopLabels) {
			oRm.addClass("sapSuiteLMCNoTopLabels");
		}
		if (jQuery.inArray(oControl.getSize(), ["S", "XS", "M"]) >= 0) {
			oRm.addClass("sapSuiteLMCSmallFont");
		}
		oRm.writeClasses();

		// screen reader
		var sAriaLabel = oControl._createTooltipText();
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", sAriaLabel);
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapSuiteLMCSvgWrapper");
		oRm.writeClasses();
		oRm.write(">");

		// Top Labels
		this._renderLabelsTop(oRm, oControl);

		// Canvas and SVG
		this._renderCanvas(oRm, oControl);

		// Bottom Labels
		this._renderLabelsBottom(oRm, oControl);
		oRm.write("</div>");

		oRm.write("</div>");
	};

	/**
	 * Renders the HTML for the canvas.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	LineMicroChartRenderer._renderCanvas = function(oRm, oControl) {
		var aPoints = oControl.getPoints();
		var iPointsCount = aPoints.length;

		oRm.write("<div");
		oRm.addClass("sapSuiteLMCSvgCanvas");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<svg");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-sapSuiteLMCSvgElement");
		oRm.writeAttribute("focusable", "false");
		oRm.addClass("sapSuiteLMCSvgElement");
		oRm.writeClasses();
		oRm.write(">");

		// render the lines if valid scaling
		if (oControl._bScalingValid) {
			this._renderThresholdLine(oRm, oControl);
			for (var i = 1; i < iPointsCount; i++) {
				this._renderLine(oRm, oControl,
					oControl._aNormalizedPoints[i - 1].x, oControl._aNormalizedPoints[i - 1].y,
					oControl._aNormalizedPoints[i].x, oControl._aNormalizedPoints[i].y);
			}
		}
		oRm.write('</svg>');
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-sapSuiteLMCPointsContainer");
		oRm.writeClasses();
		oRm.write(">");

		// render the points if valid scaling
		var bShowPoints = oControl.getShowPoints(),
			oPoint,
			bPointEmphasized;
		if (oControl._bScalingValid && (oControl._bFocusMode || bShowPoints)) {
			for (var j = 0; j < iPointsCount; j++) {
				oPoint = aPoints[j];
				bPointEmphasized = this._isPointEmphasized(oPoint);
				if (!oControl._bFocusMode && bShowPoints || oControl._bFocusMode && bPointEmphasized && oPoint.getShow()) {
					this._renderPoint(oRm, oControl, oPoint, j, bPointEmphasized);
				}
			}
		}

		oRm.write( "</div>");
		oRm.write( "</div>");
	};

	/**
	 * Renders the HTML for the point.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {sap.suite.ui.microchart.LineMicroChartPoint} point The point to be rendered
	 * @param {integer} pointIndex The position of the point in the aggregation
	 * @param {boolean} emphasized Sets whether or not an emphasized point is to be rendered
	 * @private
	 */
	LineMicroChartRenderer._renderPoint = function(oRm, oControl, point, pointIndex, emphasized) {
		var oNormalizedPoint = oControl._aNormalizedPoints[pointIndex],
			oChartColor = oControl.getColor();

		// do not draw point if it is outside the canvas
		if (oNormalizedPoint.x < 0 || oNormalizedPoint.x > 100 || oNormalizedPoint.y < 0 || oNormalizedPoint.y > 100) {
			return;
		}

		oRm.write("<div");
		oRm.addStyle("left", jQuery.sap.encodeHTML(oNormalizedPoint.x + "%"));
		oRm.addStyle("top", jQuery.sap.encodeHTML(100 - oNormalizedPoint.y + "%"));

		if (oControl._bFocusMode && oControl._bSemanticMode) {
			oRm.addClass("sapSuiteLMCPoint" + jQuery.sap.encodeHTML(point.getColor()));
		} else if (!oControl._bFocusMode && oControl._bSemanticMode) {
			if (point.getY() >= oControl.getThreshold()) {
				if (MobileLibrary.ValueColor[oChartColor.above]) {
					oRm.addClass("sapSuiteLMCPoint" + jQuery.sap.encodeHTML(oChartColor.above));
				} else {
					oRm.addStyle("background-color", jQuery.sap.encodeHTML(this._getHexColor(oChartColor.above)));
				}
			} else if (MobileLibrary.ValueColor[oChartColor.below]) {
				oRm.addClass("sapSuiteLMCPoint" + jQuery.sap.encodeHTML(oChartColor.below));
			} else {
				oRm.addStyle("background-color", jQuery.sap.encodeHTML(this._getHexColor(oChartColor.below)));
			}
		} else if (!oControl._bSemanticMode && typeof oChartColor === "string") {
			if (MobileLibrary.ValueColor[oChartColor]) {
				oRm.addClass("sapSuiteLMCPoint" + jQuery.sap.encodeHTML(oChartColor));
			} else {
				oRm.addStyle("background-color", jQuery.sap.encodeHTML(this._getHexColor(oChartColor)));
			}
		} else {
			oRm.addClass("sapSuiteLMCPointNeutral");
		}

		oRm.addClass("sapSuiteLMCPoint");
		if (emphasized && point.getShow()) {
			oRm.addClass("sapSuiteLMCPointEmphasized");
		}

		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write("/>");
	};

	/**
	 * Renders the HTML for the threshold line.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	LineMicroChartRenderer._renderThresholdLine = function(oRm, oControl) {
		if (oControl._fNormalizedThreshold >= 0 && oControl._fNormalizedThreshold <= 100 && !oControl._bThresholdNull) {
			oRm.write("<line");
			oRm.writeAttribute("x1", "0%");
			oRm.writeAttributeEscaped("y1", (100 - oControl._fNormalizedThreshold) + "%");
			oRm.writeAttribute("x2", "100%");
			oRm.writeAttributeEscaped("y2", (100 - oControl._fNormalizedThreshold) + "%");
			oRm.addClass("sapSuiteLMCLineThreshold");
			oRm.writeClasses();
			oRm.write("/>");
		}
	};

	/**
	 * Renders the HTML for the line.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} startPosX The horizontal dimension of the starting point
	 * @param {int} startPosY The vertical dimension of the starting point
	 * @param {int} endPosX The horizontal dimension of the ending point
	 * @param {int} endPosY The vertical dimension of the ending point
	 * @private
	 */
	LineMicroChartRenderer._renderLine = function(oRm, oControl, startPosX, startPosY, endPosX, endPosY) {
		// ignore the points which are outside of the scaled canvas ({0, 0}; {100, 100})
		if (this._isDimensionLineOutsideCanvas(oControl, startPosX, endPosX, "X") || // X dimension
			this._isDimensionLineOutsideCanvas(oControl, startPosY, endPosY, "Y")) { // Y dimension
			return;
		}

		var fIntersectionX, fIntersectionY,
			iLineWidth = endPosX - startPosX,
			iLineHeight = endPosY - startPosY;
		if ((startPosY - oControl._fNormalizedThreshold) * (endPosY - oControl._fNormalizedThreshold) < 0) {
			// in case the line intersects 0, two different lines will be drawn instead;
			// infinite loop will not occur because the above condition (0*0) < 0 is always false
			fIntersectionX = startPosX + (oControl._fNormalizedThreshold - startPosY) * iLineWidth / iLineHeight;
			this._renderLine(oRm, oControl, startPosX, startPosY, fIntersectionX, oControl._fNormalizedThreshold);
			this._renderLine(oRm, oControl, fIntersectionX, oControl._fNormalizedThreshold, endPosX, endPosY);
			// for line strokes to be round rather than cut-off, we must allow visible overflow and get rid of actual overflowing elements manually;
			// detect intersections with regard to the given scaling and split lines recursively while keeping directional angles unchanged
		} else if (startPosY * endPosY < 0) { // intersection bottom
			fIntersectionX = startPosX - startPosY * iLineWidth / iLineHeight;
			this._renderLine(oRm, oControl, startPosX, startPosY, fIntersectionX, 0);
			this._renderLine(oRm, oControl, fIntersectionX, 0, endPosX, endPosY);
		} else if ((startPosY - 100) * (endPosY - 100) < 0) { // intersection top
			fIntersectionX = startPosX + (100 - startPosY) * iLineWidth / iLineHeight;
			this._renderLine(oRm, oControl, startPosX, startPosY, fIntersectionX, 100);
			this._renderLine(oRm, oControl, fIntersectionX, 100, endPosX, endPosY);
		} else if (startPosX * endPosX < 0) { // intersection left
			fIntersectionY = startPosY - startPosX * iLineHeight / iLineWidth;
			this._renderLine(oRm, oControl, startPosX, startPosY, 0, fIntersectionY);
			this._renderLine(oRm, oControl, 0, fIntersectionY, endPosX, endPosY);
		} else if ((startPosX - 100) * (endPosX - 100) < 0) { // intersection right
			fIntersectionY = startPosY + (100 - startPosX) * iLineHeight / iLineWidth;
			this._renderLine(oRm, oControl, startPosX, startPosY, 100, fIntersectionY);
			this._renderLine(oRm, oControl, 100, fIntersectionY, endPosX, endPosY);
		} else {
			this._displayLine(oRm, oControl, startPosX, startPosY, endPosX, endPosY);
		}
	};

	/**
	 * Displays the HTML for the line.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} startPosX The horizontal dimension of the starting point
	 * @param {int} startPosY The vertical dimension of the starting point
	 * @param {int} endPosX The horizontal dimension of the ending point
	 * @param {int} endPosY The vertical dimension of the ending point
	 * @private
	 */
	LineMicroChartRenderer._displayLine = function(oRm, oControl, startPosX, startPosY, endPosX, endPosY) {
		oRm.write("<line");
		oRm.writeAttributeEscaped("x1", startPosX + "%");
		oRm.writeAttributeEscaped("y1", (100 - startPosY) + "%");
		oRm.writeAttributeEscaped("x2", endPosX + "%");
		oRm.writeAttributeEscaped("y2", (100 - endPosY) + "%");
		oRm.addClass("sapSuiteLMCLine");

		if (oControl._bSemanticMode && !oControl._bFocusMode) {
			if (startPosY >= oControl._fNormalizedThreshold && endPosY >= oControl._fNormalizedThreshold) {
				if (MobileLibrary.ValueColor[oControl.getColor().above]) {
					oRm.addClass("sapSuiteLMCLine" + jQuery.sap.encodeHTML(oControl.getColor().above));
				} else {
					oRm.addStyle("stroke", jQuery.sap.encodeHTML(this._getHexColor(oControl.getColor().above)));
				}
			} else if (MobileLibrary.ValueColor[oControl.getColor().below]) {
				oRm.addClass("sapSuiteLMCLine" + jQuery.sap.encodeHTML(oControl.getColor().below));
			} else {
				oRm.addStyle("stroke", jQuery.sap.encodeHTML(this._getHexColor(oControl.getColor().below)));
			}
		} else if (!oControl._bSemanticMode && typeof oControl.getColor() === "string") {
			if (MobileLibrary.ValueColor[oControl.getColor()]) {
				oRm.addClass("sapSuiteLMCLine" + jQuery.sap.encodeHTML(oControl.getColor()));
			} else {
				oRm.addStyle("stroke", jQuery.sap.encodeHTML(this._getHexColor(oControl.getColor())));
			}
		} else {
			oRm.addClass("sapSuiteLMCLineNeutral");
		}
		oRm.writeStyles();
		oRm.writeClasses();
		oRm.write("/>");
	};

	/**
	 * Renders the HTML for the bottom labels.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	LineMicroChartRenderer._renderLabelsBottom = function(oRm, oControl) {
		// left bottom label
		var sLeftBottomLabel = oControl.getLeftBottomLabel();
		if (sLeftBottomLabel && sLeftBottomLabel.length > 0) {
			oRm.write("<div");
			oRm.addClass("sapSuiteLMCLeftBottomLabel");
			oRm.addClass("sapSuiteLMCLabel");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(sLeftBottomLabel);
			oRm.write("</div>");
		}

		// right bottom label
		var sRightBottomLabel = oControl.getRightBottomLabel();
		if (sRightBottomLabel && sRightBottomLabel.length > 0) {
			oRm.write("<div");
			oRm.addClass("sapSuiteLMCRightBottomLabel");
			oRm.addClass("sapSuiteLMCLabel");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(sRightBottomLabel);
			oRm.write("</div>");
		}
	};

	/**
	 * Renders the HTML for the top labels.
	 *
	 * @param {sap.ui.core.RenderManager} oRm RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @private
	 */
	LineMicroChartRenderer._renderLabelsTop = function(oRm, oControl) {
		var sTopLeftSemanticClass = "",
			sTopRightSemanticClass = "",
			aPoints = oControl.getPoints(),
			iPointsNum = aPoints.length,
			oFirstPoint,
			oLastPoint;

		if (iPointsNum >= 1) {
			oFirstPoint = aPoints[0];
			oLastPoint = aPoints[iPointsNum - 1];

			if (oControl._bFocusMode && oControl._bSemanticMode && oControl._bScalingValid) {
				if (this._isPointEmphasized(oFirstPoint) && oFirstPoint.getShow()) {
					sTopLeftSemanticClass = "sapSuiteLMCLabel" + oFirstPoint.getColor();
				} else {
					sTopLeftSemanticClass = "sapSuiteLMCLabelNeutral";
				}
				if (this._isPointEmphasized(oLastPoint) && oLastPoint.getShow()) {
					sTopRightSemanticClass = "sapSuiteLMCLabel" + oLastPoint.getColor();
				} else {
					sTopRightSemanticClass = "sapSuiteLMCLabelNeutral";
				}
			} else if (!oControl._bFocusMode && oControl._bSemanticMode && oControl._bScalingValid && oControl.getShowPoints() &&
					MobileLibrary.ValueColor[oControl.getColor().above] && MobileLibrary.ValueColor[oControl.getColor().below]) {

				if (oFirstPoint.getY() >= oControl.getThreshold()) {
					sTopLeftSemanticClass = "sapSuiteLMCLabel" + oControl.getColor().above;
				} else {
					sTopLeftSemanticClass = "sapSuiteLMCLabel" + oControl.getColor().below;
				}
				if (oLastPoint.getY() >= oControl.getThreshold()) {
					sTopRightSemanticClass = "sapSuiteLMCLabel" + oControl.getColor().above;
				} else {
					sTopRightSemanticClass = "sapSuiteLMCLabel" + oControl.getColor().below;
				}
			} else {
				sTopLeftSemanticClass = "sapSuiteLMCLabelNeutral";
				sTopRightSemanticClass = "sapSuiteLMCLabelNeutral";
			}
		}

		// left top label
		var sLeftTopLabel = oControl.getLeftTopLabel();
		if (sLeftTopLabel && sLeftTopLabel.length > 0) {
			oRm.write("<div");
			oRm.addClass("sapSuiteLMCLeftTopLabel");
			oRm.addClass("sapSuiteLMCLabel");
			oRm.addClass(jQuery.sap.encodeHTML(sTopLeftSemanticClass));
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(sLeftTopLabel);
			oRm.write("</div>");
		}

		// right top label
		var sRightTopLabel = oControl.getRightTopLabel();
		if (sRightTopLabel && sRightTopLabel.length > 0) {
			oRm.write("<div");
			oRm.addClass("sapSuiteLMCRightTopLabel");
			oRm.addClass("sapSuiteLMCLabel");
			oRm.addClass(jQuery.sap.encodeHTML(sTopRightSemanticClass));
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(oControl.getRightTopLabel());
			oRm.write("</div>");
		}
	};

	/**
	 * Checks if the given point is an emphasized point.
	 * @param {sap.suite.ui.microchart.LineMicroChartPoint} point The instance of point to be checked
	 * @returns {boolean} True if the given point is emphasized, false if not
	 * @private
	 */
	LineMicroChartRenderer._isPointEmphasized = function(point) {
		return point && point.getMetadata().getName() === "sap.suite.ui.microchart.LineMicroChartEmphasizedPoint";
	};

	/**
	 * Returns the hex color corresponding to the provided color name.
	 *
	 * @private
	 * @param {string} color The name of the color
	 * @returns {string} The corresponding hex color
	 */
	LineMicroChartRenderer._getHexColor = function(color) {
		return Parameters.get(color) || color;
	};

	/**
	 * Tests (one dimension only) if the line is outside of the scaled canvas.
	 *
	 * @private
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 * @param {int} startPos The starting point dimension
	 * @param {int} endPos The ending point dimension
	 * @param {string} axis The axis type of values ('X' or 'Y')
	 * @returns {boolean} True if the line is outside, false otherwise.
	 */
	LineMicroChartRenderer._isDimensionLineOutsideCanvas = function(oControl, startPos, endPos, axis) {
		var iMaxLimit = 100, iMinLimit = 0;
		if (axis === "X" && oControl._minXScale === oControl._maxXScale) { // X axis limits
			iMaxLimit = 50;
			iMinLimit = 50;
		} else if (axis === "Y" && oControl._minYScale === oControl._maxYScale) { // Y axis limits
			iMaxLimit = 50;
			iMinLimit = 50;
		}

		return ((startPos >= iMaxLimit && endPos >= iMaxLimit) && !(startPos === iMaxLimit && endPos === iMaxLimit)) || // iMaxLimit
			((startPos <= iMinLimit && endPos <= iMinLimit) && !(startPos === iMinLimit && endPos === iMinLimit)); // iMinLimit
	};

	return LineMicroChartRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/microchart/LineMicroChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.RadialMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.RadialMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/RadialMicroChart",['jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/suite/ui/microchart/RadialMicroChartRenderer', 'sap/ui/Device', 'sap/m/ValueColor'],
	function(jQuery, library, Control, Renderer, Device, ValueColor) {
	"use strict";

	/**
	 * Describes the configuration of the graphic element on the chart.
	 *
	 * @class
	 * Displays a ring chart highlighting a current status. The status is displayed with a semantically colored radial bar and a percentage value.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.6
	 * @since 1.36.0
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.RadialMicroChart
	 * @ui5-metamodel This control will also be described in the UI5 (legacy) designtime metamodel
	 */
	var RadialMicroChart = Control.extend("sap.suite.ui.microchart.RadialMicroChart", /** @lends sap.suite.ui.microchart.RadialMicroChart.prototype */ {
		/**
		 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
		 * @param {object} [mSettings] Initial settings for the new control
		 */
		constructor : function(sId, mSettings) {
			var bPercentageMode;
			if (mSettings && typeof mSettings.percentage === "number"){
				bPercentageMode = true;
			} else if (sId && typeof sId.percentage === "number") {
				bPercentageMode = true;
			} else {
				bPercentageMode = false;
			}
			try {
				Control.apply(this, arguments);
				this._bPercentageMode = bPercentageMode;
			} catch (e) {
				this.destroy();
				throw e;
			}
		},

		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The total value. This is taken as 360 degrees value on the chart.
				 */
				total: {group:"Data", type:"float", defaultValue: null},

				/**
				 * The fraction of the total value that is displayed.
				 */
				fraction: {group:"Data", type:"float", defaultValue: null},

				/**
				 * The percentage that is displayed.
				 * When a percentage is set, properties total and fraction are not considered.
				 */
				percentage: {group:"Data", type:"float", defaultValue: null},

				/**
				 * The color shown in the completed path.
				 */
				valueColor: {group: "Appearance", type: "sap.m.ValueCSSColor", defaultValue: "Neutral"},

				/**
				 *The size of the chart. If it is not set, the Responsive size is used.
				 *Size XS is not supported
				 *@since 1.44.0
				 */
				size: {group:"Misc", type:"sap.m.Size", defaultValue:"Responsive"}
			},
			events: {
				/**
				 * The event is triggered when the chart is pressed.
				 */
				press: {}
			}
		}
	});

	/* --- Lifecycle Handling --- */

	/**
	 * Init function for the control
	 */
	RadialMicroChart.prototype.init = function() {
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");

		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. The control will only be rendered if all themes are loaded
	 * and everything is properly initialized. We attach a theme check here.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart will only be rendered if the theme is applied.
	 * If this is the case, the control invalidates itself.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	RadialMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			library._removeStandardMargins(this);
		}
		if (!this._getPercentageMode()) {
			if (this.getTotal() === 0) {
				jQuery.sap.log.info("Total can not be 0, please add a valid total value");
			} else {
				this.setProperty("percentage", Math.round((this.getFraction() * 100 / this.getTotal()) * 10) / 10, true);
			}
		}
		this._unbindMouseEnterLeaveHandler();
	};

	RadialMicroChart.prototype.onAfterRendering = function() {
		Renderer._handleOnAfterRendering(this);
		this._bindMouseEnterLeaveHandler();
	};

	/* --- Event Handling --- */

	RadialMicroChart.prototype.ontap = function(oEvent) {
		if (Device.browser.msie) {
			this.$().focus();
		}
		this.firePress();
	};

	RadialMicroChart.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			oEvent.preventDefault();
		}
	};

	RadialMicroChart.prototype.onkeyup = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.ENTER || oEvent.which === jQuery.sap.KeyCodes.SPACE) {
			this.firePress();
			oEvent.preventDefault();
		}
	};

	RadialMicroChart.prototype.attachEvent = function(eventId, data, functionToCall, listener) {
		Control.prototype.attachEvent.call(this, eventId, data, functionToCall, listener);
		if (eventId === "press") {
			this.rerender();
		}
		return this;
	};

	RadialMicroChart.prototype.detachEvent = function(eventId, functionToCall, listener) {
		Control.prototype.detachEvent.call(this, eventId, functionToCall, listener);
		if (eventId === "press") {
			this.rerender();
		}
		return this;
	};

	/* --- Getters and Setters --- */

	/**
	 * Getter for internal property _bPercentageMode.
	 * Percentage mode is configured by setting a percentage value on definition of the control.
	 * If fraction property and total property is used, this _bPercentageMode property is false since percentage gets calculated automatically by the control.
	 *
	 * @private
	 * @returns {boolean} true if chart is in percentage mode, false if not.
	 */
	RadialMicroChart.prototype._getPercentageMode = function() {
		return this._bPercentageMode;
	};

	RadialMicroChart.prototype.setPercentage = function(percentage) {
		if (jQuery.type(percentage) === "number") {
			this._bPercentageMode = true;
			if (percentage !== this.getPercentage()) {
				this.setProperty("percentage", percentage);
			}
		} else {
			this._bPercentageMode = false;
			this.setProperty("percentage", null);
		}
	};

	RadialMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		return this._getTooltipText();
	};

	/* --- Helpers --- */

	/**
	 * Checks if the control's valueColor property is a member of sap.m.ValueColor
	 * @returns {boolean} True if valueColor property is a member of sap.m.ValueColor, false otherwise.
	 * @private
	 */
	RadialMicroChart.prototype._isValueColorValid = function() {
		return ValueColor.hasOwnProperty(this.getValueColor());
	};

	/**
	 * Returns the tooltip for the given chart.
	 * If tooltip was set to an empty string (using whitespaces) by the application,
	 * the tooltip will be set to an empty string. If tooltip was not set (null/undefined),
	 * a tooltip gets generated by the control.
	 *
	 * @private
	 * @returns {string} tooltip for the given control
	 */
	RadialMicroChart.prototype._getTooltipText = function() {
		var sTooltip = this.getTooltip_Text();
		if (!sTooltip) { //Tooltip will be set by control
			sTooltip = this._getAriaAndTooltipText();
		} else if (this._isTooltipSuppressed()) {
			sTooltip = null;
		}
		return sTooltip;
	};

	/**
	 * Returns text for ARIA label.
	 * If tooltip was set to an empty string (using whitespaces) by the application or
	 * the tooltip was not set (null/undefined), the ARIA text gets generated by the control.
	 * Otherwise, the given tooltip will also be set as ARIA text.
	 *
	 * @private
	 * @returns {String} ARIA text for the given control
	 */
	RadialMicroChart.prototype._getAriaText = function() {
		var sAriaText = this.getTooltip_Text();
		if (!sAriaText || this._isTooltipSuppressed()) { //ARIA label will be set by control. Otherwise (else), version generated by control will be used.
			sAriaText = this._getAriaAndTooltipText();
		}
		return sAriaText;
	};

	/**
	 * Returns value that indicates if the tooltip was configured as empty string (e.g. one whitespace).
	 *
	 * @private
	 * @returns {boolean} value that indicates true, if whitespace was set, false in any other case, also null/undefined
	 */
	RadialMicroChart.prototype._isTooltipSuppressed = function() {
		var sTooltip = this.getTooltip_Text();
		if (sTooltip && jQuery.trim(sTooltip).length === 0) {
			return true;
		} else {
			return false;
		}
	};

	/**
	 * Returns the part of the tooltip and ARIA text which is equal.
	 *
	 * @private
	 * @returns {string} value containing the tooltip and ARIA text
	 */
	RadialMicroChart.prototype._getAriaAndTooltipText = function() {
		var sTextValue;
		var fPercentage = this.getPercentage();
		if (fPercentage > 100) {
			fPercentage = 100;
		} else if (fPercentage < 0) {
			fPercentage = 0;
		}
		if (this._isValueColorValid()) {
			sTextValue = this._rb.getText("RADIALMICROCHART_ARIA_LABEL", [this.getPercentage(), this._getStatusText()]);
		} else {
			sTextValue = this._rb.getText("RADIALMICROCHART_ARIA_LABEL", [fPercentage, ValueColor.Neutral]);
		}
		return sTextValue;
	};

	/**
	 * Returns the status text based on color value (to be available for other languages also)
	 *
	 * @private
	 * @returns {string} value containing the status text
	 */
	RadialMicroChart.prototype._getStatusText = function() {
		var sValueColor = this.getValueColor();
		switch (sValueColor) {
			case ValueColor.Error:
				return this._rb.getText("SEMANTIC_COLOR_ERROR");
			case ValueColor.Critical:
				return this._rb.getText("SEMANTIC_COLOR_CRITICAL");
			case ValueColor.Good:
				return this._rb.getText("SEMANTIC_COLOR_GOOD");
			default:
				return this._rb.getText("SEMANTIC_COLOR_NEUTRAL");
		}
	};

	/**
	 * Adds the title attribute to show the tooltip when the mouse enters the chart.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._addTitleAttribute = function() {
		if (!this.$().attr("title")) {
			this.$().attr("title", this.getTooltip_AsString());
		}
	};

	/**
	 * Removes the title attribute to hide the tooltip when the mouse leaves the chart.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this.$().removeAttr("title");
		}
	};

	/**
	 * Binds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._bindMouseEnterLeaveHandler = function () {
		this.$().bind("mouseenter.tooltip", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave.tooltip", this._removeTitleAttribute.bind(this));
	};

	/**
	 * Unbinds the handlers for mouseenter mouseleave events.
	 *
	 * @private
	 */
	RadialMicroChart.prototype._unbindMouseEnterLeaveHandler = function () {
		this.$().unbind("mouseenter.tooltip");
		this.$().unbind("mouseleave.tooltip");
	};

	return RadialMicroChart;
});

}; // end of sap/suite/ui/microchart/RadialMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.StackedBarMicroChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.suite.ui.microchart.StackedBarMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Size'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/StackedBarMicroChart",[ 'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/m/Size', 'sap/m/ValueColor', 'sap/ui/Device', 'sap/m/FlexBox' ],
	function(jQuery, library, Control, Size, ValueColor, Device, FlexBox) {
	"use strict";

	/**
	 * Constructor for a new StackedBarMicroChart control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Illustrates values as stacked and colored bar charts displaying numeric values (as absolute values or percentages) inside the bars.
	 * @extends sap.ui.core.Control
	 *
	 * @version 1.50.6
	 * @since 1.44.0
	 *
	 * @public
	 * @alias sap.suite.ui.microchart.StackedBarMicroChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var StackedBarMicroChart = Control.extend("sap.suite.ui.microchart.StackedBarMicroChart", /** @lends sap.suite.ui.microchart.StackedBarMicroChart.prototype */ {
		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The size of the chart. If not set, the default size is applied based on the size of the device tile.
				 */
				size: {type: "sap.m.Size", group: "Appearance", defaultValue: "Auto"},
				/**
				 * The maximum value can be set to scale StackedBarMicroChartBar values to the same base.
				 * If maxValue is smaller than the sum of all StackedMicroChartBar values, the maxValue is ignored. All values are shown as percentage values (same behavior as maxValue is not used).
				 * If maxValue is equal or bigger than the sum of all StackedMicroChartBars, all values are scaled to the value of maxValue and the percentage mode is turned off. Absolute values are shown instead.
				 * The difference between the sum and maxValue is shown as invisible bar, thus e.g. different StackedBarMicroChart instances can be compared.
				 */
				maxValue: {type: "float", group: "Appearance", defaultValue: null},
				/**
				 * The precision of the rounding for the calculated percentage values of the bars. It defines how many digits after the decimal point are displayed. The default is set to 1 digit.
				 */
				precision: {type: "int", group: "Appearance", defaultValue: 1}
			},
			defaultAggregation : "bars",
			aggregations: {
				/**
				 * The stacked bar chart items.
				 */
				bars: {type: "sap.suite.ui.microchart.StackedBarMicroChartBar", multiple: true, bindable : "bindable"}
			},
			events: {
				/**
				 * The event is fired when the user chooses the microchart.
				 */
				press : {}
			}
		}
	});

	StackedBarMicroChart.EDGE_CASE_HIDE_CHART = 12; // 0.75rem
	StackedBarMicroChart.EDGE_CASE_HEIGHT_SHOW_VALUES = 14; // 0.875rem
	StackedBarMicroChart.BAR_COLOR_PARAM_DEFAULT = "sapUiChartPaletteQualitativeHue";
	StackedBarMicroChart.BAR_LABEL_CSSCLASS = ".sapSuiteStackedMCBarLabel";
	StackedBarMicroChart.BAR_CSSCLASS = ".sapSuiteStackedMCBar";

	/* =========================================================== */
	/* API events */
	/* =========================================================== */
	StackedBarMicroChart.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
		Control.prototype.attachEvent.call(this, sEventId, oData, fnFunction, oListener);
		if (this.hasListeners("press")) {
			this.$().attr("tabindex", 0).addClass("sapSuiteUiMicroChartPointer");
		}

		return this;
	};

	StackedBarMicroChart.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
		Control.prototype.detachEvent.call(this, sEventId, fnFunction, oListener);
		if (!this.hasListeners("press")) {
			this.$().removeAttr("tabindex").removeClass("sapSuiteUiMicroChartPointer");
		}
		return this;
	};

	/**
	 * Handler for click button event
	 * @param {jQuery} oEvent The jQuery event object
	 */
	StackedBarMicroChart.prototype.onclick = function(oEvent) {
		if (Device.browser.msie || Device.browser.edge) {
			this.$().focus();
		}
		if (this.hasListeners("press")) {
			oEvent.stopPropagation();
			this.firePress();
		}
	};

	/**
	 * Handler for space button event
	 */
	StackedBarMicroChart.prototype.onsapspace = StackedBarMicroChart.prototype.onclick;

	/**
	 * Handler for enter button event
	 */
	StackedBarMicroChart.prototype.onsapenter = StackedBarMicroChart.prototype.onclick;

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */
	StackedBarMicroChart.prototype.setMaxValue = function(fMaxValue) {
		var bMaxValueValid = jQuery.isNumeric(fMaxValue);
		this.setProperty("maxValue", bMaxValueValid ? fMaxValue : null);
		return this;
	};

	StackedBarMicroChart.prototype.setTooltip = function(tooltip) {
		this._title = null;
		this.setAggregation("tooltip", tooltip, true);
	};

	StackedBarMicroChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		return this._getTooltip();
	};

	/* =========================================================== */
	/* Protected methods */
	/* =========================================================== */
	StackedBarMicroChart.prototype.init = function() {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this.setAggregation("tooltip", "{AltText}", true);
		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. In order for the control to be rendered only if all themes are loaded
	 * and everything is properly initialized, we attach a theme check in here.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The StackedBarMicroChart is not being rendered until the theme was applied.
	 * If the theme is applied, rendering starts by the control itself.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	StackedBarMicroChart.prototype.onBeforeRendering = function() {
		if (library._isInGenericTile(this)) {
			library._removeStandardMargins(this);
		}

		this.$().unbind("mouseenter", this._addTitleAttribute);
		this.$().unbind("mouseleave", this._removeTitleAttribute);
	};

	StackedBarMicroChart.prototype.onAfterRendering = function() {
		if (this.getSize() === Size.Responsive) {
			this._adjustToParent();
		}
		library._checkControlIsVisible(this, this._onControlIsVisible);
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._onControlIsVisible = function() {
		Device.media.attachHandler(this._onResize, this);
		this._onResize();

		//attaches handler for mouse enter event
		this.$().bind("mouseenter", this._addTitleAttribute.bind(this));
		this.$().bind("mouseleave", this._removeTitleAttribute.bind(this));
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */
	/**
	 * Returns the localized text corresponding to the semantic color
	 *
	 * @private
	 * @param {String} color The semantic color
	 * @returns {String} localized semantic color text
	 */
	StackedBarMicroChart.prototype._getLocalizedColorMeaning = function(color) {
		return this._oRb.getText(("SEMANTIC_COLOR_" + color).toUpperCase());
	};

	/**
	 * Calculates the width in percents of chart bars' elements accordingly with provided chart values.
	 *
	 * @private
	 * @returns {Array} Array of calculated values for each chart bar.
	 */
	StackedBarMicroChart.prototype._calculateChartData = function() {
		var aCalculatedData = [];
		var aData = this.getBars();
		var iItemsCount = aData.length;
		var iCPLength = 12;
		var iCPIndex = 1;
		var iPrecision = this.getPrecision();

		var fnNextColor = function() {
			if (iCPLength) {
				if (iCPIndex === iCPLength) {
					iCPIndex = 1;
				}
				return StackedBarMicroChart.BAR_COLOR_PARAM_DEFAULT + (iCPIndex++);
			}
		};

		// calculates the max width
		var fTotalValue = 0;
		var fMaxValue = this.getMaxValue();
		var i = 0;
		for (i; i < iItemsCount; i++) {
			if (!isNaN(aData[i].getValue())) {
				fTotalValue = fTotalValue + aData[i].getValue();
			}
		}
		var fTotal = Math.max(fMaxValue, fTotalValue);
		var bValidMaxValue = fMaxValue >= fTotalValue;

		// calculates the items percentages
		var fPercTotal = 0;
		var fWidthPercTotal = 0;
		var oItem;
		for (i = 0; i < iItemsCount; i++) {
			oItem = {
				oBarData: aData[i]
			};

			// color
			oItem.color = aData[i].getValueColor();
			if (!oItem.color) {
				oItem.color = fnNextColor();
			}

			// value
			var fItemValue = isNaN(aData[i].getValue()) ? 0 : aData[i].getValue();
			var fValueNotRounded = fTotal === 0 ? 0 : fItemValue * 100 / fTotal;
			oItem.value = this._roundFloat(fValueNotRounded, iPrecision);
			oItem.width = this._roundFloat(fValueNotRounded, 2);
			// increase total
			fPercTotal = fPercTotal + oItem.value;
			fWidthPercTotal = fWidthPercTotal + oItem.width;

			// display value
			if (bValidMaxValue) {
				// absolute value
				oItem.displayValue = aData[i].getDisplayValue() || String(fItemValue);
			} else {
				// percentage value
				oItem.displayValue = aData[i].getDisplayValue() || String(oItem.value + "%");
			}

			aCalculatedData.push(oItem);
		}
		fPercTotal = this._roundFloat(fPercTotal, iPrecision);
		fWidthPercTotal = this._roundFloat(fWidthPercTotal, 2);

		// total > 100% (can make problems by displaying the bars on the same line)
		var oMax;
		if (fWidthPercTotal > 100 && aCalculatedData.length > 0) {
			oMax = aCalculatedData.slice(0).sort(function(a, b) { return b.width - a.width; })[0];
			oMax.width = this._roundFloat(oMax.width - fWidthPercTotal + 100, 2);
		}

		// calculates the transparent bar percentage
		if (fMaxValue > fTotalValue) {
			oItem = {
				value: this._roundFloat(100 - fPercTotal, iPrecision),
				width: this._roundFloat(100 - fWidthPercTotal, 2)
			};
			aCalculatedData.push(oItem);
		} else if (aCalculatedData.length > 0 && fWidthPercTotal < 100) {
			// total < 100%: avoiding empty space
			oMax = aCalculatedData.slice(0).sort(function(a, b) { return b.width - a.width; })[0];
			oMax.width = this._roundFloat(oMax.width - fWidthPercTotal + 100, 2);
		}

		return aCalculatedData;
	};

	/**
	 * Rounds the number to float with the specified precision
	 *
	 * @private
	 * @param {Object} number The number to be rounded
	 * @param {Int} precision The rounding precision
	 * @returns {Object} the rounded object
	 */
	StackedBarMicroChart.prototype._roundFloat = function(number, precision) {
		return parseFloat(number.toFixed(precision));
	};

	/**
	 * Conducts size adjustments that are necessary if the dimensions of the chart change.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._onResize = function() {
		this._resizeVertically();
		this._resizeHorizontally();
	};

	/**
	 * Adjusts the height and width of the whole control depending on parent control.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._adjustToParent = function() {
		var sParentHeight, sParentWidth;
		var oParent = this.getParent();
		var $this = this.$();
		if (!oParent) {
			return;
		}

		if (oParent instanceof FlexBox) {
			sParentHeight = parseInt(oParent.$().height(), 10);
			sParentWidth = parseInt(oParent.$().width(), 10);
		} else if (oParent.getMetadata() && oParent.getMetadata().getName() === "sap.m.TileContent") {
			sParentHeight = parseInt(oParent.$().children().height(), 10);
			sParentWidth = parseInt(oParent.$().children().width(), 10);
		} else if (jQuery.isFunction(oParent.getRootNode)) {
			sParentHeight = Math.round(jQuery(oParent.getRootNode()).height());
			sParentWidth = Math.round(jQuery(oParent.getRootNode()).width());
		}
		if (sParentHeight > 0) {
			$this.height(sParentHeight);
		}
		if (sParentWidth > 0) {
			$this.width(sParentWidth);
		}
	};

	/**
	 * Performs vertical responsiveness adjustment.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._resizeVertically = function() {
		var $this = this.$();
		var iBarHeight = parseFloat($this.find(StackedBarMicroChart.BAR_CSSCLASS).height(), 10);
		var iChartHeight = parseFloat($this.height(), 10);

		if (iChartHeight < StackedBarMicroChart.EDGE_CASE_HIDE_CHART) {
			$this.hide();
			return;
		}
		if (iChartHeight > iBarHeight) {
			$this.height(iBarHeight);
		}
		if (iBarHeight < StackedBarMicroChart.EDGE_CASE_HEIGHT_SHOW_VALUES) {
			$this.find(StackedBarMicroChart.BAR_LABEL_CSSCLASS).hide();
		} else {
			$this.find(StackedBarMicroChart.BAR_LABEL_CSSCLASS).css("line-height", iBarHeight + "px");
		}
	};

	/**
	 * Performs horizontal responsiveness adjustment.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._resizeHorizontally = function() {
		var $this = this.$();
		var iWidth = parseFloat($this.width(), 10);

		if (iWidth < StackedBarMicroChart.EDGE_CASE_HIDE_CHART) {
			$this.hide();
		}
		this._hideTruncatedLabel(StackedBarMicroChart.BAR_LABEL_CSSCLASS);
	};

	/**
	 * Checks if any label of the specified CSS class on the chart is truncated or not matching inside the area;
	 * If yes, do not show the label
	 *
	 * @private
	 * @param {String} classSelector The class selector
	 */
	StackedBarMicroChart.prototype._hideTruncatedLabel = function(classSelector) {
		var $this = this.$();
		var $Labels = $this.find(classSelector);
		for (var i = 0; i < $Labels.length; i++) {
			if ($Labels[i].offsetWidth < $Labels[i].scrollWidth) {
				$this.find($Labels[i]).hide();
			}
		}
	};

	/**
	 * Returns text for ARIA label.
	 * If tooltip was set to an empty string (using whitespaces) by the application or the tooltip was not set (null/undefined),
	 * the ARIA text gets generated by the control. Otherwise, the given tooltip will also be set as ARIA text.
	 *
	 * @param {Object} chartData The current chart data object
	 * @returns {String} chartData The data needed for the chart to be displayed
	 * @private
	 */
	StackedBarMicroChart.prototype._createTooltipText = function(chartData) {
		var sTooltipText = "";
		if (this._isTooltipSuppressed()) {
			return "";
		}

		var oData,
			oBar,
			sBarTooltip,
			bAddNewline = false;

		for (var i = 0; i < chartData.length; i++) {
			oData = chartData[i];
			oBar = oData.oBarData;
			sBarTooltip = oBar && oBar.getTooltip_AsString();

			if (oBar && oBar._isTooltipSuppressed()) {
				continue;
			}

			if (bAddNewline) {
				sTooltipText += "\n";
			}
			bAddNewline = true;

			if (sBarTooltip) {
				sTooltipText += sBarTooltip;
			} else if (oData.displayValue) {
				sTooltipText += oData.displayValue;
				if (ValueColor[oData.color]) {
					sTooltipText += " " + this._getLocalizedColorMeaning(oData.color);
				}
			}
		}

		return sTooltipText;
	};

	/**
	 * Returns the tooltip for the given chart.
	 * If tooltip was set to an empty string (using whitespaces) by the application, the tooltip will be set to an empty string.
	 * If tooltip was not set (null/undefined), a tooltip gets generated by the control.
	 *
	 * @private
	 * @returns {string} tooltip for the given control
	 */
	StackedBarMicroChart.prototype._getTooltip  = function() {
		if (this._isTooltipSuppressed()) {
			return null;
		}
		var oTooltip = this.getTooltip();
		var oChartData = this._calculateChartData();
		var sTooltip = this._createTooltipText(oChartData);

		if (typeof oTooltip === "string" || oTooltip instanceof String) {
			sTooltip = oTooltip.split("{AltText}").join(sTooltip).split("((AltText))").join(sTooltip);
			return sTooltip;
		} else if (this.isBound("tooltip") && !oTooltip) {
			return sTooltip;
		}
		return oTooltip;
	};

	/**
	 * Returns value that indicates if the tooltip was configured as empty string (e.g. one whitespace).
	 *
	 * @private
	 * @returns {boolean} Value that indicates true, if whitespace was set, false in any other case, also null/undefined
	 */
	StackedBarMicroChart.prototype._isTooltipSuppressed = function() {
		var sTooltip = this.getTooltip();
		return sTooltip && jQuery.trim(sTooltip).length === 0;
	};

	/**
	 * Adds title attribute to show tooltip when the mouse enters chart.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._addTitleAttribute = function() {
		if (this.$().attr("title")) {
			return;
		}
		if (!this._title) {
			this._title = this._getTooltip();
		}
		if (this._title) {
			this.$().attr("title", this._title);
		}
	};

	/**
	 * Removes title attribute to let tooltip disappear when the mouse left the chart.
	 *
	 * @private
	 */
	StackedBarMicroChart.prototype._removeTitleAttribute = function() {
		if (this.$().attr("title")) {
			this._title = this.$().attr("title");
			this.$().removeAttr("title");
		}
	};

	return StackedBarMicroChart;

});

}; // end of sap/suite/ui/microchart/StackedBarMicroChart.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.StackedBarMicroChartBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */

// Provides sap.suite.ui.microchart.StackedBarMicroChartBar control.
jQuery.sap.declare('sap.suite.ui.microchart.StackedBarMicroChartBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueCSSColor'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/StackedBarMicroChartBar",['jquery.sap.global', './library', 'sap/ui/core/Element', "sap/m/ValueCSSColor"],
	function(jQuery, library, Element, ValueCSSColor) {
	"use strict";

	/**
	 * Constructor for a new StackedBarMicroChartBar.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Contains the values of the stacked bar chart.
	 * @extends sap.ui.core.Element
	 *
	 * @version 1.50.6
	 * @since 1.44.0
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.microchart.StackedBarMicroChartBar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var StackedBarMicroChartBar = Element.extend("sap.suite.ui.microchart.StackedBarMicroChartBar", /** @lends sap.suite.ui.microchart.StackedBarMicroChartBar.prototype */ {
		metadata : {
			library: "sap.suite.ui.microchart",
			properties: {
				/**
				 * The value for stacked bar chart. It is used in order to determine the width of the bar
				 */
				value: {type: "float", group: "Data", defaultValue: "0"},

				/**
				 * The color of the bar.
				 */
				valueColor: {type: "sap.m.ValueCSSColor", group: "Appearance", defaultValue: null},

				/**
				 * If this property is set, then it will be displayed instead of value.
				 */
				displayValue: {type: "string", group: "Data", defaultValue: null}
			}
		}
	});

	StackedBarMicroChartBar.prototype.setValue = function(fValue, bSuppressInvalidate) {
		var bIsValueSet = jQuery.isNumeric(fValue);
		return this.setProperty("value", bIsValueSet ? fValue : NaN, bSuppressInvalidate);
	};

	StackedBarMicroChartBar.prototype.setValueColor = function(sValue, bSuppressInvalidate) {
		var bIsValueSet = ValueCSSColor.isValid(sValue);
		return this.setProperty("valueColor", bIsValueSet ? sValue : null, bSuppressInvalidate);
	};

	/**
	 * Returns value that indicates if the tooltip was configured as empty string (e.g. one whitespace).
	 *
	 * @private
	 * @returns {boolean} Value that indicates true if whitespace was set, false in any other case, also null/undefined
	 */
	StackedBarMicroChartBar.prototype._isTooltipSuppressed = function() {
		var sTooltip = this.getTooltip();
		return sTooltip && jQuery.trim(sTooltip).length === 0;
	};

	return StackedBarMicroChartBar;

});

}; // end of sap/suite/ui/microchart/StackedBarMicroChartBar.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.microchart.InteractiveLineChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2017 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.suite.ui.microchart.InteractiveLineChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/microchart/InteractiveLineChart",['jquery.sap.global', './library', 'sap/m/library', 'sap/ui/core/Control', 'sap/suite/ui/microchart/InteractiveLineChartPoint', 'sap/ui/Device', 'sap/ui/core/ResizeHandler', 'sap/m/FlexBox'],
	function(jQuery, library, MobileLibrary, Control, InteractiveLineChartPoint, Device, ResizeHandler, FlexBox) {
	"use strict";

	/**
	 * Constructor for a new InteractiveLineChart control.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The InteractiveLineChart control belongs to a chart control group in the MicroChart library having a number of interactive features.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.50.6
	 *
	 * @public
	 * @since 1.42.0
	 * @constructor
	 * @alias sap.suite.ui.microchart.InteractiveLineChart
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var InteractiveLineChart = Control.extend("sap.suite.ui.microchart.InteractiveLineChart", /** @lends sap.suite.ui.microchart.InteractiveLineChart.prototype */ {
		metadata : {
			library : "sap.suite.ui.microchart",
			properties : {
				/**
				 * The maximum number of points to be displayed on the chart.
				 */
				displayedPoints : {
					type : "int",
					group : "Appearance",
					defaultValue : 6
				},
				/**
				 * If this property is set to true, one or multiple points are selectable.
				 */
				selectionEnabled : {
					type : "boolean",
					group : "Behavior",
					defaultValue : true
				}
			},
			defaultAggregation: "points",
			aggregations : {
				/**
				 * Points displayed in the chart.
				 */
				points : {type : "sap.suite.ui.microchart.InteractiveLineChartPoint", multiple : true, bindable : "bindable"}
			},
			events : {
				/**
				 * Event is fired when a user has selected or deselected a point.
				 */
				selectionChanged : {
					parameters : {
						/**
						 * All points which are in selected state.
						 */
						selectedPoints : {type : "sap.suite.ui.microchart.InteractiveLineChartPoint[]"},
						/**
						 * The point which is pressed.
						 */
						point : {type : "sap.suite.ui.microchart.InteractiveLineChartPoint"},
						/**
						 * The selection state of the point which is pressed.
						 */
						selected : {type : "boolean"}
					}
				},
				/**
				 * The event is fired only in non-interactive mode when the user presses the chart; in this mode, the points and surrounding areas are not selectable. Non-interactive mode is decided upon internally, depending on the size of the areas surrounding the points.
				 */
				press: {}
			},
			associations : {
				/**
				 * Association to controls which label this control (see WAI-ARIA attribute aria-labelledby).
				 */
				ariaLabelledBy : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
			}
		}
	});

	/* =========================================================== */
	/* Variables and Constants */
	/* =========================================================== */

	InteractiveLineChart.MAX_SCALED_CANVAS_VALUE = 99;
	InteractiveLineChart.MIN_SCALED_CANVAS_VALUE = 1;
	// Responsiveness (cozy vs compact)
	InteractiveLineChart.AREA_WIDTH_INTERACTIVE_MINVALUE = 48;
	InteractiveLineChart.AREA_WIDTH_INTERACTIVE_MINVALUE_COMPACT = 32;
	// Responsiveness (cozy and compact)
	InteractiveLineChart.CHART_HEIGHT_MINVALUE = 106;
	InteractiveLineChart.AREA_WIDTH_MINVALUE = 24;
	InteractiveLineChart.LABEL_WIDTH_MINVALUE = 32;
	InteractiveLineChart.AREA_WIDTH_SMALLFONT = 36;

	/* =========================================================== */
	/* Life-cycle Handling */
	/* =========================================================== */

	InteractiveLineChart.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.microchart");
		this._aNormalizedValues = [];
		this._iAreaWidthInteractiveMinValue = InteractiveLineChart.AREA_WIDTH_INTERACTIVE_MINVALUE;
		this._bInteractiveMode = true; // in non-interactive mode, the user cannot interact with the chart (user actions are ignored)
		this._fNormalizedZero = 0;

		this._bThemeApplied = true;
		if (!sap.ui.getCore().isInitialized()) {
			this._bThemeApplied = false;
			sap.ui.getCore().attachInit(this._handleCoreInitialized.bind(this));
		} else {
			this._handleCoreInitialized();
		}
	};

	/**
	 * Handler for the core's init event. In order for the control to be rendered only if all themes
	 * are loaded and everything is properly initialized, we attach a theme check in here.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._handleCoreInitialized = function() {
		this._bThemeApplied = sap.ui.getCore().isThemeApplied();
		if (!this._bThemeApplied) {
			sap.ui.getCore().attachThemeChanged(this._handleThemeApplied, this);
		}
	};

	/**
	 * The chart is not being rendered until the theme was applied. If the theme is applied,
	 * rendering starts by the control itself.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._handleThemeApplied = function() {
		this._bThemeApplied = true;
		this.invalidate();
		sap.ui.getCore().detachThemeChanged(this._handleThemeApplied, this);
	};

	InteractiveLineChart.prototype.onBeforeRendering = function() {
		this._bCompact = this._isCompact();
		this._bInteractiveMode = true;
		var aPoints = this.getPoints();
		// visible points number is determined by the lower limit between the displayedPoints property value and the actual number of available points
		this._iVisiblePointsCount = Math.min(this.getDisplayedPoints(), aPoints.length);
		// set the data needed for responsiveness
		this._setResponsivenessData();
		if (!this.data("_parentRenderingContext") && jQuery.isFunction(this.getParent)) {
			this.data("_parentRenderingContext", this.getParent());
		}
		this._updateNormalizedValues();
		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);
		this._bSemanticTooltip = false;
		for (var i = 0; i < this._iVisiblePointsCount; i++) {
			if (aPoints[i].getColor() !== MobileLibrary.ValueColor.Neutral) {
				this._bSemanticTooltip = true;
				break;
			}
		}
	};

	InteractiveLineChart.prototype.onAfterRendering = function() {
		this._adjustToParent();
		library._checkControlIsVisible(this, this._onControlIsVisible);
	};

	/**
	 * Callback function which is called when the control is visible, which means that the check via
	 * library._checkControlIsVisible was successful.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._onControlIsVisible = function() {
		this._sResizeHandlerId = ResizeHandler.register(this, this._onResize.bind(this));
		this._onResize();

		// attach an interval timer in order to check the control's density mode and invalidate on change
		sap.ui.getCore().attachIntervalTimer(this._checkContentDensity, this);
	};

	InteractiveLineChart.prototype.exit = function() {
		this._deregisterResizeHandler();
		sap.ui.getCore().detachIntervalTimer(this._checkContentDensity, this);
	};

	/* =========================================================== */
	/* Event handling */
	/* =========================================================== */

	/**
	 * Handler for click
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onclick = function (oEvent) {
		// no click for disabled mode
		if (!this.getSelectionEnabled()) {
			return;
		}

		if (this._bInteractiveMode) {
			var $InteractionSection = jQuery(oEvent.target).parent();
			var iHasFocus, $Focusables = this.$().find(".sapSuiteILCInteractionArea");
			var iIndex = this.$().find(".sapSuiteILCSection").index($InteractionSection);
			if (iIndex >= 0) {
				this._toggleSelected(iIndex);
				iHasFocus = $Focusables.index(this.$().find(".sapSuiteILCInteractionArea[tabindex='0']"));
				this._switchTabindex(iHasFocus, iIndex, $Focusables);
			}
		} else {
			this.firePress();
			if (Device.browser.msie) {
				this.$().focus();
				oEvent.preventDefault();
			}
		}
	};

	/**
	 * Handler for left arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapleft = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteILCInteractionArea");
		var iIndex = $Focusables.index(oEvent.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex - 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for right arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapright = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteILCInteractionArea");
		var iIndex = $Focusables.index(oEvent.target);
		if ($Focusables.length > 0) {
			this._switchTabindex(iIndex, iIndex + 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for up arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapup = InteractiveLineChart.prototype.onsapleft;

	/**
	 * Handler for down arrow button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapdown = InteractiveLineChart.prototype.onsapright;

	/**
	 * Handler for enter button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapenter = function(oEvent) {
		if (this._bInteractiveMode) {
			var iIndex = this.$().find(".sapSuiteILCInteractionArea").index(oEvent.target);
			if (iIndex !== -1) {
				this._toggleSelected(iIndex);
			}
			oEvent.preventDefault();
			oEvent.stopImmediatePropagation();
		} else {
			this.firePress();
		}
	};

	/**
	 * Handler for space button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapspace = InteractiveLineChart.prototype.onsapenter;

	/**
	 * Handler for home button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsaphome = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteILCInteractionArea");
		var iIndex = $Focusables.index(oEvent.target);
		if (iIndex !== 0 && $Focusables.length > 0) {
			this._switchTabindex(iIndex, 0, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/**
	 * Handler for end button event
	 *
	 * @param {sap.ui.base.Event} oEvent which was fired
	 */
	InteractiveLineChart.prototype.onsapend = function(oEvent) {
		var $Focusables = this.$().find(".sapSuiteILCInteractionArea");
		var iIndex = $Focusables.index(oEvent.target), iLength = $Focusables.length;
		if (iIndex !== iLength - 1 && iLength > 0) {
			this._switchTabindex(iIndex, iLength - 1, $Focusables);
		}
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
	};

	/* =========================================================== */
	/* API methods */
	/* =========================================================== */

	InteractiveLineChart.prototype.getTooltip_AsString = function() { //eslint-disable-line
		var sTooltip = this.getTooltip_Text();
		if (!sTooltip) { //Tooltip will be set by control
			sTooltip = this._createTooltipText();
		} else if (library._isTooltipSuppressed(sTooltip)) {
			sTooltip = null;
		}

		return sTooltip;
	};

	/**
	 * Retrieves the selected point elements from the points aggregation and returns them.
	 *
	 * @returns {sap.suite.ui.microchart.InteractiveLineChartPoint[]} Array of sap.suite.ui.microchart.InteractiveLineChartPoint instances.
	 * @public
	 */
	InteractiveLineChart.prototype.getSelectedPoints = function() {
		var aSelectedPoints = [], aPoints = this.getAggregation("points");

		for (var i = 0; i < aPoints.length; i++) {
			if (aPoints[i].getSelected()) {
				aSelectedPoints.push(aPoints[i]);
			}
		}
		return aSelectedPoints;
	};

	/**
	 * Already selected points will be deselected and members of the selectedPoints attribute which are part of the points aggregation will be set to selected state.
	 *
	 * @param {sap.suite.ui.microchart.InteractiveLineChartPoint | sap.suite.ui.microchart.InteractiveLineChartPoint[]} selectedPoints A point element or an array of points for which the status should be set to selected.
	 * @returns {sap.suite.ui.microchart.InteractiveLineChart} this to allow method chaining
	 * @public
	 */
	InteractiveLineChart.prototype.setSelectedPoints = function(selectedPoints) {
		var aPoints = this.getAggregation("points"),
			iIndex;

		this._deselectAllSelectedPoints();
		if (!selectedPoints) {
			return this;
		}
		if (selectedPoints instanceof InteractiveLineChartPoint) {
			selectedPoints = [selectedPoints];
		}

		if (jQuery.isArray(selectedPoints)) {
			for (var i = 0; i < selectedPoints.length; i++) {
				iIndex = this.indexOfAggregation("points", selectedPoints[i]);
				if (iIndex >= 0) {
					aPoints[iIndex].setProperty("selected", true, true);
				} else {
					jQuery.sap.log.warning("setSelectedPoints method called with invalid InteractiveLineChartPoint element");
				}
			}
		}
		this.invalidate();
		return this;
	};

	/* =========================================================== */
	/* Private methods */
	/* =========================================================== */

	/**
	 * Looks for the class '.sapUiSizeCompact' on the control and its parents to determine whether to render cozy or compact density mode.
	 *
	 * @returns {boolean} True if class 'sapUiSizeCompact' was found, otherwise false.
	 * @private
	 */
	InteractiveLineChart.prototype._isCompact = function() {
		return jQuery("body").hasClass("sapUiSizeCompact") || this.$().is(".sapUiSizeCompact") || this.$().closest(".sapUiSizeCompact").length > 0;
	};

	/**
	 * Changes data for compact mode related to cozy (default) mode.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._setResponsivenessData = function() {
		if (this._bCompact) {
			this._iAreaWidthInteractiveMinValue = InteractiveLineChart.AREA_WIDTH_INTERACTIVE_MINVALUE_COMPACT;
		} else {
			this._iAreaWidthInteractiveMinValue = InteractiveLineChart.AREA_WIDTH_INTERACTIVE_MINVALUE;
		}
	};

	/**
	 * Checks the current content density and invalidates the control if it is changed in order to trigger a re-rendering.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._checkContentDensity = function() {
		if (this.$().length > 0) {
			var bCompact = this._isCompact();
			if (bCompact !== this._bCompact) {
				this._bCompact = bCompact;
				this.invalidate();
			}
		}
	};

	/**
	 * Sets all the currently selected point elements as not selected.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._deselectAllSelectedPoints = function() {
		var aPoints = this.getPoints();
		for (var i = 0; i < aPoints.length; i++) {
			if (aPoints[i].getSelected()) {
				aPoints[i].setProperty("selected", false, true);
			}
		}
	};

	/**
	 * Adds and removes the tabindex between elements to support keyboard navigation.
	 *
	 * @param {int} oldIndex which is the column index whose tabindex is 0 previously.
	 * @param {int} newIndex which is the column index whose tabindex should be set to 0 this time.
	 * @param {jQuery} focusables all the elements who has tabindex attribute.
	 * @private
	 */
	InteractiveLineChart.prototype._switchTabindex = function(oldIndex, newIndex, focusables) {
		if (oldIndex >= 0 && oldIndex < focusables.length && newIndex >= 0 && newIndex < focusables.length) {
			focusables.eq(oldIndex).removeAttr("tabindex");
			focusables.eq(newIndex).attr("tabindex", "0");
			focusables.eq(newIndex).focus();
		}
	};

	/**
	 * Updates the selection state of the point element.
	 *
	 * @param {int} index The index of the point element
	 * @private
	 */
	InteractiveLineChart.prototype._toggleSelected = function(index) {
		var oPoint = this.getPoints()[index],
			$SectionArea = this.$("point-area-" + index),
			$Point = this.$("point-" + index);

		if (oPoint.getSelected()) {
			$SectionArea.add($Point).removeClass("sapSuiteILCSelected");
			oPoint.setProperty("selected", false, true);
		} else {
			$SectionArea.add($Point).addClass("sapSuiteILCSelected");
			oPoint.setProperty("selected", true, true);
		}

		$SectionArea.find(".sapSuiteILCInteractionArea").attr("aria-selected", oPoint.getSelected());
		this.fireSelectionChanged({
			selectedPoints: this.getSelectedPoints(),
			point: oPoint,
			selected: oPoint.getSelected()
		});
	};

	/**
	 * Normalizes the values of the points on the scale 0 to 100.
	 * NA values are normalized to 0.
	 * If there is only one value except NAs then it is normalized to 50.
	 * The created values are written to the private array. The points aggregation remains unchanged.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._updateNormalizedValues = function() {
		var nScaledValue, nPointLength = this.getPoints().length;
		this.nMax = Number.NaN;
		this.nMin = Number.NaN;
		this._aNormalizedValues = [];
		var i;
		for (i = 0; i < nPointLength; i++) {
			if (!this.getPoints()[i]._bNullValue) {
				if (isNaN(this.nMax)) {
					this.nMax = this.getPoints()[i].getValue();
				} else {
					this.nMax = Math.max(this.nMax, this.getPoints()[i].getValue());
				}
				if (isNaN(this.nMin)) {
					this.nMin = this.getPoints()[i].getValue();
				} else {
					this.nMin = Math.min(this.nMin, this.getPoints()[i].getValue());
				}
			}
		}
		var nRange = this.nMax - this.nMin;

		for (i = 0; i < nPointLength; i++) {
			if (this.getPoints()[i]._bNullValue) {
				this._aNormalizedValues.push(0);
			} else if (nRange) {
				nScaledValue = (this.getPoints()[i].getValue() - this.nMin) / nRange;
				nScaledValue = InteractiveLineChart.MIN_SCALED_CANVAS_VALUE + nScaledValue * (InteractiveLineChart.MAX_SCALED_CANVAS_VALUE - InteractiveLineChart.MIN_SCALED_CANVAS_VALUE);
				this._aNormalizedValues.push(nScaledValue);
			} else {
				this._aNormalizedValues.push(50);
			}
		}
		// show divider only for mixed values
		if (this.nMin < 0 && this.nMax > 0) {
			this._fNormalizedZero = (Math.max(0 - this.nMin, 0) / nRange) * 100;
		} else {
			this._fNormalizedZero = null;
		}
	};

	/**
	 * Adjusts the height and width of the whole control if this is required depending on parent control.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._adjustToParent = function() {
		if (this.data("_parentRenderingContext") && this.data("_parentRenderingContext") instanceof FlexBox) {
			// Subtracts two pixels, otherwise there's not enough space for the outline, and the chart won't be rendered properly
			var $Parent = this.data("_parentRenderingContext").$();
			var iParentWidth = parseFloat($Parent.width()) - 2;
			var iParentHeight = parseFloat($Parent.height()) - 2;
			this.$().outerWidth(iParentWidth);
			this.$().outerHeight(iParentHeight);
		}
	};

	/**
	 * Verifies if the chart is enabled for user actions or not.
	 *
	 * @returns {boolean} True if the chart is enabled for user actions, otherwise false.
	 * @private
	 */
	InteractiveLineChart.prototype._isChartEnabled = function() {
		return this.getSelectionEnabled() && this._bInteractiveMode;
	};

	/**
	 * Switches the mode from interactive to non-interactive depending on the logic behind
	 *
	 * @param {int} areaWidth The current area selection width
	 * @private
	 */
	InteractiveLineChart.prototype._switchModeInteractive = function(areaWidth) {
		var $this = this.$(),
			bSwitchMode = false;
		if (areaWidth < this._iAreaWidthInteractiveMinValue) {
			if (this._bInteractiveMode) {
				this._bInteractiveMode = false;
				bSwitchMode = true;
				$this.addClass("sapSuiteILCNonInteractive");
				// set the focus area
				if (this.getSelectionEnabled()) {
					var $ActiveArea = $this.find(".sapSuiteILCInteractionArea[tabindex='0']");
					this._iActiveElement = $this.find(".sapSuiteILCInteractionArea").index($ActiveArea);
					$ActiveArea.removeAttr("tabindex");
					$this.attr("tabindex", "0");
				}
				$this.attr({
					"role": "button",
					"aria-multiselectable": "false",
					"aria-disabled": !this._isChartEnabled()
				});
			}
		} else if (!this._bInteractiveMode) {
			this._bInteractiveMode = true;
			bSwitchMode = true;
			$this.removeClass("sapSuiteILCNonInteractive");
			// set the focus area
			if (this.getSelectionEnabled()) {
				$this.removeAttr("tabindex");
				if (!this._iActiveElement || this._iActiveElement < 0) {
					this._iActiveElement = 0;
				}
				$this.find(".sapSuiteILCInteractionArea").eq(this._iActiveElement).attr("tabindex", "0");
			}
			$this.attr({
				"role": "listbox",
				"aria-multiselectable": "true",
				"aria-disabled": !this._isChartEnabled()
			});
		}

		//set the tooltip in case of mode switch
		if (bSwitchMode) {
			if (this._isChartEnabled()) {
				$this.removeAttr("title");
				this._addInteractionAreaTooltip();
			} else {
				$this.find(".sapSuiteILCInteractionArea").removeAttr("title");
				$this.attr("title", this.getTooltip_AsString());
			}
		}
	};

	/**
	 * Adds a tooltip for every interaction area
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._addInteractionAreaTooltip = function() {
		var $InteractionAreas = this.$().find(".sapSuiteILCInteractionArea"),
			oPoints = this.getPoints();
		$InteractionAreas.each(function(index, element) {
			jQuery(element).attr("title", oPoints[index].getTooltip_AsString());
		});
	};

	/**
	 * Handles the responsiveness.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._onResize = function() {
		var iInteractionAreaWidth,
		bBottomLabelTruncated = false,
		$this = this.$(),
		$TopLabels = $this.find(".sapSuiteILCToplabel"),
		$BottomLabels = $this.find(".sapSuiteILCBottomText"),
		$InteractionArea = $this.find(".sapSuiteILCInteractionArea"),
		iCurrentControlHeight = $this.height(),
		iCurrentControlWidth = $this.width(),
		nPointLength = this.getPoints().length,
		$FirstBottomLabel = $this.find(".sapSuiteILCSection:first-child .sapSuiteILCBottomText"),
		$LastBottomLabel = $this.find(".sapSuiteILCSection:last-child .sapSuiteILCBottomText");

		// area width
		if ($InteractionArea.length > 0) {
			iInteractionAreaWidth = $InteractionArea[0].getBoundingClientRect().width;
		}

		// chart visibility
		if (iInteractionAreaWidth < InteractiveLineChart.AREA_WIDTH_MINVALUE || iCurrentControlHeight < InteractiveLineChart.CHART_HEIGHT_MINVALUE) {
			$this.css("visibility", "hidden");
			return;
		} else {
			$this.css("visibility", "");
		}

		// non-interactive mode
		this._switchModeInteractive(iInteractionAreaWidth);

		// small font for labels and values
		if (iInteractionAreaWidth <= InteractiveLineChart.AREA_WIDTH_SMALLFONT) {
			$this.addClass("sapSuiteILCSmallFont");
		} else {
			$this.removeClass("sapSuiteILCSmallFont");
		}

		// temporarily reset bottom labels
		$this.removeClass("sapSuiteILCExpandedLabels");
		$FirstBottomLabel.add($LastBottomLabel).css("width", "");

		// value labels visibility (hide them if they do not fit in the interaction area)
		for (var i = 0; i < nPointLength; i++) {
			if ($TopLabels.eq(i).prop("offsetWidth") < $TopLabels.eq(i).prop("scrollWidth")) {
				$TopLabels.eq(i).css("visibility", "hidden");
			} else {
				$TopLabels.eq(i).css("visibility", "");
			}
			if ($BottomLabels.eq(i).prop("offsetWidth") < $BottomLabels.eq(i).prop("scrollWidth")) {
				bBottomLabelTruncated = true;
			}
		}

		// bottom labels
		if (iInteractionAreaWidth < InteractiveLineChart.LABEL_WIDTH_MINVALUE && bBottomLabelTruncated) {
			$this.addClass("sapSuiteILCExpandedLabels");
			$FirstBottomLabel.add($LastBottomLabel).css("width", (iCurrentControlWidth / 2) - 4 + "px");
		} else {
			$this.removeClass("sapSuiteILCExpandedLabels");
			$FirstBottomLabel.add($LastBottomLabel).css("width", "");
		}
	};

	/**
	 * Deregisters all handlers.
	 *
	 * @private
	 */
	InteractiveLineChart.prototype._deregisterResizeHandler = function() {
		if (this._sResizeHandlerId) {
			ResizeHandler.deregister(this._sResizeHandlerId);
			this._sResizeHandlerId = null;
		}
	};

	/**
	 * Creates the tooltip value for the chart.
	 * If the tooltip was set to an empty string (using whitespaces) by the application or the tooltip was not set (null/undefined),
	 * the tooltip gets internally generated by the control.
	 *
	 * @returns {string} The tooltip text
	 * @private
	 */
	InteractiveLineChart.prototype._createTooltipText = function() {
		var bIsFirst = true, sAreaTooltip,
			sTooltipText = "",
			oPoints = this.getPoints();
		for (var i = 0; i < this._iVisiblePointsCount; i++) {
			// concatenate individual tooltips
			sAreaTooltip = oPoints[i]._getAreaTooltip();
			if (sAreaTooltip) {
				sTooltipText += (bIsFirst ? "" : "\n") + sAreaTooltip;
				bIsFirst = false;
			}
		}

		return sTooltipText;
	};

	return InteractiveLineChart;
});

}; // end of sap/suite/ui/microchart/InteractiveLineChart.js
