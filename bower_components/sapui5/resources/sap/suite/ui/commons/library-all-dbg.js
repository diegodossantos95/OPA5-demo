// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerContent') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainerContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Event'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetails'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetailsItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.SelectionDetailsItemLine'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ChartContainerContent",[ 'jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/base/Event', 'sap/m/SelectionDetails', 'sap/m/SelectionDetailsItem', 'sap/m/SelectionDetailsItemLine' ],
	function(jQuery, Control, Event, SelectionDetails, SelectionDetailsItem, SelectionDetailsItemLine) {
	"use strict";

	/**
	 * Constructor for a new ChartContainerContent.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Content aggregation for ChartContainer.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ChartContainerContent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ChartContainerContent = Control.extend("sap.suite.ui.commons.ChartContainerContent", /** @lends sap.suite.ui.commons.ChartContainerContent.prototype */ {
		metadata: {

			library: "sap.suite.ui.commons",
			properties: {

				/**
				 * Icon of the Chart.
				 */
				icon: { type: "string", group: "Misc", defaultValue: null },

				/**
				 * Title of the Chart/Table
				 */
				title: { type: "string", group: "Misc", defaultValue: null }
			},
			aggregations: {

				/**
				 * Chart or Table as content of the ChartToolBar. Supported Types: sap.viz.ui5.controls.VizFrame, sap.m.Table, sap.ui.table.Table
				 */
				content: { type: "sap.ui.core.Control", multiple: false }
			}
		}
	});

	/* =========================================================== */
	/* Lifecycle methods                                           */
	/* =========================================================== */
	ChartContainerContent.prototype.init = function() {
		this._oSelectionDetails = new SelectionDetails();
		this._oSelectionDetails.registerSelectionDetailsItemFactory(ChartContainerContent._selectionDetailsItemFactory);
	};

	ChartContainerContent.prototype.onBeforeRendering = function() {
		this._oSelectionDetails.detachSelectionHandler("_selectionDetails");
		var oChart = this.getContent();
		if (oChart && oChart.getMetadata().getName() === "sap.viz.ui5.controls.VizFrame") {
			this._oSelectionDetails.attachSelectionHandler("_selectionDetails", oChart);
		}
	};

	ChartContainerContent.prototype.exit = function() {
		if (this._oSelectionDetails) {
			this._oSelectionDetails.destroy();
			this._oSelectionDetails = null;
		}
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */
	/**
	 * Getter for the Selection Details facade.
	 *
	 * @returns {sap.m.SelectionDetailsFacade} The reduced Selection Details facade for outer framework usages.
	 * @since 1.48
	 * @public
	 */
	ChartContainerContent.prototype.getSelectionDetails = function() {
		ChartContainerContent._addEventMapping(this._oSelectionDetails);
		return this._oSelectionDetails.getFacade();
	};

	/* =========================================================== */
	/* Private methods                                             */
	/* =========================================================== */
	/**
	 * Gets SelectionDetails instance
	 *
	 * @returns {sap.m.SelectionDetails} The newly created SelectionDetails for ChartContainer.
	 * @private
	 */
	ChartContainerContent.prototype._getSelectionDetails = function() {
		var oContent = this.getContent();
		if (oContent && oContent.getMetadata().getName() === "sap.viz.ui5.controls.VizFrame") {
			return this._oSelectionDetails;
		}
	};

	/**
	 * This function creates items that will be displayed in the Selection Details.
	 *
	 * @param {object[]} displayData The display data that is provided by the vizFrame event for the item being created.
	 * @returns {sap.m.SelectionDetailsItem} The newly created SelectionDetailsItem that will be added to the items aggregation of SelectionDetails.
	 * @private
	 * @static
	 */
	ChartContainerContent._selectionDetailsItemFactory = function (displayData) {
		var aLines = [];
		for (var i = 0; i < displayData.length; i++) {
			aLines.push(new SelectionDetailsItemLine({
				label: displayData[i].label,
				value: displayData[i].value,
				unit: displayData[i].unit
			}));
		}
		return new SelectionDetailsItem({
			lines: aLines
		});
	};

	ChartContainerContent._aProxyEvent = [ "beforeOpen", "beforeClose", "navigate", "actionPress" ];

	/**
	 * Event mapping in order to return SelectionDetails facade for facade events
	 *
	 * @param {sap.m.SelectionDetails} selectionDetails The instance for which the event mapping should be done.
	 * @private
	 */
	ChartContainerContent._addEventMapping = function(selectionDetails) {
		var fnAttachEvent = selectionDetails.attachEvent;
		selectionDetails.attachEvent = function (eventId, data, callback, listener) {
			// Only proxy facade events. Not core events.
			if (ChartContainerContent._aProxyEvent.indexOf(eventId) === -1) {
				fnAttachEvent.apply(this, arguments);
				return;
			} else if (jQuery.type(data) === "function") {
				listener = callback;
				callback = data;
				data = null;
			}
			fnAttachEvent.apply(selectionDetails, [ eventId, data, proxy, listener || selectionDetails.getFacade()] );

			function proxy(event) {
				var oEvent = new Event(eventId, event.oSource, event.mParameters);
				oEvent.getSource = selectionDetails.getFacade;
				if (eventId === "actionPress") {
					event.getParameters().items = getFacades(event);
				} else if (eventId === "navigate") {
					event.getParameters().item = event.getParameter("item").getFacade();
				}
				callback.call(listener || selectionDetails.getFacade(), oEvent, data);
			}

			function getFacades(event) {
				var aItems = event.getParameter("items"),
					aItemsFacades = [];
				for (var i = 0; i < aItems.length; i++) {
					aItemsFacades.push(aItems[i].getFacade());
				}
				return aItemsFacades;
			}
		};
	};

	return ChartContainerContent;
});

}; // end of sap/suite/ui/commons/ChartContainerContent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerContentRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainerContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/ChartContainerContentRenderer",function() {
	"use strict";

	/**
	 * @class ChartContainerContent renderer.
	 * @static
	 */
	var ChartContainerContentRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ChartContainerContentRenderer.render = function(oRm, oControl) {
		oRm.renderControl(oControl.getContent());
	};

	return ChartContainerContentRenderer;
}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ChartContainerContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/ChartContainerRenderer",function() {
	"use strict";

	/**
	 * @class ChartContainer renderer.
	 * @static
	 */
	var ChartContainerRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ChartContainerRenderer.render = function(oRm, oControl) {
		var selectedChart = oControl.getSelectedContent();

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteUiCommonsChartContainer");
		oRm.writeClasses();
		oRm.write(">");

		// wrapper
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-wrapper");
		oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapSuiteUiCommonsChartContainerToolBarArea");
		oRm.writeClasses();
		oRm.write(">");
		// toolbar
		oRm.renderControl(oControl.getToolbar());
		oRm.write("</div>");// end toolbar

		// chart part
		oRm.write("<div");
		oRm.addClass("sapSuiteUiCommonsChartContainerChartArea");
		oRm.writeClasses();
		oRm.write(">");

		if (selectedChart !== null) {
			oRm.renderControl(selectedChart);
		} else if (oControl.getContent().length > 0) {
			selectedChart = oControl.getContent()[0];
			oRm.renderControl(selectedChart);
		}

		oRm.write("</div>");// end chartArea
		oRm.write("</div>"); // end wrapper

		oRm.write("</div>"); // end container
	};

	return ChartContainerRenderer;
}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ChartContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerToolbarPlaceholder') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainerToolbarPlaceholder'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ChartContainerToolbarPlaceholder",[ 'sap/ui/core/Control' ], function(Control) {
	"use strict";

	/**
	 * Constructor for a new ChartContainerToolbarPlaceholder.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Provides a placeholder for the embedded chart container toolbar.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ChartContainerToolbarPlaceholder
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ChartContainerToolbarPlaceholder = Control.extend("sap.suite.ui.commons.ChartContainerToolbarPlaceholder", /** @lends sap.suite.ui.commons.ChartContainerToolbarPlaceholder.prototype */ {
		metadata: {
			library: "sap.suite.ui.commons"
		}
	});

	return ChartContainerToolbarPlaceholder;
});

}; // end of sap/suite/ui/commons/ChartContainerToolbarPlaceholder.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainerToolbarPlaceholderRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainerToolbarPlaceholderRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/ChartContainerToolbarPlaceholderRenderer",function() {
	"use strict";

	/**
	 * @class ChartContainerToolbarPlaceholder renderer.
	 * @static
	 */
	var ChartContainerToolbarPlaceholderRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ChartContainerToolbarPlaceholderRenderer.render = function(oRm, oControl) {};

	return ChartContainerToolbarPlaceholderRenderer;
}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ChartContainerToolbarPlaceholderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnectionLabelRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowConnectionLabelRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowConnectionLabelRenderer",['sap/m/ButtonRenderer','sap/ui/core/Renderer'],
	function(ButtonRenderer, Renderer) {
	"use strict";

	/**
	 * @class ProcessFlowConnectionLabel renderer.
	 * @static
	 */
	var ProcessFlowConnectionLabelRenderer = Renderer.extend(ButtonRenderer);


	return ProcessFlowConnectionLabelRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ProcessFlowConnectionLabelRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewerRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ThreePanelThingViewerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.ux3.ThingViewerRenderer'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ThreePanelThingViewerRenderer",['sap/ui/core/Renderer', 'sap/ui/ux3/ThingViewerRenderer'],
	function(Renderer, ThingViewerRenderer) {
	"use strict";

	/**
	 * @class ThreePanelThingViewer renderer.
	 * @static
	 */
	var ThreePanelThingViewerRenderer = Renderer.extend(ThingViewerRenderer);


	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ThreePanelThingViewerRenderer.renderContent = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapSuiteTvMinHeight");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<header");
		oRm.writeAttribute("id", oControl.getId() + "-header");
		oRm.addClass("sapSuiteTvTitle");
		oRm.writeClasses();
		oRm.addStyle("width", oControl.getSidebarWidth());
		oRm.writeStyles();
		oRm.write(">");
		this.renderHeader(oRm, oControl);
		oRm.write("</header>");

		oRm.write("<nav");
		oRm.writeAttribute("id", oControl.getId() + "-navigation");
		oRm.addClass("sapSuiteTvNav");
		if (!oControl.getLogo()) {
			oRm.addClass("sapSuiteTvNavNoLogo");
		}
		oRm.writeClasses();
		oRm.addStyle("width", oControl.getSidebarWidth());
		oRm.writeStyles();
		oRm.write(">");
		oRm.renderControl(oControl._getNavBar());
		oRm.write("</nav>");

		oRm.write("<aside");
		oRm.writeAttribute("id", oControl.getId() + "-headerContent");
		oRm.addClass("sapSuiteTvHeader");
		oRm.writeClasses();
		oRm.write(">");
		this.renderHeaderContent(oRm, oControl);
		oRm.write("</aside>");

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-facetContent");
		oRm.addClass("sapSuiteTvFacet");
		oRm.writeClasses();
		oRm.write(">");
		this.renderFacetContent(oRm, oControl);
		oRm.write("</div>");

		if (oControl.getLogo()) {
			oRm.write("<footer");
			oRm.writeAttribute("id", oControl.getId() + "-footer");
			oRm.addClass("sapSuiteTvLogo");
			oRm.writeClasses();
			oRm.addStyle("width", oControl.getSidebarWidth());
			oRm.writeStyles();
			oRm.write(">");
			oRm.write("<img");
			oRm.writeAttribute("id", oControl.getId() + "-logo");
			oRm.writeAttribute("role", "presentation");
			oRm.writeAttributeEscaped("src", oControl.getLogo());
			oRm.addClass("sapSuiteTvLogoIcon");
			oRm.writeClasses();
			oRm.write("/>");
			oRm.write("</footer>");
		}
		oRm.write("</div>");
	};

	ThreePanelThingViewerRenderer.renderHeader = function(oRm, oControl) {
		var iMenuContentLength = oControl.getMenuContent().length;

		oRm.write("<div");
		oRm.addClass("sapSuiteTvTitleBar");
		oRm.writeClasses();
		oRm.write(">");
		if (oControl.getIcon()) {
			oRm.write("<img");
			oRm.writeAttribute("id", oControl.getId() + "-swatch");
			oRm.writeAttribute("role", "presentation");
			oRm.writeAttributeEscaped("src", oControl.getIcon());
			oRm.addClass("sapSuiteTvTitleIcon");
			oRm.writeClasses();
			oRm.write("/>");
		}

		if (iMenuContentLength > 0) {
			oRm.renderControl(oControl._oMenuButton);
		}

		oRm.write("<div");
		oRm.writeAttribute("role", "heading");
		oRm.writeAttribute("aria-level", 1);
		oRm.writeAttributeEscaped("title", oControl.getType());
		oRm.addClass("sapSuiteTvTitleType");
		oRm.addClass("sapSuiteTvTextCrop");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oControl.getType());
		oRm.write("</div>");

		oRm.write("<div");
		oRm.writeAttribute("role", "heading");
		oRm.writeAttribute("aria-level", 2);
		oRm.writeAttributeEscaped("title", oControl.getTitle());
		oRm.addClass("sapSuiteTvTitleFirst");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oControl.getTitle());
		oRm.write("</div>");

		oRm.write("<div");
		oRm.writeAttribute("role", "heading");
		oRm.writeAttribute("aria-level", 3);
		oRm.writeAttributeEscaped("title", oControl.getSubtitle());
		oRm.addClass("sapSuiteTvTitleSecond");
		oRm.addClass("sapSuiteTvTextCrop");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oControl.getSubtitle());
		oRm.write("</div>");
		oRm.write("</div>");

		this.renderFlyOutMenu(oRm, oControl);
	};

	ThreePanelThingViewerRenderer.renderFacetContent = function(oRm, oControl) {
		var aFacetContent = oControl.getFacetContent();
		for (var i = 0; i < aFacetContent.length; i++) {
			var oGroup = aFacetContent[i];

			oRm.write("<div");
			oRm.writeAttribute("role", "form");
			if (oGroup.getColspan()) {
				oRm.addClass("sapUiUx3TVFacetThingGroupSpan");
			} else {
				oRm.addClass("sapUiUx3TVFacetThingGroup");
			}
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("<div");
			oRm.writeAttributeEscaped("title", oGroup.getTitle());
			oRm.addClass("sapUiUx3TVFacetThingGroupContentTitle");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("<span>");
			oRm.writeEscaped(oGroup.getTitle());
			oRm.write("</span>");
			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass("sapUiUx3TVFacetThingGroupContent");
			oRm.writeClasses();
			oRm.write(">");
			var oGroupContent = oGroup.getContent();
			for (var j = 0; j < oGroupContent.length; j++) {
				oRm.renderControl(oGroupContent[j]);
			}
			oRm.write("</div>");
			oRm.write("</div>");
		}
	};

	ThreePanelThingViewerRenderer.renderFlyOutMenu = function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-menu-popup");
		oRm.writeAttribute("role", "menu");
		oRm.addClass("sapSuiteTvPopupMenu");
		oRm.writeClasses();
		oRm.write(">");

		var aMenuContent = oControl.getMenuContent();
		for (var i = 0; i < aMenuContent.length; i++) {
			var oMenuItem = aMenuContent[i];
			oMenuItem.addStyleClass("sapSuiteTvPopupMenuLink");
			oRm.renderControl(oMenuItem);
		}

		oRm.write("</div>");
	};

	return ThreePanelThingViewerRenderer;
}, /* bExport= */ true);
}; // end of sap/suite/ui/commons/ThreePanelThingViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.Timeline.designtime') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides the Design Time Metadata for the sap.m.Button control
jQuery.sap.declare('sap.suite.ui.commons.Timeline.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/Timeline.designtime",[
		"jquery.sap.global"
	],
	function (jQuery) {
		"use strict";

		var TOOLBAR_TRANSLATION_KEYS = Object.freeze({
			"-sortIcon" : "TIMELINE_SORT_BUTTON",
			"-filterIcon": "TIMELINE_FILTER_BUTTON",
			"-searchField": "TIMELINE_SEARCH_FIELD"
		});

		var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

		function getTranslation(sId) {
			return resourceBundle.getText(sId);
		}

		function getHeaderBarElementMetadata(sTranslationKey) {
			return {
				actions: {
					remove: {
						changeType: "hideToolbarItem",
						changeOnRelevantContainer: true
					},
					reveal: {
						changeType: "unhideToolbarItem",
						changeOnRelevantContainer: true,
						getLabel: function() {
							return getTranslation(sTranslationKey);
						}
					}
				},
				name: {
					singular: getTranslation.bind(null, sTranslationKey),
					plural: getTranslation.bind(null, sTranslationKey)
				}
			};
		}

		function getPropageMetadataFieldFactory(sIdSufix, sTranslationKey) {
			return function (oElement) {
				var sId = oElement.getId();
				if (jQuery.sap.endsWith(sId, sIdSufix)) {
					return getHeaderBarElementMetadata(sTranslationKey);
				}
				return {};
			};
		}

		return {
			aggregations: {
				content: {
					ignore: true
				},
				customFilter: {
					ignore: true
				},
				filterList: {
					ignore: true
				},
				suggestionItems: {
					ignore: true
				},
				//Fake aggregations pointing to inner components
				headerBar: {
					propagateMetadata: function (oElement) {
						var sId = oElement.getId(),
							sKey;
						for (sKey in TOOLBAR_TRANSLATION_KEYS) {
							if (jQuery.sap.endsWith(sId, sKey)) {
								return getHeaderBarElementMetadata(TOOLBAR_TRANSLATION_KEYS[sKey]);
							}
						}
						if (jQuery.sap.endsWith(sId, "-headerBar")) {
							return getHeaderBarElementMetadata("TIMELINE_HEADER_BAR");
						}
						return {};
					},
					propagateRelevantContainer: true
				},
				searchField: {
					propagateMetadata: getPropageMetadataFieldFactory("-searchField", "TIMELINE_SEARCH_FIELD"),
					propagateRelevantContainer: true
				},
				sortIcon: {
					propagateMetadata: getPropageMetadataFieldFactory("-sortIcon", "TIMELINE_SORT_BUTTON"),
					propagateRelevantContainer: true
				},
				filterIcon: {
					propagateMetadata: getPropageMetadataFieldFactory("-filterIcon", "TIMELINE_FILTER_BUTTON"),
					propagateRelevantContainer: true
				}
			},
			actions: {
				remove: {
					changeType: "hideControl"
				},
				reveal: {
					changeType: "unhideControl",
					getLabel: function () {
						return getTranslation("TIMELINE_ACCESSIBILITY_TITLE");
					}
				}
			},
			name: {
				singular: "TIMELINE_ACCESSIBILITY_TITLE",
				plural: "TIMELINE_ACCESSIBILITY_TITLE"
			}
		};
	}, /* bExport= */ false);
}; // end of sap/suite/ui/commons/Timeline.designtime.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineNavigator') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.TimelineNavigator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/TimelineNavigator",[
	"jquery.sap.global",
	"sap/ui/core/delegate/ItemNavigation"
], function (jQuery, ItemNavigation) {
	"use strict";

	function stringEndsWith(sString, sPattern) {
		var iDiff = sString.length - sPattern.length;
		return iDiff >= 0 && sString.lastIndexOf(sPattern) === iDiff;
	}

	/**
	 * Creates an instance of TimelineNavigator.
	 * @class TimelineNavigator An extension of ItemNavigator for Timeline.
	 *
	 * @extends sap.ui.core.delegate.ItemNavigation
	 *
	 * @param {Element} oDomRef The root DOM reference that includes all items
	 * @param {Element[]} aItemDomRefs Array of DOM references representing the items for the navigation
	 * @param {boolean} [bNotInTabChain=false] Whether the selected element should be in the tab chain or not
	 * @param {Element[]} aRows 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
	 *
	 * @constructor
	 * @alias sap.suite.ui.commons.TimelineNavigator
	 * @public
	 */
	var TimelineNavigator = ItemNavigation.extend("sap.suite.ui.commons.TimelineNavigator", {
		constructor: function(oDomRef, aItemDomRefs, bNotInTabChain, aRows) {
			ItemNavigation.apply(this, arguments);
			this.setCycling(false);
			this._aRows = aRows;
			this.iActiveTabIndex = 0;
			this.iTabIndex = 0;
			this.bRefocusOnNextUpdate = false;
		}
	});

	/**
	 * Update references to navigation objects.
	 * @param {Element} oDomRef The root DOM reference that includes all items
	 * @param {Element[]} aItemDomRefs Array of DOM references representing the items for the navigation
	 * @param {Element[]} aRows 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
	 * @public
	 */
	TimelineNavigator.prototype.updateReferences = function(oDomRef, aItemDomRefs, aRows) {
		this.oDomRef = oDomRef;
		this.setItemDomRefs(aItemDomRefs);
		this._aRows = aRows;
		if (this.bRefocusOnNextUpdate) {
			this._refocusItem();
			this.bRefocusOnNextUpdate = false;
		}
	};

	/**
	 * Sets a flag which will refocus new items on next reference update based on last selected index.
	 */
	TimelineNavigator.prototype.refocusOnNextUpdate = function() {
		this.bRefocusOnNextUpdate = true;
	};

	/**
	 * Refocuses item after references were updated. It tries to find first next visible element.
	 * @private
	 */
	TimelineNavigator.prototype._refocusItem = function() {
		var iItemToFocus = this.iFocusedIndex;
		if (iItemToFocus < 0) {
			return;
		}
		while (!jQuery(this.aItemDomRefs[iItemToFocus]).is(":visible")) {
			iItemToFocus++;
			if (iItemToFocus >= this.aItemDomRefs.length) {
				iItemToFocus = 0;
			}
			if (iItemToFocus === this.iFocusedIndex) {
				break;
			}
		}
		setTimeout(function () {
			if (this.aItemDomRefs) {
				this.focusItem(iItemToFocus);
			}
		}.bind(this), 0);
	};

	/**
	 * Sets the item DOM references as an array for the items
	 *
	 * @param {Element[]} aItemDomRefs Array of DOM references representing the items
	 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
	 * @public
	 */
	TimelineNavigator.prototype.setItemDomRefs = function(aItemDomRefs) {
		jQuery.sap.assert(Array.isArray(aItemDomRefs), "aItemDomRefs must be an array of DOM elements");
		this.aItemDomRefs = aItemDomRefs;

		if (this.iFocusedIndex > aItemDomRefs.length - 1) {
			this.iFocusedIndex = aItemDomRefs.length - 1;
		}

		// in nested ItemNavigation the tabindex must only be set if it's the focused item of the parent ItemNavigation
		for (var i = 0; i < this.aItemDomRefs.length; i++) {
			if (this.aItemDomRefs[i]) { // separators return null here
				var $Item = jQuery(this.aItemDomRefs[i]);

				// as this code can be executed even if the items are not visible (e.g. Popup is closed)
				// no focusable check can be performed. So only for the currently focused item
				// the tabindex is set to 0. For all items with tabindex 0 the tabindex is set to -1
				// Items without tabindex are checked for focusable on the first focusin on the root.
				if (i == this.iFocusedIndex && !$Item.data("sap.INRoot")) {
					$Item.attr("tabIndex", this.iActiveTabIndex);
				} else if ($Item.attr("tabindex") == "0") { // set tabindex to -1 only if already set to 0
					$Item.attr("tabIndex", this.iTabIndex);
				}

				$Item.data("sap.INItem", true);
				$Item.data("sap.InNavArea", true); //Item is in navigation area - allow navigation mode and edit mode

				if ($Item.data("sap.INRoot") && i != this.iFocusedIndex) {

					// item is root of an nested ItemNavigation -> set tabindexes from its items to -1
					$Item.data("sap.INRoot").setNestedItemsTabindex();
				}
			}
		}

		return this;
	};

	/**
	 * Sets the <code>tabindex</code> of the items.
	 *
	 * This cannot be done while setting items because at this point of time the items might
	 * be invisible (because e.g. a popup closed), meaning the focusable check will fail.
	 * So the items <code>tabindex</code>es are set if the rootDom is focused the first time.
	 *
	 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
	 * @private
	 */
	ItemNavigation.prototype.setItemsTabindex = function() {

		for (var i = 0; i < this.aItemDomRefs.length; i++) {
			if (this.aItemDomRefs[i]) { // separators return null here
				var $Item = jQuery(this.aItemDomRefs[i]);
				if ($Item.is(":sapFocusable")) {

					// not focusable items (like labels) must not get a tabindex attribute
					if (i == this.iFocusedIndex && !$Item.data("sap.INRoot")) {
						$Item.attr("tabIndex", this.iActiveTabIndex);
					} else {
						$Item.attr("tabIndex", this.iTabIndex);
					}
				}
			}
		}

		return this;
	};

	/**
	 * Sets the focused index to the given index.
	 *
	 * @param {int} iIndex Index of the item
	 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
	 * @private
	 */
	ItemNavigation.prototype.setFocusedIndex = function(iIndex) {
		var $Item;

		if (this.aItemDomRefs.length < 0) {
			// no items -> don't change TabIndex
			this.iFocusedIndex = -1;
			return this;
		}

		if (iIndex < 0) {
			iIndex = 0;
		}

		if (iIndex > this.aItemDomRefs.length - 1) {
			iIndex = this.aItemDomRefs.length - 1;
		}

		if (this.iFocusedIndex !== -1 && this.aItemDomRefs.length > this.iFocusedIndex) {
			jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr("tabIndex", this.iTabIndex);

			// if focus is in nested ItemNavigation but is moved to an other item, remove tabindex from nested item
			$Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
			if ($Item.data("sap.INRoot") && iIndex != this.iFocusedIndex) {
				jQuery($Item.data("sap.INRoot").aItemDomRefs[$Item.data("sap.INRoot").iFocusedIndex]).attr("tabIndex", this.iTabIndex);
			}
		}

		this.iFocusedIndex = iIndex;
		var oFocusItem = this.aItemDomRefs[this.iFocusedIndex];

		$Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
		if (!$Item.data("sap.INRoot")) {

			// in nested ItemNavigation the nested item gets the tabindex
			jQuery(oFocusItem).attr("tabIndex", this.iActiveTabIndex);
		}

		return this;
	};

	/**
	 * Calls a parent function if it's defined.
	 * @param {string} sFnName Name of the function.
	 * @param {[object]} aArguments Arguments to pass into the function.
	 * @private
	 */
	TimelineNavigator.prototype._callParent = function(sFnName, aArguments) {
		if (typeof ItemNavigation.prototype[sFnName] === "function") {
			ItemNavigation.prototype[sFnName].apply(this, aArguments);
		}
	};


	/**
	 * If an element inside an item has focus, the focus is returned to the item.
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype._onF7 = function(oEvent) {
		if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {
			//Current element is not part of the navigation content
			return;
		}
		var focusedIndex = this.getFocusedIndex();
		if (focusedIndex >= 0) {
			this.focusItem(focusedIndex, oEvent);
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	/**
	 * See sapenter
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onsapspace = function(oEvent) {
		this.onsapenter(oEvent);
	};

	/**
	 * Activates the first action of an item.
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onsapenter = function(oEvent) {
		var id,
			jElement;
		if (this._skipNavigation(oEvent, false, true)) {
			return;
		}
		jElement = jQuery(this.getFocusedDomRef());
		id = jElement.attr("id");
		if (stringEndsWith(id, "-outline")) { //We have enter on timeline item
			if (jElement.hasClass("sapSuiteUiCommonsTimelineGroupHeaderMainWrapper")) {
				id = id.substr(0, id.length - "outline".length) + "groupCollapseIcon";
				jElement.find("#" + id).mousedown().mouseup().click();
			} else {
				jElement.find("div[role='toolbar']").children().first().mousedown().mouseup().click();
			}
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	/**
	 * Handles the home key event.
	 *
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onsaphome = function(oEvent) {
		//Fixes bug in ItemNavigation when there are no selectable items.
		if (this.aItemDomRefs.length === 0) {
			return;
		}

		if (this._skipNavigation(oEvent, false, false)) {
			return;
		}

		this._callParent("onsaphome", arguments);
	};

	/**
	 * Makes sure that if tab leaves item, selected item changes as well. It also handles F7 key.
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onkeydown = function(oEvent) {
		this._callParent("onkeydown", arguments);

		if (oEvent.keyCode === jQuery.sap.KeyCodes.F7) {
			this._onF7(oEvent);
		}
	};

	/**
	 * Fixes ItemNavigation onmousedown. ItemNavigation expect the component to have only one top element and all sub elements to be
	 * part of aItemDomRef. Timeline has multiple sub elements that are not part of the array and so the mousedown of ItemNavigation
	 * brakes focus behaviour.
	 *
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onmousedown = function(oEvent) {
		// set the focus to the clicked element or back to the last
		var oSource = oEvent.target;
		var checkFocusableParent = function( oDomRef, oItem){

			// as table cell might have focusable content that have not focusable DOM insinde
			// the table cell should not get the focus but the focusable element inside
			var bFocusableParent = false;
			var $CheckDom = jQuery(oDomRef);
			while (!$CheckDom.is(":sapFocusable") && $CheckDom.get(0) != oItem) {
				$CheckDom = $CheckDom.parent();
			}

			if ($CheckDom.get(0) != oItem) {
				// focusable Dom found inside item
				bFocusableParent = true;
			}

			return bFocusableParent;

		};

		if (jQuery.sap.containsOrEquals(this.oDomRef, oSource)) {
			// the mouse down occured inside the main dom ref
			for (var i = 0; i < this.aItemDomRefs.length; i++) {
				var oItem = this.aItemDomRefs[i];
				if (jQuery.sap.containsOrEquals(oItem, oSource)) {
					// only focus the items if the click did not happen on a
					// focusable element!
					if (oItem === oSource || !checkFocusableParent(oSource, oItem)) {
						this.focusItem(i, oEvent);

						// the table mode requires not to prevent the default
						// behavior on click since we want to allow text selection
						// click into the control, ...
					}
					return;
				}
			}

			// root DomRef of item navigation has been clicked
			// focus will also come in a moment - let it know that it was the mouse who caused the focus
			this._bMouseDownHappened = true;
			setTimeout(function () {
				this._bMouseDownHappened = false;
			}.bind(this), 20);
		}
	};

	/**
	 * Handles the onsapprevious event
	 * Sets the focus to the previous item
	 *
	 * @param {jQuery.Event} oEvent the browser event
	 * @private
	 */
	TimelineNavigator.prototype.onsapnext = function(oEvent) {
		var iIndex,
			bFirstTime = true,
			oCurrentPosition,
			oNextPosition,
			oItem;

		if (!this._aRows) {
			this._callParent("onsapnext", arguments);
			return;
		}

		// Sepcial hadling of sparce table when right key or down key was pressed.
		//debugger;
		if (this._skipNavigation(oEvent, true, false)) {
			return;
		}

		oEvent.preventDefault();
		oEvent.stopPropagation();

		if (this.getFocusedIndex() < 0) {
			// control doesn't have a focus
			return;
		}

		oCurrentPosition = this._findPosition(this.iFocusedIndex);

		if (oCurrentPosition === null) {
			throw new Error("TimelineNavigation cannot obtain a position of focused item and hance it cannot senect next.");
		}

		oNextPosition = jQuery.extend({}, oCurrentPosition);

		do {
			if (oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN) {
				oNextPosition.iY++;
				if (oNextPosition.iY >= this._aRows.length) {
					if (oNextPosition.iX + 1 >= this._aRows[this._aRows.length - 1].length) {
						// We reached the end of navigation. We should stop.
						return;
					}
					oNextPosition.iY = 0;
					oNextPosition.iX++;
				}
			} else {
				oNextPosition.iX++;
				if (oNextPosition.iX >= this._aRows[oNextPosition.iY].length) {
					if (oNextPosition.iY + 1 >= this._aRows.length) {
						// We reached the end of navigation. We should stop.
						return;
					}
					oNextPosition.iX = 0;
					oNextPosition.iY++;
				}
			}

			if (oNextPosition.iX === oCurrentPosition.iX && oNextPosition.iY === oCurrentPosition.iY) {
				if (bFirstTime) {
					bFirstTime = false;
				} else {
					// There is no other element to focus in this direction.
					return;
				}
			}
			oItem = this._aRows[oNextPosition.iY][oNextPosition.iX];
		} while (!oItem || !jQuery(oItem).is(":sapFocusable"));

		iIndex = this._findIndex(oNextPosition);

		this.focusItem(iIndex, oEvent);
	};

	/**
	 * Handles the onsapprevious event
	 * Sets the focus to the previous item
	 *
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineNavigator.prototype.onsapprevious = function(oEvent) {
		var iIndex,
			bFirstTime = true,
			oCurrentPosition,
			oNextPosition,
			oItem;

		if (!this._aRows) {
			this._callParent("onsapprevious", arguments);
			return;
		}

		// Sepcial hadling of sparce table when right key or down key was pressed.
		if (this._skipNavigation(oEvent, true, false)) {
			return;
		}

		oEvent.preventDefault();
		oEvent.stopPropagation();

		if (this.getFocusedIndex() < 0) {
			// control doesn't have a focus
			return;
		}

		oCurrentPosition = this._findPosition(this.iFocusedIndex);

		if (oCurrentPosition === null) {
			throw new Error("TimelineNavigation cannot obtain a position of focused item and hance it cannot senect next.");
		}

		oNextPosition = jQuery.extend({}, oCurrentPosition);

		do {
			if (oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP) {
				oNextPosition.iY--;
				if (oNextPosition.iY < 0) {
					if (oNextPosition.iX <= 0) {
						// We reached the beginning of navigation. We should stop.
						return;
					}
					oNextPosition.iY = this._aRows.length - 1;
					oNextPosition.iX--;
				}
			} else {
				oNextPosition.iX--;
				if (oNextPosition.iX < 0) {
					if (oNextPosition.iY <= 0) {
						// We reached the beginning of navigation. We should stop.
						return;
					}
					oNextPosition.iX = this._aRows[oNextPosition.iY].length - 1;
					oNextPosition.iY--;
				}
			}

			if (oNextPosition.iX === oCurrentPosition.iX && oNextPosition.iY === oCurrentPosition.iY) {
				if (bFirstTime) {
					bFirstTime = false;
				} else {
					// There is no other element to focus in this direction.
					return;
				}
			}
			oItem = this._aRows[oNextPosition.iY][oNextPosition.iX];
		} while (!oItem || !jQuery(oItem).is(":sapFocusable"));

		iIndex = this._findIndex(oNextPosition);

		this.focusItem(iIndex, oEvent);
	};

	/**
	 * Finds position of item given by index in _aRows.
	 *
	 * @param {int} iIndex Index of item in aItemDomRefs
	 * @returns {Object} Object with iX, iY containing position of the item in the array.
	 * @private
	 */
	TimelineNavigator.prototype._findPosition = function (iIndex) {
		var iX,
			iY,
			oItem = this.aItemDomRefs[iIndex];

		for (iY = 0; iY < this._aRows.length; iY++) {
			for (iX = 0; iX < this._aRows[iY].length; iX++) {
				if (oItem === this._aRows[iY][iX]) {
					return {
						iX: iX,
						iY: iY
					};
				}
			}
		}
		return null;
	};

	/**
	 * Finds an index of item given by it's position in _aRows.
	 *
	 * @param {object} oPosition Position object containing iX, iY coordinates of item in _aRows.
	 * @returns {number|null} Position of item in aItemDomRefs or null if it is not found
	 * @private
	 */
	TimelineNavigator.prototype._findIndex = function (oPosition) {
		var oItem = this._aRows[oPosition.iY][oPosition.iX],
			i;

		for (i = 0; i < this.aItemDomRefs.length; i++) {
			if (oItem === this.aItemDomRefs[i]) {
				return i;
			}
		}
		return null;
	};

	/**
	 * Determines weather given event should be handled by navigator.
	 *
	 * @param {jQuery.Event} oEvent The original event object
	 * @param {boolean} bCheckNavigationMode Flag which determines if navigation mode should disable navigator.
	 * @param {boolean} bCheckItemSelected Flag which determines if no item selected should disable navigator.
	 * @returns {boolean} If true, navigator should not modify it's state for this event. False means navigation may continue.
	 * @private
	 */
	TimelineNavigator.prototype._skipNavigation = function (oEvent, bCheckNavigationMode, bCheckItemSelected) {
		return !jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target) || //Current element is not part of the navigation content
			(this.getFocusedIndex() < 0 && bCheckItemSelected) || //No item selected
			jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1 || //The selected element is not a timeline item. We don't want to block default element behavior in case of input fields etc.
			(jQuery(this.oDomRef).data("sap.InNavArea") && bCheckNavigationMode); // control is in navigation mode -> no ItemNavigation
	};

	return TimelineNavigator;
});

}; // end of sap/suite/ui/commons/TimelineNavigator.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.flexibility.changeHandler.PropertyChangeMapper') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.flexibility.changeHandler.PropertyChangeMapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.PropertyChange'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/flexibility/changeHandler/PropertyChangeMapper",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/ui/fl/changeHandler/PropertyChange"
], function (jQuery, BaseObject, PropertyChange) {

	/**
	 * Constructor for PropertyChangeMapper.
	 *
	 * @param {string|function} vProperty - A property name mapper. If it's a string it's expected to be a name of a property to set. If it's a function, it must return the name of a property to set. It's going to be called with specificChangeInfo in action handler.
	 * @param {any} vValue - Value to set. If it's a function, it's going to be called with property name as a parameter.
	 *
	 * @class
	 * A mapper which tralslates an RTA action to a property change. This class is useful for complex components.
	 *
	 * @constructor
	 * @alias sap.suite.ui.commons.flexibility.changeHandler.PropertyChangeMapper
	 * @version 1.50.4
	 * @since 1.50
	 * @private
	 */
	var PropertyChangeMapper = BaseObject.extend("sap.suite.ui.commons.flexibility.changeHandler.PropertyChangeMapper", {
		constructor: function (vProperty, vValue) {
			if (typeof vProperty === "function") {
				this._fnProperty = vProperty;
			} else if (typeof vProperty === "string") {
				this._fnProperty = function () {
					return vProperty;
				};
			} else {
				jQuery.sap.log.fatal("Incorrect type of property: " + typeof vProperty);
			}
			if (typeof vValue === "function") {
				this._fnValue = vValue;
			} else {
				this._fnValue = function () {
					return vValue;
				};
			}
		}
	});

	/**
	 * Changes the properties on the given control
	 *
	 * @param {object} oChange - change object with instructions to be applied on the control
	 * @param {object} oControl - the control which has been determined by the selector id
	 * @param {object} mPropertyBag
	 * @param {object} mPropertyBag.modifier - modifier for the controls
	 * @public
	 * @name sap.ui.fl.changeHandler.PropertyChange#applyChange
	 */
	PropertyChangeMapper.prototype.applyChange = function (oChange, oControl, mPropertyBag) {
		var oContent = oChange.getDefinition().content,
			oProperty = oContent.property;
		if (Array.isArray(oProperty)) {
			oProperty.forEach(function (sProp) {
				oContent.property = sProp;
				PropertyChange.applyChange(oChange, oControl, mPropertyBag);
			});
		} else {
			PropertyChange.applyChange(oChange, oControl, mPropertyBag);
		}
	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute property which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the field to property and index the new position of the field in the smart form group
	 * @public
	 * @name sap.ui.fl.changeHandler.PropertyChange#completeChangeContent
	 */
	PropertyChangeMapper.prototype.completeChangeContent = function (oChange, oSpecificChangeInfo) {
		var sProperty = this._fnProperty(oSpecificChangeInfo),
			oMySpecificChangeInfo = jQuery.extend(oSpecificChangeInfo, {
				content: {
					property: sProperty,
					newValue: this._fnValue(sProperty)
				}
			});
		PropertyChange.completeChangeContent(oChange, oMySpecificChangeInfo);
	};

	return PropertyChangeMapper;
});
}; // end of sap/suite/ui/commons/flexibility/changeHandler/PropertyChangeMapper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.library') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/**
 * Initialization Code and shared classes of library sap.suite.ui.commons.
 */
jQuery.sap.declare('sap.suite.ui.commons.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/library",function () {
	"use strict";

	/**
	 * SAP UI library: sap.suite.ui.commons
	 *
	 * @namespace
	 * @name sap.suite.ui.commons
	 * @public
	 */


	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.suite.ui.commons",
		dependencies: ["sap.ui.core", "sap.m"],
		types: [
			"sap.suite.ui.commons.BulletChartMode",
			"sap.suite.ui.commons.CommonBackground",
			"sap.suite.ui.commons.ComparisonChartView",
			"sap.suite.ui.commons.DeviationIndicator",
			"sap.suite.ui.commons.FacetOverviewHeight",
			"sap.suite.ui.commons.FrameType",
			"sap.suite.ui.commons.HeaderContainerView",
			"sap.suite.ui.commons.InfoTileSize",
			"sap.suite.ui.commons.InfoTileTextColor",
			"sap.suite.ui.commons.InfoTileValueColor",
			"sap.suite.ui.commons.LoadState",
			"sap.suite.ui.commons.MicroAreaChartView",
			"sap.suite.ui.commons.networkgraph.NodeShape",
			"sap.suite.ui.commons.networkgraph.LineType",
			"sap.suite.ui.commons.networkgraph.Orientation",
			"sap.suite.ui.commons.networkgraph.LineArrowPosition",
			"sap.suite.ui.commons.networkgraph.LineArrowOrientation",
			"sap.suite.ui.commons.networkgraph.NodePlacement",
			"sap.suite.ui.commons.networkgraph.NodeSize",
			"sap.suite.ui.commons.networkgraph.ElementStatus",
			"sap.suite.ui.commons.ProcessFlowConnectionLabelState",
			"sap.suite.ui.commons.ProcessFlowConnectionState",
			"sap.suite.ui.commons.ProcessFlowConnectionType",
			"sap.suite.ui.commons.ProcessFlowDisplayState",
			"sap.suite.ui.commons.ProcessFlowLaneState",
			"sap.suite.ui.commons.ProcessFlowNodeState",
			"sap.suite.ui.commons.ProcessFlowNodeType",
			"sap.suite.ui.commons.ProcessFlowZoomLevel",
			"sap.suite.ui.commons.SelectionState",
			"sap.suite.ui.commons.statusindicator.FillingType",
			"sap.suite.ui.commons.statusindicator.FillingDirectionType",
			"sap.suite.ui.commons.ThingGroupDesign",
			"sap.suite.ui.commons.TimelineAlignment",
			"sap.suite.ui.commons.TimelineAxisOrientation",
			"sap.suite.ui.commons.TimelineFilterType",
			"sap.suite.ui.commons.TimelineGroupType",
			"sap.suite.ui.commons.TimelineScrollingFadeout",
			"sap.suite.ui.commons.ValueStatus"
		],
		interfaces: [],
		controls: [
			"sap.suite.ui.commons.BulletChart",
			"sap.suite.ui.commons.BusinessCard",
			"sap.suite.ui.commons.ChartContainer",
			"sap.suite.ui.commons.ChartContainerContent",
			"sap.suite.ui.commons.ChartContainerToolbarPlaceholder",
			"sap.suite.ui.commons.ChartTile",
			"sap.suite.ui.commons.ColumnMicroChart",
			"sap.suite.ui.commons.ComparisonChart",
			"sap.suite.ui.commons.DateRangeScroller",
			"sap.suite.ui.commons.DateRangeSlider",
			"sap.suite.ui.commons.DateRangeSliderInternal",
			"sap.suite.ui.commons.DeltaMicroChart",
			"sap.suite.ui.commons.DynamicContainer",
			"sap.suite.ui.commons.FacetOverview",
			"sap.suite.ui.commons.FeedItemHeader",
			"sap.suite.ui.commons.FeedTile",
			"sap.suite.ui.commons.GenericTile",
			"sap.suite.ui.commons.GenericTile2X2",
			"sap.suite.ui.commons.HarveyBallMicroChart",
			"sap.suite.ui.commons.HeaderCell",
			"sap.suite.ui.commons.HeaderContainer",
			"sap.suite.ui.commons.InfoTile",
			"sap.suite.ui.commons.JamContent",
			"sap.suite.ui.commons.KpiTile",
			"sap.suite.ui.commons.LaunchTile",
			"sap.suite.ui.commons.LinkActionSheet",
			"sap.suite.ui.commons.MicroAreaChart",
			"sap.suite.ui.commons.MonitoringContent",
			"sap.suite.ui.commons.MonitoringTile",
			"sap.suite.ui.commons.networkgraph.Graph",
			"sap.suite.ui.commons.networkgraph.Node",
			"sap.suite.ui.commons.NewsContent",
			"sap.suite.ui.commons.NoteTaker",
			"sap.suite.ui.commons.NoteTakerCard",
			"sap.suite.ui.commons.NoteTakerFeeder",
			"sap.suite.ui.commons.NumericContent",
			"sap.suite.ui.commons.NumericTile",
			"sap.suite.ui.commons.PictureZoomIn",
			"sap.suite.ui.commons.ProcessFlow",
			"sap.suite.ui.commons.ProcessFlowConnection",
			"sap.suite.ui.commons.ProcessFlowConnectionLabel",
			"sap.suite.ui.commons.ProcessFlowLaneHeader",
			"sap.suite.ui.commons.ProcessFlowNode",
			"sap.suite.ui.commons.RepeaterViewConfiguration",
			"sap.suite.ui.commons.SplitButton",
			"sap.suite.ui.commons.statusindicator.StatusIndicator",
			"sap.suite.ui.commons.statusindicator.ShapeGroup",
			"sap.suite.ui.commons.statusindicator.Shape",
			"sap.suite.ui.commons.statusindicator.Rectangle",
			"sap.suite.ui.commons.statusindicator.Circle",
			"sap.suite.ui.commons.statusindicator.CustomShape",
			"sap.suite.ui.commons.statusindicator.PropertyThreshold",
			"sap.suite.ui.commons.statusindicator.DiscreteThreshold",
			"sap.suite.ui.commons.TargetFilter",
			"sap.suite.ui.commons.ThingCollection",
			"sap.suite.ui.commons.ThreePanelThingInspector",
			"sap.suite.ui.commons.ThreePanelThingViewer",
			"sap.suite.ui.commons.TileContent",
			"sap.suite.ui.commons.TileContent2X2",
			"sap.suite.ui.commons.Timeline",
			"sap.suite.ui.commons.TimelineFilterListItem",
			"sap.suite.ui.commons.TimelineItem",
			"sap.suite.ui.commons.UnifiedThingGroup",
			"sap.suite.ui.commons.UnifiedThingInspector",
			"sap.suite.ui.commons.VerticalNavigationBar",
			"sap.suite.ui.commons.ViewRepeater"
		],
		elements: [
			"sap.suite.ui.commons.BulletChartData",
			"sap.suite.ui.commons.ColumnData",
			"sap.suite.ui.commons.ColumnMicroChartLabel",
			"sap.suite.ui.commons.ComparisonData",
			"sap.suite.ui.commons.CountingNavigationItem",
			"sap.suite.ui.commons.FeedItem",
			"sap.suite.ui.commons.HarveyBallMicroChartItem",
			"sap.suite.ui.commons.HeaderCellItem",
			"sap.suite.ui.commons.MicroAreaChartItem",
			"sap.suite.ui.commons.MicroAreaChartLabel",
			"sap.suite.ui.commons.MicroAreaChartPoint",
			"sap.suite.ui.commons.TargetFilterColumn",
			"sap.suite.ui.commons.TargetFilterMeasureColumn"
		],
		version: "1.50.4",
		extensions: {
			flChangeHandlers: {
				"sap.suite.ui.commons.Timeline": "sap/suite/ui/commons/flexibility/Timeline"
			}
		}
	});

	/**
	 * Enumeration of possible BulletChart display modes.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.suite.ui.microchart.BulletMicroChartModeType should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.BulletChartMode = {

		/**
		 * Displays the Actual value.
		 * @public
		 */
		Actual: "Actual",

		/**
		 * Displays delta between the Actual and Threshold values.
		 * @public
		 */
		Delta: "Delta"

	};
	/**
	 * Enumeration of possible theme specific background colors.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. Moved to sapui5.runtime.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.CommonBackground = {

		/**
		 * The lightest background color.
		 * @public
		 */
		Lightest: "Lightest",

		/**
		 * Extra light background color.
		 * @public
		 */
		ExtraLight: "ExtraLight",

		/**
		 * Light background color.
		 * @public
		 */
		Light: "Light",

		/**
		 * Medium light background color.
		 * @public
		 */
		MediumLight: "MediumLight",

		/**
		 * Medium background color.
		 * @public
		 */
		Medium: "Medium",

		/**
		 * Dark background color.
		 * @public
		 */
		Dark: "Dark",

		/**
		 * Extra dark background color.
		 * @public
		 */
		ExtraDark: "ExtraDark",

		/**
		 * The darkest background color.
		 * @public
		 */
		Darkest: "Darkest"

	};
	/**
	 * The view of the ComparisonChart.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.suite.ui.microchart.ComparisonMicroChartViewType should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ComparisonChartView = {

		/**
		 * Titles and values are displayed above the bars.
		 * @public
		 */
		Normal: "Normal",

		/**
		 * Titles and values are displayed in the same line with the bars.
		 * @public
		 */
		Wide: "Wide"

	};
	/**
	 * The marker for the deviation trend.
	 *
	 * @author SAP AG
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. Moved to sapui5.runtime.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.DeviationIndicator = {

		/**
		 * The actual value is more than the target value.
		 * @public
		 */
		Up: "Up",

		/**
		 * The actual value is less than the target value.
		 * @public
		 */
		Down: "Down",

		/**
		 * No value.
		 * @public
		 */
		None: "None"

	};
	/**
	 * Enumeration of possible FacetOverview height settings.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.32.
	 * Deprecated. Object page should be used instead.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.FacetOverviewHeight = {

		/**
		 * Extra small height
		 * @public
		 */
		XS: "XS",

		/**
		 * Small height
		 * @public
		 */
		S: "S",

		/**
		 * Medium height
		 * @public
		 */
		M: "M",

		/**
		 * Large height
		 * @public
		 */
		L: "L",

		/**
		 * Extra Large height
		 * @public
		 */
		XL: "XL",

		/**
		 * Extra extra large height
		 * @public
		 */
		XXL: "XXL",

		/**
		 * Content based height
		 * @public
		 */
		Auto: "Auto",

		/**
		 * No value. The height of the control is defined by depricated height property.
		 * @public
		 */
		None: "None"

	};
	/**
	 * Enumeration of possible frame types.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. Moved to openUI5.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.FrameType = {

		/**
		 * The 1x1 frame type.
		 * @public
		 */
		OneByOne: "OneByOne",

		/**
		 * The 2x1 frame type.
		 * @public
		 */
		TwoByOne: "TwoByOne",

		/**
		 * The 2/3 frame type.
		 * @public
		 */
		TwoThirds: "TwoThirds",

		/**
		 * The Auto frame type that adjusts the size of the control to the content.
		 * @public
		 */
		Auto: "Auto"

	};
	/**
	 * The list of possible HeaderContainer views.
	 *
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.48.
	 * This control is deprecated since 1.48. Please use the equivalent sap.ui.core.Orientation.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.HeaderContainerView = {

		/**
		 * The horizontal orientation of the control.
		 *
		 * @public
		 */
		Horizontal: "Horizontal",

		/**
		 * The vertical orientation of the control.
		 *
		 * @public
		 */
		Vertical: "Vertical"

	};
	/**
	 * Enumeration of possible PointTile size settings.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.m.InfoTileSize should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.InfoTileSize = {

		/**
		 * Extra small size.
		 * @public
		 */
		XS: "XS",

		/**
		 * Small size.
		 * @public
		 */
		S: "S",

		/**
		 * Medium size.
		 * @public
		 */
		M: "M",

		/**
		 * Large size.
		 * @public
		 */
		L: "L",

		/**
		 * The size of the tile depends on the device it is running on. It is large on desktop, medium on tablet and small on phone.
		 * @public
		 */
		Auto: "Auto"

	};
	/**
	 * Enumeration of possible InfoTile text color settings.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.m.InfoTileTextColor should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.InfoTileTextColor = {

		/**
		 * Positive InfoTile text color.
		 * @public
		 */
		Positive: "Positive",

		/**
		 * Critical InfoTile text color.
		 * @public
		 */
		Critical: "Critical",

		/**
		 * Negative InfoTile text color.
		 * @public
		 */
		Negative: "Negative"

	};
	/**
	 * Enumeration of possible InfoTile value color settings.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.m.InfoTileValueColor should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.InfoTileValueColor = {

		/**
		 * Neutral InfoTile value color.
		 * @public
		 */
		Neutral: "Neutral",

		/**
		 * Good InfoTile value color.
		 * @public
		 */
		Good: "Good",

		/**
		 * Critical InfoTile value color.
		 * @public
		 */
		Critical: "Critical",

		/**
		 * Error InfoTile value color.
		 * @public
		 */
		Error: "Error"

	};
	/**
	 * Enumeration of possible load states for LoadableView.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.m.LoadState should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.LoadState = {

		/**
		 * LoadableView is loading the control.
		 * @public
		 */
		Loading: "Loading",

		/**
		 * LoadableView has loaded the control.
		 * @public
		 */
		Loaded: "Loaded",

		/**
		 * LoadableView failed to load the control.
		 * @public
		 */
		Failed: "Failed",

		/**
		 * LoadableView disabled to load the control.
		 * @public
		 */
		Disabled: "Disabled"

	};
	/**
	 * The list of possible MicroAreaChart views.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.34.
	 * Deprecated. sap.suite.ui.microchart.AreaMicroChartViewType should be used.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.MicroAreaChartView = {

		/**
		 * The view with labels on the top and bottom.
		 * @public
		 */
		Normal: "Normal",

		/**
		 * The view with labels on the left and right.
		 * @public
		 */
		Wide: "Wide"

	};

	/**
	 * Shape of a node in a network graph.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.NodeShape = {
		/**
		 * Round shape with a text label below.
		 * @public
		 */
		Circle: "Circle",

		/**
		 * Rectangular shape with an optional list of attributes.
		 * @public
		 */
		Box: "Box"
	};

	/**
	 * Type of connector line used in the network graph.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.LineType = {
		/**
		 * Solid connector line.
		 * @public
		 */
		Solid: "Solid",

		/**
		 * Dashed connector line.
		 * @public
		 */
		Dashed: "Dashed",

		/**
		 * Dotted connector line.
		 * @public
		 */
		Dotted: "Dotted"
	};

	/**
	 * Type of node placement for Layered Algorithm.
	 * See {@link https://rtsys.informatik.uni-kiel.de/confluence/display/KIELER/KLay+Layered+Layout+Options#KLayLayeredLayoutOptions-nodePlacement}
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.NodePlacement = {
		/**
		 * Minimizes the number of edge bends at the expense of the graph size.
		 * @public
		 */
		BrandesKoepf: "BrandesKoepf",

		/**
		 * Calculates the most optimal layout balance.
		 * @public
		 */
		LinearSegments: "LinearSegments",

		/**
		 * Minimizes the area taken by the graph at the expense of everything else.
		 * @public
		 */
		Simple: "Simple"
	};

	/**
	 * Semantic type of the node status.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.ElementStatus = {
		/**
		 * A standard node
		 * @public
		 */
		Standard: "Standard",

		/**
		 * A node type that communicates success.
		 * @public
		 */
		Success: "Success",

		/**
		 * A node type that communicates a warning.
		 * @public
		 */
		Warning: "Warning",

		/**
		 * A node type that communicates an error.
		 * @public
		 */
		Error: "Error"
	};

	/**
	 * Orientation of layered layout.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.Orientation = {
		/**
		 * The flow of the graph is left to right.
		 * @public
		 */
		LeftRight: "LeftRight",

		/**
		 * The flow of the graph is right to left.
		 * @public
		 */
		RightLeft: "RightLeft",

		/**
		 * The flow of the graph is top to bottom.
		 * @public
		 */
		TopBottom: "TopBottom"
	};

	/**
	 * Orientation of line's arrow
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.LineArrowOrientation = {
		/**
		 * Orientation is from parent to child.
		 * @public
		 */
		ParentOf: "ParentOf",

		/**
		 * Orientation is from child to parent.
		 * @public
		 */
		ChildOf: "ChildOf",

		/**
		 * Arrow is hidden.
		 * @public
		 */
		None: "None"
	};

	/**
	 * Position of the arrow on a connector line.
	 *
	 * @enum {string}
	 * @public
	 */
	sap.suite.ui.commons.networkgraph.LineArrowPosition = {
		/**
		 * The arrow is placed at the beginning of the first line segment.
		 * @public
		 */
		Start: "Start",

		/**
		 * The arrow is placed in the middle of the last line segment. If the line has only one segment,
		 * the arrow appears in the middle of the line.
		 * @public
		 */
		Middle: "Middle",

		/**
		 * The arrow is placed at the end of the last line segment.
		 * @public
		 */
		End: "End"
	};

	/**
	 * Describes the state of a connection label.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowConnectionLabelState = {

		/**
		 * Neutral connection label.
		 * @public
		 */
		Neutral: "Neutral",

		/**
		 * Positive connection label.
		 * @public
		 */
		Positive: "Positive",

		/**
		 * Critical connection label.
		 * @public
		 */
		Critical: "Critical",

		/**
		 * Negative connection label.
		 * @public
		 */
		Negative: "Negative"

	};
	/**
	 * Describes the state of a connection.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowConnectionState = {

		/**
		 * Highlighted connection.
		 * @public
		 */
		Highlighted: "Highlighted",

		/**
		 * Dimmed connection.
		 * @public
		 */
		Dimmed: "Dimmed",

		/**
		 * Regular connection.
		 * @public
		 */
		Regular: "Regular",

		/**
		 * Selected connection.
		 * @public
		 */
		Selected: "Selected"

	};
	/**
	 * Describes the type of a connection.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowConnectionType = {

		/**
		 * Planned connection.
		 * @public
		 */
		Planned: "Planned",

		/**
		 * Normal connection.
		 * @public
		 */
		Normal: "Normal"

	};
	/**
	 * The ProcessFlow calculates the ProcessFlowDisplayState based on the 'focused' and 'highlighted' properties of each node.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowDisplayState = {

		/**
		 * The control is in the regular display state
		 * @public
		 */
		Regular: "Regular",

		/**
		 * The control is in the combination of regular and focused display state
		 * @public
		 */
		RegularFocused: "RegularFocused",

		/**
		 * The control is in highlighted display state
		 * @public
		 */
		Highlighted: "Highlighted",

		/**
		 * The control is in the combination of highlighted and focused display state
		 * @public
		 */
		HighlightedFocused: "HighlightedFocused",

		/**
		 * The control is in the dimmed state
		 * @public
		 */
		Dimmed: "Dimmed",

		/**
		 * The control is in the combination of dimmed and focused display state
		 * @public
		 */
		DimmedFocused: "DimmedFocused",

		/**
		 * The control is in the selected display state
		 * @public
		 */
		Selected: "Selected",

		/**
		 * The control is in the combination of selected and highlighted display state
		 * @public
		 */
		SelectedHighlighted: "SelectedHighlighted",

		/**
		 * The control is in the combination of selected, highlighted and focused display state
		 * @public
		 */
		SelectedHighlightedFocused: "SelectedHighlightedFocused",

		/**
		 * The control is in the combination of selected and focused display state
		 * @public
		 */
		SelectedFocused: "SelectedFocused"

	};
	/**
	 * This type is used in the 'state' property of the ProcessFlowLaneHeader. For example, app developers can set the status of the lane header if lanes are displayed without documents.
	 * If the complete process flow is displayed (that is, if the lane header is displayed with documents underneath), the given state values of the lane header are ignored and will be calculated in the ProcessFlow according to the current state of the documents.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowLaneState = {

		/**
		 * In the 'state' array, the total amount of values needs to be 100%.
		 * @public
		 */
		value: "value",

		/**
		 * The 'state' property is associated with the given value. Possible states are: positive, negative, neutral, and planned.
		 * @public
		 */
		state: "state"

	};
	/**
	 * Describes the state connected to the content it is representing in the Process Flow Node. The state is also displayed in the Process Flow Lane Header as a color segment of the donut.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowNodeState = {

		/**
		 * Positive status for a created document: the document is done, finished, solved.
		 * @public
		 */
		Positive: "Positive",

		/**
		 * Negative status for a created document: with this document, an issue occurred.
		 * @public
		 */
		Negative: "Negative",

		/**
		 * Critical status for a created document: with this document, a critical issue occurred, for example, the business process can be interrupted.
		 * @public
		 * @since 1.42.0
		 */
		Critical: "Critical",

		/**
		 * Planned status for a document: the document is planned to be started.
		 * @public
		 */
		Planned: "Planned",

		/**
		 * Neutral status for a created document: the document is in progress.
		 * @public
		 */
		Neutral: "Neutral",

		/**
		 * Planned, but negative status for a document: the planned document has an issue but has not yet been started.
		 * @public
		 */
		PlannedNegative: "PlannedNegative"

	};
	/**
	 * Describes the type of a node. The type value could be single or aggregated. With this type,
	 * the application can define if several nodes should be displayed as one aggregated node in a path per column to
	 * represent a grouping of semantically equal nodes.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowNodeType = {

		/**
		 * Single node - one node is illustrated in a column.
		 * @public
		 */
		Single: "Single",

		/**
		 * Aggregated node - several nodes are illustrated as a stack of nodes in the same path and in one column.
		 * @public
		 */
		Aggregated: "Aggregated"

	};
	/**
	 * The zoom level defines level of details for the node and how much space the process flow requires.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ProcessFlowZoomLevel = {

		/**
		 * The full details with normal font size.
		 * @public
		 */
		One: "One",

		/**
		 * The full detail view of the node but with smaller font size.
		 * @public
		 */
		Two: "Two",

		/**
		 * The details are the icon, title text and no additional texts.
		 * @public
		 */
		Three: "Three",

		/**
		 * Zoom level for least details - only icon is displayed.
		 * @public
		 */
		Four: "Four"

	};
	/**
	 * SelectionState
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.48.
	 * This Enumeration is deprecated as it is not used anywhere.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.SelectionState = {

		/**
		 * Selected
		 * @public
		 */
		Selected: "Selected",

		/**
		 * Not Selected
		 * @public
		 */
		NotSelected: "NotSelected",

		/**
		 * Semantic
		 * @public
		 */
		Semantic: "Semantic"

	};

	/**
	 * The direction of animation.
	 *
	 * @public
	 * @enum {string}
	 */
	sap.suite.ui.commons.statusindicator.FillingDirectionType = {

		/**
		 * From bottom upwards.
		 *
		 * @public
		 */
		Up: "Up",

		/**
		 * From top to bottom.
		 */
		Down: "Down",

		/**
		 * From right to left.
		 */
		Left: "Left",

		/**
		 * From left to right.
		 */
		Right: "Right"
	};

	/**
	 * The type of filling.
	 *
	 * @public
	 * @enum {string}
	 */
	sap.suite.ui.commons.statusindicator.FillingType = {

		/**
		 * The shape is filled with a linear gradient.
		 */
		Linear: "Linear",

		/**
		 * The shape is filled with a radial gradient.
		 */
		Radial: "Radial",

		/**
		 * No filling is applied.
		 */
		None: "None"
	};

	/**
	 * Defines the way how UnifiedThingGroup control is rendered.
	 *
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.32.
	 * Deprecated. Object page should be used instead.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ThingGroupDesign = {

		/**
		 * In this design there is no indentation between header and content of the group.
		 * @public
		 */
		ZeroIndent: "ZeroIndent",

		/**
		 * In this design there is indentation between header and content of the group.
		 * @public
		 */
		TopIndent: "TopIndent"

	};
	/**
	 * The alignment of timeline posts relative to the timeline axis.
	 *
	 * @author SAP SE
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.TimelineAlignment = {

		/**
		 * Entries are displayed to the right of the timeline axis.<br>
		 * In a horizontal timeline, entries are displayed below the timeline axis. Synonym for Bottom.
		 * @public
		 */
		Right: "Right",

		/**
		 * Entries are displayed to the left of the timeline axis.<br>
		 * In a horizontal timeline, entries are displayed above the timeline axis. Synonym for Top.
		 * @public
		 */
		Left: "Left",

		/**
		 * Entries are displayed above the timeline axis.<br>
		 * In a vertical timeline, entries are displayed to the left of the timeline axis. Synonym for Left.
		 * @public
		 */
		Top: "Top",

		/**
		 * Entries are displayed below the timeline axis.<br>
		 * In a vertical timeline, entries are displayed to the right of the timeline axis. Synonym for Right.
		 * @public
		 */
		Bottom: "Bottom"

	};
	/**
	 * Defines the orientation of the timeline axis.
	 *
	 * @author SAP SE
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.TimelineAxisOrientation = {

		/**
		 * Vertical timeline.
		 * @public
		 */
		Vertical: "Vertical",

		/**
		 * Horizontal timeline.
		 * @public
		 */
		Horizontal: "Horizontal"

	};
	/**
	 * Filter type for the timeline.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.TimelineFilterType = {

		/**
		 * Items filter based on data, defined by the {@link sap.suite.ui.commons.TimelineItem#getFilterValue filterValue}
		 * property or by a custom value.
		 * @public
		 */
		Data: "Data",

		/**
		 * Time range filter, defined by the start date (<code>from</code>) and end date
		 * (<code>to</code>) of the time range.
		 * @public
		 */
		Time: "Time",

		/**
		 * Search results filter.
		 * @public
		 */
		Search: "Search"

	};
	/**
	 * Type of grouping for timeline entries.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.TimelineGroupType = {

		/**
		 * No grouping is used.
		 * @public
		 */
		None: "None",

		/**
		 * Data is grouped by year.
		 * @public
		 */
		Year: "Year",

		/**
		 * Data is grouped by month.
		 * @public
		 */
		Month: "Month",

		/**
		 * Data is grouped by quarter.
		 * @public
		 */
		Quarter: "Quarter",

		/**
		 * Data is grouped by week.
		 * @public
		 */
		Week: "Week",

		/**
		 * Data is grouped by day.
		 * @public
		 */
		Day: "Day"

	};
	/**
	 * Type of the fadeout effect applied to the upper and lower margins of the visible timeline area.
	 *
	 * @enum {string}
	 * @public
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.TimelineScrollingFadeout = {

		/**
		 * Timeline does not fade out.
		 * @public
		 */
		None: "None",

		/**
		 * Timeline fades into the lower and upper margins of the visible area,
		 * but no scroll buttons are displayed.
		 * @public
		 */
		Area: "Area",

		/**
		 * Timeline fades into the lower and upper margins of the visible area,
		 * and scroll buttons are displayed.
		 * @public
		 */
		AreaWithButtons: "AreaWithButtons"

	};
	/**
	 * Marker for the key value status.
	 *
	 * @author SAP AG
	 * @enum {string}
	 * @public
	 * @deprecated Since version 1.32.
	 * Deprecated. Numeric content or any other standard Fiori control should be used instead.
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.suite.ui.commons.ValueStatus = {

		/**
		 * Good value.
		 * @public
		 */
		Good: "Good",

		/**
		 * Positive value.
		 * @public
		 */
		Neutral: "Neutral",

		/**
		 * Critical value.
		 * @public
		 */
		Critical: "Critical",

		/**
		 * Bad value.
		 * @public
		 */
		Bad: "Bad"
	};

	return sap.suite.ui.commons;
});

}; // end of sap/suite/ui/commons/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.DiscreteThreshold') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
// Provides control sap.suite.ui.commons.StatusIndicator.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.DiscreteThreshold'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/DiscreteThreshold",[
		"jquery.sap.global",
		"sap/ui/core/Control"
	],
	function (jQuery, Control) {
		"use strict";

		/**
		 * Constructor for a new DiscreteThreshold.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Discrete threshold specifies which values should be displayed by the status indicator.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.DiscreteThreshold
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var DiscreteThreshold = Control.extend("sap.suite.ui.commons.statusindicator.DiscreteThreshold",
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Defines the value threshold. This value is displayed when the status indicator's
						 * percentage value is above or equal to this value but below the value of
						 * the next threshold.
						 */
						value: {type: "int", defaultValue: 0},

						/**
						 * ARIA label for this threshold to be used by screen reader software.
						 */
						ariaLabel: {type: "string", defaultValue: null}
					}
				}
			});

		return DiscreteThreshold;

	}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/statusindicator/DiscreteThreshold.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.FillingOption') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.FillingOption.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.FillingOption'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/FillingOption",[
		"jquery.sap.global",
		"sap/ui/core/Control"
	],
	function (jQuery, Control) {
		"use strict";

		/**
		 * Constructor for a new FillingOption.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Filling options for an SVG shape included in a custom shape.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.FillingOption
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var FillingOption = Control.extend("sap.suite.ui.commons.statusindicator.FillingOption",
			/** @lends sap.suite.ui.commons.statusindicator.Control.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * ID of the fillable SVG shape included in a custom shape.
						 */
						shapeId: {type: "string", defaultValue: null},

						/**
						 * Weight of the fillable shape, relative to other fillable shapes included in this
						 * custom shape. This property allows you to distribute the status indicator's value
						 * between distinct SVG shapes included in the custom shape. For example, for four SVG
						 * shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's value
						 * is distributed in the following way:
						 * <ul>
						 *   <li>If the status indicator's value is below 10% (1 out of 10), the first SVG shape
						 * (weight 1) is partially filled, depending on the percentage value. For example,
						 * if the percentage value of the status indicator is 5, the first SVG shape appears
						 * half-full. The rest of the SVG shapes appear empty.</li>
						 *   <li>If the status indicator's value is at least 10% but below 30%, the first SVG
						 * shape (weight 1) is filled, and the second shape (weight 2) is filled only partially,
						 * depending on the percentage value. The rest of the SVG shapes in this custom shape
						 * appear empty.</li>
						 *   <li>If the status indicator's value is at least 30% but below 60%, the first two
						 * SVG shapes (weight 1 and 2) are filled, and the third SVG shape (weight 3) is filled
						 * only partially. The fourth SVG shape (weight 4) appears empty.</li>
						 *   <li>If the status indicator's value is at least 60% but below 100%, the first three
						 * SVG shapes (weight 1, 2, and 3) are filled, but the fourth SVG shape is filled only
						 * partially, depending on the percentage value.</li>
						 *   <li>If the status indicator's value is 100, all four SVG shapes appear filled.</li>
						 * </ul>
						 */
						weight: {type: "int", defaultValue: 1},

						/**
						 * Order in which this fillable SVG shape must be filled, relative to other SVG shapes
						 * included in the custom shape. Must be unique.
						 */
						order: {type: "int"}
					}
				}
			});

		FillingOption.prototype.setWeight = function (iWeight) {
			if (iWeight <= 0) {
				jQuery.sap.log.fatal("An invalid weight is passed. Weight should be a positive integer. Given: " + iWeight);
			}

			this.setProperty("weight", iWeight);
		};

		return FillingOption;
	});

}; // end of sap/suite/ui/commons/statusindicator/FillingOption.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.util.ProgressHandler') ) {
/* globals Promise:true */

jQuery.sap.declare('sap.suite.ui.commons.statusindicator.util.ProgressHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/statusindicator/util/ProgressHandler",[], function () {
	"use strict";

	var ProgressHandler = function (fnProgress) {
		var that = this;

		this._fnResolveCallback = null;
		this._oPromise = null;
		this._bInProgress = false;
		this._fnProgress = fnProgress;
		this._oInnerProgressHandler = {
			finish: function () {
				that.finish();
			},
			stop: function (oReason) {
				that.stop(oReason);
			},
			isCanceled: function () {
				return that.isCanceled();
			}
		};
	};

	ProgressHandler.prototype.start = function () {
		var that = this;
		if (this._oPromise) {
			return this._oPromise;
		}

		this._oPromise = new Promise(function (resolve, reject) {
			that._fnResolveCallback = resolve;

			that._bInProgress = true;
			that._fnProgress(that._oInnerProgressHandler);
		});

		return this._oPromise;
	};

	ProgressHandler.prototype.finish = function () {
		this._bInProgress = false;
		if (this._fnResolveCallback) {
			this._fnResolveCallback();
			this._fnResolveCallback = null;
		}
	};

	ProgressHandler.prototype.stop = function (oReason) {
		this._bInProgress = false;
		if (this._fnResolveCallback) {
			this._fnResolveCallback(oReason);
			this._fnResolveCallback = null;
		}
	};

	ProgressHandler.prototype.cancel = function () {
		this._bCancelled = true;
	};

	ProgressHandler.prototype.isCanceled = function () {
		return this._bCancelled;
	};

	ProgressHandler.prototype.isInProgress = function () {
		return this._bInProgress;
	};

	return ProgressHandler;
}, true);

}; // end of sap/suite/ui/commons/statusindicator/util/ProgressHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.util.ThemingUtil') ) {

jQuery.sap.declare('sap.suite.ui.commons.statusindicator.util.ThemingUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueCSSColor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CSSColor'); // unlisted dependency retained
jQuery.sap.require('sap.m.ValueColor'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/util/ThemingUtil",[
	"sap/ui/core/theming/Parameters",
	"sap/m/ValueCSSColor",
	"sap/ui/core/CSSColor",
	"sap/m/ValueColor"
], function (Parameters, ValueCSSColor, CSSColor, ValueColor) {
	"use strict";

	var ThemingUtil = function() {
		throw new Error();
	};

	ThemingUtil.resolveColor = function (sColor) {
		if (CSSColor.isValid(sColor)) {
			return sColor;
		}

		switch (sColor) {
			case ValueColor.Good:
				return Parameters.get("sapPositiveColor");
			case ValueColor.Error:
				return Parameters.get("sapNegativeColor");
			case ValueColor.Critical:
				return Parameters.get("sapCriticalColor");
			case ValueColor.Neutral:
				return Parameters.get("sapNeutralColor");
			default:
				return Parameters.get(sColor);
		}
	};

	return ThemingUtil;
}, true);

}; // end of sap/suite/ui/commons/statusindicator/util/ThemingUtil.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.HtmlElementRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.util.HtmlElementRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/util/HtmlElementRenderer",[ "jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/Control" ],
	function(jQuery, BaseObject, Control) {
	"use strict";

	var HtmlElement;
	/**
	 * Creates a renderer for HtmlElement.
	 *
	 * @class HtmlElementRenderer A renderer for HtmlElement.
	 *
	 * @extends sap.ui.base.Object
	 *
	 * @param {sap.suite.ui.commons.util.HtmlElement} oHtmlElement Html element to render.
	 *
	 * @constructor
	 * @alias sap.suite.ui.commons.util.HtmlElementRenderer
	 * @protected
	 */
	var HtmlElementRenderer = BaseObject.extend("sap.suite.ui.commons.util.HtmlElementRenderer", {
		constructor: function(oHtmlElement) {
			BaseObject.apply(this, arguments);

			this._oHtmlElement = oHtmlElement;
		}
	});
	/**
	 * Renders HtmlElement to given render manager.
	 * @param {sap.ui.core.RenderManager} oRm RenderManager used for outputting content.
	 * @protected
	 */
	HtmlElementRenderer.prototype.render = function(oRm) {
		oRm.write("<");
		oRm.writeEscaped(this._oHtmlElement._sName);
		this._renderAttributes(oRm);

		if (this._oHtmlElement._aChildren.length > 0) {
			oRm.write(">");
			this._renderChildren(oRm);
			oRm.write("</");
			oRm.writeEscaped(this._oHtmlElement._sName);
			oRm.write(">");
		} else {
			oRm.write("/>");
		}
	};

	/**
	 * Renders all attributes of parent tag.
	 * @param {sap.ui.core.RenderManager} oRm RenderManager used for outputting content.
	 * @protected
	 */
	HtmlElementRenderer.prototype._renderAttributes = function(oRm) {
		var attributes = this._oHtmlElement._mAttributes;
		for (var attrName in attributes) {
			if (!attributes.hasOwnProperty(attrName)) {
				continue;
			}
			var val = attributes[attrName];
			if (jQuery.isArray(val)) {
				var joiner = "";
				if (attrName === "class") {
					joiner = " ";
				} else if (attrName === "style") {
					joiner = ";";
				}
				val = val.join(joiner);
			}
			oRm.write(" ");
			oRm.write(attrName); //ignore UI5 build warning here
			oRm.write("=\"");
			oRm.write(val); //ignore UI5 build warning here
			oRm.write("\"");
		}
	};

	/**
	 * Renders children of given node.
	 * @param {sap.ui.core.RenderManager} oRm RenderManager used for outputting content.
	 * @protected
	 */
	HtmlElementRenderer.prototype._renderChildren = function(oRm) {
		if (typeof HtmlElement === "undefined") {
			HtmlElement = sap.ui.require("sap/suite/ui/commons/util/HtmlElement");
		}
		this._oHtmlElement._aChildren.forEach(function(child) {
			if (typeof child === "string") {
				oRm.write(child); //cannot be escaped here using jQuery.sap.encodeHTML, ignore UI5 build warning
			} else if (HtmlElement && child instanceof HtmlElement) {
				child.getRenderer().render(oRm);
			} else if (child instanceof Control) {
				oRm.renderControl(child);
			} else {
				jQuery.sap.log.error(typeof child + " cannot be a child of a HTML element. Skipping rendering for this child.");
			}
		});
	};

	return HtmlElementRenderer;
});

}; // end of sap/suite/ui/commons/util/HtmlElementRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.ManagedObjectRegister') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.util.ManagedObjectRegister'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/util/ManagedObjectRegister",[ "jquery.sap.global", "sap/ui/base/Object", "sap/ui/base/ManagedObject" ], function(jQuery, BaseObject, ManagedObject) {
	"use strict";

	/**
	 * Creates an object registry for storing references to managed objects.
	 *
	 * @class A registry which keeps a set of managed objects and allows you to lazy load them and destroy them at once.
	 * A lot of controls keep those object as private properties and destroies them one by one.
	 * Instead you can just use:
	 * <pre><code>
	 * this._objectRegister = new ManagedObjectRegister();
	 * this._objectRegister.register("Button", function() {
	 *  return new Button(...);
	 * });
	 *
	 * this._objectRegister.getButton()...
	 *
	 * this._objectRegister.destroyAll();
	 * </code></pre>
	 *
	 * @extends sap.ui.base.Object
	 *
	 * @constructor
	 * @alias sap.suite.ui.commons.util.ManagedObjectRegister
	 * @protected
	 */
	var ManagedObjectRegister = BaseObject.extend("sap.suite.ui.commons.util.ManagedObjectRegister", {
		constructor: function() {
			BaseObject.apply(this, arguments);
			this._mRegister = {};
		}
	});

	/**
	 * Registers an object. Registry will automatically create a getter for the object.
	 * @param {string} sKey Key of the object. Should start with capital letter.
	 * @param {function|sap.ui.base.ManagedObject} oFactoryFunction A managed object to register or a factory function which can build the object.
	 * Factory function can be used for lazy loading of the object. Register will pass sKey to the function, so it can be shared for more objects.
	 * @protected
	 */
	ManagedObjectRegister.prototype.register = function(sKey, oFactoryFunction) {
		jQuery.sap.assert(typeof sKey === "string", "Key must be a string.");

		sKey = sKey[0].toUpperCase() + sKey.substr(1);
		var getter = "get" + sKey;

		if (typeof this._mRegister[sKey] !== "undefined") {
			this.destroyObject(sKey);
		}
		if (typeof oFactoryFunction === "function") {
			this._mRegister[sKey] = {
				fFactory: oFactoryFunction,
				oValue: undefined
			};
		} else if (oFactoryFunction instanceof ManagedObject) {
			this._mRegister[sKey] = {
				fFactory: undefined,
				oValue: oFactoryFunction
			};
		} else {
			jQuery.sap.log.error("oFactoryFunction must be either a factory function or a managed object.");
			return;
		}
		//Register new getter
		if (getter !== "getObject") {
			this[getter] = function() {
				return this.getObject(sKey);
			};
		}
	};

	/**
	 * Returns a stored object. If called without parameters it will return object registered with key "Object".
	 * @param {string} [sKey="Object"] Key of the object.
	 * @returns {sap.ui.base.ManagedObject} An object from the register. If the object doesn't exist it will get created by it's factory function.
	 * @protected
	 */
	ManagedObjectRegister.prototype.getObject = function(sKey) {
		var oRegisteredObject;
		sKey = sKey || "Object";

		oRegisteredObject = this._mRegister[sKey];
		if (oRegisteredObject) {
			if (typeof oRegisteredObject.oValue === "undefined") {
				oRegisteredObject.oValue = oRegisteredObject.fFactory(sKey);
				jQuery.sap.assert(oRegisteredObject.oValue instanceof ManagedObject, "Factory class must return a managed object.");
			}
			return oRegisteredObject.oValue;
		}
		return null;
	};

	/**
	 * Returns true if there is the object registered and created. If there is not triggered factory function, returns false.
	 * @param {string} [sKey="Object"] Key of the object.
	 * @returns {boolean} True for existing object
	 * @protected
	 */
	ManagedObjectRegister.prototype.isObjectInitialized = function(sKey) {
		var oRegisteredObject;

		oRegisteredObject = this._mRegister[sKey];
		return (oRegisteredObject && typeof oRegisteredObject.oValue !== "undefined");
	};

	/**
	 * Destroys an object and removes it from the registry.
	 * @param {string} sKey Key of the object.
	 * @protected
	 */
	ManagedObjectRegister.prototype.destroyObject = function(sKey) {
		var oRegisteredObject;

		jQuery.sap.assert(typeof sKey === "string", "Key must be a string.");

		oRegisteredObject = this._mRegister[sKey];
		if (oRegisteredObject) {
			if (oRegisteredObject.oValue) {
				oRegisteredObject.oValue.destroy();
			}
			if (sKey !== "Object") {
				delete this["get" + sKey];
			}
			delete this._mRegister[sKey];
		}
	};

	/**
	 * Destroys all objects in the registry and removes it's definition.
	 * @protected
	 */
	ManagedObjectRegister.prototype.destroyAll = function() {
		var key,
			register;
		for (key in this._mRegister) {
			register = this._mRegister[key];
			if (register.oValue) {
				register.oValue.destroy();
			}
			if (key !== "Object") {
				delete this["get" + key];
			}
		}
		this._mRegister = {};
	};

	return ManagedObjectRegister;
});

}; // end of sap/suite/ui/commons/util/ManagedObjectRegister.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.RenderUtils') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.util.RenderUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/util/RenderUtils",[ 'jquery.sap.global', 'sap/ui/base/Object' ], function(jQuery, BaseObject) {
	"use strict";

	var RenderingHelper = function(oRenderManager) {
		this._rm = oRenderManager;
	};

	RenderingHelper.prototype = jQuery.sap.newObject(BaseObject.prototype);

	/**
	 * @returns {sap.ui.core.RenderManager} Returns the RenderManager
	 * @throws Error if no RenderManager exists
	 * @private
	 */
	RenderingHelper.prototype._getRenderManager = function() {
		if (!this._rm) {
			throw new Error("Render manager not defined");
		}
		return this._rm;
	};

	/**
	 * Writes complete opening tag with name sTagName.
	 * @param {String} sTagName The name for the tag.
	 * @param {Object} [oTag] Object which contains tag's classes and attributes.
	 */
	RenderingHelper.prototype.writeOpeningTag = function(sTagName, oTag) {
		oTag = oTag || {};

		// Get manager
		var rm = this._getRenderManager();
		var attrName;

		// Write tag name
		rm.write("<");
		rm.writeEscaped(sTagName);

		// Write CSS classes
		if (oTag.classes) {
			for (var i = 0; i < oTag.classes.length; i++) {
				rm.addClass(jQuery.sap.encodeHTML(oTag.classes[i]));
			}
			rm.writeClasses();
		}

		// Write attributes
		if (oTag.attributes) {
			for (attrName in oTag.attributes) {
				rm.writeAttribute(attrName, oTag.attributes[attrName]); //ignore UI5 build warning, it is intended to work like that
			}
		}

		// Write escaped attributes
		if (oTag.escapedAttributes) {
			for (attrName in oTag.escapedAttributes) {
				rm.writeAttributeEscaped(attrName, oTag.escapedAttributes[attrName]);
			}
		}

		rm.write(">");
	};

	/**
	 * Writes complete opening tag with name sTagName.
	 * @param {String} sTagName The name for the tag.
	 */
	RenderingHelper.prototype.writeClosingTag = function(sTagName) {
		// Get manager
		var rm = this._getRenderManager();

		// Write tag name
		rm.write("</");
		rm.writeEscaped(sTagName);
		rm.write(">");
	};

	return RenderingHelper;
}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/util/RenderUtils.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ChartContainer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.ChartContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.viz.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ChartContainer",[ 'jquery.sap.global', './library', 'sap/m/library', 'sap/viz/library', 'sap/ui/base/ManagedObject', 'sap/m/Button', 'sap/m/ButtonType', 'sap/m/OverflowToolbar', 'sap/m/OverflowToolbarButton', 'sap/m/SegmentedButton', 'sap/m/Title', 'sap/m/ToolbarSpacer', 'sap/ui/Device', 'sap/ui/core/Control', 'sap/ui/core/CustomData', 'sap/ui/core/Popup', 'sap/ui/core/ResizeHandler', 'sap/ui/core/delegate/ScrollEnablement', 'sap/m/ToggleButton' ],
	function(jQuery, library, MobileLibrary, VizLibrary, ManagedObject, Button, ButtonType, OverflowToolbar, OverflowToolbarButton, SegmentedButton, Title, ToolbarSpacer, Device, Control, CustomData, Popup, ResizeHandler, ScrollEnablement, ToggleButton) {
	"use strict";

	/**
	 * Constructor for a new ChartContainer.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Provides a toolbar with generic functions for tables and charts based on the VizFrame control like zoom, display in fullscreen mode, toggle the legend, switch between chart types, and changes of the chart dimension. The controls of the content aggregation are positioned below the toolbar. Additional functions can be added to the toolbar with the customIcons aggregation.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ChartContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ChartContainer = Control.extend("sap.suite.ui.commons.ChartContainer", /** @lends sap.suite.ui.commons.ChartContainer.prototype */ {
		metadata: {

			library: "sap.suite.ui.commons",
			properties: {

				/**
				 * Set to true to display the personalization icon. Set to false to hide it.
				 */
				showPersonalization: { type: "boolean", group: "Misc", defaultValue: false },

				/**
				 * Set to true to display the full screen icon. Set to false to hide it.
				 */
				showFullScreen: { type: "boolean", group: "Misc", defaultValue: false },

				/**
				 * Display the chart and the toolbar in full screen or normal mode.
				 */
				fullScreen: { type: "boolean", group: "Misc", defaultValue: false },

				/**
				 * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
				 */
				showLegend: { type: "boolean", group: "Misc", defaultValue: true },

				/**
				 * String shown if there are no dimensions to display.
				 */
				title: { type: "string", group: "Misc", defaultValue: '' },

				/**
				 * Custom Label for Selectors Group.
				 * @deprecated Since version 1.32.0.
				 * Obsolete property as sap.m.Toolbar is replaced by sap.m.OverflowToolbar.
				 */
				selectorGroupLabel: { type: "string", group: "Misc", defaultValue: null, deprecated: true },

				/**
				 * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine height from its parent.
				 */
				autoAdjustHeight: { type: "boolean", group: "Misc", defaultValue: false },

				/**
				 * Set to true to display zoom icons. Set to false to hide them.
				 */
				showZoom: { type: "boolean", group: "Misc", defaultValue: true },

				/**
				 * Set to true or false to display or hide a button for controlling the visbility of the chart's legend. Please be aware that setting this property to true indirectly is setting showLegend to false. If you need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering). The execution order of the combined properties is not guaranteed by the control.
				 */
				showLegendButton: { type: "boolean", group: "Misc", defaultValue: true },

				/**
				 * Set to true to display the 'Details' button that opens on press a popup with details about the selected data from the VizFrame based chart.
				 * @since 1.48.0
				 */
				showSelectionDetails: { type: "boolean", group: "Behavior", defaultValue: false }
			},
			defaultAggregation: "content",
			aggregations: {

				/**
				 * Dimension Selects.
				 */
				dimensionSelectors: { type: "sap.ui.core.Control", multiple: true, singularName: "dimensionSelector" },

				/**
				 * ChartToolBar Content aggregation. Only sap.viz.ui5.controls.VizFrame, sap.m.Table and sap.ui.table.Table can be embedded.
				 * If not specified explicitly, the rendering order of the charts is determined by the sequence of contents provided by the application via this aggregation. This means, per default the first chart of the aggregation will be rendered within the container.
				 */
				content: {
					type: "sap.suite.ui.commons.ChartContainerContent",
					multiple: true,
					singularName: "content"
				},

				/**
				 * Overflow ToolBar. If an external toolbar is used, it will be integrated with the embedded toolbar via a placeholder.
				 * This placeholder is mandatory, and it needs to be of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder'.
				 */
				toolbar: { type: "sap.m.OverflowToolbar", multiple: false },

				/**
				 * This aggregation contains the custom icons that should be displayed additionally on the toolbar.
				 * It is not guaranteed that the same instance of the sap.ui.core.Icon control will be used within the toolbar,
				 * but the toolbar will contain a sap.m.OverflowToolbarButton with an icon property equal to the src property
				 * of the sap.ui.core.Icon provided in the aggregation.
				 * If a press event is triggered by the icon displayed on the toolbar, then the press handler of
				 * the original sap.ui.core.Icon control is used. The instance of the control, that has triggered the press event,
				 * can be accessed using the "controlReference" parameter of the event object.
				 */
				customIcons: { type: "sap.ui.core.Icon", multiple: true, singularName: "customIcon" }
			},
			events: {

				/**
				 * Event fired when a user clicks on the personalization icon.
				 */
				personalizationPress: {},

				/**
				 * Event fired when a user changes the displayed content.
				 */
				contentChange: {
					parameters: {

						/**
						 * Id of the selected item.
						 */
						selectedItemId: { type: "string" }
					}
				},

				/**
				 * Custom event for zoom in.
				 */
				customZoomInPress: {},

				/**
				 * Custom event for zoom out.
				 */
				customZoomOutPress: {}
			}
		}
	});

	/* ============================================================ */
	/* Life-cycle Handling                                          */
	/* ============================================================ */

	ChartContainer.prototype.init = function() {
		//private properties
		this._aUsedContentIcons = [];
		this._aCustomIcons = [];
		this._oToolBar = null;
		this._aDimensionSelectors = [];
		this._bChartContentHasChanged = false;
		this._bControlNotRendered = true;
		this._bSegmentedButtonSaveSelectState = false;
		this._mOriginalVizFrameHeights = {};
		this._oActiveChartButton = null;
		this._oSelectedContent = null;
		this._sResizeListenerId = null;
		this._bHasApplicationToolbar = false;
		this._iPlaceholderPosition = 0; // Index of the placeholder inside application toolbar

		//Resource bundle
		this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

		//Right side..

		//Full screen button
		this._oFullScreenButton = new ToggleButton({
			icon: "sap-icon://full-screen",
			type: ButtonType.Transparent,
			tooltip: this._oResBundle.getText("CHARTCONTAINER_FULLSCREEN"),
			press: this._onFullScreenButtonPress.bind(this)
		});

		//Popup for chart content
		this._oPopup = new Popup({
			modal: true,
			shadow: false,
			autoClose: false
		});

		//legend button
		this._oShowLegendButton = new OverflowToolbarButton({
			icon: "sap-icon://legend",
			type: ButtonType.Transparent,
			text: this._oResBundle.getText("CHARTCONTAINER_LEGEND"),
			tooltip: this._oResBundle.getText("CHARTCONTAINER_LEGEND"),
			press: this._onShowLegendButtonPress.bind(this)
		});

		//personalization button
		this._oPersonalizationButton = new OverflowToolbarButton({
			icon: "sap-icon://action-settings",
			type: ButtonType.Transparent,
			text: this._oResBundle.getText("CHARTCONTAINER_PERSONALIZE"),
			tooltip: this._oResBundle.getText("CHARTCONTAINER_PERSONALIZE"),
			press: this._onPersonalizationButtonPress.bind(this)
		});

		//zoom in button
		this._oZoomInButton = new OverflowToolbarButton({
			icon: "sap-icon://zoom-in",
			type: ButtonType.Transparent,
			text: this._oResBundle.getText("CHARTCONTAINER_ZOOMIN"),
			tooltip: this._oResBundle.getText("CHARTCONTAINER_ZOOMIN"),
			press: this._zoom.bind(this, true)
		});

		//zoom out button
		this._oZoomOutButton = new OverflowToolbarButton({
			icon: "sap-icon://zoom-out",
			type: ButtonType.Transparent,
			text: this._oResBundle.getText("CHARTCONTAINER_ZOOMOUT"),
			tooltip: this._oResBundle.getText("CHARTCONTAINER_ZOOMOUT"),
			press: this._zoom.bind(this, false)
		});

		//segmentedButton for chart and table
		this._oChartSegmentedButton = new SegmentedButton({
			select: this._onChartSegmentButtonSelect.bind(this),

			// This is needed, because otherwise the SegmentedButton would sometimes stretch to the whole parent width causing overflow in the OverflowToolbar
			width: "auto"
		});

		//Left side...
		//display title if no dimension selectors
		this._oChartTitle = new Title();
	};

	ChartContainer.prototype.onAfterRendering = function() {
		this._sResizeListenerId = ResizeHandler.register(this, this._performHeightChanges.bind(this));
		if (!Device.system.desktop) {
			Device.resize.attachHandler(this._performHeightChanges, this);
		}

		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			//fix the flickering issue when switch chart in full screen mode
			jQuery.sap.delayedCall(500, this, this._performHeightChanges.bind(this));
		}
		var oSelectedContent = this.getSelectedContent(),
			bVizFrameSelected = false,
			oInnerContent;
		if (oSelectedContent) {
			oInnerContent = oSelectedContent.getContent();
			bVizFrameSelected = oInnerContent && oInnerContent.getMetadata().getName() === "sap.viz.ui5.controls.VizFrame";
		}
		this._oScrollEnablement = new ScrollEnablement(this, this.getId() + "-wrapper", {
			horizontal: !bVizFrameSelected,
			vertical: !bVizFrameSelected
		});
		this._bControlNotRendered = false;
	};

	ChartContainer.prototype.onBeforeRendering = function() {
		if (this._sResizeListenerId) {
			ResizeHandler.deregister(this._sResizeListenerId);
			this._sResizeListenerId = null;
		}
		if (!Device.system.desktop) {
			Device.resize.detachHandler(this._performHeightChanges, this);
		}

		if (this._bChartContentHasChanged || this._bControlNotRendered) {
			this._chartChange();
		}

		var aCustomIconsToBeDeleted = this._aCustomIcons; // Buttons in array have to be destroyed later on
		this._aCustomIcons = []; // Array has to be deleted to be synched with aggregation "customIcons"
		var aCustomIcons = this.getAggregation("customIcons");
		if (aCustomIcons && aCustomIcons.length > 0) {
			for (var i = 0; i < aCustomIcons.length; i++) {
				this._addButtonToCustomIcons(aCustomIcons[i]);
			}
		}

		//integrate toolbar inside the chart
		if (this._bControlNotRendered) {
			if (!this.getToolbar()) {
				//overflow embedded toolbar
				this.setAggregation("toolbar", new OverflowToolbar({ design: "Transparent" }));
			}
		}
		this._adjustDisplay();
		this._destroyButtons(aCustomIconsToBeDeleted); // Destroy buttons from custom icons array
	};

	ChartContainer.prototype.exit = function() {
		if (this._oFullScreenButton) {
			this._oFullScreenButton.destroy();
			this._oFullScreenButton = undefined;
		}
		if (this._oPopup) {
			this._oPopup.destroy();
			this._oPopup = undefined;
		}
		if (this._oShowLegendButton) {
			this._oShowLegendButton.destroy();
			this._oShowLegendButton = undefined;
		}
		if (this._oPersonalizationButton) {
			this._oPersonalizationButton.destroy();
			this._oPersonalizationButton = undefined;
		}
		if (this._oActiveChartButton) {
			this._oActiveChartButton.destroy();
			this._oActiveChartButton = undefined;
		}
		if (this._oChartSegmentedButton) {
			this._oChartSegmentedButton.destroy();
			this._oChartSegmentedButton = undefined;
		}
		if (this._oSelectedContent) {
			this._oSelectedContent.destroy();
			this._oSelectedContent = undefined;
		}
		if (this._oToolBar) {
			this._oToolBar.destroy();
			this._oToolBar = undefined;
		}
		if (this._aDimensionSelectors) {
			for (var i = 0; i < this._aDimensionSelectors.length; i++) {
				if (this._aDimensionSelectors[i]) {
					this._aDimensionSelectors[i].destroy();
				}
			}
			this._aDimensionSelectors = undefined;
		}
		if (this._oScrollEnablement) {
			this._oScrollEnablement.destroy();
			this._oScrollEnablement = undefined;
		}
		if (this._sResizeListenerId) {
			ResizeHandler.deregister(this._sResizeListenerId);
			this._sResizeListenerId = null;
		}
		if (!Device.system.desktop) {
			Device.resize.detachHandler(this._performHeightChanges, this);
		}
		if (this._oZoomInButton) {
			this._oZoomInButton.destroy();
			this._oZoomInButton = undefined;
		}
		if (this._oZoomOutButton) {
			this._oZoomOutButton.destroy();
			this._oZoomOutButton = undefined;
		}
	};

	/* =========================================================== */
	/* Event Handling                                              */
	/* =========================================================== */

	/**
	 * Button icon press event handler.
	 *
	 * @param {sap.ui.base.Event} oEvent Event object
	 * @private
	 */
	ChartContainer.prototype._onButtonIconPress = function(oEvent) {
		var sChartId = oEvent.getSource().getCustomData()[0].getValue();
		this._switchChart(sChartId);
	};

	/**
	 * Full screen button press event handler.
	 *
	 * @param {sap.ui.base.Event} oEvent Event object
	 * @private
	 */
	ChartContainer.prototype._onFullScreenButtonPress = function(oEvent) {
		if (oEvent.getParameter("pressed") === true) {
			this._oFullScreenButton.setTooltip(this._oResBundle.getText("CHARTCONTAINER_FULLSCREEN_CLOSE"));
			this._oFullScreenButton.setIcon("sap-icon://exit-full-screen");
		} else {
			this._oFullScreenButton.setTooltip(this._oResBundle.getText("CHARTCONTAINER_FULLSCREEN"));
			this._oFullScreenButton.setIcon("sap-icon://full-screen");
		}
		this._bSegmentedButtonSaveSelectState = true;
		this._toggleFullScreen();
		this._oFullScreenButton.focus();
	};

	/**
	 * Show legend button press event handler.
	 *
	 * @param {sap.ui.base.Event} oEvent Event object
	 * @private
	 */
	ChartContainer.prototype._onShowLegendButtonPress = function(oEvent) {
		this._bSegmentedButtonSaveSelectState = true;
		this._onLegendButtonPress();
	};

	/**
	 * Chart segment button select event handler.
	 *
	 * @param {sap.ui.base.Event} oEvent Event object
	 * @private
	 */
	ChartContainer.prototype._onChartSegmentButtonSelect = function(oEvent) {
		var sChartId = oEvent.getParameter("button").getCustomData()[0].getValue();
		this._bSegmentedButtonSaveSelectState = true;
		this._switchChart(sChartId);
	};

	/**
	 * Overflow Toolbar button press event handler.
	 *
	 * @param {sap.ui.base.Event} oEvent Event object
	 * @param {Object} data Press event data
	 * @private
	 */
	ChartContainer.prototype._onOverflowToolbarButtonPress = function(oEvent, data) {
		data.icon.firePress({
			controlReference: oEvent.getSource()
		});
	};

	/**
	 * Legend button press event handler.
	 *
	 * @private
	 */
	ChartContainer.prototype._onLegendButtonPress = function() {
		var oSelectedContent = this.getSelectedContent();
		if (oSelectedContent) {
			var selectedChart = oSelectedContent.getContent();
			//only support if content has legendVisible property
			if (jQuery.isFunction(selectedChart.getLegendVisible)) {
				var legendOn = selectedChart.getLegendVisible();
				selectedChart.setLegendVisible(!legendOn);
				this.setShowLegend(!legendOn);
			} else {
				this.setShowLegend(!this.getShowLegend());
			}
		} else {
			this.setShowLegend(!this.getShowLegend());
		}
	};

	/**
	 * Personalization button press event handler.
	 *
	 * @private
	 */
	ChartContainer.prototype._onPersonalizationButtonPress = function() {
		this.firePersonalizationPress();
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Setter for private property oSelectedContent.
	 *
	 * @private
	 * @param {sap.ui.core.Control} selectedContent The object to be set as currently viewed
	 * @returns {sap.suite.ui.commons.ChartContainer} Reference to this in order to allow method chaining
	 */
	ChartContainer.prototype._setSelectedContent = function(selectedContent) {
		var bChartIsVizFrame; //chart is instance of sap.viz.ui5.controls.VizFrame
		if (this.getSelectedContent() === selectedContent) {
			return this;
		}
		if (selectedContent === null) {
			this._oShowLegendButton.setVisible(false);
			return this;
		}
		//show/hide the showLegend buttons
		var oChart = selectedContent.getContent();
		this._toggleShowLegendButtons(oChart);

		bChartIsVizFrame = oChart && oChart.getMetadata && oChart.getMetadata().getName() === "sap.viz.ui5.controls.VizFrame";
		var bShowChart = bChartIsVizFrame || jQuery.isFunction(oChart.setLegendVisible); //hide legend icon if table, show if chart
		if (this.getShowLegendButton()) {
			this._oShowLegendButton.setVisible(bShowChart);
		}

		var bShowZoom = this.getShowZoom() && Device.system.desktop && bChartIsVizFrame;
		this._oZoomInButton.setVisible(bShowZoom);
		this._oZoomOutButton.setVisible(bShowZoom);
		this._oSelectedContent = selectedContent;
		return this;
	};

	/**
	 * Executes necessary updates relevant to the SelectionDetails including visibility and event registration.
	 *
	 * @private
	 * @returns {sap.m.SelectionDetailsFacade} The SelectionDetailsFacade of the currently selected content
	 */
	ChartContainer.prototype._getSelectionDetails = function() {
		var oContent = this.getSelectedContent();
		return oContent && oContent._getSelectionDetails();
	};

	/**
	 * Toggles the showLegend buttons.
	 *
	 * @private
	 * @param {sap.ui.core.Control} chart Selected content
	 */
	ChartContainer.prototype._toggleShowLegendButtons = function(chart) {
		var sChartId = chart.getId();
		var oRelatedButton = null;
		for (var i = 0; !oRelatedButton && i < this._aUsedContentIcons.length; i++) {
			if (this._aUsedContentIcons[i].getCustomData()[0].getValue() === sChartId && chart.getVisible() === true) {
				oRelatedButton = this._aUsedContentIcons[i];
				this._oChartSegmentedButton.setSelectedButton(oRelatedButton);
				break;
			}
		}
	};

	/**
	 * Setter for the selected button of the chart segmented button.
	 *
	 * The first button inside the segmented button is only set as default if the
	 * user did not click explicitly on another button inside the segmented button.
	 *
	 * @private
	 */
	ChartContainer.prototype._setDefaultOnSegmentedButton = function() {
		if (!this._bSegmentedButtonSaveSelectState) {
			this._oChartSegmentedButton.setSelectedButton(null);
		}
		this._bSegmentedButtonSaveSelectState = false;
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Toggles between normal and full screen modes.
	 *
	 * @private
	 */
	ChartContainer.prototype._toggleFullScreen = function() {
		var bFullScreen = this.getProperty("fullScreen");
		if (bFullScreen) {
			var aContent = this.getAggregation("content");
			this._closeFullScreen();
			this.setProperty("fullScreen", false, true);
			var oContent;
			var sHeight;
			for (var i = 0; i < aContent.length; i++) {
				oContent = aContent[i].getContent();
				oContent.setWidth("100%");
				sHeight = this._mOriginalVizFrameHeights[oContent.getId()];
				if (sHeight) {
					oContent.setHeight(sHeight);
				}
			}
			this.invalidate();
		} else {
			//Make sure the cart doesn't disappear when it's toggled with the full screen button.
			//By suppressing the bSuppressInvalidate argument for the setProperty, this delay shouldn't be needed.
			this._openFullScreen();
			this.setProperty("fullScreen", true, true);
		}
	};

	/**
	 * Opens ChartContainer content with Full Screen.
	 *
	 * @private
	 */
	ChartContainer.prototype._openFullScreen = function() {
		var eDock = Popup.Dock;
		this.$content = this.$();
		if (this.$content) {
			this.$tempNode = jQuery("<div></div>");
			this.$content.before(this.$tempNode);
			this._$overlay = jQuery("<div id='" + jQuery.sap.uid() + "'></div>");
			this._$overlay.addClass("sapSuiteUiCommonsChartContainerOverlay");
			this._$overlay.addClass("sapSuiteUiCommonsChartContainerChartArea");
			this._$overlay.append(this.$content);
			this._oPopup.setContent(this._$overlay);
		} else {
			jQuery.sap.log.warn("Overlay: content does not exist or contains more than one child");
		}
		this._oPopup.open(200, eDock.BeginTop, eDock.BeginTop, jQuery("body"));
		if (!Device.system.desktop) {
			// Fixes missing height adjustment on mobile devices
			jQuery.sap.delayedCall(500, this, this._performHeightChanges.bind(this));
		}
	};

	/**
	 * Closes Full Screen and returns to normal mode.
	 *
	 * @private
	 */
	ChartContainer.prototype._closeFullScreen = function() {
		if (this._oScrollEnablement !== null) {
			this._oScrollEnablement.destroy();
			this._oScrollEnablement = null;
		}
		this.$tempNode.replaceWith(this.$content);
		this._oToolBar.setDesign(MobileLibrary.ToolbarDesign.Auto);
		this._oPopup.close();
		this._$overlay.remove();
	};

	/**
	 * Performs height changes needed when toggling between full screen and normal modes.
	 *
	 * If mobile mode is used, swaps between portrait and landscape trigger height changes too.
	 *
	 * @private
	 */
	ChartContainer.prototype._performHeightChanges = function() {
		var $Toolbar,
			$VizFrame;

		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			var $this = this.$(),
				oSelectedContent,
				oInnerChart,
				sInnerChartClass;

			$Toolbar = $this.find(".sapSuiteUiCommonsChartContainerToolBarArea :first");
			//Only adjust height after both toolbar and chart are rendered in the DOM.
			$VizFrame = $this.find(".sapSuiteUiCommonsChartContainerChartArea :first");
			oSelectedContent = this.getSelectedContent();
			if ($Toolbar[0] && $VizFrame[0] && oSelectedContent) {
				var iChartContainerHeight = $this.height();
				var iToolBarHeight = $Toolbar.height();
				var iToolbarBottomBorder = Math.round(parseFloat($Toolbar.css("borderBottomWidth")));
				var iNewChartHeight = iChartContainerHeight - iToolBarHeight - iToolbarBottomBorder;
				var iExistingChartHeight = $VizFrame.height();
				oInnerChart = oSelectedContent.getContent();
				if (oInnerChart) {
					sInnerChartClass = oInnerChart.getMetadata().getName();
					if (sInnerChartClass === "sap.viz.ui5.controls.VizFrame" || sInnerChartClass === "sap.chart.Chart") {
						if (iNewChartHeight > 0 && iNewChartHeight !== iExistingChartHeight) {
							this._rememberOriginalHeight(oInnerChart);
							oInnerChart.setHeight(iNewChartHeight + "px");
						}
					} else if (oInnerChart.getDomRef().offsetWidth !== this.getDomRef().clientWidth) {
						//For table/non-vizFrame case, if width changes on the re-size event, force a re-render to have it fit in 100% width.
						this.rerender();
					}
				}
			}
		}
	};

	/**
	 * Updates the mOriginalVizFrameHeights property to reflect the height of the specified chart.
	 *
	 * In the full screen mode it is necessary to remember the original height of the current chart.
	 * This allows restoring it later on in non-full screen mode.
	 *
	 * @private
	 * @param {sap.chart.Chart|sap.viz.ui5.controls.VizFrame} chart Current chart or vizframe
	 */
	ChartContainer.prototype._rememberOriginalHeight = function(chart) {
		var sHeight;
		if (jQuery.isFunction(chart.getHeight)) {
			sHeight = chart.getHeight();
		} else {
			sHeight = 0;
		}
		this._mOriginalVizFrameHeights[chart.getId()] = sHeight;
	};

	/**
	 * Switches the currently selected chart.
	 *
	 * @private
	 * @param {String} chartId The ID of the chart to be searched
	 */
	ChartContainer.prototype._switchChart = function(chartId) {
		var oChart = this._findChartById(chartId);

		this._setSelectedContent(oChart);

		this.fireContentChange({
			selectedItemId: chartId
		}); //Fires the change event with the ID of the newly selected item.
		this.rerender();
	};

	/**
	 * Collects all charts.
	 *
	 * @private
	 */
	ChartContainer.prototype._chartChange = function() {
		var aCharts = this.getContent();
		this._destroyButtons(this._aUsedContentIcons);
		this._aUsedContentIcons = [];
		if (this.getContent().length === 0) {
			this._oChartSegmentedButton.removeAllButtons();
			this._setDefaultOnSegmentedButton();
			this.switchChart(null);
		}
		if (aCharts) {
			var bShowLegend = this.getShowLegend();
			var oInnerChart;
			var oButtonIcon;
			for (var i = 0; i < aCharts.length; i++) {
				// In case the content is not visible, skip this content.
				if (!aCharts[i].getVisible()) {
					continue;
				}
				oInnerChart = aCharts[i].getContent();
				if (jQuery.isFunction(oInnerChart.setVizProperties)) {
					oInnerChart.setVizProperties({
						legend: {
							visible: bShowLegend
						},
						sizeLegend: {
							visible: bShowLegend
						}
					});
				}
				if (jQuery.isFunction(oInnerChart.setWidth)) {
					oInnerChart.setWidth("100%");
				}
				if (jQuery.isFunction(oInnerChart.setHeight) && this._mOriginalVizFrameHeights[oInnerChart.getId()]) {
					oInnerChart.setHeight(this._mOriginalVizFrameHeights[oInnerChart.getId()]);
				}
				oButtonIcon = new Button({
					icon: aCharts[i].getIcon(),
					type: ButtonType.Transparent,
					//Fixes the bug where the chart button and the chart itself disappears when chart switches to full screen mode.
					width: "3rem",
					tooltip: aCharts[i].getTitle(),
					customData: [new CustomData({
						key: 'chartId',
						value: oInnerChart.getId()
					})],
					press: this._onButtonIconPress.bind(this)
				});
				this._aUsedContentIcons.push(oButtonIcon);

				if (i === 0) {
					this._setSelectedContent(aCharts[i]);
					this._oActiveChartButton = oButtonIcon;
				}
			}
		}
		this._bChartContentHasChanged = false;
	};

	/**
	 * Get the chart inside the content aggregation by id.
	 *
	 * @private
	 * @param {String} id The ID of the content control being searched for
	 * @returns {sap.ui.core.Control|null} The object found or null
	 */
	ChartContainer.prototype._findChartById = function(id) {
		var aObjects = this.getAggregation("content");
		if (aObjects) {
			for (var i = 0; i < aObjects.length; i++) {
				if (aObjects[i].getContent().getId() === id) {
					return aObjects[i];
				}
			}
		}
		return null;
	};

	/**
	 * Gets the exact position of the placeholder inside the toolbar
	 *
	 * @private
	 * @param {sap.m.OverflowToolbar} toolbar Toolbar where to find the placeholder
	 * @return {Number} The position of the placeholder or -1 if there is no placeholder
	 */
	ChartContainer.prototype._getToolbarPlaceHolderPosition = function(toolbar) {
		var oContent;
		for (var i = 0; i < toolbar.getContent().length; i++) {
			oContent = toolbar.getContent()[i];
			if (oContent.getMetadata && oContent.getMetadata().getName() === "sap.suite.ui.commons.ChartContainerToolbarPlaceholder") {
				return i;
			}
		}

		return -1;
	};

	/**
	 * Adds content to the toolbar at the provided position
	 *
	 * @private
	 * @param {Object} content The content to be added
	 * @param {Number} position The position where the content should be added
	 */
	ChartContainer.prototype._addContentToolbar = function(content, position) {
		if (!this._bHasApplicationToolbar) {
			if (!position) {
				this._oToolBar.addContent(content);
			} else {
				this._oToolBar.insertContent(content, position);
			}
		} else {
			// when an external toolbar is available, no embedded spacer is needed
			// all embedded standard buttons are arranged after the embedded spacer
			if (content instanceof ToolbarSpacer) {
				this._iPlaceholderPosition = this._getToolbarPlaceHolderPosition(this._oToolBar);
				return;
			}
			if (position) {
				this._iPlaceholderPosition = this._iPlaceholderPosition + position;
			}
			this._oToolBar.insertAggregation("content", content, this._iPlaceholderPosition, true);
			this._iPlaceholderPosition = this._iPlaceholderPosition + 1;
		}
	};

	/**
	 * Re-arranges the content inside the toolbar
	 *
	 * @private
	 */
	ChartContainer.prototype._rearrangeToolbar = function() {
		var iToolbarLength = this._aToolbarContent.length;
		for (var i = 0; i < iToolbarLength; i++) {
			this._oToolBar.insertContent(this._aToolbarContent[i], i);
		}
	};

	/**
	 * Adjusts customizable icons of overflow toolbar, displays chart buttons.
	 *
	 * @private
	 */
	ChartContainer.prototype._adjustIconsDisplay = function() {
		if (this.getShowSelectionDetails()) {
			this._addContentToolbar(this._getSelectionDetails());
		}
		if (this.getShowLegendButton()) {
			this._addContentToolbar(this._oShowLegendButton);
		}
		if (this.getShowZoom() && Device.system.desktop) {
			this._addContentToolbar(this._oZoomInButton);
			this._addContentToolbar(this._oZoomOutButton);
		}
		if (this.getShowPersonalization()) {
			this._addContentToolbar(this._oPersonalizationButton);
		}
		if (this.getShowFullScreen()) {
			this._addContentToolbar(this._oFullScreenButton);
		}

		var i = 0;
		for (i; i < this._aCustomIcons.length; i++) {
			this._addContentToolbar(this._aCustomIcons[i]);
		}
		if (!this._bControlNotRendered) {
			this._oChartSegmentedButton.removeAllButtons();
		}

		// ChartContainer with one chart does not have a segment container
		var iIconsCount = this._aUsedContentIcons.length;
		if (iIconsCount > 1) {
			for (i = 0; i < iIconsCount; i++) {
				this._oChartSegmentedButton.addButton(this._aUsedContentIcons[i]);
			}
			this._addContentToolbar(this._oChartSegmentedButton);
		}
	};

	/**
	 * Adjusts dimension selector displays.
	 *
	 * @private
	 */
	ChartContainer.prototype._adjustSelectorDisplay = function() {
		if (this._aDimensionSelectors.length === 0) {
			this._oChartTitle.setVisible(true);
			this._addContentToolbar(this._oChartTitle);
			return;
		}

		for (var i = 0; i < this._aDimensionSelectors.length; i++) {
			if (jQuery.isFunction(this._aDimensionSelectors[i].setAutoAdjustWidth)) {
				this._aDimensionSelectors[i].setAutoAdjustWidth(true);
			}
			this._addContentToolbar(this._aDimensionSelectors[i]);
		}
	};

	/**
	 * Re-creates the toolbar.
	 *
	 * @private
	 */
	ChartContainer.prototype._adjustDisplay = function() {
		this._oToolBar = this.getToolbar();
		this._oToolBar.removeAllContent();
		this._oToolBar.setProperty("height", "3rem", true);
		if (this._bHasApplicationToolbar) {
			// rearranges the application toolbar
			this._rearrangeToolbar();
			this._iPlaceholderPosition = 0;
		}
		this._adjustSelectorDisplay();
		this._addContentToolbar(new ToolbarSpacer());
		this._adjustIconsDisplay();
	};

	/**
	 * Adds a new button to Custom Icons array.
	 *
	 * @param {sap.ui.core.Icon} icon to be added to toolbar
	 * @private
	 */
	ChartContainer.prototype._addButtonToCustomIcons = function(icon) {
		var oIcon = icon;
		var sIconTooltip = oIcon.getTooltip();
		var oButton = new OverflowToolbarButton({
			icon: oIcon.getSrc(),
			text: sIconTooltip,
			tooltip: sIconTooltip,
			type: ButtonType.Transparent,
			width: "3rem",
			visible: oIcon.getVisible(),
			press: [{ icon: oIcon }, this._onOverflowToolbarButtonPress.bind(this)]
		});
		this._aCustomIcons.push(oButton);
	};

	/**
	 * Zooms in or out of ChartContainer content.
	 *
	 * @param {boolean} zoomIn Flag showing if zoom in or out should be performed
	 * @private
	 */
	ChartContainer.prototype._zoom = function(zoomIn) {
		var oChart = this.getSelectedContent().getContent();
		if (oChart.getMetadata().getName() === "sap.viz.ui5.controls.VizFrame") {
			if (zoomIn) {
				oChart.zoom({ "direction": "in" });
			} else {
				oChart.zoom({ "direction": "out" });
			}
		}
		if (zoomIn) {
			this.fireCustomZoomInPress();
		} else {
			this.fireCustomZoomOutPress();
		}
	};

	/**
	 * Destroys all the buttons that are passed.
	 *
	 * @param {sap.ui.core.Control[]} buttons The buttons which need to be destroyed
	 * @private
	 */
	ChartContainer.prototype._destroyButtons = function(buttons) {
		for (var i = 0; i < buttons.length; i++) {
			buttons[i].destroy();
		}
	};

	/**
	 * Updates legendVisible property for all inner charts in the content.
	 *
	 * @param {Boolean} showLegend Flag showing if legend should be shown
	 * @private
	 */
	ChartContainer.prototype._setShowLegendForAllCharts = function(showLegend) {
		var aContents = this.getContent();
		var oInnerChart;
		for (var i = 0; i < aContents.length; i++) {
			oInnerChart = aContents[i].getContent();
			if (jQuery.isFunction(oInnerChart.setLegendVisible)) {
				oInnerChart.setLegendVisible(showLegend);
			} else {
				jQuery.sap.log.info("ChartContainer: chart with id " + oInnerChart.getId() + " is missing the setVizProperties property");
			}
		}
	};

	/* =========================================================== */
	/* Public property getters/setters                             */
	/* =========================================================== */

	ChartContainer.prototype.setFullScreen = function(fullscreen) {
		if (this._bControlNotRendered) {
			//Can't set the full screen and toggle when the DOM is not loaded yet.
			return this;
		}
		if (this.getFullScreen() === fullscreen) {
			return this;
		}
		if (this.getProperty("fullScreen") !== fullscreen) {
			this._toggleFullScreen();
		}
		return this;
	};

	ChartContainer.prototype.setTitle = function(title) {
		if (this.getTitle() === title) {
			return this;
		}
		this._oChartTitle.setText(title);
		this.setProperty("title", title, true);
		return this;
	};

	ChartContainer.prototype.setShowLegendButton = function(showLegendButton) {
		if (this.getShowLegendButton() === showLegendButton) {
			return this;
		}
		this.setProperty("showLegendButton", showLegendButton, true);
		if (!this.getShowLegendButton()) {
			this.setShowLegend(false);
		}
		return this;
	};

	/**
	 * Getter for property selectorGroupLabel. Custom Label for Selectors Group.
	 *
	 * Default value is empty/undefined
	 *
	 * @deprecated
	 * @param {String} selectorGroupLabel The new value for property selectorGroupLabel
	 * @returns {sap.suite.ui.commons.ChartContainer} this to allow method chaining
	 */
	ChartContainer.prototype.setSelectorGroupLabel = function(selectorGroupLabel) {
		if (this.getSelectorGroupLabel() === selectorGroupLabel) {
			return this;
		}
		this.setProperty("selectorGroupLabel", selectorGroupLabel, true);
		return this;
	};

	ChartContainer.prototype.setShowLegend = function(showLegend) {
		if (this.getShowLegend() === showLegend) {
			return this;
		}
		this.setProperty("showLegend", showLegend, true);

		//Propagate to all charts.
		this._setShowLegendForAllCharts(showLegend);

		return this;
	};

	/* =========================================================== */
	/* Public aggregation getters/setters                          */
	/* =========================================================== */
	ChartContainer.prototype.setToolbar = function(toolbar) {
		if (!toolbar || this._getToolbarPlaceHolderPosition(toolbar) === -1) {
			jQuery.sap.log.info("A placeholder of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder' needs to be provided. Otherwise, the toolbar will be ignored");
			return this;
		}
		if (this.getToolbar() !== toolbar) {
			this.setAggregation("toolbar", toolbar);
		}
		if (this.getToolbar()) {
			this._aToolbarContent = this.getToolbar().getContent();
			this._bHasApplicationToolbar = true;
		} else {
			this._aToolbarContent = null;
			this._bHasApplicationToolbar = false;
		}
		this.invalidate();
		return this;
	};

	ChartContainer.prototype.getDimensionSelectors = function() {
		return this._aDimensionSelectors;
	};

	ChartContainer.prototype.indexOfDimensionSelector = function(dimensionSelector) {
		for (var i = 0; i < this._aDimensionSelectors.length; i++) {
			if (this._aDimensionSelectors[i] === dimensionSelector) {
				return i;
			}
		}
		return -1;
	};

	ChartContainer.prototype.addDimensionSelector = function(dimensionSelector) {
		this._aDimensionSelectors.push(dimensionSelector);
		return this;
	};

	ChartContainer.prototype.insertDimensionSelector = function(dimensionSelector, index) {
		if (!dimensionSelector) {
			return this;
		}
		var i;
		if (index < 0) {
			i = 0;
		} else if (index > this._aDimensionSelectors.length) {
			i = this._aDimensionSelectors.length;
		} else {
			i = index;
		}
		if (i !== index) {
			jQuery.sap.log.warning("ManagedObject.insertAggregation: index '" + index + "' out of range [0," + this._aDimensionSelectors.length + "], forced to " + i);
		}
		this._aDimensionSelectors.splice(i, 0, dimensionSelector);
		return this;
	};

	ChartContainer.prototype.destroyDimensionSelectors = function() {
		if (this._oToolBar) {
			for (var i = 0; i < this._aDimensionSelectors.length; i++) {
				if (this._aDimensionSelectors[i]) {
					this._oToolBar.removeContent(this._aDimensionSelectors[i]);
					this._aDimensionSelectors[i].destroy();
				}
			}
		}

		this._aDimensionSelectors = [];
		return this;
	};

	ChartContainer.prototype.removeDimensionSelector = function(dimensionSelector) {
		if (!dimensionSelector) {
			return null;
		}
		if (this._oToolBar) {
			this._oToolBar.removeContent(dimensionSelector);
		}
		var iDimensionSelectorIndex = this.indexOfDimensionSelector(dimensionSelector);
		if (iDimensionSelectorIndex === -1) {
			return null;
		} else {
			// return the removed dimension selector
			return this._aDimensionSelectors.splice(iDimensionSelectorIndex, 1)[0];
		}
	};

	ChartContainer.prototype.removeAllDimensionSelectors = function() {
		var aDimensionSelectors = this._aDimensionSelectors.slice();
		if (this._oToolBar) {
			for (var i = 0; i < this._aDimensionSelectors.length; i++) {
				if (this._aDimensionSelectors[i]) {
					this._oToolBar.removeContent(this._aDimensionSelectors[i]);
				}
			}
		}
		this._aDimensionSelectors = [];
		return aDimensionSelectors;
	};

	ChartContainer.prototype.addContent = function(content) {
		this.addAggregation("content", content);
		this._bChartContentHasChanged = true;
		return this;
	};

	ChartContainer.prototype.insertContent = function(content, index) {
		this.insertAggregation("content", content, index);
		this._bChartContentHasChanged = true;
		return this;
	};

	/**
	 * @deprecated Not supported anymore
	 */
	ChartContainer.prototype.updateContent = function() {
		this.updateAggregation("content");
		this._bChartContentHasChanged = true;
	};

	ChartContainer.prototype.addAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "dimensionSelectors") {
			return this.addDimensionSelector(object);
		} else {
			return ManagedObject.prototype.addAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.getAggregation = function(aggregationName, defaultForCreation) {
		if (aggregationName === "dimensionSelectors") {
			return this.getDimensionSelectors();
		} else {
			return ManagedObject.prototype.getAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.indexOfAggregation = function(aggregationName, object) {
		if (aggregationName === "dimensionSelectors") {
			return this.indexOfDimensionSelector(object);
		} else {
			return ManagedObject.prototype.indexOfAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.insertAggregation = function(aggregationName, object, index, suppressInvalidate) {
		if (aggregationName === "dimensionSelectors") {
			return this.insertDimensionSelector(object, index);
		} else {
			return ManagedObject.prototype.insertAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.destroyAggregation = function(aggregationName, suppressInvalidate) {
		if (aggregationName === "dimensionSelectors") {
			return this.destroyDimensionSelectors();
		} else {
			return ManagedObject.prototype.destroyAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.removeAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "dimensionSelectors") {
			return this.removeDimensionSelector(object);
		} else {
			return ManagedObject.prototype.removeAggregation.apply(this, arguments);
		}
	};

	ChartContainer.prototype.removeAllAggregation = function(aggregationName, suppressInvalidate) {
		if (aggregationName === "dimensionSelectors") {
			return this.removeAllDimensionSelectors();
		} else {
			return ManagedObject.prototype.removeAllAggregation.apply(this, arguments);
		}
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */

	/**
	 * Returns the currently selected content control.
	 *
	 * @public
	 * @returns  {sap.ui.core.Control} The currently selected content
	 */
	ChartContainer.prototype.getSelectedContent = function() {
		return this._oSelectedContent;
	};

	/**
	 * Returns the current instance of the delegate to other controls.
	 *
	 * @protected
	 * @returns {sap.ui.core.delegate.ScrollEnablement} The current instance of the delegate
	 */
	ChartContainer.prototype.getScrollDelegate = function() {
		return this._oScrollEnablement;
	};

	/**
	 * Switches the currently viewed content (triggers re-rendering).
	 *
	 * @public
	 * @param {sap.ui.core.Control} chart The new content (Chart or Table) to be displayed
	 */
	ChartContainer.prototype.switchChart = function(chart) {
		this._setSelectedContent(chart);
		//Fires the change event with the ID of the newly selected item.
		this.rerender();
	};

	/**
	 * Updates ChartContainer and re-renders all its contents.
	 *
	 * @public
	 * @returns {sap.suite.ui.commons.ChartContainer} Reference to this in order to allow method chaining
	 */
	ChartContainer.prototype.updateChartContainer = function() {
		this._bChartContentHasChanged = true;
		this.rerender();
		return this;
	};

	return ChartContainer;
});

}; // end of sap/suite/ui/commons/ChartContainer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnection') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ProcessFlowConnection.
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowConnection'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowConnection",[ './library', 'sap/ui/core/Control' ],
	function(library, Control) {
	"use strict";

	/**
	 * Constructor for a new ProcessFlowConnection.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * This control is used inside the ProcessFlow control to connect process flow node A with process flow node B in respect to the style(x) chosen by the application.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ProcessFlowConnection
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ProcessFlowConnection = Control.extend("sap.suite.ui.commons.ProcessFlowConnection", /** @lends sap.suite.ui.commons.ProcessFlowConnection.prototype */ { metadata : {
		library : "sap.suite.ui.commons",
		properties : {
			/**
			 * This is an array of the following attributes for one element:
			 * 1. flowLine (string) - A connection definition where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection between nodes in a process flow control. The string can contain the following characters:
			 * - "r" for right,
			 * - "t" for top,
			 * - "l" for left,
			 * - "b" for bottom.
			 * 2. targetNodeState (ProcessFlowNodeState) - A copy of the target node status. If the target node is created, the line is solid.
			 * If the target node is planned, the line is dashed.
			 * 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual style of the control.
			 * 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
			 */
			drawData : {type : "object[]", group : "Misc", defaultValue : null},

			/**
			 * This is a current zoom level for the connection. The point of connection to the node is derived from zoom level.
			 */
			zoomLevel : {type : "sap.suite.ui.commons.ProcessFlowZoomLevel", group : "Misc", defaultValue : "Two"},

			/**
			 * Type of the connection.
			 * @deprecated Since version 1.32.
			 * Type is deprecated because of no usages. There will be no replacement.
			 */
			type : {type : "sap.suite.ui.commons.ProcessFlowConnectionType", group : "Appearance", defaultValue : "Normal", deprecated: true},

			/**
			 * State of the connection.
			 * @deprecated Since version 1.32.
			 * State is deprecated because of no usages. There will be no replacement.
			 */
			state : {type : "sap.suite.ui.commons.ProcessFlowConnectionState", group : "Appearance", defaultValue : "Regular", deprecated: true}
		},
		defaultAggregation : "_labels",
		aggregations : {

			/**
			 * Specifies the ProcessFlowConnectionLabels for the current ProcessFlowConnection.
			 */
			_labels : {type : "sap.suite.ui.commons.ProcessFlowConnectionLabel", multiple : true, singularName : "_label", visibility : "hidden"}
		}
	}});

	/* Resource bundle for the localized strings. */
	ProcessFlowConnection.prototype._oResBundle = null;

	/* Internal property to hand over showLabels from parent control. */
	ProcessFlowConnection.prototype._showLabels = false;

	/* Defines the order of states from low to high priority. */
	ProcessFlowConnection.prototype._oStateOrderMapping = null;

	/* =========================================================== */
	/* Life-cycle Handling                                         */
	/* =========================================================== */

	ProcessFlowConnection.prototype.init = function () {
		if (!this._oResBundle) {
			this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		}

		this._oStateOrderMapping = {};
		this._oStateOrderMapping[library.ProcessFlowConnectionLabelState.Neutral] = 1;
		this._oStateOrderMapping[library.ProcessFlowConnectionLabelState.Positive] = 2;
		this._oStateOrderMapping[library.ProcessFlowConnectionLabelState.Critical] = 3;
		this._oStateOrderMapping[library.ProcessFlowConnectionLabelState.Negative] = 4;
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Returns ARIA text for current connection object.
	 *
	 * @private
	 * @param {object} traversedConnection The traversed connection object
	 * @returns {string} The ARIA result text for the connection
	 */
	ProcessFlowConnection.prototype._getAriaText = function (traversedConnection) {
		var sAriaText = "";
		var sAddArrowValue = " " + this._oResBundle.getText('PF_CONNECTION_ENDS');
		if (this._isHorizontalLine(traversedConnection)) {
			sAriaText = this._oResBundle.getText('PF_CONNECTION_HORIZONTAL_LINE');
			if (traversedConnection.arrow) {
				sAriaText += sAddArrowValue;
			}
		} else if (this._isVerticalLine(traversedConnection)) {
			sAriaText = this._oResBundle.getText('PF_CONNECTION_VERTICAL_LINE');
			if (traversedConnection.arrow) {
				sAriaText += sAddArrowValue;
			}
		} else {
			sAriaText = this._oResBundle.getText('PF_CONNECTION_BRANCH');
			if (traversedConnection.arrow) {
				sAriaText += sAddArrowValue;
			}
		}
		return sAriaText;
	};

	/**
	 * Returns the visible label. If multiple labels are available for one connection,
	 * the label will be selected by state and priority.
	 * The first criteria is state, based on the order 'Neutral --> Positive --> Critical --> Negative'
	 * Assuming there are multiple entries with the same state (e.g. 2x Negative),
	 * the priority decides which one needs to be selected.
	 *
	 * @private
	 * @returns {sap.suite.ui.commons.ProcessFlowConnectionLabel} The visible label
	 */
	ProcessFlowConnection.prototype._getVisibleLabel = function () {
		var oVisibleLabel = null;

		if (this.getAggregation("_labels")) {
			var aLabels = this.getAggregation("_labels");
			for (var i = 0; i < aLabels.length; i++) {
				var oCurrentLabel = aLabels[i];
				if (oCurrentLabel && oCurrentLabel.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
					if (oVisibleLabel) {
						//Selects label to render, based on state.
						if (this._oStateOrderMapping[oVisibleLabel.getState()] < this._oStateOrderMapping[oCurrentLabel.getState()]) {
							oVisibleLabel = oCurrentLabel;
						} else if (this._oStateOrderMapping[oVisibleLabel.getState()] === this._oStateOrderMapping[oCurrentLabel.getState()]) {
							//Selects label to render, based on priority. This is only relevant, if state is the same.
							if (oVisibleLabel.getPriority() < oCurrentLabel.getPriority()) {
								oVisibleLabel = oCurrentLabel;
							}
						}
					} else {
						oVisibleLabel = oCurrentLabel;
					}
				}
			}
		}

		return oVisibleLabel;
	};

	/**
	 * Returns the internal value for showLabels.
	 *
	 * @private
	 * @returns {boolean} The showLabels value
	 */
	ProcessFlowConnection.prototype._getShowLabels = function () {
		return ProcessFlowConnection.prototype._showLabels;
	};

	/**
	 * Sets the internal value for showLabels.
	 *
	 * @private
	 * @param {boolean} showLabels The showLabels value to set
	 */
	ProcessFlowConnection.prototype._setShowLabels = function (showLabels) {
		ProcessFlowConnection.prototype._showLabels = showLabels;
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Create connection object depends on draw data.
	 *
	 * @private
	 * @returns {object} connection
	 */
	ProcessFlowConnection.prototype._traverseConnectionData = function () { // EXC_SAP_006_1
		var aConnectionData = this.getDrawData();
		if (!aConnectionData) {
			return {};
		}
		var oTraversedConnection = this._createConnection(aConnectionData);
		if (this.getAggregation("_labels")) {
			oTraversedConnection.labels = this.getAggregation("_labels");
		}
		return oTraversedConnection;
	};

	/**
	 * Checks if the given connection is a vertical line.
	 *
	 * @private
	 * @param {object} connection To retrieve information for vertical line from
	 * @returns {boolean} True if the line is vertical, otherwise false
	 */
	ProcessFlowConnection.prototype._isVerticalLine = function (connection) {
		return connection.hasOwnProperty("left") && !connection.left.draw && connection.hasOwnProperty("right") && !connection.right.draw &&
			connection.hasOwnProperty("top") && connection.top.draw && connection.hasOwnProperty("bottom") && connection.bottom.draw;
	};

	/**
	 * Checks if the given connection is a horizontal line.
	 *
	 * @private
	 * @param {object} connection To retrieve information for horizontal line from
	 * @returns {boolean} True if the line is horizontal, otherwise false
	 */
	ProcessFlowConnection.prototype._isHorizontalLine = function (connection) {
		return connection.hasOwnProperty("left") && connection.left.draw && connection.hasOwnProperty("right") && connection.right.draw &&
			connection.hasOwnProperty("top") && !connection.top.draw && connection.hasOwnProperty("bottom") && !connection.bottom.draw;
	};

	/**
	 * Creates the connection object using the connection data array.
	 * Connection in this context means all lines (top,right,bottom,left)
	 *
	 * @private
	 * @param {object[]} connectionData Array with connection data input to generate connection
	 * @returns {object} The generated connection
	 */
	ProcessFlowConnection.prototype._createConnection = function (connectionData) {
		var oLine = { draw: false, type: "", state: "" };
		var oConnection = { right: oLine, top: oLine, left: oLine, bottom: oLine, arrow: false };

		for (var i = 0; i < connectionData.length; i++) {
			oConnection.right = this._createLine(connectionData[i], "r", oConnection.right);
			oConnection.top = this._createLine(connectionData[i], "t", oConnection.top);
			oConnection.left = this._createLine(connectionData[i], "l", oConnection.left);
			oConnection.bottom = this._createLine(connectionData[i], "b", oConnection.bottom);

			if (connectionData[i].flowLine.indexOf("r") >= 0) {
				if (connectionData[i].hasArrow) {
					oConnection.arrow = true;
				}
			}
		}
		return oConnection;
	};

	/**
	 * Creates the line (element of connection) for the given direction based on the connection data.
	 * Line in this context means a specific line (e.g. left) of a connection.
	 *
	 * @private
	 * @param {object} connectionData Connection data input
	 * @param {string} direction Flag which direction is looked for
	 * @param {object} line Current line information
	 * @returns {object} The plain object containing connection line information
	 */
	ProcessFlowConnection.prototype._createLine = function (connectionData, direction, line) {
		var oLine = {
			draw: line.draw,
			type: line.type,
			state: line.state
		};
		if (connectionData.flowLine.indexOf(direction) >= 0) {
			oLine.draw = true;

			//Type
			if (connectionData.targetNodeState === library.ProcessFlowNodeState.Neutral ||
				connectionData.targetNodeState === library.ProcessFlowNodeState.Positive ||
				connectionData.targetNodeState === library.ProcessFlowNodeState.Negative ||
				connectionData.targetNodeState === library.ProcessFlowNodeState.Critical) {
				oLine.type = library.ProcessFlowConnectionType.Normal;
			} else if (connectionData.targetNodeState === library.ProcessFlowNodeState.Planned ||
				connectionData.targetNodeState === library.ProcessFlowNodeState.PlannedNegative) {
				// Planned state cannot override created state.
				if (oLine.type !== library.ProcessFlowConnectionType.Normal) {
					oLine.type = library.ProcessFlowConnectionType.Planned;
				}
			}

			//DisplayState
			if (connectionData.displayState === library.ProcessFlowDisplayState.Selected ||
				connectionData.displayState === library.ProcessFlowDisplayState.SelectedHighlighted ||
				connectionData.displayState === library.ProcessFlowDisplayState.SelectedHighlightedFocused ||
				connectionData.displayState === library.ProcessFlowDisplayState.SelectedFocused) {

				oLine.state = library.ProcessFlowConnectionState.Selected;

			} else if (connectionData.displayState === library.ProcessFlowDisplayState.Highlighted ||
				connectionData.displayState === library.ProcessFlowDisplayState.HighlightedFocused) {

				// Highlighted display state cannot override selected display state.
				if (oLine.state !== library.ProcessFlowConnectionState.Selected) {
					oLine.state = library.ProcessFlowConnectionState.Highlighted;
				}

			} else if (connectionData.displayState === library.ProcessFlowDisplayState.Regular ||
				connectionData.displayState === library.ProcessFlowDisplayState.RegularFocused) {

				// Regular display state cannot override selected or highlighted display states.
				if (oLine.state !== library.ProcessFlowConnectionState.Highlighted &&
					oLine.state !== library.ProcessFlowConnectionState.Selected) {
					oLine.state = library.ProcessFlowConnectionState.Regular;
				}

			} else if (connectionData.displayState === library.ProcessFlowDisplayState.Dimmed ||
				connectionData.displayState === library.ProcessFlowDisplayState.DimmedFocused) {

				// Dimmed display state cannot override highlighted, selected or regular display states.
				if (oLine.state !== library.ProcessFlowConnectionState.Highlighted &&
					oLine.state !== library.ProcessFlowConnectionState.Regular &&
					oLine.state !== library.ProcessFlowConnectionState.Selected) {
					oLine.state = library.ProcessFlowConnectionState.Dimmed;
				}
			}
		}
		return oLine;
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */

	ProcessFlowConnection.prototype.addConnectionData = function (singleConnectionData) {
		var oTempConnectionData = this.getDrawData();
		if (!oTempConnectionData) {
			oTempConnectionData = [];
		}
		oTempConnectionData.push(singleConnectionData);
		this.setDrawData(oTempConnectionData);
		return oTempConnectionData;
	};

	ProcessFlowConnection.prototype.destroyAggregation = function (sAggregationName, bSuppressInvalidate) {
		this.removeAllAggregation("_labels", true);
	};


	return ProcessFlowConnection;

});

}; // end of sap/suite/ui/commons/ProcessFlowConnection.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnectionLabel') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ProcessFlowConnectionLabel.
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowConnectionLabel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowConnectionLabel",['sap/m/Button', './library', 'sap/ui/core/InvisibleText'],
	function(Button, library, InvisibleText) {
	"use strict";

	/**
	 * Constructor for a new ProcessFlowConnectionLabel.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This control is used inside the ProcessFlow control providing information on connections. Using this control, you need to take care of the lifetime handling instance as instances of this control are not destroyed automatically.
	 * @extends sap.m.Button
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ProcessFlowConnectionLabel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ProcessFlowConnectionLabel = Button.extend("sap.suite.ui.commons.ProcessFlowConnectionLabel", /** @lends sap.suite.ui.commons.ProcessFlowConnectionLabel.prototype */ {
		metadata : {
			library : "sap.suite.ui.commons",
			properties : {
				/**
				 * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides which one needs to be selected.
				 */
				priority : {type : "int", group : "Misc", defaultValue : 0},

				/**
				 * Specifies the state of the connection label. If multiple labels are available for one connection, the label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
				 */
				state : {type : "sap.suite.ui.commons.ProcessFlowConnectionLabelState", group : "Appearance", defaultValue : "Neutral"}
			}
		}
	});

	/**
	 * This file defines the behavior for the control.
	 */
	ProcessFlowConnectionLabel.prototype._bNavigationFocus = false;
	ProcessFlowConnectionLabel.prototype._bSelected = false;
	ProcessFlowConnectionLabel.prototype._bHighlighted = false;
	ProcessFlowConnectionLabel.prototype.ACTIVE_CSS_CLASS = "sapSuiteUiCommonsProcessFlowLabelActive";
	ProcessFlowConnectionLabel.prototype.HOVER_CSS_CLASS = "sapSuiteUiCommonsProcessFlowLabelHover";
	ProcessFlowConnectionLabel.prototype.MOUSE_EVENTS = "mouseenter mousedown mouseup mouseleave";
	/* resource bundle for the localized strings */
	ProcessFlowConnectionLabel.prototype._oResBundle = null;
	ProcessFlowConnectionLabel.prototype._bDimmed = false;

	/* =========================================================== */
	/* Life-cycle Handling                                          */
	/* =========================================================== */

	ProcessFlowConnectionLabel.prototype.init = function () {
		//Handle base class call
		if (Button.prototype.init) {
			Button.prototype.init.apply(this, arguments);
		}

		this.addStyleClass("sapSuiteUiCommonsProcessFlowConnectionLabel");
		if (!this._oResBundle) {
			this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		}
	};

	ProcessFlowConnectionLabel.prototype.exit = function () {
		this.$().unbind(this.MOUSE_EVENTS, this._handleEvents);
	};

	ProcessFlowConnectionLabel.prototype.onBeforeRendering = function () {
		this.$().unbind(this.MOUSE_EVENTS, this._handleEvents);
		this._configureStateClasses();
		this._setLabelWidth();
		this._setAriaDetails();
	};

	ProcessFlowConnectionLabel.prototype.onAfterRendering = function () {
		if (!this.getText()){
			if (this.$().children().hasClass("sapMBtnIconFirst")) {
				this.$().children().removeClass("sapMBtnIconFirst");
			}
		}
		this.$().bind(this.MOUSE_EVENTS, this._handleEvents.bind(this));
	};

	/* =========================================================== */
	/* Event Handling                                              */
	/* =========================================================== */

	/**
	 * General event handler.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The original event object
	 */
	ProcessFlowConnectionLabel.prototype._handleEvents = function (oEvent) {
		var oProcessFlowClass = sap.ui.require("sap/suite/ui/commons/ProcessFlow");
		if (!oProcessFlowClass) {
			return;
		}
		switch (oEvent.type) {
			case oProcessFlowClass._mouseEvents.mouseEnter:
				this.$().find("*").addClass(this.HOVER_CSS_CLASS);
				break;
			case oProcessFlowClass._mouseEvents.mouseDown:
				this.$().find("*").removeClass(this.HOVER_CSS_CLASS);
				this.$().find("*").addClass(this.ACTIVE_CSS_CLASS);
				break;
			case oProcessFlowClass._mouseEvents.mouseUp:
				this.$().find("*").removeClass(this.ACTIVE_CSS_CLASS);
				this.$().find("*").addClass(this.HOVER_CSS_CLASS);
				break;
			case oProcessFlowClass._mouseEvents.mouseLeave:
				this.$().find("*").removeClass(this.ACTIVE_CSS_CLASS);
				this.$().find("*").removeClass(this.HOVER_CSS_CLASS);
				break;
			default:
		}
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Gets the current navigation focus.
	 *
	 * @private
	 * @returns {boolean} Internal state of navigation focus enablement
	 */
	ProcessFlowConnectionLabel.prototype._getNavigationFocus = function () {
		return this._bNavigationFocus;
	};

	/**
	 * Sets the current navigation focus.
	 *
	 * @private
	 * @param {boolean} navigationFocus Whether navigation focus is enabled or not
	 */
	ProcessFlowConnectionLabel.prototype._setNavigationFocus = function (navigationFocus) {
		this._bNavigationFocus = navigationFocus;
	};

	/**
	 * Get the selected value.
	 *
	 * @private
	 * @param {boolean} selected Whether the label is selected or not
	 */
	ProcessFlowConnectionLabel.prototype._setSelected = function (selected) {
		this._bSelected = selected;
	};

	/**
	 * Sets the selected value.
	 *
	 * @private
	 * @returns {boolean} True if the label is selected, otherwise false
	 */
	ProcessFlowConnectionLabel.prototype._getSelected = function () {
		return this._bSelected;
	};

	/**
	 * Sets the highlighted value.
	 *
	 * @private
	 * @param {boolean} highlighted Whether the label is highlighted or not
	 */
	ProcessFlowConnectionLabel.prototype._setHighlighted = function (highlighted) {
		this._bHighlighted = highlighted;
	};

	/**
	 * Get the highlighted value.
	 *
	 * @private
	 * @returns {boolean} Whether the label is highlighted or not
	 */
	ProcessFlowConnectionLabel.prototype._getHighlighted = function () {
		return this._bHighlighted;
	};

	/**
	 * Sets the dimmed value.
	 *
	 * @private
	 * @param {boolean} dimmed The label is dimmed or not
	 */
	ProcessFlowConnectionLabel.prototype._setDimmed = function (dimmed) {
		this._bDimmed = dimmed;
	};

	/**
	 * Get the dimmed value.
	 *
	 * @private
	 * @returns {boolean} Whether the label is dimmed or not
	 */
	ProcessFlowConnectionLabel.prototype._getDimmed = function () {
		return this._bDimmed;
	};

	/**
	 * Overwrites setWidth of base control.
	 * Avoids manual set of width. Only possible in init by control itself.
	 *
	 * @private
	 */
	ProcessFlowConnectionLabel.prototype.setWidth = function () {};

	/**
	 * Overwrites setIconFirst of base control.
	 * Avoids manual set of iconFirst. Not supported by control.
	 *
	 * @private
	 */
	ProcessFlowConnectionLabel.prototype.setIconFirst = function () {};

	/**
	 * Sets the width of the label, based on icon and text.
	 *
	 * @private
	 */
	ProcessFlowConnectionLabel.prototype._setLabelWidth = function () {
		if (this.getIcon()) {
			if (this.getText()) {
				this.setProperty("width", "4.5rem", false);
			} else {
				this.setProperty("width", "2rem", false);
			}
		} else if (this.getText() && this.getText().length > 2) {
			this.setProperty("width", "4.5rem", false);
		} else {
			this.setProperty("width", "2rem", false);
		}
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Configures the CSS classes based on state.
	 *
	 * @private
	 */
	ProcessFlowConnectionLabel.prototype._configureStateClasses = function () {
		switch (this.getState()) {
			case library.ProcessFlowConnectionLabelState.Positive:
				this.addStyleClass("labelStatePositive");
				break;
			case library.ProcessFlowConnectionLabelState.Critical:
				this.addStyleClass("labelStateCritical");
				break;
			case library.ProcessFlowConnectionLabelState.Negative:
				this.addStyleClass("labelStateNegative");
				break;
			default:
				this.addStyleClass("labelStateNeutral");
		}

		if (this._getDimmed() && this.getEnabled()) {
			this.addStyleClass("labelDimmed");
		} else {
			this.removeStyleClass("labelDimmed");
		}
		if (this._getSelected()) {
			this.addStyleClass("labelSelected");
		} else {
			this.removeStyleClass("labelSelected");
		}
		if (this._getHighlighted()) {
			this.addStyleClass("labelHighlighted");
		} else {
			this.removeStyleClass("labelHighlighted");
		}
	};

	/**
	 * Sets the ARIA details.
	 *
	 * @private
	 */
	ProcessFlowConnectionLabel.prototype._setAriaDetails = function() {
		//General information that the control is a connection label
		var oInvisibleLabelText = new InvisibleText();
		oInvisibleLabelText.setText(this._oResBundle.getText('PF_CONNECTIONLABEL'));
		oInvisibleLabelText.toStatic(); //Be aware that without a call the screen reader does not read the content.

		//Add specific button information
		var oInvisibleLabelContent = new InvisibleText();
		oInvisibleLabelContent.setText(this.getText());
		oInvisibleLabelContent.toStatic(); //Be aware that without a call the screen reader does not read the content.

		if (this.getAriaLabelledBy().length === 0) {
			this.addAriaLabelledBy(oInvisibleLabelText);
			this.addAriaLabelledBy(oInvisibleLabelContent);
		}
	};


	return ProcessFlowConnectionLabel;

});

}; // end of sap/suite/ui/commons/ProcessFlowConnectionLabel.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowConnectionRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowConnectionRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/ProcessFlowConnectionRenderer",['./library'],
	function(library) {
	"use strict";

	/**
	 * @class ProcessFlowConnection renderer.
	 * @static
	 */
	var ProcessFlowConnectionRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowConnectionRenderer.render = function (oRm, oControl) {
		var oConnection = oControl._traverseConnectionData();
		var sZoomLevel = oControl.getZoomLevel();

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId());

		//Writes ARIA details.
		oRm.writeAttribute("role", "presentation");
		oRm.writeAttributeEscaped("aria-label", oControl._getAriaText(oConnection));
		oRm.write(">");

		//Writes the lines.
		if (oControl._isHorizontalLine(oConnection)) {
			this._writeHorizontalLine(oRm, oConnection, sZoomLevel, oControl);
		} else if (oControl._isVerticalLine(oConnection)) {
			this._writeVerticalLine(oRm, oConnection, sZoomLevel, oControl._getShowLabels());
		} else {
			this._writeSpecialLine(oRm, oConnection, sZoomLevel, oControl);
		}
		oRm.write("</div>");
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Writes the vertical line.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {boolean} showLabels Show labels
	 */
	ProcessFlowConnectionRenderer._writeVerticalLine = function (oRm, connection, zoomLevel, showLabels) {
		// Left column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (showLabels) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxZoom1Width");
				oRm.addClass("boxWideZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxZoom3Width");
				oRm.addClass("boxWideZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxZoom4Width");
				oRm.addClass("boxWideZoom4Height");
				break;
			default:
				oRm.addClass("boxZoom2Width");
				oRm.addClass("boxWideZoom2Height");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Middle column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		oRm.addClass("boxMiddleBorderWidth");
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxWideZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxWideZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxWideZoom4Height");
				break;
			default:
				oRm.addClass("boxWideZoom2Height");
		}
		oRm.addClass("borderLeft");
		if (connection.top.type === library.ProcessFlowConnectionType.Planned) {
			oRm.addClass("borderLeftTypePlanned");
		} else {
			oRm.addClass("borderLeftTypeNormal");
		}
		if (connection.top.state === library.ProcessFlowConnectionState.Highlighted) {
			oRm.addClass("borderLeftStateHighlighted");
			oRm.addClass("stateHighlighted");
		} else if (connection.top.state === library.ProcessFlowConnectionState.Dimmed) {
			oRm.addClass("borderLeftStateDimmed");
		} else if (connection.top.state === library.ProcessFlowConnectionState.Selected) {
			oRm.addClass("borderLeftStateSelected");
			oRm.addClass("stateSelected");
		} else {
			oRm.addClass("borderLeftStateRegular");
			oRm.addClass("stateRegular");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Right column
		// Omitted

		ProcessFlowConnectionRenderer._resetFloat(oRm);
	};

	/**
	 * Writes the horizontal line.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._writeHorizontalLine = function (oRm, connection, zoomLevel, oControl) {
		//1st row
		oRm.write("<div");
		oRm.addClass("boxWideWidth");
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxTopZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxTopZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxTopZoom4Height");
				break;
			default:
				oRm.addClass("boxTopZoom2Height");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// 2nd row
		oRm.write("<div");
		if (connection.arrow) {
			// connection column
			oRm.addClass("parentPosition");
			if (oControl._getShowLabels()) {
				oRm.addClass("sapSuiteUiPFWithLabel");
			}
			switch (zoomLevel) {
				case library.ProcessFlowZoomLevel.One:
					oRm.addClass("boxWideArrowZoom1Width");
					break;
				case library.ProcessFlowZoomLevel.Three:
					oRm.addClass("boxWideArrowZoom3Width");
					break;
				case library.ProcessFlowZoomLevel.Four:
					oRm.addClass("boxWideArrowZoom4Width");
					break;
				default:
					oRm.addClass("boxWideArrowZoom2Width");
			}
		} else {
			oRm.addClass("boxWideWidth");
		}
		oRm.addClass("boxMiddleBorderHeight");
		oRm.addClass("borderBottom");
		if (connection.right.type === library.ProcessFlowConnectionType.Planned) {
			oRm.addClass("borderBottomTypePlanned");
		} else {
			oRm.addClass("borderBottomTypeNormal");
		}
		if (connection.right.state === library.ProcessFlowConnectionState.Highlighted) {
			oRm.addClass("borderBottomStateHighlighted");
			oRm.addClass("stateHighlighted");
		} else if (connection.right.state === library.ProcessFlowConnectionState.Dimmed) {
			oRm.addClass("borderBottomStateDimmed");
		} else if (connection.right.state === library.ProcessFlowConnectionState.Selected) {
			oRm.addClass("borderBottomStateSelected");
			oRm.addClass("stateSelected");
		} else {
			oRm.addClass("borderBottomStateRegular");
			oRm.addClass("stateRegular");
		}
		oRm.writeClasses();
		oRm.write(">");

		if (connection.labels && oControl._showLabels) {
			ProcessFlowConnectionRenderer._renderLabel(oRm, oControl, connection);
		}

		if (connection.arrow) {
			oRm.write("<div");
			oRm.addClass("arrowRight");
			if (connection.right.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderLeftStateHighlighted");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderLeftStateDimmed");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderLeftStateSelected");
			} else {
				oRm.addClass("borderLeftStateRegular");
			}
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
		}
		oRm.write("</div>");

		// 3rd row
		// Omitted
	};

	/**
	 * Writes the special line (e.g. branch or corner).
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._writeSpecialLine = function (oRm, connection, zoomLevel, oControl) {
		ProcessFlowConnectionRenderer._writeFirstRowOfSpecialLine(oRm, connection, zoomLevel, oControl);
		ProcessFlowConnectionRenderer._writeSecondRowOfSpecialLine(oRm, connection, zoomLevel, oControl);
		ProcessFlowConnectionRenderer._writeThirdRowOfSpecialLine(oRm, connection, zoomLevel, oControl);
		ProcessFlowConnectionRenderer._resetFloat(oRm);
	};

	/**
	 * Writes the first row of a special line (e.g. branch).
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._writeFirstRowOfSpecialLine = function (oRm, connection, zoomLevel, oControl) {
		// Left column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxZoom1Width");
				oRm.addClass("boxTopZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxZoom3Width");
				oRm.addClass("boxTopZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxZoom4Width");
				oRm.addClass("boxTopZoom4Height");
				break;
			default:
				oRm.addClass("boxZoom2Width");
				oRm.addClass("boxTopZoom2Height");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Middle column
		oRm.write("<div");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		oRm.addClass("floatLeft");
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxTopZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxTopZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxTopZoom4Height");
				break;
			default:
				oRm.addClass("boxTopZoom2Height");
		}
		if (connection.hasOwnProperty("top") && connection.top.draw) {
			oRm.addClass("boxMiddleBorderWidth");
			oRm.addClass("borderLeft");
			if (connection.top.type === library.ProcessFlowConnectionType.Planned) {
				oRm.addClass("borderLeftTypePlanned");
			} else {
				oRm.addClass("borderLeftTypeNormal");
			}
			if (connection.top.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderLeftStateHighlighted");
				oRm.addClass("stateHighlighted");
			} else if (connection.top.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderLeftStateDimmed");
			} else if (connection.top.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderLeftStateSelected");
				oRm.addClass("stateSelected");
			} else {
				oRm.addClass("borderLeftStateRegular");
				oRm.addClass("stateRegular");
			}
		} else {
			oRm.addClass("boxMiddleWidth");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Right column
		// Omitted
	};

	/**
	 * Writes the second row of a special line (e.g. branch).
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._writeSecondRowOfSpecialLine = function (oRm, connection, zoomLevel, oControl) {
		ProcessFlowConnectionRenderer._resetFloat(oRm);

		// Left column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxZoom1Width");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxZoom3Width");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxZoom4Width");
				break;
			default:
				oRm.addClass("boxZoom2Width");
		}
		if (connection.hasOwnProperty("left") && connection.left.draw) {
			oRm.addClass("boxMiddleBorderHeight");
			oRm.addClass("borderBottom");
			if (connection.left.type === library.ProcessFlowConnectionType.Planned) {
				oRm.addClass("borderBottomTypePlanned");
			} else {
				oRm.addClass("borderBottomTypeNormal");
			}
			if (connection.left.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderBottomStateHighlighted");
				oRm.addClass("stateHighlighted");
			} else if (connection.left.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderBottomStateDimmed");
			} else if (connection.left.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderBottomStateSelected");
				oRm.addClass("stateSelected");
			} else {
				oRm.addClass("borderBottomStateRegular");
				oRm.addClass("stateRegular");
			}
		} else {
			oRm.addClass("boxMiddleHeight");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Middle column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		oRm.addClass("boxMiddleWidth");
		oRm.addClass("boxMiddleBorderHeight");
		if ((connection.hasOwnProperty("left") && connection.left.draw) ||
			(connection.hasOwnProperty("right") && connection.right.draw) ||
			(connection.hasOwnProperty("top") && connection.top.draw) ||
			(connection.hasOwnProperty("bottom") && connection.bottom.draw)) {
			oRm.addClass("borderBottom");
			oRm.addClass("borderBottomTypeNormal");
			if (connection.right.state === library.ProcessFlowConnectionState.Highlighted ||
				connection.top.state === library.ProcessFlowConnectionState.Highlighted ||
				connection.left.state === library.ProcessFlowConnectionState.Highlighted ||
				connection.bottom.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderBottomStateHighlighted");
				oRm.addClass("stateHighlighted");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Selected ||
				connection.top.state === library.ProcessFlowConnectionState.Selected ||
				connection.left.state === library.ProcessFlowConnectionState.Selected ||
				connection.bottom.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderBottomStateSelected");
				oRm.addClass("stateSelected");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Dimmed ||
				connection.top.state === library.ProcessFlowConnectionState.Dimmed ||
				connection.left.state === library.ProcessFlowConnectionState.Dimmed ||
				connection.bottom.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderBottomStateDimmed");
			} else {
				oRm.addClass("borderBottomStateRegular");
				oRm.addClass("stateRegular");
			}
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Right column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		if (connection.arrow) {
			oRm.addClass("parentPosition");
			switch (zoomLevel) {
				case library.ProcessFlowZoomLevel.One:
					oRm.addClass("boxArrowZoom1Width");
					break;
				case library.ProcessFlowZoomLevel.Three:
					oRm.addClass("boxArrowZoom3Width");
					break;
				case library.ProcessFlowZoomLevel.Four:
					oRm.addClass("boxArrowZoom4Width");
					break;
				default:
					oRm.addClass("boxArrowZoom2Width");
			}
		} else if (oControl._getShowLabels()) {
			switch (zoomLevel) {
				case library.ProcessFlowZoomLevel.One:
					oRm.addClass("boxZoom1WidthWithLabel");
					break;
				case library.ProcessFlowZoomLevel.Three:
					oRm.addClass("boxZoom3WidthWithLabel");
					break;
				case library.ProcessFlowZoomLevel.Four:
					oRm.addClass("boxZoom4WidthWithLabel");
					break;
				default:
					oRm.addClass("boxZoom2WidthWithLabel");
			}
		} else {
			switch (zoomLevel) {
				case library.ProcessFlowZoomLevel.One:
					oRm.addClass("boxZoom1Width");
					break;
				case library.ProcessFlowZoomLevel.Three:
					oRm.addClass("boxZoom3Width");
					break;
				case library.ProcessFlowZoomLevel.Four:
					oRm.addClass("boxZoom4Width");
					break;
				default:
					oRm.addClass("boxZoom2Width");
			}
		}
		if (connection.hasOwnProperty("right") && connection.right.draw) {
			oRm.addClass("boxMiddleBorderHeight");
			oRm.addClass("borderBottom");
			if (connection.right.type === library.ProcessFlowConnectionType.Planned) {
				oRm.addClass("borderBottomTypePlanned");
			} else {
				oRm.addClass("borderBottomTypeNormal");
			}
			if (connection.right.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderBottomStateHighlighted");
				oRm.addClass("stateHighlighted");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderBottomStateDimmed");
			} else if (connection.right.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderBottomStateSelected");
				oRm.addClass("stateSelected");
			} else {
				oRm.addClass("borderBottomStateRegular");
				oRm.addClass("stateRegular");
			}
		} else {
			oRm.addClass("boxMiddleHeight");
		}
		oRm.writeClasses();
		oRm.write(">");

		if (connection.labels && oControl._showLabels) {
			ProcessFlowConnectionRenderer._renderLabel(oRm, oControl, connection);
		}

		if (connection.arrow) {
			oRm.write("<div");
			oRm.addClass("arrowRight");
			if (connection.hasOwnProperty("right")) {
				if (connection.right.state === library.ProcessFlowConnectionState.Highlighted) {
					oRm.addClass("borderLeftStateHighlighted");
				} else if (connection.right.state === library.ProcessFlowConnectionState.Dimmed) {
					oRm.addClass("borderLeftStateDimmed");
				} else if (connection.right.state === library.ProcessFlowConnectionState.Selected) {
					oRm.addClass("borderLeftStateSelected");
				} else {
					oRm.addClass("borderLeftStateRegular");
				}
			}
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
		}
		oRm.write("</div>");
	};

	/**
	 * Writes the third row of a special line (e.g. branch).
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {object} connection Connection which needs to be checked
	 * @param {object} zoomLevel Zoom level of control
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._writeThirdRowOfSpecialLine = function (oRm, connection, zoomLevel, oControl) {
		ProcessFlowConnectionRenderer._resetFloat(oRm);

		// Left column
		oRm.write("<div");
		oRm.addClass("floatLeft");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxZoom1Width");
				oRm.addClass("boxBottomZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxZoom3Width");
				oRm.addClass("boxBottomZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxZoom4Width");
				oRm.addClass("boxBottomZoom4Height");
				break;
			default:
				oRm.addClass("boxZoom2Width");
				oRm.addClass("boxBottomZoom2Height");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Middle column
		oRm.write("<div");
		if (oControl._getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		oRm.addClass("floatLeft");
		switch (zoomLevel) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("boxBottomZoom1Height");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("boxBottomZoom3Height");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("boxBottomZoom4Height");
				break;
			default:
				oRm.addClass("boxBottomZoom2Height");
		}
		if (connection.hasOwnProperty("bottom") && connection.bottom.draw) {
			oRm.addClass("boxMiddleBorderWidth");
			oRm.addClass("borderLeft");
			if (connection.bottom.type === library.ProcessFlowConnectionType.Planned) {
				oRm.addClass("borderLeftTypePlanned");
			} else {
				oRm.addClass("borderLeftTypeNormal");
			}
			if (connection.bottom.state === library.ProcessFlowConnectionState.Highlighted) {
				oRm.addClass("borderLeftStateHighlighted");
				oRm.addClass("stateHighlighted");
			} else if (connection.bottom.state === library.ProcessFlowConnectionState.Dimmed) {
				oRm.addClass("borderLeftStateDimmed");
			} else if (connection.bottom.state === library.ProcessFlowConnectionState.Selected) {
				oRm.addClass("borderLeftStateSelected");
				oRm.addClass("stateSelected");
			} else {
				oRm.addClass("borderLeftStateRegular");
				oRm.addClass("stateRegular");
			}
		} else {
			oRm.addClass("boxMiddleWidth");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");

		// Right column
		// Omitted
	};

	/**
	 * Resets the float.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 */
	ProcessFlowConnectionRenderer._resetFloat = function (oRm) {
		oRm.write("<div");
		oRm.addClass("floatClear");
		oRm.writeClasses();
		oRm.write(">");
		oRm.write("</div>");
	};

	/**
	 * Renders the label based on criteria like state and priority.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl The control to be rendered
	 */
	ProcessFlowConnectionRenderer._renderLabel = function (oRm, oControl) {
		var oLabel = oControl._getVisibleLabel();
		if (oControl.getAggregation("_labels")) {
			var aLabels = oControl.getAggregation("_labels");
			for (var i = 0; i < aLabels.length; i++) {
				if (aLabels[i]._getSelected()) {
					oLabel._setDimmed(false);
					if (aLabels[i].getId() !== oLabel.getId()) {
						oLabel._setSelected(true);
						aLabels[i]._setSelected(false);
					}
				}
			}
		}
		if (oLabel) {
			oRm.renderControl(oLabel);
		}
	};


	return ProcessFlowConnectionRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ProcessFlowConnectionRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowLaneHeader') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ProcessFlowLaneHeader.
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowLaneHeader'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowLaneHeader",[ 'jquery.sap.global', 'sap/m/Image', './library', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ui/Device', 'sap/ui/core/Icon'],
	function(jQuery, Image, library, Control, IconPool, Device, Icon) {
	"use strict";

	/**
	 * Constructor for a new ProcessFlowLaneHeader.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This control gives you an overview of documents or items used in a process flow. The process flow is represented by donut chart sections that are colored according to the status of documents. This control can be used in two different ways. If you use it standalone, an event is triggered and can be caught to display the node map. If you use it with nodes or documents, it gives you an overview of the documents or items used in the process flow, which is represented by the donut chart sections.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ProcessFlowLaneHeader
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ProcessFlowLaneHeader = Control.extend("sap.suite.ui.commons.ProcessFlowLaneHeader", /** @lends sap.suite.ui.commons.ProcessFlowLaneHeader.prototype */ { metadata : {
		library : "sap.suite.ui.commons",
		properties : {
			/**
			 * Text information that is displayed in the control.
			 */
			text : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Icon to be displayed in the middle of the control.
			 */
			iconSrc : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},

			/**
			 * Position of the lane in the process flow control. Numbering of the position has to be sequential and needs to start from 0.
			 */
			position : {type : "int", group : "Misc", defaultValue : null},

			/**
			 * Internal identification of the header.
			 */
			laneId : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value: 20]. Possible states are states are positive, negative, neutral, and planned.
			 */
			state : {type : "object", group : "Misc", defaultValue : null},

			/**
			 * Current zoom level for the lane header.
			 */
			zoomLevel : {type : "sap.suite.ui.commons.ProcessFlowZoomLevel", group : "Misc", defaultValue : null}
		},
		events : {
			/**
			 * This event is fired when the header is clicked.
			 */
			press : {
				parameters : {

					/**
					 * tbd
					 */
					oEvent : {type : "object"}
				}
			}
		}
	}});

	/*
	 * Resource bundle for the localized strings
	 */
	ProcessFlowLaneHeader.prototype._oResBundle = null;

	ProcessFlowLaneHeader.prototype._mergedLanePosition = null;

	/**
	 * Symbol type enumeration. Describes the type of the rendered control.
	 * @static
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.symbolType = {
		startSymbol: "startSymbol",
		endSymbol: "endSymbol",
		processSymbol: "processSymbol",
		standardType: "standardType"
	};

	/**
	 * ProcessFlowLineHeader constants.
	 * @static
	 * @since 1.22
	 */
	ProcessFlowLaneHeader._constants = {
		halfGapSize: 0.0241, // half gap size in radians (ca. 2 px for full gap) // 5
		minPercentage: 0.025, // 1/40, was halfGapSize / Math.PI (percentage equal to the size of the gap) = 0.0077
		ringThickness: 5,
		ringInnerRadius: 24,
		positionX: 32,
		positionY: 32,
		outerCircleRadius: 32,
		outerCircleStrokeColor: "OuterCircleStrikeColor", //used implicitly to set CSS class
		outerCircleStrokeWidth: 1,
		sectorPositiveColor: "suiteUiCommonsProcessFlowHeaderPositiveColor", // CSS class
		sectorNegativeColor: "suiteUiCommonsProcessFlowHeaderNegativeColor", // CSS class
		sectorNeutralColor: "suiteUiCommonsProcessFlowHeaderNeutralColor", // CSS class
		sectorCriticalColor: "suiteUiCommonsProcessFlowHeaderCriticalColor", // CSS class
		sectorPlannedColor: "suiteUiCommonsProcessFlowHeaderPlannedColor", // CSS class
		ellipsis: '...',
		ellipsisLength: 3
	};

	/* =========================================================== */
	/* Life-cycle Handling                                         */
	/* =========================================================== */

	ProcessFlowLaneHeader.prototype.init = function() { // EXC_JSLINT_021
		this._virtualTableSpan = 1;

		if (!this._oResBundle) {
			this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		}
	};

	ProcessFlowLaneHeader.prototype.exit = function() {
		this._destroyImage();
		this.$().unbind("click", this.ontouchend);
	};

	ProcessFlowLaneHeader.prototype.onBeforeRendering = function() {
		this.$("lh-icon").off('click', jQuery.proxy(this.ontouchend, this));
		this.$().unbind("click", this.ontouchend);
	};

	ProcessFlowLaneHeader.prototype.onAfterRendering = function() {
		var $This = this.$();
		var $icon = this.$("lh-icon");
		var sClickEvent = 'click';

		if (Device.support.touch) {
			sClickEvent = 'touchend';
		}
		if ($icon.length > 0) {
			$icon.on(sClickEvent, jQuery.proxy(this.ontouchend, this));
			$icon.css("cursor", "inherit");
		}

		this.$().bind("click", jQuery.proxy(this.ontouchend, this));

		if (this._isHeaderMode()) {
			$This.addClass("suiteUiProcessFlowLaneHeaderPointer");
		} else {
			$This.removeClass("suiteUiProcessFlowLaneHeaderPointer");
		}

		// IE9 and FF long-word break does not work correct, so allow to break the words anywhere.
		if (Device.browser.msie || Device.browser.mozilla) {
			this.$("lh-text").css("word-break", "break-all");
		}

		// insert ellipsis for non-webkit browsers
		if (!this._ellipsisDisabled && !ProcessFlowLaneHeader._hasNativeLineClamp) {
			this._clampText();
		}
	};

	/* =========================================================== */
	/* Event Handling                                              */
	/* =========================================================== */

	/**
	 * Press event handler for control click.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The original event object
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype.ontouchend = function(oEvent) {
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
		}
		if (this) {
			this.firePress(this);
		}
		if (oEvent && !oEvent.isPropagationStopped()) {
			oEvent.stopPropagation();
		}
		if (oEvent && !oEvent.isImmediatePropagationStopped()) {
			oEvent.stopImmediatePropagation();
		}
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Sets the position that was changed due to artificial lanes of a merged lane as hidden property.
	 * If it's not set here, the property _mergedLanePosition is false.
	 *
	 * @private
	 * @param {int} position The position in the merged lane
	 */
	ProcessFlowLaneHeader.prototype._setMergedPosition = function(position) {
		this._mergedLanePosition = position;
	};

	/**
	 * Getter method for the symbol type. Returns the type of the node (variation of Lane header control).
	 * For details on the available types see {sap.suite.ui.commons.ProcessFlowLaneHeader.prototype.symbolType}.
	 *
	 * @private
	 * @returns {string} symbol type to set for the control
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._getSymbolType = function() {
		return this._oSymbolType ? this._oSymbolType : ProcessFlowLaneHeader.symbolType.standardType;
	};

	/**
	 * Setter method for the symbol type. Specifies the type of the node to display.
	 * For details on the available types see {sap.suite.ui.commons.ProcessFlowLaneHeader.symbolType}.
	 *
	 * @private
	 * @param {string} symbolType symbol type to set for the control
	 * @param {object} context the JS object context
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._setSymbolType = function(symbolType, context) {
		context._oSymbolType = symbolType;
	};

	/**
	 * Gets the image control for the Header, creating it if it does not already exist.
	 * If the control is already created and the value of src has changed then the old control will be destroyed
	 * and a new control returned.
	 *
	 * @private
	 * @param {string} id The icon control id
	 * @param {sap.ui.core.URI} src The URI of the image
	 * @returns {sap.ui.core.Control} The new or modified image control
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._getImage = function(id, src) {
		this._destroyImage();

		if (this._oImageControl) {
			this._oImageControl.setSrc(src);
		} else {
			this._oImageControl = IconPool.createControlByURI(src, Image);
			this._oImageControl.sId = id;
			this._oImageControl.setParent(this, null, true);
		}

		//disable technical tooltip for all sap.ui.core.Icons
		if (this._oImageControl instanceof Icon) {
			this._oImageControl.setUseIconTooltip(false);
		}

		return this._oImageControl;
	};

	/**
	 * Header mode setter. Header mode is true when a hand cursor should be displayed above the control.
	 *
	 * @private
	 * @param {boolean} isHeaderMode true if in header mode
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._setHeaderMode = function(isHeaderMode) {
		this._bHeaderMode = isHeaderMode;
	};

	/**
	 * Setter for the virtual table span in PF node element count.
	 *
	 * @private
	 * @param {number} [elementsCount] number of PF node elements which will be under this header control
	 * @since 1.23
	 * @see sap.suite.ui.commons.sap.suite.ui.commons.ProcessFlowLaneHeader._setVirtualTableSpan
	 */
	ProcessFlowLaneHeader._setVirtualTableSpan = function(elementsCount) {
		this._virtualTableSpan = elementsCount;
	};

	/**
	 * Getter for the virtual table span in object count. The value is used by the PF renderer to set a colspan for 2*iElements+1 lanes to fit this lane header control.
	 * By default is set to 1;
	 *
	 * @private
	 * @returns {number} Number of PF node elements which will be under this header control
	 * @since 1.23
	 */
	ProcessFlowLaneHeader._getVirtualTableSpan = function() {
		return this._virtualTableSpan;
	};

	/**
	 * Header mode getter. Header mode is true when a hand cursor should be displayed above the control.
	 *
	 * @private
	 * @returns {boolean} true if the control is in header mode, false otherwise
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._isHeaderMode = function() {
		return this._bHeaderMode;
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Method clamps the values provided in the input array to 0 in case of values lower than minValue.
	 * The method modifies the input array to one with non-negative values.
	 *
	 * @private
	 * @param {number[]} clampValues array of values to clamp (array of numbers)
	 * @param {number} minValue minimal value which is still not clamped to clampToValue
	 * @param {number} clampToValue value set to clampValues[i] in case clampValues[i] < minValue
	 * @returns {boolean} true if at least 1 value was clamped
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._clampValues = function(clampValues, minValue, clampToValue) {
		var i = clampValues.length - 1,
			bClamped = false,
			v;

		while (i >= 0) {
			v = clampValues[i];
			if (v < minValue) {
				clampValues[i] = clampToValue;
				bClamped = true;
			}
			i--;
		}

		return bClamped;
	};

	/**
	 * Method re-scales the values in input array rescaleValues so their sum equals to 1.
	 * The method modifies the input array to a rescaled one.
	 * In case all the input values in rescaleValues are 0, the array is left unchanged.
	 * All the values between (0, minPercentage> are set to minPercentage and the rest is rescaled accounting this change.
	 *
	 * @private
	 * @param {number[]} rescaleValues array of values to re-scale (array of numbers)
	 * @param {number} minPercentage the minimal percentage to consider (lower values will be rounded up to this value)
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._rescaleToUnit = function(rescaleValues, minPercentage) {
		var iRescaledFactor,
			i,
			iValuesGreaterMinCount,
			iValuesLessMinCount,
			iRescaleOriginalValue,
			iRescaledValue;

		// if undefined, null or 0 minPercentage
		if (!minPercentage) {
			minPercentage = 0;
		}

		i = rescaleValues.length - 1;
		iRescaledFactor = 0;
		iValuesGreaterMinCount = iValuesLessMinCount = 0;

		while (i >= 0) {
			iRescaleOriginalValue = rescaleValues[i];
			if (iRescaleOriginalValue > 0) {
				if (iRescaleOriginalValue <= minPercentage) {
					iValuesLessMinCount++;
				} else {
					iRescaledFactor += rescaleValues[i];
				}
				iValuesGreaterMinCount++;
			}
			i--;
		}

		iRescaledFactor -= (iValuesGreaterMinCount - iValuesLessMinCount) * minPercentage;
		iRescaledValue = (1 - iValuesGreaterMinCount * minPercentage) / iRescaledFactor;

		i = rescaleValues.length - 1;
		while (i >= 0) {
			iRescaleOriginalValue = rescaleValues[i];
			if (iRescaleOriginalValue > 0) {
				if (iRescaleOriginalValue <= minPercentage) {
					rescaleValues[i] = minPercentage;
				} else {
					rescaleValues[i] = (iRescaleOriginalValue - minPercentage) * iRescaledValue + minPercentage;
				}
			}
			i--;
		}
	};

	/**
	 * Method retrieves the number of gaps to be put on the donut chart given the input percentages.
	 * Zero percentages are ignored. For the case of 1 value there is no gap to be displayed.
	 *
	 * @private
	 * @param {number[]} inputPercentages Array of input percentages (array of doubles)
	 * @returns {number} iGapsCount Number of gaps
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._countGaps = function(inputPercentages) {
		var i = inputPercentages.length - 1,
			iGapsCount = 0;

		while (i >= 0) {
			if (inputPercentages[i] > 0) {
				iGapsCount++;
			}
			i--;
		}

		if (iGapsCount === 1) {
			iGapsCount = 0;
		}

		return iGapsCount;
	};

	/**
	 * Method re-scales the values in aPerc array by the provided factor.
	 * The method modifies the aPerc array to the rescaled one.
	 *
	 * @private
	 * @param {number[]} rescaleValues array of values to re-scale
	 * @param {number} factor the scaling factor
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._rescaleByFactor = function(rescaleValues, factor) {
		var i = rescaleValues.length - 1;

		while (i >= 0) {
			rescaleValues[i] *= factor;
			i--;
		}
	};

	/**
	 * Map of donut sector positions to the sector colors.
	 *
	 * @private
	 */
	ProcessFlowLaneHeader.prototype._colorMap = [
		ProcessFlowLaneHeader._constants.sectorPositiveColor,
		ProcessFlowLaneHeader._constants.sectorNegativeColor,
		ProcessFlowLaneHeader._constants.sectorNeutralColor,
		ProcessFlowLaneHeader._constants.sectorPlannedColor,
		ProcessFlowLaneHeader._constants.sectorCriticalColor
	];

	/**
	 * Calculation of the donut sector angle start/end definitions along with their colors.
	 *
	 * @private
	 * @param {number[]} inputPercentages input percentage array (should sum up to 1)
	 * @param {number} fullGap angle for the sector gap (in radians)
	 * @returns {object[]} aDefinitions
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._calculateSectorRangeDefinitions = function(inputPercentages, fullGap) {
		var aDefinitions = [],
			fCalculatedStart = -Math.PI / 2,
			fCalculatedEnd,
			iInputPercentagesCount = inputPercentages.length,
			i = 0;

		while (i < iInputPercentagesCount) {
			if (inputPercentages[i] > 0) {
				fCalculatedEnd = fCalculatedStart + 2 * Math.PI * inputPercentages[i];
				aDefinitions.push({start: fCalculatedStart, end: fCalculatedEnd, color: this._colorMap[i]});
				fCalculatedStart = fCalculatedEnd + fullGap;
			}
			i++;
		}

		return aDefinitions;
	};

	/**
	 * Method renders the donut sectors of the control. The method reads the "amounts" property and sets the amount
	 * percentages into the donut segments accordingly.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._renderDonutPercentages = function(oRm) { // EXC_SAP_006_1
		var aStateAmounts = this.getState(),
			iGaps = 0,
			aSectorDefs,
			aPerc = [
				0,
				0,
				0,
				0
			],
			fScaleFactor,
			sColor,
			fHalfGap = ProcessFlowLaneHeader._constants.halfGapSize,
			iRadiusInner = ProcessFlowLaneHeader._constants.ringInnerRadius,
			iRingThickness = ProcessFlowLaneHeader._constants.ringThickness,
			iRadiusOuter = ProcessFlowLaneHeader._constants.ringInnerRadius + iRingThickness,
			sOuterCircleStrokeColor = ProcessFlowLaneHeader._constants.outerCircleStrokeColor,
			iOuterCircleStrokeWidth = ProcessFlowLaneHeader._constants.outerCircleStrokeWidth,
			iOuterCircleRadius = ProcessFlowLaneHeader._constants.outerCircleRadius,
			iPositionX = ProcessFlowLaneHeader._constants.positionX,
			iPositionY = ProcessFlowLaneHeader._constants.positionY,
			fMinPercentage = ProcessFlowLaneHeader._constants.minPercentage;

		if (aStateAmounts && Object.prototype.toString.call(aStateAmounts) === '[object Array]'
				&& (aStateAmounts.length > 0)) {
			aStateAmounts.forEach(function(oStateAmount) {
				switch (oStateAmount.state) {
					case library.ProcessFlowNodeState.Positive:
						aPerc[0] = oStateAmount.value;
						break;
					case library.ProcessFlowNodeState.Negative:
						aPerc[1] = oStateAmount.value;
						break;
					case library.ProcessFlowNodeState.Neutral:
						aPerc[2] = oStateAmount.value;
						break;
					case library.ProcessFlowNodeState.Planned: // EXC_JSHINT_016
						aPerc[3] = oStateAmount.value;
						break;
					case library.ProcessFlowNodeState.Critical:
						aPerc[4] = oStateAmount.value;
						break;
					default: // EXC_JSLINT_073
						aPerc[3] = oStateAmount.value; // planned
				}
			});

			this._clampValues(aPerc, 0, 0);

			this._rescaleToUnit(aPerc);
			this._rescaleToUnit(aPerc, fMinPercentage);

			iGaps = this._countGaps(aPerc);

			fScaleFactor = (1 - iGaps * fHalfGap / Math.PI); // adjust the percentages for the gaps
			this._rescaleByFactor(aPerc, fScaleFactor);

			this._renderCircle(oRm, sOuterCircleStrokeColor, iOuterCircleStrokeWidth,
				iPositionX, iPositionY, iOuterCircleRadius);

			if (iGaps > 0) {
				aSectorDefs = this._calculateSectorRangeDefinitions(aPerc, 2 * fHalfGap);
				this._renderDonutSectors(oRm, aSectorDefs, iPositionX, iPositionY, iRadiusInner, iRadiusOuter);
			} else {
				sColor = this._selectColor(aPerc);
				this._renderCircle(oRm, sColor, iRingThickness, iPositionX, iPositionY,
					iRadiusInner + iRingThickness / 2);
			}
		} else {
			this._renderCircle(oRm, sOuterCircleStrokeColor, iOuterCircleStrokeWidth,
				iPositionX, iPositionY, iOuterCircleRadius);
		}
	};

	/**
	 * Method renders the white circle around the donut segments.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
	 * @param {string} strokeColor the stroke color of the circle
	 * @param {number} strokeWidth circle stroke width in pixels
	 * @param {number} positionX coordinate x of the middle of circle in pixels
	 * @param {number} positionY coordinate y of the middle of circle in pixels
	 * @param {number} radius radius in pixels
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._renderCircle = function(oRm, strokeColor, strokeWidth, positionX, positionY, radius) { // EXC_JSHINT_034
		oRm.write("<circle");
		oRm.writeAttribute("id", this.getId() + "-donut-circle");
		if (strokeColor !== ProcessFlowLaneHeader._constants.outerCircleStrokeColor) {
			oRm.writeAttributeEscaped("class", "suiteUiCommonsProcessFlowHeaderIconFill " + strokeColor);
		} else {
			oRm.writeAttribute("class", "suiteUiCommonsProcessFlowHeaderIconFill");
		}
		oRm.writeAttributeEscaped("stroke-width", strokeWidth);
		oRm.writeAttributeEscaped("cx", positionX);
		oRm.writeAttributeEscaped("cy", positionY);
		oRm.writeAttributeEscaped("r", radius);
		oRm.write("></circle>"); // div element for the outer circle
	};

	/**
	 * Method renders all the donut sector paths.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm the render manager into which the control will be rendered
	 * @param {object[]} sectorDefs array of donut sector definitions containing begin end and color
	 * @param {number} positionX coordinate x of the center of sector in pixels
	 * @param {number} positionY coordinate y of the center of sector in pixels
	 * @param {number} radiusInner inner radius in pixels
	 * @param {number} radiusOuter outer radius in pixels
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._renderDonutSectors = function(oRm, sectorDefs, positionX, positionY, radiusInner, radiusOuter) { // EXC_JSHINT_034
		var i = 0,
			iDefLength = sectorDefs.length,
			oSector,
			sPath;

		while (i < iDefLength) {
			oSector = sectorDefs[i];
			sPath = this._getDonutSectorPath(positionX, positionY, oSector.start, oSector.end, radiusInner, radiusOuter);
			oRm.write("<path");
			oRm.writeAttribute("id", this.getId() + "-donut-segment-" + i);
			oRm.writeAttributeEscaped("d", sPath);
			oRm.writeAttributeEscaped("class", oSector.color);
			oRm.writeAttribute("opacity", "1");
			oRm.write("></path>");
			i++;
		}
	};

	/**
	 *  Helper method for donut sector color selection.
	 *
	 * @private
	 * @param {number[]} percentages array of input percentages
	 * @returns {string} color selection
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._selectColor = function(percentages) {
		var sColor;

		if (percentages[0]) {
			sColor = ProcessFlowLaneHeader._constants.sectorPositiveColor;
		} else if (percentages[1]) {
			sColor = ProcessFlowLaneHeader._constants.sectorNegativeColor;
		} else if (percentages[2]) {
			sColor = ProcessFlowLaneHeader._constants.sectorNeutralColor;
		} else if (percentages[3]) {
			sColor = ProcessFlowLaneHeader._constants.sectorPlannedColor;
		} else if (percentages[4]) {
			sColor = ProcessFlowLaneHeader._constants.sectorCriticalColor;
		} else {
			sColor = ProcessFlowLaneHeader._constants.sectorNeutralColor;
		}

		return sColor;
	};

	/**
	 * Helper method returning SVG path data for a single donut sector.
	 *
	 * @private
	 * @param {number} positionX coordinate x of the center of sector in pixels
	 * @param {number} positionY coordinate y of the center of sector in pixels
	 * @param {number} startAngle start angle in radians (rotating right - resp. negative amount of real angle)
	 * @param {number} endAngle end angle
	 * @param {number} radiusInner inner radius in pixels
	 * @param {number} radiusOuter outer radius in pixels
	 * @returns {string} string definition of the SVG path put into the "d" attribute of the svg "path" element.
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._getDonutSectorPath = function(positionX, positionY, startAngle, endAngle, radiusInner, radiusOuter) { // EXC_JSHINT_034
		var iOuter = 0, /* outer angle flag */
			sPosition1, sPosition2, sPosition3, sPosition4,
			sSectorPath,
			fStartAngleCos, fEndAngleCos, fStartAngleSin, fEndAngleSin;

		if ((endAngle - startAngle) % (Math.PI * 2) > Math.PI) {
			iOuter = 1;
		}

		fStartAngleCos = Math.cos(startAngle);
		fEndAngleCos = Math.cos(endAngle);
		fStartAngleSin = Math.sin(startAngle);
		fEndAngleSin = Math.sin(endAngle);

		sPosition1 = (positionX + radiusInner * fStartAngleCos).toFixed(3) + ',' + (positionY + radiusInner * fStartAngleSin).toFixed(3);
		sPosition2 = (positionX + radiusOuter * fStartAngleCos).toFixed(3) + ',' + (positionY + radiusOuter * fStartAngleSin).toFixed(3);
		sPosition3 = (positionX + radiusOuter * fEndAngleCos).toFixed(3) + ',' + (positionY + radiusOuter * fEndAngleSin).toFixed(3);
		sPosition4 = (positionX + radiusInner * fEndAngleCos).toFixed(3) + ',' + (positionY + radiusInner * fEndAngleSin).toFixed(3);
		sSectorPath = "M" + sPosition1 +
			"L" + sPosition2 +
			"A" + radiusOuter + ',' + radiusOuter + " 0 " + iOuter + " 1 " + sPosition3 +
			"L" + sPosition4 +
			"A" + radiusInner + ',' + radiusInner + " 0 " + iOuter + " 0 " + sPosition1 +
			"z";

		return sSectorPath;
	};

	/**
	 * Resource cleanup for the control icon.
	 *
	 * @private
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._destroyImage = function() {
		if (this._oImageControl) {
			this._oImageControl.destroy();
		}

		this._oImageControl = null;
	};

	/**
	 * Clamps the wrapping text to _constants.nMaxTextLines lines and appends ellipsis ('...' if needed).
	 *
	 * @private
	 * @since 1.22
	 */
	ProcessFlowLaneHeader.prototype._clampText = function() {
		var $text = this.$("lh-text").length ? this.$("lh-text") : null,
			sText = this.getText(),
			sLastText = "",
			sEllipsis = ProcessFlowLaneHeader._constants.ellipsis,
			iEllipsisLength = ProcessFlowLaneHeader._constants.ellipsisLength,
			iStartPos = iEllipsisLength + 1,
			iMidPos,
			iEndPos = sText.length,
			iMaxHeight,
			bVisibility;

		if ($text) {
			iMaxHeight = parseInt($text.css("height").slice(0, -2), 10); // i.e. parse number from "32px"

			// We expect that less than ellipsis length number of characters never needs to be clamped
			// if text overflow - clamping is needed
			if ($text[0].scrollHeight > iMaxHeight) {

				// Save the visibility state and hide the text
				bVisibility = $text.css("visibility");
				$text.css("visibility", "hidden");

				// Search by bisection to find the position of ellipsis
				sLastText = sText;
				do {

					// Check the middle position and update text
					iMidPos = (iStartPos + iEndPos) >> 1;

					$text.textContent = sText.slice(0, iMidPos - iEllipsisLength) + sEllipsis;
					// Check for text overflow
					if ($text.scrollHeight > iMaxHeight) {
						iEndPos = iMidPos;
					} else {
						iStartPos = iMidPos;
						sLastText = $text.textContent;
					}
				} while (iEndPos - iStartPos > 1);

				// Reset to the original visibility state
				$text.css("visibility", bVisibility);
			}

			// Set the last valid solution in case of overflow
			if ($text.scrollHeight > iMaxHeight) {
				$text.textContent = sLastText;
			}
		}
	};

	/**
	 * Defines whether browser supports native line clamp or not
	 *
	 * @private
	 * @static
	 * @returns {boolean} true if document has webkit line clamp style, false if not
	 * @readonly
	 * @since 1.22
	 */
	ProcessFlowLaneHeader._hasNativeLineClamp = (function() {
		return document.documentElement.style.webkitLineClamp !== undefined;
	}());

	/**
	 * Returns ARIA text for current lane header object.
	 *
	 * @private
	 * @returns {string} Message for screen reader
	 */
	ProcessFlowLaneHeader.prototype._getAriaText = function() {
		var sAriaText = "";
		var oStatuses = this.getState();
		if (oStatuses) {
			var statusValues = [];
			for (var i in oStatuses) {
				statusValues.push(oStatuses[i].value);
			}

			// Needed to rescale the values to percentage
			this._clampValues(statusValues, 0, 0);
			this._rescaleToUnit(statusValues);

			sAriaText = this._oResBundle.getText('PF_ARIA_STATUS');
			for (var j in oStatuses) {
				if (oStatuses[j].value !== 0) {
					var sValueText = " " + Math.round(statusValues[j] * 100) + "% " + oStatuses[j].state + ",";
					sAriaText = sAriaText.concat(sValueText);
				}
			}
			// Removes the last character which is a ','
			sAriaText = sAriaText.slice(0, -1);
		}
		return sAriaText;
	};

	/**
	 * Returns ARIA text for symbols in lane header.
	 *
	 * @private
	 * @returns {string} Text for screen reader
	 */
	ProcessFlowLaneHeader.prototype._getSymbolAriaText = function() {
		var sAriaText = "";
		switch (this._getSymbolType()) {
			case ProcessFlowLaneHeader.symbolType.startSymbol:
				sAriaText = this._oResBundle.getText('PF_ARIA_SYMBOL_LANE_START');
				break;
			case ProcessFlowLaneHeader.symbolType.endSymbol:
				sAriaText = this._oResBundle.getText('PF_ARIA_SYMBOL_LANE_END');
				break;
			case ProcessFlowLaneHeader.symbolType.processSymbol:
				sAriaText = this._oResBundle.getText('PF_ARIA_SYMBOL_LANE_PROCESS');
				break;
			default:
		}
		return sAriaText;
	};

	/**
	 * Creates the start symbol at the beginning of the lane header.
	 *
	 * @private
	 * @param {boolean} isHeaderMode true if the hand cursor should be displayed above the header
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new start symbol node
	 * @since 1.22
	 */

	ProcessFlowLaneHeader.createNewStartSymbol = function(isHeaderMode) {
		var oStartSymbol = new ProcessFlowLaneHeader({
				laneId: "processFlowLaneStart"
			});

		oStartSymbol._setSymbolType(ProcessFlowLaneHeader.symbolType.startSymbol, oStartSymbol);
		oStartSymbol._setHeaderMode(isHeaderMode);
		return oStartSymbol;
	};

	/**
	 * Process symbol node factory method - creates a control with a square symbol used at the end of the lane header.
	 *
	 * @private
	 * @param {boolean} isHeaderMode true if the hand cursor should be displayed above the header
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new end symbol node
	 * @since 1.22
	 *
	 */

	ProcessFlowLaneHeader.createNewEndSymbol = function(isHeaderMode) {
		var oEndSymbol = new ProcessFlowLaneHeader({
				laneId: "processFlowLaneEnd"
			});

		oEndSymbol._setSymbolType(ProcessFlowLaneHeader.symbolType.endSymbol, oEndSymbol);
		oEndSymbol._setHeaderMode(isHeaderMode);
		return oEndSymbol;
	};

	/**
	 * Process symbol node factory method - creates a control with a '>>>' symbol.
	 *
	 * @private
	 * @param {boolean} isHeaderMode true if the hand cursor should be displayed above the header
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} a new process symbol node
	 * @since 1.22
	 *
	 */

	ProcessFlowLaneHeader.createNewProcessSymbol = function(isHeaderMode) {
		var oProcessSymbol = new ProcessFlowLaneHeader({
				laneId: "processFlowLaneProcess", iconSrc: "sap-icon://process"
			});
		oProcessSymbol._setSymbolType(ProcessFlowLaneHeader.symbolType.processSymbol, oProcessSymbol);
		oProcessSymbol._setHeaderMode(isHeaderMode);
		return oProcessSymbol;
	};

	/**
	 * Enable/disable ellipsis support for non-webkit browsers (for the case where there is no native ellipsis support).
	 * It is recommended to disable the ellipsis support in case the control is inserted
	 * into a container of variable width as the ellipsis position is not updated automatically.
	 * By default the ellipsis support is enabled.
	 *
	 * @private
	 * @param {boolean} isSupportEnabled false if the ellipsis support is to be disabled
	 * @since 1.22
	 *
	 */

	ProcessFlowLaneHeader.enableEllipsisSupportForText = function(isSupportEnabled) {
		this._ellipsisDisabled = !isSupportEnabled;
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */

	/**
	 * Overrides the getter method for property position. It returns the position that was changed due to the artificial merged lanes.
	 * Otherwise it returns the position set as a property.
	 *
	 * @public
	 * @returns {int} Lane position
	 */
	ProcessFlowLaneHeader.prototype.getPosition = function() {
		if (this._mergedLanePosition) {
			return this._mergedLanePosition;
		} else {
			return this.getProperty("position");
		}
	};


	return ProcessFlowLaneHeader;

});

}; // end of sap/suite/ui/commons/ProcessFlowLaneHeader.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer') ) {
/*
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowLaneHeaderRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowLaneHeaderRenderer",['jquery.sap.global', 'sap/suite/ui/commons/ProcessFlowLaneHeader'],
		function(jQuery, ProcessFlowLaneHeader) {
	"use strict";

	/**
	 * @class ProcessFlowLaneHeader renderer.
	 * @static
	 */
	var ProcessFlowLaneHeaderRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowLaneHeaderRenderer.render = function (oRm, oControl) {
		// Write the HTML into the render manager
		switch (oControl._getSymbolType()) {
			case ProcessFlowLaneHeader.symbolType.startSymbol:
				this._writeSymbolNodeType(
					oRm,
					oControl,
					"-start",
					["suiteUiProcessFlowLaneHeaderStartEndSymbol", "suiteUiProcessFlowLaneHeaderStartSymbol"],
					["suiteUiProcessFlowLaneHeaderStartEndSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"],
					false /* do not draw icon */,
					oControl._isHeaderMode()
				);
				break;
			case ProcessFlowLaneHeader.symbolType.endSymbol:
				this._writeSymbolNodeType(
					oRm,
					oControl,
					"-end",
					["suiteUiProcessFlowLaneHeaderStartEndSymbol", "suiteUiProcessFlowLaneHeaderEndSymbol"],
					["suiteUiProcessFlowLaneHeaderStartEndSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"],
					false /* do not draw icon */,
					oControl._isHeaderMode()
				);
				break;
			case ProcessFlowLaneHeader.symbolType.processSymbol:
				this._writeSymbolNodeType(
					oRm,
					oControl,
					"-process",
					["suiteUiProcessFlowLaneHeaderProcessSymbol"],
					["suiteUiProcessFlowLaneHeaderProcessSymbolContainer", "suiteUiProcessFlowLaneHeaderNoSelection"],
					true /* draw icon */,
					oControl._isHeaderMode()
				);
				break;
			default:
				this._writeDefaultNodeType(oRm, oControl);
		}
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Node symbol renderer.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 * @param {string} symbolId ID suffix of the symbol node
	 * @param {string[]} symbolClasses Array of names of classes for symbol node div element
	 * @param {string[]} containerClasses Array of names of classes for the symbol container div element
	 * @param {boolean} isIconRendered True if the icon should be rendered
	 * @since 1.22
	 */
	ProcessFlowLaneHeaderRenderer._writeSymbolNodeType = function (oRm, oControl, symbolId, symbolClasses, containerClasses, isIconRendered) { // EXC_JSHINT_034
		oRm.write("<div");
		oRm.writeControlData(oControl);
		containerClasses.forEach(function (containerClass) {
			oRm.addClass(jQuery.sap.encodeHTML(containerClass));
		});
		oRm.writeClasses();
		//Write ARIA details
		oRm.writeAttribute("role", "separator");
		oRm.writeAttributeEscaped("aria-label", oControl._getSymbolAriaText());

		oRm.write(">"); // symbol container
		oRm.write("<div"); // symbol
		oRm.writeAttributeEscaped("id", oControl.getId() + symbolId);
		symbolClasses.forEach(function (symbolClass) {
			oRm.addClass(jQuery.sap.encodeHTML(symbolClass));
		});
		oRm.writeClasses();
		oRm.write(">");
		if (isIconRendered) {
			var sIconSrc = oControl.getIconSrc();
			if (sIconSrc) {
				var oIcon = oControl._getImage(oControl.getId() + "-lh-icon", sIconSrc);
				oRm.renderControl(oIcon);
			}
		}
		oRm.write("</div>"); // symbol
		oRm.write("</div>"); // symbol container
	};

	/**
	 * Default node renderer.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 * @since 1.22
	 */
	ProcessFlowLaneHeaderRenderer._writeDefaultNodeType = function (oRm, oControl) {  // EXC_SAP_006_1, EXC_JSHINT_046
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("suiteUiProcessFlowLaneHeaderContainer");
		oRm.addClass("suiteUiProcessFlowLaneHeaderNoSelection");
		oRm.writeClasses();
		oRm.write(">"); // div element for the whole control

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-standard");

		//Write ARIA details
		oRm.writeAttribute("role", "image");
		var statusText = oControl.getText() + ", " + oControl._getAriaText();
		oRm.writeAttributeEscaped("aria-label", statusText);

		oRm.addClass("suiteUiProcessFlowLaneHeaderBodyContainer");
		oRm.writeClasses();
		oRm.write(">"); // div element for header
		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-horizontal-line");
		oRm.addClass("suiteUiProcessFlowLaneHeaderHorizontalLine");
		oRm.writeClasses();
		oRm.write("></div>");

		oRm.write("<svg");
		oRm.writeAttribute("id", oControl.getId() + "-donut-chart");
		oRm.addClass("suiteUiProcessFlowLaneHeaderDonutSvg");
		oRm.writeClasses();
		oRm.write(">");
		oControl._renderDonutPercentages(oRm);
		oRm.write("</svg>"); // div element for the donut chart

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-lh-icon-container");
		oRm.addClass("suiteUiProcessFlowLaneHeaderIconContainer");
		oRm.writeClasses();
		oRm.write(">"); // div element for header

		var sIconSrc = oControl.getIconSrc();
		if (sIconSrc) {
			var oIcon = oControl._getImage(oControl.getId() + "-lh-icon", sIconSrc);
			oIcon.addStyleClass("suiteUiProcessFlowLaneHeaderProcessSymbolIcon");
			oRm.renderControl(oIcon);
		}
		oRm.write("</div>"); // icon container
		oRm.write("</div>"); // body container

		oRm.write("<div");
		oRm.writeAttribute("id", oControl.getId() + "-lh-text-container");
		oRm.addClass("suiteUiProcessFlowLaneHeaderTextContainer");
		oRm.writeClasses();
		oRm.write(">"); // div element for the text container

		oRm.write("<span");
		oRm.writeAttribute("id", oControl.getId() + "-lh-text");
		oRm.addClass("suiteUiProcessFlowLaneHeaderText");
		oRm.writeClasses();
		oRm.writeAttribute("aria-hidden", true);
		oRm.write(">"); // div element for the text span
		oRm.writeEscaped(oControl.getText());
		oRm.write("</span>"); // text

		oRm.write("</div>"); // text container

		oRm.write("</div>"); // whole control
	};


	return ProcessFlowLaneHeaderRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ProcessFlowLaneHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowNode') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ProcessFlowNode.
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowNode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowNode",[ 'jquery.sap.global', 'sap/m/Text','./library','sap/ui/core/Control','sap/ui/core/IconPool', 'sap/ui/Device', 'sap/ui/core/Icon' ],
	function(jQuery, Text, library, Control, IconPool, Device, Icon) {
	"use strict";

	/**
	 * Constructor for a new ProcessFlowNode.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This control enables you to see documents (or other items) in respect to their statuses – positive, negative, neutral, planned, planned negative. In addition to the node title (which can be optionally a hyperlink) also two other text fields are provided and can be filled. The process flow nodes consider all styles depending on the status they are in. The user can update or change the content of the node. The content of the node can be also filtered according to updated data and specific parameters set. This means that also the node’s style is affected.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.ProcessFlowNode
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ProcessFlowNode = Control.extend("sap.suite.ui.commons.ProcessFlowNode", /** @lends sap.suite.ui.commons.ProcessFlowNode.prototype */ { metadata : {
		library : "sap.suite.ui.commons",
		properties : {
			/**
			 * The node title.
			 */
			title : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Specifies if the node title is clickable.
			 * @deprecated Since version 1.26.
			 * According to the new requirement there should be only one click event for each node (click on the whole node – see Press event) that is why titlePress event should not be used any longer. Hence isTitleClickable should not be used either.
			 */
			isTitleClickable : {type : "boolean", group : "Behavior", defaultValue : false, deprecated: true},

			/**
			 * Specifies the assignment of the node to the respective lane.
			 */
			laneId : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Node identifier.
			 */
			nodeId : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * State of the node.
			 */
			state : {type : "sap.suite.ui.commons.ProcessFlowNodeState", group : "Appearance", defaultValue : "Neutral"},

			/**
			 * Type of the node.
			 */
			type : {type : "sap.suite.ui.commons.ProcessFlowNodeType", group : "Appearance", defaultValue : "Single"},

			/**
			 * Defines an array of children of the node.
			 */
			children : {type : "any[]", group : "Misc", defaultValue : null},

			/**
			 * Title abbreviation is used in zoom level 'Three'.
			 */
			titleAbbreviation : {type : "string", group : "Data", defaultValue : null},

			/**
			 * Description of the state, for example "Status OK".
			 */
			stateText : {type : "string", group : "Data", defaultValue : null},

			/**
			 * The property contains the additional texts on the node. The expected type is array of strings. One array must not contain more than two strings. Additional strings in the array will be ignored.
			 */
			texts : {type : "string[]", group : "Misc", defaultValue : null},

			/**
			 * The parameter defines if the node should be displayed in highlighted state.
			 */
			highlighted : {type : "boolean", group : "Appearance", defaultValue : false},

			/**
			 * The parameter defines if the node should be displayed in focus state.
			 */
			focused : {type : "boolean", group : "Appearance", defaultValue : false},

			/**
			 * The user-defined object which is returned back to the user by a node click event.
			 */
			tag : {type : "object", group : "Misc", defaultValue : null},

			/**
			 * The parameter defines if the node should be displayed in selected state.
			 */
			selected : {type : "boolean", group : "Appearance", defaultValue : false}
		},
		aggregations: {
			/**
			 * The node's content used for zoom level 1.
			 * If this aggregation is set, no default content like title and texts is used.
			 * @experimental Since 1.50
			 */
			zoomLevelOneContent: { type: "sap.ui.core.Control", multiple: false, group: "Misc" },

			/**
			 * The node's content used for zoom level 2.
			 * If this aggregation is set, no default content like title and texts is used.
			 * @experimental Since 1.50
			 */
			zoomLevelTwoContent: { type: "sap.ui.core.Control", multiple: false, group: "Misc" },

			/**
			 * The node's content used for zoom level 3.
			 * If this aggregation is set, no default content like title and texts is used.
			 * @experimental Since 1.50
			 */
			zoomLevelThreeContent: { type: "sap.ui.core.Control", multiple: false, group: "Misc" },

			/**
			 * The node's content used for zoom level 4.
			 * If this aggregation is set, no default content like title and texts is used.
			 * @experimental Since 1.50
			 */
			zoomLevelFourContent: { type: "sap.ui.core.Control", multiple: false, group: "Misc" }
		},
		associations : {

			/**
			 * Reference to ProcessFlowNodes which appears before this ProcessFlowNode.
			 */
			parents : {type : "sap.suite.ui.commons.ProcessFlowNode", multiple : true, singularName : "parent"}
		},
		events : {
			/**
			 * This event handler is executed when the user clicks the node title. This event is fired only when the title is clickable (isTitleClickable equals true).
			 * @deprecated Since version 1.26.
			 * Should not be used any longer, use Press event instead ( click on the node)
			 */
			titlePress : {deprecated: true,
				parameters : {
					/**
					 * The node identification.
					 */
					oEvent : {type : "object"}
				}
			},

			/**
			 * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress event has been fired.
			 * @deprecated Since version 1.50.0. This event is deprecated, use <node>nodePress</code> event instead. See {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
			 */
			press : {
				parameters : {
					/**
					 * The node identification.
					 */
					oEvent : {type : "object"}
				}
			}
		}
	}});

	/* This is a current zoom level for the node. The level of details on the node is derived from this value.*/
	ProcessFlowNode.prototype._zoomLevel = library.ProcessFlowZoomLevel.Two;
	/* The consumer defined object which is returned back to the consumer with node click event.*/
	ProcessFlowNode.prototype._tag = null;
	/* The display state of the node. This property dictates the regular, highlighted, dimmed visual style of the control */
	ProcessFlowNode.prototype._displayState = library.ProcessFlowDisplayState.Regular;
	/* resource bundle for the localized strings */
	ProcessFlowNode.prototype._oResBundle = null;
	/* This property defines the folded corners for the single node control. The values true - means folded corner
	 false/null/undefined - means normal corner
	 */

	ProcessFlowNode.prototype._mergedLaneId = null;
	ProcessFlowNode.prototype._foldedCorner = false;
	ProcessFlowNode.prototype._foldedCornerControl = null;
	ProcessFlowNode.prototype._parent = null;
	ProcessFlowNode.prototype._headerControl = null;
	ProcessFlowNode.prototype._stateTextControl = null;
	ProcessFlowNode.prototype._iconControl = null;
	ProcessFlowNode.prototype._text1Control = null;
	ProcessFlowNode.prototype._text2Control = null;
	ProcessFlowNode.prototype._navigationFocus = false;
	ProcessFlowNode.prototype._sMouseEvents = " mousedown mouseup mouseenter mouseleave ";
	ProcessFlowNode.prototype._sMouseTouchEvents = Device.support.touch ? 'saptouchstart saptouchcancel touchstart touchend' : '';

	if (Device.browser.msie) {
		ProcessFlowNode.prototype._grabCursorClass = "sapSuiteUiGrabCursorIEPF";
		ProcessFlowNode.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorIEPF";
	} else {
		ProcessFlowNode.prototype._grabCursorClass = "sapSuiteUiGrabCursorPF";
		ProcessFlowNode.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorPF";
	}
	ProcessFlowNode.prototype._nodeHoverClass = "sapSuiteUiCommonsProcessFlowNodeHover";
	ProcessFlowNode.prototype._nodeActiveClass = "sapSuiteUiCommonsProcessFlowNodeActive";
	ProcessFlowNode.prototype._nodePlannedClass = "sapSuiteUiCommonsProcessFlowNodeStatePlanned";
	ProcessFlowNode.prototype._nodePlannedClassIdentifier = "." + ProcessFlowNode.prototype._nodePlannedClass;
	ProcessFlowNode.prototype._nodeFCHoverClass = "sapSuiteUiCommonsProcessFlowFoldedCornerNodeHover";
	ProcessFlowNode.prototype._nodeFCActiveClass = "sapSuiteUiCommonsProcessFlowFoldedCornerNodeActive";
	ProcessFlowNode.prototype._nodeFCIconHoverClass = "sapSuiteUiCommonsProcessFlowFoldedCornerNodeIconHover";
	ProcessFlowNode.prototype._nodeAggregatedClass = "sapSuiteUiCommonsProcessFlowNodeAggregated";
	ProcessFlowNode.prototype._nodeAggregatedHoveredClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedHovered";
	ProcessFlowNode.prototype._nodeAggregatedDimmedClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmed";
	ProcessFlowNode.prototype._nodeAggregatedFocusedClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedFocused";
	ProcessFlowNode.prototype._nodeAggregatedPressedClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedPressed";
	ProcessFlowNode.prototype._nodeAggregatedDimmedPressedClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedPressed";
	ProcessFlowNode.prototype._nodeAggregatedDimmedHoveredClass = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedHovered";
	ProcessFlowNode.prototype._nodeAggregatedClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedHoveredClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedHoveredZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedPressedClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedPressedZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedDimmedClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedFocusedClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedFocusedZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedDimmedPressedClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedPressedZoomLevel4";
	ProcessFlowNode.prototype._nodeAggregatedDimmedHoveredClassZoomLevel4 = "sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedHoveredZoomLevel4";

	/* =========================================================== */
	/* Life-cycle Handling                                         */
	/* =========================================================== */

	/**
	 * ProcessFlowNode initial function
	 */
	ProcessFlowNode.prototype.init = function () {
		IconPool.addIcon("context-menu", "businessSuite", "PFBusinessSuiteInAppSymbols", "e02b", true);
		if (!this._oResBundle) {
			this._oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		}
	};

	/**
	 * Destroys all created controls.
	 */
	ProcessFlowNode.prototype.exit = function () {
		if (this._foldedCornerControl) {
			this._foldedCornerControl.destroy();
			this._foldedCornerControl = null;
		}
		if (this._headerControl) {
			this._headerControl.destroy();
			this._headerControl = null;
		}
		if (this._stateTextControl) {
			this._stateTextControl.destroy();
			this._stateTextControl = null;
		}
		if (this._iconControl) {
			this._iconControl.destroy();
			this._iconControl = null;
		}
		if (this._text1Control) {
			this._text1Control.destroy();
			this._text1Control = null;
		}
		if (this._text2Control) {
			this._text2Control.destroy();
			this._text2Control = null;
		}
		this.$().unbind(this._sMouseEvents, this._handleEvents);
		if (Device.support.touch) {
			this.$().unbind(this._sMouseTouchEvents, this._handleEvents);
		}
	};

	/**
	 * The event binding must be removed to avoid memory leaks
	 */
	ProcessFlowNode.prototype.onBeforeRendering = function () {
		this.$().unbind(this._sMouseEvents, this._handleEvents);
		if (Device.support.touch) {
			this.$().unbind(this._sMouseTouchEvents, this._handleEvents);
		}
	};

	/**
	 * Handles the onAfterRendering event.
	 */
	ProcessFlowNode.prototype.onAfterRendering = function () {
		this._sMouseEvents = this._sMouseEvents.concat(' ', this._sMouseTouchEvents);
		this.$().bind(this._sMouseEvents, jQuery.proxy(this._handleEvents, this));
	};

	/* =========================================================== */
	/* Event Handling                                              */
	/* =========================================================== */

	/**
	 * Handles the click event.
	 *
	 * @private
	 * @param {sap.ui.base.Event} oEvent The sap.ui.base event object.
	 */
	ProcessFlowNode.prototype._handleClick = function (oEvent) {
		if (this._parent && this._parent._bHighlightedMode &&
			this._getDisplayState() === library.ProcessFlowDisplayState.Dimmed ||
			this._getDisplayState() === library.ProcessFlowDisplayState.DimmedFocused) {
			jQuery.sap.log.info("Event ignored, node in dimmed state.");
		} else if (this._parent) {// If the ID includes 'title', it is a title click event.
			if (oEvent.target.id.indexOf("title") >= 0 && this.getIsTitleClickable()) {
				this._parent.fireNodeTitlePress(this);
			} else {
				this._parent.fireNodePress(this);
			}
			// Changes the focus from previous node to the current one.
			this.getParent()._changeNavigationFocus(this.getParent()._getLastNavigationFocusElement(), this);
		}
		if (oEvent && !oEvent.isPropagationStopped()) {
			oEvent.stopPropagation();
		}
		if (oEvent && !oEvent.isImmediatePropagationStopped()) {
			oEvent.stopImmediatePropagation();
		}
	};

	/**
	 * Handles the onClick event.
	 *
	 * @private
	 * @param {sap.ui.base.Event} oEvent The sap.ui.base event object.
	 */
	ProcessFlowNode.prototype.onclick = function (oEvent) {
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
		}
		this._handleClick(oEvent);
	};

	/**
	 * General event handler.
	 *
	 * @private
	 * @param {sap.ui.base.Event} oEvent The sap.ui.base event object.
	 */
	ProcessFlowNode.prototype._handleEvents = function (oEvent) {
		var $ThisChildren = this.$().find('*');
		var $ThisAttribute = this.$().attr('id');
		var isFoldedCorner = this._getFoldedCorner();
		var oScrollContainer = this.getParent();
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
		}
		//If the node is dimmed and other nodes are highlighted, it should be inactive and should not get hover and active class
		if (this._parent && this._parent._bHighlightedMode && this._getDimmed()) {
			return;
		}
		// If the node is aggregated, adjust the CSS classes for aggregated nodes
		if (this.getType() === library.ProcessFlowNodeType.Aggregated) {
			this._adjustClassesForAggregation(oEvent);
		}

		var oProcessFlowClass = sap.ui.require("sap/suite/ui/commons/ProcessFlow");
		if (!oProcessFlowClass) {
			return;
		}

		switch (oEvent.type) {
			case oProcessFlowClass._mouseEvents.mouseDown:
			case "keydown":
				this.$().removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
				$ThisChildren.removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
				if (isFoldedCorner) {
					jQuery('#' + $ThisAttribute).removeClass(this._nodeFCHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
					jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
					jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
				}
				break;
			case oProcessFlowClass._mouseEvents.mouseUp:
				if (oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
					oScrollContainer.$().removeClass(this._grabbingCursorClass);
				}
				this.$().removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
				$ThisChildren.removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
				if (isFoldedCorner) {
					jQuery('#' + $ThisAttribute).removeClass(this._nodeHoverClass + ' ' + this._nodeFCActiveClass).addClass(this._nodeFCHoverClass);
					jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeHoverClass + ' ' + this._nodeFCActiveClass).addClass(this._nodeFCIconHoverClass);
					jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeHoverClass + ' ' + this._nodeFCActiveClass).addClass(this._nodeFCIconHoverClass);
				}
				break;
			case oProcessFlowClass._mouseEvents.mouseEnter:
				/* in case the cursor is in the "grabbing" state ( the user is scrolling and comes over the node) the cursor's state should not be changed to the pointer */
				if (!oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
					this.$().addClass(this._nodeHoverClass);
					$ThisChildren.addClass(this._nodeHoverClass);
					this.$().find(this._nodePlannedClassIdentifier).find("*").addClass(this._nodePlannedClass);
					if (isFoldedCorner) {
						jQuery('#' + $ThisAttribute).removeClass(this._nodeHoverClass).addClass(this._nodeFCHoverClass);
						jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
						jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
					}
				}
				break;
			case oProcessFlowClass._mouseEvents.mouseLeave:
			case "keyup":
				this.$().removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
				$ThisChildren.removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
				if (isFoldedCorner) {
					jQuery('#' + $ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCHoverClass);
					jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
					jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
				}
				if (!oScrollContainer.$().hasClass(this._grabbingCursorClass)) {
					oScrollContainer.$().addClass(this._grabCursorClass);
				}
				break;
			case oProcessFlowClass._mouseEvents.touchStart:
				if (Device.support.touch) {
					this.$().addClass(this._nodeActiveClass);
					$ThisChildren.addClass(this._nodeActiveClass);
					if (isFoldedCorner) {
						jQuery('#' + $ThisAttribute).removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
						jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
						jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeActiveClass).addClass(this._nodeFCActiveClass);
					}
				}
				break;
			case oProcessFlowClass._mouseEvents.sapTouchStart:
				this.$().removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
				$ThisChildren.removeClass(this._nodeHoverClass).addClass(this._nodeActiveClass);
				if (isFoldedCorner) {
					jQuery('#' + $ThisAttribute).removeClass(this._nodeFCHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
					jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
					jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeFCIconHoverClass + ' ' + this._nodeActiveClass).addClass(this._nodeFCActiveClass);
				}
				break;
			case oProcessFlowClass._mouseEvents.touchEnd:
				if (Device.support.touch) {
					this.$().removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
					$ThisChildren.removeClass(this._nodeActiveClass + ' ' + this._nodeHoverClass);
					if (isFoldedCorner) {
						jQuery('#' + $ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCHoverClass);
						jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
						jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeFCIconHoverClass);
					}
				}
				this._handleClick(oEvent);
				break;
			case oProcessFlowClass._mouseEvents.sapTouchCancel:
				this.$().removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
				$ThisChildren.removeClass(this._nodeActiveClass).addClass(this._nodeHoverClass);
				if (isFoldedCorner) {
					jQuery('#' + $ThisAttribute).removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCHoverClass);
					jQuery('div[id^=' + $ThisAttribute + '][id$=-corner-container]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
					jQuery('span[id^=' + $ThisAttribute + '][id$=-corner-icon]').removeClass(this._nodeFCActiveClass + ' ' + this._nodeHoverClass).addClass(this._nodeFCIconHoverClass);
				}
				break;
			default:
				break;
		}
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Sets the artificial laneId of a merged lane as hidden property. If it's not set here, the property is false.
	 *
	 * @private
	 * @param {string} laneId ID of the lane
	 */
	ProcessFlowNode.prototype._setMergedLaneId = function (laneId) {
		this._mergedLaneId = laneId;
	};

	/**
	 * Setter for the parent flow control. It is used to propagate the onNodeTitlePresses event.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The parent ProcessFlow control instance
	 */
	ProcessFlowNode.prototype._setParentFlow = function (oControl) {
		this._parent = oControl;
	};

	/**
	 * Getter for folded corner
	 *
	 * @private
	 * @returns {sap.ui.core.Icon} The folded corner icon
	 */
	ProcessFlowNode.prototype._getFoldedCornerControl = function () {
		if (this._foldedCornerControl) {
			this._foldedCornerControl.destroy();
		}
		this._foldedCornerControl = new Icon({
			id: this.getId() + "-corner-icon",
			src: IconPool.getIconURI("context-menu", "businessSuite"),
			visible: true
		});
		if (this._parent && !this._parent._bHighlightedMode || !this._getDimmed()) {
			this._foldedCornerControl.addStyleClass("sapUiIconPointer");
		}

		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1ZoomLevel4");
				break;
			default:
				break;
		}
		this._foldedCornerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode1");

		return this._foldedCornerControl;
	};

	/**
	 * Gets header control.
	 *
	 * @private
	 * @returns {sap.m.Text} The new header text instance
	 */
	ProcessFlowNode.prototype._getHeaderControl = function () { // EXC_SAP_006_1
		if (this._headerControl) {
			this._headerControl.destroy();
		}

		var iLinesCount = 0;
		var sWidth = "";
		var bVisible = true;
		var sText = this.getTitle();

		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				iLinesCount = 3;
				break;
			case library.ProcessFlowZoomLevel.Two:
				iLinesCount = 3;
				break;
			case library.ProcessFlowZoomLevel.Three:
				iLinesCount = 2;
				sText = this.getTitleAbbreviation();
				break;
			case library.ProcessFlowZoomLevel.Four:
				sText = "";
				iLinesCount = 0;
				sWidth = "0px";
				bVisible = false;
				break;
			default:
				break;
		}
		this._headerControl = new Text({
			id: this.getId() + "-nodeid-anchor-title",
			text: sText,
			visible: bVisible,
			wrapping: true,
			width: sWidth,
			maxLines: iLinesCount
		});
		if (this.getIsTitleClickable()) {
			this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleClickable");
		}
		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel4");
				break;
			default:
				break;
		}
		this._headerControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Title");
		return this._headerControl;
	};

	/**
	 * Gets icon control.
	 *
	 * @private
	 * @returns {sap.ui.core.Icon} The new icon instance
	 */
	ProcessFlowNode.prototype._getIconControl = function () { // EXC_SAP_006_1
		if (this._iconControl) {
			this._iconControl.destroy();
		}
		var sSrc = null;
		var bVisible = true;

		// request (Dec 2014): display icon even when there's no stateText
		switch (this.getState()) {
			case library.ProcessFlowNodeState.Positive:
				sSrc = "sap-icon://message-success";
				break;
			case library.ProcessFlowNodeState.Negative:
			case library.ProcessFlowNodeState.PlannedNegative:
				sSrc = "sap-icon://message-error";
				break;
			case library.ProcessFlowNodeState.Planned:
				sSrc = null; // latest request: do not display state icon, was "sap-icon://to-be-reviewed"
				break;
			case library.ProcessFlowNodeState.Neutral:
				sSrc = "sap-icon://process";
				break;
			case library.ProcessFlowNodeState.Critical:
				sSrc = "sap-icon://message-warning";
				break;
			default:
				break;
		}
		this._iconControl = new Icon({
			id: this.getId() + "-icon",
			src: sSrc,
			visible: bVisible
		});
		if (this._parent && !this._parent._bHighlightedMode || !this._getDimmed()) {
			this._iconControl.addStyleClass("sapUiIconPointer");
		}

		// correct RTL behaviour for state icon
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();

		if (bRtl) {
			this._iconControl.addStyleClass("sapUiIconSuppressMirrorInRTL");
		}
		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
			case library.ProcessFlowZoomLevel.Two:
				var sIconAlignStyle = "sapSuiteUiCommonsProcessFlowNode3StateIconLeft";

				if (bRtl) {
					sIconAlignStyle = "sapSuiteUiCommonsProcessFlowNode3StateIconRight";
				}
				this._iconControl.addStyleClass(sIconAlignStyle);
				break;
			case library.ProcessFlowZoomLevel.Three:
			case library.ProcessFlowZoomLevel.Four:
				this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconCenter");
				break;
			default:
				break;
		}
		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel4");
				break;
			default:
				break;
		}
		this._iconControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateIcon");
		return this._iconControl;
	};

	/**
	 * Gets state text control.
	 *
	 * @private
	 * @returns {sap.m.Text} The new state text instance
	 */
	ProcessFlowNode.prototype._getStateTextControl = function () { // EXC_SAP_006_1, EXC_JSHINT_047
		if (this._stateTextControl) {
			this._stateTextControl.destroy();
		}
		var iLinesCount = 2;
		var sWidth = "";
		var bVisible = true;
		var oState = this.getState();
		var sText = (oState === library.ProcessFlowNodeState.Planned) ? "" : this.getStateText(); // latest request: do not display state text for planned state
		if (oState === library.ProcessFlowNodeState.PlannedNegative && sText.length === 0) {
			//set default status text for status PlannedNegative when no text is provided
			sText = "Planned Negative";
		}
		// number of lines
		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
			case library.ProcessFlowZoomLevel.Two:
			case library.ProcessFlowZoomLevel.Three:
				iLinesCount = 2;
				break;
			case library.ProcessFlowZoomLevel.Four:
				sText = "";
				iLinesCount = 0;
				sWidth = "0px";
				bVisible = false;
				break;
			default:
				break;
		}
		this._stateTextControl = new Text({
			id: this.getId() + "-stateText",
			text: sText,
			visible: bVisible,
			wrapping: true,
			width: sWidth,
			maxLines: iLinesCount
		});
		switch (oState) {
			case library.ProcessFlowNodeState.Positive:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePositive");
				break;
			case library.ProcessFlowNodeState.Negative:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
				break;
			case library.ProcessFlowNodeState.Planned:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePlanned");
				break;
			case library.ProcessFlowNodeState.Neutral:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateNeutral");
				break;
			case library.ProcessFlowNodeState.PlannedNegative:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StatePlanned");
				break;
			case library.ProcessFlowNodeState.Critical:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateCritical");
				break;
			default:
				break;
		}
		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel4");
				break;
			default:
				break;
		}
		this._stateTextControl.addStyleClass("sapSuiteUiCommonsProcessFlowNode3StateText");
		return this._stateTextControl;
	};

	/**
	 * Gets zoom level.
	 *
	 * @private
	 * @returns {string} zoomLevel The node's zoom level
	 */
	ProcessFlowNode.prototype._getZoomLevel = function () {
		return this._zoomLevel;
	};

	/**
	 * Sets zoom level.
	 *
	 * @private
	 * @param {string} zoomLevel The new zoom level to be set
	 */
	ProcessFlowNode.prototype._setZoomLevel = function (zoomLevel) {
		this._zoomLevel = zoomLevel;
	};

	/**
	 * Sets zoom level.
	 *
	 * @private
	 * @param {Object} navigationFocus The new navigation focus
	 */
	ProcessFlowNode.prototype._setNavigationFocus = function (navigationFocus) {
		this._navigationFocus = navigationFocus;
	};

	/**
	 * Sets zoom level.
	 *
	 * @private
	 * @returns {Object} The navigation focus of the ProcessFlowNode
	 */
	ProcessFlowNode.prototype._getNavigationFocus = function () {
		return this._navigationFocus;
	};

	/**
	 * Sets folded corner.
	 *
	 * @private
	 * @param {boolean} foldedCorner Whether a folded corner is to be used or not
	 */
	ProcessFlowNode.prototype._setFoldedCorner = function (foldedCorner) {
		this._foldedCorner = foldedCorner;
	};

	/**
	 * Gets folded corner.
	 *
	 * @private
	 * @returns {boolean} True if folded corners are used, otherwise false
	 */
	ProcessFlowNode.prototype._getFoldedCorner = function () {
		return this._foldedCorner;
	};

	/**
	 * Sets tag.
	 *
	 * @private
	 * @param {object} newTag The new tag
	 */
	ProcessFlowNode.prototype._setTag = function (newTag) {
		this._tag = newTag;
	};

	/**
	 * Gets tag.
	 *
	 * @private
	 * @returns {object} The current tag
	 */
	ProcessFlowNode.prototype._getTag = function () {
		return this._tag;
	};

	/**
	 * Sets to dimmed state.
	 *
	 * @private
	 */
	ProcessFlowNode.prototype._setDimmedState = function () {
		var bIsFocused = this.getFocused();
		var bIsHighlighted = this.getHighlighted();
		var bIsSelected = this.getSelected();

		if (bIsHighlighted || bIsSelected) {
			throw new Error("Cannot set highlighed or selected node to dimmed state" + this.getNodeId());
		}
		this._displayState = library.ProcessFlowDisplayState.Dimmed;

		if (bIsFocused) {
			this._displayState = library.ProcessFlowDisplayState.DimmedFocused;
		}
	};

	/**
	 * Sets the highlighted nodes to the regular state.
	 *
	 * @private
	 */
	ProcessFlowNode.prototype._setRegularState = function () {
		this._displayState = library.ProcessFlowDisplayState.Regular;
	};

	/**
	 * Returns the lane of current ProcessFlowNode.
	 *
	 * @private
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} lane of current node
	 */
	ProcessFlowNode.prototype._getLane = function () {
		var oProcessFlow = this.getParent();
		var oLane = null;
		if (oProcessFlow) {
			oLane = oProcessFlow._getLane(this.getLaneId());
		}
		return oLane;
	};

	/**
	 * Returns a value that indicates if the current node is dimmed or not.
	 *
	 * @private
	 * @returns {boolean} true if the current node is dimmed, false if the current node is not dimmed
	 */
	ProcessFlowNode.prototype._getDimmed = function()  {
		return this._displayState === library.ProcessFlowDisplayState.Dimmed ||
			this._displayState === library.ProcessFlowDisplayState.DimmedFocused;
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Returns the ARIA details text for the current Process Flow Node.
	 *
	 * @private
	 * @returns {string} ARIA details
	 */
	ProcessFlowNode.prototype._getAriaText = function () {
		var iParentsCount = this.getParents().length;
		var oCustomContent = this._getCurrentZoomLevelContent();

		var iChildrenCount = 0;
		if (this._hasChildren()) {
			iChildrenCount = this.getChildren().length;
		}

		var sLaneText = "";
		var oLane = this._getLane();
		if (oLane) {
			sLaneText = oLane.getText();
			if (!sLaneText) {
				sLaneText = this._oResBundle.getText('PF_VALUE_UNDEFINED');
			}
		}

		var sContentText = "";
		var contentTexts = this.getTexts();
		if (contentTexts) {
			for (var i in contentTexts) {
				if (contentTexts[i]) {
					var valueText = contentTexts[i].concat(", ");
					sContentText = sContentText.concat(valueText);
				}
			}
			//Removes the last character which is a ' '
			sContentText = sContentText.slice(0, -1);
		}

		var sTitleText = this.getTitle();
		if (!sTitleText && !oCustomContent) {
			sTitleText = this._oResBundle.getText('PF_VALUE_UNDEFINED');
		}

		var sStateValueText = this.getState();
		if (!sStateValueText) {
			sStateValueText = this._oResBundle.getText('PF_VALUE_UNDEFINED');
		}

		var sStateText = this.getStateText();
		if (this.getState() === library.ProcessFlowNodeState.Planned) {
			sStateText = "";
		}

		var sAggregatedText = "";
		if (this.getType() === library.ProcessFlowNodeType.Aggregated) {
			sAggregatedText = this._oResBundle.getText("PF_ARIA_TYPE");
		}

		return this._oResBundle.getText('PF_ARIA_NODE', [sTitleText, sStateValueText, sStateText, sLaneText, sContentText, iParentsCount, iChildrenCount, sAggregatedText]);
	};

	/**
	 * Based on the focused and highlighted property, we define the display state.
	 *
	 * @private
	 * @returns {sap.suite.ui.commons.ProcessFlowDisplayState} The current display state of the node
	 */
	ProcessFlowNode.prototype._getDisplayState = function () {
		var bIsFocused = this.getFocused();
		var bIsHighlighted = this.getHighlighted();
		var bIsSelected = this.getSelected();

		//Dimmed is set externally via _setDimmedState function
		if (this._displayState === library.ProcessFlowDisplayState.Dimmed ||
			this._displayState === library.ProcessFlowDisplayState.DimmedFocused) {
			return this._displayState;
		}

		if (bIsSelected) {
			if (bIsHighlighted) {
				if (bIsFocused) {
					this._displayState = library.ProcessFlowDisplayState.SelectedHighlightedFocused;
				} else {
					this._displayState = library.ProcessFlowDisplayState.SelectedHighlighted;
				}
			} else if (bIsFocused) {
				this._displayState = library.ProcessFlowDisplayState.SelectedFocused;
			} else {
				this._displayState = library.ProcessFlowDisplayState.Selected;
			}
		} else if (bIsFocused && bIsHighlighted) {
			this._displayState = library.ProcessFlowDisplayState.HighlightedFocused;
		} else if (bIsFocused) {
			this._displayState = library.ProcessFlowDisplayState.RegularFocused;
		} else if (bIsHighlighted) {
			this._displayState = library.ProcessFlowDisplayState.Highlighted;
		} else if (this._displayState === library.ProcessFlowDisplayState.HighlightedFocused ||
			this._displayState === library.ProcessFlowDisplayState.RegularFocused ||
			this._displayState === library.ProcessFlowDisplayState.Highlighted ||
			this._displayState === library.ProcessFlowDisplayState.Selected) {
			// It cannot stay in focused or highlighted mode if there is no such flag.
			this._setRegularState();
		}

		return this._displayState;
	};

	/**
	 * creates internal text control.
	 *
	 * @private
	 * @param {string} textId The ID of the text control
	 * @param {string} textToDisplay The text to display
	 * @param {sap.m.Text} oControl A reference to an existing control instance
	 * @returns {sap.m.Text} The newly created control instance
	 */
	ProcessFlowNode.prototype._createTextControlInternal = function (textId, textToDisplay, oControl) {
		if (oControl) {
			oControl.destroy();
		}

		var iLinesCount = 2;
		var sWidth = "";
		var bVisible = true;
		var sText = textToDisplay;

		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
			case library.ProcessFlowZoomLevel.Two:
				iLinesCount = 2;
				break;
			case library.ProcessFlowZoomLevel.Three:
				iLinesCount = 0;
				sWidth = "0px";
				bVisible = false;
				break;
			case library.ProcessFlowZoomLevel.Four:
				sText = "";
				iLinesCount = 0;
				sWidth = "0px";
				bVisible = false;
				break;
			default:
				break;
		}
		if (this.getState) {
			oControl = new Text({
				id: this.getId() + textId,
				text: sText,
				visible: bVisible,
				wrapping: true,
				width: sWidth,
				maxLines: iLinesCount
			});
		}
		return oControl;
	};

	/**
	 * creates text1 control.
	 *
	 * @private
	 * @returns {sap.m.Text} The internally created text control
	 */
	ProcessFlowNode.prototype._createText1Control = function () {
		var sTextToDisplay = this.getTexts();

		if (sTextToDisplay && sTextToDisplay.length > 0) {
			sTextToDisplay = sTextToDisplay[0];
		}
		this._text1Control = this._createTextControlInternal("-text1-control", sTextToDisplay, this._text1Control);

		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel1");
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel2");
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
				break;
			default:
				break;
		}
		this._text1Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Text");
		return this._text1Control;
	};

	/**
	 * creates text2 control.
	 *
	 * @private
	 * @returns {sap.m.Text} The internally created text control
	 */
	ProcessFlowNode.prototype._createText2Control = function () {
		var sTextToDisplay = this.getTexts();

		if (sTextToDisplay && sTextToDisplay.length > 1) {
			sTextToDisplay = sTextToDisplay[1];
		} else {
			sTextToDisplay = "";
		}
		this._text2Control = this._createTextControlInternal("-text2-control", sTextToDisplay, this._text2Control);

		switch (this._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
				break;
			default:
				break;
		}
		this._text2Control.addStyleClass("sapSuiteUiCommonsProcessFlowNode3Text");
		return this._text2Control;
	};

	/**
	 * Adds/removes the CSS classes for aggregated nodes for each type of event.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The jQuery event object.
	 */
	ProcessFlowNode.prototype._adjustClassesForAggregation = function (oEvent) {
		// List with the focused states
		var aFocusedStates = [library.ProcessFlowDisplayState.RegularFocused,
			library.ProcessFlowDisplayState.HighlightedFocused,
			library.ProcessFlowDisplayState.DimmedFocused];
		// List with the dimmed states
		var aDimmedStates = [library.ProcessFlowDisplayState.DimmedFocused,
			library.ProcessFlowDisplayState.Dimmed];

		var oProcessFlowClass = sap.ui.require("sap/suite/ui/commons/ProcessFlow");
		if (!oProcessFlowClass) {
			return;
		}

		switch (oEvent.type) {
			case oProcessFlowClass._mouseEvents.mouseDown:
			case oProcessFlowClass._mouseEvents.touchStart:
			case oProcessFlowClass._mouseEvents.sapTouchStart:
				addAggregatedPressedClasses(this);
				break;
			case oProcessFlowClass._mouseEvents.mouseUp:
				removeAggregatedPressedClasses(this);
				break;
			case oProcessFlowClass._mouseEvents.sapTouchCancel:
			case oProcessFlowClass._mouseEvents.touchEnd:
				removeAggregatedPressedClasses(this);
				removeAggregatedHoveredClasses(this);
				break;
			case oProcessFlowClass._mouseEvents.mouseEnter:
				addAggregatedHoveredClasses(this);
				break;
			case oProcessFlowClass._mouseEvents.mouseLeave:
				removeAggregatedPressedClasses(this);
				removeAggregatedHoveredClasses(this);
				break;
			default:
				break;
		}

		/**
		 * Adds the CSS classes for pressed status (mouse down).
		 * @param {sap.ui.core.Control} that The instance the classes are to be added to
		 */
		function addAggregatedPressedClasses(that) {
			if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
				// If the node is dimmed
				if ((jQuery.inArray(that._getDisplayState(), aDimmedStates)) >= 0) {
					that.$().removeClass(that._nodeAggregatedDimmedHoveredClassZoomLevel4).addClass(that._nodeAggregatedDimmedPressedClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedClassZoomLevel4).removeClass(that._nodeAggregatedHoveredClassZoomLevel4).addClass(that._nodeAggregatedPressedClassZoomLevel4);
				}
				// If the node is dimmed
			} else if ((jQuery.inArray(that._getDisplayState(), aDimmedStates)) >= 0) {
				that.$().removeClass(that._nodeAggregatedDimmedHoveredClass).addClass(that._nodeAggregatedDimmedPressedClass);
			} else {
				that.$().removeClass(that._nodeAggregatedClass).removeClass(that._nodeAggregatedHoveredClass).addClass(that._nodeAggregatedPressedClass);
			}
		}

		/**
		 * Removes the CSS classes for pressed status (mouse up or mouse leave).
		 * @param {sap.ui.core.Control} that The instance the classes are to be removed from
		 */
		function removeAggregatedPressedClasses(that) {
			// If the node is focused
			if ((jQuery.inArray(that._getDisplayState(), aFocusedStates)) >= 0 && (that.$().hasClass(that._nodeAggregatedPressedClass) || that.$().hasClass(that._nodeAggregatedPressedClassZoomLevel4))) {
				if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					that.$().removeClass(that._nodeAggregatedPressedClassZoomLevel4).addClass(that._nodeAggregatedFocusedClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedPressedClass).addClass(that._nodeAggregatedFocusedClass);
				}
			} else if (that.$().hasClass(that._nodeAggregatedDimmedPressedClass) || that.$().hasClass(that._nodeAggregatedDimmedPressedClassZoomLevel4)) {
				// If the node is dimmed
				if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					that.$().removeClass(that._nodeAggregatedDimmedPressedClassZoomLevel4).addClass(that._nodeAggregatedDimmedHoveredClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedDimmedPressedClass).addClass(that._nodeAggregatedDimmedHoveredClass);
				}
			} else if (that.$().hasClass(that._nodeAggregatedPressedClass) || that.$().hasClass(that._nodeAggregatedPressedClassZoomLevel4)) {
				// If the node is in regular state
				if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					that.$().removeClass(that._nodeAggregatedPressedClassZoomLevel4).addClass(that._nodeAggregatedClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedPressedClass).addClass(that._nodeAggregatedClass);
				}
			}
		}

		/**
		 * Adds the CSS classes for hovered status (mouse-enter).
		 * @param {sap.ui.core.Control} that The instance the classes are to be added to
		 */
		function addAggregatedHoveredClasses(that) {
			// If the node is dimmed
			if ((jQuery.inArray(that._getDisplayState(), aDimmedStates)) >= 0) {
				if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					that.$().removeClass(that._nodeAggregatedDimmedClassZoomLevel4).addClass(that._nodeAggregatedDimmedHoveredClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedDimmedClass).addClass(that._nodeAggregatedDimmedHoveredClass);
				}
			} else if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
				that.$().addClass(that._nodeAggregatedHoveredClassZoomLevel4);
			} else {
				that.$().addClass(that._nodeAggregatedHoveredClass);
			}
		}

		/**
		 * Removes the CSS classes for hovered status (mouse-leave).
		 * @param {sap.ui.core.Control} that The instance the classes are to be removed from
		 */
		function removeAggregatedHoveredClasses(that) {
			// If the node is dimmed
			if ((jQuery.inArray(that._getDisplayState(), aDimmedStates)) >= 0) {
				if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					that.$().removeClass(that._nodeAggregatedDimmedHoveredClassZoomLevel4).addClass(that._nodeAggregatedDimmedClassZoomLevel4);
				} else {
					that.$().removeClass(that._nodeAggregatedDimmedHoveredClass).addClass(that._nodeAggregatedDimmedClass);
				}
			} else if (that._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
				that.$().removeClass(that._nodeAggregatedHoveredClassZoomLevel4);
			} else {
				that.$().removeClass(that._nodeAggregatedHoveredClass);
			}
		}
	};

	/**
	 * Checks if current node contains children.
	 *
	 * @private
	 * @returns {boolean} Value which shows if the ProcessFlowNode has children or not
	 */
	ProcessFlowNode.prototype._hasChildren = function () {
		var aChildren = this.getChildren();
		return aChildren && aChildren.length > 0;
	};

	/**
	 * Checks if the current node contains a children with the specified nodeId.
	 *
	 * @private
	 * @param {string} childrenNodeId The children node Id which is looked for
	 * @returns {boolean} If the current node has a children with the specified node Id or not
	 */
	ProcessFlowNode.prototype._hasChildrenWithNodeId = function (childrenNodeId) {
		var aChildren = this.getChildren();
		if (aChildren && aChildren.length > 0) {
			for (var i = 0; i < aChildren.length; i++) {
				if ((typeof aChildren[i] === 'object' && aChildren[i].nodeId === childrenNodeId) ||
					aChildren[i] === childrenNodeId) {
					return true;
				}
			}
		}
		return false;
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */

	ProcessFlowNode.prototype.getLaneId = function () {
		if (this._mergedLaneId) {
			return this._mergedLaneId;
		} else {
			return this.getProperty("laneId");
		}
	};

	/**
	 * Retrieves the custom content of the aggregation that is associated with the current zoom level of the parent ProcessFlow.
	 * The correct content is taken from the zoomLevel*Content aggregations.
	 *
	 * @returns {sap.ui.core.Control} The control contained in the current zoom level's custom content aggregation, or null if the parent is not a ProcessFlow
	 * @private
	 */
	ProcessFlowNode.prototype._getCurrentZoomLevelContent = function() {
		var oParent = this.getParent();
		if (!oParent || oParent.getMetadata().getName() !== "sap.suite.ui.commons.ProcessFlow") {
			return null;
		}

		return this["getZoomLevel" + oParent.getZoomLevel() + "Content"]();
	};


	return ProcessFlowNode;

});

}; // end of sap/suite/ui/commons/ProcessFlowNode.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowNodeRenderer') ) {
/*
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowNodeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowNodeRenderer",[ 'jquery.sap.global', './library', 'sap/ui/Device' ],
	function(jQuery, library, Device) {
	"use strict";

	/**
	 * @class ProcessFlowNode renderer.
	 * @static
	 */
	var ProcessFlowNodeRenderer = {};

	/**
	 * ProcessFlowNodeRenderer constants
	 *
	 * @static
	 */
	ProcessFlowNodeRenderer._constants = {
		top:    "top",
		right:  "right",
		bottom: "bottom",
		left:   "left",
		corner: "corner"
	};

	/**
	 * ProcessFlowNodeRenderer node levels
	 *
	 * @static
	 */
	ProcessFlowNodeRenderer._nodeLevels = {
		iLevel0: 0,
		iLevel1: 1,
		iLevel2: 2,
		iLevel3: 3
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer.render = function (oRm, oControl) { // EXC_SAP_006_1, EXC_JSHINT_046
		var oFoldedCornerControl = null;
		var oCustomContent = oControl._getCurrentZoomLevelContent();

		if (oControl._getFoldedCorner()) {
			oFoldedCornerControl = oControl._getFoldedCornerControl();
		}
		var oHeaderControl = oControl._getHeaderControl();
		var oIconControl = oControl._getIconControl();
		var oStateControl = oControl._getStateTextControl();
		var oText1Control = oControl._createText1Control();
		var oText2Control = oControl._createText2Control();

		/*
		 In order to be able to display folded corner we have add another four div containers -
		 - node1-node4
		 node0 - base container contains all subparts
		 node1 - corner container contains folded corner
		 node2 - top container
		 node3 - node components
		 */
		// node0
		oRm.write("<div");
		oRm.writeControlData(oControl);
		if (oCustomContent) {
			oRm.addClass("sapSuiteUiCommonsProcessFlowNodeCustom");
		}
		ProcessFlowNodeRenderer._assignNodeClasses(oRm, oControl, 0);
		oRm.write(">");

		switch (oControl._getDisplayState()) {
			case library.ProcessFlowDisplayState.Highlighted:
			case library.ProcessFlowDisplayState.HighlightedFocused:
			case library.ProcessFlowDisplayState.SelectedHighlighted:
			case library.ProcessFlowDisplayState.SelectedHighlightedFocused:
				//border-top shadowing
				oRm.write("<div");
				ProcessFlowNodeRenderer._assignShadowClasses(oRm, oControl, "top");
				oRm.write("></div>");

				//border-right shadowing
				oRm.write("<div");
				ProcessFlowNodeRenderer._assignShadowClasses(oRm, oControl, "right");
				oRm.write("></div>");

				//border-bottom shadowing
				oRm.write("<div");
				ProcessFlowNodeRenderer._assignShadowClasses(oRm, oControl, "bottom");
				oRm.write("></div>");

				//border-left shadowing
				oRm.write("<div");
				ProcessFlowNodeRenderer._assignShadowClasses(oRm, oControl, "left");
				oRm.write("></div>");

				if (oControl._getFoldedCorner()) {
					//folded corner shadowing
					oRm.write("<div");
					ProcessFlowNodeRenderer._assignShadowClasses(oRm, oControl, "corner");
					oRm.write("></div>");
				}
				break;
			default:
		}
		// node1
		oRm.write("<div");
		ProcessFlowNodeRenderer._assignNodeClasses(oRm, oControl, 1);
		oRm.write(">");
		if (oControl._getFoldedCorner()) {
			oRm.renderControl(oFoldedCornerControl);
		}
		oRm.write("</div>");
		// node2
		oRm.write("<div");
		ProcessFlowNodeRenderer._assignNodeClasses(oRm, oControl, 2);
		oRm.write(">");
		oRm.write("</div>");
		// node3
		oRm.write("<div");
		ProcessFlowNodeRenderer._assignNodeClasses(oRm, oControl, 3);
		oRm.write(">");

		if (oCustomContent) {
			oRm.write("<div");
			oRm.addClass("sapSuiteUiCommonsProcessFlowNode3ContentPadding");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oCustomContent);
			oRm.write("</div>");
		} else {
			// node3 contents (actual node contents - title, state, texts)
			// title
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeTitleClasses(oRm, oControl);
			oRm.write(">");
			oRm.renderControl(oHeaderControl);
			oRm.write("</div>");
			// state area
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeStateClasses(oRm, oControl);
			oRm.write(">");
			// state icon
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeIconClasses(oRm, oControl);
			oRm.write(">");
			oRm.renderControl(oIconControl);
			oRm.write("</div>");
			// state text
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeStateTextClasses(oRm, oControl);
			oRm.write(">");
			oRm.renderControl(oStateControl);
			oRm.write("</div>");
			oRm.write("</div>");
			// end of state
			// text1
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeText1Classes(oRm, oControl);
			oRm.write(">");
			oRm.renderControl(oText1Control);
			oRm.write("</div>");
			// text2
			oRm.write("<div");
			ProcessFlowNodeRenderer._assignNodeText2Classes(oRm, oControl);
			oRm.write(">"); // div element for text2
			oRm.renderControl(oText2Control);
			oRm.write("</div>");
			oRm.write("</div>"); // end of node3
		}

		oRm.write("</div>"); // end of node0
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/*
	 * Navigation focus is used for the keyboard support
	 *
	 * business focus comes from outside and just make different visual representation (blue rectangle around). The focus
	 * is in the styles represents with the word selected (timing and historical reasons)
	 */

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 * @param {int} nodeLevel The nodeLevel of the node (0 - parent node, 1 - upper left (folded corner icon), 2 - top part of the node, 3 - bottom part of the node
	 */
	ProcessFlowNodeRenderer._assignNodeClasses = function (oRm, oControl, nodeLevel) { // EXC_SAP_006_1, EXC_JSHINT_047
		switch (nodeLevel) {
			case ProcessFlowNodeRenderer._nodeLevels.iLevel0:
				//oRm.writeAttribute("id", oControl.getId() + "-base-container");
				break;
			case ProcessFlowNodeRenderer._nodeLevels.iLevel1:
				oRm.writeAttribute("id", oControl.getId() + "-corner-container");
				break;
			case ProcessFlowNodeRenderer._nodeLevels.iLevel2:
				oRm.writeAttribute("id", oControl.getId() + "-top-container");
				break;
			case ProcessFlowNodeRenderer._nodeLevels.iLevel3:
				oRm.writeAttribute("id", oControl.getId() + "-content-container");
				break;
			default:
		}
		if (nodeLevel > ProcessFlowNodeRenderer._nodeLevels.iLevel0) {
			// Planned
			switch (oControl.getState()) {
				case library.ProcessFlowNodeState.Planned:
					if ((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) && (oControl._getFoldedCorner())) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerPlanned");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlannedDashedBorder");
					}
					break;
				case library.ProcessFlowNodeState.PlannedNegative:
					if ((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) && (oControl._getFoldedCorner())) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerPlanned");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlannedDashedBorder");
					}
					break;
				default:
			}
			if (oControl._getNavigationFocus()) {
				oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateNavigation");
			}
			// Display state: Focused
			switch (oControl._getDisplayState()) {
				case library.ProcessFlowDisplayState.RegularFocused:
				case library.ProcessFlowDisplayState.HighlightedFocused:
				case library.ProcessFlowDisplayState.DimmedFocused:
				case library.ProcessFlowDisplayState.SelectedHighlightedFocused:
				case library.ProcessFlowDisplayState.SelectedFocused:
					if ((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) && (oControl._getFoldedCorner())) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateFocused");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateFocused");
					}
					break;
				default:
			}
			// Display state: Regular, Highlighted, Dimmed
			switch (oControl._getDisplayState()) {
				case library.ProcessFlowDisplayState.Regular:
				case library.ProcessFlowDisplayState.RegularFocused:
				case library.ProcessFlowDisplayState.Selected:
					if ((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) && (oControl._getFoldedCorner())) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateRegular");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateRegular");
					}
					break;
				case library.ProcessFlowDisplayState.Highlighted:
				case library.ProcessFlowDisplayState.HighlightedFocused:
				case library.ProcessFlowDisplayState.SelectedHighlighted:
				case library.ProcessFlowDisplayState.SelectedHighlightedFocused:
					if (nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1 && oControl._getFoldedCorner()) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateHighlighted");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateHighlighted");
					}
					break;
				case library.ProcessFlowDisplayState.Dimmed:
				case library.ProcessFlowDisplayState.DimmedFocused:
					if (nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1 && oControl._getFoldedCorner()) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateDimmed");
					} else {
						oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateDimmed");
					}
					break;
				default:
			}
		}
		if (nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel0) {
			if (oControl._getNavigationFocus()) {
				oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerDisplayStateNavigation");
			}
			if (oControl._getDisplayState() === library.ProcessFlowDisplayState.Highlighted) {
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeDisplayStateHighlighted");
			}
			if (oControl.getType() === library.ProcessFlowNodeType.Aggregated) {
				ProcessFlowNodeRenderer._assignAggregatedNodeClasses(oRm, oControl);
			}
		}
		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel1"));
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel2"));
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel3"));
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "ZoomLevel4"));
				break;
			default:
		}
		if (nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) {
			if (oControl._getFoldedCorner()) {
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode1FoldedBorderStyle");
			} else {
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode1BorderStyle");
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeBorderStandard");
			}
		} else if (nodeLevel > ProcessFlowNodeRenderer._nodeLevels.iLevel1) {
			oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel + "BorderStyle"));
			oRm.addClass("sapSuiteUiCommonsProcessFlowNodeBorderStandard");
		}

		if (((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel1) && (oControl._getFoldedCorner()))) {
			oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerNode1");
		} else {
			oRm.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsProcessFlowNode" + nodeLevel));
		}
		if (((nodeLevel === ProcessFlowNodeRenderer._nodeLevels.iLevel0) && (oControl._getFoldedCorner()))) {
			oRm.addClass("sapSuiteUiCommonsProcessFlowFoldedCornerIndication");
		}

		oRm.writeClasses();
	};

	/**
	 * Renders the HTML shadow borders for the given aggregated node, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignAggregatedNodeClasses = function (oRm, oControl) {
		switch (oControl._getDisplayState()) {
			// Highlighted and regular states uses the same color
			case library.ProcessFlowDisplayState.Highlighted:
			case library.ProcessFlowDisplayState.Regular:
			case library.ProcessFlowDisplayState.Selected:
				if (oControl._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregatedZoomLevel4");
				} else {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregated");
				}
				break;
			// Dimmed state uses a lighter color
			case library.ProcessFlowDisplayState.Dimmed:
				if (oControl._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregatedDimmedZoomLevel4");
				} else {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregatedDimmed");
				}
				break;
			// The other possible states are focused states
			default:
				if (oControl._getZoomLevel() === library.ProcessFlowZoomLevel.Four) {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregatedFocusedZoomLevel4");
				} else {
					oRm.addClass("sapSuiteUiCommonsProcessFlowNodeAggregatedFocused");
				}
				break;
		}
	};

	/**
	 * Renders the HTML shadow borders for the given highlighted node, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 * @param {string} border Border type: "top", "bottom", "left", "right"
	 */
	ProcessFlowNodeRenderer._assignShadowClasses = function (oRm, oControl, border) {
		oRm.addClass("shadowedDivCommon");
		switch (border) {
			case ProcessFlowNodeRenderer._constants.top:
				if (oControl._getFoldedCorner()) {
					oRm.addClass("shadowedDivFoldedCornerBorderTop");
				} else {
					oRm.addClass("shadowedDivBorderTop");
				}
				break;
			case ProcessFlowNodeRenderer._constants.right:
				oRm.addClass("shadowedDivBorderRight");
				break;
			case ProcessFlowNodeRenderer._constants.bottom:
				oRm.addClass("shadowedDivBorderBottom");
				break;
			case ProcessFlowNodeRenderer._constants.left:
				if (oControl._getFoldedCorner()) {
					oRm.addClass("shadowedDivFoldedCornerBorderLeft");
				} else {
					oRm.addClass("shadowedDivBorderLeft");
				}
				break;
			case ProcessFlowNodeRenderer._constants.corner:
				if (Device.browser.safari) {
					oRm.addClass("shadowedDivFoldedCornerSafari");
				} else {
					oRm.addClass("shadowedDivFoldedCorner");
				}
				break;
			default:
		}

		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeTitleClasses = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-title");

		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TitleZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Title");
		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeStateClasses = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-state");

		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3State");
		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeIconClasses = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-icon-container");

		switch (oControl.getState()) {
			case library.ProcessFlowNodeState.Positive:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePositive");
				break;
			case library.ProcessFlowNodeState.Negative:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
				break;
			case library.ProcessFlowNodeState.Planned:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
				break;
			case library.ProcessFlowNodeState.Neutral:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNeutral");
				break;
			case library.ProcessFlowNodeState.PlannedNegative:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
				break;
			case library.ProcessFlowNodeState.Critical:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateCritical");
				break;
			default:
		}
		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIconZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateIcon");
		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeStateTextClasses = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-state-text");

		switch (oControl.getState()) {
			case library.ProcessFlowNodeState.Positive:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePositive");
				break;
			case library.ProcessFlowNodeState.Negative:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
				break;
			case library.ProcessFlowNodeState.Planned:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStatePlanned");
				break;
			case library.ProcessFlowNodeState.Neutral:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNeutral");
				break;
			case library.ProcessFlowNodeState.PlannedNegative:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateNegative");
				break;
			case library.ProcessFlowNodeState.Critical:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNodeStateCritical");
				break;
			default:
		}
		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateTextZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3StateText");
		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeText1Classes = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-text1");

		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel1");
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextWithGapZoomLevel2");
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Text");
		oRm.writeClasses();
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
	 */
	ProcessFlowNodeRenderer._assignNodeText2Classes = function (oRm, oControl) {
		oRm.writeAttribute("id", oControl.getId() + "-text2");

		switch (oControl._getZoomLevel()) {
			case library.ProcessFlowZoomLevel.One:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel1");
				break;
			case library.ProcessFlowZoomLevel.Two:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel2");
				break;
			case library.ProcessFlowZoomLevel.Three:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel3");
				break;
			case library.ProcessFlowZoomLevel.Four:
				oRm.addClass("sapSuiteUiCommonsProcessFlowNode3TextZoomLevel4");
				break;
			default:
		}
		oRm.addClass("sapSuiteUiCommonsProcessFlowNode3Text");
		oRm.writeClasses();
	};


	return ProcessFlowNodeRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ProcessFlowNodeRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlowRenderer') ) {
/*
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlowRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.ProcessFlowZoomLevel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlowRenderer",[ 'jquery.sap.global', './ProcessFlowLaneHeader', './ProcessFlowZoomLevel', 'sap/ui/Device' ],
	function(jQuery, ProcessFlowLaneHeader, ProcessFlowZoomLevel, Device) {
	"use strict";

	/**
	 * @class ProcessFlow renderer.
	 * @static
	 */
	var ProcessFlowRenderer = {};

	/* =========================================================== */
	/* Rendering Handling                                         */
	/* =========================================================== */

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render
	 *            output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be
	 *            rendered
	 */
	ProcessFlowRenderer.render = function (oRm, oControl) {
		var sStyleZoomLevelClass = this._getZoomStyleClass(oControl),
			mCalculatedMatrix,
			aLanePositionNodes,
			iLaneNumber,
			oProcessFlowRenderer = ProcessFlowRenderer,
			aConnectionsBetweenNodes,
			oClosedElement;

		oClosedElement = oProcessFlowRenderer._renderBasicStructure(oRm, oControl);
		if (oClosedElement) {
			return;
		}

		try {
			mCalculatedMatrix = oControl._getOrCreateProcessFlow();
			aLanePositionNodes = oControl._getOrCreateLaneMap();
			aConnectionsBetweenNodes = oControl._getConnectionsMap();
		} catch (exc) {
			oControl._handleException(exc);
			return;
		}

		oRm.write("<table");
		oRm.writeAttribute("id", oControl.getId() + "-table");
		//Write ARIA details
		oRm.writeAttributeEscaped("aria-label", oControl._getAriaText());
		oRm.addClass("sapSuiteUiCommonsPF");
		oRm.addClass(jQuery.sap.encodeHTML(sStyleZoomLevelClass));
		oRm.writeClasses();
		oRm.write(">");

		iLaneNumber = Object.keys(aLanePositionNodes).length;
		oProcessFlowRenderer._renderTableHeader(oRm, oControl, aLanePositionNodes, iLaneNumber);
		oProcessFlowRenderer._renderTableBody(oRm, oControl, iLaneNumber, mCalculatedMatrix, aConnectionsBetweenNodes);

		oRm.write("</table>");
		oRm.write("</div>"); //Scroll content.
		oRm.write("</div>"); //Scroll container.
		this._writeCounter(oRm, oControl, "Right");
		oRm.renderControl(oControl._getScrollingArrow("right"));
		oRm.write("</div>"); //ProcessFlow container
	};

	/**
	 * Renders a node header (not merged lane).
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node The current ProcessFlowNode the header needs to be rendered for
	 * @param {Number} counterLaneNumber The counter for lane number check
	 * @param {Number} laneNumber current lane Number
	 */
	ProcessFlowRenderer._renderNormalNodeHeader = function (oRm, oControl, node, counterLaneNumber, laneNumber) {
		oRm.write("<th colspan=\"3\">");
		oRm.renderControl(node);
		oRm.write("</th>");
		if (counterLaneNumber < laneNumber - 1) {
			oRm.write("<th colspan=\"2\">");
			var oLaneHeaderSymbol = ProcessFlowLaneHeader.createNewProcessSymbol(oControl._isHeaderMode());
			//Forward the icon click events from the lane header items to the flow control.
			oLaneHeaderSymbol.attachPress(jQuery.proxy(oControl.ontouchend, oControl));
			oRm.renderControl(oLaneHeaderSymbol);
			oRm.write("</th>");
		}
	};

	/**
	 * Renders a merged node header.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node The current merged ProcessFlowNode the header needs to be rendered for
	 * @param {Number} counterLaneNumber The counter for lane number check
	 * @param {sap.suite.ui.commons.ProcessFlowNodeState[]} laneNodeStates Array containing relevant node states
	 * @param {Boolean} renderProcessSymbol Value which controls rendering of process symbol or not
	 */
	ProcessFlowRenderer._renderMergedNodeHeader = function (oRm, oControl, node, counterLaneNumber, laneNodeStates, renderProcessSymbol) {
		var aNodeStates = oControl._mergeLaneIdNodeStates(laneNodeStates);
		node.setState(aNodeStates);
		counterLaneNumber++;
		var nCollNumber = counterLaneNumber * 3 + (counterLaneNumber - 1) * 2;
		oRm.write("<th colspan=\"" + nCollNumber + "\">");
		oRm.renderControl(node);
		oRm.write("</th>");
		if (renderProcessSymbol) {
			oRm.write("<th colspan=\"2\">");
			var oLaneHeaderSymbol = ProcessFlowLaneHeader.createNewProcessSymbol(oControl._isHeaderMode());
			//Forward the icon click events from the lane header items to the flow control.
			oLaneHeaderSymbol.attachPress(jQuery.proxy(oControl.ontouchend, oControl));
			oRm.renderControl(oLaneHeaderSymbol);
			oRm.write("</th>");
		}
	};

	/**
	 * Renders the node.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node The current ProcessFlowNode which needs to be rendered
	 * @param {Boolean} isTDTagOpen Value which shows if TD tag is open or not
	 * @returns {Boolean} Value which shows if TD tag is open or not
	 */
	ProcessFlowRenderer._renderNode = function (oRm, oControl, node, isTDTagOpen) {
		if (isTDTagOpen) {
			var sNodeId = node.getId() + "-node";
			var oCustomContent = node._getCurrentZoomLevelContent();
			oRm.writeAttribute("id", sNodeId);
			oRm.writeAttribute("tabindex", 0);
			oRm.writeAttributeEscaped("aria-label", node._getAriaText());
			if (oCustomContent) {
				oRm.writeAttributeEscaped("aria-labelledby", sNodeId + " " + oCustomContent.getId());
			}
			oRm.write(">");
			isTDTagOpen = false;
		}
		node._setParentFlow(oControl);
		node._setZoomLevel(oControl.getZoomLevel());
		node._setFoldedCorner(oControl.getFoldedCorners());
		oRm.renderControl(node);
		return isTDTagOpen;
	};

	/**
	 * Renders the connection.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowConnection} connection The current ProcessFlowConnection which needs to be rendered
	 * @param {Boolean} isTDTagOpen Value which shows if TD tag is open or not
	 * @returns {Boolean} Value which shows if TD tag is open or not
	 */
	ProcessFlowRenderer._renderConnection = function (oRm, oControl, connection, isTDTagOpen) {
		if (isTDTagOpen) {
			if (connection.getAggregation("_labels") && connection.getAggregation("_labels").length > 0) {
				oRm.writeAttribute("tabindex", 0);
			}
			oRm.write(">");
			isTDTagOpen = false;
		}
		connection.setZoomLevel(oControl.getZoomLevel());
		oControl.addAggregation("_connections", connection);
		oRm.renderControl(connection);
		return isTDTagOpen;
	};

	/**
	 * Renders the table header.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowNode[]} lanePositionNodes Array containing the related nodes
	 * @param {Number} laneNumber The current lane number
	 */
	ProcessFlowRenderer._renderTableHeader = function (oRm, oControl, lanePositionNodes, laneNumber) {
		var iLanePosition,
			oNode = null,
			oNextNode = null,
			oLaneHeaderSymbol,
			bDrawProcessSymbol;

		oRm.write("<thead");
		oRm.writeAttribute("id", oControl.getId() + "-thead");
		oRm.write(">");

		oRm.write("<tr");
		oRm.addClass("sapSuiteUiCommonsPFHeader");
		oRm.addClass("sapSuiteUiCommonsPFHeaderHidden");
		if (oControl.getShowLabels()) {
			oRm.addClass("sapSuiteUiPFWithLabel");
		}
		oRm.writeClasses();
		oRm.write(">");

		//Reserves space width for start symbol.
		oRm.write("<th></th>");
		iLanePosition = 0;
		while (iLanePosition < laneNumber - 1) {
			//Reserves space width for other parts to be displayed.
			oRm.write("<th></th><th></th><th></th><th></th><th></th>");
			iLanePosition++;
		}

		//Space for the last node.
		oRm.write("<th></th><th></th><th></th>");

		//Reserves space width for end symbol.
		oRm.write("<th></th>");
		oRm.write("</tr>");

		oRm.write("<tr");
		oRm.addClass("sapSuiteUiCommonsPFHeaderRow");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<th>");
		oLaneHeaderSymbol = ProcessFlowLaneHeader.createNewStartSymbol(oControl._isHeaderMode());
		oRm.renderControl(oLaneHeaderSymbol);
		oRm.write("</th>");

		iLanePosition = 0;
		var iArtificialNodesCount = 0;
		var aNodeStates = [];
		var sArtificialNodeSuffix = "1"; //Each following artificial node has one more '1' at the end.
		bDrawProcessSymbol = false;
		while (iLanePosition < (laneNumber - 1)) {
			oNode = lanePositionNodes[iLanePosition];
			oNextNode = lanePositionNodes[iLanePosition + 1];
			if (oNode.getLaneId() + sArtificialNodeSuffix === oNextNode.getLaneId()) {
				//Artificial node identified; increase the counter
				iArtificialNodesCount = iArtificialNodesCount + 1;
				aNodeStates.push(oNode.getState());
			} else if (iArtificialNodesCount === 0) {
				this._renderNormalNodeHeader(oRm, oControl, oNode, iLanePosition, laneNumber);
			} else {
				aNodeStates.push(oNode.getState());
				bDrawProcessSymbol = true;
				this._renderMergedNodeHeader(oRm, oControl, oNode, iArtificialNodesCount, aNodeStates, bDrawProcessSymbol);
				aNodeStates = [];
				iArtificialNodesCount = 0;
			}
			iLanePosition++;
		}
		if (iArtificialNodesCount === 0) {
			if (!oNextNode) {
				oNextNode = lanePositionNodes[0];
			}
			this._renderNormalNodeHeader(oRm, oControl, oNextNode, iLanePosition, laneNumber);
		} else {
			aNodeStates.push(oNextNode.getState());
			bDrawProcessSymbol = false;
			this._renderMergedNodeHeader(oRm, oControl, oNode, iArtificialNodesCount, aNodeStates, bDrawProcessSymbol);
			iArtificialNodesCount = 0;
		}
		oRm.write("<th>");
		oLaneHeaderSymbol = ProcessFlowLaneHeader.createNewEndSymbol(oControl._isHeaderMode());
		oRm.renderControl(oLaneHeaderSymbol);
		oRm.write("</th>");
		oRm.write("</tr>");
		oRm.write("</thead>");
	};

	/**
	 * Renders the table body.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {Number} laneNumber The current lane number
	 * @param {sap.suite.ui.commons.ProcessFlow[]} calculatedMatrix The calculated matrix
	 * @param {Object} connectionsNodes The array of available connectionMap Entries of ProcessFlow
	 */
	ProcessFlowRenderer._renderTableBody = function (oRm, oControl, laneNumber, calculatedMatrix, connectionsNodes) {
		var i,            //index for dimension1
			j,            //index for dimension2
			iMatrixDim1,  //matrix dimension1 length
			iMatrixDim2,  //matrix dimension2 length
			oNode;

		var bSelectedOrHighlightedWasFound = ProcessFlowRenderer._checkIfHighlightedOrSelectedNodesExists(connectionsNodes);

		//Starting the body, which means table (node and connection rendering).
		oRm.write("<tbody>");
		iMatrixDim1 = calculatedMatrix.length;
		//First empty line to make the space between the header and table (see also visual design document).
		if (iMatrixDim1 > 0) {
			oRm.write("<tr>");
			oRm.write("<td");
			oRm.writeAttributeEscaped("colspan", (laneNumber * 5).toString());
			oRm.write(">");
			oRm.write("</tr>");
		}
		i = 0;
		while (i < iMatrixDim1) {
			oRm.write("<tr>");
			oRm.write("<td></td>");

			iMatrixDim2 = calculatedMatrix[i].length;
			j = 0;

			while (j < iMatrixDim2 - 1) {
				oNode = calculatedMatrix[i][j];
				var isTDTagOpen = true; //Indicates if td element tag is open.
				if ((j == 0) || (j % 2)) {
					oRm.write("<td");
				} else {
					oRm.write("<td colspan=\"4\"");
					//Needed by Chrome (cr) in order to render the connections correctly on the
					//aggregated nodes.
					if (Device.browser.chrome) {
						oRm.addClass("sapSuiteUiCommonsProcessFlowZIndexForConnectors");
						oRm.writeClasses();
					}
				}
				if (oNode) {
					if (oNode.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						isTDTagOpen = ProcessFlowRenderer._renderNode(oRm, oControl, oNode, isTDTagOpen);
					} else {
						oNode._setShowLabels(oControl.getShowLabels());
						ProcessFlowRenderer._setLabelsInConnection(calculatedMatrix, connectionsNodes, oNode, { row: i, column: j }, oControl, bSelectedOrHighlightedWasFound);
						isTDTagOpen = ProcessFlowRenderer._renderConnection(oRm, oControl, oNode, isTDTagOpen);
					}
				}
				if (isTDTagOpen) {
					oRm.write(">");
				}
				oRm.write("</td>");
				j++;
			}

			//The last space after a node + space under the end symbol.
			oRm.write("<td></td>");
			oRm.write("<td></td>");
			oRm.write("</tr>");
			i++;
		}

		oRm.write("</tbody>");
	};

	/**
	 * Renders the basic structure.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @returns {Boolean} Value which shows if controls have been closed or not
	 */
	ProcessFlowRenderer._renderBasicStructure = function (oRm, oControl) {
		//Write the HTML into the render manager.
		oRm.write("<div"); // ProcessFlow container
		oRm.writeAttribute("aria-label", "process flow");
		oRm.writeControlData(oControl);
		oRm.addClass("sapSuiteUiPFContainer");
		if (oControl._arrowScrollable) {
			oRm.addClass("sapPFHScrollable");
			if (oControl._bPreviousScrollForward) {
				oRm.addClass("sapPFHScrollForward");
			} else {
				oRm.addClass("sapPFHNoScrollForward");
			}
			if (oControl._bPreviousScrollBack) {
				oRm.addClass("sapPFHScrollBack");
			} else {
				oRm.addClass("sapPFHNoScrollBack");
			}
		} else {
			oRm.addClass("sapPFHNotScrollable");
		}
		oRm.writeClasses();
		oRm.write(">");

		this._writeCounter(oRm, oControl, "Left");
		oRm.renderControl(oControl._getScrollingArrow("left"));

		oRm.write("<div"); //Scroll container.
		oRm.writeAttribute("id", oControl.getId() + "-scrollContainer");
		oRm.addClass("sapSuiteUiScrollContainerPF");
		oRm.addClass("sapSuiteUiDefaultCursorPF");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("<div"); //Scroll content.
		oRm.writeAttribute("id", oControl.getId() + "-scroll-content");
		oRm.writeAttribute("tabindex", 0);
		oRm.write(">");

		//Nothing to render if there are no lanes.
		if (!oControl.getLanes() || oControl.getLanes().length == 0) {
			oRm.write("</div>"); //Scroll content.
			oRm.write("</div>"); //Scroll container.
			oRm.write("</div>"); //Whole control.
			return true;
		}
		return false;
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Returns the style class for selected zoom level.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @returns {String} Style class for zoom level
	 */
	ProcessFlowRenderer._getZoomStyleClass = function (oControl) {
		switch (oControl.getZoomLevel()) {
			case ProcessFlowZoomLevel.One:
				return "sapSuiteUiCommonsPFZoomLevel1";
			case ProcessFlowZoomLevel.Two:
				return "sapSuiteUiCommonsPFZoomLevel2";
			case ProcessFlowZoomLevel.Three:
				return "sapSuiteUiCommonsPFZoomLevel3";
			case ProcessFlowZoomLevel.Four:
				return "sapSuiteUiCommonsPFZoomLevel4";
			default:
				break;
		}
	};

	/**
	 * Sets the labels to the current connections based on the calculated Matrix and the connectionsMap.
	 * This is required since connections are created dynamically by the control but they can be configured by the children
	 * array in the ProcessFlowNode.
	 *
	 * @private
	 * @param {Object} calculatedMatrix The calculated matrix of the current ProcessFlow
	 * @param {Object[]} connectionsBetweenNodes The array of available connectionMap Entries of ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowConnection} connection Current connection object the labels will be added to
	 * @param {Object} positionOfConnection Position of current connection object in calculated matrix
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl ProcessFlow to render, used for event handling
	 * @param {boolean} selectedOrHighlightedWasFound State of found selected or highlighted
	 */
	ProcessFlowRenderer._setLabelsInConnection = function (calculatedMatrix, connectionsBetweenNodes, connection, positionOfConnection, oControl, selectedOrHighlightedWasFound) {
		//Iterate over connection maps
		for (var i = 0; i < connectionsBetweenNodes.length; i++) {
			var oConnectionEntry = connectionsBetweenNodes[i];
			if (oConnectionEntry && oConnectionEntry.label) {
				//Iterates over connectionParts
				for (var j = 0; j < oConnectionEntry.connectionParts.length; j++) {
					var connectionPart = oConnectionEntry.connectionParts[j];
					//Selects the connection part to render from the current oConnectionEntry
					if (connectionPart.x === positionOfConnection.column &&
						connectionPart.y === positionOfConnection.row) {
						//Next node (right) is target node of current oConnectionEntry --> Means last connectionPart in the current connection and correct position for label.
						if (calculatedMatrix[positionOfConnection.row][positionOfConnection.column + 1] &&
							calculatedMatrix[positionOfConnection.row][positionOfConnection.column + 1].getMetadata().getName() ===  "sap.suite.ui.commons.ProcessFlowNode" &&
							calculatedMatrix[positionOfConnection.row][positionOfConnection.column + 1].getNodeId() === oConnectionEntry.targetNode.getNodeId()) {
							ProcessFlowRenderer._setLineTypeInLabel(oConnectionEntry, selectedOrHighlightedWasFound);
							if (oControl._bHighlightedMode && !oConnectionEntry.label._getHighlighted()) {
								oConnectionEntry.label.setEnabled(false);
							}
							if (oConnectionEntry.label.getEnabled()) {
								if (oConnectionEntry.label.hasListeners("press")) {
									oConnectionEntry.label.detachEvent("press", oControl._handleLabelClick, oControl);
								}
								oConnectionEntry.label.attachPress(oControl._handleLabelClick, oControl);
							}
							connection.addAggregation("_labels", oConnectionEntry.label, true);
						}
					}
				}
			}
		}
	};

	/**
	 * Sets the selected and highlighted information on Label.
	 *
	 * @private
	 * @param {Object[]} connectionEntries The array of available connectionMap Entries of ProcessFlow
	 * @param {boolean} selectedOrHighlightedWasFound True if selected or highlighted information on label
	 */
	ProcessFlowRenderer._setLineTypeInLabel = function (connectionEntries, selectedOrHighlightedWasFound) {
		var bCurrentLabelIsSelected = false,
			oTargetNode,
			bLabelNeedsToBeHighlighted = false,
			bCurrentLabelIsHighlighted = false;

		if (connectionEntries.sourceNode.getSelected() && connectionEntries.targetNode.getSelected()) {
			bCurrentLabelIsSelected = true;
			connectionEntries.label._setSelected(true);
		} else {
			connectionEntries.label._setSelected(false);
		}
		// If the target node and any of the source nodes are highlighted, the label needs to be highlighted as well
		oTargetNode = connectionEntries.targetNode;
		if (oTargetNode.getHighlighted()) {
			var aParentsOfTargetNode = oTargetNode.getParents(),
				oSourceNode;
			for (var i = 0; i < aParentsOfTargetNode.length; i++) {
				oSourceNode = sap.ui.getCore().byId(aParentsOfTargetNode[i]);
				if (oSourceNode.getHighlighted()) {
					bLabelNeedsToBeHighlighted = true;
					break;
				}
			}
		}
		if (bLabelNeedsToBeHighlighted) {
			bCurrentLabelIsHighlighted = true;
			connectionEntries.label._setHighlighted(true);
		} else {
			connectionEntries.label._setHighlighted(false);
		}
		if (selectedOrHighlightedWasFound && !bCurrentLabelIsSelected && !bCurrentLabelIsHighlighted) {
			connectionEntries.label._setDimmed(true);
		} else {
			connectionEntries.label._setDimmed(false);
		}
	};

	/**
	 * Checks if a selected or a highlighted node exists in the current process flow.
	 *
	 * @private
	 * @param {Object[]} connectionsBetweenNodes The array of available connectionMap Entries of ProcessFlow
	 * @returns {Boolean} true if a highlighted or a selected node was found, false if no highlighted or selected node was found
	 */
	ProcessFlowRenderer._checkIfHighlightedOrSelectedNodesExists = function(connectionsBetweenNodes) {
		var bSelectedOrHighlightedWasFound = false;
		for (var i = 0; i < connectionsBetweenNodes.length; i++) {
			var oConnectionMapEntry = connectionsBetweenNodes[i];
			if (oConnectionMapEntry.label) {
				if (oConnectionMapEntry.sourceNode.getSelected() && oConnectionMapEntry.targetNode.getSelected() ||
					oConnectionMapEntry.sourceNode.getHighlighted() && oConnectionMapEntry.targetNode.getHighlighted()) {
					bSelectedOrHighlightedWasFound = true;
				}
			}
		}
		return bSelectedOrHighlightedWasFound;
	};

	/**
	 * Writes the counter.
	 *
	 * @private
	 * @param {sap.ui.core.RenderManager} oRm The RenderManager that can be used for writing to the render output buffer
	 * @param {sap.suite.ui.commons.ProcessFlow} oControl The current ProcessFlow
	 * @param {String} direction Contains the direction (e.g. Left/Right)
	 */
	ProcessFlowRenderer._writeCounter = function (oRm, oControl, direction) {
		oRm.write("<span");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-counter" + direction);
		oRm.addClass("suiteUiPFHCounter");
		oRm.addClass(jQuery.sap.encodeHTML("suiteUiPFHCounter" + direction));
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped("0");
		oRm.write("</span>");
	};


	return ProcessFlowRenderer;

}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/ProcessFlowRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ThreePanelThingViewer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ThreePanelThingViewer.
jQuery.sap.declare('sap.suite.ui.commons.ThreePanelThingViewer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.ux3.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.VerticalNavigationBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.ux3.ThingViewer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ThreePanelThingViewer",[ 'jquery.sap.global', './library', 'sap/ui/ux3/library', 'sap/ui/commons/library', './VerticalNavigationBar', 'sap/ui/ux3/ThingViewer', 'sap/ui/commons/Button',
				'sap/suite/ui/commons/ThreePanelThingViewerRenderer' ],
	function(jQuery, library, Ux3Library, CommonsLibrary, VerticalNavigationBar, ThingViewer, Button, ThreePanelThingViewerRenderer) {
	"use strict";

	/**
	 * Constructor for a new ThreePanelThingViewer.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This control extends the sap.ui.ux3.ThingViewer control. The first panel can display a thing icon, a title, the Action Menu button, up to two rows of text descriptions (the first is wrapped, the second is truncated), vertical navigation bar (sap.suite.ui.commons.VerticalNavigationBar), and an image aka key visual. The second panel displays the header area as a vertical panel containing ThingGroup objects. The third panel is a main content area designed to display ThingGroup objects.
	 * @extends sap.ui.ux3.ThingViewer
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.32.
	 * Deprecated. Object page should be used instead.
	 * @alias sap.suite.ui.commons.ThreePanelThingViewer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ThreePanelThingViewer = ThingViewer.extend("sap.suite.ui.commons.ThreePanelThingViewer", /** @lends sap.suite.ui.commons.ThreePanelThingViewer.prototype */ {
		metadata: {
			deprecated: true,
			library: "sap.suite.ui.commons",
			properties: {
				/**
				 * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
				 */
				logo: {type: "sap.ui.core.URI", group: "Misc", defaultValue: null},

				/**
				 * Shows or hides a middle panel named Header that contains general information.
				 */
				showHeader: {type: "boolean", group: "Misc", defaultValue: null},

				/**
				 * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default value is "244px".
				 */
				sidebarWidth: {type: "sap.ui.core.CSSSize", group: "Misc", defaultValue: '244px'}
			},
			aggregations: {
				/**
				 * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as a popup when a user chooses a button in the top title section of the navigation panel.
				 */
				menuContent: {type: "sap.ui.commons.Link", multiple: true, singularName: "menuContent"}
			}
		}
	});

	ThreePanelThingViewer.prototype.init = function() {
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		this._oNavBar = new VerticalNavigationBar();
		this.setAggregation("navBar", this._oNavBar);

		this._oNavBar.attachSelect(function(oControlEvent) {
			var item = oControlEvent.getParameters().item;
			if (this.fireFacetSelected({id: item.getId(), key: item.getKey(), item: item})) {
				this.setSelectedFacet(item);
			} else {
				oControlEvent.preventDefault();
			}
		}, this);

		this._iSelectedMenuItem = 0;
		this._oMenuButton = new Button({
			id: this.getId() + "-menu-button",
			tooltip: this._rb.getText("THREEPANELTHINGVIEWER_BUTTON_MENU_TOOLTIP"),
			lite: true,
			press: [this._toggleMenuPopup, this]
		});
		this._oMenuButton.addStyleClass("sapSuiteTvTitleMb");
		this.fAnyEventHandlerProxy = jQuery.proxy(this.onAnyEvent, this);
	};

	ThreePanelThingViewer.prototype.exit = function() {
		this._oMenuButton.destroy();
		jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
	};

	ThreePanelThingViewer.prototype.onAfterRendering = function() {
		this._bMenuOpened = false;
		this._updateMenuPopup();
		this._toggleHeaderContent();
	};

	ThreePanelThingViewer.prototype.selectDefaultFacet = function() {
		this._selectDefault();
		return this;
	};

	ThreePanelThingViewer.prototype._toggleMenuPopup = function() {
		jQuery.sap.byId(this.getId() + "-menu-popup").toggle();
		this._bMenuOpened = !this._bMenuOpened;

		if (this._bMenuOpened) {
			jQuery.sap.bindAnyEvent(this.fAnyEventHandlerProxy);
			this.getMenuContent()[0].focus();
			this._iSelectedMenuItem = 0;
		} else {
			jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
		}
	};

	ThreePanelThingViewer.prototype._updateMenuPopup = function() {
		var iHeaderWidth = jQuery.sap.byId(this.getId() + "-header").width();
		var oMenuPopup = jQuery.sap.byId(this.getId() + "-menu-popup");
		var sStyle = sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left";
		var iSize = this.getMenuContent().length;

		oMenuPopup.css(sStyle, (iHeaderWidth - 22) + "px");
		oMenuPopup.children().each(function(index) {
			var $this = jQuery(this);
			$this.attr("tabindex", "-1");
			$this.attr("role", "menuitem");
			$this.attr("aria-posinset", index + 1);
			$this.attr("aria-setsize", iSize);
		});
	};

	ThreePanelThingViewer.prototype._rerenderFacetContent = function() {
		var $content = jQuery.sap.byId(this.getId() + "-facetContent");
		if ($content.length > 0) {
			var oRm = sap.ui.getCore().createRenderManager();
			ThreePanelThingViewerRenderer.renderFacetContent(oRm, this);
			oRm.flush($content[0]);
			oRm.destroy();
			this._resize = false;
			this._setTriggerValue();
			this._onresize();
		}
	};

	ThreePanelThingViewer.prototype._rerenderHeader = function() {
		var $content = jQuery.sap.byId(this.getId() + "-header");
		if ($content.length > 0) {
			var oRm = sap.ui.getCore().createRenderManager();
			ThreePanelThingViewerRenderer.renderHeader(oRm, this);
			oRm.flush($content[0]);
			oRm.destroy();
		}
	};

	ThreePanelThingViewer.prototype._rerenderHeaderContent = function() {
		var $content = jQuery.sap.byId(this.getId() + "-headerContent");
		if ($content.length > 0) {
			var oRm = sap.ui.getCore().createRenderManager();
			ThreePanelThingViewerRenderer.renderHeaderContent(oRm, this);
			oRm.flush($content[0]);
			oRm.destroy();
		}
	};

	ThreePanelThingViewer.prototype._toggleHeaderContent = function() {
		var oContent = jQuery.sap.byId(this.getId() + "-headerContent");
		if (this.getShowHeader()) {
			oContent.show();
		} else {
			oContent.hide();
		}
	};

	ThreePanelThingViewer.prototype.onAnyEvent = function(oEvent) {
		if (this._bMenuOpened && (oEvent.type === "mousedown" || oEvent.type === "focusin")) {
			var oSource = oEvent.target;
			var oDomRef = jQuery.sap.domById(this.getId() + "-menu-popup");

			if (!jQuery.sap.containsOrEquals(oDomRef, oSource) || oSource.tagName === "BODY") {
				this._toggleMenuPopup();
			}
		}
	};

	ThreePanelThingViewer.prototype.onsapescape = function() {
		if (this._bMenuOpened) {
			this._toggleMenuPopup();
			this._oMenuButton.focus();
		}
	};

	ThreePanelThingViewer.prototype.onsapnext = function(oEvent) {
		if (this._bMenuOpened) {
			var aMenuContent = this.getMenuContent();
			this._iSelectedMenuItem++;

			if (this._iSelectedMenuItem >= aMenuContent.length) {
				this._iSelectedMenuItem = 0;
			}

			aMenuContent[this._iSelectedMenuItem].focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	ThreePanelThingViewer.prototype.onsapprevious = function(oEvent) {
		if (this._bMenuOpened) {
			var aMenuContent = this.getMenuContent();
			this._iSelectedMenuItem--;

			if (this._iSelectedMenuItem < 0) {
				this._iSelectedMenuItem = aMenuContent.length - 1;
			}

			aMenuContent[this._iSelectedMenuItem].focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	};

	ThreePanelThingViewer.prototype.setShowHeader = function(bShowHeader) {
		this.setProperty("showHeader", bShowHeader, true);
		this._toggleHeaderContent();
		return this;
	};

	return ThreePanelThingViewer;
});
}; // end of sap/suite/ui/commons/ThreePanelThingViewer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineFilterListItem') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.TimelineFilterListItem.
jQuery.sap.declare('sap.suite.ui.commons.TimelineFilterListItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/TimelineFilterListItem",['./library','sap/ui/core/Control'],
	function(library, Control) {
	"use strict";

	/**
	 * Constructor for a new TimelineFilterListItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Provides a filter criteria list for the items filter in the Timeline control.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.TimelineFilterListItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TimelineFilterListItem = Control.extend("sap.suite.ui.commons.TimelineFilterListItem", /** @lends sap.suite.ui.commons.TimelineFilterListItem.prototype */ { metadata : {
		library : "sap.suite.ui.commons",
		properties : {
			/**
			 * A key for a filter criterion. Each filter criterion must have a unique key.
			 */
			key : {type : "string", group : "Data", defaultValue : null},

			/**
			 * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
			 */
			text : {type : "string", group : "Misc", defaultValue : null}
		}
	}});

	return TimelineFilterListItem;
});

}; // end of sap/suite/ui/commons/TimelineFilterListItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineItem') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.TimelineItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.util.DateUtils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/TimelineItem",[
	"jquery.sap.global",
	"sap/ui/core/Control",
	"sap/m/Text",
	"sap/m/Toolbar",
	"sap/m/ToolbarDesign",
	"sap/m/Link",
	"sap/m/TextArea",
	"sap/m/Popover",
	"sap/m/PlacementType",
	"sap/m/ToolbarSpacer",
	"sap/m/Button",
	"sap/ui/Device",
	"sap/suite/ui/commons/util/ManagedObjectRegister",
	"sap/suite/ui/commons/util/DateUtils",
	"sap/ui/core/Icon",
	"sap/m/library"
], function (jQuery, Control, Text, Toolbar, ToolbarDesign, Link, TextArea, Popover, PlacementType, ToolbarSpacer, Button, Device, ManagedObjectRegister, DateUtils, Icon, MobileLibrary) {
	"use strict";

	/**
	 * Constructor for a new TimelineItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * An entry posted on the timeline.
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @alias sap.suite.ui.commons.TimelineItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TimelineItem = Control.extend("sap.suite.ui.commons.TimelineItem", /** @lends sap.suite.ui.commons.TimelineItem.prototype */ { metadata : {
		library : "sap.suite.ui.commons",
		properties : {

			/**
			 * Date and time value of the timeline post. This value must be in one of the following formats:
			 * <ul>
			 * <li> A valid instance of the <code>Date</code> object. </li>
			 * <li> An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds. </li>
			 * <li> A string with an integer representing Unix time in milliseconds. </li>
			 * <li> A string that contains <code>Date([number])</code>, where <code>[number]</code>
			 * represents Unix time in milliseconds. </li>
			 * </ul>
			 * If this property has any other format, the timeline will try to parse it using <code>Date.parse</code>.
			 * It is not recommended to use this functionality, as different web browsers implement this function differently,
			 * which may lead to unpredictable behavior.
			 */
			dateTime : {type : "any", group : "Misc", defaultValue : null},

			/**
			 * Text for the items filter name. This text will be used as the name of the items filter in the
			 * filter popover.
			 */
			filterValue : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Icon on the timeline axis that corresponds to the point in time when the entry was posted.
			 * Posts can be displayed in chronological or reverse chronological order.
			 */
			icon : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Tooltip for an icon displayed on the timeline axis.
			 */
			iconTooltip : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * The expand and collapse feature is set by default and uses 300 characters on mobile devices
			 * and 500 characters on desktop computers as limits. Based on these values, the text of the timeline post
			 * is collapsed once it reaches these character limits. In this case, only the specified number of characters
			 * is displayed. By clicking the More link, the entire text can be displayed. Clicking Less collapses the text.
			 * The application can set the value according to its needs.
			 */
			maxCharacters : {type : "int", group : "Behavior", defaultValue : null},

			/**
			 * Number of replies to a timeline post.
			 */
			replyCount : {type : "int", group : "Misc", defaultValue : null},

			/**
			 * Indicates the post status. The status affects the post's icon color. Supported values:
			 * <ul>
			 * <li> <code>Information</code> </li>
			 * <li> <code>Success</code> </li>
			 * <li> <code>Warning</code> </li>
			 * <li> <code>Error</code> </li>
			 * </ul>
			 */
			status : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Text shown in the post title right after the user name.
			 */
			title : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Text shown inside the timeline post.
			 */
			text : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * User name shown in the post title.
			 */
			userName : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * Makes the user name clickable. Clicking the name fires a userNameClicked event.
			 */
			userNameClickable : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Picture shown next to the user name.
			 */
			userPicture : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
		},
		defaultAggregation : "embeddedControl",
		aggregations : {

			/**
			 * Custom actions displayed as links in the links section of the post. The key must be unique
			 * for each link. Values are used as labels for the link. When a user clicks the link, a customActionClicked
			 * event is fired.
			 */
			customAction : {type : "sap.ui.core.CustomData", multiple : true, singularName : "customAction"},

			/**
			 * A UI5 control that acts as a custom reply dialog. It is used instead of the default reply dialog
			 * that is displayed when the user clicks the Reply link. Supports UI5 controls that have an openBy method,
			 * for example, the Popup control.
			 */
			customReply : {type : "sap.ui.core.Control", multiple : false},

			/**
			 * A UI5 control that is displayed as a timeline post's content instead of the default content (text).
			 * Examples of such a control include the Panel control and the List control.
			 */
			embeddedControl : {type : "sap.ui.core.Control", multiple : false},

			/**
			 * A list of replies related to the post.
			 */
			replyList : {type : "sap.m.List", multiple : false},

			/**
			 * Suggested posts.<br>
			 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
			 * @deprecated Since version 1.46.0.
			 * Use the Group Feed Component instead.
			 */
			suggestionItems : {type : "sap.m.StandardListItem", multiple : true, singularName : "suggestionItem", deprecated: true}
		},
		events : {

			/**
			 * This event is fired when a user name is clicked in the post's header section.
			 */
			userNameClicked : {
				parameters : {

					/**
					 * A clickable UI element representing the user name.
					 */
					uiElement : {type : "sap.ui.core.Control"}
				}
			},

			/**
			 * This event is fired when the Reply button is clicked in the links section of a timeline post.
			 */
			replyPost : {
				parameters : {

					/**
					 * Content of the reply to the post.
					 */
					value : {type : "string"}
				}
			},

			/**
			 * This event is fired when the Reply link is clicked to open the reply dialog.
			 */
			replyListOpen : {},

			/**
			 * Fired when custom action link is clicked.
			 */
			customActionClicked : {
				parameters : {

					/**
					 * Value of the custom action.
					 */
					value : {type : "string"},

					/**
					 * Key of the custom action.
					 */
					key : {type : "string"},

					/**
					 * Link on which the user clicked.
					 */
					linkObj : {type : "sap.m.Link"}
				}
			},

			/**
			 * This event is fired when the user types text into the search field and showSuggestion
			 * is set to true. Changing the suggestItems aggregation will show the suggestions inside a popup.<br>
			 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
			 * @since 1.28.1
			 * @deprecated Since version 1.46.0.
			 * Use the Group Feed Component instead.
			 */
			suggest : {deprecated: true,
				parameters : {

					/**
					 * The current value that has been typed into the search field.
					 */
					suggestValue : {type : "string"}
				}
			},

			/**
			 * This event is fired when a suggested post is selected in the search suggestions popup. This event
			 * is fired only when the showSuggestion propery is set to <code>true</code> and there are
			 * suggested posts shown in the suggestions popup.<br>
			 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
			 * @since 1.28.1
			 * @deprecated Since version 1.46.0.
			 * Use the Group Feed Component instead.
			 */
			suggestionItemSelected : {deprecated: true,
				parameters : {

					/**
					 * The post selected in the suggestions popup.
					 */
					selectedItem : {type : "sap.ui.core.Item"}
				}
			}
		}
	}});

	var resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons"),
		STATUS_CLASS_MAP = {
			"Warning": "sapSuiteUiCommonsTimelineStatusWarning",
			"Error": "sapSuiteUiCommonsTimelineStatusError",
			"Success": "sapSuiteUiCommonsTimelineStatusSuccess",
			"Information": "sapSuiteUiCommonsTimelineStatusInformation"
		};

	TimelineItem.prototype.init = function () {
		this._customReply = false;
		this._objects = new ManagedObjectRegister();

		this._nMaxCharactersMobile = 500;
		this._nMaxCharactersDesktop = 800;

		this._sTextShowMore = resBundle.getText("TIMELINE_TEXT_SHOW_MORE");

		this._registerControls();
		this._registerPopup();

		//notch orientation
		this._orientation = "V";
	};

	/* =========================================================== */
	/* Public API */
	/* =========================================================== */
	/**
	 * Set custom message to display
	 * @param {string} msg Message text
	 */
	TimelineItem.prototype.setCustomMessage = function (msg) {
		this._objects.getInfoText().setText(msg);
		this._objects.getInfoBar().setVisible(msg && msg.length > 0);
		this.invalidate();
	};

	/* =========================================================== */
	/* Private methods*/
	/* =========================================================== */
	/**
	 * Override to fix scrollbar moving after new data are loaded
	 * @private
	 */
	TimelineItem.prototype.applyFocusInfo = function () {
		this.focus();

		// scroll to visible position when scrolling not to focused item - see _moveScrollBar
		this.getParent()._moveScrollBar(true);
	};

	/**
	 * Focus handling
	 * @returns {HTMLElement} DOM Reference
	 * @private
	 */
	TimelineItem.prototype.getFocusDomRef = function () {
		return this.$("outline")[0];
	};

	/**
	 * Trigger after reply is pressed
	 * @private
	 */
	TimelineItem.prototype._replyPost = function () {
		var replyText = this._objects.getReplyInputArea().getValue();
		this.fireReplyPost({value: replyText});
	};

	/**
	 * Register popup window for complete message
	 * @private
	 */
	TimelineItem.prototype._registerPopup = function () {
		var that = this; //eslint-disable-line

		// popover content
		this._objects.register("fullText", function () {
			var oText = new Text(that.getId() + "-fullText", {
				text: that.getText()
			});
			oText.addStyleClass("sapSuiteUiCommonsTimelineItemPopoverText");
			return oText;
		});

		this._objects.register("fullTextPopover", function () {
			var oPopover = new Popover({
				placement: PlacementType.Bottom,
				showArrow: false,
				showHeader: false,
				contentMinWidth: '300px',
				contentWidth: '450px',
				resizable: true,
				content: [that._objects.getFullText()]
			});

			oPopover.addStyleClass("sapSuiteUiCommonsTimelineItemShowMorePopover");
			return oPopover;
		});
	};

	/**
	 * Opens reply dialog after reply pressed
	 * @private
	 */
	TimelineItem.prototype._openReplyDialog = function () {
		if (this._customReply) {
			this.getCustomReply().openBy(this._objects.getReplyLink());
			this.fireReplyListOpen();
		} else {
			this.fireReplyListOpen();
			this._objects.getReplyInputArea().setValue('');
			this._oldReplyInputArea = '';

			this._list = this.getReplyList();

			if (this._list !== null) {
				// we want to prevent rerender timeline item so we need to remove this aggregation from it first with 'suppressinvalidation' true
				// otherwise addContent on popover would do it when switching parents (and you can't specify whether you want invalidate)
				this.setAggregation("replyList", null, true);
				this._objects.getReplyPop().addContent(this._list);
			}
			this._objects.getReplyPop().addContent(this._objects.getReplyInputArea());
			this._objects.getReplyPop().openBy(this._objects.getReplyLink());
		}
	};

	/**
	 * Call parent function if there is any parent defined. Usually timeline, but there may be cases when item is standalone.
	 * @returns {*} Return value of parent function
	 * @private
	 */
	TimelineItem.prototype._callParentFn = function () {
		var args = Array.prototype.slice.call(arguments),
			fnName = args.shift(),
			parent = this.getParent();
		if (parent && (typeof parent[fnName] === "function")) {
			return parent[fnName].apply(parent, args);
		}
	};

	/**
	 * Return correct icon for grouping based on the settings
	 * @returns {string} Icon name
	 * @private
	 */
	TimelineItem.prototype._getCorrectGroupIcon = function () {
		var sIcon = "",
			fnIsDoubleSided = function () {
				return this.getParent() && this.getParent()._renderDblSided;
			}.bind(this),
			bIsGroupCollapsed = this._isGroupCollapsed();

		if (this._orientation === "H") {
			sIcon = "navigation-right-arrow";
			if (!bIsGroupCollapsed) {
				sIcon = this._callParentFn("_isLeftAlignment") || fnIsDoubleSided() ? "navigation-down-arrow" : "navigation-up-arrow";
			}
		} else {
			sIcon = "navigation-down-arrow";
			if (bIsGroupCollapsed) {
				sIcon = this._callParentFn("_isLeftAlignment") || fnIsDoubleSided() ? "navigation-right-arrow" : "navigation-left-arrow";
			}
		}

		return sIcon;
	};

	/**
	 * @param {jQuery.Event} oEvent The original event object
	 * @private
	 */
	TimelineItem.prototype.onclick = function (oEvent) {
		var that = this; //eslint-disable-line
		// this check whether group header was clicked
		if (jQuery.sap.containsOrEquals(this.$("outline").get(0), oEvent.target)) {
			if (this._isGroupHeader) {
				that._performExpandCollapse(that._groupID);
			}
		}
	};


	/**
	 * Performs expand or collapse
	 * @param {string} sGroupID Group for action
	 * @private
	 * @returns {Promise} A new promise
	 */
	TimelineItem.prototype._performExpandCollapse = function (sGroupID) {
		var bGroupClassSet = false,
			bExpand = this._isGroupCollapsed(sGroupID);
		var fnSetHeightClass = function ($item, $corrector) {
				var $line = $item.find(".sapSuiteUiCommonsTimelineItemBarV"),
					sGroup, bGroupExpanded;
				if ($corrector.get(0)) {
					sGroup = $corrector.attr("groupId");
					bGroupExpanded = !this._isGroupCollapsed(sGroup);
					if (bGroupExpanded) {
						$line.addClass("sapSuiteUiCommonsTimelineGroupNextExpanded");
					} else {
						$line.removeClass("sapSuiteUiCommonsTimelineGroupNextExpanded");
					}
				}
			}.bind(this),
			fnSetGroupClass = function () {
				var oIcon, $this, bIsCollapsed;
				if (!bGroupClassSet) {
					oIcon = this._objects.getGroupCollapseIcon && this._objects.getGroupCollapseIcon();
					$this = this.$();
					bIsCollapsed = this._isGroupCollapsed();

					if (!bIsCollapsed) {
						$this.removeClass("sapSuiteUiCommonsTimelineGroupCollapsed");
						$this.addClass("sapSuiteUiCommonsTimelineGroupExpanded");
					} else {
						$this.addClass("sapSuiteUiCommonsTimelineGroupCollapsed");
						$this.removeClass("sapSuiteUiCommonsTimelineGroupExpanded");
					}
					oIcon.setSrc(this._getCorrectGroupIcon());
					bGroupClassSet = true;
				}
			}.bind(this),
			fnSetGroupFlag = function () {
				if (this.getParent()) {
					this.getParent()._collapsedGroups[sGroupID] = !bExpand;
				}
			}.bind(this),
			$li = this.$(),
			that = this, //eslint-disable-line
			$parent = $li.parent(),
			$bar, $next, $prev, $lastChild, oExpandResult;

		fnSetGroupFlag();

		// setup line classes
		if (this._orientation === "H") {
			$bar = this.$("line");
		} else {
			$bar = $li.find(".sapSuiteUiCommonsTimelineGroupHeaderBarWrapper");
			$next = $parent.next().children("li").first();
			$prev = $parent.prev().children(":visible:last");

			// fix previous item based on whether current item is expanded
			if ($prev.get(0)) {
				fnSetHeightClass($prev, $li);
			}

			if (bExpand) {
				// fix last item in case next group was changed while this one was closed (so it was not affected
				// by collapsing next group)
				$lastChild = $parent.children().last();
				fnSetHeightClass($lastChild, $next);
			} else {
				// first fix current item based on whether next item is expanded group
				fnSetHeightClass($li, $next);
			}
		}

		// expanded groups don't have visible lines
		if (bExpand) {
			$bar.hide();
		} else {
			$bar.show();
		}
		$li.attr("aria-expanded", !!bExpand);

		// nicer rendering - for collapsing horizontal we want to change group classes after animation is done
		if (this._orientation !== "H" || bExpand) {
			fnSetGroupClass();
		}

		oExpandResult = this._callParentFn("_performExpandCollapse", sGroupID, bExpand, this);
		if (oExpandResult) {
			return new Promise(function (resolve, reject) {
				oExpandResult.then(function () {
					fnSetGroupClass();
					that._callParentFn("_performUiChanges");
					resolve();
				});
			});
		}
	};

	/**
	 * Return class if there is any status bound to item
	 * @returns {string} status color class
	 * @private
	 */
	TimelineItem.prototype._getStatusColorClass = function () {
		var status = this.getStatus();
		return STATUS_CLASS_MAP[status] || "";
	};

	/**
	 * Return icon displayed in timeline
	 * @returns {object} icon
	 * @private
	 */
	TimelineItem.prototype._getLineIcon = function () {
		var that = this, //eslint-disable-line
			oIcon;
		this._objects.register("imageControl", function () {
			var src = "sap-icon://circle-task-2",
				isGroupHeader = that.getText() === "GroupHeader";

			if (!isGroupHeader) {
				src = that.getIcon() ? that.getIcon() : "activity-items";
			}

			oIcon = new Icon(that.getId() + '-icon', {
				src: src,
				tooltip: that.getIconTooltip()
			});

			oIcon.addStyleClass("sapSuiteUiCommonsTimelineBarIcon");

			return oIcon;
		});

		return this._objects.getImageControl();
	};

	/**
	 * Indicates whether this item is in collapsed group
	 * @param {string} sId Group id to test.
	 * @private
	 * @returns {boolean} Whether or not the given group is collapsed
	 */
	TimelineItem.prototype._isGroupCollapsed = function (sId) {
		var oParent = this.getParent();
		sId = sId || this._groupID;

		return oParent && oParent._collapsedGroups && oParent._collapsedGroups[sId];
	};

	/**
	 * The first this._nMaxCollapsedLength characters of the text are shown in the collapsed form, the text string ends up
	 * with a complete word, the text string contains at least one word
	 *
	 * @private
	 * @returns {string} Collapsed text
	 */
	TimelineItem.prototype._getCollapsedText = function () {
		var sShortText = this.getText().substring(0, this._nMaxCollapsedLength);
		var nLastSpace = sShortText.lastIndexOf(" ");
		if (nLastSpace > 0) {
			this._sShortText = sShortText.substr(0, nLastSpace);
		} else {
			this._sShortText = sShortText;
		}
		return this._sShortText;
	};

	/**
	 * Opens popover with whole item's text
	 * @param {object} oShowMoreBtn Show more button control
	 * @private
	 */
	TimelineItem.prototype._toggleTextExpanded = function (oShowMoreBtn) {
		var that = this, //eslint-disable-line
			$button = oShowMoreBtn.oSource.$(),
			$text = jQuery("#" + this.getId() + "-realtext"),
			buttonHeight = $button.height(),
			topButton = $button.position().top,
			topText = $text.parent().position().top,
			$parent = $button.parent().prev(),
			$span, $dots,
			bNoAnimation = this.getParent() && this.getParent()._noAnimation,
			OFFSET = 8,
			fnIsDoubleSided = function () {
				return that.getParent() && that.getParent()._renderDblSided;
			},
			fnSetHeight = function (sValue, sAnimateValue, sLineClamp) {
				$parent.css("-webkit-line-clamp", sLineClamp);

				// so far we don't support animation in doublesided mode
				if (fnIsDoubleSided() || bNoAnimation) {
					$parent.css("height", sValue);
					that._callParentFn("_performUiChanges");
				} else {
					$parent.animate({
						height: sAnimateValue
					}, 250, that._callParentFn("_performUiChanges"));
				}
			};
		if (this._orientation === "V") {
			$dots = this.$("threeDots");
			$span = $parent.children().first();

			if (!this._expanded) {
				this._textProperties = {
					height: $parent.css("height"),
					clamp: $parent.css("-webkit-line-clamp"),
					text: $span.html()
				};

				// we have to show wrapper to full height but also if there were limitation by chars
				// we need to set span full length and hide span dots.
				$parent.attr("expanded", true);
				$dots.hide();
				$span.html(this._encodeHTMLAndLineBreak(this.getText()));
				oShowMoreBtn.oSource.setText(resBundle.getText("TIMELINE_TEXT_SHOW_LESS"));

				fnSetHeight("", $span.height(), "");

			} else {
				$parent.attr("expanded", false);
				oShowMoreBtn.oSource.setText(this._sTextShowMore);
				$dots.show();
				$span.html(this._textProperties.text);

				fnSetHeight(this._textProperties.height, this._textProperties.height, this._textProperties.clamp);
			}

			that._expanded = !that._expanded;
		} else {
			// // if the button is at the bottom of the page, we want to enforce minimal height of the popup window
			var iDefaultOffset = topText - topButton - buttonHeight - OFFSET,
				iWindowButtonDiff = jQuery(window).height() - $button.offset().top,
				CORRECTIONMARGIN = 200;
			if (iWindowButtonDiff < CORRECTIONMARGIN) {
				iDefaultOffset -= (CORRECTIONMARGIN - iWindowButtonDiff);
			}

			this._objects.getFullText().setText(this.getText());
			this._objects.getFullTextPopover().setOffsetY(Math.floor(iDefaultOffset));
			this._objects.getFullTextPopover().openBy(this._objects.getExpandButton());
		}
	};

	/**
	 * Gets the link for expanding/collapsing the text
	 *
	 * @private
	 * @returns {sap.m.Link} The expand action
	 */
	TimelineItem.prototype._getButtonExpandCollapse = function () {
		var that = this; //eslint-disable-line
		this._objects.register("expandButton", function () {
			return new Link(that.getId() + "-fullTextBtn", {
				text: that._sTextShowMore,
				press: that._toggleTextExpanded.bind(that)
			});
		});

		return this._objects.getExpandButton();
	};

	/**
	 * Checks if the text is expandable: If maxCharacters is empty the default values are used, which are 300 characters (
	 * on mobile devices) and 500 characters ( on tablet and desktop). Otherwise maxCharacters is used as a limit. Based on
	 * this value, the text of the FeedListItem is collapsed once the text reaches this limit.
	 *
	 * @private
	 * @returns {boolean} Whether or not the text is expandable
	 */
	TimelineItem.prototype._checkTextIsExpandable = function () {
		this._nMaxCollapsedLength = this.getMaxCharacters();

		if (this._nMaxCollapsedLength === 0) {
			this._nMaxCollapsedLength = Device.system.phone ? this._nMaxCharactersMobile : this._nMaxCharactersDesktop;
		}

		return this.getText().length > this._nMaxCollapsedLength;
	};

	TimelineItem.prototype.onBeforeRendering = function () {
		var that = this; //eslint-disable-line

		//when odata update happens, only once?
		if (!this._list) {
			this._list = this.getReplyList();
		}

		if (this.getReplyCount() > 0) {
			this._objects.getReplyLink().setText(resBundle.getText("TIMELINE_REPLY") + " (" + this.getReplyCount() + ")");
		} else if (this._list && this._list.getItems().length > 0) {
			this._objects.getReplyLink().setText(resBundle.getText("TIMELINE_REPLY") + " (" + this._list.getItems().length + ")");
		}

		this._objects.getSocialBar().removeAllContent();
		if (this._callParentFn("getEnableSocial")) {
			this._objects.getSocialBar().addContent(this._objects.getReplyLink());
		}

		this._actionList = this.getCustomAction();

		function fnFireCustomActionClicked(oEvent, oData) {
			that.fireCustomActionClicked({
				"value": oData.value,
				"key": oData.key,
				"linkObj": this
			});
		}

		for (var i = 0; i < this._actionList.length; i++) {
			var key = this._actionList[i].getKey();
			var value = this._actionList[i].getValue();
			var actionLink = new Link({
				text: value,
				tooltip: key
			});
			actionLink.addStyleClass("sapSuiteUiCommonsTimelineItemActionLink");
			actionLink.attachPress({"value": value, "key": key}, fnFireCustomActionClicked);

			this._objects.getSocialBar().addContent(actionLink);
		}
	};

	/**
	 * Encodes HTML and add '/n' replace to '<BR>'
	 * @private
	 * @param {string} sText Text to encode
	 * @returns {jQuery} Encoded HTML with linebreaks
	 */
	TimelineItem.prototype._encodeHTMLAndLineBreak = function(sText) {
		return jQuery.sap.encodeHTML(sText).replace(/&#xa;/g, "<br>");
	};

	/**
	 * Creates image control for timeline item picture
	 * @returns {sap.m.Image} Image
	 * @private
	 */
	TimelineItem.prototype._getUserPictureControl = function () {
		var sUserPicture = this.getUserPicture(),
			sSize = "2rem",
			that = this; //eslint-disable-line

		if (!sUserPicture) {
			return null;
		}

		this._objects.register("userPictureControl", function () {
			var oImage = MobileLibrary.ImageHelper.getImageControl(that.getId() + "-userPictureControl", null, that, {
				height: sSize,
				width: sSize,
				src: sUserPicture,
				tooltip: resBundle.getText("TIMELINE_USER_PICTURE")
			});

			// Jam Can't deal with that
			oImage.setDensityAware(false);
			return oImage;
		});

		this._objects.getUserPictureControl().setSrc(sUserPicture);

		return this._objects.getUserPictureControl();
	};

	/**
	 * Creates clickable link for user name (if set)
	 * @returns {sap.m.Link} link
	 * @private
	 */
	TimelineItem.prototype._getUserNameLinkControl = function () {
		var that = this; //eslint-disable-line

		if (this.getUserNameClickable()) {
			this._objects.register("userNameLink", function () {
				var link = new Link(that.getId() + "-userNameLink", {
					text: that.getUserName(),
					//tooltip: that.getUserName(),
					press: function (oEvent) {
						that.fireUserNameClicked({uiElement: this});
					}
				});
				link.addStyleClass("sapUiSelectable");
				return link;
			});

			return this._objects.getUserNameLink();
		}
	};

	TimelineItem.prototype.onAfterRendering = function () {
		this._expanded = false;
	};

	/**
	 * Register basic controls for item
	 * @private
	 */
	TimelineItem.prototype._registerControls = function () {
		var that = this; //eslint-disable-line
		this._objects.register("infoText", new Text(this.getId() + "-infoText", {
			maxLines: 1,
			width: "100%"
		}));

		this._objects.register("infoBar", new Toolbar(this.getId() + "-infoBar", {
			id: this.getId() + "-customMessageInfoBar",
			content: [this._objects.getInfoText()],
			design: ToolbarDesign.Info,
			visible: false
		}));

		this._objects.register("replyLink", function () {
			var link = new Link(that.getId() + "-replyLink", {
				text: resBundle.getText("TIMELINE_REPLY"),
				press: [that._openReplyDialog, that]
			});
			link.addStyleClass("sapSuiteUiCommonsTimelineItemActionLink");

			return link;
		});

		this._objects.register("socialBar", function () {
			var socialBar = new Toolbar(that.getId() + "-socialBar", {});
			socialBar.data("sap-ui-fastnavgroup", null);
			return socialBar;
		});

		this._objects.register("replyInputArea", new TextArea(this.getId() + "-replyInputArea", {
			height: "4rem",
			width: "100%"
		}));

		this._objects.register("replyPop", function () {
			return new Popover(that.getId() + "-replyPop", {
				initialFocus: that._objects.getReplyInputArea(),
				title: resBundle.getText("TIMELINE_REPLIES"),
				placement: PlacementType.Vertical,
				footer: new Toolbar({
					content: [//this._replyInput,
						new ToolbarSpacer(),
						new Button(that.getId() + "-replyButton", {
							text: resBundle.getText("TIMELINE_REPLY"),
							press: function () {
								that._replyPost();
								that._objects.getReplyPop().close();
							}
						})]
				}),
				contentHeight: "15rem",
				contentWidth: "20rem"
			});
		});
	};

	/**
	 * @private
	 */
	TimelineItem.prototype.exit = function () {
		this._objects.destroyAll();
	};

	/**
	 * Returns date time property without trying it parse if value is of type string.
	 * @returns {Date} Date property
	 */
	TimelineItem.prototype.getDateTimeWithoutStringParse = function () {
		var oDateTime = this.getProperty("dateTime");
		return DateUtils.parseDate(oDateTime, false);
	};

	/* =========================================================== */
	/* Setters & getters*/
	/* =========================================================== */
	TimelineItem.prototype.setCustomReply = function (oReply) {
		if (oReply) {
			this._customReply = true;
			this.setAggregation("customReply", oReply, true);

		} else {
			this._customReply = false;
		}
	};

	TimelineItem.prototype.setReplyList = function (replyList) {
		if (replyList === null) {
			return;
		}
		//this method get called  implicitly when open popup, thus need to check if its null
		this.setAggregation("replyList", replyList, true);

		// after update need to reset the focus
		var that = this; //eslint-disable-line
		this.getReplyList().attachUpdateFinished(function (oEvent) {
			var oFocusRef = that._objects.getReplyInputArea().getDomRef("inner");
			if (oFocusRef) { //if popup already open , reset focus
				jQuery(oFocusRef.id).focus();
			}
		});
	};

	TimelineItem.prototype.getDateTime = function () {
		var oDateTime = this.getProperty("dateTime");
		return DateUtils.parseDate(oDateTime);
	};

	return TimelineItem;
});

}; // end of sap/suite/ui/commons/TimelineItem.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineRenderManager') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.TimelineRenderManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/TimelineRenderManager", [
	"jquery.sap.global",
	"./library",
	"sap/m/Text",
	"sap/ui/core/Icon",
	"sap/m/ViewSettingsDialog",
	"sap/ui/core/ResizeHandler",
	"sap/ui/core/Item",
	"sap/m/ButtonType",
	"sap/m/ToolbarSpacer",
	"sap/m/SearchField",
	"sap/m/OverflowToolbar",
	"sap/m/Select",
	"sap/m/RangeSlider",
	"sap/m/Label",
	"sap/m/Panel",
	"sap/m/FlexBox",
	"sap/m/OverflowToolbarButton",
	"sap/m/MessageStrip",
	"sap/ui/core/CSSSize",
	"sap/m/ViewSettingsFilterItem",
	"sap/m/ViewSettingsCustomItem",
	"sap/m/OverflowToolbarLayoutData",
	"sap/m/OverflowToolbarPriority",
	"sap/m/MessageToast",
	"sap/ui/core/InvisibleText"
], function (jQuery, library, Text, Icon, ViewSettingsDialog, ResizeHandler, Item, ButtonType, ToolbarSpacer, SearchField, OverflowToolbar, Select,
             RangeSlider, Label, Panel, FlexBox, OverflowToolbarButton, MessageStrip, CSSSize, ViewSettingsFilterItem,
             ViewSettingsCustomItem, OverflowToolbarLayoutData, OverflowToolbarPriority, MessageToast, InvisibleText) {
	"use strict";

	var TimelineGroupType = library.TimelineGroupType;

	var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
	var VERTICAL_MAX_WIDTH = 680;

	var DateRoundType = Object.freeze({
		UP: "UP",
		DOWN: "DOWN",
		NONE: "NONE"
	});

	function switchClass($item, removeClass, addClass) {
		$item.removeClass(removeClass).addClass(addClass);
	}

	// get attributed from $element and convert it to number
	function _getConvertedAttribute($elem, sAttrName) {
		return parseInt($elem.css(sAttrName).replace("px", ""), 10);
	}

	var TimelineRenderManager = {
		extendTimeline: function (Timeline) {
			/**
			 * Init filter bar, filter dialogs, message strips
			 * @private
			 */
			Timeline.prototype._initControls = function () {
				this._setupMessageStrip();
				this._setupFilterDialog();
				this._setupHeaderToolbar();
				this._setupAccessibilityItems();
			};

			/**
			 * Register resize listener. We don't register timeline itself, but it's parent.
			 * @private
			 */
			Timeline.prototype._registerResizeListener = function () {
				var oParent = this.$().parent().get(0);
				if (oParent) {
					this.oResizeListener = ResizeHandler.register(oParent, jQuery.proxy(this._performResizeChanges, this));
				}
			};

			/**
			 * @private
			 */
			Timeline.prototype._deregisterResizeListener = function () {
				if (this.oResizeListener) {
					ResizeHandler.deregister(this.oResizeListener);
				}
			};

			/**
			 * Recalcute all positions after some change occured (basically it's after rendering or after resize)
			 * @param {boolean} bForce - ignore all optimization and force triggering all scripts
			 * @private
			 */
			Timeline.prototype._performUiChanges = function (bForce) {
				// deregister resize listener - changes to timeline will change the parent too so we don't want to trigger resize right away
				this._deregisterResizeListener();

				if (!this.getDomRef()) {
					return;
				}

				if (this._isVertical()) {
					this._performUiChangesV(bForce);
				} else {
					this._performUiChangesH();
				}

				this._setupScrollers();
				this._startItemNavigation();

				// register again
				this._registerResizeListener();
			};

			/**
			 * Change from doublesided to singlesided or vice versa for single item
			 * @param {object} $li LI element representing timeline item
			 * @param {boolean} bIsOdd indicates whether item is odd or even
			 * @private
			 */
			Timeline.prototype._performDoubleSidedChangesLi = function ($li, bIsOdd) {
				var $child = $li.children().first(),
					sClassName = this._isLeftAlignment() ? "sapSuiteUiCommonsTimelineItemWrapperVLeft" : "sapSuiteUiCommonsTimelineItemWrapperVRight";
				if (this._renderDblSided) {
					if ($li.hasClass('sapSuiteUiCommonsTimelineItem')) {
						$li.removeClass('sapSuiteUiCommonsTimelineItem')
							.addClass(bIsOdd ? "sapSuiteUiCommonsTimelineItemOdd" : "sapSuiteUiCommonsTimelineItemEven");

						if (!bIsOdd) {
							switchClass($child, "sapSuiteUiCommonsTimelineItemWrapperVLeft", "sapSuiteUiCommonsTimelineItemWrapperVRight");
						} else {
							switchClass($child, "sapSuiteUiCommonsTimelineItemWrapperVRight", "sapSuiteUiCommonsTimelineItemWrapperVLeft");
						}
					}
				} else {
					$li.removeClass("sapSuiteUiCommonsTimelineItemOdd").removeClass("sapSuiteUiCommonsTimelineItemEven").addClass("sapSuiteUiCommonsTimelineItem");
					$child.removeClass("sapSuiteUiCommonsTimelineItemWrapperVLeft").removeClass("sapSuiteUiCommonsTimelineItemWrapperVRight").addClass(sClassName);
				}
			};

			/**
			 * * Change from doublesided to singlesided or vice versa
			 * @private
			 */
			Timeline.prototype._performDoubleSidedChanges = function () {
				var $this = this.$(),
					$ulItems = $this.find('.sapSuiteUiCommonsTimelineItemUlWrapper').not(".sapSuiteUiCommonsTimelineShowMoreWrapper"),
					$headers = $this.find(".sapSuiteUiCommonsTimelineScrollV .sapSuiteUiCommonsTimelineGroupHeader"),
					$item;

				if (this._renderDblSided) {
					this._$content.addClass("sapSuiteUiCommonsTimelineDblSided");
					$headers.addClass("sapSuiteUiCommonsTimelineGroupHeaderDblSided");
					$headers.addClass("sapSuiteUiCommonsTimelineItemWrapperVLeft").removeClass("sapSuiteUiCommonsTimelineItemWrapperVRight");
				} else {
					this._$content.removeClass("sapSuiteUiCommonsTimelineDblSided");
					$headers.removeClass("sapSuiteUiCommonsTimelineGroupHeaderDblSided sapSuiteUiCommonsTimelineItemWrapperVLeft");
					$headers.addClass(this._isLeftAlignment() ? "sapSuiteUiCommonsTimelineItemWrapperVLeft" : "sapSuiteUiCommonsTimelineItemWrapperVRight");
				}

				for (var j = 0; j < $ulItems.length; j++) {
					var $ul = jQuery($ulItems[j]),
						$liItems = $ul.find('> li').not(".sapSuiteUiCommonsTimelineGroupHeader");

					// first is group item, second is "first" classic item, so we want to move down third
					$liItems.eq(1).css("margin-top", this._renderDblSided ? "40px" : "auto");

					for (var i = 0; i < $liItems.length; i++) {
						$item = jQuery($liItems[i]);
						this._performDoubleSidedChangesLi($item, (i % 2) === 0);
					}
				}

				$this.find(".sapSuiteUiCommonsTimelineItemBarV").css("height", "");
				$this.find(".sapSuiteUiCommonsTimelineItem").css("margin-bottom", "");
			};

			/**
			 * Recalculate for horizontal TL
			 * @private
			 */
			Timeline.prototype._performUiChangesH = function () {
				var $this = this.$(),
					$prev,
					oBottomLine;

				var fnRight = function ($element) {
						return ($this.width() - ($element.position().left + $element.outerWidth()));
					};

				// calculate bottom line margin for each item
				if (this.getEnableDoubleSided() && this._isGrouped()) {
					oBottomLine = $this.find(".sapSuiteUiCommonsTimelineHorizontalBottomLine ul");

					// we fix margin left (right for RTL) from previous item
					// to do this we find corresponding icon in icon bar and convert its left position
					// to margin (we have to take in count previous item and it's position)
					// easier solution would be absolute positioning of bottom line
					// but this is better solution
					$this.find("[firstgroupevenitem = true]:visible").each(function (iIndex, oItem) {
						var fnCreateAttribute = function (sName) {
								return sName + "-" + ( this._bRtlMode ? "right" : "left");
							}.bind(this),
							// icon in middle line for corresponding timeline item
							$icon = jQuery("#" + oItem.id + "-line"),
							// left (right for RTL) for timeline icon
							iDistance = this._bRtlMode ? fnRight($icon) : $icon.position().left,
							// distance between left icon pos and start of timeline item
							OFFSET = 30,
							$item = jQuery(oItem),
							iLineMargin = _getConvertedAttribute(oBottomLine, fnCreateAttribute("padding")),
							iMargin, iPrevPos;

						if (iIndex === 0) {
							iMargin = iDistance - OFFSET - iLineMargin;
						} else {
							$prev = $item.prevAll(".sapSuiteUiCommonsTimelineItemLiWrapperV:visible:first");
							// otherwise count margin as previsous item left + width minus from group header left position + OFFSET
							iPrevPos = this._bRtlMode ? fnRight($prev) : ($prev.position().left + _getConvertedAttribute($prev, fnCreateAttribute("margin")));
							iMargin = (iDistance - OFFSET) - (iPrevPos + $prev.outerWidth());
						}
						$item.css(fnCreateAttribute("margin"), iMargin + "px");
					}.bind(this));

				}

				if (!this.getEnableScroll()) {
					// enforce scrollbar being hidden
					$this.find(".sapSuiteUiCommonsTimelineContentsH").css("overflow-x", "hidden");
				}

				this._calculateTextHeight();
			};

			/**
			 * Recalculate for vertical TL
			 * @param {boolean} bForce - ignore all optimization and force triggering all scripts
			 * @private
			 */
			Timeline.prototype._performUiChangesV = function (bForce) {
				var $this = this.$(),
					iOuterWidth = $this.outerWidth() + 50;

				//check if width can handle to display dobulesided timeline
				if (this.getEnableDoubleSided()) {
					this._renderDblSided = iOuterWidth >= VERTICAL_MAX_WIDTH;
					// performance check, process only when its really neccessary
					if (this._renderDblSided !== this._lastStateDblSided || bForce) {
						this._performDoubleSidedChanges();
					}

					this._lastStateDblSided = this._renderDblSided;
				}

				this._calculateTextHeight();
				this._calculateHeightV();
			};

			/**
			 * Correct item margins and separator heights for double sided timeline. If enableScroll is OFF, calculate timeline height to fit parent
			 * @private
			 */
			Timeline.prototype._calculateHeightV = function () {
				var $this = this.$(),
					iFilterBarHeight = this.$("headerBar").outerHeight() || 0,
					iFilterInfoBarHeight = this.$("filterMessage").outerHeight() || 0,
					iMessageStripHeight = this.$("messageStrip").outerHeight() || 0,
					iBarsHeight = iMessageStripHeight + iFilterInfoBarHeight + iFilterBarHeight,
					// correct separator height for double sided timeline
					fnCorrectSeparatorHeight = function (aLI, $nextUl) {
						var $next, $current, $nextIcon, $bar, $currentIcon, iNextTop, iCurrentTop,
							iLength = aLI.length,
							sIconClass = this.getShowIcons() ? ".sapSuiteUiCommonsTimelineItemBarIconWrapperV:visible" : ".sapSuiteUiCommonsTimelineItemNoIcon:visible",
							// find either first classic item in next group or collapsed group mark
							$nextUlIcon = $nextUl.length > 0 ? $nextUl.find(sIconClass + ", .sapSuiteUiCommonsTimelineItemBarIconWrapperV:visible").eq(0) : jQuery(),
							MARGIN = 8;

						// we find next item icon and count difference between them
						// for last item, we check whether there is any additional group
						for (var i = 0; i < iLength; i++) {
							$next = jQuery(aLI[i + 1]);
							$current = jQuery(aLI[i]);
							// next icon, either next item in UL or first visible icon in next group
							$nextIcon = i < iLength - 1 ? $next.find(sIconClass) : $nextUlIcon;
							$currentIcon = $current.find(sIconClass);
							if ($nextIcon.length > 0 && $currentIcon.length > 0) {
								iNextTop = $nextIcon.offset().top;
								iCurrentTop = $currentIcon.offset().top + $currentIcon.height();
								$bar = $current.find(".sapSuiteUiCommonsTimelineItemBarV");
								MARGIN = 8;

								$bar.height(iNextTop - iCurrentTop - MARGIN);
							}
						}
					},
					fnCorrectItemMargin = function (aLI) {
						var $item,
							$prev,
							$prevPrev,
							bIsOdd,
							iLeft,
							OFFSET = 40,
							DELIMITER = 100,
							fnFixMargin = function () {
								var iDiff = _getConvertedAttribute($prevPrev, "margin-top") +
									$prevPrev.position().top + $prevPrev.height() - $item.position().top;
								$prev.css("margin-bottom", iDiff + OFFSET + "px");
							};

						// we use a little trick here, when item is wrong positioned due to the fact odd and even items are of different height
						// odd items are positioned left (or should be) so we test whether their offset is too far right
						// we can fix it by adding margin-bottom of the [item-2]. By doing this we set both 'columns' to similar sizes
						for (var i = 2; i < aLI.length; i++) {
							$item = jQuery(aLI[i]);
							$prev = jQuery(aLI[i - 1]);
							$prevPrev = jQuery(aLI[i - 2]);
							bIsOdd = this._bRtlMode ? !$item.hasClass("sapSuiteUiCommonsTimelineItemOdd") : $item.hasClass("sapSuiteUiCommonsTimelineItemOdd");
							iLeft = $item.position().left;

							// odd is supposed to be left
							if (!bIsOdd && iLeft < DELIMITER ||
								bIsOdd && iLeft > DELIMITER) {
								fnFixMargin();
							} else {
								var iDiff = $item.position().top - $prev.position().top,
									iPrevMargin = _getConvertedAttribute($prevPrev, "margin-bottom");

								if (iDiff < OFFSET) {
									$prevPrev.css("margin-bottom", iPrevMargin + OFFSET - iDiff);
								}
							}
						}
					},
					fnCalculateHeight = function () {
						var OFFSET = 5,
							iCurrentTop = $this.position().top,
							iParentHeight = $this.parent().height(),
							iContentPaddingBottom = _getConvertedAttribute(this._$content, "padding-bottom"),
							iContentPaddingTop = _getConvertedAttribute(this._$content, "padding-top"),
							iHeight = iParentHeight - iCurrentTop - iBarsHeight - iContentPaddingTop - iContentPaddingBottom - OFFSET;

						this._$content.height(iHeight);
					}.bind(this),
					aUl, $ul, $nextUl, aLI;

				// function start
				if (this.getEnableScroll()) {
					fnCalculateHeight();
				}

				if (this._renderDblSided) {
					// find all UL tags
					aUl = $this.find(".sapSuiteUiCommonsTimelineItemUlWrapper");
					for (var i = 0; i < aUl.length; i++) {
						$ul = jQuery(aUl[i]);
						$nextUl = jQuery(aUl[i + 1]);
						aLI = $ul.find(" > li:not(.sapSuiteUiCommonsTimelineGroupHeader):visible");

						// we have to first correct DOM to have all items right ordered.
						aLI.css("margin-bottom", "");
						fnCorrectItemMargin.call(this, aLI, $ul);
						fnCorrectSeparatorHeight.call(this, aLI, $nextUl);
					}
				}
			};

			/**
			 * Event after parent is resized
			 * @private
			 */
			Timeline.prototype._performResizeChanges = function () {
				this._performUiChanges();
			};

			/**
			 * Given textHeight settings (line count, automatic to parent or height) we calculate precise pixels height to fit full rows
			 * so we prevent trimming div in half of line.
			 * @private
			 */
			Timeline.prototype._calculateTextHeight = function () {
				var $this = this.$(),
					sTextHeight = this.getTextHeight(),
					oRegex, aMatches,
					fnSetHeight = function (iHeight, iLinesCount) {
						$this.find(".sapSuiteUiCommonsTimelineItemTextWrapper:visible").each(function (iIndex, oWrapper) {
							var $item = jQuery(oWrapper),
								$span = $item.children().first(),
								aRects = $span.get(0).getClientRects(),
								iCalculatedHeight = 0,
								iLines = 0,
								iTop, iCurrentBottom = -100000,
								iRealLineCount = 0,
								bisExpanded = $item.attr("expanded");
							if (!bisExpanded) {
								if (aRects && aRects.length > 0) {
									iTop = aRects[0].top;
									iRealLineCount = 0;

									for (var i = 0; i < aRects.length - 1; i++) {
										if (iCurrentBottom !== aRects[i].bottom) {
											iCurrentBottom = aRects[i].bottom;
											iRealLineCount++;
										}

										// search by preferred height
										if (iHeight > 0 && (aRects[i + 1].bottom - iTop > iHeight)) {
											iLines = iRealLineCount;
											iCalculatedHeight = aRects[i].bottom - iTop;
											break;
										}

										// search by preferred line count
										if (iLinesCount > 0 && iRealLineCount === iLinesCount) {
											iCalculatedHeight = aRects[i].bottom - aRects[0].top;
											iLines = iLinesCount;
											break;
										}
									}
								}

								if (iCalculatedHeight > 0) {
									$item.height(iCalculatedHeight);
									$item.css("-webkit-line-clamp", iLines.toString());
									// more button
									$item.next().show();
								} else if (!$item.attr("expandable")) {
									$item.next().hide();
								}
							}
						});
					},
					fnSetHeightByLineCount = function (iLinesCount) {
						fnSetHeight(0, parseInt(iLinesCount, 10));
					},
					fnSetHeightByNumber = function (iHeight) {
						fnSetHeight(iHeight, 0);
					},
					fnFindMaxHeightForAutomatic = function () {
						var aTexts = $this.find(".sapSuiteUiCommonsTimelineItemTextWrapper");

						// reset heigh flags for all items
						aTexts.css("height", "");
						aTexts.css("-webkit-line-clamp", "");
						$this.css("height", "100%");

						var iContentHeight = this._$content.height(),
							iContentPadding = _getConvertedAttribute(this._$content, "padding-bottom"),
							iScrollHeight = this._$content.get(0).scrollHeight,
							iDiff = iScrollHeight - iContentHeight - iContentPadding,
							oMax = {height: 0},
							bShowMoreHeight,
							OFFSET = 20;

						// find largest item and check whether its show more button is visible
						$this.find(".sapSuiteUiCommonsTimelineItemTextWrapper").each(function (iIndex, oItem) {
							var iHeight = jQuery(oItem).height();
							if (iHeight > oMax.height) {
								oMax.height = iHeight;
								oMax.item = jQuery(this);
							}
						});
						if (oMax.item) {
							// check if max height has show more button. If it is visible, its height is already calculated and is no more
							// needed to be added
							bShowMoreHeight = oMax.item.parent().find(".sapSuiteUiCommonsTimelineItemShowMore:hidden").height();

							// we don't want to stretch right to the end --> OFFSET
							return oMax.height - iDiff - bShowMoreHeight - OFFSET;
						}

						return 1;
					};

				if (sTextHeight) {
					// for automatic in horizontal mode, try to calculate max allowed height
					// find 'scroll' div and get his height and scrollheight. The difference between these number and the height of the largest visible
					// textarea is the maximum possible height for all items
					if (this._useAutomaticHeight()) {
						fnSetHeightByNumber(fnFindMaxHeightForAutomatic.call(this));
					} else if (jQuery.isNumeric(sTextHeight)) {
						fnSetHeightByLineCount(sTextHeight);
					} else {
						// for px we can compute rounded height and line count
						oRegex = /([0-9]*\.?[0-9]+)(px)+/i;
						aMatches = oRegex.exec(sTextHeight);
						if (aMatches && aMatches.length > 1) {
							fnSetHeightByNumber(aMatches[1]);
						} else if (CSSSize.isValid(sTextHeight)) {
							// if not px just add the selected style
							$this.find(".sapSuiteUiCommonsTimelineItemTextWrapper").height(sTextHeight);
						}
					}
				}
			};

			/**
			 * Scroller position for horizontal TL
			 * @private
			 */
			Timeline.prototype._fixScrollerPositionH = function () {
				var $this = this.$(),
					$middleLine = $this.find(".sapSuiteUiCommonsTimelineHorizontalMiddleLine"),
					$scrollers = $this.find(".sapSuiteUiCommonsTimelineHorizontalScroller"),
					iPosY,
					iContentTop = this._$content.position().top;

				if ($middleLine.get(0)) {
					iPosY = $middleLine.position().top;
					// center scrollbars and scroll icons to center of middle line
					$this.find(".sapSuiteUiCommonsTimelineScrollerIconWrapper").css("top", iPosY - 5);
					$scrollers.css("top", iContentTop + "px");
					$scrollers.height(this._$content.outerHeight() - 15);
				}
			};

			/**
			 * setup scrollers and background div with gradient opacity. For this we need to know background color of timeline
			 * we try to get it from parents. IF we find a color (and background image is not set) we try to setup scroller buttons and
			 * gradient background.
			 * These scrollers are children of directly timeline control iteself and are absolute, so they need to be positioned by JS.
			 * This is for not shortening scrollable area.
			 * @private
			 */
			Timeline.prototype._setupScrollers = function () {
				var $this = this.$(),
					MIN_SIZE = 450,
					sNoColor = 'rgba(0, 0, 0, 0)',
					iSize, sBackgroundColor, aRgb, iR, iG, iB, sFrom, sTo, sMid,
					$scrollerA, $scrollerB, sGradientA, sGradientB,
					// this method returns first set background color of any parent but only if there is no background image set
					fnGetParentBackground = function ($element) {
						var sColor = sNoColor;
						$element.parents().each(function (iIndex, domEl) {
							var sBackgroundColor = jQuery(domEl).css("background-color"),
								sBackgroundImage = jQuery(domEl).css("background-image");

							// if both are set in same element we don't use scrollbars so this condition if first
							if (sBackgroundImage !== "none") {
								sColor = sNoColor;
								return;
							}

							if (sBackgroundColor !== sNoColor && sBackgroundColor !== "transparent") {
								sColor = sBackgroundColor;
							}
						});

						return sColor;
					};

				if (this._scrollingFadeout()) {
					// show scrollers only if there is enought space
					iSize = this._isVertical() ? $this.height() : $this.width();
					if (iSize < MIN_SIZE) {
						$this.find(".sapSuiteUiCommonsTimelineVerticalScroller", ".sapSuiteUiCommonsTimelineHorizontalScroller").hide();
						this._scrollersSet = false;
						return;
					}

					if (!this._scrollersSet) {
						// find parent color
						sBackgroundColor = fnGetParentBackground(this.$());

						// if there is background image defined or color is not defined
						// we are not able to setup gradient, hide all scraller buttons and divs
						if (sBackgroundColor && sBackgroundColor !== sNoColor) {
							aRgb = sBackgroundColor.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);

							if (aRgb && aRgb.length >= 4) {
								iR = parseInt(aRgb[1], 10);
								iG = parseInt(aRgb[2], 10);
								iB = parseInt(aRgb[3], 10);

								sFrom = "rgba(" + iR + "," + iG + "," + iB + ", 0)";
								sMid = "rgba(" + iR + "," + iG + "," + iB + ", 0.7)";
								sTo = "rgba(" + iR + "," + iG + "," + iB + ", 1)";

								$scrollerA = $this.find(".sapSuiteUiCommonsTimelineHorizontalLeftScroller, .sapSuiteUiCommonsTimelineTopScroller ");
								$scrollerB = $this.find(".sapSuiteUiCommonsTimelineHorizontalRightScroller, .sapSuiteUiCommonsTimelineBottomScroller");
								sGradientA = this._isVertical() ? "top" : "left";
								sGradientB = this._isVertical() ? "bottom" : "right";

								$scrollerA.css("background-image", "linear-gradient(to " + sGradientA + ", " + sFrom + ", " + sTo + ")");
								$scrollerB.css("background-image", "linear-gradient(to " + sGradientB + ", " + sFrom + ", " + sTo + ")");

								$scrollerA.css("background-image", "-webkit-linear-gradient(" + sGradientB + ", " + sFrom + ", " + sMid + " 30%," + sTo + ")");
								$scrollerB.css("background-image", "-webkit-linear-gradient(" + sGradientA + ", " + sFrom + ", " + sMid + " 30%," + sTo + ")");


								// we setup scroller once for rendering
								this._scrollersSet = true;

								// oData or delayed loading for empty items fix
								if (this.getContent().length > 0) {
									// if there is scrollbar show right scroller
									// left scrollbar is shown only after some scrolling is done
									if ((!this._isVertical() && this._$content.get(0).scrollWidth > this._$content.outerWidth()) ||
										(this._isVertical() && this._$content.get(0).scrollHeight > this._$content.outerHeight())) {
										$scrollerB.show();
									}
								}
							}
						} else {
							// we were not able to find background color or there is background image selected ->
							// unable to set gradient color so we hide scrollers
							$this.find(".sapSuiteUiCommonsTimelineHorizontalScroller").hide();
						}
					}

					if (!this._isVertical()) {
						this._fixScrollerPositionH();
					}
				}
			};

			/**
			 * Events for scrollers and lazy loading management
			 * @private
			 */
			Timeline.prototype._setupScrollEvent = function () {
				var $this = this.$(),
					$scrollerAIcon = $this.find(".sapSuiteUiCommonsTimelineHorizontalLeftScroller .sapSuiteUiCommonsTimelineScrollerIconWrapper, .sapSuiteUiCommonsTimelineTopScroller .sapSuiteUiCommonsTimelineScrollerIconWrapper"),
					$scrollerBIcon = $this.find(".sapSuiteUiCommonsTimelineHorizontalRightScroller .sapSuiteUiCommonsTimelineScrollerIconWrapper, .sapSuiteUiCommonsTimelineBottomScroller .sapSuiteUiCommonsTimelineScrollerIconWrapper"),
					$scrollerA = $this.find(".sapSuiteUiCommonsTimelineHorizontalLeftScroller, .sapSuiteUiCommonsTimelineTopScroller"),
					$scrollerB = $this.find(".sapSuiteUiCommonsTimelineHorizontalRightScroller, .sapSuiteUiCommonsTimelineBottomScroller"),
					$scroller = this._$content,
					that = this; //eslint-disable-line

				// setup lazy loading for timeline without growing buttons
				if (that._lazyLoading() || that._scrollingFadeout()) {
					$scroller.on("scroll", function (event) {
						var $target = jQuery(event.currentTarget),
							iScrollLeft = $target.get(0).scrollLeft,
							iScrollTop = $target.get(0).scrollTop,
							bEndPosition = false,
							OFFSET = 200,
							ENDOFFSET = 5,
							// this marker is for preventing multiple lazy loading events
							// once lazy loading started, set this flag off and wait for afterrender for new round (then set it on)
							bLoadMore = false,
							iHeight, iScrollHeight, iWidth, iScrollWidth,
							$scroller;

						if (that._isVertical()) {
							iHeight = $target.outerHeight();
							iScrollHeight = $target.get(0).scrollHeight;

							bLoadMore = iScrollTop + iHeight > iScrollHeight - OFFSET;
							bEndPosition = iScrollTop + iHeight >= iScrollHeight - ENDOFFSET;

						} else {
							iWidth = $target.width();
							iScrollWidth = $target.get(0).scrollWidth;

							bLoadMore = iScrollLeft + iWidth > iScrollWidth - OFFSET;
							bEndPosition = iScrollLeft + iWidth >= iScrollWidth - ENDOFFSET - 185; /*ul margin*/
						}

						if (that._lazyLoading() && that._scrollMoreEvent) {
							if (bLoadMore && !that._isMaxed()) {
								that._scrollMoreEvent = false;
								that._loadMore();
							}
						}

						// hide/show left scroller if scroller position is right at the begining
						if (that._scrollersSet) {
							if (iScrollLeft > 50 || iScrollTop > 50) {
								$scrollerA.show();
							} else {
								$scrollerA.hide();
								that._manualScrolling = false;
							}

							if (bEndPosition) {
								$scrollerB.hide();
							} else {
								$scrollerB.show();
							}

							// when scrolling performed, make special background for scrolling buttons
							// determine whether we scroll left or right (top or bottom)
							var currentScrollPosition;
							if (that._isVertical()) {
								currentScrollPosition = $target.get(0).scrollTop;
								$scroller = currentScrollPosition > that._lastScrollPosition.y ? $scrollerBIcon : $scrollerAIcon;
								that._lastScrollPosition.y = currentScrollPosition;

							} else {
								currentScrollPosition = $target.get(0).scrollLeft;
								$scroller = currentScrollPosition > that._lastScrollPosition.x ? $scrollerBIcon : $scrollerAIcon;
								that._lastScrollPosition.x = currentScrollPosition;
							}

							// add special scrolling background
							$scroller.addClass("sapSuiteUiCommonsTimelineScrolling");

							// after some delay remove scrolling background
							clearTimeout(jQuery.data(this, 'scrollTimer'));
							jQuery.data(this, 'scrollTimer', setTimeout(function () {
								// clear both to prevent chaining
								$scrollerAIcon.removeClass("sapSuiteUiCommonsTimelineScrolling");
								$scrollerBIcon.removeClass("sapSuiteUiCommonsTimelineScrolling");
							}, 350));
						}
					});

					// setup scroller click events
					this.$().find(".sapSuiteUiCommonsTimelineScrollerIconWrapper").mousedown(function (event) {
						var SCROLLSIZE = 90,
							iDiff = (jQuery(this).hasClass("sapSuiteUiCommonsTimelineScrollerIconWrapperLeft") ||
							jQuery(this).hasClass("sapSuiteUiCommonsTimelineScrollerIconWrapperTop")) ? -SCROLLSIZE : SCROLLSIZE;

						that._manualScrolling = true;
						that._performScroll(iDiff);
					});

					this.$().find(".sapSuiteUiCommonsTimelineScrollerIconWrapper").mouseup(function () {
						that._manualScrolling = false;
					}).mouseout(function () {
						that._manualScrolling = false;
					});
				}

				// setup wheel scrolling for horizontal timeline
				if (this.getEnableScroll()) {
					// horizontal mouse scroll
					this._$content.on("wheel", function (event) {
						var iDeltaY = event.originalEvent.deltaY,
							MIN = 30;
						// for some browsers delatY is very small when using wheel scroll
						// we set minimal value to prevent very slow scrolling
						if (iDeltaY < MIN && iDeltaY > MIN * -1) {
							iDeltaY = iDeltaY > 0 ? MIN : MIN * -1;
						}

						this.scrollLeft += iDeltaY * 2;
					});

					$this.find(".sapSuiteUiCommonsTimelineHorizontalScroller, .sapSuiteUiCommonsTimelineVerticalScroller").on("wheel", function (event) {
						var iDeltaY = event.originalEvent.deltaY;
						if (that._isVertical()) {
							that._$content.get(0).scrollTop += iDeltaY * 2;
						} else {
							that._$content.get(0).scrollLeft += iDeltaY * 2;
						}
					});
				}
			};

			/**
			 * Message strip creation
			 * @private
			 */
			Timeline.prototype._setupMessageStrip = function () {
				var that = this; //eslint-disable-line
				this._objects.register("messageStrip", function () {
					return new MessageStrip(that.getId() + "-messageStrip", {
						close: function () {
							that.setCustomMessage("");
							that.fireCustomMessageClosed();
						},
						showCloseButton: true
					});
				});

				this._objects.register("filterMessageText", function () {
					return new Text(that.getId() + "-filterMessageText", {});
				});

				this._objects.register("filterMessage", function () {
					var oText = that._objects.getFilterMessageText(),
						oToolbar, oIcon;

					oIcon = new Icon(that.getId() + "filterMessageIcon", {
						src: "sap-icon://decline",
						press: [that._clearFilter, that]
					});

					oToolbar = new OverflowToolbar(that.getId() + "-filterMessage", {
						design: "Info",
						content: [oText, new ToolbarSpacer(), oIcon]
					});

					oToolbar.addStyleClass("sapSuiteUiCommonsTimelineFilterInfoBar");
					oToolbar.setHeight("auto");

					return oToolbar;
				});
			};

			/**
			 * If there is any filter message to show, display filter bar
			 * @param {sap.ui.core.Control} ctrl Control for filter bar to be appended to
			 * @private
			 */
			Timeline.prototype._setMessageBars = function (ctrl) {
				var sMessage = this._getFilterMessage();
				if (sMessage) {
					ctrl.addChild(this._objects.getFilterMessage());
					this._objects.getFilterMessageText().setText(sMessage);
				}
			};

			/**
			 * Range filter dialog creation
			 * @private
			 */
			Timeline.prototype._setupRangeFilterPage = function () {
				var that = this; //eslint-disable-line
				this._rangeFilterType = null;

				this._objects.register("timeFilterSelect", function () {
					var oSelect = new Select(that.getId() + "-timeFilterSelect", {
						change: function (event) {
							that._rangeFilterType = event.getParameter("selectedItem").getProperty("key");
							that._setRangeFilter();
						},
						items: [
							new Item({
								text: resourceBundle.getText("TIMELINE_YEAR"),
								key: TimelineGroupType.Year
							}),
							new Item({
								text: resourceBundle.getText("TIMELINE_QUARTER"),
								key: TimelineGroupType.Quarter
							}),
							new Item({
								text: resourceBundle.getText("TIMELINE_MONTH"),
								key: TimelineGroupType.Month
							}),
							new Item({
								text: resourceBundle.getText("TIMELINE_DAY"),
								key: TimelineGroupType.Day
							})]
					});
					oSelect.addStyleClass("sapSuiteUiCommonsTimelineRangeSelect");
					return oSelect;
				});

				this._objects.register("timeRangeSlider", function () {
					var oSlider = new RangeSlider(that.getId() + "-timeRangeSlider", {
						enableTickmarks: true,
						visible: false,
						step: 1,
						change: function (oEvent) {
							var iMin = oSlider.getMin(),
								iMax = oSlider.getMax(),
								aRange = oSlider.getRange();

							that._filterDialogRangePage.setFilterCount(+(aRange[0] !== iMin || aRange[1] !== iMax));
						}
					});

					oSlider._updateTooltipContent = function (oTooltip, iNewValue) {
						var oLabelDate = that._fnAddDate(iNewValue);
						if (oLabelDate > that._maxDate) {
							oLabelDate = that._maxDate;
						}
						if (oLabelDate < that._minDate) {
							oLabelDate = that._minDate;
						}

						oTooltip.text(that._formatGroupBy(oLabelDate, that._rangeFilterType).title);
					};
					oSlider.addStyleClass("sapSuiteUiCommonsTimelineRangeFilter");
					oSlider.onAfterRendering = function () {
						RangeSlider.prototype.onAfterRendering.apply(this);

						var aChildren = this.$().find(".sapMSliderLabel");
						aChildren.eq(0).html(that._formatGroupBy(that._minDate, that._rangeFilterType).title);
						aChildren.eq(1).html(that._formatGroupBy(that._maxDate, that._rangeFilterType).title);
					};

					return oSlider;
				});

				this._objects.register("rangeTypeLbl", function () {
					return new Label(that.getId() + "-rangeTypeLbl", {
						text: resourceBundle.getText("TIMELINE_GROUP_BY_PERIOD") + ":"
					});
				});

				this._objects.register("rangeTypePanel", function () {
					var oPanel = new Panel(that.getId() + "-rangeTypePanel", {
						content: [that._objects.getRangeTypeLbl(), that._objects.getTimeFilterSelect()]
					});
					oPanel.addStyleClass("sapSuiteUiCommonsTimelineRangeFilterPanel");
					return oPanel;
				});

				this._objects.register("rangePanel", function () {
					return new FlexBox(that.getId() + "rangePanel", {
						direction: "Column",
						items: [that._objects.getRangeTypePanel(), that._objects.getTimeRangeSlider()]
					});
				});
			};

			/**
			 * Sets the first page of filter dialog based on the settings
			 * @param {sap.m.ViewSettingsDialog} oFilterDialog The dialog to be set up
			 * @private
			 */
			Timeline.prototype._setupFilterFirstPage = function (oFilterDialog) {
				if (oFilterDialog) {
					oFilterDialog.removeAllAggregation("filterItems");
					if (this.getShowItemFilter()) {
						oFilterDialog.addAggregation("filterItems", new ViewSettingsFilterItem({
							key: "items",
							text: this._getFilterTitle()
						}));
					}

					if (this.getShowTimeFilter()) {
						this._filterDialogRangePage = new ViewSettingsCustomItem({
							key: "range",
							text: resourceBundle.getText("TIMELINE_RANGE_SELECTION"),
							customControl: [this._objects.getRangePanel()]
						});
						oFilterDialog.addAggregation("filterItems", this._filterDialogRangePage);
					}
				}
			};

			/**
			 * Filter dialog creation
			 * @private
			 */
			Timeline.prototype._setupFilterDialog = function () {
				var that = this; //eslint-disable-line

				this._setupRangeFilterPage();

				this._objects.register("filterContent", function () {
					var iDiffStart, iDiffEnd,
						fnProcessToDataFilterPage = function (oPage) {
							if (!that._filterState.data) {
								// recreate from the scratch every time its opened as data may dynamically change
								that._setFilterList();
								oPage.removeAllItems();
								that._aFilterList.forEach(function (oItem) {
									var bSelected = jQuery.grep(that._currentFilterKeys, function (oSelectedItem) {
											return oItem.key === oSelectedItem.key;
										}).length > 0;

									oPage.addItem(new ViewSettingsFilterItem({
										key: oItem.key,
										text: oItem.text,
										selected: bSelected
									}));
								});
							}
							that._filterState.data = true;
						},
						fnShowErrorToast = function () {
							MessageToast.show(resourceBundle.getText("TIMELINE_NO_LIMIT_DATA"));
						},
						fnProcessToRangeFilterPage = function () {
							if (!that._filterState.range) {
								oFilterDialog.setBusy(true); //eslint-disable-line
								that._getTimeFilterData().then(function () {
									oFilterDialog.setBusy(false); //eslint-disable-line

									if ((!that._minDate || !that._maxDate) ||
										(!(that._minDate instanceof Date) || !(that._maxDate instanceof Date))) {
										fnShowErrorToast();
										return;
									}

									if (!that._rangeFilterType) {
										// first time load - calculate range type by date difference
										that._rangeFilterType = that._calculateRangeTypeFilter();
									}

									if (that._startDate === null && that._endDate === null) {
										that._setRangeFilter();
									} else {
										// convert selected date time to integer number (difference from the start) to correctly setup time range selector
										iDiffStart = that._fnDateDiff(that._rangeFilterType, that._minDate, that._startDate);
										iDiffEnd = that._fnDateDiff(that._rangeFilterType, that._minDate, that._endDate);

										that._objects.getTimeRangeSlider().setRange([iDiffStart, iDiffEnd]);
									}

									// reselect drop down with type
									that._objects.getTimeFilterSelect().setSelectedKey(that._rangeFilterType);

									// process dialog setup
									that._objects.getTimeRangeSlider().setVisible(true);
									that._objects.getTimeRangeSlider().invalidate();
								}).catch(function () {
									oFilterDialog.setBusy(false); //eslint-disable-line
									fnShowErrorToast();
								});

								that._filterState.range = true;
							}
						},
						oFilterDialog = new ViewSettingsDialog(that.getId() + "-filterContent", {
							confirm: function (oEvent) {
								// collect filter items
								var aItems = oEvent.getParameter("filterItems"),
									oSlider, iMin, iMax, aRange, bRange;
								that._currentFilterKeys = aItems.map(function (oItem) {
									return {
										key: oItem.getProperty("key"),
										text: oItem.getProperty("text")
									};
								});

								// collect time range items
								oSlider = that._objects.getTimeRangeSlider();
								aRange = oSlider.getRange();
								iMin = oSlider.getMin();
								iMax = oSlider.getMax();

								that._startDate = null;
								that._endDate = null;

								if (aRange[0] !== iMin || aRange[1] !== iMax) {
									that._startDate = that._fnAddDate(Math.min.apply(null, aRange), DateRoundType.DOWN);
									that._endDate = that._fnAddDate(Math.max.apply(null, aRange), DateRoundType.UP);
									bRange = true;
								}

								that._filterData(bRange);
							},
							resetFilters: function (oEvent) {
								var oSlider = that._objects.getTimeRangeSlider();
								oSlider.setValue(oSlider.getMin());
								oSlider.setValue2(oSlider.getMax());
								that._filterDialogRangePage.setFilterCount(0);
							},
							filterDetailPageOpened: function (oItem) {
								var sKey = oItem.getParameter("parentFilterItem").getProperty("key");
								if (sKey === "items") {
									fnProcessToDataFilterPage(oItem.getParameter("parentFilterItem"));
								}
								if (sKey === "range") {
									fnProcessToRangeFilterPage();
								}
							}
						});

					that._setupFilterFirstPage(oFilterDialog);

					return oFilterDialog;
				});
			};

			/**
			 * Header toolbar creation + icons
			 * @private
			 */
			Timeline.prototype._setupHeaderToolbar = function () {
				var that = this, //eslint-disable-line
					fnRegisterControl = function (oOptions) {
						that._objects.register(oOptions.name, function () {
							var btn = new OverflowToolbarButton(that.getId() + "-" + oOptions.name, {
								type: ButtonType.Transparent,
								icon: oOptions.icon,
								tooltip: oOptions.tooltip,
								press: oOptions.fnPress
							});

							btn.setLayoutData(new OverflowToolbarLayoutData({
								priority: oOptions.priority
							}));

							return btn;
						});
					};

				fnRegisterControl({
					name: "filterIcon",
					icon: "sap-icon://add-filter",
					tooltip: resourceBundle.getText("TIMELINE_FILTER_BY"),
					fnPress: [that._openFilterDialog, that],
					priority: OverflowToolbarPriority.NeverOverflow,
					visible: that.getShowItemFilter() || that.getShowTimeFilter()
				});

				fnRegisterControl({
					name: "sortIcon",
					icon: "sap-icon://arrow-bottom",
					tooltip: resourceBundle.getText("TIMELINE_SORT"),
					fnPress: [that._sortClick, that],
					priority: OverflowToolbarPriority.High,
					visible: that.getSort() && that.getShowSort()
				});

				var oToolbarSpacer = new ToolbarSpacer();

				this._objects.register("searchFieldLabel", function () {
					return new InvisibleText(that.getId() + "-searchFieldLabel", {
						text: resourceBundle.getText("TIMELINE_ACCESSIBILITY_SEARCH")
					});
				});

				this._objects.register("searchField", function () {
					var btn = new SearchField(that.getId() + "-searchField", {
						width: "14rem",
						ariaLabelledBy: that._objects.getSearchFieldLabel().getId(),
						search: function (oEvent) {
							that._search(oEvent.getSource().getValue());
						},
						visible: that.getShowSearch()
					});
					btn.setLayoutData(new OverflowToolbarLayoutData({
						priority: OverflowToolbarPriority.Low
					}));

					return btn;
				});

				this._objects.register("headerBar", function () {
					var aContent = [];
					if (that._isVertical()) {
						aContent = [
							oToolbarSpacer,
							that._objects.getSearchFieldLabel(),
							that._objects.getSearchField(),
							that._objects.getSortIcon(),
							that._objects.getFilterIcon()
						];
					} else {
						aContent = [
							that._objects.getSortIcon(),
							that._objects.getFilterIcon(),
							that._objects.getSearchFieldLabel(),
							that._objects.getSearchField()
						];
					}

					var oHeaderBar = new OverflowToolbar(that.getId() + "-headerBar", {
						content: aContent,
						visible: that.getShowHeaderBar()
					});

					oHeaderBar.addStyleClass("sapSuiteUiCommonsTimelineHeaderBar");
					oHeaderBar.setParent(that);

					return oHeaderBar;
				});
			};

			/**
			 * Initializes elements for accessibility support.
			 * @private
			 */
			Timeline.prototype._setupAccessibilityItems = function () {
				var that = this; //eslint-disable-line
				this._objects.register("accessibilityTitle", function () {
					return new InvisibleText(that.getId() + "-accessibilityTitle", {
						text: resourceBundle.getText("TIMELINE_ACCESSIBILITY_TITLE")
					});
				});
			};
		}
	};

	return TimelineRenderManager;
}, true);

}; // end of sap/suite/ui/commons/TimelineRenderManager.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.flexibility.Timeline.flexibility') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.flexibility.Timeline.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/flexibility/Timeline.flexibility",[
	"jquery.sap.global",
	"./changeHandler/PropertyChangeMapper"
], function (jQuery, PropertyChangeMapper) {
	"use strict";

	var ID_PROPERTY_MAP = Object.freeze({
		"-sortIcon": "showSort",
		"-filterIcon": ["showItemFilter", "showTimeFilter"],
		"-searchField": "showSearch",
		"-headerBar": "showHeaderBar"
	});

	function getProperty(sId) {
		var sKey;
		for (sKey in ID_PROPERTY_MAP) {
			if (jQuery.sap.endsWith(sId, sKey)) {
				return ID_PROPERTY_MAP[sKey];
			}
		}
		jQuery.sap.log.fatal("Unkonw id of an inner component: " + sId);
		return null;
	}

	return {
		"hideToolbarItem": new PropertyChangeMapper(function (oSpecificChangeInfo) {
			var sId = oSpecificChangeInfo.removedElement.id;
			return getProperty(sId);
		}, false),
		"unhideToolbarItem": new PropertyChangeMapper(function (oSpecificChangeInfo) {
			var sId = oSpecificChangeInfo.revealedElementId;
			return getProperty(sId);
		}, true),
		"hideControl": "default",
		"unhideControl": "default",
		"moveControls": "default"
	};
}, /* bExport= */ true);
}; // end of sap/suite/ui/commons/flexibility/Timeline.flexibility.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.PropertyThreshold') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.Threshold.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.PropertyThreshold'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/PropertyThreshold",[
		"jquery.sap.global",
		"sap/ui/core/Control",
		"sap/suite/ui/commons/statusindicator/util/ThemingUtil"
	],
	function (jQuery, Control, ThemingUtil) {
		"use strict";

		/**
		 * Constructor for a new PropertyThreshold.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is provided
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Property threshold defines how the shapes included in the status indicator should be filled
		 * when the status indicator's percentage value is below the given threshold.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.PropertyThreshold
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var PropertyThreshold = Control.extend("sap.suite.ui.commons.statusindicator.PropertyThreshold",
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Defines the color used to fill the shapes included in the status indicator.
						 */
						fillColor: {type: "sap.m.ValueCSSColor", defaultValue: "Neutral"},

						/**
						 * Defines the maximum value up to which the threshold setting should apply.
						 */
						toValue: {type: "int", defaultValue: 0},

						/**
						 * ARIA label for this threshold to be used by screen reader software.
						 */
						ariaLabel : {type : "string", defaultValue: null}
					}
				}
			});

		PropertyThreshold.prototype._getCssFillColor = function(){
			if (!this._cssFillColor) {
				this._cssFillColor = ThemingUtil.resolveColor(this.getFillColor());
			}

			return this._cssFillColor;
		};

		return PropertyThreshold;

	}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/statusindicator/PropertyThreshold.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.ShapeGroup') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/* globals Promise:true */

// Provides control sap.suite.ui.commons.statusindicator.ShapeGroup.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.ShapeGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Configuration'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/ShapeGroup",[
		"jquery.sap.global",
		"sap/ui/core/Control",
		"sap/ui/core/Core",
		"sap/ui/core/Configuration",
		"sap/suite/ui/commons/statusindicator/util/ProgressHandler"
	],
	function (jQuery, Control, Core, Configuration, ProgressHandler) {
		"use strict";

		/**
		 * Constructor for a new ShapeGroup.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Group of shapes that display status indicator value. Shapes in the group are filled in parallel, actual
		 * animation might depend on particular shape setting.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.ShapeGroup
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var ShapeGroup = Control.extend("sap.suite.ui.commons.statusindicator.ShapeGroup",
			/** @lends sap.suite.ui.commons.ShapeGroup.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Weight of the group, relative to other groups in the status indicator. This property
						 * allows you to distribute the status indicator's value between groups of shapes that it
						 * contains. For example, for three groups with weights 10, 10, and 20 (total weight 40),
						 * the status indicator's value is distributed in the following way:
						 * <ul>
						 *   <li>If the status indicator's value is below 25% (10 out of 40), the first group
						 * of shapes (weight 10) is partially filled, depending on the percentage value. For example,
						 * if the percentage value is 5, the first group of shapes is 1/5-full. The second
						 * and the third groups are empty.</li>
						 *   <li>If the status indicator's value is at least 25% but below 50%, the first group
						 * of shapes (weight 10) is filled, the second group (also weight 10) is partially filled, and
						 * the third group (weight 20) appears empty.</li>
						 *   <li>If the status indicator's value is at least 50% but below 100%, the first two
						 * groups of shapes (weight 10 each) are filled, but the third group (weight 20) is only
						 * partially filled.</li>
						 *   <li>If the status indicator's value is 100, all three groups of shapes are filled.</li>
						 * </ul>
						 *
						 */
						weight: {type: "int", defaultValue: 10} // TODO: always positive
					},
					defaultAggregation: "shapes",
					aggregations: {
						/**
						 * List of shapes that belong to this group.
						 */
						shapes: {type: "sap.suite.ui.commons.statusindicator.Shape", multiple: true}
					}
				}
			});

		ShapeGroup.prototype.init = function () {
			this._iTargetValue = 0;
			this._oAnimationPropertiesResolver = null;
		};

		ShapeGroup.prototype._injectAnimationPropertiesResolver = function (oAnimationPropertiesResolver) {
			this._oAnimationPropertiesResolver = oAnimationPropertiesResolver;
			this.getShapes().forEach(function (oShape) {
				oShape._injectAnimationPropertiesResolver(oAnimationPropertiesResolver);
			});
		};

		ShapeGroup.prototype.addShape = function (oShape) {
			this.addAggregation("shapes", oShape, true);
			oShape._injectAnimationPropertiesResolver(this._oAnimationPropertiesResolver);
		};

		ShapeGroup.prototype._setValue = function (iValue) {
			var that = this;
			this._iTargetValue = iValue;

			if (!this._isAnimationAllowed()) {
				this.getShapes().forEach(function (oShape) {
					oShape._updateDom(that._iTargetValue);
				});
				return Promise.resolve();
			}

			// cancel any ongoing group animation
			if (this.oCurrentProgressHandler && this.oCurrentProgressHandler.isInProgress()) {
				this.oCurrentProgressHandler.cancel();
			}

			this.oCurrentProgressHandler = new ProgressHandler(function (oProgressNotifier) {
				var iNow = performance.now();

				that._animationStep(that._getAnimationDelayHandler(iNow), iNow, oProgressNotifier, iNow);
			});
			return this.oCurrentProgressHandler.start();
		};

		ShapeGroup.prototype._getAnimationDelayHandler = function (iAnimationStartTime) {
			if (!this._postStartupAnimationDelayHandler) {
				this._postStartupAnimationDelayHandler = {
					delayAnimation: function () {
						return false;
					}
				};

				return {
					delayAnimation: function (oShape, iCurrentTime) {
						return oShape.getAnimationOnStartup() && (iAnimationStartTime + oShape.getAnimationOnStartupDelay() > iCurrentTime);
					}
				};
			}

			return this._postStartupAnimationDelayHandler;
		};

		ShapeGroup.prototype._animationStep = function (oDelayHandler, iLastUpdateTime, oProgressHandler, iCurrentTime) {
			// sometimes browsers (Chrome) return current time from the past, hence, animation would get screwed as
			// we rely on the assumption that iLastUpdateTime <= iCurrentTime
			iCurrentTime = Math.max(iCurrentTime, iLastUpdateTime);

			if (oProgressHandler.isCanceled()) {
				oProgressHandler.stop({
					cancelled: true
				});
				return;
			}

			var bAnimationFinished = true;
			var iTargetValue = this._iTargetValue;

			this.getShapes().forEach(function (oShape) {
				var iDisplayedValue = oShape.getDisplayedValue();

				if (iDisplayedValue === iTargetValue) {
					return;
				}

				if (oDelayHandler.delayAnimation(oShape, iCurrentTime)) {
					bAnimationFinished = false;

					return;
				}

				var iTargetTime = iLastUpdateTime + oShape.getFullAnimationDuration() * Math.abs(iTargetValue - iDisplayedValue) / 100;

				if (iCurrentTime >= iTargetTime) {
					oShape._updateDom(iTargetValue);
				} else {
					var iDifferenceOfValue = iTargetValue - iDisplayedValue;
					var iDifferenceOfTimes = iTargetTime - iLastUpdateTime;
					var currentRatio = (iCurrentTime - iLastUpdateTime) / iDifferenceOfTimes;

					oShape._updateDom(iDifferenceOfValue * currentRatio + iDisplayedValue);

					bAnimationFinished = false;
				}
			});

			if (bAnimationFinished) {
				oProgressHandler.finish();
			} else {
				window.requestAnimationFrame(this._animationStep.bind(this, oDelayHandler, iCurrentTime, oProgressHandler));
			}
		};

		ShapeGroup.prototype._showsFullProgress = function () {
			return !this.getShapes().some(function (oShape) {
				return oShape.getDisplayedValue() !== 100;
			});
		};

		ShapeGroup.prototype._setInitialValue = function (iInitialValue) {
			this._iTargetValue = iInitialValue;

			this.getShapes().forEach(function (oShape) {
				if (!oShape.getAnimationOnStartup()) {
					oShape._setInitialValue(iInitialValue);
				}
			});
		};

		ShapeGroup.prototype._getHtmlElements = function () {
			var aResult = [];

			this.getShapes().forEach(function (oShape) {
				//aResult.push.apply(aResult, oShape.getHtmlElements());
				aResult = aResult.concat(oShape._getHtmlElements());
			});

			return aResult;
		};

		ShapeGroup.prototype._isAnimationAllowed = function () {
			var oApplicationConfiguration = Core.getConfiguration();
			var sAnimationMode = oApplicationConfiguration.getAnimationMode();

			return sAnimationMode === Configuration.AnimationMode.full;
		};

		return ShapeGroup;

	});

}; // end of sap/suite/ui/commons/statusindicator/ShapeGroup.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.HtmlElement') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.util.HtmlElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/util/HtmlElement",[ "jquery.sap.global", "sap/ui/base/Object", "sap/ui/core/Control", "./HtmlElementRenderer" ],
	function(jQuery, BaseObject, Control, HtmlElementRenderer) {
	"use strict";

	/**
	 * Creates a HtmlElement which resembles one HTML tag.
	 *
	 * @class HtmlElement A model class for holding information about one HTML tag.
	 *
	 * @extends sap.ui.base.Object
	 *
	 * @param {string} sName Tag name (eg. div, ul etc.).
	 *
	 * @constructor
	 * @alias sap.suite.ui.commons.util.HtmlElement
	 * @protected
	 */
	var HtmlElement = BaseObject.extend("sap.suite.ui.commons.util.HtmlElement", {
		constructor: function(sName) {
			BaseObject.apply(this, arguments);

			jQuery.sap.assert(typeof sName === "string", "Element name must be a string.");
			this._sName = sName;
			this._mAttributes = {};
			this._aChildren = [];
		}
	});

	/**
	 * Returns a renderer for this tag.
	 * @returns {sap.suite.ui.commons.util.HtmlElementRenderer} The newly created renderer instance
	 * @protected
	 */
	HtmlElement.prototype.getRenderer = function() {
		return new HtmlElementRenderer(this);
	};

	/**
	 * Sets id attribute.
	 * @param {string} sId Id to set.
	 * @param {boolean} [bAddSapUi="false"] If true, data-sap-ui will be set to the Id as well.
	 * @protected
	 */
	HtmlElement.prototype.setId = function(sId, bAddSapUi) {
		jQuery.sap.assert(typeof sId === "string", "Id must by a string.");
		this.setAttribute("id", sId);
		if (bAddSapUi) {
			this.setAttribute("data-sap-ui", sId);
		}
	};

	/**
	 * Sets an attribute.
	 * @param {string} sKey Attribute name.
	 * @param {string|number|boolean} oValue Value of an attribute.
	 * @param {boolean} [bEscape="false"] Tells if the value should be escaped using encodeHTML.
	 * @protected
	 */
	HtmlElement.prototype.setAttribute = function(sKey, oValue, bEscape) {
		jQuery.sap.assert(typeof sKey === "string", "Key must by a string.");
		jQuery.sap.assert(typeof oValue === "string" || typeof oValue === "number" || typeof oValue === "boolean", "Value must be a string, number or boolean");
		var sVal = String(oValue);
		if (bEscape) {
			sVal = jQuery.sap.encodeHTML(sVal);
		}
		if (sKey in this._mAttributes) {
			jQuery.sap.log.warning("Replacing an already existing attribute.", "Attribute key = " + sKey + ", old value = " + this._mAttributes[sKey] + ", new value = " + sVal, this);
		}
		this._mAttributes[sKey] = sVal;
	};

	/**
	 * Adds a class.
	 * @param {string} sClass - CSS class to add.
	 * @protected
	 */
	HtmlElement.prototype.addClass = function(sClass) {
		jQuery.sap.assert(typeof sClass === "string", "Class must be a string.");
		if (!this._mAttributes.class) {
			this._mAttributes.class = [];
		} else {
			jQuery.sap.assert(jQuery.isArray(this._mAttributes.class), "Cannot add class to customly added classes.");
		}
		this._mAttributes.class.push(sClass);
	};

	/**
	 * Adds a HTML style (eg. "color:red").
	 * @param {string} sName Name of the style (eg. margin, color).
	 * @param {string|number} oValue Value of the style.
	 * @protected
	 */
	HtmlElement.prototype.addStyle = function(sName, oValue) {
		jQuery.sap.assert(typeof sName === "string", "Name must be a string.");
		jQuery.sap.assert(typeof oValue === "string" || typeof oValue === "number", "Value must be a string or a number.");
		if (!this._mAttributes.style) {
			this._mAttributes.style = [];
		} else {
			jQuery.sap.assert(jQuery.isArray(this._mAttributes.style), "Cannot add style to customly added styles.");
		}
		this._mAttributes.style.push(sName + ":" + oValue);
	};

	/**
	 * Adds all html relevant data from UI5 control. It sets ID, adds all custom data and adds custom style classes.
	 * This function should be called on the element which resembles the rendered control. It's usually the top element.
	 * @param {sap.ui.core.Control} oControl Control to load data from. Usually the control which resembles this element.
	 * @protected
	 */
	HtmlElement.prototype.addControlData = function(oControl) {
		jQuery.sap.assert(oControl instanceof Control, "Control must be a sapui5 control.");
		this.setId(oControl.getId(), true);
		var that = this; //eslint-disable-line
		oControl.getCustomData().forEach(function(oData) {
			var oCheckResult = oData._checkWriteToDom(oControl);
			if (oCheckResult) {
				that.setAttribute(oCheckResult.key, oCheckResult.value, true);
			}
		});
		if (oControl.aCustomStyleClasses && oControl.aCustomStyleClasses.length > 0) {
			oControl.aCustomStyleClasses.forEach(function(cls) {
				that.addClass(jQuery.sap.encodeHTML(cls));
			});
		}
	};

	/**
	 * Adds a child to the element. A child can be either text, another HtmlElement or a Control. Children will e rendered
	 * as a content of this element.
	 * @param {string|sap.suite.ui.commons.util.HtmlElement|sap.ui.core.Control} oChild Child to add.
	 * @protected
	 */
	HtmlElement.prototype.addChild = function(oChild) {
		jQuery.sap.assert(typeof oChild === "string" || oChild instanceof HtmlElement || oChild instanceof Control, "Child must be a string, HtmlElement or a Control.");
		this._aChildren.push(oChild);
	};

	/**
	 * Adds a string child and escapes it using encodeHTML.
	 * @param {string} sText Text to add.
	 * @param {boolean} bConvertLineBreakToBr If true, \n will be converted to <br>.
	 * @protected
	 */
	HtmlElement.prototype.addChildEscaped = function(sText, bConvertLineBreakToBr) {
		jQuery.sap.assert(typeof sText === "string", "sText must be a string");
		sText = jQuery.sap.encodeHTML(sText);
		if (bConvertLineBreakToBr) {
			sText = sText.replace(/&#xa;/g, "<br>");
		}
		this._aChildren.push(sText);
	};

	return HtmlElement;
});

}; // end of sap/suite/ui/commons/util/HtmlElement.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.ProcessFlow') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.ProcessFlow.
jQuery.sap.declare('sap.suite.ui.commons.ProcessFlow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/ProcessFlow",[
		"jquery.sap.global",
		"./library",
		"sap/m/library",
		"sap/ui/core/Control",
		"sap/suite/ui/commons/ProcessFlowConnection",
		"sap/suite/ui/commons/ProcessFlowLaneHeader",
		"sap/ui/Device",
		"sap/ui/core/ResizeHandler"
	],
	function(jQuery, library, MobileLibrary, Control, ProcessFlowConnection, ProcessFlowLaneHeader, Device, ResizeHandler) {
		"use strict";

		/**
		 * Constructor for a new ProcessFlow.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * Complex control that enables you to display documents or other items in their flow.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.ProcessFlow
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var ProcessFlow = Control.extend("sap.suite.ui.commons.ProcessFlow", /** @lends sap.suite.ui.commons.ProcessFlow.prototype */ { metadata: {
			library: "sap.suite.ui.commons",
			properties: {
				/**
				 * This property defines the folded corners for the single node control. The following values exist:
				 * - true: means folded corner
				 * - false/null/undefined: means normal corner
				 */
				foldedCorners: { type: "boolean", group: "Misc", defaultValue: false },

				/**
				 * By default, the control body is embedded into a scroll container of fixed size, so the user
				 * can put the control into a fixed size layout.
				 * When the control body (the graph) gets larger, the container cuts the overflowing parts of the graph and the cut parts can be displayed by scrolling the control body.
				 * When the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
				 *
				 * The scrolling feature can be turned off by setting this property value to false,
				 * so the width/height of the whole control will change as the flow graph gets smaller/larger.
				 * In this case the control body could not be scrolled, as the control body size matches the control container size.
				 */
				scrollable: { type: "boolean", group: "Misc", defaultValue: true },

				/**
				 * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
				 */
				wheelZoomable: { type: "boolean", group: "Behavior", defaultValue: true },

				/**
				 * Defines if the connection labels are shown or not.
				 */
				showLabels: { type: "boolean", group: "Appearance", defaultValue: false }
			},
			defaultAggregation: "lanes",
			aggregations: {
				/**
				 * This is the aggregation of the connection controls put into the table to the calculated cells.
				 */
				_connections: {
					type: "sap.suite.ui.commons.ProcessFlowConnection",
					multiple: true,
					singularName: "_connection",
					visibility: "hidden"
				},

				/**
				 * This is the aggregation of nodes in the process flow control.
				 */
				nodes: { type: "sap.suite.ui.commons.ProcessFlowNode", multiple: true, singularName: "node" },

				/**
				 * This is a header of the table for the process flow control.
				 */
				lanes: { type: "sap.suite.ui.commons.ProcessFlowLaneHeader", multiple: true, singularName: "lane" }
			},
			events: {
				/**
				 * This event is fired when a process flow node title was
				 * clicked. The user can access the clicked process flow node control object which is the only argument of the event handler.
				 * @deprecated Since version 1.26.
				 * Should not be used any longer, use nodePress event instead ( click on the node)
				 */
				nodeTitlePress: {
					deprecated: true,
					parameters: {

						/**
						 * This object represents the wrapped process flow node object.
						 */
						oEvent: { type: "object" }
					}
				},

				/**
				 * This event is fired when a process flow node was clicked.
				 */
				nodePress: {
					parameters: {

						/**
						 * This object represents the wrapped process flow node object.
						 */
						oEvent: { type: "object" }
					}
				},

				/**
				 * This event is fired when a process flow connection label was clicked.
				 */
				labelPress: {
					parameters: {

						/**
						 * This object represents the label information.
						 */
						oEvent: { type: "object" }
					}
				},

				/**
				 * This event is fired when the header column is clicked. This event is available only in header mode, i.e. when no nodes are defined.
				 */
				headerPress: {
					parameters: {

						/**
						 * This object represents the wrapped process flow lane header object.
						 */
						oEvent: { type: "object" }
					}
				},

				/**
				 * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an issue with the data. The console contains the detailed error description with the errors.
				 */
				onError: {
					parameters: {

						/**
						 * This parameters contains the localized string with error message.
						 */
						oEvent: { type: "object" }
					}
				}
			}
		}
	});

	/* =========================================================== */
	/* Variables and Constants                                     */
	/* =========================================================== */

	/*
	 * Resource bundle for the localized strings.
	 */
	ProcessFlow.prototype._resBundle = null;

	/**
	 * Cell edge manipulation constants
	 *
	 * @static
	 */
	ProcessFlow._cellEdgeConstants = {
		"LU": "tl", //It is going from the left to the middle and afterwards up
		"LD": "lb", //It is going from the left to the middle and afterwards down
		"DU": "tb", //It is going from the bottom to the middle and afterwards up
		"LR": "rl", //It is going from the left to the middle and afterwards to the right
		"DR": "rt", //It is going from the bottom to the middle and afterwards to the right
		"UR": "rb"  //It is going from the top to the middle and afterwards to the right
	};

	/**
	 * ProcessFlow constants
	 * @static
	 */
	ProcessFlow._constants = {
		scrollContainer: "scrollContainer",
		counterLeft: "counterLeft",
		counterRight: "counterRight",
		arrowScrollRight: "arrowScrollRight",
		arrowScrollRightMinus: "-arrowScrollRight",
		arrowScrollLeft: "arrowScrollLeft",
		arrowScrollLeftMinus: "-arrowScrollLeft",
		top: "top",
		px: "px",
		parents: "parents",
		left: "left",
		right: "right"
	};

	/**
	 * ProcessFlow mouse events constants
	 * @static
	 */
	ProcessFlow._mouseEvents = {
		mouseMove: "mousemove",
		mouseDown: "mousedown",
		mouseUp: "mouseup",
		mouseLeave: "mouseleave",
		mouseEnter: "mouseenter",
		touchStart: "touchstart",
		sapTouchStart: "saptouchstart",
		touchEnd: "touchend",
		sapTouchCancel: "saptouchcancel"
	};

	/**
	 * Move Enumeration.
	 *
	 * @static
	 */
	ProcessFlow._enumMoveDirection = {
		"LEFT": "left",
		"RIGHT": "right",
		"UP": "up",
		"DOWN": "down"
	};

	/**
	 * Zoom level for the control. It is propagated to all created sub controls.
	 */
	ProcessFlow.prototype._zoomLevel = library.ProcessFlowZoomLevel.Two;

	/**
	 * The wheel events time-out.
	 */
	ProcessFlow.prototype._wheelTimeout = null;

	/**
	 * Set to true when the focus is changing to another element.
	 */
	ProcessFlow.prototype._isFocusChanged = false;

	/**
	 * The wheel events time stamp for the last wheel event occurrence.
	 */
	ProcessFlow.prototype._wheelTimestamp = null;

	/**
	 * The wheel events flag, if a wheel event was recently processed.
	 */
	ProcessFlow.prototype._wheelCalled = false;

	/**
	 * The internal matrix after calculation. Use for keyboard movement.
	 */
	ProcessFlow.prototype._internalCalcMatrix = false;

	/**
	 * The internal list of connection mappings (source/target/connectionParts)
	 */
	ProcessFlow.prototype._internalConnectionMap = null;

	/**
	 * Internal lanes, which can differ from original ones. Especially when more elements are in
	 * the same lane.
	 */
	ProcessFlow.prototype._internalLanes = false;

	/**
	 * Definition for jump over more elements based on the visual design.
	 */
	ProcessFlow.prototype._jumpOverElements = 5;

	/**
	 * Last (node or connectionLabel) element with navigation focus. It is marked when the focus out event
	 * is handled.
	 */
	ProcessFlow.prototype._lastNavigationFocusElement = null;

	/**
	 * Internal PF flag showing whether we operate in highlighted mode.
	 */
	ProcessFlow.prototype._bHighlightedMode = false;

	/**
	 * Internal PF flag showing whether we operate in layout-optimized mode.
	 */
	ProcessFlow.prototype._isLayoutOptimized = false;

	/**
	 * Set up the cursor classes.
	 */
	ProcessFlow.prototype._defaultCursorClass = "sapSuiteUiDefaultCursorPF";

	if (Device.browser.msie || Device.browser.edge) {
		ProcessFlow.prototype._grabCursorClass = "sapSuiteUiGrabCursorIEPF";
		ProcessFlow.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorIEPF";
	} else {
		ProcessFlow.prototype._grabCursorClass = "sapSuiteUiGrabCursorPF";
		ProcessFlow.prototype._grabbingCursorClass = "sapSuiteUiGrabbingCursorPF";
	}

	ProcessFlow.prototype._mousePreventEvents = "contextmenu dblclick";
	ProcessFlow.prototype._mouseEvents = "contextmenu mousemove mouseleave mousedown mouseup mouseenter";
	ProcessFlow.prototype._mouseWheelEvent = Device.browser.mozilla ? "DOMMouseScroll MozMousePixelScroll" : "mousewheel wheel";
	ProcessFlow.prototype._headerHasFocus = false;
	ProcessFlow.prototype._isInitialZoomLevelNeeded = true;

	/**
	 * Variables used for overflow scrolling.
	 */
	ProcessFlow.prototype._bDoScroll = !Device.system.desktop || Device.os.windows && Device.os.version >= 8;
	ProcessFlow.prototype._scrollStep = 192;
	ProcessFlow.prototype._bPreviousScrollForward = false; //Remember the item overflow state.
	ProcessFlow.prototype._bPreviousScrollBack = false;
	ProcessFlow.prototype._iInitialArrowTop = undefined;
	ProcessFlow.prototype._iInitialCounterTop = undefined;
	ProcessFlow.prototype._bRtl = false;
	ProcessFlow.prototype._arrowScrollable = null;
	ProcessFlow.prototype._iTouchStartScrollTop = undefined;
	ProcessFlow.prototype._iTouchStartScrollLeft = undefined;

	ProcessFlow.prototype._bSetFocusOnce = true;

	/* =========================================================== */
	/* Life-cycle Handling                                         */
	/* =========================================================== */

	ProcessFlow.prototype.init = function() {
		this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

		if (!this._resBundle) {
			this._resBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
		}
		this._internalLanes = [];

		//bind the events
		if (this._getScrollContainer()) {
			this._getScrollContainer().bind("keydown", jQuery.proxy(this.onkeydown, this));
		}
	};

	ProcessFlow.prototype.exit = function() {
		var aNodes = this.getNodes(),
			i;

		if (aNodes) {
			for (i = 0; i < aNodes.length; i++) {
				if (aNodes[i]) {
					aNodes[i].destroy();
				}
			}
			aNodes = null;
		}

		if (this._internalLanes) {
			for (i = 0; i < this._internalLanes.length; i++) {
				this._internalLanes[i].destroy();
			}
			this._internalLanes = null;
		}

		var aInternalConnectionAgg = this.getAggregation("_connections");
		if (aInternalConnectionAgg) {
			for (i = 0; i < aInternalConnectionAgg.length; i++) {
				aInternalConnectionAgg[i].destroy();
			}
			aInternalConnectionAgg = null;
		}

		if (this._oArrowLeft) {
			this._oArrowLeft.destroy();
		}

		if (this._oArrowRight) {
			this._oArrowRight.destroy();
		}

		if (this._resizeRegId) {
			ResizeHandler.deregister(this._resizeRegId);
		}

		if (this._internalCalcMatrix) {
			delete this._internalCalcMatrix;
			this._internalCalcMatrix = null;
		}

		if (this._getScrollContainer()) {
			this._getScrollContainer().unbind(this._mousePreventEvents, this._handlePrevent);
			this._getScrollContainer().unbind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
			this._getScrollContainer().unbind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this));
			this._getScrollContainer().unbind("keydown", jQuery.proxy(this.onkeydown, this));
			this._getScrollContainer().unbind("scroll", jQuery.proxy(this._onScroll, this));
		}
	};

	/**
	 * Standard method called before control rendering.
	 */
	ProcessFlow.prototype.onBeforeRendering = function() {
		if (this._getScrollContainer()) {
			this._getScrollContainer().unbind(this._mousePreventEvents, this._handlePrevent);
			this._getScrollContainer().unbind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
			this._getScrollContainer().unbind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this));
			this._getScrollContainer().unbind("keydown", jQuery.proxy(this.onkeydown, this));
			this._getScrollContainer().unbind("scroll", jQuery.proxy(this._onScroll, this));
		}
	};

	/**
	 * Standard method called after control rendering.
	 */
	ProcessFlow.prototype.onAfterRendering = function() {
		var bScrollable = false,
			$content = this.$("scroll-content"),
			iHeight,
			iWidth,
			iScrollWidth,
			iScrollHeight;

		//Initializes scrolling.
		this._checkOverflow(this._getScrollContainer().get(0), this.$());

		this.iCursorPositionX = 0;
		this.iCursorPositionY = 0;

		if ($content && $content.length) {
			//Sets PF node icon cursors as inline styles, so they cannot be overwritten by applying a CSS class.
			this._getScrollContainer().find(".sapSuiteUiCommonsProcessFlowNode .sapUiIcon").css("cursor", "inherit");

			if (this.getScrollable()) {
				iHeight = parseInt(this._getScrollContainer().css("height").slice(0, -2), 10);
				iWidth = parseInt(this._getScrollContainer().css("width").slice(0, -2), 10);
				iScrollHeight = $content[0].scrollHeight;
				iScrollWidth = $content[0].scrollWidth;

				if (iScrollHeight <= iHeight && iScrollWidth <= iWidth) {
					this._clearHandlers(this._getScrollContainer());
					//No scrolling makes sense, so clean up the mouse handlers and switch the cursors.
					this._switchCursors(this._getScrollContainer(), this._grabCursorClass, this._defaultCursorClass);
				} else {
					this._switchCursors(this._getScrollContainer(), this._defaultCursorClass, this._grabCursorClass);
					bScrollable = true;
				}
			} else {
				this._clearHandlers(this._getScrollContainer());
				this._switchCursors(this._getScrollContainer(), this._grabCursorClass, this._defaultCursorClass);
				$content.css("position", "static");
			}

			if (bScrollable) {
				//Initialize top margin of arrow and counter.
				if (!this._iInitialArrowTop || !this._iInitialCounterTop) {
					this._iInitialArrowTop = parseInt(this.$(ProcessFlow._constants.arrowScrollRight).css(ProcessFlow._constants.top), 10);
					this._iInitialCounterTop = parseInt(this.$(ProcessFlow._constants.counterRight).css(ProcessFlow._constants.top), 10);
				}
				if (Device.os.windows && Device.system.combi && Device.browser.chrome) {
					//Win Surface: Chrome.
					this._getScrollContainer().bind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
					this._getScrollContainer().css("overflow", "auto");
				} else if (Device.os.windows && (Device.browser.msie && (Device.browser.version > 9) || Device.browser.edge)) {
					//Win Surface: IE 10 and higher, Edge.
					this._getScrollContainer().bind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
					this._getScrollContainer().css("overflow", "auto");
					this._getScrollContainer().css("-ms-overflow-style", "none");
				} else if (!Device.support.touch && !jQuery.sap.simulateMobileOnDesktop) {
					// Desktop
					this._getScrollContainer().bind(this._mouseEvents, jQuery.proxy(this._registerMouseEvents, this));
				} else {
					// Mobile: use native scrolling.
					this._clearHandlers(this._getScrollContainer());
					this._getScrollContainer().css("overflow", "auto");
				}
			} else if (this._bDoScroll) { //Not scrollable ProcessFlow: Set overflow for chevron navigation anyway.
				//Is Not Desktop OR Is Win8/Win10.
				this._getScrollContainer().css("overflow", "auto");
			} else {
				this._getScrollContainer().css("overflow", "hidden");
			}

			if (this.getWheelZoomable() && Device.system.desktop && !this._isHeaderMode()) {
				this._getScrollContainer().bind(this._mouseWheelEvent, jQuery.proxy(this._registerMouseWheel, this));
			}
			if (this._bDoScroll) {
				//Bind scroll event for mobile.
				this._getScrollContainer().bind("scroll", jQuery.proxy(this._onScroll, this));
			}
			this._resizeRegId = ResizeHandler.register(this, jQuery.proxy(ProcessFlow.prototype._onResize, this));
			if (this._isInitialZoomLevelNeeded) {
				this._initZoomLevel();
			}
			//Sets the focus to the next node if PF was in headers mode before rerendering.
			if (this._headerHasFocus) {
				this._headerHasFocus = false;
				var $nodeToFocus = this.$("scroll-content").children().children().children(1).children("td[tabindex='0']").first().children();
				var oNodeToFocus = sap.ui.getCore().byId($nodeToFocus[0].id);
				this._changeNavigationFocus(null, oNodeToFocus);
			}
		}
	};

	/* =========================================================== */
	/* Event Handling                                              */
	/* =========================================================== */

	/**
	 * Handles the on-touch-end event.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.ontouchend = function(oEvent) {
		if (oEvent.target && oEvent.target.id.indexOf("arrowScroll") !== -1) {
			this._onArrowClick(oEvent);
		} else {
			if (!Device.support.touch && !jQuery.sap.simulateMobileOnDesktop) {
				this.onAfterRendering();
			} else {
				this._adjustAndShowArrow();
			}

			if (oEvent === null || oEvent.oSource === undefined) {
				return;
			}
			oEvent.preventDefault();

			if (this._isHeaderMode()) {
				//Reset lanes as they could be redefined completely in headerPress Event - also necessary for merged lanes.
				this._internalLanes = [];
				this.fireHeaderPress(this);
			}
		}
	};

	/**
	 * Handles the prevent functionality of the events
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype._handlePrevent = function(oEvent) {
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
		}
		if (oEvent && !oEvent.isPropagationStopped()) {
			oEvent.stopPropagation();
		}
		if (oEvent && !oEvent.isImmediatePropagationStopped()) {
			oEvent.stopImmediatePropagation();
		}
	};

	/**
	 * Control resize handler for setting the cursor type/scroll setup.
	 *
	 * @private
	 */
	ProcessFlow.prototype._onResize = function() {
		var iActualTime = new Date().getTime();

		if (!this._iLastResizeEventTime || ((iActualTime - this._iLastResizeEventTime) < 50)) {
			//Start to handle after the second resize event (below 50ms).
			if (!this._iLastResizeHandlingTime || (iActualTime - this._iLastResizeHandlingTime > 500)) { //Handle each .5s.
				this.onAfterRendering();
				this._iLastResizeHandlingTime = new Date().getTime();
			}
		} else {
			this._iLastResizeHandlingTime = null;
		}

		this._iLastResizeEventTime = new Date().getTime();
	};

	/**
	 * Registration of mouse events
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype._registerMouseEvents = function(oEvent) {
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
		}
		switch (oEvent.type) {
			case ProcessFlow._mouseEvents.mouseMove:
				if (this._getScrollContainer().hasClass(this._grabbingCursorClass)) {
					if (sap.ui.getCore().getConfiguration().getRTL()) {
						this._getScrollContainer().scrollLeftRTL(this.iCursorPositionX - oEvent.pageX);
					} else {
						this._getScrollContainer().scrollLeft(this.iCursorPositionX - oEvent.pageX);
					}
					this._getScrollContainer().scrollTop(this.iCursorPositionY - oEvent.pageY);
					this._adjustAndShowArrow();
				}
				break;
			case ProcessFlow._mouseEvents.mouseDown:
				this._switchCursors(this._getScrollContainer(), this._defaultCursorClass, this._grabbingCursorClass);
				if (sap.ui.getCore().getConfiguration().getRTL()) {
					this.iCursorPositionX = this._getScrollContainer().scrollLeftRTL() + oEvent.pageX;
				} else {
					this.iCursorPositionX = this._getScrollContainer().scrollLeft() + oEvent.pageX;
				}
				this.iCursorPositionY = this._getScrollContainer().scrollTop() + oEvent.pageY;
				if (Device.system.combi) {
					//For Win8 surface no touch-start event is fired, but the mouse-down event instead do initialization here
					this._iTouchStartScrollLeft = this._getScrollContainer().scrollLeft();
					if (this.getScrollable()) {
						this._iTouchStartScrollTop = this._getScrollContainer().scrollTop();
					}
				}
				break;
			case ProcessFlow._mouseEvents.mouseUp:
				this._switchCursors(this._getScrollContainer(), this._grabbingCursorClass, this._grabCursorClass);
				break;
			case ProcessFlow._mouseEvents.mouseLeave:
				this._getScrollContainer().removeClass(this._grabbingCursorClass);
				this._getScrollContainer().removeClass(this._grabCursorClass);
				this._getScrollContainer().addClass(this._defaultCursorClass);
				break;
			case ProcessFlow._mouseEvents.mouseEnter:
				this._getScrollContainer().removeClass(this._defaultCursorClass);
				if (oEvent.buttons === null) {
					if (oEvent.which === 1) {
						this._getScrollContainer().addClass(this._grabbingCursorClass);
					} else {
						this._getScrollContainer().addClass(this._grabCursorClass);
					}
				} else if (oEvent.buttons === 0) {
					this._getScrollContainer().addClass(this._grabCursorClass);
				} else if (oEvent.buttons === 1) {
					this._getScrollContainer().addClass(this._grabbingCursorClass);
				}
				break;
			default:
		}
		//Check if the event was triggered by a click on a Connection Label and allow the propagation of the event.
		//Otherwise default click event in Connection Label is interrupted.
		if (oEvent.target && oEvent.target.parentElement &&
			oEvent.target.parentElement.parentElement &&
			oEvent.target.parentElement.parentElement.getMetadata &&
			oEvent.target.parentElement.parentElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
			if (oEvent && !oEvent.isPropagationStopped()) {
				oEvent.stopPropagation();
			}
			if (oEvent && !oEvent.isImmediatePropagationStopped()) {
				oEvent.stopImmediatePropagation();
			}
		}
	};

	/**
	 * ProcessFlow has the focus, therefore it is necessary to set the navigation focus.
	 * The method is called both when ProcessFlow gets the focus and at any click event.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.onfocusin = function(oEvent) {
		var oTarget;
		if (oEvent && oEvent.target && oEvent.target.id) {
			oTarget = sap.ui.getCore().byId(oEvent.target.id);
		}
		//Set the navigation focus on the lane header if in lanes-only mode.
		if (this._isHeaderMode()) {
			this._setFocusOnHeader(true);
		} else if (this._bSetFocusOnce && !(oTarget && oEvent.target.id.indexOf("arrowScroll"))) {
			//set the focus on the first node, if event target is not ConnectionLabel or scroll arrow
			this._bSetFocusOnce = false;
			if (oTarget && oTarget.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
				this._changeNavigationFocus(null, oTarget);
			} else if (!this._lastNavigationFocusElement) {
				var $nodeToFocus = this.$("scroll-content").children().children().children(1).children("td[tabindex='0']").first().children();
				var oNodeToFocus = sap.ui.getCore().byId($nodeToFocus[0].id);
				this._changeNavigationFocus(null, oNodeToFocus);
			} else if (this._lastNavigationFocusElement) {//there is a previous focus on process flow
				this._changeNavigationFocus(null, this._lastNavigationFocusElement);
			}
		}
	};

	/**
	 * ProcessFlow has the focus, therefore it is necessary to set the navigation focus.
	 * The method is called both when ProcessFlow loses the focus and at any click event.
	 *
	 * @private
	 */
	ProcessFlow.prototype.onfocusout = function() {
		this._bSetFocusOnce = true;
		if (this._lastNavigationFocusElement && this._lastNavigationFocusElement._getNavigationFocus()) {
			this._lastNavigationFocusElement._setNavigationFocus(false);
			if (this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				this._lastNavigationFocusElement.rerender();
			}
		}
	};

	/**
	 * Method called if the ProcessFlow has the navigation focus and the plus sign is pressed
	 *
	 * @private
	 * @since 1.26
	 */
	ProcessFlow.prototype.onsapplus = function() {
		this._isFocusChanged = true;
		this.zoomIn();
	};

	/**
	 * Method called if the ProcessFlow has the navigation focus and the minus sign is pressed
	 *
	 * @private
	 * @since 1.26
	 */
	ProcessFlow.prototype.onsapminus = function() {
		this._isFocusChanged = true;
		this.zoomOut();
	};

	/**
	 * Method called if ProcessFlow has the navigation focus and the Tab key is pressed.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.onsaptabnext = function(oEvent) {
		var bFocusNextElement = true;
		var $activeElement = oEvent.target;
		var oActiveElement = sap.ui.getCore().byId($activeElement.id);
		if (!oActiveElement && $activeElement && $activeElement.childElementCount > 0) {
			$activeElement = $activeElement.childNodes[0];
			oActiveElement = sap.ui.getCore().byId($activeElement.id);
		}

		if (!oActiveElement || (oActiveElement.getMetadata().getName() !== "sap.suite.ui.commons.ProcessFlowNode" && oActiveElement.getMetadata().getName() !== "sap.suite.ui.commons.ProcessFlowConnectionLabel")) {
			if (!this._isHeaderMode() && !this._lastNavigationFocusElement) {
				var $nodeToFocus = this.$("scroll-content").children().children().children(1).children("td[tabindex='0']").first().children();
				var oNodeToFocus = sap.ui.getCore().byId($nodeToFocus[0].id);
				this._changeNavigationFocus(null, oNodeToFocus);
				bFocusNextElement = false;
			} else if (this._lastNavigationFocusElement) {
				this._changeNavigationFocus(null, this._lastNavigationFocusElement);
				bFocusNextElement = false;
			}
		}
		if (this._isHeaderMode() && bFocusNextElement) { //lanes-only
			if (!this._headerHasFocus) {
				this._setFocusOnHeader(true);
			} else {
				this._setFocusOnHeader(false);
			}
		} else if (this._lastNavigationFocusElement && this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
			this._lastNavigationFocusElement.rerender();
		}

		//release focus
		var oNextElementToFocus;
		if (bFocusNextElement) {
			oNextElementToFocus = this.$().nextAll().find(":focusable").first();

			if (oNextElementToFocus.length === 0) {
				setNextFocusableElement.apply(this);
			}
			oNextElementToFocus.focus();
			jQuery.sap.log.debug("saptabnext: Keyboard focus has been changed to element:  id='" + oNextElementToFocus.id + "' outerHTML='" + oNextElementToFocus.outerHTML + "'");
			oNextElementToFocus = null;
		}
		oEvent.preventDefault();

		function setNextFocusableElement() {
			//set focus on the next element outside the ProcessFlow control
			var $parent = this.$().parent();
			do {
				oNextElementToFocus = $parent.next(":focusable");
				if (oNextElementToFocus.length === 0) {
					oNextElementToFocus = $parent.nextAll().find(":focusable").first();
				}
				$parent = $parent.parent();
			} while (($parent.length !== 0) && (oNextElementToFocus.length === 0));
		}
	};

	/**
	 * Method called if ProcessFlow has the navigation focus and Tab and Shift keys are pressed simultaneously.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.onsaptabprevious = function(oEvent) {
		var oPrevElementToFocus = null;
		var $activeElement = oEvent.target;
		if ((!this._lastNavigationFocusElement || !this._lastNavigationFocusElement._getNavigationFocus()) && oEvent.target && oEvent.target.childElementCount > 0) {
			$activeElement = oEvent.target.childNodes[0];
		}
		var oActiveElement = sap.ui.getCore().byId($activeElement.id);

		if (oActiveElement && (oActiveElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" || oActiveElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode")) {
			if (!this._isHeaderMode() && !this._lastNavigationFocusElement) {
				var $nodeToFocus = this.$("scroll-content").children().children().children(1).children("td[tabindex='0']").first().children();
				var oNodeToFocus = sap.ui.getCore().byId($nodeToFocus[0].id);
				this._changeNavigationFocus(null, oNodeToFocus);
			} else if (this._lastNavigationFocusElement) {//there is a previous focus on process flow
				this._changeNavigationFocus(null, this._lastNavigationFocusElement);
				oEvent.preventDefault();
				return;
			}
		}
		if (this._isHeaderMode()) { //lanes-only.
			if (!this._headerHasFocus) {
				this._setFocusOnHeader(true);
			} else {
				this._setFocusOnHeader(false);
				oPrevElementToFocus = this.$().prevAll().find(":focusable").first();
			}
		} else {
			oPrevElementToFocus = this.$().prev(":focusable");
			if (oPrevElementToFocus.length === 0) {
				oPrevElementToFocus = this.$().prevAll().find(":focusable").first();
			}
			if (this._lastNavigationFocusElement) {
				this._lastNavigationFocusElement._setNavigationFocus(false);
			}
			if (this._lastNavigationFocusElement && this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				this._lastNavigationFocusElement.rerender();
			}
		}

		//release focus
		if (oPrevElementToFocus) {
			//set focus on the previous element outside the ProcessFlow control
			if (oPrevElementToFocus.length === 0) {
				setPrevFocusableElement.apply(this);
			} else if (oPrevElementToFocus.first().length !== 0) {
				oPrevElementToFocus = jQuery(oPrevElementToFocus.first());
			}
			oPrevElementToFocus.focus();
			jQuery.sap.log.debug("saptabnext: Keyboard focus has been set on element:  id='" + oPrevElementToFocus.id + "' outerHTML='" + oPrevElementToFocus.outerHTML + "'");
			oPrevElementToFocus = null;
		}

		oEvent.preventDefault();

		function setPrevFocusableElement() {
			var $parent = this.$();
			do {
				oPrevElementToFocus = $parent.prev(":focusable");
				if (oPrevElementToFocus.length === 0) {
					oPrevElementToFocus = $parent.prevAll().find(":focusable").last();
				}
				$parent = $parent.parent();
			} while (($parent.length !== 0) && (oPrevElementToFocus.length === 0));
		}

	};

	/**
	 * Method called if ProcessFlow has the navigation focus and Spacebar or Enter key are pressed.
	 *
	 * @private
	 */
	ProcessFlow.prototype._handleKeySelect = function(oEvent) {
		if (this._isHeaderMode()) { //lanes-only.
			this._internalLanes = [];
			this.fireHeaderPress(this);
			var $nodeToFocus = this.$("scroll-content").children().children().children(1).children("td[tabindex='0']").first().children();
			var oNodeToFocus = sap.ui.getCore().byId($nodeToFocus[0].id);
			this._changeNavigationFocus(null, oNodeToFocus);
		} else if (this._lastNavigationFocusElement
			&& this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode"
			&& this._lastNavigationFocusElement._getNavigationFocus()) {
			var oFocusedNode = this._lastNavigationFocusElement;
			oFocusedNode._handleEvents(oEvent);
		}
	};

	/**
	 * Method called if ProcessFlow has the navigation focus and a key is released
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.onkeyup = function(oEvent) {
		var keycode = oEvent.keyCode ? oEvent.keyCode : oEvent.which;
		switch (keycode) {
			case jQuery.sap.KeyCodes.ENTER:
			case jQuery.sap.KeyCodes.SPACE:
				var oFocusedNode = this._lastNavigationFocusElement;
				if (oFocusedNode) {
					this.fireNodePress(this._lastNavigationFocusElement);
					oFocusedNode._handleEvents(oEvent);
				}
				break;
			default:
				break;
		}
	};

	/**
	 * Method called if ProcessFlow has the navigation focus and a key is pressed
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype.onkeydown = function(oEvent) {
		var keycode = (oEvent.keyCode ? oEvent.keyCode : oEvent.which);
		jQuery.sap.log.debug("ProcessFlow::keyboard input has been catched and action going to start: keycode=" + keycode);

		var bElementFocusChanged = false;
		var ctrlKeyPressed = oEvent.ctrlKey;
		var altKeyPressed = oEvent.altKey;
		var oPreviousNavigationElement = this._lastNavigationFocusElement;

		switch (keycode) {
			case jQuery.sap.KeyCodes.ARROW_RIGHT:
				bElementFocusChanged = this._moveToNextElement(ProcessFlow._enumMoveDirection.RIGHT);
				break;
			case jQuery.sap.KeyCodes.ARROW_LEFT:
				bElementFocusChanged = this._moveToNextElement(ProcessFlow._enumMoveDirection.LEFT);
				break;
			case jQuery.sap.KeyCodes.ARROW_DOWN:
				bElementFocusChanged = this._moveToNextElement(ProcessFlow._enumMoveDirection.DOWN);
				break;
			case jQuery.sap.KeyCodes.ARROW_UP:
				bElementFocusChanged = this._moveToNextElement(ProcessFlow._enumMoveDirection.UP);
				break;
			case jQuery.sap.KeyCodes.PAGE_UP:
				bElementFocusChanged = this._moveOnePage(ProcessFlow._enumMoveDirection.UP, altKeyPressed);
				break;
			case jQuery.sap.KeyCodes.PAGE_DOWN:
				bElementFocusChanged = this._moveOnePage(ProcessFlow._enumMoveDirection.DOWN, altKeyPressed);
				break;
			case jQuery.sap.KeyCodes.HOME:
				bElementFocusChanged = this._moveHomeEnd(ProcessFlow._enumMoveDirection.LEFT, ctrlKeyPressed);
				break;
			case jQuery.sap.KeyCodes.END:
				bElementFocusChanged = this._moveHomeEnd(ProcessFlow._enumMoveDirection.RIGHT, ctrlKeyPressed);
				break;
			case jQuery.sap.KeyCodes.NUMPAD_0:
			case jQuery.sap.KeyCodes.DIGIT_0:
				this._initZoomLevel();
				break;
			case jQuery.sap.KeyCodes.ENTER:
			case jQuery.sap.KeyCodes.SPACE:
				//ENTER and SPACE (or sapselect) are fired according to the spec, but we need to prevent the default behavior.
				this._handleKeySelect(oEvent);
				oEvent.preventDefault();
				return;
			default:
				//It was not our key, let default action be executed if any.
				return;
		}

		//It was our key, default action has to suppressed.
		oEvent.preventDefault();

		if (bElementFocusChanged) {
			//We have to re-render when we changed Element-focus inside our control.
			this._changeNavigationFocus(oPreviousNavigationElement, this._lastNavigationFocusElement);
		}
	};

	/**
	 * Handles the click on the arrows.
	 *
	 * @private
	 * @since 1.30
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype._onArrowClick = function(oEvent) {
		var sTargetId = oEvent.target.id;
		if (sTargetId) {
			var sId = this.getId();
			//For scroll buttons: Prevent IE from firing beforeunload event -> see CSN 4378288 2012
			oEvent.preventDefault();
			//On mobile devices, the click on arrows has no effect.
			if (sTargetId === sId + ProcessFlow._constants.arrowScrollLeftMinus && Device.system.desktop) {
				//Scroll back/left button.
				this._scroll(-this._scrollStep, 500);
			} else if (sTargetId === sId + ProcessFlow._constants.arrowScrollRightMinus && Device.system.desktop) {
				//Scroll forward/right button.
				this._scroll(this._scrollStep, 500);
			}
		}
	};

	/**
	 * Handles the onScroll event.
	 *
	 * @private
	 */
	ProcessFlow.prototype._onScroll = function() {
		var iScrollLeft = this._getScrollContainer().scrollLeft();
		var iDelta = Math.abs(iScrollLeft - this._iTouchStartScrollLeft);
		//Only valid if the focus does not change.
		if (iDelta > (this._scrollStep / 4) && !this._isFocusChanged) {
			//Update arrows when 1/4 lane was scrolled.
			this._adjustAndShowArrow();
			this._iTouchStartScrollLeft = iScrollLeft;
		} else if (this.getScrollable()) { //Update vertical alignment of arrows if only vertical scrolling is possible.
			var iScrollTop = this._getScrollContainer().scrollTop();
			var iDeltaTop = Math.abs(iScrollTop - this._iTouchStartScrollTop);
			if (iDeltaTop > 10) {
				this._moveArrowAndCounterVertical();
				this._iTouchStartScrollTop = iScrollTop;
			}
		}
	};

	/**
	 * Initializes left and upper distance when scrolling starts.
	 *
	 * @private
	 * @since 1.30
	 */
	ProcessFlow.prototype.ontouchstart = function() {
		this._iTouchStartScrollLeft = this._getScrollContainer().scrollLeft();
		if (this.getScrollable()) {
			this._iTouchStartScrollTop = this._getScrollContainer().scrollTop();
		}
	};

	ProcessFlow.prototype.ontouchmove = function(event) {
		/* Setting the marked flag is needed, because otherwise jquery.sap.mobile.js would call a
			preventDefault() on the event in the case for an iOS device, which would
			prevent the scroll content from scrolling */
		event.setMarked();
	};

	/**
	 * Handles the click of labels and triggers the related ProcessFlow event.
	 *
	 * @private
	 * @param {jQuery.Event} oEvent The event object of the triggered event
	 */
	ProcessFlow.prototype._handleLabelClick = function(oEvent) {
		if (oEvent) {
			var oConnectionLabel = oEvent.getSource();
			//Check if user clicked on icon.
			if (oConnectionLabel && oConnectionLabel.getMetadata().getName() === "sap.ui.core.Icon") {
				oConnectionLabel = oConnectionLabel.getParent();
			}
			if (oConnectionLabel && oConnectionLabel.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
				var aRelevantConnectionMapEntries = this._getConnectionMapEntries(oConnectionLabel);
				var eventArgsToFire = this._createLabelPressEventArgs(oConnectionLabel, aRelevantConnectionMapEntries);
				this.fireLabelPress(eventArgsToFire);
			}
		}
	};

	/**
	 * Method called on navigation focus change.
	 * Scrolls the PF content, so the element is as close to the middle of the scroll container viewport as possible.
	 *
	 * @private
	 * @since 1.23
	 */
	ProcessFlow.prototype._onFocusChanged = function() {
		var oFocusedElement = this._lastNavigationFocusElement,
			$focusedElement = oFocusedElement ? oFocusedElement.$() : null,
			iScrollContainerInnerWidth,
			iScrollContainerInnerHeight,
			iScrollLeft,
			iScrollTop,
			$scrollContent,
			iContentInnerWidth,
			iContentInnerHeight,
			iElementOuterWidth,
			iElementOuterHeight,
			oPositionInContent,
			iElementLeftPosition,
			iElementTopPosition,
			iElementRightPosition,
			iElementBottomPosition,
			iCorrectionLeft, iCorrectionTop,
			iScrollTimeInMillis = 500;

		if (oFocusedElement && this.getScrollable()) {
			jQuery.sap.log.debug("The actually focused element is " + oFocusedElement.getId());

			//If the element (oNode or label) is a label, get data from the TD parent element. Otherwise it does not work precisely
			if (oFocusedElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
				iElementOuterWidth = $focusedElement.parent().parent().parent().outerWidth();
				iElementOuterHeight = $focusedElement.parent().parent().parent().outerHeight();
				oPositionInContent = $focusedElement.parent().parent().parent().position();
			} else {
				iElementOuterWidth = $focusedElement.outerWidth();
				iElementOuterHeight = $focusedElement.outerHeight();
				oPositionInContent = $focusedElement.position();
			}
			jQuery.sap.log.debug("Element outer width x height [" + iElementOuterWidth + " x " + iElementOuterHeight + "]");
			jQuery.sap.log.debug("Position of element in the content is [" + oPositionInContent.left + ", " + oPositionInContent.top + "]");

			$scrollContent = this.$("scroll-content");
			iScrollContainerInnerWidth = this._getScrollContainer().innerWidth();
			iScrollContainerInnerHeight = this._getScrollContainer().innerHeight();
			jQuery.sap.log.debug("Scroll container inner width x height [" + iScrollContainerInnerWidth + " x " + iScrollContainerInnerHeight + "]");

			iScrollLeft = this._getScrollContainer().scrollLeft();
			iScrollTop = this._getScrollContainer().scrollTop();
			jQuery.sap.log.debug("Current scroll offset is [" + iScrollLeft + ", " + iScrollTop + "]");

			iContentInnerWidth = $scrollContent.innerWidth();
			iContentInnerHeight = $scrollContent.innerHeight();
			jQuery.sap.log.debug("Scroll content inner width x height [" + iContentInnerWidth + " x " + iContentInnerHeight + "]");

			//Defines 4 borders (L: Left, R: Right, T: Top, B: Bottom) for position of the clicked node in the visible content.
			iElementLeftPosition = -iScrollLeft + oPositionInContent.left;
			iElementRightPosition = iElementLeftPosition + iElementOuterWidth;
			iElementTopPosition = -iScrollTop + oPositionInContent.top;
			iElementBottomPosition = iElementTopPosition + iElementOuterHeight;

			//Checks if the node is located (even in part) outside the visible part of the scroll container.
			if ((iElementRightPosition > iScrollContainerInnerWidth) || (iElementLeftPosition < 0) || (iElementBottomPosition > iScrollContainerInnerHeight) || (iElementTopPosition < 0)) {
				//iCorrectionLeft, correction on left direction to center the node.
				iCorrectionLeft = Math.round((iScrollContainerInnerWidth - iElementOuterWidth) / 2);
				iCorrectionLeft = Math.max(iScrollContainerInnerWidth - iContentInnerWidth + oPositionInContent.left, iCorrectionLeft);
				iCorrectionLeft = Math.min(oPositionInContent.left, iCorrectionLeft);

				//iCorrectionTop, correction on upwards to center the node.
				iCorrectionTop = Math.round((iScrollContainerInnerHeight - iElementOuterHeight) / 2);
				iCorrectionTop = Math.max(iScrollContainerInnerHeight - iContentInnerHeight + oPositionInContent.top, iCorrectionTop);
				iCorrectionTop = Math.min(oPositionInContent.top, iCorrectionTop);
				jQuery.sap.log.debug("Element lies outside the scroll container, scrolling from [" + iElementLeftPosition + "," + iElementTopPosition + "] to [" + iCorrectionLeft + "," + iCorrectionTop + "]");
				this._isFocusChanged = true;
				this._getScrollContainer().animate({
					scrollTop: oPositionInContent.top - iCorrectionTop,
					scrollLeft: oPositionInContent.left - iCorrectionLeft
				}, iScrollTimeInMillis, "swing", jQuery.proxy(this._adjustAndShowArrow, this));
			} else {
				jQuery.sap.log.debug("Element lies inside the scroll container, no scrolling happens.");
				this._setFocusToNode(oFocusedElement);
			}
		} else { //Non scrollable needs also to set the focus.
			this._setFocusToNode(oFocusedElement);
			this._adjustAndShowArrow();
		}
	};

	/* =========================================================== */
	/* Getter/Setter private methods                               */
	/* =========================================================== */

	/**
	 * Sets the scroll width depending on the zoom level.
	 *
	 * @private
	 * @since 1.30
	 */
	ProcessFlow.prototype._setScrollWidth = function() {
		//The distance to scroll depends on the ZoomLevel.
		switch (this.getZoomLevel()) {
			case (library.ProcessFlowZoomLevel.One):
				this._scrollStep = 240;
				break;
			case (library.ProcessFlowZoomLevel.Two):
				this._scrollStep = 192;
				break;
			case (library.ProcessFlowZoomLevel.Three):
				this._scrollStep = 168;
				break;
			case (library.ProcessFlowZoomLevel.Four):
				this._scrollStep = 128;
				break;
			default:
				this._scrollStep = 192;
		}
	};

	/**
	 * Returns the last element that had the navigation focus before passing it to the current element
	 *
	 * @private
	 * @returns {sap.suite.ui.commons.ProcessFlowNode} found ProcessFlow node or connection
	 */
	ProcessFlow.prototype._getLastNavigationFocusElement = function() {
		return this._lastNavigationFocusElement;
	};

	/**
	 * Returns the node from the given array which matches to the given nodeId.
	 *
	 * @private
	 * @param {string} nodeId Id of node to retrieve
	 * @param {sap.suite.ui.commons.ProcessFlowNode[]} internalNodes Array of nodes to search in
	 * @returns {sap.suite.ui.commons.ProcessFlowNode} Found ProcessFlow node
	 */
	ProcessFlow.prototype._getNode = function(nodeId, internalNodes) {
		for (var i = 0; i < internalNodes.length; i++) {
			if (internalNodes[i].getNodeId() === nodeId.toString()) {
				return internalNodes[i];
			}
		}
	};

	/**
	 * Returns the lane from the _internalLanes array which matches to the given laneId.
	 *
	 * @private
	 * @param {string} laneId Id of lane to retrieve
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} The lane header element
	 */
	ProcessFlow.prototype._getLane = function(laneId) {
		for (var i = 0; i < this._internalLanes.length; i++) {
			if (this._internalLanes[i].getLaneId() === laneId) {
				return this._internalLanes[i];
			}
		}
	};

	/**
	 * Returns the id of the given child node element. Since child elements can be strings or objects, this function checks the type and
	 * returns the nodeId.
	 *
	 * @private
	 * @param {object|string} childElement The child element containing the nodeId
	 * @returns {number} The id of the child element
	 */
	ProcessFlow._getChildIdByElement = function(childElement) {
		if (typeof childElement === "object") {
			return childElement.nodeId;
		} else {
			return childElement;
		}
	};

	/**
	 * Checks if ProcessFlow is in header mode.
	 *
	 * @private
	 * @returns {boolean} Value which describes if ProcessFlow is in header mode
	 */
	ProcessFlow.prototype._isHeaderMode = function() {
		var aNodes = this.getNodes();
		return !aNodes || (aNodes.length === 0);
	};

	/* =========================================================== */
	/* Helper methods                                              */
	/* =========================================================== */

	/**
	 * Function retrieves the scroll container object
	 *
	 * @private
	 * @returns {jQuery} Scroll container DOM object
	 */
	ProcessFlow.prototype._getScrollContainer = function() {
		return this.$(ProcessFlow._constants.scrollContainer);
	};

	/**
	 * Function handles the exception based on the business requirements.
	 *
	 * @private
	 * @param {Array|string} exception An array of exception strings or a single exception string
	 */
	ProcessFlow.prototype._handleException = function(exception) {
		var sTextToDisplay = this._resBundle.getText("PF_ERROR_INPUT_DATA");
		this.fireOnError({ text: sTextToDisplay });
		jQuery.sap.log.error("Error loading data for the process flow with id : " + this.getId());

		if (exception instanceof Array) {
			for (var i = 0; i < exception.length; i++) {
				jQuery.sap.log.error("Detailed description (" + i + ") :" + exception[i]);
			}
		} else {
			jQuery.sap.log.error("Detailed description  :" + exception);
		}
	};

	/**
	 * Returns ARIA text for ProcessFlow table.
	 *
	 * @private
	 * @returns {string} Text for screen reader
	 */
	ProcessFlow.prototype._getAriaText = function() {
		return this._resBundle.getText("PF_ARIA_PROCESS_FLOW");
	};

	/**
	 * Function updates the lanes, if more nodes belong to the same lane
	 * it must check the node consistency, so this is done the first time the consistency check runs.
	 *
	 * @private
	 */
	ProcessFlow.prototype._updateLanesFromNodes = function() {
		ProcessFlow.NodeElement._createNodeElementsFromProcessFlowNodes(this.getNodes(), this.getLanes());
		var aInternalNodes = this._arrangeNodesByParentChildRelation(this.getNodes());
		this._internalLanes = ProcessFlow.NodeElement._updateLanesFromNodes(this.getLanes(), aInternalNodes).lanes;
	};

	/**
	 * Function creates the lane header objects.
	 *
	 * @private
	 * @returns {object} Array of lane positions to lane header element control instances
	 */
	ProcessFlow.prototype._getOrCreateLaneMap = function() {
		if (!this._internalLanes || this._internalLanes.length <= 0) {
			this._updateLanesFromNodes();
		}
		return ProcessFlow.NodeElement._createMapFromLanes(this._internalLanes,
			jQuery.proxy(this.ontouchend, this), this._isHeaderMode()).positionMap;
	};

	/**
	 * This function sorts the internal array of nodes in terms all parents are followed by their children, i.e. no child occurs before his parent in the array.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode[]} internalNodes An internal array of nodes to be sorted.
	 * @returns {sap.suite.ui.commons.ProcessFlowNode[]} internalNodes sorted internal array of nodes.
	 * @since 1.26
	 */
	ProcessFlow.prototype._arrangeNodesByParentChildRelation = function(internalNodes) {
		var iInternalNodesLength = internalNodes ? internalNodes.length : 0;
		var aChildren = [];
		var i, j;
		// Move parents before their children, if they are in the same lane.
		if (iInternalNodesLength > 0) {
			this._setParentForNodes(internalNodes);
			for (i = 0; i < iInternalNodesLength; i++) {
				aChildren = internalNodes[i].getChildren();
				if (aChildren) {
					var iChildrenCount = aChildren.length;
					for (j = 0; j < iChildrenCount; j++) {
						aChildren[j] = ProcessFlow._getChildIdByElement(aChildren[j]).toString();
					}
				}
				for (j = 0; j < i; j++) {
					if (jQuery.inArray(internalNodes[j].getNodeId(), aChildren) > -1 && internalNodes[j].getLaneId() === internalNodes[i].getLaneId()) {
						internalNodes.splice(j, 0, internalNodes[i]);
						internalNodes.splice(i + 1, 1);
						internalNodes = this._arrangeNodesByParentChildRelation(internalNodes);
						break;
					}
				}
			}
		}
		return internalNodes;
	};

	/**
	 * Function creates matrix with positions of nodes and connections. This is
	 * relative node connection representation and does not cover real page layout.
	 *
	 * @private
	 * @returns {Array} The created ProcessFlow control
	 */
	ProcessFlow.prototype._getOrCreateProcessFlow = function() {
		if (!this._internalLanes || this._internalLanes.length <= 0) {
			this._updateLanesFromNodes();
		}

		this.applyNodeDisplayState();
		var aInternalNodes = this.getNodes();

		var oResult = ProcessFlow.NodeElement._createNodeElementsFromProcessFlowNodes(aInternalNodes, this._internalLanes);
		var aElementById = oResult.elementById;
		var aElementsByLane = oResult.elementsByLane;

		var mCalculatedMatrix = this._calculateMatrix(aElementById);
		mCalculatedMatrix = this._addFirstAndLastColumn(mCalculatedMatrix);

		ProcessFlow.NodeElement._calculateLaneStatePieChart(aElementsByLane, this._internalLanes, aInternalNodes, this);

		//Convert NodeElements back to ProcessFlowNodes.
		for (var i = 0; i < mCalculatedMatrix.length; i++) {
			for (var j = 0; j < mCalculatedMatrix[i].length; j++) {
				if (mCalculatedMatrix[i][j] instanceof ProcessFlow.NodeElement) {
					mCalculatedMatrix[i][j] = aElementById[mCalculatedMatrix[i][j].nodeId].oNode;
				}
			}
		}
		this._internalCalcMatrix = mCalculatedMatrix;
		return mCalculatedMatrix;
	};

	/**
	 * Function adds first and last column, which serves for the special header signs. It has to add
	 * single cell to all internal arrays.
	 *
	 * @private
	 * @param {Array} calculatedMatrix The internal matrix to be modified
	 * @returns {Array} The calculated matrix including first and last column
	 */
	ProcessFlow.prototype._addFirstAndLastColumn = function(calculatedMatrix) {

		if (!calculatedMatrix || calculatedMatrix.length <= 0) {
			return [];
		}

		var originalX = calculatedMatrix.length;

		for (var i = 0; i < originalX; i++) {
			calculatedMatrix[i].unshift(null);
			calculatedMatrix[i].push(null);
		}

		return calculatedMatrix;
	};

	/**
	 * Function calculates a virtual matrix with nodes and connections.
	 *
	 * @private
	 * @param {Array} nodeElements Contains a map of the node IDs to node elements
	 * @throws an array with messages on processing errors
	 * @returns {Array} The composed virtual matrix
	 */
	ProcessFlow.prototype._calculateMatrix = function(nodeElements) {
		var oInternalMatrixCalculation,
			oElementInfo,
			iLaneHighestNumber,
			iRowsCount,
			mCalculatedMatrix;

		//No calculation in case of zero input.
		if (!nodeElements || (nodeElements.length === 0)) {
			return [];
		}

		oInternalMatrixCalculation = new ProcessFlow.InternalMatrixCalculation(this);
		oInternalMatrixCalculation.checkInputNodeConsistency(nodeElements);
		oElementInfo = oInternalMatrixCalculation._retrieveInfoFromInputArray(nodeElements);
		oInternalMatrixCalculation._resetPositions();
		iLaneHighestNumber = oElementInfo.highestLanePosition + 1;

		// Worst case, all children are in the same lane with so many rows.
		iRowsCount = Math.max(Object.keys(nodeElements).length, 2);
		mCalculatedMatrix = oInternalMatrixCalculation._createMatrix(iRowsCount, iLaneHighestNumber);

		for (var i = 0; i < oElementInfo.rootElements.length; i++) {
			oInternalMatrixCalculation.iPositionY = oElementInfo.rootElements[i].lane;
			mCalculatedMatrix = oInternalMatrixCalculation.processCurrentElement(oElementInfo.rootElements[i], nodeElements, mCalculatedMatrix);
		}
		if (this._isLayoutOptimized) {
			oInternalMatrixCalculation._optimizeMatrix(mCalculatedMatrix, nodeElements);
		}
		mCalculatedMatrix = oInternalMatrixCalculation._doubleColumnsInMatrix(mCalculatedMatrix);
		mCalculatedMatrix = oInternalMatrixCalculation._calculatePathInMatrix(mCalculatedMatrix);
		mCalculatedMatrix = oInternalMatrixCalculation._removeEmptyLines(mCalculatedMatrix);
		return mCalculatedMatrix;
	};

	/**
	 * This is a virtual node holding necessary data to create virtual matrix.
	 *
	 * @private
	 * @param {string} id ID of the PF node
	 * @param {number} lane Lane position of the node
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node A PF node
	 * @param {number[]} nodeParents Array of parent IDs of the node
	 */
	ProcessFlow.NodeElement = function(id, lane, node, nodeParents) {
		this.nodeId = id;
		this.lane = lane;
		this.state = node.getState();
		this.displayState = node._getDisplayState();
		this.isProcessed = false;

		if (jQuery.isArray(nodeParents)) {
			this.aParent = nodeParents;
		} else {
			this.oParent = nodeParents;
		}
		this.oNode = node;
	};

	/**
	 * Another type of the node element constructor.
	 *
	 * @private
	 * @param {string} id ID of the PF node
	 * @param {number} lane Lane position of the node
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node A PF node
	 * @param {number[]} nodeParents Array of parent IDs of the node
	 * @returns {sap.suite.ui.commons.ProcessFlow.NodeElement} A new node element
	 */
	ProcessFlow.NodeElement._initNodeElement = function(id, lane, node, nodeParents) {
		return new ProcessFlow.NodeElement(id, lane, node, nodeParents);
	};

	/**
	 * Extend the NodeElement object with to String function.
	 *
	 * @private
	 */
	ProcessFlow.NodeElement.prototype = {
		toString: function() {
			return this.nodeId;
		},

		containsChildren: function(oElement) {
			if (!oElement) {
				return false;
			}
			if (!(oElement instanceof ProcessFlow.NodeElement)) {
				return false;
			}
			if (this.oNode.getChildren() && oElement.oNode.getChildren() && this.oNode.getChildren().length && oElement.oNode.getChildren().length) {
				for (var i = 0; i < this.oNode.getChildren().length; i++) {
					if (oElement.oNode.getChildren().indexOf(this.oNode.getChildren()[i]) >= 0) {
						return true;
					}
				}
			}
			return false;
		}
	};

	/**
	 * Calculates the state part of the lane from nodes belonging to this lane.
	 *
	 * @param {Array} laneElements List of lane elements
	 * @param {Array} lanes List of lanes
	 * @param {Array} internalNodes List of internal nodes
	 * @param {sap.suite.ui.commons.ProcessFlow} processFlow The ProcessFlow instance
	 * @private
	 */
	ProcessFlow.NodeElement._calculateLaneStatePieChart = function(laneElements, lanes, internalNodes, processFlow) {
		// Check input parameters.
		if (!laneElements || !lanes || !internalNodes) {
			return;
		}

		//First, check if all nodes are in the regular state. If not, only the highlighted ones are taken into calculation.
		var i;
		for (i = 0; i < internalNodes.length; i++) {
			processFlow._bHighlightedMode = internalNodes[i].getHighlighted();
			if (processFlow._bHighlightedMode) {
				break;
			}
		}

		var iPositiveCount,
			iNegativeCount,
			iNeutralCount,
			iPlannedCount,
			iCriticalCount;

		for (i = 0; i < lanes.length; i++) {
			var oLane = lanes[i];
			var oLaneElements = laneElements[oLane.getLaneId()];

			//If we do not have nodes, nothing needs to be calculated.
			if (!oLaneElements) {
				continue;
			}

			iPositiveCount = 0;
			iNegativeCount = 0;
			iNeutralCount = 0;
			iPlannedCount = 0;
			iCriticalCount = 0;

			for (var j = 0; j < oLaneElements.length; j++) {
				//Maybe ...oNode.getHighlighted() can be used instead of the big selector which needs to be maintained in case of extensions.
				if (!processFlow._bHighlightedMode ||
					(oLaneElements[j].oNode._getDisplayState() === library.ProcessFlowDisplayState.Highlighted ||
					oLaneElements[j].oNode._getDisplayState() === library.ProcessFlowDisplayState.HighlightedFocused ||
					oLaneElements[j].oNode._getDisplayState() === library.ProcessFlowDisplayState.SelectedHighlighted ||
					oLaneElements[j].oNode._getDisplayState() === library.ProcessFlowDisplayState.SelectedHighlightedFocused)) {
					switch (oLaneElements[j].oNode.getState()) {
						case library.ProcessFlowNodeState.Positive:
							iPositiveCount++;
							break;
						case library.ProcessFlowNodeState.Negative:
						case library.ProcessFlowNodeState.PlannedNegative: //plannedNegative belong to the Negative group
							iNegativeCount++;
							break;
						case library.ProcessFlowNodeState.Planned:
							iPlannedCount++;
							break;
						case library.ProcessFlowNodeState.Critical:
							iCriticalCount++;
							break;
						case library.ProcessFlowNodeState.Neutral:
						default:
							iNeutralCount++;
					}
				}
			} // End of nodes for single lane.
			var aStateCounts = [
				{ state: library.ProcessFlowNodeState.Positive, value: iPositiveCount },
				{ state: library.ProcessFlowNodeState.Negative, value: iNegativeCount },
				{ state: library.ProcessFlowNodeState.Neutral, value: iNeutralCount },
				{ state: library.ProcessFlowNodeState.Planned, value: iPlannedCount },
				{ state: library.ProcessFlowNodeState.Critical, value: iCriticalCount }
			];
			oLane.setState(aStateCounts);
		}
	};

	/**
	 * This function must check and calculate the potentially new lanes.
	 * This is, because more nodes can be located in the same lane. In this case,
	 * the new artificial lane is created and positioned just after original one.
	 *
	 * @private
	 * @param {Array} processFlowLanes The original lane array
	 * @param {Array} internalNodes Internal nodes
	 * @returns {object} Dynamic object containing lanes and nodes
	 */
	ProcessFlow.NodeElement._updateLanesFromNodes = function(processFlowLanes, internalNodes) {
		var oResult = ProcessFlow.NodeElement._createMapFromLanes(processFlowLanes, null, false);
		var aLanePositions = oResult.positionMap;
		var aLaneIds = oResult.idMap;
		var oNode = {};
		var aTempProcessFlowLanes = processFlowLanes.slice();
		var bPotentialNewLaneExists;
		var aTempLanesPositions = {};
		var iPosition = 0;

		var i;
		for (i = 0; i < internalNodes.length; i++) {
			oNode[internalNodes[i].getNodeId()] = internalNodes[i];
		}

		for (i = 0; i < internalNodes.length; i++) {
			var oCurrentNode = internalNodes[i];
			var oCurrentNodeChildren = oCurrentNode.getChildren() || [];
			var iPositionUp = 1; //Check the move up for the given sublanes of the lane. Every new sublane creation.
			var iNewLaneId = null;
			var oNewLane = null;
			// Makes plus 1 effect.
			for (var j = 0; j < oCurrentNodeChildren.length; j++) { // Check the children.
				var iChildId = ProcessFlow._getChildIdByElement(oCurrentNodeChildren[j]);
				var oNodeChild = oNode[iChildId];
				if (oNodeChild) {
					if (oCurrentNode.getLaneId() === oNodeChild.getLaneId()) {
						// Create new lane id and check the lane.
						iNewLaneId = oNodeChild.getLaneId() + iPositionUp;
						oNewLane = aLaneIds[iNewLaneId];
						if (!oNewLane) { // If we have the lane already.
							var oCurrentLane = aLaneIds[oCurrentNode.getLaneId()];
							oNewLane = ProcessFlow.NodeElement._createNewProcessFlowElement(oCurrentLane, iNewLaneId, oCurrentLane.getPosition() + iPositionUp);
							// Update the maps and output array.
							aLaneIds[oNewLane.getLaneId()] = oNewLane;
							aTempProcessFlowLanes.splice(oNewLane.getPosition(), 0, oNewLane);
						}
						// Assign new lane to children
						// The new laneId should not override the old one, therefore it is stored in a hidden property
						oNodeChild._setMergedLaneId(oNewLane.getLaneId());
					}
					// Move also the assignment of this lane for all children. Otherwise it is bad ...
					// so, take the children of current children and move the lane position to the new lane, if necessary
					// it is in the case when the lane is the same as was PARENT node. this is important to understand,
					// that this children is already moved to new one, so parent lane is compared.
					// This is a recursion.
					ProcessFlow.NodeElement._changeLaneOfChildren(oCurrentNode.getLaneId(), oNodeChild, oNode);
				}
			}
			// Now we should move all positions up about the number iPositionUp.
			// Also the position map is in wrong state now.
			// Now work with all vector, later on we can move only to lanes with higher position than working one.
			if (oNewLane) {
				aTempLanesPositions = {};
				bPotentialNewLaneExists = false;
				for (var iKey in aLanePositions) {
					if (oNewLane.getLaneId() === aLanePositions[iKey].getLaneId()) {
						bPotentialNewLaneExists = true;
						break;
					}
					if (parseInt(iKey, 10) >= oNewLane.getPosition()) {
						var oTempLane = aLanePositions[iKey];
						aTempLanesPositions[oTempLane.getPosition() + iPositionUp] = oTempLane;
					}
				}
				if (!bPotentialNewLaneExists) {
					for (var iTempLanePos in aTempLanesPositions) {
						iPosition = parseInt(iTempLanePos, 10);
						// The moved position should not override the old one, therefore it is stored in a hidden property
						aTempLanesPositions[iPosition]._setMergedPosition(iPosition);
					}
					aTempLanesPositions[oNewLane.getPosition()] = oNewLane;
					for (var v = 0; v < oNewLane.getPosition(); v++) {
						aTempLanesPositions[v] = aLanePositions[v];
					}
					aLanePositions = aTempLanesPositions;
				}
			}
		}

		return {
			lanes: aTempProcessFlowLanes,
			nodes: internalNodes
		};
	};

	/**
	 * This function changes the lane of child elements
	 * It works recursively in order to reach all the child elements to the last levels.
	 *
	 * @private
	 * @param {string} laneId The id of the original lane
	 * @param {sap.suite.ui.commons.ProcessFlowNode} currentNode The currently processed node
	 * @param {object} nodes The associative array of nodes
	 */
	ProcessFlow.NodeElement._changeLaneOfChildren = function(laneId, currentNode, nodes) {
		var aChildren = currentNode.getChildren();
		if (aChildren) {
			for (var i = 0; i < aChildren.length; i++) {
				var sChildId = ProcessFlow._getChildIdByElement(aChildren[i]);
				var oChildNode = nodes[sChildId];
				if (oChildNode && oChildNode.getLaneId() === laneId) {
					oChildNode._setMergedLaneId(currentNode.getLaneId());
					ProcessFlow.NodeElement._changeLaneOfChildren(laneId, oChildNode, nodes);
				}
			}
		}
	};

	/**
	 * This function creates a new ProcessFlow lane header element.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlow.NodeElement} originalElement The original lane element
	 * @param {string} newLaneId The new lane id
	 * @param {int} newPosition The new lane position
	 * @returns {object} Dynamic object containing the new element
	 */
	ProcessFlow.NodeElement._createNewProcessFlowElement = function(originalElement, newLaneId, newPosition) {
		return new ProcessFlowLaneHeader({
			laneId: newLaneId,
			iconSrc: originalElement.getIconSrc(),
			text: originalElement.getText(),
			state: originalElement.getState(),
			position: newPosition,
			zoomLevel: originalElement.getZoomLevel()
		});
	};

	/**
	 * This function creates the map where key = position value - lane element.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader[]} processFlowLanes Array of lanes
	 * @param {function} tapHandler Tap handler for the lane header element
	 * @param {boolean} isInHeaderMode Should be true, if the process flow is in the header mode
	 * @returns {object} Map of lane positions to lane header element control instances
	 */
	ProcessFlow.NodeElement._createMapFromLanes = function(processFlowLanes, tapHandler, isInHeaderMode) {
		var oLane,
			aLanePositions = {},
			aLaneIds = {},
			iLanesCount = processFlowLanes ? processFlowLanes.length : 0,
			i = 0;

		if (!iLanesCount) {
			return {};
		} else {
			while (i < iLanesCount) {
				oLane = processFlowLanes[i];
				if (oLane && oLane.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowLaneHeader") {
					aLanePositions[oLane.getPosition()] = oLane;
					aLaneIds[oLane.getLaneId()] = oLane;
					// Forward the icon click events from the lane header items to the ProcessFlow control.
					if (tapHandler) {
						oLane.attachPress(tapHandler);
					}
					oLane._setHeaderMode(isInHeaderMode);
				}
				i++;
			}

			return { positionMap: aLanePositions, idMap: aLaneIds };
		}
	};

	/**
	 *
	 * This function transforms from process flow node element into the internal
	 * node element. The strategy is to work inside algorithm only with internal
	 * representation.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode[]} processFlowNodes The nodes from the control's interface, preprocessed - so they all have a valid (user-defined, or generated) lane id
	 * @param {sap.suite.ui.commons.ProcessFlowLaneHeader[]} processFlowLanes The lanes of the ProcessFlow control
	 * @returns {object} Element containing elementById(NodeElement) and elementsByLane (NodeElement[])
	 */
	ProcessFlow.NodeElement._createNodeElementsFromProcessFlowNodes = function(processFlowNodes, processFlowLanes) {
		var aLanePositions = {}, // holds the transition between lane id and position.
			aLaneElements = {}, // holds the array of the elements for given laneId.
			aParents = {},
			oNode,
			iNodeCount = processFlowNodes ? processFlowNodes.length : 0,
			sNodeId,
			oLane,
			iLaneCount = processFlowLanes ? processFlowLanes.length : 0,
			sLaneId,
			aPositions = [],
			iLanePosition,
			aChildren,
			sChild,
			iChildCount,
			i, j,
			aIdElements = {}; //array of elements identified by elementId

		if (iNodeCount === 0) {
			return {
				elementById: {},
				elementsByLane: {}
			};
		}

		if (iLaneCount === 0) {
			throw ["No lane definition although there is a node definition."];
		}

		i = 0;
		while (i < iLaneCount) {
			oLane = processFlowLanes[i];
			sLaneId = oLane.getLaneId();
			iLanePosition = oLane.getPosition();

			if (aLanePositions[sLaneId]) {
				throw ["The lane with id: " + sLaneId + " is defined at least twice. (Lane error)"];
			}

			aLanePositions[sLaneId] = iLanePosition;

			if (jQuery.inArray(iLanePosition, aPositions) > -1) {
				throw ["The position " + iLanePosition + " is defined at least twice. (Lane error)."];
			} else {
				aPositions.push(iLanePosition);
			}

			aLaneElements[sLaneId] = [];
			i++;
		}

		// search for the parent
		i = 0;
		while (i < iNodeCount) {
			oNode = processFlowNodes[i];
			if (oNode && oNode.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				sNodeId = oNode.getNodeId();
				sLaneId = oNode.getLaneId();

				aChildren = oNode.getChildren() || [];
				iChildCount = aChildren.length;
				j = 0;
				while (j < iChildCount) {
					sChild = ProcessFlow._getChildIdByElement(aChildren[j]);
					aParents[sChild] = aParents[sChild] || [];
					aParents[sChild].push(sNodeId);
					j++;
				}
			}
			i++;
		}

		i = 0;
		while (i < iNodeCount) {
			oNode = processFlowNodes[i];
			if (oNode && oNode.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				sNodeId = oNode.getNodeId();

				if (!sNodeId) {
					throw ["There is a node which has no node id defined. (Title=" + oNode.getTitle() + ") and array position: " + i];
				}

				sLaneId = oNode.getLaneId();

				iLanePosition = aLanePositions[sLaneId];
				if (jQuery.type(iLanePosition) !== "number") {
					throw ["For the node " + sNodeId + " position (lane) is not defined."];
				}

				if (!aIdElements[sNodeId]) {
					aIdElements[sNodeId] = ProcessFlow.NodeElement._initNodeElement(sNodeId, iLanePosition, oNode, aParents[sNodeId]);

					aLaneElements[sLaneId].push(aIdElements[sNodeId]);
				} else {
					throw ["The node id " + sNodeId + " is used second time."];
				}
			}
			i++;
		}

		return {
			elementById: aIdElements,
			elementsByLane: aLaneElements
		};
	};

	/**
	 * Constructor of the algorithm object.
	 *
	 * @private
	 */
	ProcessFlow.InternalMatrixCalculation = function() {
		this.iPositionX = 0;
		this.iPositionY = 0;

		this.nodePositions = {};
		this.mapChildToNode = {};
	};

	/**
	 * Optimizes the matrix by removing the unnecessary empty spaces among nodes from the same lane
	 *
	 * @private
	 * @param {object} matrix The process flow matrix
	 * @param {object} elements It contains a map with the mappings between node Ids to node elements
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._optimizeMatrix = function(matrix, elements) {
		var bLaneOptimized;
		do {
			bLaneOptimized = false;
			for (var idxLane = 0; idxLane < matrix[0].length; idxLane++) {
				for (var idxRow = 0; idxRow < matrix.length - 1; idxRow++) {
					if (!matrix[idxRow][idxLane]) {
						// finds the next node on the lane
						var bNodesExist = false;
						for (var i = idxRow + 1; i < matrix.length; i++) {
							if (matrix[i][idxLane]) {
								bNodesExist = true;
								break;
							}
						}
						// if no further nodes available, goes to the next lane
						if (!bNodesExist) {
							break;
						}
						// removes the empty element inside the lane, if possible
						if (this._optimizeLane(matrix, idxRow, idxLane, elements)) {
							bLaneOptimized = true;
						}
					}
				}
			}
		} while (bLaneOptimized);
	};

	/**
	 * Optimizes the lane by removing the unnecessary empty spaces among nodes
	 *
	 * @private
	 * @param {object} matrix The process flow matrix
	 * @param {int} row The row number of the empty space element inside the matrix
	 * @param {int} lane The lane number of the empty space element inside the matrix
	 * @param {object} elements It contains a map with the mappings between node Ids to node elements
	 * @returns {boolean} True if the lane was optimized; otherwise false
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._optimizeLane = function(matrix, row, lane, elements) {
		// find out if there are nodes on the lane to be moved instead the found empty space
		for (var i = row + 1; i < matrix.length; i++) {
			// there is a node that could be moved
			if (matrix[i][lane]) {
				var oNode = matrix[i][lane];
				// verify if the position is valid
				if (this._verifyOptimizeLane(matrix, row, i, lane, elements)) {
					// move the element instead empty space
					matrix[row][lane] = oNode;
					this.nodePositions[oNode.nodeId].x = row;
					matrix[i][lane] = null;
					return true;
				} else {
					// do not spring over the nodes
					return false;
				}
			}
		}

		return false;
	};

	/**
	 * Verifies whether the lane can be optimized at the specified empty space position inside the lane.
	 *
	 * @private
	 * @param {object} matrix The ProcessFlow matrix
	 * @param {int} rowIndex The row number of the empty space element inside the lane
	 * @param {int} replacingRowIndex The row number of the node that could replace the empty space inside the lane
	 * @param {int} laneIndex The number of the lane that should be optimized
	 * @param {object} nodeElements It contains a map with the mappings between node Ids to node elements
	 * @returns {boolean} True if the lane can be optimized at the specified position, false otherwise
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._verifyOptimizeLane = function(matrix, rowIndex, replacingRowIndex, laneIndex, nodeElements) {
		// case 1: between the node and children there is a valid path
		var oNode = matrix[replacingRowIndex][laneIndex].oNode;
		var i, j, aChildren, sNodeId;
		if (oNode && oNode.getChildren()) {
			aChildren = matrix[replacingRowIndex][laneIndex].oNode.getChildren();
			for (i = 0; i < aChildren.length; i++) {
				sNodeId = ProcessFlow._getChildIdByElement(aChildren[i]);
				var iChildLane = nodeElements[sNodeId].lane;
				// case 1a: empty path (child on the next lane)
				// case 2a: empty path (child on any lane but no nodes in between on the same row
				for (j = laneIndex + 1; j < iChildLane; j++) {
					if (matrix[rowIndex][j]) {
						return false;
					}
				}
			}
		}

		// case 2: between the node and parents there is a valid path
		var sOrigNodeId = matrix[replacingRowIndex][laneIndex].nodeId;
		var oOrigPositionNode = this.nodePositions[sOrigNodeId];
		var aParents = matrix[replacingRowIndex][laneIndex].aParent;
		if (aParents) {
			for (i = 0; i < aParents.length; i++) {
				// case 2a: empty path (parent only on the previous lane)
				sNodeId = ProcessFlow._getChildIdByElement(aParents[i]);
				if (laneIndex - 1 !== nodeElements[sNodeId].lane) {
					return false;
				}
				// case 2b: only nodes whose parents are below the child nodes on the row
				var oOrigPositionNodeParent = this.nodePositions[sNodeId];
				if (oOrigPositionNodeParent.x >= oOrigPositionNode.x) {
					return false;
				}
			}
		}

		// case 3: on the left part of the node, there are no overlapping connections between nodes and children (nodes and children are on the same side)
		for (i = 0; i < laneIndex; i++) {
			for (j = 0; j < matrix.length; j++) {
				if (matrix[j][i] && matrix[j][i].oNode) {
					sNodeId = matrix[j][i].nodeId;
					var oPositionElem = this.nodePositions[sNodeId];
					aChildren = matrix[j][i].oNode.getChildren();
					if (aChildren) {
						for (var k = 0; k < aChildren.length; k++) {
							var sNodeChildId = ProcessFlow._getChildIdByElement(aChildren[k]);
							var oPositionChild = this.nodePositions[sNodeChildId];
							if (nodeElements[sNodeChildId].lane > laneIndex &&
								// the existing nodes and their children are either on the upper or lower side of the new node
								!((oPositionElem.x < rowIndex && oPositionChild.x < rowIndex) || ((oPositionElem.x > rowIndex && oPositionChild.x > rowIndex)))) {
								return false;
							}
						}
					}
				}
			}
		}

		// case 4: when the node has children: on the lane before the new position, there are no overlapping connections between nodes and children
		if (oNode._hasChildren()) {
			for (i = 0; i < rowIndex; i++) {
				if (matrix[i][laneIndex]) {
					aChildren = matrix[i][laneIndex].oNode.getChildren();
					if (aChildren) {
						for (j = 0; j < aChildren.length; j++) {
							sNodeId = ProcessFlow._getChildIdByElement(aChildren[j]);
							var oElem = nodeElements[sNodeId];
							var oPosition = this.nodePositions[sNodeId];
							if (oElem.lane > laneIndex && oPosition.x >= rowIndex && !oNode._hasChildrenWithNodeId(sNodeId)) {
								return false;
							}
						}
					}
				}
			}
		}
		return true;
	};

	/**
	 * Function resets the positions into initial one to keep new calculation
	 * without side effects.
	 *
	 * @private
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._resetPositions = function() {
		this.iPositionX = 0;
		this.iPositionY = 0;

		delete this.nodePositions;
		delete this.mapChildToNode;

		this.nodePositions = {};
		this.mapChildToNode = {};
	};

	/**
	 * Function creates matrix based on the length.
	 *
	 * @private
	 * @param {string} length Number of columns
	 * @returns {Array} Array with two dimensions
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._createMatrix = function(length) {
		length = parseInt(length, 10);
		var aCalculatedMatrix = new Array(length || 0);
		var i = length;

		if (arguments.length > 1) {
			var args = Array.prototype.slice.call(arguments, 1);
			while (i--) {
				aCalculatedMatrix[length - 1 - i] = this._createMatrix.apply(this, args);
			}
		}
		return aCalculatedMatrix;
	};

	/**
	 * Function retrieves the important information from input array.
	 *
	 * @private
	 * @param {object} elements Contains a map of the node ids to node elements
	 * @returns {object} Element containing highestLanePosition(number) and rootElements (Element[])
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._retrieveInfoFromInputArray = function(elements) {

		var iLanePositionHighest = 0,
			aRootElements = [],
			oElement;
		Object.keys(elements).forEach(function(sElementId) {
			oElement = elements[sElementId];

			if (!oElement.oParent && !oElement.aParent) {
				aRootElements.push(oElement);
			}

			if (iLanePositionHighest < oElement.lane) {
				iLanePositionHighest = oElement.lane;
			}
		});

		return {
			"highestLanePosition": iLanePositionHighest,
			"rootElements": aRootElements
		};
	};

	/**
	 * Function doubles the matrix for drawing purposes and it only doubles the columns and add undefined values there.
	 *
	 * @private
	 * @param {Array} currentMatrix The ProcessFlow's current calculation matrix
	 * @returns {Array} Array with doubled colummns
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._doubleColumnsInMatrix = function(currentMatrix) {
		var iMatrixY = 0,
			i;

		for (i = 0; i < currentMatrix.length; i++) {
			iMatrixY = iMatrixY > currentMatrix[i].length ? iMatrixY : currentMatrix[i].length;
		}

		var mTempMatrix = new Array(currentMatrix.length || 0);

		for (i = 0; i < mTempMatrix.length; i++) {
			mTempMatrix[i] = new Array(iMatrixY * 2 - 1);
			for (var j = 0; j < iMatrixY; j++) {
				if (currentMatrix[i][j]) {
					mTempMatrix[i][2 * j] = currentMatrix[i][j];
				}
			}
		}
		return mTempMatrix;
	};

	/**
	 * Function removes empty lines from the matrix.
	 *
	 * @private
	 * @param {Array} originalMatrix The ProcessFlow's original calculation matrix
	 * @returns {Array} Array where empty lines have been removed
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._removeEmptyLines = function(originalMatrix) {
		//First check the number of valid lines.
		var iLinesNumber = 0,
			i, j;

		for (i = 0; i < originalMatrix.length; i++) {
			for (j = 0; j < originalMatrix[i].length; j++) {
				if (originalMatrix[i][j]) {
					iLinesNumber++;
					break;
				}
			}
		}

		var mReturnMatrix = this._createMatrix(iLinesNumber, originalMatrix[0].length);

		for (i = 0; i < iLinesNumber; i++) {
			for (j = 0; j < originalMatrix[i].length; j++) {
				mReturnMatrix[i][j] = null; // everything is at least null
				if (originalMatrix[i][j]) {
					mReturnMatrix[i][j] = originalMatrix[i][j];
				}
			}
		}
		return mReturnMatrix;
	};

	/**
	 * Sort based on child proximity. If 2 children have some common children, they are positioned next to each other.
	 *
	 * @private
	 * @param {Array} nodeChildIds Child ids of the currently processed node
	 * @param {object} elements Contains a map of the node ids to node elements
	 * @returns {Array} Array containing sorted child elements (first sort by lanes, then the elements having the same children get next to each other)
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._sortBasedOnChildren = function(nodeChildIds, elements) {
		var oElementsByLane = {},
			aElements,
			sLaneId = null,
			aLaneIds,
			iChildrenElement1Count,
			iChildrenElement2Count,
			aSortedContent = [],
			aSingleLaneContent,
			aSingleContent,
			oProcessedChildElement;

		if (nodeChildIds) {
			nodeChildIds.forEach(function(oChildId) {
				var sChildId = ProcessFlow._getChildIdByElement(oChildId);
				aElements = oElementsByLane[elements[sChildId].lane];
				if (!aElements) {
					oElementsByLane[elements[sChildId].lane] = aElements = [];
				}
				aElements.push(elements[sChildId]);
			});
		} else {
			return [];
		}

		var fnSort = function(element1, element2) {
			//Lane needs not to be checked.
			//If it is the same one, check for the same children.
			//In this case return 0
			iChildrenElement1Count = (element1.oNode.getChildren() || []).length;
			iChildrenElement2Count = (element2.oNode.getChildren() || []).length;
			return iChildrenElement2Count - iChildrenElement1Count;
		};

		aLaneIds = [];
		for (sLaneId in oElementsByLane) {
			aLaneIds.push(sLaneId);
			//Sort the Nodes (related to currend lane) descending by amount of children.
			oElementsByLane[sLaneId].sort(fnSort);
		}

		//Sort the Lanes descending by sLaneId.
		aLaneIds = aLaneIds.sort(function(element1, element2) {
			return element2 - element1;
		});

		var fnAddSibling = function(oSiblingElement) {
			if (oProcessedChildElement.containsChildren(oSiblingElement)) {
				aSingleContent.push(oSiblingElement);
			}
		};

		//Now we have in aLaneIds the lane orderd (descending by sLaneId)
		//Based on that we take from map the elements for the lanes.
		//Now order based on the children.
		aLaneIds.forEach(function(laneId) {
			aSingleLaneContent = oElementsByLane[laneId];

			if (aSingleLaneContent.length > 1) {
				aSingleContent = [];
				//We iterate through all the children and
				//put all the nodes having at least 1 common child next to each other.
				oProcessedChildElement = aSingleLaneContent.shift();
				while (oProcessedChildElement) {
					if (aSingleContent.indexOf(oProcessedChildElement) < 0) {
						aSingleContent.push(oProcessedChildElement);
					}

					aSingleLaneContent.forEach(fnAddSibling);
					oProcessedChildElement = aSingleLaneContent.shift();
				}
				aSortedContent = aSortedContent.concat(aSingleContent);
			} else {
				aSortedContent = aSortedContent.concat(aSingleLaneContent);
			}
		});
		return aSortedContent;
	};

	/**
	 * Function calculates the connection and writes into the virtual matrix. It gets the matrix plus
	 * parent children relationship.
	 *
	 * @private
	 * @param {object} originalMatrix the matrix with the setup of nodes
	 * @returns {object} The matrix updated with the calculated paths
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._calculatePathInMatrix = function(originalMatrix) {
		var oCurrentElement = null;
		for (var key in this.nodePositions) {
			if (this.nodePositions.hasOwnProperty(key)) {
				oCurrentElement = this.nodePositions[key];
				var aChildren = oCurrentElement.c.oNode.getChildren();
				for (var i = 0; aChildren && i < aChildren.length; i++) {
					var sChildId = ProcessFlow._getChildIdByElement(aChildren[i]);
					var positionChildrenObject = this.nodePositions[sChildId];
					originalMatrix = this._calculateSingleNodeConnection(oCurrentElement,
						positionChildrenObject, oCurrentElement.x, oCurrentElement.y,
						positionChildrenObject.x, positionChildrenObject.y, originalMatrix);
				}
			}
		}
		return originalMatrix;
	};

	/**
	 * Function based on the parent children position calculated the path from parent to children. The idea is like following
	 * go from parent half right and use next connection column to go up or down. Afterwards on the line with children go
	 * horizontal.
	 *
	 * @private
	 * @param nodeParent
	 * @param nodeChildren
	 * @param parentX
	 * @param parentY
	 * @param childrenX
	 * @param childrenY
	 * @param originalMatrix
	 * @returns {Object[]} The original Matrix
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._calculateSingleNodeConnection =
		function(nodeParent, nodeChildren, parentX, parentY, childrenX, childrenY, originalMatrix) {
			var iHorizontal = childrenY - parentY;
			var iVertical = childrenX - parentX;
			if (iHorizontal < 0) {
				throw [
					"Problem with negative horizontal movement",
					"Parent node is " + nodeParent.c.toString(),
					"Children node is " + nodeChildren.c.toString(),
					"Coordinates : '" + parentX + "','" + parentY + "','" + childrenX + "','" + childrenY + "'"
				];
			} else if (iVertical <= -1) {
				// Half left and up
				var bNormalHorizontalLinePossible = this._checkIfHorizontalLinePossible(originalMatrix, childrenX, parentY + 2, childrenY);
				var iPositionY = childrenY - 1;
				if (bNormalHorizontalLinePossible) {
					iPositionY = parentY + 1;
				}
				var iPositionX = parentX;
				if (bNormalHorizontalLinePossible) {
					iPositionX = childrenX;
				}
				originalMatrix[parentX][iPositionY] = this._createConnectionElement(
					originalMatrix[parentX][iPositionY], ProcessFlow._cellEdgeConstants.LU,
					nodeParent, nodeChildren, false);

				//Going up to the children.
				originalMatrix = this._writeVerticalLine(originalMatrix, parentX, childrenX, iPositionY, nodeParent, nodeChildren);

				originalMatrix[childrenX][iPositionY] =
					this._createConnectionElement(originalMatrix[childrenX][iPositionY],
						ProcessFlow._cellEdgeConstants.UR, nodeParent,
						nodeChildren, (iPositionY === childrenY - 1));
				//Pure right.
				var iStartY = parentY + 2;
				var iEndY = childrenY;
				if (!bNormalHorizontalLinePossible) {
					iStartY = parentY + 1;
					iEndY = iPositionY + 1;
				}
				originalMatrix = this._writeHorizontalLine(originalMatrix, iPositionX, iStartY, iEndY, nodeParent, nodeChildren);
			} else if (iVertical === 0) {
				originalMatrix = this._writeHorizontalLine(originalMatrix, parentX, parentY + 1, childrenY, nodeParent, nodeChildren);
			} else if (iVertical === 1) {
				//1 row down and do horizontal line.
				//Half and down.
				originalMatrix[parentX][parentY + 1] = this._createConnectionElement(originalMatrix[parentX][parentY + 1],
					ProcessFlow._cellEdgeConstants.LD, nodeParent,
					nodeChildren, false);
				//Down and right.
				originalMatrix[childrenX][parentY + 1] = this._createConnectionElement(originalMatrix[childrenX][parentY + 1],
					ProcessFlow._cellEdgeConstants.DR, nodeParent,
					nodeChildren, (parentY + 1) === (childrenY - 1));
				//Horizontal line to the target.
				originalMatrix = this._writeHorizontalLine(originalMatrix, childrenX, parentY + 2, childrenY, nodeParent, nodeChildren);
			} else { //iVertical > 1
				//Go down until children and do horizontal line.
				//Half left and down.
				originalMatrix[parentX][parentY + 1] = this._createConnectionElement(originalMatrix[parentX][parentY + 1],
					ProcessFlow._cellEdgeConstants.LD, nodeParent,
					nodeChildren, false);
				originalMatrix = this._writeVerticalLine(originalMatrix, childrenX, parentX, parentY + 1, nodeParent, nodeChildren);
				//Half down and right.
				originalMatrix[childrenX][parentY + 1] = this._createConnectionElement(originalMatrix[childrenX][parentY + 1],
					ProcessFlow._cellEdgeConstants.DR, nodeParent,
					nodeChildren, (parentY + 1) === (childrenY - 1));
				originalMatrix = this._writeHorizontalLine(originalMatrix, childrenX, parentY + 2, childrenY, nodeParent, nodeChildren);
			}
			return originalMatrix;
		};

	/**
	 * Write vertical line from firstrow to lastrow on the column position.
	 * @param {Object[]} originalMatrix The original matrix
	 * @param {int} firstRow The index of the first row
	 * @param {int} lastRow The index of the last row
	 * @param {int} column The index of the column
	 * @param {Object} nodeParent The node's parent
	 * @param {Object} nodeChildren The node's child nodes
	 * @private
	 * @returns {Object[]} The original matrix containing vertical line connections
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._writeVerticalLine = function(originalMatrix, firstRow, lastRow, column, nodeParent, nodeChildren) {
		for (var j = firstRow - 1; j > lastRow; j--) {
			originalMatrix[j][column] = this._createConnectionElement(originalMatrix[j][column],
				ProcessFlow._cellEdgeConstants.DU, nodeParent,
				nodeChildren, false);
		}
		return originalMatrix;
	};

	/**
	 * Checks if the horizontal line is possible.
	 *
	 * @private
	 * @param {Object[]} originalMatrix The original matrix
	 * @param {int} row The index of the row
	 * @param {int} firstColumn The index of the first column
	 * @param {int} lastColumn The index of the last column
	 * @returns {boolean} Function return true, if the path is free, otherwise false
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._checkIfHorizontalLinePossible = function(originalMatrix, row, firstColumn, lastColumn) {
		var bLinePossible = true;
		for (var i = firstColumn; i < lastColumn; i++) {
			if (originalMatrix[row][i] instanceof ProcessFlow.NodeElement) {
				bLinePossible = false;
				break;
			}
		}
		return bLinePossible;
	};

	/**
	 * Function calculated and writes horizontal line.
	 *
	 * @private
	 * @param {Object[]} originalMatrix Matrix to write to
	 * @param {int} row The horizontal position
	 * @param {int} firstColumn Where to start
	 * @param {int} lastColumn Where to stop
	 * @param {sap.suite.ui.commons.ProcessFlowNode} nodeParent Definition of initial node
	 * @param {Object} nodeChildren Definition of target node
	 * @returns {Object[]} The original Matrix including the horizontal lines
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._writeHorizontalLine = function(originalMatrix, row, firstColumn, lastColumn, nodeParent, nodeChildren) {
		var bPotentialArrow = (row === nodeChildren.x);
		//No arrow, no last line ... somewhere else will be (up and right).
		if (!bPotentialArrow) {
			lastColumn--;
		}
		for (var i = firstColumn; i < lastColumn; i++) {
			originalMatrix[row][i] =
				this._createConnectionElement(originalMatrix[row][i], ProcessFlow._cellEdgeConstants.LR, nodeParent, nodeChildren, (i === (lastColumn - 1)) && bPotentialArrow);
		}
		return originalMatrix;
	};

	/**
	 * Function adds new connection element to the cell in the matrix. It is an additive approach where during the
	 * drawing phase all the connections in one cell will be joined together.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowConnection} [originalConnection] the connection object to be reused
	 * @param {sap.suite.ui.commons.ProcessFlow._cellEdgeConstants} flowLine the connector's rendering type
	 * @param {sap.suite.ui.commons.ProcessFlowNode} sourceNode the start node
	 * @param {sap.suite.ui.commons.ProcessFlowNode} targetNode the end node
	 * @param {boolean} hasArrow whether the connection has an arrow or not
	 * @returns {sap.suite.ui.commons.ProcessFlowConnection} the connection element
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._createConnectionElement = function(originalConnection, flowLine, sourceNode, targetNode, hasArrow) {
		var oNewConnection = originalConnection;
		if (!oNewConnection) {
			oNewConnection = new ProcessFlowConnection();
		}
		if (oNewConnection.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
			var displayState = this._calculateConnectionDisplayStateBySourceAndTargetNode(sourceNode.c.oNode, targetNode.c.oNode);
			var oConnection = {
				flowLine: flowLine,
				targetNodeState: targetNode.c.state,
				displayState: displayState,
				hasArrow: hasArrow
			};
			oNewConnection.addConnectionData(oConnection);
		}
		return oNewConnection;
	};

	/**
	 * Calculates the correct display state for a connection based on the source and the target node.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode} sourceNode for calculation
	 * @param {sap.suite.ui.commons.ProcessFlowNode} targetNode for calculation
	 * @returns {sap.suite.ui.commons.ProcessFlowDisplayState} The resulting displayState
	 */
	ProcessFlow.InternalMatrixCalculation.prototype._calculateConnectionDisplayStateBySourceAndTargetNode = function(sourceNode, targetNode) {
		var bSourceIsHighlighted = sourceNode.getHighlighted();
		var bSourceIsSelected = sourceNode.getSelected();
		var bSourceIsDimmed = sourceNode._getDimmed();
		var bTargetIsHighlighted = targetNode.getHighlighted();
		var bTargetIsSelected = targetNode.getSelected();
		var bTargetIsDimmed = targetNode._getDimmed();

		var oDisplayState = library.ProcessFlowDisplayState.Regular;
		if (bSourceIsSelected && bTargetIsSelected) {
			oDisplayState = library.ProcessFlowDisplayState.Selected;
		} else if (bSourceIsHighlighted && bTargetIsHighlighted) {
			oDisplayState = library.ProcessFlowDisplayState.Highlighted;
		} else if ((bSourceIsDimmed || bTargetIsDimmed) ||
			bSourceIsHighlighted && bTargetIsSelected ||
			bSourceIsSelected && bTargetIsHighlighted) {
			//If the node is not in state dimmed and no direct connection between select/highlighted nodes is available, set dimmed state.
			oDisplayState = library.ProcessFlowDisplayState.Dimmed;
		}

		return oDisplayState;
	};

	/**
	 * Overriden as this generated function is not supported.
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node The node inside the aggregation
	 * @returns {sap.suite.ui.commons.ProcessFlow} Reference to this in order to allow method chaining
	 * @private
	 */
	ProcessFlow.prototype.addNode = function(node) {
		return this.addAggregation("nodes", node, false);
	};

	/**
	 * Switch cursors for scrollable/non-scrollable content.
	 *
	 * @private
	 * @param {object} $scrollContainer The affected scroll container (jQuery object)
	 * @param {string} cursorClassFrom Class containing the original cursor definition
	 * @param {string} cursorClassTo Class containing the new cursor definition
	 * @since 1.22
	 */
	ProcessFlow.prototype._switchCursors = function($scrollContainer, cursorClassFrom, cursorClassTo) {
		if ($scrollContainer.hasClass(cursorClassFrom)) {
			$scrollContainer.removeClass(cursorClassFrom);
		}
		if (!$scrollContainer.hasClass(cursorClassTo)) {
			$scrollContainer.addClass(cursorClassTo);
		}
	};

	/**
	 * Clear the mouse handlers for the scrolling functionality.
	 * @private
	 * @param {jQuery} $scrollContainer The jQuery object of the scroll container
	 * @since 1.22
	 */
	ProcessFlow.prototype._clearHandlers = function($scrollContainer) {
		$scrollContainer.bind(this._mousePreventEvents, jQuery.proxy(this._handlePrevent, this));
	};

	/**
	 * Initializes the zoom level for different devices.
	 *
	 * @private
	 */
	ProcessFlow.prototype._initZoomLevel = function() {
		//Set initial ZoomLevel according to ProcessFlow container size.
		//Breakpoints: until 599px = Level 4 / 600px-1023px = Level 3 / from 1024px = Level 2.
		if (this.$()) {
			var iWidth = this.$().width();
			if (iWidth) {
				if (iWidth < MobileLibrary.ScreenSizes.tablet) {
					this.setZoomLevel(library.ProcessFlowZoomLevel.Four);
				} else if (iWidth < MobileLibrary.ScreenSizes.desktop) {
					this.setZoomLevel(library.ProcessFlowZoomLevel.Three);
				} else {
					this.setZoomLevel(library.ProcessFlowZoomLevel.Two);
				}
			}
		}
	};

	/**
	 * Register mouse wheel event
	 * @private
	 * @param {jQuery.Event} oEvent the jQuery event object.
	 */
	ProcessFlow.prototype._registerMouseWheel = function(oEvent) {
		var oDirection = oEvent.originalEvent.wheelDelta || -oEvent.originalEvent.detail;
		if (oDirection === 0) {
			//for IE only
			oDirection = -oEvent.originalEvent.deltaY;
		}
		if (oEvent && !oEvent.isDefaultPrevented()) {
			oEvent.preventDefault();
			oEvent.originalEvent.returnValue = false;
		}

		var iWaitTime = 300;
		var fnDoNotListen = function() {
			var iDiffTime = new Date() - this._wheelTimestamp;
			if (iDiffTime < iWaitTime) {
				this._wheelTimeout = jQuery.sap.delayedCall(iWaitTime - iDiffTime, this, fnDoNotListen.bind(this));
			} else {
				this._wheelTimeout = null;
				this._wheelCalled = false;
			}
		};
		if (!this._wheelCalled) {
			this._wheelCalled = true;

			if (oDirection < 0) {
				this._isFocusChanged = true;
				this.zoomOut();
			} else {
				this._isFocusChanged = true;
				this.zoomIn();
			}
		}
		if (!this._wheelTimeout) {
			this._wheelTimestamp = new Date();
			this._wheelTimeout = jQuery.sap.delayedCall(iWaitTime, this, fnDoNotListen.bind(this));
		}
		if (oEvent && !oEvent.isPropagationStopped()) {
			oEvent.stopPropagation();
		}
		if (oEvent && !oEvent.isImmediatePropagationStopped()) {
			oEvent.stopImmediatePropagation();
		}
	};

	/** Sets the tab focus on the given element or to _lastNavigationFocusElement if no parameter is given. If no parameter
	 * is given and _lastNavigationFocusElement is false, nothing happens.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node the node to focus.
	 */
	ProcessFlow.prototype._setFocusToNode = function(node) {
		//If there's a node as parameter.
		if (node) {
			if (node.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				jQuery("#" + node.sId).parent().focus();
				node._setNavigationFocus(true);
				node.rerender();
			} else if (node.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
				node.$().focus();
				node._setNavigationFocus(true);
			}
			// If there's no parameter, set the focus to _lastNavigationFocusElement if is not false
		} else if (this._lastNavigationFocusElement) {
			if (this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				jQuery("#" + this._lastNavigationFocusElement.sId).parent().focus();
				this._lastNavigationFocusElement._setNavigationFocus(true);
				this._lastNavigationFocusElement.rerender();
			} else if (this._lastNavigationFocusElement.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnectionLabel") {
				this._lastNavigationFocusElement.$().focus();
				this._lastNavigationFocusElement._setNavigationFocus(true);
			}
		}
	};

	/**
	 * Changes the navigation focus from the actual node to the node specified as parameter.
	 * Calls rerender on both nodes.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode} nodeFrom the old focused node
	 * @param {sap.suite.ui.commons.ProcessFlowNode} nodeTo the new node to focus to
	 * @since 1.23
	 */
	ProcessFlow.prototype._changeNavigationFocus = function(nodeFrom, nodeTo) {
		if (nodeFrom && nodeTo && (nodeFrom.getId() !== nodeTo.getId())) {
			jQuery.sap.log.debug("Rerendering PREVIOUS node with id '" + nodeFrom.getId() +
				"' navigation focus : " + nodeFrom._getNavigationFocus());
			nodeFrom._setNavigationFocus(false);
			if (nodeFrom.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				nodeFrom.rerender();
			}
		}

		if (nodeTo) {
			jQuery.sap.log.debug("Rerendering CURRENT node with id '" + nodeTo.getId() +
				"' navigation focus : " + nodeTo._getNavigationFocus());
			nodeTo._setNavigationFocus(true);
			if (nodeTo.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				nodeTo.rerender();
			}
			this._lastNavigationFocusElement = nodeTo;
			this._onFocusChanged();
		}
	};

	/**
	 * Function reacts on page up and page down. It should go 5 lines up or down
	 * or little bit less if there is not enough space.
	 * With alt page up move focus left by 5 items maximum.
	 * With alt page down move focus right by 5 items maximum.
	 *
	 * @private
	 * @param {suite.ui.commons.ProcessFlow._enumMoveDirection} direction The move direction
	 * @param {boolean} altKey True if alt key is pressed, false otherwise
	 * @returns {boolean} Value describes if a new node was found
	 */
	ProcessFlow.prototype._moveOnePage = function(direction, altKey) {
		direction = direction || ProcessFlow._enumMoveDirection.UP;
		altKey = altKey || false;
		//Search for navigated element.
		var iPositionOriginalX = 0, iPositionOriginalY = 0;
		var iPositionNewX = 0, iPositionNewY = 0;
		var iNodesOverCount = 0;
		var bNewElementFound = false,
			i, j, oLabel;
		for (i = 0; i < this._internalCalcMatrix.length; i++) {
			for (j = 0; j < this._internalCalcMatrix[i].length; j++) {
				if (this._internalCalcMatrix[i][j]
					&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && this._internalCalcMatrix[i][j]._getNavigationFocus()) {
					iPositionOriginalX = i;
					iPositionOriginalY = j;
					break;
				} else if (this._internalCalcMatrix[i][j]
					&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[i][j]._getVisibleLabel();
					if (oLabel && oLabel._getNavigationFocus()) {
						iPositionOriginalX = i;
						iPositionOriginalY = j;
						break;
					}
				}
			}
		}

		//Going 5 elements on the same row.
		if (altKey) {
			if (direction === ProcessFlow._enumMoveDirection.UP) {
				for (j = iPositionOriginalY - 1; j >= 0 && iNodesOverCount < this._jumpOverElements; j--) {
					if (this._internalCalcMatrix[iPositionOriginalX][j]
						&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[iPositionOriginalX][j].getHighlighted())) {
						iNodesOverCount++;
						iPositionNewX = iPositionOriginalX;
						iPositionNewY = j;
						bNewElementFound = true;
					} else if (this._internalCalcMatrix[iPositionOriginalX][j]
						&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[iPositionOriginalX][j]._getVisibleLabel();
						if (this._labelCanGetFocus(oLabel)) {
							iNodesOverCount++;
							iPositionNewX = iPositionOriginalX;
							iPositionNewY = j;
							bNewElementFound = true;
						}
					}
				}
			} else if (direction === ProcessFlow._enumMoveDirection.DOWN) {
				for (j = iPositionOriginalY + 1; j < this._internalCalcMatrix[iPositionOriginalX].length && iNodesOverCount < this._jumpOverElements; j++) {
					if (this._internalCalcMatrix[iPositionOriginalX][j]
						&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode"
						&& (!this._bHighlightedMode || this._internalCalcMatrix[iPositionOriginalX][j].getHighlighted())) {
						iNodesOverCount++;
						iPositionNewX = iPositionOriginalX;
						iPositionNewY = j;
						bNewElementFound = true;
					} else if (this._internalCalcMatrix[iPositionOriginalX][j]
						&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[iPositionOriginalX][j]._getVisibleLabel();
						if (this._labelCanGetFocus(oLabel)) {
							iNodesOverCount++;
							iPositionNewX = iPositionOriginalX;
							iPositionNewY = j;
							bNewElementFound = true;
						}
					}
				}
			}
		} else if (direction === ProcessFlow._enumMoveDirection.UP) {
			for (i = iPositionOriginalX - 1; i >= 0 && iNodesOverCount < this._jumpOverElements; i--) {
				if (this._internalCalcMatrix[i][iPositionOriginalY]
					&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionOriginalY].getHighlighted())) {
					iNodesOverCount++;
					iPositionNewX = i;
					iPositionNewY = iPositionOriginalY;
					bNewElementFound = true;
				} else if (this._internalCalcMatrix[i][iPositionOriginalY]
					&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[i][iPositionOriginalY]._getVisibleLabel();
					if (this._labelCanGetFocus(oLabel)) {
						iNodesOverCount++;
						iPositionNewX = i;
						iPositionNewY = iPositionOriginalY;
						bNewElementFound = true;
					}
				}
			}
		} else if (direction === ProcessFlow._enumMoveDirection.DOWN) {
			for (i = iPositionOriginalX + 1; i < this._internalCalcMatrix.length && iNodesOverCount < this._jumpOverElements; i++) {
				if (this._internalCalcMatrix[i][iPositionOriginalY]
					&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionOriginalY].getHighlighted())) {
					iNodesOverCount++;
					iPositionNewX = i;
					iPositionNewY = iPositionOriginalY;
					bNewElementFound = true;
				} else if (this._internalCalcMatrix[i][iPositionOriginalY]
					&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[i][iPositionOriginalY]._getVisibleLabel();
					if (this._labelCanGetFocus(oLabel)) {
						iNodesOverCount++;
						iPositionNewX = i;
						iPositionNewY = iPositionOriginalY;
						bNewElementFound = true;
					}
				}
			}
		}

		if (bNewElementFound) {
			if (this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]
				&& this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._getVisibleLabel()._setNavigationFocus(false);
			} else {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._setNavigationFocus(false);
			}
			if (this._internalCalcMatrix[iPositionNewX][iPositionNewY]
				&& this._internalCalcMatrix[iPositionNewX][iPositionNewY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
				oLabel = this._internalCalcMatrix[iPositionNewX][iPositionNewY]._getVisibleLabel();
				oLabel._setNavigationFocus(true);
				this._lastNavigationFocusElement = oLabel;
			} else {
				this._internalCalcMatrix[iPositionNewX][iPositionNewY]._setNavigationFocus(true);
				this._lastNavigationFocusElement = this._internalCalcMatrix[iPositionNewX][iPositionNewY];
			}
		}
		return bNewElementFound;
	};

	/**
	 * Function reacts on home/end. it should go to the first/last element on given row.
	 * With ctrl it goes to the first/last active element on the process flow
	 * or little bit less if there is not enough space.
	 *
	 * @private
	 * @param {string} direction please see sap.suite.ui.commons.ProcessFlow._enumMoveDirection LEFT -> HOME, RIGHT -> END
	 * @param {boolean} ctrlKey true if ctrl key is pressed
	 * @returns {boolean} Value describes if a new node was found
	 */
	ProcessFlow.prototype._moveHomeEnd = function(direction, ctrlKey) {
		direction = direction || ProcessFlow._enumMoveDirection.RIGHT;
		ctrlKey = ctrlKey || false;
		//Search for navigated element.
		var iPositionOriginalX = 0, iPositionOriginalY = 0;
		var iPositionNewX = 0, iPositionNewY = 0;
		var bNewElementFound = false,
			i, j, oLabel;
		for (i = 0; i < this._internalCalcMatrix.length; i++) {
			for (j = 0; j < this._internalCalcMatrix[i].length; j++) {
				if (this._internalCalcMatrix[i][j]
					&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode"
					&& this._internalCalcMatrix[i][j]._getNavigationFocus()) {
					iPositionOriginalX = i;
					iPositionOriginalY = j;
					break;
				} else if (this._internalCalcMatrix[i][j]
					&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[i][j]._getVisibleLabel();
					if (oLabel && oLabel._getNavigationFocus()) {
						iPositionOriginalX = i;
						iPositionOriginalY = j;
						break;
					}
				}
			}
		}

		//Going to the first / last element on the given column.
		if (ctrlKey) {
			if (direction === ProcessFlow._enumMoveDirection.LEFT) {
				for (i = 0; i < iPositionOriginalX; i++) {
					if (this._internalCalcMatrix[i][iPositionOriginalY]
						&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionOriginalY].getHighlighted())) {
						iPositionNewX = i;
						iPositionNewY = iPositionOriginalY;
						bNewElementFound = true;
						break;
					} else if (this._internalCalcMatrix[i][iPositionOriginalY]
						&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionOriginalY]._getVisibleLabel();
						if (this._labelCanGetFocus(oLabel)) {
							iPositionNewX = i;
							iPositionNewY = iPositionOriginalY;
							bNewElementFound = true;
							break;
						}
					}
				}
			} else if (direction === ProcessFlow._enumMoveDirection.RIGHT) {
				for (i = this._internalCalcMatrix.length - 1; i > iPositionOriginalX; i--) {
					if (this._internalCalcMatrix[i][iPositionOriginalY]
						&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionOriginalY].getHighlighted())) {
						iPositionNewX = i;
						iPositionNewY = iPositionOriginalY;
						bNewElementFound = true;
						break;
					} else if (this._internalCalcMatrix[i][iPositionOriginalY]
						&& this._internalCalcMatrix[i][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionOriginalY]._getVisibleLabel();
						if (this._labelCanGetFocus(oLabel)) {
							iPositionNewX = i;
							iPositionNewY = iPositionOriginalY;
							bNewElementFound = true;
							break;
						}
					}
				}
			}
			//Going to the first/last element of the row.
		} else if (direction === ProcessFlow._enumMoveDirection.LEFT) {
			for (j = 0; j < iPositionOriginalY; j++) {
				if (this._internalCalcMatrix[iPositionOriginalX][j]
					&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[iPositionOriginalX][j].getHighlighted())) {
					iPositionNewX = iPositionOriginalX;
					iPositionNewY = j;
					bNewElementFound = true;
					break;
				} else if (this._internalCalcMatrix[iPositionOriginalX][j]
					&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[iPositionOriginalX][j]._getVisibleLabel();
					if (this._labelCanGetFocus(oLabel)) {
						iPositionNewX = iPositionOriginalX;
						iPositionNewY = j;
						bNewElementFound = true;
						break;
					}
				}
			}
		} else if (direction === ProcessFlow._enumMoveDirection.RIGHT) {
			for (j = this._internalCalcMatrix[iPositionOriginalX].length - 1; j > iPositionOriginalY; j--) {
				if (this._internalCalcMatrix[iPositionOriginalX][j]
					&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && (!this._bHighlightedMode || this._internalCalcMatrix[iPositionOriginalX][j].getHighlighted())) {
					iPositionNewX = iPositionOriginalX;
					iPositionNewY = j;
					bNewElementFound = true;
					break;
				} else if (this._internalCalcMatrix[iPositionOriginalX][j]
					&& this._internalCalcMatrix[iPositionOriginalX][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
					oLabel = this._internalCalcMatrix[iPositionOriginalX][j]._getVisibleLabel();
					if (this._labelCanGetFocus(oLabel)) {
						iPositionNewX = iPositionOriginalX;
						iPositionNewY = j;
						bNewElementFound = true;
						break;
					}
				}
			}
		}

		if (bNewElementFound) {
			if (this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]
				&& this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._getVisibleLabel()._setNavigationFocus(false);
			} else {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._setNavigationFocus(false);
			}
			if (this._internalCalcMatrix[iPositionNewX][iPositionNewY] && this._internalCalcMatrix[iPositionNewX][iPositionNewY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
				oLabel = this._internalCalcMatrix[iPositionNewX][iPositionNewY]._getVisibleLabel();
				oLabel._setNavigationFocus(true);
				this._lastNavigationFocusElement = oLabel;
			} else {
				this._internalCalcMatrix[iPositionNewX][iPositionNewY]._setNavigationFocus(true);
				this._lastNavigationFocusElement = this._internalCalcMatrix[iPositionNewX][iPositionNewY];
			}
		}
		return bNewElementFound;
	};

	/**
	 * Function moves the focus to the next node based on tab behaviour.
	 * First going left, after to the next row.
	 *
	 * @private
	 * @param {string} direction please see enumeration Direction ( sap.suite.ui.commons.ProcessFlow._enumMoveDirection )
	 * @param {boolean} step true if the next element is possible to set. False if there is not more elements to set.
	 * @returns {object} The node or label to move to (sap.suite.ui.commons.ProcessFlowNode || sap.suite.ui.commons.ProcessFlowConnectionLabel)
	 */
	ProcessFlow.prototype._moveToNextElement = function(direction, step) {
		//First find the current focus element.
		direction = direction || ProcessFlow._enumMoveDirection.RIGHT;

		if (sap.ui.getCore().getConfiguration().getRTL()) {
			if (direction === ProcessFlow._enumMoveDirection.RIGHT) {
				direction = ProcessFlow._enumMoveDirection.LEFT;
			} else if (direction === ProcessFlow._enumMoveDirection.LEFT) {
				direction = ProcessFlow._enumMoveDirection.RIGHT;
			}
		}

		step = step || 1;

		var bFocusElementFound = false;
		var bNewElementSet = false;
		var iPositionOriginalX = 0, iPositionOriginalY = 1,
			i, j, oLabel;
		if (!this._internalCalcMatrix) {
			return false;
		}
		//First search for node which is focused.
		var iPositionX = 0, iPositionY = 0;
		for (i = 0; i < this._internalCalcMatrix.length; i++) {
			for (j = 0; j < this._internalCalcMatrix[i].length; j++) {
				if (this._internalCalcMatrix[i][j]) {
					if (this._internalCalcMatrix[i][j]
						&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode" && this._internalCalcMatrix[i][j]._getNavigationFocus()) {
						iPositionOriginalX = iPositionX = i;
						iPositionOriginalY = iPositionY = j;
						bFocusElementFound = true;
						break;
					} else if (this._internalCalcMatrix[i][j]
						&& this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][j]._getVisibleLabel();
						if (oLabel && oLabel._getNavigationFocus() && oLabel.getEnabled()) {
							iPositionOriginalX = iPositionX = i;
							iPositionOriginalY = iPositionY = j;
							bFocusElementFound = true;
							break;
						}
					}
				}
			}
			if (bFocusElementFound) {
				break;
			}
		}

		if (direction === ProcessFlow._enumMoveDirection.RIGHT) {
			for (i = iPositionX; i < this._internalCalcMatrix.length; i++) {
				for (j = iPositionY + 1; j < this._internalCalcMatrix[i].length; j++) {
					if (this._internalCalcMatrix[i][j] && this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][j].getHighlighted())) {
							this._internalCalcMatrix[i][j]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][j];
							bNewElementSet = true;
							break;
						}
					} else if (this._internalCalcMatrix[i][j] && this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][j]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					}
				}
				//Shortcut, we have done already everything.
				iPositionY = 0; //First iPositionX line was from iPositionY, now from zero again. The plus one does not hurt, because first column is empty.
				if (bNewElementSet) {
					break;
				}
			}
		}

		if (direction === ProcessFlow._enumMoveDirection.LEFT) {
			for (i = iPositionX; i >= 0; i--) {
				for (j = iPositionY - 1; j >= 0; j--) {
					if (this._internalCalcMatrix[i][j] && this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][j].getHighlighted())) {
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][j]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][j];
							bNewElementSet = true;
							break;
						}
					} else if (this._internalCalcMatrix[i][j] && this._internalCalcMatrix[i][j].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][j]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					}
				}
				if (i > 0) {
					iPositionY = this._internalCalcMatrix[i - 1].length;
				}
				//Shortcut, we have done already everything.
				if (bNewElementSet) {
					break;
				}
			}
		}

		var iDeviation,
			iPositionLeftY,
			iPositionRightY;
		if (direction === ProcessFlow._enumMoveDirection.UP) {
			for (i = iPositionX - 1; i >= 0; i--) {
				//We have single line, check from iPositionY first left, after right.
				iDeviation = 0;
				while (!bNewElementSet) {
					iPositionLeftY = iPositionY - iDeviation;
					iPositionRightY = iPositionY + iDeviation;
					if (iPositionLeftY >= 0
						&& this._internalCalcMatrix[i][iPositionLeftY]
						&& this._internalCalcMatrix[i][iPositionLeftY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionLeftY].getHighlighted())) {
							this._internalCalcMatrix[i][iPositionLeftY]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionLeftY];
							bNewElementSet = true;
							break;
						}
					} else if (iPositionLeftY >= 0
						&& this._internalCalcMatrix[i][iPositionLeftY]
						&& this._internalCalcMatrix[i][iPositionLeftY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionLeftY]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					}//End of processflownode for left.
					if (iPositionRightY < this._internalCalcMatrix[i].length
						&& this._internalCalcMatrix[i][iPositionRightY]
						&& this._internalCalcMatrix[i][iPositionRightY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionRightY].getHighlighted())) {
							this._internalCalcMatrix[i][iPositionRightY]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionRightY];
							bNewElementSet = true;
							break;
						}
					} else if (iPositionRightY >= 0
						&& this._internalCalcMatrix[i][iPositionRightY]
						&& this._internalCalcMatrix[i][iPositionRightY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionRightY]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					} //End of processflownode for right.
					//We are out of this line for Y position.
					if (iPositionLeftY < 0 && iPositionRightY > this._internalCalcMatrix[i].length) {
						break;
					}
					iDeviation++;
				}
			}
		}

		if (direction === ProcessFlow._enumMoveDirection.DOWN) {
			for (i = iPositionX + 1; i < this._internalCalcMatrix.length; i++) {
				//We have single line, check from iPositionY first left, after right.
				iDeviation = 0;
				while (!bNewElementSet) {
					iPositionLeftY = iPositionY - iDeviation;
					iPositionRightY = iPositionY + iDeviation;
					if (iPositionLeftY >= 0
						&& this._internalCalcMatrix[i][iPositionLeftY]
						&& this._internalCalcMatrix[i][iPositionLeftY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionLeftY].getHighlighted())) {
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionLeftY]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionLeftY];
							bNewElementSet = true;
							break;
						}
					} else if (iPositionLeftY >= 0
						&& this._internalCalcMatrix[i][iPositionLeftY]
						&& this._internalCalcMatrix[i][iPositionLeftY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionLeftY]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					}//End of processflownode for left.
					if (iPositionRightY < this._internalCalcMatrix[i].length
						&& this._internalCalcMatrix[i][iPositionRightY]
						&& this._internalCalcMatrix[i][iPositionRightY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
						if (bFocusElementFound && (!this._bHighlightedMode || this._internalCalcMatrix[i][iPositionRightY].getHighlighted())) {
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionRightY]._setNavigationFocus(true);
							this._lastNavigationFocusElement = this._internalCalcMatrix[i][iPositionRightY];
							bNewElementSet = true;
							break;
						}
					} else if (iPositionRightY >= 0
						&& this._internalCalcMatrix[i][iPositionRightY]
						&& this._internalCalcMatrix[i][iPositionRightY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowConnection") {
						oLabel = this._internalCalcMatrix[i][iPositionRightY]._getVisibleLabel();
						if (bFocusElementFound && this._labelCanGetFocus(oLabel)) {
							oLabel._setNavigationFocus(true);
							this._lastNavigationFocusElement = oLabel;
							bNewElementSet = true;
							break;
						}
					}//End of processflownode for right.
					//We are out of this line for Y position.
					if (iPositionLeftY < 0 && iPositionRightY > this._internalCalcMatrix[i].length) {
						break;
					}
					iDeviation++;
				}
			}
		}

		if (bNewElementSet) {
			if (this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]
				&& this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY].getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode") {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._setNavigationFocus(false);
			} else {
				this._internalCalcMatrix[iPositionOriginalX][iPositionOriginalY]._getVisibleLabel()._setNavigationFocus(false);
			}
		}
		return bNewElementSet;
	};

	/**
	 * Method called on zoom change.
	 * Scrolls the PF content after a zoom change so, that the focused content of the scroll container stays in focus (if possible).
	 * @private
	 * @param {Object} scrollContainerContext The scroll container settings object
	 * @param {jQuery} $scrollContainer The jQuery object of the scroll container
	 * @returns {object} The scroll container context
	 * @since 1.26
	 */
	ProcessFlow.prototype._getScrollContainerOnZoomChanged = function(scrollContainerContext, $scrollContainer) {
		scrollContainerContext.scrollLeft = Math.round($scrollContainer.context.scrollWidth / scrollContainerContext.scrollWidth * scrollContainerContext.scrollLeft);
		scrollContainerContext.scrollTop = Math.round($scrollContainer.context.scrollHeight / scrollContainerContext.scrollHeight * scrollContainerContext.scrollTop);
		scrollContainerContext.scrollWidth = $scrollContainer.context.scrollWidth;
		scrollContainerContext.scrollHeight = $scrollContainer.context.scrollHeight;

		return scrollContainerContext;
	};

	/**
	 * Merge values of node states for several nodes.
	 *
	 * @private
	 * @param {array} laneIdNodeStates Node states for all nodes of the same laneId
	 * @param {boolean} altKey True if alt key is pressed, false otherwise
	 * @returns {Array} aResult Array of cumulated node states for aLaneIdNodeStates
	 */
	ProcessFlow.prototype._mergeLaneIdNodeStates = function(laneIdNodeStates) {
		var iPositive = 0;
		var iNegative = 0;
		var iNeutral = 0;
		var iPlanned = 0;
		var iCritical = 0;

		for (var iState = 0; iState < 5; iState++) {
			for (var iNode = 0; iNode < laneIdNodeStates.length; iNode++) {
				switch (laneIdNodeStates[iNode][iState].state) {
					case library.ProcessFlowNodeState.Positive:
						iPositive = iPositive + laneIdNodeStates[iNode][iState].value;
						break;
					case library.ProcessFlowNodeState.Negative:
						iNegative = iNegative + laneIdNodeStates[iNode][iState].value;
						break;
					case library.ProcessFlowNodeState.Neutral:
						iNeutral = iNeutral + laneIdNodeStates[iNode][iState].value;
						break;
					case library.ProcessFlowNodeState.Planned:
						iPlanned = iPlanned + laneIdNodeStates[iNode][iState].value;
						break;
					//plannedNegative belong to Negative group
					case library.ProcessFlowNodeState.PlannedNegative:
						iNegative = iNegative + laneIdNodeStates[iNode][iState].value;
						break;
					case library.ProcessFlowNodeState.Critical:
						iCritical = iCritical + laneIdNodeStates[iNode][iState].value;
						break;
					default:
						break;
				}
			}
		}

		return [
			{
				state: library.ProcessFlowNodeState.Positive,
				value: iPositive
			}, {
				state: library.ProcessFlowNodeState.Negative,
				value: iNegative
			}, {
				state: library.ProcessFlowNodeState.Neutral,
				value: iNeutral
			}, {
				state: library.ProcessFlowNodeState.Planned,
				value: iPlanned
			}, {
				state: library.ProcessFlowNodeState.Critical,
				value: iCritical
			}
		];
	};

	/**
	 * Sets or removes navigation focus on the Lane header ( for keyboard support ).
	 *
	 * @private
	 * @param {boolean} navigationFocusFlag if true the navigation focus is set, if false the navigation focus is removed
	 * @since 1.26
	 */
	ProcessFlow.prototype._setFocusOnHeader = function(navigationFocusFlag) {
		var thead = jQuery.sap.byId(this.getId() + "-thead");
		if (navigationFocusFlag) {
			thead.focus();
			thead.addClass("sapSuiteUiCommonsPFHeaderFocused");
			this._headerHasFocus = true;
		} else {
			thead.removeClass("sapSuiteUiCommonsPFHeaderFocused");
			this._headerHasFocus = false;
		}
	};

	/**
	 * Scrolls the header if possible, using an animation.
	 *
	 * @private
	 * @param {int} delta How far to scroll
	 * @param {int} duration How long to scroll (ms)
	 * @since 1.30
	 */
	ProcessFlow.prototype._scroll = function(delta, duration) {
		var oDomRef = this._getScrollContainer().get(0);
		var iScrollLeft = oDomRef.scrollLeft;
		if (!Device.browser.msie && !Device.browser.edge && this._bRtl) {
			delta = -delta;
		} //RTL lives in the negative space.
		var iScrollTarget = iScrollLeft + delta;
		jQuery(oDomRef).stop(true, true).animate({ scrollLeft: iScrollTarget }, duration, jQuery.proxy(this._adjustAndShowArrow, this));
	};

	/**
	 * Adjusts the arrow position and shows the arrow.
	 *
	 * @private
	 * @since 1.30
	 */
	ProcessFlow.prototype._adjustAndShowArrow = function() {
		this._checkOverflow(this._getScrollContainer().get(0), this.$());
		if (this.getScrollable()) {
			this._moveArrowAndCounterVertical();
		}
		if (this._isFocusChanged) {
			this._setFocusToNode(this._lastNavigationFocusElement);
			this._isFocusChanged = false;
		}
	};

	/**
	 * Gets the icon of the requested arrow (left/right).
	 *
	 * @private
	 * @param {int} direction The scrolling arrow direction ProcessFlow._constants.left or ProcessFlow._constants.right
	 * @returns {Object} icon of the requested arrow
	 * @since 1.30
	 */
	ProcessFlow.prototype._getScrollingArrow = function(direction) {
		var sSrc;

		if (Device.system.desktop) {
			//Use navigation arrows on desktop and win8 combi devices.
			sSrc = "sap-icon://navigation-" + direction + "-arrow";
		} else {
			//Use slim arrows on mobile devices.
			sSrc = "sap-icon://slim-arrow-" + direction;
		}

		var mProperties = {
			src: sSrc
		};

		var sLeftArrowClass = "sapPFHArrowScrollLeft";
		var sRightArrowClass = "sapPFHArrowScrollRight";
		var aCssClassesToAddLeft = ["sapPFHArrowScroll", sLeftArrowClass];
		var aCssClassesToAddRight = ["sapPFHArrowScroll", sRightArrowClass];

		if (direction === ProcessFlow._constants.left) {
			if (!this._oArrowLeft) {
				this._oArrowLeft = MobileLibrary.ImageHelper.getImageControl(this.getId() + ProcessFlow._constants.arrowScrollLeftMinus, null, this, mProperties, aCssClassesToAddLeft);
			}
			return this._oArrowLeft;
		}
		if (direction === ProcessFlow._constants.right) {
			if (!this._oArrowRight) {
				this._oArrowRight = MobileLibrary.ImageHelper.getImageControl(this.getId() + ProcessFlow._constants.arrowScrollRightMinus, null, this, mProperties, aCssClassesToAddRight);
			}
			return this._oArrowRight;
		}
	};

	/**
	 * Checks if scrolling is needed.
	 *
	 * @private
	 * @param {jQuery} oScrollContainer The scroll container
	 * @param {jQuery} $processFlow the ProcessFlow container
	 * @returns {boolean} True if scrolling is needed, otherwise false
	 * @since 1.30
	 */
	ProcessFlow.prototype._checkScrolling = function(oScrollContainer, $processFlow) {
		var bScrolling = false;

		//Check if there are more lanes than displayed.
		if (oScrollContainer) {
			if (oScrollContainer.scrollWidth > oScrollContainer.clientWidth) {
				//Scrolling possible.
				bScrolling = true;
			}
		}

		if (this._arrowScrollable !== bScrolling) {
			$processFlow.toggleClass("sapPFHScrollable", bScrolling);
			$processFlow.toggleClass("sapPFHNotScrollable", !bScrolling);
			this._arrowScrollable = bScrolling;
		}

		return bScrolling;
	};

	/**
	 * Calculates the left counter.
	 *
	 * @private
	 * @returns {number} The left counter
	 * @since 1.30
	 */
	ProcessFlow.prototype._updateLeftCounter = function() {
		var iScrollDelta;
		if (!this._bRtl) { //Normal LTR mode.
			iScrollDelta = this._getScrollContainer().scrollLeft();
		} else { //RTL mode.
			iScrollDelta = this._getScrollContainer().scrollRightRTL();
		}
		var iCounterLeft = Math.round(iScrollDelta / this._scrollStep);
		this.$(ProcessFlow._constants.counterLeft).text(iCounterLeft.toString());
		return iCounterLeft;
	};

	/**
	 * Calculates the right counter.
	 *
	 * @private
	 * @param {int} scrollContainerAvailableWidth Available width for the scroll container
	 * @param {int} scrollContainerRealWidth Effective width of the scroll container
	 * @returns {number} The right counter
	 * @since 1.30
	 */
	ProcessFlow.prototype._updateRightCounter = function(scrollContainerAvailableWidth, scrollContainerRealWidth) {
		var iScrollDelta;
		var iCounterRight;
		if (!this._bRtl) { //Normal LTR mode.
			iScrollDelta = this._getScrollContainer().scrollLeft();
			iCounterRight = Math.round((scrollContainerRealWidth - iScrollDelta - scrollContainerAvailableWidth) / this._scrollStep);
		} else { //RTL mode.
			iScrollDelta = this._getScrollContainer().scrollLeftRTL();
			iCounterRight = Math.round(iScrollDelta / this._scrollStep);
		}
		this.$(ProcessFlow._constants.counterRight).text(iCounterRight.toString());
		return iCounterRight;
	};

	/**
	 * For scrollable ProcessFlow : move arrows and counter vertically when scrolling.
	 *
	 * @private
	 * @since 1.30
	 */
	ProcessFlow.prototype._moveArrowAndCounterVertical = function() {
		var iScrollTop = this._getScrollContainer().scrollTop();
		if (iScrollTop > 0) {
			var iArrowTop = this._iInitialArrowTop - iScrollTop;
			var iCounterTop = this._iInitialCounterTop - iScrollTop;
			var iDiffArrowCounter = this._iInitialCounterTop - this._iInitialArrowTop;
			if (iArrowTop > 0) {
				this.$(ProcessFlow._constants.arrowScrollRight).css(ProcessFlow._constants.top, iArrowTop + ProcessFlow._constants.px);
				this.$(ProcessFlow._constants.arrowScrollLeft).css(ProcessFlow._constants.top, iArrowTop + ProcessFlow._constants.px);
			} else {
				this.$(ProcessFlow._constants.arrowScrollRight).css(ProcessFlow._constants.top, "0px");
				this.$(ProcessFlow._constants.arrowScrollLeft).css(ProcessFlow._constants.top, "0px");
			}
			if (iCounterTop > iDiffArrowCounter) {
				this.$(ProcessFlow._constants.counterRight).css(ProcessFlow._constants.top, iCounterTop + ProcessFlow._constants.px);
				this.$(ProcessFlow._constants.counterLeft).css(ProcessFlow._constants.top, iCounterTop + ProcessFlow._constants.px);
			} else {
				this.$(ProcessFlow._constants.counterRight).css(ProcessFlow._constants.top, iDiffArrowCounter + ProcessFlow._constants.px);
				this.$(ProcessFlow._constants.counterLeft).css(ProcessFlow._constants.top, iDiffArrowCounter + ProcessFlow._constants.px);
			}
		} else {
			this.$(ProcessFlow._constants.arrowScrollRight).css(ProcessFlow._constants.top, this._iInitialArrowTop + ProcessFlow._constants.px);
			this.$(ProcessFlow._constants.arrowScrollLeft).css(ProcessFlow._constants.top, this._iInitialArrowTop + ProcessFlow._constants.px);
			this.$(ProcessFlow._constants.counterRight).css(ProcessFlow._constants.top, this._iInitialCounterTop + ProcessFlow._constants.px);
			this.$(ProcessFlow._constants.counterLeft).css(ProcessFlow._constants.top, this._iInitialCounterTop + ProcessFlow._constants.px);
		}
	};

	/**
	 * Changes the state of the scroll arrows depending on whether they are required due to overflow.
	 *
	 * @private
	 * @param {jQuery} scrollContainer The scroll container
	 * @param {jQuery} $processFlow The ProcessFlow container
	 * @since 1.30
	 */
	ProcessFlow.prototype._checkOverflow = function(scrollContainer, $processFlow) {
		if (this._checkScrolling(scrollContainer, $processFlow) && scrollContainer) {
			this._setScrollWidth();
			//Check whether scrolling to the left is possible.
			var bScrollBack = false;
			var bScrollForward = false;
			var iOffset = 20; //Display arrow and counter only if the distance to the end of the scroll container is at least 20px.
			var iScrollLeft = this._getScrollContainer().scrollLeft();
			var iScrollContainerRealWidth = scrollContainer.scrollWidth;
			var iScrollContainerAvailableWidth = scrollContainer.clientWidth;
			if (Math.abs(iScrollContainerRealWidth - iScrollContainerAvailableWidth) === 1) { //Avoid rounding issues see CSN 1316630 2013
				iScrollContainerRealWidth = iScrollContainerAvailableWidth;
			}

			if (!this._bRtl) { //Normal LTR mode.
				if (iScrollLeft > iOffset) {
					bScrollBack = true;
				}
				if ((iScrollContainerRealWidth > iScrollContainerAvailableWidth) && (iScrollLeft + iScrollContainerAvailableWidth + iOffset < iScrollContainerRealWidth )) {
					bScrollForward = true;
				}
			} else { //RTL mode.
				var $ScrollContainer = jQuery(scrollContainer);
				if ($ScrollContainer.scrollLeftRTL() > iOffset) {
					bScrollForward = true;
				}
				if ($ScrollContainer.scrollRightRTL() > iOffset) {
					bScrollBack = true;
				}
			}
			//Update left and right counter.
			this._updateLeftCounter();
			this._updateRightCounter(iScrollContainerAvailableWidth, iScrollContainerRealWidth);

			//Only do DOM changes if the state changed to avoid periodic application of identical values.
			if (bScrollForward !== this._bPreviousScrollForward || (bScrollBack !== this._bPreviousScrollBack)) {
				this._bPreviousScrollForward = bScrollForward;
				this._bPreviousScrollBack = bScrollBack;
				$processFlow.toggleClass("sapPFHScrollBack", bScrollBack);
				$processFlow.toggleClass("sapPFHNoScrollBack", !bScrollBack);
				$processFlow.toggleClass("sapPFHScrollForward", bScrollForward);
				$processFlow.toggleClass("sapPFHNoScrollForward", !bScrollForward);
			}
		} else {
			this._bPreviousScrollForward = false;
			this._bPreviousScrollBack = false;
		}
	};

	/**
	 * Sets the parent association for given nodes.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowNode[]} internalNodes Array of nodes to set parents on
	 */
	ProcessFlow.prototype._setParentForNodes = function(internalNodes) {
		var iInternalNodesLength = internalNodes ? internalNodes.length : 0;
		var aChildren;
		var i, j;
		//Cleanup association to avoid duplicates.
		for (var oCurrentNode in internalNodes) {
			internalNodes[oCurrentNode].removeAllAssociation(ProcessFlow._constants.parents, true);
		}
		for (i = 0; i < iInternalNodesLength; i++) {
			aChildren = internalNodes[i].getChildren();
			if (aChildren) {
				for (j = 0; j < aChildren.length; j++) {
					var oChildNode = this._getNode(ProcessFlow._getChildIdByElement(aChildren[j]), internalNodes);
					if (oChildNode) {
						oChildNode.addAssociation(ProcessFlow._constants.parents, internalNodes[i], true);
					}
				}
			}
		}
	};

	/**
	 * Creates the connection map objects between the source and target nodes
	 * incl. label information and connection parts, based on the calculated matrix.
	 *
	 * @private
	 * @returns {Array} The Connection array
	 */
	ProcessFlow.prototype._getConnectionsMap = function() {

		var aConnections = [];
		var aNodes = this.getNodes();
		for (var i = 0; i < aNodes.length; i++) {
			var oPositionSourceNode = this._getPositionOfNodeInMatrix(this._internalCalcMatrix, aNodes[i]);
			var aChildren = aNodes[i].getChildren();
			if (aChildren) {
				for (var j = 0; j < aChildren.length; j++) {
					var oConnectionMapEntry = {};
					oConnectionMapEntry.sourceNode = aNodes[i];
					var iChildId = ProcessFlow._getChildIdByElement(aChildren[j]);
					var oChildNode = this._getNode(iChildId, aNodes);
					if (oChildNode) {
						if (typeof aChildren[j] === "object") {
							oConnectionMapEntry.label = aChildren[j].connectionLabel;
						}
						oConnectionMapEntry.targetNode = oChildNode;
						//Find position in matrix
						var oPositionTargetNode = this._getPositionOfNodeInMatrix(this._internalCalcMatrix, oConnectionMapEntry.targetNode);
						oConnectionMapEntry.connectionParts = this._calculateConnectionParts(oPositionSourceNode, oPositionTargetNode);
						aConnections.push(oConnectionMapEntry);
					}
				}
			}
		}
		this._internalConnectionMap = aConnections;
		return aConnections;
	};

	/**
	 * Returns the position (coordinates x/y) of the given ProcessFlowNode in calculated matrix of ProcessFlow.
	 *
	 * @private
	 * @param {object} matrix The calculated matrix of the current ProcessFlow
	 * @param {sap.suite.ui.commons.ProcessFlowNode} node The node for which the position is required
	 * @returns {object} The position of the node in the calculated matrix (x/y)
	 */
	ProcessFlow.prototype._getPositionOfNodeInMatrix = function(matrix, node) {
		var oPosition = {};
		for (var i = 0; i < matrix.length; i++) {
			var aCurrentLine = matrix[i];
			for (var j = 0; j < aCurrentLine.length; j++) {
				var currentCell = aCurrentLine[j];
				if (currentCell
					&& currentCell.getMetadata().getName() === "sap.suite.ui.commons.ProcessFlowNode"
					&& currentCell.getNodeId() === node.getNodeId()) {
					oPosition.y = i;
					oPosition.x = j;
					return oPosition;
				}
			}
		}
		return oPosition;
	};

	/**
	 * Calculates the connection parts (coordinates in matrix) between source and target node.
	 *
	 * @private
	 * @param {object} positionSourceNode The position of the source node in the calculated matrix (x/y)
	 * @param {object} positionTargetNode The position of the target node in the calculated matrix (x/y)
	 * @returns {Array} Array of all connection parts, relevant for connection between source and target node
	 */
	ProcessFlow.prototype._calculateConnectionParts = function(positionSourceNode, positionTargetNode) {

		var aConnectionParts = [];
		var iSouceNodeY = positionSourceNode.y;
		var iSouceNodeX = positionSourceNode.x;

		//Increase column+1 (step 1 right), independent from target position since target will ever be right from source.
		iSouceNodeX++;
		aConnectionParts.push({ x: iSouceNodeX, y: iSouceNodeY });

		//Increase (row+1) till we are in the row of target node (n steps down) if target is below source in matrix.
		//Decrease (row-1) till we are in the row of target node (n steps up) if target is above source in matrix.
		if (positionTargetNode.y >= positionSourceNode.y) {
			while (iSouceNodeY < positionTargetNode.y) {
				iSouceNodeY++;
				aConnectionParts.push({ x: iSouceNodeX, y: iSouceNodeY });
			}
		} else {
			while (iSouceNodeY > positionTargetNode.y) {
				iSouceNodeY--;
				aConnectionParts.push({ x: iSouceNodeX, y: iSouceNodeY });
			}
		}

		//Increase column+1 till we are in column of target node (n steps right)
		while (iSouceNodeX < positionTargetNode.x - 1) {
			iSouceNodeX++;
			aConnectionParts.push({ x: iSouceNodeX, y: iSouceNodeY });
		}
		return aConnectionParts;
	};

	/**
	 * Returns the connectionMapEntries which are relevant for the given sap.suite.ui.commonsProcessFlowConnectionLabel.
	 * Means all entries having the same target node as current entry (based on current label).
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowConnectionLabel} connectionLabel The label for which the map entries are required
	 * @returns {Array} Array with relevant connectionMapEntries for the given label
	 */
	ProcessFlow.prototype._getConnectionMapEntries = function(connectionLabel) {
		var aFilteredConnectionMaps = [];
		var oConnectionMapWithLabel = null;
		var oEntry = null;

		//Find relevant connectionMapEntry, containing given Label.
		if (this._internalConnectionMap) {
			for (var i = 0; i < this._internalConnectionMap.length; i++) {
				oEntry = this._internalConnectionMap[i];
				if (oEntry.label &&
					oEntry.label.getId() === connectionLabel.getId()) {
					oConnectionMapWithLabel = oEntry;
					break;
				}
			}

			//Collect all connectionMapEntries with same target node as the one, containing the Label.
			oEntry = null;
			for (var j = 0; j < this._internalConnectionMap.length; j++) {
				oEntry = this._internalConnectionMap[j];
				if (oEntry.targetNode &&
					oEntry.targetNode.getNodeId() === oConnectionMapWithLabel.targetNode.getNodeId()) {
					aFilteredConnectionMaps.push(oEntry);
				}
			}
		}
		return aFilteredConnectionMaps;
	};

	/**
	 * Creates the eventArgs for fireLabelPress of ProcessFlow.
	 * Additional object is necessary, since connectionmaps are containing too much information (e.g. parts).
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowConnectionlabel} connectionLabel Label which has been selected by user (clicked)
	 * @param {Object[]} connectionMapEntries The relevant connection maps for the selected label
	 * @returns {object} Event args for fireLabelPress
	 */
	ProcessFlow.prototype._createLabelPressEventArgs = function(connectionLabel, connectionMapEntries) {
		var oEvent = {};
		var aEventArgsConnectionValues = [];

		if (connectionMapEntries) {
			for (var i = 0; i < connectionMapEntries.length; i++) {
				var oEventArgsConnectionValue = {
					sourceNode: connectionMapEntries[i].sourceNode,
					targetNode: connectionMapEntries[i].targetNode,
					label: connectionMapEntries[i].label
				};
				aEventArgsConnectionValues.push(oEventArgsConnectionValue);
			}
		}

		oEvent.selectedLabel = connectionLabel;
		oEvent.connections = aEventArgsConnectionValues;
		return oEvent;
	};

	/**
	 * Function applies the changes to the display state based on the requirements.
	 * If any node is in the highlighted state all others are set to the dimmed state.
	 *
	 * @public
	 * @deprecation Since 1.38.0
	 */
	//deprecation in order to set the method as private later on
	ProcessFlow.prototype.applyNodeDisplayState = function() {
		var aInternalNodes = this.getNodes(),
			iNodeCount = aInternalNodes ? aInternalNodes.length : 0,
			i = 0;

		if (iNodeCount !== 0) {
			// First put all the nodes to the regular state - if possible
			while (i < iNodeCount) {
				aInternalNodes[i]._setRegularState();
				i++;
			}

			// Check for the highlighted or selected node- at least one is required
			i = 0;
			while ((i < iNodeCount) && !aInternalNodes[i].getHighlighted() && !aInternalNodes[i].getSelected()) {
				i++;
			}

			// If a highlighted or selected node was found, set the others to dimmed state
			if (i < iNodeCount) {
				i = 0;
				while (i < iNodeCount) {
					if (!aInternalNodes[i].getHighlighted() && !aInternalNodes[i].getSelected()) {
						aInternalNodes[i]._setDimmedState();
					}
					i++;
				}
			}
		}
	};

	/**
	 * Function checks consistency of the node array. It checks,
	 * if all child elements defined for the nodes are also presented as the nodes themselves
	 *
	 * @public
	 * @param elements Map of node IDs to NodeElements. Expectation is to have at least 1 element there. No check for empty array.
	 * @returns {boolean} Value, where true means no activity, false means set the focus on top left root node
	 * @throws array of error messages produced during the consistency check
	 * @deprecation Since 1.38.0
	 */
	//deprecation in order to set the method as private later on
	ProcessFlow.InternalMatrixCalculation.prototype.checkInputNodeConsistency = function(elements) {
		var aErrorMessages = [],
			j,
			sChildId,
			iChildCount,
			aChildren,
			oElement,
			iFocusNodesCount = 0;

		//Preparation phase
		Object.keys(elements).forEach(function(sElementId) {
			oElement = elements[sElementId];
			aChildren = oElement.oNode.getChildren();
			iChildCount = aChildren ? aChildren.length : 0;

			if (oElement.oNode.getFocused()) {
				iFocusNodesCount++;
			}

			j = 0;
			while (j < iChildCount) {
				sChildId = ProcessFlow._getChildIdByElement(aChildren[j]);
				if (!elements[sChildId]) {
					aErrorMessages.push("Node identificator " + sChildId + " used in children definition is not presented as the node itself. Element : " + oElement.nodeId);
				}
				j++;
			}
		});

		if (aErrorMessages.length > 0) {
			throw aErrorMessages;
		}
		return iFocusNodesCount > 1;
	};

	/**
	 * Creates the matrix where the nodes are already positioned correctly.
	 *
	 * @public
	 * @param currentElement actually processed element
	 * @param elements map of all the available elements
	 * @param matrix the updated virtual matrix
	 * @returns The updated virtual matrix
	 * @deprecation Since 1.38.0
	 */
	//deprecation in order to set the method as private later on
	ProcessFlow.InternalMatrixCalculation.prototype.processCurrentElement = function(currentElement, elements, matrix) {
		var aElementsChildIds,
			aElementsChildren,
			bNoChildInUpperRow = true, // If there is a child element already drawn in an upper row, it is required to move to the next line
			bMoveToNextLine = true; // This is the check for repeated parent-child relationship. The childrenArr is not empty but
		// in fact it is required to move to the next line.

		if (currentElement.isProcessed) {
			return matrix;
		}

		this.nodePositions[currentElement.nodeId] = {
			"c": currentElement,
			"x": this.iPositionX,
			"y": this.iPositionY * 2
		};

		matrix[this.iPositionX][this.iPositionY++] = currentElement;
		aElementsChildIds = currentElement.oNode.getChildren();
		currentElement.isProcessed = true;
		aElementsChildren = this._sortBasedOnChildren(aElementsChildIds, elements);

		if (aElementsChildren) {
			aElementsChildren.forEach(function(oChild) {
				if (!oChild.isProcessed) {
					bMoveToNextLine = false;
					while (this.iPositionY < oChild.lane) {
						matrix[this.iPositionX][this.iPositionY++] = null;
					}
					matrix = this.processCurrentElement(oChild, elements, matrix);
				} else if (bNoChildInUpperRow && bMoveToNextLine) {
					// Child element has already been processed, which means there is a connection pointing to the right.
					// Therefore it is necessary to move to the next line so this the next child element is not drawn in the connection.
					this.iPositionX++;
					bNoChildInUpperRow = false;
				}
			}.bind(this));
		}

		if (!aElementsChildIds || bMoveToNextLine) {
			// Check if we moved already to the next line in the forEach loop
			if (bNoChildInUpperRow) {
				this.iPositionX++;
			}
			this.iPositionY = 0;
		}

		return matrix;
	};

	/* =========================================================== */
	/* Public methods                                              */
	/* =========================================================== */

	/**
	 * Function returns current zoom level.
	 *
	 * @public
	 * @returns {string} The zoomLevel
	 */
	ProcessFlow.prototype.getZoomLevel = function() {
		return this._zoomLevel;
	};

	/**
	 * Function sets the zoom level.
	 *
	 * @public
	 * @param {sap.suite.ui.commons.ProcessFlowZoomLevel} zoomLevel The new zoom level.
	 */
	ProcessFlow.prototype.setZoomLevel = function(zoomLevel) {
		if (!this._getScrollContainer()) {
			return;
		}

		var $scrollContainer = this._getScrollContainer();
		var oScrollContainerContextOld = null;
		var oScrollContainerContextNew;
		if ($scrollContainer.context) {
			oScrollContainerContextOld = {
				scrollWidth: $scrollContainer.context.scrollWidth,
				scrollHeight: $scrollContainer.context.scrollHeight,
				scrollLeft: $scrollContainer.context.scrollLeft,
				scrollTop: $scrollContainer.context.scrollTop
			};
			oScrollContainerContextNew = oScrollContainerContextOld;
			if (this._zoomLevel === zoomLevel) {
				this._isInitialZoomLevelNeeded = false;
				return;
			}
		}
		if (!(zoomLevel in library.ProcessFlowZoomLevel)) { // Enumeration
			this._handleException("\"" + zoomLevel + "\" is not a valid entry of the enumeration for property zoom level of ProcessFlow");
			return;
		}
		this._zoomLevel = zoomLevel;
		//When setting the initial zoomlevel, invalidate() has to be called,
		//because the method call comes from onAfterRendering() and to call the rerender() is not allowed.
		if (this._isInitialZoomLevelNeeded) {
			this._isInitialZoomLevelNeeded = false;
			this.invalidate();
			//In all other cases, the rerender() has to be called, so that the offset can be set afterwards.
		} else {
			this.rerender();
		}

		if (oScrollContainerContextOld) {
			//Set the grab cursor class in case for touch devices
			if (Device.support.touch || jQuery.sap.simulateMobileOnDesktop) {
				var iHeight = parseInt(this._getScrollContainer().css("height").slice(0, -2), 10);
				var iWidth = parseInt(this._getScrollContainer().css("width").slice(0, -2), 10);
				var iScrollHeight = this._getScrollContainer()[0].scrollHeight;
				var iScrollWidth = this._getScrollContainer()[0].scrollWidth;
				if (this.getScrollable() && (iScrollHeight > iHeight || iScrollWidth > iWidth)) {
					this._switchCursors(this._getScrollContainer(), this._defaultCursorClass, this._grabCursorClass);
					this._getScrollContainer().css("overflow", "auto");
				}
			}
			//Sets the scroll offset to the scrollContainer.
			$scrollContainer = this._getScrollContainer();
			oScrollContainerContextNew = this._getScrollContainerOnZoomChanged(oScrollContainerContextOld, $scrollContainer);
			$scrollContainer.scrollLeft(oScrollContainerContextNew.scrollLeft);
			$scrollContainer.scrollTop(oScrollContainerContextNew.scrollTop);
			this._adjustAndShowArrow();
			//Avoids not setting the focus on clickable elements.
			if (this._isFocusChanged) {
				this._setFocusToNode();
				this._isFocusChanged = false;
			}
		}
	};

	/**
	 * Function sets new zoom level with smaller level of details. Having the least detail view it stays as it is.
	 *
	 * @public
	 * @returns {string} The updated zoomLevel
	 */
	ProcessFlow.prototype.zoomOut = function() {
		var sCurrentZoomLevel = this.getZoomLevel();
		var sNewZoomLevel = sCurrentZoomLevel;
		switch (sCurrentZoomLevel) {
			case (library.ProcessFlowZoomLevel.One):
				sNewZoomLevel = library.ProcessFlowZoomLevel.Two;
				break;
			case (library.ProcessFlowZoomLevel.Two):
				sNewZoomLevel = library.ProcessFlowZoomLevel.Three;
				break;
			case (library.ProcessFlowZoomLevel.Three):
				sNewZoomLevel = library.ProcessFlowZoomLevel.Four;
				break;
			default:
				break;
		}
		this.setZoomLevel(sNewZoomLevel);
		return this.getZoomLevel();
	};

	/**
	 * Function sets new zoom level with higher level of details. Having max details it stays as it is.
	 *
	 * @public
	 * @returns {string} The updated zoomLevel
	 */
	ProcessFlow.prototype.zoomIn = function() {
		var sCurrentZoomLevel = this.getZoomLevel();
		var sNewZoomLevel = sCurrentZoomLevel;
		switch (sCurrentZoomLevel) {
			case (library.ProcessFlowZoomLevel.Four):
				sNewZoomLevel = library.ProcessFlowZoomLevel.Three;
				break;
			case (library.ProcessFlowZoomLevel.Three):
				sNewZoomLevel = library.ProcessFlowZoomLevel.Two;
				break;
			case (library.ProcessFlowZoomLevel.Two):
				sNewZoomLevel = library.ProcessFlowZoomLevel.One;
				break;
			default:
				break;
		}
		this.setZoomLevel(sNewZoomLevel);
		return this.getZoomLevel();
	};

	/**
	 * Updates the model and rerenders the control.
	 *
	 * @public
	 */
	ProcessFlow.prototype.updateModel = function() {
		//reset nodes' laneIds for merged lanes
		var aNodes = this.getNodes();
		aNodes.forEach(function(oNode) {
			oNode._mergedLaneId = false;
		});
		// reset lanes' position that was created for merged lanes
		var aLanes = this.getLanes();
		aLanes.forEach(function(oLane) {
			oLane._mergedLanePosition = false;
		});

		//Initialize internalLanes so that they get recalculated from the new nodes.
		this._internalLanes = [];
		if (this._isHeaderMode()) {
			var oLaneModel = this.getBindingInfo("lanes");
			this.getModel(oLaneModel.model).refresh();
		} else {
			var oNodeModel = this.getBindingInfo("nodes");
			this.getModel(oNodeModel.model).refresh();
		}
		this.rerender();
	};

	/**
	 * Optimizes the layout and updates the model. To be used carefully because of its possible side effects on the performance.
	 *
	 * @public
	 * @param {boolean} isOptimized True if the layout should be optimized; false if the layout should be brought to the initial state.
	 * @returns {sap.suite.ui.commons.ProcessFlow} this to allow method chaining
	 * @since 1.44
	 */
	ProcessFlow.prototype.optimizeLayout = function(isOptimized) {
		if (isOptimized === undefined) {
			isOptimized = true;
		}
		// apply the logic only in case of mode change
		if (this._isLayoutOptimized !== isOptimized) {
			this._isLayoutOptimized = isOptimized;
			this.updateModel();
		}

		return this;
	};

	/**
	 * Function returns the nodeId of the node which is focused.
	 *
	 * @public
	 * @returns {string} The id of focused node
	 */
	ProcessFlow.prototype.getFocusedNode = function() {
		return this._lastNavigationFocusElement && this._lastNavigationFocusElement.sId;
	};

	/**
	 * Updates the nodes and rerenders the control.
	 *
	 * @public
	 */
	ProcessFlow.prototype.updateNodesOnly = function() {
		var oNodeModel = this.getBindingInfo("nodes");
		this.getModel(oNodeModel.model).refresh();
		this.rerender();
	};

	/**
	 * Sets the path between source and target node to selected status and rerenders the control. If parameters are null, sets all nodes to normal status.
	 *
	 * @public
	 * @param {string} sourceNodeId of the path or null
	 * @param {string} targetNodeId of the path or null
	 * @since 1.32
	 */
	ProcessFlow.prototype.setSelectedPath = function(sourceNodeId, targetNodeId) {
		var aNodes = this.getNodes(),
			i;
		if (aNodes) {
			if (sourceNodeId && targetNodeId) {
				var cNodesFound = 0;
				for (i = 0; i < aNodes.length; i++) {
					if (aNodes[i].getNodeId() === sourceNodeId || aNodes[i].getNodeId() === targetNodeId) {
						aNodes[i].setSelected(true);
						cNodesFound++;
					} else {
						aNodes[i].setSelected(false);
					}
				}
				if (cNodesFound === 2) {
					this.rerender();
				}
			} else if (!sourceNodeId && !targetNodeId) {
				for (i = 0; i < aNodes.length; i++) {
					aNodes[i].setSelected(false);
				}
				this.rerender();
			}
		}
	};

	/**
	 * Overwrites setShowLabels of ProcessFlow control to apply additional functionality.
	 *
	 * @public
	 * @param {boolean} value New value for showLabels
	 */
	ProcessFlow.prototype.setShowLabels = function(value) {
		var bOldValue = this.getShowLabels();
		if (bOldValue && !value) { //Only if status has been changed from show to hide
			this.setProperty("showLabels", value, true);
			// Resets the selected path in case labels have been disabled for the current control.
			if (!this.getShowLabels()) {
				this.setSelectedPath(null, null);
			}
		} else {
			this.setProperty("showLabels", value);
		}
	};

	/**
	 * Sets the focus to the given Label
	 *
	 * @public
	 * @param {sap.suite.ui.commons.ProcessFlowConnectionlabel} label Label to focus
	 * @since 1.32
	 */
	ProcessFlow.prototype.setFocusToLabel = function(label) {
		this._changeNavigationFocus(this._lastNavigationFocusElement, label);
	};

	/**
	 * Checks, if the connection label can be focused.
	 * It can be focused, if it is enabled and if it is on the highlighted path, if a highlighted path exists.
	 *
	 * @private
	 * @param {sap.suite.ui.commons.ProcessFlowConnectionLabel} label The connection label that should get the focus.
	 * @returns {boolean} True if the label can be focused
	 */
	ProcessFlow.prototype._labelCanGetFocus = function(label) {
		return label && label.getEnabled() && (!this._bHighlightedMode || label._bHighlighted);
	};

	/**
	 * Returns a node from the aggregation named 'nodes' by comparing the nodeId property of node.
	 *
	 * @public
	 * @since 1.46.0
	 * @param {string} sNodeId ID of node to return
	 * @returns {sap.suite.ui.commons.ProcessFlowNode} the requested node or null
	 */
	ProcessFlow.prototype.getNode = function(sNodeId) {
		var aNodes = this.getNodes();
		for (var i = 0; i < aNodes.length; i++) {
			if (aNodes[i].getProperty("nodeId") === sNodeId) {
				return aNodes[i];
			}
		}
	};

	/**
	 * Returns a lane from the aggregation named 'lanes' by comparing the laneId property of lane.
	 *
	 * @public
	 * @since 1.46.0
	 * @param {string} sLaneId ID of the lane to return
	 * @returns {sap.suite.ui.commons.ProcessFlowLaneHeader} the requested lane or null
	 */
	ProcessFlow.prototype.getLane = function(sLaneId) {
		var aLanes = this.getLanes();
		for (var i = 0; i < aLanes.length; i++) {
			if (aLanes[i].getProperty("laneId") === sLaneId) {
				return aLanes[i];
			}
		}
	};

	return ProcessFlow;
});

}; // end of sap/suite/ui/commons/ProcessFlow.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.Timeline') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.Timeline'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ClientListBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterType'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.commons.util.DateUtils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/Timeline",[
		"jquery.sap.global",
		"./library",
		"sap/ui/core/Control",
		"sap/ui/core/ResizeHandler",
		"sap/ui/core/format/DateFormat",
		"sap/ui/model/ClientListBinding",
		"sap/ui/model/FilterType",
		"sap/suite/ui/commons/TimelineNavigator",
		"sap/suite/ui/commons/util/DateUtils",
		"sap/suite/ui/commons/util/ManagedObjectRegister",
		"sap/ui/model/json/JSONModel",
		"sap/ui/model/Sorter",
		"sap/ui/model/Filter",
		"sap/ui/model/FilterOperator",
		"sap/ui/base/ManagedObject",
		"sap/suite/ui/commons/TimelineItem",
		"sap/suite/ui/commons/TimelineRenderManager",
		"sap/ui/core/delegate/ScrollEnablement"
	], function (jQuery, library, Control, ResizeHandler, DateFormat, ClientListBinding, FilterType,
				 TimelineNavigator, DateUtils, ManagedObjectRegister, JSONModel, Sorter, Filter, FilterOperator,
				 ManagedObject, TimelineItem, TimelineRenderManager, ScrollEnablement) {
		"use strict";

		var ScrollingFadeout = library.TimelineScrollingFadeout,
			TimelineAlignment = library.TimelineAlignment,
			TimelineGroupType = library.TimelineGroupType,
			TimelineFilterType = library.TimelineFilterType,
			TimelineAxisOrientation = library.TimelineAxisOrientation;

		/**
		 * Constructor for a new Timeline.
		 *
		 * @param {string} [sId] ID for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] Initial settings for the new control
		 *
		 * @class
		 * The timeline control shows entries (such as objects, events, or posts) in chronological order.
		 * <br>A common use case is to provide information about changes to an object, or events related to an
		 * object.
		 * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
		 * <br>There are two distinct variants of the timeline: basic and social. The basic timeline is read-only,
		 * while the social timeline offers a high level of interaction and collaboration, and is integrated within SAP
		 * Jam.
		 * @extends sap.ui.core.Control
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.Timeline
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 */
		var Timeline = Control.extend("sap.suite.ui.commons.Timeline", /** @lends sap.suite.ui.commons.Timeline.prototype */ {
			metadata: {
				library: "sap.suite.ui.commons",
				properties: {

					/**
					 * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided timelines only. If the axisOrientation property is set to <code> Horizontal</code>, the <code>Right</code> value is interpreted as bottom alignment and the <code>Left</code> value as top alignment.
					 */
					alignment: {type: "sap.suite.ui.commons.TimelineAlignment", group: "Misc", defaultValue: "Right"},

					/**
					 * Defines the orientation of the timeline. Can be set to <code>Vertical</code> or <code>Horizontal</code>.
					 */
					axisOrientation: {
						type: "sap.suite.ui.commons.TimelineAxisOrientation",
						group: "Misc",
						defaultValue: "Vertical"
					},

					/**
					 * Data for the Timeline control.
					 * @deprecated Since version 1.46.0.
					 * As of version 1.46, this property was replaced by JSONModel context binding.
					 */
					data: {type: "object", group: "Misc", defaultValue: null, deprecated: true},

					/**
					 * Enables to add 'All' at the beginning of the filter list.
					 * @deprecated Since version 1.46.0.
					 * The filter list now includes a Select All check box, so the All radio button is
					 * no longer required. This property is ignored.
					 */
					enableAllInFilterItem: {type: "boolean", group: "Behavior", defaultValue: true, deprecated: true},

					/**
					 * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed list).
					 * As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
					 * @deprecated Since version 1.46.0.
					 * Use the enableModelFilter property instead.
					 */
					enableBackendFilter: {type: "boolean", group: "Misc", defaultValue: true, deprecated: true},

					/**
					 * When this property is set to <code>true</code>, the timeline displays a busy indicator when loading data. This busy indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended to use this option. Loading data without a busy indicator may confuse the users.
					 */
					enableBusyIndicator: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * If set to <code>true</code>, timeline posts are displayed on both sides of the timeline axis.
					 */
					enableDoubleSided: {type: "boolean", group: "Misc", defaultValue: false},

					/**
					 * Enables filtering directly on the binding level.
					 * If set to <code>true</code>, all filters are translated into the filters in the model binding. When the OData model is used, the filtering is performed on the backend side. This option is strongly recommended.
					 * If set to <code>false</code>, all entries from the model need to be fetched before they can be filtered on the frontend side. Please be aware that the <code>growingThreshold</code> property determines how many entries can be rendered. Timeline requests all entries from the model before it performs the filtering. Some models may have internal limits for the number of entries that can be used in bindings. Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
					 * @since 1.46.0
					 */
					enableModelFilter: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * If set to <code>true</code>, the Timeline control has its own scroll bar, with the scrolling taking place within the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
					 */
					enableScroll: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Adds a <i>Reply</i> link to the posts on a social timeline that allows users to reply to posts. When a user adds a reply, an event is fired. This event should be handled by external code.
					 */
					enableSocial: {type: "boolean", group: "Misc", defaultValue: false},

					/**
					 * Title for the data filter. When a filter is applied, this title is displayed in the message strip along with the filter name.
					 */
					filterTitle: {type: "string", group: "Misc", defaultValue: null},

					/**
					 * If set to <code>true</code>, the <i>Show More</i> button is displayed when the user scrolls along the timeline axis.
					 */
					forceGrowing: {type: "boolean", group: "Misc", defaultValue: false},

					/**
					 * Groups the timeline posts by year.
					 * As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
					 * @deprecated Since version 1.46.0.
					 * Use the groupByType property instead.
					 */
					group: {type: "boolean", group: "Misc", defaultValue: false, deprecated: true},

					/**
					 * Groups the timeline posts by a field. Only fields that contain date values are supported.
					 */
					groupBy: {type: "string", group: "Misc", defaultValue: null},

					/**
					 * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to <code>None</code>, no grouping is applied.
					 * If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping} method, this function overrides the groupByType property settings.
					 */
					groupByType: {type: "sap.suite.ui.commons.TimelineGroupType", group: "Misc", defaultValue: "None"},

					/**
					 * If set to <code>true</code>, the timeline displays a limited number of posts with a button to show more. The displayed posts limit can be set using the growingThreshold property.
					 * As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
					 * @deprecated Since version 1.46.0.
					 * Use the growingThreshold property instead, setting it to 0 to disable growing.
					 */
					growing: {type: "boolean", group: "Misc", defaultValue: true, deprecated: true},

					/**
					 * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts, it will request exactly this amount. The number of posts displayed in the timeline is increased by this number. If set to <code>0</code>, all posts are fetched and displayed on the initial load.
					 */
					growingThreshold: {type: "int", group: "Misc", defaultValue: 5},

					/**
					 * Sets the height of the Timeline.
					 * @since 1.46.0
					 */
					height: {type: "sap.ui.core.CSSSize", group: "Misc", defaultValue: ''},

					/**
					 * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline axis. This feature works only when the enableScroll property is set to <code>true</code>. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
					 * @since 1.46.0
					 */
					lazyLoading: {type: "boolean", group: "Dimension", defaultValue: false},

					/**
					 * This text is displayed when the control has no data. The default value is loaded from the component resource bundle.
					 */
					noDataText: {type: "string", group: "Misc", defaultValue: null},

					/**
					 * If set to <code>Area</code>, the timeline fades into the visible area margin.
					 * If set to <code>AreaWithButtons</code>, the timeline fades into the visible area margin and scroll buttons are displayed.
					 * If set to <code>None</code>, the fading effect is not applied.
					 * This feature works only when the enableScroll property is set to <code>true</code>. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
					 * @since 1.46.0
					 */
					scrollingFadeout: {
						type: "sap.suite.ui.commons.TimelineScrollingFadeout",
						group: "Misc",
						defaultValue: "None"
					},

					/**
					 * Sets the visibility of the filter in the timeline toolbar.<br>
					 * As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
					 * @deprecated Since version 1.46.0.
					 * Use the showHeaderBar property instead.
					 */
					showFilterBar: {type: "boolean", group: "Misc", defaultValue: true, deprecated: true},

					/**
					 * Shows the timeline toolbar with search and filter options.
					 */
					showHeaderBar: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Shows an icon on the timeline axis as an anchor for each entry node. If set to <code>false</code>, all icons are replaced by dots.
					 */
					showIcons: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Show item filter in filter area.
					 */
					showItemFilter: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Sets the search field visibility on the timeline toolbar.
					 */
					showSearch: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
					 */
					showSort: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * If set to <code>true</code>, a suggest event is fired when the user enters text into the search field. Changing the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
					 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
					 * @since 1.26.1
					 * @deprecated Since version 1.46.0.
					 * Use the Group Feed Component instead.
					 */
					showSuggestion: {type: "boolean", group: "Behavior", defaultValue: true, deprecated: true},

					/**
					 * Shows the time range filter in the filter menu.
					 */
					showTimeFilter: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Indicates whether the data should be sorted. If set to <code>false</code> the data model's default sorting is applied.
					 */
					sort: {type: "boolean", group: "Misc", defaultValue: true},

					/**
					 * Whether the oldest item will be displayed first.
					 */
					sortOldestFirst: {type: "boolean", group: "Misc", defaultValue: false},

					/**
					 * Height of the timeline posts. It can be set to either of the following types of values:
					 * <ul>
					 * <li> Automatic &ndash; If set to <code>automatic</code>, the optimal post height is calculated automatically to fit the timeline height specified by the height parameter. This option works only in horizontal timelines and only when the timeline height is defined. In vertical timelines, this setting is ignored. </li>
					 * <li> Number &ndash; If set to a number, a corresponding number of text lines is displayed in every post.</li>
					 * <li> Pixels &ndash; If set to a number followed by <code>px</code>, such as <code>50px</code>, the closest number in lines is calculated and applied to the timeline posts, so that the post height corresponds to the specified number of pixels and the text lines are not cut off in the middle of a line.</li>
					 * <li> Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper without being changed. </li>
					 * </ul>
					 */
					textHeight: {type: "string", group: "Misc", defaultValue: ''},

					/**
					 * Sets the width of the Timeline.
					 */
					width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: '100%'}
				},
				defaultAggregation: "content",
				aggregations: {
					/**
					 * List of timeline posts.
					 */
					content: {type: "sap.suite.ui.commons.TimelineItem", multiple: true, singularName: "content"},

					/**
					 * A custom filter to be used instead of the default item filter. This control must have an <code>openBy</code> function that is used by the timeline to open the control.
					 */
					customFilter: {type: "sap.ui.core.Control", multiple: false},

					/**
					 * Custom filter criteria for the items filter.
					 */
					filterList: {
						type: "sap.suite.ui.commons.TimelineFilterListItem",
						multiple: true,
						singularName: "filterList"
					},

					/**
					 * Items for suggestions.
					 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
					 * @deprecated Since version 1.46.0.
					 * Use the Group Feed Component instead.
					 */
					suggestionItems: {
						type: "sap.m.StandardListItem",
						multiple: true,
						singularName: "suggestionItem",
						deprecated: true
					}
				},
				events: {
					/**
					 * This event is fired when a new post is added.
					 * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
					 * @deprecated Since version 1.46.0.
					 * Use the Group Feed Component instead.
					 */
					addPost: {
						deprecated: true,
						parameters: {

							/**
							 * Post message text.
							 */
							value: {type: "string"}
						}
					},

					/**
					 * This event is fired when the user clicks the Close button on a message strip.
					 */
					customMessageClosed: {},

					/**
					 * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
					 */
					filterOpen: {},

					/**
					 * This event is fired when filtering is applied to timeline posts or when a search term is entered into the search field. This event can be fired only if the enableModelFilter property is set to <code>true</code>.
					 */
					filterSelectionChange: {
						parameters: {

							/**
							 * Type of filter that has changed, can be an item filter or a time range filter.
							 */
							type: {type: "sap.suite.ui.commons.TimelineFilterType"},

							/**
							 * Search term entered into the search field.
							 */
							searchTerm: {type: "string"},

							/**
							 * The first criteria selected in the filter criteria list (required for backward compatibility).
							 */
							selectedItem: {type: "string"},

							/**
							 * An array with all selected filter criteria.
							 */
							selectedItems: {type: "object"},

							/**
							 * An object specifying the start date (<code>from</code>) and the end date (<code>to</code>) of the time range.
							 */
							timeKeys: {type: "object"},

							/**
							 * Is set to <code>true</code> when this event is fired by clearing the filter.
							 */
							clear: {type: "boolean"}
						}
					},

					/**
					 * This event is fired when the "More" button is clicked.
					 */
					grow: {},

					/**
					 * This event is fired for every timeline post when data filtering is being applied. It indicates whether this post is included in the filtering and why. Can be used only when the enableModelFilter property is set to <code>false</code>.
					 */
					itemFiltering: {
						parameters: {

							/**
							 * Timeline post that is currently being filtered.
							 */
							item: {type: "sap.suite.ui.commons.TimelineItem"},

							/**
							 * Reasons why the post is being filtered. Empty if the post is not being filtered. There are three properties available in the object: <code>Search</code>, <code>Time</code>, and <code>Data</code>. You can call preventDefault to the event object to prevent the result.
							 */
							reasons: {type: "object"},

							/**
							 * Array with keys used for data filtering.
							 */
							dataKeys: {type: "object"},

							/**
							 * An object specifying the start date (<code>from</code>) and the end date (<code>to</code>) of the time range.
							 */
							timeKeys: {type: "object"},

							/**
							 * The text string that has been typed into the search field.
							 */
							searchTerm: {type: "string"}
						}
					},

					/**
					 * This event is fired when a timeline post is selected.
					 */
					select: {
						parameters: {

							/**
							 * The timeline post that is selected.
							 */
							selectedItem: {type: "sap.suite.ui.commons.TimelineItem"}
						}
					},

					/**
					 * This event is fired when the user enters text into the search field, in cases when the showSuggestion property is set to <code>true</code>. Changing the suggestionItems aggregation will show the suggestions inside a popup.
					 * @since 1.26.1
					 * @deprecated Since version 1.46.0.
					 * Replaced by {@link sap.collaboration.components.feed.Component}.
					 */
					suggest: {
						deprecated: true,
						parameters: {

							/**
							 * The text string that has been typed into the search field.
							 */
							suggestValue: {type: "string"}
						}
					},

					/**
					 * This event is fired when a suggested post is selected in the suggestions popup list. This event is only fired when the showSuggestion property is set to <code>true</code> and there is at least one post in the suggestions popup list. See also the suggestionItems aggregation.
					 * @since 1.26.1
					 * @deprecated Since version 1.46.0.
					 * Replaced by {@link sap.collaboration.components.feed.Component}.
					 */
					suggestionItemSelected: {
						deprecated: true,
						parameters: {

							/**
							 * The item selected in the suggestions popup.
							 */
							selectedItem: {type: "sap.ui.core.Item"}
						}
					}
				},
				designTime: true
			}
		});

		var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons"),
			SortOrder = Object.freeze({
				ASCENDING: "ASCENDING",
				DESCENDING: "DESCENDING"
			}),
			DateRoundType = Object.freeze({
				UP: "UP",
				DOWN: "DOWN",
				NONE: "NONE"
			}),
			// used for displaying formatted date in group header text
			DateFormats = {
				Year: DateFormat.getDateInstance({
					pattern: "YYYY"
				}),
				Quarter: DateFormat.getDateInstance({
					pattern: "QQQQ YYYY"
				}),
				Month: DateFormat.getDateInstance({
					pattern: "MMMM YYYY"
				}),
				Week: DateFormat.getDateInstance({
					pattern: "w"
				}),
				Day: DateFormat.getDateInstance({
					style: "long"
				}),
				MonthDay: DateFormat.getDateInstance({
					style: "medium"
				})
			};

		/**
		 * Compatibility wrapper around javascript Array.findIndex function. findIndex is not supported by IE.
		 *
		 * @param {number} aArray Array to find index in.
		 * @param {function} fnCallback Function to execute on each value in the array.
		 * @returns {int} An index in the array if an element passes the test; otherwise, -1.
		 * @private
		 */
		function findIndex(aArray, fnCallback) {
			var i;

			jQuery.sap.assert(jQuery.isArray(aArray), "aArray must be an array.");

			if (typeof aArray.findIndex === "function") {
				return aArray.findIndex(fnCallback);
			}

			for (i = 0; i < aArray.length; i++) {
				if (fnCallback(aArray[i], i, aArray)) {
					return i;
				}
			}
			return -1;
		}

		Timeline.prototype.init = function () {
			// array of selected filter items. { key; text }
			this._aFilterList = [];

			// associative array of groups which are collapsed (are in array with true value)
			this._collapsedGroups = {};

			// collection for all items (icons, buttons) which are not directly rendered but library stuff are used (like sap.m.buttons)
			// we use this collection for destroying all items by one function call when it is necessary
			this._objects = new ManagedObjectRegister();

			// indicator whether timeline is rendered as double sided. It is working only for vertical mode. The flag 'enableDoubleSided' must be true,
			// but also there have to be enough width
			this._renderDblSided = null;

			// internal counter of groups. The group iteration goes through '_createGroupHeader'
			this._groupId = 0;

			// store last scroll position. 'x' and 'y' are for scrolling buttons, 'more' is used when new load of data is loaded to scroll back to focused item
			this._lastScrollPosition = {
				x: 0,
				y: 0,
				more: 0
			};

			// indicator that scrolling buttons are already set and there is no need to recalculate them again (performance)
			this._scrollersSet = false;

			// array of objects {key; text} with data filter selected items
			this._currentFilterKeys = [];

			// storage for custom filter
			this._customFilter = false;

			this._noAnimation = true;

			// controls init
			this._initControls();

			this.setBusyIndicatorDelay(0);
		};

		/* =========================================================== */
		/* API methods */
		/* =========================================================== */
		/**
		 * Adds a custom filter in addition to the default filters: items filter, time range filter, and search.
		 * @param {string} sFilterId A unique filter ID that the caller can use to manipulate the filter after it has been
		 * created, for example, to remove it.
		 * @param {sap.ui.model.Filter} oFilter Filter object.
		 * @public
		 */
		Timeline.prototype.setCustomModelFilter = function (sFilterId, oFilter) {
			var oBinding = this.getBinding("content");

			if (oBinding) {
				var filters = oBinding.aFilters || [];

				// remove filter id from collection
				var filterIndex = findIndex(filters, function (oFilter) {
					return oFilter._customTimelineId === sFilterId;
				});

				if (filterIndex !== -1) {
					filters.splice(filterIndex, 1);
				}

				if (oFilter !== null) {
					oFilter._customTimelineId = sFilterId;
					filters.push(oFilter);
				}

				oBinding.filter(filters, FilterType.Control);
			}
		};

		/**
		 * Sets custom grouping function. This function must have one parameter that is a date object. This date object
		 * is used for grouping timeline posts. The function should return an object that has three properties:
		 * <ul>
		 * <li>
		 * <code>key</code> &ndash; The key of the related group.
		 * </li>
		 * <li>
		 * <code>title</code> &ndash;  The title of the related group.
		 * </li>
		 * <li>
		 * <code>date</code> &ndash; The same value as the one entered in the input parameter.
		 * </li>
		 * </ul>
		 *
		 * @param {function} fnGroupBy Grouping function.
		 * @public
		 */
		Timeline.prototype.setCustomGrouping = function (fnGroupBy) {
			var oBindingInfo = this.getBindingInfo("content");
			this._fnCustomGroupBy = fnGroupBy;

			if (oBindingInfo) {
				this._bindGroupingAndSorting(oBindingInfo);
				this.updateAggregation("content");
			}
		};


		/**
		 * Sets values for the time range filter.
		 * @param {object} [mArguments] Time filter arguments
		 * @param {Date} [mArguments.from] Start date of the time range filter.
		 * @param {Date} [mArguments.to] End date of the time range filter.
		 * @param {sap.suite.ui.commons.TimelineGroupType} [mArguments.type] The step of the time range filter scale. Can be set to day, month, quarter, or year.
		 * Week is currently not supported.
		 * @public
		 */
		Timeline.prototype.setCurrentTimeFilter = function (mArguments) {
			this._startDate = mArguments.from;
			this._endDate = mArguments.to;
			this._rangeFilterType = mArguments.type;
		};

		/**
		 * Sets values for the search field.
		 * @param {string} sSearchTerm Search term value.
		 * @public
		 */
		Timeline.prototype.setCurrentSearch = function (sSearchTerm) {
			this._objects.getSearchField().setValue(sSearchTerm);
		};

		/**
		 * Sets filter criteria keys.
		 * @param {string[]} aSelectedItemKeys Filter criteria keys to select. Can be also used as a single value.
		 * @public
		 */
		Timeline.prototype.setCurrentFilter = function (aSelectedItemKeys) {
			var that = this, //eslint-disable-line
				fnHasKey = function (sValue) {
					for (var i = 0; i < aSelectedItemKeys.length; i++) {
						if (aSelectedItemKeys[i] === sValue) {
							return true;
						}
					}
					return false;
				};

			if (!aSelectedItemKeys) {
				return;
			}

			if (!Array.isArray(aSelectedItemKeys)) {
				aSelectedItemKeys = [aSelectedItemKeys];
			}

			if (this._aFilterList.length === 0) {
				this._setFilterList();
			}

			that._currentFilterKeys = [];
			this._aFilterList.forEach(function (oItem) {
				var sKey = oItem.key;
				if (fnHasKey(sKey)) {
					that._currentFilterKeys.push({
						key: sKey,
						text: oItem.text ? oItem.text : oItem.key
					});
				}
			});

		};

		/**
		 * Returns all group items.
		 * @returns {sap.ui.core.Control[]} Timeline groups
		 * @public
		 */
		Timeline.prototype.getGroups = function () {
			return this._useBinding() ? this.getContent().filter(function (oItem) {
				return oItem._isGroupHeader;
			}) : this._aGroups;
		};

		/**
		 * Cleans up the element instance before destruction
		 * @public
		 */
		Timeline.prototype.exit = function () {
			this._objects.destroyAll();

			if (this.oItemNavigation) {
				this.removeDelegate(this.oItemNavigation);
				this.oItemNavigation.destroy();
				this.oItemNavigation = null;
			}
			if (this._oScroller) {
				this._oScroller.destroy();
				this._oScroller = null;
			}

			if (this.oResizeListener) {
				ResizeHandler.deregister(this.oResizeListener);
				this.oResizeListener = null;
			}
		};

		/**
		 * Refreshes the UI.
		 * @public
		 */
		Timeline.prototype.adjustUI = function () {
			this._performUiChanges(true);
		};

		/**
		 * Sets the message displayed in the filter message strip. This message overwrites the default filter message.
		 * @param {sap.suite.ui.commons.TimelineFilterType} sType Filter type. Supports only items filter (<code>Data</code>)
		 * and time range filter (<code>Time</code>).
		 * @param {string} sMessage The message that should replace the default message.
		 * @public
		 */
		Timeline.prototype.setModelFilterMessage = function (sType, sMessage) {
			if (sType === TimelineFilterType.Data) {
				this._dataMessage = sMessage;
			}
			if (sType === TimelineFilterType.Time) {
				this._rangeMessage = sMessage;
			}
		};

		/**
		 * Sets a custom message for the filter message strip. This message is appended to the default
		 * filter text.
		 * @param {string} sMessage Message to append.
		 * @public
		 */
		Timeline.prototype.setCustomFilterMessage = function (sMessage) {
			this._customFilterMessage = sMessage;
		};

		/**
		 * Replaces one of the default filters: items filter, time range filter, or search.
		 * @param {object} mArguments The object containing settings
		 * @param {sap.suite.ui.commons.TimelineFilterType} mArguments.type Type of the filter to replace.
		 * @param {sap.ui.model.Filter} mArguments.filter Filter object to specify the filter criteria.
		 * @param {boolean} mArguments.refresh If set to <code>true</code> (default), filters are automatically recreated,
		 * and the content is updated.
		 * @public
		 */
		Timeline.prototype.setModelFilter = function (mArguments) {
			switch (mArguments.type) {
				case TimelineFilterType.Data:
					this._dataFilter = mArguments.filter;
					break;

				case TimelineFilterType.Time:
					this._rangeDataFilter = mArguments.filter;
					break;

				case TimelineFilterType.Search:
					this._searchFilter = mArguments.filter;
					break;
				default:
			}

			if (mArguments.refresh !== false) {
				this.recreateFilter();
			}
		};

		/**
		 * An override which exposes hidden aggregations. Hidden aggregations are used by Run Time Adaptation.
		 *
		 * @param sAggregationName the name of the aggregation
		 * @returns the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
		 * @protected
		 */
		Timeline.prototype.getAggregation = function (sAggregationName) {
			switch (sAggregationName) {
				case "headerBar":
					return this.getHeaderBar();
				case "searchField":
					return this._objects.getSearchField();
				case "sortIcon":
					return this._objects.getSortIcon();
				case "filterIcon":
					return this._objects.getFilterIcon();
				default:
					return Control.prototype.getAggregation.apply(this, arguments);
			}
		};


		/* =========================================================== */
		/* Private methods */
		/* =========================================================== */
		/**
		 * Returns key and title for oDate object based on format type (Year, Month, ...)
		 * @param {Date} oDate Item's date by group is determined
		 * @param {sap.suite.ui.commons.TimelineGroupType} sType Type of grouping
		 * @returns {object} Group data
		 * @private
		 */
		Timeline.prototype._formatGroupBy = function (oDate, sType) {
			if (this._fnCustomGroupBy) {
				return this._fnCustomGroupBy(oDate);
			}

			var sKey = oDate,
				sTitle = oDate;
			if (oDate instanceof Date) {
				switch (sType) {
					case TimelineGroupType.Year:
						sKey = oDate.getFullYear();
						sTitle = DateFormats.Year.format(oDate);
						break;

					case TimelineGroupType.Quarter:
						sKey = oDate.getFullYear() + "/" + Math.floor(oDate.getMonth() / 4);
						sTitle = DateFormats.Quarter.format(oDate);
						break;

					case TimelineGroupType.Month:
						sKey = oDate.getFullYear() + "/" + oDate.getMonth();
						sTitle = DateFormats.Month.format(oDate);
						break;

					case TimelineGroupType.Week:
						var dateFrom = new Date(oDate),
							dateTo = new Date(oDate),
							year = oDate.getFullYear(),
							week = DateFormats.Week.format(oDate),
							// find first and last day of the week
							first = oDate.getDate() - oDate.getDay(),
							last = first + 6,
							firstDay = new Date(dateFrom.setDate(first)),
							lastDay = new Date(dateTo.setDate(last));

						sKey = year + "/" + week;

						sTitle = DateFormats.MonthDay.format(firstDay) + " \u2013 " + DateFormats.MonthDay.format(lastDay);
						break;

					case TimelineGroupType.Day:
						sKey = oDate.getFullYear() + "/" + oDate.getMonth() + "/" + oDate.getDate();
						sTitle = DateFormats.Day.format(oDate);
						break;

					default:
				}
			}

			return {
				key: sKey,
				title: sTitle,
				date: oDate
			};
		};

		/**
		 * Calculate difference between two dates based by type (Year, month, ...)
		 * @param {sap.suite.ui.commons.TimelineGroupType} type Type of return result(Year, month,)
		 * @param {Date} [dateA] Date A - optional
		 * @param {Date} [dateB] Date B - optional
		 * @returns {number} Difference between dates
		 * @private
		 */
		Timeline.prototype._fnDateDiff = function (type, dateA, dateB) {
			var iMonths,
				iYearDiff, iDateAQuarter, iDateBQuarter,
				fResult = 0;

			dateA = dateA || this._minDate;
			dateB = dateB || this._maxDate;

			switch (type) {
				case TimelineGroupType.Year:
					fResult = dateB.getFullYear() - dateA.getFullYear();
					break;
				case TimelineGroupType.Month:
					iMonths = (dateB.getFullYear() - dateA.getFullYear()) * 12;
					iMonths += dateB.getMonth() - dateA.getMonth();
					fResult = iMonths <= 0 ? 0 : iMonths;
					break;
				case TimelineGroupType.Quarter:
					iYearDiff = (dateB.getFullYear() - dateA.getFullYear()) * 4;
					iDateAQuarter = Math.floor(dateA.getMonth() / 3);
					iDateBQuarter = Math.floor(dateB.getMonth() / 3);

					fResult = iYearDiff + (iDateBQuarter - iDateAQuarter);
					break;
				case TimelineGroupType.Day:
					// hours * minutes * seconds * milliseconds
					var oneDay = 24 * 60 * 60 * 1000;
					fResult = Math.round(Math.abs((dateA.getTime() - dateB.getTime()) / (oneDay)));
					break;
				default:
			}

			return fResult;
		};

		/**
		 * Add value to '_minDate'  based type (f.e. if type is YEAR and value is 4, we add 4 year)
		 * sDateRoundType means whether we want START of the 'interval' or its end
		 * lets say we add two years from 2014 -> we may have 2016/1/1 or 2016/12/31 depending whether we want to display 'from' or 'to'
		 * @param {number} iValue Number of units to add to minDate (type defined by second parameter)
		 * @param {sap.suite.ui.commons.TimelineGroupType} sDateRoundType Type of date to add
		 * @returns {Date} New date created by minDate + iValue
		 * @private
		 */
		Timeline.prototype._fnAddDate = function (iValue, sDateRoundType) {
			var oNewDate, oRoundedDown, oRoundedUp,
				fnSetTime = function (iHour, iMinute, iSecond) {
					this.setHours(iHour);
					this.setMinutes(iMinute);
					this.setSeconds(iSecond);
				},
				fnReturnCorrectDate = function (oDirect, oRoundedDown, oRoundedUp) {
					if (sDateRoundType === DateRoundType.UP) {
						fnSetTime.call(oRoundedUp, 23, 59, 59);
						return new Date(Math.min.apply(null, [this._maxDate, oRoundedUp]));
					}
					if (sDateRoundType === DateRoundType.DOWN) {
						fnSetTime.call(oRoundedDown, 0, 0, 0);
						return new Date(Math.max.apply(null, [this._minDate, oRoundedDown]));
					}
					return oDirect;
				};

			switch (this._rangeFilterType) {
				case TimelineGroupType.Year:
					oNewDate = new Date(new Date(this._minDate).setFullYear(this._minDate.getFullYear() + iValue));
					oRoundedDown = new Date(oNewDate.getFullYear(), 0, 1);
					oRoundedUp = new Date(oNewDate.getFullYear(), 11, 31);
					break;

				case TimelineGroupType.Month:
					oNewDate = new Date(new Date(this._minDate).setMonth(this._minDate.getMonth() + iValue));
					oRoundedDown = new Date(oNewDate.getFullYear(), oNewDate.getMonth(), 1);
					oRoundedUp = new Date(oNewDate.getFullYear(), oNewDate.getMonth() + 1, 0);
					break;

				case TimelineGroupType.Quarter:
					oNewDate = new Date(new Date(this._minDate).setMonth(this._minDate.getMonth() + (iValue * 3)));
					var iQuarterStart = oNewDate.getMonth() % 3;
					oRoundedDown = new Date(oNewDate.getFullYear(), oNewDate.getMonth() - iQuarterStart, 1);
					oRoundedUp = new Date(oNewDate.getFullYear(), oNewDate.getMonth() + (2 - iQuarterStart) + 1, 0);
					break;

				case TimelineGroupType.Day:
					// we do this for hour rounding
					oNewDate = oRoundedDown = oRoundedUp = new Date(new Date(this._minDate).setDate(this._minDate.getDate() + iValue));
					break;

				default:
			}

			return fnReturnCorrectDate.call(this, oNewDate, oRoundedDown, oRoundedUp);
		};

		/**
		 * Set default value for time range selector based by limit values
		 * @returns {sap.suite.ui.commons.TimelineGroupType} Selected value
		 * @private
		 */
		Timeline.prototype._calculateRangeTypeFilter = function () {
			var daysDiff = this._fnDateDiff(TimelineGroupType.Day);
			if (daysDiff > 500) {
				return TimelineGroupType.Year;
			} else if (daysDiff > 200) {
				return TimelineGroupType.Quarter;
			} else if (daysDiff > 62) {
				return TimelineGroupType.Month;
			}

			return TimelineGroupType.Day;
		};

		/**
		 * Setup range filter (min and max)
		 * @private
		 */
		Timeline.prototype._setRangeFilter = function () {
			var diff = this._fnDateDiff(this._rangeFilterType);

			this._objects.getTimeRangeSlider().setMin(0);
			this._objects.getTimeRangeSlider().setMax(diff);
			this._objects.getTimeRangeSlider().setRange([0, diff]);
			this._objects.getTimeRangeSlider().invalidate();
		};

		/**
		 * Action after sort arrow is clicked
		 * @private
		 */
		Timeline.prototype._sortClick = function () {
			var oBinding, sPath;
			this._sortOrder = this._sortOrder === SortOrder.ASCENDING ? SortOrder.DESCENDING : SortOrder.ASCENDING;
			this._objects.getSortIcon().setIcon(this._sortOrder === SortOrder.ASCENDING ?
				"sap-icon://arrow-bottom" : "sap-icon://arrow-top");

			if (this._useModelFilter()) {
				oBinding = this.getBinding("content");
				sPath = this._findBindingPath("dateTime");

				oBinding.sort(this._getDefaultSorter(sPath, this._sortOrder === SortOrder.ASCENDING));
			} else {
				this.invalidate();
			}
		};

		/**
		 * Sort items
		 * @param {Array} aData Data
		 * @param {string} sortOrder The order of sorting. Can be ASCENDING or DESCENDING.
		 * @returns {Array} Sorted data
		 * @private
		 */
		Timeline.prototype._sort = function (aData, sortOrder) {
			var sSortOrder = sortOrder || this._sortOrder;
			aData.sort(function (itemA, itemB) {
				var dateA = itemA.getDateTime(),
					dateB = itemB.getDateTime(),
					sign = (sSortOrder === SortOrder.ASCENDING) ? -1 : 1;

				return dateA < dateB ? 1 * sign : -1 * sign;
			});

			return aData;
		};

		/**
		 * When user clicks 'more' button or scrolls down (when lazy loading is ON)
		 * @private
		 */
		Timeline.prototype._loadMore = function () {
			var oBindingInfo, aData,
				fnSetNewItemCount = function () {
					var increase = this._displayShowMore() ? this.getGrowingThreshold() : this._calculateItemCountToLoad(this.$());
					this._iItemCount += increase;
					// limit maximum items to binding limit
					this._iItemCount = Math.min(this._getMaxItemsCount(), this._iItemCount);
				}.bind(this);

			this._lastScrollPosition.more = this._isVertical() ? this._$content.get(0).scrollTop : this._$content.get(0).scrollLeft;

			this._setBusy(true);
			this.fireGrow();

			if (this._useBinding()) {
				if (this._isMaxed()) {
					this._setBusy(false);
					return;
				}

				fnSetNewItemCount();

				oBindingInfo = this.getBindingInfo("content");
				oBindingInfo.startIndex = 0;

				// we already loaded all data so we don't want to overwrite it now
				if (!this._loadAllData()) {
					oBindingInfo.length = this._iItemCount;
				}

				// check whether we use OData binding
				aData = this.getBinding("content").getContexts(0, oBindingInfo.length);

				// don't update for oData service
				// TL will be updated when data are loaded
				if (aData && aData.dataRequested) {
					return;
				}

				this.updateAggregation("content");
			} else {
				fnSetNewItemCount();
				this.invalidate();
			}
			this.oItemNavigation.refocusOnNextUpdate();
		};

		/**
		 * Recreate all default filters (data, time, search) and refresh content.
		 * @param {boolean} bResetAll Indicates whether to clear all current filters (including custom filters)
		 */
		Timeline.prototype.recreateFilter = function (bResetAll) {
			var oBinding = this.getBinding("content"),
				that = this, //eslint-disable-line
				aFilters = [],
				aCurrentFilters = [];
			if (oBinding) {
				if (!bResetAll) {
					aFilters = oBinding.aFilters || [];
				}

				if (this._dataFilter) {
					aCurrentFilters.push(this._dataFilter);
				}

				if (this._rangeDataFilter) {
					aCurrentFilters.push(this._rangeDataFilter);
				}

				if (this._searchFilter) {
					aCurrentFilters.push(this._searchFilter);
				}
				// we don't want to override custom filters in binding, so find our filter and replace it
				if (this._filter && !bResetAll) {
					var filterIndex = findIndex(aFilters, function (oFilter) {
						return oFilter === that._filter;
					});

					if (filterIndex !== -1) {
						aFilters.splice(filterIndex, 1);
					}
				}

				// if there is any new filter add it as new one, otherwise this method only delete old filter
				if (aCurrentFilters.length > 0) {
					this._filter = new Filter(aCurrentFilters, true);
					aFilters.push(this._filter);
				}

				oBinding.filter(aFilters, FilterType.Control);
			} else {
				// for usecase without binding we just invalidate, because all filtering is done right before render is called
				this.invalidate();
			}
		};

		/**
		 * Returns either custom range message (set by function call) or create new one based on 'from' and 'to' selection from time filter.
		 * @returns {string} Message for range info bar.
		 * @private
		 */
		Timeline.prototype._getRangeMessage = function () {
			var text = this._rangeMessage;
			if (!text) {
				var titleStart = this._formatGroupBy(this._startDate, this._rangeFilterType).title,
					titleEnd = this._formatGroupBy(this._endDate, this._rangeFilterType).title;

				text = resourceBundle.getText("TIMELINE_RANGE_SELECTION") + " (";
				text += titleStart + " - " + titleEnd + ")";
			}
			return text;
		};

		/**
		 * Returns either custom data filter message (set by function call) or create new one based on selected filter items.
		 * @returns {string} Message for filter info bar.
		 * @private
		 */
		Timeline.prototype._getFilterMessage = function () {
			var sText = "",
				sMessage = null;

			if (this._dataMessage) {
				sText = this._dataMessage;
			} else if (this._currentFilterKeys.length > 0) {
				sText = this._currentFilterKeys.map(function (oItem) {
					return oItem.text ? oItem.text : oItem.key;
				}).join(", ");

				sText = this._getFilterTitle() + " (" + sText + ")";
			}

			if (this._rangeDataFilter || this._rangeMessage || (this._startDate && this._endDate)) {
				sText = sText ? sText + ", " : "";
				sText += this._getRangeMessage();
			}

			if (this._customFilterMessage) {
				sText = sText ? sText + ", " + this._customFilterMessage : this._customFilterMessage;
			}

			if (sText) {
				sMessage = resourceBundle.getText("TIMELINE_FILTER_INFO_BY", sText);
			}

			return sMessage;
		};

		/**
		 * Proper oData handling. We call 'updateAggregation' not right away but we wait after data are loaded
		 * @private
		 */
		Timeline.prototype.refreshContent = function () {
			var oBinding = this.getBinding("content"),
				oBindingInfo = this.getBindingInfo("content");

			this._setBusy(true);

			// this is to prevent refreshing before data are loaded
			// 'updateAggregation' triggers UI update even if data are not loaded yet
			if (oBinding && oBindingInfo) {
				oBinding.getContexts(0, oBindingInfo.length);
				oBinding.attachEventOnce("dataReceived", jQuery.proxy(function () {
					this.updateAggregation("content");
				}, this));
			} else {
				this.updateAggregation("content");
			}
		};

		/**
		 * Proper oData handling.
		 * @private
		 */
		Timeline.prototype.updateContent = function () {
			this._setBusy(false);
			this.updateAggregation("content");

			// for empty returned dataset in oData updateAggregation doesn't trigger rerender so we call it manually
			this.invalidate();
		};

		/**
		 * Destroy additional objects which are not directly in content aggregation but need to removed when content is destroyed.
		 * @private
		 */
		Timeline.prototype.destroyContent = function () {
			// if there is request pending, don't invalidate right now
			var $line = this.$("line"),
				$showMore = this.$().find(".sapSuiteUiCommonsTimelineItemGetMoreButton");

			if ($line.get(0)) {
				$line.remove();
			}

			if ($showMore.get(0)) {
				$showMore.remove();
			}

			this.destroyAggregation("content");
		};

		/**
		 * Process search
		 * @param {string} sSearchTerm term to search
		 * @private
		 */
		Timeline.prototype._search = function (sSearchTerm) {
			var that = this, //eslint-disable-line
				bExecuteDefault, aTextPaths, aTitlePaths, aUserNamePaths,
				columns = [];

			this._searchValue = sSearchTerm;

			if (this._useModelFilter()) {
				bExecuteDefault = this._fireSelectionChange({
					searchTerm: this._searchValue,
					type: TimelineFilterType.Search
				});

				if (bExecuteDefault) {
					this._searchFilter = null;
					if (this._searchValue) {
						// add filter columns - by default we search in text, title and username binding fields
						aTextPaths = this._findBindingPaths("text");
						aTitlePaths = this._findBindingPaths("title");
						aUserNamePaths = this._findBindingPaths("userName");

						if (aTextPaths.length > 0) {
							columns.push(aTextPaths);
						}
						if (aTitlePaths.length > 0) {
							columns.push(aTitlePaths);
						}
						if (aUserNamePaths) {
							columns.push(aUserNamePaths);
						}
						if (columns.length > 0) {
							//create filters based on the filter columns
							this._searchFilter = new Filter(columns.map(function (paths) {
								return new Filter(paths.map(function (onePath) {
									return new Filter(onePath, FilterOperator.Contains, that._searchValue);
								}), false);
							}));
						}
					}

					this.recreateFilter();
				}
			} else {
				this.invalidate();
			}
		};

		/**
		 * @param {boolean} bRange Whether or not to use a range
		 * @private
		 */
		Timeline.prototype._filterData = function (bRange) {
			var bExecuteDefault,
				sPath;
			this._dataMessage = "";

			if (this._useModelFilter()) {
				// filter

				this._dataFilter = null;
				bExecuteDefault = this._fireSelectionChange({
					// backward compatibility
					selectedItem: this._currentFilterKeys[0] ? this._currentFilterKeys[0].key : "",
					selectedItems: this._currentFilterKeys,
					type: TimelineFilterType.Data
				});

				if (bExecuteDefault) {
					if (this._currentFilterKeys.length > 0) {
						sPath = this._findBindingPath("filterValue");
						if (sPath) {
							this._dataFilter = new Filter(this._currentFilterKeys.map(function (oItem) {
								return new Filter(sPath, FilterOperator.EQ, oItem.key);
							}), false);
						}
					}
				}

				this._rangeDataFilter = null;
				if (bRange) {
					// range
					bExecuteDefault = this._fireSelectionChange({
						type: TimelineFilterType.Time,
						timeKeys: {
							from: this._startDate,
							to: this._endDate
						}
					});

					if (bExecuteDefault) {
						sPath = this._findBindingPath("dateTime");
						if (sPath) {
							this._rangeDataFilter = new Filter({
								path: sPath,
								operator: FilterOperator.BT,
								value1: this._startDate,
								value2: this._endDate
							});
						}

					}
				}

				this._setBusy(true);

				this.recreateFilter();
			} else {
				this.invalidate();
			}
		};

		/**
		 * @private
		 */
		Timeline.prototype._filterRangeData = function () {
			var bExecuteDefault, sPath;
			this._rangeMessage = "";

			if (this._useModelFilter()) {
				bExecuteDefault = this._fireSelectionChange({
					from: this._startDate,
					to: this._endDate,
					type: TimelineFilterType.Time
				});

				if (bExecuteDefault) {
					sPath = this._findBindingPath("dateTime");
					this._rangeDataFilter = null;
					if (sPath) {
						this._rangeDataFilter = new Filter({
							path: sPath,
							operator: FilterOperator.BT,
							value1: this._startDate,
							value2: this._endDate
						});
					}

					this._setBusy(true);
					this.recreateFilter();
				}
			} else {
				this.invalidate();
			}
		};

		/**
		 * Override apply settings to postpone bind aggregation.
		 * Bind aggregation may be called before all settings are applied
		 *
		 * @param {object} mSettings The settings to apply to this managed object
		 * @param {object} [oScope] Scope object to resolve types and formatters
		 * @private
		 */
		Timeline.prototype.applySettings = function (mSettings, oScope) {
			ManagedObject.prototype.applySettings.apply(this, [mSettings, oScope]);

			this._settingsApplied = true;

			// if bind aggregation was already called (which is most likely if we use timeline content binding from XML),
			// call it now
			if (this._bindOptions) {
				this.bindAggregation("content", this._bindOptions);
				this._bindOptions = null;
			}
		};

		/**
		 * Create filters for filter dialog. If modelfilter is ON, user can set own filter items, otherwise items are
		 * grabbed from items as distinct value for {filterValue} column in data set.
		 * @private
		 */
		Timeline.prototype._setFilterList = function () {
			var bSort = false,
				aData,
				oItems,
				sKey,
				oFilteredItems = {},
				oBinding,
				oBindingData;

			this._aFilterList = [];

			if (this._useModelFilter()) {
				this._aFilterList = this.getFilterList().map(function (oItem) {
					return {
						key: oItem.getProperty("key"),
						text: oItem.getProperty("text")
					};
				});

				if (this._aFilterList.length === 0) {
					// JSON model only, for oData model values have to be set via filter list
					oBindingData = this._findBindingData("filterValue");
					oBinding = this.getBinding("content");
					if (oBindingData && oBinding) {
						aData = oBinding.getDistinctValues(oBindingData.path);
						if (Array.isArray(aData)) {
							this._aFilterList = aData.map(function (sItem) {
								return {
									key: sItem,
									text: oBindingData.formatter ? oBindingData.formatter(sItem) : sItem
								};
							});
							this._aFilterList = this._aFilterList.filter(function (oItem) {
								return oItem.key;
							});
						}
						bSort = true;
					}
				}
			} else {
				oItems = this.getContent();
				bSort = true;
				// grab all unique values from all items
				for (var i = 0; i < oItems.length; i++) {
					sKey = oItems[i].getFilterValue();
					if (!sKey) {
						continue;
					}
					if (!(sKey in oFilteredItems)) {
						oFilteredItems[sKey] = 1;
						this._aFilterList.push({
							key: sKey,
							text: sKey
						});
					}
				}
			}

			if (bSort) {
				this._aFilterList.sort(function (a, b) {
					if (a.text.toLowerCase) {
						return a.text.toLowerCase().localeCompare(b.text.toLowerCase());
					} else {
						return a.text > b.text;
					}
				});
			}
		};

		/**
		 * Clear data filter. Remove filter from model binding and clear all selected items for filter selection.
		 * @private
		 */
		Timeline.prototype._clearFilter = function () {
			var fnClearTimeRangeFilter = function () {
					var bExecuteDefault,
						oSlider = this._objects.getTimeRangeSlider();
					this._startDate = null;
					this._endDate = null;
					this._rangeMessage = null;

					oSlider.setRange([oSlider.getMin(), oSlider.getMax()]);

					if (this._useModelFilter()) {
						bExecuteDefault = this._fireSelectionChange({
							clear: true,
							timeKeys: {
								from: null,
								to: null
							},
							type: TimelineFilterType.Range
						});
					}
					return bExecuteDefault;
				}.bind(this),
				fnClearDataFilter = function () {
					var bExecuteDefault;

					this._currentFilterKeys = [];
					if (this._useModelFilter()) {
						bExecuteDefault = this._fireSelectionChange({
							clear: true,
							selectedItems: [],
							selectedItem: "",
							type: TimelineFilterType.Data
						});
					}
					return bExecuteDefault;
				}.bind(this);

			var bDataDefault = fnClearDataFilter(),
				bRangeDefault = fnClearTimeRangeFilter();

			// clear custom filter
			this._customFilterMessage = "";
			if (bDataDefault || bRangeDefault) {
				if (bDataDefault) {
					this._dataFilter = null;
				}

				if (bRangeDefault) {
					this._rangeDataFilter = null;
				}
				this.recreateFilter(true /*force clear custom filters*/);
			} else {
				this.invalidate();
			}

			//reset filter
			// this is a bit overkill but we are so far unable to reset filter to it's init state without some filter's internal errors
			// or nasty private variables manipulation.
			this._objects.destroyObject("FilterContent");
			this._setupFilterDialog();
		};

		/**
		 * Open time filter dialog. IF max and min not yet set, try to find out.
		 * @private
		 * @returns {Promise} A promise for when all requests have been completed
		 */
		Timeline.prototype._getTimeFilterData = function () {
			var that = this, //eslint-disable-line
				aItems, oMin, oMax, oDate,
				fnCall = function (sType, sName) {
					return fnGetLimit(sType, that[sName]).then(function (oData) { //eslint-disable-line
							if (oData) {
								// ensure we have valid values
								var parsedDate = DateUtils.parseDate(oData);

								if (parsedDate instanceof Date) {
									that[sName] = parsedDate;
								}
							}
						}
					).catch(function () {
						// not setting min and max is sufficient. No additional action required
					});
				},
				fnGetLimitValue = function (asc) {
					var oModel, sDateTimePath, oSorter, oBindingInfo;

					oModel = this.getModel();
					if (!oModel) {
						return Promise.reject();
					}

					sDateTimePath = this._findBindingPath("dateTime");
					oSorter = new Sorter(sDateTimePath, asc);
					oBindingInfo = this.getBindingInfo("content");

					if (!oBindingInfo) {
						return Promise.reject();
					}

					var oBinding = oModel.bindList(oBindingInfo.path, null, oSorter, null);

					if (typeof oBinding.initialize === "function") {
						oBinding.initialize();
					}

					if (oBinding instanceof ClientListBinding) {
						if (oBinding.getLength() === 0) {
							return Promise.resolve(null);
						}

						return Promise.resolve(DateUtils.parseDate(oBinding.oList[oBinding.aIndices[0]][sDateTimePath]));
					} else if (oBinding && oBinding.attachDataReceived) {
						that._setBusy(true);
						return new Promise(function (resolve, reject) {
							oBinding.attachDataReceived(function (result) {
								that._setBusy(false);
								if (typeof result === "undefined") {
									reject();
									return;
								}
								var oData = result.getParameter("data");
								resolve(DateUtils.parseDate(oData.results[0][sDateTimePath]));
							});
							oBinding.loadData(0, 1);
						});
					}

					return Promise.reject();
				}.bind(this),
				fnGetLimit = function (sType, oDate) {
					if (oDate) {
						return Promise.resolve(oDate);
					}

					return fnGetLimitValue(sType === "max");
				},
				fnGetMinAndMax = function () {
					aItems = this.getContent();
					if (aItems.length > 0) {
						this._minDate = aItems[0].getDateTime();
						this._maxDate = aItems[0].getDateTime();

						for (var i = 1; i < aItems.length; i++) {
							oDate = aItems[i].getDateTime();
							if (oDate < this._minDate) {
								this._minDate = oDate;
							}
							if (oDate > this._maxDate) {
								this._maxDate = oDate;
							}
						}
					}
				};

			return new Promise(function (resolve, reject) {
				// if min or max date not loaded yet
				if (!that._maxDate || !that._minDate) {
					if (that._useModelFilter()) {
						// call separate OData requests for min and max
						oMin = fnCall("min", "_minDate", oMin);
						oMax = fnCall("max", "_maxDate", oMax);

						Promise.all([oMin, oMax]).then(function () {
							// wait till all requests are complete then open window
							resolve();
						}).catch(function () {
							reject();
						});
					} else {
						fnGetMinAndMax.call(that);
						resolve();
					}
				} else {
					resolve();
				}
			});
		};

		/**
		 * Opens filter dialog. Can be custom dialog.
		 * @private
		 */
		Timeline.prototype._openFilterDialog = function () {
			if (this._customFilter) {
				this.getCustomFilter().openBy(this._objects.getFilterIcon());
				this.fireFilterOpen();
				return;
			}

			this._filterState = {
				data: false,
				range: false
			};

			this._objects.getFilterContent().open();
			this.fireFilterOpen();
		};

		/**
		 * Creates group header item which is classic TimelineItem with slightly different data
		 * @param {object} oContext oContext group data with {date;key;title}
		 * @param {boolean} bSkipAppend If true, we don't call addAggregation (for cases when there is no binding)
		 * @returns {sap.suite.ui.commons.TimelineItem} newly recreated group item
		 * @private
		 */
		Timeline.prototype._createGroupHeader = function (oContext, bSkipAppend) {
			var sId = this.getId() + "-timelinegroupheader-" + this._groupId,
				sKey = oContext.key,
				oGroupItem = new TimelineItem(sId, {
					text: "GroupHeader",
					dateTime: oContext.date,
					userName: sKey,
					title: oContext.title,
					icon: "sap-icon://arrow-down"
				});

			oGroupItem._isGroupHeader = true;

			// for usage without binding we don't add groupitem to content as we recreate it every render cycle
			if (bSkipAppend) {
				oGroupItem.setParent(this, "content");
				this._aGroups.push(oGroupItem);
			} else {
				this.addAggregation("content", oGroupItem, false);
			}

			this._groupId++;
			return oGroupItem;
		};

		/**
		 * Create sorter object
		 * @param {string} sPropertyName Property name by which sorting is managed
		 * @param {boolean} sAscending Order of sorting
		 * @returns {sap.ui.model.Sorter} Sorter object
		 * @private
		 */
		Timeline.prototype._getDefaultSorter = function (sPropertyName, sAscending) {
			var that = this; //eslint-disable-line

			return new Sorter(sPropertyName, !sAscending, function (oContext) {
				var sValue = oContext.getProperty(sPropertyName),
					oDate = DateUtils.parseDate(sValue);

				return oDate instanceof Date ? that._formatGroupBy(oDate, that.getGroupByType()) : {date: oDate};
			});
		};

		/**
		 * Return binding info for given property
		 * @param {string} sPropertyName Property name we are looking for the model source
		 * @param {object} oTemplate Binding template
		 * @returns {object} Binding info
		 * @private
		 */
		Timeline.prototype._findBindingInfoFromTemplate = function (sPropertyName, oTemplate) {
			// if no template is set try to find from binding info
			// this function may be called before 'content' aggregation is initialized
			// so there is a possibility to call it with template object directly
			if (!oTemplate) {
				var oBindingInfo = this.getBindingInfo("content");

				if (oBindingInfo) {
					oTemplate = oBindingInfo.template;
				}
			}

			if (oTemplate) {
				var oInfo = oTemplate.getBindingInfo(sPropertyName);
				if (oInfo && oInfo.parts && oInfo.parts[0]) {
					return oInfo;
				}
			}

			return null;
		};

		/**
		 * Return all binding paths for property name
		 * @param {string} sPropertyName Property name we are looking for the model source
		 * @param {object} oTemplate Binding template
		 * @returns {Array} All property's paths
		 * @private
		 */
		Timeline.prototype._findBindingPaths = function (sPropertyName, oTemplate) {
			var oInfo = this._findBindingInfoFromTemplate(sPropertyName, oTemplate);
			if (oInfo && oInfo.parts) {
				return oInfo.parts.map(function (oItem) {
					return oItem.path;
				});
			}

			return [];
		};

		/**
		 * Return binding path for property name
		 * @param {string} sPropertyName Property name we are looking for the model source
		 * @param {object} oTemplate Binding template
		 * @returns {string} First property path (rest are ignored)
		 * @private
		 */
		Timeline.prototype._findBindingPath = function (sPropertyName, oTemplate) {
			var oInfo = this._findBindingInfoFromTemplate(sPropertyName, oTemplate);
			if (oInfo) {
				return oInfo.parts[0].path;
			}

			return null;
		};

		/**
		 * Return information for property (path and formatter)
		 * @param {string} sPropertyName Property name we are looking for the model source
		 * @param {object} oTemplate Binding template
		 * @returns {object} Formatter and path
		 * @private
		 */
		Timeline.prototype._findBindingData = function (sPropertyName, oTemplate) {
			var oInfo = this._findBindingInfoFromTemplate(sPropertyName, oTemplate);
			if (oInfo) {
				return {
					path: oInfo.parts[0].path,
					formatter: oInfo.formatter
				};
			}
			return null;
		};

		/**
		 * Based on settings apply grouping and sorting to binding info
		 * @param {object} oBindingInfo Binding information
		 * @private
		 */
		Timeline.prototype._bindGroupingAndSorting = function (oBindingInfo) {
			// get the sorter and add to bindaggregation options
			// only if there is date time binding
			if (!this._isGrouped() && this.getSort()) {
				var sDateTimeBinding = this._findBindingPath("dateTime", oBindingInfo.template);
				if (sDateTimeBinding) {
					oBindingInfo.sorter = this._getDefaultSorter(sDateTimeBinding, this.getSortOldestFirst());
				}
			}
			oBindingInfo.groupHeaderFactory = null;
			if (this._isGrouped()) {
				// add sort by for group by field
				oBindingInfo.sorter = this._getDefaultSorter(this.getGroupBy(), this.getSortOldestFirst());

				//get group header factory and add to bindaggration options
				oBindingInfo.groupHeaderFactory = jQuery.proxy(this._createGroupHeader, this);
			}
		};

		/**
		 * Overrides ManagedObject bindAggregation function, we add some special features for binding
		 * @param {string} sName Aggregation name
		 * @param {object} oOptions Binding options
		 * @private
		 * @returns {sap.suite.ui.commons.Timeline} This to allow method chaining
		 */
		Timeline.prototype.bindAggregation = function (sName, oOptions) {
			if (sName === "content") {
				// this prevents calling bindaggregation before all settings are loaded
				// when we have context={/...} in XML timeline definition we can't guarantee order of settings applied
				// so this method could be called before all settings are parsed from XML and setup
				// we store options parameter and called it after settings are loaded (after applysettings method is called)
				if (!this._settingsApplied) {
					this._bindOptions = oOptions;
					return null;
				}

				this._bindGroupingAndSorting(oOptions);

				// if we have 'Show More' ON, limit the length to the growing treshold (stored in _itemCount)
				// otherwise download minimum limit for auto-scrolling
				if (this._lazyLoading()) {
					this._iItemCount = this._calculateItemCountToLoad(jQuery(window));
					if (!this._loadAllData(true)) {
						oOptions.length = this._iItemCount;
					}
				} else if (this._displayShowMore() && !this._loadAllData(oOptions.template)) {
					this._iItemCount = this.getGrowingThreshold();
					oOptions.length = this._iItemCount;
				}

				this._oOptions = oOptions;
			}

			return ManagedObject.prototype.bindAggregation.apply(this, [sName, oOptions]);
		};

		/**
		 * Calculate items to be loaded for lazy loading based on item size and screen size
		 * @param {object} $parent Parent object where we fit timeline
		 * @returns {number} Number of items to load
		 * @private
		 */
		Timeline.prototype._calculateItemCountToLoad = function ($parent) {
			var isVertical = TimelineAxisOrientation.Vertical === this.getAxisOrientation(),
				size = isVertical ? $parent.height() : $parent.width(),
				isDblSided = this.getEnableDoubleSided(),
				// double sided layout stores more items to one screen
				ratio = isDblSided ? 0.6 : 1,
				SIZE = isVertical ? 1200 : 2000,
				// aprox. item size with margin
				ITEM_SIZE = isVertical ? 120 : 280,
				MIN_COUNT = (13 * ratio),
				result;

			if (!size) {
				// for some reason we are not able to find out parent size -> calculate with 1200 then
				size = SIZE;
			}

			// count aprox. number of items available for one screen (multiple by 2 cause we want to be sure, scrollbar is shown)
			result = (size / (ITEM_SIZE * ratio)) * 1.5;
			return Math.floor(Math.max(result, MIN_COUNT));
		};

		/**
		 * Before render event
		 * @private
		 */
		Timeline.prototype.onBeforeRendering = function () {
			var iGrowingThreshold = this.getGrowingThreshold(),
				aContent;
			this._bRtlMode = sap.ui.getCore().getConfiguration().getRTL();

			this._objects.getSortIcon().setIcon(this._sortOrder === SortOrder.ASCENDING ?
				"sap-icon://arrow-bottom" : "sap-icon://arrow-top");
			this._aGroups = [];

			aContent = this.getContent();

			// limit size for non binding lazy loading items
			if (!this._iItemCount && !this._useBinding() && this._lazyLoading()) {
				this._iItemCount = this._calculateItemCountToLoad(jQuery(window));
			}

			// limit size for growing threshold
			if (!this._iItemCount) {
				if (iGrowingThreshold !== 0) {
					this._iItemCount = iGrowingThreshold;
				}
			}

			// in case growing is off we want to set itemcount to all downloaded items in case
			// data was changed meanwhile
			if (!this._iItemCount || !this._useGrowing()) {
				// if still not set all data are probably loaded -> itemCount === all content data
				this._iItemCount = aContent.filter(function (oItem) {
					return !oItem._isGroupHeader;
				}).length;
			}

			this._setOutput(aContent);
		};

		/**
		 * Function override for grouping
		 * @param {object} context Data for grouping
		 * @private
		 */
		Timeline.prototype.addContentGroup = function (context) {
			//managed object requires this function to be declared to set bGrouped flag true
		};

		/**
		 * Action after user clicks scrolling button. Scrolls content to specific direction by set amount.
		 * @param {number} size Number to determine how many content to scroll
		 * @private
		 */
		Timeline.prototype._performScroll = function (size) {
			var that = this, //eslint-disable-line
				newScrollValue = this._isVertical() ? this._$content.get(0).scrollTop + size : this._$content.get(0).scrollLeft + size;

			newScrollValue = Math.max(newScrollValue, 0);
			if (this._isVertical()) {
				this._$content.get(0).scrollTop = newScrollValue;
			} else {
				this._$content.get(0).scrollLeft = newScrollValue;
			}

			if (this._manualScrolling) {
				setTimeout(that._performScroll.bind(that, size), 50);
			}
		};

		/**
		 * For default scrolling we use .more to store last scrolling position when load is pressed
		 * when some Timeline Item is selected it is focused by 'applyFocusInfo' which scrolls scrollbar to the focused item
		 * but we want to scroll to last visible (scrolled) position
		 * we use backup because we still want more to be erased after scrolling for cases when item is not focused so this method is called
		 * @param {boolean} bUseBackup Indicates whether store value for next use. Value is deleted after it.
		 * @private
		 */
		Timeline.prototype._moveScrollBar = function (bUseBackup) {
			if (this._lastScrollPosition.more || this._lastScrollPosition.backup) {
				if (bUseBackup) {
					this._lastScrollPosition.more = this._lastScrollPosition.backup;
				}

				if (this._isVertical()) {
					this._oScroller.scrollTo(0, this._lastScrollPosition.more);
				} else {
					this._oScroller.scrollTo(this._lastScrollPosition.more, 0);
				}

				// store backup
				if (!bUseBackup) {
					this._lastScrollPosition.backup = this._lastScrollPosition.more;
				}

				// reset flag, wait for next data load
				this._lastScrollPosition.more = 0;
			}
		};

		/**
		 * After render event
		 * @private
		 */
		Timeline.prototype.onAfterRendering = function () {
			var $this = this.$();

			if (this._isVertical()) {
				this._$content = this.$("content");
				this._$scroll = this.$("scroll");
			} else {
				this._$content = this.$("contentH");
				this._$scroll = this.$("scrollH");
			}

			this.setBusy(false);

			if (!this._oScroller) {
				this._oScroller = new ScrollEnablement(this, this._$scroll.attr('id'), {});
			}

			this._oScroller._$Container = this._$scroll.parent();

			this._oScroller.setVertical(this._isVertical());
			this._oScroller.setHorizontal(!this._isVertical());

			this._startItemNavigation();

			// setup
			this._scrollersSet = false;
			this._scrollMoreEvent = true;
			// after rendering we always want to trigger double sided changes (if the setting is ON)
			this._lastStateDblSided = null;

			this._showCustomMessage();
			this._setupScrollEvent();
			this._performUiChanges();

			this._moveScrollBar();

			$this.css("opacity", 1);
		};

		/**
		 * Client data filtering for use cases without binding or for useModelFilter=false
		 * @param {Array} aItems Data to filter
		 * @returns {Array} filtered data
		 * @private
		 */
		Timeline.prototype._clientFilter = function (aItems) {
			var aFilteredItems = [],
				oItem, bFilter, oReasons, iFindIndex, oDate,
				sSearchValue, sText, sTitle, sUserName,
				bReverseDefault;

			function fnCheckKey(oSelectedFilterItem) {
				return oSelectedFilterItem.key === oItem.getProperty("filterValue");
			}

			// filtering - for cases without binding (or mixed by calling addContent) - we filter and sort items
			// even thou in most cases they are already filtered and sorted out.
			for (var i = 0; i < aItems.length; i++) {
				oItem = aItems[i];
				bFilter = false;
				oReasons = {};

				// data filter
				if (this._currentFilterKeys.length > 0) {
					iFindIndex = findIndex(this._currentFilterKeys, fnCheckKey);

					if (iFindIndex === -1) {
						bFilter = true;
						oReasons[TimelineFilterType.Data] = 1;
					}
				}

				// range filter
				if (this._startDate && this._endDate) {
					oDate = oItem.getDateTime();
					if (oDate < this._startDate || oDate > this._endDate) {
						bFilter = true;
						oReasons[TimelineFilterType.Time] = 1;
					}
				}

				// search filter
				if (this._searchValue) {
					sSearchValue = this._searchValue.toLowerCase();
					sText = oItem.getProperty("text") || "";
					sTitle = oItem.getProperty("title") || "";
					sUserName = oItem.getProperty("userName") || "";

					if (!((sText.toLowerCase().indexOf(sSearchValue) !== -1) ||
						(sTitle.toLowerCase().indexOf(sSearchValue) !== -1) ||
						(sUserName.toLowerCase().indexOf(sSearchValue) !== -1))) {
						bFilter = true;
						oReasons[TimelineFilterType.Search] = 1;
					}
				}

				bReverseDefault = !this.fireEvent("itemFiltering", {
					item: oItem,
					reasons: oReasons,
					dataKeys: this._currentFilterKeys,
					timeKeys: {
						from: this._startDate,
						to: this._endDate
					},
					searchTerm: this._searchValue
				}, true);

				if (bReverseDefault) {
					bFilter = !bFilter;
				}

				if (!bFilter) {
					aFilteredItems.push(oItem);
				}
			}

			return aFilteredItems;
		};

		/**
		 * Fills _outputItem collection which is used as items collection in renderer.
		 * @param {Array} aItems Data to process
		 * @private
		 */
		Timeline.prototype._setOutput = function (aItems) {
			var aFilteredItems;
			var fnTrimDataAfterItemCount = function () {
					// for cases when growingthreshold may be changed runtime, we trim additional data
					var iNonGroupItemCount = 0,
						aTrimmedItems = [],
						i = 0;
					if (this._iItemCount !== aFilteredItems.length) {
						for (; i < aFilteredItems.length; i++) {
							if (!aFilteredItems[i]._isGroupHeader) {
								iNonGroupItemCount++;
							}

							if (iNonGroupItemCount > this._iItemCount) {
								break;
							}

							aTrimmedItems.push(aFilteredItems[i]);
						}

						aFilteredItems = aTrimmedItems;
					}
				},
				fnAppendGroupHeaderItemsWithoutBinding = function () {
					var aItemList = [],
						oItem, oCurrentGroupHeaderData,
						oGroupHeaderData = {
							key: ""
						};

					for (var i = 0; i < aFilteredItems.length; i++) {
						oItem = aFilteredItems[i];
						oCurrentGroupHeaderData = this._formatGroupBy(oItem.getDateTime(), this.getGroupByType());

						if (oCurrentGroupHeaderData.key != oGroupHeaderData.key) {
							// we recreate group header items for every render run
							// we don't want to add it to content as it is not recreated every render cycle when binding is not in
							aItemList.push(this._createGroupHeader(oCurrentGroupHeaderData, true));
							oGroupHeaderData = oCurrentGroupHeaderData;
						}

						aItemList.push(oItem);
					}

					return aItemList;
				},
				fnGetMinOrMaxFromItems = function () {
					var oItem;
					// first time load with no filter and search
					if (!this._maxDate && !this._minDate) {
						if (this.getSort() || this._isGrouped()) {
							// find first non group item value
							for (var i = 0; i < aItems.length; i++) {
								oItem = aItems[i];
								if (!oItem._isGroupHeader) {
									this._sortOrder === SortOrder.ASCENDING ? this._minDate = oItem.getDateTime() : this._maxDate = oItem.getDateTime(); //eslint-disable-line
									break;
								}
							}
						}
					}
				},
				oGroup, oConvertedDate, iGroupID, bGroupFirstItem;

			// start
			fnGetMinOrMaxFromItems.call(this);

			// sort for client filtering or for usage without binding
			if ((!this._useBinding() || !this._useModelFilter()) && this.getSort()) {
				aItems = this._sort(aItems);
			}

			// if we don't use model filter, filter data now
			aFilteredItems = this._useModelFilter() ? aItems : this._clientFilter(aItems);

			// remove group items -> required for correct computing show more
			aFilteredItems = aFilteredItems.filter(function (item) {
				return !item._isGroupHeader;
			});

			this._showMore = this.getForceGrowing();
			if (!this._showMore && this._displayShowMore()) {
				// there are more items to display then we can => show more for both model or client filter
				this._showMore = aFilteredItems.length > this._iItemCount;
				// for model filter we need to take care of equality of items to show and items to display
				// for client model this is already covered by first condition because aFilteredItems should contain
				// all available items
				if (!this._showMore && this._useModelFilter()) {
					this._showMore = aFilteredItems.length === this._iItemCount && this._iItemCount < this._getMaxItemsCount();
				}
			}

			// filter for visible items - both cases, model binding or content adding
			aFilteredItems = aFilteredItems.filter(function (item) {
				return item.getVisible();
			});

			fnTrimDataAfterItemCount.call(this);

			this._outputItem = [];

			// if we don't have binding we have to create groups ourself
			if (this._isGrouped()) {
				if (!this._useBinding()) {
					aItems = fnAppendGroupHeaderItemsWithoutBinding.call(this);
				}

				// get group timeline item values  eg: 2016,2015,2014 etc
				var aGroupItems = aItems.filter(function (oItem) {
					return oItem._isGroupHeader;
				});
				this._groupCount = aGroupItems.length;

				for (var i = 0; i < aGroupItems.length; i++) {
					oGroup = aGroupItems[i];
					//get the year from timelineitem
					iGroupID = oGroup.getUserName();
					// for client filtering, we want to add only groups with at least one item.
					bGroupFirstItem = true;

					oGroup._groupID = iGroupID;

					for (var k = 0; k < aFilteredItems.length; k++) {
						var item = aFilteredItems[k];

						//check if it is not a group timelineitem
						oConvertedDate = this._formatGroupBy(item.getDateTime(), this.getGroupByType());

						if (oConvertedDate.key == iGroupID && !item._isGroupHeader) {
							if (bGroupFirstItem) {
								//add group timeline item to the outputItem array
								this._outputItem.push(oGroup);
								bGroupFirstItem = false;
							}
							item._groupID = iGroupID;
							this._outputItem.push(item);
						}
					}
				}

			} else {
				this._outputItem = jQuery.extend(true, [], aFilteredItems);
			}
		};

		/**
		 * maximum items either in binding (model) or in content (timeline without binding)
		 * @returns {Number} Maximum items for timeline
		 * @private
		 */
		Timeline.prototype._getMaxItemsCount = function () {
			var oBinding = this.getBinding("content"),
				oModel, iModelSizeLimit, iBindingLength;

			if (oBinding) {
				iBindingLength = oBinding.getLength() || 0;
				oModel = this.getModel();
				iModelSizeLimit = oModel && oModel.iSizeLimit;

				return Math.min(iBindingLength, iModelSizeLimit || iBindingLength);
			}

			return this.getContent().length;
		};

		/**
		 * Display custom message (if there is any)
		 * @private
		 */
		Timeline.prototype._showCustomMessage = function () {
			var bShow = !!this._customMessage,
				$obj = this._objects.getMessageStrip().$();

			this._objects.getMessageStrip().setVisible(bShow);
			this._objects.getMessageStrip().setText(this._customMessage);

			if (bShow) {
				$obj.show();
			} else {
				$obj.hide();
			}
		};

		/**
		 * Performs expand or collapse for group
		 * @param {string} sGroupID Collapsing (expanding) group ID
		 * @param {boolean} bExpand Indicates whether we are expanding or collapsing.
		 * @private
		 * @returns {Promise} A new promise for when expansion/collapse is done
		 */
		Timeline.prototype._performExpandCollapse = function (sGroupID, bExpand) {
			var that = this, //eslint-disable-line
				$items,
				$this = this.$(),
				sMethod = bExpand ? "slideDown" : "slideUp",
				ANIMATIONS_SPEED = 250;

			$this.find('li[groupid="' + sGroupID + '"][nodeType="GroupHeaderBar"]').each(function (iIndex, oLi) {
				var $li = jQuery(oLi);
				if (!bExpand) {
					$li.addClass("sapSuiteUiCommonsTimelineItemGroupCollapsedBar");
				} else {
					$li.removeClass("sapSuiteUiCommonsTimelineItemGroupCollapsedBar");
				}
			});

			$items = $this.find('li[groupid="' + sGroupID + '"][nodeType!="GroupHeader"][nodeType!="GroupHeaderBar"]');

			return new Promise(function (resolve, reject) {
				if (that._noAnimation) {
					if (bExpand) {
						$items.show();
					} else {
						$items.hide();
					}
					resolve();
				} else {
					if (that._isVertical()) {
						$items[sMethod](ANIMATIONS_SPEED);
					} else {
						$items.animate({width: 'toggle'}, 350);
					}

					$items.promise().done(function () {
						resolve();
					});
				}
			});
		};


		/* =========================================================== */
		/* Keyboard handling */
		/* =========================================================== */
		Timeline.prototype._startItemNavigation = function (oEvent) {
			var oItemsInfo = this._getItemsForNavigation(),
				$content = this.$("content").get(0) || this.$("contentH").get(0);

			if (!this.oItemNavigation) {
				this.oItemNavigation = new TimelineNavigator($content, oItemsInfo.items, false, oItemsInfo.rows);
				this.oItemNavigation.setPageSize(10);
				this.oItemNavigation.attachEvent("AfterFocus", function (oEvent) {
					var oFocusedDomRef = this.oItemNavigation.getItemDomRefs()[oEvent.getParameter("index")],
						aFocusedItems = this._outputItem.filter(function (oItem) {
							return oItem.getFocusDomRef() === oFocusedDomRef;
						});
					if (aFocusedItems[0]) {
						this.fireEvent("select", {selectedItem: aFocusedItems[0]});
					}
				}, this);
				this.addDelegate(this.oItemNavigation);
			} else {
				this.oItemNavigation.updateReferences($content, oItemsInfo.items, oItemsInfo.rows);
			}
			if (oItemsInfo.columns) {
				this.oItemNavigation.setColumns(oItemsInfo.columns, false);
			}
		};

		Timeline.prototype._getItemsForNavigation = function () {
			var oItemsInfo = {},
				oShowMore,
				aTop,
				aBottom,
				aCurrentRow,
				iMaxRowSize;
			if (this._renderDblSided) {
				if (this._isVertical()) {
					oItemsInfo.items = this._outputItem;
					oItemsInfo.rows = [];
					aCurrentRow = [];
					oItemsInfo.items.forEach(function (oItem) {
						var $item = oItem.$(),
							bIsLeft = $item.hasClass("sapSuiteUiCommonsTimelineItemWrapperVLeft") || $item.hasClass("sapSuiteUiCommonsTimelineItemOdd");
						if (bIsLeft && aCurrentRow.length === 1) {
							aCurrentRow.push(null);
						} else if (!bIsLeft && aCurrentRow.length === 0) {
							aCurrentRow.push(null);
						}
						if (aCurrentRow.length > 1) {
							oItemsInfo.rows.push(aCurrentRow);
							aCurrentRow = [];
						}
						aCurrentRow.push(oItem);
					});
					if (aCurrentRow.length > 0) {
						oItemsInfo.rows.push(aCurrentRow);
					}
				} else {
					aTop = [];
					aBottom = [];
					this._outputItem.forEach(function (oItem) {
						if (oItem._placementLine === "top") {
							aTop.push(oItem);
						} else {
							while (aBottom.length + 1 < aTop.length) {
								aBottom.push(null);
							}
							aBottom.push(oItem);
						}
					});
					oItemsInfo.items = this._outputItem;
					oItemsInfo.rows = [aTop, aBottom];
				}
			} else {
				oItemsInfo.items = this._outputItem;
			}
			oItemsInfo.items = oItemsInfo.items.map(function (oItem) {
				return oItem.getFocusDomRef();
			});
			if (oItemsInfo.rows) {
				iMaxRowSize = 0;
				oItemsInfo.rows = oItemsInfo.rows.map(function (aRow) {
					if (aRow.length > iMaxRowSize) {
						iMaxRowSize = aRow.length;
					}
					return aRow.map(function (oItem) {
						return oItem === null ? null : oItem.getFocusDomRef();
					});
				});
				// Make sure all rows have same length.
				oItemsInfo.rows.forEach(function (aRow) {
					while (aRow.length < iMaxRowSize) {
						aRow.push(null);
					}
				});
			}
			if (this._showMore) {
				oShowMore = this._objects.getMoreButton().getFocusDomRef();
				oItemsInfo.items.push(oShowMore);
				if (oItemsInfo.rows) {
					if (this._isVertical()) {
						if (oItemsInfo.rows.length > 0) {
							oItemsInfo.rows.push(oItemsInfo.rows[0].map(function (oValue, i, aRow) {
								if (i === aRow.length - 1) {
									return oShowMore;
								} else {
									return null;
								}
							}));
						} else {
							oItemsInfo.rows.push([oShowMore]);
						}
					} else {
						oItemsInfo.rows.forEach(function (aRow, i, aArray) {
							if (i === aArray.length - 1) {
								aRow.push(oShowMore);
							} else {
								aRow.push(null);
							}
						});
					}
				}
			}
			return oItemsInfo;
		};

		/* =========================================================== */
		/* Setters & getters */
		/* =========================================================== */
		Timeline.prototype.setShowItemFilter = function (bShowItemFilter) {
			this.setProperty("showItemFilter", bShowItemFilter, true);
			if (this._objects.isObjectInitialized("FilterContent")) {
				this._setupFilterFirstPage(this._objects.getFilterContent());
			}
			this._objects.getFilterIcon().setVisible(bShowItemFilter || this.getShowTimeFilter());
		};

		Timeline.prototype.setShowTimeFilter = function (bShowTimeFilter) {
			this.setProperty("showTimeFilter", bShowTimeFilter, true);
			if (this._objects.isObjectInitialized("FilterContent")) {
				this._setupFilterFirstPage(this._objects.getFilterContent());
			}
			this._objects.getFilterIcon().setVisible(bShowTimeFilter || this.getShowItemFilter());
		};

		Timeline.prototype._getFilterTitle = function () {
			var sValue = this.getFilterTitle();
			if (!sValue) {
				sValue = resourceBundle.getText("TIMELINE_FILTER_ITEMS");
			}
			return sValue;
		};

		Timeline.prototype.getNoDataText = function () {
			var sText = this.getProperty("noDataText");
			if (!sText) {
				sText = resourceBundle.getText('TIMELINE_NO_DATA');
			}

			return sText;
		};

		Timeline.prototype.setSortOldestFirst = function (bOldestFirst) {
			this._sortOrder = bOldestFirst ? SortOrder.ASCENDING : SortOrder.DESCENDING;
			this._objects.getSortIcon().setIcon(this._sortOrder === SortOrder.ASCENDING ?
				"sap-icon://arrow-bottom" : "sap-icon://arrow-top");

			this.setProperty("sortOldestFirst", bOldestFirst);
		};

		Timeline.prototype.setGrowingThreshold = function (growingThreshold) {
			this.setProperty("growingThreshold", growingThreshold, true);
			this._iItemCount = growingThreshold;
		};

		Timeline.prototype.setShowHeaderBar = function (oShowHeaderBar) {
			this.setProperty("showHeaderBar", oShowHeaderBar, true);
			this._objects.getHeaderBar().setVisible(oShowHeaderBar);
		};

		Timeline.prototype.setSort = function (bSort) {
			this.setProperty("sort", bSort);
			this._objects.getSortIcon().setVisible(bSort && this.getShowSort());
		};

		Timeline.prototype.setAxisOrientation = function (bAxisOrientation) {
			this.setProperty("axisOrientation", bAxisOrientation);

			// for axis change in runtime --> scroller ID will change, so we have to recreate scroller
			if (this._oScroller) {
				this._oScroller.destroy();
				this._oScroller = null;
			}
		};

		Timeline.prototype.setEnableDoubleSided = function (sEnableDoubleSided) {
			this.setProperty("enableDoubleSided", sEnableDoubleSided);
			this._renderDblSided = sEnableDoubleSided;
		};

		/**
		 * Returns the keys of the currently applied filter criteria as an array of objects, containing
		 * filter criteria keys (<code>key</code>) and values (<code>text</code>).
		 * @returns {Array} List Applied filters
		 * @public
		 */
		Timeline.prototype.getCurrentFilter = function () {
			return this._currentFilterKeys.map(function (oItem) {
				return {
					key: oItem.key,
					text: oItem.text || oItem.key
				};
			});
		};

		Timeline.prototype.setShowFilterBar = function (flag) {
			this.setProperty("showFilterBar", flag, true);
			this.setShowHeaderBar(flag);
		};

		Timeline.prototype.setShowSearch = function (flag) {
			this.setProperty("showSearch", flag, true);
			this._objects.getSearchField().setVisible(!!flag);
		};

		Timeline.prototype.setShowSort = function (bFlag) {
			this.setProperty("showSort", bFlag, true);
			this._objects.getSortIcon().setVisible(this.getSort() && bFlag);
		};

		/**
		 * Sets a custom message that is displayed below the timeline's header.
		 * @param {string} sMsg Message text.
		 * @public
		 */
		Timeline.prototype.setCustomMessage = function (sMsg) {
			this._customMessage = sMsg;
			this._showCustomMessage();
		};

		Timeline.prototype.getHeaderBar = function () {
			return this._objects.getHeaderBar();
		};

		Timeline.prototype.getMessageStrip = function () {
			return this._objects.getMessageStrip();
		};

		Timeline.prototype.setContent = function (oContents) {
			this.removeAllContent();
			var currentGroup = 0;
			for (var i = 0; i < oContents.length; i++) {
				var oItem = oContents[i];
				if (oItem instanceof TimelineItem) {
					if (this._isGrouped()) {
						var oGroup = this._formatGroupBy(oItem.getDateTime(), this.getGroupByType());
						if (oGroup.key !== currentGroup.key) {
							this._createGroupHeader(oGroup);
							currentGroup = oGroup;
						}
					}
					this.addContent(oItem);
				}
			}

			// reset itemcount and set it again in onbeforeloading
			this._iItemCount = 0;
		};

		Timeline.prototype.setData = function (oData) {
			var INTERNAL_MODEL_NAME = "sapsuiteuicommonsTimelineInternalModel",
				oInternalModel = new JSONModel(),
				sPath, oBindOptions,
				fnDefaultItemsFactory = function (sId, oContext) {
					var oTimelineItem = new TimelineItem({
						dateTime: oContext.getProperty("dateTime"),
						icon: oContext.getProperty("icon"),
						userName: oContext.getProperty("userName"),
						title: oContext.getProperty("title"),
						text: oContext.getProperty("text"),
						filterValue: oContext.getProperty("filterValue")
					});

					if (oContext.getProperty("content")) {
						oTimelineItem.setEmbeddedControl(oContext.getProperty("content"));
					}
					return oTimelineItem;
				},
				fnBuildPath = function (sPath, sModelName) {
					var sCompletePath = sPath;
					if (sModelName) {
						sCompletePath = sModelName + ">" + sPath;
					}
					return sCompletePath;
				};

			if (typeof oData === "undefined") {
				return this;
			}

			sPath = fnBuildPath("/", INTERNAL_MODEL_NAME);
			oInternalModel.setData(oData);

			this.setModel(oInternalModel, INTERNAL_MODEL_NAME);
			this.setProperty("data", oData, true);

			oBindOptions = {
				path: sPath,
				sorter: this._getDefaultSorter('dateTime', this.getSortOldestFirst()),
				factory: jQuery.proxy(fnDefaultItemsFactory, this)
			};

			if (this._isGrouped()) {
				oBindOptions.groupHeaderFactory = jQuery.proxy(this._getGroupHeader, this);
			}

			this.bindAggregation("content", oBindOptions);
			return this;
		};

		Timeline.prototype.setCustomFilter = function (oFilter) {
			if (oFilter) {
				this._customFilter = true;
				this.setAggregation("customFilter", oFilter, true);
			} else {
				this._customFilter = false;
			}
		};

		Timeline.prototype.getSuspendSocialFeature = function () {
			return this._suspenseSocial;
		};

		Timeline.prototype.setSuspendSocialFeature = function (bSuspense) {
			this._suspenseSocial = bSuspense;
			if (!this.getEnableSocial()) {
				return;
			}

			var oItems = this.getContent();
			for (var i = 0; i < oItems.length; i++) {
				oItems[i]._objects.getReplyLink().setEnabled(!bSuspense);
			}

			this.invalidate();
		};

		Timeline.prototype.updateFilterList = function () {
			this.updateAggregation("filterList");
			this._setFilterList();
		};

		Timeline.prototype.setGroupByType = function (sType) {
			var oBindingInfo = this.getBindingInfo("content");
			this.setProperty("groupByType", sType);

			if (oBindingInfo) {
				this._bindGroupingAndSorting(oBindingInfo);
				this.updateAggregation("content");
			}
		};

		/* =========================================================== */
		/* Backward compatibility */
		/* =========================================================== */
		Timeline.prototype.getGroup = function () {
			return this.getGroupByType() !== "None";
		};

		Timeline.prototype.setGroup = function (bGroup) {
			if (bGroup && this.getGroupByType() === TimelineGroupType.None) {
				this.setGroupByType(TimelineGroupType.Year);
			}

			if (!bGroup) {
				this.setGroupByType(TimelineGroupType.None);
			}
		};

		Timeline.prototype.setGrowing = function (bGrowing) {
			if (!bGrowing) {
				this.setGrowingThreshold(0);
			}
		};

		Timeline.prototype.getGrowing = function (bGrowing) {
			return this.getGrowingThreshold() !== 0;
		};

		Timeline.prototype.setEnableBackendFilter = function (sBackEndFilter) {
			this.setProperty("enableModelFilter", sBackEndFilter);
		};

		Timeline.prototype.getEnableBackendFilter = function () {
			return this.getProperty("enableModelFilter");
		};

		/* =========================================================== */
		/* Helper methods */
		/* =========================================================== */
		Timeline.prototype._isGrouped = function () {
			return (this.getGroupByType() !== TimelineGroupType.None || this._fnCustomGroupBy) &&
				(this.getGroupBy() !== "");
		};

		Timeline.prototype._lazyLoading = function () {
			return this.getEnableScroll() && this.getLazyLoading();
		};

		Timeline.prototype._loadAllData = function (useBinding) {
			// we load all possible data when use have modelfilter OFF -> filtering above only client data
			return !this._useModelFilter(useBinding);
		};

		Timeline.prototype._isVertical = function () {
			return TimelineAxisOrientation.Vertical === this.getAxisOrientation();
		};

		Timeline.prototype._displayShowMore = function () {
			return this.getForceGrowing() || (this.getGrowingThreshold() !== 0 && !this._lazyLoading());
		};

		Timeline.prototype._useGrowing = function () {
			return this.getForceGrowing() || this.getGrowingThreshold() !== 0 || this._lazyLoading();
		};

		Timeline.prototype._isMaxed = function () {
			return this._iItemCount >= this._getMaxItemsCount();
		};

		Timeline.prototype._useModelFilter = function (useBinding) {
			return this.getEnableModelFilter() && (useBinding || this._useTemplateBinding());
		};

		Timeline.prototype._scrollingFadeout = function (useBinding) {
			return this.getScrollingFadeout() !== ScrollingFadeout.None && this.getEnableScroll();
		};

		Timeline.prototype._setBusy = function (bBusy) {
			if (this.getEnableBusyIndicator()) {
				this.setBusy(bBusy);
			}
		};

		Timeline.prototype._fireSelectionChange = function (oParams) {
			return this.fireEvent("filterSelectionChange", oParams, true);
		};

		Timeline.prototype._isLeftAlignment = function () {
			return this.getAlignment() === TimelineAlignment.Left || this.getAlignment() === TimelineAlignment.Top;
		};

		Timeline.prototype._useBinding = function (bTemplateBinding) {
			return this.getBindingInfo("content") != null;
		};

		Timeline.prototype._useTemplateBinding = function () {
			var oContent = this.getBindingInfo("content");
			return oContent && oContent.template != null;
		};

		Timeline.prototype._useAutomaticHeight = function () {
			return this.getTextHeight().toLowerCase() === "automatic" && !this._isVertical();
		};

		/**
		 * Returns number of items which are to be rendered.
		 * @returns {Number} The number of items
		 * @private
		 */
		Timeline.prototype._getItemsCount = function () {
			return this._outputItem ? this._outputItem.length : 0;
		};

		TimelineRenderManager.extendTimeline(Timeline);

		return Timeline;
	}
);

}; // end of sap/suite/ui/commons/Timeline.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineItemRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.TimelineItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/TimelineItemRenderer",[
	"jquery.sap.global",
	"./library",
	"sap/suite/ui/commons/util/HtmlElement",
	"sap/ui/core/format/DateFormat",
	"sap/ui/core/Icon"
], function (jQuery, library, HtmlElement, DateFormat, Icon) {
	"use strict";

	var TimelineAlignment = library.TimelineAlignment;

	/**
	 * Renderer for Timeline Item.
	 * @namespace
	 */
	var TimelineItemRenderer = {};

	var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons"),
		MS_PER_DAY = 24 * 60 * 60 * 1000;

	/**
	 * Render Timeline item into given RenderManager.
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @public
	 */
	TimelineItemRenderer.render = function (oRm, oTimelineItem) {
		this._getTimelineItemElement(oTimelineItem).getRenderer().render(oRm);
	};

	/**
	 * Return item's element
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @private
	 * @returns {sap.suite.ui.commons.util.HtmlElement} The new HtmlElement
	 */
	TimelineItemRenderer._getTimelineItemElement = function (oTimelineItem) {
		if (oTimelineItem._orientation === "V") {
			return this._getVerticalTimelineItemElement(oTimelineItem);
		} else {
			return this._getHorizontalTimelineItemElement(oTimelineItem);
		}
	};

	/**
	 * Format date time to string representation
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @param {object} [mArguments] Date time parser arguments
	 * @param {object} [mArguments.resBundle] Resource bunde
	 * @param {object} [mArguments.dateFormat] Date format
	 * @param {object} [mArguments.timeFormat] Time format
	 * @returns {string} date time string representation with appended text
	 * @private
	 */
	TimelineItemRenderer._getFormatedDateTime = function (oTimelineItem, mArguments) {
		mArguments = mArguments || {};

		var oResourceBundle = mArguments.resBundle || oResBundle,
			oDateFormat = mArguments.dateFormat || DateFormat.getDateInstance({style: "short"}),
			oTimeFormat = mArguments.timeFormat || DateFormat.getTimeInstance({style: "short"}),
			oDateTime = oTimelineItem.getDateTimeWithoutStringParse(),
			oActualDate, oToday, iDaysDiff, sConvertedDate;

		if (!(oDateTime instanceof Date)) {
			return oDateTime;
		}
		oActualDate = Date.UTC(oDateTime.getFullYear(), oDateTime.getMonth(), oDateTime.getDate());
		oToday = new Date();
		oToday = Date.UTC(oToday.getFullYear(), oToday.getMonth(), oToday.getDate());
		iDaysDiff = Math.floor((oToday - oActualDate) / MS_PER_DAY);

		switch (iDaysDiff) {
			case 0:
				sConvertedDate = oResourceBundle.getText("TIMELINE_TODAY");
				break;
			case 1:
				sConvertedDate = oResourceBundle.getText("TIMELINE_YESTERDAY");
				break;
			default:
				sConvertedDate = oDateFormat.format(oDateTime);
		}
		return sConvertedDate + " " + oResourceBundle.getText("TIMELINE_AT") + " " + oTimeFormat.format(oDateTime);
	};

	/**
	 * Return element for horizontal timeline item
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @returns {object} timeline item element
	 * @private
	 */
	TimelineItemRenderer._getHorizontalTimelineItemElement = function (oTimelineItem) {
		var bIsTopLine = (oTimelineItem._placementLine === "top"),
			sTimelineItemClass = bIsTopLine ? "sapSuiteUiCommonsTimelineItemHTop" : "sapSuiteUiCommonsTimelineItemHBottom",
			bIsGroupHeader = oTimelineItem.getText() === "GroupHeader",
			sGroupId = oTimelineItem._groupID,
			sAttribute, oTimeline;

		if (bIsGroupHeader) {
			return this._getGroupHeaderElement(oTimelineItem);
		}

		// controls
		var eTimelineItem = new HtmlElement("li"),
			eChild = new HtmlElement("div"),
			eSpacer = new HtmlElement("div"),
			eBubble = new HtmlElement("div"),
			eOutline = new HtmlElement("div"),
			eBox = new HtmlElement("div"),
			eArrow = new HtmlElement("div"),
			eItemSheel = this._getTimelineItemShell(oTimelineItem);

		if (sGroupId) {
			eTimelineItem.setAttribute("groupid", oTimelineItem._groupID);
		}

		if (oTimelineItem._isFirstGroupEvenItem) {
			eTimelineItem.setAttribute("firstgroupevenitem", oTimelineItem._isFirstGroupEvenItem);
		}

		eTimelineItem.addControlData(oTimelineItem);
		eTimelineItem.addClass("sapSuiteUiCommonsTimelineItemLiWrapperV");

		eTimelineItem.addClass(jQuery.sap.encodeHTML(sTimelineItemClass));

		eChild.addClass("sapSuiteUiCommonsTimelineItemWrapperH sapSuiteUiCommonsTimelineItemBaseLength");
		eTimelineItem.addChild(eChild);

		eSpacer.addClass("sapSuiteUiCommonsTimelineItemBubbleSpacer");
		eChild.addChild(eSpacer);

		eBubble.addClass("sapSuiteUiCommonsTimelineItemBubble");
		eSpacer.addChild(eBubble);

		eOutline.addClass("sapSuiteUiCommonsTimelineItemOutline");
		eOutline.setId(oTimelineItem.getId() + "-outline");
		eOutline.setAttribute("tabindex", "0");
		eOutline.setAttribute("data-sap-ui-fastnavgroup", true);
		this._addAccessibilityTags(eOutline, oTimelineItem);

		eBox.addClass("sapSuiteUiCommonsTimelineItemBox");
		eOutline.addChild(eBox);

		eArrow.addClass("sapSuiteUiCommonsTimelineItemArrow");

		if (bIsTopLine) {
			eBubble.addChild(eOutline);
			eBubble.addChild(eArrow);
		} else {
			eBubble.addChild(eArrow);
			eBubble.addChild(eOutline);
		}

		// move left first even item when grouping is disabled (for grouping even items positions are calculated by JS)
		if (!oTimelineItem._callParentFn("_isGrouped") && oTimelineItem._callParentFn("getEnableDoubleSided") && oTimelineItem._index === 1) {
			oTimeline = oTimelineItem.getParent();
			sAttribute = "margin-left";

			if (oTimeline && oTimeline._bRtlMode) {
				sAttribute = "margin-right";
			}
			eTimelineItem.addStyle(jQuery.sap.encodeCSS(sAttribute), "100px");
		}

		eBox.addChild(eItemSheel);

		if (oTimelineItem._isGroupCollapsed()) {
			eTimelineItem.addStyle("display", "none");
		}

		return eTimelineItem;
	};

	/**
	 * Return group timeline item
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @returns {object} Group item
	 * @private
	 */
	TimelineItemRenderer._getGroupHeaderElement = function (oTimelineItem) {
		var eTimelineItem = new HtmlElement("li"),
			eDirectChild = new HtmlElement("div"),
			eChild = new HtmlElement("div"),
			eWrapper = new HtmlElement("div"),
			eBarWrapper = new HtmlElement("div"),

			eArrow = new HtmlElement("div"),
			eText = new HtmlElement("span"),
			eLine = new HtmlElement("div"),
			eExpanIconWrapper = new HtmlElement("div"),
			eLineWrapper = new HtmlElement("div"),
			eArrowParent = oTimelineItem._orientation === "V" ? eChild : eWrapper,
			eIconBarWrapper = new HtmlElement("div"),
			eGroupIconWrapper = new HtmlElement("div"),
			eBar = new HtmlElement("div");

		var bIsCollapsed = oTimelineItem._isGroupCollapsed(),
			bShowIcons = oTimelineItem._callParentFn("getShowIcons"),
			sIcon;

		if (oTimelineItem._groupID) {
			eTimelineItem.setAttribute("groupid", oTimelineItem._groupID);
		}

		if (oTimelineItem._isLastGroup) {
			eTimelineItem.addClass("sapSuiteUiCommonsTimelineLastItem");
		}

		eTimelineItem.addControlData(oTimelineItem);
		eTimelineItem.addClass("sapSuiteUiCommonsTimelineGroupHeader");
		this._addAccessibilityTags(eTimelineItem, oTimelineItem, true);

		eTimelineItem.addChild(eDirectChild);
		eDirectChild.addChild(eChild);
		eDirectChild.addClass("sapSuiteUiCommonsTimelineGroupHeaderDirectChild");
		eChild.addClass("sapSuiteUiCommonsTimelineGroupHeaderMainWrapper");
		eChild.setId(oTimelineItem.getId() + "-outline");
		eChild.setAttribute("tabindex", "0");
		eChild.setAttribute("data-sap-ui-fastnavgroup", true);

		eChild.addChild(eWrapper);
		eTimelineItem.addChild(eLineWrapper);

		eTimelineItem.setAttribute("nodeType", "GroupHeader");

		eBarWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderSpanWrapper");

		if (oTimelineItem._orientation === "V") {
			eTimelineItem.addClass(oTimelineItem._position === TimelineAlignment.Left ? "sapSuiteUiCommonsTimelineItemWrapperVLeft" : "sapSuiteUiCommonsTimelineItemWrapperVRight");
		}

		eWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderWrapper");
		eWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderPointer");

		eArrowParent.addChild(eArrow);

		eWrapper.addChild(eExpanIconWrapper);
		eWrapper.addChild(eBarWrapper);

		eTimelineItem.addClass(bIsCollapsed ? "sapSuiteUiCommonsTimelineGroupCollapsed" : "sapSuiteUiCommonsTimelineGroupExpanded");

		eExpanIconWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderIconWrapper");
		sIcon = oTimelineItem._getCorrectGroupIcon();

		// press is handled by click to whole item
		oTimelineItem._objects.register("groupCollapseIcon", function () {
			var oIcon = new Icon(oTimelineItem.getId() + "-groupCollapseIcon", {
				src: sIcon,
				decorative: true
			});

			oIcon.addStyleClass("sapSuiteUiCommonsTimelineGroupHeaderPointer");
			oIcon.setParent(oTimelineItem);
			return oIcon;
		});

		eExpanIconWrapper.addChild(oTimelineItem._objects.getGroupCollapseIcon());

		eArrow.addClass("sapSuiteUiCommonsTimelineItemArrow");

		eLineWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderLineWrapper");

		eLine.addClass("sapSuiteUiCommonsTimelineGroupHeaderLine");
		eLineWrapper.addChild(eLine);

		eBarWrapper.addChild(eText);
		eText.addClass("sapSuiteUiCommonsTimelineGroupHeaderSpan");
		eText.addChildEscaped(" " + oTimelineItem.getTitle());

		if (oTimelineItem._orientation === "V") {
			eTimelineItem.addChild(eIconBarWrapper);
			eGroupIconWrapper.addChild(oTimelineItem._getLineIcon());
			eIconBarWrapper.addChild(eGroupIconWrapper);
			eGroupIconWrapper.addClass("sapSuiteUiCommonsTimelineItemBarIconWrapperV");
			eIconBarWrapper.addClass("sapSuiteUiCommonsTimelineGroupHeaderBarWrapper");

			if (!oTimelineItem._isGroupCollapsed()) {
				eIconBarWrapper.addStyle("display", "none");
			}

			eBar.addClass("sapSuiteUiCommonsTimelineItemBarV");
			if (!bShowIcons) {
				eBar.addClass("sapSuiteUiCommonsTimelineItemBarNoIcon");
			}

			eIconBarWrapper.addChild(eBar);

			if (oTimelineItem._additionalBarClass) {
				eBar.addClass(jQuery.sap.encodeHTML(oTimelineItem._additionalBarClass));
			}
		}

		return eTimelineItem;
	};

	/**
	 * Creates vertical timeline item element
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @returns {object} A new TimelineItem HtmlElement for vertical orientation
	 * @private
	 */
	TimelineItemRenderer._getVerticalTimelineItemElement = function (oTimelineItem) {
		var eTimelineItem = new HtmlElement("li"),
			eChild = new HtmlElement("div"),
			eBarWrapper = new HtmlElement("div"),
			eBarIconWrapper = new HtmlElement("div"),
			eBubble = new HtmlElement("div"),
			eBar = new HtmlElement("div"),
			eBox = new HtmlElement("div"),
			eOutline = new HtmlElement("div"),
			eArrow = new HtmlElement("div"),
			eNoIcon = new HtmlElement("div"),
			eNoIconWrapper = new HtmlElement("div"),
			eItemSheel;

		var bShowIcons = oTimelineItem._callParentFn("getShowIcons"),
			sGroupId = oTimelineItem._groupID,
			bIsGroupHeader = oTimelineItem.getText() === "GroupHeader",
			sStatusCltrClass = oTimelineItem._getStatusColorClass();

		if (bIsGroupHeader) {
			return this._getGroupHeaderElement(oTimelineItem);
		}

		if (sGroupId) {
			eTimelineItem.setAttribute("groupID", sGroupId);
		}
		eTimelineItem.addControlData(oTimelineItem);
		eTimelineItem.addClass("sapSuiteUiCommonsTimelineItem");
		//eTimelineItem.setAttribute("role", "presentation");
		eTimelineItem.setAttribute("role", "presentation");

		if (oTimelineItem._isLast) {
			eTimelineItem.addClass("sapSuiteUiCommonsTimelineLastItem");
		}

		// eTimelineItem.setAttribute("nodeType", "GroupItem");

		eChild.addClass(bIsGroupHeader ? "sapSuiteUiCommonsTimelineItemWrapperGrp" : "sapSuiteUiCommonsTimelineItemWrapperV");
		eTimelineItem.addChild(eChild);

		eChild.addClass(oTimelineItem._position === TimelineAlignment.Left ? "sapSuiteUiCommonsTimelineItemWrapperVLeft" : "sapSuiteUiCommonsTimelineItemWrapperVRight");
		eChild.addChild(eBubble);
		eChild.addChild(eBarWrapper);

		eBarWrapper.addClass("sapSuiteUiCommonsTimelineItemBarWrapperV");
		eBarIconWrapper.addClass("sapSuiteUiCommonsTimelineItemBarIconWrapperV");

		if (sStatusCltrClass) {
			eBarIconWrapper.addClass(jQuery.sap.encodeHTML(sStatusCltrClass));
		} else {
			eBarIconWrapper.addClass("sapSuiteUiCommonsTimelineNoStatus");
		}

		if (bShowIcons) {
			eBarWrapper.addChild(eBarIconWrapper);
			eBarIconWrapper.addChild(oTimelineItem._getLineIcon('', sGroupId));
		} else {
			eNoIconWrapper.addChild(eNoIcon);
			eNoIconWrapper.addClass("sapSuiteUiCommonsTimelineItemNoIconWrapper");
			eNoIcon.addClass("sapSuiteUiCommonsTimelineItemNoIcon");
			eBarWrapper.addChild(eNoIconWrapper);
			if (sStatusCltrClass) {
				eNoIcon.addClass(jQuery.sap.encodeHTML(sStatusCltrClass));
			}

			eBar.addClass("sapSuiteUiCommonsTimelineItemBarNoIcon");
		}

		eBar.addClass("sapSuiteUiCommonsTimelineItemBarV");
		eBarWrapper.addChild(eBar);

		if (oTimelineItem._additionalBarClass) {
			eBar.addClass(jQuery.sap.encodeHTML(oTimelineItem._additionalBarClass));
		}

		eBubble.addClass("sapSuiteUiCommonsTimelineItemBubble");

		eArrow.addClass("sapSuiteUiCommonsTimelineItemArrow");
		eBubble.addChild(eArrow);

		eBubble.addChild(eOutline);
		eOutline.addClass("sapSuiteUiCommonsTimelineItemOutline");
		eOutline.setId(oTimelineItem.getId() + "-outline");
		eOutline.setAttribute("tabindex", "0");
		eOutline.setAttribute("data-sap-ui-fastnavgroup", true);
		this._addAccessibilityTags(eOutline, oTimelineItem);

		eBox.addClass("sapSuiteUiCommonsTimelineItemBox");
		eOutline.addChild(eBox);

		eItemSheel = this._getTimelineItemShell(oTimelineItem);
		eBox.addChild(eItemSheel);

		if (oTimelineItem._isGroupCollapsed()) {
			eTimelineItem.addStyle("display", "none");
		}

		return eTimelineItem;
	};

	/**
	 * Return shell for timeline item
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @returns {object} Shell eleement
	 * @private
	 */
	TimelineItemRenderer._getTimelineItemShell = function (oTimelineItem) {
		var eShellItem = new HtmlElement("div"),
			eHeaderWrapper = new HtmlElement("div"),
			eHeader = new HtmlElement("div"),
			eUserName = new HtmlElement("span"),
			oUserPicture, oUserNameLink,
			eShellHeader = new HtmlElement("span"),
			eDateTime = new HtmlElement("div"),
			eBody = new HtmlElement("div"),
			//shell
			eTextWrapper = new HtmlElement("div"),
			eRealText = new HtmlElement("span"),
			eShowMoreWrapper = new HtmlElement("div"),

			eThreeDots = new HtmlElement("span"),
			eButtons = new HtmlElement("div"),
			bIsExpendable;

		var oEmbeddedControl = oTimelineItem.getEmbeddedControl();

		eShellItem.setId(oTimelineItem.getId() + "-shell");
		eShellItem.addClass("sapSuiteUiCommonsTimelineItemShell");
		eShellItem.addChild(oTimelineItem._objects.getInfoBar());
		eShellItem.addChild(eHeaderWrapper);

		eHeaderWrapper.addClass("sapSuiteUiCommonsTimelineItemHeaderWrapper");

		oUserPicture = oTimelineItem._getUserPictureControl();
		if (oUserPicture) {
			oUserPicture.addStyleClass("sapSuiteUiCommonsTimelineItemUserPicture");
			eHeaderWrapper.addChild(oUserPicture);
		}

		eHeader.setId(oTimelineItem.getId() + "-header");
		eHeader.addClass("sapSuiteUiCommonsTimelineItemHeader");
		eHeader.addClass("sapSuiteUiCommonsTimelineItemTextLineClamp");

		eUserName.setId(oTimelineItem.getId() + "-username");
		eUserName.addClass("sapSuiteUiCommonsTimelineItemShellUser");
		eHeader.addChild(eUserName);
		oUserNameLink = oTimelineItem._getUserNameLinkControl();
		if (oUserNameLink) {
			eUserName.addChild(oUserNameLink);
		} else {
			eUserName.addChildEscaped(oTimelineItem.getUserName());
			eUserName.addClass("sapUiSelectable");
		}

		eHeaderWrapper.addChild(eHeader);

		eShellHeader.addClass("sapSuiteUiCommonsTimelineItemShellHdr");
		eShellHeader.addClass("sapUiSelectable");
		eShellHeader.addChildEscaped(" " + oTimelineItem.getTitle());
		eHeader.addChild(eShellHeader);

		eDateTime.addClass("sapSuiteUiCommonsTimelineItemShellDateTime");
		eDateTime.addClass("sapUiSelectable");
		eDateTime.addChildEscaped(this._getFormatedDateTime(oTimelineItem));
		eHeader.addChild(eDateTime);

		eBody.addClass("sapSuiteUiCommonsTimelineItemShellBody");
		eShellItem.addChild(eBody);

		if (oEmbeddedControl !== null) {
			eBody.addChild(oEmbeddedControl);
		} else if (oTimelineItem.getText()) {

			eTextWrapper.addChild(eRealText);
			eTextWrapper.addClass("sapSuiteUiCommonsTimelineItemTextWrapper");
			eRealText.setId(oTimelineItem.getId() + "-realtext");
			eRealText.addClass("sapUiSelectable");
			eBody.addChild(eTextWrapper);

			bIsExpendable = oTimelineItem._checkTextIsExpandable();

			// either limit text by max chars allowed for item
			// or let the max height be calculated by JS (if text height)
			if (bIsExpendable) {
				eThreeDots.setId(oTimelineItem.getId() + "-threeDots");
				eThreeDots.addClass("sapMFeedListItemTextString");
				eThreeDots.addChildEscaped(" ");
				eTextWrapper.addChild(eThreeDots);
				eRealText.addChildEscaped(oTimelineItem._getCollapsedText(), true);
				eThreeDots.addChildEscaped("... ");
				eTextWrapper.setAttribute("expandable", true);
			} else {
				eRealText.addChildEscaped(oTimelineItem.getText(), true);
				eShowMoreWrapper.addStyle("display", "none");
			}

			eBody.addChild(eShowMoreWrapper);
			eShowMoreWrapper.addClass("sapSuiteUiCommonsTimelineItemShowMore");
			eShowMoreWrapper.addChild(oTimelineItem._getButtonExpandCollapse());
		}

		if (oTimelineItem.getParent() && oTimelineItem.getParent()._aFilterList && (oTimelineItem._callParentFn("getEnableSocial") || oTimelineItem.getCustomAction().length > 0)) {
			eButtons.addClass("sapSuiteUiCommonsTimelineItemShellBottom");
			eButtons.addChild(oTimelineItem._objects.getSocialBar());
			eShellItem.addChild(eButtons);
		}

		return eShellItem;
	};

	/**
	 * Adds accessibility tags and elements for TimelineItem.
	 * @param {sap.suite.ui.commons.util.HtmlElement} eTimelineItem HTMLElement representing TimelineItem.
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @param {boolean} bIsGroupHeader Whether or not the item is a group header
	 * @private
	 */
	TimelineItemRenderer._addAccessibilityTags = function (eTimelineItem, oTimelineItem, bIsGroupHeader) {
		var sGroupHeader;
		eTimelineItem.setAttribute("role", "option");
		if (typeof oTimelineItem._index === "number") {
			eTimelineItem.setAttribute("aria-posinset", oTimelineItem._index + 1);
			eTimelineItem.setAttribute("aria-setsize", oTimelineItem._callParentFn("_getItemsCount"));
		}
		eTimelineItem.setAttribute("aria-live", "polite");
		if (bIsGroupHeader) {
			eTimelineItem.setAttribute("aria-expanded", !oTimelineItem._isGroupCollapsed());
			sGroupHeader = oResBundle.getText("TIMELINE_ACCESSIBILITY_GROUP_HEADER") + ": " + oTimelineItem.getTitle();
			eTimelineItem.setAttribute("aria-label", sGroupHeader);
		}
	};

	return TimelineItemRenderer;
}, true);

}; // end of sap/suite/ui/commons/TimelineItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.TimelineRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.TimelineRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/TimelineRenderer",[
	"jquery.sap.global",
	"./library",
	"sap/suite/ui/commons/util/HtmlElement",
	"sap/ui/core/Icon",
	"sap/m/Button"
], function (jQuery, library, HtmlElement, Icon, Button) {
	"use strict";

	var TimelineAxisOrientation = library.TimelineAxisOrientation,
		ScrollingFadeout = library.TimelineScrollingFadeout;

	/**
	 * Timeline renderer.
	 * @namespace
	 */
	var TimelineRenderer = {},
		resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

	/**
	 * Render timeline into given RenderManager.
	 * @param {sap.ui.core.RenderManager} oRm RenderManager
	 * @param {sap.ui.core.Control} oTimeline Timeline control
	 * @public
	 */
	TimelineRenderer.render = function (oRm, oTimeline) {
		var model = this._getHtmlModel(oTimeline);
		model.getRenderer().render(oRm);
	};

	/**
	 * Converts timeline to it's HTML representation.
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} The HtmlElement corresponding to the Timeline's orientation
	 * @private
	 */
	TimelineRenderer._getHtmlModel = function (oTimeline) {
		if (oTimeline.getAxisOrientation() === TimelineAxisOrientation.Horizontal) {
			return this._getHorizontalTimelineElement(oTimeline);
		} else {
			return this._getVerticalTimelineElement(oTimeline);
		}
	};

	/**
	 * Return scrolling icon wrapper for scrollers (ScrollingFadeout='AreaWithButtons')
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The item to be rendered
	 * @param {string} sId ID for icon
	 * @param {string} sDirection Direction of icon
	 * @returns {object} element with icon wrapper
	 * @private
	 */
	TimelineRenderer._getScrollerIcon = function (oTimelineItem, sId, sDirection) {
		var eWrapper = new HtmlElement("div"),
			sName = "scrollerIcon" + sDirection,
			sGetter = "getScrollerIcon" + sDirection;

		eWrapper.addClass(jQuery.sap.encodeHTML("sapSuiteUiCommonsTimelineScrollerIconWrapper sapSuiteUiCommonsTimelineScrollerIconWrapper" + sDirection));

		oTimelineItem._objects.register(sName, function () {
			// we skip id for purpose cause we want this control never keep focus when rendered
			// this causes wrong scrolling after loading more items
			return new Icon({
				src: "sap-icon://step"
			});
		});

		eWrapper.addChild(oTimelineItem._objects[sGetter]());
		return eWrapper;
	};

	/**
	 * Set width and height for timeline base on its settings
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @param {sap.suite.ui.commons.util.HtmlElement} eControl Timeline element
	 * @private
	 */
	TimelineRenderer._setWidthAndHeight = function (oTimeline, eControl) {
		var sHeight = oTimeline.getHeight(),
			sWidth = oTimeline.getWidth();
		if (sHeight && !oTimeline._isVertical()) {
			eControl.addStyle("height", sHeight);
		}

		// for horizontal timeline without scrollbar ignore width parameter - it makes no sense
		// if we put 100% timeline won't have proper content's width
		// (even tho browser would be probably fine with this, as TL direct child (content) has proper width
		// this is cleaner solution)
		if (sWidth && (oTimeline._isVertical() || oTimeline.getEnableScroll())) {
			eControl.addStyle("width", sWidth);
		}
	};

	/**
	 * Returns horizontal timeline element representation
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} returns Timeline element for horizontal orientation
	 * @private
	 */
	TimelineRenderer._getHorizontalTimelineElement = function (oTimeline) {
		var bIsDoubleSided = oTimeline.getEnableDoubleSided(),
			bIsTop = oTimeline._isLeftAlignment(),
			aContent = oTimeline._outputItem,
			// count of items for each group (if deleted when group header is reached)
			iGroupItemCount = 0,
			bIsFirstGroupEvenItem = true,
			oItem, sPlacementLine, bIsEven, bIsGroupHeader, oNextItem, cParent,
			bIsMaxed = oTimeline._isMaxed(),
			bLastGroup,
			fnCreateUL = function() {
				var eUl = new HtmlElement("ul");
				eUl.setAttribute("role", "presentation");
				return eUl;
			};

		// controls
		var eControl = new HtmlElement("div"),
			eContent = new HtmlElement("div"),
			eScroll = new HtmlElement("div"),
			eScrollContainer = new HtmlElement("div"),
			eTopLine = new HtmlElement("div"),
			eUlTop = fnCreateUL(),
			eMiddleLine = new HtmlElement("div"),
			eUlMid = fnCreateUL(),
			eBottomLine = new HtmlElement("div"),
			eUlBot = fnCreateUL(),
			eLeftScroller = new HtmlElement("div"),
			eRightScroller = new HtmlElement("div");

		eControl.addControlData(oTimeline);
		eControl.addClass("sapSuiteUiCommonsTimelineH");

		if (!oTimeline.getEnableScroll()) {
			eControl.addClass("sapSuiteUiCommonsTimelineNoScroll");
		}

		if (oTimeline._useAutomaticHeight()) {
			eControl.addClass("sapSuiteUiCommonsTimelineAutomaticLineHeight");
		}

		this._addAccessibilityTags(eControl, oTimeline);
		this._setWidthAndHeight(oTimeline, eControl);
		eControl.setAttribute("tabindex", "0");

		if (bIsDoubleSided) {
			eControl.addClass("sapSuiteUiCommonsTimelineDblSidedH");
		} else {
			eControl.addClass(bIsTop ? "sapSuiteUiCommonsTimelineRight" : "sapSuiteUiCommonsTimelineLeft");
		}

		if (oTimeline._isGrouped()) {
			eControl.addClass("sapSuiteUiCommonsTimelineGrouped");
		}

		eControl.addChild(oTimeline._objects.getHeaderBar());
		oTimeline._setMessageBars(eControl);

		eContent.setId(oTimeline.getId() + "-contentH");
		eContent.addClass("sapSuiteUiCommonsTimelineContentsH");
		eControl.addChild(eContent);

		eScroll.setId(oTimeline.getId() + "-scrollH");
		eScroll.addClass("sapSuiteUiCommonsTimelineScrollH");
		eContent.addChild(eScroll);

		eTopLine.addClass("sapSuiteUiCommonsTimelineHorizontalTopLine");
		eMiddleLine.addClass("sapSuiteUiCommonsTimelineHorizontalMiddleLine");
		eMiddleLine.addChild(eUlMid);
		eBottomLine.addClass("sapSuiteUiCommonsTimelineHorizontalBottomLine");

		if (bIsDoubleSided || bIsTop) {
			eTopLine.addChild(eUlTop);
		}
		if (bIsDoubleSided || !bIsTop) {
			eBottomLine.addChild(eUlBot);
		}

		eUlTop.addClass("sapSuiteUiCommonsTimelineHorizontalScrollingLine");
		eUlBot.addClass("sapSuiteUiCommonsTimelineHorizontalScrollingLine");
		eUlMid.addClass("sapSuiteUiCommonsTimelineHorizontalScrollingLine");

		if (aContent.length > 0) {
			if (oTimeline._scrollingFadeout()) {
				eControl.addChild(eLeftScroller);
				eControl.addChild(eRightScroller);

				eLeftScroller.addClass("sapSuiteUiCommonsTimelineHorizontalLeftScroller sapSuiteUiCommonsTimelineHorizontalScroller");
				eRightScroller.addClass("sapSuiteUiCommonsTimelineHorizontalRightScroller sapSuiteUiCommonsTimelineHorizontalScroller");

				if (oTimeline.getScrollingFadeout() === ScrollingFadeout.AreaWithButtons) {
					eLeftScroller.addChild(this._getScrollerIcon(oTimeline, "_scollerIconLeft", "Left"));
					eRightScroller.addChild(this._getScrollerIcon(oTimeline, "_scollerIconRight", "Right"));
				}
			}

			eScrollContainer.addClass("sapSuiteUiCommonsTimelineHorizontalScrollContainer");
			eScroll.addChild(eScrollContainer);

			eScrollContainer.addChild(eTopLine);
			eScrollContainer.addChild(eMiddleLine);
			eScrollContainer.addChild(eBottomLine);

			eUlMid.addChild(this._getFirstHorizontalDelimiterLine(aContent[0]));

			// 3 LI lists
			// Top and bottom with items (switching odd and even) and one LI with icons and bars
			//
			// LI 1: ItemA ItemC ItemE
			// LI 2: iA iB  iC iD iE
			// LI 3:   ItemB ItemD
			//

			for (var i = 0; i < aContent.length; i++) {
				bLastGroup = bIsMaxed;
				oItem = aContent[i];
				// // parent is top or bottom (depends whether alignment)
				// for doublesided it depends whether item is odd or even
				// item itself has to know which line he belons to (proper CSS styling)
				sPlacementLine = bIsTop ? "top" : "bottom";
				bIsEven = (iGroupItemCount % 2 );
				bIsGroupHeader = oItem.getText() === "GroupHeader";
				oNextItem = aContent[i + 1];

				// parent is top or bottom (depends whether alignment)
				// for doublesided it depends whether item is odd or even
				cParent = bIsTop ? eUlTop : eUlBot;

				if (bIsDoubleSided) {
					// top position by default (for odd and group headers)
					cParent = eUlTop;

					// double sided has it own placement logic
					if (!bIsGroupHeader) {
						cParent = bIsEven ? eUlBot : eUlTop;
					}
					sPlacementLine = bIsEven ? "bottom" : "top";
				}

				if (bIsGroupHeader) {
					iGroupItemCount = 0;
					bIsFirstGroupEvenItem = true;
					sPlacementLine = "top";

					if (bLastGroup) {
						// check if this group is a last one
						for (var k = i + 1; k < aContent.length; k++) {
							if (aContent[k]._isGroupHeader) {
								bLastGroup = false;
								break;
							}
						}
					}
				} else if (bIsEven) {
					oItem._isFirstGroupEvenItem = bIsFirstGroupEvenItem;
					bIsFirstGroupEvenItem = false;
				}

				oItem._index = i;
				oItem._orientation = "H";
				oItem._placementLine = sPlacementLine;

				cParent.addChild(oItem);

				// delimiter (icon and bar) for each item
				var oDelimiterItem = this._getHorizontalDelimiterLine(oTimeline, oItem, iGroupItemCount, oNextItem, bIsMaxed && !oNextItem, bLastGroup);
				if (oDelimiterItem) {
					eUlMid.addChild(oDelimiterItem);
				}

				if (!bIsGroupHeader) {
					iGroupItemCount++;
				}
			}
		} else {
			eScroll.addChild(this._getEmptyTimelineElement(oTimeline));
		}

		// show more is appended to middle line
		if (oTimeline._showMore) {
			eUlMid.addChild(this._getShowMoreElement(oTimeline));
		}

		return eControl;
	};

	/**
	 * Return first horizontal delimiter element
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The Timeline item control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} First delimiter line element
	 * @private
	 */
	TimelineRenderer._getFirstHorizontalDelimiterLine = function (oTimelineItem) {
		var eItem = new HtmlElement("li"),
			eDivWrapper = new HtmlElement("div"),
			eDiv = new HtmlElement("div"),
			eBar = new HtmlElement("div"),
			bIsGroup = oTimelineItem._isGroupHeader;

		eBar.addClass("sapSuiteUiCommonsTimelineItemBarH");
		eDiv.addClass("sapSuiteUiCommonsTimelineItemBarWrapper");
		eDiv.addChild(eBar);

		eDivWrapper.addChild(eDiv);
		eDivWrapper.addClass("sapSuiteUiCommonsTimelineItemBarDivWrapper");

		eItem.addChild(eDivWrapper);

		eItem.addClass("sapSuiteUiCommonsTimelineItemFirstBar");
		if (bIsGroup) {
			eItem.addClass(oTimelineItem._isGroupCollapsed() ? "sapSuiteUiCommonsTimelineGroupCollapsed" : "sapSuiteUiCommonsTimelineGroupExpanded");
		}

		return eItem;
	};

	/**
	 * Return delimiter line with icons for horizontal mode
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @param {sap.suite.ui.commons.TimelineItem} oTimelineItem The TimelineItem control
	 * @param {int} iIndex Index of the item
	 * @param {sap.suite.ui.commons.TimelineItem} oNextItem Next item of current item
	 * @param {boolean} bLastItem Indicates whether this item is last item
	 * @param {boolean} bLastGroup Indicates last group
	 * @returns {sap.suite.ui.commons.util.HtmlElement} Delimiter element
	 * @private
	 */
	TimelineRenderer._getHorizontalDelimiterLine = function (oTimeline, oTimelineItem, iIndex, oNextItem, bLastItem, bLastGroup) {
		var bIsEven = (iIndex % 2 ),
			bIsGroupHeader = oTimelineItem.getText() === "GroupHeader",
			sItemClass = bIsGroupHeader ? "sapSuiteUiCommonsTimelineItemGroupHeaderH" : "sapSuiteUiCommonsTimelineItemBaseLength",
			sBarClass = "sapSuiteUiCommonsTimelineItemBarH",
			bIsNextGroup = oNextItem != null && oNextItem._isGroupHeader,
			bIsLast = oNextItem === null,
			sStatusClass = oTimelineItem._getStatusColorClass(),
			// controls
			eItem = new HtmlElement("li"),
			eItemChild = new HtmlElement("div"),
			eBar = new HtmlElement("div"),
			eBarWrapper = new HtmlElement("div"),
			eIconWrapper = new HtmlElement("div"),
			eDivNoIcon = new HtmlElement("div"),
			eDivNoIconWrapper = new HtmlElement("div");

		eItem.setId(oTimelineItem.getId() + "-line");

		if (bIsGroupHeader && !oTimelineItem._isGroupCollapsed()) {
			eItem.addStyle("display", "none");
		}

		if (oTimelineItem._groupID) {
			eItem.setAttribute("groupid", oTimelineItem._groupID);
		}

		if (bIsGroupHeader) {
			sBarClass = "sapSuiteUiCommonsTimelineItemGroupHeaderBar";
			eItem.setAttribute("nodeType", "GroupHeaderBar");
		} else if (oTimeline.getEnableDoubleSided()) {
			// double sided has its own bar classes for non groups
			// if next item is group item we want different width then when it is not.
			if ((!bIsNextGroup || bIsEven) && !bIsLast) {
				sItemClass = bIsEven ? "sapSuiteUiCommonsTimelineItemHOdd" : "sapSuiteUiCommonsTimelineItemHEven";
			}
		}

		if ((!bIsGroupHeader && bLastItem) ||
			(bIsGroupHeader && bLastGroup)) {
			eItem.addClass("sapSuiteUiCommonsTimelineLastItem");
		}

		eItem.addClass(jQuery.sap.encodeHTML(sItemClass));
		eBarWrapper.addClass("sapSuiteUiCommonsTimelineItemBarWrapper");

		eBar.addClass("sapSuiteUiCommonsTimelineItemBarH");
		eBar.addClass(jQuery.sap.encodeHTML(sBarClass));

		eItemChild.addStyle("display", "flex");
		eItemChild.addStyle("height", "100%");

		if (oTimeline.getShowIcons() || bIsGroupHeader) {
			eItemChild.addChild(eIconWrapper);
			if (!bIsGroupHeader) {
				if (sStatusClass) {
					eIconWrapper.addClass(jQuery.sap.encodeHTML(sStatusClass));
				} else {
					eIconWrapper.addClass("sapSuiteUiCommonsTimelineNoStatus");
				}

				eIconWrapper.addClass("sapSuiteUiCommonsTimelineItemIconWrapper");
			} else {
				eIconWrapper.addClass("sapSuiteUiCommonsTimelineItemGroupBarIconWrapper");
			}
			eIconWrapper.addChild(oTimelineItem._getLineIcon());
		} else {
			eDivNoIconWrapper.addChild(eDivNoIcon);
			eDivNoIconWrapper.addClass("sapSuiteUiCommonsTimelineItemNoIconWrapper");
			eDivNoIcon.addClass("sapSuiteUiCommonsTimelineItemNoIcon");

			if (sStatusClass) {
				eDivNoIcon.addClass(jQuery.sap.encodeHTML(sStatusClass));
			} else {
				eDivNoIcon.addClass("sapSuiteUiCommonsTimelineNoStatus");
			}

			eItemChild.addClass("sapSuiteUiCommonsTimelineItemWrapper");
			eItemChild.addChild(eDivNoIconWrapper);
		}
		eItemChild.addChild(eBarWrapper);
		eBarWrapper.addChild(eBar);


		if (oTimeline._collapsedGroups[oTimelineItem._groupID]) {
			if (bIsGroupHeader) {
				eItem.addClass("sapSuiteUiCommonsTimelineItemGroupCollapsedBar");
			} else {
				eItem.addStyle("display", "none");
			}
		}

		eItem.addChild(eItemChild);

		return eItem;
	};

	/**
	 * Returns a vertical timeline element representation.
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} returns Timeline element for vertical orientation
	 * @private
	 */
	TimelineRenderer._getVerticalTimelineElement = function (oTimeline) {
		var eControl = new HtmlElement("div"),
			eTopScroller = new HtmlElement("div"),
			eBottomScroller = new HtmlElement("div"),
			eContent = new HtmlElement("div"),
			eScroll = new HtmlElement("div"),
			eContentWrapper = new HtmlElement("div"),
			eShowMoreWrapper = new HtmlElement("div"),
			eUl, oItem, oNext, bIsGroupHeader, oNextPossibleGroup, bLastGroup,
			fnCreateUL = function () {
				var eUl = new HtmlElement("ul");
				eUl.addClass("sapSuiteUiCommonsTimelineItemUlWrapper");
				eUl.setAttribute("role", "presentation");

				return eUl;
			};

		eControl.addControlData(oTimeline);
		eControl.addClass("sapSuiteUiCommonsTimeline");
		this._addAccessibilityTags(eControl, oTimeline);
		eControl.setAttribute("tabindex", "0");

		eContentWrapper.addClass("sapSuiteUiCommonsTimelineContentWrapper");

		if (oTimeline._isGrouped()) {
			eControl.addClass("sapSuiteUiCommonsTimelineGrouped");
		}

		if (oTimeline._scrollingFadeout()) {
			eContentWrapper.addChild(eTopScroller);
			eContentWrapper.addChild(eBottomScroller);

			eTopScroller.addClass("sapSuiteUiCommonsTimelineTopScroller sapSuiteUiCommonsTimelineVerticalScroller");
			eBottomScroller.addClass("sapSuiteUiCommonsTimelineBottomScroller sapSuiteUiCommonsTimelineVerticalScroller");

			if (oTimeline.getScrollingFadeout() === ScrollingFadeout.AreaWithButtons) {
				eTopScroller.addChild(this._getScrollerIcon(oTimeline, "_scollerIconTop", "Top"));
				eBottomScroller.addChild(this._getScrollerIcon(oTimeline, "_scrollerIconBottom", "Bottom"));
			}
		}

		this._setWidthAndHeight(oTimeline, eControl);

		eControl.addChild(oTimeline._objects.getHeaderBar());
		oTimeline._setMessageBars(eControl);

		if ((oTimeline.getMessageStrip() !== null) && (oTimeline.getMessageStrip() !== undefined) && oTimeline.getMessageStrip().getText() !== "") {
			eControl.addChild(oTimeline._objects.getMessageStrip());
		}

		eControl.addChild(eContentWrapper);
		eContentWrapper.addChild(eContent);
		eContent.setId(oTimeline.getId() + "-content");
		eContent.setAttribute("data-sap-ui-fastnavgroup", "true");
		eContent.addClass("sapSuiteUiCommonsTimelineContents");
		eContent.addClass("sapSuiteUiCommonsTimelineScrollV");
		eContent.addClass("sapSuiteUiCommonsTimelineScroll");

		eContent.addChild(eScroll);
		eScroll.setId(oTimeline.getId() + "-scroll");
		eScroll.addClass("sapSuiteUiCommonsTimelineScroll");
		eUl = fnCreateUL();

		var oContent = oTimeline._outputItem,
			bIsMaxed = oTimeline._isMaxed();

		if (oContent.length > 0) {
			eScroll.addChild(eUl);
			for (var i = 0; i < oContent.length; i++) {
				bLastGroup = bIsMaxed;

				oItem = oContent[i];
				oNext = oContent[i + 1];
				bIsGroupHeader = oItem._isGroupHeader;

				oItem._orientation = "V";
				oItem._position = oTimeline.getAlignment();
				oItem._additionalBarClass = "";
				oItem._index = i;
				oItem._isLast = bIsMaxed && oContent.length - 1 === i;

				if (bIsGroupHeader) {
					eUl.setAttribute("groupId", oItem._groupID);
				}

				// for items or group items we need to know whether next item is collapsed group
				// in such case we need to put special class to line, because it will be longer
				if (bIsGroupHeader) {
					// for collapsed group we want to find out whether the right next group is expanded
					// in such case we enlarge this group bar (by class)
					for (var k = i + 1; k < oContent.length; k++) {
						oNextPossibleGroup = oContent[k];
						if (oNextPossibleGroup._isGroupHeader) {
							if (!oNextPossibleGroup._isGroupCollapsed() && oItem._isGroupCollapsed()) {
								oItem._additionalBarClass = "sapSuiteUiCommonsTimelineGroupNextExpanded";
							}
							bLastGroup = false;
							break;
						}
					}
				}
				oItem._isLastGroup = bLastGroup;

				// fix for default items -> if next item is expanded group enlarge line
				if (oNext && oNext._isGroupHeader && !oNext._isGroupCollapsed()) {
					oItem._additionalBarClass = "sapSuiteUiCommonsTimelineGroupNextExpanded";
				}

				if (bIsGroupHeader && (i != 0)) {
					eUl = fnCreateUL();
					eScroll.addChild(eUl);
				}

				eUl.addChild(oItem);
			}
		} else {
			eScroll.addChild(this._getEmptyTimelineElement(oTimeline));
		}

		if (oTimeline._showMore) {
			eShowMoreWrapper.addClass("sapSuiteUiCommonsTimelineShowMoreWrapper");
			eShowMoreWrapper.addChild(this._getShowMoreElement(oTimeline));

			eScroll.addChild(eShowMoreWrapper);
		}

		return eControl;
	};

	/**
	 * Builds a model for no data content.
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} An empty timeline element
	 * @private
	 */
	TimelineRenderer._getEmptyTimelineElement = function (oTimeline) {
		var eWrapper = new HtmlElement("div"),
			eText = new HtmlElement("span");

		eWrapper.addClass("sapSuiteUiCommonsTimelineNoTextWrapper");
		eWrapper.addChild(eText);
		eText.addChildEscaped(oTimeline.getNoDataText());

		return eWrapper;
	};

	/**
	 * Creates wrapper for show more element
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @returns {sap.suite.ui.commons.util.HtmlElement} A wrapper with a "show more" button element
	 * @private
	 */
	TimelineRenderer._getShowMoreElement = function (oTimeline) {
		var eShowMore = oTimeline._isVertical() ? new HtmlElement("div") : new HtmlElement("li"),
			sClassName = "sapSuiteUiCommonsTimelineItemGetMoreButtonV",
			sIconSrc = "sap-icon://drill-down";

		if (oTimeline.getAxisOrientation() === TimelineAxisOrientation.Horizontal) {
			sIconSrc = "sap-icon://process";
			sClassName = "sapSuiteUiCommonsTimelineItemGetMoreButtonH";
		}

		oTimeline._objects.register("moreButton", function () {
			// we skip id for purpose cause we want this control never keep focus when rendered
			// this causes wrong scrolling after loading more items
			var oMoreButton = new Button({
				icon: sIconSrc,
				tooltip: resourceBundle.getText("TIMELINE_MORE"),
				press: function () {
					oTimeline._loadMore();
				}
			});
			oMoreButton.addEventDelegate({
				onAfterRendering: function () {
					this.$().attr("tabindex", 0);
				}
			}, oMoreButton);

			return oMoreButton;
		});

		eShowMore.addClass("sapSuiteUiCommonsTimelineItemGetMoreButton");
		eShowMore.addClass(jQuery.sap.encodeHTML(sClassName));

		eShowMore.addChild(oTimeline._objects.getMoreButton());

		return eShowMore;
	};

	/**
	 * Adds accessibility tags and elements for timeline.
	 * @param {sap.suite.ui.commons.util.HtmlElement} eControl The Timeline element being rendered.
	 * @param {sap.suite.ui.commons.Timeline} oTimeline The Timeline control
	 * @private
	 */
	TimelineRenderer._addAccessibilityTags = function (eControl, oTimeline) {
		var aLabelledByIds = [
			oTimeline._objects.getAccessibilityTitle().getId()
		];
		if (oTimeline._getFilterMessage()) {
			aLabelledByIds.push(oTimeline._objects.getFilterMessageText().getId());
		}
		eControl.setAttribute("role", "listbox");
		eControl.addChild(oTimeline._objects.getAccessibilityTitle());
		eControl.setAttribute("aria-labelledby", aLabelledByIds.join(" "));
		eControl.setAttribute("aria-live", "assertive");
	};

	return TimelineRenderer;
}, true);

}; // end of sap/suite/ui/commons/TimelineRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.Shape') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.Shape.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.Shape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/Shape",[
		"jquery.sap.global",
		"../library",
		"sap/ui/core/Control",
		"sap/suite/ui/commons/util/HtmlElement",
		"sap/suite/ui/commons/statusindicator/util/ThemingUtil"
	],
	function (jQuery, library, Control, HtmlElement, ThemingUtil) {
		"use strict";

		var FillingType = library.statusindicator.FillingType;

		var FillingDirectionType = library.statusindicator.FillingDirectionType;

		/**
		 * Constructor for a new Shape.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is provided
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Abstract shape that displays the value of the status indicator. The shape reflects
		 * the status indicator's percentage value by filling one or more of its parts (SVG shapes)
		 * with the specified color.
		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.Shape
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var Shape = Control.extend("sap.suite.ui.commons.statusindicator.Shape",
			/** @lends sap.suite.ui.commons.Shape.prototype */
			{
				metadata: {
					"abstract": true,
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Specifies the duration, in milliseconds, of the animation that would fill an empty
						 * shape to the full.
						 * The actual time it takes to change the shape's filling is proportional to the
						 * difference between the initial and the target status indicator's value. For example,
						 * a change from 20 percent to 70 percent takes only half of the time specified
						 * in the <code>fullAnimationDuration</code> property. If this property is set to
						 * <code>0</code>, changes are applied instantly without any animation.
						 */
						fullAnimationDuration: {type: "int", defaultValue: 0},

						/**
						 * Defines the color of the shape's fill.
						 */
						fillColor: {type: "sap.m.ValueCSSColor", defaultValue: "Neutral"},

						/**
						 * Defines if the initial value of the status indicator should be animated or
						 * directly displayed on startup. By default, it's displayed on startup without any
						 * animation.
						 */
						animationOnStartup: {type: "boolean", defaultValue: false},

						/**
						 * Specifies the delay of the initial value animation. Only applicable if the
						 * <code>animationOnStartup</code> property is set to <code>true</code>.
						 */
						animationOnStartupDelay: {type: "int", defaultValue: 0},

						/**
						 * Defines the direction in which the shape is filled.
						 */
						fillingDirection: {
							type: "sap.suite.ui.commons.statusindicator.FillingDirectionType",
							defaultValue: FillingDirectionType.Up
						},

						/**
						 * Defines the type of the shape's fill.
						 */
						fillingType: {
							type: "sap.suite.ui.commons.statusindicator.FillingType",
							defaultValue: FillingType.Linear
						}
					}
				}
			});

		/**
		 * Returns the currently displayed value
		 * This method must be overridden by a child class
		 *
		 * @public
		 * @returns void
		 */
		Shape.prototype.getDisplayedValue = function () {
			jQuery.sap.log.fatal("Must be overridden!");
		};

		Shape.prototype._setInitialValue = function (iInitialValue) {
			jQuery.sap.log.fatal("Must be overridden!");
		};

		Shape.prototype.init = function () {
			if (Control.prototype.init) {
				Control.prototype.init.apply(this, arguments);
			}
			this._oAnimationPropertiesResolver = null;
		};

		/**
		 * Returns HTML structure of the shape.
		 * This method has to be overridden by child class.
		 *
		 * @return void
		 */
		Shape.prototype._getHtmlElements = function () {
			jQuery.sap.log.fatal("Must be overridden!");
		};

		Shape.prototype._getCssFillColor = function () {
			if (!this._cssFillColor) {
				this._cssFillColor = ThemingUtil.resolveColor(this.getFillColor());
			}

			return this._cssFillColor;
		};

		Shape.prototype._getCssStrokeColor = function () {
			if (!this._cssStrokeColor) {
				this._cssStrokeColor = ThemingUtil.resolveColor(this.getStrokeColor());
			}

			return this._cssStrokeColor;
		};

		Shape.prototype._injectAnimationPropertiesResolver = function (oAnimationPropertiesResolver) {
			this._oAnimationPropertiesResolver = oAnimationPropertiesResolver;
		};

		Shape.prototype.getDisplayedFillColor = function (iDisplayedValue) {
			return this._oAnimationPropertiesResolver.getColor(this, iDisplayedValue);
		};

		Shape.prototype.getGradientElement = function (iDisplayedValue) {
			var oGradientElement = new HtmlElement(this.getFillingType() === FillingType.Linear ? "linearGradient" : "radialGradient");
			oGradientElement.setId(this._buildIdString(this.getId(), "gradient")); // todo hardcoded gradientId

			if (this.getFillingType() === FillingType.Linear) {
				oGradientElement.setAttribute("x1", this.getFillingDirection() === FillingDirectionType.Left ? 1 : 0);
				oGradientElement.setAttribute("y1", this.getFillingDirection() === FillingDirectionType.Up ? 1 : 0);
				oGradientElement.setAttribute("x2", this.getFillingDirection() === FillingDirectionType.Right ? 1 : 0);
				oGradientElement.setAttribute("y2", this.getFillingDirection() === FillingDirectionType.Down ? 1 : 0);
			}

			var fOffset = this._getDisplayedGradientOffset(iDisplayedValue);
			var oStopColorElement = new HtmlElement("stop");
			oStopColorElement.setAttribute("offset", fOffset);
			oStopColorElement.setAttribute("stop-color", "white");
			oGradientElement.addChild(oStopColorElement);

			var oStopTransparentElement = new HtmlElement("stop");
			oStopTransparentElement.setAttribute("offset", fOffset);
			oStopTransparentElement.setAttribute("stop-color", "transparent");
			oGradientElement.addChild(oStopTransparentElement);

			return oGradientElement;
		};

		/**
		 * Updates DOM to visualize passed value. The regular update convert the value before updating.
		 * The plain update simply updates the DOM to the given iDisplayedValue.
		 *
		 *
		 * @param {number} iDisplayedValue
		 * @param {boolean} bPlainUpdate
		 *
		 * @private
		 * @return void
		 */
		Shape.prototype._updateDom = function (iDisplayedValue, bPlainUpdate) {
			var iResolvedValue = iDisplayedValue;
			if (!bPlainUpdate) {
				iResolvedValue = this._oAnimationPropertiesResolver.getValue(this, iDisplayedValue);
			}

			if (!this.$stopNodes) {
				this.$stopNodes = this.$("gradient").find("stop"); // todo hardcoded gradientId
			}

			this.$stopNodes.attr("offset", this._getDisplayedGradientOffset(iResolvedValue));
		};

		Shape.prototype.isFillable = function () {
			return this.getFillingType() !== FillingType.None;
		};

		Shape.prototype._getDisplayedGradientOffset = function (iDisplayedValue) {
			if (this.isFillable()) {
				var result = iDisplayedValue / 100;
				return result;
			} else {
				return 1; // fill it all!
			}
		};

		Shape.prototype._getMaskShapeElement = function (sMaskShapeId, attributes) {
			var oMaskShapeElement = this._getSimpleShapeElement(sMaskShapeId);
			oMaskShapeElement.setAttribute('stroke', 'white');
			oMaskShapeElement.setAttribute("fill", attributes.fill);
			return oMaskShapeElement;
		};

		Shape.prototype._getMaskElement = function (sMaskId, oMaskShape) {
			var oMaskElement = new HtmlElement("mask");
			oMaskElement.setId(sMaskId);
			oMaskElement.addChild(oMaskShape);

			return oMaskElement;
		};

		Shape.prototype._buildSvgUrlString = function () {
			return "url(#" + this._buildIdString.apply(this, arguments) + ")";
		};

		Shape.prototype._buildIdString = function () {
			var sConcatenatedIds = jQuery.makeArray(arguments).join("-");
			return sConcatenatedIds;
		};

		return Shape;

	}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/statusindicator/Shape.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.SimpleShape') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.SimpleShape.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.SimpleShape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/SimpleShape",[
		"jquery.sap.global",
		"../library",
		"sap/ui/core/Control",
		"sap/suite/ui/commons/statusindicator/Shape",
		"sap/suite/ui/commons/util/HtmlElement"
	],
	function (jQuery, library, Control, Shape, HtmlElement) {
		"use strict";

		var FillingType = library.statusindicator.FillingType;

		/**
		 * Constructor for a new SimpleShape.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * A simple shape that consists of a single SVG shape.
		 * @extends sap.suite.ui.commons.Shape
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.SimpleShape
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel
		 */
		var SimpleShape = Shape.extend("sap.suite.ui.commons.statusindicator.SimpleShape",
			/** @lends sap.suite.ui.commons.Shape.prototype */
			{
				metadata: {
					"abstract": true,
					library: "sap.suite.ui.commons",
					properties: {
						/**
						 * Specifies the width of the shape's outline.
						 */
						strokeWidth: {type: "float", defaultValue: 0.25},

						/**
						 * Specifies the color of the shape's outline.
						 */
						strokeColor: {type: "sap.m.ValueCSSColor", defaultValue: "sapUiContentIconColor"}
					}
				}
			});

		SimpleShape.prototype._getSimpleShapeElement = function () {
			jQuery.sap.log.fatal("Must be overriden!");
		};

		SimpleShape.prototype.init = function () {
			if (Shape.prototype.init) {
				Shape.prototype.init.apply(this, arguments);
			}

			this._iDisplayedValue = 0;
		};

		/**
		 * Updates DOM to visualize passed value. The regular update convert the value before updating.
		 * The plain update simply updates the DOM to the given iDisplayedValue.
		 *
		 * @param {number} iDisplayedValue
		 * @param {boolean} bPlainUpdate
		 *
		 * @private
		 * @return void
		 */
		SimpleShape.prototype._updateDom = function (iDisplayedValue, bPlainUpdate) {
			var newFillColor = this.getDisplayedFillColor(iDisplayedValue);
			this.$("shape").attr("fill", newFillColor);
			Shape.prototype._updateDom.apply(this, arguments);
			this._iDisplayedValue = iDisplayedValue;
		};

		/**
		 * Returns currently displayed value.
		 *
		 * @public
		 * @returns {number}
		 */
		SimpleShape.prototype.getDisplayedValue = function () {
			return this._iDisplayedValue;
		};

		SimpleShape.prototype._setInitialValue = function(iInitialValue){
			this._iDisplayedValue = iInitialValue;
		};

		/**
		 * Returns the HTML structure of the shape.
		 *
		 * @private
		 * @returns {HtmlElement}
		 */
		SimpleShape.prototype._getHtmlElements = function () {
			var sMaskId = "mask";
			var oShapeRootElement = new HtmlElement("g");
			oShapeRootElement.addControlData(this);

			var oDefsElement = new HtmlElement("defs");

			if (this.getFillingType() === FillingType.Linear || this.getFillingType() === FillingType.Radial) {
				// gradient element

				oDefsElement.addChild(this.getGradientElement(this._iDisplayedValue));

				// mask element
				var sMaskShapeId = "mask-shape";
				var oMaskShapeElement = this._getMaskShapeElement(this._buildIdString(this.getId(), sMaskShapeId), {
					fill: this._buildSvgUrlString(this.getId(), "gradient") // todo hardcoded gradientId
				});
				var oMaskElement = this._getMaskElement(this._buildIdString(this.getId(), sMaskId), oMaskShapeElement);
				oDefsElement.addChild(oMaskElement);
				oShapeRootElement.addChild(oDefsElement);
			}

			// element
			var sShapeId = this._buildIdString(this.getId(), "shape");
			var oShapeElement = this._getSimpleShapeElement(sShapeId);
			oShapeElement.setAttribute("fill", this._getCssFillColor());
			oShapeElement.setAttribute("mask", this._buildSvgUrlString(this.getId(), sMaskId));

			if (this._sStyleAttribute) {
				oShapeElement.setAttribute("style", this._sStyleAttribute);
			}

			oShapeRootElement.addChild(oShapeElement);

			return oShapeRootElement;
		};

		SimpleShape.prototype._setStyle = function (sStyleAttribute) {
			this._sStyleAttribute = sStyleAttribute;
		};

		return SimpleShape;

	}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/statusindicator/SimpleShape.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.StatusIndicatorRenderer') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.suite.ui.commons.statusindicator.StatusIndicatorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/StatusIndicatorRenderer",["jquery.sap.global",
		"sap/suite/ui/commons/util/HtmlElement",
		"sap/ui/core/Renderer"
	],

	function(jQuery, HtmlElement, Renderer) {
		"use strict";

		var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

		/**
		 * StatusIndicator renderer.
		 * @namespace
		 * @extends sap.ui.core.Renderer
		 */
		var StatusIndicatorRenderer = Renderer.extend("sap.suite.ui.commons.StatusIndicatorRenderer");

		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager} oRm
		 *            The RenderManager that can be used for writing to the render output buffer.
		 * @param {sap.suite.ui.commons.StatusIndicator} oControl
		 *            An object representation of the control that should be rendered.
		 */
		StatusIndicatorRenderer.render = function(oRm, oControl) {
			var oModel = this._getHtmlModel(oControl);
			oModel.getRenderer().render(oRm);
		};

		/**
		 * Returns HtmlElement instance of the root div of the StatusIndicator.
		 *
		 * @param {sap.suite.ui.commons.StatusIndicator} oStatusIndicator
		 *            the StatusIndicator to be rendered
		 * @returns {sap.suite.ui.commons.util.HtmlElement} root div HtmlElement instance
		 * @private
		 */
		StatusIndicatorRenderer._getHtmlModel = function(oStatusIndicator) {
			var oRoot = new HtmlElement("div");
			oRoot.addStyle("width", oStatusIndicator.getWidth());
			oRoot.addStyle("height", oStatusIndicator.getHeight());
			oRoot.addControlData(oStatusIndicator);
			oRoot.setAttribute("role", "progressbar");
			oRoot.setAttribute("aria-roledescription", resourceBundle.getText("STATUS_INDICATOR_ARIA_ROLE_DESCRIPTION"));
			oRoot.setAttribute("aria-readonly", true);

			var sAriaLabel = oStatusIndicator.getAriaLabel();
			oRoot.setAttribute("aria-label", sAriaLabel ? sAriaLabel : resourceBundle.getText("STATUS_INDICATOR_ARIA_LABEL"));

			var aAriaLabelledBy = oStatusIndicator.getAriaLabelledBy();

			if (aAriaLabelledBy && aAriaLabelledBy.length > 0) {
				oRoot.setAttribute("aria-labelledby", aAriaLabelledBy.join(" "));
			}

			var aAriaDescribedBy = oStatusIndicator.getAriaDescribedBy();

			if (aAriaDescribedBy && aAriaDescribedBy.length > 0) {
				oRoot.setAttribute("aria-describedby", aAriaDescribedBy.join(" "));
			}

			oRoot.setAttribute("tabindex", "0");
			oRoot.setAttribute("aria-valuemin", 0);
			oRoot.setAttribute("aria-valuemax", 100);
			oRoot.addChild(this._getSvgElement(oStatusIndicator));

			return oRoot;
		};


		/**
		 * Returns HtmlElement object of the svg element
		 *
		 * @param {sap.suite.ui.commons.StatusIndicator} oStatusIndicator
		 *            the StatusIndicator to be rendered
		 * @returns {sap.suite.ui.commons.util.HtmlElement} svg HtmlElement instance
		 * @private
		 */
		StatusIndicatorRenderer._getSvgElement = function(oStatusIndicator) {
			var oSvg = new HtmlElement("svg");
			oSvg.setId(oStatusIndicator._getFullId(oStatusIndicator._internalIds.svgNodeId));
			oSvg.setAttribute("version", "1.1");
			oSvg.setAttribute("xlmns", "http://www.w3.org/2000/svg");
			oSvg.setAttribute("width", oStatusIndicator.getWidth());
			oSvg.setAttribute("height", oStatusIndicator.getHeight());
			oSvg.setAttribute("focusable", false);
			oSvg.addClass("sapSuiteUiCommonsStatusIndicator");
			if (oStatusIndicator.getViewBox()) {
				oSvg.setAttribute("viewBox", oStatusIndicator.getViewBox(), true);
			}

			oStatusIndicator._getGroupElements().forEach(function (oGroupHtmlElement) {
				oSvg.addChild(oGroupHtmlElement);
			});

			return oSvg;
		};


		return StatusIndicatorRenderer;

	}, true);

}; // end of sap/suite/ui/commons/statusindicator/StatusIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.Circle') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.Circle.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.Circle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/statusindicator/Circle",[
		"sap/suite/ui/commons/statusindicator/Shape",
		"sap/suite/ui/commons/util/HtmlElement",
		"sap/suite/ui/commons/statusindicator/SimpleShape"
	],
	function (Shape,HtmlElement, SimpleShape) {
		"use strict";

		/**
		 * Constructor for a new Circle.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Status indicator shape in the form of a circle.
		 * @extends sap.ui.suite.ui.commons.statusindicator.SimpleShape
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.Circle
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel
		 */
		var Circle = SimpleShape.extend("sap.suite.ui.commons.statusindicator.Circle",
			/** @lends sap.suite.ui.commons.statusindicator.SimpleShape.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Defines the x coordinate of the center of the circle with respect to its parent status
						 * indicator.
						 */
						cx: {type: "float", defaultValue: 0},

						/**
						 * Defines the y coordinate of the center of the circle with respect to its parent status
						 * indicator.
						 */
						cy: {type: "float", defaultValue: 0},

						/**
						 * Defines the radius of the circle.
						 */
						r: {type: "float", defaultValue: 0}
					}
				}
			});

		Circle.prototype._getSimpleShapeElement = function (sCircleId) {
			var oCircleElement = new HtmlElement("circle");
			oCircleElement.setId(this._buildIdString(sCircleId));

			oCircleElement.setAttribute("cx", this.getCx());
			oCircleElement.setAttribute("cy", this.getCy());
			oCircleElement.setAttribute("r", this.getR());
			oCircleElement.setAttribute("stroke-width", this.getStrokeWidth());
			oCircleElement.setAttribute("stroke", this._getCssStrokeColor());

			return oCircleElement;
		};



		return Circle;
	});

}; // end of sap/suite/ui/commons/statusindicator/Circle.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.Path') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.Path.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.Path'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/statusindicator/Path",[
		"sap/suite/ui/commons/util/HtmlElement",
		"sap/suite/ui/commons/statusindicator/SimpleShape"
	],
	function (HtmlElement, SimpleShape) {
		"use strict";

		/**
		 * Constructor for a new Path.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Shape that consists of a single SVG path element.
		 * @extends sap.suite.ui.commons.statusindicator.SimpleShape
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.Path
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var Path = SimpleShape.extend("sap.suite.ui.commons.statusindicator.Path",
			/** @lends sap.suite.ui.commons.statusindicator.Shape.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Specifies the path that outlines the shape.
						 * The format is identical to the <code>d</code> attribute of the <code>&lt;path&gt;</code>
						 * SVG element.
 						 */
						d: {type: "string", defaultValue: null} // todo: escaping
					}
				}
			});

		Path.prototype._getSimpleShapeElement = function (sPathId) {
			var oPathElement = new HtmlElement("path");

			oPathElement.setId(this._buildIdString(sPathId));
			oPathElement.setAttribute("d", this.getD());
			oPathElement.setAttribute("stroke-width", this.getStrokeWidth());
			oPathElement.setAttribute("stroke", this._getCssStrokeColor());
			if (this.aCustomStyleClasses) {
				this.aCustomStyleClasses.forEach(oPathElement.addClass.bind(oPathElement));
			}

			return oPathElement;
		};

		return Path;

	});

}; // end of sap/suite/ui/commons/statusindicator/Path.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.Rectangle') ) {
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.Rectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/commons/statusindicator/Rectangle",
	[
		"sap/suite/ui/commons/util/HtmlElement",
		"sap/suite/ui/commons/statusindicator/SimpleShape"
	],
	function (HtmlElement, SimpleShape) {
		"use strict";

		/**
		 * Constructor for a new Rectangle.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Status indicator shape in the form of a rectangle.
		 * @extends sap.suite.ui.commons.statusindicator.SimpleShape
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.Rectangle
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var Rectangle = SimpleShape.extend("sap.suite.ui.commons.statusindicator.Rectangle",
			/** @lends sap.suite.ui.commons.statusindicator.Rectangle.prototype */ {

				metadata: {
					properties: {

						/**
						 * Defines the x coordinate of the upper-left corner of the rectangle.
						 */
						x: {type: "int", defaultValue: 0},

						/**
						 * Defines the y coordinate of the upper-left corner of the rectangle.
						 */
						y: {type: "int", defaultValue: 0},

						/**
						 * Defines the horizontal corner radius of the rectangle. If set to 0, the corners
						 * are not rounded.
						 */
						rx: {type: "int", defaultValue: 0},

						/**
						 * Defines the vertical corner radius of the rectangle. If set to 0, the corners
						 * are not rounded.
						 */
						ry: {type: "int", defaultValue: 0},

						/**
						 * Defines the width of the rectangle.
						 */
						width: {type: "int", defaultValue: 0},

						/**
						 * Defines the height of the rectangle.
						 */
						height: {type: "int", defaultValue: 0}
					}
				}

			});

		Rectangle.prototype._getSimpleShapeElement = function (sRectId) {
			var oRectElement = new HtmlElement("rect");
			oRectElement.setId(this._buildIdString(sRectId));

			oRectElement.setAttribute("x", this.getX());
			oRectElement.setAttribute("y", this.getY());
			oRectElement.setAttribute("width", this.getWidth());
			oRectElement.setAttribute("height", this.getHeight());
			oRectElement.setAttribute("rx", this.getRx());
			oRectElement.setAttribute("ry", this.getRy());
			oRectElement.setAttribute("stroke-width", this.getStrokeWidth());
			oRectElement.setAttribute("stroke", this._getCssStrokeColor());

			return oRectElement;
		};

		return Rectangle;
	});

}; // end of sap/suite/ui/commons/statusindicator/Rectangle.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.CustomShape') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.suite.ui.commons.statusindicator.CustomShape.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.CustomShape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/CustomShape",[
		"jquery.sap.global",
		"../library",
		"sap/suite/ui/commons/statusindicator/ShapeGroup",
		"sap/suite/ui/commons/statusindicator/Shape",
		"sap/suite/ui/commons/statusindicator/Path",
		"sap/suite/ui/commons/statusindicator/Circle",
		"sap/suite/ui/commons/statusindicator/Rectangle",
		"sap/suite/ui/commons/util/HtmlElement"
	],
	function (jQuery, library, ShapeGroup, Shape, Path, Circle, Rectangle, HtmlElement) {
		"use strict";

		var FillingType = library.statusindicator.FillingType;

		/**
		 * Constructor for a new CustomShape.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * Custom shape that is defined directly as SVG.
		 * @extends sap.suite.ui.commons.statusindicator.Shape
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.CustomShape
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var CustomShape = Shape.extend("sap.suite.ui.commons.statusindicator.CustomShape",
			/** @lends sap.suite.ui.commons.statusindicator.Shape.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * A valid XML fragment that contains an &lt;svg&gt; element that complies with the following
						 * requirements:
						 * <ul>
						 *     <li>It includes no SVG groups (&lt;g&gt; elements).</li>
						 *     <li>It includes no &lt;defs&gt; elements.</li>
						 * </ul>
						 * The SVG element is transformed into a status indicator shape in the following way:
						 * <ul>
						 *     <li>The <code>viewBox</code> attribute of the root SVG element is respected and kept after the transformation.</li>
						 *     <li>The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered to be fillable.</li>
						 *     <li>The SVG shapes without classes are considered fillable.</li>
						 *     <li>If there are multiple fillable shapes, each shape element must have a <code>data-shape-id</code> attribute that is set to a unique value.</li>
						 * </ul>
						 * Example:
						 * <pre>
						 *   &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; viewBox=&quot;0 0 30 30&quot; xml:space=&quot;preserve&quot;&gt;
						 *      &lt;path style=&quot;fill:blue;&quot; d=&quot;M14.664,29....&quot; /&gt;
						 *      &lt;path style=&quot;fill:blue;&quot; d=&quot;M13.626,25....&quot; /&gt;
						 *      &lt;path data-shape-id=&quot;fill-1&quot; d=&quot;M15.337,21....&quot; /&gt;
						 *      &lt;path data-shape-id=&quot;fill-2&quot; d=&quot;M13.626,17....&quot; /&gt;
						 *      &lt;path data-shape-id=&quot;fill-3&quot; d=&quot;M15.337,14....&quot; /&gt;
						 *      &lt;path data-shape-id=&quot;fill-4&quot; d=&quot;M13.107,10....&quot; /&gt;
						 *   &lt;/svg&gt;
						 * </pre>
						 * The first two paths in this example are filled with blue color. The last four shape elements are filled gradually, as
						 * the status indicator's value changes.
						 *
						 * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
						 */
						definition: {type: "string", defaultValue: null} // todo: escaping, is valid svg markup
					},
					defaultAggregation: "shapes",
					aggregations: {

						/**
						 * Read-only aggregation that contains simple shapes transformed from the SVG definition.
						 */
						shapes: {type: "sap.suite.ui.commons.statusindicator.SimpleShape", multiple: true, defaultValue: null},

						/**
						 * Defines the order and weight of fillable shapes based on the status indicator value distribution.
						 * If this aggregation is not used, the shapes are filled in the order they are specified in the SVG definition.
						 */
						fillingOptions: {
							type: "sap.suite.ui.commons.statusindicator.FillingOption",
							multiple: true,
							defaultValue: null
						}
					}
				}
			});

		CustomShape.prototype.init = function () {
			if (Shape.prototype.init) {
				Shape.prototype.init.apply(this, arguments);
			}

			this._initShapeState();
		};

		CustomShape.prototype.addFillingOption = function (oNewFillingOption) {
			var bFillingOptionWithNoOrder = typeof oNewFillingOption.getOrder() === "undefined";
			if (bFillingOptionWithNoOrder) {
				jQuery.sap.log.fatal("The passed FillingOption has to have set its order property.");
				return this;
			}

			var bHaveFillingOptionWithSameOrder = this.getFillingOptions().length > 0 &&
				this.getFillingOptions().filter(function (oFillingOption) {
					return oFillingOption.getOrder() === oNewFillingOption.getOrder();
				}).length > 0;

			if (bHaveFillingOptionWithSameOrder) {
				jQuery.sap.log.fatal("The property 'order' has to be unique within the FillingOptions aggregation, but option" +
					" with order: " + oNewFillingOption.getOrder() + " is already inserted. No FillingOption added.");
				return this;
			}

			return this.addAggregation("fillingOptions", oNewFillingOption, true);
		};

		CustomShape.prototype._initShapeState = function() {
			this._aFillableSubShapes = [];
			this.oDefinition = [];
			this._sViewBox = null;
		};

		CustomShape.prototype._refreshInternalStructure = function () {
			this._initShapeState();
			this._aFillableSubShapes.forEach(function (oItem) {
				if (oItem.fillingOption) {
					oItem.fillingOption.destroy();
				}
				oItem.shape.destroy();
			});

			if (!this.getDefinition()) {
				jQuery.sap.log.fatal("Definition has to be specified.");
				return;
			}

			var $svg = jQuery(this.getDefinition());
			this.oDefinition = jQuery.map($svg.children(), this._preprocessNode.bind(this));
			this._sViewBox = $svg[0].getAttribute("viewBox");
		};

		CustomShape.prototype._preprocessNode = function (node) {
			var $node = jQuery(node),
				sTagName = $node.prop("tagName"),
				that = this,
				oResult = null;

			switch (sTagName) {
				case "g":
					// todo will have g any meaning? otherwise I should skip them in the SVG
					oResult = jQuery.map($node.children(), function (oChildNode) {
						return that._preprocessLeafNode.call(that, jQuery(oChildNode));
					});
					break;
				default:
					oResult = this._preprocessLeafNode($node);
			}

			return oResult;
		};

		CustomShape.prototype._preprocessLeafNode = function ($oShapeNode) {
			var sTagName = $oShapeNode.prop("tagName");
			var oResult = null;

			switch (sTagName) {
				case "path":
					oResult = this._preprocessPathNode($oShapeNode);
					break;
				case "circle":
					oResult = this._preprocessCircleNode($oShapeNode);
					break;
				case "rect":
					oResult = this._preprocessRectangleNode($oShapeNode);
					break;
				case "defs":
					oResult = this._preprocessDefinitionsNode($oShapeNode[0]);
					break;
				default:
					jQuery.sap.log.fatal("Unsupported node tag name ('" + sTagName + "')");
			}

			return oResult;
		};

		CustomShape.prototype._preprocessPathNode = function ($pathNode) {
			var oPath = new Path({
				d: $pathNode.attr("d")
			});
			this._prepareShape(oPath, $pathNode);

			return oPath._getHtmlElements();
		};

		CustomShape.prototype._preprocessCircleNode = function ($circleNode) {
			var oCircle = new Circle({
				cx: Number($circleNode.attr("cx")),
				cy: Number($circleNode.attr("cy")),
				r: Number($circleNode.attr("r"))
			});
			this._prepareShape(oCircle, $circleNode);

			return oCircle._getHtmlElements();
		};

		CustomShape.prototype._preprocessRectangleNode = function ($rectangleNode) {
			var oRectangle = new Rectangle({
				x: Number($rectangleNode.attr("x")),
				y: Number($rectangleNode.attr("y")),
				width: Number($rectangleNode.attr("width")),
				height: Number($rectangleNode.attr("height"))
			});
			this._prepareShape(oRectangle, $rectangleNode);

			return oRectangle._getHtmlElements();
		};

		CustomShape.prototype._preprocessDefinitionsNode = function (oDefsNode) {
			var oDefinitionElement = new HtmlElement("defs");
			oDefinitionElement.addChild(oDefsNode.innerHTML);
			return oDefinitionElement;
		};

		/**
		 * Returns HTML structure of the shape.
		 *
		 * @return {object}
		 */
		CustomShape.prototype._getHtmlElements = function (iDisplayedValue) {
			this._refreshInternalStructure();

			var oShapeRootElement = new HtmlElement("svg");
			oShapeRootElement.addControlData(this);
			if (this._sViewBox) {
				oShapeRootElement.setAttribute("viewBox", this._sViewBox);
			}

			this.oDefinition.forEach(function (oItem) {
				oShapeRootElement.addChild(oItem);
			});

			return oShapeRootElement;
		};

		// todo same as in simpleShape
		CustomShape.prototype._setInitialValue = function (iInitialValue) {
			this._iDisplayedValue = iInitialValue;
		};

		// todo same as in simpleShape
		CustomShape.prototype.getDisplayedValue = function () {
			return this._iDisplayedValue;
		};

		CustomShape.prototype._prepareShape = function (oShape, $node) {
			var sStyleAttribute = $node.attr("style");
			this.addShape(oShape);
			oShape._injectAnimationPropertiesResolver(this._oAnimationPropertiesResolver);

			if (!sStyleAttribute) {
				oShape.setFillingDirection(this.getFillingDirection());
				oShape.setFillColor(this.getFillColor());
				oShape.setFillingType(this.getFillingType());

				var sShapeId = $node.data("shape-id");
				var oFillableSubShape = {
					shape: oShape,
					fillingOption: sShapeId ? this._getFillingOptionById(sShapeId) : null
				};

				this._aFillableSubShapes.push(oFillableSubShape);

				// If some of shapes have fillingOption, we try to sort it by this specification.
				// Only two states are allowed - we left all the shapes without FillingOptions or
				// we specified FillingOptions for all the shapes. The other states (some with/without FillingOption)
				// have undefined behaviour.
				if (oFillableSubShape.fillingOption) {
					this._aFillableSubShapes.sort(function (oA, oB) {
						var oFillingOptionA = oA.fillingOption;
						var oFillingOptionB = oB.fillingOption;
						if (!oFillingOptionA) {
							return -1;
						}

						if (!oFillingOptionB) {
							return 1;
						}

						return oFillingOptionA.getOrder() - oFillingOptionB.getOrder();
					});
				}
			} else {
				oShape.setFillingType(FillingType.None);
				oShape._setStyle(sStyleAttribute);
			}
		};

		/**
		 * Updates DOM to visualize passed value.
		 *
		 * @param {number} iDisplayedValue
		 *
		 * @private
		 * @return void
		 */
		CustomShape.prototype._updateDom = function (iDisplayedValue) {
			function getSubShapeWeight(oSubShape) {
				var oFillingOption = oSubShape.fillingOption;
				return oFillingOption && oFillingOption.getWeight() !== 0 ? oFillingOption.getWeight() : 1;
			}

			this._iDisplayedValue = iDisplayedValue;
			if (this._aFillableSubShapes.length === 0) {
				jQuery.sap.log.info("Update of DOM skipped. No shape for update found");
				return;
			}

			var iTotalWeight = this._aFillableSubShapes.reduce(function (acc, oSubShape) {
				return acc + getSubShapeWeight(oSubShape);
			}, 0);

			try {
				var iValueToBeDistributed = this._oAnimationPropertiesResolver.getValue(this, iDisplayedValue);

				this._aFillableSubShapes.forEach(function (oFillableSubShape) {
					var iShapeWeight = getSubShapeWeight(oFillableSubShape);
					var fGroupRatio = iShapeWeight / iTotalWeight;
					var iSubShapeValue;

					if (iValueToBeDistributed === 0) {
						iSubShapeValue = 0;
					} else if (iValueToBeDistributed >= 100 * fGroupRatio) {
						iSubShapeValue = 100;
					} else {
						iSubShapeValue = iValueToBeDistributed / fGroupRatio;
					}
					iValueToBeDistributed -= iSubShapeValue * fGroupRatio;

					oFillableSubShape.shape._updateDom(iSubShapeValue, true);
				});

			} catch (oError) {
				jQuery.sap.log.fatal("Update of DOM failed. Reason: " + oError.message);
				return;
			}
		};

		CustomShape.prototype._getFillingOptionById = function (sId) {
			var oResult = null;
			this.getFillingOptions().some(function (oFillingOption) {
				if (oFillingOption.getShapeId() === sId) {
					oResult = oFillingOption;
					return true;
				}

				return false;
			});

			return oResult;
		};

		return CustomShape;

	});

}; // end of sap/suite/ui/commons/statusindicator/CustomShape.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.util.AnimationPropertiesResolver') ) {
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.util.AnimationPropertiesResolver'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/util/AnimationPropertiesResolver",[
	"jquery.sap.global",
	"sap/suite/ui/commons/statusindicator/Shape",
	"sap/suite/ui/commons/statusindicator/ShapeGroup",
	"sap/suite/ui/commons/statusindicator/CustomShape"
], function (jQuery, Shape, ShapeGroup, CustomShape) {
	"use strict";

	var AnimationPropertiesResolver = function (oStatusIndicator) {
		this._oStatusIndicator = oStatusIndicator;
	};

	/**
	 * Resolve the value for the given shape.
	 *
	 * @param {Shape} oShape
	 * @param iShapeValue
	 * @returns {int}
	 */
	AnimationPropertiesResolver.prototype.getValue = function (oShape, iShapeValue) {
		var oParent = oShape.getParent();
		if (!oParent instanceof ShapeGroup) {
			jQuery.sap.log.fatal("Shape should be always direct child of ShapeGroup.");
			return iShapeValue;
		}

		if (!this._oStatusIndicator._discreteThresholdsEnabled()) {
			return iShapeValue;
		}

		var iStatusIndicatorValue = this._getStatusIndicatorValue(oParent, iShapeValue);

		var oDiscreteThreshold = this._oStatusIndicator._getDiscreteThresholdForValue(iStatusIndicatorValue);
		var iCappedValue = oDiscreteThreshold ? oDiscreteThreshold.getValue() : 0;

		return this._getGroupValue(oParent, iCappedValue);
	};

	/**
	 * Returns the color that should be valid for the given shape and value
	 *
	 * @param oShape
	 * @param iShapeValue
	 */
	AnimationPropertiesResolver.prototype.getColor = function (oShape, iShapeValue) {
		var oParent = oShape.getParent();
		if (oParent instanceof CustomShape) {
			iShapeValue = oParent.getDisplayedValue();
			oParent = oParent.getParent();
		}

		var iStatusIndicatorValue = this._getStatusIndicatorValue(oParent, iShapeValue);

		var sNewFillColor = oShape._getCssFillColor();

		if (this._oStatusIndicator._propertyThresholdsEnabled()) {
			var oPropertyThreshold = this._oStatusIndicator._getPropertyThresholdForValue(iStatusIndicatorValue);
			if (oPropertyThreshold) {
				sNewFillColor = oPropertyThreshold.getFillColor();
			}
		}

		return sNewFillColor;
	};

	AnimationPropertiesResolver.prototype._getStatusIndicatorValue = function (oCurrentGroup, iShapeValue) {
		var that = this;
		var aGroups = this._oStatusIndicator.getGroups();

		var iAccValue = 0;
		aGroups.some(function (oGroup) {
			var fGroupRatio = oGroup.getWeight() / that._getTotalWeight();

			if (oGroup !== oCurrentGroup) {
				var iFullGroupValue = 100 * fGroupRatio;
				iAccValue += iFullGroupValue;
				return false;
			}

			var fGlobalValue = iShapeValue * fGroupRatio;
			iAccValue += fGlobalValue;
			return true;
		});
		return iAccValue;
	};

	AnimationPropertiesResolver.prototype._getGroupValue = function (oCurrentGroup, iStatusIndicatorValue) {
		var aGroups = this._oStatusIndicator.getGroups();
		var iTotalWeight = this._getTotalWeight();
		var iResult = 0;

		aGroups.some(function (oGroup) {
			var fGroupRatio = oGroup.getWeight() / iTotalWeight;
			var iNewGroupValue;

			if (iStatusIndicatorValue === 0) {
				iNewGroupValue = 0;
			} else if (iStatusIndicatorValue >= 100 * fGroupRatio) {
				iNewGroupValue = 100;
			} else {
				iNewGroupValue = iStatusIndicatorValue / fGroupRatio;
			}

			iStatusIndicatorValue -= iNewGroupValue * fGroupRatio;

			if (oCurrentGroup !== oGroup) {
				return false;
			}

			iResult = iNewGroupValue;
			return true;
		});

		return iResult;
	};

	AnimationPropertiesResolver.prototype._getTotalWeight = function () {
		return this._oStatusIndicator.getGroups().reduce(function (iAccumulator, oGroup) {
			return iAccumulator + oGroup.getWeight();
		}, 0);
	};

	return AnimationPropertiesResolver;
});
}; // end of sap/suite/ui/commons/statusindicator/util/AnimationPropertiesResolver.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.statusindicator.StatusIndicator') ) {
/*!
 * 
		SAP UI development toolkit for HTML5 (SAPUI5)
		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/* globals Promise:true */

// Provides control sap.suite.ui.commons.StatusIndicator.
jQuery.sap.declare('sap.suite.ui.commons.statusindicator.StatusIndicator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/commons/statusindicator/StatusIndicator",[
		"jquery.sap.global",
		"../library",
		"sap/ui/core/Control",
		"sap/ui/core/Core",
		"sap/suite/ui/commons/statusindicator/util/AnimationPropertiesResolver"
	],
	function (jQuery, library, Control, Core, AnimationPropertiesResolver) {
		"use strict";

		/**
		 * Constructor for a new StatusIndicator.
		 *
		 * @param {string} [sId] id for the new control, generated automatically if no id is given
		 * @param {object} [mSettings] initial settings for the new control
		 *
		 * @class
		 * The status indicator control displays a value between 0 and 100.
		 *
		 * A status indicator may consist of multiple groups that gradually display the value. The shapes in the first
		 * group are filled first, the shapes in the second group second, and so on.
		 *
		 * The value of the status indicator is distributed between the groups depending on their weight.
		 *
		 * The filling of the shapes in the groups can be proportional to the value of the status indicator or can be
		 * based on thresholds specified in the <code>discreteThresholds</code> aggregation.

		 * @extends sap.ui.core.Control
		 *
		 * @author SAP SE
		 * @version 1.50.4
		 * @since 1.50
		 *
		 * @constructor
		 * @public
		 * @alias sap.suite.ui.commons.statusindicator.StatusIndicator
		 * @ui5-metamodel This control/element will also be described in the UI5 (legacy) design time metamodel.
		 */
		var StatusIndicator = Control.extend("sap.suite.ui.commons.statusindicator.StatusIndicator",
			/** @lends sap.suite.ui.commons.StatusIndicator.prototype */
			{
				metadata: {
					library: "sap.suite.ui.commons",
					properties: {

						/**
						 * Width of the status indicator.
						 */
						width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "100%"},

						/**
						 * Height of the status indicator.
						 */
						height: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "100%"},

						/**
						 * Percentage value, between 0 and 100, that the status indicator reflects.
						 */
						value: {type: "int", defaultValue: 0},

						/**
						 * Defines the view box surrounding the shapes included in the status indicator.
						 */
						viewBox: {type: "string", defaultValue: null},

						/**
						 * ARIA label for this control to be used by screen reader software.
						 */
						ariaLabel: {type: "string", defaultValue: null}
					},
					defaultAggregation: "groups",
					aggregations: {

						/**
						 * Groups of shapes that display the status indicator's percentage value.
						 * A status indicator must always include at least one group.
						 */
						groups: {type: "sap.suite.ui.commons.statusindicator.ShapeGroup", multiple: true},

						/**
						 * Defines how shapes are filled based on the status indicator's percentage value.
						 */
						propertyThresholds: {
							type: "sap.suite.ui.commons.statusindicator.PropertyThreshold",
							multiple: true
						},

						/**
						 * Specifies discrete thresholds for the status indicator. If discrete thresholds are set,
						 * the status indicator adjusts its appearance to the closest threshold value that is not
						 * greater than the actual percentage value of the status indicator. For example, if the
						 * following discrete thresholds are specified:
						 * <ul>
						 *     <li><code>value = "20"</code></li>
						 *     <li><code>value = "60"</code></li>
						 *     <li><code>value = "100"</code></li>
						 * </ul>
						 * The status indicator displays the following percentage values:
						 * <ul>
						 *     <li><code>0</code> if the actual value is 15</li>
						 *     <li><code>20</code> if the actual value is 20</li>
						 *     <li><code>20</code> if the actual value is 55</li>
						 *     <li><code>60</code> if the actual value is 60</li>
						 *     <li><code>60</code> if the actual value is 79</li>
						 *     <li><code>100</code> if the actual value is 100</li>
						 * </ul>
						 * Please note that these thresholds affect only the appearance of the status inicator, not
						 * its stored value.
						 */
						discreteThresholds: {
							type: "sap.suite.ui.commons.statusindicator.DiscreteThreshold",
							multiple: true
						}
					},
					associations: {

						/**
						 * Controls or IDs that provide a description for this control. Can be used by screen reader software.
						 */
						ariaDescribedBy: {type: "sap.ui.core.Control", multiple: true, singularName: "ariaDescribedBy"},

						/**
						 * Controls or IDs that label this control. Can be used by screen reader software.
						 */
						ariaLabelledBy: {type: "sap.ui.core.Control", multiple: true, singularName: "ariaLabelledBy"}
					},
					events: {

						/**
						 * This event is fired when the user clicks or taps the status indicator.
						 */
						press: {}
					}
				}
			});

		StatusIndicator.prototype.init = function () {
			if (Control.prototype.init) { // check whether superclass implements the method
				Control.prototype.init.apply(this, arguments); // call the method with the original arguments
			}

			this._sortedPropertyThresholds = [];
			this._sortedDiscreteThresholds = [];
			this._bStarted = false;
			this._oCurrentAnimationPromise = null;
			this._oAnimationPropertiesResolver = new AnimationPropertiesResolver(this);
		};

		StatusIndicator.prototype._internalIds = Object.freeze({
			svgNodeId: "svg"
		});

		StatusIndicator.prototype.addPropertyThreshold = function (oThreshold) {
			this.addAggregation("propertyThresholds", oThreshold, true);
			if (this._sortedPropertyThresholds.filter(function (e) {
					return e.getToValue() === oThreshold.getToValue();
				}).length > 0) {
				jQuery.sap.log.fatal("There are two or more property thresholds with the same toValue in thresholds " +
					"aggregation. The last threshold from them has the highest priority");
			}
			this._sortedPropertyThresholds.push(oThreshold);
			this._sortedPropertyThresholds.sort(function (a, b) {
				return a.getToValue() - b.getToValue();
			});
		};

		StatusIndicator.prototype.addDiscreteThreshold = function (oThreshold) {
			this.addAggregation("discreteThresholds", oThreshold, true);
			if (this._sortedDiscreteThresholds.filter(function (e) {
					return e.getValue() === oThreshold.getValue();
				}).length > 0) {
				jQuery.sap.log.fatal("There are two or more discrete thresholds with the same value in thresholds " +
					"aggregation. The last threshold from them has the highest priority");
			}
			this._sortedDiscreteThresholds.push(oThreshold);
			this._sortedDiscreteThresholds.sort(function (a, b) {
				return a.getValue() - b.getValue();
			});
		};

		StatusIndicator.prototype._discreteThresholdsEnabled = function () {
			return this._sortedDiscreteThresholds.length > 0;
		};

		StatusIndicator.prototype._getDiscreteThresholdForValue = function (iValue) {
			var oResult = null;

			this._sortedDiscreteThresholds.every(function (oThreshold) {
				if (iValue >= oThreshold.getValue()) {
					oResult = oThreshold;
					return true;
				}
			});

			return oResult;
		};

		StatusIndicator.prototype._propertyThresholdsEnabled = function () {
			return this._sortedPropertyThresholds.length > 0;
		};

		StatusIndicator.prototype._getPropertyThresholdForValue = function (iValue) {
			var oResult = null;

			this._sortedPropertyThresholds.some(function (oThreshold) {
				if (iValue <= oThreshold.getToValue()) {
					oResult = oThreshold;
					return true;
				}
			});

			return oResult;
		};

		StatusIndicator.prototype._getFullId = function (sInternalId) {
			return this.getId() + "-" + sInternalId;
		};

		StatusIndicator.prototype.onBeforeRendering = function () {
			var that = this;

			this.getGroups().forEach(function (oGroup) {
				oGroup._injectAnimationPropertiesResolver(that._oAnimationPropertiesResolver);
			});
		};

		StatusIndicator.prototype.onAfterRendering = function () {
			this._start();
		};

		StatusIndicator.prototype._start = function () {
			this._bStarted = true;
			this._propagateValueToGroups();
		};

		StatusIndicator.prototype._shouldInvertGroupUpdateOrder = function (aGroupsWithValues) {
			var iTargetGroupIndex;

			aGroupsWithValues.some(function (oGroupWithValue, iIndex) {
				iTargetGroupIndex = iIndex;

				return oGroupWithValue.newValue !== 100;
			});

			var iGroupDisplayingBoundaryIndex;

			this.getGroups().some(function (oGroup, iIndex) {
				iGroupDisplayingBoundaryIndex = iIndex;

				return !oGroup._showsFullProgress();
			});

			return (iTargetGroupIndex < iGroupDisplayingBoundaryIndex);
		};

		StatusIndicator.prototype._propagateValueToGroups = function () {
			var aGroupsWithValues = this._computeGroupValueDistribution();
			var bInvertUpdateOrder = this._shouldInvertGroupUpdateOrder(aGroupsWithValues);

			if (bInvertUpdateOrder) {
				aGroupsWithValues = aGroupsWithValues.reverse();
			}

			this._updateAccessibilityDOM();
			this._oCurrentAnimationPromise = aGroupsWithValues.reduce(function (oAccumulatorPromise, oGroupWithValue) {
				return oAccumulatorPromise.then(function (oResult) {
					if (oResult && oResult.cancelled) {
						jQuery.sap.log.debug("Group animation cancelled.");
						return oResult;
					} else {
						return oGroupWithValue.group._setValue(oGroupWithValue.newValue);
					}
				});
			}, Promise.resolve());

			return this._oCurrentAnimationPromise;
		};

		StatusIndicator.prototype._computeGroupValueDistribution = function () {
			var iValueToBeDistributed = this.getValue();
			var iTotalWeight = this._getTotalWeight();

			return this.getGroups().map(function (oGroup) {
				var fGroupRatio = oGroup.getWeight() / iTotalWeight;
				var iNewGroupValue;

				if (iValueToBeDistributed === 0) {
					iNewGroupValue = 0;
				} else if (iValueToBeDistributed >= 100 * fGroupRatio) {
					iNewGroupValue = 100;
				} else {
					iNewGroupValue = Math.round(iValueToBeDistributed / fGroupRatio);
				}

				iValueToBeDistributed -= Math.round(iNewGroupValue * fGroupRatio);

				return {
					group: oGroup,
					newValue: iNewGroupValue
				};
			});
		};

		/**
		 * @param {int} iValue Value that should be displayed
		 *
		 * @public
		 * @returns {Object} self
		 * Sets the status indicator percentage value.
		 */
		StatusIndicator.prototype.setValue = function (iValue) {
			iValue = Math.round(iValue);

			if (iValue > 100) {
				iValue = 100;
			}
			if (iValue < 0) {
				iValue = 0;
			}

			this.setProperty("value", iValue, true);

			if (this._bStarted) {
				this._propagateValueToGroups();
			}

			return this;
		};

		StatusIndicator.prototype._getTotalWeight = function () {
			return this.getGroups().reduce(function (iAccumulator, oGroup) {
				return iAccumulator + oGroup.getWeight();
			}, 0);
		};

		StatusIndicator.prototype.ontap = StatusIndicator.prototype.firePress;

		StatusIndicator.prototype.onsapenter = StatusIndicator.prototype.firePress;

		StatusIndicator.prototype.onsapspace = StatusIndicator.prototype.firePress;

		StatusIndicator.prototype._getGroupElements = function () {
			// Value distribution can be computed and initial group values can be set only after all groups are added
			// and the control is being prepared for the rendering.
			var aGroupsWithValues = this._computeGroupValueDistribution();

			aGroupsWithValues.forEach(function (oGroupWithValue) {
				oGroupWithValue.group._setInitialValue(oGroupWithValue.newValue);
			});

			return this.getGroups().reduce(function (aAccumulator, oGroup) {
				return aAccumulator.concat(oGroup._getHtmlElements());
			}, []);
		};

		StatusIndicator.prototype._updateAccessibilityDOM = function () {
			var iValue = this.getValue();
			this.$().attr("aria-valuenow", iValue);
			this.$().attr("aria-valuetext", this._createValueTextMessage(iValue));
		};

		StatusIndicator.prototype._createValueTextMessage = function (iValue) {
			var sDiscreteAriaLabel = null;
			var bAboveDiscrete = null;
			var sPropertyAriaLabel = null;

			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

			if (this._discreteThresholdsEnabled()) {
				var oDiscreteThreshold = this._getDiscreteThresholdForValue(iValue);

				if (oDiscreteThreshold) {
					sDiscreteAriaLabel = oDiscreteThreshold.getAriaLabel();
					bAboveDiscrete = true;
				} else {
					sDiscreteAriaLabel = this._sortedDiscreteThresholds[0].getAriaLabel();
					bAboveDiscrete = false;
				}
			}

			if (this._propertyThresholdsEnabled()) {
				var oPropertyThreshold = this._getPropertyThresholdForValue(iValue);

				if (oPropertyThreshold) {
					sPropertyAriaLabel = oPropertyThreshold.getAriaLabel();
				}
			}

			var sValueText;

			if (sDiscreteAriaLabel) {
				if (sPropertyAriaLabel) {
					if (bAboveDiscrete) {
						sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE_ABOVE_THRESHOLD_COLOR", [iValue, sDiscreteAriaLabel, sPropertyAriaLabel]);
					} else {
						sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE_BELOW_THRESHOLD_COLOR", [iValue, sDiscreteAriaLabel, sPropertyAriaLabel]);
					}
				} else {
					if (bAboveDiscrete) {
						sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE_ABOVE_THRESHOLD", [iValue, sDiscreteAriaLabel]);
					} else {
						sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE_BELOW_THRESHOLD", [iValue, sDiscreteAriaLabel]);
					}
				}
			} else if (sPropertyAriaLabel) {
				sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE_COLOR", [iValue, sPropertyAriaLabel]);
			} else {
				sValueText = oResourceBundle.getText("STATUS_INDICATOR_VALUE", [iValue]);
			}
			return sValueText;
		};

		return StatusIndicator;

	}, /* bExport= */ true);

}; // end of sap/suite/ui/commons/statusindicator/StatusIndicator.js
