// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.fe.library-all');
if ( !jQuery.sap.isDeclared('sap.fe.Action') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.Action'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
sap.ui.define("sap/fe/Action",[
	'sap/m/Button',
	'sap/m/ButtonType'
], function (Button, ButtonType) {
	"use strict";

	var Button = Button.extend("sap.fe.Action", {
		metadata: {
			properties: {
				actionName: "string",
				emphasized: 'boolean',
				mode: 'string',           // Inline / Isolated / ChangeSet
				multiplicityFrom: {
					type: "int"
				},
				multiplicityTo: {
					type: "int"
				}

			},
			events: {
				"callAction": {}
			}
		},

		onBeforeRendering: function () {
			if (this.getEmphasized()) {
				this.setType(ButtonType.Emphasized);
			}
		},

		onclick: function (evt) {
			this.fireCallAction({
				actionName: this.getActionName(),
				actionLabel: this.getText()
			});
		},

		renderer: {}
	});

	return Button;

}, /* bExport= */true);

}; // end of sap/fe/Action.js
if ( !jQuery.sap.isDeclared('sap.fe.FilterBar.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.FilterBar.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/FilterBar.designtime",[], function () {
	"use strict";

	return {
		aggregations: {}
	};

}, /* bExport= */ false);

}; // end of sap/fe/FilterBar.designtime.js
if ( !jQuery.sap.isDeclared('sap.fe.Table.designtime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.Table.designtime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/Table.designtime",[], function () {
	"use strict";

	return {
		aggregations: {
			columns: {
				//childNames: {
				//	singular: "COLUMN_NAME",
				//	plural: "COLUMN_NAME_PLURAL"
				//},
				actions: {
					addODataProperty : "addColumn",
					move: "moveColumns",
					remove : "removeColumn"
				}
			},
			actions: {
			},
			_content : {
				ignore : true
			}
		},
		name: "{name}",
		description: "{description}",
		properties: {
			context: {
				ignore: true
			},
			tableBindingPath : {
				ignore : true
			},
			type : {
				ignore : false
			},
			interactionType : {
				ignore : false
			},
			filterBarId : {
				ignore : true
			},
			enabled : {
				ignore : true
			}
		}
	};

}, /* bExport= */ false);

}; // end of sap/fe/Table.designtime.js
if ( !jQuery.sap.isDeclared('sap.fe.controller.ActionController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controller.ActionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/fe/controller/ActionController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/m/MessageBox",
	"sap/m/MessageToast"
], function (jQuery, BaseObject, MessageBox, MessageToast) {
	"use strict";

	function getMethods(oTemplateUtils) {

		var oMessageUtils = oTemplateUtils.getMessageUtils();

		/*
		 Call Action
		 */

		function callAction(oEvent) {
			var mParameters = oEvent.getParameters(),
				fnSuccess = mParameters.success,
				fnError = mParameters.error,
				aContexts = mParameters.contexts,
				oModel = aContexts[0].getModel(),
				oAction,
				oBusyPromise,
				aActionPromises = [],
				sAction = mParameters.actionName + "(...)",
				bChangeSet = mParameters.mode === 'ChangeSet',
				sGroupId,
				i;

			if (mParameters.checkBusy) {
				if (oTemplateUtils.getBusyHelper().isBusy()) {
					return fnError ? fnError("Application is busy") : jQuery.noop();
				}
			}

			for (i = 0; i < aContexts.length; i++) {
				oAction = oModel.bindContext(sAction, aContexts[i]);

				if (aContexts.length === 1) {
					aActionPromises.push(oAction.execute('$auto'));
					oBusyPromise = aActionPromises[0];
				} else {
					sGroupId = (bChangeSet) ? '$direct' : 'action' + i;
					aActionPromises.push(oAction.execute(sGroupId));
				}
			}

			if (aContexts.length > 1) {
				if (bChangeSet) {
					oBusyPromise = oModel.submitBatch("actions");
				} else {
					// temp solution only, to be clarified with OData model colleagues,
					// until then we pass the busy helper only the last promise which should be OK for now
					for (i = 0; i < aContexts.length; i++) {
						oBusyPromise = oModel.submitBatch("action" + i);
					}
				}

				if (mParameters.setBusy) {
					oTemplateUtils.getBusyHelper().setBusy(oBusyPromise);
				}
			} else if (mParameters.setBusy) {
				oTemplateUtils.getBusyHelper().setBusy(oBusyPromise);
			}

			function fnDifferentiate(promise) {
				return promise.then(function (v) {
						return {v: v, status: "resolved"};
					},
					function (e) {
						return {e: e, status: "rejected"};
					});
			}

			Promise.all(aActionPromises.map(fnDifferentiate)).then(function (results) {
				var rejectedItems = [];
				var iResultCount;
				for (iResultCount = 0; iResultCount < results.length; iResultCount++) {
					if (results[iResultCount].status === "rejected") {
						rejectedItems.push(results[iResultCount].e);
					}
				}
				if (rejectedItems.length > 0) {
					oMessageUtils.handleRequestFailed(rejectedItems);
				}

				for (iResultCount = 0; iResultCount < results.length; iResultCount++) {
					if (results[iResultCount].status === "resolved") {
						oMessageUtils.handleSuccess(oTemplateUtils.getText("SAPFE_ACTION_SUCCESS", mParameters.actionLabel));

						// This is needed because the OData model does not update the returned data, already requested
						// from the OData model. as this anyway refreshes the complete list binding we
						// take the first selected context and refresh the binding, this refreshes the table
						aContexts[0].getBinding().refresh("$auto");

						fnSuccess ? fnSuccess() : jQuery.noop();
					}
				}
			});
		}

		return {
			callAction: callAction
		};
	}

	return BaseObject.extend(
		"sap.fe.controller.ActionController.js", {
			constructor: function (oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateUtils));
			}
		});
});

}; // end of sap/fe/controller/ActionController.js
if ( !jQuery.sap.isDeclared('sap.fe.controller.NavigationController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controller.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/fe/controller/NavigationController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/m/MessageBox",
	"sap/m/MessageToast",
	"sap/m/MessagePage",
	"sap/m/Link"
], function (jQuery, BaseObject, MessageBox, MessageToast, MessagePage, Link) {
	"use strict";

	function getMethods(oTemplateContract, oTemplateUtils) {
		// Please note: oTemplateUtils is undefined in case the navigation controller is used before any template
		// is instantiated - so be prepared for this

		var oMessagePage;

		function navigateToMessagePage(mParameters) {
			if (!oMessagePage) {
				oMessagePage = new MessagePage({
					showHeader: false
				});

				oTemplateContract.oNavContainer.addPage(oMessagePage);
			}

			oMessagePage.setText(mParameters.text);
			oMessagePage.setIcon("sap-icon://message-error");
			if (mParameters.technicalMessage) {
				oMessagePage.setCustomDescription(
					new Link({
						text: mParameters.description,
						press: function() {
							MessageBox.show(mParameters.technicalMessage, {
								icon: MessageBox.Icon.ERROR,
								title: "Error",
								actions: [MessageBox.Action.OK],
								defaultAction: MessageBox.Action.OK,
								details: mParameters.technicalDetails || "",
								contentWidth: "60%"
							});
						}
					})
				);
			} else {
				oMessagePage.setDescription(mParameters.description || '');
			}
			oTemplateContract.oNavContainer.to(oMessagePage);

		}

		return {
			navigateToMessagePage: navigateToMessagePage
		};
	}

	return BaseObject.extend(
		"sap.fe.controller.NavigationController.js", {
			constructor: function (oTemplateContract, oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateContract, oTemplateUtils));
			}
		});
});

}; // end of sap/fe/controller/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Field.FieldAnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that are needed for the sap.fe.controls._Field.
	 */
	jQuery.sap.declare("sap.fe.controls._Field.FieldAnnotationHelper");

	sap.fe.controls._Field.FieldAnnotationHelper = {
		formatDraftOwner: function (vDraftUUID, vDraftInProcessByUser, vDraftInProcessByUserDesc, vDraftLastChangedByUser, vDraftLastChangedByUserDesc, bHasDraftEntity) {
			var sDraftOwnerDescription = "";
			if (vDraftUUID && bHasDraftEntity) {
				var sUserDescription = vDraftInProcessByUserDesc || vDraftInProcessByUser || vDraftLastChangedByUserDesc || vDraftLastChangedByUser;
				var oResourceBundle = this.getModel("sap.fe.i18n").getResourceBundle();
				if (sUserDescription) {
					sDraftOwnerDescription = oResourceBundle.getText("SAPFE_DRAFT_OWNER", [sUserDescription]);
				} else {
					sDraftOwnerDescription = oResourceBundle.getText("SAPFE_DRAFT_ANOTHER_USER");
				}
			}
			return sDraftOwnerDescription;
		},
		buildExpressionForCriticalityIcon: function (sCriticalityProperty) {
			if (sCriticalityProperty) {
				var sExpression = "{= (${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Negative') || (${" + sCriticalityProperty + "} === '1') || (${" + sCriticalityProperty + "} === 1) ? 'sap-icon://status-negative' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Critical') || (${" + sCriticalityProperty + "} === '2') || (${" + sCriticalityProperty + "} === 2) ? 'sap-icon://status-critical' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Positive') || (${" + sCriticalityProperty + "} === '3') || (${" + sCriticalityProperty + "} === 3) ? 'sap-icon://status-positive' : " +
					"'sap-icon://status-inactive' }";

				return sExpression;
			}
		},

		buildExpressionForCriticalityColor: function (sCriticalityProperty) {
			if (sCriticalityProperty) {
				var sExpression = "{= (${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Negative') || (${" + sCriticalityProperty + "} === '1') || (${" + sCriticalityProperty + "} === 1) ? 'Error' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Critical') || (${" + sCriticalityProperty + "} === '2') || (${" + sCriticalityProperty + "} === 2) ? 'Warning' : " +
					"(${" + sCriticalityProperty + "} === 'com.sap.vocabularies.UI.v1.CriticalityType/Positive') || (${" + sCriticalityProperty + "} === '3') || (${" + sCriticalityProperty + "} === 3) ? 'Success' : " +
					"'None' }";

				return sExpression;
			}
		},

		getFieldContext: function (oContext, oField) {
			// in the first wave we only support responsiveTable, therefore we directly return this value, in the
			// future we need to introduce more logic here
			return 'responsiveTable';

			/*
			if (oContext.getPath().indexOf('@com.sap.vocabularies.UI.v1.LineItem') >= 0) {
				return 'responsiveTable';
			} else {
				return 'form';
			}*/
		},

		getStableIdPartFromDataField: function (oDataField, mParameter) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action);
			} else if (oDataField.$Type && (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")) {
				if (typeof oDataField.SemanticObject == "string") {
					sIdPart = sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject);
				} else if (oDataField.SemanticObject.$Path) {
					sIdPart = sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.$Path);
				}
				if (typeof oDataField.Action == "string") {
					sIdPart = sIdPart + "::" + sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action);
				} else if (oDataField.Action && oDataField.Action.$Path) {
					sIdPart = sIdPart + "::" + sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.$Path);
				}
				return sIdPart;
			} else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
				return sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Target.$AnnotationPath);
			} else if (oDataField.Value && oDataField.Value.$Path) {
				return sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.$Path);
			} else if (oDataField.Value && oDataField.Value.$Apply && oDataField.Value.$Function === "odata.concat") {
				for (var i = 0; i < oDataField.Value.$Apply.length; i++) {
					if (oDataField.Value.$Apply[i].$Path) {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.$Apply[i].$Path);
					}
				}
				return sPathConcat;
			} else if (mParameter && mParameter.context && mParameter.context.getObject("@sapui.name")){
				// the context is not refering to da data field but directly to a property, return the property name
				return sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(mParameter.context.getObject("@sapui.name"));
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		}
	};

	sap.fe.controls._Field.FieldAnnotationHelper.getFieldContext.requiresIContext = true;

})();

}; // end of sap/fe/controls/_Field/FieldAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Field.FieldController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controls._Field.FieldController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_Field/FieldController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/Action"
], function (jQuery, BaseObject, Action) {
	"use strict";

	var FieldController = BaseObject.extend("sap.fe.controls._Field.FieldController", {
		constructor: function (oField, oTable) {
			BaseObject.apply(this, arguments);
			this.oField = oField;
			this.oTable = oTable;
		}
	});


	/*
	      Please note: those methods below are called from the table control as well - currently in this case
	      this.oField is empty, only the oEvent can be used as there is no real instance of the field
	      there is a connection to the table (this.oTable) but this is also not available always so be prepared for both
	 */

	FieldController.prototype.onContactDetails = function (oEvent) {
		var oPopover;
		if (oEvent.getSource().data("Location") === "Header") {
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else if (oEvent.getSource().data("Location") === "Section") {		//ContactPopUpover in Section
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else if (oEvent.getSource().data("Location") === "SmartTable") {	//ContactPopUpOver in SmartTable
			oPopover = oEvent.getSource().getParent().getAggregation("items")[0];
		} else {
			oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation(
				"items")[1];
		}
		oPopover.setBindingContext(oEvent.getSource().getBindingContext());
		oPopover.openBy(oEvent.getSource());
	};

	FieldController.prototype.onDraftLinkPressed = function (oEvent) {
		var oButton = oEvent.getSource();
		var oBindingContext = oButton.getBindingContext();
		var oParent;
		if (!this._oDraftInfoPopover) {
			oParent = this.oField || this.oTable;
			this._oDraftInfoPopover = sap.ui.xmlfragment("sap.fe.controls._Fragments.DraftInfoPopover", this);
			oParent.addDependent(this._oDraftInfoPopover);
		}
		this._oDraftInfoPopover.setBindingContext(oBindingContext);
		this._oDraftInfoPopover.openBy(oButton);
	};

	FieldController.prototype.closeDraftAdminPopover = function (oEvent) {
		this._oDraftInfoPopover.close();
	};

	FieldController.prototype.onDataFieldWithIntentBasedNavigationPressed = function (oEvent) {
		var oLink = oEvent.getSource();
		var sSemanticObject = oLink.data('SemanticObject');
		var sAction = oLink.data('Action');
		var oData = oLink.getParent().getBindingContext().getObject();
		var oParameters = {};
		for (var sProperty in oData) {
			if (sProperty && sProperty[0] !== "@" && typeof oData[sProperty] === 'string') {
				oParameters[sProperty] = oData[sProperty];
			}
		}
		var oCrossAppNavigator = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
		if (oCrossAppNavigator) {
			oCrossAppNavigator.toExternal({
				target: {
					semanticObject: sSemanticObject,
					action: sAction
				},
				params: oParameters
			});
		}
	};


	return FieldController;

});






}; // end of sap/fe/controls/_Field/FieldController.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._FilterBar.FilterBarAnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that are needed for the sap.fe.controls._Table.
	 */
	jQuery.sap.declare("sap.fe.controls._FilterBar.FilterBarAnnotationHelper");

	sap.fe.controls._FilterBar.FilterBarAnnotationHelper = {
		getFieldPath : function(oInterface, sEntitySet, sFieldPath){
			var oMetaModel, aSections, oProperty, bToAnyFound;

			if (sFieldPath.indexOf('/') > -1){
				oMetaModel = oInterface.getInterface(0).getModel();
				aSections = sFieldPath.split('/');
				for (var i = 0; i < ( aSections.length - 1); i++){
					oProperty = oMetaModel.getObject("/" + sEntitySet + "/" + aSections.slice(0,(i + 1)).join('/'));

					if (oProperty && oProperty["$kind"] === "NavigationProperty" && oProperty["$isCollection"]){
						aSections[i] = aSections[i] + '*';
						bToAnyFound = true;
					}
				}
				if (bToAnyFound){
					sFieldPath = aSections.join('/');
				}
			}

			return sFieldPath;
		},

		getValueStatePath : function(oInterface, sEntitySet, sFieldPath){
			var _sFieldPath = sap.fe.controls._FilterBar.FilterBarAnnotationHelper.getFieldPath(oInterface, sEntitySet, sFieldPath);
			return "{sap.fe.cm>/fieldPath/" + _sFieldPath + "/valueState}";
		},

		getValueStateTextPath : function(oInterface, sEntitySet, sFieldPath){
			var _sFieldPath = sap.fe.controls._FilterBar.FilterBarAnnotationHelper.getFieldPath(oInterface, sEntitySet, sFieldPath);
			return "{sap.fe.cm>/fieldPath/" + _sFieldPath + "/valueStateText}";
		},

		getStableIdPartFromFilterItem : function(sFieldPath) {
			return sap.fe.core.AnnotationHelper.replaceSpecialCharsInId(sFieldPath);
		}
	};

	sap.fe.controls._FilterBar.FilterBarAnnotationHelper.getFieldPath.requiresIContext = true;
	sap.fe.controls._FilterBar.FilterBarAnnotationHelper.getValueStatePath.requiresIContext = true;
	sap.fe.controls._FilterBar.FilterBarAnnotationHelper.getValueStateTextPath.requiresIContext = true;
})();

}; // end of sap/fe/controls/_FilterBar/FilterBarAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._FilterBar.FilterBarController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controls._FilterBar.FilterBarController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.FilterField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.ODataSuggestProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.OperatorSuggestProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.FixedValueListProvider'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_FilterBar/FilterBarController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/ui/model/json/JSONModel",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/m/SearchField",
	"sap/m/Bar",
	"sap/m/Label",
	"sap/ui/mdc/FilterField",
	"sap/ui/mdc/ODataSuggestProvider",
	"sap/ui/mdc/OperatorSuggestProvider",
	"sap/ui/mdc/FixedValueListProvider"
], function (jQuery, BaseObject, JSONModel, Dialog, Button, SearchField, Bar, Label, FilterField, ODataSuggestProvider, OperatorSuggestProvider, FixedValueListProvider) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param
	 */

	var FilterBarController = BaseObject.extend("sap.fe.controls._FilterBar.FilterBarController", {
		constructor: function (oFilterBar) {
			BaseObject.apply(this, arguments);
			this.oFilterBar = oFilterBar;
			this.mValueListRequests = {};
			this.mValueLists = {};
			this.mSuggestionLists = {};
		}
	});

	FilterBarController.prototype.getQueryParameters = function () {
		var oQueryParameters = {}, sSearch,
			oSearch;

		// TODO: the table should now it's condition model, will change this later
		oQueryParameters.conditionModel = this.getConditionModel();

		// set $search
		oSearch = this.getSearchControl();
		if (oSearch) {
			sSearch = oSearch.getValue();
			oQueryParameters["$search"] = sSearch || undefined;
		}

		return oQueryParameters;
	};


	FilterBarController.prototype.handleValueHelpRequest = function (oEvent) {
		var oFilterField = oEvent.getSource();
		var sId = oFilterField.getId();

		var oConditionModel = this.getConditionModel();
		/*TEST CODE*/

		var sFieldPath = oFilterField.getFieldPath();
		var oCM = oConditionModel.clone(sFieldPath);
		var that = this;

		if (this.mValueLists[sId]) {
			this.mValueLists[sId].then(function (oValueList) {
				oValueList.getContent()[0].setModel(oCM,"cm");
				oValueList.getContent()[0].setBindingContext(oCM.createBindingContext("/"),"cm");
				oValueList.open();
			});
		} else {

			var oResetButton = new Button({
				text: '{sap.fe.i18n>SAPFE_RESET}'
			});

			var oTitle = new Label();

			var oValueList = new Dialog({
				// the title is parked in the custom data - this will be changed in the next release
				customHeader: new Bar({
					contentMiddle: [oTitle],
					contentRight: [oResetButton]
				}),
				contentWidth: "75%",
				contentHeight: "75%",
				verticalScrolling: false,
				resizable : false,
				draggable : true,
				endButton: new Button({
					text: '{sap.fe.i18n>SAPFE_CANCEL}',
					press: function () {

						oValueList.getContent()[0].getModel("cm").destroy();
						oValueList.close();
					}
				}),
				beginButton: new Button({
					text: '{sap.fe.i18n>SAPFE_OK}',
					press: function () {
						var oConditionModel = that.getConditionModel();
						var localFieldPath = oValueList.getContent()[0].getController().fieldPath;
						var oValueModel = oValueList.getContent()[0].getModel("cm");
						oConditionModel.merge(localFieldPath,oValueModel);
						oValueList.close();
					}
				})
			}).addStyleClass("sapUiNoContentPadding");
			oFilterField.addDependent(oValueList);

			var oOperatorConfig = oFilterField.getFilterOperatorConfig();
			var aOperators = oOperatorConfig.getOperatorsForType(oFilterField.getDataType());

			var aOperatorsData = [];
			aOperators.forEach(function(element) {
				var oOperator = oOperatorConfig.getOperator(element);
				if (oOperator.showInSuggest !== undefined && oOperator.showInSuggest === false) {
					return;
				}
				var sTxtKey = oOperator.textKey || "operators." + oOperator.name + ".longText";
				var sText = oOperator.getTypeText(sTxtKey, oFilterField._getDataType().getName().toLowerCase());
				if (sText === sTxtKey) {
					sText = oOperator.longText;
				}
				aOperatorsData.push({
					key: element,
					additionalText: sText
				});
			}, this);

			var oOperatorModel = new sap.ui.model.json.JSONModel();
			oOperatorModel.setData(aOperatorsData);

			oValueList.open();

			this.mValueLists[sId] = (this.mValueListRequests[sId] || this.requestValueListMetadata(oFilterField)).then(function (mValueListInfo) {
				var oValueListModel = new JSONModel(mValueListInfo);
				oValueListModel.setProperty("/title", oFilterField.getCustomData()[0].getValue());

				var oValueListContent = sap.ui.view({
					viewName: "sap.fe.controls._ValueList.ValueList",
					type: "XML",
					height: "100%",
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								valueList: oValueListModel.createBindingContext("/")
							},
							models: {
								valueList: oValueListModel
							}
						}
					}
				});

				oValueListContent.setModel(oCM, "cm");
				oValueListContent.setModel(oOperatorModel,"om");
				oValueListContent.setBindingContext(oOperatorModel.createBindingContext("/"),"om");
				oValueListContent.setBindingContext(oCM.createBindingContext("/"),"cm");
				oValueListContent.setModel(oValueListModel, "valueList");
				oValueListContent.setModel(mValueListInfo.$model);

				//To get the DataType of the filterfield for setting token text
				var oTempPrivateModel = new JSONModel();
				oValueListContent.setModel(oTempPrivateModel, "oTempPrivate");
				oValueListContent.getModel("oTempPrivate").setProperty("/FilterFieldType", oFilterField._getDataType());

				return oValueListContent.loaded().then(function (oValueListContent) {
					oResetButton.attachPress(function (oEvent) {
						oCM = oConditionModel.clone(sFieldPath);
						oValueListContent.getModel("cm").setData(oCM.getData());
						oValueListContent.getController().updateTableSelections();
					});
					oTitle.setText(oValueListContent.getModel("valueList").getProperty("/title"));
					oValueListContent.getController().fieldPath = sFieldPath;
					oValueList.removeAllContent();

					oValueList.addContent(oValueListContent);

					//Adds one new empty condition into the condition model when there is no value in define condition tab when we create the valueHelp view
					// if (oCM.getConditions().length === 0) {
					// 	oCM.insertCondition(0, sFieldPath, "EQ", []);
					// }
					return Promise.resolve(oValueList);

				});
			});
		}
	};

	FilterBarController.prototype.handleSuggest = function (oProvider, oEvent) {
		/* currently the inner field fires the event - this might change in the future once we agree on a final
		 API in the MDC Filter Field - then we night to change this coding */
		var oInnerFilterField = oEvent.getSource();
		var oFilterField = oEvent.getSource().getParent();
		var sEntitySet = this.getEntitySet();
		var oMetaModel = oFilterField.getModel().getMetaModel();
		var oSearchRestrictions, mBindingParameters = {},
			sId = oFilterField.getId();
		// temp solution - we will get rid of custom data in the next release
		var bFixedValues = oFilterField.getCustomData()[2].getValue() === 'true';


		if (!bFixedValues) {
			oSearchRestrictions = oMetaModel.getObject("/" + sEntitySet + "@Org.OData.Capabilities.V1.SearchRestrictions");
			if (!oSearchRestrictions || oSearchRestrictions.Searchable || oSearchRestrictions.Searchable === undefined) {
				// the entity set is searchable - we can use $search
				mBindingParameters = {
					$search: oEvent.getParameters().suggestValue
				};
			} else {
				// Suggest Lists entity sets without $search support is not yet supported
				return;
			}
		}

		if (this.mSuggestionLists[sId]) {
			if (!bFixedValues){
				this.mSuggestionLists[sId].then(function () {
					var oSuggestListBinding = oInnerFilterField.getBinding("suggestionRows");
					oSuggestListBinding.changeParameters(mBindingParameters);
				});
			}
		} else {
			this.mSuggestionLists[sId] = ( this.mValueListRequests[sId] || this.requestValueListMetadata(oFilterField)).then(function (mValueListInfo) {
				mValueListInfo.SuggestBindingParameters = JSON.stringify(mBindingParameters);

				var oValueListModel = new JSONModel(mValueListInfo);

				var oSuggestionList = sap.ui.view({
					viewName: "sap.fe.controls._ValueList.SuggestionList",
					type: "XML",
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								valueList: oValueListModel.createBindingContext("/")
							},
							models: {
								valueList: oValueListModel
							}
						}
					}
				});

				oSuggestionList.setModel(mValueListInfo.$model);

				return oSuggestionList.loaded().then(function () {
					oProvider.setTable(oSuggestionList.getContent()[0]);
					if (mValueListInfo.__sapfe){
						if (mValueListInfo.__sapfe.keyPath){
							oProvider.setKeyPath(mValueListInfo.__sapfe.keyPath);
						}
						if (mValueListInfo.__sapfe.descriptionPath){
							oProvider.setDescriptionPath(mValueListInfo.__sapfe.descriptionPath);
						}
					}
				});
			});
		}
	};

	FilterBarController.prototype.requestValueListMetadata = function (oFilterField) {
		var that = this;
		this.mValueListRequests[oFilterField.getId()] = oFilterField.getModel().getMetaModel().requestValueListInfo('/' + this.getEntitySet() + '/' + oFilterField.getFieldPath().replace(/\*/g, '')).then(function (mValueListInfo) {
			var mParameters;

			if (mValueListInfo[""]) {
				// determine key and description path and store it in the value list info
				mParameters = mValueListInfo[""].Parameters;

				var sLocalDataProperty = oFilterField.getModel().getMetaModel().getObject('/' + that.getEntitySet() + '/' + oFilterField.getFieldPath().replace(/\*/g, '') + "@sapui.name");

				// determine the key and the description path
				for (var i = 0; i < mParameters.length; i++) {
					if (mParameters[i].LocalDataProperty && mParameters[i].LocalDataProperty.$PropertyPath === sLocalDataProperty) {
						// we store this information into the value list info - we will set this information to the filter field in the future
						mValueListInfo[""].__sapfe = {
							keyPath: mParameters[i].ValueListProperty,
							descriptionPath: mValueListInfo[""].$model.getMetaModel().getObject("/" + mValueListInfo[""].CollectionPath + "/" + mParameters[i].ValueListProperty + "@com.sap.vocabularies.Common.v1.Text/$Path")
						};

						// there should be always only one parameter with the property field path as output
						break;
					}
				}

				return mValueListInfo[""];
			} else {
				throw ("no unqualified value list found - currently qualified value lists are not considered");
			}

		}, function (oError) {
			throw (oError.message);
		});

		return this.mValueListRequests[oFilterField.getId()];

	};

	FilterBarController.prototype.setFilterSummary = function () {
		var oSearch = this.getSearchControl(),
			oDraftEditState = this.getDraftEditStateControl(),
			sSearch, sFilterSummary = "", aFilter = [], i;

		var oResourceBundle = this.oFilterBar.getModel("sap.fe.i18n").getResourceBundle();

		if (oSearch) {
			sSearch = oSearch.getValue();
		}

		if (sSearch) {
			sFilterSummary = oResourceBundle.getText("SAPFE_FILTERBAR_SEARCHBY") + ": " + sSearch + ((aFilter.length > 0) ? " | " : "");
		}

		if (oDraftEditState && oDraftEditState.getSelectedKey() !== '0') {
			aFilter.push(oResourceBundle.getText("SAPFE_FILTERBAR_EDITING_STATUS"));
		}

		var aFilterFields = this.getFilterFieldControls();

		for (i = 0; i < aFilterFields.length; i++) {
			if (aFilterFields[i].getConditions().length > 0) {
				// we park the title of the filter in the custom data - this will be changed with the next release
				aFilter.push(aFilterFields[i].getCustomData()[0].getValue());
			}
		}

		if (aFilter.length > 0) {
			sFilterSummary += oResourceBundle.getText("SAPFE_FILTERBAR_FILTERBY") + " (" + aFilter.length + "): ";
			for (i = 0; i < aFilter.length; i++) {
				sFilterSummary += ((i > 0) ? ', ' : '') + aFilter[i];
			}
		}

		if (!sFilterSummary) {
			sFilterSummary = oResourceBundle.getText("SAPFE_FILTERBAR_FILTERBYNONE");
		}

		this.oFilterBar.setFilterSummary(sFilterSummary);

	};

	FilterBarController.prototype.getEntitySet = function () {
		// we currently expect that we can just remove the / of the entitySet context path
		return this.oFilterBar.getEntitySetContext().substr(1);
	};

	FilterBarController.prototype.getConditionModel = function () {
		return this.oFilterBar.getModel(this.oFilterBar.getConditionModelName());
	};

	FilterBarController.prototype.getDraftEditStateControl = function () {
		var aContent = this.oFilterBar.getInnerFilterBar().getContent();
		var oFilterItem;

		for (var i = 0; i < aContent.length; i++) {
			oFilterItem = aContent[i].getItems()[1];
			if (oFilterItem.getBinding("items") && oFilterItem.getBinding("items").getPath() === "/editStates" && oFilterItem.getBinding("items").getModel() === oFilterItem.getModel("$draft")) {
				return oFilterItem;
			}
		}
	};

	FilterBarController.prototype.getSearchControl = function () {
		var aContent = this.oFilterBar.getInnerFilterBar().getContent();
		var oFilterItem;

		for (var i = 0; i < aContent.length; i++) {
			oFilterItem = aContent[i].getItems()[1];
			if (oFilterItem instanceof SearchField) {
				return oFilterItem;
			}
		}
	};

	FilterBarController.prototype.getFilterFieldControls = function () {
		var aContent = this.oFilterBar.getInnerFilterBar().getContent();
		var oFilterItem,
			aFilterFields = [];

		for (var i = 0; i < aContent.length; i++) {
			oFilterItem = aContent[i].getItems()[1];
			if (oFilterItem instanceof FilterField) {
				aFilterFields.push(oFilterItem);
			}
		}

		return aFilterFields;
	};

	FilterBarController.prototype.getAppState = function () {
		var oConditionModel = this.getConditionModel(),
			oDraftEditState = this.getDraftEditStateControl(),
			oSearch = this.getSearchControl(),
			oAppState = {};

		if (oConditionModel) {
			oAppState.conditionModel = oConditionModel.serialize();
		}

		if (oDraftEditState) {
			oAppState.draftEditState = oDraftEditState.getSelectedKey();
		}

		if (oSearch) {
			oAppState.search = oSearch.getValue();
		}

		return oAppState;
	};

	FilterBarController.prototype.setAppState = function (oAppState) {
		var oConditionModel = this.getConditionModel(),
			oDraftEditState = this.getDraftEditStateControl(),
			oSearch = this.getSearchControl();

		if (oAppState.conditionModel) {
			if (oConditionModel) {
				oConditionModel.parse(oAppState.conditionModel);
			} else {
				throw ("app state contains condition model state but condition model not yet set");
			}
		}

		if (oAppState.draftEditState && oDraftEditState) {
			oDraftEditState.setSelectedKey(oAppState.draftEditState);
		}

		if (oAppState.search && oSearch) {
			oSearch.setValue(oAppState.search);
		}
	};

	FilterBarController.prototype.createSuggestProviders = function () {
		var aFilterFields = this.getFilterFieldControls(),
			bSuggest, bFixedValues,
			oFilterField;

		for (var i = 0; i < aFilterFields.length; i++) {
			oFilterField = aFilterFields[i];
			/* we park the information if the filter field provides a suggestion or not in the custom data of the
			 filter field - this will be changed in the next release	 */
			bSuggest = oFilterField.getCustomData()[1].getValue() === 'true';
			bFixedValues = oFilterField.getCustomData()[2].getValue() === 'true';

			if (bSuggest) {
				new ODataSuggestProvider({
					control: oFilterField,
					enableFilterSuggest: false,
					suggest: this.handleSuggest.bind(this)
				});

			} else if (bFixedValues){
				new FixedValueListProvider({
					control: oFilterField,
					enableFilterSuggest: true,
					suggest: this.handleSuggest.bind(this)
				});


				/* according to UX we disable the Operator Suggest Provider for the first delivery */
				//} else {
				//	new OperatorSuggestProvider({control: oFilterField});
			}
		}

	};

	return FilterBarController;

});

}; // end of sap/fe/controls/_FilterBar/FilterBarController.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._P13nSettings.P13nSettings.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controls._P13nSettings.P13nSettings.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_P13nSettings/P13nSettings.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/Sorter",
	"sap/ui/model/json/JSONModel"
], function (Controller, Sorter, JSONModel) {
	"use strict";
	return Controller.extend("sap.fe.controls._P13nSettings.P13nSettings", {
		//Event handler for Cancel button
		onCancel: function (oEvent) {
			oEvent.getSource().close();
			this.getView().destroy();
		},

		//Event handler for OK button
		onConfirm: function (oEvent) {
			var aPanels = oEvent.getSource().getPanels(),
				aCondition = [],
				aSorters = [],
				sPath,
				bDescending,
				iIndex;

			for (iIndex in aPanels) {
				var sPanelName = aPanels[iIndex].getMetadata().getName();
				if (sPanelName === "sap.m.P13nSortPanel") {
					aCondition.sortCondition = aPanels[iIndex]._getConditions();
				}
				if (sPanelName === "sap.m.P13nGroupPanel") {
					aCondition.groupCondition = aPanels[iIndex]._getConditions();
				}
			}

			var fnGroup = function (oContext) {
				sPath = (aCondition.groupCondition && aCondition.groupCondition[0].keyField);
				var sKey = oContext.getProperty(sPath);
				var sName = (aCondition.groupCondition[0] && aCondition.groupCondition[0].text);

				if (sName.indexOf(":") > 0) {
					sName = sName.substr(0, sName.indexOf(":"));
				}

				return {
					key: sKey,
					text: sName + " : " + sKey
				};
			};

			//grouping
			if (aCondition.groupCondition && aCondition.groupCondition.length > 0) {
				sPath = aCondition.groupCondition[0] && aCondition.groupCondition[0].keyField;
				bDescending = !!(aCondition[0] && aCondition[0].operation === "GroupDescending");
				var oGroupSorter = new Sorter(sPath, bDescending, fnGroup);
				aSorters.push(oGroupSorter);
			}

			//sorting
			if (aCondition.sortCondition) {
				for (iIndex in aCondition.sortCondition) {
					sPath = aCondition.sortCondition[iIndex].keyField;
					bDescending = !!(aCondition.sortCondition[iIndex].operation === "Descending");
					aSorters.push(new Sorter(sPath, bDescending));
				}
			}

			this._saveP13DialogState(aCondition);

			this.oTableController.applyGroupAndSort(aSorters);
			oEvent.getSource().close();
			this.getView().destroy();
		},
		_saveP13DialogState: function(aCondition) {
			var oP13SettingsModelData = this.oView.getModel().getData(),
				iIndex,
				_tempObj;

			//Saving sorting panel state.
			var aP13nSortItems = [];
			for (iIndex in aCondition.sortCondition) {
				_tempObj  = {
					"columnKey" : aCondition.sortCondition[iIndex].keyField,
					"operation" : aCondition.sortCondition[iIndex].operation
				};
				aP13nSortItems.push(_tempObj);
			}
			oP13SettingsModelData.p13nSortItems = aP13nSortItems;

			//Saving grouping panel state
			if (aCondition.groupCondition != undefined && aCondition.groupCondition != null) {
				var aP13nGroupItems = [];
				for (iIndex in aCondition.groupCondition) {
					_tempObj  = {
						"columnKey" : aCondition.groupCondition[iIndex].keyField,
						"operation" : aCondition.groupCondition[iIndex].operation
					};
					aP13nGroupItems.push(_tempObj);
				}
				oP13SettingsModelData.p13nGroupItems = aP13nGroupItems;
			}

			// //Saving the column panel state
			// var aP13nColumnItemsKeys = [];
			// if (this.oView.byId("p13nDialog").getPanels().length === 3) {
			// 	aP13nColumnItemsKeys = this.oView.byId("p13nDialog").getPanels()[2].getOkPayload().selectedItems.map( function(selectedItem) {
			// 		return selectedItem.columnKey;
			// 	});
			// } else {
			// 	aP13nColumnItemsKeys = this.oView.byId("p13nDialog").getPanels()[1].getOkPayload().selectedItems.map( function(selectedItem) {
			// 		return selectedItem.columnKey;
			// 	});
			// }

			// var aP13nColumnItems = [];
			// for (var iIndex in oP13SettingsModelData.columnPanelItems) {
			// 	var _tempObject = JSON.parse(JSON.stringify(oP13SettingsModelData.columnPanelItems[iIndex]));
			// 	if (aP13nColumnItemsKeys.iIndexOf(oP13SettingsModelData.columnPanelItems[iIndex].columnKey) > -1) {
			// 		_tempObject.selected = true;
			// 		aP13nColumnItems.push(_tempObject);
			// 	} else {
			// 		_tempObject.selected = false;
			// 		aP13nColumnItems.push(_tempObject);
			// 	}
			// }
			// oP13SettingsModelData.columnPanelItems = aP13nColumnItems;


			this.oTableController.oP13nSettingsPropertyModel = new JSONModel(oP13SettingsModelData);
		}
	});
});

}; // end of sap/fe/controls/_P13nSettings/P13nSettings.controller.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Table.Table.flexibility') ) {
jQuery.sap.declare('sap.fe.controls._Table.Table.flexibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/controls/_Table/Table.flexibility",[], function () {
	"use strict";

	function fnAddColumn(sMetaContextPath, iIndex, sLabel, oTable, oModifier, oModel){
		var oMetaModel = oModel.getMetaModel(),
			oMetadataRequest = oMetaModel.requestObject(sMetaContextPath);

		return oMetadataRequest.then(function () {
				var oInnerTable = oTable.getInnerTable(), // TODO does not work with modifier
					oPropertyContext = oMetaModel.createBindingContext(sMetaContextPath),
				sTableType = oModifier.getProperty(oTable, "type"),
				sFragmentName,
				oViewProcessor;

			if (sTableType === 'ResponsiveTable') {
				sFragmentName = "sap.fe.controls._Table.ResponsiveTable.AddColumnChange";
			} else if (sTableType === 'GridTable') {
				sFragmentName = "sap.fe.controls._Table.GridTable.AddGridTableColumnChange";
			}

			try {
				var oViewProcessor = sap.ui.view({
					viewContent: '<core:View xmlns:core="sap.ui.core"><core:Fragment fragmentName="' + sFragmentName + '" type="XML"/></core:View>',
					type: "XML",
					async: true,
					preprocessors: {
						xml: {
							bindingContexts: {
								dataField: oPropertyContext
							},
							models: {
								dataField: oMetaModel
							}
						}
					}
				});
			} catch (e) {
				jQuery.sap.log.error(e);
			}

			return oViewProcessor.loaded().then(function () {
				var oColumn = oViewProcessor.getContent()[0].getColumns()[0],
					oCell, oListBindingTemplate, oColumnLabel;

				if (sLabel){
					// overwrite the label on the column - as the column exists as JS object we don't need to use
					// the modifier for this
					if (sTableType === 'ResponsiveTable') {
						oColumnLabel = oColumn.getHeader();
					} else if (sTableType === 'GridTable') {
						var oColumnLabel = oColumn.getLabel();
					}
					oColumnLabel.setText(sLabel);
				}

				oModifier.insertAggregation(oInnerTable, "columns", oColumn, iIndex);

				if (sTableType === 'ResponsiveTable') {
					// Responsive Table is special as the column and item is separated
					oCell = oViewProcessor.getContent()[1];
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					oModifier.insertAggregation(oListBindingTemplate, "cells", oCell, iIndex);
				}

				return oColumn;
			});
		});
	}

	function fnRemoveColumn(sElementId, oTable, oModifier){
		var oInnerTable = oTable.getInnerTable(),
			sTableType = oModifier.getProperty(oTable, "type"),
			oListBindingTemplate,
			aColumns = oModifier.getAggregation(oInnerTable, "columns"),
			aCells,
			mRevertData = {},
			oColumnLabel,
			oColumn,
			aCustomData;

		for (var i = 0; i < aColumns.length; i++) {
			if (oModifier.getId(aColumns[i]) === sElementId) {
				oColumn = aColumns[i];
				aCustomData = oModifier.getAggregation(oColumn, "customData");
				for (var c = 0; c < aCustomData.length; c++){
					if (oModifier.getProperty(aCustomData[c], "key") === "metaContextPath"){
						mRevertData.metaContextPath = oModifier.getProperty(aCustomData[c], "value");
					}
				}

				mRevertData.index = i;
				mRevertData.id = oModifier.getId(oColumn);

				if (sTableType === 'ResponsiveTable') {
					oColumnLabel = oModifier.getAggregation(oColumn, "header");
				} else if (sTableType === 'GridTable') {
					oColumnLabel = oModifier.getAggregation(oColumn, "label");
				}
				mRevertData.label = oModifier.getProperty(oColumnLabel, "text");

				oModifier.removeAggregation(oInnerTable, "columns", oColumn);

				if (sTableType === 'ResponsiveTable') {
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					aCells = oModifier.getAggregation(oListBindingTemplate, "cells");
					oModifier.removeAggregation(oListBindingTemplate, "cells", aCells[i]);
				}

				return mRevertData;
			}
		}
	}

	function fnMoveColumn(sElementId, sTargetIndex, oTable, oModifier){
		var oInnerTable = oTable.getInnerTable(),
			aColumns = oModifier.getAggregation(oInnerTable, "columns"),
			sTableType = oModifier.getProperty(oTable, "type"),
			oListBindingTemplate, aCells;


		for (var i = 0; i < aColumns.length; i++) {
			if (oModifier.getId(aColumns[i]) === sElementId){
				oModifier.removeAggregation(oInnerTable, "columns", aColumns[i]);
				oModifier.insertAggregation(oInnerTable, "columns", aColumns[i], sTargetIndex);

				if (sTableType === 'ResponsiveTable') {
					oListBindingTemplate = oModifier.getBindingTemplate(oInnerTable, "items");
					aCells = oModifier.getAggregation(oListBindingTemplate, "cells");
					oModifier.removeAggregation(oListBindingTemplate, "cells", aCells[i]);
					oModifier.insertAggregation(oListBindingTemplate, "cells", aCells[i], sTargetIndex);
				}
			}
		}
	}

	return {
		"addColumn": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					sMetaContextPath  = oChangeDefinition.content.bindingString,
					sLabel = oChangeDefinition.content.label,
					iIndex = oChangeDefinition.content.index,
					oModifier = mPropertyBag.modifier,
					oModelContainer = mPropertyBag.appComponent || mPropertyBag.view,
					oModel = oModelContainer ? oModelContainer.getModel() : undefined;

				if (!oModel instanceof sap.ui.model.odata.v4.ODataModel){
					jQuery.sap.log.error("Change can't be applied without a container having a Odata v4 model assigned");
					return false;
				}

				return fnAddColumn(sMetaContextPath, iIndex, sLabel, oTable, oModifier, oModel).then(function(oColumn){
					oChange.setRevertData({
						elementId: oModifier.getId(oColumn)
					});
				});
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData();

				if (mRevertData) {
					fnRemoveColumn(mRevertData.elementId, oTable, mPropertyBag.modifier);
					oChange.resetRevertData();
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}

				return true;
			}
		},

		"moveColumns": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					aMovedElements = oChangeDefinition.content.movedElements;

				for (var x = 0; x < aMovedElements.length; x++) {
					fnMoveColumn(aMovedElements[x].element, aMovedElements[x].targetIndex, oTable, mPropertyBag.modifier);
				}

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					aMovedElements = oChangeDefinition.content.movedElements;

				for (var x = 0; x < aMovedElements.length; x++) {
					fnMoveColumn(aMovedElements[x].element, aMovedElements[x].sourceIndex, oTable, mPropertyBag.modifier);
				}

				return true;
			}
		},

		"removeColumn": {
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					mRevertData;

				mRevertData = fnRemoveColumn(oChangeDefinition.content.removedElement, oTable, mPropertyBag.modifier);

				oChange.setRevertData(mRevertData);

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData();

				if (mRevertData) {
					return fnAddColumn(mRevertData.metaContextPath, mRevertData.id, mRevertData.index, mRevertData.label, oTable, mPropertyBag.modifier).then(function(){
						oChange.resetRevertData();
					});
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}
			}
		},

		"setTableType": {
			// This change is only experimental
			applyChange: function (oChange, oTable, mPropertyBag) {
				var oChangeDefinition = oChange.getDefinition(),
					sCurrentTableType = oTable.getType(),
					oModifier = mPropertyBag.modifier;

				// TODO changing the table type needs a re-templating, this is not yet working
				oModifier.setProperty(oTable, "type", oChangeDefinition.content.tableType);

				oChange.setRevertData({
					originalTableType : sCurrentTableType
				});

				return true;
			},

			revertChange: function (oChange, oTable, mPropertyBag) {
				var mRevertData = oChange.getRevertData(),
					oModifier = mPropertyBag.modifier;

				if (mRevertData) {
					// TODO changing the table type needs a re-templating, this is not yet working
					oModifier.setProperty(oTable, "type", mRevertData.originalTableType);
				} else {
					jQuery.sap.log.error("Attempt to revert an unapplied change.");
					return false;
				}
			}
		}
	};
}, /* bExport= */false);

}; // end of sap/fe/controls/_Table/Table.flexibility.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Table.TableAnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that are needed for the sap.fe.controls._Table.
	 */
	jQuery.sap.declare("sap.fe.controls._Table.TableAnnotationHelper");

	sap.fe.controls._Table.TableAnnotationHelper = {

		getEntitySetFromContext: function (oInterface) {
			var aParts = oInterface.getPath().split('/');
			var oEntitySetContext;
			if (aParts[1]) {
				oEntitySetContext = oInterface.getModel().getMetaContext('/' + aParts[1]);
			}
			if (oEntitySetContext && oEntitySetContext.getObject().$kind === "EntitySet") {
				return oEntitySetContext;
			} else {
				throw ("entity set could not be determined from line item context");
			}
		},

		createAggregationBinding: function (oInterface, oEntitySet, sTableBindingPath, sFilterBarId, aLineItems) {
			if (sTableBindingPath) {
				return sTableBindingPath;
			}

			var sExpand = '',
				oMetaContext = oInterface.getInterface(0),
				oMetaModel = oMetaContext.getModel(),
				sEntitySet = oMetaModel.getObject(oMetaContext.getPath() + "@sapui.name");

			if (oMetaContext.getModel().getObject(oMetaContext.getPath() + "@com.sap.vocabularies.Common.v1.DraftRoot")) {
				sExpand = "$expand : 'DraftAdministrativeData'";
			}

			return "{ path : '/" + sEntitySet + "', parameters : {  $count : true " + (sExpand  ? ',' : '') + sExpand + "}, events : {dataRequested : '.handleDataRequested', dataReceived : '.handleDataReceived'} }";
		},

		getSelectionMode: function (oContext, oEntitySet, oWorkingContext) {
			oContext = oContext.getInterface(0);

			//var aLineItems = oContext.getModel().getObject(oWorkingContext['@com.sap.vocabularies.UI.v1.LineItem']) || [];
			var aLineItems = oWorkingContext['@com.sap.vocabularies.UI.v1.LineItem'];
			for (var i = 0; i < aLineItems.length; i++) {
				if (aLineItems[i].$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && !aLineItems[i].Inline) {
					return sap.m.ListMode.MultiSelect;
				}
			}

			return sap.m.ListMode.None;
		},
		formatDraftLockText: function (IsActiveEntity, HasDraftEntity, LockedBy) {
			if (!IsActiveEntity) {
				return this.getModel("sap.fe.i18n").getResourceBundle().getText("SAPFE_DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				if (LockedBy) {
					return this.getModel("sap.fe.i18n").getResourceBundle().getText("SAPFE_LOCKED_OBJECT");
				} else {
					return this.getModel("sap.fe.i18n").getResourceBundle().getText("SAPFE_UNSAVED_CHANGES");
				}
			} else {
				return ""; // not visible
			}
		}

	};
	sap.fe.controls._Table.TableAnnotationHelper.getEntitySetFromContext.requiresIContext = true;
	sap.fe.controls._Table.TableAnnotationHelper.createAggregationBinding.requiresIContext = true;
	sap.fe.controls._Table.TableAnnotationHelper.getSelectionMode.requiresIContext = true;
})();

}; // end of sap/fe/controls/_Table/TableAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._ValueList.ValueList.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controls._ValueList.ValueList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.ConditionModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.ODataSuggestProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.OperatorSuggestProvider'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_ValueList/ValueList.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/mdc/ConditionModel",
	"sap/ui/mdc/ODataSuggestProvider",
	"sap/ui/mdc/OperatorSuggestProvider",
	"sap/m/SearchField",
	"sap/ui/model/json/JSONModel"
], function (Controller, ConditionModel, ODataSuggestProvider, OperatorSuggestProvider, SearchField, JSONModel) {
	"use strict";
	return Controller.extend("sap.fe.controls._ValueList.ValueList", {

		handleSearch: function (oEvent) {
			var oValueListTable = this.getView().byId("valueListTable");
			var sSearchQuery = oEvent.getParameter("query") || oEvent.getParameter("newValue");

			oValueListTable.getBinding("items").changeParameters({
				$search: sSearchQuery || undefined
			});
		},

		onInit: function () {
			var oFilterLayoutFlag = new JSONModel({
				visible: false,
				listView: false,
				tableView: true,
				sSelectedRowCount: 0
			});
			this.oValueListTable = this.getView().byId("valueListTable");
			var oListBinding = this.oValueListTable.getBinding("items");
			this.oValueListTableConditionModel = ConditionModel.getFor(oListBinding);

			var oConditionChangeBinding = this.oValueListTableConditionModel.bindProperty("/", this.oValueListTableConditionModel.getContext("/"));
			oConditionChangeBinding.attachChange(this.handleChange.bind(this));

			// change handler on list binding to remember the table tab selections and mark the selected items
			var oListBinding = this.getView().byId("valueListTable").getBinding("items");
			oListBinding.attachChange(this.updateTableSelections.bind(this));

			this.getView().setModel(this.oValueListTableConditionModel, "vltcm");
			this.getView().setModel(oFilterLayoutFlag, "FilterLayoutFlag");
		},

		onAfterRendering : function(){
			//var oGridContent =	this.getView().byId("template::DefineConditions").getBinding("content");
			//oGridContent.attachChange(this.handleConditionButtonVisibility.bind(this));

			// update the table selections everytime the dialog is opened
			this.updateTableSelections();
		},

		handleFilter: function () {
			if (this.getView().getModel("FilterLayoutFlag").getProperty("/visible")) {
				this.getView().getModel("FilterLayoutFlag").setProperty("/visible", false);
			} else {
				this.getView().getModel("FilterLayoutFlag").setProperty("/visible", true);
			}
		},

		handleChange: function () {
			this.oValueListTableConditionModel.applyFilters();
		},

		handleConditionButtonVisibility : function() {
			var oGrid = this.getView().byId("template::DefineConditions");
			var oConditionModel = this.getView().getModel("cm");
			var sLen = oConditionModel.getConditions().length;

			var aOperatorTabItems = [];
			for (var i = 0 ; i < sLen; i++) {
				//filter values of select with operator tab and stores it in a array
				if ( oConditionModel.getConditions()[i].operator !== "EEQ") {
					aOperatorTabItems.push(oConditionModel.getConditions()[i]);
				}
			}
			if (aOperatorTabItems.length === 0) {
				//Adds one new empty condition into the condition model when there is no value in define condition tab
				//This will work in case of Reset
				oConditionModel.addCondition(oConditionModel.createCondition(this.getView().getController().fieldPath, "EQ", []));
			} else {
				//setting the visibility of add/remove button on change of length of condition model
				var content = oGrid.getContent();
				content[content.length - 1].getContent()[4].getContent()[1].setVisible(true);
			}
		},
		onResetValueHelp: function (oControlEvent, oModel){
			var oView = this.getView();
			oView.setModel(oModel, "cm");
		},
		handleToggleButton: function (oEvent) {
			var sId = oEvent.getSource().getId();
			if (sId.indexOf("template::ListView") !== -1) {
				this.getView().getModel("FilterLayoutFlag").setProperty("/listView", true);
				this.getView().getModel("FilterLayoutFlag").setProperty("/tableView", false);
			} else if (sId.indexOf("template::TableView") !== -1) {
				this.getView().getModel("FilterLayoutFlag").setProperty("/tableView", true);
				this.getView().getModel("FilterLayoutFlag").setProperty("/listView", false);
			}
		},

		removeCondition: function(oEvent){
			var sSouceId = oEvent.oSource.getId();
			var oConditionModel = this.oView.getModel("cm");
			var aConditions = oConditionModel.getConditions();
			var sLen = aConditions.length;
			var aOperatorTabItems = [];
			for (var i = 0 ; i < sLen; i++) {
				//filter values of "select with operator" tab from condition model and stores it in a array
				if ( aConditions[i].operator !== "EEQ") {
					aOperatorTabItems.push({
						items : aConditions[i],
						index : i});
				}
			}
			var index = sSouceId.substr(sSouceId.lastIndexOf("-") + 1 ,sSouceId.length); //index of removed item
			var aRemovedItem = [];
			aRemovedItem.push(aOperatorTabItems[index]);  //getting object of removed item
			oConditionModel.removeCondition(this.getView().getController().fieldPath, parseInt(aRemovedItem[0].index, 10));

			//if removal item is last line item of condition tab then will add empty condition
			if (sLen === 0) {
				oConditionModel.addCondition(oConditionModel.createCondition(this.getView().getController().fieldPath, "EQ", []));
			}
		},
		addCondition: function(oEvent){
			var oConditionModel = this.oView.getModel("cm");
			var index = oConditionModel.getConditions().length;
			// create a new dummy condition for a new contion on the UI - must be removed later if not used or filled correct
			oConditionModel.insertCondition(index, oConditionModel.createCondition(this.getView().getController().fieldPath, "EQ", []));
			//No changes to the Add button if there is no condition added
			if (index < oConditionModel.getConditions().length) {
				oEvent.getSource().setVisible(false);
			}
		},

		handleSelectionChange : function(oEvent){

			var oView = this.getView();
			var oConditionModel = oView.getModel("cm");
			var sFieldPath = oView.getController().fieldPath;
			var mValueList = oView.getModel("valueList").getObject("/");
			var oItem, sKey, sDescription, oBindingContext;


			var bSelectedRow = oEvent.getParameter("listItem").getSelected();
			//var sSelectedRowCount = oView.getModel("FilterLayoutFlag").getProperty("/sSelectedRowCount");

			if (bSelectedRow === true) {
				//Add to condition model
				//Looping through the list items that are undergoing selection
				for (var i = 0;i < oEvent.getParameter("listItems").length; i++) {
					//Getting list item associated object(data)
					oBindingContext = oEvent.getParameter("listItems")[i].getBindingContext();
					oItem = oBindingContext.getObject();
					//Getting key-field from the list item, TODO: Implementation for multiple key-field scenario
					sKey = oItem[mValueList.__sapfe.keyPath];
					sDescription = oItem[mValueList.__sapfe.descriptionPath];
					//Insert condition to condition model(index, path, operator, aValues)
					//Store the canonical path to the condition for updating the table rows selection on update of binding or token
					oConditionModel.addCondition(oConditionModel.createCondition(sFieldPath, "EEQ", [sKey,sDescription,oBindingContext.getCanonicalPath()]));
				}
				//sSelectedRowCount = sSelectedRowCount + 1;
			} else {
				//Remove from condition model
				//Looping through the list items that are undergoing deselection
				for (var j = 0; j < oEvent.getParameter("listItems").length; j++) {
					// refresh the conditions from the condition model on each iteration to use the right index for removeCondition
					var aConditionModelConditions = oConditionModel.getConditions().filter(function (oCondition) {
						return oCondition.operator === "EEQ";
					});
					//Getting list item associated object(data)
					oBindingContext = oEvent.getParameter("listItems")[j].getBindingContext();
					//Looping through the Conditions to find the condition to be removed by matching key-field
					for (var i = 0;i < aConditionModelConditions.length; i++) {
						if (aConditionModelConditions[i].values && aConditionModelConditions[i].values[2] === oBindingContext.getCanonicalPath()) {
							//Remove condition(path, index)
							oConditionModel.removeCondition(sFieldPath, i);
							break;
						}
					}
				}
				//sSelectedRowCount = sSelectedRowCount - 1;
			}
			//oView.getModel("FilterLayoutFlag").setProperty("/sSelectedRowCount",sSelectedRowCount);
			//var oResourceBundle = oView.getModel("sap.fe.i18n").getResourceBundle();
			//var sText = oResourceBundle.getText("selectFromList", [sSelectedRowCount]);
			//oView.byId("template::SelectValueList").getItems()[0].setText(sText);
		},

		handleTokenUpdate : function(oEvent){

			var oView = this.getView();
			var oConditionModel = oView.getModel("cm");
			var sFieldPath = oView.getController().fieldPath;
			var aRemovedTokens = oEvent.getParameter("removedTokens");
			var aTokens = oView.byId("template::Tokenizer").getTokens();
			for (var i = 0; i < aTokens.length; i++) {
				if (aTokens[i].getKey() === aRemovedTokens[0].getKey()) {

					var oTable = oView.byId("valueListTable");
					var oTableSelectedContext = oTable.getSelectedContexts();
					for (var j = 0; j < oTableSelectedContext.length; j++) {
						if (oTableSelectedContext[j].getCanonicalPath() === oConditionModel.getConditions()[i].values[2]) {
							oTable.getItems()[oTableSelectedContext[j].iIndex].setSelected(false);
							break;
						}
					}
					oConditionModel.removeCondition(sFieldPath,i);
					break;
				}
			}
		},

		updateTableSelections : function (oEvent) {
			// remove all selections from the table
			var oTable, aItems;
			oTable = this.getView().byId("valueListTable");
			// remove selections with "true" to remove all the invisible selections as well
			oTable.removeSelections(true);
			aItems = oTable.getItems();
			// We get the conditions and key path, loop over conditions and compare key to table's current items to mark selections
			var oConditionModel, aConditions, aConditionsForTableTab;
			oConditionModel = this.getView().getModel("cm");
			aConditions = oConditionModel.getConditions();
			aConditionsForTableTab = aConditions.filter(function (oCondition) {
				return oCondition.operator === "EEQ";
			});
			var i, j, oCondition, oItem;
			for (i = 0; i < aConditionsForTableTab.length; i++) {
				oCondition = aConditionsForTableTab[i];
				for (j = 0; j < aItems.length; j++) {
					oItem = aItems[j];
					if (oItem.getBindingContext().getCanonicalPath() === oCondition.values[2]) {
						oTable.setSelectedItem(oItem, true);
						break;
					}
				}
			}
		}
	});
});

}; // end of sap/fe/controls/_ValueList/ValueList.controller.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._ValueList.ValueListAnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";
	/*
	 This class contains annotation helpers that are needed for the sap.fe.controls._Table.
	 */
	jQuery.sap.declare("sap.fe.controls._ValueList.ValueListAnnotationHelper");

	sap.fe.controls._ValueList.ValueListAnnotationHelper = {

		getCollectionEntitySet: function (oValueListContext) {
			var mValueList = oValueListContext.getObject();
			return mValueList.$model.getMetaModel().createBindingContext("/" + mValueList.CollectionPath);
		},

		getValueListProperty: function (oPropertyContext) {
			var oValueListModel = oPropertyContext.getModel();
			var mValueList = oValueListModel.getObject("/");
			return mValueList.$model.getMetaModel().createBindingContext('/' + mValueList.CollectionPath + '/' + oPropertyContext.getObject());
		},
		formatIconTabFilterText : function(sIconTabFilterText, oCM) {

			var oResourceBundle = this.getModel("sap.fe.i18n").getResourceBundle();
			return oResourceBundle.getText(sIconTabFilterText);
			// if (oCM && oCM.conditions && oCM.conditions.length !== 0){
			// 	return oResourceBundle.getText(sSelectFromList, [oCM.conditions.length]);
			// } else {
			// 	return oResourceBundle.getText(sSelectFromList, [0]);
			// }
		},
		formatSelectedItemTitle : function(sSelectedItem, oCM) {
			var oResourceBundle = this.getModel("sap.fe.i18n").getResourceBundle();
			if (oCM && oCM.conditions && oCM.conditions.length !== 0){
				return oResourceBundle.getText(sSelectedItem, [oCM.conditions.length]);
			} else {
				return oResourceBundle.getText(sSelectedItem, [0]);
			}
		},
		formatedTokenText : function(oFilterFieldType,oCondition) {
			var sResult = "";
			if (oCondition) {
				var oCM = this.getModel("cm");
				var oOperator = oCM.getFilterOperatorConfig().getOperator(oCondition.operator);
				sResult = oOperator.format(oCondition.values, oCondition, oFilterFieldType);
			}
			return sResult;
		}
	};
})();

}; // end of sap/fe/controls/_ValueList/ValueListAnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._ViewSettings.ViewSettings.controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.controls._ViewSettings.ViewSettings.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_ViewSettings/ViewSettings.controller",[
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/Sorter",
	"sap/ui/model/json/JSONModel"
], function (Controller, Sorter, JSONModel) {
	"use strict";
	return Controller.extend("sap.fe.controls._ViewSettings.ViewSettings", {
		//Event handler for OK button
		onConfirm: function (oEvent) {
			var aCondition = oEvent.getParameters(),
				aSorters = [],
				sPath,
				bDescending,
				sKey, sName;

			var fnGroup = function (oContext) {
				sPath = (aCondition.groupItem && aCondition.groupItem.getKey());
				sKey = oContext.getProperty(sPath);
				sName = aCondition.groupItem && aCondition.groupItem.getText();

				return {
					key: sKey,
					text: sName + " : " + sKey
				};
			};

			//grouping
			if (aCondition.groupItem) {
				sPath = aCondition.groupItem.getKey();
				bDescending = !!(aCondition.groupDescending);
				var oGroupSorter = new Sorter(sPath, bDescending, fnGroup);
				aSorters.push(oGroupSorter);
			}

			//sorting
			if (aCondition.sortItem) {
				sPath = aCondition.sortItem.getKey();
				bDescending = !!(aCondition.sortDescending);
				aSorters.push(new Sorter(sPath, bDescending));
			}

			this._saveViewSettingsState(aCondition);
			this.oTableController.applyGroupAndSort(aSorters);
			this.getView().destroy();
		},
		//Function to save the state of view settings dialog state.
		_saveViewSettingsState: function (aCondition) {
			var oViewSettingsModel = this.oView.getModel().getData();

			//Group panel
			var groupItemKey = aCondition.groupItem && aCondition.groupItem.getKey();
			oViewSettingsModel.groupDescending = !!(aCondition.groupDescending);

			if (groupItemKey != null && groupItemKey != undefined) {
				oViewSettingsModel.groupPanelItems.map(function (groupPanelItem) {
					if (groupPanelItem.columnKey === groupItemKey) {
						groupPanelItem.selected = true;
						return groupPanelItem;
					} else {
						groupPanelItem.selected = false;
						return groupPanelItem;
					}
				});
			}


			//Sort Panel
			var sortItemKey = aCondition.sortItem && aCondition.sortItem.getKey();
			oViewSettingsModel.sortDesecending = !!(aCondition.sortDescending);

			if (sortItemKey != null && sortItemKey != undefined) {

				oViewSettingsModel.sortPanelItems.map(function (sortPanelItem) {
					if (sortPanelItem.columnKey === sortItemKey) {
						sortPanelItem.selected = true;
						return sortPanelItem;
					} else {
						sortPanelItem.selected = false;
						return sortPanelItem;
					}
				});
			}


			// //Column Panel
			// var aSelectColumnKeys = this.oView.byId("ColumnsList").getSelectedItems().map( function(selectedColumneItem) {
			// 	return selectedColumneItem.getCustomData()[0].getValue();
			// });
			// oViewSettingsModel.selectAllText = this.getView().getModel("sap.fe.i18n").getResourceBundle()
			// 									.getText("SAPFE_VIEWSETTINGS_COLUMN_SELECTALL", [aSelectColumnKeys.length, oViewSettingsModel.columnPanelItems.length]);

			// oViewSettingsModel.columnPanelItems.map( function(columnPanelItem) {
			// 	if (aSelectColumnKeys.indexOf(columnPanelItem.columnKey) > -1) {
			// 		columnPanelItem.selected = true;
			// 		return columnPanelItem;
			// 	} else {
			// 		columnPanelItem.selected = false;
			// 		return columnPanelItem;
			// 	}
			// });
			// oViewSettingsModel.columnPanelItems = oViewSettingsModel.columnPanelItems.sort(function (x, y) {
			// 	if (x.selected === y.selected) {
			// 		return 0;
			// 	} else if (x.selected) {
			// 		return -1;
			// 	} else {
			// 		return 1;
			// 	}
			// });

			this.oTableController.oViewSettingsPropertyModel = new JSONModel(oViewSettingsModel);
		},
		//Event handler for cancel button
		onCancel: function (oEvent) {
			this.getView().destroy();
		},
		//Even handler for the select of column tab select all check box"
		onColumnListSelectAll: function (oEvent) {
			if (oEvent.getParameters().selected) {
				this.getView().byId("ColumnsList").selectAll();
			} else {
				this.getView().byId("ColumnsList").removeSelections(true);
			}
			this._updateSelectAllText();
		},
		onColumnListChange: function (oEvent) {
			this._updateSelectAllText();
		},
		_updateSelectAllText: function () {
			var oColumnList = this.getView().byId("ColumnsList"),
				sSelectAllText = this.getView().getModel("sap.fe.i18n").getResourceBundle()
				.getText("SAPFE_VIEWSETTINGS_COLUMN_SELECTALL", [oColumnList.getSelectedItems().length, oColumnList.getItems().length]);
			this.getView().byId("selectAllCheckBox").setText(sSelectAllText);
		}
	});
});

}; // end of sap/fe/controls/_ViewSettings/ViewSettings.controller.js
if ( !jQuery.sap.isDeclared('sap.fe.core.AnnotationHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

(function () {
	"use strict";

	/*
	 This class contains annotation helpers that might be used from several templates or controls
	 */

	jQuery.sap.declare("sap.fe.core.AnnotationHelper");

	sap.fe.core.AnnotationHelper = {
		/* this helper can be activated to debug template processing
		debug: function (oContext) {
			//debugger;
		},
		*/

		// returns the meta context path of a context
		getMetaContextPath: function (oContext) {
			return oContext.getPath();
		},

		// creates meta context from a meta context path
		getMetaContext: function (oTemplateContext) {
			return oTemplateContext.getModel().getVisitor().getSettings().models["sap.fe.metaModel"].createBindingContext(oTemplateContext.getObject());
		},

		/*
		 getUI5Type : function(oInterface, sEntitySet, sFilterItemPath){
		 var oMetaModel = oInterface.getInterface(0).getModel();
		 if (typeof sFilterItemPath === 'object'){
		 // we need to get the filterItem name via @sapui.name
		 sFilterItemPath = oMetaModel.getObject(oInterface.getInterface(1).getPath() + '@sapui.name');
		 }

		 return oMetaModel.getUI5Type("/" + sEntitySet + "/" + sFilterItemPath).getName();
		 },
		 */

		getLineItemPresentation: function (oParamModel) {
			var mParameter = oParamModel.getObject();
			var oMetaModel = mParameter.metaModel;
			var oModel = oParamModel.getModel();
			var oWorkingContext;
			if (oModel.getProperty("/workingContext")) {
				oWorkingContext = oModel.getProperty("/workingContext");
			} else {
				oWorkingContext = sap.fe.core.AnnotationHelper._getWorkingContext(oMetaModel, mParameter.entitySet, undefined);
				oModel.setProperty("/workingContext", oWorkingContext);
			}
			return oMetaModel.getMetaContext(oWorkingContext.lineItemPath);
		},

		getChartPresentation: function (oParamModel) {
			var mParameter = oParamModel.getObject();
			var oMetaModel = mParameter.metaModel;
			var oModel = oParamModel.getModel();
			var oWorkingContext;
			if (oModel.getProperty("/workingContext")) {
				oWorkingContext = oModel.getProperty("/workingContext");
			} else {
				oWorkingContext = sap.fe.core.AnnotationHelper._getWorkingContext(oMetaModel, mParameter.entitySet, undefined);
				oModel.setProperty("/workingContext", oWorkingContext);
			}
			return oMetaModel.getMetaContext(oWorkingContext.chartPath);
		},

		_getWorkingContext: function(oMetaModel, sEntitySet, sQualifier) {
			var sAnnotationPath,
				oWorkingContext = {},
				selectionPresentationVariant,
				presentationVariant,
				sEntitySetPath = '/' + sEntitySet;

			/* Find SelectionPresentationVariant */
			sAnnotationPath =  sEntitySetPath + "/@com.sap.vocabularies.UI.v1.SelectionPresentationVariant" + (sQualifier ? "#" + sQualifier : "");
			oWorkingContext.selectionPresentationVariant = oMetaModel.getObject(sAnnotationPath);
			oWorkingContext.selectionPresentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
			oWorkingContext.selectionPresentationVariantPath = sAnnotationPath;
			selectionPresentationVariant = oWorkingContext.selectionPresentationVariant;
			/* Find PresentationVariant */
			if (selectionPresentationVariant && selectionPresentationVariant.PresentationVariant) {
				if (selectionPresentationVariant.PresentationVariant.$Path) {
					//Path for PV is specified
					sAnnotationPath = sEntitySetPath + "/" + selectionPresentationVariant.PresentationVariant.$Path;
				} else {
					//PV is defined inline and NOT via path
					sAnnotationPath = sAnnotationPath + "/PresentationVariant";
				}
			} else {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.PresentationVariant" + (sQualifier ? "#" + sQualifier : "");
			}
			if (typeof sAnnotationPath === "string") {
				oWorkingContext.presentationVariant = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.presentationVariantPath = sAnnotationPath;
				oWorkingContext.presentationVariantQualifier = sAnnotationPath.split("#")[1] || "";
				presentationVariant = oWorkingContext.presentationVariant;
			}
			/* Determine LineItem and Chart via PV */
			if (presentationVariant && presentationVariant.Visualizations) {
				presentationVariant.Visualizations.forEach(function(visualization) {
					sAnnotationPath = sEntitySetPath + '/' + visualization.$AnnotationPath;
					if (visualization.$AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.LineItem") > -1) {
						oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.lineItemPath = sAnnotationPath;
						oWorkingContext.lineItemQualifier = sAnnotationPath.split("#")[1] || "";
					}
					if (visualization.$AnnotationPath.indexOf("com.sap.vocabularies.UI.v1.Chart") > -1) {
						oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
						oWorkingContext.chartPath = sAnnotationPath;
						oWorkingContext.chartQualifier = sAnnotationPath.split("#")[1] || "";
					}
				});
			}

			/* Fall back to defaults without qualifier */
			if (!oWorkingContext.lineItem) {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.LineItem";
				oWorkingContext.lineItem = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.lineItemPath = sAnnotationPath;
				oWorkingContext.lineItemQualifier = "";
			}
			if (!oWorkingContext.chart) {
				sAnnotationPath = sEntitySetPath + "/@com.sap.vocabularies.UI.v1.Chart";
				oWorkingContext.chart = oMetaModel.getObject(sAnnotationPath);
				oWorkingContext.chartPath = sAnnotationPath;
				oWorkingContext.chartQualifier = "";
			}
			return oWorkingContext;
		},

		isSemanticKey: function (oContext, oValue) {
			var sEntity = oContext.getPath().split('/')[1];
			var aSemanticKeys = oContext.getModel().getObject("/" + sEntity + "/@com.sap.vocabularies.Common.v1.SemanticKey");
			if (aSemanticKeys) {
				for (var i = 0; i < aSemanticKeys.length; i++) {
					if (aSemanticKeys[i].$PropertyPath === oValue.$Path) {
						return true;
					}
				}
			}
			return false;
		},

		_getEntitySetPath: function (oModel, sPropertyPath) {
			var iLength;
			var sEntitySetPath = sPropertyPath.slice(0, sPropertyPath.indexOf("/", 1));
			if (oModel.getObject(sEntitySetPath + "/$kind") === "EntityContainer") {
				iLength = sEntitySetPath.length + 1;
				sEntitySetPath = sPropertyPath.slice(iLength, sPropertyPath.indexOf("/", iLength));
			}
			return sEntitySetPath;
		},

		_isInNonFilterableProperties: function (oModel, sEntitySetPath, sContextPath) {
			var bIsNotFilterable = false;
			var oAnnotation = oModel.getObject(sEntitySetPath + "@Org.OData.Capabilities.V1.FilterRestrictions");
			if (oAnnotation && oAnnotation.NonFilterableProperties) {
				bIsNotFilterable = oAnnotation.NonFilterableProperties.some(function(property) {
					return property.$NavigationPropertyPath === sContextPath || property.$PropertyPath === sContextPath;
				});
			}
			return bIsNotFilterable;
		},

		_isContextPathFilterable: function (oModel, sEntitySetPath, sContexPath) {
			var aContext = sContexPath.split("/"),
				bIsNotFilterable = false,
				sContext = "";

			aContext.some(function(item, index, array) {
				if (sContext.length > 0) {
					sContext += "/" + item;
				} else {
					sContext = item;
				}
				if (index === array.length - 1) {
					//last path segment
					bIsNotFilterable = sap.fe.core.AnnotationHelper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
				} else if (oModel.getObject(sEntitySetPath + "/$NavigationPropertyBinding/" + item)) {
					//check existing context path and initialize it
					bIsNotFilterable = sap.fe.core.AnnotationHelper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
					sContext = "";
					//set the new EntitySet
					sEntitySetPath = "/" + oModel.getObject(sEntitySetPath + "/$NavigationPropertyBinding/" + item);
				}
				return bIsNotFilterable === true;
			});
			return bIsNotFilterable;
		},

		isNavPropertyFilterable: function (oContext, navProperty) {
			var sEntitySetPath,
				sContext,
				bIsNotFilterable = false,
				sPropertyPath = oContext.getPath(),
				oModel = oContext.getModel();

			sEntitySetPath = sap.fe.core.AnnotationHelper._getEntitySetPath(oModel, sPropertyPath);
			sContext = sPropertyPath.slice(sEntitySetPath.length + 1);
			if (sContext.indexOf("/") < 0) {
				bIsNotFilterable = sap.fe.core.AnnotationHelper._isInNonFilterableProperties(oModel, sEntitySetPath, sContext);
			} else {
				bIsNotFilterable = sap.fe.core.AnnotationHelper._isContextPathFilterable(oModel, sEntitySetPath, sContext);
			}
			return !bIsNotFilterable;
		},

		isPropertyFilterable: function (oContext, property) {
			var sEntitySetPath,
				sProperty,
				bIsNotFilterable = false,
				oModel = oContext.getModel(),
				sPropertyPath = oContext.getPath();

			if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.UI.v1.Hidden")) {
				return false;
			}
			if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.UI.v1.HiddenFilter")) {
				return false;
			}

			sEntitySetPath = sap.fe.core.AnnotationHelper._getEntitySetPath(oModel, sPropertyPath);
			if (typeof (property) === "string") {
				sProperty = property;
			} else {
				sProperty = oModel.getObject(sPropertyPath + "@sapui.name");
			}
			if (sProperty.indexOf("/") < 0) {
				bIsNotFilterable = sap.fe.core.AnnotationHelper._isInNonFilterableProperties(oModel, sEntitySetPath, sProperty);
			} else {
				bIsNotFilterable = sap.fe.core.AnnotationHelper._isContextPathFilterable(oModel, sEntitySetPath, sProperty);
			}

			return !bIsNotFilterable;
		},

		isRequiredInFilter: function (path, oDetails) {
			var sEntitySetPath,
				sProperty,
				bIsRequired = false,
				oFilterRestrictions,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath();

			sEntitySetPath = sap.fe.core.AnnotationHelper._getEntitySetPath(oModel, sPropertyPath);
			if (typeof (path) === "string") {
				sProperty = path;
			} else {
				sProperty = oModel.getObject(sPropertyPath + "@sapui.name");
			}
			oFilterRestrictions = oModel.getObject(sEntitySetPath + "@Org.OData.Capabilities.V1.FilterRestrictions");
			if (oFilterRestrictions && oFilterRestrictions.RequiredProperties) {
				bIsRequired = oFilterRestrictions.RequiredProperties.some(function(property) {
					return property.$PropertyPath === sProperty;
				});
			}
			return bIsRequired;
		},

		typeFormatOptions: function (path, oDetails) {
			var oFormatOptions = "{",
				iScale,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath(),
				sType = oModel.getObject(sPropertyPath + "/$Type"),
				oTextAnnotation, oTextArrangement;

			if (sType === "Edm.Date" || sType === "Edm.DateTimeOffset" || sType === "Edm.TimeOfDay") {
				// for date and time types use the short style
				oFormatOptions += "style: 'medium'";
			} else if (sType === "Edm.Decimal") {
				// for decimal type use the scale attribute of the property (metadata)
				iScale = oModel.getObject(sPropertyPath + "/$Scale") || 0;
				switch (iScale) {
					case "floating":
						oFormatOptions += "decimals: " + (oModel.getObject(sPropertyPath + "/$Precision") || 0);
						break;
					case "variable":
						break;
					default:
						oFormatOptions += "decimals: " + iScale;
				}
			}
			oTextAnnotation = oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.Text");
			if (oTextAnnotation) {
				oTextArrangement = oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement");
				if (oFormatOptions.length > 1) {
					oFormatOptions += ", ";
				}
				if (oTextArrangement && oTextArrangement.$EnumMember) {
					switch (oTextArrangement.$EnumMember) {
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast":
							oFormatOptions += "displayFormat: 'ValueDescription'";
							break;
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly":
							oFormatOptions += "displayFormat: 'Description'";
							break;
						case "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate":
							oFormatOptions += "displayFormat: 'Value'";
							break;
						default:
							oFormatOptions += "displayFormat: 'DescriptionValue'";
					}
				} else {
					oFormatOptions += "displayFormat: 'DescriptionValue'";
				}
			}
			return oFormatOptions + "}";
		},

		typeConstraints: function (path, oDetails) {
			var oConstraints = "{",
				iScale, iMaxLength,
				oModel = oDetails.context.getModel(),
				sPropertyPath = oDetails.context.getPath(),
				sType = oModel.getObject(sPropertyPath + "/$Type");

			if (sType === "Edm.Decimal") {
				// for decimal type use the scale attribute of the property (metadata)
				iScale = oModel.getObject(sPropertyPath + "/$Scale") || 0;
				switch (iScale) {
					case "floating":
						oConstraints += "decimals: " + (oModel.getObject(sPropertyPath + "/$Precision") || 0);
						break;
					case "variable":
						break;
					default:
						oConstraints += "decimals: " + iScale;
				}
			} else if (sType === "Edm.String") {
				iMaxLength = oModel.getObject(sPropertyPath + "/$MaxLength");
				if (iMaxLength) {
					oConstraints += "maxLength: " + iMaxLength;
				}
				if (oModel.getObject(sPropertyPath + "@com.sap.vocabularies.Common.v1.IsUpperCase")) {
					if (oConstraints.length > 1) {
						oConstraints += ", ";
					}
					oConstraints += "toUpperCase: true";
				}

			}
			return oConstraints + "}";
		},

		hasNavigation: function (oParamModel) {
			/*
			this is a very basic implementation, it just checks if for the entity set a entry default configuration
			with an outbound is defined - this is currently the only situation in which we support navigation.
			this coding needs to be enhanced in the future
			 */
			var oEntitySet = oParamModel.manifest["sap.fe"].entitySets[oParamModel.entitySet];

			return oEntitySet && oEntitySet.entry && oEntitySet.entry.default && oEntitySet.entry.default.outbound || false;

		},

		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace(/@/g, "").replace(/\//g, "::").replace(/#/g, "::");
		}
	};

	sap.fe.core.AnnotationHelper.getMetaContextPath.requiresIContext = true;
	sap.fe.core.AnnotationHelper.getMetaContext.requiresIContext = true;
	sap.fe.core.AnnotationHelper.getLineItemPresentation.requiresIContext = true;
	sap.fe.core.AnnotationHelper.getChartPresentation.requiresIContext = true;
	sap.fe.core.AnnotationHelper.isSemanticKey.requiresIContext = true;
	sap.fe.core.AnnotationHelper.isNavPropertyFilterable.requiresIContext = true;
	sap.fe.core.AnnotationHelper.isPropertyFilterable.requiresIContext = true;
	// sap.fe.core.AnnotationHelper.isRequiredInFilter.requiresIContext = true;

})();

}; // end of sap/fe/core/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.core.CommonUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.CommonUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.View'); // unlisted dependency retained
sap.ui.define("sap/fe/core/CommonUtils",[
	"sap/ui/core/mvc/View"
], function (View) {
	"use strict";
	function fnGetParentViewOfControl(oControl) {
		while (oControl && !(oControl instanceof View)) {
			oControl = oControl.getParent();
		}
		return oControl;
	}

	return {
		getParentViewOfControl: fnGetParentViewOfControl
	};
});

}; // end of sap/fe/core/CommonUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.MessageUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.MessageUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.message.MessageModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
sap.ui.define("sap/fe/core/MessageUtils",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/m/MessageToast",
	"sap/m/MessageItem",
	"sap/m/MessageView",
	"sap/ui/layout/form/SimpleForm",
	"sap/ui/model/message/MessageModel",
	"sap/m/NavContainer",
	"sap/m/Page",
	"sap/m/Dialog",
	"sap/m/Button",
	"sap/ui/core/Title",
	"sap/m/Label",
	"sap/m/Text",
	"sap/ui/core/message/Message",
	"sap/m/Toolbar",
	"sap/m/ToolbarSpacer"
], function (jQuery, BaseObject, MessageToast, MessageItem, MessageView, SimpleForm, MessageModel, NavContainer,
			 Page, Dialog, Button, Title, Label, Text, Message, Toolbar, ToolbarSpacer) {
	"use strict";

	function getMethods(oTemplateUtils) {

		function fnHandleRequestFailed(aErrorItems) {
			var aMessages = [];

			function fnNavButtonPress(oEvent) {
				oEvent.getSource().getParent().getParent().getParent().to("errorMessagesPage");
				oEvent.getSource().getParent().getParent().getParent().getParent().getButtons()[0].setVisible(true);
			}

			if (!(aErrorItems instanceof Array)) {
				aErrorItems = Array(aErrorItems);
			}
			var oMessageTemplate = new MessageItem({
				counter: '{counter}',
				title: '{message}',
				subtitle: '{additionalText}',
				longtextUrl: '{descriptionUrl}',
				type: '{type}',
				description: '{description}'
			});

			var oMessageView = new MessageView({
				items: {
					path: '/',
					template: oMessageTemplate
				}
			});

			oMessageView.setModel(sap.ui.getCore().getMessageManager().getMessageModel());

			var oTechnicalDetails = new SimpleForm({
				width: "100%"
			});

			if (aErrorItems.length > 0) {
				if (aErrorItems[0].status) {
					oTechnicalDetails.addContent(
						new Label({
							text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_HTTP_STATUS"),
							design: "Bold"
						}));
					oTechnicalDetails.addContent(
						new Text({
							text: aErrorItems[0].status
						})
					);
				}
				if (aErrorItems[0].statusText) {
					oTechnicalDetails.addContent(
						new Label({
							text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_EXCEPTION_CATEGORY"),
							design: "Bold"
						}));
					oTechnicalDetails.addContent(
						new Text({
							text: aErrorItems[0].statusText
						})
					);
				}
				if (aErrorItems[0].error) {
					if (aErrorItems[0].error["@SAP__common.Application"]) {
						oTechnicalDetails.addContent(
							new Title({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_GROUP_APPLICATION")
							})
						);
						if (aErrorItems[0].error["@SAP__common.Application"].ComponentId) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_COMPONENT_ID"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.Application"].ComponentId
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.Application"].ServiceId) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_ODATA_SERVICE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.Application"].ServiceRepository + "\n"
									+ aErrorItems[0].error["@SAP__common.Application"].ServiceId + "\n"
									+ aErrorItems[0].error["@SAP__common.Application"].ServiceVersion
								})
							);
						}
					}
					oTechnicalDetails.addContent(
						new Title({
							text: "Error Resolution"
						})
					);
					if (aErrorItems[0].error["@SAP__common.TransactionId"]) {
						oTechnicalDetails.addContent(
							new Label({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_TRANSACTION_ID"),
								design: "Bold"
							}));
						oTechnicalDetails.addContent(
							new Text({
								text: aErrorItems[0].error["@SAP__common.TransactionId"]
							})
						);
					}
					if (aErrorItems[0].error["@SAP__common.Timestamp"]) {
						oTechnicalDetails.addContent(
							new Label({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_TIMESTAMP"),
								design: "Bold"
							}));
						oTechnicalDetails.addContent(
							new Text({
								text: aErrorItems[0].error["@SAP__common.Timestamp"]
							})
						);
					}
					if (aErrorItems[0].error["@SAP__common.ErrorResolution"]) {
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].Analysis) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_ANALYSIS"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].Analysis
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].Note) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_SAP_NOTE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].Note
								})
							);
						}
						if (aErrorItems[0].error["@SAP__common.ErrorResolution"].DetailedNote) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_SAP_DETAILED_NOTE"),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error["@SAP__common.ErrorResolution"].DetailedNote
								})
							);
						}
					}
					if (aErrorItems[0].error.details && aErrorItems[0].error.details[0] && aErrorItems[0].error.details[0].message) {
						oTechnicalDetails.addContent(
							new Title({
								text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_GROUP_MESSAGES")
							})
						);
						for (var i = 0; i < aErrorItems[0].error.details.length; i++) {
							oTechnicalDetails.addContent(
								new Label({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_DETAILS_MESSAGES") + " " + (i + 1),
									design: "Bold"
								}));
							oTechnicalDetails.addContent(
								new Text({
									text: aErrorItems[0].error.details[i].message + ", "
									+ aErrorItems[0].error.details[i].code + ", "
									+ aErrorItems[0].error.details[i]["@SAP__common.Severity"]
								})
							);
							aMessages.push(new Message({
								"message": aErrorItems[0].error.details[i].message,
								"code": aErrorItems[0].error.details[i].code,
								"type": aErrorItems[0].error.details[i]["@SAP__common.Severity"],
								"longtextUrl": aErrorItems[0].error.details[i].longtext_url
							}));
						}
						sap.ui.getCore().getMessageManager().addMessages(aMessages);
					}
				}
			}
			if (!this.errorMessagesPage) {
				this.errorMessagesPage = new Page({
					id: "errorMessagesPage",
					customHeader: [
						new Toolbar({
							design: "Transparent",
							content: [
								new ToolbarSpacer(),
								new sap.m.Title({
									text: oTemplateUtils.getText("SAPFE_ERROR_MESSAGES_PAGE_TITLE")
								}),
								new ToolbarSpacer()
							]
						})
					]
				});
			}
			if (this.errorMessagesPage.getContent()) {
				this.errorMessagesPage.removeAllContent();
			}
			this.errorMessagesPage.addContent(oMessageView);

			if (oTechnicalDetails.getContent().length > 0) {
				if (!this.technicalDetailsPage) {
					this.technicalDetailsPage = new Page({
						id: "technicalDetailsPage",
						customHeader: new Toolbar({
							design: "Transparent",
							content: [
								new Button({
									type: "Back",
									press: fnNavButtonPress
								}),
								new ToolbarSpacer(),
								new sap.m.Title({
									text: oTemplateUtils.getText("SAPFE_TECHNICAL_MESSAGES_PAGE_TITLE")
								}),
								new ToolbarSpacer()
							]
						})
					});
				}
				if (this.technicalDetailsPage.getContent()) {
					this.technicalDetailsPage.removeAllContent();
				}

				this.technicalDetailsPage.addContent(oTechnicalDetails);
			}
			var aPages = [];
			//Adding the pages only if it has content
			if (!!this.errorMessagesPage) {
				aPages.push(this.errorMessagesPage);
			}
			if (!!this.technicalDetailsPage) {
				aPages.push(this.technicalDetailsPage);
			}

			var oNavContainer = new NavContainer({
				height: "100%",
				width: "100%",
				defaultTransitionName: "show",
				pages: aPages
			});

			var oDialog = new Dialog({
				contentWidth: "37.5em",
				contentHeight: "25em",
				showHeader: false,
				state: 'Error',
				content: oNavContainer,
				resizable: true,
				draggable: true,
				ariaLabelledBy: new sap.ui.core.InvisibleText({
					text: oTemplateUtils.getText("SAPFE_ERROR_MESSAGES_PAGE_TITLE")
				}),
				beginButton: new Button({
					press: function () {
						oNavContainer.to("technicalDetailsPage");
						this.setVisible(false);
					},
					text: oTemplateUtils.getText("SAPFE_TECHNICAL_MESSAGES_PAGE_TITLE")
				}),
				endButton: new Button({
					press: function () {
						sap.ui.getCore().getMessageManager().removeAllMessages();
						oDialog.close();
					},
					text: oTemplateUtils.getText("SAPFE_CLOSE")
				}),
				verticalScrolling: false
			});

			if (!this.technicalDetailsPage) {
				oDialog.getBeginButton().setVisible(false);
			}
			oDialog.open();
		}

		function fnHandleSuccess(text) {
			MessageToast.show(text);
		}

		return {
			handleRequestFailed: fnHandleRequestFailed,
			handleSuccess: fnHandleSuccess
		};
	}

	return BaseObject.extend(
		"sap.fe.core.MessageUtils.js", {
			constructor: function (oTemplateUtils) {
				jQuery.extend(this, getMethods(oTemplateUtils));
			}
		});
});

}; // end of sap/fe/core/MessageUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateComponent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained

(function () {
	"use strict";

	jQuery.sap.declare('sap.fe.core.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateComponent",[
		"jquery.sap.global",
		"sap/ui/core/mvc/ViewType",
		"sap/ui/core/UIComponent",
		"sap/ui/model/json/JSONModel",
		"sap/ui/model/resource/ResourceModel",
		"sap/ui/Device"
	], function (jQuery, ViewType, UIComponent, JSONModel, ResourceModel, Device) {

		// This method enhances the i18n model which has been attached to the application component via the manifest
		// For this purpose the following enhancement chain is built:
		// Generic Template texts <- Template specific texts <- Application specific texts
		// the method supports async loading as well as sync loading (and mixtures of both) and returns a promise that is resolved once all necessary bundles are loaded
		// and the enhancement is done

		function fnEnhanceI18nModel(oComponent) {
			var aPromises = [];

			// as long as we can't clone resource models we will create a new instance of a resource model causing additional requests
			//var oI18nModel = oComponent.getModel("sap.fe.i18n");
			//var oI18nModelClone = jQuery.extend(true, {}, oI18nModel);
			var oI18nModelClone = new ResourceModel({
				bundleName: "sap/fe/messagebundle",
				async: true
			});

			// add promise to load general text resource model
			aPromises.push(oI18nModelClone.getResourceBundle());

			/*
			Currently we don't allow template and application i18n models - once we support them we need to activate this
			coding. we might introduce a library i18n that is allowed to be overwritten by the application as well
			we need to invent a new model name as sap.fe.i18n is already used or rename this one
			// get template and application model
			var oTemplateModel = oComponent.getModel("i18n"), oPromiseTemplateModel;
			var oApplicationModel = oComponent.getAppComponent().getModel("i18n|" + oComponent.getMetadata().getComponentName() + "|" + oComponent.getEntitySet());

			if (oTemplateModel) {
				oPromiseTemplateModel = Promise.resolve(oTemplateModel.getResourceBundle()).then(function (oResourceBundle) {
					return oI18nModelClone.enhance(oResourceBundle);
				});
				aPromises.push(oPromiseTemplateModel);
			}

			if (oApplicationModel) {
				aPromises.push(Promise.resolve(oApplicationModel.getResourceBundle()).then(function (oResourceBundle) {
					return (oPromiseTemplateModel || Promise.resolve()).then(function () {
						return oI18nModelClone.enhance(oResourceBundle);
					});
				}));
			}*/

			Promise.all(aPromises).then(function () {
				oI18nModelClone.getResourceBundle().then(function (oResourceBundle) {
					// as we need the resource bundle in the formatter synchronously and as we take care that the
					// view is not rendered before all bundles are loaded we overwrite the getResourceBundle and
					// return the resource bundle instead of a (resolved) promise
					oI18nModelClone.getResourceBundle = function () {
						return oResourceBundle;
					};

					oComponent.setModel(oI18nModelClone, "sap.fe.i18n");
				});

			});

			return aPromises;
		}

		function fnDetermineStableID(oComponent) {
			// TODO Navigation: the navigation path is missing here - we should create real unique IDs, maybe we can also use the ID specified in the Page settings
			if (oComponent.getAppComponent().getMetadata().getComponentName() === "" || oComponent.getTemplateName() === "" || oComponent.getEntitySet() === "") {
				return false;
			}
			return oComponent.getAppComponent().getMetadata().getComponentName() + "::" + oComponent.getTemplateName() + "::" + oComponent.getEntitySet();
		}

		function createParameterModel(sEntityType, oComponent, oMetaModel) {
			var oSettings = null;
			var oAllSettings = oComponent.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

			// create settings section in parameter model with all settings passed to
			// the component
			oSettings = jQuery.extend({}, oAllSettings);

			// remove properties not needed or available on the component itself
			delete oSettings.appComponent;
			delete oSettings.entitySet;
			delete oSettings.navigationProperty;

			return new JSONModel({
				entitySet: oComponent.getEntitySet(),
				"sap-ui-debug": window["sap-ui-debug"],
				"settings": oSettings,
				"manifest": oComponent.getAppComponent().getMetadata().getManifest(),
				metaModel: oMetaModel
			});
		}

		/*
		 * Creates the XMLView based on some models.
		 *
		 */
		function createXMLView(oComponentRegistryEntry) {
			var oComponent = oComponentRegistryEntry.oComponent,
				fnCreateViewController = oComponentRegistryEntry.createViewController;
			//fnTemplateSpecificParameters = oComponentRegistryEntry.methods && oComponentRegistryEntry.methods.getTemplateSpecificParameters;
			var oView = null, oViewSettings;
			var oModel = oComponent.getModel();
			var oMetaModel = oModel.getMetaModel();
			var oEntitySet = oMetaModel.getObject("/$EntityContainer/" + oComponent.getEntitySet());
			var sStableId = fnDetermineStableID(oComponent);

			if (!oEntitySet || !sStableId) {
				oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage(
					{
						text: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
						description: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
					}
				);
				return Promise.reject();
			}

			// TODO Navigation: should this happen at all if we have unique IDs? Couldn't we remove this?
			oView = sap.ui.getCore().byId(sStableId);
			if (oView) {
				jQuery.sap.log.warning("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
				try {
					oView.destroy();
				} catch (ex) {
					jQuery.sap.log.warning("Error destroying view: " + ex);
				}
				oView = null;
			}

			// device model
			var oDeviceModel = new JSONModel(sap.ui.Device);
			oDeviceModel.setDefaultBindingMode("OneWay");

			// parameter model
			var oParameterModel = createParameterModel(oEntitySet.$Type, oComponent, oMetaModel);

			var oViewPromise = new Promise(function (fnResolve, fnReject) {
				var mPreTemplaterParameters = {
					oParameterModel: oParameterModel.createBindingContext("/")
				};

				// Pre PreProcessor to determine cross service navigations
				Promise.all(oComponent.preTemplater(mPreTemplaterParameters)).then(function (context) {
					oComponent.runAsOwner(function () {
						oViewSettings = {
							async: true,
							preprocessors: {
								xml: {
									bindingContexts: {
										entitySet: oMetaModel.createBindingContext("/" + oComponent.getEntitySet())
									},
									models: {
										entitySet: oMetaModel,
										'sap.fe.metaModel': oMetaModel,
										device: oDeviceModel,
										parameter: oParameterModel
									},
									preprocessorsData: oComponent.getComponentData().preprocessorsData
								}
							},
							id: sStableId,
							type: ViewType.XML,
							viewName: oComponent.getTemplateName(),
							height: "100%"
						};

						if (fnCreateViewController) {
							var ControllerClass = fnCreateViewController();
							oViewSettings.controller = new ControllerClass();
						}

						oView = sap.ui.view(oViewSettings);
						/* eslint max-nested-callbacks: 0 */
						oView.loaded().then(function (oView) {
							fnResolve(oView);
						}).catch(function (error) {
							oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage(
								{
									text: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
									description: oComponentRegistryEntry.oTemplateUtils.getText("SAPFE_APPSTART_TEMPLATING_ISSUE"),
									technicalMessage: error.message || ( error.messages && error.messages[0] && error.messages[0].text ) || "",
									technicalDetails: error.stack || error
								}
							);
							fnReject(error);
						});
					});
				}).catch(oComponent.preTemplaterReject.bind(oComponentRegistryEntry.oComponent));
			});

			// return oView;
			return oViewPromise;
		}

		return UIComponent.extend("sap.fe.core.TemplateComponent", {

			metadata: {
				properties: {
					/**
					 * Name of template
					 */
					templateName: {
						type: "string",
						defaultValue: null
					},
					/**
					 * Entity Set
					 */
					entitySet: {
						type: "string",
						defaultValue: null
					}
				}
			},

			getAppComponent: function () {
				// search for sap.fe.AppComponent
				var oControl;

				if (!this._oAppComponent) {
					oControl = this.getComponentContainer();
					while (oControl && !(oControl instanceof sap.fe.AppComponent)) {
						oControl = oControl.getParent();
					}
					this._oAppComponent = oControl;
				}

				return this._oAppComponent;
			},

			init: function () {

				(UIComponent.prototype.init || jQuery.noop).apply(this, arguments);

				// TODO: TO be discussed, still one UI model for each component or shall we have one for all?
				var oUIModel = new JSONModel({
					editable: false,
					enabled: false,
					busyControls: {},
					outdatedControls: {}
				});
				this.setModel(oUIModel, "ui");

				var oParsingService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("URLParsing");

				// TODO Marcel: to be discussed, shall we have the _templPriv again? Should we have one for each template and one global?
				var oTemplatePrivate = new JSONModel({
					generic: {
						crossAppNavSupport: !!oParsingService && oParsingService.isIntentUrl(document.URL),
						draftIndicatorState: sap.m.DraftIndicatorState.Clear,
						listCommons: {
							functionEnabled: {}
						}
					},
					viewLevel: this.getComponentData().registryEntry.viewLevel
				});
				oTemplatePrivate.setDefaultBindingMode("TwoWay");
				this.setModel(oTemplatePrivate, "_templPriv");

			},

			// TODO: clearify with UI5 how to access the component container
			getComponentContainer: function () {
				return this.oContainer;
			},

			onBeforeRendering: function (oComponentRegistryEntry) {
				// oComponentRegistryEntry will be provided by TemplateAssembler
				// if Component is assembled without TemplateAssembler it could be that oComponentRegistryEntry is undefined
				// e.g. an application has an own implementation of Component
				if (oComponentRegistryEntry && !oComponentRegistryEntry.createViewStarted) {
					oComponentRegistryEntry.createViewStarted = true;

					oComponentRegistryEntry.aI18nLoadPromises = fnEnhanceI18nModel(oComponentRegistryEntry.oComponent);

					var oContainer = oComponentRegistryEntry.oComponent.getComponentContainer();
					var oModel = oContainer && oContainer.getModel();
					if (oModel) {
						// Do the templating once the $metadata documents and the annotation documents are loaded and all i18n Texts are loaded
						oModel.getMetaModel().requestObject("/$EntityContainer/").then(function () {
							createXMLView(oComponentRegistryEntry).then(function (oView) {
								// check that all i18n models
								Promise.all(oComponentRegistryEntry.aI18nLoadPromises).then(function () {
									oComponentRegistryEntry.oComponent.setAggregation("rootControl", oView);
									oContainer.invalidate();
								 });
							}, function(){
								// Resolve view registered promise to disable busy handling
								oComponentRegistryEntry.fnViewRegisteredResolve();
							});

						});
					}
				}
			}

		});
	});

})();

}; // end of sap/fe/core/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.TemplateUtils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateUtils",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/controller/ActionController",
	"sap/fe/controller/NavigationController",
	"sap/fe/core/MessageUtils",
	"sap/fe/core/CommonUtils"
], function (jQuery, BaseObject, ActionController, NavigationController, MessageUtils, CommonUtils) {
	"use strict";

	function getMethods(oComponentRegistry, oTemplateContract) {

		function getMessageUtils() {
			if (!oTemplateContract.oMessageUtils) {
				oTemplateContract.oMessageUtils = new MessageUtils(this);
			}

			return oTemplateContract.oMessageUtils;
		}

		function getActionController() {
			if (!oTemplateContract.oActionController) {
				oTemplateContract.oActionController = new ActionController(this);
			}

			return oTemplateContract.oActionController;
		}

		function getNavigationController() {
			if (!oTemplateContract.oNavigationController) {
				oTemplateContract.oNavigationController = new NavigationController(oTemplateContract, this);
			}

			return oTemplateContract.oNavigationController;
		}

		function getCommonUtils() {
			if (!oTemplateContract.oCommonUtils) {
				oTemplateContract.oCommonUtils = new CommonUtils(this);
			}

			return oTemplateContract.oCommonUtils;
		}

		function getText(sTextId, parameters) {
			var aReplacementParameters;
			if (parameters){
				aReplacementParameters = parameters.constructor === Array ? parameters : [parameters];
			}

			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe");
			return oResourceBundle.getText(sTextId, aReplacementParameters);
		}

		/* App State methods might be moved to an AppStateController */
		function getAppStateContainer() {
			var sContainer = oTemplateContract.oAppStateModel.getProperty("/" + oComponentRegistry.oController.getView().getId());

			if (sContainer) {
				return JSON.parse(sContainer);
			}
		}

		function setAppStateContainer(oData) {
			oTemplateContract.oAppStateModel.setProperty("/" + oComponentRegistry.oController.getView().getId(), JSON.stringify(oData));

			var oAppStateData = oTemplateContract.oAppStateModel.getProperty("/");
			oTemplateContract.oAppState = sap.ushell.Container.getService("CrossApplicationNavigation").createEmptyAppState(oTemplateContract.oAppComponent);

			// we keep it simple now as we know we need to navigate to rootWithAppState but will be more complex in future as we need to know the target route
			oTemplateContract.oAppComponent.getRouter().navTo("rootWithAppState", {iAppState: oTemplateContract.oAppState.getKey()}, true);

			oTemplateContract.oAppState.setData(oAppStateData);
			oTemplateContract.oAppState.save().fail(function () {
				// what shall we do now?
			});
		}

		function attachAppStateChanged(fn) {
			oTemplateContract.aAppStateChangedListener.push(fn);
		}

		function detachAppStateChanged(fn) {
			for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++){
				if (oTemplateContract.aAppStateChangedListener[i] === fn){
					oTemplateContract.aAppStateChangedListener.splice(i, 1);
				}
			}
		}

		return {
			getText: getText,
			getActionController: getActionController,
			getNavigationController: getNavigationController,
			getMessageUtils: getMessageUtils,
			getCommonUtils: getCommonUtils,
			getBusyHelper: function () {
				return oTemplateContract.oBusyHelper;
			},
			getAppStateContainer: getAppStateContainer,
			setAppStateContainer: setAppStateContainer,
			attachAppStateChanged: attachAppStateChanged,
			detachAppStateChanged: detachAppStateChanged,
			getAppStateLoaded: function () {
				return oTemplateContract.oInnerAppStatePromise;
			}
		};
	}

	return BaseObject.extend("sap.fe.core.TemplateUtils.js", {
		constructor: function (oComponentRegistry, oTemplateContract) {
			jQuery.extend(this, getMethods(oComponentRegistry, oTemplateContract));
		}
	});
});

}; // end of sap/fe/core/TemplateUtils.js
if ( !jQuery.sap.isDeclared('sap.fe.core.internal.testableHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.internal.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/core/internal/testableHelper",[], function () {
	"use strict";

	/*
	 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
	 * and methods which have to be called in the test code.
	 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
	 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
	 * other classes.
	 * Moreover, it is best practice to write unit tests for public methods.
	 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
	 * accessible to unit tests.
	 * Actually, making a private method accessible to unit tests has two aspects:
	 * - Call this method directly in a unit test in order to test it
	 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly
	 *   (and prevent the private method from being executed in the context of this test)
	 *
	 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
	 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
	 *
	 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
	 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
	 *
	 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
	 * Check method observableConstructor in order to find out, how this can be achieved.
	 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];

	function createLogAccessFunction(oConstructor) {
		return function (oInstance) {
			if (iTestMode >= 0) {
				return null;
			}
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++) {
				var oLog = aLog[i];
				if (oLog.me === oInstance) {
					return oLog.args;
				}
			}
		};
	}

	function removeConstructorObservation(oConstructor) {
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log) {
			if (oConstructor.isStatic) {
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++) {
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0) {
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0) {
					oConstructor.log = aNewLog;
				} else {
					delete oConstructor.log;
				}
			} else {
				delete oConstructor.log;
			}
		}
	}

	function removeConstructorObservations() {
		aConstructors.forEach(removeConstructorObservation);
	}

	function fnObservableConstructor(fnConstructor, bStatic) {
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++) {
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor) {
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function () {
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)) {
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace) {
					oConstructor.observer(oRet, arguments);
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
		// Call this method at the beginning of the setup of your unit test.
		// This method returns a stub object. This stub possesses all functions prepared via testable as methods.
		// Thereby, the name of the method is derived from the parameter sName of testable.
		// Thus, when testing the private method just test the corresponding method of the stub.
		// When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function () {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = {};
			return oPossessor;
		},

		// Call this method at the end of the teardown of your unit test.
		endTest: function () {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

		// This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
		// startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function () {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = {id: iCount};
			mStartedApps[iCount] = oRet;
			return oRet;
		},

		// End the effect of startApp
		endApp: function (oAppId) {
			if (iTestMode > 0) {
				var id = oAppId.id;
				if (oAppId === mStartedApps[id]) {
					iTestMode--;
					delete mStartedApps[id];
				}
			}
		},

		// Use this method to define a private instance method that should be accessible to unit tests.
		// Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
		// Parameter sName is the name which can be used to access the function
		// This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function (fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = fnFunction;
				return function () {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},

		// Use this method to define a private static method that should be accessible to unit tests.
		// Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
		// Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
		// This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function (fnFunction, sName) {
			if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
				return fnFunction;
			}
			oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function () {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},

		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function () {
			return iTestMode === -1 && oStaticFunctions;
		},


		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/testableHelper"],
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to syp or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function (fnConstructor, bStatic) {
			if (iTestMode > 0) {
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},

		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function (fnConstructor, fnObserver, bReplace) {
			if (iTestMode >= 0) {
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer) {
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});

}; // end of sap/fe/core/internal/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/**
 * @namespace reserved for Fiori Elements
 * @name sap.fe
 * @private
 * @experimental
 */

/**
 * Initialization Code and shared classes of library sap.fe
 */
jQuery.sap.declare('sap.fe.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/fe/library",[
	"jquery.sap.global",
	"sap/ui/core/library"
], function (jQuery, library1) {
	"use strict";

	/**
	 * Fiori Elements Library
	 *
	 * @namespace
	 * @name sap.fe
	 * @private
	 * @experimental
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.fe",
		dependencies: [
			"sap.ui.core"
		],
		types: [],
		interfaces: [],
		controls: [],
		elements: [],
		extensions: {
			flChangeHandlers: {
				"sap.fe.Table" : "sap/fe/controls/_Table/Table"
			}
		},
		version: "1.50.2"
	});

	sap.ui.require(['sap/ui/core/XMLComposite', 'sap/ui/core/util/XMLPreprocessor'], function (XMLComposite, XMLPreprocessor) {
		XMLPreprocessor.plugIn(function (oNode, oVisitor) {
			oVisitor.visitAttributes(oNode);
			XMLComposite.initialTemplating(oNode, oVisitor, "sap.fe.Table");
		}, "sap.fe", "Table");

		XMLPreprocessor.plugIn(function (oNode, oVisitor) {
			oVisitor.visitAttributes(oNode);
			XMLComposite.initialTemplating(oNode, oVisitor, "sap.fe.FilterBar");
		}, "sap.fe", "FilterBar");

		// XMLPreprocessor.plugIn(function(oNode, oVisitor) {
		// 	oVisitor.visitAttributes(oNode);
		// 	XMLComposite.initialTemplating(oNode, oVisitor, "sap.fe.controls.Field");
		// },"sap.fe.controls","Field");
	});

	return sap.fe;

}, /* bExport= */false);

}; // end of sap/fe/library.js
if ( !jQuery.sap.isDeclared('sap.fe.model.DraftModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

//Provides class sap.fe.model.DraftModel
jQuery.sap.declare('sap.fe.model.DraftModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.ODataListBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.Context'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ChangeReason'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui.define("sap/fe/model/DraftModel",[
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/odata/v4/ODataListBinding",
	"sap/ui/model/odata/v4/Context",
	"sap/ui/model/Filter",
	"sap/ui/base/ManagedObject",
	"sap/ui/model/ChangeReason",
	"sap/ui/model/resource/ResourceModel",
	"sap/fe/core/internal/testableHelper"
], function (JSONModel, ODataListBinding, Context, Filter, ManagedObject, ChangeReason, ResourceModel, testableHelper) {
	"use strict";

	var MODELUPGRADENAMESPACE = "_$DraftModel";
	/* Just for support one can switch this in the debugger to have the internal private data added to the model */
	var bAddPrivateDataToModel = false;
	var REGEXFOREDITSTATEFILTER = /( and )?\(*IsActiveEntity eq.*$/g;

	/* Container for internal state per model. Needs to be destroyed with the model */
	var oPrivatModelData = {};

	/* Allow access for unit tests only */
	testableHelper.testableStatic(function () {
		bAddPrivateDataToModel = true;
	}, "addPrivateDataToModel");


	/**
	 * Stores private data
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @param {String} sKey key that is the target for the data in the object
	 * @param {Object} oData data to be stored
	 */
	function storeData(oModel, sKey, oData) {
		var oModelId = typeof oModel === "string" ? oModel : oModel.getId(),
			oPrivateData = oPrivatModelData[oModelId] = oPrivatModelData[oModelId] || {};
		oPrivateData[sKey] = oData;
		if (bAddPrivateDataToModel && !oModel[MODELUPGRADENAMESPACE]) {
			oModel[MODELUPGRADENAMESPACE] = oPrivateData;
		}
	}

	/**
	 * Retrieves private data from the model
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @param {String} sKey key that is the target for the data in the object
	 * @returns {Object} oData data to be stored
	 */
	function getData(oModel, sKey) {
		var oModelId = typeof oModel === "string" ? oModel : oModel.getId();
		return oPrivatModelData[oModelId] && oPrivatModelData[oModelId][sKey];
	}

	/**
	 * Enum for edit state of a document in an draft enabled service collection.
	 * Allows to simplify filtering on a set of documents as described by the
	 * individual state
	 * @alias sap.fe.model.DraftModel.EDITSTATE
	 * @readonly
	 * @enum {String}
	 * @private
	 * @sap-restricted
	 */
	var EDITSTATE = {
		/**
		 * Active documents that don't have a corresponding draft and all own draft documents
		 * @private
		 * @sap-restricted
	 	 */
		ALL: "0",
		/**
		 * Active documents that don't have a draft document
		 * @private
		 * @sap-restricted
		 */
		UNCHANGED: "1",
		/**
		 * Own draft documents
		 * @private
		 * @sap-restricted
		 */
		OWN_DRAFT: "2",
		/**
		 * Active documents that are locked by other users
		 * @private
		 * @sap-restricted
		 */
		LOCKED: "3",
		/**
		 * Active documents that have draft documents by other users
		 * @private

		 * @sap-restricted
		 */
		UNSAVED_CHANGES: "4"
	};
	testableHelper.testableStatic(EDITSTATE, "EDITSTATE");

	/**
	 * Transforms the internal editState into static filters for the list binding
	 * @param {String} sEditState id of the editState to be transformed
	 * @returns {String} OData compatible part of a $filter expression reflecting the state
	 */
	function getFilterForEditState(sEditState) {
		var sFilter = "";
		switch (sEditState) {
			case EDITSTATE.UNCHANGED:
				sFilter = "(IsActiveEntity eq true and HasDraftEntity eq false)";
				break;
			case EDITSTATE.OWN_DRAFT:
				sFilter = "(IsActiveEntity eq false)";
				break;
			case EDITSTATE.LOCKED:
				sFilter = "(IsActiveEntity eq true and SiblingEntity/IsActiveEntity eq null and DraftAdministrativeData/InProcessByUser ne '')";
				break;
			case EDITSTATE.UNSAVED_CHANGES:
				sFilter = "(IsActiveEntity eq true and SiblingEntity/IsActiveEntity eq null and DraftAdministrativeData/InProcessByUser eq '')";
				break;
			default:
				//EDITSTATE.ALL
				sFilter = "(IsActiveEntity eq false or SiblingEntity/IsActiveEntity eq null)";
				break;
		}
		return sFilter;
	}

	/* Allow access for unit tests only */
	testableHelper.testableStatic(getFilterForEditState, "getFilterForEditState");

	/**
	 * Get all EntitySets with all EntitySet annotations
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Array} Array of entity sets including annotations in @ and @sapui.name
	 */
	function getAllEntitySets(oModel) {
		var oMetaModel = oModel.getMetaModel(),
			aEntitySets = getData(oModel, "aEntitySets"),
			containerPromise = aEntitySets ? Promise.resolve(aEntitySets) : oMetaModel && oMetaModel.requestObject("/").then(function (oEntityContainer) {
				var aPromises = [];
				Object.keys(oEntityContainer).forEach(function (key) {
					var oElement = oEntityContainer[key], oPromise;
					if (oElement.$kind === "EntitySet") {
						oPromise = oMetaModel.requestObject("/" + key + "@");
						/* eslint max-nested-callbacks: 0 */
						aPromises.push(oPromise.then(function (oEntitySetAnnotations) {
							var oEntitySetAnnotation = {};
							/* Merge annotations to the entitySet object */
							oEntitySetAnnotation["@"] = oEntitySetAnnotations;
							oEntitySetAnnotation["@sapui.name"] = key;
							return oEntitySetAnnotation;
						}));
					}
				});
				return Promise.all(aPromises);
			});
		return containerPromise;
	}

	/**
	 * Creates an operation context binding for the given operation
	 * @param {sap.ui.model.odata.v4.Context} oContext The context that should be bound to the operation
	 * @param {String} sOperation The operation (action or function import)
	 * @return {sap.ui.model.odata.v4.ODataContextBinding} The context binding of the bound operation
	 */
	function createOperation(oContext, sOperation) {
		var oModel = oContext.getModel();
		return oModel.bindContext(sOperation + "(...)", oContext);
	}

	/* function templates of operations */

	/**
	 * Activates a draft document. The draft will replace the sibling entity and will be deleted by the backend
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftActivationAction
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftActivationAction() {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The activation action cannot be executed on an active document");
		}
	}

	/**
	 * Execute a preparation action
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftPreparationAction
	 * @param {String} [sideEffectsQualifier] Limits the prepare activities to a given side effects group specified by this qualifier
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftPreparationAction(sideEffectsQualifier) {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			/* Fix arguments */
			sideEffectsQualifier = arguments[1];
			if (typeof sideEffectsQualifier === "undefined") {
				sideEffectsQualifier = "";
			}
			oOperation.setParameter("SideEffectsQualifier", sideEffectsQualifier);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The preparation action cannot be executed on an active document");
		}
	}

	/**
	 * Executes validation of a draft function
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftValidationFunction
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftValidationFunction() {
		if (!this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The validation function cannot be executed on an active document");
		}
	}

	/**
	 * Creates a new draft from an active document
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedContext#executeDraftEditAction
	 * @param {Boolean} preserveChanges
	 *  <ul>
	 * 		<li>true - existing changes from another user that are not locked are preserved and an error message (http status 409) is send from the backend</li>
	 * 		<li>false - existing changes from another user that are not locked are overwritten</li>
	 * 	</ul>
	 * @returns {Promise.<sap.ui.model.odata.v4.Context>} Resolve function returns the context of the operation
	 * @private
	 * @sap-restricted
	 */
	function executeDraftEditAction(preserveChanges) {
		if (this.getProperty("IsActiveEntity")) {
			var oOperation = createOperation(this, arguments[0]);
			/* Fix arguments */
			preserveChanges = arguments[1];
			oOperation.setParameter("PreserveChanges", preserveChanges);
			return oOperation.execute().then(function() {
				return oOperation;
			});
		} else {
			throw new Error("The edit action cannot be executed on a draft document");
		}
	}

	/**
	 * @classdesc
	 * Only for documentation of the methods that are mixed into the {@link sap.ui.model.odata.v4.Context}
	 * if the context is part of a draft entitySet
	 * @namespace
	 * @alias sap.fe.model.DraftModel.upgradedContext
	 * @experimental This module is only for experimental use!
	 * @private
	 * @sap-restricted
	 */
	var oOperationTemplates = {
		/* draftOperations: */
		"ActivationAction": executeDraftActivationAction,
		"PreparationAction": executeDraftPreparationAction,
		"ValidationFunction": executeDraftValidationFunction,
		/* documentOperations: */
		"EditAction": executeDraftEditAction
	};

	/**
	 * Adds methods for creating bound operations on the context object
	 * @param {sap.ui.model.odata.v4.Context} oContext The context object that should get the operations
	 * @param {Object} oEntitySet The entitySet for the context
	 */
	function addOperationsToContext(oContext, oEntitySet) {
		var oOperations = oEntitySet["@"]["@com.sap.vocabularies.Common.v1.DraftRoot"];
		Object.keys(oOperations).forEach(function (operationName) {
			var sOperation = oOperations[operationName];
			oContext["executeDraft" + operationName] = oOperationTemplates[operationName].bind(oContext, sOperation);
		});
	}

	/**
	 * Check if this is a draft model.<br/>
	 *
	 * A model is considered a draft model if at least one entitySet of the OData service is annotated with one of the terms
	 * <ul>
	 *   <li>com.sap.vocabularies.Common.v1.DraftRoot</li>
	 *   <li>com.sap.vocabularies.Common.v1.DraftNode</li>
	 * </ul>
	 *
	 * @function
	 * @name sap.fe.model.DraftModel#isDraftModel
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise.<Boolean>} True if Draft Model
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function isDraftModel(oModel) {
		/* Strategy: check if at least one entitySet is draft enabled */
		/* Load EntityContainer */
		return getAllEntitySets(oModel).then(function (aEntitySetWithAnnotations) {
			/* All entitySet annotations are avaialable */
			var aDraftEntitySetAnnotations = aEntitySetWithAnnotations.filter(function (oEntitySet) {
				var oAnnotations = oEntitySet["@"] || {};
				return oAnnotations.hasOwnProperty("@com.sap.vocabularies.Common.v1.DraftRoot") || oAnnotations.hasOwnProperty("@com.sap.vocabularies.Common.v1.DraftNode");
			}),
				isDraft = Array.isArray(aDraftEntitySetAnnotations) && aDraftEntitySetAnnotations.length > 0;
			if (isDraft) {
				/* it is very likely that we need the entiySet data again so save it to the model */
				storeData(oModel, "aEntitySets", aEntitySetWithAnnotations);
				storeData(oModel, "aDraftEntitySets", aDraftEntitySetAnnotations);
			}
			return isDraft;
		});
	}

	/**
	 * Merges a custom $filter in mParameters with the given edit state filter
	 * @param {String} sEditState id of the editState to be merged to the custom filter
	 * @param {String} sFilter the custome filter string
	 * @returns {String} The merged filter string (for $filter)
	 */
	function mergeEditStateFilterToFilter(sEditState, sFilter) {
		var sFilterValue = getFilterForEditState(sEditState, "");
		if (sFilter) {
			sFilter = "(" + sFilter + ") and " + sFilterValue;
		} else {
			sFilter = sFilterValue;
		}
		return sFilter;
	}

	/**
	 * Upgrades an OData v4 model to a draft model
	 *
	 * The model will overwrite the following methods to be able to serve data and keep state in an internal
	 * JSONModel:
	 *  <ul>
	 *        <li>bindList <ul>
	 *           <li>to add static filters to $filter and $expand to the binding for draft enabled EntitySets<li>
	 *        </ul></li>
	 * </ul>
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @private
	 */
	function _upgrade(oModel) {
		var fnOriginal = {},
			mListBindings = {},
			iListBindingIndex = -1, //index for mListBindings
			oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe"),
			oModelData = {
				/**
				 * editStates
				 * @constant For filtering documents by state e.g. own drafts, unchanged documents, etc
				 * @type {map}
				 */
				"editStates": [
					{ id: EDITSTATE.ALL, name: oResourceBundle.getText("SAPFE_DRAFT_ALL_FILTER") },
					{ id: EDITSTATE.UNCHANGED, name: oResourceBundle.getText("SAPFE_DRAFT_UNCHANGED_FILTER") },
					{ id: EDITSTATE.OWN_DRAFT, name: oResourceBundle.getText("SAPFE_DRAFT_OWN_DRAFT_FILTER") },
					{ id: EDITSTATE.LOCKED, name: oResourceBundle.getText("SAPFE_DRAFT_LOCKED_FILTER") },
					{ id: EDITSTATE.UNSAVED_CHANGES, name: oResourceBundle.getText("SAPFE_DRAFT_UNSAVED_CHANGES_FILTER") }
				],

				/*  We need the properties at least per entitySet (maybe even navigation props) */
				"entitySets": {}
			}, oInternalModel,
			aDraftEntitySets = getData(oModel, "aDraftEntitySets");

		storeData(oModel, "mListBindings", mListBindings);
		/* Allow access for unit tests only */
		testableHelper.testableStatic(function (oModel) {
			return getData(oModel, "mListBindings");
		}, "getOverwrittenListBindings");

		/* Work on draft entity sets */
		aDraftEntitySets.forEach(function (entitySet) {
			/* Create a draft management section for each draft entity set */
			oModelData.entitySets[entitySet["@sapui.name"]] = {
				editState: "0" //Default 'All'
			};
		});

		/* Provide access function */
		oInternalModel = new JSONModel(oModelData);

		storeData(oModel, "oDraftAccessModel", oInternalModel);
		oModel.getDraftAccessModel = getDraftAccessModel;
		/* React on internal model updates */
		oInternalModel.attachPropertyChange(function (oEvent) {
			var oParameter = oEvent.getParameters(),
				sPath = oParameter && (oParameter.path.indexOf("/entitySets") === 0 ? oParameter.path.split("/")[2] : false);
			if (sPath) {
				sPath = "/" + sPath;
				Object.keys(mListBindings).forEach(function (sKey) {
					var oBinding = mListBindings[sKey],
						mParameters = oBinding.mParameters, sCurrentFilter = "",
						sEditStateFilter = "", aResult = [];
					/* Check only list binding */
					if (oBinding instanceof ODataListBinding && oBinding.getPath() === sPath) {
						/* Change static filter values according to the edit state */
						sCurrentFilter = mParameters["$filter"];
						if (sCurrentFilter) {
							/* get rid of old edit state so the custom filter remains */
							aResult = sCurrentFilter.match(REGEXFOREDITSTATEFILTER);
							if (Array.isArray(aResult) && aResult[0]) {
								sEditStateFilter = aResult[0];
								sCurrentFilter = sCurrentFilter.replace(sEditStateFilter, "");
								//Remove first and last paranthesis */
								sCurrentFilter = sCurrentFilter.substr(1).slice(0, -1);
							}
						}
						mParameters["$filter"] = mergeEditStateFilterToFilter(oParameter.value, sCurrentFilter);
						oBinding.applyParameters(mParameters);
						oBinding.reset(sap.ui.model.ChangeReason.Change);
					}
				});
			}
		});

		/* Overwrite bindList */
		fnOriginal.bindList = oModel.bindList;
		oModel.bindList = function (sPath, oContext, vSorters, vFilters, mParameters) {
			/* Special handling for draft entity sets */
			var oEntitySetState = oInternalModel.getObject("/entitySets" + sPath),
				oListBinding, fnChangeParameters;

			if (oEntitySetState) {
				/* upgrade mParameters of ListBindng of Draft EntitySets only */
				var	sExpand = "";
				mParameters = mParameters || {};
				sExpand = mParameters.$expand;
				/* merge given $expand */
				if (sExpand) {
					if (sExpand.indexOf("DraftAdministrativeData") < 0) {
						sExpand += ",DraftAdministrativeData";
					}
				} else {
					sExpand = "DraftAdministrativeData";
				}
				mParameters.$expand = sExpand;
				mParameters.$filter = mergeEditStateFilterToFilter(oEntitySetState.editState, mParameters.$filter);
			}
			/* argument 4 is mParameters */
			arguments[4] = mParameters;
			oListBinding = fnOriginal.bindList.apply(this, arguments);

			if (oEntitySetState) {
				/* overwrite changeParameters method of ListBinding of Draft EntitySets only */
				fnChangeParameters = oListBinding.changeParameters;
				oListBinding.changeParameters = function (mParameters) {
					var oEntitySetState = oInternalModel.getObject("/entitySets" + sPath);
					mParameters.$filter = mergeEditStateFilterToFilter(oEntitySetState.editState, mParameters.$filter);
					return fnChangeParameters.call(this, mParameters);
				};
				/* keep a list of overwritten ListBindings */
				mListBindings[++iListBindingIndex] = oListBinding;
				/* overwrite destroy to remove from list. Since iListBindingIndex is native type we need a factory function */
				oListBinding.destroy = (function(index) {
					return function() {
						delete mListBindings[index];
						return ODataListBinding.prototype.destroy.apply(this, arguments);
					};
				})(iListBindingIndex);
			}
			return oListBinding;
		};

		/* Overwrite Context contstructor to add methods for bound (draft) operations if needed */
		fnOriginal.create = Context.create;
		Context.create = function (oModel, oBinding, sPath, iIndex, oCreatePromise) {
			var oContext = fnOriginal.create.apply(null, arguments),
				bFoundDraftEntitySet = false;
			/* Only manipulate if this is context of an upgraded model */
			if (getData(oModel, "bUpgraded") && sPath) {
				aDraftEntitySets.forEach(function (entitySet) {
					/* run only once so check if bFoundDraftEntitySet is not true already */
					var isDraftEntitySetPath = !bFoundDraftEntitySet && sPath.indexOf(entitySet["@sapui.name"]) === 1;
					if (isDraftEntitySetPath) {
						bFoundDraftEntitySet = true;
						addOperationsToContext(oContext, entitySet);
					}
				});
			}
			return oContext;
		};

		/* Clean up internal data in the destroy method */
		fnOriginal.modelDestroy = oModel.destroy;
		oModel.destroy = function () {
			delete oPrivatModelData[this.getId()];
			return fnOriginal.modelDestroy.apply(this, arguments);
		};
		/* Mark it as upgraded */
		storeData(oModel, "bUpgraded", true);
	}

	/**
	 * Upgrades an OData v4 model to a Draft Model. Throws an error if it is not a draft enabled service
	 * <p>The result of this function will mix new functions into instances of the following classes
	 * 	<ul>
	 * 		<li>{@link sap.ui.model.odata.v4.ODataModel}</li>
	 * 		<li>{@link sap.ui.model.odata.v4.Context}</li>
	 * </ul>
	 * Read the sections {@link sap.fe.model.DraftModel.upgradedModel}
	 * and {@link sap.fe.model.DraftModel.upgradedContext} for more information about the added functions
	 * </p>
	 * @example <caption>Example usage of upgrade</caption>
	 * var oModel = new ODataModel(...);
	 * DraftModel.upgrade(oModel).then(function() {
	 * 	oView.setModel(oModel);
	 * 	oView.setModel(oModel.getDraftAccessModel(), "$draft");
	 * });
	 * @function
	 * @name sap.fe.model.DraftModel#upgrade
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise} Resolves once the model is upgraded
	 * @throws Will throw an error if the service doesn't have any draft entity sets
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function upgrade(oModel) {
		/* only upgrade draft models */
		return isDraftModel(oModel).then(function (isDraft) {
			if (isDraft) {
				/* preparation */
				_upgrade(oModel);
			} else {
				throw new Error("The model is not draft enabled");
			}
		});
	}

	/**
	 * Upgrades an OData v4 model to a Draft Model if it is a draft enbled service and
	 * leave it as is if not.
	 * @see {@link sap.fe.model.DraftModel#upgrade} for more information
	 * @function
	 * @name sap.fe.model.DraftModel#upgradeOnDemand
	 * @param {sap.ui.model.odata.v4.ODataModel} oModel OData v4 model instance
	 * @returns {Promise.<Boolean>} True if Draft Model detected and upgraded
	 * @private
	 * @sap-restricted
	 * @static
	 */
	function upgradeOnDemand(oModel) {
		/* only upgrade draft models */
		return isDraftModel(oModel).then(function (isDraft) {
			if (isDraft) {
				/* preparation */
				_upgrade(oModel);
			}
			return isDraft;
		});
	}

	/**
	 * Mixin for {@link sap.ui.model.odata.v4.ODataModel}. Returns the internal JSON Model aka DraftAccessModel
	 * @example <caption>The model can be set to a control or view as any other model</caption>
	 * oView.setModel(oModel.getDraftAccessModel(), "$draft");
	 * @function
	 * @name sap.fe.model.DraftModel.upgradedModel#getDraftAccessModel
	 * @returns {sap.ui.model.json.JSONModel} The interal DraftAccessModel
	 * @private
	 * @sap-restricted
	 */
	function getDraftAccessModel() {
		return getData(this, "oDraftAccessModel");
	}

	/**
	 * @classdesc
	 * Only for documentation of the methods that are mixed into the {@link sap.ui.model.odata.v4.ODataModel}
	 * after it has been upgraded to a sap.fe.model.DraftModel
	 * @namespace
	 * @alias sap.fe.model.DraftModel.upgradedModel
	 *
	 * @experimental This module is only for experimental use!
	 * @private
	 * @sap-restricted
	 */
	var upgradedModel = {}; /* eslint no-unused-vars: 0 */

	/**
	 * @classdesc
	 * Static Draft 2.0 Model transformation for {@link sap.ui.model.odata.v4.ODataModel}
	 * to simplify programming against the draft enabled OData services with sapui5
	 *
	 * @see {@link sap.ui.model.odata.v4.ODataModel}
	 * @namespace
	 * @alias sap.fe.model.DraftModel
	 * @private
	 * @sap-restricted
	 * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
	 * @since 1.48.0
	 */
	var DraftModel = {
		upgrade: upgrade,
		upgradeOnDemand: upgradeOnDemand,
		isDraftModel: isDraftModel,
		EDITSTATE: EDITSTATE
	};

	return DraftModel;

}, /* bExport= */true);

}; // end of sap/fe/model/DraftModel.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ListReport.controller.ControllerImplementation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/* global hasher */
jQuery.sap.declare('sap.fe.templates.ListReport.controller.ControllerImplementation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.mdc.ConditionModel'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ListReport/controller/ControllerImplementation",[
	"jquery.sap.global",
	"sap/ui/mdc/ConditionModel"
], function (jQuery, ConditionModel) {
	"use strict";

	return {
		getMethods: function (oViewProxy, oTemplateUtils, oController) {

			var oTable, oFilterBar;

			function fnCreateAppState() {
				var sFilterBarAppState = oFilterBar.getAppState();

				if (!sFilterBarAppState) {
					// no app state exists and filter bar does not have any app state relevant changes, there is
					// no need to generate an app state
					return;
				}

				var oAppState = {
					filterBar: sFilterBarAppState
				};

				oTemplateUtils.setAppStateContainer(oAppState);
			}

			function fnApplyAppState(oAppState) {
				if (!oAppState) {
					oAppState = oTemplateUtils.getAppStateContainer();
				}

				if (oAppState) {
					oFilterBar.setAppState(oAppState.filterBar);
				}
			}

			/*
			 This coding is deactivated as the FLP does not yet support dynamic tiles for OData v4 - activate once
			 the FLP supports OData v4 as well
			 This coding needs to be adapted to the refactoring then for example ListBindingInfo shall be used
			 instead of the ListBinding

			 function fnCreateRequestUrl(oBinding, sPath, oContext, aUrlParams, bBatch){
			 // create the url for the service
			 var sNormalizedPath,
			 aAllUrlParameters = [],
			 sUrl = "";

			 if (sPath && sPath.indexOf('?') !== -1 ) {
			 sPath = sPath.substr(0, sPath.indexOf('?'));
			 }

			 if (!oContext && !jQuery.sap.startsWith(sPath,"/")) {
			 jQuery.sap.log.fatal(oBinding + " path " + sPath + " must be absolute if no Context is set");
			 }

			 sNormalizedPath = oBinding.getModel().resolve(sPath, oContext);

			 //An extra / is present at the end of the sServiceUrl, taking the normalized url from index 1
			 if (!bBatch) {
			 sUrl = oBinding.getModel().sServiceUrl + sNormalizedPath.substr(1);
			 } else {
			 sUrl = sNormalizedPath.substr(sNormalizedPath.indexOf('/') + 1);
			 }

			 if (aUrlParams) {
			 aAllUrlParameters = aAllUrlParameters.concat(aUrlParams);
			 }

			 if (aAllUrlParameters && aAllUrlParameters.length > 0) {
			 sUrl += "?" + aAllUrlParameters.join("&");
			 }
			 return sUrl;
			 }

			 function fnGetDownloadUrl(oBinding) {
			 var aParams = [];

			 if (oBinding.sFilterParams) {
			 aParams.push(oBinding.sFilterParams);
			 }

			 if (oBinding.sCustomParams) {
			 aParams.push(oBinding.sCustomParams);
			 }

			 if (oBinding.mParameters) {
			 if (oBinding.mParameters.$count) {
			 aParams.push("$count="+oBinding.mParameters.$count);
			 }

			 if (oBinding.mParameters.$filter) {
			 aParams.push("$filter=("+oBinding.mParameters.$filter.replace(/'/g,"%27").replace(/ /g,"%20")+")");
			 }

			 if (oBinding.mParameters.$select) {
			 aParams.push("$select="+oBinding.mParameters.$select.replace(/'/g,"%27").replace(/,/g,"%2c"));
			 }

			 // we can skip the $expand for now as the count shall be the same to avoid unnecessary read requests in the backend
			 // if (oBinding.mParameters.$expand) {
			 // 	aParams.push("$expand="+oBinding.mParameters.$expand.replace(/'/g,"%27").replace(/\//g,"%2f"));
			 // }

			 // we set $top to 0 to avoid that any data is requested - we are only interested in the count
			 aParams.push("$top=0");
			 }

			 var sPath = oBinding.getModel().resolve(oBinding.sPath,oBinding.oContext);

			 if (sPath) {
			 return fnCreateRequestUrl(oBinding,sPath, null, aParams);
			 }
			 }*/

			function fnSetShareModel() {
				var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
				//var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
				//var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || "";

				//shareModel: Holds all the sharing relevant information and info used in XML view
				var oShareInfo = {
					bookmarkTitle: document.title, //To name the bookmark according to the app title.
					bookmarkCustomUrl: function () {
						var sHash = hasher.getHash();
						return sHash ? ("#" + sHash) : window.location.href;
					},
					/*
					 To be activated once the FLP shows the count - see comment above
					 bookmarkServiceUrl: function() {
					 //var oTable = oTable.getInnerTable(); oTable is already the sap.fe table (but not the inner one)
					 // we should use table.getListBindingInfo instead of the binding
					 var oBinding = oTable.getBinding("rows") || oTable.getBinding("items");
					 return oBinding ? fnGetDownloadUrl(oBinding) : "";
					 },*/
					isShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()
				};
				var oTemplatePrivateModel = oController.getOwnerComponent().getModel("_templPriv");
				oTemplatePrivateModel.setProperty("/listReport/share", oShareInfo);
			}

			// Generation of Event Handlers
			return {
				onInit: function () {
					oTable = oController.byId("template::Table");
					oFilterBar = oController.getView().byId("template::FilterBar");

					// set filter bar to disabled until app state is loaded
					oFilterBar.setEnabled(false);

					fnSetShareModel();

					// attach to the model context changed event of the filterbar and the table - once both are fired
					// create the condition model and do the app state handling
					var oFilterBarPromise = new jQuery.Deferred();
					var oTablePromise = new jQuery.Deferred();

					var fnFilterBarListener = function () {
						oFilterBarPromise.resolve();
						oFilterBar.detachModelContextChange(fnFilterBarListener);
					};
					oFilterBar.attachModelContextChange(fnFilterBarListener);

					var fnTableListener = function () {
						oTablePromise.resolve();
						oTable.detachModelContextChange(fnTableListener);
					};
					oTable.attachModelContextChange(fnTableListener);

					Promise.all([oFilterBarPromise, oTablePromise]).then(function () {
						// Create condition model and bind it against the view
						var oListBinding = oTable.getListBinding();
						var oConditionModel = ConditionModel.getFor(oListBinding);
						oController.getView().setModel(oConditionModel, "sap.fe.cm");

						// handle app state
						oTemplateUtils.getAppStateLoaded().then(function () {
							var oAppState = oTemplateUtils.getAppStateContainer();
							if (oAppState) {
								// an app state exists, apply it
								fnApplyAppState(oAppState);
							}

							// attach to further app state changed
							oTemplateUtils.attachAppStateChanged(fnApplyAppState);

							oFilterBar.setEnabled(true);
						});
					});
				},

				handlers: {
					onSearch: function () {
						if (this.getView().byId("template::FilterBar").getLiveUpdate() === false) {
							/* we do not support the GO-Button in the first delivery although it's implemented in the table and filterBar.
							   one missing part is the app state - here we need to add the information that the GO button was pressed once
							   we officially support the Go button as well
							 */
							fnCreateAppState();
						}
					},
					onFilterBarChange: function () {
						if (this.getView().byId("template::FilterBar").getLiveUpdate()) {
							fnCreateAppState();
						}
					},
					onItemPress: function (oEvent) {
						// Handling for navigating to another app when clicking on an item
						var oManifest = oController.getOwnerComponent().getAppComponent().getMetadata().getManifest();
						var sEntitySet = oController.getOwnerComponent().getEntitySet();
						var oEntitySet = oManifest["sap.fe"].entitySets[sEntitySet];
						var sOutbound = oEntitySet.entry.default.outbound;


						if (oManifest["sap.app"] && oManifest["sap.app"].crossNavigation && oManifest["sap.app"].crossNavigation.outbounds && oManifest["sap.app"].crossNavigation.outbounds[sOutbound]) {
							var oDisplayOutbound = oManifest["sap.app"].crossNavigation.outbounds[sOutbound];
							var oParameters = {};
							if (oDisplayOutbound.parameters) {
								var oBindingContext = oEvent.getParameters().listItem.getBindingContext();
								for (var sParameter in oDisplayOutbound.parameters) {
									if (oDisplayOutbound.parameters[sParameter].value.format === "binding") {
										oParameters[sParameter] = oBindingContext.getProperty(oDisplayOutbound.parameters[sParameter].value.value);
									}
								}
							}
							var oCrossAppNavigator = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
							oCrossAppNavigator && oCrossAppNavigator.toExternal({
								target: {
									semanticObject: oDisplayOutbound.semanticObject,
									action: oDisplayOutbound.action
								},
								params: oParameters
							});
						}


					},

					callAction: function (oEvent) {
						oTemplateUtils.getActionController().callAction(oEvent);
					},

					showError: function (oEvent) {
						// handling error after onDataReceived by the table to show message box
						var oSourceEvent = oEvent.getParameters();
						var oError = oSourceEvent.getParameter("error");
						oTemplateUtils.getMessageUtils().handleRequestFailed(oError);
					},

					onShareListReportActionButtonPress: function (oEvent) {
						var localI18nRef = oController.getView().getModel("sap.fe.i18n").getResourceBundle();
						if (!this._oShareActionButton) {
							//TODO: oCommonUtils was not defined for oTemplateUtils
							this._oShareActionButton = sap.ui.xmlfragment(
								"sap.fe.templates.listReport.view.fragments.ShareSheet", {
									shareEmailPressed: function () {
										sap.m.URLHelper.triggerEmail(null, localI18nRef.getText("SAPFE_EMAIL_SUBJECT", [document.title]), document.URL);
									},
									//TODO: JAM integration to be implemented
									shareJamPressed: function () {
									}
								});
							this.getView().addDependent(this._oShareActionButton);
						}
						this._oShareActionButton.openBy(oEvent.getSource());

					}

				},
				formatters: {},

				extensionAPI: null
			};
		}
	};

});

}; // end of sap/fe/templates/ListReport/controller/ControllerImplementation.js
if ( !jQuery.sap.isDeclared('sap.fe.util.testableHelper') ) {
jQuery.sap.declare('sap.fe.util.testableHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/fe/util/testableHelper",[], function() {
	"use strict";
/* Code copied from sap.suite.ui.generic.template.lib to avoid library dependency */

/*
 * This class provides facilities that support unit testing. Note thate the class provides methods which have to be called in the productive code
 * and methods which have to be called in the test code.
 * 1. This class provides the facility to define private functions that are nevertheless accessible for unit tests.
 * More precisely: We consider it as best practice to define private methods of classes in a closure to prevent illegal use by
 * other classes.
 * Moreover, it is best practice to write unit tests for public methods.
 * However, sometimes a private method is used several times inside a class. Therefore, it is demanded to make this private method
 * accessible to unit tests.
 * Actually, making a private method accessible to unit tests has two aspects:
 * - Call this method directly in a unit test in order to test it
 * - Define a stub/spy for the private method in a unit test for another method in order to test that the private method is invoked correctly
 *   (and prevent the private method from being executed in the context of this test)
 *
 * Check method testable in order to find out, how a private method can be made accessible for unit tests.
 * Check method startTest in order to find out, how to access a private method (prepared this way) can be accessed in a unit test
 *
 * Note: When testing private methods it might also be necessary to access private attributes of the class. This can also be achieved using this class.
 * Just write a private function accessing the private attribute and make it accessible for unit tests via this class.
 *
 * 2. This class provides the possibility to spy or stub constructors of external classes (e.g. UI5).
 * Check method observableConstructor in order to find out, how this can be achieved.
 */

	var iTestMode = 0;
	var oPossessor;
	var mStartedApps = {};
	var iCount = 0;
	var oStaticFunctions = {};
	var aConstructors = [];

	function createLogAccessFunction(oConstructor){
		return function(oInstance){
			if (iTestMode >= 0){
				return null;
			}
			var aLog = oConstructor.log || [];
			for (var i = 0; i < aLog.length; i++){
				var oLog = aLog[i];
				if (oLog.me === oInstance){
					return oLog.args;
				}
			}
		};
	}

	function removeConstructorObservation(oConstructor){
		delete oConstructor.replace;
		delete oConstructor.observer;
		if (oConstructor.log){
			if (oConstructor.isStatic){
				var aNewLog = [];
				for (var i = 0; i < oConstructor.log.length; i++){
					var oLog = oConstructor.log[i];
					if (oLog.testMode === 0){
						aNewLog.push(oLog);
					}
				}
				if (aNewLog.length > 0){
					oConstructor.log = aNewLog;
				} else {
					delete oConstructor.log;
				}
			} else {
				delete oConstructor.log;
			}
		}
	}

	function removeConstructorObservations(){
		aConstructors.forEach(removeConstructorObservation);
	}

	function fnObservableConstructor(fnConstructor, bStatic){
		var oConstructor;
		for (var i = 0; i < aConstructors.length; i++){
			oConstructor = aConstructors[i];
			if (oConstructor.fnConstructor === fnConstructor){
				oConstructor.isStatic = oConstructor.isStatic || bStatic;
				return oConstructor;
			}
		}
		oConstructor = {
			fnConstructor: fnConstructor,
			isStatic: bStatic
		};
		oConstructor.observable = function(){
			var fnConstructorEffective = oConstructor.replace ? oConstructor.observer : fnConstructor;
			var oRet = Object.create(fnConstructorEffective.prototype);
			oRet = fnConstructorEffective.apply(oRet, arguments) || oRet;
			if (iTestMode < 0 || (iTestMode === 0 && oConstructor.isStatic)){
				var oLog = {
					me: oRet,
					args: arguments,
					testMode: iTestMode
				};
				oConstructor.log = oConstructor.log || [];
				oConstructor.log.push(oLog);
				if (oConstructor.observer && !oConstructor.replace){
					oConstructor.observer(oRet, arguments);
				}
			}
			return oRet;
		};
		aConstructors.push(oConstructor);
		return oConstructor;
	}

	return {
	    // Call this method at the beginning of the setup of your unit test.
	    // This method returns a stub object. This stub possesses all functions prepared via testable as methods.
	    // Thereby, the name of the method is derived from the parameter sName of testable.
	    // Thus, when testing the private method just test the corresponding method of the stub.
	    // When defining a stub or spy for the private method, just define a stub or spy for the corresponding method of the stub object.
		startTest: function() {
			if (iTestMode !== 0) {
				return null;
			}
			iTestMode = -1;
			oPossessor = { };
			return oPossessor;
		},

        // Call this method at the end of the teardown of your unit test.
		endTest: function() {
			if (iTestMode < 0) {
				iTestMode = 0;
				oPossessor = null;
				removeConstructorObservations();
			}
		},

        // This method is called at the startup of a real app (in TemplateAssembler). If this method is called before startTest is called,
        // startTest has no effect anymore. Thus, private methods are not accessible in real tests.
		startApp: function() {
			if (iTestMode < 0) {
				return {};
			}
			iTestMode++;
			iCount++;
			var oRet = { id: iCount };
			mStartedApps[iCount] = oRet;
			return oRet;
		},

        // End the effect of startApp
		endApp: function(oAppId) {
			if (iTestMode > 0) {
			    var id = oAppId.id;
			    if (oAppId === mStartedApps[id]){
				    iTestMode--;
				    delete mStartedApps[id];
			    }
			}
		},

        // Use this method to define a private instance method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testable: function(fnFunction, sName) {
			if (iTestMode === -1) {
				oPossessor[sName] = fnFunction;
				return function() {
					return oPossessor[sName].apply(null, arguments);
				};
			}
			return fnFunction;
		},

		// Use this method to define a private static method that should be accessible to unit tests.
        // Parameter fnFunction is the implementation of the function that should be made accessible to unit tests.
        // Parameter sName is the name which can be used to access the function during tests. Note that this name must be unique for the whole project.
        // This method returns a wrapper for fnFunction that should be used whereever the functionality of fnFunction is required.
		testableStatic: function(fnFunction, sName){
		    if (iTestMode > 0 || (iTestMode === 0 && oStaticFunctions[sName])) {
		        return fnFunction;
		    }
		    oStaticFunctions[sName] = oStaticFunctions[sName] || fnFunction;
			return function() {
				return oStaticFunctions[sName].apply(null, arguments);
			};
		},

		// This method must only be used while a test is running (see method startTest). It returns a stub object that possesses all (static) methods
		// which have been defined via testableStatic.
		getStaticStub: function(){
			return iTestMode === -1 && oStaticFunctions;
		},


		// Use this method to make a constructor which is used in an implementation accessible for unit tests. This is in particular
		// important for constructors of classes belonging to other software packages (e.g. sap.m), since there is no other way to
		// spy/stub on these contructors.
		// As an example let us assume that a class provides a public method that produces instances of sap.ui.model.Filter (via constructor).
		// A unit test for this method can easily test whether the method really provides an instance of sap.ui.model.Filter.
		// However, a unit test should also be able to test, whether the Filter instance was created with the correct parameters.
		// In order to achieve this the class to be tested has to be enhanced as follows:
		// sap.ui.define([..., "sap/ui/model/Filter", ..."sap/suite/ui/generic/template/lib/testableHelper"],
		//      function(..., Filter, ..., testableHelper){        // normal declaration of dependency to sap.ui.model.Filter
		//
		//           Filter = testableHelper.observableConstructor(Filter);   // allow unit tests for this class to spy on constructor of Filter
		//
		// });
		// In the unit test use method observeConstructor (see below) in order to spy or stub the constructor
		// Normally only constructor calls that have been performed after a test was started can be spied via this facility. Sometimes constuctors
		// are already called in order to define static members of the class to be tested. In these cases it is necessary to have also access to
		// these static calls. Therefore, parameter bStatic should be set to true in these cases.
		// However, note that this parameter should only ber used if really necessary, as it produces additional effort at runtime, too.
		observableConstructor: function(fnConstructor, bStatic){
			if (iTestMode > 0){
				return fnConstructor;
			}
			return fnObservableConstructor(fnConstructor, bStatic).observable;
		},

		// This method must only be used while a test is running (see method startTest).
		// During tests this method provides access to instances created for constructor fnConstructor, provided the constructor has been
		// wrapped via method observableConstructor.
		// There are three way that access to these instances is possible:
		// 1. observeConstructor returns a function fnParameterAccess that provides access to the arguments that have been passed to
		//    the constructor when an instance was created. Call fnParameterAccess(oInstance) with oInstance being the instance that
		//    should be analyzed.
		// 2. Provide a spy function fnObserver that is called immediately after the instance was created. Two parameters are passed to fnObserver
		//    The first parameter is the newly created instance, the second parameter represents the arguments having been passed to the constructor
		// 3. If parameter bReplace is truthy fnObserver is actually treated as a stub for the constructor. That means that the real constructor
		//    is not called.
		// Note: There can always be only one observer for a constructor. Therefore, this method throws an exception when fnObserver is truthy and
		// another observer is already registered. Deregister an observer by calling this method with parameter fnObserver being faulty.
		// Moreover, all observers are automatically deregistered when a test ends.
		observeConstructor: function(fnConstructor, fnObserver, bReplace){
			if (iTestMode >= 0){
				return null;
			}
			var oConstructor = fnObservableConstructor(fnConstructor);
			if (fnObserver && oConstructor.observer){
				throw new Error("Constructor is already observed");
			}
			oConstructor.observer = fnObserver;
			oConstructor.replace = fnObserver && bReplace;
			return createLogAccessFunction(oConstructor);
		}
	};
});

}; // end of sap/fe/util/testableHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.FilterBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.FilterBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/fe/FilterBar",[
	'jquery.sap.global',
	'sap/ui/core/XMLComposite',
	'sap/ui/base/ManagedObject',
	'sap/ui/Device',
	'sap/fe/controls/_FilterBar/FilterBarController',
	'sap/ui/model/odata/v4/AnnotationHelper',
	'sap/fe/controls/_FilterBar/FilterBarAnnotationHelper'
], function (jQuery, XMLComposite, ManagedObject, Device, FilterBarController) {
	"use strict";
	var FilterBar = XMLComposite.extend("sap.fe.FilterBar", {
		metadata: {
			designTime: true,
			properties: {
				entitySetContext: {
					type: "any",
					invalidate: "template"
				},
				liveUpdate: {
					type: "boolean",
					defaultValue: !Device.system.phone, // filtering should be via Go button on phone by default
					invalidate: "template"
				},
				searchOnStart: {
					type: "boolean",
					defaultValue: true,
					invalidate: "template"
				},
				filterSummary: {
					type: "string",
					defaultValue: "",
					invalidate: false
				},
				enabled: {
					type: "boolean",
					defaultValue: true,
					invalidate: false
				},
				conditionModelName: {
					type: "string",
					invalidate: false
				}
			},
			events: {
				search: {},
				change: {}
			},
			aggregations: {},
			publicMethods: []
		},
		alias: "this",
		fragment: "sap.fe.controls._FilterBar.FilterBar"
	});

	var fnInitialize = function () {
		var oConditionModel = this.oFilterBarController.getConditionModel();

		// create OData suggest provider - we hope this is not needed anymore in the future
		this.oFilterBarController.createSuggestProviders();

		if (!this.bInitialized && oConditionModel) {
			this.bInitialized = true;
			if (this.getSearchOnStart() && this.getEnabled()) {
				this._bIsReady = true;
				this.fireSearch();
			}

			var oConditionChangeBinding = oConditionModel.bindProperty("/", oConditionModel.getContext("/"));
			oConditionChangeBinding.attachChange(this.handleChange.bind(this));

			if (!this.getEnabled()) {
				this.getInnerFilterBar().setBusy(true);
			}
			this.detachModelContextChange(fnInitialize);
		}

	};

	FilterBar.prototype.onAfterRendering = function () {
		var oSearchControl = this.oFilterBarController.getSearchControl();
		if (oSearchControl) {
			oSearchControl.attachBrowserEvent("blur", function (oEvent) {
				// this is not called - to be discussed with Andreas and UX if needed
			});
		}
	};

	FilterBar.prototype.init = function () {
		this._bIsReady = false;
		this.oFilterBarController = new FilterBarController(this);

		this.attachModelContextChange(fnInitialize);
	};

	FilterBar.prototype.getInnerFilterBar = function () {
		return this.get_content();
	};

	FilterBar.prototype.handleChange = function () {
		// this event is fired once the user changed any filter and the live update is set
		// also it's only fired if it's enabled - in case it's disabled changes can not be done by the user - for
		// example via setting the app state - and no event is expected
		if (this.getLiveUpdate() && this.getEnabled()) {
			this.fireSearch();
			this.oFilterBarController.setFilterSummary();
			this.fireChange();
		}
	};

	FilterBar.prototype.handleSearch = function (oEvent) {
		// this event is fired when the user clicks enter in the search field or on the search icon
		this.fireSearch();
		this.oFilterBarController.setFilterSummary();
		this.fireChange();
	};

	FilterBar.prototype.handleSearchChange = function (oEvent) {
		// the live search is triggered but only if the user didn't type for a given time frame (400ms)
		var that = this,
			iSearchCounter;

		if (that._iSearchCounter) {
			that._iSearchCounter++;
		} else {
			that._iSearchCounter = 1;
		}

		iSearchCounter = that._iSearchCounter;

		if (this.getLiveUpdate()) {
			setTimeout(function () {
				if (iSearchCounter === that._iSearchCounter) {
					that.fireSearch();
					that.oFilterBarController.setFilterSummary();
					that.fireChange();
					delete that._iSearchCounter;
				}
			}, 400);
		}
	};

	FilterBar.prototype.isReady = function () {
		/* tells the connected controls if the filter bar is ready
		 ready = table is set to immediately search / user clicked on GO
		 = the control and all filter items are instanced
		 = the app state is applied if existing
		 = the (default) variant is loaded if existing
		 better name for method is welcome :-)
		 */
		return this._bIsReady;
	};

	FilterBar.prototype.handleGo = function () {
		this._bIsReady = true;
		this.fireSearch();
		this.oFilterBarController.setFilterSummary();
		this.fireChange();
	};


	FilterBar.prototype.handleSuggest = function (oEvent) {
		this.oFilterBarController.handleSuggest(oEvent);
	};

	FilterBar.prototype.handleValueHelpRequest = function (oEvent) {
		this.oFilterBarController.handleValueHelpRequest(oEvent);
	};

	FilterBar.prototype.createFixedValueList = function (oEvent) {
		this.oFilterBarController.createFixedValueList(oEvent);
	};

	FilterBar.prototype.setEnabled = function (bEnabled) {
		this.getInnerFilterBar().setBusy(!bEnabled);
		this.setProperty("enabled", bEnabled);

		if (bEnabled) {
			if (this.bInitialized && this.getSearchOnStart()) {
				this._bIsReady = true;
				this.fireSearch();
			}
		}


	};

	FilterBar.prototype.onBeforeRendering = function () {
		this.oFilterBarController.setFilterSummary();
	};

	FilterBar.prototype.getQueryParameters = function (sEntitySet) {
		return this.oFilterBarController.getQueryParameters(sEntitySet);
	};

	FilterBar.prototype.getAppState = function () {
		return this.oFilterBarController.getAppState();
	};

	FilterBar.prototype.setAppState = function (oAppState) {
		this.oFilterBarController.setAppState(oAppState || {});
		if (!this.getLiveUpdate()) {
			this.handleGo();
		}
	};

	return FilterBar;

}, /* bExport= */true);

}; // end of sap/fe/FilterBar.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Table.TableController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/**
 *
 *
 * @private
 * @name sap.fe.controls._Table.TableController
 * @author SAP SE
 * @version 1.50.2
 * @since ??
 * @param {}
 * @returns {sap.fe.controls._Table.TableController} new Table controller
 */
jQuery.sap.declare('sap.fe.controls._Table.TableController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_Table/TableController",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/core/CommonUtils",
	"sap/fe/Action",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/Sorter"
], function (jQuery, BaseObject, CommonUtils, Action, JSONModel, Sorter) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var TableController = BaseObject.extend("sap.fe.controls._Table.TableController", {
		constructor: function (oTable) {
			BaseObject.apply(this, arguments);
			this.oTable = oTable;
			this.oInnerTable = oTable.getInnerTable();
		}
	});

	/**
	 *
	 *
	 * @param {}
	 * @private
	 */

	TableController.prototype.attachToFilterBar = function () {
		var oQueryParameters, oTableController = this;

		// currently entity set is not checked in query parameters, keep it as remarker
		var sEntitySet;

		if (this.oTable.getFilterBarId()) {
			var oView = CommonUtils.getParentViewOfControl(this.oTable);
			var oFilterBar = oView.byId(this.oTable.getFilterBarId());
			oFilterBar.attachSearch(function () {
				var oQueryParameters;
				oQueryParameters = oFilterBar.getQueryParameters(sEntitySet);
				oTableController.updateQueryParameters(oQueryParameters);
			});

			// if the FilterBar is already ready we ask for the query parameters immediately
			if (oFilterBar.isReady()) {
				oQueryParameters = oFilterBar.getQueryParameters(sEntitySet);
				oTableController.updateQueryParameters(oQueryParameters);
			}
		}
	};

	TableController.prototype.updateQueryParameters = function (oQueryParameters) {
		var oTable = this.oTable;
		var oConditionModel;
		var oListBinding = oTable.getListBinding();
		if (oQueryParameters) {
			oConditionModel = oQueryParameters.conditionModel;
		}

		var fnChangeParametersAndSubmit = function () {
			var bFilterWithoutErrors = true;
			if (!oListBinding) {
				oListBinding = oTable.getListBinding();
			}

			if (oConditionModel) {
				// applyFilters returns false if there is a validation error in the condition model
				bFilterWithoutErrors = oConditionModel.applyFilters();
			}
			if (bFilterWithoutErrors) {
				if (oQueryParameters) {
					delete oQueryParameters.conditionModel;
					oListBinding.changeParameters(oQueryParameters);
				}
			}
			oTable.getInnerTable().setShowOverlay(!bFilterWithoutErrors);
		};

		var fnModelContextChangeListener = function () {
			fnChangeParametersAndSubmit();
			oTable.detachModelContextChange(fnModelContextChangeListener);
		};

		if (oListBinding) {
			fnChangeParametersAndSubmit();
		} else {
			oTable.attachModelContextChange(fnModelContextChangeListener);
		}
	};

	TableController.prototype.handleDataRequested = function (oEvent) {
		// this should not be needed at all -> raised this info to the OData model team
		this.oInnerTable.setBusy(true);
	};


	TableController.prototype.handleCallAction = function (oEvent) {
		var mActionHandlerParameters = oEvent.getParameters();
		var oAction = oEvent.getSource();
		mActionHandlerParameters.mode = oAction.getMode();

		if (mActionHandlerParameters.mode === 'Inline') {
			mActionHandlerParameters.contexts = [oAction.getBindingContext()];
		} else {
			mActionHandlerParameters.contexts = this.oTable.getSelectedContexts();
		}

		// set application to busy, do not execute action if application is busy
		mActionHandlerParameters.setBusy = true;
		mActionHandlerParameters.checkBusy = true;
		this.oTable.fireCallAction(mActionHandlerParameters);
	};

	//This function is to get the toolbar action from given toolbar content
	TableController.prototype.getToolbarActions = function (aToolbarContent) {
		// there might be a better solution than looping through all controls of the header toolbar
		var aToolbarActions = [];

		for (var i = 0; i < aToolbarContent.length; i++) {
			if (aToolbarContent[i] instanceof Action) {
				aToolbarActions.push(aToolbarContent[i]);
			}
		}

		return aToolbarActions;
	};


	//This is a Util function to set the button in Table toolbar enabled/disabled
	TableController.prototype.enableDisableActionsUtil = function (iSelected, aToolbarActions) {
		var iFrom, iTo, oAction;

		if (iSelected != null) {
			for (var i = 0; i < aToolbarActions.length; i++) {
				oAction = aToolbarActions[i];
				iFrom = oAction.getMultiplicityFrom();
				iTo = oAction.getMultiplicityTo();

				if ((!iFrom || (iSelected >= iFrom) && (!iTo || iSelected <= iTo))) {
					oAction.setEnabled(true);
				} else {
					oAction.setEnabled(false);
				}
			}
		}

	};

	//This is a Util Function used to set binding count in title.
	TableController.prototype.bindTableCountUtil = function (oTitle) {
		if (oTitle != null) {
			oTitle.setModel(this.oInnerTable.getModel(), "headerContext");
		}

		var oBinding = this.oTable.getListBinding();
		if (oBinding) {
			oTitle.setBindingContext(oBinding.getHeaderContext(), "headerContext");
		}
	};

	TableController.prototype.createAndOpenViewSettingsDialog = function (oViewSettingsPropertyObject, iSelectedColumnItems, iColumnItems, oDialogPropertiesModel) {
		if (this.oViewSettingsPropertyModel == null && this.oViewSettingsPropertyModel == undefined) {
			var sSelectAllText = this.oInnerTable.getModel("sap.fe.i18n").getResourceBundle()
				.getText("SAPFE_VIEWSETTINGS_COLUMN_SELECTALL", [iSelectedColumnItems, iColumnItems]);
			oViewSettingsPropertyObject["selectAllText"] = sSelectAllText;
			oViewSettingsPropertyObject["sortDesecending"] = false;
			oViewSettingsPropertyObject["groupDescending"] = false;
			this.oViewSettingsPropertyModel = new JSONModel(oViewSettingsPropertyObject);
		}
		var oViewSettings = new sap.ui.view("viewSettingsXMLView", {
			viewName: "sap.fe.controls._ViewSettings.ViewSettings",
			type: "XML",
			async: true,
			preprocessors: {
				xml: {
					bindingContexts: {
						propertiesModel: this.oViewSettingsPropertyModel.createBindingContext("/"),
						dialogProperties: oDialogPropertiesModel.createBindingContext("/")
					},
					models: {
						propertiesModel: this.oViewSettingsPropertyModel,
						dialogProperties: oDialogPropertiesModel
					}
				}
			}
		});
		oViewSettings.setModel(this.oViewSettingsPropertyModel);
		this.oTable.addDependent(oViewSettings);
		oViewSettings.loaded().then(function () {
			var sActionName = (oDialogPropertiesModel.getData().InitialVisiblePanel === "columns") ? "viewSettingsXMLView--columns" : oDialogPropertiesModel.getData().InitialVisiblePanel;
			var oController = oViewSettings.getController();
			oController.oTableController = this;
			oViewSettings.byId("viewSettingsDialog").open(sActionName);
		}.bind(this));
	};


	TableController.prototype.createAndOpenP13nSettingsDialog = function (oP13nSettingsPropertyObject, oDialogPropertiesModel) {
		if (this.oP13nSettingsPropertyModel == null && this.oP13nSettingsPropertyModel == undefined) {
			oP13nSettingsPropertyObject["p13nSortItems"] = [];
			oP13nSettingsPropertyObject["p13nGroupItems"] = [];
			this.oP13nSettingsPropertyModel = new JSONModel(oP13nSettingsPropertyObject);
		}
		var oP13nSettings = new sap.ui.view("p13nSettingsXMLView", {
			viewName: "sap.fe.controls._P13nSettings.P13nSettings",
			type: "XML",
			async: true,
			preprocessors: {
				xml: {
					bindingContexts: {
						propertiesModel: this.oP13nSettingsPropertyModel.createBindingContext("/"),
						dialogProperties: oDialogPropertiesModel.createBindingContext("/")
					},
					models: {
						propertiesModel: this.oP13nSettingsPropertyModel,
						dialogProperties: oDialogPropertiesModel
					}
				}
			}
		});
		oP13nSettings.setModel(this.oP13nSettingsPropertyModel);
		this.oTable.addDependent(oP13nSettings);

		oP13nSettings.loaded().then(function () {
			var oController = oP13nSettings.getController();
			oController.oTableController = this;
			oP13nSettings.byId("p13nDialog").open();
		}.bind(this));
	};

	//Event handler for sort, group, column buttons in table toolbar
	TableController.prototype.onStandardActionClick = function (oEvent) {
		var sActionName = oEvent.getSource().getText(),
			oInnerTableMetaModel = this.oInnerTable.getModel().getMetaModel(),
			oEntityType = oInnerTableMetaModel.getObject("/" + this.oTable.getEntitySet() + "/"),
			isMultiTab = false,
			aTableColumns = this.oInnerTable.getColumns(),
			iColumnCount = aTableColumns.length,
			aColumnId = [],
			iSelectedPropCount = 0,
			aSortItems = [],
			aGroupItems = [],
			aColumnItems = [],
			sSettingsDialogType = this.oTable.getSettingsDialogType(),
			aEntityLineItems = this.oInnerTable.getModel().getMetaModel().getMetaContext(this.oTable.getContext()).getObject();

		for (var index = 0; index < iColumnCount; index++) {
			var oColumn = aTableColumns[index];
			var aColumnsIds = oColumn.getId().split("::");
			aColumnId.push(aColumnsIds[aColumnsIds.length - 1]);
		}

		for (var property in oEntityType) {
			if (typeof (oEntityType[property]) == "object" && oEntityType[property].$kind && oEntityType[property].$kind === "Property") {
				var _propertyName = oInnerTableMetaModel.getObject("/" + this.oTable.getEntitySet() + "/" + property + "@com.sap.vocabularies.Common.v1.Label");
				iSelectedPropCount = (aColumnId.indexOf(property) > -1 ) ? iSelectedPropCount + 1 : iSelectedPropCount;
				var oItem = {
					"name": (_propertyName != null && _propertyName != undefined) ? _propertyName : property,
					"columnKey": property,
					"selected": false
				};
				//Using JSON Stringify to avoid mutation of original object after changing one of the property in copied object.
				aSortItems.push(JSON.parse(JSON.stringify(oItem)));
				aGroupItems.push(JSON.parse(JSON.stringify(oItem)));
				var columnItem = JSON.parse(JSON.stringify(oItem));
				columnItem.selected = !!(aColumnId.indexOf(property) > -1);
				aColumnItems.push(columnItem);
			}
		}

		for (var item in aEntityLineItems) {
			if (typeof (aEntityLineItems[item]) == "object" && aEntityLineItems[item].$Type
				&& aEntityLineItems[item].$Type == "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				iSelectedPropCount = (aColumnId.indexOf(aEntityLineItems[item].Action) > -1) ? iSelectedPropCount + 1 : iSelectedPropCount;
				var oAddtionalItem = {
					"name": (aEntityLineItems[item].Label) ? aEntityLineItems[item].Label : aEntityLineItems[item].Action,
					"columnKey": aEntityLineItems[item].Action,
					"selected": false
				};
				oAddtionalItem.selected = !!(aColumnId.indexOf(aEntityLineItems[item].Action) > -1);
				aColumnItems.push(oAddtionalItem);
			}
		}

		var oPropertyObject = {
			"sortPanelItems": aSortItems,
			"groupPanelItems": aGroupItems,
			"columnPanelItems": aColumnItems.sort(function (x, y) {
				if (x.selected === y.selected) {
					return 0;
				} else if (x.selected) {
					return -1;
				} else {
					return 1;
				}
			})
		};

		var oDialogPropertiesModel = new JSONModel({
			"InitialVisiblePanel": sActionName,
			"showSortPanel": !!(isMultiTab || sActionName === "sort"),
			"showGroupPanel": !!((isMultiTab || sActionName === "group") && (this.oInnerTable.getMetadata().getName() === "sap.m.Table")),
			//"showFilterPanel": !!(isMultiTab || sActionName === "filter"),
			"showColumnPanel": !!(isMultiTab || sActionName === "column")
		});

		if (sSettingsDialogType === "P13nDialog") {
			this.createAndOpenP13nSettingsDialog(oPropertyObject, oDialogPropertiesModel);
		} else {
			this.createAndOpenViewSettingsDialog(oPropertyObject, iSelectedPropCount, aColumnItems.length, oDialogPropertiesModel);
		}
	};

	TableController.prototype.applyGroupAndSort = function (aSorters) {
		if (aSorters.length > 0) {
			var oBinding = this.getListBinding();
			oBinding.sort(aSorters);
			this.updateQueryParameters();
		}
	};

	return TableController;

});

}; // end of sap/fe/controls/_Table/TableController.js
if ( !jQuery.sap.isDeclared('sap.fe.core.BusyHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.BusyHelper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/fe/core/BusyHelper",[
	"jquery.sap.global",
	"sap/ui/base/Object",
	"sap/fe/core/internal/testableHelper"
], function (jQuery, BaseObject, testableHelper) {
	"use strict";

	// Class for busy handling
	// This class enables the notion of a 'busy session'.
	// More precisely: At each point in time the app is either in a busy session or is not.
	// Reasons for being in a busy session can be set by calling methods setBusy or setBusyReason (see below).
	// Note that each busy reason has a lifetime.
	// A new busy session is started, as soon as the two following two conditions are fulfilled:
	// - The app is currently not in a busy session
	// - There is at least one (living) busy reason
	// A busy session potentially ends when the number of living busy reasons is reduced to zero. However, the end of the busy session is
	// potponed until a navigation which is currently active has finished and the current thread execution has come to an end. When a new
	// busy reason has been set meanwhile (and is still alive) the busy session is prolonged accordingly.
	//
	// The following features are connected to a busy session:
	// - A busy indication is displayed while the app is in a busy session. This busy indication may either be displayed immediately or with the standard
	//   busy delay (can be parametrized when setting the busy reason)
	// - When a busy session starts all transient messages are removed from the Apps message model
	// - When a busy session ends all transient messages being contained in the message model are displayed to the user and removed from the message model
	// Moreover, this class provides the possibility to interact with busy sessions/reasons (see methods isBusy and getUnbusy).
	function getMethods(oTemplateContract) {
		var mBusyReasons = {}; // currently living busy reasons of type string
		var bIsBusy = false; // is the app in a busy session
		var bBusyDirty = false; // is it already ensured that fnApplyBusy will be called
		var iBusyPromiseCount = 0; // number of currently living busy reasons of type Promise
		var iBusyDelay = oTemplateContract.oNavContainer.getBusyIndicatorDelay(); // standard busy delay of the App
		var oUnbusyPromise = Promise.resolve(); // a Promise which is resolved as soon as no busy session is running
		var fnUnbusyResolve = jQuery.noop; // function to be called when the current busy session ends

		// Returns information whether there is currently a living busy reason
		function isBusy() {
			return iBusyPromiseCount !== 0 || !jQuery.isEmptyObject(mBusyReasons);
		}

		var fnApplyBusyImmediately; // declare here to avoid use before declaration. Function that calls fnApplyBusy with bImmediate = true.
		// This function has the following tasks:
		// - If a busy session is running but no busy reason is available -> end the busy session (and thus display transient messages)
		// - Is a busy session is running set the app to busy, otherwise set it to unbusy
		// Note that ending the busy session will be postponed if a navugation is currently active and parameter bImmediate is false.
		// In this case the busy session might be prolonged if a new busy reason is set in the meantime
		function fnApplyBusy(bImmediate) {
			var bIsBusyNew = isBusy();
			if (bIsBusyNew || bImmediate) {
				bBusyDirty = false;
				oTemplateContract.oNavContainer.setBusy(bIsBusyNew);
				if (bIsBusyNew !== bIsBusy) {
					bIsBusy = bIsBusyNew;
					if (!bIsBusy) { // end of a busy session
						oTemplateContract.oNavContainer.setBusyIndicatorDelay(iBusyDelay);
						//MessageUtils.handleTransientMessages(oTemplateContract.oApplicationProxy.getDialogFragment);
						fnUnbusyResolve();
					}
				}
			} else {
				/* as we have only one page we don't need to wait until the navigation is done - therefore we call the
				   fnApplyBusyImmediately directly - once we introduce the  navigation we need to wait until the
				   navigation is done - see as example the implementation in the v2 library:
				   oTemplateContract.oApplicationProxy.getCurrentDisplayObject().promise.then(fnApplyBusyImmediately, fnApplyBusyImmediately);
				 */
				fnApplyBusyImmediately();
			}
		}

		fnApplyBusyImmediately = fnApplyBusy.bind(null, true);

		// Ensure that method fnApplyBusy is called
		// If bImmediate is true the busy delay is temporarily set to 0 and fnApplyBusy is called synchronously.
		// Otherwise the call of fnApplyBusy is postponed until the current thread is finished.
		function fnEnsureApplyBusy(bImmediate) {
			if (bImmediate) {
				oTemplateContract.oNavContainer.setBusyIndicatorDelay(0);
				fnApplyBusy();
			} else if (!bBusyDirty) {
				bBusyDirty = true;
				setTimeout(fnApplyBusy, 0);
			}
		}

		// function to be called when any Promise that serves as a busy reason is settled
		function fnBusyPromiseResolved() {
			iBusyPromiseCount--;
			if (!iBusyPromiseCount) {
				fnEnsureApplyBusy(false);
			}
		}

		// this method is called when a busy reason is set. It starts a busy session unless the App is already in a busy session.
		function fnMakeBusy() {
			if (bIsBusy) {
				return;  // App is already in a busy session
			}
			// Start a new busy session
			bIsBusy = true;
			oUnbusyPromise = new Promise(function (fnResolve) {
				fnUnbusyResolve = fnResolve;
			});
			// All transient messages still being contained in the message model belong to previous actions.
			// Therefore, we remove them. If they have not been shown yet, it is anyway to late to show them when this busy session has ended.
			//MessageUtils.removeTransientMessages();
		}

		// Sets or resets a busy reason of type string (parameter sReason).
		// Parameter bIsActive determines whether the busy reason is set or reset.
		// Note that resetting a reason applies to all living reasons using the same string (so calling this method with the same reason does not accumulate)
		// bImmediate is only evaluated when bIsActive is true. In this case it determines whether the busy indication should be displayed immediately or with
		// the usual delay.
		// Note that it is preferred to use method setBusy to set a busy reason
		function setBusyReason(sReason, bIsActive, bImmediate) {
			if (bIsActive) {
				fnMakeBusy();
				mBusyReasons[sReason] = true;
			} else {
				delete mBusyReasons[sReason];
			}
			fnEnsureApplyBusy(bImmediate);
		}

		// Sets a Promise (oBusyEndedPromise) as busy reason. This busy reason is alive until the promise is settled.
		// bImmediate determines whether the busy indication should be displayed immediately or with the usual delay.
		// Edge case: oBusyEndedPromise is already settled when this method is called (and the app is currently not in a busy session).
		// In this case, nevertheless a (probably short-living) busy session is started, such that the interaction with the message model is as defined above
		function setBusy(oBusyEndedPromise, bImmediate) {
			iBusyPromiseCount++;
			fnMakeBusy();
			oBusyEndedPromise.then(fnBusyPromiseResolved, fnBusyPromiseResolved);
			fnEnsureApplyBusy(bImmediate);
		}

		return {
			setBusyReason: setBusyReason,
			setBusy: setBusy,
			isBusy: isBusy,
			getUnbusy: function () { // returns a Promise that is resolved as soon as the App is not in a busy session
				return oUnbusyPromise;
			}
		};
	}

	return BaseObject.extend("sap.fe.core.BusyHelper", {
		constructor: function (oTemplateContract) {
			jQuery.extend(this, (testableHelper.testableStatic(getMethods, "BusyHelper"))(oTemplateContract));
		}
	});
});

}; // end of sap/fe/core/BusyHelper.js
if ( !jQuery.sap.isDeclared('sap.fe.core.TemplateAssembler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.core.TemplateAssembler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui.define("sap/fe/core/TemplateAssembler",[
	"jquery.sap.global",
	"sap/ui/core/mvc/Controller",
	"sap/ui/model/json/JSONModel",
	"sap/ui/model/resource/ResourceModel",
	"sap/fe/core/TemplateComponent",
	"sap/fe/core/internal/testableHelper",
	"sap/fe/core/TemplateUtils"
], function (jQuery, Controller, JSONModel, ResourceModel, TemplateComponent, testableHelper, TemplateUtils) {
	"use strict";

	var mAppRegistry = {};
	var mControllerRegistry = {};

	// This function is handed over to class AppComponent. The variable will be set to null, once this has happened.
	// oAppRegistryEntry is a registry entry for the AppComponent. When it is registered it contains the following properties:
	// - appComponent: the AppComponent to be registered
	// - oTemplateContract: the TemplateContract for this App, as described in AppComponent
	// This function returns a function that can be used to deregister the AppComponent from the registry when it is exited.
	var fnRegisterAppComponent = function (oAppRegistryEntry) {
		var sAppComponentId = oAppRegistryEntry.appComponent.getId();
		mAppRegistry[sAppComponentId] = oAppRegistryEntry;
		return function () {
			delete mAppRegistry[sAppComponentId];
		};
	};

	function getAppRegistryEntry(oAppComponent) {
		var sAppComponentId = oAppComponent.getId();
		var oRet = mAppRegistry[sAppComponentId];
		return oRet;
	}

	function getComponentRegistryEntry(oComponent) {
		return getAppRegistryEntry(oComponent.getAppComponent()).oTemplateContract.componentRegistry[oComponent.getId()];
	}

	function getTemplateViewController(getMethods, sControllerName, oControllerDefinition, oTemplateUtils, oAppRegistryEntry) {
		oControllerDefinition = oControllerDefinition || {};

		oControllerDefinition.constructor = function () {
			Controller.prototype.constructor.apply(this, arguments);
			var oMethods = getMethods(oTemplateUtils, this);
			this._templateEventHandlers = Object.freeze(oMethods.handlers || {});
			this._templateFormatters = Object.freeze(oMethods.formatters || {});
			this.extensionAPI = Object.freeze(oMethods.extensionAPI || {});
			this.fnGenericOnInit = function (oController) {
				var oView = oController.getView();
				var sViewId = oView.getId();
				jQuery.sap.log.info("Init view " + sViewId + " of template " + sControllerName);
				var oComponent = oController.getOwnerComponent();
				var oComponentRegistryEntry = getComponentRegistryEntry(oComponent);

				oComponentRegistryEntry.oControllerRegistryEntry = {
					onExit: oMethods.onExit || jQuery.noop,
					oTemplateUtils: oTemplateUtils,
					oAppRegistryEntry: oAppRegistryEntry
				};
				mControllerRegistry[sViewId] = oComponentRegistryEntry.oControllerRegistryEntry;

				(oMethods.onInit || jQuery.noop)();
				// Note: This relies on the fact, that there is a 1-1 relationship between TemplateView and
				// TemplateComponent.
				// If we introduce Templates using more then one view, this must be reworked.
				oComponentRegistryEntry.oController = this;
				oComponentRegistryEntry.fnViewRegisteredResolve();
				delete oComponentRegistryEntry.fnViewRegisteredResolve;
			};
		};

		oControllerDefinition.onInit = function () {
			this.fnGenericOnInit(this);
			delete this.fnGenericOnInit;
		};

		oControllerDefinition.onExit = function () {
			var sViewId = this.getView().getId();
			var oControllerRegistryEntry = mControllerRegistry[sViewId];
			// TODO Marcel: destroy view is not implemented but seems to be not needed for now
			//oControllerRegistryEntry.oAppRegistryEntry.oTemplateContract.oApplicationProxy.destroyView(sViewId);
			oControllerRegistryEntry.onExit();
			delete mControllerRegistry[sViewId];
			jQuery.sap.log.info("View " + sViewId + " of template " + sControllerName + " exited");
		};

		return Controller.extend(sControllerName, oControllerDefinition);
	}

	function fnGetViewControllerCreator(oComponentRegistryEntry) {
		var oControllerSpecification = oComponentRegistryEntry.methods.oControllerSpecification;
		return oControllerSpecification && function () {
				var oAppComponent = oComponentRegistryEntry.oComponent.getAppComponent();
				var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

				return getTemplateViewController(oControllerSpecification.getMethods, oComponentRegistryEntry.oComponent.getTemplateName(), oControllerSpecification.oControllerDefinition, oComponentRegistryEntry.oTemplateUtils, oAppRegistryEntry);
			};
	}

	fnRegisterAppComponent = testableHelper.testableStatic(fnRegisterAppComponent, "TemplateComponent_RegisterAppComponent");

	return {
		// This method assembles a Template that can be used in Fiori Elements applications.
		// Thereby, getMethods, sComponentName, and oComponentDefinition describe the behaviour of the component in detail.
		// More precisely the meaning of the parameters is as follows:
		// - sComponentName is the name of the component that realizes the Template. More precisely it describes the path (.-separated)
		//   to a folder which contains a file Component.js which is built using this function.
		// - oComponentDefinition is an object containing a property metadata which contains the metadata for the TemplateComponent realizing the Template.
		// - getMethods is a function that will be called once for each instance of the Template to be assembled.
		//   The parameters passed to this function are oComponent and oTemplateUtils
		//   ~ oComponent is the instance of class TemplateComponent that is created (can be considered as 'this')
		//   ~ oTemplateUtils is an instance of class TemplateUtils that provides certain reusable tasks
		//   the return value of getMethods must be an object possessing the following (optional) properties:
		//   ~ init: a function that serves as init for the component. Note that it is not necessary to call init of a superclass
		//   ~ onActivate: not yet implemented
		//   ~ onDeactivate: not yet implemented
		//   ~ refreshBinding: not yet implemented
		//   ~ updateBindingContext: a function that is called when a new binding context is available for the Template instance.
		//     Note that when switching to change (edit or create) this method will only be called in draft scenarios, since in non-draft scenarios
		//     no binding context from the backend is retrieved.
		//   ~ oControllerSpecification: an object specifying the controller for the view realizing this Template.
		//     For more details see comments at function fnGetViewControllerCreator
		getTemplateComponent: function (getMethods, sComponentName, oComponentDefinition) {
			var sComponentNameFull = sComponentName + ".Component";
			oComponentDefinition = oComponentDefinition || {};

			oComponentDefinition.init = function () {
				var oComponentRegistryEntry = this.getComponentData().registryEntry;
				oComponentRegistryEntry.viewRegistered = new Promise(function (fnResolve) {
					oComponentRegistryEntry.fnViewRegisteredResolve = fnResolve;
				});
				oComponentRegistryEntry.oViewRenderedPromise = new Promise(function (fnResolve) {
					oComponentRegistryEntry.fnViewRenderedResolve = fnResolve;
				});
				(TemplateComponent.prototype.init || jQuery.noop).apply(this, arguments);
				oComponentRegistryEntry.componentName = sComponentNameFull;
				oComponentRegistryEntry.oComponent = this;

				oComponentRegistryEntry.methods = getMethods(this, oComponentRegistryEntry.oTemplateUtils) || {};

				(oComponentRegistryEntry.methods.init || jQuery.noop)();
			};

			oComponentDefinition.preTemplater = function (mParameters) {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				if (oComponentRegistryEntry.methods.preTemplater) {
					return oComponentRegistryEntry.methods.preTemplater(mParameters, oComponentRegistryEntry.oTemplateUtils);
				} else {
					return Promise.resolve();
				}
			};

			oComponentDefinition.preTemplaterReject = function (oError) {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);

				// Resolve view registered promise to disable busy handling
				oComponentRegistryEntry.fnViewRegisteredResolve();

				oComponentRegistryEntry.oTemplateUtils.getNavigationController().navigateToMessagePage({
					text: "Application could not be started due to technical issues.",
					description: oError.message
				});
			};

			oComponentDefinition.exit = function () {
				var sId = this.getId();
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				var oAppRegistryEntry = getAppRegistryEntry(this.getAppComponent());
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.exit || jQuery.noop)();
				delete oAppRegistryEntry.oTemplateContract.componentRegistry[sId];
				(TemplateComponent.prototype.exit || jQuery.noop).apply(this, arguments);
			};

			oComponentDefinition.onBeforeRendering = function () {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				(TemplateComponent.prototype.onBeforeRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.onBeforeRendering || jQuery.noop)();
			};

			oComponentDefinition.onAfterRendering = function () {
				var oComponentRegistryEntry = getComponentRegistryEntry(this);
				if (oComponentRegistryEntry.fnViewRenderedResolve && !oComponentRegistryEntry.fnViewRegisteredResolve) {
					oComponentRegistryEntry.fnViewRenderedResolve();
					delete oComponentRegistryEntry.fnViewRenderedResolve;
				}
				(TemplateComponent.prototype.onAfterRendering || jQuery.noop).bind(this, oComponentRegistryEntry).apply(this, arguments);
				var oMethods = oComponentRegistryEntry.methods;
				(oMethods.onAftereRendering || jQuery.noop)();
			};

			oComponentDefinition.setContainer = function () {
				TemplateComponent.prototype.setContainer.apply(this, arguments);
				var sId = this.getId();
				var oAppComponent = this.getAppComponent();
				var oAppRegistryEntry = getAppRegistryEntry(oAppComponent);

				if (!oAppRegistryEntry.oTemplateContract.componentRegistry[sId]) {
					var oComponentData = this.getComponentData();
					var oComponentRegistryEntry = oComponentData.registryEntry;
					delete oComponentData.registryEntry;

					oComponentRegistryEntry.componentCreateResolve(this);
					delete oComponentRegistryEntry.componentCreateResolve;

					oAppRegistryEntry.oTemplateContract.componentRegistry[sId] = oComponentRegistryEntry;

					oAppRegistryEntry.oTemplateContract.oBusyHelper.setBusy(oComponentRegistryEntry.viewRegistered, true);

					oComponentRegistryEntry.oTemplateUtils = new TemplateUtils(oComponentRegistryEntry, oAppRegistryEntry.oTemplateContract);

					oComponentRegistryEntry.createViewController = fnGetViewControllerCreator(oComponentRegistryEntry);
					(oComponentRegistryEntry.methods.setContainer || jQuery.noop)();
				}
			};

			// not yet implemented and needed
			oComponentDefinition.onActivate = jQuery.noop;
			oComponentDefinition.onDeactivate = jQuery.noop;
			oComponentDefinition.refreshBinding = jQuery.noop;

			return TemplateComponent.extend(sComponentNameFull, oComponentDefinition);
		},

		// This method is called by class AppComponent when it is initialized. It hands over a registration method to this class.
		// This registration method can be used to register an AppComponent in the central AppComponentRegistry handled by this class.
		// See fnRegisterAppComponent for details.
		// Note that getRegisterAppComponent can only be called once.
		getRegisterAppComponent: function () {
			var fnRet = fnRegisterAppComponent;
			fnRegisterAppComponent = null;
			return fnRet;
		}
	};
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

}; // end of sap/fe/core/TemplateAssembler.js
if ( !jQuery.sap.isDeclared('sap.fe.templates.ListReport.Component') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.templates.ListReport.Component'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/fe/templates/ListReport/Component",[
	"jquery.sap.global",
	"sap/fe/core/TemplateAssembler",
	"sap/fe/templates/ListReport/controller/ControllerImplementation",
	"sap/fe/core/AnnotationHelper"
], function (jQuery, TemplateAssembler, ControllerImplementation, AnnotationHelper) {
	"use strict";

	function getMethods(oComponent) {

		var oViewProxy = {};
		return {
			oControllerSpecification: {
				getMethods: ControllerImplementation.getMethods.bind(null, oViewProxy),
				oControllerDefinition: {
					// ---------------------------------------------
					// Extensions
					// ---------------------------------------------
					onBeforeRebindTableExtension: function (oEvent) {
					}
				}
			},
			init: function () {
				var oTemplatePrivate = oComponent.getModel("_templPriv");
				oTemplatePrivate.setProperty("/listReport", {}); // Note that component properties are not yet available here
			},

			preTemplater : function(mParameters, oTemplateUtils){
				var oParameterModel = mParameters.oParameterModel;
				var oMetaModel = oParameterModel.getObject().metaModel;
				var sEntitySetPath = "/" + oParameterModel.getObject().entitySet + "/";
				var aSelectionFields = oMetaModel.getObject(sEntitySetPath + "@com.sap.vocabularies.UI.v1.SelectionFields");
				var aLineItems = oMetaModel.getObject(AnnotationHelper.getLineItemPresentation(oParameterModel).getPath());
				var oConcatPart = {};
				var aPromises = [];
				var oPathChecked = {},
					oAnnotationsChecked = {};
				var oLineItem = {}, oSelectionField = {};
				var aApplyParts, oLabeledElement, oApplyUriEncodeParts;
				var i, j;

				function checkContext(sContextPath) {
					var oContext = {},
						oNewContext;
					sContextPath = sContextPath.split("/").slice(0, -1).join("/");
					if (sContextPath.lastIndexOf("/") > 0) {
						oContext = checkContext(sContextPath);
					}
					oNewContext = oMetaModel.getObject(sContextPath);
					if (oNewContext.$kind === "NavigationProperty" && oNewContext.$Type) {
						oContext[oNewContext.$Type] = true;
					}
					return oContext;
				}
				function resolvePath(sContextPath) {
					if (!oPathChecked[sContextPath]) {
						jQuery.sap.log.debug("Requested: " + sContextPath, "PreTemplater");
						aPromises.push(oMetaModel.requestObject(sContextPath).then(function(context) {
							var oContext;
							//resolve annotations of the property
							resolveAnnotations(sContextPath);
							//determine types and namespaces that are part of the path
							oContext = checkContext(sContextPath);
							if (context.$kind === "NavigationProperty" && context.$Type) {
								oContext[context.$Type] = true;
							}
							return oContext;
						}));
						oPathChecked[sContextPath] = true;
					}
				}
				function resolveAnnotationPath(sContextAnnotationPath) {
					aPromises.push(oMetaModel.requestObject(sContextAnnotationPath).then(function(context) {
						if (context) {
							//resolve DataPoint properties
							if (context.Value && context.Value.$Path && context.Value.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.Value.$Path);
							}
							if (context.TargetValue && context.TargetValue.$Path && context.TargetValue.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.TargetValue.$Path);
							}
							//resolve Contact properties
							if (context.fn && context.fn.$Path && context.fn.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.fn.$Path);
							}
							if (context.photo && context.photo.$Path && context.photo.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.photo.$Path);
							}
							if (context.role && context.role.$Path && context.role.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.role.$Path);
							}
							if (context.title && context.title.$Path && context.title.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.title.$Path);
							}
							if (context.org && context.org.$Path && context.org.$Path.indexOf('/') > 0) {
								resolvePath(sContextAnnotationPath + context.org.$Path);
							}
						}
						return checkContext(sContextAnnotationPath);
					}));
				}
				function resolveAnnotations(sContextPath) {
					var oAnnotationMap, oAnnotation, annotation;
					var oConcatPart;
					var k;
					if (!oAnnotationsChecked[sContextPath]) {
						oAnnotationMap = oMetaModel.getObject(sContextPath + "@");
						for (annotation in oAnnotationMap) {
							oAnnotation = oAnnotationMap[annotation];
							if (oAnnotation.$Path && oAnnotation.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oAnnotation.$Path);
							} else if (oAnnotation.$Apply && oAnnotation.$Function === "odata.concat") {
								for (k = 0; k < oAnnotation.$Apply.length; k++) {
									oConcatPart = oAnnotation.$Apply[k];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
						}
						oAnnotationsChecked[sContextPath] = true;
					}
				}

				if (aSelectionFields) {
					for (i = 0; i < aSelectionFields.length; i++) {
						oSelectionField = aSelectionFields[i];
						if (oSelectionField.$PropertyPath && oSelectionField.$PropertyPath.indexOf('/') > 0) {
							// resolveSelectionField(oSelectionField);
							resolvePath(sEntitySetPath + oSelectionField.$PropertyPath);
						}
					}
				}

				if (aLineItems) {
					for (i = 0; i < aLineItems.length; i++) {
						oLineItem = aLineItems[i];
						if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataField") {
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Criticality & CriticalityRepresentation
							if (oLineItem.Criticality) {
								if (oLineItem.Criticality.$Path && oLineItem.Criticality.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.Criticality.$Path);
								}
								if (oLineItem.CriticalityRepresentation && oLineItem.CriticalityRepresentation.$Path && oLineItem.CriticalityRepresentation.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.CriticalityRepresentationType.$Path);
								}
							}
							//check IconUrl
							if (oLineItem.IconUrl && oLineItem.IconUrl.$Path && oLineItem.IconUrl.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.IconUrl.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
							//check SemanticObject
							if (oLineItem.SemanticObject.$Path && oLineItem.SemanticObject.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.SemanticObject.$Path);
							}
							//check Action
							if (oLineItem.Action && oLineItem.Action.$Path && oLineItem.Action.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Action.$Path);
							}
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Criticality & CriticalityRepresentation
							if (oLineItem.Criticality) {
								if (oLineItem.Criticality.$Path && oLineItem.Criticality.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.Criticality.$Path);
								}
								if (oLineItem.CriticalityRepresentation && oLineItem.CriticalityRepresentation.$Path && oLineItem.CriticalityRepresentation.$Path.indexOf('/') > 0) {
									resolvePath(sEntitySetPath + oLineItem.CriticalityRepresentationType.$Path);
								}
							}
							//check IconUrl
							if (oLineItem.IconUrl && oLineItem.IconUrl.$Path && oLineItem.IconUrl.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.IconUrl.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
							//check Value
							if (oLineItem.Value.$Path && oLineItem.Value.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Path) {
								resolveAnnotations(sEntitySetPath + oLineItem.Value.$Path);
							} else if (oLineItem.Value.$Apply && oLineItem.Value.$Function === "odata.concat") {
								for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
									oConcatPart = oLineItem.Value.$Apply[j];
									if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + oConcatPart.$Path);
									}
								}
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
							//check Url
							if (oLineItem.Url.$Path && oLineItem.Url.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Url.$Path);
							} else if (oLineItem.Url.$Apply) {
								aApplyParts = oLineItem.Url.$Apply;
								if (oLineItem.Url.$Function === "odata.fillUriTemplate") {
									if (aApplyParts[0].$Path && aApplyParts[0].$Path.indexOf('/') > 0) {
										resolvePath(sEntitySetPath + aApplyParts[0].$Path);
									}
									for (j = 1; j < aApplyParts.length; j++) {
										oLabeledElement = aApplyParts[j].$LabeledElement;
										if (oLabeledElement && oLabeledElement.$Path && oLabeledElement.$Path.indexOf('/') > 0) {
											resolvePath(sEntitySetPath + oLabeledElement.$Path);
										} else if (oLabeledElement && oLabeledElement.$Apply && oLabeledElement.$Function === "odata.uriEncode") {
											oApplyUriEncodeParts = oLabeledElement.$Apply[0];
											if (oApplyUriEncodeParts.$Path && oApplyUriEncodeParts.$Path.indexOf('/') > 0) {
												resolvePath(sEntitySetPath + oApplyUriEncodeParts.$Path);
											}
										}
									}
								} else if (oLineItem.Url.$Function === "odata.concat") {
									for (j = 0; j < oLineItem.Value.$Apply.length; j++) {
										oConcatPart = oLineItem.Value.$Apply[j];
										if (oConcatPart && oConcatPart.$Path && oConcatPart.$Path.indexOf('/') > 0) {
											resolvePath(sEntitySetPath + oConcatPart.$Path);
										}
									}
								}
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
							//check SemanticObject
							if (oLineItem.SemanticObject.$Path && oLineItem.SemanticObject.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.SemanticObject.$Path);
							}
							//check Action
							if (oLineItem.Action && oLineItem.Action.$Path && oLineItem.Action.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Action.$Path);
							}
							//check RequiresContext
							if (oLineItem.RequiresContext && oLineItem.RequiresContext.$Path && oLineItem.RequiresContext.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.RequiresContext.$Path);
							}
						} else if (oLineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
							//check Target
							if (oLineItem.Target.$AnnotationPath && oLineItem.Target.$AnnotationPath.indexOf('/') > 0) {
								resolveAnnotationPath(sEntitySetPath + oLineItem.Target.$AnnotationPath);
							}
							//check Label
							if (oLineItem.Label && oLineItem.Label.$Path && oLineItem.Label.$Path.indexOf('/') > 0) {
								resolvePath(sEntitySetPath + oLineItem.Label.$Path);
							}
						}
					}
				}
				return aPromises;
			}
		};
	}

	return TemplateAssembler.getTemplateComponent(getMethods,
		"sap.fe.templates.ListReport", {
			metadata: {
				properties: {
					"templateName": {
						"type": "string",
						"defaultValue": "sap.fe.templates.ListReport.view.ListReport"
					},
					"tableType": {
						"type": "string",
						"defaultValue": "ResponsiveTable"
					},
					"settingsDialogType": {
						"type": "string",
						"defaultValue": "ViewSettings"
					},
					"filterLiveUpdate": {
						"type": "boolean",
						"defaultValue":"true"
					}
				},
				"manifest": "json"
			}
		});
});

}; // end of sap/fe/templates/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.fe.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// Provides base class sap.fe.AppComponent for all generic app components
// ----------------------------------------------------------------------------------
jQuery.sap.declare('sap.fe.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
sap.ui.define("sap/fe/AppComponent",[
	"jquery.sap.global",
	"sap/ui/core/UIComponent",
	"sap/m/NavContainer",
	"sap/fe/core/BusyHelper",
	"sap/fe/core/TemplateAssembler",
	"sap/ui/core/ComponentContainer",
	"sap/fe/core/internal/testableHelper",
	"./model/DraftModel",
	"sap/fe/controller/NavigationController"
], function (jQuery,
			 UIComponent,
			 NavContainer,
			 BusyHelper,
			 TemplateAssembler,
			 ComponentContainer,
			 testableHelper,
			 DraftModel,
			 NavigationController) {
	"use strict";

	var fnRegisterAppComponent = TemplateAssembler.getRegisterAppComponent(); // Retrieve the possibility to register at TemplateAssembler

	var bCreateFirstPage = true;
	testableHelper.testableStatic(function() {
		bCreateFirstPage = false;
	}, "suppressPageCreation");

	function getMethods(oAppComponent, oTemplateContract) {
		// initialized on demand
		var oConfig;
		var fnDeregister; // function to be called to deregister at TemplateContract

		// // template contract which is used for data interchange between framework classes
		var oTemplateContract = {
			oAppComponent: oAppComponent, // reference to this application component

			// registry for all TemplateComponents instantiated in the context of this App
			// maps the ids of these components on an object (called registry entry)
			// They are inserted into the registry in method setContainer of TemplateComponent which can actually be found in TemplateAssembler
			// each entry of the component registry contains the following information:
			//		- oComponent : the component instance
			//		- componentName : name of the component
			//		- methods : methods of the component

			//		- methods.oControllerSpecification - specification of template view controller
			//		- createViewController - create template view controller
			//		- oController - template view controller
			//		- ControllerRegistryEntry - registry entry of template view controllers
			//			- onExit
			//			- oTemplateUtils
			//			- oAppRegistryEntry

			//		- viewRegistered : Promise which is resolved once the view is registered
			//		- fnViewRegisteredResolve : function to resolve the viewRegistered promise, deleted after usage

			//		- oViewRenderedPromise : Promise which is resolved once the view is rendered
			//		- fnViewRenderedResolve : function to resolve the oViewRenderedPromise promise, deleted after usage

			//		- componentCreateResolve : function which is called once the component is created
			componentRegistry: {},

			oBusyHelper: null, // instantiated in createContent
			oMessageUtils: null, // instantiated in templateUtils on demand
			oActionController: null, // instantiated in templateUtils on demand
			oCommonUtils: null, // instantiated in templateUtils on demand
			// oTemplatePrivateGlobalModel: (new JSONModel()).setDefaultBindingMode("TwoWay")

			aAppStateChangedListener: [], // listeners to the app state changed event

			getNavigationController: function () {
				// in case anything happens before the templateUtils are created we need to allow access to the navigation controller
				return new NavigationController(oTemplateContract);
			}

		};

		function getText(sId) {
			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.fe");
			return oResourceBundle.getText(sId);
		}

		function createPageComponentContainer(sEntitySet, oConfig) {
			var sComponent = 'sap.fe.templates.' + oConfig.template,
				oSettings = {
					entitySet: sEntitySet,
					componentData: {
						preprocessorsData: {},
						registryEntry: {
							componentCreateResolve: jQuery.noop,
							viewLevel: 1
						}
					}
				};

			if (oConfig.settings) {
				// consider component specific settings from app descriptor
				jQuery.extend(oSettings, oConfig.settings);
			}

			var oPage = null;
			oAppComponent.runAsOwner(function(){
				 oPage = new ComponentContainer({
					name: sComponent,
					propagateModel: true,
					width: "100%",
					height: "100%",
					handleValidation: true,
					settings: oSettings
				});
			});
			return oPage;
		}

		testableHelper.testable({
			createPageComponentContainer: createPageComponentContainer,
			appComponent: oAppComponent
		}, "templateTester");

		function createFirstPage() {
			var oConfig = getConfig();
			var oPageConfigs,
				oDefaultPageConfig,
				oStartPage,
				aTargetParts,
				sEntitySet,
				sIntent;

			function wrongConfiguration(){
				return oTemplateContract.getNavigationController().navigateToMessagePage({
					text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
					description: getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
				});
			}

			if (!oConfig ||  !oConfig.entitySets || !oConfig.navigation) {
				return wrongConfiguration();
			}

			for (var p in oConfig.navigation){
				if (oConfig.navigation[p].isStartPage){
					if (oStartPage){
						// having more than one start page is not allowed
						return wrongConfiguration();
					} else {
						oStartPage = oConfig.navigation[p];
					}
				}

			}

			if (!oStartPage || !oStartPage.target){
				return wrongConfiguration();
			}

			aTargetParts = oStartPage.target.split("/");

			if (aTargetParts.length !== 2){
				// currently we support only accessing directly the feed
				return wrongConfiguration();
			}

			sEntitySet = aTargetParts[0];
			sIntent = aTargetParts[1];

			if (sIntent !== "feed"){
				// currently we support only feed as target
				return wrongConfiguration();
			}

			oPageConfigs = oConfig.entitySets[sEntitySet][sIntent];

			if (!oPageConfigs || !oPageConfigs.default){
				// currently only the default config is supported
				return wrongConfiguration();
			}

			oDefaultPageConfig = oPageConfigs.default;

			if (!oDefaultPageConfig.template){
				// currently we support only specifying a template name
				return wrongConfiguration();
			}

			if (oDefaultPageConfig.template !== 'ListReport'){
				// currently we support only the List Report
				return wrongConfiguration();
			}
			try {
				var oPage = createPageComponentContainer(sEntitySet, oDefaultPageConfig);
				oTemplateContract.oNavContainer.addPage(oPage);
				var oRouter = oAppComponent.getRouter();

				oRouter.attachRoutePatternMatched(function (oEvent) {
					if (oEvent.getParameters().name === "root") {
						// no inner app state used
						oTemplateContract.oInnerAppStatePromise.resolve();

						if (oTemplateContract.oAppState) {
							// the app had an app state but navigated back to the initial route, we need to clean up the appstate
							oTemplateContract.oAppState = null;
							oTemplateContract.oAppStateModel.setData({});
							// fire app state change event
							for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++) {
								oTemplateContract.aAppStateChangedListener[i]();
							}
						}


					} else {
						var sInnerAppStateKey = oEvent.getParameters().arguments.iAppState;

						if (oTemplateContract.oAppState && sInnerAppStateKey === oTemplateContract.oAppState.getKey()) {
							// the app state was set by the app
							oTemplateContract.oInnerAppStatePromise.resolve();
							return;
						}

						// we must apply the inner App State *after* treating CrossAppState (x-app-state), reset InnerAppStatePromise
						//oTemplateContract.oCrossAppStatePromise.done(function () {
						sap.ushell.Container.getService("CrossApplicationNavigation").getAppState(oAppComponent, sInnerAppStateKey).done(function (oStartupInnerAppState) {
							oTemplateContract.oAppState = oStartupInnerAppState;
							updateAppStateModel(oTemplateContract.oAppStateModel, oStartupInnerAppState);
							oTemplateContract.oInnerAppStatePromise.resolve();

							// fire app state change event
							for (var i = 0; i < oTemplateContract.aAppStateChangedListener.length; i++) {
								oTemplateContract.aAppStateChangedListener[i]();
							}
						});
						//});
					}
				});

				oRouter.initialize();
			} catch (e) {
				oTemplateContract.getNavigationController().navigateToMessagePage({
					text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
					description: getText("SAPFE_APPSTART_WRONG_CONFIGURATION")
				});
			}
		}

		function getConfig() {
			if (!oConfig) {
				var oMeta = oAppComponent.getMetadata();
				oConfig = oMeta.getManifestEntry("sap.fe");
			}
			return oConfig;
		}

		function updateAppStateModel(oAppStateModel, oAppState) {
			var oData = oAppState.getData();

			if (oData && (JSON.stringify(oData) !== JSON.stringify(oAppStateModel.getProperty("/"))) && oAppStateModel) {
				oAppStateModel.setProperty("/", oData);
				return true;
			}
			return false;
		}

		return {
			init: function () {
				var oAppRegistryEntry = {
					appComponent: oAppComponent,
					oTemplateContract: oTemplateContract
				};
				var oShellServiceFactory = sap.ui.core.service.ServiceFactoryRegistry.get("sap.ushell.ui5service.ShellUIService");
				oTemplateContract.oShellServicePromise = (oShellServiceFactory && oShellServiceFactory.createInstance()) || Promise.reject();
				oTemplateContract.oShellServicePromise.catch(function () {
					jQuery.sap.log.warning("No ShellService available");
				});

				/* as the cross app state is not yet defined and supported the crossappstate coding is kept but deactivated
				 oTemplateContract.oCrossAppStatePromise = new jQuery.Deferred(); // Done when startup CrossAppState has been transferred into the model
				 sap.ushell.Container.getService("CrossApplicationNavigation").getStartupAppState(oAppComponent).done(function (oStartupCrossAppState) {
				 updateAppStateModel(oTemplateContract.oAppStateModel, oStartupCrossAppState);
				 oTemplateContract.oCrossAppStatePromise.resolve();
				 });
				 */

				oTemplateContract.oInnerAppStatePromise = new jQuery.Deferred(); // Done when above and startup InnerAppState transferred into the model

				// create AppState Model
				oTemplateContract.oAppStateModel = new sap.ui.model.json.JSONModel();

				// as the cross app state is not yet defined and supported we skip this coding and resolve the promise immediately
				// sap.ushell.Container.getService("CrossApplicationNavigation").getStartupAppState(oAppComponent).done(function (oStartupCrossAppState) {
				// 	updateAppStateModel(oTemplateContract.oAppStateModel, oStartupCrossAppState);
				// 	oTemplateContract.oCrossAppStatePromise.resolve();
				// });

				(UIComponent.prototype.init || jQuery.noop).apply(oAppComponent, arguments);

				oTemplateContract.oBusyHelper.setBusy(oTemplateContract.oShellServicePromise);
				fnDeregister = fnRegisterAppComponent(oAppRegistryEntry);

				var oModel = oAppComponent.getModel();
				if (oModel) {
					// Test if draft Model
					DraftModel.isDraftModel(oModel).then(function (bIsDraft) {
						if (bIsDraft) {
							// service contains a draft entity therefore upgrade the model to a draft model
							DraftModel.upgrade(oModel).then(function () {
								oAppComponent.setModel(oModel.getDraftAccessModel(), "$draft");
							});
						}
					});

					// Error handling for erroneous metadata request
					oModel.getMetaModel().requestObject("/$EntityContainer/").catch(function (oError) {
						oTemplateContract.getNavigationController().navigateToMessagePage({
							text: getText("SAPFE_APPSTART_TECHNICAL_ISSUES"),
							description: oError.message
						});

						/* When the application's OData service's metadata document
						 * can't be retrieved or loaded, then none of children components
						 * can load. It is therefore important to look through those components
						 * and resolve their promises to register themselves with a view. */
						for (var childComponent in oTemplateContract.componentRegistry) {
							oTemplateContract.componentRegistry[childComponent].fnViewRegisteredResolve();
						}
					});
				}

				oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", false);
			},
			exit: function () {
				if (oTemplateContract.oNavContainer) {
					oTemplateContract.oNavContainer.destroy();
				}
				fnDeregister();
			},
			createContent: function () {
				// Method must only be called once
				if (oTemplateContract.oNavContainer) {
					return "";
				}

				oTemplateContract.oNavContainer = new NavContainer({
					id: oAppComponent.getId() + "-appContent"
				});

				oTemplateContract.oBusyHelper = new BusyHelper(oTemplateContract);
				oTemplateContract.oBusyHelper.setBusyReason("initAppComponent", true, true);

				// as long as we don't introduce the navigation controller again we create the first page directly
				if (bCreateFirstPage) {
					createFirstPage();
				}

				return oTemplateContract.oNavContainer;
			}
		};
	}

	return UIComponent.extend("sap.fe.AppComponent", {
		metadata: {
			config: {
				fullWidth: true
			},
			events: {
				pageDataLoaded: {}
			},
			routing: {
				config: {},
				routes: [
					{
						pattern: "",
						name: "root"
					},
					{
						pattern: "?sap-iapp-state={iAppState}",
						name: "rootWithAppState"
					}],
				targets: []
			},
			library: "sap.fe"
		},

		constructor: function () {
			var oAppId = testableHelper.startApp(); // suppress access to private methods in productive coding
			jQuery.extend(this, getMethods(this, oAppId));

			(UIComponent.prototype.constructor || jQuery.noop).apply(this, arguments);
		}
	});
});

}; // end of sap/fe/AppComponent.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Table.GridTable.GridTableController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/**
 *
 *
 * @private
 * @name sap.fe.controls._Table.GridTable.GridTableController
 * @author SAP SE
 * @version 1.50.2
 * @since ??
 * @param {}
 * @returns {sap.fe.controls._Table.GridTable.GridTableController} new GridTable controller
 */
jQuery.sap.declare('sap.fe.controls._Table.GridTable.GridTableController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_Table/GridTable/GridTableController",[
	"jquery.sap.global",
	"sap/fe/controls/_Table/TableController"
], function (jQuery, TableController) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var GridTableController = TableController.extend("sap.fe.controls._Table.GridTable.GridTableController", {
		constructor: function (oTable) {
			TableController.apply(this, arguments);
			this.oTable = oTable;
		}
	});

	/**
	 *
	 *
	 * @param {}
	 * @private
	 */

     /*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	GridTableController.prototype.setSelectionMode = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getExtension()[0].getContent());
		var iMultiplicityTo;
		var sSelectionMode = 'None';

		for (var i = 0; i < aToolbarActions.length; i++) {
			iMultiplicityTo = aToolbarActions[i].getMultiplicityTo();
			if (iMultiplicityTo > 1 || !iMultiplicityTo) {
				sSelectionMode = 'MultiToggle';
				break;
			} else if (iMultiplicityTo === 1) {
				sSelectionMode = 'Single';
			}
		}

	    this.oInnerTable.setSelectionMode(sSelectionMode);

	};



	/*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	GridTableController.prototype.enableDisableActions = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getExtension()[0].getContent());
		var iSelected = this.oInnerTable.getSelectedIndices().length;
		this.enableDisableActionsUtil(iSelected,aToolbarActions);

	};

	GridTableController.prototype.bindTableCount = function () {
		var oTitle = this.oInnerTable.getExtension()[0].getContent()[0];
		this.bindTableCountUtil(oTitle);
	};



	GridTableController.prototype.handleDataReceived = function (oEvent) {
		var oError = oEvent.getParameter("error");
		var oResourceBundle = this.oInnerTable.getModel("sap.fe.i18n").getResourceBundle();
		if (oError) {
			// fire the showError event to show a message box via controllerImplementation
			this.oInnerTable.setNoData(oResourceBundle.getText("SAPFE_NODATA_TEXT_FOR_TABLE_TECHINCAL_ERROR"));
			this.oTable.fireShowError(oEvent);
		} else {
			this.oInnerTable.setNoData(oResourceBundle.getText("SAPFE_NODATA_TEXT_FOR_TABLE"));
		}
		//This is work around for Table data loading issue when visibleRowCountMode is auto in initial
		if (this.oInnerTable.getVisibleRowCountMode() != "Auto") {
			this.oInnerTable.setVisibleRowCountMode("Auto");
		}
		this.oInnerTable.setBusy(false);
	};


	GridTableController.prototype.getListBinding = function () {
		return this.oInnerTable.getBinding("rows");

	};

	GridTableController.prototype.getListBindingInfo = function () {
		return this.oInnerTable.getBindingInfo("rows");
	};

	return GridTableController;

});

}; // end of sap/fe/controls/_Table/GridTable/GridTableController.js
if ( !jQuery.sap.isDeclared('sap.fe.controls._Table.ResponsiveTable.ResponsiveTableController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

/**
 *
 *
 * @private
 * @name sap.fe.controls._Table.ResponsiveTable.ResponsiveTableController
 * @author SAP SE
 * @version 1.50.2
 * @since ??
 * @param {}
 * @returns {sap.fe.controls._Table.ResponsiveTable.ResponsiveTableController} new GridTable controller
 */
jQuery.sap.declare('sap.fe.controls._Table.ResponsiveTable.ResponsiveTableController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/fe/controls/_Table/ResponsiveTable/ResponsiveTableController",[
	"jquery.sap.global",
	"sap/fe/controls/_Table/TableController"
], function (jQuery, TableController) {
	"use strict";

	/**
	 * @private
	 * @constructor
	 * @param {}
	 */

	var ResponsiveTableController = TableController.extend("sap.fe.controls._Table.ResponsiveTable.ResponsiveTableController", {
		constructor: function (oTable) {
			TableController.apply(this, arguments);
			this.oTable = oTable;
		}
	});

	/**
	 *
	 * This method checks the multiplicity of the actions and sets the selection mode accordingly
	 * only sap.fe.controls.Action instances in the tables headerbar are considered
	 *
	 * @param {}
	 * @private
	 */

	ResponsiveTableController.prototype.setSelectionMode = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getHeaderToolbar().getContent());
		var iMultiplicityTo;
		var sSelectionMode = 'None';

		for (var i = 0; i < aToolbarActions.length; i++) {
			iMultiplicityTo = aToolbarActions[i].getMultiplicityTo();
			if (iMultiplicityTo > 1 || !iMultiplicityTo) {
				sSelectionMode = 'MultiSelect';
				break;
			} else if (iMultiplicityTo === 1) {
				sSelectionMode = 'SingleSelectLeft';
			}
		}

		this.oInnerTable.setMode(sSelectionMode);
	};


	/*
	 this method checks the multiplicity of the actions and sets the selection mode accordingly
	 only sap.fe.controls.Action instances in the tables headerbar are considered
	 */

	ResponsiveTableController.prototype.enableDisableActions = function () {
		var aToolbarActions = this.getToolbarActions(this.oInnerTable.getHeaderToolbar().getContent());
		var iSelected = this.oInnerTable.getSelectedContexts().length;
		this.enableDisableActionsUtil(iSelected, aToolbarActions);
	};

	ResponsiveTableController.prototype.bindTableCount = function () {
		var oTitle = this.oInnerTable.getHeaderToolbar().getContent()[0];
		this.bindTableCountUtil(oTitle);
	};


	ResponsiveTableController.prototype.handleDataReceived = function (oEvent) {
		var oError = oEvent.getParameter("error");
		var oResourceBundle = this.oInnerTable.getModel("sap.fe.i18n").getResourceBundle();
		if (oError) {
			// fire the showError event to show a message box via controllerImplementation
			this.oInnerTable.setNoDataText(oResourceBundle.getText("SAPFE_NODATA_TEXT_FOR_TABLE_TECHINCAL_ERROR"));
			this.oTable.fireShowError(oEvent);
		} else {
			this.oInnerTable.setNoDataText(oResourceBundle.getText("SAPFE_NODATA_TEXT_FOR_TABLE"));
		}
		this.oInnerTable.setBusy(false);
	};

	ResponsiveTableController.prototype.getListBinding = function () {
		return this.oInnerTable.getBinding("items");

	};

	ResponsiveTableController.prototype.getListBindingInfo = function () {
		return this.oInnerTable.getBindingInfo("items");
	};

	return ResponsiveTableController;

});

}; // end of sap/fe/controls/_Table/ResponsiveTable/ResponsiveTableController.js
if ( !jQuery.sap.isDeclared('sap.fe.Table') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
        (c) Copyright 2009-2017 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.fe.Table'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.XMLComposite'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.AnnotationHelper'); // unlisted dependency retained
sap.ui.define("sap/fe/Table",[
	'jquery.sap.global',
	'sap/ui/core/XMLComposite',
	'sap/fe/controls/_Table/GridTable/GridTableController',
	'sap/fe/controls/_Table/ResponsiveTable/ResponsiveTableController',
	'sap/fe/controls/_Field/FieldController',
	'sap/ui/table/Table',
	'sap/fe/core/AnnotationHelper',
	'sap/fe/controls/_Table/TableAnnotationHelper',
	'sap/fe/controls/_Field/FieldAnnotationHelper',
	'sap/ui/model/odata/v4/AnnotationHelper'
], function (jQuery, XMLComposite, GridTableController, ResponsiveTableController, FieldController, GridTable) {
	"use strict";

	var Table = XMLComposite.extend("sap.fe.Table", {
		metadata: {
			designTime: true,
			properties: {
				context: {
					type: "any",
					invalidate: "template"
				},
				tableBindingPath: {
					type: "string",
					invalidate: "template"
				},
				type: {
					type: "string",
					defaultValue: "ResponsiveTable",
					invalidate: "template"
				},
				interactionType: {
					type: "string",
					defaultValue: "Inactive",
					invalidate: "template"
				},
				"settingsDialogType": {
					type: "string",
					defaultValue: "ViewSettings"
				},
				filterBarId: {
					type: "string",
					invalidate: false
				},
				enabled: {
					type: "boolean",
					defaultValue: true,
					invalidate: false
				}
			},
			events: {
				"itemPress": {},
				"callAction": {},
				"showError": {}
			},
			publicMethods: []
		},
		alias: "this",
		fragment: "sap.fe.controls._Table.Table"
	});

	var fnInitialize = function () {
		if (!this.bInitialized) {
			this.oTableController.attachToFilterBar();
			this.oTableController.setSelectionMode();
			this.oTableController.enableDisableActions();
			this.oTableController.bindTableCount();
			this.bInitialized = true;
			this.detachModelContextChange(fnInitialize);
		}
	};


	Table.prototype.init = function () {
		var oInnerTable = this.getInnerTable();
		if (oInnerTable instanceof GridTable) {
			this.oTableController = new GridTableController(this);
		} else {
			this.oTableController = new ResponsiveTableController(this);
		}
		this.oFieldController = new FieldController(null, this);
		this.attachModelContextChange(fnInitialize);

	};

	Table.prototype.getInnerTable = function () {
		/*
		 get access to the rendered table - currently it's the second one in the layout. whenever we change the
		 layout we need to adapt this coding. Going upwards to the the view and to access it via ID would take
		 much longer. Any other ideas are welcome
		 */
		return this.get_content();
	};

	Table.prototype.handleDataRequested = function (oEvent) {
		this.oTableController.handleDataRequested(oEvent);
	};

	Table.prototype.handleDataReceived = function (oEvent) {
		this.oTableController.handleDataReceived(oEvent);
	};

	Table.prototype.handleSelectionChange = function (oEvent) {
		this.oTableController.enableDisableActions();
	};

	Table.prototype.handleItemPress = function (oEvent) {
		this.fireItemPress({listItem: oEvent.getParameter("listItem")});
	};

	Table.prototype.handleCallAction = function (oEvent) {
		this.oTableController.handleCallAction(oEvent);
	};

	Table.prototype.getSelectedContexts = function () {
		var oInnerTable = this.getInnerTable();
		var aSelectedContext = [];
		if (oInnerTable instanceof  GridTable) {
			var aSeletedIndices = oInnerTable.getSelectedIndices();
			for (var index in aSeletedIndices) {
				aSelectedContext.push(oInnerTable.getContextByIndex(index));
			}
		} else {
			aSelectedContext = oInnerTable.getSelectedContexts();
		}

		return aSelectedContext;
	};

	Table.prototype.getEntitySet = function () {
		var sListBindingPath = this.getListBinding().getPath();
		// return the path without the / - this works for absolute bindings only
		// this needs to be enhanced once relative bindings are supported as well
		return sListBindingPath.substr(1);
	};

	Table.prototype.getListBinding = function () {
		return this.oTableController.getListBinding();
	};

	Table.prototype.getListBindingInfo = function () {
		return this.oTableController.getListBindingInfo();
	};

	/* Delegate field events to the field controller */
	Table.prototype.onContactDetails = function (oEvent) {
		this.oFieldController.onContactDetails(oEvent);
	};

	Table.prototype.onDraftLinkPressed = function (oEvent) {
		this.oFieldController.onDraftLinkPressed(oEvent);

	};

	Table.prototype.onDataFieldWithIntentBasedNavigationPressed = function (oEvent) {
		this.oFieldController.onDataFieldWithIntentBasedNavigationPressed(oEvent);
	};

	Table.prototype.onStandardActionClick = function (oEvent) {
		this.oTableController.onStandardActionClick(oEvent);
	};

	return Table;

}, /* bExport= */true);

}; // end of sap/fe/Table.js
