
# This file contains messages descriptions arranged in sections according to HRF APIs
# These descriptions are translated.
# Adding a new message requires also update of message.xsjslib file by the new ID

#############################
# common
#############################
# 10 - 999 - common messages

# YMSG: return from resource activation, in case of a resource does not exist in repository
10=Kh\u00F4ng th\u00EA\u0309 ki\u0301ch hoa\u0323t ngu\u00F4\u0300n; ngu\u00F4\u0300n kh\u00F4ng t\u00F4\u0300n ta\u0323i.
# YMSG: return from resource activation, in case of a resource suffix is not one of HRF resources
11=Kh\u00F4ng th\u00EA\u0309 ki\u0301ch hoa\u0323t ngu\u00F4\u0300n; h\u00E2\u0323u t\u00F4\u0301 '{0}' kh\u00F4ng \u0111\u01B0\u01A1\u0323c h\u00F4\u0303 tr\u01A1\u0323.
# YMSG: return from resource activation, in case of a resource package does not exist in repository
12=Kh\u00F4ng th\u00EA\u0309 ki\u0301ch hoa\u0323t ngu\u00F4\u0300n; go\u0301i '{0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i.
# YMSG: return from runtime plug in, in case of invalid attribute
13=Kh\u00F4ng th\u00EA\u0309 ki\u0301ch hoa\u0323t ngu\u00F4\u0300n; thu\u00F4\u0323c ti\u0301nh '{0}' kh\u00F4ng \u0111\u01B0\u01A1\u0323c bao g\u00F4\u0300m trong s\u01A1 \u0111\u00F4\u0300.
# YMSG: return from  runtime plug in, in case of invalid attribute
14=Kh\u00F4ng th\u00EA\u0309 ki\u0301ch hoa\u0323t ngu\u00F4\u0300n; gia\u0301 tri\u0323 thu\u00F4\u0323c ti\u0301nh b\u0103\u0301t bu\u00F4\u0323c '{0}' bi\u0323 thi\u00EA\u0301u.
# YMSG: return from  runtime plug in, in case none of a predefined set of fields is specified
15=Ki\u0301ch hoa\u0323t ngu\u00F4\u0300n kh\u00F4ng kha\u0309 thi; thi\u00EA\u0301u i\u0301t nh\u00E2\u0301t m\u00F4\u0323t thu\u00F4\u0323c ti\u0301nh tu\u0300y cho\u0323n {0}
# YMSG: return from  runtime plug in, in case of invalid field (e.g vocabulary doesn't exist)
16=Ki\u0301ch hoa\u0323t ngu\u00F4\u0300n kh\u00F4ng kha\u0309 thi; gia\u0301 tri\u0323 thu\u00F4\u0323c ti\u0301nh {0} kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from runtime plug in, in case of inconsistent fields combination(e.g. vocabulary and output names doesn't match)
17=Ki\u0301ch hoa\u0323t ngu\u00F4\u0300n kh\u00F4ng kha\u0309 thi; k\u00EA\u0301t h\u01A1\u0323p {0} va\u0300 {1} kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from  runtime plug in, in case of invalid resource id (e.g. package / file name is missing)
23=Ki\u0301ch hoa\u0323t ngu\u00F4\u0300n kh\u00F4ng kha\u0309 thi; ngu\u00F4\u0300n kh\u00F4ng t\u00F4\u0300n ta\u0323i
# YMSG: return from  runtime plug in, in case of error from REL validation
24=L\u00F4\u0303i trong tr\u01B0\u01A1\u0300ng {0}\: {1}
# YMSG: return from  REST service, in case of http request contains non supported method
25=Ph\u01B0\u01A1ng pha\u0301p kh\u00F4ng tha\u0300nh c\u00F4ng; ph\u01B0\u01A1ng pha\u0301p \#{0} kh\u00F4ng \u0111\u01B0\u01A1\u0323c h\u00F4\u0303 tr\u01A1\u0323
# YMSG:  technical error from platform
26=\u0110a\u0303 xa\u0309y ra l\u00F4\u0303i ky\u0303 thu\u00E2\u0323t - {0}
# YMSG: return from resource activation, in case of a resource does not exist in repository
27=Ngu\u00F4\u0300n kh\u00F4ng t\u00F4\u0300n ta\u0323i.

# 100 - 200 - Authorization

# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
100=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n th\u01B0\u0323c hi\u00EA\u0323n ha\u0300nh \u0111\u00F4\u0323ng na\u0300y.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
101=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
102=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n xo\u0301a quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
103=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n ta\u0323o quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
104=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n \u0111o\u0323c quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
105=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n c\u00E2\u0323p nh\u00E2\u0323t di\u0323ch vu\u0323 quy t\u0103\u0301c
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
106=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n xo\u0301a di\u0323ch vu\u0323 quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
107=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
108=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n \u0111o\u0323c di\u0323ch vu\u0323 quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
109=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n cha\u0323y di\u0323ch vu\u0323 quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
110=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n c\u00E2\u0323p nh\u00E2\u0323t ba\u0309ng t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
111=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n xo\u0301a ba\u0309ng t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
112=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n ta\u0323o ba\u0309ng t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
113=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n \u0111o\u0323c ba\u0309ng t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
114=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n c\u00E2\u0323p nh\u00E2\u0323t m\u00E2\u0303u quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
115=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n xo\u0301a m\u00E2\u0303u quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
116=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
117=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n \u0111o\u0323c m\u00E2\u0303u quy t\u0103\u0301c.
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
118=Ba\u0323n kh\u00F4ng \u0111\u01B0\u01A1\u0323c quy\u00EA\u0300n ta\u0323o ho\u0103\u0323c c\u00E2\u0323p nh\u00E2\u0323t di\u0323ch vu\u0323 quy t\u0103\u0301c.
#############################
# API: Validate
#############################
# 1100 - 1199 - REL validation messages

# YMSG: return from REL, the beginning of any REL validation error - in case of a wrong statement 
1100=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c;
# YMSG: return from REL parser, in case of a wrong entry (syntax) and maximum 3 option are optional instead 
1101=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; nh\u00E2\u0323p {0} thay vi\u0300 {1}
# YMSG: return from REL parser, in case of a wrong entry (syntax) and more than 3 option are optional instead  
1102=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; {0} kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from REL parser, in case of a wrong input
1103=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; loa\u0323i bo\u0309 {0}
# YMSG: return from REL model, in case of collection OM when single value in needed
1104=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; {0} la\u0300 danh sa\u0301ch gia\u0301 tri\u0323. Thay \u0111\u00F4\u0309i sang bi\u00EA\u0309u th\u01B0\u0301c \u0111a\u0323i di\u00EA\u0323n cho gia\u0301 tri\u0323 \u0111\u01A1n.
# YMSG: return from REL model, in case of a wrong input
1105=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; nh\u00E2\u0323p toa\u0301n ha\u0323ng h\u01A1\u0323p l\u00EA\u0323 thay vi\u0300 {0}
# YMSG: return from REL parser, in case of an incomplete expression
1106=Bi\u00EA\u0309u ch\u01B0\u0301c ch\u01B0a hoa\u0300n t\u00E2\u0301t;
# YMSG: return from REL lexer, in case of missing token at EOF
1107=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; nh\u00E2\u0323p {0} va\u0300o cu\u00F4\u0301i bi\u00EA\u0309u th\u01B0\u0301c
# YMSG: return from REL lexer, in case of wrong token
1108=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; nh\u00E2\u0323p {0} thay vi\u0300 '{'1}
# YMSG: return from REL entity, in case of missing current
1109=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; thi\u00EA\u0301u 'current' trong m\u00EA\u0323nh \u0111\u00EA\u0300 'where'
# YMSG: return from REL entity, in case of redundant 'current'
1110=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; th\u01B0\u0300a 'current'; loa\u0323i bo\u0309 m\u00F4\u0323t 'current'
# YMSG: return from REL vocabulary utils, in case of invalid root object
1111=\u0110\u00F4\u0301i t\u01B0\u01A1\u0323ng g\u00F4\u0301c kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from REL vocabulary utils, in case of invalid association
1112=Li\u00EAn k\u00EA\u0301t kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from REL vocabulary utils, in case of invalid association or attribute
1113=Thu\u00F4\u0323c ti\u0301nh ho\u0103\u0323c li\u00EAn k\u00EA\u0301t kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from REL vocabulary utils, in case of root is simple attribute
1114=G\u00F4\u0301c kh\u00F4ng th\u00EA\u0309 la\u0300 thu\u00F4\u0323c ti\u0301nh \u0111\u01A1n
# YMSG: return from REL vocabulary utils, in case of attribute not found
1115=\u0110\u01B0\u01A1\u0300ng d\u00E2\u0303n ch\u01B0a hoa\u0300n t\u00E2\u0301t, kh\u00F4ng ti\u0300m th\u00E2\u0301y thu\u00F4\u0323c ti\u0301nh
# YMSG: return from REL entity, in case of using 'current' outside of 'where'
1116=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; chi\u0309 co\u0301 th\u00EA\u0309 s\u01B0\u0309 du\u0323ng t\u01B0\u0300 kho\u0301a 'current' trong m\u00EA\u0323nh \u0111\u00EA\u0300 'where'.
# YMSG: return from REL entity, in case of using 'current' incorrectly with arithmetic
1117=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c; pha\u0309i s\u01B0\u0309 du\u0323ng t\u01B0\u0300 kho\u0301a 'current' cho t\u00E2\u0301t ca\u0309 toa\u0301n ha\u0323ng \u01A1\u0309 m\u00F4\u0323t b\u00EAn toa\u0301n t\u01B0\u0309 so sa\u0301nh trong m\u00EA\u0323nh \u0111\u00EA\u0300 'where'.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1118=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c. '{0}' kh\u00F4ng pha\u0309i gia\u0301 tri\u0323 h\u01A1\u0323p l\u00EA\u0323 t\u01B0\u0300 danh sa\u0301ch gia\u0301 tri\u0323 '{1}'.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1119=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c. Kg th\u00EA\u0309 s\u01B0\u0309 du\u0323ng '{0}' toa\u0301n t\u01B0\u0309 v\u01A1\u0301i thu\u00F4\u0323c ti\u0301nh DS gia\u0301 tri\u0323 ('{1}').
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1120=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c. T\u01B0\u0300 kho\u0301a 't\u00E2\u0301t ca\u0309' kh\u00F4ng th\u00EA\u0309 theo sau toa\u0301n ha\u0323ng ch\u01B0\u0301a t\u01B0\u0300 kho\u0301a 'hi\u00EA\u0323n ta\u0323i'.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1121=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c. T\u01B0\u0300 kho\u0301a 't\u00E2\u0301t ca\u0309' kg th\u00EA\u0309 \u0111c s.du\u0323ng nhi\u00EA\u0300u h\u01A1n m\u00F4\u0323t l\u00E2\u0300n trg cu\u0300ng c\u00E2u l\u00EA\u0323nh.


# 1200 - 1999 - validation messages

#############################
# API : resource CRUD
#############################
# 2100 - 2299 - vocabulary messages

# YMSG: return from vocabulary runtime plug in, in case of error in expression
2100=Trong '{0}'- L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c ph\u00E2n ti\u0301ch cu\u0301 pha\u0301p\: '{1}', '{2}'
# YMSG: return from vocabulary runtime plug in, in case of error in rule
2101=Trong '{0}' - L\u00F4\u0303i trong quy t\u0103\u0301c\: '{1}', '{2}'
# YMSG: return from vocabulary runtime plug in, in case the parameter type already exists
2102=Trong '{0}' \: '{1}', t\u00EAn\: '{2}' \u0111a\u0303 t\u00F4\u0300n ta\u0323i
# YMSG: return from vocabulary runtime plug in, in case parameter name isn't valid
2103=Trong '{0}' \: '{1}', t\u00EAn kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323\: '{2}'
# YMSG: return from vocabulary runtime plug in, in case one of action/output names aren't valid
2104=Trong '{0}', t\u00EAn kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323\: '{1}'
# YMSG: return from vocabulary runtime plug in, in case name already exists
2105=T\u00EAn '{0}' \u0111\u01B0\u01A1\u0323c xa\u0301c \u0111i\u0323nh nhi\u00EA\u0300u h\u01A1n m\u00F4\u0323t l\u00E2\u0300n trong '{1}'.
# YMSG : return from vocabulary runtime plug in, in case the output has no parameters
2106=Thi\u00EA\u0301u tham s\u00F4\u0301 \u01A1\u0309 ngo\u0303 ra
# YMSG: return from vocabulary runtime plug in, in case one of the attributes has an invalid name
2107=T\u00EAn thu\u00F4\u0323c ti\u0301nh kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 '{0}'
# YMSG: return from vocabulary runtime plug in, in case object name of declare more than once
2108={0}\: '{'1} \u0111a\u0303 t\u00F4\u0300n ta\u0323i. 
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2109=Thu\u00F4\u0323c ti\u0301nh \u0111a\u0303 t\u00F4\u0300n ta\u0323i\: \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng\= '{0}' thu\u00F4\u0323c ti\u0301nh\= '{1}'
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2110=Li\u00EAn k\u00EA\u0301t \u0111a\u0303 t\u00F4\u0300n ta\u0323i\: \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng\= '{0}' thu\u00F4\u0323c ti\u0301nh\= '{1}'
# YMSG : return from vocabulary runtime plug in, in case the source table isn't exists
2111=Ba\u0309ng ngu\u00F4\u0300n kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 '{0}'
# YMSG : return from vocabulary runtime plug in, in case of one the association is invalid
2112=Li\u00EAn k\u00EA\u0301t kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 trong \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng\='{0}' + li\u00EAn k\u00EA\u0301t\='{1}'
# YMSG : return from vocabulary runtime plug in, in case of one the association's attributes are invalid
2113=Thu\u00F4\u0323c ti\u0301nh kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 cho li\u00EAn k\u00EA\u0301t\= '{0}' + thu\u00F4\u0323c ti\u0301nh\= '{1}'
# YMSG: return from rule utils, in case of invalid vocabulary assignment
2114=T\u01B0\u0300 v\u01B0\u0323ng '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from vocabulary runtime plug in, in case invalid alias content
2115=N\u00F4\u0323i dung kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 trong bi\u0301 danh '{0}'. Ly\u0301 do\: '{1}'
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2116=T\u00EAn bi\u0301 danh '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn bi\u0301 danh chi\u0309 co\u0301 th\u00EA\u0309 ch\u01B0\u0301a ca\u0301c ky\u0301 t\u01B0\u0323 ga\u0323ch d\u01B0\u01A1\u0301i va\u0300 theo th\u01B0\u0301 t\u01B0\u0323 ch\u01B0\u0303 ca\u0301i, t\u00EAn bi\u0301 danh pha\u0309i b\u0103\u0301t \u0111\u00E2\u0300u b\u0103\u0300ng ch\u01B0\u0303 ca\u0301i va\u0300 no\u0301 kh\u00F4ng th\u00EA\u0309 la\u0300 t\u01B0\u0300 da\u0300nh ri\u00EAng t\u01B0\u0300 ng\u00F4n ng\u01B0\u0303 bi\u00EA\u0309u th\u01B0\u0301c quy t\u0103\u0301c.
# YMSG: return from vocabulary runtime plug in, in case alias name collide with an data object name
2117=T\u00EAn kg h\u01A1\u0323p l\u00EA\u0323 cho bi\u0301 danh '{0}'. Bi\u0301 danh \u0111a\u0303 t\u00F4\u0300n ta\u0323i d\u01B0\u01A1\u0301i da\u0323ng t\u00EAn \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u.
# YMSG: return from vocabulary runtime plug in, in case o alias dependency to itself
2118=N\u00F4\u0323i dung kg h\u01A1\u0323p l\u00EA\u0323 trong bi\u0301 danh '{0}'. Gia\u0309i quy\u00EA\u0301t bi\u0301 danh se\u0303 ta\u0323o vo\u0300ng l\u0103\u0323p kg x.\u0111i\u0323nh.
# YMSG: return from vocabulary runtime plug in, when name already exists in another vocabulary in the DB. Example: In 'dataObjects', name 'player' already exists in 'aliases' vocabulary 'voca2'
2120=Trong '{0}', t\u00EAn '{1}' \u0111a\u0303 t\u00F4\u0300n ta\u0323i trong '{2}' \u01A1\u0309 ph\u00E2\u0300n t\u01B0\u0300 v\u01B0\u0323ng '{3}'.
# YMSG: return from vocabulary runtime plug in, scope name can't be Public or Private
2121=T\u00EAn pha\u0323m vi kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn pha\u0323m vi kh\u00F4ng th\u00EA\u0309 la\u0300 t\u00EAn 'Chung' hay 'Ri\u00EAng'.
# YMSG: return from vocabulary runtime plug in, embedded vocabulary can't be with scope Global
2122=Loa\u0323i pha\u0323m vi kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u01B0\u0300 v\u01B0\u0323ng \u0111a\u0303 nhu\u0301ng kh\u00F4ng th\u00EA\u0309 thu\u00F4\u0323c loa\u0323i 'Toa\u0300n cu\u0323c'.
# YMSG: Object does not exist
2125=\u0110\u00F4\u0301i t\u01B0\u01A1\u0323ng '{0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i
# YMSG: return from vocabulary runtime plug in, in case of a wrong data object name 
2126=T\u00EAn kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 cho \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{0}'. T\u00EAn \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u kh\u00F4ng th\u00EA\u0309 la\u0300 t\u00EAn m\u00E2\u0303u quy t\u0103\u0301c hi\u00EA\u0323n co\u0301 ho\u0103\u0323c m\u00F4\u0323t trong ca\u0301c t\u01B0\u0300 da\u0300nh ri\u00EAng sau \u0111\u00E2y (chi\u0309 ph\u00E2n bi\u00EA\u0323t da\u0323ng ch\u01B0\u0303)\: quy t\u0103\u0301c, m\u00E2\u0303u quy t\u0103\u0301c
# YMSG: return from vocabulary runtime plug in, in case of a wrong alias name
2127=T\u00EAn bi\u0301 danh '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn bi\u0301 danh kh\u00F4ng th\u00EA\u0309 la\u0300 t\u00EAn m\u00E2\u0303u quy t\u0103\u0301c hi\u00EA\u0323n co\u0301 ho\u0103\u0323c m\u00F4\u0323t trong ca\u0301c t\u01B0\u0300 da\u0300nh ri\u00EAng sau \u0111\u00E2y (chi\u0309 ph\u00E2n bi\u00EA\u0323t da\u0323ng ch\u01B0\u0303)\: quy t\u0103\u0301c, m\u00E2\u0303u quy t\u0103\u0301c
# YMSG: return from vocabulary runtime plug in, in case invalid data object name
2128=T\u00EAn kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 cho \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{0}'. T\u00EAn \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u chi\u0309 co\u0301 th\u00EA\u0309 ch\u01B0\u0301a ca\u0301c ky\u0301 t\u01B0\u0323 ga\u0323ch d\u01B0\u01A1\u0301i va\u0300 theo th\u01B0\u0301 t\u01B0\u0323 ch\u01B0\u0303 ca\u0301i, t\u00EAn pha\u0309i b\u0103\u0301t \u0111\u00E2\u0300u b\u0103\u0300ng ch\u01B0\u0303 ca\u0301i, va\u0300 no\u0301 kh\u00F4ng th\u00EA\u0309 la\u0300 t\u01B0\u0300 da\u0300nh ri\u00EAng t\u01B0\u0300 ng\u00F4n ng\u01B0\u0303 bi\u00EA\u0309u th\u01B0\u0301c quy t\u0103\u0301c.
# YMSG: return from vocabulary runtime plug in, in case of duplicate alias names
2129=Bi\u0301 danh '{0}' \u0111a\u0303 t\u00F4\u0300n ta\u0323i la\u0300 t\u00EAn bi\u0301 danh.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2130=Tham s\u00F4\u0301 n\u00F4\u0323i dung trong bi\u0301 danh '{0}' tr\u00F4\u0301ng.
# YMSG: return from vocabulary runtime plug in, in case alias name exists as as an attribute name
2131=T\u00EAn bi\u0301 danh '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. Bi\u0301 danh \u0111a\u0303 t\u00F4\u0300n ta\u0323i d\u01B0\u01A1\u0301i da\u0323ng t\u00EAn thu\u00F4\u0323c ti\u0301nh.
# YMSG: return from vocabulary runtime plug in, in case alias name exists in other vocabulary with the same scope
2132=T\u00EAn bi\u0301 danh '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn \u0111a\u0303 t\u00F4\u0300n ta\u0323i d\u01B0\u01A1\u0301i da\u0323ng thu\u00F4\u0323c ti\u0301nh cho \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng '{1}' \u01A1\u0309 ph\u00E2\u0300n t\u01B0\u0300 v\u01B0\u0323ng'{2}'.
# YMSG: return from vocabulary runtime plug in, in case alias name exists in objects rule or ruleTemplate
2133=T\u00EAn bi\u0301 danh '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn \u0111a\u0303 t\u00F4\u0300n ta\u0323i trong \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng '{1}'.
# YMSG: return from vocabulary runtime plug in, in case attribute name already exists as alias in other vocabulary
2134=T\u00EAn kg h\u01A1\u0323p l\u00EA\u0323 cho t.ti\u0301nh '{0}'. T\u00EAn \u0111a\u0303 t.ta\u0323i d\u01B0\u01A1\u0301i da\u0323ng bi\u0301 danh \u01A1\u0309 ph\u00E2\u0300n t\u01B0\u0300 v\u01B0\u0323ng '{1}'.
# YMSG: return from vocabulary runtime plug in, in case vocabulary declares it depends on a vocabulary which doesn't exists
2135=T\u01B0\u0300 v\u01B0\u0323ng xa\u0301c \u0111i\u0323nh s\u01B0\u0323 phu\u0323 thu\u00F4\u0323c tr\u00EAn t\u01B0\u0300 v\u01B0\u0323ng '{0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i.
# YMSG: return from vocabulary runtime plug in, in case implementor declare global vocabulary with dependencies
2136=T\u01B0\u0300 v\u01B0\u0323ng toa\u0300n cu\u0323c kh\u00F4ng th\u00EA\u0309 ch\u01B0\u0301a phu\u0323 thu\u00F4\u0323c cho t\u01B0\u0300 v\u01B0\u0323ng kha\u0301c.
# YMSG: return from vocabulary runtime plug in, in case, in the same data object, there is association and attribute with the same name
2137=Trong \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{0}', t\u00EAn '{1}' \u0111\u01B0\u01A1\u0323c s\u01B0\u0309 du\u0323ng cho li\u00EAn k\u00EA\u0301t va\u0300 thu\u00F4\u0323c ti\u0301nh. Kh\u00F4ng th\u00EA\u0309 s\u01B0\u0309 du\u0323ng cu\u0300ng t\u00EAn cho ca\u0309 hai thu\u00F4\u0323c ti\u0301nh.
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2138=T\u00EAn danh sa\u0301ch gia\u0301 tri\u0323 '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn danh sa\u0301ch gia\u0301 tri\u0323 chi\u0309 co\u0301 th\u00EA\u0309 ch\u01B0\u0301a ca\u0301c ky\u0301 t\u01B0\u0323 ga\u0323ch d\u01B0\u01A1\u0301i va\u0300 theo th\u01B0\u0301 t\u01B0\u0323 ch\u01B0\u0303 ca\u0301i, t\u00EAn na\u0300y pha\u0309i b\u0103\u0301t \u0111\u00E2\u0300u b\u0103\u0300ng ch\u01B0\u0303 ca\u0301i, va\u0300 no\u0301 kh\u00F4ng th\u00EA\u0309 la\u0300 t\u01B0\u0300 da\u0300nh ri\u00EAng t\u01B0\u0300 ng\u00F4n ng\u01B0\u0303 bi\u00EA\u0309u th\u01B0\u0301c quy t\u0103\u0301c.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2139=N\u00F4\u0323i dung danh sa\u0301ch gia\u0301 tri\u0323 '{0}' tr\u00F4\u0301ng.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2140=Danh sa\u0301ch gia\u0301 tri\u0323 '{0}' \u0111c xa\u0301c \u0111i\u0323nh trong '{1}' \u01A1\u0309 \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{2}' kg t\u00F4\u0300n ta\u0323i.
# YMSG: return from vocabulary runtime plug in, in case parameter size isn't valid
2141=Trong '{'0}, ki\u0301ch c\u01A1\u0303 ({1}) cu\u0309a tham s\u00F4\u0301 '{'2} trong '{'3} la\u0300 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 cho ki\u00EA\u0309u d\u01B0\u0303 li\u00EA\u0323u \u0111a\u0303 \u0111i\u0323nh ro\u0303.
# YMSG: return from vocabulary - in case parameter content cannot be a collection 
2142=Xa\u0301c \u0111i\u0323nh tham s\u00F4\u0301 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 cho ha\u0300nh \u0111\u00F4\u0323ng '{0}' trong tham s\u00F4\u0301 ha\u0300nh \u0111\u00F4\u0323ng '{1}'. Tham s\u00F4\u0301 cu\u0309a t\u00E2\u0323p h\u01A1\u0323p ki\u00EA\u0309u kh\u00F4ng \u0111\u01B0\u01A1\u0323c cho phe\u0301p trong ha\u0300nh \u0111\u00F4\u0323ng.                                                                                                                                                                   .




# 2300 - 2499 rule template messages

# YMSG: return from Rule Template runtime plug in, in case of rule template name starts with a number
2300=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t ho\u0103\u0323c ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c; kh\u00F4ng th\u00EA\u0309 b\u0103\u0301t \u0111\u00E2\u0300u t\u00EAn m\u00E2\u0303u quy t\u0103\u0301c b\u0103\u0300ng s\u00F4\u0301
# YMSG: return from Rule Template runtime plug in, in case of illegal change in rule template attributes
2301=Ki\u0301ch hoa\u0323t m\u00E2\u0303u quy t\u0103\u0301c co\u0301 ch\u01B0\u0301a thay \u0111\u00F4\u0309i kh\u00F4ng t\u01B0\u01A1ng thi\u0301ch;
# YMSG: return from Rule Template runtime plug in, in case of rule template update contains condition change
2302=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t ho\u0103\u0323c ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c; kh\u00F4ng th\u00EA\u0309 thay \u0111\u00F4\u0309i \u0111i\u00EA\u0300u ki\u00EA\u0323n m\u00E2\u0303u quy t\u0103\u0301c
# YMSG: return from Rule Template runtime plug in, in case of rule template contains invalid condition 
2303=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t ho\u0103\u0323c ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c; \u0111i\u00EA\u0300u ki\u00EA\u0323n '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from Rule Template runtime plug in, in case of rule template deletion when there are rules assigned to the rule template  
2304=Kh\u00F4ng th\u00EA\u0309 xo\u0301a m\u00E2\u0303u quy t\u0103\u0301c {0}. Co\u0301 ca\u0301c quy t\u0103\u0301c cho m\u00E2\u0303u quy t\u0103\u0301c na\u0300y;
# YMSG: return from Rule Template runtime plug in, in case of duplicate rule template name  
2305=Kh\u00F4ng th\u00EA\u0309 ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c; m\u00E2\u0303u quy t\u0103\u0301c '{0}' \u0111a\u0303 t\u00F4\u0300n ta\u0323i trong go\u0301i '{1}'
# YMSG: return from Rule Template runtime plug in, in case that rule template name starts with a number  
2306=T\u00EAn m\u00E2\u0303u quy t\u0103\u0301c - '{0}' kh\u00F4ng th\u00EA\u0309 b\u0103\u0301t \u0111\u00E2\u0300u b\u0103\u0300ng s\u00F4\u0301;
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as data object  
2307=Kh\u00F4ng th\u00EA\u0309 ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c '{0}'. T\u00EAn m\u00E2\u0303u quy t\u0103\u0301c \u0111a\u0303 \u0111\u01B0\u01A1\u0323c s\u01B0\u0300 du\u0323ng la\u0300m \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u trong t\u01B0\u0300 v\u01B0\u0323ng '{1}'.
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as alias
2308=Kh\u00F4ng th\u00EA\u0309 ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c '{0}'. T\u00EAn m\u00E2\u0303u quy t\u0103\u0301c \u0111a\u0303 \u0111\u01B0\u01A1\u0323c s\u01B0\u0309 du\u0323ng la\u0300m bi\u0301 danh trong t\u01B0\u0300 v\u01B0\u0323ng '{1}'.


# 2500 - 2699 - rule messages

# YMSG: return from Rule runtime plug in, in case of resource contains additional attributes but not assigned to rule template   
2500=Kh\u00F4ng th\u00EA\u0309 ta\u0323o quy t\u0103\u0301c; thu\u00F4\u0323c ti\u0301nh b\u00F4\u0309 sung \u0111\u01B0\u01A1\u0323c nh\u00E2\u0323p du\u0300 quy t\u0103\u0301c kh\u00F4ng d\u01B0\u0323a tr\u00EAn m\u00E2\u0303u.
# YMSG: return from Rule runtime plug in, in case of rule template assignment change   
2501=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; kh\u00F4ng th\u00EA\u0309 thay \u0111\u00F4\u0309i ga\u0301n m\u00E2\u0303u quy t\u0103\u0301c m\u00F4\u0323t khi quy t\u0103\u0301c \u0111\u01B0\u01A1\u0323c ta\u0323o.
# YMSG: return from Rule runtime plug in, in case of vocabulary change  
2502=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; kh\u00F4ng th\u00EA\u0309 thay \u0111\u00F4\u0309i ga\u0301n t\u01B0\u0300 v\u01B0\u0323ng m\u00F4\u0323t khi quy t\u0103\u0301c \u0111\u01B0\u01A1\u0323c ta\u0323o.
# YMSG: return from Rule runtime plug in, in case of output change   
2503=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; kh\u00F4ng th\u00EA\u0309 thay \u0111\u00F4\u0309i ga\u0301n \u0111\u00E2\u0300u ra m\u00F4\u0323t khi quy t\u0103\u0301c \u0111\u01B0\u01A1\u0323c ta\u0323o.
# YMSG: return from Rule runtime plug in, in case of rule contains additional attributes where assigned rule template does not contains additional attributes
2504=Kh\u00F4ng th\u00EA\u0309 ta\u0323o quy t\u0103\u0301c; thu\u00F4\u0323c ti\u0301nh b\u00F4\u0309 sung \u0111\u01B0\u01A1\u0323c nh\u00E2\u0323p kh\u00F4ng thu\u00F4\u0323c v\u00EA\u0300 m\u00E2\u0303u quy t\u0103\u0301c \u0111a\u0303 ga\u0301n.
# YMSG: return from Rule runtime plug in, in case of execution context change
2505=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; kg th\u00EA\u0309 thay \u0111\u00F4\u0309i ga\u0301n ng\u01B0\u0303 ca\u0309nh th\u01B0\u0323c hi\u00EA\u0323n m\u00F4\u0323t khi quy t\u0103\u0301c \u0111c ta\u0323o.
# YMSG: return from Rule runtime plug in, in case of invalid rule template assignment
2506=M\u00E2\u0303u quy t\u0103\u0301c '{0}' kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323;
# YMSG: return from Rule runtime plug in, in case of invalid status transition
2507=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; ba\u0323n kh\u00F4ng th\u00EA\u0309 thay \u0111\u00F4\u0309i t\u01B0\u0300 tra\u0323ng tha\u0301i '{0}' \u0111\u00EA\u0301n '{1}'.
# YMSG: return from Rule runtime plug in, in case of updating single consumption to non single consumption Rule
2510=Kh\u00F4ng \u0111\u01B0\u01A1\u0323c phe\u0301p loa\u0323i bo\u0309 di\u0323ch vu\u0323 \u0111a\u0303 nhu\u0301ng.
# YMSG: return from Rule runtime plug in, in case of updating single embedded service in Rule
2511=Kh\u00F4ng \u0111\u01B0\u01A1\u0323c phe\u0301p loa\u0323i bo\u0309 ho\u0103\u0323c thay \u0111\u00F4\u0309i di\u0323ch vu\u0323 \u0111a\u0303 nhu\u0301ng.
# YMSG: return from Rule runtime plug in, in case of more than one embedded services with the same name
2512=T\u00EAn di\u0323ch vu\u0323 \u0111a\u0303 nhu\u0301ng - '{0}', t\u00F4\u0300n ta\u0323i nhi\u00EA\u0300u h\u01A1n m\u00F4\u0323t l\u00E2\u0300n.
# YMSG: return from Rule runtime plug in - update/create, in case the rule body is not valid
2513=Kh\u00F4ng th\u00EA\u0309 ta\u0323o ho\u0103\u0323c c\u00E2\u0323p nh\u00E2\u0323t quy t\u0103\u0301c; ph\u00E2\u0300n th\u00E2n quy t\u0103\u0301c kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323.
# YMSG: return from Rule body validator - in case parameter is referenced to an unknown action
2514=Xa\u0301c \u0111i\u0323nh tham s\u00F4\u0301 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. Tham s\u00F4\u0301 tham chi\u00EA\u0301u ha\u0300nh \u0111\u00F4\u0323ng '{0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i trong t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Rule body validator - in case parameter name isn't a valid parameter for action
2515=Xa\u0301c \u0111i\u0323nh t.s\u00F4\u0301 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. T\u00EAn t.s\u00F4\u0301 '{0}' kg t.ta\u0323i cho ha\u0300nh \u0111\u00F4\u0323ng '{1}' trong t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Rule body validator - in case action doesn't exist in the vocabulary
2516=Ha\u0300nh \u0111\u00F4\u0323ng '{0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i trong t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Rule body validator - when the sent parameter isn't a required parameter in the sent output 
2517=Xa\u0301c \u0111i\u0323nh tham s\u00F4\u0301 kg h\u01A1\u0323p l\u00EA\u0323. T\u00EAn tham s\u00F4\u0301 '{0}' kg t.ta\u0323i cho ngo\u0303 ra '{1}' trong t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Rule body validator - when the sent output doesn't exists in the vocabulary
2518=Ngo\u0303 ra {0}' kh\u00F4ng t\u00F4\u0300n ta\u0323i trong t\u01B0\u0300 v\u01B0\u0323ng.
# YMSG: return from Rule body validator - when alias has more than one output parameter column
2519=Bi\u0301 danh co\u0301 h\u01A1n m\u00F4\u0323t tham s\u00F4\u0301 xu\u00E2\u0301t.
# YMSG: return from Rule body validator - when the alias output parameters values do not have the same type X
2520=T\u00E2\u0301t ca\u0309 gia\u0301 tri\u0323 tham s\u00F4\u0301 xu\u00E2\u0301t '{0}' pha\u0309i thu\u00F4\u0323c cu\u0300ng ki\u00EA\u0309u.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that does not exist.
2521=Kh\u00F4ng th\u00EA\u0309 ga\u0301n quy t\u0103\u0301c '{0}' cho di\u0323ch vu\u0323 quy t\u0103\u0301c '{1}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c kh\u00F4ng t\u00F4\u0300n ta\u0323i.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different vocabulary.
2522=Kh\u00F4ng th\u00EA\u0309 ga\u0301n quy t\u0103\u0301c '{0}' cho di\u0323ch vu\u0323 quy t\u0103\u0301c '{1}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c va\u0300 quy t\u0103\u0301c pha\u0309i co\u0301 cu\u0300ng t\u01B0\u0300 v\u01B0\u0323ng \u0111a\u0303 xa\u0301c \u0111i\u0323nh.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different output.
2523=Kh\u00F4ng th\u00EA\u0309 ga\u0301n quy t\u0103\u0301c '{0}' cho di\u0323ch vu\u0323 quy t\u0103\u0301c '{1}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c va\u0300 quy t\u0103\u0301c pha\u0309i co\u0301 cu\u0300ng \u0111\u00E2\u0300u ra \u0111\u01B0\u01A1\u0323c xa\u0301c \u0111i\u0323nh.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that is not indicated as manually assigned.
2524=Kh\u00F4ng th\u00EA\u0309 ga\u0301n quy t\u0103\u0301c '{0}' cho di\u0323ch vu\u0323 quy t\u0103\u0301c '{1}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c \u0111\u01B0\u01A1\u0323c thi\u00EA\u0301t l\u00E2\u0323p cho ga\u0301n quy t\u0103\u0301c t\u01B0\u0323 \u0111\u00F4\u0323ng va\u0300 vi\u0300 th\u00EA\u0301 kh\u00F4ng cho phe\u0301p ga\u0301n thu\u0309 c\u00F4ng.
# YMSG: return from Rule runtime plug in - update/create, in case a custom condition is not valid
2525=Quy t\u0103\u0301c kh\u00F4ng th\u00EA\u0309 \u0111\u01B0\u01A1\u0323c ta\u0323o ho\u0103\u0323c c\u00E2\u0323p nh\u00E2\u0323t; '{0}' kh\u00F4ng la\u0300 \u0111i\u00EA\u0300u ki\u00EA\u0323n h\u01A1\u0323p l\u00EA\u0323.
# YMSG: return from Rule body validator - when ruleBody of type ruleSet has more than one condition column
2526=B\u00F4\u0323 quy t\u0103\u0301c kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323. Quy t\u0103\u0301c trong b\u00F4\u0323 quy t\u0103\u0301c co\u0301 nhi\u00EA\u0300u h\u01A1n m\u00F4\u0323t \u0111i\u00EA\u0300u ki\u00EA\u0323n.


# 2700 - 2899 - rule service messages

# YMSG: return from Rule service plug in, in case of wrong data object filter
2700=L\u00F4\u0303i trong b\u00F4\u0323 lo\u0323c di\u0323ch vu\u0323 quy t\u0103\u0301c
# YMSG: return from Rule service plug in, in case of different data objects in execution context and filter
2701=\u0110\u00F4\u0301i t\u01B0\u01A1\u0323ng DL - '{0}' trong ng\u01B0\u0303 ca\u0309nh th\u01B0\u0323c hi\u00EA\u0323n kha\u0301c v\u01A1\u0301i \u0111.t\u01B0\u01A1\u0323ng DL - '{1}' trong b\u00F4\u0323 lo\u0323c
# YMSG: return from  runtime plug in, in case of specified data object does not have the specified attribute (e.g. data object keys in rule service definition).
2704=Kh\u00F4ng th\u00EA\u0309 c\u00E2\u0323p nh\u00E2\u0323t ho\u0103\u0323c ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c; \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u {0} cu\u0309a t\u01B0\u0300 v\u01B0\u0323ng {1} kh\u00F4ng ch\u01B0\u0301a thu\u00F4\u0323c ti\u0301nh {2}
# YMSG: return from runtime plug in, in case of parameter mapping path contains a collection
2705=Kh\u00F4ng cho phe\u0301p \u0111\u01B0\u01A1\u0300ng d\u00E2\u0303n co\u0301 t\u00E2\u0323p h\u01A1\u0323p. \u0110\u01B0\u01A1\u0300ng d\u00E2\u0303n\: {0};
# YMSG: return from runtime plug in, in case of data object mapping entry is not unique within an execution context .
2706=\u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u - {0} co\u0301 a\u0301nh xa\u0323 tru\u0300ng l\u0103\u0323p;
# YMSG: return from  runtime plug in, in case of parameter definition entry is not unique within an execution context .
2707=Kh\u00F4ng th\u00EA\u0309 ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c; tham s\u00F4\u0301 {0} bi\u0323 tru\u0300ng l\u0103\u0323p
# YMSG: return from  runtime plug in, in case of parameter mapping entry doesn't have a match parameter definition entry with in an execution context
2708=Kh\u00F4ng th\u00EA\u0309 ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c; tham s\u00F4\u0301 {0} kh\u00F4ng t\u00F4\u0300n ta\u0323i va\u0300 \u0111\u01B0\u01A1\u0323c li\u00EAn k\u00EA\u0301t v\u01A1\u0301i \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u
# YMSG: return from  runtime plug in, in case of ifentifiers in dataObject type parameter do not exist in data object from vocabulary
2709=Xa\u0301c \u0111i\u0323nh tham s\u00F4\u0301 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 trong di\u0323ch vu\u0323 quy t\u0103\u0301c '{0}'. Trong tham s\u00F4\u0301 '{1}', '{2}' kh\u00F4ng pha\u0309i la\u0300 thu\u00F4\u0323c ti\u0301nh h\u01A1\u0323p l\u00EA\u0323 cu\u0309a \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{3}' trong pha\u0323m vi t\u01B0\u0300 v\u01B0\u0323ng '{4}'.
# YMSG: return from runtime plug in, in case of data object definition entry is not unique within parameter definition if service.
2710=Xa\u0301c \u0111i\u0323nh tham s\u00F4\u0301 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 trong di\u0323ch vu\u0323 quy t\u0103\u0301c '{0}'. \u0110\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u '{1}' \u0111\u01B0\u01A1\u0323c tham chi\u00EA\u0301u b\u01A1\u0309i h\u01A1n m\u00F4\u0323t tham s\u00F4\u0301.
# YMSG: return from runtime plug in, only read-only rule services can be indicated to be created with result view
2711=Kh\u00F4ng th\u00EA\u0309 ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c '{0}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c co\u0301 ma\u0300n hi\u0300nh k\u00EA\u0301t qua\u0309 \u0111\u01B0\u01A1\u0323c hi\u00EA\u0309n thi\u0323 d\u01B0\u01A1\u0301i da\u0323ng chi\u0309 \u0111o\u0323c.
# YMSG: return from runtime plug in, only explicit output rule services can be indicated to be created with result view
2712=Kh\u00F4ng th\u00EA\u0309 ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c '{0}'. Di\u0323ch vu\u0323 quy t\u0103\u0301c co\u0301 ma\u0300n hi\u0300nh k\u00EA\u0301t qua\u0309 pha\u0309i co\u0301 ngo\u0303 ra ro\u0303 ra\u0300ng \u0111\u01B0\u01A1\u0323c xa\u0301c \u0111i\u0323nh.
# YMSG: returned from request handler. Rule requested to be removed from rule service but the rule is not assigned to it
2713=Kh\u00F4ng th\u00EA\u0309 loa\u0323i bo\u0309 ga\u0301n quy t\u0103\u0301c. Quy t\u0103\u0301c '{0}' kh\u00F4ng \u0111\u01B0\u01A1\u0323c ga\u0301n cho di\u0323ch vu\u0323 quy t\u0103\u0301c.
# YMSG: return from  runtime plug in, in case of output contains collection parameter in event mode scenario
2714=Kh\u00F4ng th\u00EA\u0309 ta\u0323o di\u0323ch vu\u0323 quy t\u0103\u0301c '{0}'. Ba\u0323n kh\u00F4ng th\u00EA\u0309 xa\u0301c \u0111i\u0323nh \u0111\u00E2\u0300u ra v\u01A1\u0301i tham s\u00F4\u0301 cu\u0309a t\u00E2\u0323p h\u01A1\u0323p ki\u00EA\u0309u cho di\u0323ch vu\u0323 quy t\u0103\u0301c kh\u00F4ng co\u0301 \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u \u0111\u01B0\u01A1\u0323c xa\u0301c \u0111i\u0323nh trong ng\u01B0\u0303 ca\u0309nh th\u01B0\u0323c hi\u00EA\u0323n cu\u0309a no\u0301.
# 2900 - 2949 - post activation / completeActivation

# 2950 - 2999 - common resource CRUD


# YMSG: return from Request Handler, in case of url parameter that isn't valid
2955=tham s\u00F4\u0301 url\: {0} kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from Request Handler, in case of unsupported request mode
2956=Ch\u00EA\u0301 \u0111\u00F4\u0323 \#{0} kh\u00F4ng \u0111\u01B0\u01A1\u0323c h\u00F4\u0303 tr\u01A1\u0323
# YMSG: return from Request Handler, in case of unsupported metadata
2957=D\u01B0\u0303 li\u00EA\u0323u m\u00F4 ta\u0309 kh\u00F4ng \u0111\u01B0\u01A1\u0323c h\u00F4\u0303 tr\u01A1\u0323
# YMSG: return from Request Handler, in case of unsupported metadata for method
2958=L\u00E2\u0301y d\u01B0\u0303 li\u00EA\u0323u m\u00F4 ta\u0309 chi\u0309 h\u01A1\u0323p l\u00EA\u0323 v\u01A1\u0301i ph\u01B0\u01A1ng pha\u0301p y\u00EAu c\u00E2\u0300u GET


# YMSG: returned when wrong query is generated (during procedure generation). 2 causes: Bug in process or there is no mapping from vocabulary to real table / column
2970=L\u00F4\u0303i trong ta\u0323o truy v\u00E2\u0301n ho\u0103\u0323c a\u0301nh xa\u0323 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: returned if for some reason the parser returned undefined parse model. Can be bad rule syntax or a bug
2971=M\u00F4 hi\u0300nh ph\u00E2n ti\u0301ch cu\u0301 pha\u0301p kh\u00F4ng \u0111\u01B0\u01A1\u0323c xa\u0301c \u0111i\u0323nh
# YMSG: query generation needs either leading object and at least one key or a mapping to parameters. The error is returned if something is missing 
2972=K\u00EA\u0301t h\u01A1\u0323p \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u00E2\u0303n \u0111\u00E2\u0300u, kho\u0301a va\u0300 a\u0301nh xa\u0323 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: returned when there is no association between 2 objects in vocabulary
2973=Li\u00EAn k\u00EA\u0301t kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323 - kh\u00F4ng co\u0301 thu\u00F4\u0323c ti\u0301nh
# YMSG: returned when there is a use of attribute based on predictive model but the procedure for the predictive model is not defined
2974=Kh\u00F4ng ti\u0300m th\u00E2\u0301y quy tri\u0300nh m\u00F4-\u0111un d\u01B0\u0323 \u0111oa\u0301n {0}
# YMSG: outputs tanle type is mandatory. error when missing 
2975=D\u01B0\u0303 li\u00EA\u0323u k\u00EA\u0301t qua\u0309 kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: error when is out name is missing in vocabulary output names 
2976=T\u00EAn ngo\u0303 ra kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: error when rule body type is different from text or decisionTable 
2977=ki\u00EA\u0309u ph\u00E2\u0300n th\u00E2n quy t\u0103\u0301c kh\u00F4ng h\u01A1\u0323p l\u00EA\u0323
# YMSG: return from Runtime plugins, in case of unsupported change mode
2978=Ch\u00EA\u0301 \u0111\u00F4\u0323 thay \u0111\u00F4\u0309i '{0}' kh\u00F4ng \u0111\u01B0\u01A1\u0323c h\u00F4\u0303 tr\u01A1\u0323 cho ngu\u00F4\u0300n
# YMSG: return from Runtime plugin - generate, for informing on the change mode for current resource
2979=Ta\u0323o ngu\u00F4\u0300n, \u01A1\u0309 ch\u00EA\u0301 \u0111\u00F4\u0323 thay \u0111\u00F4\u0309i\: '{0}'
# YMSG: return when expression  
2980=L\u00F4\u0303i trong bi\u00EA\u0309u th\u01B0\u0301c ph\u00E2n ti\u0301ch cu\u0301 pha\u0301p\: \: '{0}'
# YMSG: return when expression  
2981=Kh\u00F4ng th\u00EA\u0309 ta\u0323o m\u00E2\u0303u quy t\u0103\u0301c '{0}'. T\u00EAn \u0111a\u0303 \u0111\u01B0\u01A1\u0323c s\u01B0\u0309 du\u0323ng b\u01A1\u0309i m\u00F4\u0323t trong ca\u0301c \u0111\u00F4\u0301i t\u01B0\u01A1\u0323ng d\u01B0\u0303 li\u00EA\u0323u trong t\u01B0\u0300 v\u01B0\u0323ng '{1}'.



#############################
# API: Get params
#############################

# 3100 - 3999 - get params messages

# YMSG: return from  ruleBodyAnalyzer, in case of businessRule.type is not text
3100=Ki\u00EA\u0309u quy t\u0103\u0301c kinh doanh pha\u0309i la\u0300 v\u0103n ba\u0309n
# YMSG: return from  ruleBodyAnalyzer, in case of Vocabulary is missing
3101=Thi\u00EA\u0301u t\u01B0\u0300 v\u01B0\u0323ng

#############################/
# API: Rule service consumption
#############################/
# 4100 - 4999 messages

# YMSG: return message in case the output is partial
4100={0} mu\u0323c \u0111\u01B0\u01A1\u0323c hi\u00EA\u0309n thi\u0323. Ghi chu\u0301\: \u0110\u00E2y chi\u0309 la\u0300 t\u00E2\u0323p h\u01A1\u0323p k\u00EA\u0301t qua\u0309 t\u01B0\u0300ng ph\u00E2\u0300n. N\u00EA\u0301u thi\u00EA\u0301t l\u00E2\u0323p c\u01A1\u0300 saveResult tha\u0300nh \u0110U\u0301NG, co\u0301 th\u00EA\u0309 ti\u0300m th\u00E2\u0301y toa\u0300n b\u00F4\u0323 t\u00E2\u0323p h\u01A1\u0323p k\u00EA\u0301t qua\u0309 trong '{'1}.ba\u0309ng k\u00EA\u0301t xu\u00E2\u0301t.

#############################/
# Halm and Installation
#############################/

# YMSG: Post Activation API success
10000=T\u00E2\u0323p l\u00EA\u0323nh c\u00E2\u0301u hi\u0300nh cho c\u01A1 c\u00E2\u0301u quy t\u0103\u0301c SAP HANA \u0111a\u0303 hoa\u0300n t\u00E2\u0301t tha\u0300nh c\u00F4ng.
# YMSG: Post Activation API failed
10001=L\u00F4\u0303i \u0111a\u0303 xa\u0309y ra trong t\u00E2\u0323p l\u00EA\u0323nh c\u00E2\u0301u hi\u0300nh c\u01A1 c\u00E2\u0301u quy t\u0103\u0301c SAP HANA. {0}
# YMSG: Post Activation API failed
10002=C\u00E2\u0301u hi\u0300nh \u0111a\u0303 t\u00F4\u0300n ta\u0323i cho \u01B0\u0301ng du\u0323ng web cu\u0309a c\u01A1 c\u00E2\u0301u quy t\u0103\u0301c SAP HANA \u0111a\u0303 \u0111\u01B0\u01A1\u0323c pha\u0301t hi\u00EA\u0323n. Vi\u0300 th\u00EA\u0301, thi\u00EA\u0301t l\u00E2\u0323p c\u00E2\u0301u hi\u0300nh m\u0103\u0323c \u0111i\u0323nh cho \u01B0\u0301ng du\u0323ng web kh\u00F4ng \u0111\u01B0\u01A1\u0323c cho phe\u0301p.
# YMSG: Post Activation API failed
10003=C\u00E2\u0301u hi\u0300nh \u01B0\u0301ng du\u0323ng web cho c\u01A1 c\u00E2\u0301u quy t\u0103\u0301c SAP HANA th\u00E2\u0301t ba\u0323i do l\u00F4\u0303i ky\u0303 thu\u00E2\u0323t. Ly\u0301 do\: {0}
# YMSG: Post Activation API failed
10004=Di\u0323ch vu\u0323 quy t\u0103\u0301c ho\u0103\u0323c quy t\u0103\u0301c co\u0301 di\u0323ch vu\u0323 nhu\u0301ng \u0111a\u0303 t\u00F4\u0300n ta\u0323i trong h\u00EA\u0323 th\u00F4\u0301ng r\u00F4\u0300i. Vi\u0300 th\u00EA\u0301 kh\u00F4ng \u0111\u01B0\u01A1\u0323c phe\u0301p c\u00E2\u0323p nh\u00E2\u0323t mu\u0301i gi\u01A1\u0300.
# YMSG: Post Activation API failed
10005=Di\u0323ch vu\u0323 quy t\u0103\u0301c ho\u0103\u0323c quy t\u0103\u0301c co\u0301 di\u0323ch vu\u0323 nhu\u0301ng \u0111a\u0303 t\u00F4\u0300n ta\u0323i trong h\u00EA\u0323 th\u00F4\u0301ng r\u00F4\u0300i. Vi\u0300 th\u00EA\u0301 kh\u00F4ng \u0111\u01B0\u01A1\u0323c phe\u0301p c\u00E2\u0323p nh\u00E2\u0323t bi\u00EA\u0309u \u0111\u00F4\u0300 th\u01A1\u0300i gian v\u00E2\u0323n ha\u0300nh.
