
# This file contains messages descriptions arranged in sections according to HRF APIs
# These descriptions are translated.
# Adding a new message requires also update of message.xsjslib file by the new ID

#############################
# common
#############################
# 10 - 999 - common messages

# YMSG: return from resource activation, in case of a resource does not exist in repository
10=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u8D44\u6E90\u4E0D\u5B58\u5728\u3002
# YMSG: return from resource activation, in case of a resource suffix is not one of HRF resources
11=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u4E0D\u652F\u6301\u540E\u7F00 '{0}'\u3002
# YMSG: return from resource activation, in case of a resource package does not exist in repository
12=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u5305 '{0}' \u4E0D\u5B58\u5728\u3002
# YMSG: return from runtime plug in, in case of invalid attribute
13=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u5C5E\u6027 '{0}' \u4E0D\u5728\u6A21\u5F0F\u4E2D\u3002
# YMSG: return from  runtime plug in, in case of invalid attribute
14=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u7F3A\u5C11\u5FC5\u9700\u5C5E\u6027\u503C '{0}'\u3002
# YMSG: return from  runtime plug in, in case none of a predefined set of fields is specified
15=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u81F3\u5C11\u7F3A\u5C11\u4E00\u4E2A\u53EF\u9009\u5C5E\u6027 {0}
# YMSG: return from  runtime plug in, in case of invalid field (e.g vocabulary doesn't exist)
16=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u5C5E\u6027 {0} \u7684\u503C\u65E0\u6548
# YMSG: return from runtime plug in, in case of inconsistent fields combination(e.g. vocabulary and output names doesn't match)
17=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B{0} \u548C {1} \u7684\u7EC4\u5408\u65E0\u6548
# YMSG: return from  runtime plug in, in case of invalid resource id (e.g. package / file name is missing)
23=\u65E0\u6CD5\u6FC0\u6D3B\u8D44\u6E90\uFF1B\u8D44\u6E90\u4E0D\u5B58\u5728
# YMSG: return from  runtime plug in, in case of error from REL validation
24=\u5B57\u6BB5 {0} \u4E2D\u5B58\u5728\u9519\u8BEF\uFF1A{1}
# YMSG: return from  REST service, in case of http request contains non supported method
25=\u65B9\u6CD5\u5931\u8D25\uFF1B\u4E0D\u652F\u6301\u65B9\u6CD5 \#{0}
# YMSG:  technical error from platform
26=\u51FA\u73B0\u6280\u672F\u9519\u8BEF - {0}
# YMSG: return from resource activation, in case of a resource does not exist in repository
27=\u8D44\u6E90\u4E0D\u5B58\u5728\u3002

# 100 - 200 - Authorization

# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
100=\u60A8\u65E0\u6743\u6267\u884C\u6B64\u64CD\u4F5C\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
101=\u60A8\u65E0\u6743\u66F4\u65B0\u89C4\u5219\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
102=\u60A8\u65E0\u6743\u5220\u9664\u89C4\u5219\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
103=\u60A8\u65E0\u6743\u521B\u5EFA\u89C4\u5219\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
104=\u60A8\u65E0\u6743\u8BFB\u53D6\u89C4\u5219\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
105=\u60A8\u65E0\u6743\u66F4\u65B0\u89C4\u5219\u670D\u52A1
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
106=\u60A8\u65E0\u6743\u5220\u9664\u89C4\u5219\u670D\u52A1\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
107=\u60A8\u65E0\u6743\u521B\u5EFA\u89C4\u5219\u670D\u52A1\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
108=\u60A8\u65E0\u6743\u8BFB\u53D6\u89C4\u5219\u670D\u52A1\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
109=\u60A8\u65E0\u6743\u8FD0\u884C\u89C4\u5219\u670D\u52A1\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
110=\u60A8\u65E0\u6743\u66F4\u65B0\u8BCD\u6C47\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
111=\u60A8\u65E0\u6743\u5220\u9664\u8BCD\u6C47\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
112=\u60A8\u65E0\u6743\u521B\u5EFA\u8BCD\u6C47\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
113=\u60A8\u65E0\u6743\u8BFB\u53D6\u8BCD\u6C47\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
114=\u60A8\u65E0\u6743\u66F4\u65B0\u89C4\u5219\u6A21\u677F\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
115=\u60A8\u65E0\u6743\u5220\u9664\u89C4\u5219\u6A21\u677F\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
116=\u60A8\u65E0\u6743\u521B\u5EFA\u89C4\u5219\u6A21\u677F\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
117=\u60A8\u65E0\u6743\u8BFB\u53D6\u89C4\u5219\u6A21\u677F\u3002
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
118=\u60A8\u65E0\u6743\u521B\u5EFA\u6216\u66F4\u65B0\u89C4\u5219\u670D\u52A1\u3002
# XMSG: in case of technical user either does not exist or is not configured correctly
119=SAP HANA rules framework \u7684\u6280\u672F\u7528\u6237\u4E0D\u5B58\u5728\u6216\u672A\u6B63\u786E\u914D\u7F6E\u3002 {0}

#############################
# API: Validate
#############################
# 1100 - 1199 - REL validation messages

# YMSG: return from REL, the beginning of any REL validation error - in case of a wrong statement 
1100=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF
# YMSG: return from REL parser, in case of a wrong entry (syntax) and maximum 3 option are optional instead 
1101=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u8F93\u5165 {0} \u4EE3\u66FF {1}
# YMSG: return from REL parser, in case of a wrong entry (syntax) and more than 3 option are optional instead  
1102=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B{0} \u4E0D\u662F\u6709\u6548\u6761\u76EE
# YMSG: return from REL parser, in case of a wrong input
1103=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u79FB\u9664 {0}
# YMSG: return from REL model, in case of collection OM when single value in needed
1104=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B{0} \u662F\u503C\u5217\u8868\u3002 \u66F4\u6539\u4E3A\u8868\u793A\u5355\u503C\u7684\u8868\u8FBE\u5F0F\u3002
# YMSG: return from REL model, in case of a wrong input
1105=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u8F93\u5165\u6709\u6548\u64CD\u4F5C\u6570\u4EE3\u66FF {0}
# YMSG: return from REL parser, in case of an incomplete expression
1106=\u8868\u8FBE\u5F0F\u4E0D\u5B8C\u6574
# YMSG: return from REL lexer, in case of missing token at EOF
1107=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u5728\u8868\u8FBE\u5F0F\u672B\u5C3E\u8F93\u5165 {0}
# YMSG: return from REL lexer, in case of wrong token
1108=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u8BF7\u8F93\u5165 '{0}' \u800C\u4E0D\u662F '{1}'
# YMSG: return from REL entity, in case of missing current
1109=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B'where' \u5B50\u53E5\u4E2D\u7F3A\u5C11 'current'
# YMSG: return from REL entity, in case of redundant 'current'
1110=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u6709\u591A\u4E2A 'current'\uFF1B\u8BF7\u79FB\u9664\u4E00\u4E2A 'current'
# YMSG: return from REL vocabulary utils, in case of invalid root object
1111=\u6839\u5BF9\u8C61\u65E0\u6548
# YMSG: return from REL vocabulary utils, in case of invalid association
1112=\u5173\u8054\u65E0\u6548
# YMSG: return from REL vocabulary utils, in case of invalid association or attribute
1113=\u5173\u8054\u6216\u5C5E\u6027\u65E0\u6548
# YMSG: return from REL vocabulary utils, in case of root is simple attribute
1114=\u6839\u4E0D\u80FD\u4E3A\u7B80\u5355\u5C5E\u6027
# YMSG: return from REL vocabulary utils, in case of attribute not found
1115=\u8DEF\u5F84\u4E0D\u5B8C\u6574\uFF0C\u672A\u627E\u5230\u5C5E\u6027
# YMSG: return from REL entity, in case of using 'current' outside of 'where'
1116=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u5173\u952E\u5B57 'current' \u53EA\u80FD\u7528\u4E8E 'where' \u5B50\u53E5\u4E2D\u3002
# YMSG: return from REL entity, in case of using 'current' incorrectly with arithmetic
1117=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1B\u5173\u952E\u5B57 'current' \u5FC5\u987B\u5E94\u7528\u4E8E 'where' \u5B50\u53E5\u4E2D\u6BD4\u8F83\u8FD0\u7B97\u7B26\u4E00\u4FA7\u7684\u6240\u6709\u64CD\u4F5C\u6570\u3002
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1118=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002\u503C\u5217\u8868 '{1}' \u4E2D\u7684 '{0}' \u4E0D\u662F\u6709\u6548\u503C\u3002
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1119=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002'{0}' \u8FD0\u7B97\u7B26\u4E0D\u80FD\u4E0E\u503C\u5217\u8868\u5C5E\u6027 ('{1}') \u4E00\u8D77\u4F7F\u7528\u3002
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1120=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002\u5173\u952E\u5B57 'all' \u4E0D\u80FD\u4F4D\u4E8E\u5305\u542B\u5173\u952E\u5B57 'current' \u7684\u64CD\u4F5C\u6570\u4E4B\u540E\u3002
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1121=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002\u5173\u952E\u5B57 'all' \u4E0D\u80FD\u5728\u540C\u4E00\u8BED\u53E5\u4E2D\u591A\u6B21\u4F7F\u7528\u3002
# YMSG: return from REL parser utils, in case of using 2 differemt root objects 
1122=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002 \u8868\u8FBE\u5F0F\u5305\u542B\u591A\u4E8E\u4E00\u4E2A\u6839\u6570\u636E\u5BF9\u8C61\uFF1A{0}\uFF0C{1}\u3002
# YMSG: return from REL parser, in case of a wrong entry (syntax date) 
1123=\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\u3002 \u8BF7\u4F7F\u7528\u5E94\u7528\u7A0B\u5E8F\u683C\u5F0F {1} \u800C\u975E {2} \u8F93\u5165 {0}\u3002
# YMSG: return from REL parser, in case of a wrong locale settings
1124={0} {1} \u4E0D\u53D7\u652F\u6301\u3002
# YMSG: return from REL parser utils, in case of using value that doen't exist in external value list
1125=\u8868\u8FBE\u5F0F\u5B58\u5728\u9519\u8BEF\u3002\u901A\u8FC7\u503C\u5E2E\u52A9\u8F93\u5165\u6709\u6548\u7684\u503C\u6765\u4EE3\u66FF '{0}'\u3002

# 1200 - 1999 - validation messages

#############################
# API : resource CRUD
#############################
# 2100 - 2299 - vocabulary messages

# YMSG: return from vocabulary runtime plug in, in case of error in expression
2100=\u5728 '{0}' \u4E2D - \u89E3\u6790\u8868\u8FBE\u5F0F\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1A'{1}'\uFF0C'{2}'
# YMSG: return from vocabulary runtime plug in, in case of error in rule
2101=\u5728 '{0}' \u4E2D - \u89C4\u5219\u4E2D\u5B58\u5728\u9519\u8BEF\uFF1A'{1}'\uFF0C'{2}'
# YMSG: return from vocabulary runtime plug in, in case the parameter type already exists
2102=\u5728 '{0}' \: '{1}' \u4E2D\uFF0C\u540D\u79F0 '{2}' \u5DF2\u5B58\u5728
# YMSG: return from vocabulary runtime plug in, in case parameter name isn't valid
2103=\u5728 '{0}' \: '{1}' \u4E2D\uFF0C\u4EE5\u4E0B\u540D\u79F0\u65E0\u6548\uFF1A'{2}'
# YMSG: return from vocabulary runtime plug in, in case one of action/output names aren't valid
2104=\u5728 '{0}' \u4E2D\uFF0C\u4EE5\u4E0B\u540D\u79F0\u65E0\u6548\uFF1A'{1}'
# YMSG: return from vocabulary runtime plug in, in case name already exists
2105=\u540D\u79F0 '{0}' \u5728 '{1}' \u4E2D\u5B9A\u4E49\u591A\u6B21\u3002
# YMSG : return from vocabulary runtime plug in, in case the output has no parameters
2106=\u8F93\u51FA\u4E2D\u7F3A\u5C11\u53C2\u6570
# YMSG: return from vocabulary runtime plug in, in case one of the attributes has an invalid name
2107=\u5C5E\u6027\u540D\u79F0 '{0}' \u65E0\u6548
# YMSG: return from vocabulary runtime plug in, in case object name of declare more than once
2108='{0}'\uFF1A'{1}' \u5DF2\u5B58\u5728\u3002
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2109=\u5C5E\u6027\u5DF2\u5B58\u5728\uFF1A\u5BF9\u8C61 \= '{0}'\uFF0C\u5C5E\u6027 \= '{1}'
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2110=\u5173\u8054\u5DF2\u5B58\u5728\uFF1A\u5BF9\u8C61 \= '{0}'\uFF0C\u5173\u8054 \= '{1}'
# YMSG : return from vocabulary runtime plug in, in case the source table isn't exists
2111=\u6E90\u8868 '{0}' \u65E0\u6548
# YMSG : return from vocabulary runtime plug in, in case of one the association is invalid
2112=\u5173\u8054\u65E0\u6548\uFF1A\u5BF9\u8C61 \= '{0}'\uFF0C\u5173\u8054 \= '{1}'
# YMSG : return from vocabulary runtime plug in, in case of one the association's attributes are invalid
2113=\u5C5E\u6027\u65E0\u6548\uFF1A\u5173\u8054 \= '{0}'\uFF0C\u5C5E\u6027 \= '{1}'
# YMSG: return from rule utils, in case of invalid vocabulary assignment
2114=\u8BCD\u6C47 '{0}' \u65E0\u6548
# YMSG: return from vocabulary runtime plug in, in case invalid alias content
2115=\u522B\u540D '{0}' \u4E2D\u5B58\u5728\u65E0\u6548\u5185\u5BB9\u3002\u539F\u56E0\uFF1A'{1}'
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2116=\u522B\u540D\u540D\u79F0 '{0}' \u65E0\u6548\u3002 \u522B\u540D\u540D\u79F0\u53EA\u80FD\u5305\u542B\u5B57\u6BCD\u6570\u5B57\u548C\u4E0B\u5212\u7EBF\u5B57\u7B26\uFF0C\u5FC5\u987B\u4EE5\u5B57\u6BCD\u5F00\u5934\uFF0C\u5E76\u4E14\u4E0D\u80FD\u662F\u89C4\u5219\u8868\u8FBE\u5F0F\u8BED\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case alias name collide with an data object name
2117=\u522B\u540D '{0}' \u7684\u540D\u79F0\u65E0\u6548\u3002\u8BE5\u522B\u540D\u5DF2\u7528\u4F5C\u6570\u636E\u5BF9\u8C61\u540D\u79F0\u3002
# YMSG: return from vocabulary runtime plug in, in case o alias dependency to itself
2118=\u522B\u540D '{0}' \u4E2D\u7684\u5185\u5BB9\u65E0\u6548\u3002\u89E3\u6790\u8BE5\u522B\u540D\u4F1A\u5BFC\u81F4\u65E0\u9650\u5FAA\u73AF\u3002
# YMSG: return from vocabulary runtime plug in, when name already exists in another vocabulary in the DB. Example: In 'dataObjects', name 'player' already exists in 'aliases' vocabulary 'voca2'
2120=\u5728 '{0}' \u4E2D\uFF0C'{2}' \u7684\u8BCD\u6C47 '{3}' \u4E2D\u5DF2\u5B58\u5728\u540D\u79F0 '{1}'\u3002
# YMSG: return from vocabulary runtime plug in, scope name can't be Public or Private
2121=\u8303\u56F4\u540D\u79F0\u65E0\u6548\u3002\u8303\u56F4\u540D\u79F0\u4E0D\u80FD\u4E3A\u201C\u516C\u5F00\u201D\u548C\u201C\u79C1\u6709\u201D\u3002
# YMSG: return from vocabulary runtime plug in, embedded vocabulary can't be with scope Global
2122=\u8303\u56F4\u7C7B\u578B\u65E0\u6548\u3002\u5D4C\u5165\u5F0F\u8BCD\u6C47\u4E0D\u80FD\u4E3A\u201C\u5168\u5C40\u201D\u7C7B\u578B\u3002
# YMSG: Object does not exist
2125=\u5BF9\u8C61 '{0}' \u4E0D\u5B58\u5728
# YMSG: return from vocabulary runtime plug in, in case of a wrong data object name 
2126=dataObject '{0}' \u7684\u540D\u79F0\u65E0\u6548\u3002dataObject \u540D\u79F0\u4E0D\u80FD\u662F\u73B0\u6709\u89C4\u5219\u6A21\u677F\u540D\u79F0\uFF0C\u4E5F\u4E0D\u80FD\u662F\u4EE5\u4E0B\u4FDD\u7559\u5B57\uFF08\u4EC5\u533A\u5206\u5927\u5C0F\u5199\uFF09\u4E4B\u4E00\uFF1Arule\u3001ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case of a wrong alias name
2127=\u522B\u540D\u540D\u79F0 '{0}' \u65E0\u6548\u3002 \u522B\u540D\u540D\u79F0\u4E0D\u80FD\u662F\u73B0\u6709\u89C4\u5219\u6A21\u677F\u540D\u79F0\uFF0C\u4E5F\u4E0D\u80FD\u662F\u4EE5\u4E0B\u4FDD\u7559\u5B57\uFF08\u4EC5\u533A\u5206\u5927\u5C0F\u5199\uFF09\u4E4B\u4E00\uFF1Arule\u3001ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case invalid data object name
2128=dataObject '{0}' \u7684\u540D\u79F0\u65E0\u6548\u3002dataObject \u540D\u79F0\u53EA\u80FD\u5305\u542B\u5B57\u6BCD\u6570\u5B57\u548C\u4E0B\u5212\u7EBF\u5B57\u7B26\uFF0C\u5FC5\u987B\u4EE5\u5B57\u6BCD\u5F00\u5934\uFF0C\u5E76\u4E14\u4E0D\u80FD\u662F\u89C4\u5219\u8868\u8FBE\u5F0F\u8BED\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case of duplicate alias names
2129=\u522B\u540D '{0}' \u5DF2\u7528\u4F5C\u522B\u540D\u540D\u79F0\u3002
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2130=\u522B\u540D '{0}' \u4E2D\u7684\u5185\u5BB9\u53C2\u6570\u4E3A\u7A7A\u3002
# YMSG: return from vocabulary runtime plug in, in case alias name exists as as an attribute name
2131=\u522B\u540D\u540D\u79F0 '{0}' \u65E0\u6548\u3002\u8BE5\u522B\u540D\u5DF2\u7528\u4F5C\u5C5E\u6027\u540D\u79F0\u3002
# YMSG: return from vocabulary runtime plug in, in case alias name exists in other vocabulary with the same scope
2132=\u522B\u540D\u540D\u79F0 '{0}' \u65E0\u6548\u3002\u8BE5\u540D\u79F0\u5DF2\u7528\u4F5C\u8BCD\u6C47 '{2}' \u4E2D\u5BF9\u8C61 '{1}' \u7684\u5C5E\u6027\u3002
# YMSG: return from vocabulary runtime plug in, in case alias name exists in objects rule or ruleTemplate
2133=\u522B\u540D\u540D\u79F0 '{0}' \u65E0\u6548\u3002\u5BF9\u8C61 '{1}' \u4E2D\u5DF2\u5B58\u5728\u8BE5\u540D\u79F0\u3002
# YMSG: return from vocabulary runtime plug in, in case attribute name already exists as alias in other vocabulary
2134=\u5C5E\u6027 '{0}' \u7684\u540D\u79F0\u65E0\u6548\u3002\u8BE5\u540D\u79F0\u5728\u8BCD\u6C47 '{1}' \u4E2D\u5DF2\u7528\u4F5C\u522B\u540D\u3002
# YMSG: return from vocabulary runtime plug in, in case vocabulary declares it depends on a vocabulary which doesn't exists
2135=\u8BCD\u6C47\u6307\u5B9A\u4E86\u4E0E\u4E0D\u5B58\u5728\u7684\u8BCD\u6C47 '{0}' \u7684\u76F8\u5173\u6027\u3002
# YMSG: return from vocabulary runtime plug in, in case implementor declare global vocabulary with dependencies
2136=\u5168\u5C40\u8BCD\u6C47\u4E0D\u80FD\u5305\u542B\u4E0E\u5176\u4ED6\u8BCD\u6C47\u7684\u76F8\u5173\u6027\u3002
# YMSG: return from vocabulary runtime plug in, in case, in the same data object, there is association and attribute with the same name
2137=\u5728\u6570\u636E\u5BF9\u8C61 '{0}' \u4E2D\uFF0C\u540D\u79F0 '{1}' \u7528\u4E8E\u5173\u8054\u548C\u5C5E\u6027\u3002\u4E0D\u80FD\u5BF9\u4E24\u4E2A\u5C5E\u6027\u4F7F\u7528\u76F8\u540C\u540D\u79F0\u3002
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2138=\u503C\u5217\u8868\u540D\u79F0 '{0}' \u65E0\u6548\u3002 \u503C\u5217\u8868\u540D\u79F0\u53EA\u80FD\u5305\u542B\u5B57\u6BCD\u6570\u5B57\u548C\u4E0B\u5212\u7EBF\u5B57\u7B26\uFF0C\u5FC5\u987B\u4EE5\u5B57\u6BCD\u5F00\u5934\uFF0C\u5E76\u4E14\u4E0D\u80FD\u662F\u89C4\u5219\u8868\u8FBE\u5F0F\u8BED\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2139=\u503C\u5217\u8868 '{0}' \u7684\u5185\u5BB9\u4E3A\u7A7A\u3002
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2140=\u6570\u636E\u5BF9\u8C61 '{2}' \u4E2D\u5C5E\u6027 '{1}' \u4E2D\u5B9A\u4E49\u7684\u503C\u5217\u8868 '{0}' \u4E0D\u5B58\u5728\u3002
# YMSG: return from vocabulary runtime plug in, in case parameter size isn't valid
2141=\u5728 '{'0} \u4E2D\uFF0C'{'3} \u5185\u53C2\u6570 '{'2} \u7684\u5927\u5C0F ({1}) \u5BF9\u4E8E\u6307\u5B9A\u7684\u6570\u636E\u7C7B\u578B\u65E0\u6548\u3002
# YMSG: return from vocabulary - in case parameter content cannot be a collection 
2142=\u64CD\u4F5C\u53C2\u6570 '{1}' \u4E2D\u64CD\u4F5C '{0}' \u7684\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002 \u64CD\u4F5C\u4E2D\u4E0D\u5141\u8BB8\u96C6\u5408\u7C7B\u578B\u7684\u53C2\u6570\u3002                                                                                                                                                                   .




# 2300 - 2499 rule template messages

# YMSG: return from Rule Template runtime plug in, in case of rule template name starts with a number
2300=\u65E0\u6CD5\u521B\u5EFA\u548C\u66F4\u65B0\u89C4\u5219\u6A21\u677F\uFF1B\u89C4\u5219\u6A21\u677F\u540D\u79F0\u4E0D\u80FD\u4EE5\u6570\u5B57\u5F00\u5934
# YMSG: return from Rule Template runtime plug in, in case of illegal change in rule template attributes
2301=\u201C\u89C4\u5219\u6A21\u677F\u6FC0\u6D3B\u201D\u5305\u542B\u4E0D\u517C\u5BB9\u66F4\u6539\uFF1B
# YMSG: return from Rule Template runtime plug in, in case of rule template update contains condition change
2302=\u65E0\u6CD5\u521B\u5EFA\u548C\u66F4\u65B0\u89C4\u5219\u6A21\u677F\uFF1B\u4E0D\u80FD\u66F4\u6539\u89C4\u5219\u6A21\u677F\u6761\u4EF6
# YMSG: return from Rule Template runtime plug in, in case of rule template contains invalid condition 
2303=\u65E0\u6CD5\u521B\u5EFA\u548C\u66F4\u65B0\u89C4\u5219\u6A21\u677F\uFF1B\u6761\u4EF6 '{0}' \u65E0\u6548
# YMSG: return from Rule Template runtime plug in, in case of rule template deletion when there are rules assigned to the rule template  
2304=\u65E0\u6CD5\u5220\u9664\u89C4\u5219\u6A21\u677F {0}\u3002\u6B64\u89C4\u5219\u6A21\u677F\u5B58\u5728\u89C4\u5219
# YMSG: return from Rule Template runtime plug in, in case of duplicate rule template name  
2305=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u6A21\u677F\uFF1B\u89C4\u5219\u6A21\u677F '{0}' \u5728\u5305 '{1}' \u4E2D\u5DF2\u5B58\u5728
# YMSG: return from Rule Template runtime plug in, in case that rule template name starts with a number  
2306=\u89C4\u5219\u6A21\u677F\u540D\u79F0 '{0}' \u4E0D\u80FD\u4EE5\u6570\u5B57\u5F00\u5934\uFF1B
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as data object  
2307=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u6A21\u677F '{0}'\u3002\u8BE5\u89C4\u5219\u6A21\u677F\u540D\u79F0\u5DF2\u5728\u8BCD\u6C47 '{1}' \u4E2D\u7528\u4F5C\u6570\u636E\u5BF9\u8C61\u3002
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as alias
2308=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u6A21\u677F '{0}'\u3002\u8BE5\u89C4\u5219\u6A21\u677F\u540D\u79F0\u5DF2\u5728\u8BCD\u6C47 '{1}' \u4E2D\u7528\u4F5C\u522B\u540D\u3002


# 2500 - 2699 - rule messages

# YMSG: return from Rule runtime plug in, in case of resource contains additional attributes but not assigned to rule template   
2500=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\uFF1B\u8F93\u5165\u4E86\u5176\u4ED6\u5C5E\u6027\uFF0C\u4F46\u89C4\u5219\u5E76\u975E\u57FA\u4E8E\u6A21\u677F\u3002
# YMSG: return from Rule runtime plug in, in case of rule template assignment change   
2501=\u65E0\u6CD5\u66F4\u65B0\u89C4\u5219\uFF1B\u89C4\u5219\u4E00\u65E6\u521B\u5EFA\uFF0C\u4FBF\u65E0\u6CD5\u66F4\u6539\u89C4\u5219\u6A21\u677F\u5206\u914D\u3002
# YMSG: return from Rule runtime plug in, in case of vocabulary change  
2502=\u65E0\u6CD5\u66F4\u65B0\u89C4\u5219\uFF1B\u89C4\u5219\u4E00\u65E6\u521B\u5EFA\uFF0C\u4FBF\u65E0\u6CD5\u66F4\u6539\u8BCD\u6C47\u5206\u914D\u3002
# YMSG: return from Rule runtime plug in, in case of output change   
2503=\u65E0\u6CD5\u66F4\u65B0\u89C4\u5219\uFF1B\u89C4\u5219\u4E00\u65E6\u521B\u5EFA\uFF0C\u4FBF\u65E0\u6CD5\u66F4\u6539\u8F93\u51FA\u5206\u914D\u3002
# YMSG: return from Rule runtime plug in, in case of rule contains additional attributes where assigned rule template does not contains additional attributes
2504=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\uFF1B\u8F93\u5165\u7684\u5176\u4ED6\u5C5E\u6027\u4E0D\u5728\u5206\u914D\u7684\u89C4\u5219\u6A21\u677F\u4E2D\u3002
# YMSG: return from Rule runtime plug in, in case of execution context change
2505=\u65E0\u6CD5\u66F4\u65B0\u89C4\u5219\uFF1B\u89C4\u5219\u4E00\u65E6\u521B\u5EFA\uFF0C\u4FBF\u65E0\u6CD5\u66F4\u6539\u6267\u884C\u4E0A\u4E0B\u6587\u5206\u914D\u3002
# YMSG: return from Rule runtime plug in, in case of invalid rule template assignment
2506=\u89C4\u5219\u6A21\u677F '{0}' \u65E0\u6548
# YMSG: return from Rule runtime plug in, in case of invalid status transition
2507=\u65E0\u6CD5\u66F4\u65B0\u89C4\u5219\uFF1B\u4E0D\u80FD\u4ECE\u72B6\u6001 '{0}' \u66F4\u6539\u4E3A '{1}'\u3002
# YMSG: return from Rule runtime plug in, in case of updating single consumption to non single consumption Rule
2510=\u4E0D\u5141\u8BB8\u79FB\u9664\u5D4C\u5165\u5F0F\u670D\u52A1\u3002
# YMSG: return from Rule runtime plug in, in case of updating single embedded service in Rule
2511=\u4E0D\u5141\u8BB8\u79FB\u9664\u6216\u66F4\u6539\u5D4C\u5165\u5F0F\u670D\u52A1\u3002
# YMSG: return from Rule runtime plug in, in case of more than one embedded services with the same name
2512=\u5D4C\u5165\u5F0F\u670D\u52A1\u540D\u79F0 '{0}' \u51FA\u73B0\u591A\u6B21\u3002
# YMSG: return from Rule runtime plug in - update/create, in case the rule body is not valid
2513=\u65E0\u6CD5\u521B\u5EFA\u548C\u66F4\u65B0\u89C4\u5219\uFF1B\u89C4\u5219\u4E3B\u4F53\u65E0\u6548\u3002
# YMSG: return from Rule body validator - in case parameter is referenced to an unknown action
2514=\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002\u53C2\u6570\u5F15\u7528\u7684\u64CD\u4F5C '{0}' \u5728\u8BCD\u6C47\u4E2D\u4E0D\u5B58\u5728\u3002
# YMSG: return from Rule body validator - in case parameter name isn't a valid parameter for action
2515=\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002\u5BF9\u4E8E\u8BCD\u6C47\u4E2D\u7684\u64CD\u4F5C '{1}'\uFF0C\u4E0D\u5B58\u5728\u4E0E\u4E4B\u5BF9\u5E94\u7684\u53C2\u6570\u540D\u79F0 '{0}'\u3002
# YMSG: return from Rule body validator - in case action doesn't exist in the vocabulary
2516=\u8BCD\u6C47\u4E2D\u4E0D\u5B58\u5728\u64CD\u4F5C '{0}'\u3002
# YMSG: return from Rule body validator - when the sent parameter isn't a required parameter in the sent output 
2517=\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002\u5BF9\u4E8E\u8BCD\u6C47\u4E2D\u7684\u8F93\u51FA '{1}'\uFF0C\u4E0D\u5B58\u5728\u4E0E\u4E4B\u5BF9\u5E94\u7684\u53C2\u6570\u540D\u79F0 '{0}'\u3002
# YMSG: return from Rule body validator - when the sent output doesn't exists in the vocabulary
2518=\u8BCD\u6C47\u4E2D\u4E0D\u5B58\u5728\u8F93\u51FA '{0}'\u3002
# YMSG: return from Rule body validator - when alias has more than one output parameter column
2519=\u522B\u540D\u5177\u6709\u591A\u4E2A\u8F93\u51FA\u53C2\u6570\u3002
# YMSG: return from Rule body validator - when the alias output parameters values do not have the same type X
2520=\u8F93\u51FA\u53C2\u6570 '{0}' \u7684\u6240\u6709\u503C\u5FC5\u987B\u4E3A\u540C\u4E00\u7C7B\u578B\u3002
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that does not exist.
2521=\u65E0\u6CD5\u5C06\u89C4\u5219 '{0}' \u5206\u914D\u7ED9\u89C4\u5219\u670D\u52A1 '{1}'\u3002\u8BE5\u89C4\u5219\u670D\u52A1\u4E0D\u5B58\u5728\u3002
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different vocabulary.
2522=\u65E0\u6CD5\u5C06\u89C4\u5219 '{0}' \u5206\u914D\u7ED9\u89C4\u5219\u670D\u52A1 '{1}'\u3002\u5FC5\u987B\u4E3A\u8BE5\u89C4\u5219\u670D\u52A1\u548C\u89C4\u5219\u5B9A\u4E49\u76F8\u540C\u7684\u8BCD\u6C47\u3002
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different output.
2523=\u65E0\u6CD5\u5C06\u89C4\u5219 '{0}' \u5206\u914D\u7ED9\u89C4\u5219\u670D\u52A1 '{1}'\u3002\u5FC5\u987B\u4E3A\u8BE5\u89C4\u5219\u670D\u52A1\u548C\u89C4\u5219\u5B9A\u4E49\u76F8\u540C\u7684\u8F93\u51FA\u3002
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that is not indicated as manually assigned.
2524=\u65E0\u6CD5\u5C06\u89C4\u5219 '{0}' \u5206\u914D\u7ED9\u89C4\u5219\u670D\u52A1 '{1}'\u3002\u89C4\u5219\u670D\u52A1\u5DF2\u8BBE\u7F6E\u4E3A\u81EA\u52A8\u89C4\u5219\u5206\u914D\uFF0C\u56E0\u6B64\u4E0D\u5141\u8BB8\u624B\u52A8\u5206\u914D\u3002
# YMSG: return from Rule runtime plug in - update/create, in case a custom condition is not valid
2525=\u65E0\u6CD5\u521B\u5EFA\u6216\u66F4\u65B0\u89C4\u5219\uFF1B'{0}' \u4E0D\u662F\u6709\u6548\u6761\u4EF6\u3002
# YMSG: return from Rule body validator - when ruleBody of type ruleSet has more than one condition column
2526=\u65E0\u6548\u89C4\u5219\u96C6\u3002\u89C4\u5219\u96C6\u5185\u7684\u89C4\u5219\u5177\u6709\u591A\u4E2A\u6761\u4EF6\u3002
# YMSG: return from Rule body validator - when ruleBody alias has parameter of type collection
2527=\u53C2\u6570\u5185\u5BB9\u65E0\u6548\u3002\u53C2\u6570 '{0}' \u4E0D\u80FD\u662F\u96C6\u5408\u3002
# YMSG: return from Rule body validator - when ruleBody expressions don't have the same root object
2528=\u65E0\u6548\u51B3\u7B56\u8868\u3002\u51B3\u7B56\u8868\u4E2D\u7684\u6240\u6709\u8868\u8FBE\u5F0F\u5FC5\u987B\u5177\u6709\u76F8\u540C\u7684\u6839\u6570\u636E\u5BF9\u8C61 '{0}'\u3002
# XMSG: return from rule validation when not found match result data object between rule and rule service
2529=\u89C4\u5219 '{1}' \u4E2D\u7684\u7ED3\u679C\u6570\u636E\u5BF9\u8C61 '{0}' \u4E0E\u89C4\u5219\u670D\u52A1 '{3}' \u4E2D\u7684\u7ED3\u679C\u6570\u636E\u5BF9\u8C61 '{2}' \u4E0D\u5339\u914D\u3002
# XMSG: return from rule validation when the vocabulary section was not found.
2530=\u65E0\u6CD5\u5B8C\u6210\u9A8C\u8BC1\u3002OData \u6709\u6548\u8D1F\u8F7D\u4E2D\u7F3A\u5C11\u201C\u8BCD\u6C47\u8868\u201D\u3002
# 2700 - 2899 - rule service messages

# YMSG: return from Rule service plug in, in case of wrong data object filter
2700=\u89C4\u5219\u670D\u52A1\u8FC7\u6EE4\u5668\u4E2D\u5B58\u5728\u9519\u8BEF
# YMSG: return from Rule service plug in, in case of different data objects in execution context and filter
2701=\u6267\u884C\u4E0A\u4E0B\u6587\u4E2D\u7684\u6570\u636E\u5BF9\u8C61 '{0}' \u4E0E\u8FC7\u6EE4\u5668\u4E2D\u7684\u6570\u636E\u5BF9\u8C61 '{1}' \u4E0D\u540C
# YMSG: return from  runtime plug in, in case of specified data object does not have the specified attribute (e.g. data object keys in rule service definition).
2704=\u65E0\u6CD5\u521B\u5EFA\u548C\u66F4\u65B0\u89C4\u5219\u670D\u52A1\uFF1B\u8BCD\u6C47 {1} \u7684\u6570\u636E\u5BF9\u8C61 {0} \u4E0D\u542B\u5C5E\u6027 {2}
# YMSG: return from runtime plug in, in case of parameter mapping path contains a collection
2705=\u4E0D\u5141\u8BB8\u8DEF\u5F84\u4E2D\u5305\u542B\u96C6\u5408\u3002\u8DEF\u5F84\uFF1A{0}
# YMSG: return from runtime plug in, in case of data object mapping entry is not unique within an execution context .
2706=\u6570\u636E\u5BF9\u8C61 {0} \u5177\u6709\u91CD\u590D\u6620\u5C04
# YMSG: return from  runtime plug in, in case of parameter definition entry is not unique within an execution context .
2707=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u670D\u52A1\uFF1B\u53C2\u6570 {0} \u91CD\u590D
# YMSG: return from  runtime plug in, in case of parameter mapping entry doesn't have a match parameter definition entry with in an execution context
2708=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u670D\u52A1\uFF1B\u53C2\u6570 {0} \u4E0D\u5B58\u5728\uFF0C\u5E76\u4E14\u4E0E\u6570\u636E\u5BF9\u8C61\u76F8\u5173\u8054
# YMSG: return from  runtime plug in, in case of ifentifiers in dataObject type parameter do not exist in data object from vocabulary
2709=\u89C4\u5219\u670D\u52A1 '{0}' \u4E2D\u7684\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002\u5728\u53C2\u6570 '{1}' \u4E2D\uFF0C\u5C5E\u6027 '{2}' \u5BF9\u4E8E\u8BCD\u6C47\u8303\u56F4 '{4}' \u4E2D\u7684\u6570\u636E\u5BF9\u8C61 '{3}' \u65E0\u6548\u3002
# YMSG: return from runtime plug in, in case of data object definition entry is not unique within parameter definition if service.
2710=\u89C4\u5219\u670D\u52A1 '{0}' \u4E2D\u7684\u53C2\u6570\u5B9A\u4E49\u65E0\u6548\u3002\u6570\u636E\u5BF9\u8C61 '{1}' \u88AB\u591A\u4E2A\u53C2\u6570\u5F15\u7528\u3002
# YMSG: return from runtime plug in, only read-only rule services can be indicated to be created with result view
2711=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u670D\u52A1 '{0}'\u3002\u542B\u7ED3\u679C\u89C6\u56FE\u7684\u89C4\u5219\u670D\u52A1\u5FC5\u987B\u6807\u8BB0\u4E3A\u201C\u53EA\u8BFB\u201D\u3002
# YMSG: return from runtime plug in, only explicit output rule services can be indicated to be created with result view
2712=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u670D\u52A1 '{0}'\u3002\u5177\u6709\u7ED3\u679C\u89C6\u56FE\u7684\u89C4\u5219\u670D\u52A1\u5FC5\u987B\u5B9A\u4E49\u663E\u5F0F\u8F93\u51FA\u3002
# YMSG: returned from request handler. Rule requested to be removed from rule service but the rule is not assigned to it
2713=\u65E0\u6CD5\u79FB\u9664\u89C4\u5219\u5206\u914D\u3002\u89C4\u5219 '{0}' \u672A\u5206\u914D\u81F3\u89C4\u5219\u670D\u52A1\u3002
# YMSG: return from  runtime plug in, in case of output contains collection parameter in event mode scenario
2714=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u670D\u52A1 '{0}'\u3002 \u65E0\u6CD5\u4E3A\u5176\u6267\u884C\u4E0A\u4E0B\u6587\u4E2D\u672A\u5B9A\u4E49\u6570\u636E\u5BF9\u8C61\u7684\u89C4\u5219\u670D\u52A1\u5B9A\u4E49\u53C2\u6570\u7C7B\u578B\u4E3A\u96C6\u5408\u7684\u8F93\u51FA\u3002
# XMSG: return from rule service validation when not found match of result data object between rule service and the vocabulary
2715=\u89C4\u5219\u670D\u52A1 '{1}' \u4E2D\u7684\u7ED3\u679C\u6570\u636E\u5BF9\u8C61 '{0}' \u5728\u8BCD\u6C47\u8868\u4E2D\u672A\u5B9A\u4E49\u4E3A RESULT \u7528\u9014\u7C7B\u578B\u3002
# XMSG: return from rule service validation when not found match of parameter between rule service and the vocabulary
2716=\u8BCD\u6C47\u8868 '{1}' \u4E2D\u7684\u53C2\u6570 '{0}' \u672A\u5B9A\u4E49\u4E3A\u89C4\u5219\u670D\u52A1 '{3}' \u7684\u6267\u884C\u4E0A\u4E0B\u6587\u53C2\u6570\u3002


# 2900 - 2949 - post activation / completeActivation

# 2950 - 2999 - common resource CRUD


# YMSG: return from Request Handler, in case of url parameter that isn't valid
2955=url \u53C2\u6570 {0} \u65E0\u6548
# YMSG: return from Request Handler, in case of unsupported request mode
2956=\u4E0D\u652F\u6301\u6A21\u5F0F \#{0}
# YMSG: return from Request Handler, in case of unsupported metadata
2957=\u4E0D\u652F\u6301\u5143\u6570\u636E
# YMSG: return from Request Handler, in case of unsupported metadata for method
2958=\u53EA\u80FD\u901A\u8FC7\u8BF7\u6C42\u65B9\u6CD5 GET \u83B7\u53D6\u5143\u6570\u636E


# YMSG: returned when wrong query is generated (during procedure generation). 2 causes: Bug in process or there is no mapping from vocabulary to real table / column
2970=\u67E5\u8BE2\u751F\u6210\u51FA\u9519\u6216\u6620\u5C04\u65E0\u6548
# YMSG: returned if for some reason the parser returned undefined parse model. Can be bad rule syntax or a bug
2971=\u672A\u5B9A\u4E49\u89E3\u6790\u6A21\u578B
# YMSG: query generation needs either leading object and at least one key or a mapping to parameters. The error is returned if something is missing 
2972=\u4E3B\u8981\u5BF9\u8C61\u3001\u952E\u503C\u548C\u6620\u5C04\u7684\u7EC4\u5408\u65E0\u6548
# YMSG: returned when there is no association between 2 objects in vocabulary
2973=\u5173\u8054\u65E0\u6548 - \u65E0\u5C5E\u6027
# YMSG: returned when there is a use of attribute based on predictive model but the procedure for the predictive model is not defined
2974=\u672A\u627E\u5230\u9884\u6D4B\u6A21\u5757\u8FC7\u7A0B {0}
# YMSG: outputs tanle type is mandatory. error when missing 
2975=\u7ED3\u679C\u6570\u636E\u65E0\u6548
# YMSG: error when is out name is missing in vocabulary output names 
2976=\u8F93\u51FA\u540D\u79F0\u65E0\u6548
# YMSG: error when rule body type is different from text or decisionTable 
2977=\u89C4\u5219\u4E3B\u4F53\u7C7B\u578B\u65E0\u6548
# YMSG: return from Runtime plugins, in case of unsupported change mode
2978=\u8D44\u6E90\u4E0D\u652F\u6301\u66F4\u6539\u6A21\u5F0F '{0}'
# YMSG: return from Runtime plugin - generate, for informing on the change mode for current resource
2979=\u5728\u66F4\u6539\u6A21\u5F0F\u4E0B\u751F\u6210\u8D44\u6E90\uFF1A'{0}'
# YMSG: return when expression  
2980=\u89E3\u6790\u8868\u8FBE\u5F0F\u65F6\u51FA\u9519\uFF1A'{0}'
# YMSG: return when expression  
2981=\u65E0\u6CD5\u521B\u5EFA\u89C4\u5219\u6A21\u677F '{0}'\u3002\u8BE5\u540D\u79F0\u5DF2\u88AB\u8BCD\u6C47 '{1}' \u4E2D\u7684\u4E00\u4E2A\u6570\u636E\u5BF9\u8C61\u5360\u7528\u3002



#############################
# API: Get params
#############################

# 3100 - 3999 - get params messages

# YMSG: return from  ruleBodyAnalyzer, in case of businessRule.type is not text
3100=\u4E1A\u52A1\u89C4\u5219\u7C7B\u578B\u5E94\u4E3A\u6587\u672C
# YMSG: return from  ruleBodyAnalyzer, in case of Vocabulary is missing
3101=\u7F3A\u5C11\u8BCD\u6C47

#############################/
# API: Rule service consumption
#############################/
# 4100 - 4999 messages

# YMSG: return message in case the output is partial
4100=\u663E\u793A {0} \u4E2A\u9879\u76EE\u3002 \u8BF7\u6CE8\u610F\uFF0C\u8FD9\u53EA\u662F\u4E00\u90E8\u5206\u7ED3\u679C\u3002\u5982\u679C\u5C06 saveResult \u6807\u5FD7\u8BBE\u7F6E\u4E3A TRUE\uFF0C\u5219\u53EF\u4EE5\u5728 '{'1} \u8F93\u51FA\u8868\u4E2D\u67E5\u770B\u5168\u90E8\u7ED3\u679C\u3002

#############################/
# Halm and Installation
#############################/

# YMSG: Post Activation API success
10000=SAP HANA Rules Framework \u7684\u914D\u7F6E\u811A\u672C\u5DF2\u6210\u529F\u5B8C\u6210\u3002
# YMSG: Post Activation API failed
10001=SAP HANA Rules Framework \u7684\u914D\u7F6E\u811A\u672C\u4E2D\u51FA\u9519\u3002{0}
# YMSG: Post Activation API failed
10002=\u68C0\u6D4B\u5230 SAP HANA Rules Framework Web \u5E94\u7528\u7A0B\u5E8F\u7684\u73B0\u6709\u914D\u7F6E\u3002\u56E0\u6B64\u4E0D\u5141\u8BB8\u8BBE\u7F6E Web \u5E94\u7528\u7A0B\u5E8F\u7684\u7F3A\u7701\u914D\u7F6E\u3002
# YMSG: Post Activation API failed
10003=\u7531\u4E8E\u51FA\u73B0\u6280\u672F\u9519\u8BEF\uFF0C\u4E3A SAP HANA Rules Framework \u914D\u7F6E Web \u5E94\u7528\u7A0B\u5E8F\u5931\u8D25\u3002\u539F\u56E0\uFF1A{0}
# YMSG: Post Activation API failed
10004=\u7CFB\u7EDF\u4E2D\u5DF2\u5B58\u5728\u89C4\u5219\u670D\u52A1\u6216\u5177\u6709\u5D4C\u5165\u5F0F\u670D\u52A1\u7684\u89C4\u5219\u3002 \u56E0\u6B64\u4E0D\u5141\u8BB8\u66F4\u65B0\u65F6\u533A\u3002
# YMSG: Post Activation API failed
10005=\u7CFB\u7EDF\u4E2D\u5DF2\u5B58\u5728\u89C4\u5219\u670D\u52A1\u6216\u5177\u6709\u5D4C\u5165\u5F0F\u670D\u52A1\u7684\u89C4\u5219\u3002 \u56E0\u6B64\u4E0D\u5141\u8BB8\u66F4\u65B0\u8FD0\u884C\u65F6\u65B9\u6848\u3002
