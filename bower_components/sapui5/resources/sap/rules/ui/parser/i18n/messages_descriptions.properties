# HRF res\messages_descriptions.properties
# __ldi.translation.uuid=60503df0-cf58-11e3-9c1a-0800200c9a66

# This file contains messages descriptions arranged in sections according to HRF APIs
# These descriptions are translated.
# Adding a new message requires also update of message.xsjslib file by the new ID

#############################
# common
#############################
# 10 - 999 - common messages

# YMSG: return from resource activation, in case of a resource does not exist in repository
10=Resource activation is not possible; resource does not exist.
# YMSG: return from resource activation, in case of a resource suffix is not one of HRF resources
11=Resource activation is not possible; suffix '{0}' is not supported
# YMSG: return from resource activation, in case of a resource package does not exist in repository
12=Resource activation is not possible; package '{0}' does not exist
# YMSG: return from runtime plug in, in case of invalid attribute
13=Resource activation is not possible; attribute  '{0}'  is not contained in schema
# YMSG: return from  runtime plug in, in case of invalid attribute
14=Resource activation is not possible; mandatory attribute value '{0}' is missing
# YMSG: return from  runtime plug in, in case none of a predefined set of fields is specified
15=Resource activation is not possible; at least one of the optional attributes {0} is missing
# YMSG: return from  runtime plug in, in case of invalid field (e.g vocabulary doesn't exist)
16=Resource activation is not possible; value of attribute {0} is not valid
# YMSG: return from runtime plug in, in case of inconsistent fields combination(e.g. vocabulary and output names doesn't match)
17=Resource activation is not possible; combination of {0} and {1} is not valid
# YMSG: return from  runtime plug in, in case of invalid resource id (e.g. package / file name is missing)
23=Resource activation is not possible; resource does not exist
# YMSG: return from  runtime plug in, in case of error from REL validation
24=Error in field {0}: {1}
# YMSG: return from  REST service, in case of http request contains non supported method
25=Method failed; method #{0} is not supported
# YMSG:  technical error from platform
26=Technical error occurred - {0}
# YMSG: return from resource activation, in case of a resource does not exist in repository
27=Resource does not exist.

# 100 - 200 - Authorization

# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
100=You are not authorized to perform this action.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
101=You are not authorized to update rules.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
102=You are not authorized to delete rules.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
103=You are not authorized to create rules.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
104=You are not authorized to read rules.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
105=You are not authorized to update rule services
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
106=You are not authorized to delete rule services.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
107=You are not authorized to create rule services.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
108=You are not authorized to read rule services.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
109=You are not authorized to run rule services.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
110=You are not authorized to update vocabularies.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
111=You are not authorized to delete vocabularies.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
112=You are not authorized to create vocabularies.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
113=You are not authorized to read vocabularies.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
114=You are not authorized to update rule templates.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
115=You are not authorized to delete rule templates.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
116=You are not authorized to create rule templates.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
117=You are not authorized to read rule templates.
# XMSG: return from Request Handler, in case of unassigned privilege to perform an action 
118=You are not authorized to create or update rule services.
# XMSG: in case of technical user either does not exist or is not configured correctly
119=Technical user for SAP HANA rules framework either does not exist or is not configured correctly. {0}
 
#############################
# API: Validate
#############################
# 1100 - 1199 - REL validation messages

# YMSG: return from REL, the beginning of any REL validation error - in case of a wrong statement 
1100=Error in expression;
# YMSG: return from REL parser, in case of a wrong entry (syntax) and maximum 3 option are optional instead 
1101=Error in expression; enter {0} instead of {1}
# YMSG: return from REL parser, in case of a wrong entry (syntax) and more than 3 option are optional instead  
1102=Error in expression; {0} is not a valid entry
# YMSG: return from REL parser, in case of a wrong input
1103=Error in expression; remove {0}
# YMSG: return from REL model, in case of collection OM when single value in needed
1104=Error in expression; {0} is a list of values. Change to an expression representing a single value
# YMSG: return from REL model, in case of a wrong input
1105=Error in expression; enter valid operand instead of {0}
# YMSG: return from REL parser, in case of an incomplete expression
1106=Incomplete expression;
# YMSG: return from REL lexer, in case of missing token at EOF
1107=Error in expression; enter {0} at the end of the expression
# YMSG: return from REL lexer, in case of wrong token
1108=Error in expression; enter '{0}' instead of '{1}'
# YMSG: return from REL entity, in case of missing current
1109=Error in expression; 'current' is missing in the 'where' clause
# YMSG: return from REL entity, in case of redundant 'current'
1110=Error in expression; redundant 'current'; remove one 'current'
# YMSG: return from REL vocabulary utils, in case of invalid root object
1111=Invalid root object
# YMSG: return from REL vocabulary utils, in case of invalid association
1112=Invalid association
# YMSG: return from REL vocabulary utils, in case of invalid association or attribute
1113=Invalid association or attribute
# YMSG: return from REL vocabulary utils, in case of root is simple attribute
1114=Root cannot be a simple attribute
# YMSG: return from REL vocabulary utils, in case of attribute not found
1115=Incomplete path, attribute not found
# YMSG: return from REL entity, in case of using 'current' outside of 'where'
1116=Error in expression; the keyword 'current' can only be used within a 'where' clause.
# YMSG: return from REL entity, in case of using 'current' incorrectly with arithmetic
1117=Error in expression; the keyword 'current' must be applied to all operands on one side of the comparative operator in the 'where' clause.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1118=Error in expression. '{0}' is not a valid value from value list '{1}'.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1119=Error in expression. The '{0}' operator cannot be used with a value-list attribute ('{1}').
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1120=Error in expression. The keyword 'all' cannot follow an operand that contains the keyword 'current'.
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1121=Error in expression. The keyword 'all' cannot be used more than once in the same statement.
# YMSG: return from REL parser utils, in case of using 2 differemt root objects 
1122=Error in expression. Expression contains more than one root data object: {0}, {1}.
# YMSG: return from REL parser, in case of a wrong entry (syntax date) 
1123=Error in expression. Enter a {0} using the application format {1} instead of {2}.
# YMSG: return from REL parser, in case of a wrong locale settings
1124={0} {1} is not supported.
# YMSG: return from REL parser utils, in case of using value that doen't exist in external value list
1125=Error in expression. Enter a valid value from value help instead of '{0}'.
# YMSG: return from REL parser, in case of a two options of wrong formats
1126=Error in expression {0}. To enter a {1}, use the format {2}. To enter a {3}, use the format {4}.
# YMSG: return from REL parser, in case of string without single quotes
1127=Error in expression; enter string in single quotes: {0} instead of {1}.
# 1200 - 1999 - validation messages

#############################
# API : resource CRUD
#############################
# 2100 - 2299 - vocabulary messages

# YMSG: return from vocabulary runtime plug in, in case of error in expression
2100=In '{0}'- Error in parsing expression: '{1}', '{2}'
# YMSG: return from vocabulary runtime plug in, in case of error in rule
2101=In '{0}' - problem in rule: '{1}', '{2}'
# YMSG: return from vocabulary runtime plug in, in case the parameter type already exists
2102=In '{0}' : '{1}', name: '{2}' already exists
# YMSG: return from vocabulary runtime plug in, in case parameter name isn't valid
2103=In '{0}' : '{1}', Invalid name: '{2}'
# YMSG: return from vocabulary runtime plug in, in case one of action/output names aren't valid
2104=In '{0}', Invalid name: '{1}'
# YMSG: return from vocabulary runtime plug in, in case name already exists
2105=Name '{0}' is defined more than once in '{1}'.
# YMSG : return from vocabulary runtime plug in, in case the output has no parameters
2106=Missing parameters in output
# YMSG: return from vocabulary runtime plug in, in case one of the attributes has an invalid name
2107=Invalid attribute name '{0}'
# YMSG: return from vocabulary runtime plug in, in case object name of declare more than once
2108='{0}': '{1}' already exists. 
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2109=Attribute already exists: object= '{0}' attribute= '{1}'
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2110=Association already exists: object= '{0}' association= '{1}'
# YMSG : return from vocabulary runtime plug in, in case the source table isn't exists
2111=Invalid source table '{0}'
# YMSG : return from vocabulary runtime plug in, in case of one the association is invalid
2112=Invalid association in object='{0}' + association='{1}'
# YMSG : return from vocabulary runtime plug in, in case of one the association's attributes are invalid
2113=Invalid Attribute for association=  '{0}' attribute= '{1}'
# YMSG: return from rule utils, in case of invalid vocabulary assignment
2114=Vocabulary '{0}' is not valid
# YMSG: return from vocabulary runtime plug in, in case invalid alias content
2115=Invalid content in alias '{0}'. Reason: '{1}'
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2116=Alias name '{0}' is invalid. Alias name can contain alphanumeric and underscore characters only, must start with an alphabetical character, and cannot be a reserved word from the rule expression language.
# YMSG: return from vocabulary runtime plug in, in case alias name collide with an data object name
2117=Alias name '{0}' is invalid. Alias already exists as a data object name.
# YMSG: return from vocabulary runtime plug in, in case o alias dependency to itself
2118=Invalid content in alias '{0}'. Resolution of the alias will result in an infinite loop.
# YMSG: return from vocabulary runtime plug in, when name already exists in another vocabulary in the DB. Example: In 'dataObjects', name 'player' already exists in 'aliases' vocabulary 'voca2'
2120=In '{0}', name '{1}' already exists in '{2}' in vocabulary '{3}'.
# YMSG: return from vocabulary runtime plug in, scope name can't be Public or Private
2121=Invalid scope name. Scope name cannot be 'Public' or 'Private'.
# YMSG: return from vocabulary runtime plug in, embedded vocabulary can't be with scope Global
2122=Invalid scope type. Embedded vocabulary cannot be of type 'Global'.
# YMSG: Object does not exist
2125=Object '{0}' does not exist
# YMSG: return from vocabulary runtime plug in, in case of a wrong data object name 
2126=Invalid name for dataObject '{0}'. dataObject name cannot be an existing rule template name or one of the following reserved words (case-sensitive only): rule, ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case of a wrong alias name
2127=Alias name '{0}' is invalid. Alias name cannot be an existing rule template name or one of the following reserved words (case-sensitive only): rule, ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case invalid data object name
2128=Invalid name for dataObject '{0}'. dataObject name can contain alphanumeric and underscore characters only, must start with an alphabetical character, and cannot be a reserved word from the rule expression language.
# YMSG: return from vocabulary runtime plug in, in case of duplicate alias names
2129=Alias '{0}' already exists as an alias name.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2130=Content parameter in alias '{0}' is empty.
# YMSG: return from vocabulary runtime plug in, in case alias name exists as as an attribute name
2131=Alias name '{0}' is invalid. Alias already exists as an attribute name.
# YMSG: return from vocabulary runtime plug in, in case alias name exists in other vocabulary with the same scope
2132=Alias name '{0}' is invalid. Name already exists as an attribute for object '{1}' in vocabulary '{2}'.
# YMSG: return from vocabulary runtime plug in, in case alias name exists in objects rule or ruleTemplate
2133=Alias name '{0}' is invalid. Name already exists in object '{1}'.
# YMSG: return from vocabulary runtime plug in, in case attribute name already exists as alias in other vocabulary
2134=Invalid name for attribute '{0}'. Name already exists as an alias in vocabulary '{1}'.
# YMSG: return from vocabulary runtime plug in, in case vocabulary declares it depends on a vocabulary which doesn't exists
2135=The vocabulary specifies a dependency on vocabulary '{0}' which does not exist.
# YMSG: return from vocabulary runtime plug in, in case implementor declare global vocabulary with dependencies
2136=A global vocabulary cannot contain dependencies to other vocabularies.
# YMSG: return from vocabulary runtime plug in, in case, in the same data object, there is association and attribute with the same name
2137=In data object '{0}', the name '{1}' is used for an association and an attribute. The same name cannot be used for both properties.
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2138=Name of value list '{0}' is invalid. The name of a value list can contain alphanumeric and underscore characters only, must start with an alphabetical character, and cannot be a reserved word from the rule expression language.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2139=Content of value list '{0}' is empty.
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2140=Value list '{0}' defined in attribute '{1}' in data object '{2}' does not exist.
# YMSG: return from vocabulary runtime plug in, in case parameter size isn't valid
2141=In '{0}', the size ({1}) of parameter '{2}' in '{3}' is not valid for the specified data type.
# YMSG: return from vocabulary - in case parameter content cannot be a collection 
2142=Invalid parameter definition for action '{0}' in action parameter '{1}'. Parameters of type collection are not permitted in actions.                                                                                                                                                                   .




# 2300 - 2499 rule template messages

# YMSG: return from Rule Template runtime plug in, in case of rule template name starts with a number
2300=Rule template creation or update is not possible; rule template name cannot start with a number
# YMSG: return from Rule Template runtime plug in, in case of illegal change in rule template attributes
2301=Rule Template Activate contains non compatible change;
# YMSG: return from Rule Template runtime plug in, in case of rule template update contains condition change
2302=Rule template creation or update is not possible; rule template condition cannot be changed
# YMSG: return from Rule Template runtime plug in, in case of rule template contains invalid condition 
2303=Rule template creation or update is not possible; condition '{0}' is not valid
# YMSG: return from Rule Template runtime plug in, in case of rule template deletion when there are rules assigned to the rule template  
2304=Cannot delete rule template {0}. There are rules for this rule template;
# YMSG: return from Rule Template runtime plug in, in case of duplicate rule template name  
2305=Rule template creation is not possible; rule template '{0}' already exists in package '{1}'
# YMSG: return from Rule Template runtime plug in, in case that rule template name starts with a number  
2306=Rule Template name - '{0}' cannot start with a number;
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as data object  
2307=Could not create rule template '{0}'. The rule template name is already used as a data object in vocabulary '{1}'.
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as alias
2308=Could not create rule template '{0}'. The rule template name is already used as an alias in vocabulary '{1}'.


# 2500 - 2699 - rule messages

# YMSG: return from Rule runtime plug in, in case of resource contains additional attributes but not assigned to rule template   
2500=Rule creation not possible; additional attributes entered even though rule not based on template
# YMSG: return from Rule runtime plug in, in case of rule template assignment change   
2501=Rule update not possible; rule template assignment cannot be changed once rule created
# YMSG: return from Rule runtime plug in, in case of vocabulary change  
2502=Rule update not possible; vocabulary assignment cannot be changed once rule created
# YMSG: return from Rule runtime plug in, in case of output change   
2503=Rule update not possible; output assignment cannot be changed once rule created
# YMSG: return from Rule runtime plug in, in case of rule contains additional attributes where assigned rule template does not contains additional attributes
2504=Rule creation not possible; additional attributes entered which do not belong to assigned rule template.
# YMSG: return from Rule runtime plug in, in case of execution context change
2505=Rule update not possible; execution context assignment cannot be changed once rule created
# YMSG: return from Rule runtime plug in, in case of invalid rule template assignment
2506=Rule Template '{0}' is not valid;
# YMSG: return from Rule runtime plug in, in case of invalid status transition
2507=Rule update not possible; you cannot change from status '{0}' to '{1}'
# YMSG: return from Rule runtime plug in, in case of updating single consumption to non single consumption Rule
2510=Removing of embedded services is not allowed
# YMSG: return from Rule runtime plug in, in case of updating single embedded service in Rule
2511=Removing or changing of embedded services is not allowed
# YMSG: return from Rule runtime plug in, in case of more than one embedded services with the same name
2512=Embedded service name - '{0}', exists more than once
# YMSG: return from Rule runtime plug in - update/create, in case the rule body is not valid
2513=Rule creation or update not possible; rule body is not valid
# YMSG: return from Rule body validator - in case parameter is referenced to an unknown action
2514=Invalid parameter definition. Parameter references an action '{0}' that does not exist in vocabulary.
# YMSG: return from Rule body validator - in case parameter name isn't a valid parameter for action
2515=Invalid parameter definition. Parameter name '{0}' does not exist for action '{1}' in vocabulary.
# YMSG: return from Rule body validator - in case action doesn't exist in the vocabulary
2516=Action '{0}' does not exist in vocabulary.
# YMSG: return from Rule body validator - when the sent parameter isn't a required parameter in the sent output 
2517=Invalid parameter definition. Parameter name '{0}' does not exist for output '{1}' in vocabulary.
# YMSG: return from Rule body validator - when the sent output doesn't exists in the vocabulary
2518=Output '{0}' does not exist in vocabulary.
# YMSG: return from Rule body validator - when alias has more than one output parameter column
2519=Alias has more than one output parameter.
# YMSG: return from Rule body validator - when the alias output parameters values do not have the same type X
2520=All values of output parameter '{0}' must be of the same type. 
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that does not exist.
2521=Could not assign rule '{0}' to rule service '{1}'. The rule service does not exist.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different vocabulary.
2522=Could not assign rule '{0}' to rule service '{1}'. The rule service and the rule must have the same vocabulary defined.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different output.
2523=Could not assign rule '{0}' to rule service '{1}'. The rule service and the rule must have the same output defined.
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that is not indicated as manually assigned.
2524=Could not assign rule '{0}' to rule service '{1}'. The rule service is set for automatic rule assignments and therefore does not allow manual assignments.
# YMSG: return from Rule runtime plug in - update/create, in case a custom condition is not valid
2525=Rule cannot be created or updated; '{0}' is not a valid condition.
# YMSG: return from Rule body validator - when ruleBody of type ruleSet has more than one condition column
2526=Invalid ruleset. A rule within the ruleset has more than one condition. 
# YMSG: return from Rule body validator - when ruleBody alias has parameter of type collection
2527=Invalid parameter content. Parameter '{0}' cannot be a collection.
# YMSG: return from Rule body validator - when ruleBody expressions don't have the same root object
2528=Invalid decision table. All expressions in the decision table must have the same root data object '{0}'.
# XMSG: return from rule validation when not found match result data object between rule and rule service
2529=Result data object '{0}' in rule '{1}' does not match the result data object '{2}' in rule service '{3}'.
# XMSG: return from rule validation when the vocabulary section was not found.
2530=Validation failed to complete. 'vocabulary' is missing in the OData payload.
# 2700 - 2899 - rule service messages

# YMSG: return from Rule service plug in, in case of wrong data object filter
2700=Error in rule service filter
# YMSG: return from Rule service plug in, in case of different data objects in execution context and filter
2701=Data Object - '{0}' in execution context is different from dataObject - '{1}' in filter
# YMSG: return from  runtime plug in, in case of specified data object does not have the specified attribute (e.g. data object keys in rule service definition).
2704=Rule service creation or update is not possible; data object {0} of vocabulary {1} does not contain attribute {2}
# YMSG: return from runtime plug in, in case of parameter mapping path contains a collection
2705=Path with collection is not allowed. Path: {0};
# YMSG: return from runtime plug in, in case of data object mapping entry is not unique within an execution context .
2706=data object - {0} has duplicate mappings;
# YMSG: return from  runtime plug in, in case of parameter definition entry is not unique within an execution context .
2707=Rule service creation is not possible; parameter {0} is duplicated
# YMSG: return from  runtime plug in, in case of parameter mapping entry doesn't have a match parameter definition entry with in an execution context
2708=Rule service creation is not possible; parameter {0} does not exist and is associated with the data object
# YMSG: return from  runtime plug in, in case of ifentifiers in dataObject type parameter do not exist in data object from vocabulary
2709=Invalid parameter definition in rule service '{0}'. In parameter '{1}', '{2}' is not a valid attribute of data object '{3}' in vocabulary scope '{4}'.
# YMSG: return from runtime plug in, in case of data object definition entry is not unique within parameter definition if service.
2710=Invalid parameter definition in rule service '{0}'. Data object '{1}' is referenced by more than one parameter.
# YMSG: return from runtime plug in, only read-only rule services can be indicated to be created with result view
2711=Could not create rule service '{0}'. Rule service with result view must be indicated as read-only.
# YMSG: return from runtime plug in, only explicit output rule services can be indicated to be created with result view
2712=Could not create rule service '{0}'. Rule services with a result view must have an explicit output defined.
# YMSG: returned from request handler. Rule requested to be removed from rule service but the rule is not assigned to it
2713=Could not remove rule assignment. Rule '{0}' is not assigned to the rule service.
# YMSG: return from  runtime plug in, in case of output contains collection parameter in event mode scenario
2714=Could not create rule service '{0}'. You cannot define an output with parameters of type collection for a rule service that does not have a data object defined in its execution context.
# XMSG: return from rule service validation when not found match of result data object between rule service and the vocabulary
2715=Result data object '{0}' in rule service '{1}' is not defined as a RESULT usage type in the vocabulary.
# XMSG: return from rule service validation when not found match of parameter between rule service and the vocabulary
2716=Parameter '{0}' in vocabulary '{1}' is not defined as an execution context parameter of rule service '{3}'.


# 2900 - 2949 - post activation / completeActivation

# 2950 - 2999 - common resource CRUD


# YMSG: return from Request Handler, in case of url parameter that isn't valid
2955=url parameter: {0} is not valid
# YMSG: return from Request Handler, in case of unsupported request mode
2956=Mode #{0} is not supported
# YMSG: return from Request Handler, in case of unsupported metadata
2957=Metadata is not supported
# YMSG: return from Request Handler, in case of unsupported metadata for method
2958=Get Metadata is only valid with request method GET


# YMSG: returned when wrong query is generated (during procedure generation). 2 causes: Bug in process or there is no mapping from vocabulary to real table / column
2970=Error in query generation or invalid mapping
# YMSG: returned if for some reason the parser returned undefined parse model. Can be bad rule syntax or a bug
2971=Parse model is undefined
# YMSG: query generation needs either leading object and at least one key or a mapping to parameters. The error is returned if something is missing 
2972=Invalid combination of leading object, keys and mapping
# YMSG: returned when there is no association between 2 objects in vocabulary
2973=Invalid association - no attributes
# YMSG: returned when there is a use of attribute based on predictive model but the procedure for the predictive model is not defined
2974=Prdective module procedure {0} not found
# YMSG: outputs tanle type is mandatory. error when missing 
2975=Invalid result data
# YMSG: error when is out name is missing in vocabulary output names 
2976=Invalid output name
# YMSG: error when rule body type is different from text or decisionTable 
2977=invalid rule body type
# YMSG: return from Runtime plugins, in case of unsupported change mode
2978=Change Mode '{0}' is not supported for resource
# YMSG: return from Runtime plugin - generate, for informing on the change mode for current resource
2979=Resource generation, in change mode: '{0}'
# YMSG: return when expression  
2980=Error in parsing expression: : '{0}'
# YMSG: return when expression  
2981=Rule template '{0}' creation is not possible. The name is already used by one of the data objects in a vocabulary '{1}'.



#############################
# API: Get params
#############################

# 3100 - 3999 - get params messages

# YMSG: return from  ruleBodyAnalyzer, in case of businessRule.type is not text
3100=Business rule type should be text
# YMSG: return from  ruleBodyAnalyzer, in case of Vocabulary is missing
3101=Vocabulary is missing

#############################/
# API: Rule service consumption
#############################/
# 4100 - 4999 messages

# YMSG: return message in case the output is partial
4100={0} items shown. Note this is only a partial set of the results. If the 'saveResult' flag is set to TRUE, the full set of results can be found in '{1}.output' table.

#############################/
# Halm and Installation
#############################/

# YMSG: Post Activation API success
10000=Configuration script for SAP HANA rules framework completed successfully.
# YMSG: Post Activation API failed
10001=An error occurred in configuration script of SAP HANA rules framework. {0}
# YMSG: Post Activation API failed
10002=An existing configuration for the web application of SAP HANA rules framework has been detected. Setting the default configuration for the web application is therefore not allowed.
# YMSG: Post Activation API failed
10003=Configuration of the web application for SAP HANA rules framework failed due to a technical error. Reason: {0}
# YMSG: Post Activation API failed
10004=A rule service or rule with an embedded service already exists in the system. Updating the time zone is therefore not allowed.
# YMSG: Post Activation API failed
10005=A rule service or rule with an embedded service already exists in the system. Updating the runtime schema is therefore not allowed.
