
# This file contains messages descriptions arranged in sections according to HRF APIs
# These descriptions are translated.
# Adding a new message requires also update of message.xsjslib file by the new ID

#############################
# common
#############################
# 10 - 999 - common messages

# YMSG: return from resource activation, in case of a resource does not exist in repository
10=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u8CC7\u6E90\u4E0D\u5B58\u5728
# YMSG: return from resource activation, in case of a resource suffix is not one of HRF resources
11=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u4E0D\u652F\u63F4\u5F8C\u7F6E\u5B57\u5143 '{0}'
# YMSG: return from resource activation, in case of a resource package does not exist in repository
12=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u5957\u4EF6 '{0}' \u4E0D\u5B58\u5728
# YMSG: return from runtime plug in, in case of invalid attribute
13=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u7DB1\u8981\u4E2D\u672A\u5305\u542B\u5C6C\u6027 '{0}'
# YMSG: return from  runtime plug in, in case of invalid attribute
14=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u7F3A\u5C11\u5FC5\u8981\u5C6C\u6027\u503C '{0}'
# YMSG: return from  runtime plug in, in case none of a predefined set of fields is specified
15=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u81F3\u5C11\u7F3A\u5C11\u5176\u4E2D\u4E00\u500B\u7684\u9078\u64C7\u6027\u5C6C\u6027 {0} 
# YMSG: return from  runtime plug in, in case of invalid field (e.g vocabulary doesn't exist)
16=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u5C6C\u6027 {0} \u7684\u503C\u7121\u6548
# YMSG: return from runtime plug in, in case of inconsistent fields combination(e.g. vocabulary and output names doesn't match)
17=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B{0} \u548C {1} \u7684\u7D44\u5408\u7121\u6548
# YMSG: return from  runtime plug in, in case of invalid resource id (e.g. package / file name is missing)
23=\u7121\u6CD5\u555F\u7528\u8CC7\u6E90\uFF1B\u8CC7\u6E90\u4E0D\u5B58\u5728
# YMSG: return from  runtime plug in, in case of error from REL validation
24=\u6B04\u4F4D {0} \u767C\u751F\u932F\u8AA4\uFF1A {1}
# YMSG: return from  REST service, in case of http request contains non supported method
25=\u65B9\u6CD5\u5931\u6557\uFF1B\u4E0D\u652F\u63F4\u65B9\u6CD5 \#{0} 
# YMSG:  technical error from platform
26=\u767C\u751F\u6280\u8853\u932F\u8AA4 - {0}
# YMSG: return from resource activation, in case of a resource does not exist in repository
27=\u8CC7\u6E90\u4E0D\u5B58\u5728

# 100 - 200 - Authorization

# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
100=\u60A8\u6C92\u6709\u57F7\u884C\u6B64\u52D5\u4F5C\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
101=\u60A8\u6C92\u6709\u66F4\u65B0\u898F\u5247\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
102=\u60A8\u6C92\u6709\u522A\u9664\u898F\u5247\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
103=\u60A8\u6C92\u6709\u5EFA\u7ACB\u898F\u5247\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
104=\u60A8\u6C92\u6709\u8B80\u53D6\u898F\u5247\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
105=\u60A8\u6C92\u6709\u66F4\u65B0\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
106=\u60A8\u6C92\u6709\u522A\u9664\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
107=\u60A8\u6C92\u6709\u5EFA\u7ACB\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
108=\u60A8\u6C92\u6709\u8B80\u53D6\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
109=\u60A8\u6C92\u6709\u57F7\u884C\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
110=\u60A8\u6C92\u6709\u66F4\u65B0\u5B57\u5F59\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
111=\u60A8\u6C92\u6709\u522A\u9664\u5B57\u5F59\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
112=\u60A8\u6C92\u6709\u5EFA\u7ACB\u5B57\u5F59\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
113=\u60A8\u6C92\u6709\u8B80\u53D6\u5B57\u5F59\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
114=\u60A8\u6C92\u6709\u66F4\u65B0\u898F\u5247\u7BC4\u672C\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
115=\u60A8\u6C92\u6709\u522A\u9664\u898F\u5247\u7BC4\u672C\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
116=\u60A8\u6C92\u6709\u5EFA\u7ACB\u898F\u5247\u7BC4\u672C\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
117=\u60A8\u6C92\u6709\u8B80\u53D6\u898F\u5247\u7BC4\u672C\u7684\u6B0A\u9650
# YMSG: return from Request Handler, in case of unassigned privilege to perform an action 
118=\u60A8\u6C92\u6709\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\u670D\u52D9\u7684\u6B0A\u9650
#############################
# API: Validate
#############################
# 1100 - 1199 - REL validation messages

# YMSG: return from REL, the beginning of any REL validation error - in case of a wrong statement 
1100=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B
# YMSG: return from REL parser, in case of a wrong entry (syntax) and maximum 3 option are optional instead 
1101=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u8ACB\u8F38\u5165 {0} \u800C\u4E0D\u662F {1}
# YMSG: return from REL parser, in case of a wrong entry (syntax) and more than 3 option are optional instead  
1102=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B{0} \u975E\u6709\u6548\u8F38\u5165\u9805
# YMSG: return from REL parser, in case of a wrong input
1103=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u8ACB\u79FB\u9664 {0}
# YMSG: return from REL model, in case of collection OM when single value in needed
1104=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B{0} \u70BA\u503C\u6E05\u55AE\u3002 \u66F4\u6539\u70BA\u4EE3\u8868\u55AE\u4E00\u503C\u7684\u904B\u7B97\u5F0F\u3002
# YMSG: return from REL model, in case of a wrong input
1105=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u8ACB\u8F38\u5165\u6709\u6548\u7684\u904B\u7B97\u5143\u800C\u4E0D\u662F {0}
# YMSG: return from REL parser, in case of an incomplete expression
1106=\u904B\u7B97\u5F0F\u4E0D\u5B8C\u6574\uFF1B
# YMSG: return from REL lexer, in case of missing token at EOF
1107=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u8ACB\u5728\u904B\u7B97\u5F0F\u5C3E\u7AEF\u8F38\u5165 {0}
# YMSG: return from REL lexer, in case of wrong token
1108=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u8ACB\u8F38\u5165 {0} \u800C\u4E0D\u662F '{'1}
# YMSG: return from REL entity, in case of missing current
1109=\u904B\u7B97\u5F0F\u4E2D\u767C\u751F\u932F\u8AA4\uFF1B'where' \u5B50\u53E5\u4E2D\u7F3A\u5C11 'current'
# YMSG: return from REL entity, in case of redundant 'current'
1110=\u904B\u7B97\u5F0F\u4E2D\u767C\u751F\u932F\u8AA4\uFF1B\u591A\u9918\u7684 'current'\uFF1B\u8ACB\u79FB\u9664\u4E00\u500B 'current'
# YMSG: return from REL vocabulary utils, in case of invalid root object
1111=\u7121\u6548\u6839\u7269\u4EF6
# YMSG: return from REL vocabulary utils, in case of invalid association
1112=\u7121\u6548\u95DC\u806F
# YMSG: return from REL vocabulary utils, in case of invalid association or attribute
1113=\u7121\u6548\u7684\u95DC\u806F\u6216\u5C6C\u6027
# YMSG: return from REL vocabulary utils, in case of root is simple attribute
1114=\u6839\u4E0D\u53EF\u70BA\u7C21\u6613\u5C6C\u6027
# YMSG: return from REL vocabulary utils, in case of attribute not found
1115=\u8DEF\u5F91\u4E0D\u5B8C\u6574\uFF0C\u627E\u4E0D\u5230\u5C6C\u6027
# YMSG: return from REL entity, in case of using 'current' outside of 'where'
1116=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u95DC\u9375\u5B57 'current' \u50C5\u53EF\u7528\u65BC 'where' \u5B57\u53E5\u4E2D
# YMSG: return from REL entity, in case of using 'current' incorrectly with arithmetic
1117=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u5FC5\u9808\u5C07\u95DC\u9375\u5B57 'current' \u5957\u7528\u81F3 'where' \u5B50\u53E5\u4E2D\u6BD4\u8F03\u904B\u7B97\u5B50\u4E00\u5074\u7684\u6240\u6709\u904B\u7B97\u5143
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1118=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B'{0}' \u4E0D\u662F\u503C\u6E05\u55AE '{1}' \u4E2D\u7684\u6709\u6548\u503C
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1119=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B'{0}' \u904B\u7B97\u5B50\u4E0D\u53EF\u8207\u503C\u6E05\u55AE\u5C6C\u6027 ('{1}') \u4E00\u8D77\u4F7F\u7528
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1120=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u95DC\u9375\u5B57 'all' \u7121\u6CD5\u9075\u5FAA\u5305\u542B\u95DC\u9375\u5B57 'current' \u7684\u904B\u7B97\u5143
# YMSG: return from REL parser utils, in case of using value that doen't exist in closed value list
1121=\u904B\u7B97\u5F0F\u767C\u751F\u932F\u8AA4\uFF1B\u76F8\u540C\u9673\u8FF0\u5F0F\u4E2D\u7684\u95DC\u9375\u5B57 'all' \u4E0D\u53EF\u4F7F\u7528\u4E00\u6B21\u4EE5\u4E0A


# 1200 - 1999 - validation messages

#############################
# API : resource CRUD
#############################
# 2100 - 2299 - vocabulary messages

# YMSG: return from vocabulary runtime plug in, in case of error in expression
2100=\u5728 '{0}' \u4E2D - \u5256\u6790\u904B\u7B97\u5F0F\u6642\u767C\u751F\u932F\u8AA4\uFF1A'{1}'\u3001'{2}'
# YMSG: return from vocabulary runtime plug in, in case of error in rule
2101=\u5728 '{0}' \u4E2D - \u898F\u5247\u767C\u751F\u932F\u8AA4\uFF1A'{1}'\u3001'{2}'
# YMSG: return from vocabulary runtime plug in, in case the parameter type already exists
2102=\u5728 '{0}'\uFF1A'{1}' \u4E2D\uFF0C\u540D\u7A31\uFF1A'{2}' \u5DF2\u5B58\u5728
# YMSG: return from vocabulary runtime plug in, in case parameter name isn't valid
2103=\u5728 '{0}'\uFF1A'{1}' \u4E2D\uFF0C\u7121\u6548\u540D\u7A31\uFF1A'{2}'
# YMSG: return from vocabulary runtime plug in, in case one of action/output names aren't valid
2104=\u5728 '{0}'\u4E2D\uFF0C\u7121\u6548\u540D\u7A31\uFF1A'{1}'
# YMSG: return from vocabulary runtime plug in, in case name already exists
2105=\u540D\u7A31 '{0}' \u5DF2\u5728 '{1}' \u4E2D\u5B9A\u7FA9\u8D85\u904E\u4E00\u6B21
# YMSG : return from vocabulary runtime plug in, in case the output has no parameters
2106=\u8F38\u51FA\u4E2D\u7F3A\u5C11\u53C3\u6578
# YMSG: return from vocabulary runtime plug in, in case one of the attributes has an invalid name
2107=\u7121\u6548\u5C6C\u6027\u540D\u7A31 '{0}'
# YMSG: return from vocabulary runtime plug in, in case object name of declare more than once
2108={0}\uFF1A'{'1} \u5DF2\u5B58\u5728\u3002 
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2109=\u5C6C\u6027\u5DF2\u5B58\u5728\uFF1A\u7269\u4EF6 \= '{0}' \u5C6C\u6027 \= '{1}'
# YMSG: return from vocabulary runtime plug in, in case attribute name of declare more than once
2110=\u95DC\u806F\u5DF2\u5B58\u5728\uFF1A\u7269\u4EF6 \= '{0}' \u95DC\u806F \= '{1}'
# YMSG : return from vocabulary runtime plug in, in case the source table isn't exists
2111=\u7121\u6548\u4F86\u6E90\u8868\u683C '{0}'
# YMSG : return from vocabulary runtime plug in, in case of one the association is invalid
2112=\u7269\u4EF6 \='{0}' + \u95DC\u806F \='{1}' \u4E2D\u7684\u95DC\u806F\u7121\u6548
# YMSG : return from vocabulary runtime plug in, in case of one the association's attributes are invalid
2113=\u95DC\u806F \='{0}' \u5C6C\u6027 \='{1}' \u7684\u5C6C\u6027\u7121\u6548
# YMSG: return from rule utils, in case of invalid vocabulary assignment
2114=\u5B57\u5F59 '{0}' \u7121\u6548
# YMSG: return from vocabulary runtime plug in, in case invalid alias content
2115=\u5225\u540D '{0}' \u7684\u5167\u5BB9\u7121\u6548\uFF1B\u539F\u56E0\uFF1A'{1}'
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2116=\u5225\u540D\u540D\u7A31 '{0}'  \u7121\u6548\u3002 \u5225\u540D\u540D\u7A31\u50C5\u53EF\u5305\u542B\u6587\u6578\u5B57\u6216\u5E95\u7DDA\u5B57\u5143\uFF0C\u5176\u958B\u982D\u5FC5\u9808\u70BA\u6587\u6578\u5B57\u5B57\u5143\uFF0C\u4E14\u4E0D\u53EF\u70BA\u898F\u5247\u904B\u7B97\u5F0F\u8A9E\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case alias name collide with an data object name
2117=\u5225\u540D '{0}' \u7684\u540D\u7A31\u7121\u6548\uFF1B\u5225\u540D\u5DF2\u5B58\u5728\u4F5C\u70BA\u8CC7\u6599\u7269\u4EF6\u540D\u7A31
# YMSG: return from vocabulary runtime plug in, in case o alias dependency to itself
2118=\u5225\u540D '{0}' \u7684\u5167\u5BB9\u7121\u6548\uFF1B\u89E3\u6790\u5225\u540D\u5C07\u5C0E\u81F4\u7121\u9650\u8FF4\u5708
# YMSG: return from vocabulary runtime plug in, when name already exists in another vocabulary in the DB. Example: In 'dataObjects', name 'player' already exists in 'aliases' vocabulary 'voca2'
2120=\u5728 '{0}' \u4E2D\uFF0C\u5B57\u5F59 '{3}' \u4E2D\u7684 '{2}' \u5DF2\u6709\u540D\u7A31 '{1}'
# YMSG: return from vocabulary runtime plug in, scope name can't be Public or Private
2121=\u7121\u6548\u7BC4\u570D\u540D\u7A31\uFF1B\u7BC4\u570D\u540D\u7A31\u4E0D\u53EF\u70BA '\u516C\u7528' \u6216 '\u79C1\u4EBA'
# YMSG: return from vocabulary runtime plug in, embedded vocabulary can't be with scope Global
2122=\u7121\u6548\u7BC4\u570D\u540D\u7A31\uFF1B\u5167\u5D4C\u5B57\u5F59\u4E0D\u53EF\u70BA\u985E\u578B '\u901A\u7528'
# YMSG: Object does not exist
2125=\u7269\u4EF6 '{0}' \u4E0D\u5B58\u5728
# YMSG: return from vocabulary runtime plug in, in case of a wrong data object name 
2126=\u8CC7\u6599\u7269\u4EF6  '{0}' \u7684\u540D\u7A31\u7121\u6548\uFF1B\u8CC7\u6599\u7269\u4EF6\u7684\u540D\u7A31\u4E0D\u53EF\u70BA\u73FE\u6709\u898F\u5247\u7BC4\u672C\u540D\u7A31\u6216\u4E0B\u5217\u5176\u4E2D\u4E00\u500B\u4FDD\u7559\u5B57 (\u50C5\u5340\u5206\u5927\u5C0F\u5BEB)\uFF1A rule\u3001ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case of a wrong alias name
2127=\u5225\u540D\u540D\u7A31 '{0}' \u7121\u6548\u3002 \u5225\u540D\u540D\u7A31\u4E0D\u53EF\u70BA\u73FE\u6709\u5225\u540D\u7BC4\u672C\u540D\u7A31\u6216\u4E0B\u5217\u5176\u4E2D\u4E00\u500B\u4FDD\u7559\u5B57 (\u50C5\u5340\u5206\u5927\u5C0F\u5BEB)\uFF1A rule, ruleTemplate
# YMSG: return from vocabulary runtime plug in, in case invalid data object name
2128=\u8CC7\u6599\u7269\u4EF6  '{0}' \u7684\u540D\u7A31\u7121\u6548\uFF1B\u8CC7\u6599\u7269\u4EF6\u540D\u7A31\u50C5\u53EF\u5305\u542B\u6587\u6578\u5B57\u6216\u5E95\u7DDA\u5B57\u5143\uFF0C\u5176\u958B\u982D\u5FC5\u9808\u70BA\u6587\u6578\u5B57\u5B57\u5143\uFF0C\u4E14\u4E0D\u53EF\u70BA\u898F\u5247\u904B\u7B97\u5F0F\u8A9E\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case of duplicate alias names
2129=\u5225\u540D '{0}' \u5DF2\u5B58\u5728\u4F5C\u70BA\u5225\u540D\u540D\u7A31
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2130=\u5225\u540D '{0}' \u4E2D\u7684\u5167\u5BB9\u53C3\u6578\u7A7A\u767D
# YMSG: return from vocabulary runtime plug in, in case alias name exists as as an attribute name
2131=\u5225\u540D\u540D\u7A31 '{0}' \u7121\u6548\uFF1B\u5225\u540D\u5DF2\u5B58\u5728\u4F5C\u70BA\u5C6C\u6027\u540D\u7A31
# YMSG: return from vocabulary runtime plug in, in case alias name exists in other vocabulary with the same scope
2132=\u5225\u540D\u540D\u7A31 '{0}' \u7121\u6548\uFF1B\u540D\u7A31\u5DF2\u5B58\u5728\u4F5C\u70BA\u5B57\u5F59 '{2}' \u4E2D\u7269\u4EF6 '{1}' \u7684\u5C6C\u6027
# YMSG: return from vocabulary runtime plug in, in case alias name exists in objects rule or ruleTemplate
2133=\u5225\u540D\u540D\u7A31 '{0}' \u7121\u6548\uFF1B\u7269\u4EF6 '{1}' \u5DF2\u6709\u8A72\u540D\u7A31
# YMSG: return from vocabulary runtime plug in, in case attribute name already exists as alias in other vocabulary
2134=\u5C6C\u6027 '{0}' \u7684\u540D\u7A31\u7121\u6548\uFF1B\u540D\u7A31\u5DF2\u5B58\u5728\u4F5C\u70BA\u5B57\u5F59 '{1}' \u4E2D\u7684\u5225\u540D
# YMSG: return from vocabulary runtime plug in, in case vocabulary declares it depends on a vocabulary which doesn't exists
2135=\u5B57\u5F59\u6307\u5B9A\u8207\u4E0D\u5B58\u5728\u7684\u5B57\u5F59 '{0}' \u7684\u76F8\u95DC\u6027
# YMSG: return from vocabulary runtime plug in, in case implementor declare global vocabulary with dependencies
2136=\u901A\u7528\u5B57\u5F59\u4E0D\u53EF\u5305\u542B\u8207\u5176\u4ED6\u5B57\u5F59\u7684\u76F8\u95DC\u6027
# YMSG: return from vocabulary runtime plug in, in case, in the same data object, there is association and attribute with the same name
2137=\u5728\u8CC7\u6599\u7269\u4EF6 '{0}' \u4E2D\uFF0C\u540D\u7A31  '{1}' \u7528\u65BC\u95DC\u806F\u548C\u5C6C\u6027\u4F7F\u7528\u3002 \u8A72\u540D\u7A31\u4E0D\u53EF\u7528\u65BC\u5169\u7A2E\u5C6C\u6027\u3002
# YMSG: return from vocabulary runtime plug in, in case invalid alias name
2138=\u503C\u6E05\u55AE '{0}' \u7684\u540D\u7A31\u7121\u6548\u3002 \u503C\u6E05\u55AE\u7684\u540D\u7A31\u50C5\u53EF\u5305\u542B\u6587\u6578\u5B57\u6216\u5E95\u7DDA\u5B57\u5143\uFF0C\u5176\u958B\u982D\u5FC5\u9808\u70BA\u6587\u6578\u5B57\u5B57\u5143\uFF0C\u4E14\u4E0D\u53EF\u70BA\u898F\u5247\u904B\u7B97\u5F0F\u8A9E\u8A00\u4E2D\u7684\u4FDD\u7559\u5B57\u3002
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2139=\u503C\u6E05\u55AE '{0}' \u7684\u5167\u5BB9\u7A7A\u767D
# YMSG: return from vocabulary runtime plug in, in case alias content is empty
2140=\u8CC7\u6599\u7269\u4EF6 '{2}' \u7684\u5C6C\u6027 '{1}' \u4E2D\u5B9A\u7FA9\u7684\u503C\u6E05\u55AE '{0}' \u4E0D\u5B58\u5728
# YMSG: return from vocabulary runtime plug in, in case parameter size isn't valid
2141=\u65BC '{'0} \u4E2D '{'3} \u5167\u7684\u53C3\u6578 '{'2} \u5927\u5C0F ({1}) \u5C0D\u6307\u5B9A\u7684\u8CC7\u6599\u985E\u578B\u7121\u6548\u3002
# YMSG: return from vocabulary - in case parameter content cannot be a collection 
2142=\u52D5\u4F5C\u53C3\u6578 '{1}' \u4E2D\u52D5\u4F5C '{0}' \u7684\u53C3\u6578\u5B9A\u7FA9\u7121\u6548\u3002 \u4E0D\u5141\u8A31\u52D5\u4F5C\u4E2D\u7684\u985E\u578B\u96C6\u5408\u53C3\u6578\u3002                                                                                                                                                                   .




# 2300 - 2499 rule template messages

# YMSG: return from Rule Template runtime plug in, in case of rule template name starts with a number
2300=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\u7BC4\u672C\uFF1B\u898F\u5247\u7BC4\u672C\u540D\u7A31\u7684\u958B\u982D\u4E0D\u53EF\u70BA\u6578\u5B57
# YMSG: return from Rule Template runtime plug in, in case of illegal change in rule template attributes
2301=\u898F\u5247\u7BC4\u672C\u555F\u7528\u5305\u542B\u4E0D\u76F8\u5BB9\u7684\u66F4\u6539\uFF1B
# YMSG: return from Rule Template runtime plug in, in case of rule template update contains condition change
2302=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\u7BC4\u672C\uFF1B\u7121\u6CD5\u66F4\u6539\u898F\u5247\u7BC4\u672C\u689D\u4EF6
# YMSG: return from Rule Template runtime plug in, in case of rule template contains invalid condition 
2303=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\u7BC4\u672C\uFF1B\u689D\u4EF6 '{0}' \u7121\u6548
# YMSG: return from Rule Template runtime plug in, in case of rule template deletion when there are rules assigned to the rule template  
2304=\u7121\u6CD5\u522A\u9664\u898F\u5247\u7BC4\u672C {0}\u3002 \u6B64\u898F\u5247\u7BC4\u672C\u542B\u898F\u5247\uFF1B
# YMSG: return from Rule Template runtime plug in, in case of duplicate rule template name  
2305=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u7BC4\u672C\uFF1B\u5957\u4EF6 '{1}' \u4E2D\u5DF2\u6709\u898F\u5247\u7BC4\u672C '{0}'
# YMSG: return from Rule Template runtime plug in, in case that rule template name starts with a number  
2306=\u898F\u5247\u7BC4\u672C\u540D\u7A31 - '{0}' \u7684\u958B\u982D\u4E0D\u53EF\u70BA\u6578\u5B57
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as data object  
2307=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u7BC4\u672C '{0}'\uFF1B\u898F\u5247\u7BC4\u672C\u7684\u540D\u7A31\u5DF2\u4F5C\u70BA\u5B57\u5F59 '{1}' \u4E2D\u7684\u8CC7\u6599\u7269\u4EF6\u4F7F\u7528
# YMSG: return from Rule Template runtime plug in, in case that rule template name already exist as alias
2308=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u7BC4\u672C '{0}'\uFF1B\u898F\u5247\u7BC4\u672C\u7684\u540D\u7A31\u5DF2\u4F5C\u70BA\u5B57\u5F59 '{1}' \u4E2D\u7684\u5225\u540D\u4F7F\u7528


# 2500 - 2699 - rule messages

# YMSG: return from Rule runtime plug in, in case of resource contains additional attributes but not assigned to rule template   
2500=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\uFF1B\u5DF2\u8F38\u5165\u9644\u52A0\u5C6C\u6027\uFF0C\u5373\u4F7F\u898F\u5247\u672A\u4EE5\u7BC4\u672C\u70BA\u57FA\u790E
# YMSG: return from Rule runtime plug in, in case of rule template assignment change   
2501=\u7121\u6CD5\u66F4\u65B0\u898F\u5247\uFF1B\u4E00\u65E6\u5EFA\u7ACB\u898F\u5247\u5F8C\uFF0C\u5247\u7121\u6CD5\u66F4\u6539\u898F\u5247\u7BC4\u672C\u6307\u6D3E
# YMSG: return from Rule runtime plug in, in case of vocabulary change  
2502=\u7121\u6CD5\u66F4\u65B0\u898F\u5247\uFF1B\u4E00\u65E6\u5EFA\u7ACB\u898F\u5247\u5F8C\uFF0C\u5247\u7121\u6CD5\u66F4\u6539\u5B57\u5F59\u6307\u6D3E
# YMSG: return from Rule runtime plug in, in case of output change   
2503=\u7121\u6CD5\u66F4\u65B0\u898F\u5247\uFF1B\u4E00\u65E6\u5EFA\u7ACB\u898F\u5247\u5F8C\uFF0C\u5247\u7121\u6CD5\u66F4\u6539\u8F38\u51FA\u6307\u6D3E
# YMSG: return from Rule runtime plug in, in case of rule contains additional attributes where assigned rule template does not contains additional attributes
2504=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\uFF1B\u5DF2\u8F38\u5165\u4E0D\u5C6C\u65BC\u6307\u6D3E\u898F\u5247\u7BC4\u672C\u7684\u9644\u52A0\u5C6C\u6027
# YMSG: return from Rule runtime plug in, in case of execution context change
2505=\u7121\u6CD5\u66F4\u65B0\u898F\u5247\uFF1B\u4E00\u65E6\u5EFA\u7ACB\u898F\u5247\u5F8C\uFF0C\u5247\u7121\u6CD5\u66F4\u6539\u57F7\u884C\u5167\u5BB9\u6307\u6D3E
# YMSG: return from Rule runtime plug in, in case of invalid rule template assignment
2506=\u898F\u5247\u7BC4\u672C '{0}' \u7121\u6548
# YMSG: return from Rule runtime plug in, in case of invalid status transition
2507=\u7121\u6CD5\u66F4\u65B0\u898F\u5247\uFF1B\u60A8\u7121\u6CD5\u81EA\u72C0\u614B '{0}' \u66F4\u6539\u70BA '{1}'
# YMSG: return from Rule runtime plug in, in case of updating single consumption to non single consumption Rule
2510=\u4E0D\u5141\u8A31\u79FB\u9664\u5167\u5D4C\u670D\u52D9
# YMSG: return from Rule runtime plug in, in case of updating single embedded service in Rule
2511=\u4E0D\u5141\u8A31\u79FB\u9664\u6216\u66F4\u6539\u5167\u5D4C\u670D\u52D9
# YMSG: return from Rule runtime plug in, in case of more than one embedded services with the same name
2512=\u5167\u5D4C\u670D\u52D9\u540D\u7A31 - '{0}'\uFF0C\u5B58\u5728\u4E00\u6B21\u4EE5\u4E0A
# YMSG: return from Rule runtime plug in - update/create, in case the rule body is not valid
2513=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\uFF1B\u898F\u5247\u4E3B\u9AD4\u7121\u6548
# YMSG: return from Rule body validator - in case parameter is referenced to an unknown action
2514=\u7121\u6548\u7684\u53C3\u6578\u5B9A\u7FA9\uFF1B\u53C3\u6578\u7684\u53C3\u8003\u70BA\u5B57\u5F59\u4E2D\u6C92\u6709\u7684\u52D5\u4F5C '{0}'
# YMSG: return from Rule body validator - in case parameter name isn't a valid parameter for action
2515=\u7121\u6548\u7684\u53C3\u6578\u5B9A\u7FA9\uFF1B\u5B57\u5F59\u4E2D\u7684\u52D5\u4F5C '{1}' \u6C92\u6709\u53C3\u6578\u540D\u7A31 '{0}'
# YMSG: return from Rule body validator - in case action doesn't exist in the vocabulary
2516=\u5B57\u5F59\u4E2D\u6C92\u6709\u52D5\u4F5C '{0}'
# YMSG: return from Rule body validator - when the sent parameter isn't a required parameter in the sent output 
2517=\u7121\u6548\u7684\u53C3\u6578\u5B9A\u7FA9\uFF1B\u5B57\u5F59\u4E2D\u7684\u8F38\u51FA '{1}' \u6C92\u6709\u53C3\u6578\u540D\u7A31 '{0}'
# YMSG: return from Rule body validator - when the sent output doesn't exists in the vocabulary
2518=\u5B57\u5F59\u4E2D\u6C92\u6709\u8F38\u51FA '{0}'
# YMSG: return from Rule body validator - when alias has more than one output parameter column
2519=\u5225\u540D\u6709\u4E00\u500B\u4EE5\u4E0A\u7684\u8F38\u51FA\u53C3\u6578
# YMSG: return from Rule body validator - when the alias output parameters values do not have the same type X
2520=\u8F38\u51FA\u53C3\u6578 '{0}' \u7684\u6240\u6709\u503C\u5FC5\u9808\u70BA\u76F8\u540C\u985E\u578B
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that does not exist.
2521=\u7121\u6CD5\u5C07\u898F\u5247 '{0}' \u6307\u6D3E\u7D66\u898F\u5247\u670D\u52D9 '{1}'\uFF1B\u898F\u5247\u670D\u52D9\u4E0D\u5B58\u5728
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different vocabulary.
2522=\u7121\u6CD5\u5C07\u898F\u5247 '{0}' \u6307\u6D3E\u7D66\u898F\u5247\u670D\u52D9 '{1}'\uFF1B\u898F\u5247\u670D\u52D9\u548C\u898F\u5247\u5FC5\u9808\u5DF2\u5B9A\u7FA9\u76F8\u540C\u5B57\u5F59
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service with different output.
2523=\u7121\u6CD5\u5C07\u898F\u5247 '{0}' \u6307\u6D3E\u7D66\u898F\u5247\u670D\u52D9 '{1}'\uFF1B\u898F\u5247\u670D\u52D9\u548C\u898F\u5247\u5FC5\u9808\u5DF2\u5B9A\u7FA9\u76F8\u540C\u8F38\u51FA
# YMSG: return from Rule runtime plug in, in case of assign rule to rule service that is not indicated as manually assigned.
2524=\u7121\u6CD5\u5C07\u898F\u5247 '{0}' \u6307\u6D3E\u7D66\u898F\u5247\u670D\u52D9 '{1}'\u3002 \u898F\u5247\u670D\u52D9\u5DF2\u91DD\u5C0D\u81EA\u52D5\u898F\u5247\u6307\u6D3E\u800C\u8A2D\u5B9A\uFF0C\u56E0\u6B64\u4E0D\u5141\u8A31\u624B\u52D5\u6307\u6D3E\u3002
# YMSG: return from Rule runtime plug in - update/create, in case a custom condition is not valid
2525=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\uFF1B'{0}' \u4E0D\u662F\u6709\u6548\u689D\u4EF6
# YMSG: return from Rule body validator - when ruleBody of type ruleSet has more than one condition column
2526=\u7121\u6548\u898F\u5247\u96C6\uFF1B\u898F\u5247\u96C6\u5167\u7684\u898F\u5247\u5177\u6709\u4E00\u500B\u4EE5\u4E0A\u7684\u689D\u4EF6


# 2700 - 2899 - rule service messages

# YMSG: return from Rule service plug in, in case of wrong data object filter
2700=\u898F\u5247\u670D\u52D9\u7BE9\u9078\u767C\u751F\u932F\u8AA4
# YMSG: return from Rule service plug in, in case of different data objects in execution context and filter
2701=\u57F7\u884C\u5167\u5BB9\u4E2D\u7684\u8CC7\u6599\u7269\u4EF6 - '{0}' \u548C\u7BE9\u9078\u4E2D\u7684\u8CC7\u6599\u7269\u4EF6 - '{1}' \u4E0D\u540C
# YMSG: return from  runtime plug in, in case of specified data object does not have the specified attribute (e.g. data object keys in rule service definition).
2704=\u7121\u6CD5\u5EFA\u7ACB\u6216\u66F4\u65B0\u898F\u5247\u670D\u52D9\uFF1B\u5B57\u5F59 {1} \u7684\u8CC7\u6599\u7269\u4EF6 {0} \u4E0D\u5305\u542B\u5C6C\u6027 {2}
# YMSG: return from runtime plug in, in case of parameter mapping path contains a collection
2705=\u4E0D\u5141\u8A31\u542B\u96C6\u5408\u7684\u8DEF\u5F91\u3002 \u8DEF\u5F91\uFF1A {0};
# YMSG: return from runtime plug in, in case of data object mapping entry is not unique within an execution context .
2706=\u8CC7\u6599\u7269\u4EF6 - {0} \u542B\u91CD\u8986\u5C0D\u6620\uFF1B
# YMSG: return from  runtime plug in, in case of parameter definition entry is not unique within an execution context .
2707=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u670D\u52D9\uFF1B\u53C3\u6578 {0} \u91CD\u8986
# YMSG: return from  runtime plug in, in case of parameter mapping entry doesn't have a match parameter definition entry with in an execution context
2708=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u670D\u52D9\uFF1B\u53C3\u6578 {0} \u4E0D\u5B58\u5728\u4E14\u8207\u8CC7\u6599\u7269\u4EF6\u76F8\u95DC
# YMSG: return from  runtime plug in, in case of ifentifiers in dataObject type parameter do not exist in data object from vocabulary
2709=\u898F\u5247\u670D\u52D9 '{0}' \u4E2D\u7684\u53C3\u6578\u5B9A\u7FA9\u7121\u6548\u3002 \u5728\u53C3\u6578 '{1}' \u4E2D\uFF0C'{2}' \u4E0D\u662F\u5B57\u5F59\u7BC4\u570D '{4}' \u4E2D\u8CC7\u6599\u7269\u4EF6 '{3}' \u7684\u6709\u6548\u5C6C\u6027\u3002
# YMSG: return from runtime plug in, in case of data object definition entry is not unique within parameter definition if service.
2710=\u898F\u5247\u670D\u52D9 '{0}' \u4E2D\u7684\u53C3\u6578\u5B9A\u7FA9\u7121\u6548\uFF1B\u8CC7\u6599\u7269\u4EF6 '{1}' \u5DF2\u7531\u4E00\u500B\u4EE5\u4E0A\u7684\u53C3\u6578\u53C3\u8003
# YMSG: return from runtime plug in, only read-only rule services can be indicated to be created with result view
2711=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u670D\u52D9 '{0}'\uFF1B\u542B\u7D50\u679C\u6AA2\u8996\u7684\u898F\u5247\u670D\u52D9\u5FC5\u9808\u6307\u793A\u70BA\u552F\u8B80
# YMSG: return from runtime plug in, only explicit output rule services can be indicated to be created with result view
2712=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u670D\u52D9 '{0}'\uFF1B\u542B\u7D50\u679C\u6AA2\u8996\u7684\u898F\u5247\u670D\u52D9\u5FC5\u9808\u5B9A\u7FA9\u660E\u78BA\u8F38\u51FA
# YMSG: returned from request handler. Rule requested to be removed from rule service but the rule is not assigned to it
2713=\u7121\u6CD5\u79FB\u9664\u898F\u5247\u6307\u6D3E\uFF1B\u672A\u5C07\u898F\u5247 '{0}' \u6307\u6D3E\u7D66\u898F\u5247\u670D\u52D9
# YMSG: return from  runtime plug in, in case of output contains collection parameter in event mode scenario
2714=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u670D\u52D9 '{0}'\u3002 \u60A8\u7121\u6CD5\u5B9A\u7FA9\u898F\u5247\u670D\u52D9\u7684\u985E\u578B\u96C6\u5408\u53C3\u6578\u8F38\u51FA\uFF0C\u8A72\u898F\u5247\u670D\u52D9\u6C92\u6709\u5176\u57F7\u884C\u5167\u5BB9\u4E2D\u6240\u5B9A\u7FA9\u7684\u8CC7\u6599\u7269\u4EF6\u3002
# 2900 - 2949 - post activation / completeActivation

# 2950 - 2999 - common resource CRUD


# YMSG: return from Request Handler, in case of url parameter that isn't valid
2955=URL \u53C3\u6578\uFF1A {0} \u7121\u6548
# YMSG: return from Request Handler, in case of unsupported request mode
2956=\u4E0D\u652F\u63F4\u6A21\u5F0F \#{0} 
# YMSG: return from Request Handler, in case of unsupported metadata
2957=\u4E0D\u652F\u63F4\u5F8C\u8CC7\u6599
# YMSG: return from Request Handler, in case of unsupported metadata for method
2958=\u50C5\u80FD\u4F7F\u7528\u8ACB\u6C42\u65B9\u6CD5 GET \u53D6\u5F97\u5F8C\u8CC7\u6599


# YMSG: returned when wrong query is generated (during procedure generation). 2 causes: Bug in process or there is no mapping from vocabulary to real table / column
2970=\u67E5\u8A62\u7522\u751F\u767C\u751F\u932F\u8AA4\u6216\u5C0D\u6620\u7121\u6548
# YMSG: returned if for some reason the parser returned undefined parse model. Can be bad rule syntax or a bug
2971=\u672A\u5B9A\u7FA9\u5256\u6790\u6A21\u578B
# YMSG: query generation needs either leading object and at least one key or a mapping to parameters. The error is returned if something is missing 
2972=\u4E3B\u8981\u7269\u4EF6\u3001\u9375\u503C\u548C\u5C0D\u6620\u7D44\u5408\u7121\u6548
# YMSG: returned when there is no association between 2 objects in vocabulary
2973=\u7121\u6548\u95DC\u806F - \u6C92\u6709\u5C6C\u6027
# YMSG: returned when there is a use of attribute based on predictive model but the procedure for the predictive model is not defined
2974=\u627E\u4E0D\u5230\u9810\u6E2C\u6A21\u7D44\u7A0B\u5E8F {0} 
# YMSG: outputs tanle type is mandatory. error when missing 
2975=\u7121\u6548\u7684\u7D50\u679C\u8CC7\u6599
# YMSG: error when is out name is missing in vocabulary output names 
2976=\u7121\u6548\u7684\u8F38\u51FA\u540D\u7A31
# YMSG: error when rule body type is different from text or decisionTable 
2977=\u7121\u6548\u7684\u898F\u5247\u4E3B\u9AD4\u985E\u578B
# YMSG: return from Runtime plugins, in case of unsupported change mode
2978=\u8CC7\u6E90\u4E0D\u652F\u63F4\u66F4\u6539\u6A21\u5F0F '{0}'
# YMSG: return from Runtime plugin - generate, for informing on the change mode for current resource
2979=\u8CC7\u6E90\u7522\u751F\uFF0C\u4F4D\u65BC\u66F4\u6539\u6A21\u5F0F\uFF1A'{0}'
# YMSG: return when expression  
2980=\u5256\u6790\u904B\u7B97\u5F0F\u6642\u767C\u751F\u932F\u8AA4\uFF1A'{0}'
# YMSG: return when expression  
2981=\u7121\u6CD5\u5EFA\u7ACB\u898F\u5247\u7BC4\u672C '{0}'\uFF1B\u540D\u7A31\u5DF2\u7531\u5B57\u5F59 '{1}' \u4E2D\u7684\u5176\u4E2D\u4E00\u500B\u8CC7\u6599\u7269\u4EF6\u6240\u4F7F\u7528



#############################
# API: Get params
#############################

# 3100 - 3999 - get params messages

# YMSG: return from  ruleBodyAnalyzer, in case of businessRule.type is not text
3100=\u696D\u52D9\u8CC7\u6599\u985E\u578B\u9700\u70BA\u6587\u5B57
# YMSG: return from  ruleBodyAnalyzer, in case of Vocabulary is missing
3101=\u7F3A\u5C11\u5B57\u5F59

#############################/
# API: Rule service consumption
#############################/
# 4100 - 4999 messages

# YMSG: return message in case the output is partial
4100=\u5DF2\u986F\u793A {0} \u500B\u9805\u76EE\u3002 \u8ACB\u6CE8\u610F\uFF0C\u9019\u53EA\u662F\u7D50\u679C\u96C6\u7684\u4E00\u90E8\u4EFD\u3002 \u82E5\u5C07\u5132\u5B58\u7D50\u679C\u7684\u65D7\u6A19\u8A2D\u5B9A\u70BA TRUE\uFF0C\u5247\u5B8C\u6574\u7D50\u679C\u96C6\u53EF\u5728 '{'1} \u8F38\u51FA\u8868\u683C\u4E2D\u627E\u5230\u3002

#############################/
# Halm and Installation
#############################/

# YMSG: Post Activation API success
10000=\u5DF2\u6210\u529F\u5B8C\u6210 SAP HANA \u898F\u5247\u67B6\u69CB\u7684\u7D44\u614B\u6307\u4EE4\u78BC
# YMSG: Post Activation API failed
10001=SAP HANA \u898F\u5247\u67B6\u69CB\u7684\u7D44\u614B\u6307\u4EE4\u78BC\u767C\u751F\u932F\u8AA4\u3002 {0}
# YMSG: Post Activation API failed
10002=\u5DF2\u5075\u6E2C\u5230 SAP HANA \u898F\u5247\u67B6\u69CB Web \u61C9\u7528\u7A0B\u5F0F\u7684\u73FE\u6709\u7D44\u614B\u3002 \u56E0\u6B64\uFF0C\u4E0D\u5141\u8A31\u8A2D\u5B9A Web \u61C9\u7528\u7A0B\u5F0F\u7684\u9810\u8A2D\u7D44\u614B\u3002
# YMSG: Post Activation API failed
10003=\u7531\u65BC\u6280\u8853\u932F\u8AA4\uFF0C\u56E0\u6B64 SAP HANA \u898F\u5247\u67B6\u69CB Web \u61C9\u7528\u7A0B\u5F0F\u7D44\u614B\u5931\u6557\u3002 \u539F\u56E0\uFF1A {0}
# YMSG: Post Activation API failed
10004=\u7CFB\u7D71\u4E2D\u5DF2\u6709\u542B\u5D4C\u5165\u5F0F\u670D\u52D9\u7684\u898F\u5247\u670D\u52D9\u6216\u898F\u5247\u3002 \u56E0\u6B64\u4E0D\u5141\u8A31\u66F4\u65B0\u6642\u5340\u3002
# YMSG: Post Activation API failed
10005=\u7CFB\u7D71\u4E2D\u5DF2\u6709\u542B\u5D4C\u5165\u5F0F\u670D\u52D9\u7684\u898F\u5247\u670D\u52D9\u6216\u898F\u5247\u3002 \u56E0\u6B64\u4E0D\u5141\u8A31\u66F4\u65B0\u57F7\u884C\u6642\u671F\u7DB1\u8981\u3002
