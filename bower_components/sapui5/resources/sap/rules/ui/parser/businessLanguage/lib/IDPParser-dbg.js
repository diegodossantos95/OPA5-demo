jQuery.sap.declare("sap.rules.ui.parser.businessLanguage.lib.IDPParser");

// $ANTLR 3.3 Nov 30, 2010 12:45:30 IDP.g 2017-02-06 17:17:05

/****************************************************************
* Import relevant libraries
****************************************************************/
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.antlr3_all_min");
//var org = $.sap.hrf.businessLanguage.lib.antlr3_all_min.lib;

jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.entityModel");
//var this.entityModelLib = $.sap.hrf.businessLanguage.lib.entityModel;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.parseModel");
//var this.parseModelLib = $.sap.hrf.businessLanguage.lib.parseModel;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.constants");
//var constantsLib = $.sap.hrf.businessLanguage.lib.constants;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.parseUtils");
//var this.parseUtilsLib = $.sap.hrf.businessLanguage.lib.parseUtils;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.vocabularyUtils");
//var vocabularyUtilLib = $.sap.hrf.businessLanguage.lib.vocabularyUtils;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.termsUtils");
//var this.termsUtilsLib = $.sap.hrf.businessLanguage.lib.termsUtils;
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.entityModelConstractor");
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.utils");
jQuery.sap.require("sap.rules.ui.parser.businessLanguage.lib.numberConversion");
/****************************************************************
****************************************************************/

/****************************************************************
* Define global variables
****************************************************************/
//var org = antlrLib.org;




sap.rules.ui.parser.businessLanguage.lib.IDPParser = sap.rules.ui.parser.businessLanguage.lib.IDPParser|| {}; 
sap.rules.ui.parser.businessLanguage.lib.IDPParser.lib = (function() {
var org = sap.rules.ui.parser.businessLanguage.lib.antlr3_all_min.lib;
var IDPParser = function(input, state) {
    if (!state) {
        state = new org.antlr.runtime.RecognizerSharedState();
    }

    (function(){


                    var parseUtils =  sap.rules.ui.parser.businessLanguage.lib.parseUtils.lib;
                    this.parseUtilsLib = new parseUtils.parseUtilsLib();
                    var termsUtils =  sap.rules.ui.parser.businessLanguage.lib.termsUtils.lib;
                    this.termsUtilsLib = new termsUtils.termsUtilsLib();
                    var parseModel =  sap.rules.ui.parser.businessLanguage.lib.parseModel.lib;
                    this.parseModelLib = new parseModel.parseModelLib();
                    this.entityModelLib = sap.rules.ui.parser.businessLanguage.lib.entityModel.lib;
                    this.constantsLib = sap.rules.ui.parser.businessLanguage.lib.constants.lib;
                    var vocabularyUtil = sap.rules.ui.parser.businessLanguage.lib.vocabularyUtils.lib;
                    this.vocabularyUtilLib = new vocabularyUtil.vocabularyUtilsLib();
                    this.entityModelConstractorLib =  sap.rules.ui.parser.businessLanguage.lib.entityModelConstractor.lib;
                    this.utilsLib = new sap.rules.ui.parser.businessLanguage.lib.utils.lib();
        	    this.numberConversionLib = sap.rules.ui.parser.businessLanguage.lib.numberConversion.lib;


            this.updateLTType = function(lt_output) {

                var modelManager = this.parseModelLib.getModelManger();
                var contextLength = modelManager.contextQueue.length;
                if (contextLength === 0) {
                    return lt_output;
                }

                var currentContext = modelManager.contextQueue[contextLength - 1];
                if (currentContext.root.isAlias || currentContext.root.isParameter) {
                    return lt_output;
                }

                var nuOfAssosc = currentContext.associations.path.length;
                var contextDO = (nuOfAssosc > 0) ? currentContext.associations.path[nuOfAssosc - 1].object : currentContext.root.name;

                if (lt_output.type === IDPParser.EOF || currentContext.index >= lt_output.index || lt_output.type === IDPParser.NAVIGATION || this.parseUtilsLib.isCollectionOperator(this.input.LT(-1).type) || this.input.LT(-1).type === IDPParser.CURRENT) {
        			
        			if (this.input.LT(-1).type !== IDPParser.CURRENT || lt_output.type === IDPParser.EOF || lt_output.type === IDPParser.NAVIGATION) {
        				this.isInsideWhere = (this.isInsideWhere ? true : modelManager.isInsideWhere);
        				this.disableAliases = modelManager.disableAliases;
        				this.context = contextDO;
        				this.fullContext = currentContext;
        			}

                    if (lt_output.type !== IDPParser.NAVIGATION) {
                        return lt_output;
                    }
                }

                var nav = lt_output.input.data.slice(lt_output.start, lt_output.stop + 1);
                var currentText = nav;
                if (lt_output.type === IDPParser.NAVIGATION) {

                    var contextSplit = currentContext.navigation.split(".");

                    // In case of collection of DOs - player.session
                    if (currentContext.attribute.isValid) {
                        contextSplit.pop();
                    }

                    var dataObject = null;
                    if (contextSplit.length > 0 && modelManager.termMode) {
                    	dataObject = contextSplit[contextSplit.length-1];
                     	if (modelManager.termMode === 'displayText') {
                        	currentText = lt_output.text;
                        	var attr = this.vocabularyUtilLib.getAttributeByDesc(modelManager.vocaRTServ, modelManager.vocabulary, dataObject, currentText);
                        	if (attr) {
                        		nav = attr.name;
                        	}
                     	}
                    }
                    
                    if (dataObject) {
                    	modelManager.setTokenContext(lt_output.start, currentText, dataObject);
                    }
                    
                    var navigationPath = (contextSplit.length === 0) ? currentContext.navigation + "." + nav : contextSplit.join(".") + "." + nav;
                    var returneNavdObj = this.parseUtilsLib.getNavigationObjectFromPath(navigationPath, currentText, modelManager);
                    var newType = this.parseUtilsLib.getNavigationObjectType(returneNavdObj);
                    if (newType !== null) {
                        lt_output.type = (this.input.LT(-1).type === IDPParser.CURRENT) ? newType : this.parseUtilsLib.getSingleTokenType(newType);
                        return lt_output;
                    }

                 }

                        //is Collection
                 if (this.parseUtilsLib.isCollection(lt_output.type) && this.input.LT(-1).type !== IDPParser.CURRENT) {
                    nav = modelManager.getCurrentNavigationObject(lt_output.text);
                    if (nav) {
                    	if (nav.navigation !== nav.term) { // term is not as navigation so trust the type of collection
                    		return lt_output;
                    	}
                    	nav = nav.navigation;
                    }
                    else {
                    	nav = lt_output.input.data.slice(lt_output.start, lt_output.stop + 1);
                    }
                    var navSplit = nav.split(".");
                    nav = navSplit[0];
                    if (currentContext.root.name !== navSplit[0]) {
                        return lt_output;
                    }


                    var i = 1;
                    while (i < navSplit.length && i <= currentContext.associations.path.length && navSplit[i] === currentContext.associations.path[i - 1].name) {
                        nav = currentContext.associations.path[i - 1].object;
                        i++;
                    }

                    for (i; i < navSplit.length; i++) {
                        nav = nav + "." + navSplit[i];
                    }


                    var navigationObject = this.vocabularyUtilLib.validateNavigationDetails(nav, modelManager.vocaRTServ, modelManager.vocabulary, []);
                    if (navigationObject.isCollection) {
                        return lt_output;
                    }
                    lt_output.type = this.parseUtilsLib.getSingleTokenType(lt_output.type);
                }

                return lt_output;
            };
            
         
                      	this.cleanLastExpecting = function() {
                            	this.lastExpecting.expecting = [];
                             	this.lastExpecting.expectingMap = {};
                     	};
         
          
                      	this.saveLastExpecting = function(token, tokenIndex) {
                      	var idx = 0;
                      	//this.input.LT(tokenIndex).index = -1 means EOF
                      	// if last saved index is less or equal current examnimed token index that we update expecting. If it is less then we clean expectinf first
                      	if (this.pred) {
                     		if ((this.lastExpecting.index <= this.input.LT(tokenIndex).index && this.input.LT(tokenIndex).index !== -1 && this.lastExpecting.index !== -1) ||
                     				this.input.LT(tokenIndex).index === -1) {
                     			if ((this.lastExpecting.index < this.input.LT(tokenIndex).index && this.input.LT(tokenIndex).index !== -1) || 
                     					(this.lastExpecting.index !== -1 && this.input.LT(tokenIndex).index === -1)) {
                     	       		this.lastExpecting.index = this.input.LT(tokenIndex).index;
                                  	this.cleanLastExpecting();
                      			}
                      			// expectingMap is for debugging only
                     			if (this.lastExpecting.expectingMap.hasOwnProperty(this.currentRule) === false) {
                     				this.lastExpecting.expectingMap[this.currentRule] = [];
                     			} 
                           		this.lastExpecting.expectingMap[this.currentRule].push(token);
                            		this.lastExpecting.expecting.push(token);
                            		
                            		// If currect parser index id EOF we reached the end
                            		if (this.input.LT(tokenIndex).index === -1) {
                            			this.lastExpecting.reachedEOF = true;
                            		}
                            		
                            		// If current parser index or the next one is EOF and current token is NAVIGATION it means we reach the end of exprssion and the last token is partial
                            		if ((this.input.LT(tokenIndex).index === -1 || this.input.LT(tokenIndex+1).index === -1) && this.input.LT(tokenIndex).type ===  IDPParser.NAVIGATION) {
                            			this.lastExpecting.isPartialText = true;
                             		this.lastExpecting.reachedEOF = true;
                           		}
                                 }
                                 }
                          else {
                           for( idx = 0;idx <= this.lastExpecting.expecting.length;idx++){
        					  if(this.lastExpecting.expecting[idx] === token) {
        		  				this.lastExpecting.expecting[idx] = -2;
        		   				}
        		  			}
        		   		  }
                          
                     	};

    }).call(this);

    IDPParser.superclass.constructor.call(this, input, state);
     this.lastExpecting = { "index" : "0", "expecting": [], "expectingMap": {}, "reachedEOF" : false,  "isPartialText" : false };
      this.DFA_decisions = [];
     this.lastRule = null;
     this.currentRule = null;
     this.lexerErrorOccurred = false;
     this.outputTokens = {"nextTokens" : [], "partialText" : "false"};
  this.pushNextTokens = function(lower,upper, k){
   
  var i = lower;
  for( i = lower;i <= upper;i++){
       this.saveLastExpecting(i, k);
 }
 return true;
};

 
 this.setPred = function(predicates){
  if(predicates === undefined) {
	this.pred = true;
}
  else {
	this.pred =predicates;
	}

 return true;
};

	 this.pushApplyTokens = function(expectedArray){
	var i;
		for (i=0; i < expectedArray.length; i++) {
			 this.saveLastExpecting(expectedArray[i], 1);
	}
	return true;
};

this.dfa1 = new IDPParser.DFA1(this);
                    this.DFA_decisions.push(1);
                    this.failedPredictDFA1 = false;
                    this.dfa1AltNumber = 1;
                    this.dfa1InRule = null;
					this.dfa1Mark = 0;
                    this.dfa1NumberOfAlt = 0;
this.dfa2 = new IDPParser.DFA2(this);
                    this.DFA_decisions.push(2);
                    this.failedPredictDFA2 = false;
                    this.dfa2AltNumber = 1;
                    this.dfa2InRule = null;
					this.dfa2Mark = 0;
                    this.dfa2NumberOfAlt = 0;
this.dfa3 = new IDPParser.DFA3(this);
                    this.DFA_decisions.push(3);
                    this.failedPredictDFA3 = false;
                    this.dfa3AltNumber = 1;
                    this.dfa3InRule = null;
					this.dfa3Mark = 0;
                    this.dfa3NumberOfAlt = 0;
this.dfa4 = new IDPParser.DFA4(this);
                    this.DFA_decisions.push(4);
                    this.failedPredictDFA4 = false;
                    this.dfa4AltNumber = 1;
                    this.dfa4InRule = null;
					this.dfa4Mark = 0;
                    this.dfa4NumberOfAlt = 0;
this.dfa5 = new IDPParser.DFA5(this);
                    this.DFA_decisions.push(5);
                    this.failedPredictDFA5 = false;
                    this.dfa5AltNumber = 1;
                    this.dfa5InRule = null;
					this.dfa5Mark = 0;
                    this.dfa5NumberOfAlt = 0;
this.dfa28 = new IDPParser.DFA28(this);
                    this.DFA_decisions.push(28);
                    this.failedPredictDFA28 = false;
                    this.dfa28AltNumber = 1;
                    this.dfa28InRule = null;
					this.dfa28Mark = 0;
                    this.dfa28NumberOfAlt = 0;
this.dfa29 = new IDPParser.DFA29(this);
                    this.DFA_decisions.push(29);
                    this.failedPredictDFA29 = false;
                    this.dfa29AltNumber = 1;
                    this.dfa29InRule = null;
					this.dfa29Mark = 0;
                    this.dfa29NumberOfAlt = 0;
this.dfa32 = new IDPParser.DFA32(this);
                    this.DFA_decisions.push(32);
                    this.failedPredictDFA32 = false;
                    this.dfa32AltNumber = 1;
                    this.dfa32InRule = null;
					this.dfa32Mark = 0;
                    this.dfa32NumberOfAlt = 0;
this.dfa34 = new IDPParser.DFA34(this);
                    this.DFA_decisions.push(34);
                    this.failedPredictDFA34 = false;
                    this.dfa34AltNumber = 1;
                    this.dfa34InRule = null;
					this.dfa34Mark = 0;
                    this.dfa34NumberOfAlt = 0;
this.dfa44 = new IDPParser.DFA44(this);
                    this.DFA_decisions.push(44);
                    this.failedPredictDFA44 = false;
                    this.dfa44AltNumber = 1;
                    this.dfa44InRule = null;
					this.dfa44Mark = 0;
                    this.dfa44NumberOfAlt = 0;
this.dfa45 = new IDPParser.DFA45(this);
                    this.DFA_decisions.push(45);
                    this.failedPredictDFA45 = false;
                    this.dfa45AltNumber = 1;
                    this.dfa45InRule = null;
					this.dfa45Mark = 0;
                    this.dfa45NumberOfAlt = 0;
this.dfa47 = new IDPParser.DFA47(this);
                    this.DFA_decisions.push(47);
                    this.failedPredictDFA47 = false;
                    this.dfa47AltNumber = 1;
                    this.dfa47InRule = null;
					this.dfa47Mark = 0;
                    this.dfa47NumberOfAlt = 0;
this.dfa48 = new IDPParser.DFA48(this);
                    this.DFA_decisions.push(48);
                    this.failedPredictDFA48 = false;
                    this.dfa48AltNumber = 1;
                    this.dfa48InRule = null;
					this.dfa48Mark = 0;
                    this.dfa48NumberOfAlt = 0;
this.dfa70 = new IDPParser.DFA70(this);
                    this.DFA_decisions.push(70);
                    this.failedPredictDFA70 = false;
                    this.dfa70AltNumber = 1;
                    this.dfa70InRule = null;
					this.dfa70Mark = 0;
                    this.dfa70NumberOfAlt = 0;
this.dfa79 = new IDPParser.DFA79(this);
                    this.DFA_decisions.push(79);
                    this.failedPredictDFA79 = false;
                    this.dfa79AltNumber = 1;
                    this.dfa79InRule = null;
					this.dfa79Mark = 0;
                    this.dfa79NumberOfAlt = 0;
this.dfa87 = new IDPParser.DFA87(this);
                    this.DFA_decisions.push(87);
                    this.failedPredictDFA87 = false;
                    this.dfa87AltNumber = 1;
                    this.dfa87InRule = null;
					this.dfa87Mark = 0;
                    this.dfa87NumberOfAlt = 0;
this.dfa89 = new IDPParser.DFA89(this);
                    this.DFA_decisions.push(89);
                    this.failedPredictDFA89 = false;
                    this.dfa89AltNumber = 1;
                    this.dfa89InRule = null;
					this.dfa89Mark = 0;
                    this.dfa89NumberOfAlt = 0;
this.dfa100 = new IDPParser.DFA100(this);
                    this.DFA_decisions.push(100);
                    this.failedPredictDFA100 = false;
                    this.dfa100AltNumber = 1;
                    this.dfa100InRule = null;
					this.dfa100Mark = 0;
                    this.dfa100NumberOfAlt = 0;
this.dfa101 = new IDPParser.DFA101(this);
                    this.DFA_decisions.push(101);
                    this.failedPredictDFA101 = false;
                    this.dfa101AltNumber = 1;
                    this.dfa101InRule = null;
					this.dfa101Mark = 0;
                    this.dfa101NumberOfAlt = 0;
this.dfa107 = new IDPParser.DFA107(this);
                    this.DFA_decisions.push(107);
                    this.failedPredictDFA107 = false;
                    this.dfa107AltNumber = 1;
                    this.dfa107InRule = null;
					this.dfa107Mark = 0;
                    this.dfa107NumberOfAlt = 0;
this.dfa109 = new IDPParser.DFA109(this);
                    this.DFA_decisions.push(109);
                    this.failedPredictDFA109 = false;
                    this.dfa109AltNumber = 1;
                    this.dfa109InRule = null;
					this.dfa109Mark = 0;
                    this.dfa109NumberOfAlt = 0;
this.dfa119 = new IDPParser.DFA119(this);
                    this.DFA_decisions.push(119);
                    this.failedPredictDFA119 = false;
                    this.dfa119AltNumber = 1;
                    this.dfa119InRule = null;
					this.dfa119Mark = 0;
                    this.dfa119NumberOfAlt = 0;
this.dfa120 = new IDPParser.DFA120(this);
                    this.DFA_decisions.push(120);
                    this.failedPredictDFA120 = false;
                    this.dfa120AltNumber = 1;
                    this.dfa120InRule = null;
					this.dfa120Mark = 0;
                    this.dfa120NumberOfAlt = 0;
this.dfa124 = new IDPParser.DFA124(this);
                    this.DFA_decisions.push(124);
                    this.failedPredictDFA124 = false;
                    this.dfa124AltNumber = 1;
                    this.dfa124InRule = null;
					this.dfa124Mark = 0;
                    this.dfa124NumberOfAlt = 0;
this.dfa123 = new IDPParser.DFA123(this);
                    this.DFA_decisions.push(123);
                    this.failedPredictDFA123 = false;
                    this.dfa123AltNumber = 1;
                    this.dfa123InRule = null;
					this.dfa123Mark = 0;
                    this.dfa123NumberOfAlt = 0;
this.dfa128 = new IDPParser.DFA128(this);
                    this.DFA_decisions.push(128);
                    this.failedPredictDFA128 = false;
                    this.dfa128AltNumber = 1;
                    this.dfa128InRule = null;
					this.dfa128Mark = 0;
                    this.dfa128NumberOfAlt = 0;
this.dfa129 = new IDPParser.DFA129(this);
                    this.DFA_decisions.push(129);
                    this.failedPredictDFA129 = false;
                    this.dfa129AltNumber = 1;
                    this.dfa129InRule = null;
					this.dfa129Mark = 0;
                    this.dfa129NumberOfAlt = 0;
this.dfa132 = new IDPParser.DFA132(this);
                    this.DFA_decisions.push(132);
                    this.failedPredictDFA132 = false;
                    this.dfa132AltNumber = 1;
                    this.dfa132InRule = null;
					this.dfa132Mark = 0;
                    this.dfa132NumberOfAlt = 0;
this.dfa134 = new IDPParser.DFA134(this);
                    this.DFA_decisions.push(134);
                    this.failedPredictDFA134 = false;
                    this.dfa134AltNumber = 1;
                    this.dfa134InRule = null;
					this.dfa134Mark = 0;
                    this.dfa134NumberOfAlt = 0;
this.dfa136 = new IDPParser.DFA136(this);
                    this.DFA_decisions.push(136);
                    this.failedPredictDFA136 = false;
                    this.dfa136AltNumber = 1;
                    this.dfa136InRule = null;
					this.dfa136Mark = 0;
                    this.dfa136NumberOfAlt = 0;
this.dfa139 = new IDPParser.DFA139(this);
                    this.DFA_decisions.push(139);
                    this.failedPredictDFA139 = false;
                    this.dfa139AltNumber = 1;
                    this.dfa139InRule = null;
					this.dfa139Mark = 0;
                    this.dfa139NumberOfAlt = 0;
this.dfa162 = new IDPParser.DFA162(this);
                    this.DFA_decisions.push(162);
                    this.failedPredictDFA162 = false;
                    this.dfa162AltNumber = 1;
                    this.dfa162InRule = null;
					this.dfa162Mark = 0;
                    this.dfa162NumberOfAlt = 0;
this.dfa206 = new IDPParser.DFA206(this);
                    this.DFA_decisions.push(206);
                    this.failedPredictDFA206 = false;
                    this.dfa206AltNumber = 1;
                    this.dfa206InRule = null;
					this.dfa206Mark = 0;
                    this.dfa206NumberOfAlt = 0;
this.dfa208 = new IDPParser.DFA208(this);
                    this.DFA_decisions.push(208);
                    this.failedPredictDFA208 = false;
                    this.dfa208AltNumber = 1;
                    this.dfa208InRule = null;
					this.dfa208Mark = 0;
                    this.dfa208NumberOfAlt = 0;
this.dfa219 = new IDPParser.DFA219(this);
                    this.DFA_decisions.push(219);
                    this.failedPredictDFA219 = false;
                    this.dfa219AltNumber = 1;
                    this.dfa219InRule = null;
					this.dfa219Mark = 0;
                    this.dfa219NumberOfAlt = 0;
this.dfa231 = new IDPParser.DFA231(this);
                    this.DFA_decisions.push(231);
                    this.failedPredictDFA231 = false;
                    this.dfa231AltNumber = 1;
                    this.dfa231InRule = null;
					this.dfa231Mark = 0;
                    this.dfa231NumberOfAlt = 0;
this.dfa232 = new IDPParser.DFA232(this);
                    this.DFA_decisions.push(232);
                    this.failedPredictDFA232 = false;
                    this.dfa232AltNumber = 1;
                    this.dfa232InRule = null;
					this.dfa232Mark = 0;
                    this.dfa232NumberOfAlt = 0;
this.dfa235 = new IDPParser.DFA235(this);
                    this.DFA_decisions.push(235);
                    this.failedPredictDFA235 = false;
                    this.dfa235AltNumber = 1;
                    this.dfa235InRule = null;
					this.dfa235Mark = 0;
                    this.dfa235NumberOfAlt = 0;
this.dfa241 = new IDPParser.DFA241(this);
                    this.DFA_decisions.push(241);
                    this.failedPredictDFA241 = false;
                    this.dfa241AltNumber = 1;
                    this.dfa241InRule = null;
					this.dfa241Mark = 0;
                    this.dfa241NumberOfAlt = 0;
this.dfa242 = new IDPParser.DFA242(this);
                    this.DFA_decisions.push(242);
                    this.failedPredictDFA242 = false;
                    this.dfa242AltNumber = 1;
                    this.dfa242InRule = null;
					this.dfa242Mark = 0;
                    this.dfa242NumberOfAlt = 0;
this.dfa243 = new IDPParser.DFA243(this);
                    this.DFA_decisions.push(243);
                    this.failedPredictDFA243 = false;
                    this.dfa243AltNumber = 1;
                    this.dfa243InRule = null;
					this.dfa243Mark = 0;
                    this.dfa243NumberOfAlt = 0;
this.dfa247 = new IDPParser.DFA247(this);
                    this.DFA_decisions.push(247);
                    this.failedPredictDFA247 = false;
                    this.dfa247AltNumber = 1;
                    this.dfa247InRule = null;
					this.dfa247Mark = 0;
                    this.dfa247NumberOfAlt = 0;
this.dfa249 = new IDPParser.DFA249(this);
                    this.DFA_decisions.push(249);
                    this.failedPredictDFA249 = false;
                    this.dfa249AltNumber = 1;
                    this.dfa249InRule = null;
					this.dfa249Mark = 0;
                    this.dfa249NumberOfAlt = 0;
this.dfa251 = new IDPParser.DFA251(this);
                    this.DFA_decisions.push(251);
                    this.failedPredictDFA251 = false;
                    this.dfa251AltNumber = 1;
                    this.dfa251InRule = null;
					this.dfa251Mark = 0;
                    this.dfa251NumberOfAlt = 0;
this.dfa253 = new IDPParser.DFA253(this);
                    this.DFA_decisions.push(253);
                    this.failedPredictDFA253 = false;
                    this.dfa253AltNumber = 1;
                    this.dfa253InRule = null;
					this.dfa253Mark = 0;
                    this.dfa253NumberOfAlt = 0;
this.dfa254 = new IDPParser.DFA254(this);
                    this.DFA_decisions.push(254);
                    this.failedPredictDFA254 = false;
                    this.dfa254AltNumber = 1;
                    this.dfa254InRule = null;
					this.dfa254Mark = 0;
                    this.dfa254NumberOfAlt = 0;
this.dfa255 = new IDPParser.DFA255(this);
                    this.DFA_decisions.push(255);
                    this.failedPredictDFA255 = false;
                    this.dfa255AltNumber = 1;
                    this.dfa255InRule = null;
					this.dfa255Mark = 0;
                    this.dfa255NumberOfAlt = 0;
this.dfa257 = new IDPParser.DFA257(this);
                    this.DFA_decisions.push(257);
                    this.failedPredictDFA257 = false;
                    this.dfa257AltNumber = 1;
                    this.dfa257InRule = null;
					this.dfa257Mark = 0;
                    this.dfa257NumberOfAlt = 0;
this.dfa259 = new IDPParser.DFA259(this);
                    this.DFA_decisions.push(259);
                    this.failedPredictDFA259 = false;
                    this.dfa259AltNumber = 1;
                    this.dfa259InRule = null;
					this.dfa259Mark = 0;
                    this.dfa259NumberOfAlt = 0;
this.dfa316 = new IDPParser.DFA316(this);
                    this.DFA_decisions.push(316);
                    this.failedPredictDFA316 = false;
                    this.dfa316AltNumber = 1;
                    this.dfa316InRule = null;
					this.dfa316Mark = 0;
                    this.dfa316NumberOfAlt = 0;


    /* @todo only create adaptor if output=AST */
    this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();

};

org.antlr.lang.augmentObject(IDPParser, {
    EOF: -1,
    LROUNDB: 4,
    RROUNDB: 5,
    FIRST: 6,
    OF: 7,
    WITH_THE_HIGHEST: 8,
    WITH_THE_LOWEST: 9,
    TYPETIMEINTERVAL: 10,
    TYPENUMBER: 11,
    WITH_THE_MOST_RECENT: 12,
    WITH_THE_EARLIEST: 13,
    TYPETIME: 14,
    TYPEDATE: 15,
    TYPETIMESTAMP: 16,
    SORTED_FROM_Z_TO_A_BY: 17,
    SORTED_FROM_A_TO_Z_BY: 18,
    TYPESTRING: 19,
    TYPECOLLECTION: 20,
    TYPEBOOLEAN: 21,
    WHERE: 22,
    FILTER_BY: 23,
    I: 24,
    S: 25,
    IS: 26,
    FILTER: 27,
    WS: 28,
    BY: 29,
    PER: 30,
    GROUP_BY: 31,
    SEMICOLON: 32,
    GROUPED: 33,
    COUNT: 34,
    DISTINCT: 35,
    COUNT_DISTINCT_OF: 36,
    COUNT_OF: 37,
    COUNTD: 38,
    COUNTD_OF: 39,
    AND: 40,
    EQ_SIGN: 41,
    IS_EQUAL: 42,
    OR: 43,
    ANY_OF: 44,
    ALL_OF: 45,
    BULLET: 46,
    ANY: 47,
    THE: 48,
    FOLLOWING: 49,
    CONDITIONS: 50,
    T: 51,
    R: 52,
    U: 53,
    E: 54,
    COLON: 55,
    FALL: 56,
    FWS: 57,
    ARE: 58,
    TO: 59,
    TRUE: 60,
    FALSE: 61,
    TYPEBOOLEANPARAMETER: 62,
    NULL: 63,
    CURRENT: 64,
    TYPEBOOLEANCOLLECTION: 65,
    TYPEBOOLEANDT: 66,
    NOT_EQUAL_SIGN: 67,
    IS_NOT_EQUAL: 68,
    DOES_NOT_EQUAL: 69,
    NOT_EQUAL: 70,
    EQUALS: 71,
    EQUAL: 72,
    DOES: 73,
    NOT: 74,
    LAST: 75,
    MOST_RECENT: 76,
    MAXIMUM_OF: 77,
    EARLIEST: 78,
    MINIMUM_OF: 79,
    EXISTS_IN: 80,
    DOES_NOT_EXISTS_IN: 81,
    ONE: 82,
    IS_ONE_OF: 83,
    IS_NOT_ONE_OF: 84,
    EXISTS: 85,
    IN: 86,
    EXIST: 87,
    TIMESTRING: 88,
    TYPETIMEPARAMETER: 89,
    TYPETIMECOLLECTION: 90,
    TYPETIMEDT: 91,
    TIMESTAMPSTRING: 92,
    TYPETIMESTAMPPARAMETER: 93,
    TODAY: 94,
    YESTERDAY: 95,
    TOMORROW: 96,
    TYPETIMESTAMPCOLLECTION: 97,
    TYPEDATEDT: 98,
    MINUS: 99,
    DATESTRING: 100,
    TYPEDATEPARAMETER: 101,
    GREATER_EQUAL_SIGN: 102,
    LESS_EQUAL_SIGN: 103,
    IS_EQUAL_OR_GREATER_THAN: 104,
    GREATER_THAN: 105,
    IS_EQUAL_OR_LESS_THAN: 106,
    LESS_THAN: 107,
    GREATER_SIGN: 108,
    LESS_SIGN: 109,
    IS_LESS_THAN: 110,
    IS_GREATER_THAN: 111,
    ROUND: 112,
    POWER: 113,
    SIN: 114,
    COS: 115,
    LOG: 116,
    LESS: 117,
    THAN: 118,
    GREATER: 119,
    IS_NOT_LESS_THAN: 120,
    IS_NOT_GREATER_THAN: 121,
    IS_IN_THE_LAST: 122,
    IS_NOT_IN_THE_LAST: 123,
    IS_IN_THE_NEXT: 124,
    IS_NOT_IN_THE_NEXT: 125,
    NEXT: 126,
    IS_BEFORE: 127,
    BEFORE: 128,
    IS_NOT_BEFORE: 129,
    IS_AFTER: 130,
    AFTER: 131,
    IS_NOT_AFTER: 132,
    IS_BETWEEN: 133,
    BETWEEN: 134,
    IS_NOT_BETWEEN: 135,
    TYPEDATECOLLECTION: 136,
    ALL: 137,
    PLUS: 138,
    CONCATENATE: 139,
    WITH_FUZZY: 140,
    CONTAINS: 141,
    DOES_NOT_CONTAIN: 142,
    STRING: 143,
    TYPESTRINGPARAMETER: 144,
    TYPESTRINGCOLLECTION: 145,
    TYPESTRINGDT: 146,
    IS_LIKE: 147,
    LIKE: 148,
    IS_NOT_LIKE: 149,
    NOT_LIKE: 150,
    DOES_NOT_START: 151,
    START_WITH: 152,
    DOES_NOT_END: 153,
    END_WITH: 154,
    PATTERN: 155,
    NOT_IN: 156,
    CONTAIN: 157,
    START: 158,
    WITH: 159,
    STARTS: 160,
    END: 161,
    ENDS: 162,
    ZERO_TO_ONE: 163,
    ZERO_OR_ONE: 164,
    TYPENUMBERPARAMETER: 165,
    DECIMAL: 166,
    INT: 167,
    TYPENUMBERCOLLECTION: 168,
    TYPENUMBERDT: 169,
    NUMBER_OF: 170,
    OCCURENCES_REGEXP: 171,
    MULT: 172,
    DIV: 173,
    HIGHEST: 174,
    LOWEST: 175,
    AVERAGE_OF: 176,
    SUM_OF: 177,
    AVERAGE: 178,
    SUM: 179,
    MAXIMUM: 180,
    MOST: 181,
    RECENT: 182,
    MINIMUM: 183,
    SECOND: 184,
    MINUTE: 185,
    HOUR: 186,
    DAY: 187,
    WEEK: 188,
    MONTH: 189,
    YEAR: 190,
    TYPETIMEINTERVALPARAMETER: 191,
    TYPETIMEINTERVALCOLLECTION: 192,
    TYPETIMEINTERVALDT: 193,
    H: 194,
    G: 195,
    L: 196,
    O: 197,
    W: 198,
    D: 199,
    SORTED: 200,
    C: 201,
    N: 202,
    M: 203,
    OCCURRENCES: 204,
    P: 205,
    A: 206,
    F: 207,
    FROM: 208,
    Z: 209,
    NUMBER: 210,
    FOF: 211,
    UNDERSCORE: 212,
    LINE: 213,
    NEW: 214,
    LIST: 215,
    Y: 216,
    B: 217,
    Q: 218,
    UNIQUE: 219,
    FUZZY: 220,
    SCORE: 221,
    NOT_SIGN: 222,
    X: 223,
    V: 224,
    NOW: 225,
    IF: 226,
    K: 227,
    THIS: 228,
    DOT: 229,
    LBRACK: 230,
    RBRACK: 231,
    INVERTED_COMMAS: 232,
    IS_NOT: 233,
    J: 234,
    PARAMETER: 235,
    OBJECT: 236,
    IS_A: 237,
    IS_NOT_OBJ: 238,
    ALL_OF_OBJ: 239,
    NAVIGATION: 240,
    TYPEATTRIBUTE: 241,
    TYPETIMESTAMPDT: 242,
    Digit: 243,
    HexDigit: 244,
    UnicodeChar: 245,
    EscapeSequence: 246,
    StringChar: 247,
    Comma: 248,
    IntSimple: 249,
    IntWithComma: 250,
    IntWithDot: 251,
    IntWithSpace: 252,
    ML_COMMENT: 253,
    SL_COMMENT: 254,
    ANYCHAR: 255
});

(function(){
// public class variables
var EOF= -1,
    LROUNDB= 4,
    RROUNDB= 5,
    FIRST= 6,
    OF= 7,
    WITH_THE_HIGHEST= 8,
    WITH_THE_LOWEST= 9,
    TYPETIMEINTERVAL= 10,
    TYPENUMBER= 11,
    WITH_THE_MOST_RECENT= 12,
    WITH_THE_EARLIEST= 13,
    TYPETIME= 14,
    TYPEDATE= 15,
    TYPETIMESTAMP= 16,
    SORTED_FROM_Z_TO_A_BY= 17,
    SORTED_FROM_A_TO_Z_BY= 18,
    TYPESTRING= 19,
    TYPECOLLECTION= 20,
    TYPEBOOLEAN= 21,
    WHERE= 22,
    FILTER_BY= 23,
    I= 24,
    S= 25,
    IS= 26,
    FILTER= 27,
    WS= 28,
    BY= 29,
    PER= 30,
    GROUP_BY= 31,
    SEMICOLON= 32,
    GROUPED= 33,
    COUNT= 34,
    DISTINCT= 35,
    COUNT_DISTINCT_OF= 36,
    COUNT_OF= 37,
    COUNTD= 38,
    COUNTD_OF= 39,
    AND= 40,
    EQ_SIGN= 41,
    IS_EQUAL= 42,
    OR= 43,
    ANY_OF= 44,
    ALL_OF= 45,
    BULLET= 46,
    ANY= 47,
    THE= 48,
    FOLLOWING= 49,
    CONDITIONS= 50,
    T= 51,
    R= 52,
    U= 53,
    E= 54,
    COLON= 55,
    FALL= 56,
    FWS= 57,
    ARE= 58,
    TO= 59,
    TRUE= 60,
    FALSE= 61,
    TYPEBOOLEANPARAMETER= 62,
    NULL= 63,
    CURRENT= 64,
    TYPEBOOLEANCOLLECTION= 65,
    TYPEBOOLEANDT= 66,
    NOT_EQUAL_SIGN= 67,
    IS_NOT_EQUAL= 68,
    DOES_NOT_EQUAL= 69,
    NOT_EQUAL= 70,
    EQUALS= 71,
    EQUAL= 72,
    DOES= 73,
    NOT= 74,
    LAST= 75,
    MOST_RECENT= 76,
    MAXIMUM_OF= 77,
    EARLIEST= 78,
    MINIMUM_OF= 79,
    EXISTS_IN= 80,
    DOES_NOT_EXISTS_IN= 81,
    ONE= 82,
    IS_ONE_OF= 83,
    IS_NOT_ONE_OF= 84,
    EXISTS= 85,
    IN= 86,
    EXIST= 87,
    TIMESTRING= 88,
    TYPETIMEPARAMETER= 89,
    TYPETIMECOLLECTION= 90,
    TYPETIMEDT= 91,
    TIMESTAMPSTRING= 92,
    TYPETIMESTAMPPARAMETER= 93,
    TODAY= 94,
    YESTERDAY= 95,
    TOMORROW= 96,
    TYPETIMESTAMPCOLLECTION= 97,
    TYPEDATEDT= 98,
    MINUS= 99,
    DATESTRING= 100,
    TYPEDATEPARAMETER= 101,
    GREATER_EQUAL_SIGN= 102,
    LESS_EQUAL_SIGN= 103,
    IS_EQUAL_OR_GREATER_THAN= 104,
    GREATER_THAN= 105,
    IS_EQUAL_OR_LESS_THAN= 106,
    LESS_THAN= 107,
    GREATER_SIGN= 108,
    LESS_SIGN= 109,
    IS_LESS_THAN= 110,
    IS_GREATER_THAN= 111,
    ROUND= 112,
    POWER= 113,
    SIN= 114,
    COS= 115,
    LOG= 116,
    LESS= 117,
    THAN= 118,
    GREATER= 119,
    IS_NOT_LESS_THAN= 120,
    IS_NOT_GREATER_THAN= 121,
    IS_IN_THE_LAST= 122,
    IS_NOT_IN_THE_LAST= 123,
    IS_IN_THE_NEXT= 124,
    IS_NOT_IN_THE_NEXT= 125,
    NEXT= 126,
    IS_BEFORE= 127,
    BEFORE= 128,
    IS_NOT_BEFORE= 129,
    IS_AFTER= 130,
    AFTER= 131,
    IS_NOT_AFTER= 132,
    IS_BETWEEN= 133,
    BETWEEN= 134,
    IS_NOT_BETWEEN= 135,
    TYPEDATECOLLECTION= 136,
    ALL= 137,
    PLUS= 138,
    CONCATENATE= 139,
    WITH_FUZZY= 140,
    CONTAINS= 141,
    DOES_NOT_CONTAIN= 142,
    STRING= 143,
    TYPESTRINGPARAMETER= 144,
    TYPESTRINGCOLLECTION= 145,
    TYPESTRINGDT= 146,
    IS_LIKE= 147,
    LIKE= 148,
    IS_NOT_LIKE= 149,
    NOT_LIKE= 150,
    DOES_NOT_START= 151,
    START_WITH= 152,
    DOES_NOT_END= 153,
    END_WITH= 154,
    PATTERN= 155,
    NOT_IN= 156,
    CONTAIN= 157,
    START= 158,
    WITH= 159,
    STARTS= 160,
    END= 161,
    ENDS= 162,
    ZERO_TO_ONE= 163,
    ZERO_OR_ONE= 164,
    TYPENUMBERPARAMETER= 165,
    DECIMAL= 166,
    INT= 167,
    TYPENUMBERCOLLECTION= 168,
    TYPENUMBERDT= 169,
    NUMBER_OF= 170,
    OCCURENCES_REGEXP= 171,
    MULT= 172,
    DIV= 173,
    HIGHEST= 174,
    LOWEST= 175,
    AVERAGE_OF= 176,
    SUM_OF= 177,
    AVERAGE= 178,
    SUM= 179,
    MAXIMUM= 180,
    MOST= 181,
    RECENT= 182,
    MINIMUM= 183,
    SECOND= 184,
    MINUTE= 185,
    HOUR= 186,
    DAY= 187,
    WEEK= 188,
    MONTH= 189,
    YEAR= 190,
    TYPETIMEINTERVALPARAMETER= 191,
    TYPETIMEINTERVALCOLLECTION= 192,
    TYPETIMEINTERVALDT= 193,
    H= 194,
    G= 195,
    L= 196,
    O= 197,
    W= 198,
    D= 199,
    SORTED= 200,
    C= 201,
    N= 202,
    M= 203,
    OCCURRENCES= 204,
    P= 205,
    A= 206,
    F= 207,
    FROM= 208,
    Z= 209,
    NUMBER= 210,
    FOF= 211,
    UNDERSCORE= 212,
    LINE= 213,
    NEW= 214,
    LIST= 215,
    Y= 216,
    B= 217,
    Q= 218,
    UNIQUE= 219,
    FUZZY= 220,
    SCORE= 221,
    NOT_SIGN= 222,
    X= 223,
    V= 224,
    NOW= 225,
    IF= 226,
    K= 227,
    THIS= 228,
    DOT= 229,
    LBRACK= 230,
    RBRACK= 231,
    INVERTED_COMMAS= 232,
    IS_NOT= 233,
    J= 234,
    PARAMETER= 235,
    OBJECT= 236,
    IS_A= 237,
    IS_NOT_OBJ= 238,
    ALL_OF_OBJ= 239,
    NAVIGATION= 240,
    TYPEATTRIBUTE= 241,
    TYPETIMESTAMPDT= 242,
    Digit= 243,
    HexDigit= 244,
    UnicodeChar= 245,
    EscapeSequence= 246,
    StringChar= 247,
    Comma= 248,
    IntSimple= 249,
    IntWithComma= 250,
    IntWithDot= 251,
    IntWithSpace= 252,
    ML_COMMENT= 253,
    SL_COMMENT= 254,
    ANYCHAR= 255;

// public instance methods/vars
org.antlr.lang.extend(IDPParser, org.antlr.runtime.Parser, {
        
    setTreeAdaptor: function(adaptor) {
        this.adaptor = adaptor;
    },
    getTreeAdaptor: function() {
        return this.adaptor;
    },

    getTokenNames: function() { return IDPParser.tokenNames; },
    getGrammarFileName: function() { return "IDP.g"; }
});
org.antlr.lang.augmentObject(IDPParser.prototype, {

    // inline static return class
    dummyRule_return: (function() {
        IDPParser.dummyRule_return = function(){};
        org.antlr.lang.extend(IDPParser.dummyRule_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:319:1: dummyRule : EOF ;
    // $ANTLR start "dummyRule"
    dummyRule: function() {
        this.currentRule = "dummyRule";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.dummyRule_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF1 = null;

        var EOF1_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:321:37: ( EOF )
            // IDP.g:321:49: EOF
            root_0 = this.adaptor.nil();



            this.pushNextTokens(EOF,EOF,1);
            EOF1=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_dummyRule176); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "dummyRule";
        }
        return retval;
    },

    // inline static return class
    model_return: (function() {
        IDPParser.model_return = function(){};
        org.antlr.lang.extend(IDPParser.model_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:323:1: model : ( modelSingleExpression | modelCollection | modelBoolean ) ;
    // $ANTLR start "model"
    model: function() {
        this.currentRule = "model";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.model_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var modelSingleExpression2 = null;
         var modelCollection3 = null;
         var modelBoolean4 = null;


        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:325:37: ( ( modelSingleExpression | modelCollection | modelBoolean ) )
            // IDP.g:325:45: ( modelSingleExpression | modelCollection | modelBoolean )
            root_0 = this.adaptor.nil();

            // IDP.g:325:45: ( modelSingleExpression | modelCollection | modelBoolean )
            var alt1=3;

            this.model_DFAcall=(typeof this.model_DFAcall === 'undefined' ? false: this.model_DFAcall); // only valid for synpred
            if(this.model_DFAcall === false /*&& !this.failedPredictDFA1*/)
            {   
                this.dfa1NumberOfAlt = alt1;
                this.dfa1InRule = "model";
            	this.dfa1Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelCurrentDecisionNumber  = 1; 
                alt1 = this.dfa1.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt1 === 0 || alt1 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 1);
            		return retval;
                }
            }	
            else
                alt1 = this.dfa1AltNumber;	
            switch (alt1) {
                case 1 :
                    // IDP.g:325:47: modelSingleExpression
                    this.pushFollow(IDPParser.FOLLOW_modelSingleExpression_in_model312);
                    this.modelSingleExpression_DFAcall = false;

                     if( typeof this.modelCurrentDecisionNumber !== 'undefined' && this.modelCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA1 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelSingleExpression2=this.modelSingleExpression();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelSingleExpression2=this.modelSingleExpression();

                    	}
                    	}
                    else{
                        modelSingleExpression2=this.modelSingleExpression();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelSingleExpression2.getTree());


                    break;
                case 2 :
                    // IDP.g:325:71: modelCollection
                    this.pushFollow(IDPParser.FOLLOW_modelCollection_in_model316);
                    this.modelCollection_DFAcall = false;

                     if( typeof this.modelCurrentDecisionNumber !== 'undefined' && this.modelCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA1 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelCollection3=this.modelCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelCollection3=this.modelCollection();

                    	}
                    	}
                    else{
                        modelCollection3=this.modelCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelCollection3.getTree());


                    break;
                case 3 :
                    // IDP.g:325:90: modelBoolean
                    this.pushFollow(IDPParser.FOLLOW_modelBoolean_in_model321);
                    this.modelBoolean_DFAcall = false;

                     if( typeof this.modelCurrentDecisionNumber !== 'undefined' && this.modelCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA1 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelBoolean4=this.modelBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelBoolean4=this.modelBoolean();

                    	}
                    	}
                    else{
                        modelBoolean4=this.modelBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelBoolean4.getTree());


                    break;

            }
            /*if(this.failedPredictDFA1 !== undefined && this.failedPredictDFA1)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "model";
        }
        return retval;
    },

    // inline static return class
    modelSingleExpression_return: (function() {
        IDPParser.modelSingleExpression_return = function(){};
        org.antlr.lang.extend(IDPParser.modelSingleExpression_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:327:1: modelSingleExpression : ( modelBooleanPure | modelNumric | modelString | modelTimespan | modelDate | modelTime | modelTimestamp ) ;
    // $ANTLR start "modelSingleExpression"
    modelSingleExpression: function() {
        this.currentRule = "modelSingleExpression";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelSingleExpression_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var modelBooleanPure5 = null;
         var modelNumric6 = null;
         var modelString7 = null;
         var modelTimespan8 = null;
         var modelDate9 = null;
         var modelTime10 = null;
         var modelTimestamp11 = null;


        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:329:33: ( ( modelBooleanPure | modelNumric | modelString | modelTimespan | modelDate | modelTime | modelTimestamp ) )
            // IDP.g:329:49: ( modelBooleanPure | modelNumric | modelString | modelTimespan | modelDate | modelTime | modelTimestamp )
            root_0 = this.adaptor.nil();

            // IDP.g:329:49: ( modelBooleanPure | modelNumric | modelString | modelTimespan | modelDate | modelTime | modelTimestamp )
            var alt2=7;

            this.modelSingleExpression_DFAcall=(typeof this.modelSingleExpression_DFAcall === 'undefined' ? false: this.modelSingleExpression_DFAcall); // only valid for synpred
            if(this.modelSingleExpression_DFAcall === false /*&& !this.failedPredictDFA2*/)
            {   
                this.dfa2NumberOfAlt = alt2;
                this.dfa2InRule = "modelSingleExpression";
            	this.dfa2Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelSingleExpressionCurrentDecisionNumber  = 2; 
                alt2 = this.dfa2.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt2 === 0 || alt2 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 2);
            		return retval;
                }
            }	
            else
                alt2 = this.dfa2AltNumber;	
            switch (alt2) {
                case 1 :
                    // IDP.g:329:51: modelBooleanPure
                    this.pushFollow(IDPParser.FOLLOW_modelBooleanPure_in_modelSingleExpression423);
                    this.modelBooleanPure_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelBooleanPure5=this.modelBooleanPure();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelBooleanPure5=this.modelBooleanPure();

                    	}
                    	}
                    else{
                        modelBooleanPure5=this.modelBooleanPure();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelBooleanPure5.getTree());


                    break;
                case 2 :
                    // IDP.g:329:70: modelNumric
                    this.pushFollow(IDPParser.FOLLOW_modelNumric_in_modelSingleExpression427);
                    this.modelNumric_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelNumric6=this.modelNumric();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelNumric6=this.modelNumric();

                    	}
                    	}
                    else{
                        modelNumric6=this.modelNumric();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelNumric6.getTree());


                    break;
                case 3 :
                    // IDP.g:329:84: modelString
                    this.pushFollow(IDPParser.FOLLOW_modelString_in_modelSingleExpression431);
                    this.modelString_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelString7=this.modelString();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelString7=this.modelString();

                    	}
                    	}
                    else{
                        modelString7=this.modelString();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelString7.getTree());


                    break;
                case 4 :
                    // IDP.g:329:98: modelTimespan
                    this.pushFollow(IDPParser.FOLLOW_modelTimespan_in_modelSingleExpression435);
                    this.modelTimespan_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTimespan8=this.modelTimespan();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTimespan8=this.modelTimespan();

                    	}
                    	}
                    else{
                        modelTimespan8=this.modelTimespan();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTimespan8.getTree());


                    break;
                case 5 :
                    // IDP.g:329:115: modelDate
                    this.pushFollow(IDPParser.FOLLOW_modelDate_in_modelSingleExpression440);
                    this.modelDate_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelDate9=this.modelDate();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelDate9=this.modelDate();

                    	}
                    	}
                    else{
                        modelDate9=this.modelDate();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelDate9.getTree());


                    break;
                case 6 :
                    // IDP.g:329:127: modelTime
                    this.pushFollow(IDPParser.FOLLOW_modelTime_in_modelSingleExpression444);
                    this.modelTime_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTime10=this.modelTime();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTime10=this.modelTime();

                    	}
                    	}
                    else{
                        modelTime10=this.modelTime();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTime10.getTree());


                    break;
                case 7 :
                    // IDP.g:329:139: modelTimestamp
                    this.pushFollow(IDPParser.FOLLOW_modelTimestamp_in_modelSingleExpression448);
                    this.modelTimestamp_DFAcall = false;

                     if( typeof this.modelSingleExpressionCurrentDecisionNumber !== 'undefined' && this.modelSingleExpressionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelSingleExpressionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA2 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTimestamp11=this.modelTimestamp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelSingleExpressionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTimestamp11=this.modelTimestamp();

                    	}
                    	}
                    else{
                        modelTimestamp11=this.modelTimestamp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTimestamp11.getTree());


                    break;

            }
            /*if(this.failedPredictDFA2 !== undefined && this.failedPredictDFA2)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelSingleExpression";
        }
        return retval;
    },

    // inline static return class
    modelNonCollection_return: (function() {
        IDPParser.modelNonCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelNonCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:331:1: modelNonCollection : ( modelSingleExpression | modelBooleanPure ) ;
    // $ANTLR start "modelNonCollection"
    modelNonCollection: function() {
        this.currentRule = "modelNonCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelNonCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var modelSingleExpression12 = null;
         var modelBooleanPure13 = null;


        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:333:37: ( ( modelSingleExpression | modelBooleanPure ) )
            // IDP.g:333:49: ( modelSingleExpression | modelBooleanPure )
            root_0 = this.adaptor.nil();

            // IDP.g:333:49: ( modelSingleExpression | modelBooleanPure )
            var alt3=2;

            this.modelNonCollection_DFAcall=(typeof this.modelNonCollection_DFAcall === 'undefined' ? false: this.modelNonCollection_DFAcall); // only valid for synpred
            if(this.modelNonCollection_DFAcall === false /*&& !this.failedPredictDFA3*/)
            {   
                this.dfa3NumberOfAlt = alt3;
                this.dfa3InRule = "modelNonCollection";
            	this.dfa3Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelNonCollectionCurrentDecisionNumber  = 3; 
                alt3 = this.dfa3.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt3 === 0 || alt3 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 3);
            		return retval;
                }
            }	
            else
                alt3 = this.dfa3AltNumber;	
            switch (alt3) {
                case 1 :
                    // IDP.g:333:51: modelSingleExpression
                    this.pushFollow(IDPParser.FOLLOW_modelSingleExpression_in_modelNonCollection552);
                    this.modelSingleExpression_DFAcall = false;

                     if( typeof this.modelNonCollectionCurrentDecisionNumber !== 'undefined' && this.modelNonCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelNonCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA3 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelSingleExpression12=this.modelSingleExpression();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelNonCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelSingleExpression12=this.modelSingleExpression();

                    	}
                    	}
                    else{
                        modelSingleExpression12=this.modelSingleExpression();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelSingleExpression12.getTree());


                    break;
                case 2 :
                    // IDP.g:333:75: modelBooleanPure
                    this.pushFollow(IDPParser.FOLLOW_modelBooleanPure_in_modelNonCollection556);
                    this.modelBooleanPure_DFAcall = false;

                     if( typeof this.modelNonCollectionCurrentDecisionNumber !== 'undefined' && this.modelNonCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelNonCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA3 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelBooleanPure13=this.modelBooleanPure();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelNonCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelBooleanPure13=this.modelBooleanPure();

                    	}
                    	}
                    else{
                        modelBooleanPure13=this.modelBooleanPure();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelBooleanPure13.getTree());


                    break;

            }
            /*if(this.failedPredictDFA3 !== undefined && this.failedPredictDFA3)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelNonCollection";
        }
        return retval;
    },

    // inline static return class
    modelBoolean_return: (function() {
        IDPParser.modelBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.modelBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:335:1: modelBoolean : modelOutput= modelBooleanEnhanced EOF ;
    // $ANTLR start "modelBoolean"
    modelBoolean: function() {
        this.currentRule = "modelBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF14 = null;
         var modelOutput = null;

        var EOF14_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value; 
        try {
            // IDP.g:338:37: (modelOutput= modelBooleanEnhanced EOF )
            // IDP.g:338:49: modelOutput= modelBooleanEnhanced EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_modelBooleanEnhanced_in_modelBoolean713);
            this.modelBooleanEnhanced_DFAcall = false;

             if( typeof this.modelBooleanCurrentDecisionNumber !== 'undefined' && this.modelBooleanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelBooleanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.modelBooleanEnhanced();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.modelBooleanEnhanced();

            	}
            	}
            else{
                modelOutput=this.modelBooleanEnhanced();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF14=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelBoolean716); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelBoolean";
        }
        return retval;
    },

    // inline static return class
    modelBooleanPure_return: (function() {
        IDPParser.modelBooleanPure_return = function(){};
        org.antlr.lang.extend(IDPParser.modelBooleanPure_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:340:1: modelBooleanPure : modelOutput= ruleModelBoolean EOF ;
    // $ANTLR start "modelBooleanPure"
    modelBooleanPure: function() {
        this.currentRule = "modelBooleanPure";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelBooleanPure_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF15 = null;
         var modelOutput = null;

        var EOF15_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value; 
        try {
            // IDP.g:343:37: (modelOutput= ruleModelBoolean EOF )
            // IDP.g:343:40: modelOutput= ruleModelBoolean EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelBoolean_in_modelBooleanPure893);
            this.ruleModelBoolean_DFAcall = false;

             if( typeof this.modelBooleanPureCurrentDecisionNumber !== 'undefined' && this.modelBooleanPureCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelBooleanPureCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanPureCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelBoolean();

            	}
            	}
            else{
                modelOutput=this.ruleModelBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF15=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelBooleanPure895); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelBooleanPure";
        }
        return retval;
    },

    // inline static return class
    modelBooleanType_return: (function() {
        IDPParser.modelBooleanType_return = function(){};
        org.antlr.lang.extend(IDPParser.modelBooleanType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:344:1: modelBooleanType : modelOutput= ruleBooleanStatement EOF ;
    // $ANTLR start "modelBooleanType"
    modelBooleanType: function() {
        this.currentRule = "modelBooleanType";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelBooleanType_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF16 = null;
         var modelOutput = null;

        var EOF16_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value; 
        try {
            // IDP.g:347:37: (modelOutput= ruleBooleanStatement EOF )
            // IDP.g:347:40: modelOutput= ruleBooleanStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleBooleanStatement_in_modelBooleanType1039);
            this.ruleBooleanStatement_DFAcall = false;

             if( typeof this.modelBooleanTypeCurrentDecisionNumber !== 'undefined' && this.modelBooleanTypeCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelBooleanTypeCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleBooleanStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanTypeCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleBooleanStatement();

            	}
            	}
            else{
                modelOutput=this.ruleBooleanStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF16=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelBooleanType1041); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelBooleanType";
        }
        return retval;
    },

    // inline static return class
    modelNumric_return: (function() {
        IDPParser.modelNumric_return = function(){};
        org.antlr.lang.extend(IDPParser.modelNumric_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:348:1: modelNumric : modelOutput= ruleNumericStatement EOF ;
    // $ANTLR start "modelNumric"
    modelNumric: function() {
        this.currentRule = "modelNumric";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelNumric_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF17 = null;
         var modelOutput = null;

        var EOF17_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DECIMAL.value; 
        try {
            // IDP.g:351:37: (modelOutput= ruleNumericStatement EOF )
            // IDP.g:351:40: modelOutput= ruleNumericStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericStatement_in_modelNumric1228);
            this.ruleNumericStatement_DFAcall = false;

             if( typeof this.modelNumricCurrentDecisionNumber !== 'undefined' && this.modelNumricCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelNumricCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleNumericStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelNumricCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleNumericStatement();

            	}
            	}
            else{
                modelOutput=this.ruleNumericStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF17=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelNumric1230); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelNumric";
        }
        return retval;
    },

    // inline static return class
    modelString_return: (function() {
        IDPParser.modelString_return = function(){};
        org.antlr.lang.extend(IDPParser.modelString_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:352:1: modelString : modelOutput= ruleStringSingleStatement EOF ;
    // $ANTLR start "modelString"
    modelString: function() {
        this.currentRule = "modelString";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelString_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF18 = null;
         var modelOutput = null;

        var EOF18_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value; 
        try {
            // IDP.g:355:37: (modelOutput= ruleStringSingleStatement EOF )
            // IDP.g:355:40: modelOutput= ruleStringSingleStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatement_in_modelString1385);
            this.ruleStringSingleStatement_DFAcall = false;

             if( typeof this.modelStringCurrentDecisionNumber !== 'undefined' && this.modelStringCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelStringCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleStringSingleStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelStringCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleStringSingleStatement();

            	}
            	}
            else{
                modelOutput=this.ruleStringSingleStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF18=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelString1387); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelString";
        }
        return retval;
    },

    // inline static return class
    modelTimespan_return: (function() {
        IDPParser.modelTimespan_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTimespan_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:356:1: modelTimespan : modelOutput= ruleTimespanStatement EOF ;
    // $ANTLR start "modelTimespan"
    modelTimespan: function() {
        this.currentRule = "modelTimespan";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTimespan_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF19 = null;
         var modelOutput = null;

        var EOF19_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value; 
        try {
            // IDP.g:359:37: (modelOutput= ruleTimespanStatement EOF )
            // IDP.g:359:40: modelOutput= ruleTimespanStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanStatement_in_modelTimespan1533);
            this.ruleTimespanStatement_DFAcall = false;

             if( typeof this.modelTimespanCurrentDecisionNumber !== 'undefined' && this.modelTimespanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimespanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleTimespanStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimespanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleTimespanStatement();

            	}
            	}
            else{
                modelOutput=this.ruleTimespanStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF19=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTimespan1535); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTimespan";
        }
        return retval;
    },

    // inline static return class
    modelDate_return: (function() {
        IDPParser.modelDate_return = function(){};
        org.antlr.lang.extend(IDPParser.modelDate_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:360:1: modelDate : modelOutput= ruleDateSingleStatement EOF ;
    // $ANTLR start "modelDate"
    modelDate: function() {
        this.currentRule = "modelDate";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelDate_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF20 = null;
         var modelOutput = null;

        var EOF20_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value; 
        try {
            // IDP.g:363:37: (modelOutput= ruleDateSingleStatement EOF )
            // IDP.g:363:40: modelOutput= ruleDateSingleStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatement_in_modelDate1691);
            this.ruleDateSingleStatement_DFAcall = false;

             if( typeof this.modelDateCurrentDecisionNumber !== 'undefined' && this.modelDateCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelDateCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleDateSingleStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelDateCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleDateSingleStatement();

            	}
            	}
            else{
                modelOutput=this.ruleDateSingleStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF20=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelDate1693); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelDate";
        }
        return retval;
    },

    // inline static return class
    modelTime_return: (function() {
        IDPParser.modelTime_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTime_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:364:1: modelTime : modelOutput= ruleTimeSingleStatement EOF ;
    // $ANTLR start "modelTime"
    modelTime: function() {
        this.currentRule = "modelTime";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTime_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF21 = null;
         var modelOutput = null;

        var EOF21_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.value; 
        try {
            // IDP.g:367:37: (modelOutput= ruleTimeSingleStatement EOF )
            // IDP.g:367:40: modelOutput= ruleTimeSingleStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatement_in_modelTime1845);
            this.ruleTimeSingleStatement_DFAcall = false;

             if( typeof this.modelTimeCurrentDecisionNumber !== 'undefined' && this.modelTimeCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimeCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleTimeSingleStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimeCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleTimeSingleStatement();

            	}
            	}
            else{
                modelOutput=this.ruleTimeSingleStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF21=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTime1847); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTime";
        }
        return retval;
    },

    // inline static return class
    modelTimestamp_return: (function() {
        IDPParser.modelTimestamp_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTimestamp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:368:1: modelTimestamp : modelOutput= ruleTimestampSingleStatement EOF ;
    // $ANTLR start "modelTimestamp"
    modelTimestamp: function() {
        this.currentRule = "modelTimestamp";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTimestamp_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF22 = null;
         var modelOutput = null;

        var EOF22_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value; 
        try {
            // IDP.g:371:37: (modelOutput= ruleTimestampSingleStatement EOF )
            // IDP.g:371:40: modelOutput= ruleTimestampSingleStatement EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatement_in_modelTimestamp2007);
            this.ruleTimestampSingleStatement_DFAcall = false;

             if( typeof this.modelTimestampCurrentDecisionNumber !== 'undefined' && this.modelTimestampCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimestampCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleTimestampSingleStatement();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimestampCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleTimestampSingleStatement();

            	}
            	}
            else{
                modelOutput=this.ruleTimestampSingleStatement();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF22=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTimestamp2009); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTimestamp";
        }
        return retval;
    },

    // inline static return class
    modelCollection_return: (function() {
        IDPParser.modelCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:374:1: modelCollection : ( modelNonTypeCollection | modelBooleanCollection | modelNumricCollection | modelStringCollection | modelTimespanCollection | modelDateCollection | modelTimeCollection | modelTimestampCollection ) ;
    // $ANTLR start "modelCollection"
    modelCollection: function() {
        this.currentRule = "modelCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var modelNonTypeCollection23 = null;
         var modelBooleanCollection24 = null;
         var modelNumricCollection25 = null;
         var modelStringCollection26 = null;
         var modelTimespanCollection27 = null;
         var modelDateCollection28 = null;
         var modelTimeCollection29 = null;
         var modelTimestampCollection30 = null;


        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:376:37: ( ( modelNonTypeCollection | modelBooleanCollection | modelNumricCollection | modelStringCollection | modelTimespanCollection | modelDateCollection | modelTimeCollection | modelTimestampCollection ) )
            // IDP.g:376:40: ( modelNonTypeCollection | modelBooleanCollection | modelNumricCollection | modelStringCollection | modelTimespanCollection | modelDateCollection | modelTimeCollection | modelTimestampCollection )
            root_0 = this.adaptor.nil();

            // IDP.g:376:40: ( modelNonTypeCollection | modelBooleanCollection | modelNumricCollection | modelStringCollection | modelTimespanCollection | modelDateCollection | modelTimeCollection | modelTimestampCollection )
            var alt4=8;

            this.modelCollection_DFAcall=(typeof this.modelCollection_DFAcall === 'undefined' ? false: this.modelCollection_DFAcall); // only valid for synpred
            if(this.modelCollection_DFAcall === false /*&& !this.failedPredictDFA4*/)
            {   
                this.dfa4NumberOfAlt = alt4;
                this.dfa4InRule = "modelCollection";
            	this.dfa4Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelCollectionCurrentDecisionNumber  = 4; 
                alt4 = this.dfa4.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt4 === 0 || alt4 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 4);
            		return retval;
                }
            }	
            else
                alt4 = this.dfa4AltNumber;	
            switch (alt4) {
                case 1 :
                    // IDP.g:376:42: modelNonTypeCollection
                    this.pushFollow(IDPParser.FOLLOW_modelNonTypeCollection_in_modelCollection2163);
                    this.modelNonTypeCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelNonTypeCollection23=this.modelNonTypeCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelNonTypeCollection23=this.modelNonTypeCollection();

                    	}
                    	}
                    else{
                        modelNonTypeCollection23=this.modelNonTypeCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelNonTypeCollection23.getTree());


                    break;
                case 2 :
                    // IDP.g:376:67: modelBooleanCollection
                    this.pushFollow(IDPParser.FOLLOW_modelBooleanCollection_in_modelCollection2167);
                    this.modelBooleanCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelBooleanCollection24=this.modelBooleanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelBooleanCollection24=this.modelBooleanCollection();

                    	}
                    	}
                    else{
                        modelBooleanCollection24=this.modelBooleanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelBooleanCollection24.getTree());


                    break;
                case 3 :
                    // IDP.g:376:92: modelNumricCollection
                    this.pushFollow(IDPParser.FOLLOW_modelNumricCollection_in_modelCollection2171);
                    this.modelNumricCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelNumricCollection25=this.modelNumricCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelNumricCollection25=this.modelNumricCollection();

                    	}
                    	}
                    else{
                        modelNumricCollection25=this.modelNumricCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelNumricCollection25.getTree());


                    break;
                case 4 :
                    // IDP.g:376:116: modelStringCollection
                    this.pushFollow(IDPParser.FOLLOW_modelStringCollection_in_modelCollection2175);
                    this.modelStringCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelStringCollection26=this.modelStringCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelStringCollection26=this.modelStringCollection();

                    	}
                    	}
                    else{
                        modelStringCollection26=this.modelStringCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelStringCollection26.getTree());


                    break;
                case 5 :
                    // IDP.g:376:140: modelTimespanCollection
                    this.pushFollow(IDPParser.FOLLOW_modelTimespanCollection_in_modelCollection2179);
                    this.modelTimespanCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTimespanCollection27=this.modelTimespanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTimespanCollection27=this.modelTimespanCollection();

                    	}
                    	}
                    else{
                        modelTimespanCollection27=this.modelTimespanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTimespanCollection27.getTree());


                    break;
                case 6 :
                    // IDP.g:376:166: modelDateCollection
                    this.pushFollow(IDPParser.FOLLOW_modelDateCollection_in_modelCollection2183);
                    this.modelDateCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelDateCollection28=this.modelDateCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelDateCollection28=this.modelDateCollection();

                    	}
                    	}
                    else{
                        modelDateCollection28=this.modelDateCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelDateCollection28.getTree());


                    break;
                case 7 :
                    // IDP.g:376:188: modelTimeCollection
                    this.pushFollow(IDPParser.FOLLOW_modelTimeCollection_in_modelCollection2187);
                    this.modelTimeCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTimeCollection29=this.modelTimeCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTimeCollection29=this.modelTimeCollection();

                    	}
                    	}
                    else{
                        modelTimeCollection29=this.modelTimeCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTimeCollection29.getTree());


                    break;
                case 8 :
                    // IDP.g:376:210: modelTimestampCollection
                    this.pushFollow(IDPParser.FOLLOW_modelTimestampCollection_in_modelCollection2191);
                    this.modelTimestampCollection_DFAcall = false;

                     if( typeof this.modelCollectionCurrentDecisionNumber !== 'undefined' && this.modelCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA4 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelTimestampCollection30=this.modelTimestampCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelTimestampCollection30=this.modelTimestampCollection();

                    	}
                    	}
                    else{
                        modelTimestampCollection30=this.modelTimestampCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelTimestampCollection30.getTree());


                    break;

            }
            /*if(this.failedPredictDFA4 !== undefined && this.failedPredictDFA4)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelCollection";
        }
        return retval;
    },

    // inline static return class
    modelNonTypeCollection_return: (function() {
        IDPParser.modelNonTypeCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelNonTypeCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:378:1: modelNonTypeCollection : modelOutput= ruleModelCollection EOF ;
    // $ANTLR start "modelNonTypeCollection"
    modelNonTypeCollection: function() {
        this.currentRule = "modelNonTypeCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelNonTypeCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF31 = null;
         var modelOutput = null;

        var EOF31_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.COLLECTION.string; 
        try {
            // IDP.g:381:37: (modelOutput= ruleModelCollection EOF )
            // IDP.g:381:40: modelOutput= ruleModelCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelCollection_in_modelNonTypeCollection2325);
            this.ruleModelCollection_DFAcall = false;

             if( typeof this.modelNonTypeCollectionCurrentDecisionNumber !== 'undefined' && this.modelNonTypeCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelNonTypeCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelNonTypeCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF31=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelNonTypeCollection2328); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelNonTypeCollection";
        }
        return retval;
    },

    // inline static return class
    modelBooleanCollection_return: (function() {
        IDPParser.modelBooleanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelBooleanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:382:1: modelBooleanCollection : modelOutput= ruleModelBooleanCollection EOF ;
    // $ANTLR start "modelBooleanCollection"
    modelBooleanCollection: function() {
        this.currentRule = "modelBooleanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelBooleanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF32 = null;
         var modelOutput = null;

        var EOF32_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN_COLLECTION.string; 
        try {
            // IDP.g:385:37: (modelOutput= ruleModelBooleanCollection EOF )
            // IDP.g:385:40: modelOutput= ruleModelBooleanCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanCollection_in_modelBooleanCollection2484);
            this.ruleModelBooleanCollection_DFAcall = false;

             if( typeof this.modelBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.modelBooleanCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelBooleanCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelBooleanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelBooleanCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelBooleanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF32=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelBooleanCollection2486); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelBooleanCollection";
        }
        return retval;
    },

    // inline static return class
    modelNumricCollection_return: (function() {
        IDPParser.modelNumricCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelNumricCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:386:1: modelNumricCollection : modelOutput= ruleModelNumericCollection EOF ;
    // $ANTLR start "modelNumricCollection"
    modelNumricCollection: function() {
        this.currentRule = "modelNumricCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelNumricCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF33 = null;
         var modelOutput = null;

        var EOF33_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER_COLLECTION.string; 
        try {
            // IDP.g:389:37: (modelOutput= ruleModelNumericCollection EOF )
            // IDP.g:389:40: modelOutput= ruleModelNumericCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelNumericCollection_in_modelNumricCollection2670);
            this.ruleModelNumericCollection_DFAcall = false;

             if( typeof this.modelNumricCollectionCurrentDecisionNumber !== 'undefined' && this.modelNumricCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelNumricCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelNumericCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelNumricCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelNumericCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelNumericCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF33=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelNumricCollection2672); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelNumricCollection";
        }
        return retval;
    },

    // inline static return class
    modelStringCollection_return: (function() {
        IDPParser.modelStringCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelStringCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:390:1: modelStringCollection : modelOutput= ruleModelStringCollection EOF ;
    // $ANTLR start "modelStringCollection"
    modelStringCollection: function() {
        this.currentRule = "modelStringCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelStringCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF34 = null;
         var modelOutput = null;

        var EOF34_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING_COLLECTION.string; 
        try {
            // IDP.g:393:37: (modelOutput= ruleModelStringCollection EOF )
            // IDP.g:393:40: modelOutput= ruleModelStringCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelStringCollection_in_modelStringCollection2824);
            this.ruleModelStringCollection_DFAcall = false;

             if( typeof this.modelStringCollectionCurrentDecisionNumber !== 'undefined' && this.modelStringCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelStringCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelStringCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelStringCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelStringCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelStringCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF34=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelStringCollection2826); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelStringCollection";
        }
        return retval;
    },

    // inline static return class
    modelTimespanCollection_return: (function() {
        IDPParser.modelTimespanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTimespanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:394:1: modelTimespanCollection : modelOutput= ruleModelTimeSpanCollection EOF ;
    // $ANTLR start "modelTimespanCollection"
    modelTimespanCollection: function() {
        this.currentRule = "modelTimespanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTimespanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF35 = null;
         var modelOutput = null;

        var EOF35_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN_COLLECTION.string; 
        try {
            // IDP.g:397:37: (modelOutput= ruleModelTimeSpanCollection EOF )
            // IDP.g:397:40: modelOutput= ruleModelTimeSpanCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelTimeSpanCollection_in_modelTimespanCollection2982);
            this.ruleModelTimeSpanCollection_DFAcall = false;

             if( typeof this.modelTimespanCollectionCurrentDecisionNumber !== 'undefined' && this.modelTimespanCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimespanCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelTimeSpanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimespanCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelTimeSpanCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelTimeSpanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF35=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTimespanCollection2984); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTimespanCollection";
        }
        return retval;
    },

    // inline static return class
    modelDateCollection_return: (function() {
        IDPParser.modelDateCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelDateCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:398:1: modelDateCollection : modelOutput= ruleModelDateCollection EOF ;
    // $ANTLR start "modelDateCollection"
    modelDateCollection: function() {
        this.currentRule = "modelDateCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelDateCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF36 = null;
         var modelOutput = null;

        var EOF36_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE_COLLECTION.string; 
        try {
            // IDP.g:401:37: (modelOutput= ruleModelDateCollection EOF )
            // IDP.g:401:40: modelOutput= ruleModelDateCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelDateCollection_in_modelDateCollection3137);
            this.ruleModelDateCollection_DFAcall = false;

             if( typeof this.modelDateCollectionCurrentDecisionNumber !== 'undefined' && this.modelDateCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelDateCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelDateCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelDateCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelDateCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelDateCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF36=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelDateCollection3139); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelDateCollection";
        }
        return retval;
    },

    // inline static return class
    modelTimeCollection_return: (function() {
        IDPParser.modelTimeCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTimeCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:402:1: modelTimeCollection : modelOutput= ruleModelTimeCollection EOF ;
    // $ANTLR start "modelTimeCollection"
    modelTimeCollection: function() {
        this.currentRule = "modelTimeCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTimeCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF37 = null;
         var modelOutput = null;

        var EOF37_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME_COLLECTION.string; 
        try {
            // IDP.g:405:37: (modelOutput= ruleModelTimeCollection EOF )
            // IDP.g:405:40: modelOutput= ruleModelTimeCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelTimeCollection_in_modelTimeCollection3287);
            this.ruleModelTimeCollection_DFAcall = false;

             if( typeof this.modelTimeCollectionCurrentDecisionNumber !== 'undefined' && this.modelTimeCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimeCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelTimeCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimeCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelTimeCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelTimeCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF37=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTimeCollection3289); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTimeCollection";
        }
        return retval;
    },

    // inline static return class
    modelTimestampCollection_return: (function() {
        IDPParser.modelTimestampCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.modelTimestampCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:406:1: modelTimestampCollection : modelOutput= ruleModelTimestampCollection EOF ;
    // $ANTLR start "modelTimestampCollection"
    modelTimestampCollection: function() {
        this.currentRule = "modelTimestampCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelTimestampCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var EOF38 = null;
         var modelOutput = null;

        var EOF38_tree=null;

        this.termsUtilsLib.updateTermsTokenType(this.input.tokens); this.parseModelLib.getModelManger().actualReturnType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP_COLLECTION.string; 
        try {
            // IDP.g:409:37: (modelOutput= ruleModelTimestampCollection EOF )
            // IDP.g:409:40: modelOutput= ruleModelTimestampCollection EOF
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleModelTimestampCollection_in_modelTimestampCollection3446);
            this.ruleModelTimestampCollection_DFAcall = false;

             if( typeof this.modelTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.modelTimestampCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.modelTimestampCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                modelOutput=this.ruleModelTimestampCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelTimestampCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	modelOutput=this.ruleModelTimestampCollection();

            	}
            	}
            else{
                modelOutput=this.ruleModelTimestampCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelOutput.getTree());


            this.pushNextTokens(EOF,EOF,1);
            EOF38=this.match(this.input,EOF,IDPParser.FOLLOW_EOF_in_modelTimestampCollection3448); if (this.state.failed) return retval;
            if( EOF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().modelManagerOutput((modelOutput!==null?modelOutput.value:null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelTimestampCollection";
        }
        return retval;
    },

    // inline static return class
    modelAllAutocomplete_return: (function() {
        IDPParser.modelAllAutocomplete_return = function(){};
        org.antlr.lang.extend(IDPParser.modelAllAutocomplete_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:412:1: modelAllAutocomplete : ( modelCollection | modelBoolean ) ;
    // $ANTLR start "modelAllAutocomplete"
    modelAllAutocomplete: function() {
        this.currentRule = "modelAllAutocomplete";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelAllAutocomplete_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var modelCollection39 = null;
         var modelBoolean40 = null;


        this.termsUtilsLib.updateTermsTokenType(this.input.tokens);
        try {
            // IDP.g:414:37: ( ( modelCollection | modelBoolean ) )
            // IDP.g:414:40: ( modelCollection | modelBoolean )
            root_0 = this.adaptor.nil();

            // IDP.g:414:40: ( modelCollection | modelBoolean )
            var alt5=2;

            this.modelAllAutocomplete_DFAcall=(typeof this.modelAllAutocomplete_DFAcall === 'undefined' ? false: this.modelAllAutocomplete_DFAcall); // only valid for synpred
            if(this.modelAllAutocomplete_DFAcall === false /*&& !this.failedPredictDFA5*/)
            {   
                this.dfa5NumberOfAlt = alt5;
                this.dfa5InRule = "modelAllAutocomplete";
            	this.dfa5Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelAllAutocompleteCurrentDecisionNumber  = 5; 
                alt5 = this.dfa5.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt5 === 0 || alt5 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 5);
            		return retval;
                }
            }	
            else
                alt5 = this.dfa5AltNumber;	
            switch (alt5) {
                case 1 :
                    // IDP.g:414:41: modelCollection
                    this.pushFollow(IDPParser.FOLLOW_modelCollection_in_modelAllAutocomplete3545);
                    this.modelCollection_DFAcall = false;

                     if( typeof this.modelAllAutocompleteCurrentDecisionNumber !== 'undefined' && this.modelAllAutocompleteCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelAllAutocompleteCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA5 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelCollection39=this.modelCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelAllAutocompleteCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelCollection39=this.modelCollection();

                    	}
                    	}
                    else{
                        modelCollection39=this.modelCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelCollection39.getTree());


                    break;
                case 2 :
                    // IDP.g:414:59: modelBoolean
                    this.pushFollow(IDPParser.FOLLOW_modelBoolean_in_modelAllAutocomplete3549);
                    this.modelBoolean_DFAcall = false;

                     if( typeof this.modelAllAutocompleteCurrentDecisionNumber !== 'undefined' && this.modelAllAutocompleteCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelAllAutocompleteCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA5 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        modelBoolean40=this.modelBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelAllAutocompleteCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	modelBoolean40=this.modelBoolean();

                    	}
                    	}
                    else{
                        modelBoolean40=this.modelBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, modelBoolean40.getTree());


                    break;

            }
            /*if(this.failedPredictDFA5 !== undefined && this.failedPredictDFA5)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelAllAutocomplete";
        }
        return retval;
    },

    // inline static return class
    ruleModelCollection_return: (function() {
        IDPParser.ruleModelCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:420:1: ruleModelCollection returns [value] : selectionLeftOutput= ruleCollectionClause ;
    // $ANTLR start "ruleModelCollection"
    ruleModelCollection: function() {
        this.currentRule = "ruleModelCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:423:17: (selectionLeftOutput= ruleCollectionClause )
            // IDP.g:423:33: selectionLeftOutput= ruleCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleCollectionClause_in_ruleModelCollection3671);
            this.ruleCollectionClause_DFAcall = false;

             if( typeof this.ruleModelCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelCollection";
        }
        return retval;
    },

    // inline static return class
    ruleCollectionClause_return: (function() {
        IDPParser.ruleCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:426:1: ruleCollectionClause returns [value] : (selectionClauseOutput= ruleCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleCollectionClause"
    ruleCollectionClause: function() {
        this.currentRule = "ruleCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB41 = null;
        var RROUNDB42 = null;
         var selectionClauseOutput = null;

        var LROUNDB41_tree=null;
        var RROUNDB42_tree=null;

        try {
            // IDP.g:427:17: ( (selectionClauseOutput= ruleCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleCollectionSelectionClause RROUNDB ) )
            // IDP.g:427:33: (selectionClauseOutput= ruleCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:427:33: (selectionClauseOutput= ruleCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleCollectionSelectionClause RROUNDB )
            var alt6=2;

            var LA6_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(FIRST,FIRST,1) && LA6_0==FIRST )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA6_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA6_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA6_0>=ZERO_OR_ONE && LA6_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA6_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(FIRST,FIRST,1) && LA6_0==FIRST )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA6_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA6_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA6_0>=ZERO_OR_ONE && LA6_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA6_0==INT )) ) {
                alt6=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA6_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA6_0==LROUNDB )) ) {
                alt6=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_6_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 6, 0, this.input);

                nvae_6_0.c = this.input.LA(1);
                throw nvae_6_0;
            }
            switch (alt6) {
                case 1 :
                    // IDP.g:427:34: selectionClauseOutput= ruleCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionSelectionClause_in_ruleCollectionClause3764);
                    this.ruleCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA6 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:428:35: LROUNDB selectionClauseOutput= ruleCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB41=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleCollectionClause3800); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB41_tree = this.adaptor.create(LROUNDB41);
                    this.adaptor.addChild(root_0, LROUNDB41_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionSelectionClause_in_ruleCollectionClause3806);
                    this.ruleCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA6 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB42=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleCollectionClause3808); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB42_tree = this.adaptor.create(RROUNDB42);
                    this.adaptor.addChild(root_0, RROUNDB42_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA6 !== undefined && this.failedPredictDFA6)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCollectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleCollectionSelectionClause_return: (function() {
        IDPParser.ruleCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:432:1: ruleCollectionSelectionClause returns [value] : selction= ruleRootCollection ;
    // $ANTLR start "ruleCollectionSelectionClause"
    ruleCollectionSelectionClause: function() {
        this.currentRule = "ruleCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:435:17: (selction= ruleRootCollection )
            // IDP.g:435:33: selction= ruleRootCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleRootCollection_in_ruleCollectionSelectionClause4019);
            this.ruleRootCollection_DFAcall = false;

             if( typeof this.ruleCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleRootCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleRootCollection();

            	}
            	}
            else{
                selction=this.ruleRootCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    collectionResultAggregationOption_return: (function() {
        IDPParser.collectionResultAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.collectionResultAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:442:1: collectionResultAggregationOption returns [value] : (aggregationOptionOutput= FIRST ) (quantity= ruleInteger ) (optional_of= OF )? ;
    // $ANTLR start "collectionResultAggregationOption"
    collectionResultAggregationOption: function() {
        this.currentRule = "collectionResultAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.collectionResultAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var aggregationOptionOutput = null;
        var optional_of = null;
         var quantity = null;

        var aggregationOptionOutput_tree=null;
        var optional_of_tree=null;

         var operatorArgs = {}; var collectionOperatorArgs = {}; 
        try {
            // IDP.g:445:17: ( (aggregationOptionOutput= FIRST ) (quantity= ruleInteger ) (optional_of= OF )? )
            // IDP.g:445:33: (aggregationOptionOutput= FIRST ) (quantity= ruleInteger ) (optional_of= OF )?
            root_0 = this.adaptor.nil();

            // IDP.g:445:33: (aggregationOptionOutput= FIRST )
            // IDP.g:445:34: aggregationOptionOutput= FIRST


            this.pushNextTokens(FIRST,FIRST,1);
            aggregationOptionOutput=this.match(this.input,FIRST,IDPParser.FOLLOW_FIRST_in_collectionResultAggregationOption4160); if (this.state.failed) return retval;
            if( FIRST !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            aggregationOptionOutput_tree = this.adaptor.create(aggregationOptionOutput);
            this.adaptor.addChild(root_0, aggregationOptionOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = (aggregationOptionOutput?aggregationOptionOutput.getText():null); operatorArgs.value = "top";
            }



            // IDP.g:445:156: (quantity= ruleInteger )
            // IDP.g:445:157: quantity= ruleInteger
            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_collectionResultAggregationOption4169);
            this.ruleInteger_DFAcall = false;

             if( typeof this.collectionResultAggregationOptionCurrentDecisionNumber !== 'undefined' && this.collectionResultAggregationOptionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.collectionResultAggregationOptionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                quantity=this.ruleInteger();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.collectionResultAggregationOptionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	quantity=this.ruleInteger();

            	}
            	}
            else{
                quantity=this.ruleInteger();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
            }



            // IDP.g:445:235: (optional_of= OF )?
            var alt7=2;

            var LA7_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA7_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA7_0==OF )) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // IDP.g:445:236: optional_of= OF


                    this.pushNextTokens(OF,OF,1);
                    optional_of=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_collectionResultAggregationOption4179); if (this.state.failed) return retval;
                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    optional_of_tree = this.adaptor.create(optional_of);
                    this.adaptor.addChild(root_0, optional_of_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue += " " + (optional_of?optional_of.getText():null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA7 !== undefined && this.failedPredictDFA7)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              collectionOperatorArgs.operator = new this.entityModelLib.OperatorOption(operatorArgs);  retval.value = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs);  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "collectionResultAggregationOption";
        }
        return retval;
    },

    // inline static return class
    ruleSortingOptions_return: (function() {
        IDPParser.ruleSortingOptions_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleSortingOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:448:1: ruleSortingOptions returns [value] : (order= ruleNumericOrder | order= ruleDateTimeOrder | order= ruleStringOrder );
    // $ANTLR start "ruleSortingOptions"
    ruleSortingOptions: function() {
        this.currentRule = "ruleSortingOptions";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleSortingOptions_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var order = null;


         this.parseModelLib.getModelManger().disableAliases = true;
        try {
            // IDP.g:451:25: (order= ruleNumericOrder | order= ruleDateTimeOrder | order= ruleStringOrder )
            var alt8=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case WITH_THE_HIGHEST:
            case WITH_THE_LOWEST:
                alt8=1;   
                break;
            case WITH_THE_MOST_RECENT:
            case WITH_THE_EARLIEST:
                alt8=2;   
                break;
            case SORTED_FROM_Z_TO_A_BY:
            case SORTED_FROM_A_TO_Z_BY:
                alt8=3;   
                break;
            default:
            this.pushApplyTokens([WITH_THE_HIGHEST,WITH_THE_LOWEST,WITH_THE_MOST_RECENT,WITH_THE_EARLIEST,SORTED_FROM_Z_TO_A_BY,SORTED_FROM_A_TO_Z_BY]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_8 =
            			new org.antlr.runtime.NoViableAltException(null, 8, 0, this.input);

                nvae_8.c = this.input.LA(1);
                throw nvae_8;
            }

            switch (alt8) {
                case 1 :
                    // IDP.g:451:49: order= ruleNumericOrder
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericOrder_in_ruleSortingOptions4367);
                    this.ruleNumericOrder_DFAcall = false;

                     if( typeof this.ruleSortingOptionsCurrentDecisionNumber !== 'undefined' && this.ruleSortingOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSortingOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA8 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleNumericOrder();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSortingOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleNumericOrder();

                    	}
                    	}
                    else{
                        order=this.ruleNumericOrder();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());


                    break;
                case 2 :
                    // IDP.g:451:76: order= ruleDateTimeOrder
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleDateTimeOrder_in_ruleSortingOptions4375);
                    this.ruleDateTimeOrder_DFAcall = false;

                     if( typeof this.ruleSortingOptionsCurrentDecisionNumber !== 'undefined' && this.ruleSortingOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSortingOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA8 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleDateTimeOrder();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSortingOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleDateTimeOrder();

                    	}
                    	}
                    else{
                        order=this.ruleDateTimeOrder();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());


                    break;
                case 3 :
                    // IDP.g:451:104: order= ruleStringOrder
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringOrder_in_ruleSortingOptions4383);
                    this.ruleStringOrder_DFAcall = false;

                     if( typeof this.ruleSortingOptionsCurrentDecisionNumber !== 'undefined' && this.ruleSortingOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSortingOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA8 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleStringOrder();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSortingOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleStringOrder();

                    	}
                    	}
                    else{
                        order=this.ruleStringOrder();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = (order!==null?order.value:null); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleSortingOptions";

                                                                    this.parseModelLib.getModelManger().disableAliases = false;
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleNumericOrder_return: (function() {
        IDPParser.ruleNumericOrder_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericOrder_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:456:1: ruleNumericOrder returns [value] : (op= WITH_THE_HIGHEST | op= WITH_THE_LOWEST ) (nav= ( TYPETIMEINTERVAL | TYPENUMBER ) ) ;
    // $ANTLR start "ruleNumericOrder"
    ruleNumericOrder: function() {
        this.currentRule = "ruleNumericOrder";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericOrder_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var op = null;
        var nav = null;

        var op_tree=null;
        var nav_tree=null;

         var operatorArgs = {}; var output = []
        try {
            // IDP.g:459:25: ( (op= WITH_THE_HIGHEST | op= WITH_THE_LOWEST ) (nav= ( TYPETIMEINTERVAL | TYPENUMBER ) ) )
            // IDP.g:459:49: (op= WITH_THE_HIGHEST | op= WITH_THE_LOWEST ) (nav= ( TYPETIMEINTERVAL | TYPENUMBER ) )
            root_0 = this.adaptor.nil();

            // IDP.g:459:49: (op= WITH_THE_HIGHEST | op= WITH_THE_LOWEST )
            var alt9=2;

            var LA9_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(WITH_THE_HIGHEST,WITH_THE_HIGHEST,1) && LA9_0==WITH_THE_HIGHEST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(WITH_THE_HIGHEST,WITH_THE_HIGHEST,1) && LA9_0==WITH_THE_HIGHEST )) ) {
                alt9=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(WITH_THE_LOWEST,WITH_THE_LOWEST,1) && LA9_0==WITH_THE_LOWEST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(WITH_THE_LOWEST,WITH_THE_LOWEST,1) && LA9_0==WITH_THE_LOWEST )) ) {
                alt9=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_9_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 9, 0, this.input);

                nvae_9_0.c = this.input.LA(1);
                throw nvae_9_0;
            }
            switch (alt9) {
                case 1 :
                    // IDP.g:459:50: op= WITH_THE_HIGHEST


                    this.pushNextTokens(WITH_THE_HIGHEST,WITH_THE_HIGHEST,1);
                    op=this.match(this.input,WITH_THE_HIGHEST,IDPParser.FOLLOW_WITH_THE_HIGHEST_in_ruleNumericOrder4590); if (this.state.failed) return retval;
                    if( WITH_THE_HIGHEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "descend";
                    }


                    break;
                case 2 :
                    // IDP.g:459:147: op= WITH_THE_LOWEST


                    this.pushNextTokens(WITH_THE_LOWEST,WITH_THE_LOWEST,1);
                    op=this.match(this.input,WITH_THE_LOWEST,IDPParser.FOLLOW_WITH_THE_LOWEST_in_ruleNumericOrder4600); if (this.state.failed) return retval;
                    if( WITH_THE_LOWEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "ascend";
                    }


                    break;

            }
            /*if(this.failedPredictDFA9 !== undefined && this.failedPredictDFA9)
            { 
                throw null;
            }*/

            // IDP.g:459:242: (nav= ( TYPETIMEINTERVAL | TYPENUMBER ) )
            // IDP.g:459:243: nav= ( TYPETIMEINTERVAL | TYPENUMBER )
            nav=this.input.LT(1);
            if ( (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && this.input.LA(1)>=TYPETIMEINTERVAL && this.input.LA(1)<=TYPENUMBER ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(nav));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_nav_4611 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_nav_4611;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              output.orderBy = this.parseModelLib.validateNavigationRule((nav?nav.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               output.operator = new this.entityModelLib.OperatorOption(operatorArgs); retval.value = output; 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericOrder";
        }
        return retval;
    },

    // inline static return class
    ruleDateTimeOrder_return: (function() {
        IDPParser.ruleDateTimeOrder_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateTimeOrder_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:461:1: ruleDateTimeOrder returns [value] : (op= WITH_THE_MOST_RECENT | op= WITH_THE_EARLIEST ) (nav= ( TYPETIME | TYPEDATE | TYPETIMESTAMP ) ) ;
    // $ANTLR start "ruleDateTimeOrder"
    ruleDateTimeOrder: function() {
        this.currentRule = "ruleDateTimeOrder";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateTimeOrder_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var op = null;
        var nav = null;

        var op_tree=null;
        var nav_tree=null;

         var operatorArgs = {}; var output = []
        try {
            // IDP.g:464:25: ( (op= WITH_THE_MOST_RECENT | op= WITH_THE_EARLIEST ) (nav= ( TYPETIME | TYPEDATE | TYPETIMESTAMP ) ) )
            // IDP.g:464:49: (op= WITH_THE_MOST_RECENT | op= WITH_THE_EARLIEST ) (nav= ( TYPETIME | TYPEDATE | TYPETIMESTAMP ) )
            root_0 = this.adaptor.nil();

            // IDP.g:464:49: (op= WITH_THE_MOST_RECENT | op= WITH_THE_EARLIEST )
            var alt10=2;

            var LA10_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(WITH_THE_MOST_RECENT,WITH_THE_MOST_RECENT,1) && LA10_0==WITH_THE_MOST_RECENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(WITH_THE_MOST_RECENT,WITH_THE_MOST_RECENT,1) && LA10_0==WITH_THE_MOST_RECENT )) ) {
                alt10=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(WITH_THE_EARLIEST,WITH_THE_EARLIEST,1) && LA10_0==WITH_THE_EARLIEST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(WITH_THE_EARLIEST,WITH_THE_EARLIEST,1) && LA10_0==WITH_THE_EARLIEST )) ) {
                alt10=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_10_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 10, 0, this.input);

                nvae_10_0.c = this.input.LA(1);
                throw nvae_10_0;
            }
            switch (alt10) {
                case 1 :
                    // IDP.g:464:50: op= WITH_THE_MOST_RECENT


                    this.pushNextTokens(WITH_THE_MOST_RECENT,WITH_THE_MOST_RECENT,1);
                    op=this.match(this.input,WITH_THE_MOST_RECENT,IDPParser.FOLLOW_WITH_THE_MOST_RECENT_in_ruleDateTimeOrder4775); if (this.state.failed) return retval;
                    if( WITH_THE_MOST_RECENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "descend";
                    }


                    break;
                case 2 :
                    // IDP.g:464:151: op= WITH_THE_EARLIEST


                    this.pushNextTokens(WITH_THE_EARLIEST,WITH_THE_EARLIEST,1);
                    op=this.match(this.input,WITH_THE_EARLIEST,IDPParser.FOLLOW_WITH_THE_EARLIEST_in_ruleDateTimeOrder4785); if (this.state.failed) return retval;
                    if( WITH_THE_EARLIEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "ascend";
                    }


                    break;

            }
            /*if(this.failedPredictDFA10 !== undefined && this.failedPredictDFA10)
            { 
                throw null;
            }*/

            // IDP.g:464:248: (nav= ( TYPETIME | TYPEDATE | TYPETIMESTAMP ) )
            // IDP.g:464:249: nav= ( TYPETIME | TYPEDATE | TYPETIMESTAMP )
            nav=this.input.LT(1);
            if ( (  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && this.input.LA(1)>=TYPETIME && this.input.LA(1)<=TYPETIMESTAMP ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(nav));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_nav_4796 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_nav_4796;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              output.orderBy = this.parseModelLib.validateNavigationRule((nav?nav.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = output; output.operator = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateTimeOrder";
        }
        return retval;
    },

    // inline static return class
    ruleStringOrder_return: (function() {
        IDPParser.ruleStringOrder_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringOrder_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:466:1: ruleStringOrder returns [value] : (op= SORTED_FROM_Z_TO_A_BY | op= SORTED_FROM_A_TO_Z_BY ) (nav= TYPESTRING ) ;
    // $ANTLR start "ruleStringOrder"
    ruleStringOrder: function() {
        this.currentRule = "ruleStringOrder";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringOrder_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var op = null;
        var nav = null;

        var op_tree=null;
        var nav_tree=null;

         var operatorArgs = {}; var output = []
        try {
            // IDP.g:469:25: ( (op= SORTED_FROM_Z_TO_A_BY | op= SORTED_FROM_A_TO_Z_BY ) (nav= TYPESTRING ) )
            // IDP.g:469:49: (op= SORTED_FROM_Z_TO_A_BY | op= SORTED_FROM_A_TO_Z_BY ) (nav= TYPESTRING )
            root_0 = this.adaptor.nil();

            // IDP.g:469:49: (op= SORTED_FROM_Z_TO_A_BY | op= SORTED_FROM_A_TO_Z_BY )
            var alt11=2;

            var LA11_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SORTED_FROM_Z_TO_A_BY,SORTED_FROM_Z_TO_A_BY,1) && LA11_0==SORTED_FROM_Z_TO_A_BY )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SORTED_FROM_Z_TO_A_BY,SORTED_FROM_Z_TO_A_BY,1) && LA11_0==SORTED_FROM_Z_TO_A_BY )) ) {
                alt11=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SORTED_FROM_A_TO_Z_BY,SORTED_FROM_A_TO_Z_BY,1) && LA11_0==SORTED_FROM_A_TO_Z_BY )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SORTED_FROM_A_TO_Z_BY,SORTED_FROM_A_TO_Z_BY,1) && LA11_0==SORTED_FROM_A_TO_Z_BY )) ) {
                alt11=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_11_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 11, 0, this.input);

                nvae_11_0.c = this.input.LA(1);
                throw nvae_11_0;
            }
            switch (alt11) {
                case 1 :
                    // IDP.g:469:50: op= SORTED_FROM_Z_TO_A_BY


                    this.pushNextTokens(SORTED_FROM_Z_TO_A_BY,SORTED_FROM_Z_TO_A_BY,1);
                    op=this.match(this.input,SORTED_FROM_Z_TO_A_BY,IDPParser.FOLLOW_SORTED_FROM_Z_TO_A_BY_in_ruleStringOrder4964); if (this.state.failed) return retval;
                    if( SORTED_FROM_Z_TO_A_BY !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "descend";
                    }


                    break;
                case 2 :
                    // IDP.g:469:152: op= SORTED_FROM_A_TO_Z_BY


                    this.pushNextTokens(SORTED_FROM_A_TO_Z_BY,SORTED_FROM_A_TO_Z_BY,1);
                    op=this.match(this.input,SORTED_FROM_A_TO_Z_BY,IDPParser.FOLLOW_SORTED_FROM_A_TO_Z_BY_in_ruleStringOrder4974); if (this.state.failed) return retval;
                    if( SORTED_FROM_A_TO_Z_BY !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    op_tree = this.adaptor.create(op);
                    this.adaptor.addChild(root_0, op_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      operatorArgs.originalValue = (op?op.getText():null); operatorArgs.value = "ascend";
                    }


                    break;

            }
            /*if(this.failedPredictDFA11 !== undefined && this.failedPredictDFA11)
            { 
                throw null;
            }*/

            // IDP.g:469:253: (nav= TYPESTRING )
            // IDP.g:469:254: nav= TYPESTRING


            this.pushNextTokens(TYPESTRING,TYPESTRING,1);
            nav=this.match(this.input,TYPESTRING,IDPParser.FOLLOW_TYPESTRING_in_ruleStringOrder4985); if (this.state.failed) return retval;
            if( TYPESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            nav_tree = this.adaptor.create(nav);
            this.adaptor.addChild(root_0, nav_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              output.orderBy = this.parseModelLib.validateNavigationRule((nav?nav.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = output; output.operator = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringOrder";
        }
        return retval;
    },

    // inline static return class
    ruleRootCollection_return: (function() {
        IDPParser.ruleRootCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleRootCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:472:1: ruleRootCollection returns [value] : ( ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? ) ;
    // $ANTLR start "ruleRootCollection"
    ruleRootCollection: function() {
        this.currentRule = "ruleRootCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleRootCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var OF43 = null;
         var first = null;
         var rall = null;
         var navigationOutput = null;
         var quantity = null;
         var order = null;
         var flt = null;

        var OF43_tree=null;

              var selection = {}; 
                                                        var collectionOperatorArgs = {}; 
                                                        var ruleOutput = {}; 
                                                        var ruleOutput2 = {};                                   
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.COLLECTION.value;
                                                        var secondAggrigation = false;
                                        
        try {
            // IDP.g:489:17: ( ( ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? ) )
            // IDP.g:489:33: ( ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? )
            root_0 = this.adaptor.nil();

            // IDP.g:489:33: ( ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? )
            // IDP.g:489:34: ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )?
            // IDP.g:489:34: ( ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) )
            var alt15=2;

            var LA15_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(FIRST,FIRST,1) && LA15_0==FIRST )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA15_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA15_0==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(FIRST,FIRST,1) && LA15_0==FIRST )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA15_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA15_0==ALL )) ) {
                alt15=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA15_0>=ZERO_OR_ONE && LA15_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA15_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA15_0>=ZERO_OR_ONE && LA15_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA15_0==INT )) ) {
                alt15=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_15_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 15, 0, this.input);

                nvae_15_0.c = this.input.LA(1);
                throw nvae_15_0;
            }
            switch (alt15) {
                case 1 :
                    // IDP.g:489:37: ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) )
                    // IDP.g:489:37: ( (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) )
                    // IDP.g:489:38: (first= collectionResultAggregationOption )? (rall= ruleAll )? (navigationOutput= ruleCollectionContext )
                    // IDP.g:489:38: (first= collectionResultAggregationOption )?
                    var alt12=2;

                    var LA12_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(FIRST,FIRST,1) && LA12_0==FIRST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(FIRST,FIRST,1) && LA12_0==FIRST )) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // IDP.g:489:39: first= collectionResultAggregationOption
                            this.pushFollow(IDPParser.FOLLOW_collectionResultAggregationOption_in_ruleRootCollection5149);
                            this.collectionResultAggregationOption_DFAcall = false;

                             if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA12 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                first=this.collectionResultAggregationOption();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	first=this.collectionResultAggregationOption();

                            	}
                            	}
                            else{
                                first=this.collectionResultAggregationOption();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, first.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              ruleOutput2.aggregationOption = (first!==null?first.value:null); secondAggrigation = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA12 !== undefined && this.failedPredictDFA12)
                    { 
                        throw null;
                    }*/

                    // IDP.g:489:157: (rall= ruleAll )?
                    var alt13=2;

                    var LA13_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL,ALL,1) && LA13_0==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL,ALL,1) && LA13_0==ALL )) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // IDP.g:489:158: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleRootCollection5160);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA13 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              ruleOutput.aggregationOption = (rall!==null?rall.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA13 !== undefined && this.failedPredictDFA13)
                    { 
                        throw null;
                    }*/

                    // IDP.g:489:222: (navigationOutput= ruleCollectionContext )
                    // IDP.g:489:223: navigationOutput= ruleCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionContext_in_ruleRootCollection5172);
                    this.ruleCollectionContext_DFAcall = false;

                     if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selection.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }








                    break;
                case 2 :
                    // IDP.g:491:49: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) )
                    // IDP.g:491:49: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) )
                    // IDP.g:491:50: (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions )
                    // IDP.g:491:50: (quantity= ruleInteger )
                    // IDP.g:491:51: quantity= ruleInteger
                    this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleRootCollection5284);
                    this.ruleInteger_DFAcall = false;

                     if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        quantity=this.ruleInteger();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	quantity=this.ruleInteger();

                    	}
                    	}
                    else{
                        quantity=this.ruleInteger();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                    }



                    // IDP.g:491:129: ( OF rall= ruleAll )?
                    var alt14=2;

                    var LA14_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA14_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA14_0==OF )) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // IDP.g:491:130: OF rall= ruleAll


                            this.pushNextTokens(OF,OF,1);
                            OF43=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleRootCollection5290); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF43_tree = this.adaptor.create(OF43);
                            this.adaptor.addChild(root_0, OF43_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleRootCollection5296);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA14 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              ruleOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigation = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA14 !== undefined && this.failedPredictDFA14)
                    { 
                        throw null;
                    }*/

                    // IDP.g:491:223: (navigationOutput= ruleCollectionContext )
                    // IDP.g:491:224: navigationOutput= ruleCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionContext_in_ruleRootCollection5308);
                    this.ruleCollectionContext_DFAcall = false;

                     if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selection.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }



                    // IDP.g:492:61: (order= ruleSortingOptions )
                    // IDP.g:492:62: order= ruleSortingOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleRootCollection5379);
                    this.ruleSortingOptions_DFAcall = false;

                     if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleSortingOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleSortingOptions();

                    	}
                    	}
                    else{
                        order=this.ruleSortingOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      (secondAggrigation ? ruleOutput2.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                    }





                    break;

            }
            /*if(this.failedPredictDFA15 !== undefined && this.failedPredictDFA15)
            { 
                throw null;
            }*/

            // IDP.g:493:33: (flt= filterClause )?
            var alt16=2;

            var LA16_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA16_0>=WHERE && LA16_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA16_0>=WHERE && LA16_0<=FILTER_BY )) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // IDP.g:493:34: flt= filterClause
                    this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleRootCollection5434);
                    this.filterClause_DFAcall = false;

                     if( typeof this.ruleRootCollectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA16 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.filterClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.filterClause();

                    	}
                    	}
                    else{
                        flt=this.filterClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selection.filterClause = (flt!==null?flt.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA16 !== undefined && this.failedPredictDFA16)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                 ruleOutput.selection = new this.entityModelLib.Selection(selection, this.parseModelLib.getModelManger()); 
                                                              var compoundSelection = new this.entityModelLib.CompoundSelection(ruleOutput);
                                                              ruleOutput2.compoundSelection = compoundSelection;
                                                              ruleOutput2.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.COLLECTION.value;
                                                              this.parseModelLib.getModelManger().cleanAllContext();

                                                              retval.value = ((secondAggrigation) ? new this.entityModelLib.CompoundSelection(ruleOutput2) : compoundSelection );
                                              
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleRootCollection";
        }
        return retval;
    },

    // inline static return class
    ruleRootCollectionSelection_return: (function() {
        IDPParser.ruleRootCollectionSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleRootCollectionSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:497:1: ruleRootCollectionSelection returns [value] : ( ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? ) ;
    // $ANTLR start "ruleRootCollectionSelection"
    ruleRootCollectionSelection: function() {
        this.currentRule = "ruleRootCollectionSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleRootCollectionSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var OF44 = null;
         var rall = null;
         var navigationOutput = null;
         var quantity = null;
         var order = null;
         var flt = null;

        var OF44_tree=null;

              var selection = {}; 
                                                        var collectionOperatorArgs = {}; 
                                                        var ruleOutput = {}; 
                                                        var ruleOutput2 = {};                                   
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.COLLECTION.value;
                                                        var secondAggrigation = false;
                                        
        try {
            // IDP.g:514:17: ( ( ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? ) )
            // IDP.g:514:33: ( ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? )
            root_0 = this.adaptor.nil();

            // IDP.g:514:33: ( ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )? )
            // IDP.g:514:34: ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) ) (flt= filterClause )?
            // IDP.g:514:34: ( ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) ) )
            var alt19=2;

            var LA19_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA19_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA19_0==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA19_0==TYPECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA19_0==ALL )) ) {
                alt19=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA19_0>=ZERO_OR_ONE && LA19_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA19_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA19_0>=ZERO_OR_ONE && LA19_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA19_0==INT )) ) {
                alt19=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_19_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 19, 0, this.input);

                nvae_19_0.c = this.input.LA(1);
                throw nvae_19_0;
            }
            switch (alt19) {
                case 1 :
                    // IDP.g:514:37: ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) )
                    // IDP.g:514:37: ( (rall= ruleAll )? (navigationOutput= ruleCollectionContext ) )
                    // IDP.g:514:161: (rall= ruleAll )? (navigationOutput= ruleCollectionContext )
                    // IDP.g:514:161: (rall= ruleAll )?
                    var alt17=2;

                    var LA17_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL,ALL,1) && LA17_0==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL,ALL,1) && LA17_0==ALL )) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // IDP.g:514:162: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleRootCollectionSelection5652);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA17 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              ruleOutput.aggregationOption = (rall!==null?rall.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA17 !== undefined && this.failedPredictDFA17)
                    { 
                        throw null;
                    }*/

                    // IDP.g:514:226: (navigationOutput= ruleCollectionContext )
                    // IDP.g:514:227: navigationOutput= ruleCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionContext_in_ruleRootCollectionSelection5664);
                    this.ruleCollectionContext_DFAcall = false;

                     if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selection.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }








                    break;
                case 2 :
                    // IDP.g:516:49: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) )
                    // IDP.g:516:49: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions ) )
                    // IDP.g:516:50: (quantity= ruleInteger ) ( OF rall= ruleAll )? (navigationOutput= ruleCollectionContext ) (order= ruleSortingOptions )
                    // IDP.g:516:50: (quantity= ruleInteger )
                    // IDP.g:516:51: quantity= ruleInteger
                    this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleRootCollectionSelection5776);
                    this.ruleInteger_DFAcall = false;

                     if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        quantity=this.ruleInteger();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	quantity=this.ruleInteger();

                    	}
                    	}
                    else{
                        quantity=this.ruleInteger();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                    }



                    // IDP.g:516:129: ( OF rall= ruleAll )?
                    var alt18=2;

                    var LA18_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA18_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA18_0==OF )) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // IDP.g:516:130: OF rall= ruleAll


                            this.pushNextTokens(OF,OF,1);
                            OF44=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleRootCollectionSelection5782); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF44_tree = this.adaptor.create(OF44);
                            this.adaptor.addChild(root_0, OF44_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleRootCollectionSelection5788);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA18 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              ruleOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigation = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA18 !== undefined && this.failedPredictDFA18)
                    { 
                        throw null;
                    }*/

                    // IDP.g:516:223: (navigationOutput= ruleCollectionContext )
                    // IDP.g:516:224: navigationOutput= ruleCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionContext_in_ruleRootCollectionSelection5800);
                    this.ruleCollectionContext_DFAcall = false;

                     if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selection.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }



                    // IDP.g:517:61: (order= ruleSortingOptions )
                    // IDP.g:517:62: order= ruleSortingOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleRootCollectionSelection5871);
                    this.ruleSortingOptions_DFAcall = false;

                     if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleSortingOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleSortingOptions();

                    	}
                    	}
                    else{
                        order=this.ruleSortingOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      (secondAggrigation ? ruleOutput2.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                    }





                    break;

            }
            /*if(this.failedPredictDFA19 !== undefined && this.failedPredictDFA19)
            { 
                throw null;
            }*/

            // IDP.g:518:33: (flt= filterClause )?
            var alt20=2;

            var LA20_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA20_0>=WHERE && LA20_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA20_0>=WHERE && LA20_0<=FILTER_BY )) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // IDP.g:518:34: flt= filterClause
                    this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleRootCollectionSelection5926);
                    this.filterClause_DFAcall = false;

                     if( typeof this.ruleRootCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleRootCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleRootCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA20 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.filterClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleRootCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.filterClause();

                    	}
                    	}
                    else{
                        flt=this.filterClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selection.filterClause = (flt!==null?flt.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA20 !== undefined && this.failedPredictDFA20)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                 ruleOutput.selection = new this.entityModelLib.Selection(selection, this.parseModelLib.getModelManger()); 
                                                              var compoundSelection = new this.entityModelLib.CompoundSelection(ruleOutput);
                                                              ruleOutput2.compoundSelection = compoundSelection;
                                                              ruleOutput2.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.COLLECTION.value;
              						this.parseModelLib.getModelManger().cleanAllContext();
              						
                                                              retval.value = ((secondAggrigation) ? new this.entityModelLib.CompoundSelection(ruleOutput2) : compoundSelection );
                                              
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleRootCollectionSelection";
        }
        return retval;
    },

    // inline static return class
    ruleCollectionContext_return: (function() {
        IDPParser.ruleCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:521:1: ruleCollectionContext returns [value] : navigationOutput= TYPECOLLECTION ;
    // $ANTLR start "ruleCollectionContext"
    ruleCollectionContext: function() {
        this.currentRule = "ruleCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:522:25: (navigationOutput= TYPECOLLECTION )
            // IDP.g:522:49: navigationOutput= TYPECOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1);
            navigationOutput=this.match(this.input,TYPECOLLECTION,IDPParser.FOLLOW_TYPECOLLECTION_in_ruleCollectionContext6141); if (this.state.failed) return retval;
            if( TYPECOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleModelBooleanCollection_return: (function() {
        IDPParser.ruleModelBooleanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelBooleanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:535:1: ruleModelBooleanCollection returns [value] : selectionLeftOutput= ruleBooleanCollectionClause ;
    // $ANTLR start "ruleModelBooleanCollection"
    ruleModelBooleanCollection: function() {
        this.currentRule = "ruleModelBooleanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelBooleanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:538:17: (selectionLeftOutput= ruleBooleanCollectionClause )
            // IDP.g:538:33: selectionLeftOutput= ruleBooleanCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollectionClause_in_ruleModelBooleanCollection6300);
            this.ruleBooleanCollectionClause_DFAcall = false;

             if( typeof this.ruleModelBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelBooleanCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleBooleanCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleBooleanCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleBooleanCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelBooleanCollection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanCollectionClause_return: (function() {
        IDPParser.ruleBooleanCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:540:1: ruleBooleanCollectionClause returns [value] : (selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleBooleanCollectionClause"
    ruleBooleanCollectionClause: function() {
        this.currentRule = "ruleBooleanCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB45 = null;
        var RROUNDB46 = null;
         var selectionClauseOutput = null;

        var LROUNDB45_tree=null;
        var RROUNDB46_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:542:17: ( (selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause RROUNDB ) )
            // IDP.g:542:33: (selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:542:33: (selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause RROUNDB )
            var alt21=2;

            var LA21_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA21_0>=CURRENT && LA21_0<=TYPEBOOLEANDT )||( this.pushNextTokens(ALL,ALL,1) && LA21_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA21_0>=ZERO_OR_ONE && LA21_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA21_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA21_0>=CURRENT && LA21_0<=TYPEBOOLEANDT )||( this.pushNextTokens(ALL,ALL,1) && LA21_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA21_0>=ZERO_OR_ONE && LA21_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA21_0==INT )) ) {
                alt21=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA21_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA21_0==LROUNDB )) ) {
                alt21=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_21_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 21, 0, this.input);

                nvae_21_0.c = this.input.LA(1);
                throw nvae_21_0;
            }
            switch (alt21) {
                case 1 :
                    // IDP.g:542:34: selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnBooleanCollectionSelectionClause_in_ruleBooleanCollectionClause6386);
                    this.ruleReturnBooleanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA21 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:543:35: LROUNDB selectionClauseOutput= ruleReturnBooleanCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB45=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleBooleanCollectionClause6422); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB45_tree = this.adaptor.create(LROUNDB45);
                    this.adaptor.addChild(root_0, LROUNDB45_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnBooleanCollectionSelectionClause_in_ruleBooleanCollectionClause6428);
                    this.ruleReturnBooleanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA21 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnBooleanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB46=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleBooleanCollectionClause6430); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB46_tree = this.adaptor.create(RROUNDB46);
                    this.adaptor.addChild(root_0, RROUNDB46_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA21 !== undefined && this.failedPredictDFA21)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanCollectionClause";

            			if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            					  this.parseModelLib.getModelManger().popFromContextQueue();
            			}
            		 
        }
        return retval;
    },

    // inline static return class
    ruleReturnBooleanCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnBooleanCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnBooleanCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:552:1: ruleReturnBooleanCollectionSelectionClause returns [value] : selction= ruleBooleanCollection ;
    // $ANTLR start "ruleReturnBooleanCollectionSelectionClause"
    ruleReturnBooleanCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnBooleanCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnBooleanCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:555:17: (selction= ruleBooleanCollection )
            // IDP.g:555:33: selction= ruleBooleanCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollection_in_ruleReturnBooleanCollectionSelectionClause6648);
            this.ruleBooleanCollection_DFAcall = false;

             if( typeof this.ruleReturnBooleanCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnBooleanCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnBooleanCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleBooleanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnBooleanCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleBooleanCollection();

            	}
            	}
            else{
                selction=this.ruleBooleanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnBooleanCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelStringCollection_return: (function() {
        IDPParser.ruleModelStringCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelStringCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:559:1: ruleModelStringCollection returns [value] : selectionLeftOutput= ruleStringCollectionClause ;
    // $ANTLR start "ruleModelStringCollection"
    ruleModelStringCollection: function() {
        this.currentRule = "ruleModelStringCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelStringCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:562:17: (selectionLeftOutput= ruleStringCollectionClause )
            // IDP.g:562:33: selectionLeftOutput= ruleStringCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionClause_in_ruleModelStringCollection6759);
            this.ruleStringCollectionClause_DFAcall = false;

             if( typeof this.ruleModelStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelStringCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelStringCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleStringCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelStringCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleStringCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleStringCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelStringCollection";
        }
        return retval;
    },

    // inline static return class
    ruleStringCollectionClause_return: (function() {
        IDPParser.ruleStringCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:564:1: ruleStringCollectionClause returns [value] : (selectionClauseOutput= ruleReturnStringCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnStringCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleStringCollectionClause"
    ruleStringCollectionClause: function() {
        this.currentRule = "ruleStringCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB47 = null;
        var RROUNDB48 = null;
         var selectionClauseOutput = null;

        var LROUNDB47_tree=null;
        var RROUNDB48_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:566:17: ( (selectionClauseOutput= ruleReturnStringCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnStringCollectionSelectionClause RROUNDB ) )
            // IDP.g:566:33: (selectionClauseOutput= ruleReturnStringCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnStringCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:566:33: (selectionClauseOutput= ruleReturnStringCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnStringCollectionSelectionClause RROUNDB )
            var alt22=2;

            var LA22_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA22_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA22_0==ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA22_0>=TYPESTRINGCOLLECTION && LA22_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA22_0>=ZERO_OR_ONE && LA22_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA22_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA22_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA22_0==ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA22_0>=TYPESTRINGCOLLECTION && LA22_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA22_0>=ZERO_OR_ONE && LA22_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA22_0==INT )) ) {
                alt22=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA22_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA22_0==LROUNDB )) ) {
                alt22=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_22_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 22, 0, this.input);

                nvae_22_0.c = this.input.LA(1);
                throw nvae_22_0;
            }
            switch (alt22) {
                case 1 :
                    // IDP.g:566:34: selectionClauseOutput= ruleReturnStringCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnStringCollectionSelectionClause_in_ruleStringCollectionClause6845);
                    this.ruleReturnStringCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA22 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:567:35: LROUNDB selectionClauseOutput= ruleReturnStringCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB47=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleStringCollectionClause6881); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB47_tree = this.adaptor.create(LROUNDB47);
                    this.adaptor.addChild(root_0, LROUNDB47_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnStringCollectionSelectionClause_in_ruleStringCollectionClause6887);
                    this.ruleReturnStringCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA22 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnStringCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB48=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleStringCollectionClause6889); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB48_tree = this.adaptor.create(RROUNDB48);
                    this.adaptor.addChild(root_0, RROUNDB48_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA22 !== undefined && this.failedPredictDFA22)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnStringCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnStringCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnStringCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:576:1: ruleReturnStringCollectionSelectionClause returns [value] : selction= ruleStringCollection ;
    // $ANTLR start "ruleReturnStringCollectionSelectionClause"
    ruleReturnStringCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnStringCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnStringCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:579:17: (selction= ruleStringCollection )
            // IDP.g:579:33: selction= ruleStringCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringCollection_in_ruleReturnStringCollectionSelectionClause7109);
            this.ruleStringCollection_DFAcall = false;

             if( typeof this.ruleReturnStringCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnStringCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnStringCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleStringCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnStringCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleStringCollection();

            	}
            	}
            else{
                selction=this.ruleStringCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnStringCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelNumericCollection_return: (function() {
        IDPParser.ruleModelNumericCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelNumericCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:583:1: ruleModelNumericCollection returns [value] : selectionLeftOutput= ruleNumericCollectionClause ;
    // $ANTLR start "ruleModelNumericCollection"
    ruleModelNumericCollection: function() {
        this.currentRule = "ruleModelNumericCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelNumericCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:586:17: (selectionLeftOutput= ruleNumericCollectionClause )
            // IDP.g:586:33: selectionLeftOutput= ruleNumericCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionClause_in_ruleModelNumericCollection7205);
            this.ruleNumericCollectionClause_DFAcall = false;

             if( typeof this.ruleModelNumericCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelNumericCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelNumericCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleNumericCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelNumericCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleNumericCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleNumericCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelNumericCollection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericCollectionClause_return: (function() {
        IDPParser.ruleNumericCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:588:1: ruleNumericCollectionClause returns [value] : (selectionClauseOutput= ruleReturnNumericCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnNumericCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleNumericCollectionClause"
    ruleNumericCollectionClause: function() {
        this.currentRule = "ruleNumericCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB49 = null;
        var RROUNDB50 = null;
         var selectionClauseOutput = null;

        var LROUNDB49_tree=null;
        var RROUNDB50_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:590:17: ( (selectionClauseOutput= ruleReturnNumericCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnNumericCollectionSelectionClause RROUNDB ) )
            // IDP.g:590:33: (selectionClauseOutput= ruleReturnNumericCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnNumericCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:590:33: (selectionClauseOutput= ruleReturnNumericCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnNumericCollectionSelectionClause RROUNDB )
            var alt23=2;

            var LA23_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA23_0>=COUNT_DISTINCT_OF && LA23_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA23_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA23_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA23_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA23_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA23_0>=ZERO_OR_ONE && LA23_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA23_0>=INT && LA23_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA23_0>=HIGHEST && LA23_0<=SUM_OF )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA23_0>=COUNT_DISTINCT_OF && LA23_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA23_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA23_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA23_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA23_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA23_0>=ZERO_OR_ONE && LA23_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA23_0>=INT && LA23_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA23_0>=HIGHEST && LA23_0<=SUM_OF )) ) {
                alt23=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA23_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA23_0==LROUNDB )) ) {
                alt23=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_23_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 23, 0, this.input);

                nvae_23_0.c = this.input.LA(1);
                throw nvae_23_0;
            }
            switch (alt23) {
                case 1 :
                    // IDP.g:590:34: selectionClauseOutput= ruleReturnNumericCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnNumericCollectionSelectionClause_in_ruleNumericCollectionClause7291);
                    this.ruleReturnNumericCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleNumericCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA23 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:591:35: LROUNDB selectionClauseOutput= ruleReturnNumericCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB49=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericCollectionClause7327); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB49_tree = this.adaptor.create(LROUNDB49);
                    this.adaptor.addChild(root_0, LROUNDB49_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnNumericCollectionSelectionClause_in_ruleNumericCollectionClause7333);
                    this.ruleReturnNumericCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleNumericCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA23 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnNumericCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB50=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericCollectionClause7335); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB50_tree = this.adaptor.create(RROUNDB50);
                    this.adaptor.addChild(root_0, RROUNDB50_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA23 !== undefined && this.failedPredictDFA23)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnNumericCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnNumericCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnNumericCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:600:1: ruleReturnNumericCollectionSelectionClause returns [value] : selction= ruleNumericCollection ;
    // $ANTLR start "ruleReturnNumericCollectionSelectionClause"
    ruleReturnNumericCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnNumericCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnNumericCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:603:17: (selction= ruleNumericCollection )
            // IDP.g:603:33: selction= ruleNumericCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericCollection_in_ruleReturnNumericCollectionSelectionClause7555);
            this.ruleNumericCollection_DFAcall = false;

             if( typeof this.ruleReturnNumericCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnNumericCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnNumericCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleNumericCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnNumericCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleNumericCollection();

            	}
            	}
            else{
                selction=this.ruleNumericCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnNumericCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelDateCollection_return: (function() {
        IDPParser.ruleModelDateCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelDateCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:606:1: ruleModelDateCollection returns [value] : selectionLeftOutput= ruleDateCollectionClause ;
    // $ANTLR start "ruleModelDateCollection"
    ruleModelDateCollection: function() {
        this.currentRule = "ruleModelDateCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelDateCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:609:17: (selectionLeftOutput= ruleDateCollectionClause )
            // IDP.g:609:33: selectionLeftOutput= ruleDateCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionClause_in_ruleModelDateCollection7650);
            this.ruleDateCollectionClause_DFAcall = false;

             if( typeof this.ruleModelDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelDateCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelDateCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleDateCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelDateCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleDateCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleDateCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelDateCollection";
        }
        return retval;
    },

    // inline static return class
    ruleDateCollectionClause_return: (function() {
        IDPParser.ruleDateCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:611:1: ruleDateCollectionClause returns [value] : (selectionClauseOutput= ruleReturnDateCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnDateCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleDateCollectionClause"
    ruleDateCollectionClause: function() {
        this.currentRule = "ruleDateCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB51 = null;
        var RROUNDB52 = null;
         var selectionClauseOutput = null;

        var LROUNDB51_tree=null;
        var RROUNDB52_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:613:17: ( (selectionClauseOutput= ruleReturnDateCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnDateCollectionSelectionClause RROUNDB ) )
            // IDP.g:613:33: (selectionClauseOutput= ruleReturnDateCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnDateCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:613:33: (selectionClauseOutput= ruleReturnDateCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnDateCollectionSelectionClause RROUNDB )
            var alt24=2;

            var LA24_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA24_0==CURRENT )||( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA24_0==TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA24_0>=TYPEDATECOLLECTION && LA24_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA24_0>=ZERO_OR_ONE && LA24_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA24_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA24_0==CURRENT )||( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA24_0==TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA24_0>=TYPEDATECOLLECTION && LA24_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA24_0>=ZERO_OR_ONE && LA24_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA24_0==INT )) ) {
                alt24=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA24_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA24_0==LROUNDB )) ) {
                alt24=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_24_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 24, 0, this.input);

                nvae_24_0.c = this.input.LA(1);
                throw nvae_24_0;
            }
            switch (alt24) {
                case 1 :
                    // IDP.g:613:34: selectionClauseOutput= ruleReturnDateCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnDateCollectionSelectionClause_in_ruleDateCollectionClause7736);
                    this.ruleReturnDateCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA24 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:614:35: LROUNDB selectionClauseOutput= ruleReturnDateCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB51=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateCollectionClause7772); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB51_tree = this.adaptor.create(LROUNDB51);
                    this.adaptor.addChild(root_0, LROUNDB51_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnDateCollectionSelectionClause_in_ruleDateCollectionClause7778);
                    this.ruleReturnDateCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA24 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnDateCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB52=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateCollectionClause7780); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB52_tree = this.adaptor.create(RROUNDB52);
                    this.adaptor.addChild(root_0, RROUNDB52_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA24 !== undefined && this.failedPredictDFA24)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnDateCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnDateCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnDateCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:623:1: ruleReturnDateCollectionSelectionClause returns [value] : selction= ruleDateCollection ;
    // $ANTLR start "ruleReturnDateCollectionSelectionClause"
    ruleReturnDateCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnDateCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnDateCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:626:17: (selction= ruleDateCollection )
            // IDP.g:626:33: selction= ruleDateCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_ruleReturnDateCollectionSelectionClause8000);
            this.ruleDateCollection_DFAcall = false;

             if( typeof this.ruleReturnDateCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnDateCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnDateCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleDateCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnDateCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleDateCollection();

            	}
            	}
            else{
                selction=this.ruleDateCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnDateCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelTimestampCollection_return: (function() {
        IDPParser.ruleModelTimestampCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelTimestampCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:629:1: ruleModelTimestampCollection returns [value] : selectionLeftOutput= ruleTimestampCollectionClause ;
    // $ANTLR start "ruleModelTimestampCollection"
    ruleModelTimestampCollection: function() {
        this.currentRule = "ruleModelTimestampCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelTimestampCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:632:17: (selectionLeftOutput= ruleTimestampCollectionClause )
            // IDP.g:632:33: selectionLeftOutput= ruleTimestampCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollectionClause_in_ruleModelTimestampCollection8095);
            this.ruleTimestampCollectionClause_DFAcall = false;

             if( typeof this.ruleModelTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelTimestampCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelTimestampCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimestampCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelTimestampCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimestampCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimestampCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelTimestampCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampCollectionClause_return: (function() {
        IDPParser.ruleTimestampCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:634:1: ruleTimestampCollectionClause returns [value] : (selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimestampCollectionClause"
    ruleTimestampCollectionClause: function() {
        this.currentRule = "ruleTimestampCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB53 = null;
        var RROUNDB54 = null;
         var selectionClauseOutput = null;

        var LROUNDB53_tree=null;
        var RROUNDB54_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:636:17: ( (selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause RROUNDB ) )
            // IDP.g:636:33: (selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:636:33: (selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause RROUNDB )
            var alt25=2;

            var LA25_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA25_0==CURRENT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA25_0>=TYPETIMESTAMPCOLLECTION && LA25_0<=TYPEDATEDT )||( this.pushNextTokens(ALL,ALL,1) && LA25_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA25_0>=ZERO_OR_ONE && LA25_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA25_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA25_0==CURRENT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA25_0>=TYPETIMESTAMPCOLLECTION && LA25_0<=TYPEDATEDT )||( this.pushNextTokens(ALL,ALL,1) && LA25_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA25_0>=ZERO_OR_ONE && LA25_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA25_0==INT )) ) {
                alt25=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA25_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA25_0==LROUNDB )) ) {
                alt25=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_25_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 25, 0, this.input);

                nvae_25_0.c = this.input.LA(1);
                throw nvae_25_0;
            }
            switch (alt25) {
                case 1 :
                    // IDP.g:636:34: selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimestampCollectionSelectionClause_in_ruleTimestampCollectionClause8181);
                    this.ruleReturnTimestampCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA25 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:637:35: LROUNDB selectionClauseOutput= ruleReturnTimestampCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB53=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimestampCollectionClause8217); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB53_tree = this.adaptor.create(LROUNDB53);
                    this.adaptor.addChild(root_0, LROUNDB53_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimestampCollectionSelectionClause_in_ruleTimestampCollectionClause8223);
                    this.ruleReturnTimestampCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA25 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimestampCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB54=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimestampCollectionClause8225); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB54_tree = this.adaptor.create(RROUNDB54);
                    this.adaptor.addChild(root_0, RROUNDB54_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA25 !== undefined && this.failedPredictDFA25)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnTimestampCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnTimestampCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnTimestampCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:646:1: ruleReturnTimestampCollectionSelectionClause returns [value] : selction= ruleTimestampCollection ;
    // $ANTLR start "ruleReturnTimestampCollectionSelectionClause"
    ruleReturnTimestampCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnTimestampCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnTimestampCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:649:17: (selction= ruleTimestampCollection )
            // IDP.g:649:33: selction= ruleTimestampCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_ruleReturnTimestampCollectionSelectionClause8445);
            this.ruleTimestampCollection_DFAcall = false;

             if( typeof this.ruleReturnTimestampCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnTimestampCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnTimestampCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimestampCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnTimestampCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimestampCollection();

            	}
            	}
            else{
                selction=this.ruleTimestampCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnTimestampCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelTimeSpanCollection_return: (function() {
        IDPParser.ruleModelTimeSpanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelTimeSpanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:653:1: ruleModelTimeSpanCollection returns [value] : selectionLeftOutput= ruleTimeSpanCollectionClause ;
    // $ANTLR start "ruleModelTimeSpanCollection"
    ruleModelTimeSpanCollection: function() {
        this.currentRule = "ruleModelTimeSpanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelTimeSpanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:656:17: (selectionLeftOutput= ruleTimeSpanCollectionClause )
            // IDP.g:656:33: selectionLeftOutput= ruleTimeSpanCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanCollectionClause_in_ruleModelTimeSpanCollection8541);
            this.ruleTimeSpanCollectionClause_DFAcall = false;

             if( typeof this.ruleModelTimeSpanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelTimeSpanCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelTimeSpanCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimeSpanCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelTimeSpanCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimeSpanCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimeSpanCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelTimeSpanCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSpanCollectionClause_return: (function() {
        IDPParser.ruleTimeSpanCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSpanCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:658:1: ruleTimeSpanCollectionClause returns [value] : (selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimeSpanCollectionClause"
    ruleTimeSpanCollectionClause: function() {
        this.currentRule = "ruleTimeSpanCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSpanCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB55 = null;
        var RROUNDB56 = null;
         var selectionClauseOutput = null;

        var LROUNDB55_tree=null;
        var RROUNDB56_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:660:17: ( (selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause RROUNDB ) )
            // IDP.g:660:33: (selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:660:33: (selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause RROUNDB )
            var alt26=2;

            var LA26_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA26_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA26_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA26_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA26_0>=ZERO_OR_ONE && LA26_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA26_0==INT )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA26_0>=HIGHEST && LA26_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA26_0>=TYPETIMEINTERVALCOLLECTION && LA26_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA26_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA26_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA26_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA26_0>=ZERO_OR_ONE && LA26_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA26_0==INT )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA26_0>=HIGHEST && LA26_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA26_0>=TYPETIMEINTERVALCOLLECTION && LA26_0<=TYPETIMEINTERVALDT )) ) {
                alt26=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA26_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA26_0==LROUNDB )) ) {
                alt26=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_26_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 26, 0, this.input);

                nvae_26_0.c = this.input.LA(1);
                throw nvae_26_0;
            }
            switch (alt26) {
                case 1 :
                    // IDP.g:660:34: selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimeSpanCollectionSelectionClause_in_ruleTimeSpanCollectionClause8627);
                    this.ruleReturnTimeSpanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeSpanCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA26 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:661:35: LROUNDB selectionClauseOutput= ruleReturnTimeSpanCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB55=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeSpanCollectionClause8663); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB55_tree = this.adaptor.create(LROUNDB55);
                    this.adaptor.addChild(root_0, LROUNDB55_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimeSpanCollectionSelectionClause_in_ruleTimeSpanCollectionClause8669);
                    this.ruleReturnTimeSpanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeSpanCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA26 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimeSpanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB56=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeSpanCollectionClause8671); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB56_tree = this.adaptor.create(RROUNDB56);
                    this.adaptor.addChild(root_0, RROUNDB56_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA26 !== undefined && this.failedPredictDFA26)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSpanCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnTimeSpanCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnTimeSpanCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnTimeSpanCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:670:1: ruleReturnTimeSpanCollectionSelectionClause returns [value] : selction= ruleTimespanCollection ;
    // $ANTLR start "ruleReturnTimeSpanCollectionSelectionClause"
    ruleReturnTimeSpanCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnTimeSpanCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnTimeSpanCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:673:17: (selction= ruleTimespanCollection )
            // IDP.g:673:33: selction= ruleTimespanCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollection_in_ruleReturnTimeSpanCollectionSelectionClause8891);
            this.ruleTimespanCollection_DFAcall = false;

             if( typeof this.ruleReturnTimeSpanCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnTimeSpanCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnTimeSpanCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimespanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnTimeSpanCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimespanCollection();

            	}
            	}
            else{
                selction=this.ruleTimespanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnTimeSpanCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleModelTimeCollection_return: (function() {
        IDPParser.ruleModelTimeCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelTimeCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:676:1: ruleModelTimeCollection returns [value] : selectionLeftOutput= ruleTimeCollectionClause ;
    // $ANTLR start "ruleModelTimeCollection"
    ruleModelTimeCollection: function() {
        this.currentRule = "ruleModelTimeCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelTimeCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:679:17: (selectionLeftOutput= ruleTimeCollectionClause )
            // IDP.g:679:33: selectionLeftOutput= ruleTimeCollectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeCollectionClause_in_ruleModelTimeCollection8986);
            this.ruleTimeCollectionClause_DFAcall = false;

             if( typeof this.ruleModelTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleModelTimeCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelTimeCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimeCollectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelTimeCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimeCollectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimeCollectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelTimeCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeCollectionClause_return: (function() {
        IDPParser.ruleTimeCollectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeCollectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:681:1: ruleTimeCollectionClause returns [value] : (selectionClauseOutput= ruleReturnTimeCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeCollectionSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimeCollectionClause"
    ruleTimeCollectionClause: function() {
        this.currentRule = "ruleTimeCollectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeCollectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB57 = null;
        var RROUNDB58 = null;
         var selectionClauseOutput = null;

        var LROUNDB57_tree=null;
        var RROUNDB58_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:683:17: ( (selectionClauseOutput= ruleReturnTimeCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeCollectionSelectionClause RROUNDB ) )
            // IDP.g:683:33: (selectionClauseOutput= ruleReturnTimeCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeCollectionSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:683:33: (selectionClauseOutput= ruleReturnTimeCollectionSelectionClause | LROUNDB selectionClauseOutput= ruleReturnTimeCollectionSelectionClause RROUNDB )
            var alt27=2;

            var LA27_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA27_0==CURRENT )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA27_0>=TYPETIMECOLLECTION && LA27_0<=TYPETIMEDT )||( this.pushNextTokens(ALL,ALL,1) && LA27_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA27_0>=ZERO_OR_ONE && LA27_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA27_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA27_0==CURRENT )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA27_0>=TYPETIMECOLLECTION && LA27_0<=TYPETIMEDT )||( this.pushNextTokens(ALL,ALL,1) && LA27_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA27_0>=ZERO_OR_ONE && LA27_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA27_0==INT )) ) {
                alt27=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA27_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA27_0==LROUNDB )) ) {
                alt27=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_27_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 27, 0, this.input);

                nvae_27_0.c = this.input.LA(1);
                throw nvae_27_0;
            }
            switch (alt27) {
                case 1 :
                    // IDP.g:683:34: selectionClauseOutput= ruleReturnTimeCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimeCollectionSelectionClause_in_ruleTimeCollectionClause9072);
                    this.ruleReturnTimeCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA27 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:684:35: LROUNDB selectionClauseOutput= ruleReturnTimeCollectionSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB57=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeCollectionClause9108); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB57_tree = this.adaptor.create(LROUNDB57);
                    this.adaptor.addChild(root_0, LROUNDB57_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleReturnTimeCollectionSelectionClause_in_ruleTimeCollectionClause9114);
                    this.ruleReturnTimeCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeCollectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCollectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA27 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleReturnTimeCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB58=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeCollectionClause9116); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB58_tree = this.adaptor.create(RROUNDB58);
                    this.adaptor.addChild(root_0, RROUNDB58_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA27 !== undefined && this.failedPredictDFA27)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeCollectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleReturnTimeCollectionSelectionClause_return: (function() {
        IDPParser.ruleReturnTimeCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleReturnTimeCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:693:1: ruleReturnTimeCollectionSelectionClause returns [value] : selction= ruleTimeCollection ;
    // $ANTLR start "ruleReturnTimeCollectionSelectionClause"
    ruleReturnTimeCollectionSelectionClause: function() {
        this.currentRule = "ruleReturnTimeCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleReturnTimeCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:696:17: (selction= ruleTimeCollection )
            // IDP.g:696:33: selction= ruleTimeCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeCollection_in_ruleReturnTimeCollectionSelectionClause9336);
            this.ruleTimeCollection_DFAcall = false;

             if( typeof this.ruleReturnTimeCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleReturnTimeCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleReturnTimeCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimeCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleReturnTimeCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimeCollection();

            	}
            	}
            else{
                selction=this.ruleTimeCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleReturnTimeCollectionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleSelectionClause_return: (function() {
        IDPParser.ruleSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:699:1: ruleSelectionClause returns [value] : (singleStatementOutput= ruleNumericStatement | singleStatementOutput= ruleStringSingleStatement | singleStatementOutput= ruleTimespanStatement | singleStatementOutput= ruleTimeSingleStatement | singleStatementOutput= ruleTimestampSingleStatement | singleStatementOutput= ruleDateSingleStatement ) ;
    // $ANTLR start "ruleSelectionClause"
    ruleSelectionClause: function() {
        this.currentRule = "ruleSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var singleStatementOutput = null;


        try {
            // IDP.g:700:17: ( (singleStatementOutput= ruleNumericStatement | singleStatementOutput= ruleStringSingleStatement | singleStatementOutput= ruleTimespanStatement | singleStatementOutput= ruleTimeSingleStatement | singleStatementOutput= ruleTimestampSingleStatement | singleStatementOutput= ruleDateSingleStatement ) )
            // IDP.g:700:33: (singleStatementOutput= ruleNumericStatement | singleStatementOutput= ruleStringSingleStatement | singleStatementOutput= ruleTimespanStatement | singleStatementOutput= ruleTimeSingleStatement | singleStatementOutput= ruleTimestampSingleStatement | singleStatementOutput= ruleDateSingleStatement )
            root_0 = this.adaptor.nil();

            // IDP.g:700:33: (singleStatementOutput= ruleNumericStatement | singleStatementOutput= ruleStringSingleStatement | singleStatementOutput= ruleTimespanStatement | singleStatementOutput= ruleTimeSingleStatement | singleStatementOutput= ruleTimestampSingleStatement | singleStatementOutput= ruleDateSingleStatement )
            var alt28=6;

            this.ruleSelectionClause_DFAcall=(typeof this.ruleSelectionClause_DFAcall === 'undefined' ? false: this.ruleSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleSelectionClause_DFAcall === false /*&& !this.failedPredictDFA28*/)
            {   
                this.dfa28NumberOfAlt = alt28;
                this.dfa28InRule = "ruleSelectionClause";
            	this.dfa28Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleSelectionClauseCurrentDecisionNumber  = 28; 
                alt28 = this.dfa28.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt28 === 0 || alt28 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 28);
            		return retval;
                }
            }	
            else
                alt28 = this.dfa28AltNumber;	
            switch (alt28) {
                case 1 :
                    // IDP.g:700:34: singleStatementOutput= ruleNumericStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericStatement_in_ruleSelectionClause9436);
                    this.ruleNumericStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleNumericStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleNumericStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleNumericStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:701:38: singleStatementOutput= ruleStringSingleStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatement_in_ruleSelectionClause9482);
                    this.ruleStringSingleStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleStringSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleStringSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleStringSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;
                case 3 :
                    // IDP.g:702:34: singleStatementOutput= ruleTimespanStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanStatement_in_ruleSelectionClause9524);
                    this.ruleTimespanStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimespanStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimespanStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimespanStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;
                case 4 :
                    // IDP.g:703:34: singleStatementOutput= ruleTimeSingleStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatement_in_ruleSelectionClause9564);
                    this.ruleTimeSingleStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimeSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimeSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimeSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;
                case 5 :
                    // IDP.g:704:34: singleStatementOutput= ruleTimestampSingleStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatement_in_ruleSelectionClause9604);
                    this.ruleTimestampSingleStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimestampSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimestampSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimestampSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;
                case 6 :
                    // IDP.g:705:34: singleStatementOutput= ruleDateSingleStatement
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatement_in_ruleSelectionClause9644);
                    this.ruleDateSingleStatement_DFAcall = false;

                     if( typeof this.ruleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA28 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleDateSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleDateSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleDateSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA28 !== undefined && this.failedPredictDFA28)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleSelectionClause";
        }
        return retval;
    },

    // inline static return class
    navigationPredicate_return: (function() {
        IDPParser.navigationPredicate_return = function(){};
        org.antlr.lang.extend(IDPParser.navigationPredicate_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:708:1: navigationPredicate returns [value] : nav= ( TYPEBOOLEAN | TYPEDATE | TYPETIMEINTERVAL | TYPENUMBER | TYPESTRING | TYPETIME | TYPETIMESTAMP ) ;
    // $ANTLR start "navigationPredicate"
    navigationPredicate: function() {
        this.currentRule = "navigationPredicate";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.navigationPredicate_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var nav = null;

        var nav_tree=null;

        try {
            // IDP.g:710:17: (nav= ( TYPEBOOLEAN | TYPEDATE | TYPETIMEINTERVAL | TYPENUMBER | TYPESTRING | TYPETIME | TYPETIMESTAMP ) )
            // IDP.g:710:33: nav= ( TYPEBOOLEAN | TYPEDATE | TYPETIMEINTERVAL | TYPENUMBER | TYPESTRING | TYPETIME | TYPETIMESTAMP )
            root_0 = this.adaptor.nil();

            nav=this.input.LT(1);
            if ( (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && this.input.LA(1)>=TYPETIMEINTERVAL && this.input.LA(1)<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && this.input.LA(1)>=TYPETIME && this.input.LA(1)<=TYPETIMESTAMP )||(this.pushNextTokens(TYPESTRING,TYPESTRING,1) && this.input.LA(1)==TYPESTRING )||(this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && this.input.LA(1)==TYPEBOOLEAN ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(nav));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_nav_9778 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_nav_9778;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = this.parseModelLib.validateNavigationRule((nav?nav.getText():null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "navigationPredicate";
        }
        return retval;
    },

    // inline static return class
    filterClause_return: (function() {
        IDPParser.filterClause_return = function(){};
        org.antlr.lang.extend(IDPParser.filterClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:716:1: filterClause returns [value] : ( ( WHERE | FILTER_BY ) ) ( (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB ) ) ;
    // $ANTLR start "filterClause"
    filterClause: function() {
        this.currentRule = "filterClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.filterClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set59 = null;
        var LROUNDB60 = null;
        var RROUNDB61 = null;
         var flt = null;

        var set59_tree=null;
        var LROUNDB60_tree=null;
        var RROUNDB61_tree=null;

        this.parseModelLib.getModelManger().isInsideWhere = true;
        try {
            // IDP.g:718:17: ( ( ( WHERE | FILTER_BY ) ) ( (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB ) ) )
            // IDP.g:718:33: ( ( WHERE | FILTER_BY ) ) ( (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB ) )
            root_0 = this.adaptor.nil();

            // IDP.g:718:33: ( ( WHERE | FILTER_BY ) )
            // IDP.g:718:34: ( WHERE | FILTER_BY )
            set59=this.input.LT(1);
            if ( (  this.pushNextTokens(WHERE,FILTER_BY,1) && this.input.LA(1)>=WHERE && this.input.LA(1)<=FILTER_BY ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set59));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set59_9954 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set59_9954;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            // IDP.g:718:119: ( (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB ) )
            // IDP.g:718:121: (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB )
            // IDP.g:718:121: (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB )
            var alt29=2;

            this.filterClause_DFAcall=(typeof this.filterClause_DFAcall === 'undefined' ? false: this.filterClause_DFAcall); // only valid for synpred
            if(this.filterClause_DFAcall === false /*&& !this.failedPredictDFA29*/)
            {   
                this.dfa29NumberOfAlt = alt29;
                this.dfa29InRule = "filterClause";
            	this.dfa29Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.filterClauseCurrentDecisionNumber  = 29; 
                alt29 = this.dfa29.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt29 === 0 || alt29 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 29);
            		return retval;
                }
            }	
            else
                alt29 = this.dfa29AltNumber;	
            switch (alt29) {
                case 1 :
                    // IDP.g:718:122: flt= ruleModelBooleanWhere
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_filterClause9971);
                    this.ruleModelBooleanWhere_DFAcall = false;

                     if( typeof this.filterClauseCurrentDecisionNumber !== 'undefined' && this.filterClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.filterClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA29 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.ruleModelBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.filterClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.ruleModelBooleanWhere();

                    	}
                    	}
                    else{
                        flt=this.ruleModelBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());


                    break;
                case 2 :
                    // IDP.g:718:154: LROUNDB flt= ruleModelBooleanWhere RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB60=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_filterClause9977); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB60_tree = this.adaptor.create(LROUNDB60);
                    this.adaptor.addChild(root_0, LROUNDB60_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_filterClause9983);
                    this.ruleModelBooleanWhere_DFAcall = false;

                     if( typeof this.filterClauseCurrentDecisionNumber !== 'undefined' && this.filterClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.filterClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA29 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.ruleModelBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.filterClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.ruleModelBooleanWhere();

                    	}
                    	}
                    else{
                        flt=this.ruleModelBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB61=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_filterClause9985); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB61_tree = this.adaptor.create(RROUNDB61);
                    this.adaptor.addChild(root_0, RROUNDB61_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA29 !== undefined && this.failedPredictDFA29)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (flt!==null?flt.value:null); 
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "filterClause";

                                                                    this.parseModelLib.getModelManger().isInsideWhere = false;
                                                            
        }
        return retval;
    },

    // inline static return class
    groupByClause_return: (function() {
        IDPParser.groupByClause_return = function(){};
        org.antlr.lang.extend(IDPParser.groupByClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:728:1: groupByClause returns [value] : ( PER | GROUP_BY ) (groupByArrayOutput= groupByArray | ( LROUNDB groupByArrayOutput= groupByArray RROUNDB ) ) ;
    // $ANTLR start "groupByClause"
    groupByClause: function() {
        this.currentRule = "groupByClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.groupByClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set62 = null;
        var LROUNDB63 = null;
        var RROUNDB64 = null;
         var groupByArrayOutput = null;

        var set62_tree=null;
        var LROUNDB63_tree=null;
        var RROUNDB64_tree=null;

        this.parseModelLib.getModelManger().disableAliases = true;
        try {
            // IDP.g:731:17: ( ( PER | GROUP_BY ) (groupByArrayOutput= groupByArray | ( LROUNDB groupByArrayOutput= groupByArray RROUNDB ) ) )
            // IDP.g:731:33: ( PER | GROUP_BY ) (groupByArrayOutput= groupByArray | ( LROUNDB groupByArrayOutput= groupByArray RROUNDB ) )
            root_0 = this.adaptor.nil();

            set62=this.input.LT(1);
            if ( (  this.pushNextTokens(PER,GROUP_BY,1) && this.input.LA(1)>=PER && this.input.LA(1)<=GROUP_BY ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set62));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set62_10315 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set62_10315;
            }

            // IDP.g:731:52: (groupByArrayOutput= groupByArray | ( LROUNDB groupByArrayOutput= groupByArray RROUNDB ) )
            var alt30=2;

            var LA30_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && LA30_0>=TYPETIMEINTERVAL && LA30_0<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && LA30_0>=TYPETIME && LA30_0<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA30_0==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA30_0==TYPEBOOLEAN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && LA30_0>=TYPETIMEINTERVAL && LA30_0<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && LA30_0>=TYPETIME && LA30_0<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA30_0==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA30_0==TYPEBOOLEAN )) ) {
                alt30=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA30_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA30_0==LROUNDB )) ) {
                alt30=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_30_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 30, 0, this.input);

                nvae_30_0.c = this.input.LA(1);
                throw nvae_30_0;
            }
            switch (alt30) {
                case 1 :
                    // IDP.g:731:53: groupByArrayOutput= groupByArray
                    this.pushFollow(IDPParser.FOLLOW_groupByArray_in_groupByClause10330);
                    this.groupByArray_DFAcall = false;

                     if( typeof this.groupByClauseCurrentDecisionNumber !== 'undefined' && this.groupByClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.groupByClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA30 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        groupByArrayOutput=this.groupByArray();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.groupByClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	groupByArrayOutput=this.groupByArray();

                    	}
                    	}
                    else{
                        groupByArrayOutput=this.groupByArray();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, groupByArrayOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:731:89: ( LROUNDB groupByArrayOutput= groupByArray RROUNDB )
                    // IDP.g:731:89: ( LROUNDB groupByArrayOutput= groupByArray RROUNDB )
                    // IDP.g:731:90: LROUNDB groupByArrayOutput= groupByArray RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB63=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_groupByClause10335); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB63_tree = this.adaptor.create(LROUNDB63);
                    this.adaptor.addChild(root_0, LROUNDB63_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_groupByArray_in_groupByClause10341);
                    this.groupByArray_DFAcall = false;

                     if( typeof this.groupByClauseCurrentDecisionNumber !== 'undefined' && this.groupByClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.groupByClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        groupByArrayOutput=this.groupByArray();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.groupByClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	groupByArrayOutput=this.groupByArray();

                    	}
                    	}
                    else{
                        groupByArrayOutput=this.groupByArray();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, groupByArrayOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB64=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_groupByClause10343); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB64_tree = this.adaptor.create(RROUNDB64);
                    this.adaptor.addChild(root_0, RROUNDB64_tree);
                    }





                    break;

            }
            /*if(this.failedPredictDFA30 !== undefined && this.failedPredictDFA30)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = (groupByArrayOutput!==null?groupByArrayOutput.value:null); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "groupByClause";

                                                                    this.parseModelLib.getModelManger().disableAliases = false;
                                                            
        }
        return retval;
    },

    // inline static return class
    groupByArray_return: (function() {
        IDPParser.groupByArray_return = function(){};
        org.antlr.lang.extend(IDPParser.groupByArray_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:737:1: groupByArray returns [value] : (nav= navigationPredicate ( SEMICOLON (nav2= groupByArray ) )* ) ;
    // $ANTLR start "groupByArray"
    groupByArray: function() {
        this.currentRule = "groupByArray";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.groupByArray_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var SEMICOLON65 = null;
         var nav = null;
         var nav2 = null;

        var SEMICOLON65_tree=null;

        var groupByArray = [];
        try {
            // IDP.g:740:17: ( (nav= navigationPredicate ( SEMICOLON (nav2= groupByArray ) )* ) )
            // IDP.g:740:33: (nav= navigationPredicate ( SEMICOLON (nav2= groupByArray ) )* )
            root_0 = this.adaptor.nil();

            // IDP.g:740:33: (nav= navigationPredicate ( SEMICOLON (nav2= groupByArray ) )* )
            // IDP.g:740:34: nav= navigationPredicate ( SEMICOLON (nav2= groupByArray ) )*
            this.pushFollow(IDPParser.FOLLOW_navigationPredicate_in_groupByArray10521);
            this.navigationPredicate_DFAcall = false;

             if( typeof this.groupByArrayCurrentDecisionNumber !== 'undefined' && this.groupByArrayCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.groupByArrayCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                nav=this.navigationPredicate();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.groupByArrayCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	nav=this.navigationPredicate();

            	}
            	}
            else{
                nav=this.navigationPredicate();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, nav.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              groupByArray.push((nav!==null?nav.value:null));
            }
            // IDP.g:740:93: ( SEMICOLON (nav2= groupByArray ) )*
            loop31:
            do {
                var alt31=2;
                var LA31_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA31_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA31_0==SEMICOLON )) ) {
                    var LA31_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred59_IDP()'.indexOf("synpred") !== -1) ||  this.synpred59_IDP()) ) {
                        alt31=1;
                    }


                }


                switch (alt31) {
                case 1 :
                    // IDP.g:740:95: SEMICOLON (nav2= groupByArray )


                    this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                    SEMICOLON65=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_groupByArray10527); if (this.state.failed) return retval;
                    if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    SEMICOLON65_tree = this.adaptor.create(SEMICOLON65);
                    this.adaptor.addChild(root_0, SEMICOLON65_tree);
                    }
                    // IDP.g:740:105: (nav2= groupByArray )
                    // IDP.g:740:107: nav2= groupByArray
                    this.pushFollow(IDPParser.FOLLOW_groupByArray_in_groupByArray10535);
                    this.groupByArray_DFAcall = false;

                     if( typeof this.groupByArrayCurrentDecisionNumber !== 'undefined' && this.groupByArrayCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.groupByArrayCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        nav2=this.groupByArray();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.groupByArrayCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	nav2=this.groupByArray();

                    	}
                    	}
                    else{
                        nav2=this.groupByArray();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, nav2.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      groupByArray.push.apply(groupByArray, (nav2!==null?nav2.value:null));
                    }


                    break;

                default :
                    break loop31;
                }
            } while (true);







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = groupByArray; 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "groupByArray";
        }
        return retval;
    },

    // inline static return class
    modelBooleanEnhanced_return: (function() {
        IDPParser.modelBooleanEnhanced_return = function(){};
        org.antlr.lang.extend(IDPParser.modelBooleanEnhanced_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:761:1: modelBooleanEnhanced returns [value] : (selectionClauseOutput= complexAndModelBooleanEnhanced | LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB ) ;
    // $ANTLR start "modelBooleanEnhanced"
    modelBooleanEnhanced: function() {
        this.currentRule = "modelBooleanEnhanced";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.modelBooleanEnhanced_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB66 = null;
        var RROUNDB67 = null;
         var selectionClauseOutput = null;

        var LROUNDB66_tree=null;
        var RROUNDB67_tree=null;

        try {
            // IDP.g:762:17: ( (selectionClauseOutput= complexAndModelBooleanEnhanced | LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB ) )
            // IDP.g:762:33: (selectionClauseOutput= complexAndModelBooleanEnhanced | LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:762:33: (selectionClauseOutput= complexAndModelBooleanEnhanced | LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB )
            var alt32=2;

            this.modelBooleanEnhanced_DFAcall=(typeof this.modelBooleanEnhanced_DFAcall === 'undefined' ? false: this.modelBooleanEnhanced_DFAcall); // only valid for synpred
            if(this.modelBooleanEnhanced_DFAcall === false /*&& !this.failedPredictDFA32*/)
            {   
                this.dfa32NumberOfAlt = alt32;
                this.dfa32InRule = "modelBooleanEnhanced";
            	this.dfa32Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.modelBooleanEnhancedCurrentDecisionNumber  = 32; 
                alt32 = this.dfa32.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt32 === 0 || alt32 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 32);
            		return retval;
                }
            }	
            else
                alt32 = this.dfa32AltNumber;	
            switch (alt32) {
                case 1 :
                    // IDP.g:762:34: selectionClauseOutput= complexAndModelBooleanEnhanced
                    this.pushFollow(IDPParser.FOLLOW_complexAndModelBooleanEnhanced_in_modelBooleanEnhanced10826);
                    this.complexAndModelBooleanEnhanced_DFAcall = false;

                     if( typeof this.modelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.modelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA32 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:763:35: LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB66=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_modelBooleanEnhanced10862); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB66_tree = this.adaptor.create(LROUNDB66);
                    this.adaptor.addChild(root_0, LROUNDB66_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_complexAndModelBooleanEnhanced_in_modelBooleanEnhanced10868);
                    this.complexAndModelBooleanEnhanced_DFAcall = false;

                     if( typeof this.modelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.modelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.modelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA32 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.modelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.complexAndModelBooleanEnhanced();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB67=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_modelBooleanEnhanced10870); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB67_tree = this.adaptor.create(RROUNDB67);
                    this.adaptor.addChild(root_0, RROUNDB67_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA32 !== undefined && this.failedPredictDFA32)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "modelBooleanEnhanced";
        }
        return retval;
    },

    // inline static return class
    complexAndModelBooleanEnhanced_return: (function() {
        IDPParser.complexAndModelBooleanEnhanced_return = function(){};
        org.antlr.lang.extend(IDPParser.complexAndModelBooleanEnhanced_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:768:1: complexAndModelBooleanEnhanced returns [value] : (singleStatementOutput= complexModelBooleanEnhanced ) (oprt= AND (singleStatementOutputB= complexModelBooleanEnhanced ) )* ;
    // $ANTLR start "complexAndModelBooleanEnhanced"
    complexAndModelBooleanEnhanced: function() {
        this.currentRule = "complexAndModelBooleanEnhanced";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexAndModelBooleanEnhanced_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
         var singleStatementOutput = null;
         var singleStatementOutputB = null;

        var oprt_tree=null;

        var model = new this.entityModelConstractorLib.Model(); var internalModel = new this.entityModelConstractorLib.Model(); var hasAnd = false; 
        try {
            // IDP.g:777:9: ( (singleStatementOutput= complexModelBooleanEnhanced ) (oprt= AND (singleStatementOutputB= complexModelBooleanEnhanced ) )* )
            // IDP.g:777:13: (singleStatementOutput= complexModelBooleanEnhanced ) (oprt= AND (singleStatementOutputB= complexModelBooleanEnhanced ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:777:13: (singleStatementOutput= complexModelBooleanEnhanced )
            // IDP.g:777:15: singleStatementOutput= complexModelBooleanEnhanced
            this.pushFollow(IDPParser.FOLLOW_complexModelBooleanEnhanced_in_complexAndModelBooleanEnhanced11006);
            this.complexModelBooleanEnhanced_DFAcall = false;

             if( typeof this.complexAndModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.complexAndModelBooleanEnhancedCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexAndModelBooleanEnhancedCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.complexModelBooleanEnhanced();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.complexModelBooleanEnhanced();

            	}
            	}
            else{
                singleStatementOutput=this.complexModelBooleanEnhanced();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              internalModel.push((singleStatementOutput!==null?singleStatementOutput.value:null));
            }



            // IDP.g:778:10: (oprt= AND (singleStatementOutputB= complexModelBooleanEnhanced ) )*
            loop33:
            do {
                var alt33=2;
                var LA33_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(AND,AND,1) && LA33_0==AND )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(AND,AND,1) && LA33_0==AND )) ) {
                    alt33=1;
                }


                switch (alt33) {
                case 1 :
                    // IDP.g:778:12: oprt= AND (singleStatementOutputB= complexModelBooleanEnhanced )


                    this.pushNextTokens(AND,AND,1);
                    oprt=this.match(this.input,AND,IDPParser.FOLLOW_AND_in_complexAndModelBooleanEnhanced11027); if (this.state.failed) return retval;
                    if( AND !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    oprt_tree = this.adaptor.create(oprt);
                    this.adaptor.addChild(root_0, oprt_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      hasAnd = true; var operator = new this.entityModelConstractorLib.StatementOperator((oprt?oprt.getText():null)); internalModel.push(operator);
                    }
                    // IDP.g:779:10: (singleStatementOutputB= complexModelBooleanEnhanced )
                    // IDP.g:779:12: singleStatementOutputB= complexModelBooleanEnhanced
                    this.pushFollow(IDPParser.FOLLOW_complexModelBooleanEnhanced_in_complexAndModelBooleanEnhanced11047);
                    this.complexModelBooleanEnhanced_DFAcall = false;

                     if( typeof this.complexAndModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.complexAndModelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexAndModelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutputB=this.complexModelBooleanEnhanced();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutputB=this.complexModelBooleanEnhanced();

                    	}
                    	}
                    else{
                        singleStatementOutputB=this.complexModelBooleanEnhanced();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutputB.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      internalModel.push((singleStatementOutputB!==null?singleStatementOutputB.value:null));
                    }





                    break;

                default :
                    break loop33;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              if (hasAnd) { 
                            	      var complex = new this.entityModelConstractorLib.ComplexStatement (internalModel);
                            	      complex.setCategory(this.constantsLib.complexCategoryEnum.and);
                            	      model.push(complex); 
                            	      }
                            	      retval.value = hasAnd ? model : (singleStatementOutput!==null?singleStatementOutput.value:null); 
                                   
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexAndModelBooleanEnhanced";
        }
        return retval;
    },

    // inline static return class
    complexModelBooleanEnhanced_return: (function() {
        IDPParser.complexModelBooleanEnhanced_return = function(){};
        org.antlr.lang.extend(IDPParser.complexModelBooleanEnhanced_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:782:1: complexModelBooleanEnhanced returns [value] : (selectionClauseOutput= ruleModelBooleanEnhanced | LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB ) ;
    // $ANTLR start "complexModelBooleanEnhanced"
    complexModelBooleanEnhanced: function() {
        this.currentRule = "complexModelBooleanEnhanced";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexModelBooleanEnhanced_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB68 = null;
        var RROUNDB69 = null;
         var selectionClauseOutput = null;

        var LROUNDB68_tree=null;
        var RROUNDB69_tree=null;

        try {
            // IDP.g:783:17: ( (selectionClauseOutput= ruleModelBooleanEnhanced | LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB ) )
            // IDP.g:783:33: (selectionClauseOutput= ruleModelBooleanEnhanced | LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:783:33: (selectionClauseOutput= ruleModelBooleanEnhanced | LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB )
            var alt34=2;

            this.complexModelBooleanEnhanced_DFAcall=(typeof this.complexModelBooleanEnhanced_DFAcall === 'undefined' ? false: this.complexModelBooleanEnhanced_DFAcall); // only valid for synpred
            if(this.complexModelBooleanEnhanced_DFAcall === false /*&& !this.failedPredictDFA34*/)
            {   
                this.dfa34NumberOfAlt = alt34;
                this.dfa34InRule = "complexModelBooleanEnhanced";
            	this.dfa34Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.complexModelBooleanEnhancedCurrentDecisionNumber  = 34; 
                alt34 = this.dfa34.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt34 === 0 || alt34 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 34);
            		return retval;
                }
            }	
            else
                alt34 = this.dfa34AltNumber;	
            switch (alt34) {
                case 1 :
                    // IDP.g:783:34: selectionClauseOutput= ruleModelBooleanEnhanced
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanEnhanced_in_complexModelBooleanEnhanced11120);
                    this.ruleModelBooleanEnhanced_DFAcall = false;

                     if( typeof this.complexModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.complexModelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexModelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA34 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:784:35: LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB68=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_complexModelBooleanEnhanced11156); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB68_tree = this.adaptor.create(LROUNDB68);
                    this.adaptor.addChild(root_0, LROUNDB68_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanEnhanced_in_complexModelBooleanEnhanced11162);
                    this.ruleModelBooleanEnhanced_DFAcall = false;

                     if( typeof this.complexModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.complexModelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexModelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA34 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleModelBooleanEnhanced();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB69=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_complexModelBooleanEnhanced11164); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB69_tree = this.adaptor.create(RROUNDB69);
                    this.adaptor.addChild(root_0, RROUNDB69_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA34 !== undefined && this.failedPredictDFA34)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexModelBooleanEnhanced";
        }
        return retval;
    },

    // inline static return class
    ruleModelBooleanEnhanced_return: (function() {
        IDPParser.ruleModelBooleanEnhanced_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelBooleanEnhanced_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:788:1: ruleModelBooleanEnhanced returns [value] : (selectionLeftOutput= ruleModelBoolean ) (comparisonOutput= ( EQ_SIGN | IS_EQUAL ) (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause ) )? ;
    // $ANTLR start "ruleModelBooleanEnhanced"
    ruleModelBooleanEnhanced: function() {
        this.currentRule = "ruleModelBooleanEnhanced";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelBooleanEnhanced_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var comparisonOutput = null;
         var selectionLeftOutput = null;
         var selectionRightOutput = null;

        var comparisonOutput_tree=null;

         var hasRight = false; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:792:37: ( (selectionLeftOutput= ruleModelBoolean ) (comparisonOutput= ( EQ_SIGN | IS_EQUAL ) (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause ) )? )
            // IDP.g:792:49: (selectionLeftOutput= ruleModelBoolean ) (comparisonOutput= ( EQ_SIGN | IS_EQUAL ) (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause ) )?
            root_0 = this.adaptor.nil();

            // IDP.g:792:49: (selectionLeftOutput= ruleModelBoolean )
            // IDP.g:792:50: selectionLeftOutput= ruleModelBoolean
            this.pushFollow(IDPParser.FOLLOW_ruleModelBoolean_in_ruleModelBooleanEnhanced11389);
            this.ruleModelBoolean_DFAcall = false;

             if( typeof this.ruleModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanEnhancedCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelBooleanEnhancedCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleModelBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleModelBoolean();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleModelBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());



            // IDP.g:793:40: (comparisonOutput= ( EQ_SIGN | IS_EQUAL ) (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause ) )?
            var alt35=2;

            var LA35_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA35_0>=EQ_SIGN && LA35_0<=IS_EQUAL )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA35_0>=EQ_SIGN && LA35_0<=IS_EQUAL )) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // IDP.g:793:41: comparisonOutput= ( EQ_SIGN | IS_EQUAL ) (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause )
                    comparisonOutput=this.input.LT(1);
                    if ( (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && this.input.LA(1)>=EQ_SIGN && this.input.LA(1)<=IS_EQUAL ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(comparisonOutput));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_comparisonOutput_11438 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_comparisonOutput_11438;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                          		 	var internalModel = new this.entityModelConstractorLib.Model();
                                                          		 	var originalValue = (comparisonOutput?comparisonOutput.getText():null);
                                                          		 	var operator = new this.entityModelConstractorLib.BooleanEqualityOperator("=", originalValue); 
                                                          		 	hasRight = true;
                                                          		 	/*var complexStatement = new this.entityModelConstractorLib.ComplexStatement ((selectionLeftOutput!==null?selectionLeftOutput.value:null));
                                                          		 	complexStatement.setCategory(this.constantsLib.complexCategoryEnum.booleanExpression);*/
                                                          		 	internalModel.push((selectionLeftOutput!==null?selectionLeftOutput.value:null));
                                                          		 	internalModel.push(operator);
                                                          		 
                    }
                    // IDP.g:803:40: (selectionRightOutput= ruleBooleanOnlySimpleSelectionClause )
                    // IDP.g:803:41: selectionRightOutput= ruleBooleanOnlySimpleSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanOnlySimpleSelectionClause_in_ruleModelBooleanEnhanced11493);
                    this.ruleBooleanOnlySimpleSelectionClause_DFAcall = false;

                     if( typeof this.ruleModelBooleanEnhancedCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanEnhancedCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleModelBooleanEnhancedCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionRightOutput=this.ruleBooleanOnlySimpleSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanEnhancedCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionRightOutput=this.ruleBooleanOnlySimpleSelectionClause();

                    	}
                    	}
                    else{
                        selectionRightOutput=this.ruleBooleanOnlySimpleSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionRightOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                          		 var singleStatementOutput = {};
                                                          		 singleStatementOutput.leftSelectionClause = (selectionRightOutput!==null?selectionRightOutput.value:null);
                                                          		 var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput);
                                                         		 internalModel.push(singleStatement);
                                                         		 var newComplex = new this.entityModelConstractorLib.ComplexStatement (internalModel);
                                                         		 newComplex.setCategory(this.constantsLib.complexCategoryEnum.booleanEquality);
                                                         		 model.push(newComplex);
                                                         		 
                    }





                    break;

            }
            /*if(this.failedPredictDFA35 !== undefined && this.failedPredictDFA35)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  		retval.value = hasRight ? model : (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelBooleanEnhanced";
        }
        return retval;
    },

    // inline static return class
    ruleModelBoolean_return: (function() {
        IDPParser.ruleModelBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:814:1: ruleModelBoolean returns [value] : (singleStatementOutput= complexAndStatementBoolean ) (oprt= OR (singleStatementOutputB= complexAndStatementBoolean ) )* ;
    // $ANTLR start "ruleModelBoolean"
    ruleModelBoolean: function() {
        this.currentRule = "ruleModelBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
         var singleStatementOutput = null;
         var singleStatementOutputB = null;

        var oprt_tree=null;

        var model = new this.entityModelConstractorLib.Model();  
        try {
            // IDP.g:817:9: ( (singleStatementOutput= complexAndStatementBoolean ) (oprt= OR (singleStatementOutputB= complexAndStatementBoolean ) )* )
            // IDP.g:817:13: (singleStatementOutput= complexAndStatementBoolean ) (oprt= OR (singleStatementOutputB= complexAndStatementBoolean ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:817:13: (singleStatementOutput= complexAndStatementBoolean )
            // IDP.g:817:15: singleStatementOutput= complexAndStatementBoolean
            this.pushFollow(IDPParser.FOLLOW_complexAndStatementBoolean_in_ruleModelBoolean11566);
            this.complexAndStatementBoolean_DFAcall = false;

             if( typeof this.ruleModelBooleanCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelBooleanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.complexAndStatementBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.complexAndStatementBoolean();

            	}
            	}
            else{
                singleStatementOutput=this.complexAndStatementBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              model.push((singleStatementOutput!==null?singleStatementOutput.value:null));
            }



            // IDP.g:817:111: (oprt= OR (singleStatementOutputB= complexAndStatementBoolean ) )*
            loop36:
            do {
                var alt36=2;
                var LA36_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OR,OR,1) && LA36_0==OR )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OR,OR,1) && LA36_0==OR )) ) {
                    alt36=1;
                }


                switch (alt36) {
                case 1 :
                    // IDP.g:817:113: oprt= OR (singleStatementOutputB= complexAndStatementBoolean )


                    this.pushNextTokens(OR,OR,1);
                    oprt=this.match(this.input,OR,IDPParser.FOLLOW_OR_in_ruleModelBoolean11577); if (this.state.failed) return retval;
                    if( OR !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    oprt_tree = this.adaptor.create(oprt);
                    this.adaptor.addChild(root_0, oprt_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var operator = new this.entityModelConstractorLib.StatementOperator((oprt?oprt.getText():null)); model.push(operator);
                    }
                    // IDP.g:817:229: (singleStatementOutputB= complexAndStatementBoolean )
                    // IDP.g:817:231: singleStatementOutputB= complexAndStatementBoolean
                    this.pushFollow(IDPParser.FOLLOW_complexAndStatementBoolean_in_ruleModelBoolean11588);
                    this.complexAndStatementBoolean_DFAcall = false;

                     if( typeof this.ruleModelBooleanCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleModelBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutputB=this.complexAndStatementBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutputB=this.complexAndStatementBoolean();

                    	}
                    	}
                    else{
                        singleStatementOutputB=this.complexAndStatementBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutputB.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      model.push((singleStatementOutputB!==null?singleStatementOutputB.value:null));
                    }





                    break;

                default :
                    break loop36;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelBoolean";
        }
        return retval;
    },

    // inline static return class
    complexAndStatementBoolean_return: (function() {
        IDPParser.complexAndStatementBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.complexAndStatementBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:822:1: complexAndStatementBoolean returns [value] : (singleStatementOutput= singleStatementBoolean ) (oprt= AND (singleStatementOutputB= singleStatementBoolean ) )* ;
    // $ANTLR start "complexAndStatementBoolean"
    complexAndStatementBoolean: function() {
        this.currentRule = "complexAndStatementBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexAndStatementBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
         var singleStatementOutput = null;
         var singleStatementOutputB = null;

        var oprt_tree=null;

         var isAnd = false; var model = new this.entityModelConstractorLib.Model();  
        try {
            // IDP.g:825:9: ( (singleStatementOutput= singleStatementBoolean ) (oprt= AND (singleStatementOutputB= singleStatementBoolean ) )* )
            // IDP.g:825:13: (singleStatementOutput= singleStatementBoolean ) (oprt= AND (singleStatementOutputB= singleStatementBoolean ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:825:13: (singleStatementOutput= singleStatementBoolean )
            // IDP.g:825:15: singleStatementOutput= singleStatementBoolean
            this.pushFollow(IDPParser.FOLLOW_singleStatementBoolean_in_complexAndStatementBoolean11669);
            this.singleStatementBoolean_DFAcall = false;

             if( typeof this.complexAndStatementBooleanCurrentDecisionNumber !== 'undefined' && this.complexAndStatementBooleanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexAndStatementBooleanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.singleStatementBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndStatementBooleanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.singleStatementBoolean();

            	}
            	}
            else{
                singleStatementOutput=this.singleStatementBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());



            // IDP.g:825:65: (oprt= AND (singleStatementOutputB= singleStatementBoolean ) )*
            loop37:
            do {
                var alt37=2;
                var LA37_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(AND,AND,1) && LA37_0==AND )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(AND,AND,1) && LA37_0==AND )) ) {
                    var LA37_4 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred66_IDP()'.indexOf("synpred") !== -1) ||  this.synpred66_IDP()) ) {
                        alt37=1;
                    }


                }


                switch (alt37) {
                case 1 :
                    // IDP.g:825:66: oprt= AND (singleStatementOutputB= singleStatementBoolean )


                    this.pushNextTokens(AND,AND,1);
                    oprt=this.match(this.input,AND,IDPParser.FOLLOW_AND_in_complexAndStatementBoolean11679); if (this.state.failed) return retval;
                    if( AND !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    oprt_tree = this.adaptor.create(oprt);
                    this.adaptor.addChild(root_0, oprt_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                              	if (isAnd === false ) {model.push((singleStatementOutput!==null?singleStatementOutput.value:null))};
                              	isAnd = true;
                              	var operator = new this.entityModelConstractorLib.StatementOperator((oprt?oprt.getText():null)); 
                              	model.push(operator);
                    }
                    // IDP.g:829:34: (singleStatementOutputB= singleStatementBoolean )
                    // IDP.g:829:36: singleStatementOutputB= singleStatementBoolean
                    this.pushFollow(IDPParser.FOLLOW_singleStatementBoolean_in_complexAndStatementBoolean11690);
                    this.singleStatementBoolean_DFAcall = false;

                     if( typeof this.complexAndStatementBooleanCurrentDecisionNumber !== 'undefined' && this.complexAndStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexAndStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutputB=this.singleStatementBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutputB=this.singleStatementBoolean();

                    	}
                    	}
                    else{
                        singleStatementOutputB=this.singleStatementBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutputB.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      model.push((singleStatementOutputB!==null?singleStatementOutputB.value:null));
                    }





                    break;

                default :
                    break loop37;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = isAnd ? new this.entityModelConstractorLib.ComplexStatement (model) : (singleStatementOutput!==null?singleStatementOutput.value:null); if(isAnd) {retval.value.setCategory(this.constantsLib.complexCategoryEnum.and);} 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexAndStatementBoolean";
        }
        return retval;
    },

    // inline static return class
    complexStructStatementBoolean_return: (function() {
        IDPParser.complexStructStatementBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.complexStructStatementBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:832:1: complexStructStatementBoolean returns [value] : (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBoolean ) ( () BULLET singleStatementOutput= ruleModelBoolean )* ) (oprt= SEMICOLON ) ;
    // $ANTLR start "complexStructStatementBoolean"
    complexStructStatementBoolean: function() {
        this.currentRule = "complexStructStatementBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexStructStatementBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
        var ANY_OF70 = null;
        var ALL_OF71 = null;
        var BULLET72 = null;
        var BULLET73 = null;
         var singleStatementOutput = null;

        var oprt_tree=null;
        var ANY_OF70_tree=null;
        var ALL_OF71_tree=null;
        var BULLET72_tree=null;
        var BULLET73_tree=null;

        var complexType =  this.constantsLib.complexCategoryEnum.unknown; var oprt = null; var model = new this.entityModelConstractorLib.Model();  
        try {
            // IDP.g:835:9: ( (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBoolean ) ( () BULLET singleStatementOutput= ruleModelBoolean )* ) (oprt= SEMICOLON ) )
            // IDP.g:835:13: (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBoolean ) ( () BULLET singleStatementOutput= ruleModelBoolean )* ) (oprt= SEMICOLON )
            root_0 = this.adaptor.nil();

            // IDP.g:835:13: (oprt= ( ANY_OF | ALL_OF ) )
            // IDP.g:835:15: oprt= ( ANY_OF | ALL_OF )
            // IDP.g:835:22: ( ANY_OF | ALL_OF )
            var alt38=2;

            var LA38_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ANY_OF,ANY_OF,1) && LA38_0==ANY_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ANY_OF,ANY_OF,1) && LA38_0==ANY_OF )) ) {
                alt38=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL_OF,ALL_OF,1) && LA38_0==ALL_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL_OF,ALL_OF,1) && LA38_0==ALL_OF )) ) {
                alt38=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_38_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 38, 0, this.input);

                nvae_38_0.c = this.input.LA(1);
                throw nvae_38_0;
            }
            switch (alt38) {
                case 1 :
                    // IDP.g:835:23: ANY_OF


                    this.pushNextTokens(ANY_OF,ANY_OF,1);
                    ANY_OF70=this.match(this.input,ANY_OF,IDPParser.FOLLOW_ANY_OF_in_complexStructStatementBoolean11778); if (this.state.failed) return retval;
                    if( ANY_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    ANY_OF70_tree = this.adaptor.create(ANY_OF70);
                    this.adaptor.addChild(root_0, ANY_OF70_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      complexType = this.constantsLib.complexCategoryEnum.structAny; oprt=this.constantsLib.STATEMENT_OPERATOR.OR.string;
                    }


                    break;
                case 2 :
                    // IDP.g:835:149: ALL_OF


                    this.pushNextTokens(ALL_OF,ALL_OF,1);
                    ALL_OF71=this.match(this.input,ALL_OF,IDPParser.FOLLOW_ALL_OF_in_complexStructStatementBoolean11783); if (this.state.failed) return retval;
                    if( ALL_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    ALL_OF71_tree = this.adaptor.create(ALL_OF71);
                    this.adaptor.addChild(root_0, ALL_OF71_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      complexType = this.constantsLib.complexCategoryEnum.structAll; oprt=this.constantsLib.STATEMENT_OPERATOR.AND.string;
                    }


                    break;

            }
            /*if(this.failedPredictDFA38 !== undefined && this.failedPredictDFA38)
            { 
                throw null;
            }*/






            this.pushNextTokens(BULLET,BULLET,1);
            BULLET72=this.match(this.input,BULLET,IDPParser.FOLLOW_BULLET_in_complexStructStatementBoolean11805); if (this.state.failed) return retval;
            if( BULLET !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            BULLET72_tree = this.adaptor.create(BULLET72);
            this.adaptor.addChild(root_0, BULLET72_tree);
            }
            // IDP.g:837:13: ( (singleStatementOutput= ruleModelBoolean ) ( () BULLET singleStatementOutput= ruleModelBoolean )* )
            // IDP.g:837:15: (singleStatementOutput= ruleModelBoolean ) ( () BULLET singleStatementOutput= ruleModelBoolean )*
            // IDP.g:837:15: (singleStatementOutput= ruleModelBoolean )
            // IDP.g:837:17: singleStatementOutput= ruleModelBoolean
            this.pushFollow(IDPParser.FOLLOW_ruleModelBoolean_in_complexStructStatementBoolean11827);
            this.ruleModelBoolean_DFAcall = false;

             if( typeof this.complexStructStatementBooleanCurrentDecisionNumber !== 'undefined' && this.complexStructStatementBooleanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexStructStatementBooleanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.ruleModelBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStructStatementBooleanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.ruleModelBoolean();

            	}
            	}
            else{
                singleStatementOutput=this.ruleModelBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var firstNewModel = new this.entityModelConstractorLib.ComplexStatement((singleStatementOutput!==null?singleStatementOutput.value:null)); firstNewModel.setCategory(this.constantsLib.complexCategoryEnum.structNewLine); model.push(firstNewModel);
            }



            // IDP.g:837:271: ( () BULLET singleStatementOutput= ruleModelBoolean )*
            loop39:
            do {
                var alt39=2;
                var LA39_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(BULLET,BULLET,1) && LA39_0==BULLET )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(BULLET,BULLET,1) && LA39_0==BULLET )) ) {
                    alt39=1;
                }


                switch (alt39) {
                case 1 :
                    // IDP.g:837:273: () BULLET singleStatementOutput= ruleModelBoolean
                    // IDP.g:837:273: ()
                    // IDP.g:837:277: 
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var operator = new this.entityModelConstractorLib.StatementOperator(oprt); model.push(operator);
                    }





                    this.pushNextTokens(BULLET,BULLET,1);
                    BULLET73=this.match(this.input,BULLET,IDPParser.FOLLOW_BULLET_in_complexStructStatementBoolean11841); if (this.state.failed) return retval;
                    if( BULLET !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    BULLET73_tree = this.adaptor.create(BULLET73);
                    this.adaptor.addChild(root_0, BULLET73_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBoolean_in_complexStructStatementBoolean11847);
                    this.ruleModelBoolean_DFAcall = false;

                     if( typeof this.complexStructStatementBooleanCurrentDecisionNumber !== 'undefined' && this.complexStructStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexStructStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA39 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleModelBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStructStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleModelBoolean();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleModelBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var newLineModel = new this.entityModelConstractorLib.ComplexStatement((singleStatementOutput!==null?singleStatementOutput.value:null)); newLineModel.setCategory(this.constantsLib.complexCategoryEnum.structNewLine); model.push(newLineModel); 
                    }


                    break;

                default :
                    break loop39;
                }
            } while (true);




            // IDP.g:838:14: (oprt= SEMICOLON )
            // IDP.g:838:15: oprt= SEMICOLON


            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
            oprt=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_complexStructStatementBoolean11876); if (this.state.failed) return retval;
            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            oprt_tree = this.adaptor.create(oprt);
            this.adaptor.addChild(root_0, oprt_tree);
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelConstractorLib.ComplexStatement (model); retval.value.setCategory(complexType);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexStructStatementBoolean";
        }
        return retval;
    },

    // inline static return class
    complexStructStatementBooleanWhere_return: (function() {
        IDPParser.complexStructStatementBooleanWhere_return = function(){};
        org.antlr.lang.extend(IDPParser.complexStructStatementBooleanWhere_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:855:1: complexStructStatementBooleanWhere returns [value] : (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBooleanWhere ) ( () BULLET singleStatementOutput= ruleModelBooleanWhere )* ) (oprt= SEMICOLON ) ;
    // $ANTLR start "complexStructStatementBooleanWhere"
    complexStructStatementBooleanWhere: function() {
        this.currentRule = "complexStructStatementBooleanWhere";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexStructStatementBooleanWhere_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
        var ANY_OF74 = null;
        var ALL_OF75 = null;
        var BULLET76 = null;
        var BULLET77 = null;
         var singleStatementOutput = null;

        var oprt_tree=null;
        var ANY_OF74_tree=null;
        var ALL_OF75_tree=null;
        var BULLET76_tree=null;
        var BULLET77_tree=null;

        var complexType =  this.constantsLib.complexCategoryEnum.unknown; var oprt = null; var model = new this.entityModelConstractorLib.Model();  
        try {
            // IDP.g:858:9: ( (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBooleanWhere ) ( () BULLET singleStatementOutput= ruleModelBooleanWhere )* ) (oprt= SEMICOLON ) )
            // IDP.g:858:13: (oprt= ( ANY_OF | ALL_OF ) ) BULLET ( (singleStatementOutput= ruleModelBooleanWhere ) ( () BULLET singleStatementOutput= ruleModelBooleanWhere )* ) (oprt= SEMICOLON )
            root_0 = this.adaptor.nil();

            // IDP.g:858:13: (oprt= ( ANY_OF | ALL_OF ) )
            // IDP.g:858:15: oprt= ( ANY_OF | ALL_OF )
            // IDP.g:858:22: ( ANY_OF | ALL_OF )
            var alt40=2;

            var LA40_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ANY_OF,ANY_OF,1) && LA40_0==ANY_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ANY_OF,ANY_OF,1) && LA40_0==ANY_OF )) ) {
                alt40=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL_OF,ALL_OF,1) && LA40_0==ALL_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL_OF,ALL_OF,1) && LA40_0==ALL_OF )) ) {
                alt40=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_40_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 40, 0, this.input);

                nvae_40_0.c = this.input.LA(1);
                throw nvae_40_0;
            }
            switch (alt40) {
                case 1 :
                    // IDP.g:858:23: ANY_OF


                    this.pushNextTokens(ANY_OF,ANY_OF,1);
                    ANY_OF74=this.match(this.input,ANY_OF,IDPParser.FOLLOW_ANY_OF_in_complexStructStatementBooleanWhere12256); if (this.state.failed) return retval;
                    if( ANY_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    ANY_OF74_tree = this.adaptor.create(ANY_OF74);
                    this.adaptor.addChild(root_0, ANY_OF74_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      complexType = this.constantsLib.complexCategoryEnum.structAny; oprt=this.constantsLib.STATEMENT_OPERATOR.OR.string;
                    }


                    break;
                case 2 :
                    // IDP.g:858:149: ALL_OF


                    this.pushNextTokens(ALL_OF,ALL_OF,1);
                    ALL_OF75=this.match(this.input,ALL_OF,IDPParser.FOLLOW_ALL_OF_in_complexStructStatementBooleanWhere12261); if (this.state.failed) return retval;
                    if( ALL_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    ALL_OF75_tree = this.adaptor.create(ALL_OF75);
                    this.adaptor.addChild(root_0, ALL_OF75_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      complexType = this.constantsLib.complexCategoryEnum.structAll; oprt=this.constantsLib.STATEMENT_OPERATOR.AND.string;
                    }


                    break;

            }
            /*if(this.failedPredictDFA40 !== undefined && this.failedPredictDFA40)
            { 
                throw null;
            }*/






            this.pushNextTokens(BULLET,BULLET,1);
            BULLET76=this.match(this.input,BULLET,IDPParser.FOLLOW_BULLET_in_complexStructStatementBooleanWhere12283); if (this.state.failed) return retval;
            if( BULLET !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            BULLET76_tree = this.adaptor.create(BULLET76);
            this.adaptor.addChild(root_0, BULLET76_tree);
            }
            // IDP.g:860:13: ( (singleStatementOutput= ruleModelBooleanWhere ) ( () BULLET singleStatementOutput= ruleModelBooleanWhere )* )
            // IDP.g:860:15: (singleStatementOutput= ruleModelBooleanWhere ) ( () BULLET singleStatementOutput= ruleModelBooleanWhere )*
            // IDP.g:860:15: (singleStatementOutput= ruleModelBooleanWhere )
            // IDP.g:860:17: singleStatementOutput= ruleModelBooleanWhere
            this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_complexStructStatementBooleanWhere12305);
            this.ruleModelBooleanWhere_DFAcall = false;

             if( typeof this.complexStructStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.complexStructStatementBooleanWhereCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexStructStatementBooleanWhereCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.ruleModelBooleanWhere();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStructStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.ruleModelBooleanWhere();

            	}
            	}
            else{
                singleStatementOutput=this.ruleModelBooleanWhere();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var firstNewModel = new this.entityModelConstractorLib.ComplexStatement((singleStatementOutput!==null?singleStatementOutput.value:null)); firstNewModel.setCategory(this.constantsLib.complexCategoryEnum.structNewLine); model.push(firstNewModel);
            }



            // IDP.g:860:276: ( () BULLET singleStatementOutput= ruleModelBooleanWhere )*
            loop41:
            do {
                var alt41=2;
                var LA41_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(BULLET,BULLET,1) && LA41_0==BULLET )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(BULLET,BULLET,1) && LA41_0==BULLET )) ) {
                    alt41=1;
                }


                switch (alt41) {
                case 1 :
                    // IDP.g:860:278: () BULLET singleStatementOutput= ruleModelBooleanWhere
                    // IDP.g:860:278: ()
                    // IDP.g:860:282: 
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var operator = new this.entityModelConstractorLib.StatementOperator(oprt); model.push(operator);
                    }





                    this.pushNextTokens(BULLET,BULLET,1);
                    BULLET77=this.match(this.input,BULLET,IDPParser.FOLLOW_BULLET_in_complexStructStatementBooleanWhere12319); if (this.state.failed) return retval;
                    if( BULLET !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    BULLET77_tree = this.adaptor.create(BULLET77);
                    this.adaptor.addChild(root_0, BULLET77_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_complexStructStatementBooleanWhere12325);
                    this.ruleModelBooleanWhere_DFAcall = false;

                     if( typeof this.complexStructStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.complexStructStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexStructStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA41 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleModelBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStructStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleModelBooleanWhere();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleModelBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var newLineModel = new this.entityModelConstractorLib.ComplexStatement((singleStatementOutput!==null?singleStatementOutput.value:null)); newLineModel.setCategory(this.constantsLib.complexCategoryEnum.structNewLine); model.push(newLineModel); 
                    }


                    break;

                default :
                    break loop41;
                }
            } while (true);




            // IDP.g:861:14: (oprt= SEMICOLON )
            // IDP.g:861:15: oprt= SEMICOLON


            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
            oprt=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_complexStructStatementBooleanWhere12354); if (this.state.failed) return retval;
            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            oprt_tree = this.adaptor.create(oprt);
            this.adaptor.addChild(root_0, oprt_tree);
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelConstractorLib.ComplexStatement (model); retval.value.setCategory(complexType);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexStructStatementBooleanWhere";
        }
        return retval;
    },

    // inline static return class
    ruleModelBooleanWhere_return: (function() {
        IDPParser.ruleModelBooleanWhere_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleModelBooleanWhere_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:868:1: ruleModelBooleanWhere returns [value] : (singleStatementOutput= complexAndStatementBooleanWhere ) (oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere ) )* ;
    // $ANTLR start "ruleModelBooleanWhere"
    ruleModelBooleanWhere: function() {
        this.currentRule = "ruleModelBooleanWhere";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleModelBooleanWhere_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
         var singleStatementOutput = null;
         var singleStatementOutputB = null;

        var oprt_tree=null;

        var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:871:9: ( (singleStatementOutput= complexAndStatementBooleanWhere ) (oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere ) )* )
            // IDP.g:871:13: (singleStatementOutput= complexAndStatementBooleanWhere ) (oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:871:13: (singleStatementOutput= complexAndStatementBooleanWhere )
            // IDP.g:871:15: singleStatementOutput= complexAndStatementBooleanWhere
            this.pushFollow(IDPParser.FOLLOW_complexAndStatementBooleanWhere_in_ruleModelBooleanWhere12515);
            this.complexAndStatementBooleanWhere_DFAcall = false;

             if( typeof this.ruleModelBooleanWhereCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanWhereCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleModelBooleanWhereCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.complexAndStatementBooleanWhere();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanWhereCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.complexAndStatementBooleanWhere();

            	}
            	}
            else{
                singleStatementOutput=this.complexAndStatementBooleanWhere();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              model.push((singleStatementOutput!==null?singleStatementOutput.value:null));
            }



            // IDP.g:871:116: (oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere ) )*
            loop42:
            do {
                var alt42=2;
                var LA42_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OR,OR,1) && LA42_0==OR )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OR,OR,1) && LA42_0==OR )) ) {
                    var LA42_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred71_IDP()'.indexOf("synpred") !== -1) ||  this.synpred71_IDP()) ) {
                        alt42=1;
                    }


                }


                switch (alt42) {
                case 1 :
                    // IDP.g:871:118: oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere )


                    this.pushNextTokens(OR,OR,1);
                    oprt=this.match(this.input,OR,IDPParser.FOLLOW_OR_in_ruleModelBooleanWhere12526); if (this.state.failed) return retval;
                    if( OR !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    oprt_tree = this.adaptor.create(oprt);
                    this.adaptor.addChild(root_0, oprt_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var operator = new this.entityModelConstractorLib.StatementOperator((oprt?oprt.getText():null)); model.push(operator);
                    }
                    // IDP.g:871:234: (singleStatementOutputB= complexAndStatementBooleanWhere )
                    // IDP.g:871:236: singleStatementOutputB= complexAndStatementBooleanWhere
                    this.pushFollow(IDPParser.FOLLOW_complexAndStatementBooleanWhere_in_ruleModelBooleanWhere12537);
                    this.complexAndStatementBooleanWhere_DFAcall = false;

                     if( typeof this.ruleModelBooleanWhereCurrentDecisionNumber !== 'undefined' && this.ruleModelBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleModelBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutputB=this.complexAndStatementBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleModelBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutputB=this.complexAndStatementBooleanWhere();

                    	}
                    	}
                    else{
                        singleStatementOutputB=this.complexAndStatementBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutputB.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      model.push((singleStatementOutputB!==null?singleStatementOutputB.value:null));
                    }





                    break;

                default :
                    break loop42;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleModelBooleanWhere";
        }
        return retval;
    },

    // inline static return class
    complexAndStatementBooleanWhere_return: (function() {
        IDPParser.complexAndStatementBooleanWhere_return = function(){};
        org.antlr.lang.extend(IDPParser.complexAndStatementBooleanWhere_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:873:1: complexAndStatementBooleanWhere returns [value] : (singleStatementOutput= singleStatementBooleanWhere ) (oprt= AND (singleStatementOutputB= singleStatementBooleanWhere ) )* ;
    // $ANTLR start "complexAndStatementBooleanWhere"
    complexAndStatementBooleanWhere: function() {
        this.currentRule = "complexAndStatementBooleanWhere";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexAndStatementBooleanWhere_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var oprt = null;
         var singleStatementOutput = null;
         var singleStatementOutputB = null;

        var oprt_tree=null;

         var isAnd = false; var model = new this.entityModelConstractorLib.Model();  
        try {
            // IDP.g:876:9: ( (singleStatementOutput= singleStatementBooleanWhere ) (oprt= AND (singleStatementOutputB= singleStatementBooleanWhere ) )* )
            // IDP.g:876:13: (singleStatementOutput= singleStatementBooleanWhere ) (oprt= AND (singleStatementOutputB= singleStatementBooleanWhere ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:876:13: (singleStatementOutput= singleStatementBooleanWhere )
            // IDP.g:876:15: singleStatementOutput= singleStatementBooleanWhere
            this.pushFollow(IDPParser.FOLLOW_singleStatementBooleanWhere_in_complexAndStatementBooleanWhere12615);
            this.singleStatementBooleanWhere_DFAcall = false;

             if( typeof this.complexAndStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.complexAndStatementBooleanWhereCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexAndStatementBooleanWhereCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                singleStatementOutput=this.singleStatementBooleanWhere();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	singleStatementOutput=this.singleStatementBooleanWhere();

            	}
            	}
            else{
                singleStatementOutput=this.singleStatementBooleanWhere();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());



            // IDP.g:876:69: (oprt= AND (singleStatementOutputB= singleStatementBooleanWhere ) )*
            loop43:
            do {
                var alt43=2;
                var LA43_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(AND,AND,1) && LA43_0==AND )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(AND,AND,1) && LA43_0==AND )) ) {
                    var LA43_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred72_IDP()'.indexOf("synpred") !== -1) ||  this.synpred72_IDP()) ) {
                        alt43=1;
                    }


                }


                switch (alt43) {
                case 1 :
                    // IDP.g:876:70: oprt= AND (singleStatementOutputB= singleStatementBooleanWhere )


                    this.pushNextTokens(AND,AND,1);
                    oprt=this.match(this.input,AND,IDPParser.FOLLOW_AND_in_complexAndStatementBooleanWhere12624); if (this.state.failed) return retval;
                    if( AND !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    oprt_tree = this.adaptor.create(oprt);
                    this.adaptor.addChild(root_0, oprt_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                              	if (isAnd === false ) {model.push((singleStatementOutput!==null?singleStatementOutput.value:null))};
                              	isAnd = true;
                              	var operator = new this.entityModelConstractorLib.StatementOperator((oprt?oprt.getText():null)); 
                              	model.push(operator);
                    }
                    // IDP.g:880:34: (singleStatementOutputB= singleStatementBooleanWhere )
                    // IDP.g:880:36: singleStatementOutputB= singleStatementBooleanWhere
                    this.pushFollow(IDPParser.FOLLOW_singleStatementBooleanWhere_in_complexAndStatementBooleanWhere12635);
                    this.singleStatementBooleanWhere_DFAcall = false;

                     if( typeof this.complexAndStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.complexAndStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.complexAndStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutputB=this.singleStatementBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexAndStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutputB=this.singleStatementBooleanWhere();

                    	}
                    	}
                    else{
                        singleStatementOutputB=this.singleStatementBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutputB.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      model.push((singleStatementOutputB!==null?singleStatementOutputB.value:null));
                    }





                    break;

                default :
                    break loop43;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = isAnd ? new this.entityModelConstractorLib.ComplexStatement (model) : (singleStatementOutput!==null?singleStatementOutput.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexAndStatementBooleanWhere";
        }
        return retval;
    },

    // inline static return class
    complexStatementBoolean_return: (function() {
        IDPParser.complexStatementBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.complexStatementBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:882:1: complexStatementBoolean returns [value] : LROUNDB ruleModelOutput= ruleModelBoolean RROUNDB ;
    // $ANTLR start "complexStatementBoolean"
    complexStatementBoolean: function() {
        this.currentRule = "complexStatementBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexStatementBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB78 = null;
        var RROUNDB79 = null;
         var ruleModelOutput = null;

        var LROUNDB78_tree=null;
        var RROUNDB79_tree=null;

        try {
            // IDP.g:884:9: ( LROUNDB ruleModelOutput= ruleModelBoolean RROUNDB )
            // IDP.g:884:17: LROUNDB ruleModelOutput= ruleModelBoolean RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB78=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_complexStatementBoolean12709); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB78_tree = this.adaptor.create(LROUNDB78);
            this.adaptor.addChild(root_0, LROUNDB78_tree);
            }
            this.pushFollow(IDPParser.FOLLOW_ruleModelBoolean_in_complexStatementBoolean12715);
            this.ruleModelBoolean_DFAcall = false;

             if( typeof this.complexStatementBooleanCurrentDecisionNumber !== 'undefined' && this.complexStatementBooleanCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexStatementBooleanCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                ruleModelOutput=this.ruleModelBoolean();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStatementBooleanCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	ruleModelOutput=this.ruleModelBoolean();

            	}
            	}
            else{
                ruleModelOutput=this.ruleModelBoolean();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, ruleModelOutput.getTree());


            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB79=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_complexStatementBoolean12718); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB79_tree = this.adaptor.create(RROUNDB79);
            this.adaptor.addChild(root_0, RROUNDB79_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = new this.entityModelConstractorLib.ComplexStatement ((ruleModelOutput!==null?ruleModelOutput.value:null)); retval.value.setCategory(this.constantsLib.complexCategoryEnum.brackets);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexStatementBoolean";
        }
        return retval;
    },

    // inline static return class
    complexStatementBooleanWhere_return: (function() {
        IDPParser.complexStatementBooleanWhere_return = function(){};
        org.antlr.lang.extend(IDPParser.complexStatementBooleanWhere_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:886:1: complexStatementBooleanWhere returns [value] : LROUNDB ruleModelOutput= ruleModelBooleanWhere RROUNDB ;
    // $ANTLR start "complexStatementBooleanWhere"
    complexStatementBooleanWhere: function() {
        this.currentRule = "complexStatementBooleanWhere";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.complexStatementBooleanWhere_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB80 = null;
        var RROUNDB81 = null;
         var ruleModelOutput = null;

        var LROUNDB80_tree=null;
        var RROUNDB81_tree=null;

        try {
            // IDP.g:888:9: ( LROUNDB ruleModelOutput= ruleModelBooleanWhere RROUNDB )
            // IDP.g:888:17: LROUNDB ruleModelOutput= ruleModelBooleanWhere RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB80=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_complexStatementBooleanWhere12781); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB80_tree = this.adaptor.create(LROUNDB80);
            this.adaptor.addChild(root_0, LROUNDB80_tree);
            }
            this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_complexStatementBooleanWhere12787);
            this.ruleModelBooleanWhere_DFAcall = false;

             if( typeof this.complexStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.complexStatementBooleanWhereCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.complexStatementBooleanWhereCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                ruleModelOutput=this.ruleModelBooleanWhere();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.complexStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	ruleModelOutput=this.ruleModelBooleanWhere();

            	}
            	}
            else{
                ruleModelOutput=this.ruleModelBooleanWhere();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, ruleModelOutput.getTree());


            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB81=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_complexStatementBooleanWhere12790); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB81_tree = this.adaptor.create(RROUNDB81);
            this.adaptor.addChild(root_0, RROUNDB81_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = new this.entityModelConstractorLib.ComplexStatement ((ruleModelOutput!==null?ruleModelOutput.value:null)); retval.value.setCategory(this.constantsLib.complexCategoryEnum.brackets);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "complexStatementBooleanWhere";
        }
        return retval;
    },

    // inline static return class
    singleStatementBooleanWhere_return: (function() {
        IDPParser.singleStatementBooleanWhere_return = function(){};
        org.antlr.lang.extend(IDPParser.singleStatementBooleanWhere_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:891:1: singleStatementBooleanWhere returns [value] : (singleStatementBoolOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementNumericOutput= ruleNumericSingleStatementComparison | singleStatementNullOutput= ruleNullStatementComparison | singleStatementStrOutput= ruleStringSingleStatementComparison | singleStatementTimespanOutput= ruleTimespanSingleStatementComparison | singleStatementDateOutput= ruleDateSingleStatementComparison | singleStatementTimeOutput= ruleTimeSingleStatementComparison | singleStatementTimestampOutput= ruleTimestampSingleStatementComparison | singleStatementComplexOutput= complexStatementBooleanWhere | singleStatementComplexOutput= complexStructStatementBooleanWhere );
    // $ANTLR start "singleStatementBooleanWhere"
    singleStatementBooleanWhere: function() {
        this.currentRule = "singleStatementBooleanWhere";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.singleStatementBooleanWhere_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var singleStatementBoolOutput = null;
         var singleStatementOutput = null;
         var singleStatementNumericOutput = null;
         var singleStatementNullOutput = null;
         var singleStatementStrOutput = null;
         var singleStatementTimespanOutput = null;
         var singleStatementDateOutput = null;
         var singleStatementTimeOutput = null;
         var singleStatementTimestampOutput = null;
         var singleStatementComplexOutput = null;


        try {
            // IDP.g:893:9: (singleStatementBoolOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementNumericOutput= ruleNumericSingleStatementComparison | singleStatementNullOutput= ruleNullStatementComparison | singleStatementStrOutput= ruleStringSingleStatementComparison | singleStatementTimespanOutput= ruleTimespanSingleStatementComparison | singleStatementDateOutput= ruleDateSingleStatementComparison | singleStatementTimeOutput= ruleTimeSingleStatementComparison | singleStatementTimestampOutput= ruleTimestampSingleStatementComparison | singleStatementComplexOutput= complexStatementBooleanWhere | singleStatementComplexOutput= complexStructStatementBooleanWhere )
            var alt44=11;
            this.singleStatementBooleanWhere_DFAcall=(typeof this.singleStatementBooleanWhere_DFAcall === 'undefined' ? false: this.singleStatementBooleanWhere_DFAcall); // only valid for synpred
            if(this.singleStatementBooleanWhere_DFAcall === false /*&& !this.failedPredictDFA44*/)
            {   
                this.dfa44NumberOfAlt = alt44;
                this.dfa44InRule = "singleStatementBooleanWhere";
            	this.dfa44Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.singleStatementBooleanWhereCurrentDecisionNumber  = 44; 
                alt44 = this.dfa44.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt44 === 0 || alt44 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 44);
            		return retval;
                }
            }	
            else
                alt44 = this.dfa44AltNumber;	
            switch (alt44) {
                case 1 :
                    // IDP.g:894:11: singleStatementBoolOutput= ruleBooleanSingleStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleStatement_in_singleStatementBooleanWhere12829);
                    this.ruleBooleanSingleStatement_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementBoolOutput=this.ruleBooleanSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementBoolOutput=this.ruleBooleanSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementBoolOutput=this.ruleBooleanSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementBoolOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementBoolOutput!==null?singleStatementBoolOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 2 :
                    // IDP.g:895:19: singleStatementOutput= ruleBooleanSingleSelectionStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleSelectionStatement_in_singleStatementBooleanWhere12857);
                    this.ruleBooleanSingleSelectionStatement_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 3 :
                    // IDP.g:896:19: singleStatementNumericOutput= ruleNumericSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSingleStatementComparison_in_singleStatementBooleanWhere12884);
                    this.ruleNumericSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementNumericOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementNumericOutput!==null?singleStatementNumericOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 4 :
                    // IDP.g:897:19: singleStatementNullOutput= ruleNullStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNullStatementComparison_in_singleStatementBooleanWhere12911);
                    this.ruleNullStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementNullOutput=this.ruleNullStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementNullOutput=this.ruleNullStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementNullOutput=this.ruleNullStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementNullOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementNullOutput!==null?singleStatementNullOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 5 :
                    // IDP.g:898:19: singleStatementStrOutput= ruleStringSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatementComparison_in_singleStatementBooleanWhere12956);
                    this.ruleStringSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementStrOutput=this.ruleStringSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementStrOutput=this.ruleStringSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementStrOutput=this.ruleStringSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementStrOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementStrOutput!==null?singleStatementStrOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 6 :
                    // IDP.g:899:19: singleStatementTimespanOutput= ruleTimespanSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSingleStatementComparison_in_singleStatementBooleanWhere12983);
                    this.ruleTimespanSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementTimespanOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementTimespanOutput!==null?singleStatementTimespanOutput.value:null);this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 7 :
                    // IDP.g:900:19: singleStatementDateOutput= ruleDateSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementComparison_in_singleStatementBooleanWhere13010);
                    this.ruleDateSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementDateOutput=this.ruleDateSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementDateOutput=this.ruleDateSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementDateOutput=this.ruleDateSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementDateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementDateOutput!==null?singleStatementDateOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 8 :
                    // IDP.g:901:19: singleStatementTimeOutput= ruleTimeSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatementComparison_in_singleStatementBooleanWhere13037);
                    this.ruleTimeSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementTimeOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementTimeOutput!==null?singleStatementTimeOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 9 :
                    // IDP.g:902:19: singleStatementTimestampOutput= ruleTimestampSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementComparison_in_singleStatementBooleanWhere13064);
                    this.ruleTimestampSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementTimestampOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementTimestampOutput!==null?singleStatementTimestampOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 10 :
                    // IDP.g:903:19: singleStatementComplexOutput= complexStatementBooleanWhere
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_complexStatementBooleanWhere_in_singleStatementBooleanWhere13115);
                    this.complexStatementBooleanWhere_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementComplexOutput=this.complexStatementBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementComplexOutput=this.complexStatementBooleanWhere();

                    	}
                    	}
                    else{
                        singleStatementComplexOutput=this.complexStatementBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementComplexOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementComplexOutput!==null?singleStatementComplexOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;
                case 11 :
                    // IDP.g:904:19: singleStatementComplexOutput= complexStructStatementBooleanWhere
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_complexStructStatementBooleanWhere_in_singleStatementBooleanWhere13142);
                    this.complexStructStatementBooleanWhere_DFAcall = false;

                     if( typeof this.singleStatementBooleanWhereCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanWhereCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanWhereCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA44 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementComplexOutput=this.complexStructStatementBooleanWhere();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanWhereCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementComplexOutput=this.complexStructStatementBooleanWhere();

                    	}
                    	}
                    else{
                        singleStatementComplexOutput=this.complexStructStatementBooleanWhere();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementComplexOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementComplexOutput!==null?singleStatementComplexOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "singleStatementBooleanWhere";
        }
        return retval;
    },

    // inline static return class
    singleStatementBoolean_return: (function() {
        IDPParser.singleStatementBoolean_return = function(){};
        org.antlr.lang.extend(IDPParser.singleStatementBoolean_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:908:1: singleStatementBoolean returns [value] : (singleStatementOutput= ruleNumericSingleStatementComparison | singleStatementOutput= ruleNullStatementComparison | singleStatementOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementOutput= ruleStringSingleStatementComparison | singleStatementOutput= ruleTimespanSingleStatementComparison | singleStatementOutput= ruleDateSingleStatementComparison | singleStatementOutput= ruleTimeSingleStatementComparison | singleStatementOutput= ruleTimestampSingleStatementComparison | singleStatementOutput= complexStatementBoolean | singleStatementOutput= complexStructStatementBoolean );
    // $ANTLR start "singleStatementBoolean"
    singleStatementBoolean: function() {
        this.currentRule = "singleStatementBoolean";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.singleStatementBoolean_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var singleStatementOutput = null;


        this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:911:9: (singleStatementOutput= ruleNumericSingleStatementComparison | singleStatementOutput= ruleNullStatementComparison | singleStatementOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementOutput= ruleStringSingleStatementComparison | singleStatementOutput= ruleTimespanSingleStatementComparison | singleStatementOutput= ruleDateSingleStatementComparison | singleStatementOutput= ruleTimeSingleStatementComparison | singleStatementOutput= ruleTimestampSingleStatementComparison | singleStatementOutput= complexStatementBoolean | singleStatementOutput= complexStructStatementBoolean )
            var alt45=11;
            this.singleStatementBoolean_DFAcall=(typeof this.singleStatementBoolean_DFAcall === 'undefined' ? false: this.singleStatementBoolean_DFAcall); // only valid for synpred
            if(this.singleStatementBoolean_DFAcall === false /*&& !this.failedPredictDFA45*/)
            {   
                this.dfa45NumberOfAlt = alt45;
                this.dfa45InRule = "singleStatementBoolean";
            	this.dfa45Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.singleStatementBooleanCurrentDecisionNumber  = 45; 
                alt45 = this.dfa45.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt45 === 0 || alt45 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 45);
            		return retval;
                }
            }	
            else
                alt45 = this.dfa45AltNumber;	
            switch (alt45) {
                case 1 :
                    // IDP.g:913:17: singleStatementOutput= ruleNumericSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSingleStatementComparison_in_singleStatementBoolean13296);
                    this.ruleNumericSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleNumericSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleNumericSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleNumericSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:914:19: singleStatementOutput= ruleNullStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNullStatementComparison_in_singleStatementBoolean13323);
                    this.ruleNullStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleNullStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleNullStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleNullStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:915:19: singleStatementOutput= ruleBooleanSingleStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleStatement_in_singleStatementBoolean13350);
                    this.ruleBooleanSingleStatement_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleBooleanSingleStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleBooleanSingleStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleBooleanSingleStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 4 :
                    // IDP.g:916:19: singleStatementOutput= ruleBooleanSingleSelectionStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleSelectionStatement_in_singleStatementBoolean13378);
                    this.ruleBooleanSingleSelectionStatement_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 5 :
                    // IDP.g:917:19: singleStatementOutput= ruleStringSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatementComparison_in_singleStatementBoolean13405);
                    this.ruleStringSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleStringSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleStringSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleStringSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 6 :
                    // IDP.g:918:19: singleStatementOutput= ruleTimespanSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSingleStatementComparison_in_singleStatementBoolean13432);
                    this.ruleTimespanSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimespanSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimespanSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimespanSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 7 :
                    // IDP.g:919:19: singleStatementOutput= ruleDateSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementComparison_in_singleStatementBoolean13459);
                    this.ruleDateSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleDateSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleDateSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleDateSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 8 :
                    // IDP.g:920:19: singleStatementOutput= ruleTimeSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatementComparison_in_singleStatementBoolean13486);
                    this.ruleTimeSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimeSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimeSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimeSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 9 :
                    // IDP.g:921:19: singleStatementOutput= ruleTimestampSingleStatementComparison
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementComparison_in_singleStatementBoolean13513);
                    this.ruleTimestampSingleStatementComparison_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.ruleTimestampSingleStatementComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.ruleTimestampSingleStatementComparison();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.ruleTimestampSingleStatementComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 10 :
                    // IDP.g:922:19: singleStatementOutput= complexStatementBoolean
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_complexStatementBoolean_in_singleStatementBoolean13564);
                    this.complexStatementBoolean_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.complexStatementBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.complexStatementBoolean();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.complexStatementBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;
                case 11 :
                    // IDP.g:923:19: singleStatementOutput= complexStructStatementBoolean
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_complexStructStatementBoolean_in_singleStatementBoolean13590);
                    this.complexStructStatementBoolean_DFAcall = false;

                     if( typeof this.singleStatementBooleanCurrentDecisionNumber !== 'undefined' && this.singleStatementBooleanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.singleStatementBooleanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA45 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        singleStatementOutput=this.complexStructStatementBoolean();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.singleStatementBooleanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	singleStatementOutput=this.complexStructStatementBoolean();

                    	}
                    	}
                    else{
                        singleStatementOutput=this.complexStructStatementBoolean();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, singleStatementOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (singleStatementOutput!==null?singleStatementOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "singleStatementBoolean";
        }
        return retval;
    },

    // inline static return class
    ruleNumericSingleStatementComparison_return: (function() {
        IDPParser.ruleNumericSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:929:1: ruleNumericSingleStatementComparison returns [value] : (leftSelectionOutput= ruleNumericClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) ) ) ;
    // $ANTLR start "ruleNumericSingleStatementComparison"
    ruleNumericSingleStatementComparison: function() {
        this.currentRule = "ruleNumericSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var leftSelectionOutput = null;
         var selectionOperatorOutput = null;
         var rightSelectionOutput = null;


        var ruleOutput = {}; 
        try {
            // IDP.g:936:17: ( (leftSelectionOutput= ruleNumericClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) ) ) )
            // IDP.g:936:33: (leftSelectionOutput= ruleNumericClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:936:33: (leftSelectionOutput= ruleNumericClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) ) )
            // IDP.g:936:34: leftSelectionOutput= ruleNumericClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) )
            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericSingleStatementComparison13811);
            this.ruleNumericClause_DFAcall = false;

             if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                leftSelectionOutput=this.ruleNumericClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	leftSelectionOutput=this.ruleNumericClause();

            	}
            	}
            else{
                leftSelectionOutput=this.ruleNumericClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (leftSelectionOutput!==null?leftSelectionOutput.value:null);
            }
            // IDP.g:937:34: ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause ) )
            var alt46=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt46=1;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt46=2;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
                alt46=3;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_46 =
            			new org.antlr.runtime.NoViableAltException(null, 46, 0, this.input);

                nvae_46.c = this.input.LA(1);
                throw nvae_46;
            }

            switch (alt46) {
                case 1 :
                    // IDP.g:937:35: (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues )
                    // IDP.g:937:35: (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues )
                    // IDP.g:937:36: selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleNumericSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleNumericSingleStatementComparison13854);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSetOfValues_in_ruleNumericSingleStatementComparison13912);
                    this.ruleNumericSetOfValues_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleNumericSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleNumericSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleNumericSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:939:36: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause )
                    // IDP.g:939:36: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause )
                    // IDP.g:939:37: selectionOperatorOutput= betweenOp rightSelectionOutput= ruleNumericBetweenClause
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleNumericSingleStatementComparison13957);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBetweenClause_in_ruleNumericSingleStatementComparison14014);
                    this.ruleNumericBetweenClause_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleNumericBetweenClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleNumericBetweenClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleNumericBetweenClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 3 :
                    // IDP.g:941:35: (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause )
                    // IDP.g:941:35: (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause )
                    // IDP.g:941:36: selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleNumericClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOption_in_ruleNumericSingleStatementComparison14058);
                    this.ruleNumericComparisonOption_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleNumericComparisonOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleNumericComparisonOption();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleNumericComparisonOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericSingleStatementComparison14114);
                    this.ruleNumericClause_DFAcall = false;

                     if( typeof this.ruleNumericSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNumericSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleNumericClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleNumericClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleNumericClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;

            }
            /*if(this.failedPredictDFA46 !== undefined && this.failedPredictDFA46)
            { 
                throw null;
            }*/




            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleStatement(ruleOutput);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(ruleOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((leftSelectionOutput?this.input.toString(leftSelectionOutput.start,leftSelectionOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleNumericBetweenClause_return: (function() {
        IDPParser.ruleNumericBetweenClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericBetweenClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:946:1: ruleNumericBetweenClause returns [value] : ( ( (dateOutput= ruleNumericClause ) ) ( AND | TO ) ( (dateOutput= ruleNumericClause ) ) ) ;
    // $ANTLR start "ruleNumericBetweenClause"
    ruleNumericBetweenClause: function() {
        this.currentRule = "ruleNumericBetweenClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericBetweenClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set82 = null;
         var dateOutput = null;

        var set82_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value);
                                        
        try {
            // IDP.g:950:9: ( ( ( (dateOutput= ruleNumericClause ) ) ( AND | TO ) ( (dateOutput= ruleNumericClause ) ) ) )
            // IDP.g:950:17: ( ( (dateOutput= ruleNumericClause ) ) ( AND | TO ) ( (dateOutput= ruleNumericClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:950:17: ( ( (dateOutput= ruleNumericClause ) ) ( AND | TO ) ( (dateOutput= ruleNumericClause ) ) )
            // IDP.g:950:19: ( (dateOutput= ruleNumericClause ) ) ( AND | TO ) ( (dateOutput= ruleNumericClause ) )
            // IDP.g:950:19: ( (dateOutput= ruleNumericClause ) )
            // IDP.g:950:20: (dateOutput= ruleNumericClause )
            // IDP.g:950:20: (dateOutput= ruleNumericClause )
            // IDP.g:950:21: dateOutput= ruleNumericClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericBetweenClause14217);
            this.ruleNumericClause_DFAcall = false;

             if( typeof this.ruleNumericBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleNumericClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleNumericClause();

            	}
            	}
            else{
                dateOutput=this.ruleNumericClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }



            set82=this.input.LT(1);
            if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set82));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set82_14224 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set82_14224;
            }

            // IDP.g:951:17: ( (dateOutput= ruleNumericClause ) )
            // IDP.g:951:19: (dateOutput= ruleNumericClause )
            // IDP.g:951:19: (dateOutput= ruleNumericClause )
            // IDP.g:951:20: dateOutput= ruleNumericClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericBetweenClause14255);
            this.ruleNumericClause_DFAcall = false;

             if( typeof this.ruleNumericBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleNumericClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleNumericClause();

            	}
            	}
            else{
                dateOutput=this.ruleNumericClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericBetweenClause";
        }
        return retval;
    },

    // inline static return class
    ruleNullStatementComparison_return: (function() {
        IDPParser.ruleNullStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNullStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:953:1: ruleNullStatementComparison returns [value] : ( (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) ) | (leftSelectionOutput= ruleNullSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) ) ) ;
    // $ANTLR start "ruleNullStatementComparison"
    ruleNullStatementComparison: function() {
        this.currentRule = "ruleNullStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNullStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var leftSelectionOutput = null;
         var selectionOperatorOutput = null;
         var rightSelectionOutput = null;


        var ruleOutput = {};
        try {
            // IDP.g:956:17: ( ( (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) ) | (leftSelectionOutput= ruleNullSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) ) ) )
            // IDP.g:956:33: ( (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) ) | (leftSelectionOutput= ruleNullSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:956:33: ( (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) ) | (leftSelectionOutput= ruleNullSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) ) )
            var alt49=2;

            var LA49_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA49_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA49_0==FIRST )||(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && LA49_0>=TYPETIMEINTERVAL && LA49_0<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && LA49_0>=TYPETIME && LA49_0<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA49_0==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA49_0==TYPEBOOLEAN )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA49_0>=COUNT_DISTINCT_OF && LA49_0<=COUNT_OF )||(  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA49_0>=TRUE && LA49_0<=TYPEBOOLEANPARAMETER )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA49_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA49_0>=LAST && LA49_0<=MINIMUM_OF )||(  this.pushNextTokens(TIMESTRING,TYPETIMEPARAMETER,1) && LA49_0>=TIMESTRING && LA49_0<=TYPETIMEPARAMETER )||(  this.pushNextTokens(TIMESTAMPSTRING,TOMORROW,1) && LA49_0>=TIMESTAMPSTRING && LA49_0<=TOMORROW )||(  this.pushNextTokens(MINUS,TYPEDATEPARAMETER,1) && LA49_0>=MINUS && LA49_0<=TYPEDATEPARAMETER )||(  this.pushNextTokens(ROUND,LOG,1) && LA49_0>=ROUND && LA49_0<=LOG )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA49_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA49_0>=STRING && LA49_0<=TYPESTRINGPARAMETER )||(  this.pushNextTokens(ZERO_TO_ONE,INT,1) && LA49_0>=ZERO_TO_ONE && LA49_0<=INT )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA49_0==NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA49_0>=HIGHEST && LA49_0<=SUM_OF )||( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA49_0==TYPETIMEINTERVALPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA49_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA49_0==FIRST )||(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,1) && LA49_0>=TYPETIMEINTERVAL && LA49_0<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,1) && LA49_0>=TYPETIME && LA49_0<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA49_0==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA49_0==TYPEBOOLEAN )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA49_0>=COUNT_DISTINCT_OF && LA49_0<=COUNT_OF )||(  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA49_0>=TRUE && LA49_0<=TYPEBOOLEANPARAMETER )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA49_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA49_0>=LAST && LA49_0<=MINIMUM_OF )||(  this.pushNextTokens(TIMESTRING,TYPETIMEPARAMETER,1) && LA49_0>=TIMESTRING && LA49_0<=TYPETIMEPARAMETER )||(  this.pushNextTokens(TIMESTAMPSTRING,TOMORROW,1) && LA49_0>=TIMESTAMPSTRING && LA49_0<=TOMORROW )||(  this.pushNextTokens(MINUS,TYPEDATEPARAMETER,1) && LA49_0>=MINUS && LA49_0<=TYPEDATEPARAMETER )||(  this.pushNextTokens(ROUND,LOG,1) && LA49_0>=ROUND && LA49_0<=LOG )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA49_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA49_0>=STRING && LA49_0<=TYPESTRINGPARAMETER )||(  this.pushNextTokens(ZERO_TO_ONE,INT,1) && LA49_0>=ZERO_TO_ONE && LA49_0<=INT )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA49_0==NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA49_0>=HIGHEST && LA49_0<=SUM_OF )||( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA49_0==TYPETIMEINTERVALPARAMETER )) ) {
                alt49=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(NULL,NULL,1) && LA49_0==NULL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(NULL,NULL,1) && LA49_0==NULL )) ) {
                alt49=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_49_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 49, 0, this.input);

                nvae_49_0.c = this.input.LA(1);
                throw nvae_49_0;
            }
            switch (alt49) {
                case 1 :
                    // IDP.g:956:34: (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) )
                    // IDP.g:956:34: (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause )
                    var alt47=7;

                    this.ruleNullStatementComparison_DFAcall=(typeof this.ruleNullStatementComparison_DFAcall === 'undefined' ? false: this.ruleNullStatementComparison_DFAcall); // only valid for synpred
                    if(this.ruleNullStatementComparison_DFAcall === false /*&& !this.failedPredictDFA47*/)
                    {   
                        this.dfa47NumberOfAlt = alt47;
                        this.dfa47InRule = "ruleNullStatementComparison";
                    	this.dfa47Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleNullStatementComparisonCurrentDecisionNumber  = 47; 
                        alt47 = this.dfa47.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt47 === 0 || alt47 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 47);
                    		return retval;
                        }
                    }	
                    else
                        alt47 = this.dfa47AltNumber;	
                    switch (alt47) {
                        case 1 :
                            // IDP.g:956:35: leftSelectionOutput= ruleTimespanClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_ruleNullStatementComparison14406);
                            this.ruleTimespanClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleTimespanClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleTimespanClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleTimespanClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:956:78: leftSelectionOutput= ruleNumericClause
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNullStatementComparison14414);
                            this.ruleNumericClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleNumericClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleNumericClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleNumericClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 3 :
                            // IDP.g:956:120: leftSelectionOutput= ruleDateSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleNullStatementComparison14422);
                            this.ruleDateSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleDateSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleDateSelectionClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleDateSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 4 :
                            // IDP.g:956:168: leftSelectionOutput= ruleTimestampSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleNullStatementComparison14430);
                            this.ruleTimestampSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleTimestampSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleTimestampSelectionClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleTimestampSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 5 :
                            // IDP.g:956:221: leftSelectionOutput= ruleTimeSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleNullStatementComparison14438);
                            this.ruleTimeSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleTimeSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleTimeSelectionClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleTimeSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 6 :
                            // IDP.g:956:269: leftSelectionOutput= ruleStringClause
                            this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_ruleNullStatementComparison14446);
                            this.ruleStringClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleStringClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleStringClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleStringClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;
                        case 7 :
                            // IDP.g:956:310: leftSelectionOutput= ruleBooleanSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleNullStatementComparison14454);
                            this.ruleBooleanSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA47 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                leftSelectionOutput=this.ruleBooleanSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	leftSelectionOutput=this.ruleBooleanSelectionClause();

                            	}
                            	}
                            else{
                                leftSelectionOutput=this.ruleBooleanSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA47 !== undefined && this.failedPredictDFA47)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.leftSelectionClause = (leftSelectionOutput!==null?leftSelectionOutput.value:null);
                    }
                    // IDP.g:957:34: (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause ) )
                    // IDP.g:957:35: selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause )
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanComparisonOperator_in_ruleNullStatementComparison14497);
                    this.ruleBooleanComparisonOperator_DFAcall = false;

                     if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:958:34: (rightSelectionOutput= ruleNullSelectionClause )
                    // IDP.g:958:35: rightSelectionOutput= ruleNullSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14541);
                    this.ruleNullSelectionClause_DFAcall = false;

                     if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleNullSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleNullSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleNullSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:960:33: (leftSelectionOutput= ruleNullSelectionClause ) (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) )
                    // IDP.g:960:33: (leftSelectionOutput= ruleNullSelectionClause )
                    // IDP.g:960:34: leftSelectionOutput= ruleNullSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14623);
                    this.ruleNullSelectionClause_DFAcall = false;

                     if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        leftSelectionOutput=this.ruleNullSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	leftSelectionOutput=this.ruleNullSelectionClause();

                    	}
                    	}
                    else{
                        leftSelectionOutput=this.ruleNullSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.leftSelectionClause = (leftSelectionOutput!==null?leftSelectionOutput.value:null);
                    }
                    // IDP.g:961:34: (selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause ) )
                    // IDP.g:961:35: selectionOperatorOutput= ruleBooleanComparisonOperator (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause )
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanComparisonOperator_in_ruleNullStatementComparison14666);
                    this.ruleBooleanComparisonOperator_DFAcall = false;

                     if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleBooleanComparisonOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:962:34: (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause )
                    var alt48=8;

                    this.ruleNullStatementComparison_DFAcall=(typeof this.ruleNullStatementComparison_DFAcall === 'undefined' ? false: this.ruleNullStatementComparison_DFAcall); // only valid for synpred
                    if(this.ruleNullStatementComparison_DFAcall === false /*&& !this.failedPredictDFA48*/)
                    {   
                        this.dfa48NumberOfAlt = alt48;
                        this.dfa48InRule = "ruleNullStatementComparison";
                    	this.dfa48Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleNullStatementComparisonCurrentDecisionNumber  = 48; 
                        alt48 = this.dfa48.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt48 === 0 || alt48 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 48);
                    		return retval;
                        }
                    }	
                    else
                        alt48 = this.dfa48AltNumber;	
                    switch (alt48) {
                        case 1 :
                            // IDP.g:962:35: rightSelectionOutput= ruleNullSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14710);
                            this.ruleNullSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleNullSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleNullSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleNullSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:962:84: rightSelectionOutput= ruleTimespanClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_ruleNullStatementComparison14718);
                            this.ruleTimespanClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleTimespanClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleTimespanClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleTimespanClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 3 :
                            // IDP.g:962:128: rightSelectionOutput= ruleNumericClause
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNullStatementComparison14726);
                            this.ruleNumericClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleNumericClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleNumericClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleNumericClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 4 :
                            // IDP.g:962:171: rightSelectionOutput= ruleDateSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleNullStatementComparison14734);
                            this.ruleDateSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleDateSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleDateSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleDateSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 5 :
                            // IDP.g:962:220: rightSelectionOutput= ruleTimestampSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleNullStatementComparison14742);
                            this.ruleTimestampSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleTimestampSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleTimestampSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleTimestampSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 6 :
                            // IDP.g:962:274: rightSelectionOutput= ruleTimeSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleNullStatementComparison14750);
                            this.ruleTimeSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleTimeSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleTimeSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleTimeSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 7 :
                            // IDP.g:962:322: rightSelectionOutput= ruleStringClause
                            this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_ruleNullStatementComparison14757);
                            this.ruleStringClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleStringClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleStringClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleStringClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 8 :
                            // IDP.g:962:364: rightSelectionOutput= ruleBooleanSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleNullStatementComparison14765);
                            this.ruleBooleanSelectionClause_DFAcall = false;

                             if( typeof this.ruleNullStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleNullStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNullStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA48 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleBooleanSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleBooleanSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleBooleanSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA48 !== undefined && this.failedPredictDFA48)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;

            }
            /*if(this.failedPredictDFA49 !== undefined && this.failedPredictDFA49)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleStatement(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNullStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanSingleStatementComparison_return: (function() {
        IDPParser.ruleTimespanSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:965:1: ruleTimespanSingleStatementComparison returns [value] : (leftSelectionOutput= ruleTimespanFromTimestampSelectionClause ) ( (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause ) ) ;
    // $ANTLR start "ruleTimespanSingleStatementComparison"
    ruleTimespanSingleStatementComparison: function() {
        this.currentRule = "ruleTimespanSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var leftSelectionOutput = null;
         var selectionOperatorOutput = null;
         var rightSelectionOutput = null;


        var ruleOutput = {}; 
        try {
            // IDP.g:972:17: ( (leftSelectionOutput= ruleTimespanFromTimestampSelectionClause ) ( (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause ) ) )
            // IDP.g:972:32: (leftSelectionOutput= ruleTimespanFromTimestampSelectionClause ) ( (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause ) )
            root_0 = this.adaptor.nil();

            // IDP.g:972:32: (leftSelectionOutput= ruleTimespanFromTimestampSelectionClause )
            // IDP.g:972:89: leftSelectionOutput= ruleTimespanFromTimestampSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampSelectionClause_in_ruleTimespanSingleStatementComparison14976);
            this.ruleTimespanFromTimestampSelectionClause_DFAcall = false;

             if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                leftSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	leftSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

            	}
            	}
            else{
                leftSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, leftSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (leftSelectionOutput!==null?leftSelectionOutput.value:null);
            }
            // IDP.g:973:34: ( (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause ) | (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause ) )
            var alt50=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt50=1;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt50=2;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
                alt50=3;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_50 =
            			new org.antlr.runtime.NoViableAltException(null, 50, 0, this.input);

                nvae_50.c = this.input.LA(1);
                throw nvae_50;
            }

            switch (alt50) {
                case 1 :
                    // IDP.g:973:35: (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) )
                    // IDP.g:973:35: (selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues ) )
                    // IDP.g:973:36: selectionOperatorOutput= ruleSetOfValuesOperator (rightSelectionOutput= ruleTimespanForDateSetOfValues )
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleTimespanSingleStatementComparison15020);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:973:152: (rightSelectionOutput= ruleTimespanForDateSetOfValues )
                    // IDP.g:973:154: rightSelectionOutput= ruleTimespanForDateSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateSetOfValues_in_ruleTimespanSingleStatementComparison15031);
                    this.ruleTimespanForDateSetOfValues_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimespanForDateSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimespanForDateSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimespanForDateSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }








                    break;
                case 2 :
                    // IDP.g:974:36: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause )
                    // IDP.g:974:36: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause )
                    // IDP.g:974:37: selectionOperatorOutput= betweenOp rightSelectionOutput= ruleTimespanBetweenClause
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleTimespanSingleStatementComparison15089);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanBetweenClause_in_ruleTimespanSingleStatementComparison15097);
                    this.ruleTimespanBetweenClause_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimespanBetweenClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimespanBetweenClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimespanBetweenClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 3 :
                    // IDP.g:975:35: (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause )
                    // IDP.g:975:35: (selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause )
                    // IDP.g:975:36: selectionOperatorOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimespanFromTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOption_in_ruleTimespanSingleStatementComparison15141);
                    this.ruleNumericComparisonOption_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleNumericComparisonOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleNumericComparisonOption();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleNumericComparisonOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampSelectionClause_in_ruleTimespanSingleStatementComparison15197);
                    this.ruleTimespanFromTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimespanFromTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;

            }
            /*if(this.failedPredictDFA50 !== undefined && this.failedPredictDFA50)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(ruleOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((leftSelectionOutput?this.input.toString(leftSelectionOutput.start,leftSelectionOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanBetweenClause_return: (function() {
        IDPParser.ruleTimespanBetweenClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanBetweenClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:982:1: ruleTimespanBetweenClause returns [value] : ( ( (dateOutput= ruleTimespanClause ) ) ( AND | TO ) ( (dateOutput= ruleTimespanClause ) ) ) ;
    // $ANTLR start "ruleTimespanBetweenClause"
    ruleTimespanBetweenClause: function() {
        this.currentRule = "ruleTimespanBetweenClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanBetweenClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set83 = null;
         var dateOutput = null;

        var set83_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value);
                                        
        try {
            // IDP.g:986:9: ( ( ( (dateOutput= ruleTimespanClause ) ) ( AND | TO ) ( (dateOutput= ruleTimespanClause ) ) ) )
            // IDP.g:986:17: ( ( (dateOutput= ruleTimespanClause ) ) ( AND | TO ) ( (dateOutput= ruleTimespanClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:986:17: ( ( (dateOutput= ruleTimespanClause ) ) ( AND | TO ) ( (dateOutput= ruleTimespanClause ) ) )
            // IDP.g:986:19: ( (dateOutput= ruleTimespanClause ) ) ( AND | TO ) ( (dateOutput= ruleTimespanClause ) )
            // IDP.g:986:19: ( (dateOutput= ruleTimespanClause ) )
            // IDP.g:986:20: (dateOutput= ruleTimespanClause )
            // IDP.g:986:20: (dateOutput= ruleTimespanClause )
            // IDP.g:986:21: dateOutput= ruleTimespanClause
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_ruleTimespanBetweenClause15368);
            this.ruleTimespanClause_DFAcall = false;

             if( typeof this.ruleTimespanBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleTimespanClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleTimespanClause();

            	}
            	}
            else{
                dateOutput=this.ruleTimespanClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }



            set83=this.input.LT(1);
            if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set83));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set83_15375 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set83_15375;
            }

            // IDP.g:987:17: ( (dateOutput= ruleTimespanClause ) )
            // IDP.g:987:19: (dateOutput= ruleTimespanClause )
            // IDP.g:987:19: (dateOutput= ruleTimespanClause )
            // IDP.g:987:20: dateOutput= ruleTimespanClause
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_ruleTimespanBetweenClause15406);
            this.ruleTimespanClause_DFAcall = false;

             if( typeof this.ruleTimespanBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleTimespanClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleTimespanClause();

            	}
            	}
            else{
                dateOutput=this.ruleTimespanClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanBetweenClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringSingleStatementComparison_return: (function() {
        IDPParser.ruleStringSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:989:1: ruleStringSingleStatementComparison returns [value] : selectionLeftOutput= ruleStringClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause ) | (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) ) | (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) | (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) ) ;
    // $ANTLR start "ruleStringSingleStatementComparison"
    ruleStringSingleStatementComparison: function() {
        this.currentRule = "ruleStringSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;
         var selectionOperatorOutput = null;
         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:997:25: (selectionLeftOutput= ruleStringClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause ) | (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) ) | (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) | (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) ) )
            // IDP.g:997:37: selectionLeftOutput= ruleStringClause ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause ) | (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) ) | (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) | (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) )
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_ruleStringSingleStatementComparison15613);
            this.ruleStringClause_DFAcall = false;

             if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleStringClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleStringClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleStringClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }
            // IDP.g:998:33: ( (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues ) | (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause ) | (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) ) | (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) | (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) ) )
            var alt51=5;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt51=1;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt51=2;   
                break;
            case CONTAINS:
                var LA51_3 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PATTERN,PATTERN,2) && LA51_3==PATTERN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PATTERN,PATTERN,2) && LA51_3==PATTERN )) ) {
                    alt51=3;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA51_3==LROUNDB )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA51_3==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,2) && LA51_3==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,2) && LA51_3==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,2) && LA51_3==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,2) && LA51_3==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA51_3==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA51_3>=STRING && LA51_3<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA51_3==LROUNDB )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA51_3==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,2) && LA51_3==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,2) && LA51_3==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,2) && LA51_3==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,2) && LA51_3==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA51_3==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA51_3>=STRING && LA51_3<=TYPESTRINGPARAMETER )) ) {
                    alt51=4;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_51_3 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 51, 3, this.input);

                    nvae_51_3.c = this.input.LA(2);
                    throw nvae_51_3;
                }   
                break;
            case DOES_NOT_CONTAIN:
                var LA51_4 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PATTERN,PATTERN,2) && LA51_4==PATTERN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PATTERN,PATTERN,2) && LA51_4==PATTERN )) ) {
                    alt51=3;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA51_4==LROUNDB )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA51_4==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,2) && LA51_4==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,2) && LA51_4==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,2) && LA51_4==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,2) && LA51_4==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA51_4==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA51_4>=STRING && LA51_4<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA51_4==LROUNDB )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA51_4==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,2) && LA51_4==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,2) && LA51_4==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,2) && LA51_4==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,2) && LA51_4==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA51_4==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA51_4>=STRING && LA51_4<=TYPESTRINGPARAMETER )) ) {
                    alt51=4;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_51_4 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 51, 4, this.input);

                    nvae_51_4.c = this.input.LA(2);
                    throw nvae_51_4;
                }   
                break;
            case IS_LIKE:
            case LIKE:
            case IS_NOT_LIKE:
            case NOT_LIKE:
            case DOES_NOT_START:
            case START_WITH:
            case DOES_NOT_END:
            case END_WITH:
                alt51=4;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
                alt51=5;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,CONTAINS,DOES_NOT_CONTAIN,IS_LIKE,LIKE,IS_NOT_LIKE,NOT_LIKE,DOES_NOT_START,START_WITH,DOES_NOT_END,END_WITH,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_51 =
            			new org.antlr.runtime.NoViableAltException(null, 51, 0, this.input);

                nvae_51.c = this.input.LA(1);
                throw nvae_51;
            }

            switch (alt51) {
                case 1 :
                    // IDP.g:998:34: (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues )
                    // IDP.g:998:34: (selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues )
                    // IDP.g:998:35: selectionOperatorOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleStringSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleStringSingleStatementComparison15656);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSetOfValues_in_ruleStringSingleStatementComparison15665);
                    this.ruleStringSetOfValues_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleStringSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleStringSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleStringSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:999:33: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause )
                    // IDP.g:999:33: (selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause )
                    // IDP.g:999:34: selectionOperatorOutput= betweenOp rightSelectionOutput= ruleStringBetweenClause
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleStringSingleStatementComparison15709);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleStringBetweenClause_in_ruleStringSingleStatementComparison15717);
                    this.ruleStringBetweenClause_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleStringBetweenClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleStringBetweenClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleStringBetweenClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 3 :
                    // IDP.g:1000:35: (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) )
                    // IDP.g:1000:35: (selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) ) )
                    // IDP.g:1000:37: selectionOperatorOutput= ruleIncludesPattern ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) )
                    this.pushFollow(IDPParser.FOLLOW_ruleIncludesPattern_in_ruleStringSingleStatementComparison15762);
                    this.ruleIncludesPattern_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleIncludesPattern();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleIncludesPattern();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleIncludesPattern();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:1000:159: ( (rightSelectionOutput= ruleOneStringSimpleSelectionClause ) )
                    // IDP.g:1000:162: (rightSelectionOutput= ruleOneStringSimpleSelectionClause )
                    // IDP.g:1000:162: (rightSelectionOutput= ruleOneStringSimpleSelectionClause )
                    // IDP.g:1000:163: rightSelectionOutput= ruleOneStringSimpleSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringSingleStatementComparison15774);
                    this.ruleOneStringSimpleSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleOneStringSimpleSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleOneStringSimpleSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleOneStringSimpleSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }








                    break;
                case 4 :
                    // IDP.g:1001:35: (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) )
                    // IDP.g:1001:35: (selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) )
                    // IDP.g:1001:37: selectionOperatorOutput= ruleStringComparisonOptionOnly ( (rightSelectionOutput= ruleStringClauseStringAndDates ) )
                    this.pushFollow(IDPParser.FOLLOW_ruleStringComparisonOptionOnly_in_ruleStringSingleStatementComparison15824);
                    this.ruleStringComparisonOptionOnly_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleStringComparisonOptionOnly();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleStringComparisonOptionOnly();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleStringComparisonOptionOnly();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:1001:170: ( (rightSelectionOutput= ruleStringClauseStringAndDates ) )
                    // IDP.g:1001:173: (rightSelectionOutput= ruleStringClauseStringAndDates )
                    // IDP.g:1001:173: (rightSelectionOutput= ruleStringClauseStringAndDates )
                    // IDP.g:1001:174: rightSelectionOutput= ruleStringClauseStringAndDates
                    this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSingleStatementComparison15836);
                    this.ruleStringClauseStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }








                    break;
                case 5 :
                    // IDP.g:1002:35: (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) )
                    // IDP.g:1002:35: (selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) ) )
                    // IDP.g:1002:37: selectionOperatorOutput= ruleStringComparisonOption ( (rightSelectionOutput= ruleStringClauseStringAndDates ) )
                    this.pushFollow(IDPParser.FOLLOW_ruleStringComparisonOption_in_ruleStringSingleStatementComparison15885);
                    this.ruleStringComparisonOption_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOperatorOutput=this.ruleStringComparisonOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOperatorOutput=this.ruleStringComparisonOption();

                    	}
                    	}
                    else{
                        selectionOperatorOutput=this.ruleStringComparisonOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOperatorOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (selectionOperatorOutput!==null?selectionOperatorOutput.value:null);
                    }
                    // IDP.g:1002:166: ( (rightSelectionOutput= ruleStringClauseStringAndDates ) )
                    // IDP.g:1002:169: (rightSelectionOutput= ruleStringClauseStringAndDates )
                    // IDP.g:1002:169: (rightSelectionOutput= ruleStringClauseStringAndDates )
                    // IDP.g:1002:170: rightSelectionOutput= ruleStringClauseStringAndDates
                    this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSingleStatementComparison15897);
                    this.ruleStringClauseStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleStringClauseStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }








                    break;

            }
            /*if(this.failedPredictDFA51 !== undefined && this.failedPredictDFA51)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput);
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((selectionLeftOutput?this.input.toString(selectionLeftOutput.start,selectionLeftOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
                                                  this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleStringBetweenClause_return: (function() {
        IDPParser.ruleStringBetweenClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringBetweenClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1006:1: ruleStringBetweenClause returns [value] : ( ( (dateOutput= ruleStringClauseStringAndDates ) ) ( AND | TO ) ( (dateOutput= ruleStringClauseStringAndDates ) ) ) ;
    // $ANTLR start "ruleStringBetweenClause"
    ruleStringBetweenClause: function() {
        this.currentRule = "ruleStringBetweenClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringBetweenClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set84 = null;
         var dateOutput = null;

        var set84_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value);
                                       var valueList = this.parseModelLib.getModelManger().getValueListAttribute();
                                        
        try {
            // IDP.g:1011:9: ( ( ( (dateOutput= ruleStringClauseStringAndDates ) ) ( AND | TO ) ( (dateOutput= ruleStringClauseStringAndDates ) ) ) )
            // IDP.g:1011:17: ( ( (dateOutput= ruleStringClauseStringAndDates ) ) ( AND | TO ) ( (dateOutput= ruleStringClauseStringAndDates ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1011:17: ( ( (dateOutput= ruleStringClauseStringAndDates ) ) ( AND | TO ) ( (dateOutput= ruleStringClauseStringAndDates ) ) )
            // IDP.g:1011:19: ( (dateOutput= ruleStringClauseStringAndDates ) ) ( AND | TO ) ( (dateOutput= ruleStringClauseStringAndDates ) )
            // IDP.g:1011:19: ( (dateOutput= ruleStringClauseStringAndDates ) )
            // IDP.g:1011:20: (dateOutput= ruleStringClauseStringAndDates )
            // IDP.g:1011:20: (dateOutput= ruleStringClauseStringAndDates )
            // IDP.g:1011:21: dateOutput= ruleStringClauseStringAndDates
            this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringBetweenClause16024);
            this.ruleStringClauseStringAndDates_DFAcall = false;

             if( typeof this.ruleStringBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleStringClauseStringAndDates();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleStringClauseStringAndDates();

            	}
            	}
            else{
                dateOutput=this.ruleStringClauseStringAndDates();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));this.parseModelLib.getModelManger().setLastValueListAttribute(valueList);
            }



            set84=this.input.LT(1);
            if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set84));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set84_16031 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set84_16031;
            }

            // IDP.g:1012:17: ( (dateOutput= ruleStringClauseStringAndDates ) )
            // IDP.g:1012:19: (dateOutput= ruleStringClauseStringAndDates )
            // IDP.g:1012:19: (dateOutput= ruleStringClauseStringAndDates )
            // IDP.g:1012:20: dateOutput= ruleStringClauseStringAndDates
            this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringBetweenClause16062);
            this.ruleStringClauseStringAndDates_DFAcall = false;

             if( typeof this.ruleStringBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleStringClauseStringAndDates();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleStringClauseStringAndDates();

            	}
            	}
            else{
                dateOutput=this.ruleStringClauseStringAndDates();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringBetweenClause";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSimpleSelection_return: (function() {
        IDPParser.ruleBooleanSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1014:1: ruleBooleanSimpleSelection returns [value] : (boolVal= ( TRUE | FALSE ) | param= TYPEBOOLEANPARAMETER );
    // $ANTLR start "ruleBooleanSimpleSelection"
    ruleBooleanSimpleSelection: function() {
        this.currentRule = "ruleBooleanSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var boolVal = null;
        var param = null;

        var boolVal_tree=null;
        var param_tree=null;

        var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var boolType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.string; simpleSelectiontOutput.valueType = boolType;
        try {
            // IDP.g:1017:9: (boolVal= ( TRUE | FALSE ) | param= TYPEBOOLEANPARAMETER )
            var alt52=2;
            var LA52_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TRUE,FALSE,1) && LA52_0>=TRUE && LA52_0<=FALSE )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TRUE,FALSE,1) && LA52_0>=TRUE && LA52_0<=FALSE )) ) {
                alt52=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEANPARAMETER,TYPEBOOLEANPARAMETER,1) && LA52_0==TYPEBOOLEANPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEANPARAMETER,TYPEBOOLEANPARAMETER,1) && LA52_0==TYPEBOOLEANPARAMETER )) ) {
                alt52=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_52_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 52, 0, this.input);

                nvae_52_0.c = this.input.LA(1);
                throw nvae_52_0;
            }
            switch (alt52) {
                case 1 :
                    // IDP.g:1017:17: boolVal= ( TRUE | FALSE )
                    root_0 = this.adaptor.nil();

                    boolVal=this.input.LT(1);
                    if ( (  this.pushNextTokens(TRUE,FALSE,1) && this.input.LA(1)>=TRUE && this.input.LA(1)<=FALSE ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(boolVal));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_boolVal_16202 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_boolVal_16202;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (boolVal?boolVal.getText():null);
                    }


                    break;
                case 2 :
                    // IDP.g:1018:17: param= TYPEBOOLEANPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPEBOOLEANPARAMETER,TYPEBOOLEANPARAMETER,1);
                    param=this.match(this.input,TYPEBOOLEANPARAMETER,IDPParser.FOLLOW_TYPEBOOLEANPARAMETER_in_ruleBooleanSimpleSelection16234); if (this.state.failed) return retval;
                    if( TYPEBOOLEANPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanStatement_return: (function() {
        IDPParser.ruleBooleanStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1021:1: ruleBooleanStatement returns [value] : selectionLeftOutput= ruleBooleanSelectionClause ;
    // $ANTLR start "ruleBooleanStatement"
    ruleBooleanStatement: function() {
        this.currentRule = "ruleBooleanStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:1024:17: (selectionLeftOutput= ruleBooleanSelectionClause )
            // IDP.g:1024:33: selectionLeftOutput= ruleBooleanSelectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanStatement16328);
            this.ruleBooleanSelectionClause_DFAcall = false;

             if( typeof this.ruleBooleanStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleBooleanSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleBooleanSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleBooleanSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanStatement";
        }
        return retval;
    },

    // inline static return class
    ruleNullSelectionClause_return: (function() {
        IDPParser.ruleNullSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNullSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1028:1: ruleNullSelectionClause returns [value] : (nullSelectionOutput= ruleNullSimpleSelection ) ;
    // $ANTLR start "ruleNullSelectionClause"
    ruleNullSelectionClause: function() {
        this.currentRule = "ruleNullSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNullSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var nullSelectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1031:17: ( (nullSelectionOutput= ruleNullSimpleSelection ) )
            // IDP.g:1031:33: (nullSelectionOutput= ruleNullSimpleSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1031:33: (nullSelectionOutput= ruleNullSimpleSelection )
            // IDP.g:1031:34: nullSelectionOutput= ruleNullSimpleSelection
            this.pushFollow(IDPParser.FOLLOW_ruleNullSimpleSelection_in_ruleNullSelectionClause16529);
            this.ruleNullSimpleSelection_DFAcall = false;

             if( typeof this.ruleNullSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNullSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNullSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                nullSelectionOutput=this.ruleNullSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNullSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	nullSelectionOutput=this.ruleNullSimpleSelection();

            	}
            	}
            else{
                nullSelectionOutput=this.ruleNullSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, nullSelectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((nullSelectionOutput!==null?nullSelectionOutput.value:null)); 
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNullSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleNullSimpleSelection_return: (function() {
        IDPParser.ruleNullSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNullSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1033:1: ruleNullSimpleSelection returns [value] : nullVal= ( NULL ) ;
    // $ANTLR start "ruleNullSimpleSelection"
    ruleNullSimpleSelection: function() {
        this.currentRule = "ruleNullSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNullSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var nullVal = null;
        var NULL85 = null;

        var nullVal_tree=null;
        var NULL85_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker; simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.NULL.string;
        try {
            // IDP.g:1036:9: (nullVal= ( NULL ) )
            // IDP.g:1036:17: nullVal= ( NULL )
            root_0 = this.adaptor.nil();

            // IDP.g:1036:27: ( NULL )
            // IDP.g:1036:28: NULL


            this.pushNextTokens(NULL,NULL,1);
            NULL85=this.match(this.input,NULL,IDPParser.FOLLOW_NULL_in_ruleNullSimpleSelection16643); if (this.state.failed) return retval;
            if( NULL !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            NULL85_tree = this.adaptor.create(NULL85);
            this.adaptor.addChild(root_0, NULL85_tree);
            }



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              simpleSelectiontOutput.value = (nullVal?nullVal.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNullSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSelection_return: (function() {
        IDPParser.ruleBooleanSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1038:1: ruleBooleanSelection returns [value] : ( CURRENT )? (navigationOutput= TYPEBOOLEAN ) ;
    // $ANTLR start "ruleBooleanSelection"
    ruleBooleanSelection: function() {
        this.currentRule = "ruleBooleanSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT86 = null;

        var navigationOutput_tree=null;
        var CURRENT86_tree=null;

        var selectionOutput = {}; selectionOutput.isCurrent = false;
        try {
            // IDP.g:1041:17: ( ( CURRENT )? (navigationOutput= TYPEBOOLEAN ) )
            // IDP.g:1041:33: ( CURRENT )? (navigationOutput= TYPEBOOLEAN )
            root_0 = this.adaptor.nil();

            // IDP.g:1041:33: ( CURRENT )?
            var alt53=2;

            var LA53_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA53_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA53_0==CURRENT )) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // IDP.g:1041:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT86=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleBooleanSelection16765); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT86_tree = this.adaptor.create(CURRENT86);
                    this.adaptor.addChild(root_0, CURRENT86_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA53 !== undefined && this.failedPredictDFA53)
            { 
                throw null;
            }*/

            // IDP.g:1041:80: (navigationOutput= TYPEBOOLEAN )
            // IDP.g:1041:81: navigationOutput= TYPEBOOLEAN


            this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1);
            navigationOutput=this.match(this.input,TYPEBOOLEAN,IDPParser.FOLLOW_TYPEBOOLEAN_in_ruleBooleanSelection16776); if (this.state.failed) return retval;
            if( TYPEBOOLEAN !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanCollectionContext_return: (function() {
        IDPParser.ruleBooleanCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1044:1: ruleBooleanCollectionContext returns [value] : navigationOutput= TYPEBOOLEANCOLLECTION ;
    // $ANTLR start "ruleBooleanCollectionContext"
    ruleBooleanCollectionContext: function() {
        this.currentRule = "ruleBooleanCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1045:25: (navigationOutput= TYPEBOOLEANCOLLECTION )
            // IDP.g:1045:49: navigationOutput= TYPEBOOLEANCOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,1);
            navigationOutput=this.match(this.input,TYPEBOOLEANCOLLECTION,IDPParser.FOLLOW_TYPEBOOLEANCOLLECTION_in_ruleBooleanCollectionContext16896); if (this.state.failed) return retval;
            if( TYPEBOOLEANCOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleBooleanContext_return: (function() {
        IDPParser.ruleBooleanContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1052:1: ruleBooleanContext returns [value] : navigationOutput= TYPEBOOLEAN ;
    // $ANTLR start "ruleBooleanContext"
    ruleBooleanContext: function() {
        this.currentRule = "ruleBooleanContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1053:25: (navigationOutput= TYPEBOOLEAN )
            // IDP.g:1053:49: navigationOutput= TYPEBOOLEAN
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1);
            navigationOutput=this.match(this.input,TYPEBOOLEAN,IDPParser.FOLLOW_TYPEBOOLEAN_in_ruleBooleanContext17023); if (this.state.failed) return retval;
            if( TYPEBOOLEAN !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleBooleanAliasDTCollectionContext_return: (function() {
        IDPParser.ruleBooleanAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1061:1: ruleBooleanAliasDTCollectionContext returns [value] : navigationOutput= TYPEBOOLEANDT ;
    // $ANTLR start "ruleBooleanAliasDTCollectionContext"
    ruleBooleanAliasDTCollectionContext: function() {
        this.currentRule = "ruleBooleanAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1062:25: (navigationOutput= TYPEBOOLEANDT )
            // IDP.g:1062:49: navigationOutput= TYPEBOOLEANDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEBOOLEANDT,TYPEBOOLEANDT,1);
            navigationOutput=this.match(this.input,TYPEBOOLEANDT,IDPParser.FOLLOW_TYPEBOOLEANDT_in_ruleBooleanAliasDTCollectionContext17144); if (this.state.failed) return retval;
            if( TYPEBOOLEANDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleBooleanCollection_return: (function() {
        IDPParser.ruleBooleanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1069:1: ruleBooleanCollection returns [value] : ( ( ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleBooleanAliasDTCollectionContext ) );
    // $ANTLR start "ruleBooleanCollection"
    ruleBooleanCollection: function() {
        this.currentRule = "ruleBooleanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT87 = null;
        var OF88 = null;
        var CURRENT89 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;
         var navigationOutputDT = null;

        var CURRENT87_tree=null;
        var OF88_tree=null;
        var CURRENT89_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:1080:17: ( ( ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleBooleanAliasDTCollectionContext ) )
            var alt61=2;
            var LA61_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,1) && LA61_0>=CURRENT && LA61_0<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA61_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA61_0>=ZERO_OR_ONE && LA61_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA61_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,1) && LA61_0>=CURRENT && LA61_0<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA61_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA61_0>=ZERO_OR_ONE && LA61_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA61_0==INT )) ) {
                alt61=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEANDT,TYPEBOOLEANDT,1) && LA61_0==TYPEBOOLEANDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEANDT,TYPEBOOLEANDT,1) && LA61_0==TYPEBOOLEANDT )) ) {
                alt61=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_61_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 61, 0, this.input);

                nvae_61_0.c = this.input.LA(1);
                throw nvae_61_0;
            }
            switch (alt61) {
                case 1 :
                    // IDP.g:1080:33: ( ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) ) (flt= filterClause )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1080:33: ( ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) ) (flt= filterClause )? )
                    // IDP.g:1080:34: ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) ) (flt= filterClause )?
                    // IDP.g:1080:34: ( ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) )
                    var alt59=3;

                    	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
                    case CURRENT:
                    case TYPEBOOLEANCOLLECTION:
                        alt59=1;   
                        break;
                    case ZERO_OR_ONE:
                    case TYPENUMBERPARAMETER:
                    case INT:
                        alt59=2;   
                        break;
                    case ALL:
                        alt59=3;   
                        break;
                    default:
                    this.pushApplyTokens([CURRENT,TYPEBOOLEANCOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
                    	//this.pushApplyTokens();
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_59 =
                    			new org.antlr.runtime.NoViableAltException(null, 59, 0, this.input);

                        nvae_59.c = this.input.LA(1);
                        throw nvae_59;
                    }

                    switch (alt59) {
                        case 1 :
                            // IDP.g:1081:49: ( CURRENT )? (navigationOutput= ruleBooleanCollectionContext )
                            // IDP.g:1081:49: ( CURRENT )?
                            var alt54=2;

                            var LA54_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA54_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA54_0==CURRENT )) ) {
                                alt54=1;
                            }
                            switch (alt54) {
                                case 1 :
                                    // IDP.g:1081:50: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT87=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleBooleanCollection17388); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT87_tree = this.adaptor.create(CURRENT87);
                                    this.adaptor.addChild(root_0, CURRENT87_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA54 !== undefined && this.failedPredictDFA54)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1081:96: (navigationOutput= ruleBooleanCollectionContext )
                            // IDP.g:1081:97: navigationOutput= ruleBooleanCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17399);
                            this.ruleBooleanCollectionContext_DFAcall = false;

                             if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleBooleanCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleBooleanCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleBooleanCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;
                        case 2 :
                            // IDP.g:1082:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1082:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1082:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) ) (order= ruleSortingOptions )
                            // IDP.g:1082:34: (quantity= ruleInteger )
                            // IDP.g:1082:35: quantity= ruleInteger
                            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleBooleanCollection17445);
                            this.ruleInteger_DFAcall = false;

                             if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                quantity=this.ruleInteger();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	quantity=this.ruleInteger();

                            	}
                            	}
                            else{
                                quantity=this.ruleInteger();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                            }



                            // IDP.g:1082:113: ( OF rall= ruleAll )?
                            var alt55=2;

                            var LA55_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA55_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA55_0==OF )) ) {
                                alt55=1;
                            }
                            switch (alt55) {
                                case 1 :
                                    // IDP.g:1082:114: OF rall= ruleAll


                                    this.pushNextTokens(OF,OF,1);
                                    OF88=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleBooleanCollection17451); if (this.state.failed) return retval;
                                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    OF88_tree = this.adaptor.create(OF88);
                                    this.adaptor.addChild(root_0, OF88_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleBooleanCollection17457);
                                    this.ruleAll_DFAcall = false;

                                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA55 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        rall=this.ruleAll();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	rall=this.ruleAll();

                                    	}
                                    	}
                                    else{
                                        rall=this.ruleAll();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA55 !== undefined && this.failedPredictDFA55)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1082:221: ( CURRENT )?
                            var alt56=2;

                            var LA56_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA56_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA56_0==CURRENT )) ) {
                                alt56=1;
                            }
                            switch (alt56) {
                                case 1 :
                                    // IDP.g:1082:222: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT89=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleBooleanCollection17465); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT89_tree = this.adaptor.create(CURRENT89);
                                    this.adaptor.addChild(root_0, CURRENT89_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA56 !== undefined && this.failedPredictDFA56)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1082:268: ( (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) )
                            // IDP.g:1082:269: (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext )
                            // IDP.g:1082:269: (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext )
                            var alt57=2;

                            var LA57_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA57_0==TYPEBOOLEAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA57_0==TYPEBOOLEAN )) ) {
                                alt57=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,1) && LA57_0==TYPEBOOLEANCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,1) && LA57_0==TYPEBOOLEANCOLLECTION )) ) {
                                alt57=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_57_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 57, 0, this.input);

                                nvae_57_0.c = this.input.LA(1);
                                throw nvae_57_0;
                            }
                            switch (alt57) {
                                case 1 :
                                    // IDP.g:1082:270: navigationOutput= ruleBooleanContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanContext_in_ruleBooleanCollection17477);
                                    this.ruleBooleanContext_DFAcall = false;

                                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA57 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleBooleanContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleBooleanContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleBooleanContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1082:310: navigationOutput= ruleBooleanCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17485);
                                    this.ruleBooleanCollectionContext_DFAcall = false;

                                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA57 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleBooleanCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleBooleanCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleBooleanCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA57 !== undefined && this.failedPredictDFA57)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }



                            // IDP.g:1083:61: (order= ruleSortingOptions )
                            // IDP.g:1083:62: order= ruleSortingOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleBooleanCollection17557);
                            this.ruleSortingOptions_DFAcall = false;

                             if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                order=this.ruleSortingOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	order=this.ruleSortingOptions();

                            	}
                            	}
                            else{
                                order=this.ruleSortingOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                            }



                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                            }





                            break;
                        case 3 :
                            // IDP.g:1084:49: ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) )
                            // IDP.g:1084:49: ( (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext ) )
                            // IDP.g:1084:50: (rall= ruleAll ) (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext )
                            // IDP.g:1084:50: (rall= ruleAll )
                            // IDP.g:1084:51: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleBooleanCollection17621);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                            }



                            // IDP.g:1084:126: (navigationOutput= ruleBooleanContext | navigationOutput= ruleBooleanCollectionContext )
                            var alt58=2;

                            var LA58_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA58_0==TYPEBOOLEAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA58_0==TYPEBOOLEAN )) ) {
                                alt58=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,1) && LA58_0==TYPEBOOLEANCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,1) && LA58_0==TYPEBOOLEANCOLLECTION )) ) {
                                alt58=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_58_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 58, 0, this.input);

                                nvae_58_0.c = this.input.LA(1);
                                throw nvae_58_0;
                            }
                            switch (alt58) {
                                case 1 :
                                    // IDP.g:1084:127: navigationOutput= ruleBooleanContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanContext_in_ruleBooleanCollection17631);
                                    this.ruleBooleanContext_DFAcall = false;

                                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA58 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleBooleanContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleBooleanContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleBooleanContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1084:167: navigationOutput= ruleBooleanCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17639);
                                    this.ruleBooleanCollectionContext_DFAcall = false;

                                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA58 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleBooleanCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleBooleanCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleBooleanCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA58 !== undefined && this.failedPredictDFA58)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA59 !== undefined && this.failedPredictDFA59)
                    { 
                        throw null;
                    }*/

                    // IDP.g:1087:33: (flt= filterClause )?
                    var alt60=2;

                    var LA60_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA60_0>=WHERE && LA60_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA60_0>=WHERE && LA60_0<=FILTER_BY )) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // IDP.g:1087:34: flt= filterClause
                            this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleBooleanCollection17783);
                            this.filterClause_DFAcall = false;

                             if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA60 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                flt=this.filterClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	flt=this.filterClause();

                            	}
                            	}
                            else{
                                flt=this.filterClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.filterClause = (flt!==null?flt.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA60 !== undefined && this.failedPredictDFA60)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1088:35: (navigationOutputDT= ruleBooleanAliasDTCollectionContext )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1088:35: (navigationOutputDT= ruleBooleanAliasDTCollectionContext )
                    // IDP.g:1088:36: navigationOutputDT= ruleBooleanAliasDTCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanAliasDTCollectionContext_in_ruleBooleanCollection17830);
                    this.ruleBooleanAliasDTCollectionContext_DFAcall = false;

                     if( typeof this.ruleBooleanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutputDT=this.ruleBooleanAliasDTCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutputDT=this.ruleBooleanAliasDTCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutputDT=this.ruleBooleanAliasDTCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanCollection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanCompoundSelection_return: (function() {
        IDPParser.ruleBooleanCompoundSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanCompoundSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1093:1: ruleBooleanCompoundSelection returns [value] : selectionOutput= ruleBooleanSelection ;
    // $ANTLR start "ruleBooleanCompoundSelection"
    ruleBooleanCompoundSelection: function() {
        this.currentRule = "ruleBooleanCompoundSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanCompoundSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:1096:17: (selectionOutput= ruleBooleanSelection )
            // IDP.g:1096:33: selectionOutput= ruleBooleanSelection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelection_in_ruleBooleanCompoundSelection17992);
            this.ruleBooleanSelection_DFAcall = false;

             if( typeof this.ruleBooleanCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCompoundSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanCompoundSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleBooleanSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCompoundSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleBooleanSelection();

            	}
            	}
            else{
                selectionOutput=this.ruleBooleanSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               compoundSelectionOutput.selection = (selectionOutput!==null?selectionOutput.value:null); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.string;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanCompoundSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanCollectionSelectionClause_return: (function() {
        IDPParser.ruleBooleanCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1099:1: ruleBooleanCollectionSelectionClause returns [value] : ( (boolSelectionOutput= ruleBooleanCollection ) ) ;
    // $ANTLR start "ruleBooleanCollectionSelectionClause"
    ruleBooleanCollectionSelectionClause: function() {
        this.currentRule = "ruleBooleanCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var boolSelectionOutput = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;   var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1102:17: ( ( (boolSelectionOutput= ruleBooleanCollection ) ) )
            // IDP.g:1102:33: ( (boolSelectionOutput= ruleBooleanCollection ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1102:33: ( (boolSelectionOutput= ruleBooleanCollection ) )
            // IDP.g:1102:34: (boolSelectionOutput= ruleBooleanCollection )
            // IDP.g:1102:34: (boolSelectionOutput= ruleBooleanCollection )
            // IDP.g:1102:35: boolSelectionOutput= ruleBooleanCollection
            this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollection_in_ruleBooleanCollectionSelectionClause18139);
            this.ruleBooleanCollection_DFAcall = false;

             if( typeof this.ruleBooleanCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                boolSelectionOutput=this.ruleBooleanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	boolSelectionOutput=this.ruleBooleanCollection();

            	}
            	}
            else{
                boolSelectionOutput=this.ruleBooleanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleBooleanOnlySimpleSelectionClause_return: (function() {
        IDPParser.ruleBooleanOnlySimpleSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanOnlySimpleSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1108:1: ruleBooleanOnlySimpleSelectionClause returns [value] : (boolSelectionOutput= ruleBooleanSimpleSelection ) ;
    // $ANTLR start "ruleBooleanOnlySimpleSelectionClause"
    ruleBooleanOnlySimpleSelectionClause: function() {
        this.currentRule = "ruleBooleanOnlySimpleSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanOnlySimpleSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var boolSelectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1111:17: ( (boolSelectionOutput= ruleBooleanSimpleSelection ) )
            // IDP.g:1111:33: (boolSelectionOutput= ruleBooleanSimpleSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1111:33: (boolSelectionOutput= ruleBooleanSimpleSelection )
            // IDP.g:1111:34: boolSelectionOutput= ruleBooleanSimpleSelection
            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSimpleSelection_in_ruleBooleanOnlySimpleSelectionClause18275);
            this.ruleBooleanSimpleSelection_DFAcall = false;

             if( typeof this.ruleBooleanOnlySimpleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanOnlySimpleSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanOnlySimpleSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                boolSelectionOutput=this.ruleBooleanSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanOnlySimpleSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	boolSelectionOutput=this.ruleBooleanSimpleSelection();

            	}
            	}
            else{
                boolSelectionOutput=this.ruleBooleanSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanOnlySimpleSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSelectionClause_return: (function() {
        IDPParser.ruleBooleanSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1113:1: ruleBooleanSelectionClause returns [value] : (boolSelectionOutput= ruleBooleanSimpleSelection | boolSelectionOutput= ruleBooleanCompoundSelection ) ;
    // $ANTLR start "ruleBooleanSelectionClause"
    ruleBooleanSelectionClause: function() {
        this.currentRule = "ruleBooleanSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var boolSelectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1116:17: ( (boolSelectionOutput= ruleBooleanSimpleSelection | boolSelectionOutput= ruleBooleanCompoundSelection ) )
            // IDP.g:1116:33: (boolSelectionOutput= ruleBooleanSimpleSelection | boolSelectionOutput= ruleBooleanCompoundSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1116:33: (boolSelectionOutput= ruleBooleanSimpleSelection | boolSelectionOutput= ruleBooleanCompoundSelection )
            var alt62=2;

            var LA62_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA62_0>=TRUE && LA62_0<=TYPEBOOLEANPARAMETER )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA62_0>=TRUE && LA62_0<=TYPEBOOLEANPARAMETER )) ) {
                alt62=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA62_0==TYPEBOOLEAN )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA62_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA62_0==TYPEBOOLEAN )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA62_0==CURRENT )) ) {
                alt62=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_62_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 62, 0, this.input);

                nvae_62_0.c = this.input.LA(1);
                throw nvae_62_0;
            }
            switch (alt62) {
                case 1 :
                    // IDP.g:1116:34: boolSelectionOutput= ruleBooleanSimpleSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSimpleSelection_in_ruleBooleanSelectionClause18403);
                    this.ruleBooleanSimpleSelection_DFAcall = false;

                     if( typeof this.ruleBooleanSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA62 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        boolSelectionOutput=this.ruleBooleanSimpleSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	boolSelectionOutput=this.ruleBooleanSimpleSelection();

                    	}
                    	}
                    else{
                        boolSelectionOutput=this.ruleBooleanSimpleSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
                    }


                    break;
                case 2 :
                    // IDP.g:1117:20: boolSelectionOutput= ruleBooleanCompoundSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanCompoundSelection_in_ruleBooleanSelectionClause18432);
                    this.ruleBooleanCompoundSelection_DFAcall = false;

                     if( typeof this.ruleBooleanSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA62 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        boolSelectionOutput=this.ruleBooleanCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	boolSelectionOutput=this.ruleBooleanCompoundSelection();

                    	}
                    	}
                    else{
                        boolSelectionOutput=this.ruleBooleanCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
                    }


                    break;

            }
            /*if(this.failedPredictDFA62 !== undefined && this.failedPredictDFA62)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanAdvancedFunction_return: (function() {
        IDPParser.ruleBooleanAdvancedFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanAdvancedFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1119:1: ruleBooleanAdvancedFunction returns [value] : ( (boolSelectionOutput= ruleStringContainFuzzyFunction ) | (boolSelectionOutput= ruleStringNotContainFuzzyFunction ) );
    // $ANTLR start "ruleBooleanAdvancedFunction"
    ruleBooleanAdvancedFunction: function() {
        this.currentRule = "ruleBooleanAdvancedFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanAdvancedFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var boolSelectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1122:17: ( (boolSelectionOutput= ruleStringContainFuzzyFunction ) | (boolSelectionOutput= ruleStringNotContainFuzzyFunction ) )
            var alt63=2;
            var LA63_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA63_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA63_0==TYPESTRING )) ) {
                var LA63_1 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CONTAINS,CONTAINS,2) && LA63_1==CONTAINS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CONTAINS,CONTAINS,2) && LA63_1==CONTAINS )) ) {
                    alt63=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,2) && LA63_1==DOES_NOT_CONTAIN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,2) && LA63_1==DOES_NOT_CONTAIN )) ) {
                    alt63=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_63_1 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 63, 1, this.input);

                    nvae_63_1.c = this.input.LA(2);
                    throw nvae_63_1;
                }
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_63_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 63, 0, this.input);

                nvae_63_0.c = this.input.LA(1);
                throw nvae_63_0;
            }
            switch (alt63) {
                case 1 :
                    // IDP.g:1122:33: (boolSelectionOutput= ruleStringContainFuzzyFunction )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1122:33: (boolSelectionOutput= ruleStringContainFuzzyFunction )
                    // IDP.g:1122:34: boolSelectionOutput= ruleStringContainFuzzyFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleStringContainFuzzyFunction_in_ruleBooleanAdvancedFunction18560);
                    this.ruleStringContainFuzzyFunction_DFAcall = false;

                     if( typeof this.ruleBooleanAdvancedFunctionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanAdvancedFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanAdvancedFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        boolSelectionOutput=this.ruleStringContainFuzzyFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanAdvancedFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	boolSelectionOutput=this.ruleStringContainFuzzyFunction();

                    	}
                    	}
                    else{
                        boolSelectionOutput=this.ruleStringContainFuzzyFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
                    }





                    break;
                case 2 :
                    // IDP.g:1123:19: (boolSelectionOutput= ruleStringNotContainFuzzyFunction )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1123:19: (boolSelectionOutput= ruleStringNotContainFuzzyFunction )
                    // IDP.g:1123:20: boolSelectionOutput= ruleStringNotContainFuzzyFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleStringNotContainFuzzyFunction_in_ruleBooleanAdvancedFunction18591);
                    this.ruleStringNotContainFuzzyFunction_DFAcall = false;

                     if( typeof this.ruleBooleanAdvancedFunctionCurrentDecisionNumber !== 'undefined' && this.ruleBooleanAdvancedFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanAdvancedFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        boolSelectionOutput=this.ruleStringNotContainFuzzyFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanAdvancedFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	boolSelectionOutput=this.ruleStringNotContainFuzzyFunction();

                    	}
                    	}
                    else{
                        boolSelectionOutput=this.ruleStringNotContainFuzzyFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((boolSelectionOutput!==null?boolSelectionOutput.value:null)); 
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanAdvancedFunction";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSingleSelectionStatement_return: (function() {
        IDPParser.ruleBooleanSingleSelectionStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSingleSelectionStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1125:1: ruleBooleanSingleSelectionStatement returns [value] : (selectionLeftOutput= ruleBooleanSelectionClause | selectionLeftOutput= ruleBooleanAdvancedFunction ) ;
    // $ANTLR start "ruleBooleanSingleSelectionStatement"
    ruleBooleanSingleSelectionStatement: function() {
        this.currentRule = "ruleBooleanSingleSelectionStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSingleSelectionStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


         var singleStatementOutput = {}; 
        try {
            // IDP.g:1129:17: ( (selectionLeftOutput= ruleBooleanSelectionClause | selectionLeftOutput= ruleBooleanAdvancedFunction ) )
            // IDP.g:1129:33: (selectionLeftOutput= ruleBooleanSelectionClause | selectionLeftOutput= ruleBooleanAdvancedFunction )
            root_0 = this.adaptor.nil();

            // IDP.g:1129:33: (selectionLeftOutput= ruleBooleanSelectionClause | selectionLeftOutput= ruleBooleanAdvancedFunction )
            var alt64=2;

            var LA64_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA64_0==TYPEBOOLEAN )||(  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA64_0>=TRUE && LA64_0<=TYPEBOOLEANPARAMETER )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA64_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,1) && LA64_0==TYPEBOOLEAN )||(  this.pushNextTokens(TRUE,TYPEBOOLEANPARAMETER,1) && LA64_0>=TRUE && LA64_0<=TYPEBOOLEANPARAMETER )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA64_0==CURRENT )) ) {
                alt64=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA64_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA64_0==TYPESTRING )) ) {
                alt64=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_64_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 64, 0, this.input);

                nvae_64_0.c = this.input.LA(1);
                throw nvae_64_0;
            }
            switch (alt64) {
                case 1 :
                    // IDP.g:1129:34: selectionLeftOutput= ruleBooleanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleSelectionStatement18720);
                    this.ruleBooleanSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA64 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionLeftOutput=this.ruleBooleanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionLeftOutput=this.ruleBooleanSelectionClause();

                    	}
                    	}
                    else{
                        selectionLeftOutput=this.ruleBooleanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:1130:20: selectionLeftOutput= ruleBooleanAdvancedFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanAdvancedFunction_in_ruleBooleanSingleSelectionStatement18748);
                    this.ruleBooleanAdvancedFunction_DFAcall = false;

                     if( typeof this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA64 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionLeftOutput=this.ruleBooleanAdvancedFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleSelectionStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionLeftOutput=this.ruleBooleanAdvancedFunction();

                    	}
                    	}
                    else{
                        selectionLeftOutput=this.ruleBooleanAdvancedFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA64 !== undefined && this.failedPredictDFA64)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput); 
                                                   retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSingleSelectionStatement";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSingleStatement_return: (function() {
        IDPParser.ruleBooleanSingleStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSingleStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1132:1: ruleBooleanSingleStatement returns [value] : (selectionLeftOutput= ruleBooleanSelectionClause ) ( (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause ) | (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues ) ) ;
    // $ANTLR start "ruleBooleanSingleStatement"
    ruleBooleanSingleStatement: function() {
        this.currentRule = "ruleBooleanSingleStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSingleStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;
         var comparisonOutput = null;
         var rightSelectionOutput = null;


        var hasRightSide = false; var singleStatementOutput = {}; 
        try {
            // IDP.g:1139:17: ( (selectionLeftOutput= ruleBooleanSelectionClause ) ( (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause ) | (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues ) ) )
            // IDP.g:1139:33: (selectionLeftOutput= ruleBooleanSelectionClause ) ( (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause ) | (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1139:33: (selectionLeftOutput= ruleBooleanSelectionClause )
            // IDP.g:1139:34: selectionLeftOutput= ruleBooleanSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleStatement18878);
            this.ruleBooleanSelectionClause_DFAcall = false;

             if( typeof this.ruleBooleanSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanSingleStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleBooleanSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleBooleanSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleBooleanSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            // IDP.g:1140:61: ( (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause ) | (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues ) )
            var alt65=2;

            var LA65_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA65_0>=EQ_SIGN && LA65_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA65_0>=NOT_EQUAL_SIGN && LA65_0<=EQUALS )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA65_0>=EQ_SIGN && LA65_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA65_0>=NOT_EQUAL_SIGN && LA65_0<=EQUALS )) ) {
                alt65=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EXISTS_IN,DOES_NOT_EXISTS_IN,1) && LA65_0>=EXISTS_IN && LA65_0<=DOES_NOT_EXISTS_IN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EXISTS_IN,DOES_NOT_EXISTS_IN,1) && LA65_0>=EXISTS_IN && LA65_0<=DOES_NOT_EXISTS_IN )) ) {
                alt65=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_65_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 65, 0, this.input);

                nvae_65_0.c = this.input.LA(1);
                throw nvae_65_0;
            }
            switch (alt65) {
                case 1 :
                    // IDP.g:1140:62: (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause )
                    // IDP.g:1140:62: (comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause )
                    // IDP.g:1140:63: comparisonOutput= ruleBooleanComparisonOperator rightSelectionOutput= ruleBooleanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanComparisonOperator_in_ruleBooleanSingleStatement18951);
                    this.ruleBooleanComparisonOperator_DFAcall = false;

                     if( typeof this.ruleBooleanSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleBooleanComparisonOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleBooleanComparisonOperator();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleBooleanComparisonOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleStatement18960);
                    this.ruleBooleanSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleBooleanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleBooleanSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleBooleanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:1141:62: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues )
                    // IDP.g:1141:62: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues )
                    // IDP.g:1141:64: comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleBooleanSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleBooleanSingleStatement19039);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleBooleanSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSetOfValues_in_ruleBooleanSingleStatement19047);
                    this.ruleBooleanSetOfValues_DFAcall = false;

                     if( typeof this.ruleBooleanSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSingleStatementCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSingleStatementCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleBooleanSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSingleStatementCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleBooleanSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleBooleanSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      hasRightSide = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA65 !== undefined && this.failedPredictDFA65)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere && hasRightSide) {
                                                              singleStatement.validateAmbiguity((selectionLeftOutput?this.input.toString(selectionLeftOutput.start,selectionLeftOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSingleStatement";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanBetweenClause_return: (function() {
        IDPParser.ruleBooleanBetweenClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanBetweenClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1146:1: ruleBooleanBetweenClause returns [value] : ( ( (dateOutput= ruleBooleanSelectionClause ) ) ( AND | TO ) ( (dateOutput= ruleBooleanSelectionClause ) ) ) ;
    // $ANTLR start "ruleBooleanBetweenClause"
    ruleBooleanBetweenClause: function() {
        this.currentRule = "ruleBooleanBetweenClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanBetweenClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set90 = null;
         var dateOutput = null;

        var set90_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value);
                                        
        try {
            // IDP.g:1150:9: ( ( ( (dateOutput= ruleBooleanSelectionClause ) ) ( AND | TO ) ( (dateOutput= ruleBooleanSelectionClause ) ) ) )
            // IDP.g:1150:17: ( ( (dateOutput= ruleBooleanSelectionClause ) ) ( AND | TO ) ( (dateOutput= ruleBooleanSelectionClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1150:17: ( ( (dateOutput= ruleBooleanSelectionClause ) ) ( AND | TO ) ( (dateOutput= ruleBooleanSelectionClause ) ) )
            // IDP.g:1150:19: ( (dateOutput= ruleBooleanSelectionClause ) ) ( AND | TO ) ( (dateOutput= ruleBooleanSelectionClause ) )
            // IDP.g:1150:19: ( (dateOutput= ruleBooleanSelectionClause ) )
            // IDP.g:1150:20: (dateOutput= ruleBooleanSelectionClause )
            // IDP.g:1150:20: (dateOutput= ruleBooleanSelectionClause )
            // IDP.g:1150:21: dateOutput= ruleBooleanSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanBetweenClause19298);
            this.ruleBooleanSelectionClause_DFAcall = false;

             if( typeof this.ruleBooleanBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleBooleanSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleBooleanSelectionClause();

            	}
            	}
            else{
                dateOutput=this.ruleBooleanSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }



            set90=this.input.LT(1);
            if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set90));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_set90_19305 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_set90_19305;
            }

            // IDP.g:1151:17: ( (dateOutput= ruleBooleanSelectionClause ) )
            // IDP.g:1151:19: (dateOutput= ruleBooleanSelectionClause )
            // IDP.g:1151:19: (dateOutput= ruleBooleanSelectionClause )
            // IDP.g:1151:20: dateOutput= ruleBooleanSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanBetweenClause19336);
            this.ruleBooleanSelectionClause_DFAcall = false;

             if( typeof this.ruleBooleanBetweenClauseCurrentDecisionNumber !== 'undefined' && this.ruleBooleanBetweenClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBooleanBetweenClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                dateOutput=this.ruleBooleanSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanBetweenClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	dateOutput=this.ruleBooleanSelectionClause();

            	}
            	}
            else{
                dateOutput=this.ruleBooleanSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((dateOutput!==null?dateOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanBetweenClause";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanSetOfValues_return: (function() {
        IDPParser.ruleBooleanSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1154:1: ruleBooleanSetOfValues returns [value] : LROUNDB ( ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? ) | (dateOutput= ruleBooleanCollectionSelectionClause ) ) RROUNDB ;
    // $ANTLR start "ruleBooleanSetOfValues"
    ruleBooleanSetOfValues: function() {
        this.currentRule = "ruleBooleanSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB91 = null;
        var SEMICOLON92 = null;
        var RROUNDB93 = null;
         var boolOutput = null;
         var dateOutput = null;

        var LROUNDB91_tree=null;
        var SEMICOLON92_tree=null;
        var RROUNDB93_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.BOOLEAN.value);
                                        
        try {
            // IDP.g:1158:9: ( LROUNDB ( ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? ) | (dateOutput= ruleBooleanCollectionSelectionClause ) ) RROUNDB )
            // IDP.g:1158:18: LROUNDB ( ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? ) | (dateOutput= ruleBooleanCollectionSelectionClause ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB91=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleBooleanSetOfValues19525); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB91_tree = this.adaptor.create(LROUNDB91);
            this.adaptor.addChild(root_0, LROUNDB91_tree);
            }
            // IDP.g:1158:26: ( ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? ) | (dateOutput= ruleBooleanCollectionSelectionClause ) )
            var alt68=2;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TYPEBOOLEAN:
            case TRUE:
            case FALSE:
            case TYPEBOOLEANPARAMETER:
                alt68=1;   
                break;
            case CURRENT:
                var LA68_2 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,2) && LA68_2==TYPEBOOLEAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,2) && LA68_2==TYPEBOOLEAN )) ) {
                    alt68=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,2) && LA68_2==TYPEBOOLEANCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,2) && LA68_2==TYPEBOOLEANCOLLECTION )) ) {
                    alt68=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_68_2 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 68, 2, this.input);

                    nvae_68_2.c = this.input.LA(2);
                    throw nvae_68_2;
                }   
                break;
            case TYPEBOOLEANCOLLECTION:
            case TYPEBOOLEANDT:
            case ALL:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt68=2;   
                break;
            default:
            this.pushApplyTokens([TYPEBOOLEAN,TRUE,FALSE,TYPEBOOLEANPARAMETER,CURRENT,TYPEBOOLEANCOLLECTION,TYPEBOOLEANDT,ALL,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_68 =
            			new org.antlr.runtime.NoViableAltException(null, 68, 0, this.input);

                nvae_68.c = this.input.LA(1);
                throw nvae_68;
            }

            switch (alt68) {
                case 1 :
                    // IDP.g:1158:27: ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? )
                    // IDP.g:1158:27: ( (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )? )
                    // IDP.g:1158:28: (boolOutput= ruleBooleanSelectionClause ) ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )?
                    // IDP.g:1158:28: (boolOutput= ruleBooleanSelectionClause )
                    // IDP.g:1158:29: boolOutput= ruleBooleanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSetOfValues19534);
                    this.ruleBooleanSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        boolOutput=this.ruleBooleanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	boolOutput=this.ruleBooleanSelectionClause();

                    	}
                    	}
                    else{
                        boolOutput=this.ruleBooleanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((boolOutput!==null?boolOutput.value:null));
                    }



                    // IDP.g:1159:17: ( ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+ )?
                    var alt67=2;

                    var LA67_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA67_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA67_0==SEMICOLON )) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // IDP.g:1159:18: ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+
                            // IDP.g:1159:18: ( SEMICOLON boolOutput= ruleBooleanSelectionClause )+
                            var cnt66=0;
                            loop66:
                            do {
                                var alt66=2;
                                var LA66_0 = this.input.LA(1);


                                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA66_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA66_0==SEMICOLON )) ) {
                                    alt66=1;
                                }


                                switch (alt66) {
                                case 1 :
                                    // IDP.g:1159:19: SEMICOLON boolOutput= ruleBooleanSelectionClause


                                    this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                                    SEMICOLON92=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleBooleanSetOfValues19560); if (this.state.failed) return retval;
                                    if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    SEMICOLON92_tree = this.adaptor.create(SEMICOLON92);
                                    this.adaptor.addChild(root_0, SEMICOLON92_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSetOfValues19566);
                                    this.ruleBooleanSelectionClause_DFAcall = false;

                                     if( typeof this.ruleBooleanSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSetOfValuesCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleBooleanSetOfValuesCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA66 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        boolOutput=this.ruleBooleanSelectionClause();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSetOfValuesCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	boolOutput=this.ruleBooleanSelectionClause();

                                    	}
                                    	}
                                    else{
                                        boolOutput=this.ruleBooleanSelectionClause();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, boolOutput.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      retval.value.push((boolOutput!==null?boolOutput.value:null));
                                    }


                                    break;

                                default :
                                    if ( cnt66 >= 1 ) {
                                        break loop66;
                                    }
                                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                        var eee_66 = new org.antlr.runtime.EarlyExitException(66, this.input);
                                        throw eee_66;
                                }
                                cnt66++;
                            } while (true);



                            break;

                    }
                    /*if(this.failedPredictDFA67 !== undefined && this.failedPredictDFA67)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1159:111: (dateOutput= ruleBooleanCollectionSelectionClause )
                    // IDP.g:1159:111: (dateOutput= ruleBooleanCollectionSelectionClause )
                    // IDP.g:1159:112: dateOutput= ruleBooleanCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollectionSelectionClause_in_ruleBooleanSetOfValues19583);
                    this.ruleBooleanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleBooleanSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleBooleanSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBooleanSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleBooleanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBooleanSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleBooleanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleBooleanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }


                    break;

            }
            /*if(this.failedPredictDFA68 !== undefined && this.failedPredictDFA68)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB93=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleBooleanSetOfValues19589); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB93_tree = this.adaptor.create(RROUNDB93);
            this.adaptor.addChild(root_0, RROUNDB93_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleBooleanComparisonOperator_return: (function() {
        IDPParser.ruleBooleanComparisonOperator_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBooleanComparisonOperator_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1162:1: ruleBooleanComparisonOperator returns [value] : ( (a= NOT_EQUAL_SIGN ) | (b= EQ_SIGN ) | (a= IS_EQUAL ) | (a= IS_NOT_EQUAL ) | (a= DOES_NOT_EQUAL ) | (a= NOT_EQUAL ) | (a= EQUALS ) );
    // $ANTLR start "ruleBooleanComparisonOperator"
    ruleBooleanComparisonOperator: function() {
        this.currentRule = "ruleBooleanComparisonOperator";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBooleanComparisonOperator_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;
        var b = null;

        var a_tree=null;
        var b_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1165:9: ( (a= NOT_EQUAL_SIGN ) | (b= EQ_SIGN ) | (a= IS_EQUAL ) | (a= IS_NOT_EQUAL ) | (a= DOES_NOT_EQUAL ) | (a= NOT_EQUAL ) | (a= EQUALS ) )
            var alt69=7;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case NOT_EQUAL_SIGN:
                alt69=1;   
                break;
            case EQ_SIGN:
                alt69=2;   
                break;
            case IS_EQUAL:
                alt69=3;   
                break;
            case IS_NOT_EQUAL:
                alt69=4;   
                break;
            case DOES_NOT_EQUAL:
                alt69=5;   
                break;
            case NOT_EQUAL:
                alt69=6;   
                break;
            case EQUALS:
                alt69=7;   
                break;
            default:
            this.pushApplyTokens([NOT_EQUAL_SIGN,EQ_SIGN,IS_EQUAL,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_69 =
            			new org.antlr.runtime.NoViableAltException(null, 69, 0, this.input);

                nvae_69.c = this.input.LA(1);
                throw nvae_69;
            }

            switch (alt69) {
                case 1 :
                    // IDP.g:1166:17: (a= NOT_EQUAL_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1166:17: (a= NOT_EQUAL_SIGN )
                    // IDP.g:1166:18: a= NOT_EQUAL_SIGN


                    this.pushNextTokens(NOT_EQUAL_SIGN,NOT_EQUAL_SIGN,1);
                    a=this.match(this.input,NOT_EQUAL_SIGN,IDPParser.FOLLOW_NOT_EQUAL_SIGN_in_ruleBooleanComparisonOperator19758); if (this.state.failed) return retval;
                    if( NOT_EQUAL_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal += '!=';
                    }





                    break;
                case 2 :
                    // IDP.g:1167:17: (b= EQ_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1167:17: (b= EQ_SIGN )
                    // IDP.g:1167:18: b= EQ_SIGN


                    this.pushNextTokens(EQ_SIGN,EQ_SIGN,1);
                    b=this.match(this.input,EQ_SIGN,IDPParser.FOLLOW_EQ_SIGN_in_ruleBooleanComparisonOperator19788); if (this.state.failed) return retval;
                    if( EQ_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    b_tree = this.adaptor.create(b);
                    this.adaptor.addChild(root_0, b_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (b?b.getText():null); fixedVal += '=';
                    }





                    break;
                case 3 :
                    // IDP.g:1168:17: (a= IS_EQUAL )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1168:17: (a= IS_EQUAL )
                    // IDP.g:1168:18: a= IS_EQUAL


                    this.pushNextTokens(IS_EQUAL,IS_EQUAL,1);
                    a=this.match(this.input,IS_EQUAL,IDPParser.FOLLOW_IS_EQUAL_in_ruleBooleanComparisonOperator19816); if (this.state.failed) return retval;
                    if( IS_EQUAL !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = '=';
                    }





                    break;
                case 4 :
                    // IDP.g:1169:17: (a= IS_NOT_EQUAL )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1169:17: (a= IS_NOT_EQUAL )
                    // IDP.g:1169:18: a= IS_NOT_EQUAL


                    this.pushNextTokens(IS_NOT_EQUAL,IS_NOT_EQUAL,1);
                    a=this.match(this.input,IS_NOT_EQUAL,IDPParser.FOLLOW_IS_NOT_EQUAL_in_ruleBooleanComparisonOperator19845); if (this.state.failed) return retval;
                    if( IS_NOT_EQUAL !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = '!=';
                    }





                    break;
                case 5 :
                    // IDP.g:1170:17: (a= DOES_NOT_EQUAL )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1170:17: (a= DOES_NOT_EQUAL )
                    // IDP.g:1170:18: a= DOES_NOT_EQUAL


                    this.pushNextTokens(DOES_NOT_EQUAL,DOES_NOT_EQUAL,1);
                    a=this.match(this.input,DOES_NOT_EQUAL,IDPParser.FOLLOW_DOES_NOT_EQUAL_in_ruleBooleanComparisonOperator19874); if (this.state.failed) return retval;
                    if( DOES_NOT_EQUAL !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = '!=';
                    }





                    break;
                case 6 :
                    // IDP.g:1171:17: (a= NOT_EQUAL )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1171:17: (a= NOT_EQUAL )
                    // IDP.g:1171:18: a= NOT_EQUAL


                    this.pushNextTokens(NOT_EQUAL,NOT_EQUAL,1);
                    a=this.match(this.input,NOT_EQUAL,IDPParser.FOLLOW_NOT_EQUAL_in_ruleBooleanComparisonOperator19903); if (this.state.failed) return retval;
                    if( NOT_EQUAL !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = '!=';
                    }





                    break;
                case 7 :
                    // IDP.g:1172:17: (a= EQUALS )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1172:17: (a= EQUALS )
                    // IDP.g:1172:18: a= EQUALS


                    this.pushNextTokens(EQUALS,EQUALS,1);
                    a=this.match(this.input,EQUALS,IDPParser.FOLLOW_EQUALS_in_ruleBooleanComparisonOperator19932); if (this.state.failed) return retval;
                    if( EQUALS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += '=';
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBooleanComparisonOperator";
        }
        return retval;
    },

    // inline static return class
    ruleCollectionSelection_return: (function() {
        IDPParser.ruleCollectionSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCollectionSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1192:1: ruleCollectionSelection returns [value] : (compoundSelectionOutput= ruleBooleanCollection | compoundSelectionOutput= ruleDateCollection | compoundSelectionOutput= ruleTimestampCollection | compoundSelectionOutput= ruleTimeCollection | compoundSelectionOutput= ruleStringCollection ) ;
    // $ANTLR start "ruleCollectionSelection"
    ruleCollectionSelection: function() {
        this.currentRule = "ruleCollectionSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCollectionSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:1193:17: ( (compoundSelectionOutput= ruleBooleanCollection | compoundSelectionOutput= ruleDateCollection | compoundSelectionOutput= ruleTimestampCollection | compoundSelectionOutput= ruleTimeCollection | compoundSelectionOutput= ruleStringCollection ) )
            // IDP.g:1193:33: (compoundSelectionOutput= ruleBooleanCollection | compoundSelectionOutput= ruleDateCollection | compoundSelectionOutput= ruleTimestampCollection | compoundSelectionOutput= ruleTimeCollection | compoundSelectionOutput= ruleStringCollection )
            root_0 = this.adaptor.nil();

            // IDP.g:1193:33: (compoundSelectionOutput= ruleBooleanCollection | compoundSelectionOutput= ruleDateCollection | compoundSelectionOutput= ruleTimestampCollection | compoundSelectionOutput= ruleTimeCollection | compoundSelectionOutput= ruleStringCollection )
            var alt70=5;

            this.ruleCollectionSelection_DFAcall=(typeof this.ruleCollectionSelection_DFAcall === 'undefined' ? false: this.ruleCollectionSelection_DFAcall); // only valid for synpred
            if(this.ruleCollectionSelection_DFAcall === false /*&& !this.failedPredictDFA70*/)
            {   
                this.dfa70NumberOfAlt = alt70;
                this.dfa70InRule = "ruleCollectionSelection";
            	this.dfa70Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleCollectionSelectionCurrentDecisionNumber  = 70; 
                alt70 = this.dfa70.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt70 === 0 || alt70 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 70);
            		return retval;
                }
            }	
            else
                alt70 = this.dfa70AltNumber;	
            switch (alt70) {
                case 1 :
                    // IDP.g:1193:34: compoundSelectionOutput= ruleBooleanCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanCollection_in_ruleCollectionSelection20226);
                    this.ruleBooleanCollection_DFAcall = false;

                     if( typeof this.ruleCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA70 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleBooleanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleBooleanCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleBooleanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:1194:35: compoundSelectionOutput= ruleDateCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_ruleCollectionSelection20267);
                    this.ruleDateCollection_DFAcall = false;

                     if( typeof this.ruleCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA70 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleDateCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleDateCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleDateCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 3 :
                    // IDP.g:1195:35: compoundSelectionOutput= ruleTimestampCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_ruleCollectionSelection20307);
                    this.ruleTimestampCollection_DFAcall = false;

                     if( typeof this.ruleCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA70 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimestampCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 4 :
                    // IDP.g:1196:35: compoundSelectionOutput= ruleTimeCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollection_in_ruleCollectionSelection20347);
                    this.ruleTimeCollection_DFAcall = false;

                     if( typeof this.ruleCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA70 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimeCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimeCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimeCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 5 :
                    // IDP.g:1197:35: compoundSelectionOutput= ruleStringCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleStringCollection_in_ruleCollectionSelection20387);
                    this.ruleStringCollection_DFAcall = false;

                     if( typeof this.ruleCollectionSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCollectionSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCollectionSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA70 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleStringCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCollectionSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleStringCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleStringCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA70 !== undefined && this.failedPredictDFA70)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCollectionSelection";
        }
        return retval;
    },

    // inline static return class
    collectionAggregationOption_return: (function() {
        IDPParser.collectionAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.collectionAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1204:1: collectionAggregationOption returns [value] : (aggregationOptionOutput= maxDateAggregationOption | aggregationOptionOutput= minDateAggregationOption ) ;
    // $ANTLR start "collectionAggregationOption"
    collectionAggregationOption: function() {
        this.currentRule = "collectionAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.collectionAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var aggregationOptionOutput = null;


         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1207:17: ( (aggregationOptionOutput= maxDateAggregationOption | aggregationOptionOutput= minDateAggregationOption ) )
            // IDP.g:1207:33: (aggregationOptionOutput= maxDateAggregationOption | aggregationOptionOutput= minDateAggregationOption )
            root_0 = this.adaptor.nil();

            // IDP.g:1207:33: (aggregationOptionOutput= maxDateAggregationOption | aggregationOptionOutput= minDateAggregationOption )
            var alt71=2;

            var LA71_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(LAST,MAXIMUM_OF,1) && LA71_0>=LAST && LA71_0<=MAXIMUM_OF )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(LAST,MAXIMUM_OF,1) && LA71_0>=LAST && LA71_0<=MAXIMUM_OF )) ) {
                alt71=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(FIRST,FIRST,1) && LA71_0==FIRST )||(  this.pushNextTokens(EARLIEST,MINIMUM_OF,1) && LA71_0>=EARLIEST && LA71_0<=MINIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(FIRST,FIRST,1) && LA71_0==FIRST )||(  this.pushNextTokens(EARLIEST,MINIMUM_OF,1) && LA71_0>=EARLIEST && LA71_0<=MINIMUM_OF )) ) {
                alt71=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_71_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 71, 0, this.input);

                nvae_71_0.c = this.input.LA(1);
                throw nvae_71_0;
            }
            switch (alt71) {
                case 1 :
                    // IDP.g:1207:34: aggregationOptionOutput= maxDateAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_maxDateAggregationOption_in_collectionAggregationOption20689);
                    this.maxDateAggregationOption_DFAcall = false;

                     if( typeof this.collectionAggregationOptionCurrentDecisionNumber !== 'undefined' && this.collectionAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.collectionAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA71 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.maxDateAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.collectionAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.maxDateAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.maxDateAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal += "max"; origVal = (aggregationOptionOutput?this.input.toString(aggregationOptionOutput.start,aggregationOptionOutput.stop):null);
                    }


                    break;
                case 2 :
                    // IDP.g:1208:38: aggregationOptionOutput= minDateAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_minDateAggregationOption_in_collectionAggregationOption20737);
                    this.minDateAggregationOption_DFAcall = false;

                     if( typeof this.collectionAggregationOptionCurrentDecisionNumber !== 'undefined' && this.collectionAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.collectionAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA71 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.minDateAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.collectionAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.minDateAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.minDateAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal += "min"; origVal = (aggregationOptionOutput?this.input.toString(aggregationOptionOutput.start,aggregationOptionOutput.stop):null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA71 !== undefined && this.failedPredictDFA71)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "collectionAggregationOption";
        }
        return retval;
    },

    // inline static return class
    maxDateAggregationOption_return: (function() {
        IDPParser.maxDateAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.maxDateAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1212:1: maxDateAggregationOption returns [value] : ( ( LAST ( OF )? ) | ( MOST_RECENT ( OF )? ) | MAXIMUM_OF );
    // $ANTLR start "maxDateAggregationOption"
    maxDateAggregationOption: function() {
        this.currentRule = "maxDateAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.maxDateAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LAST94 = null;
        var OF95 = null;
        var MOST_RECENT96 = null;
        var OF97 = null;
        var MAXIMUM_OF98 = null;

        var LAST94_tree=null;
        var OF95_tree=null;
        var MOST_RECENT96_tree=null;
        var OF97_tree=null;
        var MAXIMUM_OF98_tree=null;

        try {
            // IDP.g:1213:25: ( ( LAST ( OF )? ) | ( MOST_RECENT ( OF )? ) | MAXIMUM_OF )
            var alt74=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case LAST:
                alt74=1;   
                break;
            case MOST_RECENT:
                alt74=2;   
                break;
            case MAXIMUM_OF:
                alt74=3;   
                break;
            default:
            this.pushApplyTokens([LAST,MOST_RECENT,MAXIMUM_OF]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_74 =
            			new org.antlr.runtime.NoViableAltException(null, 74, 0, this.input);

                nvae_74.c = this.input.LA(1);
                throw nvae_74;
            }

            switch (alt74) {
                case 1 :
                    // IDP.g:1213:49: ( LAST ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1213:49: ( LAST ( OF )? )
                    // IDP.g:1213:50: LAST ( OF )?


                    this.pushNextTokens(LAST,LAST,1);
                    LAST94=this.match(this.input,LAST,IDPParser.FOLLOW_LAST_in_maxDateAggregationOption20809); if (this.state.failed) return retval;
                    if( LAST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LAST94_tree = this.adaptor.create(LAST94);
                    this.adaptor.addChild(root_0, LAST94_tree);
                    }
                    // IDP.g:1213:55: ( OF )?
                    var alt72=2;

                    var LA72_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA72_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA72_0==OF )) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF95=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_maxDateAggregationOption20811); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF95_tree = this.adaptor.create(OF95);
                            this.adaptor.addChild(root_0, OF95_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA72 !== undefined && this.failedPredictDFA72)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1213:62: ( MOST_RECENT ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1213:62: ( MOST_RECENT ( OF )? )
                    // IDP.g:1213:63: MOST_RECENT ( OF )?


                    this.pushNextTokens(MOST_RECENT,MOST_RECENT,1);
                    MOST_RECENT96=this.match(this.input,MOST_RECENT,IDPParser.FOLLOW_MOST_RECENT_in_maxDateAggregationOption20818); if (this.state.failed) return retval;
                    if( MOST_RECENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    MOST_RECENT96_tree = this.adaptor.create(MOST_RECENT96);
                    this.adaptor.addChild(root_0, MOST_RECENT96_tree);
                    }
                    // IDP.g:1213:75: ( OF )?
                    var alt73=2;

                    var LA73_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA73_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA73_0==OF )) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF97=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_maxDateAggregationOption20820); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF97_tree = this.adaptor.create(OF97);
                            this.adaptor.addChild(root_0, OF97_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA73 !== undefined && this.failedPredictDFA73)
                    { 
                        throw null;
                    }*/






                    break;
                case 3 :
                    // IDP.g:1213:82: MAXIMUM_OF
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1);
                    MAXIMUM_OF98=this.match(this.input,MAXIMUM_OF,IDPParser.FOLLOW_MAXIMUM_OF_in_maxDateAggregationOption20826); if (this.state.failed) return retval;
                    if( MAXIMUM_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    MAXIMUM_OF98_tree = this.adaptor.create(MAXIMUM_OF98);
                    this.adaptor.addChild(root_0, MAXIMUM_OF98_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "maxDateAggregationOption";
        }
        return retval;
    },

    // inline static return class
    minDateAggregationOption_return: (function() {
        IDPParser.minDateAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.minDateAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1216:1: minDateAggregationOption returns [value] : ( ( FIRST ( OF )? ) | ( EARLIEST ( OF )? ) | MINIMUM_OF );
    // $ANTLR start "minDateAggregationOption"
    minDateAggregationOption: function() {
        this.currentRule = "minDateAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.minDateAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var FIRST99 = null;
        var OF100 = null;
        var EARLIEST101 = null;
        var OF102 = null;
        var MINIMUM_OF103 = null;

        var FIRST99_tree=null;
        var OF100_tree=null;
        var EARLIEST101_tree=null;
        var OF102_tree=null;
        var MINIMUM_OF103_tree=null;

        try {
            // IDP.g:1217:25: ( ( FIRST ( OF )? ) | ( EARLIEST ( OF )? ) | MINIMUM_OF )
            var alt77=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case FIRST:
                alt77=1;   
                break;
            case EARLIEST:
                alt77=2;   
                break;
            case MINIMUM_OF:
                alt77=3;   
                break;
            default:
            this.pushApplyTokens([FIRST,EARLIEST,MINIMUM_OF]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_77 =
            			new org.antlr.runtime.NoViableAltException(null, 77, 0, this.input);

                nvae_77.c = this.input.LA(1);
                throw nvae_77;
            }

            switch (alt77) {
                case 1 :
                    // IDP.g:1217:49: ( FIRST ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1217:49: ( FIRST ( OF )? )
                    // IDP.g:1217:50: FIRST ( OF )?


                    this.pushNextTokens(FIRST,FIRST,1);
                    FIRST99=this.match(this.input,FIRST,IDPParser.FOLLOW_FIRST_in_minDateAggregationOption20893); if (this.state.failed) return retval;
                    if( FIRST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    FIRST99_tree = this.adaptor.create(FIRST99);
                    this.adaptor.addChild(root_0, FIRST99_tree);
                    }
                    // IDP.g:1217:56: ( OF )?
                    var alt75=2;

                    var LA75_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA75_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA75_0==OF )) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF100=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_minDateAggregationOption20895); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF100_tree = this.adaptor.create(OF100);
                            this.adaptor.addChild(root_0, OF100_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA75 !== undefined && this.failedPredictDFA75)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1217:63: ( EARLIEST ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1217:63: ( EARLIEST ( OF )? )
                    // IDP.g:1217:64: EARLIEST ( OF )?


                    this.pushNextTokens(EARLIEST,EARLIEST,1);
                    EARLIEST101=this.match(this.input,EARLIEST,IDPParser.FOLLOW_EARLIEST_in_minDateAggregationOption20902); if (this.state.failed) return retval;
                    if( EARLIEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    EARLIEST101_tree = this.adaptor.create(EARLIEST101);
                    this.adaptor.addChild(root_0, EARLIEST101_tree);
                    }
                    // IDP.g:1217:73: ( OF )?
                    var alt76=2;

                    var LA76_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA76_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA76_0==OF )) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF102=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_minDateAggregationOption20904); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF102_tree = this.adaptor.create(OF102);
                            this.adaptor.addChild(root_0, OF102_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA76 !== undefined && this.failedPredictDFA76)
                    { 
                        throw null;
                    }*/






                    break;
                case 3 :
                    // IDP.g:1217:79: MINIMUM_OF
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1);
                    MINIMUM_OF103=this.match(this.input,MINIMUM_OF,IDPParser.FOLLOW_MINIMUM_OF_in_minDateAggregationOption20909); if (this.state.failed) return retval;
                    if( MINIMUM_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    MINIMUM_OF103_tree = this.adaptor.create(MINIMUM_OF103);
                    this.adaptor.addChild(root_0, MINIMUM_OF103_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "minDateAggregationOption";
        }
        return retval;
    },

    // inline static return class
    ruleSetOfValuesOperator_return: (function() {
        IDPParser.ruleSetOfValuesOperator_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleSetOfValuesOperator_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1220:1: ruleSetOfValuesOperator returns [value] : ( (a= EXISTS_IN ) | (a= DOES_NOT_EXISTS_IN ) );
    // $ANTLR start "ruleSetOfValuesOperator"
    ruleSetOfValuesOperator: function() {
        this.currentRule = "ruleSetOfValuesOperator";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleSetOfValuesOperator_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;

        var a_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1223:9: ( (a= EXISTS_IN ) | (a= DOES_NOT_EXISTS_IN ) )
            var alt78=2;
            var LA78_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(EXISTS_IN,EXISTS_IN,1) && LA78_0==EXISTS_IN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(EXISTS_IN,EXISTS_IN,1) && LA78_0==EXISTS_IN )) ) {
                alt78=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DOES_NOT_EXISTS_IN,DOES_NOT_EXISTS_IN,1) && LA78_0==DOES_NOT_EXISTS_IN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DOES_NOT_EXISTS_IN,DOES_NOT_EXISTS_IN,1) && LA78_0==DOES_NOT_EXISTS_IN )) ) {
                alt78=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_78_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 78, 0, this.input);

                nvae_78_0.c = this.input.LA(1);
                throw nvae_78_0;
            }
            switch (alt78) {
                case 1 :
                    // IDP.g:1225:17: (a= EXISTS_IN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1225:17: (a= EXISTS_IN )
                    // IDP.g:1225:18: a= EXISTS_IN


                    this.pushNextTokens(EXISTS_IN,EXISTS_IN,1);
                    a=this.match(this.input,EXISTS_IN,IDPParser.FOLLOW_EXISTS_IN_in_ruleSetOfValuesOperator21108); if (this.state.failed) return retval;
                    if( EXISTS_IN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += 'exists in';
                    }





                    break;
                case 2 :
                    // IDP.g:1227:17: (a= DOES_NOT_EXISTS_IN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1227:17: (a= DOES_NOT_EXISTS_IN )
                    // IDP.g:1227:18: a= DOES_NOT_EXISTS_IN


                    this.pushNextTokens(DOES_NOT_EXISTS_IN,DOES_NOT_EXISTS_IN,1);
                    a=this.match(this.input,DOES_NOT_EXISTS_IN,IDPParser.FOLLOW_DOES_NOT_EXISTS_IN_in_ruleSetOfValuesOperator21153); if (this.state.failed) return retval;
                    if( DOES_NOT_EXISTS_IN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += 'not exists in';
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleSetOfValuesOperator";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSingleStatement_return: (function() {
        IDPParser.ruleTimeSingleStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSingleStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1246:1: ruleTimeSingleStatement returns [value] : selectionLeftOutput= ruleTimeSelectionClause ;
    // $ANTLR start "ruleTimeSingleStatement"
    ruleTimeSingleStatement: function() {
        this.currentRule = "ruleTimeSingleStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSingleStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:1249:9: (selectionLeftOutput= ruleTimeSelectionClause )
            // IDP.g:1249:17: selectionLeftOutput= ruleTimeSelectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatement21483);
            this.ruleTimeSelectionClause_DFAcall = false;

             if( typeof this.ruleTimeSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSingleStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimeSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimeSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimeSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSingleStatement";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSelectionClause_return: (function() {
        IDPParser.ruleTimeSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1252:1: ruleTimeSelectionClause returns [value] : ( LROUNDB selectionOutput= ruleBaseTime RROUNDB | selectionOutput= ruleBaseTime ) ;
    // $ANTLR start "ruleTimeSelectionClause"
    ruleTimeSelectionClause: function() {
        this.currentRule = "ruleTimeSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB104 = null;
        var RROUNDB105 = null;
         var selectionOutput = null;

        var LROUNDB104_tree=null;
        var RROUNDB105_tree=null;

        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1255:17: ( ( LROUNDB selectionOutput= ruleBaseTime RROUNDB | selectionOutput= ruleBaseTime ) )
            // IDP.g:1255:33: ( LROUNDB selectionOutput= ruleBaseTime RROUNDB | selectionOutput= ruleBaseTime )
            root_0 = this.adaptor.nil();

            // IDP.g:1255:33: ( LROUNDB selectionOutput= ruleBaseTime RROUNDB | selectionOutput= ruleBaseTime )
            var alt79=2;

            this.ruleTimeSelectionClause_DFAcall=(typeof this.ruleTimeSelectionClause_DFAcall === 'undefined' ? false: this.ruleTimeSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleTimeSelectionClause_DFAcall === false /*&& !this.failedPredictDFA79*/)
            {   
                this.dfa79NumberOfAlt = alt79;
                this.dfa79InRule = "ruleTimeSelectionClause";
            	this.dfa79Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimeSelectionClauseCurrentDecisionNumber  = 79; 
                alt79 = this.dfa79.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt79 === 0 || alt79 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 79);
            		return retval;
                }
            }	
            else
                alt79 = this.dfa79AltNumber;	
            switch (alt79) {
                case 1 :
                    // IDP.g:1255:35: LROUNDB selectionOutput= ruleBaseTime RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB104=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeSelectionClause21618); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB104_tree = this.adaptor.create(LROUNDB104);
                    this.adaptor.addChild(root_0, LROUNDB104_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTime_in_ruleTimeSelectionClause21624);
                    this.ruleBaseTime_DFAcall = false;

                     if( typeof this.ruleTimeSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA79 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTime();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTime();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTime();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB105=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeSelectionClause21626); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB105_tree = this.adaptor.create(RROUNDB105);
                    this.adaptor.addChild(root_0, RROUNDB105_tree);
                    }


                    break;
                case 2 :
                    // IDP.g:1256:34: selectionOutput= ruleBaseTime
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTime_in_ruleTimeSelectionClause21667);
                    this.ruleBaseTime_DFAcall = false;

                     if( typeof this.ruleTimeSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA79 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTime();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTime();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTime();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA79 !== undefined && this.failedPredictDFA79)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleBaseTime_return: (function() {
        IDPParser.ruleBaseTime_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseTime_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1259:1: ruleBaseTime returns [value] : (selectionOutput= ruleTimeCompoundSelection | selectionOutput= ruleTimeBaseSelection ) ;
    // $ANTLR start "ruleBaseTime"
    ruleBaseTime: function() {
        this.currentRule = "ruleBaseTime";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseTime_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {}; 
        try {
            // IDP.g:1261:17: ( (selectionOutput= ruleTimeCompoundSelection | selectionOutput= ruleTimeBaseSelection ) )
            // IDP.g:1261:33: (selectionOutput= ruleTimeCompoundSelection | selectionOutput= ruleTimeBaseSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1261:33: (selectionOutput= ruleTimeCompoundSelection | selectionOutput= ruleTimeBaseSelection )
            var alt80=2;

            var LA80_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA80_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA80_0==FIRST )||( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA80_0==TYPETIME )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA80_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA80_0>=LAST && LA80_0<=MINIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA80_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA80_0==FIRST )||( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA80_0==TYPETIME )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA80_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA80_0>=LAST && LA80_0<=MINIMUM_OF )) ) {
                alt80=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TIMESTRING,TYPETIMEPARAMETER,1) && LA80_0>=TIMESTRING && LA80_0<=TYPETIMEPARAMETER )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TIMESTRING,TYPETIMEPARAMETER,1) && LA80_0>=TIMESTRING && LA80_0<=TYPETIMEPARAMETER )) ) {
                alt80=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_80_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 80, 0, this.input);

                nvae_80_0.c = this.input.LA(1);
                throw nvae_80_0;
            }
            switch (alt80) {
                case 1 :
                    // IDP.g:1262:33: selectionOutput= ruleTimeCompoundSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCompoundSelection_in_ruleBaseTime21836);
                    this.ruleTimeCompoundSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimeCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimeCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimeCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA80 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimeCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:1263:35: selectionOutput= ruleTimeBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeBaseSelection_in_ruleBaseTime21878);
                    this.ruleTimeBaseSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimeCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimeCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimeCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA80 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimeCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA80 !== undefined && this.failedPredictDFA80)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseTime";
        }
        return retval;
    },

    // inline static return class
    ruleTimeBaseSelection_return: (function() {
        IDPParser.ruleTimeBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1266:1: ruleTimeBaseSelection returns [value] : (selction= ruleTimeConstantSimpleSelection ) ;
    // $ANTLR start "ruleTimeBaseSelection"
    ruleTimeBaseSelection: function() {
        this.currentRule = "ruleTimeBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:1267:17: ( (selction= ruleTimeConstantSimpleSelection ) )
            // IDP.g:1267:33: (selction= ruleTimeConstantSimpleSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1267:33: (selction= ruleTimeConstantSimpleSelection )
            // IDP.g:1267:34: selction= ruleTimeConstantSimpleSelection
            this.pushFollow(IDPParser.FOLLOW_ruleTimeConstantSimpleSelection_in_ruleTimeBaseSelection21961);
            this.ruleTimeConstantSimpleSelection_DFAcall = false;

             if( typeof this.ruleTimeBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeBaseSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeBaseSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimeConstantSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeBaseSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimeConstantSimpleSelection();

            	}
            	}
            else{
                selction=this.ruleTimeConstantSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selction!==null?selction.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeConstantSimpleSelection_return: (function() {
        IDPParser.ruleTimeConstantSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeConstantSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1270:1: ruleTimeConstantSimpleSelection returns [value] : (const2= TIMESTRING | const3= TYPETIMEPARAMETER );
    // $ANTLR start "ruleTimeConstantSimpleSelection"
    ruleTimeConstantSimpleSelection: function() {
        this.currentRule = "ruleTimeConstantSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeConstantSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var const2 = null;
        var const3 = null;

        var const2_tree=null;
        var const3_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.string;
        try {
            // IDP.g:1274:9: (const2= TIMESTRING | const3= TYPETIMEPARAMETER )
            var alt81=2;
            var LA81_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TIMESTRING,TIMESTRING,1) && LA81_0==TIMESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TIMESTRING,TIMESTRING,1) && LA81_0==TIMESTRING )) ) {
                alt81=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEPARAMETER,TYPETIMEPARAMETER,1) && LA81_0==TYPETIMEPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEPARAMETER,TYPETIMEPARAMETER,1) && LA81_0==TYPETIMEPARAMETER )) ) {
                alt81=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_81_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 81, 0, this.input);

                nvae_81_0.c = this.input.LA(1);
                throw nvae_81_0;
            }
            switch (alt81) {
                case 1 :
                    // IDP.g:1274:17: const2= TIMESTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TIMESTRING,TIMESTRING,1);
                    const2=this.match(this.input,TIMESTRING,IDPParser.FOLLOW_TIMESTRING_in_ruleTimeConstantSimpleSelection22104); if (this.state.failed) return retval;
                    if( TIMESTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const2_tree = this.adaptor.create(const2);
                    this.adaptor.addChild(root_0, const2_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((const2?const2.getText():null)); simpleSelectiontOutput.originalValue = (const2?const2.getText():null); this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, const2.start, (const2?const2.getText():null), this.parseModelLib.getModelManger());
                    }


                    break;
                case 2 :
                    // IDP.g:1275:17: const3= TYPETIMEPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPETIMEPARAMETER,TYPETIMEPARAMETER,1);
                    const3=this.match(this.input,TYPETIMEPARAMETER,IDPParser.FOLLOW_TYPETIMEPARAMETER_in_ruleTimeConstantSimpleSelection22131); if (this.state.failed) return retval;
                    if( TYPETIMEPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const3_tree = this.adaptor.create(const3);
                    this.adaptor.addChild(root_0, const3_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((const3?const3.getText():null));  simpleSelectiontOutput.isParameter = true; simpleSelectiontOutput.originalValue = (const3?const3.getText():null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeConstantSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeStringSimpleSelection_return: (function() {
        IDPParser.ruleTimeStringSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeStringSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1277:1: ruleTimeStringSimpleSelection returns [value] : str= TIMESTRING ;
    // $ANTLR start "ruleTimeStringSimpleSelection"
    ruleTimeStringSimpleSelection: function() {
        this.currentRule = "ruleTimeStringSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeStringSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var str = null;

        var str_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker; simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.string;
        try {
            // IDP.g:1280:9: (str= TIMESTRING )
            // IDP.g:1280:17: str= TIMESTRING
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TIMESTRING,TIMESTRING,1);
            str=this.match(this.input,TIMESTRING,IDPParser.FOLLOW_TIMESTRING_in_ruleTimeStringSimpleSelection22239); if (this.state.failed) return retval;
            if( TIMESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            str_tree = this.adaptor.create(str);
            this.adaptor.addChild(root_0, str_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((str?str.getText():null)); simpleSelectiontOutput.originalValue = $strst2.text;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeStringSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeCompoundSelection_return: (function() {
        IDPParser.ruleTimeCompoundSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeCompoundSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1283:1: ruleTimeCompoundSelection returns [value] : (selectionOutput= ruleTimeSelection | selectionOutput= ruleCompoundTimeAggregationSelection | LROUNDB selectionOutput= ruleTimeCompoundSelection RROUNDB );
    // $ANTLR start "ruleTimeCompoundSelection"
    ruleTimeCompoundSelection: function() {
        this.currentRule = "ruleTimeCompoundSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeCompoundSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB106 = null;
        var RROUNDB107 = null;
         var selectionOutput = null;

        var LROUNDB106_tree=null;
        var RROUNDB107_tree=null;

        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:1285:17: (selectionOutput= ruleTimeSelection | selectionOutput= ruleCompoundTimeAggregationSelection | LROUNDB selectionOutput= ruleTimeCompoundSelection RROUNDB )
            var alt82=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TYPETIME:
            case CURRENT:
                alt82=1;   
                break;
            case FIRST:
            case LAST:
            case MOST_RECENT:
            case MAXIMUM_OF:
            case EARLIEST:
            case MINIMUM_OF:
                alt82=2;   
                break;
            case LROUNDB:
                alt82=3;   
                break;
            default:
            this.pushApplyTokens([TYPETIME,CURRENT,FIRST,LAST,MOST_RECENT,MAXIMUM_OF,EARLIEST,MINIMUM_OF,LROUNDB]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_82 =
            			new org.antlr.runtime.NoViableAltException(null, 82, 0, this.input);

                nvae_82.c = this.input.LA(1);
                throw nvae_82;
            }

            switch (alt82) {
                case 1 :
                    // IDP.g:1285:33: selectionOutput= ruleTimeSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelection_in_ruleTimeCompoundSelection22328);
                    this.ruleTimeSelection_DFAcall = false;

                     if( typeof this.ruleTimeCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA82 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       compoundSelectionOutput.selection = (selectionOutput.value  === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.string; retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput);
                    }


                    break;
                case 2 :
                    // IDP.g:1286:33: selectionOutput= ruleCompoundTimeAggregationSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimeAggregationSelection_in_ruleTimeCompoundSelection22369);
                    this.ruleCompoundTimeAggregationSelection_DFAcall = false;

                     if( typeof this.ruleTimeCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA82 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimeAggregationSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimeAggregationSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimeAggregationSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:1287:33: LROUNDB selectionOutput= ruleTimeCompoundSelection RROUNDB
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB106=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeCompoundSelection22406); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB106_tree = this.adaptor.create(LROUNDB106);
                    this.adaptor.addChild(root_0, LROUNDB106_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCompoundSelection_in_ruleTimeCompoundSelection22412);
                    this.ruleTimeCompoundSelection_DFAcall = false;

                     if( typeof this.ruleTimeCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA82 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB107=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeCompoundSelection22414); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB107_tree = this.adaptor.create(RROUNDB107);
                    this.adaptor.addChild(root_0, RROUNDB107_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeCompoundSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSelection_return: (function() {
        IDPParser.ruleTimeSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1290:1: ruleTimeSelection returns [value] : ( CURRENT )? (navigationOutput= TYPETIME ) ;
    // $ANTLR start "ruleTimeSelection"
    ruleTimeSelection: function() {
        this.currentRule = "ruleTimeSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT108 = null;

        var navigationOutput_tree=null;
        var CURRENT108_tree=null;

        var selectionOutput = {}; 
        try {
            // IDP.g:1293:17: ( ( CURRENT )? (navigationOutput= TYPETIME ) )
            // IDP.g:1293:33: ( CURRENT )? (navigationOutput= TYPETIME )
            root_0 = this.adaptor.nil();

            // IDP.g:1293:33: ( CURRENT )?
            var alt83=2;

            var LA83_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA83_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA83_0==CURRENT )) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // IDP.g:1293:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT108=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimeSelection22536); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT108_tree = this.adaptor.create(CURRENT108);
                    this.adaptor.addChild(root_0, CURRENT108_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA83 !== undefined && this.failedPredictDFA83)
            { 
                throw null;
            }*/

            // IDP.g:1293:81: (navigationOutput= TYPETIME )
            // IDP.g:1293:82: navigationOutput= TYPETIME


            this.pushNextTokens(TYPETIME,TYPETIME,1);
            navigationOutput=this.match(this.input,TYPETIME,IDPParser.FOLLOW_TYPETIME_in_ruleTimeSelection22548); if (this.state.failed) return retval;
            if( TYPETIME !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSetOfValues_return: (function() {
        IDPParser.ruleTimeSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1296:1: ruleTimeSetOfValues returns [value] : LROUNDB ( ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? ) | (dateOutput= ruleTimeCollectionSelectionClause ) ) RROUNDB ;
    // $ANTLR start "ruleTimeSetOfValues"
    ruleTimeSetOfValues: function() {
        this.currentRule = "ruleTimeSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB109 = null;
        var SEMICOLON110 = null;
        var RROUNDB111 = null;
         var dateOutput = null;

        var LROUNDB109_tree=null;
        var SEMICOLON110_tree=null;
        var RROUNDB111_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.value);
                                        
        try {
            // IDP.g:1300:9: ( LROUNDB ( ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? ) | (dateOutput= ruleTimeCollectionSelectionClause ) ) RROUNDB )
            // IDP.g:1300:18: LROUNDB ( ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? ) | (dateOutput= ruleTimeCollectionSelectionClause ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB109=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeSetOfValues22661); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB109_tree = this.adaptor.create(LROUNDB109);
            this.adaptor.addChild(root_0, LROUNDB109_tree);
            }
            // IDP.g:1300:26: ( ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? ) | (dateOutput= ruleTimeCollectionSelectionClause ) )
            var alt86=2;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case LROUNDB:
            case FIRST:
            case TYPETIME:
            case LAST:
            case MOST_RECENT:
            case MAXIMUM_OF:
            case EARLIEST:
            case MINIMUM_OF:
            case TIMESTRING:
            case TYPETIMEPARAMETER:
                alt86=1;   
                break;
            case CURRENT:
                var LA86_2 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIME,TYPETIME,2) && LA86_2==TYPETIME )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIME,TYPETIME,2) && LA86_2==TYPETIME )) ) {
                    alt86=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,2) && LA86_2==TYPETIMECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,2) && LA86_2==TYPETIMECOLLECTION )) ) {
                    alt86=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_86_2 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 86, 2, this.input);

                    nvae_86_2.c = this.input.LA(2);
                    throw nvae_86_2;
                }   
                break;
            case TYPETIMECOLLECTION:
            case TYPETIMEDT:
            case ALL:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt86=2;   
                break;
            default:
            this.pushApplyTokens([LROUNDB,FIRST,TYPETIME,LAST,MOST_RECENT,MAXIMUM_OF,EARLIEST,MINIMUM_OF,TIMESTRING,TYPETIMEPARAMETER,CURRENT,TYPETIMECOLLECTION,TYPETIMEDT,ALL,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_86 =
            			new org.antlr.runtime.NoViableAltException(null, 86, 0, this.input);

                nvae_86.c = this.input.LA(1);
                throw nvae_86;
            }

            switch (alt86) {
                case 1 :
                    // IDP.g:1300:27: ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? )
                    // IDP.g:1300:27: ( ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )? )
                    // IDP.g:1300:28: ( (dateOutput= ruleTimeSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )?
                    // IDP.g:1300:28: ( (dateOutput= ruleTimeSelectionClause ) )
                    // IDP.g:1300:29: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1300:29: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1300:30: dateOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeSetOfValues22671);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimeSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    // IDP.g:1301:17: ( ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+ )?
                    var alt85=2;

                    var LA85_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA85_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA85_0==SEMICOLON )) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // IDP.g:1301:18: ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+
                            // IDP.g:1301:18: ( SEMICOLON (dateOutput= ruleTimeSelectionClause ) )+
                            var cnt84=0;
                            loop84:
                            do {
                                var alt84=2;
                                var LA84_0 = this.input.LA(1);


                                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA84_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA84_0==SEMICOLON )) ) {
                                    alt84=1;
                                }


                                switch (alt84) {
                                case 1 :
                                    // IDP.g:1301:19: SEMICOLON (dateOutput= ruleTimeSelectionClause )


                                    this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                                    SEMICOLON110=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleTimeSetOfValues22697); if (this.state.failed) return retval;
                                    if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    SEMICOLON110_tree = this.adaptor.create(SEMICOLON110);
                                    this.adaptor.addChild(root_0, SEMICOLON110_tree);
                                    }
                                    // IDP.g:1301:29: (dateOutput= ruleTimeSelectionClause )
                                    // IDP.g:1301:30: dateOutput= ruleTimeSelectionClause
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeSetOfValues22704);
                                    this.ruleTimeSelectionClause_DFAcall = false;

                                     if( typeof this.ruleTimeSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimeSetOfValuesCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeSetOfValuesCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        dateOutput=this.ruleTimeSelectionClause();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSetOfValuesCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	dateOutput=this.ruleTimeSelectionClause();

                                    	}
                                    	}
                                    else{
                                        dateOutput=this.ruleTimeSelectionClause();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());



                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                                    }


                                    break;

                                default :
                                    if ( cnt84 >= 1 ) {
                                        break loop84;
                                    }
                                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                        var eee_84 = new org.antlr.runtime.EarlyExitException(84, this.input);
                                        throw eee_84;
                                }
                                cnt84++;
                            } while (true);



                            break;

                    }
                    /*if(this.failedPredictDFA85 !== undefined && this.failedPredictDFA85)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1301:110: (dateOutput= ruleTimeCollectionSelectionClause )
                    // IDP.g:1301:110: (dateOutput= ruleTimeCollectionSelectionClause )
                    // IDP.g:1301:111: dateOutput= ruleTimeCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollectionSelectionClause_in_ruleTimeSetOfValues22722);
                    this.ruleTimeCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimeSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeCollectionSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA86 !== undefined && this.failedPredictDFA86)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB111=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeSetOfValues22729); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB111_tree = this.adaptor.create(RROUNDB111);
            this.adaptor.addChild(root_0, RROUNDB111_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleTimeBetweenDateClause_return: (function() {
        IDPParser.ruleTimeBetweenDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeBetweenDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1303:1: ruleTimeBetweenDateClause returns [value] : ( ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) );
    // $ANTLR start "ruleTimeBetweenDateClause"
    ruleTimeBetweenDateClause: function() {
        this.currentRule = "ruleTimeBetweenDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeBetweenDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set112 = null;
        var set113 = null;
         var dateOutput = null;

        var set112_tree=null;
        var set113_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value);
                                        
        try {
            // IDP.g:1307:9: ( ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) )
            var alt87=2;
            this.ruleTimeBetweenDateClause_DFAcall=(typeof this.ruleTimeBetweenDateClause_DFAcall === 'undefined' ? false: this.ruleTimeBetweenDateClause_DFAcall); // only valid for synpred
            if(this.ruleTimeBetweenDateClause_DFAcall === false /*&& !this.failedPredictDFA87*/)
            {   
                this.dfa87NumberOfAlt = alt87;
                this.dfa87InRule = "ruleTimeBetweenDateClause";
            	this.dfa87Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimeBetweenDateClauseCurrentDecisionNumber  = 87; 
                alt87 = this.dfa87.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt87 === 0 || alt87 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 87);
            		return retval;
                }
            }	
            else
                alt87 = this.dfa87AltNumber;	
            switch (alt87) {
                case 1 :
                    // IDP.g:1307:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1307:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
                    // IDP.g:1307:19: (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1307:19: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1307:20: dateOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeBetweenDateClause22833);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set112=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set112));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set112_22839 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set112_22839;
                    }

                    // IDP.g:1307:104: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1307:105: dateOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeBetweenDateClause22852);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;
                case 2 :
                    // IDP.g:1308:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1308:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    // IDP.g:1308:19: (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1308:19: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1308:20: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimeBetweenDateClause22886);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set113=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set113));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set113_22892 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set113_22892;
                    }

                    // IDP.g:1308:109: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1308:110: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimeBetweenDateClause22905);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimeBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeBetweenDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSingleStatementComparison_return: (function() {
        IDPParser.ruleTimeSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1311:1: ruleTimeSingleStatementComparison returns [value] : selectionLeftOutput= ruleTimeSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause ) | ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) ) ) ;
    // $ANTLR start "ruleTimeSingleStatementComparison"
    ruleTimeSingleStatementComparison: function() {
        this.currentRule = "ruleTimeSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;
         var comparisonOutput = null;
         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:1318:17: (selectionLeftOutput= ruleTimeSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause ) | ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) ) ) )
            // IDP.g:1318:20: selectionLeftOutput= ruleTimeSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause ) | ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) ) )
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatementComparison23070);
            this.ruleTimeSelectionClause_DFAcall = false;

             if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimeSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimeSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimeSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }
            // IDP.g:1320:1: ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause ) | ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) ) )
            var alt90=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt90=1;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt90=2;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
            case IS_BEFORE:
            case BEFORE:
            case IS_NOT_BEFORE:
            case IS_AFTER:
            case AFTER:
            case IS_NOT_AFTER:
                alt90=3;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN,IS_BEFORE,BEFORE,IS_NOT_BEFORE,IS_AFTER,AFTER,IS_NOT_AFTER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_90 =
            			new org.antlr.runtime.NoViableAltException(null, 90, 0, this.input);

                nvae_90.c = this.input.LA(1);
                throw nvae_90;
            }

            switch (alt90) {
                case 1 :
                    // IDP.g:1321:5: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues )
                    // IDP.g:1321:5: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues )
                    // IDP.g:1321:6: comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleTimeSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleTimeSingleStatementComparison23102);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSetOfValues_in_ruleTimeSingleStatementComparison23118);
                    this.ruleTimeSetOfValues_DFAcall = false;

                     if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimeSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimeSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimeSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 2 :
                    // IDP.g:1328:5: (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause )
                    // IDP.g:1328:5: (comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause )
                    // IDP.g:1328:6: comparisonOutput= betweenOp rightSelectionOutput= ruleTimeBetweenDateClause
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleTimeSingleStatementComparison23135);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeBetweenDateClause_in_ruleTimeSingleStatementComparison23151);
                    this.ruleTimeBetweenDateClause_DFAcall = false;

                     if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimeBetweenDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimeBetweenDateClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimeBetweenDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 3 :
                    // IDP.g:1335:5: ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) )
                    // IDP.g:1335:5: ( (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause ) )
                    // IDP.g:1335:6: (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause )
                    // IDP.g:1335:6: (comparisonOutput= ruleNumericComparisonOption | comparisonOutput= relativeDateClauseOp )
                    var alt88=2;

                    var LA88_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA88_0>=EQ_SIGN && LA88_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA88_0>=NOT_EQUAL_SIGN && LA88_0<=EQUALS )||(  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA88_0>=GREATER_EQUAL_SIGN && LA88_0<=IS_GREATER_THAN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA88_0>=EQ_SIGN && LA88_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA88_0>=NOT_EQUAL_SIGN && LA88_0<=EQUALS )||(  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA88_0>=GREATER_EQUAL_SIGN && LA88_0<=IS_GREATER_THAN )) ) {
                        alt88=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(IS_BEFORE,IS_NOT_AFTER,1) && LA88_0>=IS_BEFORE && LA88_0<=IS_NOT_AFTER )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(IS_BEFORE,IS_NOT_AFTER,1) && LA88_0>=IS_BEFORE && LA88_0<=IS_NOT_AFTER )) ) {
                        alt88=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_88_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 88, 0, this.input);

                        nvae_88_0.c = this.input.LA(1);
                        throw nvae_88_0;
                    }
                    switch (alt88) {
                        case 1 :
                            // IDP.g:1335:7: comparisonOutput= ruleNumericComparisonOption
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOption_in_ruleTimeSingleStatementComparison23169);
                            this.ruleNumericComparisonOption_DFAcall = false;

                             if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA88 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                comparisonOutput=this.ruleNumericComparisonOption();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	comparisonOutput=this.ruleNumericComparisonOption();

                            	}
                            	}
                            else{
                                comparisonOutput=this.ruleNumericComparisonOption();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:1335:56: comparisonOutput= relativeDateClauseOp
                            this.pushFollow(IDPParser.FOLLOW_relativeDateClauseOp_in_ruleTimeSingleStatementComparison23177);
                            this.relativeDateClauseOp_DFAcall = false;

                             if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA88 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                comparisonOutput=this.relativeDateClauseOp();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	comparisonOutput=this.relativeDateClauseOp();

                            	}
                            	}
                            else{
                                comparisonOutput=this.relativeDateClauseOp();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA88 !== undefined && this.failedPredictDFA88)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    // IDP.g:1338:9: (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause )
                    var alt89=2;

                    this.ruleTimeSingleStatementComparison_DFAcall=(typeof this.ruleTimeSingleStatementComparison_DFAcall === 'undefined' ? false: this.ruleTimeSingleStatementComparison_DFAcall); // only valid for synpred
                    if(this.ruleTimeSingleStatementComparison_DFAcall === false /*&& !this.failedPredictDFA89*/)
                    {   
                        this.dfa89NumberOfAlt = alt89;
                        this.dfa89InRule = "ruleTimeSingleStatementComparison";
                    	this.dfa89Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  = 89; 
                        alt89 = this.dfa89.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt89 === 0 || alt89 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 89);
                    		return retval;
                        }
                    }	
                    else
                        alt89 = this.dfa89AltNumber;	
                    switch (alt89) {
                        case 1 :
                            // IDP.g:1338:10: rightSelectionOutput= ruleTimestampSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimeSingleStatementComparison23195);
                            this.ruleTimestampSelectionClause_DFAcall = false;

                             if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA89 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleTimestampSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleTimestampSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleTimestampSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:1338:65: rightSelectionOutput= ruleTimeSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatementComparison23204);
                            this.ruleTimeSelectionClause_DFAcall = false;

                             if( typeof this.ruleTimeSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimeSingleStatementComparisonCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSingleStatementComparisonCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA89 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rightSelectionOutput=this.ruleTimeSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rightSelectionOutput=this.ruleTimeSelectionClause();

                            	}
                            	}
                            else{
                                rightSelectionOutput=this.ruleTimeSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA89 !== undefined && this.failedPredictDFA89)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;

            }
            /*if(this.failedPredictDFA90 !== undefined && this.failedPredictDFA90)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((selectionLeftOutput?this.input.toString(selectionLeftOutput.start,selectionLeftOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleTimeCollectionSelectionClause_return: (function() {
        IDPParser.ruleTimeCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1345:1: ruleTimeCollectionSelectionClause returns [value] : collection= ruleTimeCollection ;
    // $ANTLR start "ruleTimeCollectionSelectionClause"
    ruleTimeCollectionSelectionClause: function() {
        this.currentRule = "ruleTimeCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var collection = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;   var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1348:25: (collection= ruleTimeCollection )
            // IDP.g:1348:49: collection= ruleTimeCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimeCollection_in_ruleTimeCollectionSelectionClause23360);
            this.ruleTimeCollection_DFAcall = false;

             if( typeof this.ruleTimeCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                collection=this.ruleTimeCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	collection=this.ruleTimeCollection();

            	}
            	}
            else{
                collection=this.ruleTimeCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((collection!==null?collection.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleTimeCollectionContext_return: (function() {
        IDPParser.ruleTimeCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1355:1: ruleTimeCollectionContext returns [value] : navigationOutput= TYPETIMECOLLECTION ;
    // $ANTLR start "ruleTimeCollectionContext"
    ruleTimeCollectionContext: function() {
        this.currentRule = "ruleTimeCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1356:25: (navigationOutput= TYPETIMECOLLECTION )
            // IDP.g:1356:49: navigationOutput= TYPETIMECOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1);
            navigationOutput=this.match(this.input,TYPETIMECOLLECTION,IDPParser.FOLLOW_TYPETIMECOLLECTION_in_ruleTimeCollectionContext23509); if (this.state.failed) return retval;
            if( TYPETIMECOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimeContext_return: (function() {
        IDPParser.ruleTimeContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1363:1: ruleTimeContext returns [value] : navigationOutput= TYPETIME ;
    // $ANTLR start "ruleTimeContext"
    ruleTimeContext: function() {
        this.currentRule = "ruleTimeContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1364:25: (navigationOutput= TYPETIME )
            // IDP.g:1364:49: navigationOutput= TYPETIME
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIME,TYPETIME,1);
            navigationOutput=this.match(this.input,TYPETIME,IDPParser.FOLLOW_TYPETIME_in_ruleTimeContext23636); if (this.state.failed) return retval;
            if( TYPETIME !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimeAliasDTCollectionContext_return: (function() {
        IDPParser.ruleTimeAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1371:1: ruleTimeAliasDTCollectionContext returns [value] : navigationOutput= TYPETIMEDT ;
    // $ANTLR start "ruleTimeAliasDTCollectionContext"
    ruleTimeAliasDTCollectionContext: function() {
        this.currentRule = "ruleTimeAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1372:25: (navigationOutput= TYPETIMEDT )
            // IDP.g:1372:49: navigationOutput= TYPETIMEDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMEDT,TYPETIMEDT,1);
            navigationOutput=this.match(this.input,TYPETIMEDT,IDPParser.FOLLOW_TYPETIMEDT_in_ruleTimeAliasDTCollectionContext23768); if (this.state.failed) return retval;
            if( TYPETIMEDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimeCollection_return: (function() {
        IDPParser.ruleTimeCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1379:1: ruleTimeCollection returns [value] : ( ( ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleTimeAliasDTCollectionContext ) );
    // $ANTLR start "ruleTimeCollection"
    ruleTimeCollection: function() {
        this.currentRule = "ruleTimeCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT114 = null;
        var OF115 = null;
        var CURRENT116 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;
         var navigationOutputDT = null;

        var CURRENT114_tree=null;
        var OF115_tree=null;
        var CURRENT116_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:1390:17: ( ( ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleTimeAliasDTCollectionContext ) )
            var alt98=2;
            var LA98_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA98_0==CURRENT )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA98_0==TYPETIMECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA98_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA98_0>=ZERO_OR_ONE && LA98_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA98_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA98_0==CURRENT )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA98_0==TYPETIMECOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA98_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA98_0>=ZERO_OR_ONE && LA98_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA98_0==INT )) ) {
                alt98=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEDT,TYPETIMEDT,1) && LA98_0==TYPETIMEDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEDT,TYPETIMEDT,1) && LA98_0==TYPETIMEDT )) ) {
                alt98=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_98_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 98, 0, this.input);

                nvae_98_0.c = this.input.LA(1);
                throw nvae_98_0;
            }
            switch (alt98) {
                case 1 :
                    // IDP.g:1390:33: ( ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) ) (flt= filterClause )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1390:33: ( ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) ) (flt= filterClause )? )
                    // IDP.g:1390:34: ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) ) (flt= filterClause )?
                    // IDP.g:1390:34: ( ( CURRENT )? (navigationOutput= ruleTimeCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) )
                    var alt96=3;

                    	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
                    case CURRENT:
                    case TYPETIMECOLLECTION:
                        alt96=1;   
                        break;
                    case ZERO_OR_ONE:
                    case TYPENUMBERPARAMETER:
                    case INT:
                        alt96=2;   
                        break;
                    case ALL:
                        alt96=3;   
                        break;
                    default:
                    this.pushApplyTokens([CURRENT,TYPETIMECOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
                    	//this.pushApplyTokens();
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_96 =
                    			new org.antlr.runtime.NoViableAltException(null, 96, 0, this.input);

                        nvae_96.c = this.input.LA(1);
                        throw nvae_96;
                    }

                    switch (alt96) {
                        case 1 :
                            // IDP.g:1391:49: ( CURRENT )? (navigationOutput= ruleTimeCollectionContext )
                            // IDP.g:1391:49: ( CURRENT )?
                            var alt91=2;

                            var LA91_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA91_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA91_0==CURRENT )) ) {
                                alt91=1;
                            }
                            switch (alt91) {
                                case 1 :
                                    // IDP.g:1391:50: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT114=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimeCollection24043); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT114_tree = this.adaptor.create(CURRENT114);
                                    this.adaptor.addChild(root_0, CURRENT114_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA91 !== undefined && this.failedPredictDFA91)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1391:97: (navigationOutput= ruleTimeCollectionContext )
                            // IDP.g:1391:98: navigationOutput= ruleTimeCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24055);
                            this.ruleTimeCollectionContext_DFAcall = false;

                             if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimeCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimeCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimeCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;
                        case 2 :
                            // IDP.g:1392:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1392:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1392:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) ) (order= ruleSortingOptions )
                            // IDP.g:1392:34: (quantity= ruleInteger )
                            // IDP.g:1392:35: quantity= ruleInteger
                            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleTimeCollection24101);
                            this.ruleInteger_DFAcall = false;

                             if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                quantity=this.ruleInteger();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	quantity=this.ruleInteger();

                            	}
                            	}
                            else{
                                quantity=this.ruleInteger();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                            }



                            // IDP.g:1392:113: ( OF rall= ruleAll )?
                            var alt92=2;

                            var LA92_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA92_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA92_0==OF )) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // IDP.g:1392:114: OF rall= ruleAll


                                    this.pushNextTokens(OF,OF,1);
                                    OF115=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleTimeCollection24107); if (this.state.failed) return retval;
                                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    OF115_tree = this.adaptor.create(OF115);
                                    this.adaptor.addChild(root_0, OF115_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimeCollection24113);
                                    this.ruleAll_DFAcall = false;

                                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA92 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        rall=this.ruleAll();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	rall=this.ruleAll();

                                    	}
                                    	}
                                    else{
                                        rall=this.ruleAll();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA92 !== undefined && this.failedPredictDFA92)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1392:221: ( CURRENT )?
                            var alt93=2;

                            var LA93_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA93_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA93_0==CURRENT )) ) {
                                alt93=1;
                            }
                            switch (alt93) {
                                case 1 :
                                    // IDP.g:1392:222: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT116=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimeCollection24121); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT116_tree = this.adaptor.create(CURRENT116);
                                    this.adaptor.addChild(root_0, CURRENT116_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA93 !== undefined && this.failedPredictDFA93)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1392:269: ( (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) )
                            // IDP.g:1392:270: (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext )
                            // IDP.g:1392:270: (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext )
                            var alt94=2;

                            var LA94_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA94_0==TYPETIME )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA94_0==TYPETIME )) ) {
                                alt94=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA94_0==TYPETIMECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA94_0==TYPETIMECOLLECTION )) ) {
                                alt94=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_94_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 94, 0, this.input);

                                nvae_94_0.c = this.input.LA(1);
                                throw nvae_94_0;
                            }
                            switch (alt94) {
                                case 1 :
                                    // IDP.g:1392:271: navigationOutput= ruleTimeContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimeContext_in_ruleTimeCollection24134);
                                    this.ruleTimeContext_DFAcall = false;

                                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA94 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimeContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimeContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimeContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1392:308: navigationOutput= ruleTimeCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24142);
                                    this.ruleTimeCollectionContext_DFAcall = false;

                                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA94 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimeCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimeCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimeCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA94 !== undefined && this.failedPredictDFA94)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }



                            // IDP.g:1393:61: (order= ruleSortingOptions )
                            // IDP.g:1393:62: order= ruleSortingOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleTimeCollection24214);
                            this.ruleSortingOptions_DFAcall = false;

                             if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                order=this.ruleSortingOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	order=this.ruleSortingOptions();

                            	}
                            	}
                            else{
                                order=this.ruleSortingOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                            }



                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                            }





                            break;
                        case 3 :
                            // IDP.g:1394:49: ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) )
                            // IDP.g:1394:49: ( (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext ) )
                            // IDP.g:1394:50: (rall= ruleAll ) (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext )
                            // IDP.g:1394:50: (rall= ruleAll )
                            // IDP.g:1394:51: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimeCollection24278);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                            }



                            // IDP.g:1394:126: (navigationOutput= ruleTimeContext | navigationOutput= ruleTimeCollectionContext )
                            var alt95=2;

                            var LA95_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA95_0==TYPETIME )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIME,TYPETIME,1) && LA95_0==TYPETIME )) ) {
                                alt95=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA95_0==TYPETIMECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,1) && LA95_0==TYPETIMECOLLECTION )) ) {
                                alt95=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_95_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 95, 0, this.input);

                                nvae_95_0.c = this.input.LA(1);
                                throw nvae_95_0;
                            }
                            switch (alt95) {
                                case 1 :
                                    // IDP.g:1394:127: navigationOutput= ruleTimeContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimeContext_in_ruleTimeCollection24288);
                                    this.ruleTimeContext_DFAcall = false;

                                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA95 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimeContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimeContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimeContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1394:164: navigationOutput= ruleTimeCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24296);
                                    this.ruleTimeCollectionContext_DFAcall = false;

                                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA95 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimeCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimeCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimeCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA95 !== undefined && this.failedPredictDFA95)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA96 !== undefined && this.failedPredictDFA96)
                    { 
                        throw null;
                    }*/

                    // IDP.g:1397:33: (flt= filterClause )?
                    var alt97=2;

                    var LA97_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA97_0>=WHERE && LA97_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA97_0>=WHERE && LA97_0<=FILTER_BY )) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // IDP.g:1397:34: flt= filterClause
                            this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleTimeCollection24441);
                            this.filterClause_DFAcall = false;

                             if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA97 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                flt=this.filterClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	flt=this.filterClause();

                            	}
                            	}
                            else{
                                flt=this.filterClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.filterClause = (flt!==null?flt.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA97 !== undefined && this.failedPredictDFA97)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1398:35: (navigationOutputDT= ruleTimeAliasDTCollectionContext )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1398:35: (navigationOutputDT= ruleTimeAliasDTCollectionContext )
                    // IDP.g:1398:36: navigationOutputDT= ruleTimeAliasDTCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeAliasDTCollectionContext_in_ruleTimeCollection24488);
                    this.ruleTimeAliasDTCollectionContext_DFAcall = false;

                     if( typeof this.ruleTimeCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimeCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutputDT=this.ruleTimeAliasDTCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutputDT=this.ruleTimeAliasDTCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutputDT=this.ruleTimeAliasDTCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIME.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimeAggregationFunction_return: (function() {
        IDPParser.ruleTimeAggregationFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeAggregationFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1402:1: ruleTimeAggregationFunction returns [value] : ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB ) ) ;
    // $ANTLR start "ruleTimeAggregationFunction"
    ruleTimeAggregationFunction: function() {
        this.currentRule = "ruleTimeAggregationFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeAggregationFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB117 = null;
        var RROUNDB118 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB117_tree=null;
        var RROUNDB118_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var ruleOutput = {}; var aggregationOperatorArgs = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value;
                                        
        try {
            // IDP.g:1407:17: ( ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB ) ) )
            // IDP.g:1407:33: ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1407:33: ( (aggregationOptionOutput= collectionAggregationOption ) )
            // IDP.g:1408:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:1408:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:1408:51: aggregationOptionOutput= collectionAggregationOption
            this.pushFollow(IDPParser.FOLLOW_collectionAggregationOption_in_ruleTimeAggregationFunction24766);
            this.collectionAggregationOption_DFAcall = false;

             if( typeof this.ruleTimeAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimeAggregationFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeAggregationFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.collectionAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeAggregationFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.collectionAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.collectionAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }



            // IDP.g:1410:34: ( (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB ) )
            // IDP.g:1411:48: (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB )
            // IDP.g:1411:48: (compoundSelectionOutput= ruleTimeCollection | LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB )
            var alt99=2;

            var LA99_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA99_0==CURRENT )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA99_0>=TYPETIMECOLLECTION && LA99_0<=TYPETIMEDT )||( this.pushNextTokens(ALL,ALL,1) && LA99_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA99_0>=ZERO_OR_ONE && LA99_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA99_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA99_0==CURRENT )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA99_0>=TYPETIMECOLLECTION && LA99_0<=TYPETIMEDT )||( this.pushNextTokens(ALL,ALL,1) && LA99_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA99_0>=ZERO_OR_ONE && LA99_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA99_0==INT )) ) {
                alt99=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA99_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA99_0==LROUNDB )) ) {
                alt99=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_99_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 99, 0, this.input);

                nvae_99_0.c = this.input.LA(1);
                throw nvae_99_0;
            }
            switch (alt99) {
                case 1 :
                    // IDP.g:1411:49: compoundSelectionOutput= ruleTimeCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollection_in_ruleTimeAggregationFunction24896);
                    this.ruleTimeCollection_DFAcall = false;

                     if( typeof this.ruleTimeAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimeAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA99 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimeCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimeCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimeCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:1411:96: LROUNDB compoundSelectionOutput= ruleTimeCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB117=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeAggregationFunction24900); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB117_tree = this.adaptor.create(LROUNDB117);
                    this.adaptor.addChild(root_0, LROUNDB117_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeCollection_in_ruleTimeAggregationFunction24907);
                    this.ruleTimeCollection_DFAcall = false;

                     if( typeof this.ruleTimeAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimeAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA99 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimeCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimeCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimeCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB118=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeAggregationFunction24909); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB118_tree = this.adaptor.create(RROUNDB118);
                    this.adaptor.addChild(root_0, RROUNDB118_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA99 !== undefined && this.failedPredictDFA99)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);if(ruleOutput.aggregationOption.isNoneValuelistAggOperator()){this.parseModelLib.getModelManger().cleanValueListAttribute();}
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeAggregationFunction";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleCompoundTimeAggregationSelection_return: (function() {
        IDPParser.ruleCompoundTimeAggregationSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCompoundTimeAggregationSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1419:1: ruleCompoundTimeAggregationSelection returns [value] : (compoundSelectionOutput= ruleTimeAggregationFunction ) ;
    // $ANTLR start "ruleCompoundTimeAggregationSelection"
    ruleCompoundTimeAggregationSelection: function() {
        this.currentRule = "ruleCompoundTimeAggregationSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCompoundTimeAggregationSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:1420:17: ( (compoundSelectionOutput= ruleTimeAggregationFunction ) )
            // IDP.g:1420:33: (compoundSelectionOutput= ruleTimeAggregationFunction )
            root_0 = this.adaptor.nil();

            // IDP.g:1420:33: (compoundSelectionOutput= ruleTimeAggregationFunction )
            // IDP.g:1420:34: compoundSelectionOutput= ruleTimeAggregationFunction
            this.pushFollow(IDPParser.FOLLOW_ruleTimeAggregationFunction_in_ruleCompoundTimeAggregationSelection25015);
            this.ruleTimeAggregationFunction_DFAcall = false;

             if( typeof this.ruleCompoundTimeAggregationSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundTimeAggregationSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCompoundTimeAggregationSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                compoundSelectionOutput=this.ruleTimeAggregationFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundTimeAggregationSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	compoundSelectionOutput=this.ruleTimeAggregationFunction();

            	}
            	}
            else{
                compoundSelectionOutput=this.ruleTimeAggregationFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCompoundTimeAggregationSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampSingleStatement_return: (function() {
        IDPParser.ruleTimestampSingleStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampSingleStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1431:1: ruleTimestampSingleStatement returns [value] : selectionLeftOutput= ruleTimestampSelectionClause ;
    // $ANTLR start "ruleTimestampSingleStatement"
    ruleTimestampSingleStatement: function() {
        this.currentRule = "ruleTimestampSingleStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampSingleStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:1434:9: (selectionLeftOutput= ruleTimestampSelectionClause )
            // IDP.g:1434:17: selectionLeftOutput= ruleTimestampSelectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatement25197);
            this.ruleTimestampSelectionClause_DFAcall = false;

             if( typeof this.ruleTimestampSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampSingleStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimestampSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimestampSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimestampSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampSingleStatement";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampSelectionClause_return: (function() {
        IDPParser.ruleTimestampSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1436:1: ruleTimestampSelectionClause returns [value] : ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB | selectionOutput= ruleTimestampArithmeticSelectionClause ) ;
    // $ANTLR start "ruleTimestampSelectionClause"
    ruleTimestampSelectionClause: function() {
        this.currentRule = "ruleTimestampSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB119 = null;
        var RROUNDB120 = null;
         var selectionOutput = null;

        var LROUNDB119_tree=null;
        var RROUNDB120_tree=null;

        try {
            // IDP.g:1437:16: ( ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB | selectionOutput= ruleTimestampArithmeticSelectionClause ) )
            // IDP.g:1437:32: ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB | selectionOutput= ruleTimestampArithmeticSelectionClause )
            root_0 = this.adaptor.nil();

            // IDP.g:1437:32: ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB | selectionOutput= ruleTimestampArithmeticSelectionClause )
            var alt100=2;

            this.ruleTimestampSelectionClause_DFAcall=(typeof this.ruleTimestampSelectionClause_DFAcall === 'undefined' ? false: this.ruleTimestampSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleTimestampSelectionClause_DFAcall === false /*&& !this.failedPredictDFA100*/)
            {   
                this.dfa100NumberOfAlt = alt100;
                this.dfa100InRule = "ruleTimestampSelectionClause";
            	this.dfa100Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimestampSelectionClauseCurrentDecisionNumber  = 100; 
                alt100 = this.dfa100.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt100 === 0 || alt100 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 100);
            		return retval;
                }
            }	
            else
                alt100 = this.dfa100AltNumber;	
            switch (alt100) {
                case 1 :
                    // IDP.g:1437:34: LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB119=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimestampSelectionClause25268); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB119_tree = this.adaptor.create(LROUNDB119);
                    this.adaptor.addChild(root_0, LROUNDB119_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampArithmeticSelectionClause_in_ruleTimestampSelectionClause25274);
                    this.ruleTimestampArithmeticSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA100 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB120=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimestampSelectionClause25276); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB120_tree = this.adaptor.create(RROUNDB120);
                    this.adaptor.addChild(root_0, RROUNDB120_tree);
                    }


                    break;
                case 2 :
                    // IDP.g:1438:34: selectionOutput= ruleTimestampArithmeticSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampArithmeticSelectionClause_in_ruleTimestampSelectionClause25318);
                    this.ruleTimestampArithmeticSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA100 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampArithmeticSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA100 !== undefined && this.failedPredictDFA100)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionOutput!==null?selectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampArithmeticSelectionClause_return: (function() {
        IDPParser.ruleTimestampArithmeticSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampArithmeticSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1441:1: ruleTimestampArithmeticSelectionClause returns [value] : ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB | selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic )? ;
    // $ANTLR start "ruleTimestampArithmeticSelectionClause"
    ruleTimestampArithmeticSelectionClause: function() {
        this.currentRule = "ruleTimestampArithmeticSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampArithmeticSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB121 = null;
        var RROUNDB122 = null;
         var selectionOutput = null;
         var arithmeticOperOutput = null;

        var LROUNDB121_tree=null;
        var RROUNDB122_tree=null;

        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1444:17: ( ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB | selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic )? )
            // IDP.g:1444:33: ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB | selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic )?
            root_0 = this.adaptor.nil();

            // IDP.g:1444:33: ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB | selectionOutput= ruleBaseTimestamp )
            var alt101=2;

            this.ruleTimestampArithmeticSelectionClause_DFAcall=(typeof this.ruleTimestampArithmeticSelectionClause_DFAcall === 'undefined' ? false: this.ruleTimestampArithmeticSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleTimestampArithmeticSelectionClause_DFAcall === false /*&& !this.failedPredictDFA101*/)
            {   
                this.dfa101NumberOfAlt = alt101;
                this.dfa101InRule = "ruleTimestampArithmeticSelectionClause";
            	this.dfa101Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber  = 101; 
                alt101 = this.dfa101.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt101 === 0 || alt101 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 101);
            		return retval;
                }
            }	
            else
                alt101 = this.dfa101AltNumber;	
            switch (alt101) {
                case 1 :
                    // IDP.g:1444:35: LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB121=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimestampArithmeticSelectionClause25485); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB121_tree = this.adaptor.create(LROUNDB121);
                    this.adaptor.addChild(root_0, LROUNDB121_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimestampArithmeticSelectionClause25491);
                    this.ruleBaseTimestamp_DFAcall = false;

                     if( typeof this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA101 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimestamp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimestamp();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimestamp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB122=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimestampArithmeticSelectionClause25493); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB122_tree = this.adaptor.create(RROUNDB122);
                    this.adaptor.addChild(root_0, RROUNDB122_tree);
                    }


                    break;
                case 2 :
                    // IDP.g:1445:34: selectionOutput= ruleBaseTimestamp
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimestampArithmeticSelectionClause25534);
                    this.ruleBaseTimestamp_DFAcall = false;

                     if( typeof this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA101 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimestamp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimestamp();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimestamp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA101 !== undefined && this.failedPredictDFA101)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
            }
            // IDP.g:1447:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic )?
            var alt102=2;

            var LA102_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA102_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA102_0==MINUS )) ) {
                var LA102_1 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred186_IDP()'.indexOf("synpred") !== -1) ||  this.synpred186_IDP()) ) {
                    alt102=1;
                }
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA102_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA102_0==PLUS )) ) {
                var LA102_3 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred186_IDP()'.indexOf("synpred") !== -1) ||  this.synpred186_IDP()) ) {
                    alt102=1;
                }
            }
            switch (alt102) {
                case 1 :
                    // IDP.g:1447:35: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimestampArithmeticSelectionClause25610);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA102 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticAfterTimestampArithmetic_in_ruleTimestampArithmeticSelectionClause25684);
                    this.ruleTimespanArithmeticAfterTimestampArithmetic_DFAcall = false;

                     if( typeof this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA102 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;

            }
            /*if(this.failedPredictDFA102 !== undefined && this.failedPredictDFA102)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampArithmeticSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampFromArithmetic_return: (function() {
        IDPParser.ruleTimestampFromArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampFromArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1455:1: ruleTimestampFromArithmetic returns [value] : ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) ) ) ;
    // $ANTLR start "ruleTimestampFromArithmetic"
    ruleTimestampFromArithmetic: function() {
        this.currentRule = "ruleTimestampFromArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampFromArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selectionClauseOutput = [];
        try {
            // IDP.g:1459:16: ( ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) ) ) )
            // IDP.g:1460:32: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1460:32: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) ) )
            // IDP.g:1460:33: (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) )
            // IDP.g:1460:33: (selectionOutput= ruleBaseDate )
            // IDP.g:1460:34: selectionOutput= ruleBaseDate
            this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimestampFromArithmetic25915);
            this.ruleBaseDate_DFAcall = false;

             if( typeof this.ruleTimestampFromArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimestampFromArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampFromArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleBaseDate();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampFromArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleBaseDate();

            	}
            	}
            else{
                selectionOutput=this.ruleBaseDate();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
            }
            // IDP.g:1461:33: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp ) )
            // IDP.g:1461:34: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleBaseTimestamp )
            this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimestampFromArithmetic25957);
            this.ruleArithmeticPlusMinus_DFAcall = false;

             if( typeof this.ruleTimestampFromArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimestampFromArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampFromArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampFromArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

            	}
            	}
            else{
                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
            }
            // IDP.g:1462:33: (selectionOutput= ruleBaseTimestamp )
            // IDP.g:1462:34: selectionOutput= ruleBaseTimestamp
            this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimestampFromArithmetic25999);
            this.ruleBaseTimestamp_DFAcall = false;

             if( typeof this.ruleTimestampFromArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimestampFromArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampFromArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleBaseTimestamp();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampFromArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleBaseTimestamp();

            	}
            	}
            else{
                selectionOutput=this.ruleBaseTimestamp();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selectionClauseOutput;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampFromArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleBaseTimestampConstant_return: (function() {
        IDPParser.ruleBaseTimestampConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseTimestampConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1485:1: ruleBaseTimestampConstant returns [value] : (selectionOutput= ruleTimestampBaseConstant ) ;
    // $ANTLR start "ruleBaseTimestampConstant"
    ruleBaseTimestampConstant: function() {
        this.currentRule = "ruleBaseTimestampConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseTimestampConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        try {
            // IDP.g:1486:17: ( (selectionOutput= ruleTimestampBaseConstant ) )
            // IDP.g:1486:33: (selectionOutput= ruleTimestampBaseConstant )
            root_0 = this.adaptor.nil();

            // IDP.g:1486:33: (selectionOutput= ruleTimestampBaseConstant )
            // IDP.g:1487:5: selectionOutput= ruleTimestampBaseConstant
            this.pushFollow(IDPParser.FOLLOW_ruleTimestampBaseConstant_in_ruleBaseTimestampConstant26382);
            this.ruleTimestampBaseConstant_DFAcall = false;

             if( typeof this.ruleBaseTimestampConstantCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimestampConstantCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleBaseTimestampConstantCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimestampBaseConstant();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimestampConstantCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimestampBaseConstant();

            	}
            	}
            else{
                selectionOutput=this.ruleTimestampBaseConstant();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionOutput!==null?selectionOutput.value:null);
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseTimestampConstant";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampBaseConstant_return: (function() {
        IDPParser.ruleTimestampBaseConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampBaseConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1491:1: ruleTimestampBaseConstant returns [value] : (selction= ruleTimestampConstantSelection ) ;
    // $ANTLR start "ruleTimestampBaseConstant"
    ruleTimestampBaseConstant: function() {
        this.currentRule = "ruleTimestampBaseConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampBaseConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:1492:17: ( (selction= ruleTimestampConstantSelection ) )
            // IDP.g:1492:33: (selction= ruleTimestampConstantSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1492:33: (selction= ruleTimestampConstantSelection )
            // IDP.g:1492:34: selction= ruleTimestampConstantSelection
            this.pushFollow(IDPParser.FOLLOW_ruleTimestampConstantSelection_in_ruleTimestampBaseConstant26466);
            this.ruleTimestampConstantSelection_DFAcall = false;

             if( typeof this.ruleTimestampBaseConstantCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBaseConstantCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampBaseConstantCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimestampConstantSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBaseConstantCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimestampConstantSelection();

            	}
            	}
            else{
                selction=this.ruleTimestampConstantSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selction!==null?selction.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampBaseConstant";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampConstantSelection_return: (function() {
        IDPParser.ruleTimestampConstantSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampConstantSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1495:1: ruleTimestampConstantSelection returns [value] : const1= timestampConstant ;
    // $ANTLR start "ruleTimestampConstantSelection"
    ruleTimestampConstantSelection: function() {
        this.currentRule = "ruleTimestampConstantSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampConstantSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var const1 = null;


        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.string;
        try {
            // IDP.g:1499:9: (const1= timestampConstant )
            // IDP.g:1499:17: const1= timestampConstant
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_timestampConstant_in_ruleTimestampConstantSelection26609);
            this.timestampConstant_DFAcall = false;

             if( typeof this.ruleTimestampConstantSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampConstantSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampConstantSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                const1=this.timestampConstant();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampConstantSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	const1=this.timestampConstant();

            	}
            	}
            else{
                const1=this.timestampConstant();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, const1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               simpleSelectiontOutput.value = (const1?this.input.toString(const1.start,const1.stop):null); simpleSelectiontOutput.originalValue = (const1?this.input.toString(const1.start,const1.stop):null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampConstantSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBaseTimestamp_return: (function() {
        IDPParser.ruleBaseTimestamp_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseTimestamp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1503:1: ruleBaseTimestamp returns [value] : (selectionOutput= ruleTimestampCompoundSelection | selectionOutput= ruleTimestampBaseSelection ) ;
    // $ANTLR start "ruleBaseTimestamp"
    ruleBaseTimestamp: function() {
        this.currentRule = "ruleBaseTimestamp";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseTimestamp_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        try {
            // IDP.g:1504:17: ( (selectionOutput= ruleTimestampCompoundSelection | selectionOutput= ruleTimestampBaseSelection ) )
            // IDP.g:1504:33: (selectionOutput= ruleTimestampCompoundSelection | selectionOutput= ruleTimestampBaseSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1504:33: (selectionOutput= ruleTimestampCompoundSelection | selectionOutput= ruleTimestampBaseSelection )
            var alt103=2;

            var LA103_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA103_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA103_0==FIRST )||( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA103_0==TYPETIMESTAMP )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA103_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA103_0>=LAST && LA103_0<=MINIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA103_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA103_0==FIRST )||( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA103_0==TYPETIMESTAMP )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA103_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA103_0>=LAST && LA103_0<=MINIMUM_OF )) ) {
                alt103=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TIMESTAMPSTRING,TOMORROW,1) && LA103_0>=TIMESTAMPSTRING && LA103_0<=TOMORROW )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TIMESTAMPSTRING,TOMORROW,1) && LA103_0>=TIMESTAMPSTRING && LA103_0<=TOMORROW )) ) {
                alt103=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_103_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 103, 0, this.input);

                nvae_103_0.c = this.input.LA(1);
                throw nvae_103_0;
            }
            switch (alt103) {
                case 1 :
                    // IDP.g:1505:33: selectionOutput= ruleTimestampCompoundSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCompoundSelection_in_ruleBaseTimestamp26704);
                    this.ruleTimestampCompoundSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimestampCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimestampCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimestampCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA103 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimestampCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:1506:35: selectionOutput= ruleTimestampBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampBaseSelection_in_ruleBaseTimestamp26746);
                    this.ruleTimestampBaseSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimestampCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimestampCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimestampCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA103 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimestampCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA103 !== undefined && this.failedPredictDFA103)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseTimestamp";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampBaseSelection_return: (function() {
        IDPParser.ruleTimestampBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1510:1: ruleTimestampBaseSelection returns [value] : (selction= ruleTimestampConstantSimpleSelection ) ;
    // $ANTLR start "ruleTimestampBaseSelection"
    ruleTimestampBaseSelection: function() {
        this.currentRule = "ruleTimestampBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:1511:17: ( (selction= ruleTimestampConstantSimpleSelection ) )
            // IDP.g:1511:33: (selction= ruleTimestampConstantSimpleSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1511:33: (selction= ruleTimestampConstantSimpleSelection )
            // IDP.g:1511:34: selction= ruleTimestampConstantSimpleSelection
            this.pushFollow(IDPParser.FOLLOW_ruleTimestampConstantSimpleSelection_in_ruleTimestampBaseSelection26830);
            this.ruleTimestampConstantSimpleSelection_DFAcall = false;

             if( typeof this.ruleTimestampBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBaseSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampBaseSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimestampConstantSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBaseSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimestampConstantSimpleSelection();

            	}
            	}
            else{
                selction=this.ruleTimestampConstantSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selction!==null?selction.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampConstantSimpleSelection_return: (function() {
        IDPParser.ruleTimestampConstantSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampConstantSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1514:1: ruleTimestampConstantSimpleSelection returns [value] : (const1= timestampConstant | const2= TIMESTAMPSTRING | const3= TYPETIMESTAMPPARAMETER );
    // $ANTLR start "ruleTimestampConstantSimpleSelection"
    ruleTimestampConstantSimpleSelection: function() {
        this.currentRule = "ruleTimestampConstantSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampConstantSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var const2 = null;
        var const3 = null;
         var const1 = null;

        var const2_tree=null;
        var const3_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.string;
        try {
            // IDP.g:1518:9: (const1= timestampConstant | const2= TIMESTAMPSTRING | const3= TYPETIMESTAMPPARAMETER )
            var alt104=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TODAY:
            case YESTERDAY:
            case TOMORROW:
                alt104=1;   
                break;
            case TIMESTAMPSTRING:
                alt104=2;   
                break;
            case TYPETIMESTAMPPARAMETER:
                alt104=3;   
                break;
            default:
            this.pushApplyTokens([TODAY,YESTERDAY,TOMORROW,TIMESTAMPSTRING,TYPETIMESTAMPPARAMETER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_104 =
            			new org.antlr.runtime.NoViableAltException(null, 104, 0, this.input);

                nvae_104.c = this.input.LA(1);
                throw nvae_104;
            }

            switch (alt104) {
                case 1 :
                    // IDP.g:1518:17: const1= timestampConstant
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_timestampConstant_in_ruleTimestampConstantSimpleSelection26973);
                    this.timestampConstant_DFAcall = false;

                     if( typeof this.ruleTimestampConstantSimpleSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampConstantSimpleSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampConstantSimpleSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA104 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        const1=this.timestampConstant();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampConstantSimpleSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	const1=this.timestampConstant();

                    	}
                    	}
                    else{
                        const1=this.timestampConstant();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, const1.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (const1?this.input.toString(const1.start,const1.stop):null); simpleSelectiontOutput.originalValue = (const1?this.input.toString(const1.start,const1.stop):null);
                    }


                    break;
                case 2 :
                    // IDP.g:1519:17: const2= TIMESTAMPSTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,1);
                    const2=this.match(this.input,TIMESTAMPSTRING,IDPParser.FOLLOW_TIMESTAMPSTRING_in_ruleTimestampConstantSimpleSelection26999); if (this.state.failed) return retval;
                    if( TIMESTAMPSTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const2_tree = this.adaptor.create(const2);
                    this.adaptor.addChild(root_0, const2_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((const2?const2.getText():null)); simpleSelectiontOutput.originalValue = (const2?const2.getText():null); this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, const2.start, (const2?const2.getText():null), this.parseModelLib.getModelManger());
                    }


                    break;
                case 3 :
                    // IDP.g:1520:17: const3= TYPETIMESTAMPPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPETIMESTAMPPARAMETER,TYPETIMESTAMPPARAMETER,1);
                    const3=this.match(this.input,TYPETIMESTAMPPARAMETER,IDPParser.FOLLOW_TYPETIMESTAMPPARAMETER_in_ruleTimestampConstantSimpleSelection27026); if (this.state.failed) return retval;
                    if( TYPETIMESTAMPPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const3_tree = this.adaptor.create(const3);
                    this.adaptor.addChild(root_0, const3_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((const3?const3.getText():null));  simpleSelectiontOutput.isParameter = true; simpleSelectiontOutput.originalValue = (const3?const3.getText():null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampConstantSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampStringSimpleSelection_return: (function() {
        IDPParser.ruleTimestampStringSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampStringSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1522:1: ruleTimestampStringSimpleSelection returns [value] : str= TIMESTAMPSTRING ;
    // $ANTLR start "ruleTimestampStringSimpleSelection"
    ruleTimestampStringSimpleSelection: function() {
        this.currentRule = "ruleTimestampStringSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampStringSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var str = null;

        var str_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.string;
        try {
            // IDP.g:1525:9: (str= TIMESTAMPSTRING )
            // IDP.g:1525:17: str= TIMESTAMPSTRING
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,1);
            str=this.match(this.input,TIMESTAMPSTRING,IDPParser.FOLLOW_TIMESTAMPSTRING_in_ruleTimestampStringSimpleSelection27134); if (this.state.failed) return retval;
            if( TIMESTAMPSTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            str_tree = this.adaptor.create(str);
            this.adaptor.addChild(root_0, str_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((str?str.getText():null)); simpleSelectiontOutput.originalValue = $strst2.text;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampStringSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampCompoundSelection_return: (function() {
        IDPParser.ruleTimestampCompoundSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampCompoundSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1528:1: ruleTimestampCompoundSelection returns [value] : (selectionOutput= ruleTimestampSelection | selectionOutput= ruleCompoundTimestampAggregationSelection | LROUNDB selectionOutput= ruleTimestampCompoundSelection RROUNDB );
    // $ANTLR start "ruleTimestampCompoundSelection"
    ruleTimestampCompoundSelection: function() {
        this.currentRule = "ruleTimestampCompoundSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampCompoundSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB123 = null;
        var RROUNDB124 = null;
         var selectionOutput = null;

        var LROUNDB123_tree=null;
        var RROUNDB124_tree=null;

        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:1530:17: (selectionOutput= ruleTimestampSelection | selectionOutput= ruleCompoundTimestampAggregationSelection | LROUNDB selectionOutput= ruleTimestampCompoundSelection RROUNDB )
            var alt105=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TYPETIMESTAMP:
            case CURRENT:
                alt105=1;   
                break;
            case FIRST:
            case LAST:
            case MOST_RECENT:
            case MAXIMUM_OF:
            case EARLIEST:
            case MINIMUM_OF:
                alt105=2;   
                break;
            case LROUNDB:
                alt105=3;   
                break;
            default:
            this.pushApplyTokens([TYPETIMESTAMP,CURRENT,FIRST,LAST,MOST_RECENT,MAXIMUM_OF,EARLIEST,MINIMUM_OF,LROUNDB]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_105 =
            			new org.antlr.runtime.NoViableAltException(null, 105, 0, this.input);

                nvae_105.c = this.input.LA(1);
                throw nvae_105;
            }

            switch (alt105) {
                case 1 :
                    // IDP.g:1530:33: selectionOutput= ruleTimestampSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelection_in_ruleTimestampCompoundSelection27223);
                    this.ruleTimestampSelection_DFAcall = false;

                     if( typeof this.ruleTimestampCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA105 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       compoundSelectionOutput.selection = (selectionOutput.value  === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.string; retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput);
                    }


                    break;
                case 2 :
                    // IDP.g:1531:33: selectionOutput= ruleCompoundTimestampAggregationSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimestampAggregationSelection_in_ruleTimestampCompoundSelection27264);
                    this.ruleCompoundTimestampAggregationSelection_DFAcall = false;

                     if( typeof this.ruleTimestampCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA105 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimestampAggregationSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimestampAggregationSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimestampAggregationSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:1532:33: LROUNDB selectionOutput= ruleTimestampCompoundSelection RROUNDB
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB123=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimestampCompoundSelection27301); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB123_tree = this.adaptor.create(LROUNDB123);
                    this.adaptor.addChild(root_0, LROUNDB123_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCompoundSelection_in_ruleTimestampCompoundSelection27307);
                    this.ruleTimestampCompoundSelection_DFAcall = false;

                     if( typeof this.ruleTimestampCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA105 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimestampCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimestampCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimestampCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB124=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimestampCompoundSelection27309); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB124_tree = this.adaptor.create(RROUNDB124);
                    this.adaptor.addChild(root_0, RROUNDB124_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampCompoundSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampSelection_return: (function() {
        IDPParser.ruleTimestampSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1535:1: ruleTimestampSelection returns [value] : ( CURRENT )? (navigationOutput= TYPETIMESTAMP ) ;
    // $ANTLR start "ruleTimestampSelection"
    ruleTimestampSelection: function() {
        this.currentRule = "ruleTimestampSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT125 = null;

        var navigationOutput_tree=null;
        var CURRENT125_tree=null;

        var selectionOutput = {}; 
        try {
            // IDP.g:1538:17: ( ( CURRENT )? (navigationOutput= TYPETIMESTAMP ) )
            // IDP.g:1538:33: ( CURRENT )? (navigationOutput= TYPETIMESTAMP )
            root_0 = this.adaptor.nil();

            // IDP.g:1538:33: ( CURRENT )?
            var alt106=2;

            var LA106_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA106_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA106_0==CURRENT )) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // IDP.g:1538:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT125=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimestampSelection27431); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT125_tree = this.adaptor.create(CURRENT125);
                    this.adaptor.addChild(root_0, CURRENT125_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA106 !== undefined && this.failedPredictDFA106)
            { 
                throw null;
            }*/

            // IDP.g:1538:81: (navigationOutput= TYPETIMESTAMP )
            // IDP.g:1538:82: navigationOutput= TYPETIMESTAMP


            this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1);
            navigationOutput=this.match(this.input,TYPETIMESTAMP,IDPParser.FOLLOW_TYPETIMESTAMP_in_ruleTimestampSelection27443); if (this.state.failed) return retval;
            if( TYPETIMESTAMP !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampBetweenDateClause_return: (function() {
        IDPParser.ruleTimestampBetweenDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampBetweenDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1540:1: ruleTimestampBetweenDateClause returns [value] : ( ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) | ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) );
    // $ANTLR start "ruleTimestampBetweenDateClause"
    ruleTimestampBetweenDateClause: function() {
        this.currentRule = "ruleTimestampBetweenDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampBetweenDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set126 = null;
        var set127 = null;
        var set128 = null;
         var dateOutput = null;

        var set126_tree=null;
        var set127_tree=null;
        var set128_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value);
                                        
        try {
            // IDP.g:1544:9: ( ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) | ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) )
            var alt107=3;
            this.ruleTimestampBetweenDateClause_DFAcall=(typeof this.ruleTimestampBetweenDateClause_DFAcall === 'undefined' ? false: this.ruleTimestampBetweenDateClause_DFAcall); // only valid for synpred
            if(this.ruleTimestampBetweenDateClause_DFAcall === false /*&& !this.failedPredictDFA107*/)
            {   
                this.dfa107NumberOfAlt = alt107;
                this.dfa107InRule = "ruleTimestampBetweenDateClause";
            	this.dfa107Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  = 107; 
                alt107 = this.dfa107.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt107 === 0 || alt107 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 107);
            		return retval;
                }
            }	
            else
                alt107 = this.dfa107AltNumber;	
            switch (alt107) {
                case 1 :
                    // IDP.g:1544:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1544:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    // IDP.g:1544:18: (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1544:18: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1544:19: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampBetweenDateClause27545);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set126=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set126));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set126_27550 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set126_27550;
                    }

                    // IDP.g:1544:107: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1544:109: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampBetweenDateClause27564);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;
                case 2 :
                    // IDP.g:1545:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1545:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
                    // IDP.g:1545:18: (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1545:18: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1545:19: dateOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimestampBetweenDateClause27595);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set127=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set127));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set127_27601 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set127_27601;
                    }

                    // IDP.g:1545:103: (dateOutput= ruleTimeSelectionClause )
                    // IDP.g:1545:104: dateOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimestampBetweenDateClause27614);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;
                case 3 :
                    // IDP.g:1546:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1546:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
                    // IDP.g:1546:18: (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1546:18: (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1546:19: dateOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleTimestampBetweenDateClause27644);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set128=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set128));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set128_27649 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set128_27649;
                    }

                    // IDP.g:1546:102: (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1546:103: dateOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleTimestampBetweenDateClause27662);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampBetweenDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampSingleStatementComparison_return: (function() {
        IDPParser.ruleTimestampSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1548:1: ruleTimestampSingleStatementComparison returns [value] : selectionLeftOutput= ruleTimestampSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) ) ;
    // $ANTLR start "ruleTimestampSingleStatementComparison"
    ruleTimestampSingleStatementComparison: function() {
        this.currentRule = "ruleTimestampSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;
         var comparisonOutput = null;
         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:1555:17: (selectionLeftOutput= ruleTimestampSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) ) )
            // IDP.g:1555:20: selectionLeftOutput= ruleTimestampSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) )
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatementComparison27823);
            this.ruleTimestampSelectionClause_DFAcall = false;

             if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimestampSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimestampSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimestampSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }
            // IDP.g:1557:1: ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause ) | (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison ) )
            var alt108=5;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt108=1;   
                break;
            case IS_IN_THE_LAST:
            case IS_NOT_IN_THE_LAST:
            case IS_IN_THE_NEXT:
            case IS_NOT_IN_THE_NEXT:
                alt108=2;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt108=3;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
                alt108=4;   
                break;
            case IS_BEFORE:
            case BEFORE:
            case IS_NOT_BEFORE:
            case IS_AFTER:
            case AFTER:
            case IS_NOT_AFTER:
                alt108=5;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_IN_THE_LAST,IS_NOT_IN_THE_LAST,IS_IN_THE_NEXT,IS_NOT_IN_THE_NEXT,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN,IS_BEFORE,BEFORE,IS_NOT_BEFORE,IS_AFTER,AFTER,IS_NOT_AFTER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_108 =
            			new org.antlr.runtime.NoViableAltException(null, 108, 0, this.input);

                nvae_108.c = this.input.LA(1);
                throw nvae_108;
            }

            switch (alt108) {
                case 1 :
                    // IDP.g:1558:5: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues )
                    // IDP.g:1558:5: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues )
                    // IDP.g:1558:6: comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleTimestampSingleStatementComparison27855);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSetOfValues_in_ruleTimestampSingleStatementComparison27871);
                    this.ruleDateSetOfValues_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 2 :
                    // IDP.g:1565:5: (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause )
                    // IDP.g:1565:5: (comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause )
                    // IDP.g:1565:6: comparisonOutput= intervalOp rightSelectionOutput= ruleTimespanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_intervalOp_in_ruleTimestampSingleStatementComparison27896);
                    this.intervalOp_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.intervalOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.intervalOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.intervalOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimestampSingleStatementComparison27912);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 3 :
                    // IDP.g:1572:5: (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause )
                    // IDP.g:1572:5: (comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause )
                    // IDP.g:1572:6: comparisonOutput= betweenOp rightSelectionOutput= ruleTimestampBetweenDateClause
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleTimestampSingleStatementComparison27929);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampBetweenDateClause_in_ruleTimestampSingleStatementComparison27945);
                    this.ruleTimestampBetweenDateClause_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimestampBetweenDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimestampBetweenDateClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimestampBetweenDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 4 :
                    // IDP.g:1579:5: (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison )
                    // IDP.g:1579:5: (comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison )
                    // IDP.g:1579:6: comparisonOutput= ruleNumericComparisonOption rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOption_in_ruleTimestampSingleStatementComparison27962);
                    this.ruleNumericComparisonOption_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleNumericComparisonOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleNumericComparisonOption();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleNumericComparisonOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementNumericRelativeComparison_in_ruleTimestampSingleStatementComparison27978);
                    this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;
                case 5 :
                    // IDP.g:1585:5: (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison )
                    // IDP.g:1585:5: (comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison )
                    // IDP.g:1585:6: comparisonOutput= relativeDateClauseOp rightSelectionOutput= ruleTimestampSingleStatementNumericRelativeComparison
                    this.pushFollow(IDPParser.FOLLOW_relativeDateClauseOp_in_ruleTimestampSingleStatementComparison28010);
                    this.relativeDateClauseOp_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.relativeDateClauseOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.relativeDateClauseOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.relativeDateClauseOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                              
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementNumericRelativeComparison_in_ruleTimestampSingleStatementComparison28025);
                    this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimestampSingleStatementNumericRelativeComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }





                    break;

            }
            /*if(this.failedPredictDFA108 !== undefined && this.failedPredictDFA108)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((selectionLeftOutput?this.input.toString(selectionLeftOutput.start,selectionLeftOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampSingleStatementNumericRelativeComparison_return: (function() {
        IDPParser.ruleTimestampSingleStatementNumericRelativeComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampSingleStatementNumericRelativeComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1594:1: ruleTimestampSingleStatementNumericRelativeComparison returns [value] : ( ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) ) ) ;
    // $ANTLR start "ruleTimestampSingleStatementNumericRelativeComparison"
    ruleTimestampSingleStatementNumericRelativeComparison: function() {
        this.currentRule = "ruleTimestampSingleStatementNumericRelativeComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampSingleStatementNumericRelativeComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:1597:17: ( ( ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) ) ) )
            // IDP.g:1599:1: ( ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1599:1: ( ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) ) )
            // IDP.g:1600:9: ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) )
            // IDP.g:1600:9: ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) )
            var alt109=3;

            this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall=(typeof this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall === 'undefined' ? false: this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall); // only valid for synpred
            if(this.ruleTimestampSingleStatementNumericRelativeComparison_DFAcall === false /*&& !this.failedPredictDFA109*/)
            {   
                this.dfa109NumberOfAlt = alt109;
                this.dfa109InRule = "ruleTimestampSingleStatementNumericRelativeComparison";
            	this.dfa109Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber  = 109; 
                alt109 = this.dfa109.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt109 === 0 || alt109 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 109);
            		return retval;
                }
            }	
            else
                alt109 = this.dfa109AltNumber;	
            switch (alt109) {
                case 1 :
                    // IDP.g:1600:10: (rightSelectionOutput= ruleDateSelectionClause )
                    // IDP.g:1600:10: (rightSelectionOutput= ruleDateSelectionClause )
                    // IDP.g:1600:12: rightSelectionOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28190);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }


                    break;
                case 2 :
                    // IDP.g:1603:9: (rightSelectionOutput= ruleTimestampSelectionClause )
                    // IDP.g:1603:9: (rightSelectionOutput= ruleTimestampSelectionClause )
                    // IDP.g:1603:11: rightSelectionOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28212);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }


                    break;
                case 3 :
                    // IDP.g:1606:9: (rightSelectionOutput= ruleTimeSelectionClause )
                    // IDP.g:1606:9: (rightSelectionOutput= ruleTimeSelectionClause )
                    // IDP.g:1606:11: rightSelectionOutput= ruleTimeSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28234);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber !== 'undefined' && this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampSingleStatementNumericRelativeComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }


                    break;

            }
            /*if(this.failedPredictDFA109 !== undefined && this.failedPredictDFA109)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = singleStatementOutput;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampSingleStatementNumericRelativeComparison";
        }
        return retval;
    },

    // inline static return class
    timestampConstant_return: (function() {
        IDPParser.timestampConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.timestampConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1611:1: timestampConstant returns [value] : dateOutput= ( TODAY | YESTERDAY | TOMORROW ) ;
    // $ANTLR start "timestampConstant"
    timestampConstant: function() {
        this.currentRule = "timestampConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.timestampConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var dateOutput = null;

        var dateOutput_tree=null;

        try {
            // IDP.g:1613:25: (dateOutput= ( TODAY | YESTERDAY | TOMORROW ) )
            // IDP.g:1613:49: dateOutput= ( TODAY | YESTERDAY | TOMORROW )
            root_0 = this.adaptor.nil();

            dateOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(TODAY,TOMORROW,1) && this.input.LA(1)>=TODAY && this.input.LA(1)<=TOMORROW ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(dateOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_dateOutput_28363 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_dateOutput_28363;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = this.constantsLib.DATE_VALUE_TYPES.getByValue("string", (dateOutput?dateOutput.getText():null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "timestampConstant";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampCollectionSelectionClause_return: (function() {
        IDPParser.ruleTimestampCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1616:1: ruleTimestampCollectionSelectionClause returns [value] : collection= ruleTimestampCollection ;
    // $ANTLR start "ruleTimestampCollectionSelectionClause"
    ruleTimestampCollectionSelectionClause: function() {
        this.currentRule = "ruleTimestampCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var collection = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1619:25: (collection= ruleTimestampCollection )
            // IDP.g:1619:49: collection= ruleTimestampCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_ruleTimestampCollectionSelectionClause28531);
            this.ruleTimestampCollection_DFAcall = false;

             if( typeof this.ruleTimestampCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                collection=this.ruleTimestampCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	collection=this.ruleTimestampCollection();

            	}
            	}
            else{
                collection=this.ruleTimestampCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((collection!==null?collection.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleTimestampCollectionContext_return: (function() {
        IDPParser.ruleTimestampCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1626:1: ruleTimestampCollectionContext returns [value] : navigationOutput= TYPETIMESTAMPCOLLECTION ;
    // $ANTLR start "ruleTimestampCollectionContext"
    ruleTimestampCollectionContext: function() {
        this.currentRule = "ruleTimestampCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1627:25: (navigationOutput= TYPETIMESTAMPCOLLECTION )
            // IDP.g:1627:49: navigationOutput= TYPETIMESTAMPCOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1);
            navigationOutput=this.match(this.input,TYPETIMESTAMPCOLLECTION,IDPParser.FOLLOW_TYPETIMESTAMPCOLLECTION_in_ruleTimestampCollectionContext28684); if (this.state.failed) return retval;
            if( TYPETIMESTAMPCOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimestampContext_return: (function() {
        IDPParser.ruleTimestampContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1634:1: ruleTimestampContext returns [value] : navigationOutput= TYPETIMESTAMP ;
    // $ANTLR start "ruleTimestampContext"
    ruleTimestampContext: function() {
        this.currentRule = "ruleTimestampContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1635:25: (navigationOutput= TYPETIMESTAMP )
            // IDP.g:1635:49: navigationOutput= TYPETIMESTAMP
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1);
            navigationOutput=this.match(this.input,TYPETIMESTAMP,IDPParser.FOLLOW_TYPETIMESTAMP_in_ruleTimestampContext28803); if (this.state.failed) return retval;
            if( TYPETIMESTAMP !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimestampAliasDTCollectionContext_return: (function() {
        IDPParser.ruleTimestampAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1642:1: ruleTimestampAliasDTCollectionContext returns [value] : navigationOutput= TYPEDATEDT ;
    // $ANTLR start "ruleTimestampAliasDTCollectionContext"
    ruleTimestampAliasDTCollectionContext: function() {
        this.currentRule = "ruleTimestampAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:1643:25: (navigationOutput= TYPEDATEDT )
            // IDP.g:1643:49: navigationOutput= TYPEDATEDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1);
            navigationOutput=this.match(this.input,TYPEDATEDT,IDPParser.FOLLOW_TYPEDATEDT_in_ruleTimestampAliasDTCollectionContext28939); if (this.state.failed) return retval;
            if( TYPEDATEDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimestampCollection_return: (function() {
        IDPParser.ruleTimestampCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1650:1: ruleTimestampCollection returns [value] : ( ( ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleTimestampAliasDTCollectionContext ) );
    // $ANTLR start "ruleTimestampCollection"
    ruleTimestampCollection: function() {
        this.currentRule = "ruleTimestampCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT129 = null;
        var OF130 = null;
        var CURRENT131 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;
         var navigationOutputDT = null;

        var CURRENT129_tree=null;
        var OF130_tree=null;
        var CURRENT131_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:1661:17: ( ( ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleTimestampAliasDTCollectionContext ) )
            var alt117=2;
            var LA117_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA117_0==CURRENT )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA117_0==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA117_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA117_0>=ZERO_OR_ONE && LA117_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA117_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA117_0==CURRENT )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA117_0==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(ALL,ALL,1) && LA117_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA117_0>=ZERO_OR_ONE && LA117_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA117_0==INT )) ) {
                alt117=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA117_0==TYPEDATEDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA117_0==TYPEDATEDT )) ) {
                alt117=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_117_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 117, 0, this.input);

                nvae_117_0.c = this.input.LA(1);
                throw nvae_117_0;
            }
            switch (alt117) {
                case 1 :
                    // IDP.g:1661:33: ( ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) ) (flt= filterClause )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1661:33: ( ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) ) (flt= filterClause )? )
                    // IDP.g:1661:34: ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) ) (flt= filterClause )?
                    // IDP.g:1661:34: ( ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) )
                    var alt115=3;

                    	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
                    case CURRENT:
                    case TYPETIMESTAMPCOLLECTION:
                        alt115=1;   
                        break;
                    case ZERO_OR_ONE:
                    case TYPENUMBERPARAMETER:
                    case INT:
                        alt115=2;   
                        break;
                    case ALL:
                        alt115=3;   
                        break;
                    default:
                    this.pushApplyTokens([CURRENT,TYPETIMESTAMPCOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
                    	//this.pushApplyTokens();
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_115 =
                    			new org.antlr.runtime.NoViableAltException(null, 115, 0, this.input);

                        nvae_115.c = this.input.LA(1);
                        throw nvae_115;
                    }

                    switch (alt115) {
                        case 1 :
                            // IDP.g:1662:49: ( CURRENT )? (navigationOutput= ruleTimestampCollectionContext )
                            // IDP.g:1662:49: ( CURRENT )?
                            var alt110=2;

                            var LA110_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA110_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA110_0==CURRENT )) ) {
                                alt110=1;
                            }
                            switch (alt110) {
                                case 1 :
                                    // IDP.g:1662:50: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT129=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimestampCollection29166); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT129_tree = this.adaptor.create(CURRENT129);
                                    this.adaptor.addChild(root_0, CURRENT129_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA110 !== undefined && this.failedPredictDFA110)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1662:97: (navigationOutput= ruleTimestampCollectionContext )
                            // IDP.g:1662:98: navigationOutput= ruleTimestampCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29178);
                            this.ruleTimestampCollectionContext_DFAcall = false;

                             if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimestampCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimestampCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimestampCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;
                        case 2 :
                            // IDP.g:1663:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1663:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:1663:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( CURRENT )? ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) ) (order= ruleSortingOptions )
                            // IDP.g:1663:34: (quantity= ruleInteger )
                            // IDP.g:1663:35: quantity= ruleInteger
                            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleTimestampCollection29224);
                            this.ruleInteger_DFAcall = false;

                             if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                quantity=this.ruleInteger();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	quantity=this.ruleInteger();

                            	}
                            	}
                            else{
                                quantity=this.ruleInteger();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                            }



                            // IDP.g:1663:113: ( OF rall= ruleAll )?
                            var alt111=2;

                            var LA111_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA111_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA111_0==OF )) ) {
                                alt111=1;
                            }
                            switch (alt111) {
                                case 1 :
                                    // IDP.g:1663:114: OF rall= ruleAll


                                    this.pushNextTokens(OF,OF,1);
                                    OF130=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleTimestampCollection29230); if (this.state.failed) return retval;
                                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    OF130_tree = this.adaptor.create(OF130);
                                    this.adaptor.addChild(root_0, OF130_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimestampCollection29236);
                                    this.ruleAll_DFAcall = false;

                                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA111 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        rall=this.ruleAll();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	rall=this.ruleAll();

                                    	}
                                    	}
                                    else{
                                        rall=this.ruleAll();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA111 !== undefined && this.failedPredictDFA111)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1663:221: ( CURRENT )?
                            var alt112=2;

                            var LA112_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA112_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA112_0==CURRENT )) ) {
                                alt112=1;
                            }
                            switch (alt112) {
                                case 1 :
                                    // IDP.g:1663:222: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT131=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimestampCollection29244); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT131_tree = this.adaptor.create(CURRENT131);
                                    this.adaptor.addChild(root_0, CURRENT131_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA112 !== undefined && this.failedPredictDFA112)
                            { 
                                throw null;
                            }*/

                            // IDP.g:1663:269: ( (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) )
                            // IDP.g:1663:270: (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext )
                            // IDP.g:1663:270: (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext )
                            var alt113=2;

                            var LA113_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA113_0==TYPETIMESTAMP )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA113_0==TYPETIMESTAMP )) ) {
                                alt113=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA113_0==TYPETIMESTAMPCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA113_0==TYPETIMESTAMPCOLLECTION )) ) {
                                alt113=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_113_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 113, 0, this.input);

                                nvae_113_0.c = this.input.LA(1);
                                throw nvae_113_0;
                            }
                            switch (alt113) {
                                case 1 :
                                    // IDP.g:1663:271: navigationOutput= ruleTimestampContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampContext_in_ruleTimestampCollection29257);
                                    this.ruleTimestampContext_DFAcall = false;

                                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA113 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimestampContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimestampContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimestampContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1663:313: navigationOutput= ruleTimestampCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29265);
                                    this.ruleTimestampCollectionContext_DFAcall = false;

                                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA113 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimestampCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimestampCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimestampCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA113 !== undefined && this.failedPredictDFA113)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }



                            // IDP.g:1664:61: (order= ruleSortingOptions )
                            // IDP.g:1664:62: order= ruleSortingOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleTimestampCollection29337);
                            this.ruleSortingOptions_DFAcall = false;

                             if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                order=this.ruleSortingOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	order=this.ruleSortingOptions();

                            	}
                            	}
                            else{
                                order=this.ruleSortingOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                            }



                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                            }





                            break;
                        case 3 :
                            // IDP.g:1665:49: ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) )
                            // IDP.g:1665:49: ( (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext ) )
                            // IDP.g:1665:50: (rall= ruleAll ) (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext )
                            // IDP.g:1665:50: (rall= ruleAll )
                            // IDP.g:1665:51: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimestampCollection29401);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                            }



                            // IDP.g:1665:126: (navigationOutput= ruleTimestampContext | navigationOutput= ruleTimestampCollectionContext )
                            var alt114=2;

                            var LA114_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA114_0==TYPETIMESTAMP )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMESTAMP,TYPETIMESTAMP,1) && LA114_0==TYPETIMESTAMP )) ) {
                                alt114=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA114_0==TYPETIMESTAMPCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,1) && LA114_0==TYPETIMESTAMPCOLLECTION )) ) {
                                alt114=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_114_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 114, 0, this.input);

                                nvae_114_0.c = this.input.LA(1);
                                throw nvae_114_0;
                            }
                            switch (alt114) {
                                case 1 :
                                    // IDP.g:1665:127: navigationOutput= ruleTimestampContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampContext_in_ruleTimestampCollection29411);
                                    this.ruleTimestampContext_DFAcall = false;

                                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA114 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimestampContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimestampContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimestampContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:1665:169: navigationOutput= ruleTimestampCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29419);
                                    this.ruleTimestampCollectionContext_DFAcall = false;

                                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA114 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleTimestampCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleTimestampCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleTimestampCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA114 !== undefined && this.failedPredictDFA114)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA115 !== undefined && this.failedPredictDFA115)
                    { 
                        throw null;
                    }*/

                    // IDP.g:1668:33: (flt= filterClause )?
                    var alt116=2;

                    var LA116_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA116_0>=WHERE && LA116_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA116_0>=WHERE && LA116_0<=FILTER_BY )) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // IDP.g:1668:34: flt= filterClause
                            this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleTimestampCollection29562);
                            this.filterClause_DFAcall = false;

                             if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA116 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                flt=this.filterClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	flt=this.filterClause();

                            	}
                            	}
                            else{
                                flt=this.filterClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.filterClause = (flt!==null?flt.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA116 !== undefined && this.failedPredictDFA116)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1669:35: (navigationOutputDT= ruleTimestampAliasDTCollectionContext )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1669:35: (navigationOutputDT= ruleTimestampAliasDTCollectionContext )
                    // IDP.g:1669:36: navigationOutputDT= ruleTimestampAliasDTCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampAliasDTCollectionContext_in_ruleTimestampCollection29610);
                    this.ruleTimestampAliasDTCollectionContext_DFAcall = false;

                     if( typeof this.ruleTimestampCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutputDT=this.ruleTimestampAliasDTCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutputDT=this.ruleTimestampAliasDTCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutputDT=this.ruleTimestampAliasDTCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimestampAggregationFunction_return: (function() {
        IDPParser.ruleTimestampAggregationFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimestampAggregationFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1672:1: ruleTimestampAggregationFunction returns [value] : ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB ) ) ;
    // $ANTLR start "ruleTimestampAggregationFunction"
    ruleTimestampAggregationFunction: function() {
        this.currentRule = "ruleTimestampAggregationFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimestampAggregationFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB132 = null;
        var RROUNDB133 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB132_tree=null;
        var RROUNDB133_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; var ruleOutput = {};  var aggregationOperatorArgs = {};                                     
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESTAMP.value;
                                        
        try {
            // IDP.g:1677:17: ( ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB ) ) )
            // IDP.g:1677:33: ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1677:33: ( (aggregationOptionOutput= collectionAggregationOption ) )
            // IDP.g:1678:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:1678:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:1678:51: aggregationOptionOutput= collectionAggregationOption
            this.pushFollow(IDPParser.FOLLOW_collectionAggregationOption_in_ruleTimestampAggregationFunction29838);
            this.collectionAggregationOption_DFAcall = false;

             if( typeof this.ruleTimestampAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampAggregationFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimestampAggregationFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.collectionAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampAggregationFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.collectionAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.collectionAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }



            // IDP.g:1680:34: ( (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB ) )
            // IDP.g:1681:48: (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB )
            // IDP.g:1681:48: (compoundSelectionOutput= ruleTimestampCollection | LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB )
            var alt118=2;

            var LA118_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA118_0==CURRENT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA118_0>=TYPETIMESTAMPCOLLECTION && LA118_0<=TYPEDATEDT )||( this.pushNextTokens(ALL,ALL,1) && LA118_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA118_0>=ZERO_OR_ONE && LA118_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA118_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA118_0==CURRENT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA118_0>=TYPETIMESTAMPCOLLECTION && LA118_0<=TYPEDATEDT )||( this.pushNextTokens(ALL,ALL,1) && LA118_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA118_0>=ZERO_OR_ONE && LA118_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA118_0==INT )) ) {
                alt118=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA118_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA118_0==LROUNDB )) ) {
                alt118=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_118_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 118, 0, this.input);

                nvae_118_0.c = this.input.LA(1);
                throw nvae_118_0;
            }
            switch (alt118) {
                case 1 :
                    // IDP.g:1681:49: compoundSelectionOutput= ruleTimestampCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_ruleTimestampAggregationFunction29968);
                    this.ruleTimestampCollection_DFAcall = false;

                     if( typeof this.ruleTimestampAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA118 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimestampCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:1681:101: LROUNDB compoundSelectionOutput= ruleTimestampCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB132=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimestampAggregationFunction29972); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB132_tree = this.adaptor.create(LROUNDB132);
                    this.adaptor.addChild(root_0, LROUNDB132_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_ruleTimestampAggregationFunction29979);
                    this.ruleTimestampCollection_DFAcall = false;

                     if( typeof this.ruleTimestampAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimestampAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimestampAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA118 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimestampAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimestampCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimestampCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB133=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimestampAggregationFunction29981); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB133_tree = this.adaptor.create(RROUNDB133);
                    this.adaptor.addChild(root_0, RROUNDB133_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA118 !== undefined && this.failedPredictDFA118)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);if(ruleOutput.aggregationOption.isNoneValuelistAggOperator()){this.parseModelLib.getModelManger().cleanValueListAttribute();}
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimestampAggregationFunction";

            			if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            					  this.parseModelLib.getModelManger().popFromContextQueue();
            			}
            		 
        }
        return retval;
    },

    // inline static return class
    ruleCompoundTimestampAggregationSelection_return: (function() {
        IDPParser.ruleCompoundTimestampAggregationSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCompoundTimestampAggregationSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1689:1: ruleCompoundTimestampAggregationSelection returns [value] : (compoundSelectionOutput= ruleTimestampAggregationFunction ) ;
    // $ANTLR start "ruleCompoundTimestampAggregationSelection"
    ruleCompoundTimestampAggregationSelection: function() {
        this.currentRule = "ruleCompoundTimestampAggregationSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCompoundTimestampAggregationSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:1690:17: ( (compoundSelectionOutput= ruleTimestampAggregationFunction ) )
            // IDP.g:1690:33: (compoundSelectionOutput= ruleTimestampAggregationFunction )
            root_0 = this.adaptor.nil();

            // IDP.g:1690:33: (compoundSelectionOutput= ruleTimestampAggregationFunction )
            // IDP.g:1690:34: compoundSelectionOutput= ruleTimestampAggregationFunction
            this.pushFollow(IDPParser.FOLLOW_ruleTimestampAggregationFunction_in_ruleCompoundTimestampAggregationSelection30086);
            this.ruleTimestampAggregationFunction_DFAcall = false;

             if( typeof this.ruleCompoundTimestampAggregationSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundTimestampAggregationSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCompoundTimestampAggregationSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                compoundSelectionOutput=this.ruleTimestampAggregationFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundTimestampAggregationSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	compoundSelectionOutput=this.ruleTimestampAggregationFunction();

            	}
            	}
            else{
                compoundSelectionOutput=this.ruleTimestampAggregationFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCompoundTimestampAggregationSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateSelectionClause_return: (function() {
        IDPParser.ruleDateSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1698:1: ruleDateSelectionClause returns [value] : ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB | selectionOutput= ruleDateArithmeticSelectionClause ) ;
    // $ANTLR start "ruleDateSelectionClause"
    ruleDateSelectionClause: function() {
        this.currentRule = "ruleDateSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB134 = null;
        var RROUNDB135 = null;
         var selectionOutput = null;

        var LROUNDB134_tree=null;
        var RROUNDB135_tree=null;

        try {
            // IDP.g:1699:16: ( ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB | selectionOutput= ruleDateArithmeticSelectionClause ) )
            // IDP.g:1699:32: ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB | selectionOutput= ruleDateArithmeticSelectionClause )
            root_0 = this.adaptor.nil();

            // IDP.g:1699:32: ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB | selectionOutput= ruleDateArithmeticSelectionClause )
            var alt119=2;

            this.ruleDateSelectionClause_DFAcall=(typeof this.ruleDateSelectionClause_DFAcall === 'undefined' ? false: this.ruleDateSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleDateSelectionClause_DFAcall === false /*&& !this.failedPredictDFA119*/)
            {   
                this.dfa119NumberOfAlt = alt119;
                this.dfa119InRule = "ruleDateSelectionClause";
            	this.dfa119Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleDateSelectionClauseCurrentDecisionNumber  = 119; 
                alt119 = this.dfa119.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt119 === 0 || alt119 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 119);
            		return retval;
                }
            }	
            else
                alt119 = this.dfa119AltNumber;	
            switch (alt119) {
                case 1 :
                    // IDP.g:1699:34: LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB134=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateSelectionClause30252); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB134_tree = this.adaptor.create(LROUNDB134);
                    this.adaptor.addChild(root_0, LROUNDB134_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleDateArithmeticSelectionClause_in_ruleDateSelectionClause30258);
                    this.ruleDateArithmeticSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA119 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateArithmeticSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateArithmeticSelectionClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateArithmeticSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB135=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateSelectionClause30260); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB135_tree = this.adaptor.create(RROUNDB135);
                    this.adaptor.addChild(root_0, RROUNDB135_tree);
                    }


                    break;
                case 2 :
                    // IDP.g:1700:34: selectionOutput= ruleDateArithmeticSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateArithmeticSelectionClause_in_ruleDateSelectionClause30301);
                    this.ruleDateArithmeticSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA119 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateArithmeticSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateArithmeticSelectionClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateArithmeticSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA119 !== undefined && this.failedPredictDFA119)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionOutput!==null?selectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleDateArithmeticSelectionClause_return: (function() {
        IDPParser.ruleDateArithmeticSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateArithmeticSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1706:1: ruleDateArithmeticSelectionClause returns [value] : ( LROUNDB selectionOutput= ruleBaseDate RROUNDB | selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic )? ;
    // $ANTLR start "ruleDateArithmeticSelectionClause"
    ruleDateArithmeticSelectionClause: function() {
        this.currentRule = "ruleDateArithmeticSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateArithmeticSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB136 = null;
        var RROUNDB137 = null;
         var selectionOutput = null;
         var arithmeticOperOutput = null;

        var LROUNDB136_tree=null;
        var RROUNDB137_tree=null;

        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1709:17: ( ( LROUNDB selectionOutput= ruleBaseDate RROUNDB | selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic )? )
            // IDP.g:1709:33: ( LROUNDB selectionOutput= ruleBaseDate RROUNDB | selectionOutput= ruleBaseDate ) (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic )?
            root_0 = this.adaptor.nil();

            // IDP.g:1709:33: ( LROUNDB selectionOutput= ruleBaseDate RROUNDB | selectionOutput= ruleBaseDate )
            var alt120=2;

            this.ruleDateArithmeticSelectionClause_DFAcall=(typeof this.ruleDateArithmeticSelectionClause_DFAcall === 'undefined' ? false: this.ruleDateArithmeticSelectionClause_DFAcall); // only valid for synpred
            if(this.ruleDateArithmeticSelectionClause_DFAcall === false /*&& !this.failedPredictDFA120*/)
            {   
                this.dfa120NumberOfAlt = alt120;
                this.dfa120InRule = "ruleDateArithmeticSelectionClause";
            	this.dfa120Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber  = 120; 
                alt120 = this.dfa120.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt120 === 0 || alt120 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 120);
            		return retval;
                }
            }	
            else
                alt120 = this.dfa120AltNumber;	
            switch (alt120) {
                case 1 :
                    // IDP.g:1709:35: LROUNDB selectionOutput= ruleBaseDate RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB136=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateArithmeticSelectionClause30470); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB136_tree = this.adaptor.create(LROUNDB136);
                    this.adaptor.addChild(root_0, LROUNDB136_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleDateArithmeticSelectionClause30476);
                    this.ruleBaseDate_DFAcall = false;

                     if( typeof this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA120 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseDate();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseDate();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseDate();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB137=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateArithmeticSelectionClause30478); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB137_tree = this.adaptor.create(RROUNDB137);
                    this.adaptor.addChild(root_0, RROUNDB137_tree);
                    }


                    break;
                case 2 :
                    // IDP.g:1710:34: selectionOutput= ruleBaseDate
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleDateArithmeticSelectionClause30519);
                    this.ruleBaseDate_DFAcall = false;

                     if( typeof this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA120 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseDate();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseDate();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseDate();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA120 !== undefined && this.failedPredictDFA120)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
            }
            // IDP.g:1712:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic )?
            var alt121=2;

            var LA121_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA121_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA121_0==MINUS )) ) {
                var LA121_1 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred218_IDP()'.indexOf("synpred") !== -1) ||  this.synpred218_IDP()) ) {
                    alt121=1;
                }
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA121_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA121_0==PLUS )) ) {
                var LA121_3 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred218_IDP()'.indexOf("synpred") !== -1) ||  this.synpred218_IDP()) ) {
                    alt121=1;
                }
            }
            switch (alt121) {
                case 1 :
                    // IDP.g:1712:35: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleDateArithmeticSelectionClause30595);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA121 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push(((arithmeticOperOutput!==null?arithmeticOperOutput.value:null) === undefined ?null: (arithmeticOperOutput!==null?arithmeticOperOutput.value:null)));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticAfterDateArithmetic_in_ruleDateArithmeticSelectionClause30669);
                    this.ruleTimespanArithmeticAfterDateArithmetic_DFAcall = false;

                     if( typeof this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA121 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateArithmeticSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
                    }


                    break;

            }
            /*if(this.failedPredictDFA121 !== undefined && this.failedPredictDFA121)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateArithmeticSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleBaseDate_return: (function() {
        IDPParser.ruleBaseDate_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseDate_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1717:1: ruleBaseDate returns [value] : (selectionOutput= ruleDateCompoundSelection | selectionOutput= ruleDateBaseSelection ) ;
    // $ANTLR start "ruleBaseDate"
    ruleBaseDate: function() {
        this.currentRule = "ruleBaseDate";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseDate_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        try {
            // IDP.g:1718:17: ( (selectionOutput= ruleDateCompoundSelection | selectionOutput= ruleDateBaseSelection ) )
            // IDP.g:1718:33: (selectionOutput= ruleDateCompoundSelection | selectionOutput= ruleDateBaseSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1718:33: (selectionOutput= ruleDateCompoundSelection | selectionOutput= ruleDateBaseSelection )
            var alt122=2;

            var LA122_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA122_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA122_0==FIRST )||( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA122_0==TYPEDATE )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA122_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA122_0>=LAST && LA122_0<=MINIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA122_0==LROUNDB )||( this.pushNextTokens(FIRST,FIRST,1) && LA122_0==FIRST )||( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA122_0==TYPEDATE )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA122_0==CURRENT )||(  this.pushNextTokens(LAST,MINIMUM_OF,1) && LA122_0>=LAST && LA122_0<=MINIMUM_OF )) ) {
                alt122=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TODAY,TOMORROW,1) && LA122_0>=TODAY && LA122_0<=TOMORROW )||(  this.pushNextTokens(DATESTRING,TYPEDATEPARAMETER,1) && LA122_0>=DATESTRING && LA122_0<=TYPEDATEPARAMETER )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TODAY,TOMORROW,1) && LA122_0>=TODAY && LA122_0<=TOMORROW )||(  this.pushNextTokens(DATESTRING,TYPEDATEPARAMETER,1) && LA122_0>=DATESTRING && LA122_0<=TYPEDATEPARAMETER )) ) {
                alt122=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_122_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 122, 0, this.input);

                nvae_122_0.c = this.input.LA(1);
                throw nvae_122_0;
            }
            switch (alt122) {
                case 1 :
                    // IDP.g:1719:33: selectionOutput= ruleDateCompoundSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleDateCompoundSelection_in_ruleBaseDate30792);
                    this.ruleDateCompoundSelection_DFAcall = false;

                     if( typeof this.ruleBaseDateCurrentDecisionNumber !== 'undefined' && this.ruleBaseDateCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseDateCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA122 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseDateCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:1722:35: selectionOutput= ruleDateBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleDateBaseSelection_in_ruleBaseDate30900);
                    this.ruleDateBaseSelection_DFAcall = false;

                     if( typeof this.ruleBaseDateCurrentDecisionNumber !== 'undefined' && this.ruleBaseDateCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseDateCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA122 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseDateCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA122 !== undefined && this.failedPredictDFA122)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseDate";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSpanFromDateSubtractionWithBrackets_return: (function() {
        IDPParser.ruleTimeSpanFromDateSubtractionWithBrackets_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSpanFromDateSubtractionWithBrackets_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1726:1: ruleTimeSpanFromDateSubtractionWithBrackets returns [value] : LROUNDB selectionOutput= ruleTimeSpanFromDateSubtraction RROUNDB ;
    // $ANTLR start "ruleTimeSpanFromDateSubtractionWithBrackets"
    ruleTimeSpanFromDateSubtractionWithBrackets: function() {
        this.currentRule = "ruleTimeSpanFromDateSubtractionWithBrackets";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSpanFromDateSubtractionWithBrackets_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB138 = null;
        var RROUNDB139 = null;
         var selectionOutput = null;

        var LROUNDB138_tree=null;
        var RROUNDB139_tree=null;

        try {
            // IDP.g:1726:68: ( LROUNDB selectionOutput= ruleTimeSpanFromDateSubtraction RROUNDB )
            // IDP.g:1727:11: LROUNDB selectionOutput= ruleTimeSpanFromDateSubtraction RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB138=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeSpanFromDateSubtractionWithBrackets30998); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB138_tree = this.adaptor.create(LROUNDB138);
            this.adaptor.addChild(root_0, LROUNDB138_tree);
            }
            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtraction_in_ruleTimeSpanFromDateSubtractionWithBrackets31004);
            this.ruleTimeSpanFromDateSubtraction_DFAcall = false;

             if( typeof this.ruleTimeSpanFromDateSubtractionWithBracketsCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromDateSubtractionWithBracketsCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSpanFromDateSubtractionWithBracketsCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimeSpanFromDateSubtraction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromDateSubtractionWithBracketsCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimeSpanFromDateSubtraction();

            	}
            	}
            else{
                selectionOutput=this.ruleTimeSpanFromDateSubtraction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB139=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeSpanFromDateSubtractionWithBrackets31006); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB139_tree = this.adaptor.create(RROUNDB139);
            this.adaptor.addChild(root_0, RROUNDB139_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionOutput!==null?selectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSpanFromDateSubtractionWithBrackets";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSpanFromTimestampSubtractionWithBrackets_return: (function() {
        IDPParser.ruleTimeSpanFromTimestampSubtractionWithBrackets_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSpanFromTimestampSubtractionWithBrackets_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1730:1: ruleTimeSpanFromTimestampSubtractionWithBrackets returns [value] : LROUNDB selectionOutput= ruleTimeSpanFromTimestampSubtraction RROUNDB ;
    // $ANTLR start "ruleTimeSpanFromTimestampSubtractionWithBrackets"
    ruleTimeSpanFromTimestampSubtractionWithBrackets: function() {
        this.currentRule = "ruleTimeSpanFromTimestampSubtractionWithBrackets";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSpanFromTimestampSubtractionWithBrackets_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB140 = null;
        var RROUNDB141 = null;
         var selectionOutput = null;

        var LROUNDB140_tree=null;
        var RROUNDB141_tree=null;

        try {
            // IDP.g:1730:73: ( LROUNDB selectionOutput= ruleTimeSpanFromTimestampSubtraction RROUNDB )
            // IDP.g:1731:11: LROUNDB selectionOutput= ruleTimeSpanFromTimestampSubtraction RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB140=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31047); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB140_tree = this.adaptor.create(LROUNDB140);
            this.adaptor.addChild(root_0, LROUNDB140_tree);
            }
            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31053);
            this.ruleTimeSpanFromTimestampSubtraction_DFAcall = false;

             if( typeof this.ruleTimeSpanFromTimestampSubtractionWithBracketsCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionWithBracketsCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionWithBracketsCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionWithBracketsCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            	}
            	}
            else{
                selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB141=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31055); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB141_tree = this.adaptor.create(RROUNDB141);
            this.adaptor.addChild(root_0, RROUNDB141_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionOutput!==null?selectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSpanFromTimestampSubtractionWithBrackets";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSpanFromDateSubtraction_return: (function() {
        IDPParser.ruleTimeSpanFromDateSubtraction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSpanFromDateSubtraction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1734:1: ruleTimeSpanFromDateSubtraction returns [value] : ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) ) ;
    // $ANTLR start "ruleTimeSpanFromDateSubtraction"
    ruleTimeSpanFromDateSubtraction: function() {
        this.currentRule = "ruleTimeSpanFromDateSubtraction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSpanFromDateSubtraction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperOutput = null;
         var selectionOutput = null;

        var arithmeticOperOutput_tree=null;

        var selectionClauseOutput = [];
        try {
            // IDP.g:1738:16: ( ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) ) )
            // IDP.g:1739:32: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1739:32: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) )
            // IDP.g:1739:33: (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) )
            // IDP.g:1739:33: (selectionOutput= ruleBaseDate )
            // IDP.g:1739:34: selectionOutput= ruleBaseDate
            this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimeSpanFromDateSubtraction31257);
            this.ruleBaseDate_DFAcall = false;

             if( typeof this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleBaseDate();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleBaseDate();

            	}
            	}
            else{
                selectionOutput=this.ruleBaseDate();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
            }
            // IDP.g:1740:33: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) )
            // IDP.g:1740:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate )


            this.pushNextTokens(MINUS,MINUS,1);
            arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleTimeSpanFromDateSubtraction31299); if (this.state.failed) return retval;
            if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            arithmeticOperOutput_tree = this.adaptor.create(arithmeticOperOutput);
            this.adaptor.addChild(root_0, arithmeticOperOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var arithObj = new this.entityModelLib.ArithmeticOperator((arithmeticOperOutput?arithmeticOperOutput.getText():null)) ;selectionClauseOutput.push(arithObj);
            }
            // IDP.g:1741:33: (selectionOutput= ruleBaseDate )
            // IDP.g:1741:34: selectionOutput= ruleBaseDate
            this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimeSpanFromDateSubtraction31341);
            this.ruleBaseDate_DFAcall = false;

             if( typeof this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleBaseDate();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromDateSubtractionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleBaseDate();

            	}
            	}
            else{
                selectionOutput=this.ruleBaseDate();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selectionClauseOutput;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSpanFromDateSubtraction";
        }
        return retval;
    },

    // inline static return class
    ruleTimeSpanFromTimestampSubtraction_return: (function() {
        IDPParser.ruleTimeSpanFromTimestampSubtraction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimeSpanFromTimestampSubtraction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1746:1: ruleTimeSpanFromTimestampSubtraction returns [value] : ( ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) ) | ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) ) | ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) ) );
    // $ANTLR start "ruleTimeSpanFromTimestampSubtraction"
    ruleTimeSpanFromTimestampSubtraction: function() {
        this.currentRule = "ruleTimeSpanFromTimestampSubtraction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimeSpanFromTimestampSubtraction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperOutput = null;
         var selectionOutput = null;

        var arithmeticOperOutput_tree=null;

        var selectionClauseOutput = [];
        try {
            // IDP.g:1749:16: ( ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) ) | ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) ) | ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) ) )
            var alt124=3;
            this.ruleTimeSpanFromTimestampSubtraction_DFAcall=(typeof this.ruleTimeSpanFromTimestampSubtraction_DFAcall === 'undefined' ? false: this.ruleTimeSpanFromTimestampSubtraction_DFAcall); // only valid for synpred
            if(this.ruleTimeSpanFromTimestampSubtraction_DFAcall === false /*&& !this.failedPredictDFA124*/)
            {   
                this.dfa124NumberOfAlt = alt124;
                this.dfa124InRule = "ruleTimeSpanFromTimestampSubtraction";
            	this.dfa124Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  = 124; 
                alt124 = this.dfa124.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt124 === 0 || alt124 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 124);
            		return retval;
                }
            }	
            else
                alt124 = this.dfa124AltNumber;	
            switch (alt124) {
                case 1 :
                    // IDP.g:1750:19: ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1750:19: ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) )
                    // IDP.g:1751:22: (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) )
                    // IDP.g:1751:22: (selectionOutput= ruleBaseTimestampConstant )
                    // IDP.g:1751:23: selectionOutput= ruleBaseTimestampConstant
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestampConstant_in_ruleTimeSpanFromTimestampSubtraction31533);
                    this.ruleBaseTimestampConstant_DFAcall = false;

                     if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimestampConstant();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimestampConstant();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimestampConstant();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
                    }
                    // IDP.g:1752:36: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) )
                    // IDP.g:1753:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )


                    this.pushNextTokens(MINUS,MINUS,1);
                    arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction31612); if (this.state.failed) return retval;
                    if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    arithmeticOperOutput_tree = this.adaptor.create(arithmeticOperOutput);
                    this.adaptor.addChild(root_0, arithmeticOperOutput_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var arithObj = new this.entityModelLib.ArithmeticOperator((arithmeticOperOutput?arithmeticOperOutput.getText():null)) ;selectionClauseOutput.push(arithObj);
                    }
                    // IDP.g:1754:34: (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )
                    var alt123=2;

                    this.ruleTimeSpanFromTimestampSubtraction_DFAcall=(typeof this.ruleTimeSpanFromTimestampSubtraction_DFAcall === 'undefined' ? false: this.ruleTimeSpanFromTimestampSubtraction_DFAcall); // only valid for synpred
                    if(this.ruleTimeSpanFromTimestampSubtraction_DFAcall === false /*&& !this.failedPredictDFA123*/)
                    {   
                        this.dfa123NumberOfAlt = alt123;
                        this.dfa123InRule = "ruleTimeSpanFromTimestampSubtraction";
                    	this.dfa123Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  = 123; 
                        alt123 = this.dfa123.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt123 === 0 || alt123 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 123);
                    		return retval;
                        }
                    }	
                    else
                        alt123 = this.dfa123AltNumber;	
                    switch (alt123) {
                        case 1 :
                            // IDP.g:1754:35: selectionOutput= ruleBaseTimestamp
                            this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31655);
                            this.ruleBaseTimestamp_DFAcall = false;

                             if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA123 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput=this.ruleBaseTimestamp();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput=this.ruleBaseTimestamp();

                            	}
                            	}
                            else{
                                selectionOutput=this.ruleBaseTimestamp();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:1754:73: selectionOutput= ruleBaseDate
                            this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction31663);
                            this.ruleBaseDate_DFAcall = false;

                             if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA123 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput=this.ruleBaseDate();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput=this.ruleBaseDate();

                            	}
                            	}
                            else{
                                selectionOutput=this.ruleBaseDate();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA123 !== undefined && this.failedPredictDFA123)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;
                case 2 :
                    // IDP.g:1758:32: ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1758:32: ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) )
                    // IDP.g:1758:33: (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) )
                    // IDP.g:1758:33: (selectionOutput= ruleBaseTimestamp )
                    // IDP.g:1758:34: selectionOutput= ruleBaseTimestamp
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31825);
                    this.ruleBaseTimestamp_DFAcall = false;

                     if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimestamp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimestamp();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimestamp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
                    }
                    // IDP.g:1759:33: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) )
                    // IDP.g:1759:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp )


                    this.pushNextTokens(MINUS,MINUS,1);
                    arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction31867); if (this.state.failed) return retval;
                    if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    arithmeticOperOutput_tree = this.adaptor.create(arithmeticOperOutput);
                    this.adaptor.addChild(root_0, arithmeticOperOutput_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var arithObj = new this.entityModelLib.ArithmeticOperator((arithmeticOperOutput?arithmeticOperOutput.getText():null)) ;selectionClauseOutput.push(arithObj);
                    }
                    // IDP.g:1760:33: (selectionOutput= ruleBaseTimestamp )
                    // IDP.g:1760:34: selectionOutput= ruleBaseTimestamp
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31909);
                    this.ruleBaseTimestamp_DFAcall = false;

                     if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimestamp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimestamp();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimestamp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;
                case 3 :
                    // IDP.g:1762:33: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1762:33: ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) )
                    // IDP.g:1762:34: (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) )
                    // IDP.g:1762:34: (selectionOutput= ruleBaseDate )
                    // IDP.g:1762:35: selectionOutput= ruleBaseDate
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction31989);
                    this.ruleBaseDate_DFAcall = false;

                     if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseDate();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseDate();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseDate();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push(((selectionOutput!==null?selectionOutput.value:null) === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)));
                    }
                    // IDP.g:1763:33: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) )
                    // IDP.g:1763:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate )


                    this.pushNextTokens(MINUS,MINUS,1);
                    arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction32031); if (this.state.failed) return retval;
                    if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    arithmeticOperOutput_tree = this.adaptor.create(arithmeticOperOutput);
                    this.adaptor.addChild(root_0, arithmeticOperOutput_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var arithObj = new this.entityModelLib.ArithmeticOperator((arithmeticOperOutput?arithmeticOperOutput.getText():null)) ;selectionClauseOutput.push(arithObj);
                    }
                    // IDP.g:1764:33: (selectionOutput= ruleBaseDate )
                    // IDP.g:1764:34: selectionOutput= ruleBaseDate
                    this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction32073);
                    this.ruleBaseDate_DFAcall = false;

                     if( typeof this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseDate();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimeSpanFromTimestampSubtractionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseDate();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseDate();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selectionClauseOutput;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimeSpanFromTimestampSubtraction";
        }
        return retval;
    },

    // inline static return class
    ruleDateBaseSelection_return: (function() {
        IDPParser.ruleDateBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1796:1: ruleDateBaseSelection returns [value] : (selction= ruleDateConstantSimpleSelection ) ;
    // $ANTLR start "ruleDateBaseSelection"
    ruleDateBaseSelection: function() {
        this.currentRule = "ruleDateBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:1797:17: ( (selction= ruleDateConstantSimpleSelection ) )
            // IDP.g:1797:33: (selction= ruleDateConstantSimpleSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:1797:33: (selction= ruleDateConstantSimpleSelection )
            // IDP.g:1797:34: selction= ruleDateConstantSimpleSelection
            this.pushFollow(IDPParser.FOLLOW_ruleDateConstantSimpleSelection_in_ruleDateBaseSelection32162);
            this.ruleDateConstantSimpleSelection_DFAcall = false;

             if( typeof this.ruleDateBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleDateBaseSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleDateBaseSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleDateConstantSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateBaseSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleDateConstantSimpleSelection();

            	}
            	}
            else{
                selction=this.ruleDateConstantSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selction!==null?selction.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateConstantSimpleSelection_return: (function() {
        IDPParser.ruleDateConstantSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateConstantSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1800:1: ruleDateConstantSimpleSelection returns [value] : (const1= dateConstant | const2= DATESTRING | const3= TYPEDATEPARAMETER );
    // $ANTLR start "ruleDateConstantSimpleSelection"
    ruleDateConstantSimpleSelection: function() {
        this.currentRule = "ruleDateConstantSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateConstantSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var const2 = null;
        var const3 = null;
         var const1 = null;

        var const2_tree=null;
        var const3_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.string;
        try {
            // IDP.g:1804:9: (const1= dateConstant | const2= DATESTRING | const3= TYPEDATEPARAMETER )
            var alt125=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TODAY:
            case YESTERDAY:
            case TOMORROW:
                alt125=1;   
                break;
            case DATESTRING:
                alt125=2;   
                break;
            case TYPEDATEPARAMETER:
                alt125=3;   
                break;
            default:
            this.pushApplyTokens([TODAY,YESTERDAY,TOMORROW,DATESTRING,TYPEDATEPARAMETER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_125 =
            			new org.antlr.runtime.NoViableAltException(null, 125, 0, this.input);

                nvae_125.c = this.input.LA(1);
                throw nvae_125;
            }

            switch (alt125) {
                case 1 :
                    // IDP.g:1804:17: const1= dateConstant
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_dateConstant_in_ruleDateConstantSimpleSelection32305);
                    this.dateConstant_DFAcall = false;

                     if( typeof this.ruleDateConstantSimpleSelectionCurrentDecisionNumber !== 'undefined' && this.ruleDateConstantSimpleSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateConstantSimpleSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA125 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        const1=this.dateConstant();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateConstantSimpleSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	const1=this.dateConstant();

                    	}
                    	}
                    else{
                        const1=this.dateConstant();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, const1.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (const1?this.input.toString(const1.start,const1.stop):null); simpleSelectiontOutput.originalValue = (const1?this.input.toString(const1.start,const1.stop):null);
                    }


                    break;
                case 2 :
                    // IDP.g:1805:17: const2= DATESTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(DATESTRING,DATESTRING,1);
                    const2=this.match(this.input,DATESTRING,IDPParser.FOLLOW_DATESTRING_in_ruleDateConstantSimpleSelection32331); if (this.state.failed) return retval;
                    if( DATESTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const2_tree = this.adaptor.create(const2);
                    this.adaptor.addChild(root_0, const2_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((const2?const2.getText():null)); simpleSelectiontOutput.originalValue = (const2?const2.getText():null);this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, const2.start, (const2?const2.getText():null), this.parseModelLib.getModelManger());
                    }


                    break;
                case 3 :
                    // IDP.g:1806:17: const3= TYPEDATEPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPEDATEPARAMETER,TYPEDATEPARAMETER,1);
                    const3=this.match(this.input,TYPEDATEPARAMETER,IDPParser.FOLLOW_TYPEDATEPARAMETER_in_ruleDateConstantSimpleSelection32358); if (this.state.failed) return retval;
                    if( TYPEDATEPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    const3_tree = this.adaptor.create(const3);
                    this.adaptor.addChild(root_0, const3_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((const3?const3.getText():null));  simpleSelectiontOutput.isParameter = true; simpleSelectiontOutput.originalValue = (const3?const3.getText():null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateConstantSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateStringSimpleSelection_return: (function() {
        IDPParser.ruleDateStringSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateStringSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1808:1: ruleDateStringSimpleSelection returns [value] : str= DATESTRING ;
    // $ANTLR start "ruleDateStringSimpleSelection"
    ruleDateStringSimpleSelection: function() {
        this.currentRule = "ruleDateStringSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateStringSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var str = null;

        var str_tree=null;

        var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;  simpleSelectiontOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.string;
        try {
            // IDP.g:1811:9: (str= DATESTRING )
            // IDP.g:1811:17: str= DATESTRING
            root_0 = this.adaptor.nil();



            this.pushNextTokens(DATESTRING,DATESTRING,1);
            str=this.match(this.input,DATESTRING,IDPParser.FOLLOW_DATESTRING_in_ruleDateStringSimpleSelection32466); if (this.state.failed) return retval;
            if( DATESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            str_tree = this.adaptor.create(str);
            this.adaptor.addChild(root_0, str_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               simpleSelectiontOutput.value = this.parseModelLib.getModelManger().getDateTimeObject((str?str.getText():null)); simpleSelectiontOutput.originalValue = (str?str.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateStringSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateCompoundSelection_return: (function() {
        IDPParser.ruleDateCompoundSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateCompoundSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1814:1: ruleDateCompoundSelection returns [value] : (selectionOutput= ruleDateSelection | selectionOutput= ruleCompoundDateAggregationSelection | LROUNDB selectionOutput= ruleDateCompoundSelection RROUNDB );
    // $ANTLR start "ruleDateCompoundSelection"
    ruleDateCompoundSelection: function() {
        this.currentRule = "ruleDateCompoundSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateCompoundSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB142 = null;
        var RROUNDB143 = null;
         var selectionOutput = null;

        var LROUNDB142_tree=null;
        var RROUNDB143_tree=null;

        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:1816:17: (selectionOutput= ruleDateSelection | selectionOutput= ruleCompoundDateAggregationSelection | LROUNDB selectionOutput= ruleDateCompoundSelection RROUNDB )
            var alt126=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TYPEDATE:
            case CURRENT:
                alt126=1;   
                break;
            case FIRST:
            case LAST:
            case MOST_RECENT:
            case MAXIMUM_OF:
            case EARLIEST:
            case MINIMUM_OF:
                alt126=2;   
                break;
            case LROUNDB:
                alt126=3;   
                break;
            default:
            this.pushApplyTokens([TYPEDATE,CURRENT,FIRST,LAST,MOST_RECENT,MAXIMUM_OF,EARLIEST,MINIMUM_OF,LROUNDB]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_126 =
            			new org.antlr.runtime.NoViableAltException(null, 126, 0, this.input);

                nvae_126.c = this.input.LA(1);
                throw nvae_126;
            }

            switch (alt126) {
                case 1 :
                    // IDP.g:1816:33: selectionOutput= ruleDateSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelection_in_ruleDateCompoundSelection32555);
                    this.ruleDateSelection_DFAcall = false;

                     if( typeof this.ruleDateCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA126 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       compoundSelectionOutput.selection = (selectionOutput.value  === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.string; retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput);
                    }


                    break;
                case 2 :
                    // IDP.g:1817:33: selectionOutput= ruleCompoundDateAggregationSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundDateAggregationSelection_in_ruleDateCompoundSelection32596);
                    this.ruleCompoundDateAggregationSelection_DFAcall = false;

                     if( typeof this.ruleDateCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA126 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundDateAggregationSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundDateAggregationSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundDateAggregationSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:1818:33: LROUNDB selectionOutput= ruleDateCompoundSelection RROUNDB
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB142=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateCompoundSelection32633); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB142_tree = this.adaptor.create(LROUNDB142);
                    this.adaptor.addChild(root_0, LROUNDB142_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleDateCompoundSelection_in_ruleDateCompoundSelection32639);
                    this.ruleDateCompoundSelection_DFAcall = false;

                     if( typeof this.ruleDateCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCompoundSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCompoundSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA126 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleDateCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCompoundSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleDateCompoundSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleDateCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB143=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateCompoundSelection32641); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB143_tree = this.adaptor.create(RROUNDB143);
                    this.adaptor.addChild(root_0, RROUNDB143_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateCompoundSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateSelection_return: (function() {
        IDPParser.ruleDateSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1821:1: ruleDateSelection returns [value] : ( CURRENT )? (navigationOutput= TYPEDATE ) ;
    // $ANTLR start "ruleDateSelection"
    ruleDateSelection: function() {
        this.currentRule = "ruleDateSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT144 = null;

        var navigationOutput_tree=null;
        var CURRENT144_tree=null;

        var selectionOutput = {}; 
        try {
            // IDP.g:1824:17: ( ( CURRENT )? (navigationOutput= TYPEDATE ) )
            // IDP.g:1824:33: ( CURRENT )? (navigationOutput= TYPEDATE )
            root_0 = this.adaptor.nil();

            // IDP.g:1824:33: ( CURRENT )?
            var alt127=2;

            var LA127_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA127_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA127_0==CURRENT )) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // IDP.g:1824:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT144=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleDateSelection32763); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT144_tree = this.adaptor.create(CURRENT144);
                    this.adaptor.addChild(root_0, CURRENT144_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA127 !== undefined && this.failedPredictDFA127)
            { 
                throw null;
            }*/

            // IDP.g:1824:80: (navigationOutput= TYPEDATE )
            // IDP.g:1824:81: navigationOutput= TYPEDATE


            this.pushNextTokens(TYPEDATE,TYPEDATE,1);
            navigationOutput=this.match(this.input,TYPEDATE,IDPParser.FOLLOW_TYPEDATE_in_ruleDateSelection32774); if (this.state.failed) return retval;
            if( TYPEDATE !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSelection";
        }
        return retval;
    },

    // inline static return class
    ruleDateSetOfValues_return: (function() {
        IDPParser.ruleDateSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1827:1: ruleDateSetOfValues returns [value] : LROUNDB ( ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? ) | ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) ) ) RROUNDB ;
    // $ANTLR start "ruleDateSetOfValues"
    ruleDateSetOfValues: function() {
        this.currentRule = "ruleDateSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB145 = null;
        var SEMICOLON146 = null;
        var RROUNDB147 = null;
         var dateOutput = null;

        var LROUNDB145_tree=null;
        var SEMICOLON146_tree=null;
        var RROUNDB147_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value);
                                        
        try {
            // IDP.g:1831:9: ( LROUNDB ( ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? ) | ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) ) ) RROUNDB )
            // IDP.g:1831:18: LROUNDB ( ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? ) | ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB145=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateSetOfValues32887); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB145_tree = this.adaptor.create(LROUNDB145);
            this.adaptor.addChild(root_0, LROUNDB145_tree);
            }
            // IDP.g:1831:26: ( ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? ) | ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) ) )
            var alt133=2;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case LROUNDB:
            case FIRST:
            case TYPEDATE:
            case TYPETIMESTAMP:
            case LAST:
            case MOST_RECENT:
            case MAXIMUM_OF:
            case EARLIEST:
            case MINIMUM_OF:
            case TIMESTAMPSTRING:
            case TYPETIMESTAMPPARAMETER:
            case TODAY:
            case YESTERDAY:
            case TOMORROW:
            case DATESTRING:
            case TYPEDATEPARAMETER:
                alt133=1;   
                break;
            case CURRENT:
                var LA133_2 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPEDATE,TYPETIMESTAMP,2) && LA133_2>=TYPEDATE && LA133_2<=TYPETIMESTAMP )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPEDATE,TYPETIMESTAMP,2) && LA133_2>=TYPEDATE && LA133_2<=TYPETIMESTAMP )) ) {
                    alt133=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,2) && LA133_2==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,2) && LA133_2==TYPEDATECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,2) && LA133_2==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,2) && LA133_2==TYPEDATECOLLECTION )) ) {
                    alt133=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_133_2 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 133, 2, this.input);

                    nvae_133_2.c = this.input.LA(2);
                    throw nvae_133_2;
                }   
                break;
            case TYPETIMESTAMPCOLLECTION:
            case TYPEDATEDT:
            case TYPEDATECOLLECTION:
            case ALL:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt133=2;   
                break;
            default:
            this.pushApplyTokens([LROUNDB,FIRST,TYPEDATE,TYPETIMESTAMP,LAST,MOST_RECENT,MAXIMUM_OF,EARLIEST,MINIMUM_OF,TIMESTAMPSTRING,TYPETIMESTAMPPARAMETER,TODAY,YESTERDAY,TOMORROW,DATESTRING,TYPEDATEPARAMETER,CURRENT,TYPETIMESTAMPCOLLECTION,TYPEDATEDT,TYPEDATECOLLECTION,ALL,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_133 =
            			new org.antlr.runtime.NoViableAltException(null, 133, 0, this.input);

                nvae_133.c = this.input.LA(1);
                throw nvae_133;
            }

            switch (alt133) {
                case 1 :
                    // IDP.g:1831:27: ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? )
                    // IDP.g:1831:27: ( ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )? )
                    // IDP.g:1831:28: ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) ) ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )?
                    // IDP.g:1831:28: ( (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )
                    // IDP.g:1831:29: (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1831:29: (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )
                    var alt128=2;

                    this.ruleDateSetOfValues_DFAcall=(typeof this.ruleDateSetOfValues_DFAcall === 'undefined' ? false: this.ruleDateSetOfValues_DFAcall); // only valid for synpred
                    if(this.ruleDateSetOfValues_DFAcall === false /*&& !this.failedPredictDFA128*/)
                    {   
                        this.dfa128NumberOfAlt = alt128;
                        this.dfa128InRule = "ruleDateSetOfValues";
                    	this.dfa128Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleDateSetOfValuesCurrentDecisionNumber  = 128; 
                        alt128 = this.dfa128.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt128 === 0 || alt128 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 128);
                    		return retval;
                        }
                    }	
                    else
                        alt128 = this.dfa128AltNumber;	
                    switch (alt128) {
                        case 1 :
                            // IDP.g:1831:30: dateOutput= ruleDateSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateSetOfValues32897);
                            this.ruleDateSelectionClause_DFAcall = false;

                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA128 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                dateOutput=this.ruleDateSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	dateOutput=this.ruleDateSelectionClause();

                            	}
                            	}
                            else{
                                dateOutput=this.ruleDateSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:1831:69: dateOutput= ruleTimestampSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleDateSetOfValues32905);
                            this.ruleTimestampSelectionClause_DFAcall = false;

                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA128 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                dateOutput=this.ruleTimestampSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	dateOutput=this.ruleTimestampSelectionClause();

                            	}
                            	}
                            else{
                                dateOutput=this.ruleTimestampSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA128 !== undefined && this.failedPredictDFA128)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    // IDP.g:1832:17: ( ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+ )?
                    var alt131=2;

                    var LA131_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA131_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA131_0==SEMICOLON )) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // IDP.g:1832:18: ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+
                            // IDP.g:1832:18: ( SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause ) )+
                            var cnt130=0;
                            loop130:
                            do {
                                var alt130=2;
                                var LA130_0 = this.input.LA(1);


                                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA130_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA130_0==SEMICOLON )) ) {
                                    alt130=1;
                                }


                                switch (alt130) {
                                case 1 :
                                    // IDP.g:1832:19: SEMICOLON (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )


                                    this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                                    SEMICOLON146=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleDateSetOfValues32931); if (this.state.failed) return retval;
                                    if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    SEMICOLON146_tree = this.adaptor.create(SEMICOLON146);
                                    this.adaptor.addChild(root_0, SEMICOLON146_tree);
                                    }
                                    // IDP.g:1832:29: (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )
                                    var alt129=2;

                                    this.ruleDateSetOfValues_DFAcall=(typeof this.ruleDateSetOfValues_DFAcall === 'undefined' ? false: this.ruleDateSetOfValues_DFAcall); // only valid for synpred
                                    if(this.ruleDateSetOfValues_DFAcall === false /*&& !this.failedPredictDFA129*/)
                                    {   
                                        this.dfa129NumberOfAlt = alt129;
                                        this.dfa129InRule = "ruleDateSetOfValues";
                                    	this.dfa129Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                                    	this.ruleDateSetOfValuesCurrentDecisionNumber  = 129; 
                                        alt129 = this.dfa129.predict(this.input);
                                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt129 === 0 || alt129 === EOF)) {
                                    		this.parseUtilsLib.handleAllDFAOptions(this, 129);
                                    		return retval;
                                        }
                                    }	
                                    else
                                        alt129 = this.dfa129AltNumber;	
                                    switch (alt129) {
                                        case 1 :
                                            // IDP.g:1832:30: dateOutput= ruleDateSelectionClause
                                            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateSetOfValues32938);
                                            this.ruleDateSelectionClause_DFAcall = false;

                                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                                            {
                                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                                            	if(/*typeof this.failedPredictDFA129 !== 'undefined' &&*/ this[test2] === false )
                                            	{
                                            	try {
                                                dateOutput=this.ruleDateSelectionClause();

                                            	} catch (e) {
                                            		var nvae = 
                                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                                            		nvae.c = this.input.LA(1);
                                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                            		throw nvae;

                                            	}
                                            	}
                                            	else{
                                            	dateOutput=this.ruleDateSelectionClause();

                                            	}
                                            	}
                                            else{
                                                dateOutput=this.ruleDateSelectionClause();

                                            }
                                            this.state.a_fsp--;
                                            if (this.state.failed) return retval;
                                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                                            break;
                                        case 2 :
                                            // IDP.g:1832:69: dateOutput= ruleTimestampSelectionClause
                                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleDateSetOfValues32946);
                                            this.ruleTimestampSelectionClause_DFAcall = false;

                                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                                            {
                                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                                            	if(/*typeof this.failedPredictDFA129 !== 'undefined' &&*/ this[test2] === false )
                                            	{
                                            	try {
                                                dateOutput=this.ruleTimestampSelectionClause();

                                            	} catch (e) {
                                            		var nvae = 
                                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                                            		nvae.c = this.input.LA(1);
                                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                            		throw nvae;

                                            	}
                                            	}
                                            	else{
                                            	dateOutput=this.ruleTimestampSelectionClause();

                                            	}
                                            	}
                                            else{
                                                dateOutput=this.ruleTimestampSelectionClause();

                                            }
                                            this.state.a_fsp--;
                                            if (this.state.failed) return retval;
                                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                                            break;

                                    }
                                    /*if(this.failedPredictDFA129 !== undefined && this.failedPredictDFA129)
                                    { 
                                        throw null;
                                    }*/

                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                                    }


                                    break;

                                default :
                                    if ( cnt130 >= 1 ) {
                                        break loop130;
                                    }
                                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                        var eee_130 = new org.antlr.runtime.EarlyExitException(130, this.input);
                                        throw eee_130;
                                }
                                cnt130++;
                            } while (true);



                            break;

                    }
                    /*if(this.failedPredictDFA131 !== undefined && this.failedPredictDFA131)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:1832:154: ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) )
                    // IDP.g:1832:154: ( (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause ) )
                    // IDP.g:1832:155: (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause )
                    // IDP.g:1832:155: (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause )
                    var alt132=2;

                    this.ruleDateSetOfValues_DFAcall=(typeof this.ruleDateSetOfValues_DFAcall === 'undefined' ? false: this.ruleDateSetOfValues_DFAcall); // only valid for synpred
                    if(this.ruleDateSetOfValues_DFAcall === false /*&& !this.failedPredictDFA132*/)
                    {   
                        this.dfa132NumberOfAlt = alt132;
                        this.dfa132InRule = "ruleDateSetOfValues";
                    	this.dfa132Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleDateSetOfValuesCurrentDecisionNumber  = 132; 
                        alt132 = this.dfa132.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt132 === 0 || alt132 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 132);
                    		return retval;
                        }
                    }	
                    else
                        alt132 = this.dfa132AltNumber;	
                    switch (alt132) {
                        case 1 :
                            // IDP.g:1832:156: dateOutput= ruleDateCollectionSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionSelectionClause_in_ruleDateSetOfValues32965);
                            this.ruleDateCollectionSelectionClause_DFAcall = false;

                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA132 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                dateOutput=this.ruleDateCollectionSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	dateOutput=this.ruleDateCollectionSelectionClause();

                            	}
                            	}
                            else{
                                dateOutput=this.ruleDateCollectionSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:1832:205: dateOutput= ruleTimestampCollectionSelectionClause
                            this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollectionSelectionClause_in_ruleDateSetOfValues32973);
                            this.ruleTimestampCollectionSelectionClause_DFAcall = false;

                             if( typeof this.ruleDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleDateSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA132 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                dateOutput=this.ruleTimestampCollectionSelectionClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	dateOutput=this.ruleTimestampCollectionSelectionClause();

                            	}
                            	}
                            else{
                                dateOutput=this.ruleTimestampCollectionSelectionClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA132 !== undefined && this.failedPredictDFA132)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA133 !== undefined && this.failedPredictDFA133)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB147=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateSetOfValues32981); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB147_tree = this.adaptor.create(RROUNDB147);
            this.adaptor.addChild(root_0, RROUNDB147_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleDateBetweenDateClause_return: (function() {
        IDPParser.ruleDateBetweenDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateBetweenDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1834:1: ruleDateBetweenDateClause returns [value] : ( ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) );
    // $ANTLR start "ruleDateBetweenDateClause"
    ruleDateBetweenDateClause: function() {
        this.currentRule = "ruleDateBetweenDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateBetweenDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var set148 = null;
        var set149 = null;
         var dateOutput = null;

        var set148_tree=null;
        var set149_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                       retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value);
                                        
        try {
            // IDP.g:1838:9: ( ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) )
            var alt134=2;
            this.ruleDateBetweenDateClause_DFAcall=(typeof this.ruleDateBetweenDateClause_DFAcall === 'undefined' ? false: this.ruleDateBetweenDateClause_DFAcall); // only valid for synpred
            if(this.ruleDateBetweenDateClause_DFAcall === false /*&& !this.failedPredictDFA134*/)
            {   
                this.dfa134NumberOfAlt = alt134;
                this.dfa134InRule = "ruleDateBetweenDateClause";
            	this.dfa134Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleDateBetweenDateClauseCurrentDecisionNumber  = 134; 
                alt134 = this.dfa134.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt134 === 0 || alt134 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 134);
            		return retval;
                }
            }	
            else
                alt134 = this.dfa134AltNumber;	
            switch (alt134) {
                case 1 :
                    // IDP.g:1838:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1838:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
                    // IDP.g:1838:19: (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1838:19: (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1838:20: dateOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateBetweenDateClause33087);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set148=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set148));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set148_33093 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set148_33093;
                    }

                    // IDP.g:1838:104: (dateOutput= ruleDateSelectionClause )
                    // IDP.g:1838:105: dateOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateBetweenDateClause33106);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;
                case 2 :
                    // IDP.g:1839:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1839:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
                    // IDP.g:1839:19: (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1839:19: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1839:20: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleDateBetweenDateClause33138);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }



                    set149=this.input.LT(1);
                    if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set149));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_set149_33143 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_set149_33143;
                    }

                    // IDP.g:1839:108: (dateOutput= ruleTimestampSelectionClause )
                    // IDP.g:1839:109: dateOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleDateBetweenDateClause33156);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateBetweenDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateBetweenDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateBetweenDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        dateOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateBetweenDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	dateOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        dateOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, dateOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((dateOutput!==null?dateOutput.value:null));
                    }








                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateBetweenDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleDateSingleStatement_return: (function() {
        IDPParser.ruleDateSingleStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSingleStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1842:1: ruleDateSingleStatement returns [value] : selectionLeftOutput= ruleDateSelectionClause ;
    // $ANTLR start "ruleDateSingleStatement"
    ruleDateSingleStatement: function() {
        this.currentRule = "ruleDateSingleStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSingleStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:1845:9: (selectionLeftOutput= ruleDateSelectionClause )
            // IDP.g:1845:17: selectionLeftOutput= ruleDateSelectionClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatement33339);
            this.ruleDateSelectionClause_DFAcall = false;

             if( typeof this.ruleDateSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleDateSingleStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleDateSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleDateSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleDateSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSingleStatement";
        }
        return retval;
    },

    // inline static return class
    ruleDateSingleStatementComparison_return: (function() {
        IDPParser.ruleDateSingleStatementComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSingleStatementComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1847:1: ruleDateSingleStatementComparison returns [value] : selectionLeftOutput= ruleDateSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | comparisonOutput= intervalOp (rightSelectionOutput= ruleTimespanForDateSelectionClause ) | (comparisonOutput= betweenOp ) (rightSelectionOutput= ruleDateBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) ) ;
    // $ANTLR start "ruleDateSingleStatementComparison"
    ruleDateSingleStatementComparison: function() {
        this.currentRule = "ruleDateSingleStatementComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSingleStatementComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;
         var comparisonOutput = null;
         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:1854:17: (selectionLeftOutput= ruleDateSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | comparisonOutput= intervalOp (rightSelectionOutput= ruleTimespanForDateSelectionClause ) | (comparisonOutput= betweenOp ) (rightSelectionOutput= ruleDateBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) ) )
            // IDP.g:1854:20: selectionLeftOutput= ruleDateSelectionClause ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | comparisonOutput= intervalOp (rightSelectionOutput= ruleTimespanForDateSelectionClause ) | (comparisonOutput= betweenOp ) (rightSelectionOutput= ruleDateBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) )
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatementComparison33472);
            this.ruleDateSelectionClause_DFAcall = false;

             if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleDateSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleDateSelectionClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleDateSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }
            // IDP.g:1856:20: ( (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues ) | comparisonOutput= intervalOp (rightSelectionOutput= ruleTimespanForDateSelectionClause ) | (comparisonOutput= betweenOp ) (rightSelectionOutput= ruleDateBetweenDateClause ) | (comparisonOutput= ruleNumericComparisonOption ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) | (comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison ) )
            var alt135=5;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case EXISTS_IN:
            case DOES_NOT_EXISTS_IN:
                alt135=1;   
                break;
            case IS_IN_THE_LAST:
            case IS_NOT_IN_THE_LAST:
            case IS_IN_THE_NEXT:
            case IS_NOT_IN_THE_NEXT:
                alt135=2;   
                break;
            case IS_BETWEEN:
            case BETWEEN:
            case IS_NOT_BETWEEN:
                alt135=3;   
                break;
            case EQ_SIGN:
            case IS_EQUAL:
            case NOT_EQUAL_SIGN:
            case IS_NOT_EQUAL:
            case DOES_NOT_EQUAL:
            case NOT_EQUAL:
            case EQUALS:
            case GREATER_EQUAL_SIGN:
            case LESS_EQUAL_SIGN:
            case IS_EQUAL_OR_GREATER_THAN:
            case GREATER_THAN:
            case IS_EQUAL_OR_LESS_THAN:
            case LESS_THAN:
            case GREATER_SIGN:
            case LESS_SIGN:
            case IS_LESS_THAN:
            case IS_GREATER_THAN:
                alt135=4;   
                break;
            case IS_BEFORE:
            case BEFORE:
            case IS_NOT_BEFORE:
            case IS_AFTER:
            case AFTER:
            case IS_NOT_AFTER:
                alt135=5;   
                break;
            default:
            this.pushApplyTokens([EXISTS_IN,DOES_NOT_EXISTS_IN,IS_IN_THE_LAST,IS_NOT_IN_THE_LAST,IS_IN_THE_NEXT,IS_NOT_IN_THE_NEXT,IS_BETWEEN,BETWEEN,IS_NOT_BETWEEN,EQ_SIGN,IS_EQUAL,NOT_EQUAL_SIGN,IS_NOT_EQUAL,DOES_NOT_EQUAL,NOT_EQUAL,EQUALS,GREATER_EQUAL_SIGN,LESS_EQUAL_SIGN,IS_EQUAL_OR_GREATER_THAN,GREATER_THAN,IS_EQUAL_OR_LESS_THAN,LESS_THAN,GREATER_SIGN,LESS_SIGN,IS_LESS_THAN,IS_GREATER_THAN,IS_BEFORE,BEFORE,IS_NOT_BEFORE,IS_AFTER,AFTER,IS_NOT_AFTER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_135 =
            			new org.antlr.runtime.NoViableAltException(null, 135, 0, this.input);

                nvae_135.c = this.input.LA(1);
                throw nvae_135;
            }

            switch (alt135) {
                case 1 :
                    // IDP.g:1856:21: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues )
                    // IDP.g:1856:21: (comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues )
                    // IDP.g:1856:23: comparisonOutput= ruleSetOfValuesOperator rightSelectionOutput= ruleDateSetOfValues
                    this.pushFollow(IDPParser.FOLLOW_ruleSetOfValuesOperator_in_ruleDateSingleStatementComparison33523);
                    this.ruleSetOfValuesOperator_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleSetOfValuesOperator();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleSetOfValuesOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSetOfValues_in_ruleDateSingleStatementComparison33551);
                    this.ruleDateSetOfValues_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSetOfValues();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSetOfValues();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSetOfValues();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:1859:20: comparisonOutput= intervalOp (rightSelectionOutput= ruleTimespanForDateSelectionClause )
                    this.pushFollow(IDPParser.FOLLOW_intervalOp_in_ruleDateSingleStatementComparison33609);
                    this.intervalOp_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA135 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.intervalOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.intervalOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.intervalOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }
                    // IDP.g:1860:20: (rightSelectionOutput= ruleTimespanForDateSelectionClause )
                    // IDP.g:1860:21: rightSelectionOutput= ruleTimespanForDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateSelectionClause_in_ruleDateSingleStatementComparison33637);
                    this.ruleTimespanForDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimespanForDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimespanForDateSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimespanForDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 3 :
                    // IDP.g:1862:20: (comparisonOutput= betweenOp ) (rightSelectionOutput= ruleDateBetweenDateClause )
                    // IDP.g:1862:20: (comparisonOutput= betweenOp )
                    // IDP.g:1862:21: comparisonOutput= betweenOp
                    this.pushFollow(IDPParser.FOLLOW_betweenOp_in_ruleDateSingleStatementComparison33707);
                    this.betweenOp_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.betweenOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.betweenOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.betweenOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }



                    // IDP.g:1863:20: (rightSelectionOutput= ruleDateBetweenDateClause )
                    // IDP.g:1863:21: rightSelectionOutput= ruleDateBetweenDateClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateBetweenDateClause_in_ruleDateSingleStatementComparison33736);
                    this.ruleDateBetweenDateClause_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateBetweenDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateBetweenDateClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateBetweenDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 4 :
                    // IDP.g:1865:20: (comparisonOutput= ruleNumericComparisonOption ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison )
                    // IDP.g:1865:20: (comparisonOutput= ruleNumericComparisonOption )
                    // IDP.g:1865:21: comparisonOutput= ruleNumericComparisonOption
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOption_in_ruleDateSingleStatementComparison33772);
                    this.ruleNumericComparisonOption_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.ruleNumericComparisonOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.ruleNumericComparisonOption();

                    	}
                    	}
                    else{
                        comparisonOutput=this.ruleNumericComparisonOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }



                    // IDP.g:1866:20: (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison )
                    // IDP.g:1866:21: rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementNumericRelativeComparison_in_ruleDateSingleStatementComparison33801);
                    this.ruleDateSingleStatementNumericRelativeComparison_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;
                case 5 :
                    // IDP.g:1868:20: (comparisonOutput= relativeDateClauseOp ) (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison )
                    // IDP.g:1868:20: (comparisonOutput= relativeDateClauseOp )
                    // IDP.g:1868:21: comparisonOutput= relativeDateClauseOp
                    this.pushFollow(IDPParser.FOLLOW_relativeDateClauseOp_in_ruleDateSingleStatementComparison33837);
                    this.relativeDateClauseOp_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comparisonOutput=this.relativeDateClauseOp();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comparisonOutput=this.relativeDateClauseOp();

                    	}
                    	}
                    else{
                        comparisonOutput=this.relativeDateClauseOp();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comparisonOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.selectionOperator = (comparisonOutput!==null?comparisonOutput.value:null);
                    }



                    // IDP.g:1869:20: (rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison )
                    // IDP.g:1869:21: rightSelectionOutput= ruleDateSingleStatementNumericRelativeComparison
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementNumericRelativeComparison_in_ruleDateSingleStatementComparison33866);
                    this.ruleDateSingleStatementNumericRelativeComparison_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSingleStatementNumericRelativeComparison();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      singleStatementOutput.rightSelectionClause = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                    }





                    break;

            }
            /*if(this.failedPredictDFA135 !== undefined && this.failedPredictDFA135)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var singleStatement = new this.entityModelLib.SimpleStatement(singleStatementOutput); 
                                                  if (this.parseModelLib.getModelManger().isInsideWhere) {
                                                              singleStatement.validateAmbiguity((selectionLeftOutput?this.input.toString(selectionLeftOutput.start,selectionLeftOutput.stop):null), (rightSelectionOutput?this.input.toString(rightSelectionOutput.start,rightSelectionOutput.stop):null), this.parseModelLib.getModelManger());
                                                  }
                                                  retval.value = singleStatement;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSingleStatementComparison";
        }
        return retval;
    },

    // inline static return class
    ruleDateSingleStatementNumericRelativeComparison_return: (function() {
        IDPParser.ruleDateSingleStatementNumericRelativeComparison_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateSingleStatementNumericRelativeComparison_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1873:1: ruleDateSingleStatementNumericRelativeComparison returns [value] : ( ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) ) ) ;
    // $ANTLR start "ruleDateSingleStatementNumericRelativeComparison"
    ruleDateSingleStatementNumericRelativeComparison: function() {
        this.currentRule = "ruleDateSingleStatementNumericRelativeComparison";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateSingleStatementNumericRelativeComparison_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var rightSelectionOutput = null;


        var singleStatementOutput = {}; 
        try {
            // IDP.g:1876:17: ( ( ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) ) ) )
            // IDP.g:1878:1: ( ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1878:1: ( ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) ) )
            // IDP.g:1879:9: ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) )
            // IDP.g:1879:9: ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) )
            var alt136=2;

            this.ruleDateSingleStatementNumericRelativeComparison_DFAcall=(typeof this.ruleDateSingleStatementNumericRelativeComparison_DFAcall === 'undefined' ? false: this.ruleDateSingleStatementNumericRelativeComparison_DFAcall); // only valid for synpred
            if(this.ruleDateSingleStatementNumericRelativeComparison_DFAcall === false /*&& !this.failedPredictDFA136*/)
            {   
                this.dfa136NumberOfAlt = alt136;
                this.dfa136InRule = "ruleDateSingleStatementNumericRelativeComparison";
            	this.dfa136Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber  = 136; 
                alt136 = this.dfa136.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt136 === 0 || alt136 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 136);
            		return retval;
                }
            }	
            else
                alt136 = this.dfa136AltNumber;	
            switch (alt136) {
                case 1 :
                    // IDP.g:1879:10: (rightSelectionOutput= ruleTimestampSelectionClause )
                    // IDP.g:1879:10: (rightSelectionOutput= ruleTimestampSelectionClause )
                    // IDP.g:1879:12: rightSelectionOutput= ruleTimestampSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleDateSingleStatementNumericRelativeComparison34049);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }


                    break;
                case 2 :
                    // IDP.g:1882:9: (rightSelectionOutput= ruleDateSelectionClause )
                    // IDP.g:1882:9: (rightSelectionOutput= ruleDateSelectionClause )
                    // IDP.g:1882:11: rightSelectionOutput= ruleDateSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatementNumericRelativeComparison34071);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber !== 'undefined' && this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rightSelectionOutput=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateSingleStatementNumericRelativeComparisonCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rightSelectionOutput=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        rightSelectionOutput=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rightSelectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                  singleStatementOutput = (rightSelectionOutput!==null?rightSelectionOutput.value:null);
                              
                    }


                    break;

            }
            /*if(this.failedPredictDFA136 !== undefined && this.failedPredictDFA136)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               retval.value = singleStatementOutput;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateSingleStatementNumericRelativeComparison";
        }
        return retval;
    },

    // inline static return class
    ruleNumericComparisonOnlyOption_return: (function() {
        IDPParser.ruleNumericComparisonOnlyOption_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericComparisonOnlyOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1888:1: ruleNumericComparisonOnlyOption returns [value] : ( (a= GREATER_EQUAL_SIGN ) | (a= LESS_EQUAL_SIGN ) | ( (a= IS_EQUAL_OR_GREATER_THAN ) | (a= GREATER_THAN b= OR c= EQUALS ) ) | ( (a= IS_EQUAL_OR_LESS_THAN ) | (a= LESS_THAN b= OR c= EQUALS ) ) | (a= GREATER_SIGN ) | (a= LESS_SIGN ) | (a= ( IS_LESS_THAN | LESS_THAN ) ) | (a= ( IS_GREATER_THAN | GREATER_THAN ) ) );
    // $ANTLR start "ruleNumericComparisonOnlyOption"
    ruleNumericComparisonOnlyOption: function() {
        this.currentRule = "ruleNumericComparisonOnlyOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericComparisonOnlyOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;
        var b = null;
        var c = null;

        var a_tree=null;
        var b_tree=null;
        var c_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1891:17: ( (a= GREATER_EQUAL_SIGN ) | (a= LESS_EQUAL_SIGN ) | ( (a= IS_EQUAL_OR_GREATER_THAN ) | (a= GREATER_THAN b= OR c= EQUALS ) ) | ( (a= IS_EQUAL_OR_LESS_THAN ) | (a= LESS_THAN b= OR c= EQUALS ) ) | (a= GREATER_SIGN ) | (a= LESS_SIGN ) | (a= ( IS_LESS_THAN | LESS_THAN ) ) | (a= ( IS_GREATER_THAN | GREATER_THAN ) ) )
            var alt139=8;
            this.ruleNumericComparisonOnlyOption_DFAcall=(typeof this.ruleNumericComparisonOnlyOption_DFAcall === 'undefined' ? false: this.ruleNumericComparisonOnlyOption_DFAcall); // only valid for synpred
            if(this.ruleNumericComparisonOnlyOption_DFAcall === false /*&& !this.failedPredictDFA139*/)
            {   
                this.dfa139NumberOfAlt = alt139;
                this.dfa139InRule = "ruleNumericComparisonOnlyOption";
            	this.dfa139Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleNumericComparisonOnlyOptionCurrentDecisionNumber  = 139; 
                alt139 = this.dfa139.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt139 === 0 || alt139 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 139);
            		return retval;
                }
            }	
            else
                alt139 = this.dfa139AltNumber;	
            switch (alt139) {
                case 1 :
                    // IDP.g:1891:33: (a= GREATER_EQUAL_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1891:33: (a= GREATER_EQUAL_SIGN )
                    // IDP.g:1891:35: a= GREATER_EQUAL_SIGN


                    this.pushNextTokens(GREATER_EQUAL_SIGN,GREATER_EQUAL_SIGN,1);
                    a=this.match(this.input,GREATER_EQUAL_SIGN,IDPParser.FOLLOW_GREATER_EQUAL_SIGN_in_ruleNumericComparisonOnlyOption34213); if (this.state.failed) return retval;
                    if( GREATER_EQUAL_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal += '>=';
                    }





                    break;
                case 2 :
                    // IDP.g:1892:25: (a= LESS_EQUAL_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1892:25: (a= LESS_EQUAL_SIGN )
                    // IDP.g:1892:27: a= LESS_EQUAL_SIGN


                    this.pushNextTokens(LESS_EQUAL_SIGN,LESS_EQUAL_SIGN,1);
                    a=this.match(this.input,LESS_EQUAL_SIGN,IDPParser.FOLLOW_LESS_EQUAL_SIGN_in_ruleNumericComparisonOnlyOption34251); if (this.state.failed) return retval;
                    if( LESS_EQUAL_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal += '<=';
                    }





                    break;
                case 3 :
                    // IDP.g:1893:25: ( (a= IS_EQUAL_OR_GREATER_THAN ) | (a= GREATER_THAN b= OR c= EQUALS ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1893:25: ( (a= IS_EQUAL_OR_GREATER_THAN ) | (a= GREATER_THAN b= OR c= EQUALS ) )
                    var alt137=2;

                    var LA137_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(IS_EQUAL_OR_GREATER_THAN,IS_EQUAL_OR_GREATER_THAN,1) && LA137_0==IS_EQUAL_OR_GREATER_THAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(IS_EQUAL_OR_GREATER_THAN,IS_EQUAL_OR_GREATER_THAN,1) && LA137_0==IS_EQUAL_OR_GREATER_THAN )) ) {
                        alt137=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(GREATER_THAN,GREATER_THAN,1) && LA137_0==GREATER_THAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(GREATER_THAN,GREATER_THAN,1) && LA137_0==GREATER_THAN )) ) {
                        alt137=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_137_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 137, 0, this.input);

                        nvae_137_0.c = this.input.LA(1);
                        throw nvae_137_0;
                    }
                    switch (alt137) {
                        case 1 :
                            // IDP.g:1893:27: (a= IS_EQUAL_OR_GREATER_THAN )
                            // IDP.g:1893:27: (a= IS_EQUAL_OR_GREATER_THAN )
                            // IDP.g:1893:28: a= IS_EQUAL_OR_GREATER_THAN


                            this.pushNextTokens(IS_EQUAL_OR_GREATER_THAN,IS_EQUAL_OR_GREATER_THAN,1);
                            a=this.match(this.input,IS_EQUAL_OR_GREATER_THAN,IDPParser.FOLLOW_IS_EQUAL_OR_GREATER_THAN_in_ruleNumericComparisonOnlyOption34289); if (this.state.failed) return retval;
                            if( IS_EQUAL_OR_GREATER_THAN !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            a_tree = this.adaptor.create(a);
                            this.adaptor.addChild(root_0, a_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              origVal += (a?a.getText():null); fixedVal += '>=';
                            }





                            break;
                        case 2 :
                            // IDP.g:1893:100: (a= GREATER_THAN b= OR c= EQUALS )
                            // IDP.g:1893:100: (a= GREATER_THAN b= OR c= EQUALS )
                            // IDP.g:1893:101: a= GREATER_THAN b= OR c= EQUALS


                            this.pushNextTokens(GREATER_THAN,GREATER_THAN,1);
                            a=this.match(this.input,GREATER_THAN,IDPParser.FOLLOW_GREATER_THAN_in_ruleNumericComparisonOnlyOption34301); if (this.state.failed) return retval;
                            if( GREATER_THAN !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            a_tree = this.adaptor.create(a);
                            this.adaptor.addChild(root_0, a_tree);
                            }


                            this.pushNextTokens(OR,OR,1);
                            b=this.match(this.input,OR,IDPParser.FOLLOW_OR_in_ruleNumericComparisonOnlyOption34307); if (this.state.failed) return retval;
                            if( OR !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            b_tree = this.adaptor.create(b);
                            this.adaptor.addChild(root_0, b_tree);
                            }


                            this.pushNextTokens(EQUALS,EQUALS,1);
                            c=this.match(this.input,EQUALS,IDPParser.FOLLOW_EQUALS_in_ruleNumericComparisonOnlyOption34313); if (this.state.failed) return retval;
                            if( EQUALS !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            c_tree = this.adaptor.create(c);
                            this.adaptor.addChild(root_0, c_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              origVal += (a?a.getText():null) + " " + (b?b.getText():null) + " " + (c?c.getText():null); fixedVal += '>=';
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA137 !== undefined && this.failedPredictDFA137)
                    { 
                        throw null;
                    }*/



                    break;
                case 4 :
                    // IDP.g:1894:25: ( (a= IS_EQUAL_OR_LESS_THAN ) | (a= LESS_THAN b= OR c= EQUALS ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1894:25: ( (a= IS_EQUAL_OR_LESS_THAN ) | (a= LESS_THAN b= OR c= EQUALS ) )
                    var alt138=2;

                    var LA138_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(IS_EQUAL_OR_LESS_THAN,IS_EQUAL_OR_LESS_THAN,1) && LA138_0==IS_EQUAL_OR_LESS_THAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(IS_EQUAL_OR_LESS_THAN,IS_EQUAL_OR_LESS_THAN,1) && LA138_0==IS_EQUAL_OR_LESS_THAN )) ) {
                        alt138=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LESS_THAN,LESS_THAN,1) && LA138_0==LESS_THAN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LESS_THAN,LESS_THAN,1) && LA138_0==LESS_THAN )) ) {
                        alt138=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_138_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 138, 0, this.input);

                        nvae_138_0.c = this.input.LA(1);
                        throw nvae_138_0;
                    }
                    switch (alt138) {
                        case 1 :
                            // IDP.g:1894:27: (a= IS_EQUAL_OR_LESS_THAN )
                            // IDP.g:1894:27: (a= IS_EQUAL_OR_LESS_THAN )
                            // IDP.g:1894:28: a= IS_EQUAL_OR_LESS_THAN


                            this.pushNextTokens(IS_EQUAL_OR_LESS_THAN,IS_EQUAL_OR_LESS_THAN,1);
                            a=this.match(this.input,IS_EQUAL_OR_LESS_THAN,IDPParser.FOLLOW_IS_EQUAL_OR_LESS_THAN_in_ruleNumericComparisonOnlyOption34352); if (this.state.failed) return retval;
                            if( IS_EQUAL_OR_LESS_THAN !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            a_tree = this.adaptor.create(a);
                            this.adaptor.addChild(root_0, a_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              origVal += (a?a.getText():null); fixedVal += '<='
                            }





                            break;
                        case 2 :
                            // IDP.g:1894:96: (a= LESS_THAN b= OR c= EQUALS )
                            // IDP.g:1894:96: (a= LESS_THAN b= OR c= EQUALS )
                            // IDP.g:1894:97: a= LESS_THAN b= OR c= EQUALS


                            this.pushNextTokens(LESS_THAN,LESS_THAN,1);
                            a=this.match(this.input,LESS_THAN,IDPParser.FOLLOW_LESS_THAN_in_ruleNumericComparisonOnlyOption34364); if (this.state.failed) return retval;
                            if( LESS_THAN !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            a_tree = this.adaptor.create(a);
                            this.adaptor.addChild(root_0, a_tree);
                            }


                            this.pushNextTokens(OR,OR,1);
                            b=this.match(this.input,OR,IDPParser.FOLLOW_OR_in_ruleNumericComparisonOnlyOption34370); if (this.state.failed) return retval;
                            if( OR !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            b_tree = this.adaptor.create(b);
                            this.adaptor.addChild(root_0, b_tree);
                            }


                            this.pushNextTokens(EQUALS,EQUALS,1);
                            c=this.match(this.input,EQUALS,IDPParser.FOLLOW_EQUALS_in_ruleNumericComparisonOnlyOption34376); if (this.state.failed) return retval;
                            if( EQUALS !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            c_tree = this.adaptor.create(c);
                            this.adaptor.addChild(root_0, c_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              origVal += (a?a.getText():null) + " " + (b?b.getText():null) + " " + (c?c.getText():null); fixedVal += '<='
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA138 !== undefined && this.failedPredictDFA138)
                    { 
                        throw null;
                    }*/



                    break;
                case 5 :
                    // IDP.g:1895:25: (a= GREATER_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1895:25: (a= GREATER_SIGN )
                    // IDP.g:1895:27: a= GREATER_SIGN


                    this.pushNextTokens(GREATER_SIGN,GREATER_SIGN,1);
                    a=this.match(this.input,GREATER_SIGN,IDPParser.FOLLOW_GREATER_SIGN_in_ruleNumericComparisonOnlyOption34414); if (this.state.failed) return retval;
                    if( GREATER_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal += '>';
                    }





                    break;
                case 6 :
                    // IDP.g:1896:25: (a= LESS_SIGN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1896:25: (a= LESS_SIGN )
                    // IDP.g:1896:27: a= LESS_SIGN


                    this.pushNextTokens(LESS_SIGN,LESS_SIGN,1);
                    a=this.match(this.input,LESS_SIGN,IDPParser.FOLLOW_LESS_SIGN_in_ruleNumericComparisonOnlyOption34451); if (this.state.failed) return retval;
                    if( LESS_SIGN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal += '<';
                    }





                    break;
                case 7 :
                    // IDP.g:1897:25: (a= ( IS_LESS_THAN | LESS_THAN ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1897:25: (a= ( IS_LESS_THAN | LESS_THAN ) )
                    // IDP.g:1897:27: a= ( IS_LESS_THAN | LESS_THAN )
                    a=this.input.LT(1);
                    if ( (this.pushNextTokens(LESS_THAN,LESS_THAN,1) && this.input.LA(1)==LESS_THAN )||(this.pushNextTokens(IS_LESS_THAN,IS_LESS_THAN,1) && this.input.LA(1)==IS_LESS_THAN ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(a));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_a_34491 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_a_34491;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal = "<";
                    }





                    break;
                case 8 :
                    // IDP.g:1898:25: (a= ( IS_GREATER_THAN | GREATER_THAN ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1898:25: (a= ( IS_GREATER_THAN | GREATER_THAN ) )
                    // IDP.g:1898:27: a= ( IS_GREATER_THAN | GREATER_THAN )
                    a=this.input.LT(1);
                    if ( (this.pushNextTokens(GREATER_THAN,GREATER_THAN,1) && this.input.LA(1)==GREATER_THAN )||(this.pushNextTokens(IS_GREATER_THAN,IS_GREATER_THAN,1) && this.input.LA(1)==IS_GREATER_THAN ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(a));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_a_34534 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_a_34534;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal += (a?a.getText():null); fixedVal = ">";
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericComparisonOnlyOption";
        }
        return retval;
    },

    // inline static return class
    ruleNumericComparisonOption_return: (function() {
        IDPParser.ruleNumericComparisonOption_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericComparisonOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1900:1: ruleNumericComparisonOption returns [value] : (op= ruleBooleanComparisonOperator | op= ruleNumericComparisonOnlyOption ) ;
    // $ANTLR start "ruleNumericComparisonOption"
    ruleNumericComparisonOption: function() {
        this.currentRule = "ruleNumericComparisonOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericComparisonOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var op = null;


        try {
            // IDP.g:1902:33: ( (op= ruleBooleanComparisonOperator | op= ruleNumericComparisonOnlyOption ) )
            // IDP.g:1902:41: (op= ruleBooleanComparisonOperator | op= ruleNumericComparisonOnlyOption )
            root_0 = this.adaptor.nil();

            // IDP.g:1902:41: (op= ruleBooleanComparisonOperator | op= ruleNumericComparisonOnlyOption )
            var alt140=2;

            var LA140_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA140_0>=EQ_SIGN && LA140_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA140_0>=NOT_EQUAL_SIGN && LA140_0<=EQUALS )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA140_0>=EQ_SIGN && LA140_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA140_0>=NOT_EQUAL_SIGN && LA140_0<=EQUALS )) ) {
                alt140=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA140_0>=GREATER_EQUAL_SIGN && LA140_0<=IS_GREATER_THAN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA140_0>=GREATER_EQUAL_SIGN && LA140_0<=IS_GREATER_THAN )) ) {
                alt140=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_140_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 140, 0, this.input);

                nvae_140_0.c = this.input.LA(1);
                throw nvae_140_0;
            }
            switch (alt140) {
                case 1 :
                    // IDP.g:1902:42: op= ruleBooleanComparisonOperator
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanComparisonOperator_in_ruleNumericComparisonOption34644);
                    this.ruleBooleanComparisonOperator_DFAcall = false;

                     if( typeof this.ruleNumericComparisonOptionCurrentDecisionNumber !== 'undefined' && this.ruleNumericComparisonOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericComparisonOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA140 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        op=this.ruleBooleanComparisonOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericComparisonOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	op=this.ruleBooleanComparisonOperator();

                    	}
                    	}
                    else{
                        op=this.ruleBooleanComparisonOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, op.getTree());


                    break;
                case 2 :
                    // IDP.g:1902:79: op= ruleNumericComparisonOnlyOption
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOnlyOption_in_ruleNumericComparisonOption34652);
                    this.ruleNumericComparisonOnlyOption_DFAcall = false;

                     if( typeof this.ruleNumericComparisonOptionCurrentDecisionNumber !== 'undefined' && this.ruleNumericComparisonOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericComparisonOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA140 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        op=this.ruleNumericComparisonOnlyOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericComparisonOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	op=this.ruleNumericComparisonOnlyOption();

                    	}
                    	}
                    else{
                        op=this.ruleNumericComparisonOnlyOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, op.getTree());


                    break;

            }
            /*if(this.failedPredictDFA140 !== undefined && this.failedPredictDFA140)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (op!==null?op.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericComparisonOption";
        }
        return retval;
    },

    // inline static return class
    ruleNumericTwoParamsFunctionName_return: (function() {
        IDPParser.ruleNumericTwoParamsFunctionName_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericTwoParamsFunctionName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1904:1: ruleNumericTwoParamsFunctionName returns [value] : ( (a= ROUND ) | (a= POWER ) );
    // $ANTLR start "ruleNumericTwoParamsFunctionName"
    ruleNumericTwoParamsFunctionName: function() {
        this.currentRule = "ruleNumericTwoParamsFunctionName";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericTwoParamsFunctionName_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;

        var a_tree=null;

          var funcName = ""; 
        try {
            // IDP.g:1907:17: ( (a= ROUND ) | (a= POWER ) )
            var alt141=2;
            var LA141_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ROUND,ROUND,1) && LA141_0==ROUND )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ROUND,ROUND,1) && LA141_0==ROUND )) ) {
                alt141=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(POWER,POWER,1) && LA141_0==POWER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(POWER,POWER,1) && LA141_0==POWER )) ) {
                alt141=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_141_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 141, 0, this.input);

                nvae_141_0.c = this.input.LA(1);
                throw nvae_141_0;
            }
            switch (alt141) {
                case 1 :
                    // IDP.g:1907:33: (a= ROUND )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1907:33: (a= ROUND )
                    // IDP.g:1907:35: a= ROUND


                    this.pushNextTokens(ROUND,ROUND,1);
                    a=this.match(this.input,ROUND,IDPParser.FOLLOW_ROUND_in_ruleNumericTwoParamsFunctionName34771); if (this.state.failed) return retval;
                    if( ROUND !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       funcName = (a?a.getText():null);
                    }





                    break;
                case 2 :
                    // IDP.g:1908:25: (a= POWER )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1908:25: (a= POWER )
                    // IDP.g:1908:27: a= POWER


                    this.pushNextTokens(POWER,POWER,1);
                    a=this.match(this.input,POWER,IDPParser.FOLLOW_POWER_in_ruleNumericTwoParamsFunctionName34809); if (this.state.failed) return retval;
                    if( POWER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      funcName = (a?a.getText():null);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.AdvanceFunction(funcName); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericTwoParamsFunctionName";
        }
        return retval;
    },

    // inline static return class
    ruleNumericOneParamFunctionName_return: (function() {
        IDPParser.ruleNumericOneParamFunctionName_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericOneParamFunctionName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1910:1: ruleNumericOneParamFunctionName returns [value] : ( (a= SIN ) | (a= COS ) | (a= LOG ) );
    // $ANTLR start "ruleNumericOneParamFunctionName"
    ruleNumericOneParamFunctionName: function() {
        this.currentRule = "ruleNumericOneParamFunctionName";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericOneParamFunctionName_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;

        var a_tree=null;

          var funcName = ""; 
        try {
            // IDP.g:1913:17: ( (a= SIN ) | (a= COS ) | (a= LOG ) )
            var alt142=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case SIN:
                alt142=1;   
                break;
            case COS:
                alt142=2;   
                break;
            case LOG:
                alt142=3;   
                break;
            default:
            this.pushApplyTokens([SIN,COS,LOG]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_142 =
            			new org.antlr.runtime.NoViableAltException(null, 142, 0, this.input);

                nvae_142.c = this.input.LA(1);
                throw nvae_142;
            }

            switch (alt142) {
                case 1 :
                    // IDP.g:1913:33: (a= SIN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1913:33: (a= SIN )
                    // IDP.g:1913:35: a= SIN


                    this.pushNextTokens(SIN,SIN,1);
                    a=this.match(this.input,SIN,IDPParser.FOLLOW_SIN_in_ruleNumericOneParamFunctionName34930); if (this.state.failed) return retval;
                    if( SIN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       funcName = (a?a.getText():null);
                    }





                    break;
                case 2 :
                    // IDP.g:1914:25: (a= COS )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1914:25: (a= COS )
                    // IDP.g:1914:27: a= COS


                    this.pushNextTokens(COS,COS,1);
                    a=this.match(this.input,COS,IDPParser.FOLLOW_COS_in_ruleNumericOneParamFunctionName34968); if (this.state.failed) return retval;
                    if( COS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      funcName = (a?a.getText():null);
                    }





                    break;
                case 3 :
                    // IDP.g:1915:25: (a= LOG )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1915:25: (a= LOG )
                    // IDP.g:1915:27: a= LOG


                    this.pushNextTokens(LOG,LOG,1);
                    a=this.match(this.input,LOG,IDPParser.FOLLOW_LOG_in_ruleNumericOneParamFunctionName35005); if (this.state.failed) return retval;
                    if( LOG !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      funcName = (a?a.getText():null);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.AdvanceFunction(funcName); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericOneParamFunctionName";
        }
        return retval;
    },

    // inline static return class
    intervalOp_return: (function() {
        IDPParser.intervalOp_return = function(){};
        org.antlr.lang.extend(IDPParser.intervalOp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1943:1: intervalOp returns [value] : ( (a= IS_IN_THE_LAST ) | (a= IS_NOT_IN_THE_LAST ) | (a= IS_IN_THE_NEXT ) | (a= IS_NOT_IN_THE_NEXT ) ) ;
    // $ANTLR start "intervalOp"
    intervalOp: function() {
        this.currentRule = "intervalOp";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.intervalOp_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;

        var a_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1946:17: ( ( (a= IS_IN_THE_LAST ) | (a= IS_NOT_IN_THE_LAST ) | (a= IS_IN_THE_NEXT ) | (a= IS_NOT_IN_THE_NEXT ) ) )
            // IDP.g:1946:33: ( (a= IS_IN_THE_LAST ) | (a= IS_NOT_IN_THE_LAST ) | (a= IS_IN_THE_NEXT ) | (a= IS_NOT_IN_THE_NEXT ) )
            root_0 = this.adaptor.nil();

            // IDP.g:1946:33: ( (a= IS_IN_THE_LAST ) | (a= IS_NOT_IN_THE_LAST ) | (a= IS_IN_THE_NEXT ) | (a= IS_NOT_IN_THE_NEXT ) )
            var alt143=4;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case IS_IN_THE_LAST:
                alt143=1;   
                break;
            case IS_NOT_IN_THE_LAST:
                alt143=2;   
                break;
            case IS_IN_THE_NEXT:
                alt143=3;   
                break;
            case IS_NOT_IN_THE_NEXT:
                alt143=4;   
                break;
            default:
            this.pushApplyTokens([IS_IN_THE_LAST,IS_NOT_IN_THE_LAST,IS_IN_THE_NEXT,IS_NOT_IN_THE_NEXT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_143 =
            			new org.antlr.runtime.NoViableAltException(null, 143, 0, this.input);

                nvae_143.c = this.input.LA(1);
                throw nvae_143;
            }

            switch (alt143) {
                case 1 :
                    // IDP.g:1947:49: (a= IS_IN_THE_LAST )
                    // IDP.g:1947:49: (a= IS_IN_THE_LAST )
                    // IDP.g:1947:50: a= IS_IN_THE_LAST


                    this.pushNextTokens(IS_IN_THE_LAST,IS_IN_THE_LAST,1);
                    a=this.match(this.input,IS_IN_THE_LAST,IDPParser.FOLLOW_IS_IN_THE_LAST_in_intervalOp35639); if (this.state.failed) return retval;
                    if( IS_IN_THE_LAST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "in the last";
                    }





                    break;
                case 2 :
                    // IDP.g:1948:49: (a= IS_NOT_IN_THE_LAST )
                    // IDP.g:1948:49: (a= IS_NOT_IN_THE_LAST )
                    // IDP.g:1948:50: a= IS_NOT_IN_THE_LAST


                    this.pushNextTokens(IS_NOT_IN_THE_LAST,IS_NOT_IN_THE_LAST,1);
                    a=this.match(this.input,IS_NOT_IN_THE_LAST,IDPParser.FOLLOW_IS_NOT_IN_THE_LAST_in_intervalOp35701); if (this.state.failed) return retval;
                    if( IS_NOT_IN_THE_LAST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "not in the last";
                    }





                    break;
                case 3 :
                    // IDP.g:1949:49: (a= IS_IN_THE_NEXT )
                    // IDP.g:1949:49: (a= IS_IN_THE_NEXT )
                    // IDP.g:1949:50: a= IS_IN_THE_NEXT


                    this.pushNextTokens(IS_IN_THE_NEXT,IS_IN_THE_NEXT,1);
                    a=this.match(this.input,IS_IN_THE_NEXT,IDPParser.FOLLOW_IS_IN_THE_NEXT_in_intervalOp35762); if (this.state.failed) return retval;
                    if( IS_IN_THE_NEXT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "in the next";
                    }





                    break;
                case 4 :
                    // IDP.g:1950:49: (a= IS_NOT_IN_THE_NEXT )
                    // IDP.g:1950:49: (a= IS_NOT_IN_THE_NEXT )
                    // IDP.g:1950:50: a= IS_NOT_IN_THE_NEXT


                    this.pushNextTokens(IS_NOT_IN_THE_NEXT,IS_NOT_IN_THE_NEXT,1);
                    a=this.match(this.input,IS_NOT_IN_THE_NEXT,IDPParser.FOLLOW_IS_NOT_IN_THE_NEXT_in_intervalOp35822); if (this.state.failed) return retval;
                    if( IS_NOT_IN_THE_NEXT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "not in the next";
                    }





                    break;

            }
            /*if(this.failedPredictDFA143 !== undefined && this.failedPredictDFA143)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "intervalOp";
        }
        return retval;
    },

    // inline static return class
    relativeDateClauseOp_return: (function() {
        IDPParser.relativeDateClauseOp_return = function(){};
        org.antlr.lang.extend(IDPParser.relativeDateClauseOp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1965:1: relativeDateClauseOp returns [value] : ( (a= ( IS_BEFORE | BEFORE ) ) | (a= IS_NOT_BEFORE ) | (a= ( IS_AFTER | AFTER ) ) | (b= IS_NOT_AFTER ) );
    // $ANTLR start "relativeDateClauseOp"
    relativeDateClauseOp: function() {
        this.currentRule = "relativeDateClauseOp";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.relativeDateClauseOp_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;
        var b = null;

        var a_tree=null;
        var b_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1968:17: ( (a= ( IS_BEFORE | BEFORE ) ) | (a= IS_NOT_BEFORE ) | (a= ( IS_AFTER | AFTER ) ) | (b= IS_NOT_AFTER ) )
            var alt144=4;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case IS_BEFORE:
            case BEFORE:
                alt144=1;   
                break;
            case IS_NOT_BEFORE:
                alt144=2;   
                break;
            case IS_AFTER:
            case AFTER:
                alt144=3;   
                break;
            case IS_NOT_AFTER:
                alt144=4;   
                break;
            default:
            this.pushApplyTokens([IS_BEFORE,BEFORE,IS_NOT_BEFORE,IS_AFTER,AFTER,IS_NOT_AFTER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_144 =
            			new org.antlr.runtime.NoViableAltException(null, 144, 0, this.input);

                nvae_144.c = this.input.LA(1);
                throw nvae_144;
            }

            switch (alt144) {
                case 1 :
                    // IDP.g:1968:33: (a= ( IS_BEFORE | BEFORE ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1968:33: (a= ( IS_BEFORE | BEFORE ) )
                    // IDP.g:1968:34: a= ( IS_BEFORE | BEFORE )
                    a=this.input.LT(1);
                    if ( (  this.pushNextTokens(IS_BEFORE,BEFORE,1) && this.input.LA(1)>=IS_BEFORE && this.input.LA(1)<=BEFORE ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(a));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_a_36299 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_a_36299;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "<";
                    }





                    break;
                case 2 :
                    // IDP.g:1968:100: (a= IS_NOT_BEFORE )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1968:100: (a= IS_NOT_BEFORE )
                    // IDP.g:1968:101: a= IS_NOT_BEFORE


                    this.pushNextTokens(IS_NOT_BEFORE,IS_NOT_BEFORE,1);
                    a=this.match(this.input,IS_NOT_BEFORE,IDPParser.FOLLOW_IS_NOT_BEFORE_in_relativeDateClauseOp36318); if (this.state.failed) return retval;
                    if( IS_NOT_BEFORE !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = ">=";
                    }





                    break;
                case 3 :
                    // IDP.g:1968:159: (a= ( IS_AFTER | AFTER ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1968:159: (a= ( IS_AFTER | AFTER ) )
                    // IDP.g:1968:160: a= ( IS_AFTER | AFTER )
                    a=this.input.LT(1);
                    if ( (  this.pushNextTokens(IS_AFTER,AFTER,1) && this.input.LA(1)>=IS_AFTER && this.input.LA(1)<=AFTER ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(a));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_a_36329 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_a_36329;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = ">";
                    }





                    break;
                case 4 :
                    // IDP.g:1968:224: (b= IS_NOT_AFTER )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1968:224: (b= IS_NOT_AFTER )
                    // IDP.g:1968:225: b= IS_NOT_AFTER


                    this.pushNextTokens(IS_NOT_AFTER,IS_NOT_AFTER,1);
                    b=this.match(this.input,IS_NOT_AFTER,IDPParser.FOLLOW_IS_NOT_AFTER_in_relativeDateClauseOp36348); if (this.state.failed) return retval;
                    if( IS_NOT_AFTER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    b_tree = this.adaptor.create(b);
                    this.adaptor.addChild(root_0, b_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "<=";
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "relativeDateClauseOp";
        }
        return retval;
    },

    // inline static return class
    betweenOp_return: (function() {
        IDPParser.betweenOp_return = function(){};
        org.antlr.lang.extend(IDPParser.betweenOp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1980:1: betweenOp returns [value] : ( (a= ( IS_BETWEEN | BETWEEN ) ) | (b= IS_NOT_BETWEEN ) );
    // $ANTLR start "betweenOp"
    betweenOp: function() {
        this.currentRule = "betweenOp";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.betweenOp_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;
        var b = null;

        var a_tree=null;
        var b_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:1983:17: ( (a= ( IS_BETWEEN | BETWEEN ) ) | (b= IS_NOT_BETWEEN ) )
            var alt145=2;
            var LA145_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(IS_BETWEEN,BETWEEN,1) && LA145_0>=IS_BETWEEN && LA145_0<=BETWEEN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(IS_BETWEEN,BETWEEN,1) && LA145_0>=IS_BETWEEN && LA145_0<=BETWEEN )) ) {
                alt145=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(IS_NOT_BETWEEN,IS_NOT_BETWEEN,1) && LA145_0==IS_NOT_BETWEEN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(IS_NOT_BETWEEN,IS_NOT_BETWEEN,1) && LA145_0==IS_NOT_BETWEEN )) ) {
                alt145=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_145_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 145, 0, this.input);

                nvae_145_0.c = this.input.LA(1);
                throw nvae_145_0;
            }
            switch (alt145) {
                case 1 :
                    // IDP.g:1983:33: (a= ( IS_BETWEEN | BETWEEN ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1983:33: (a= ( IS_BETWEEN | BETWEEN ) )
                    // IDP.g:1983:34: a= ( IS_BETWEEN | BETWEEN )
                    a=this.input.LT(1);
                    if ( (  this.pushNextTokens(IS_BETWEEN,BETWEEN,1) && this.input.LA(1)>=IS_BETWEEN && this.input.LA(1)<=BETWEEN ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(a));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_a_36639 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_a_36639;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "between";
                    }





                    break;
                case 2 :
                    // IDP.g:1983:108: (b= IS_NOT_BETWEEN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:1983:108: (b= IS_NOT_BETWEEN )
                    // IDP.g:1983:109: b= IS_NOT_BETWEEN


                    this.pushNextTokens(IS_NOT_BETWEEN,IS_NOT_BETWEEN,1);
                    b=this.match(this.input,IS_NOT_BETWEEN,IDPParser.FOLLOW_IS_NOT_BETWEEN_in_betweenOp36658); if (this.state.failed) return retval;
                    if( IS_NOT_BETWEEN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    b_tree = this.adaptor.create(b);
                    this.adaptor.addChild(root_0, b_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (b?b.getText():null); fixedVal = "not between";
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "betweenOp";
        }
        return retval;
    },

    // inline static return class
    dateConstant_return: (function() {
        IDPParser.dateConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.dateConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1991:1: dateConstant returns [value] : dateOutput= ( TODAY | YESTERDAY | TOMORROW ) ;
    // $ANTLR start "dateConstant"
    dateConstant: function() {
        this.currentRule = "dateConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.dateConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var dateOutput = null;

        var dateOutput_tree=null;

        try {
            // IDP.g:1993:25: (dateOutput= ( TODAY | YESTERDAY | TOMORROW ) )
            // IDP.g:1993:49: dateOutput= ( TODAY | YESTERDAY | TOMORROW )
            root_0 = this.adaptor.nil();

            dateOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(TODAY,TOMORROW,1) && this.input.LA(1)>=TODAY && this.input.LA(1)<=TOMORROW ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(dateOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_dateOutput_36875 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_dateOutput_36875;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = this.constantsLib.DATE_VALUE_TYPES.getByValue("string", (dateOutput?dateOutput.getText():null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "dateConstant";
        }
        return retval;
    },

    // inline static return class
    ruleDateCollectionSelectionClause_return: (function() {
        IDPParser.ruleDateCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:1995:1: ruleDateCollectionSelectionClause returns [value] : collection= ruleDateCollection ;
    // $ANTLR start "ruleDateCollectionSelectionClause"
    ruleDateCollectionSelectionClause: function() {
        this.currentRule = "ruleDateCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var collection = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:1998:25: (collection= ruleDateCollection )
            // IDP.g:1998:49: collection= ruleDateCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_ruleDateCollectionSelectionClause37047);
            this.ruleDateCollection_DFAcall = false;

             if( typeof this.ruleDateCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleDateCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                collection=this.ruleDateCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	collection=this.ruleDateCollection();

            	}
            	}
            else{
                collection=this.ruleDateCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((collection!==null?collection.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleDateCollectionContext_return: (function() {
        IDPParser.ruleDateCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2005:1: ruleDateCollectionContext returns [value] : navigationOutput= TYPEDATECOLLECTION ;
    // $ANTLR start "ruleDateCollectionContext"
    ruleDateCollectionContext: function() {
        this.currentRule = "ruleDateCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2006:25: (navigationOutput= TYPEDATECOLLECTION )
            // IDP.g:2006:49: navigationOutput= TYPEDATECOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,1);
            navigationOutput=this.match(this.input,TYPEDATECOLLECTION,IDPParser.FOLLOW_TYPEDATECOLLECTION_in_ruleDateCollectionContext37246); if (this.state.failed) return retval;
            if( TYPEDATECOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null));             
                                                                        nav.index = retval.start.index;                          
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleDateContext_return: (function() {
        IDPParser.ruleDateContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2013:1: ruleDateContext returns [value] : navigationOutput= TYPEDATE ;
    // $ANTLR start "ruleDateContext"
    ruleDateContext: function() {
        this.currentRule = "ruleDateContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2014:25: (navigationOutput= TYPEDATE )
            // IDP.g:2014:49: navigationOutput= TYPEDATE
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEDATE,TYPEDATE,1);
            navigationOutput=this.match(this.input,TYPEDATE,IDPParser.FOLLOW_TYPEDATE_in_ruleDateContext37373); if (this.state.failed) return retval;
            if( TYPEDATE !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleDateAliasDTCollectionContext_return: (function() {
        IDPParser.ruleDateAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2021:1: ruleDateAliasDTCollectionContext returns [value] : navigationOutput= TYPEDATEDT ;
    // $ANTLR start "ruleDateAliasDTCollectionContext"
    ruleDateAliasDTCollectionContext: function() {
        this.currentRule = "ruleDateAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2022:25: (navigationOutput= TYPEDATEDT )
            // IDP.g:2022:49: navigationOutput= TYPEDATEDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1);
            navigationOutput=this.match(this.input,TYPEDATEDT,IDPParser.FOLLOW_TYPEDATEDT_in_ruleDateAliasDTCollectionContext37505); if (this.state.failed) return retval;
            if( TYPEDATEDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleDateCollection_return: (function() {
        IDPParser.ruleDateCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2029:1: ruleDateCollection returns [value] : ( ( ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleDateAliasDTCollectionContext ) );
    // $ANTLR start "ruleDateCollection"
    ruleDateCollection: function() {
        this.currentRule = "ruleDateCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT150 = null;
        var OF151 = null;
        var CURRENT152 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;
         var navigationOutputDT = null;

        var CURRENT150_tree=null;
        var OF151_tree=null;
        var CURRENT152_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:2040:17: ( ( ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) ) (flt= filterClause )? ) | (navigationOutputDT= ruleDateAliasDTCollectionContext ) )
            var alt153=2;
            var LA153_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA153_0==CURRENT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA153_0>=TYPEDATECOLLECTION && LA153_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA153_0>=ZERO_OR_ONE && LA153_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA153_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA153_0==CURRENT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA153_0>=TYPEDATECOLLECTION && LA153_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA153_0>=ZERO_OR_ONE && LA153_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA153_0==INT )) ) {
                alt153=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA153_0==TYPEDATEDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA153_0==TYPEDATEDT )) ) {
                alt153=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_153_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 153, 0, this.input);

                nvae_153_0.c = this.input.LA(1);
                throw nvae_153_0;
            }
            switch (alt153) {
                case 1 :
                    // IDP.g:2040:33: ( ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) ) (flt= filterClause )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2040:33: ( ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) ) (flt= filterClause )? )
                    // IDP.g:2040:34: ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) ) (flt= filterClause )?
                    // IDP.g:2040:34: ( ( CURRENT )? (navigationOutput= ruleDateCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) )
                    var alt151=3;

                    	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
                    case CURRENT:
                    case TYPEDATECOLLECTION:
                        alt151=1;   
                        break;
                    case ZERO_OR_ONE:
                    case TYPENUMBERPARAMETER:
                    case INT:
                        alt151=2;   
                        break;
                    case ALL:
                        alt151=3;   
                        break;
                    default:
                    this.pushApplyTokens([CURRENT,TYPEDATECOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
                    	//this.pushApplyTokens();
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_151 =
                    			new org.antlr.runtime.NoViableAltException(null, 151, 0, this.input);

                        nvae_151.c = this.input.LA(1);
                        throw nvae_151;
                    }

                    switch (alt151) {
                        case 1 :
                            // IDP.g:2041:49: ( CURRENT )? (navigationOutput= ruleDateCollectionContext )
                            // IDP.g:2041:49: ( CURRENT )?
                            var alt146=2;

                            var LA146_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA146_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA146_0==CURRENT )) ) {
                                alt146=1;
                            }
                            switch (alt146) {
                                case 1 :
                                    // IDP.g:2041:50: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT150=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleDateCollection37732); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT150_tree = this.adaptor.create(CURRENT150);
                                    this.adaptor.addChild(root_0, CURRENT150_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA146 !== undefined && this.failedPredictDFA146)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2041:96: (navigationOutput= ruleDateCollectionContext )
                            // IDP.g:2041:97: navigationOutput= ruleDateCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37743);
                            this.ruleDateCollectionContext_DFAcall = false;

                             if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleDateCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleDateCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleDateCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;
                        case 2 :
                            // IDP.g:2042:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:2042:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:2042:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) ) (order= ruleSortingOptions )
                            // IDP.g:2042:34: (quantity= ruleInteger )
                            // IDP.g:2042:35: quantity= ruleInteger
                            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleDateCollection37789);
                            this.ruleInteger_DFAcall = false;

                             if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                quantity=this.ruleInteger();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	quantity=this.ruleInteger();

                            	}
                            	}
                            else{
                                quantity=this.ruleInteger();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                            }



                            // IDP.g:2042:113: ( OF rall= ruleAll )?
                            var alt147=2;

                            var LA147_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA147_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA147_0==OF )) ) {
                                alt147=1;
                            }
                            switch (alt147) {
                                case 1 :
                                    // IDP.g:2042:114: OF rall= ruleAll


                                    this.pushNextTokens(OF,OF,1);
                                    OF151=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleDateCollection37795); if (this.state.failed) return retval;
                                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    OF151_tree = this.adaptor.create(OF151);
                                    this.adaptor.addChild(root_0, OF151_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleDateCollection37801);
                                    this.ruleAll_DFAcall = false;

                                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA147 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        rall=this.ruleAll();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	rall=this.ruleAll();

                                    	}
                                    	}
                                    else{
                                        rall=this.ruleAll();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA147 !== undefined && this.failedPredictDFA147)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2042:221: ( ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) )
                            // IDP.g:2042:222: ( CURRENT )? (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext )
                            // IDP.g:2042:222: ( CURRENT )?
                            var alt148=2;

                            var LA148_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA148_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA148_0==CURRENT )) ) {
                                alt148=1;
                            }
                            switch (alt148) {
                                case 1 :
                                    // IDP.g:2042:223: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT152=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleDateCollection37810); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT152_tree = this.adaptor.create(CURRENT152);
                                    this.adaptor.addChild(root_0, CURRENT152_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA148 !== undefined && this.failedPredictDFA148)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2042:269: (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext )
                            var alt149=2;

                            var LA149_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA149_0==TYPEDATE )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA149_0==TYPEDATE )) ) {
                                alt149=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,1) && LA149_0==TYPEDATECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,1) && LA149_0==TYPEDATECOLLECTION )) ) {
                                alt149=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_149_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 149, 0, this.input);

                                nvae_149_0.c = this.input.LA(1);
                                throw nvae_149_0;
                            }
                            switch (alt149) {
                                case 1 :
                                    // IDP.g:2042:270: navigationOutput= ruleDateContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleDateContext_in_ruleDateCollection37821);
                                    this.ruleDateContext_DFAcall = false;

                                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA149 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleDateContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleDateContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleDateContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:2042:307: navigationOutput= ruleDateCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37829);
                                    this.ruleDateCollectionContext_DFAcall = false;

                                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA149 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleDateCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleDateCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleDateCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA149 !== undefined && this.failedPredictDFA149)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }



                            // IDP.g:2043:61: (order= ruleSortingOptions )
                            // IDP.g:2043:62: order= ruleSortingOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleDateCollection37901);
                            this.ruleSortingOptions_DFAcall = false;

                             if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                order=this.ruleSortingOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	order=this.ruleSortingOptions();

                            	}
                            	}
                            else{
                                order=this.ruleSortingOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                            }



                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                            }





                            break;
                        case 3 :
                            // IDP.g:2044:49: ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) )
                            // IDP.g:2044:49: ( (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext ) )
                            // IDP.g:2044:50: (rall= ruleAll ) (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext )
                            // IDP.g:2044:50: (rall= ruleAll )
                            // IDP.g:2044:51: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleDateCollection37965);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                            }



                            // IDP.g:2044:126: (navigationOutput= ruleDateContext | navigationOutput= ruleDateCollectionContext )
                            var alt150=2;

                            var LA150_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA150_0==TYPEDATE )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATE,TYPEDATE,1) && LA150_0==TYPEDATE )) ) {
                                alt150=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,1) && LA150_0==TYPEDATECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,1) && LA150_0==TYPEDATECOLLECTION )) ) {
                                alt150=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_150_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 150, 0, this.input);

                                nvae_150_0.c = this.input.LA(1);
                                throw nvae_150_0;
                            }
                            switch (alt150) {
                                case 1 :
                                    // IDP.g:2044:127: navigationOutput= ruleDateContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleDateContext_in_ruleDateCollection37975);
                                    this.ruleDateContext_DFAcall = false;

                                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA150 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleDateContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleDateContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleDateContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:2044:164: navigationOutput= ruleDateCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37983);
                                    this.ruleDateCollectionContext_DFAcall = false;

                                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA150 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleDateCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleDateCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleDateCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA150 !== undefined && this.failedPredictDFA150)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA151 !== undefined && this.failedPredictDFA151)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2046:33: (flt= filterClause )?
                    var alt152=2;

                    var LA152_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA152_0>=WHERE && LA152_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA152_0>=WHERE && LA152_0<=FILTER_BY )) ) {
                        alt152=1;
                    }
                    switch (alt152) {
                        case 1 :
                            // IDP.g:2046:34: flt= filterClause
                            this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleDateCollection38079);
                            this.filterClause_DFAcall = false;

                             if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA152 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                flt=this.filterClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	flt=this.filterClause();

                            	}
                            	}
                            else{
                                flt=this.filterClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.filterClause = (flt!==null?flt.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA152 !== undefined && this.failedPredictDFA152)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:2047:35: (navigationOutputDT= ruleDateAliasDTCollectionContext )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2047:35: (navigationOutputDT= ruleDateAliasDTCollectionContext )
                    // IDP.g:2047:36: navigationOutputDT= ruleDateAliasDTCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleDateAliasDTCollectionContext_in_ruleDateCollection38125);
                    this.ruleDateAliasDTCollectionContext_DFAcall = false;

                     if( typeof this.ruleDateCollectionCurrentDecisionNumber !== 'undefined' && this.ruleDateCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutputDT=this.ruleDateAliasDTCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutputDT=this.ruleDateAliasDTCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutputDT=this.ruleDateAliasDTCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateCollection";
        }
        return retval;
    },

    // inline static return class
    ruleAll_return: (function() {
        IDPParser.ruleAll_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleAll_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2050:1: ruleAll returns [value] : a= ALL ;
    // $ANTLR start "ruleAll"
    ruleAll: function() {
        this.currentRule = "ruleAll";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleAll_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;

        var a_tree=null;

         var aggregationOperatorArgs = {}; var operatorArgs = {}; 
        try {
            // IDP.g:2054:17: (a= ALL )
            // IDP.g:2054:33: a= ALL
            root_0 = this.adaptor.nil();



            this.pushNextTokens(ALL,ALL,1);
            a=this.match(this.input,ALL,IDPParser.FOLLOW_ALL_in_ruleAll38298); if (this.state.failed) return retval;
            if( ALL !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            a_tree = this.adaptor.create(a);
            this.adaptor.addChild(root_0, a_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = (a?a.getText():null); operatorArgs.value = "all"; this.parseModelLib.getModelManger().setAllContext();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = new this.entityModelLib.OperatorOption(operatorArgs);
                                                  retval.value = new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleAll";
        }
        return retval;
    },

    // inline static return class
    ruleDateAggregationFunction_return: (function() {
        IDPParser.ruleDateAggregationFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleDateAggregationFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2063:1: ruleDateAggregationFunction returns [value] : ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB ) ) ;
    // $ANTLR start "ruleDateAggregationFunction"
    ruleDateAggregationFunction: function() {
        this.currentRule = "ruleDateAggregationFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleDateAggregationFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB153 = null;
        var RROUNDB154 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB153_tree=null;
        var RROUNDB154_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
                                        	var ruleOutput = {}; 
                                        	var aggregationOperatorArgs = {};                                          
                                                ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DATE.value;
                                        
        try {
            // IDP.g:2070:17: ( ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB ) ) )
            // IDP.g:2070:33: ( (aggregationOptionOutput= collectionAggregationOption ) ) ( (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2070:33: ( (aggregationOptionOutput= collectionAggregationOption ) )
            // IDP.g:2071:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:2071:49: (aggregationOptionOutput= collectionAggregationOption )
            // IDP.g:2071:51: aggregationOptionOutput= collectionAggregationOption
            this.pushFollow(IDPParser.FOLLOW_collectionAggregationOption_in_ruleDateAggregationFunction38481);
            this.collectionAggregationOption_DFAcall = false;

             if( typeof this.ruleDateAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleDateAggregationFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleDateAggregationFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.collectionAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateAggregationFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.collectionAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.collectionAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }



            // IDP.g:2073:34: ( (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB ) )
            // IDP.g:2074:48: (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB )
            // IDP.g:2074:48: (compoundSelectionOutput= ruleDateCollection | LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB )
            var alt154=2;

            var LA154_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA154_0==CURRENT )||( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA154_0==TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA154_0>=TYPEDATECOLLECTION && LA154_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA154_0>=ZERO_OR_ONE && LA154_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA154_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA154_0==CURRENT )||( this.pushNextTokens(TYPEDATEDT,TYPEDATEDT,1) && LA154_0==TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA154_0>=TYPEDATECOLLECTION && LA154_0<=ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA154_0>=ZERO_OR_ONE && LA154_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA154_0==INT )) ) {
                alt154=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA154_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA154_0==LROUNDB )) ) {
                alt154=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_154_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 154, 0, this.input);

                nvae_154_0.c = this.input.LA(1);
                throw nvae_154_0;
            }
            switch (alt154) {
                case 1 :
                    // IDP.g:2074:49: compoundSelectionOutput= ruleDateCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_ruleDateAggregationFunction38610);
                    this.ruleDateCollection_DFAcall = false;

                     if( typeof this.ruleDateAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleDateAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA154 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleDateCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleDateCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleDateCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2074:96: LROUNDB compoundSelectionOutput= ruleDateCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB153=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleDateAggregationFunction38614); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB153_tree = this.adaptor.create(LROUNDB153);
                    this.adaptor.addChild(root_0, LROUNDB153_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_ruleDateAggregationFunction38621);
                    this.ruleDateCollection_DFAcall = false;

                     if( typeof this.ruleDateAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleDateAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleDateAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA154 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleDateCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleDateAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleDateCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleDateCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB154=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleDateAggregationFunction38623); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB154_tree = this.adaptor.create(RROUNDB154);
                    this.adaptor.addChild(root_0, RROUNDB154_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA154 !== undefined && this.failedPredictDFA154)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);if(ruleOutput.aggregationOption.isNoneValuelistAggOperator()){this.parseModelLib.getModelManger().cleanValueListAttribute();}
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleDateAggregationFunction";

                                             	if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
                                             	          this.parseModelLib.getModelManger().popFromContextQueue();
                                             	}
                                             
        }
        return retval;
    },

    // inline static return class
    ruleCompoundDateAggregationSelection_return: (function() {
        IDPParser.ruleCompoundDateAggregationSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCompoundDateAggregationSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2082:1: ruleCompoundDateAggregationSelection returns [value] : (compoundSelectionOutput= ruleDateAggregationFunction ) ;
    // $ANTLR start "ruleCompoundDateAggregationSelection"
    ruleCompoundDateAggregationSelection: function() {
        this.currentRule = "ruleCompoundDateAggregationSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCompoundDateAggregationSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:2083:17: ( (compoundSelectionOutput= ruleDateAggregationFunction ) )
            // IDP.g:2083:33: (compoundSelectionOutput= ruleDateAggregationFunction )
            root_0 = this.adaptor.nil();

            // IDP.g:2083:33: (compoundSelectionOutput= ruleDateAggregationFunction )
            // IDP.g:2083:34: compoundSelectionOutput= ruleDateAggregationFunction
            this.pushFollow(IDPParser.FOLLOW_ruleDateAggregationFunction_in_ruleCompoundDateAggregationSelection38758);
            this.ruleDateAggregationFunction_DFAcall = false;

             if( typeof this.ruleCompoundDateAggregationSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundDateAggregationSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCompoundDateAggregationSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                compoundSelectionOutput=this.ruleDateAggregationFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundDateAggregationSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	compoundSelectionOutput=this.ruleDateAggregationFunction();

            	}
            	}
            else{
                compoundSelectionOutput=this.ruleDateAggregationFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCompoundDateAggregationSelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringSingleStatement_return: (function() {
        IDPParser.ruleStringSingleStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSingleStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2095:1: ruleStringSingleStatement returns [value] : selectionLeftOutput= ruleStringClause ;
    // $ANTLR start "ruleStringSingleStatement"
    ruleStringSingleStatement: function() {
        this.currentRule = "ruleStringSingleStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSingleStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var singleStatementOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:2098:13: (selectionLeftOutput= ruleStringClause )
            // IDP.g:2098:25: selectionLeftOutput= ruleStringClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_ruleStringSingleStatement39026);
            this.ruleStringClause_DFAcall = false;

             if( typeof this.ruleStringSingleStatementCurrentDecisionNumber !== 'undefined' && this.ruleStringSingleStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringSingleStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleStringClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSingleStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleStringClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleStringClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              singleStatementOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(singleStatementOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSingleStatement";
        }
        return retval;
    },

    // inline static return class
    ruleStringClause_return: (function() {
        IDPParser.ruleStringClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2101:1: ruleStringClause returns [value] : (selectionClauseOutput= ruleStringSelectionClause | LROUNDB selectionClauseOutput= ruleStringSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleStringClause"
    ruleStringClause: function() {
        this.currentRule = "ruleStringClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB155 = null;
        var RROUNDB156 = null;
         var selectionClauseOutput = null;

        var LROUNDB155_tree=null;
        var RROUNDB156_tree=null;

        try {
            // IDP.g:2102:17: ( (selectionClauseOutput= ruleStringSelectionClause | LROUNDB selectionClauseOutput= ruleStringSelectionClause RROUNDB ) )
            // IDP.g:2102:33: (selectionClauseOutput= ruleStringSelectionClause | LROUNDB selectionClauseOutput= ruleStringSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2102:33: (selectionClauseOutput= ruleStringSelectionClause | LROUNDB selectionClauseOutput= ruleStringSelectionClause RROUNDB )
            var alt155=2;

            var LA155_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA155_0==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA155_0==CURRENT )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA155_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA155_0>=STRING && LA155_0<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA155_0==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA155_0==CURRENT )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA155_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA155_0>=STRING && LA155_0<=TYPESTRINGPARAMETER )) ) {
                alt155=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA155_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA155_0==LROUNDB )) ) {
                alt155=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_155_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 155, 0, this.input);

                nvae_155_0.c = this.input.LA(1);
                throw nvae_155_0;
            }
            switch (alt155) {
                case 1 :
                    // IDP.g:2102:34: selectionClauseOutput= ruleStringSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClause_in_ruleStringClause39092);
                    this.ruleStringSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA155 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleStringSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleStringSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleStringSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2103:35: LROUNDB selectionClauseOutput= ruleStringSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB155=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleStringClause39128); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB155_tree = this.adaptor.create(LROUNDB155);
                    this.adaptor.addChild(root_0, LROUNDB155_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClause_in_ruleStringClause39134);
                    this.ruleStringSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA155 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleStringSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleStringSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleStringSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB156=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleStringClause39136); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB156_tree = this.adaptor.create(RROUNDB156);
                    this.adaptor.addChild(root_0, RROUNDB156_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA155 !== undefined && this.failedPredictDFA155)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringClauseStringAndDates_return: (function() {
        IDPParser.ruleStringClauseStringAndDates_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringClauseStringAndDates_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2107:1: ruleStringClauseStringAndDates returns [value] : (selectionClauseOutput= ruleStringSelectionClauseStringAndDates | LROUNDB selectionClauseOutput= ruleStringSelectionClauseStringAndDates RROUNDB ) ;
    // $ANTLR start "ruleStringClauseStringAndDates"
    ruleStringClauseStringAndDates: function() {
        this.currentRule = "ruleStringClauseStringAndDates";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringClauseStringAndDates_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB157 = null;
        var RROUNDB158 = null;
         var selectionClauseOutput = null;

        var LROUNDB157_tree=null;
        var RROUNDB158_tree=null;

        try {
            // IDP.g:2109:17: ( (selectionClauseOutput= ruleStringSelectionClauseStringAndDates | LROUNDB selectionClauseOutput= ruleStringSelectionClauseStringAndDates RROUNDB ) )
            // IDP.g:2109:33: (selectionClauseOutput= ruleStringSelectionClauseStringAndDates | LROUNDB selectionClauseOutput= ruleStringSelectionClauseStringAndDates RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2109:33: (selectionClauseOutput= ruleStringSelectionClauseStringAndDates | LROUNDB selectionClauseOutput= ruleStringSelectionClauseStringAndDates RROUNDB )
            var alt156=2;

            var LA156_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA156_0==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA156_0==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,1) && LA156_0==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,1) && LA156_0==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,1) && LA156_0==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA156_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA156_0>=STRING && LA156_0<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA156_0==TYPESTRING )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA156_0==CURRENT )||( this.pushNextTokens(TIMESTRING,TIMESTRING,1) && LA156_0==TIMESTRING )||( this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,1) && LA156_0==TIMESTAMPSTRING )||( this.pushNextTokens(DATESTRING,DATESTRING,1) && LA156_0==DATESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,1) && LA156_0==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,1) && LA156_0>=STRING && LA156_0<=TYPESTRINGPARAMETER )) ) {
                alt156=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA156_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA156_0==LROUNDB )) ) {
                alt156=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_156_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 156, 0, this.input);

                nvae_156_0.c = this.input.LA(1);
                throw nvae_156_0;
            }
            switch (alt156) {
                case 1 :
                    // IDP.g:2109:34: selectionClauseOutput= ruleStringSelectionClauseStringAndDates
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClauseStringAndDates_in_ruleStringClauseStringAndDates39304);
                    this.ruleStringSelectionClauseStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringClauseStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringClauseStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringClauseStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA156 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringClauseStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2110:35: LROUNDB selectionClauseOutput= ruleStringSelectionClauseStringAndDates RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB157=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleStringClauseStringAndDates39340); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB157_tree = this.adaptor.create(LROUNDB157);
                    this.adaptor.addChild(root_0, LROUNDB157_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClauseStringAndDates_in_ruleStringClauseStringAndDates39346);
                    this.ruleStringSelectionClauseStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringClauseStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringClauseStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringClauseStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA156 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringClauseStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleStringSelectionClauseStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB158=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleStringClauseStringAndDates39348); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB158_tree = this.adaptor.create(RROUNDB158);
                    this.adaptor.addChild(root_0, RROUNDB158_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA156 !== undefined && this.failedPredictDFA156)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringClauseStringAndDates";
        }
        return retval;
    },

    // inline static return class
    ruleOneStringSimpleSelectionClause_return: (function() {
        IDPParser.ruleOneStringSimpleSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleOneStringSimpleSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2114:1: ruleOneStringSimpleSelectionClause returns [value] : selction1= ruleStringSimpleSelection ;
    // $ANTLR start "ruleOneStringSimpleSelectionClause"
    ruleOneStringSimpleSelectionClause: function() {
        this.currentRule = "ruleOneStringSimpleSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleOneStringSimpleSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction1 = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2119:18: (selction1= ruleStringSimpleSelection )
            // IDP.g:2119:34: selction1= ruleStringSimpleSelection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringSimpleSelection_in_ruleOneStringSimpleSelectionClause39588);
            this.ruleStringSimpleSelection_DFAcall = false;

             if( typeof this.ruleOneStringSimpleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleOneStringSimpleSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleOneStringSimpleSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleStringSimpleSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleOneStringSimpleSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleStringSimpleSelection();

            	}
            	}
            else{
                selction1=this.ruleStringSimpleSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); 
                                                              retval.value = selectionClauseOutput; delete modelManager.isCurrent; 
                                                              
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleOneStringSimpleSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringSelectionClause_return: (function() {
        IDPParser.ruleStringSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2121:1: ruleStringSelectionClause returns [value] : selction1= ruleStringBaseSelection ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )* ;
    // $ANTLR start "ruleStringSelectionClause"
    ruleStringSelectionClause: function() {
        this.currentRule = "ruleStringSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var plus = null;
         var selction1 = null;
         var selction2 = null;

        var plus_tree=null;

        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2126:17: (selction1= ruleStringBaseSelection ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )* )
            // IDP.g:2126:33: selction1= ruleStringBaseSelection ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )*
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClause39713);
            this.ruleStringBaseSelection_DFAcall = false;

             if( typeof this.ruleStringSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleStringBaseSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleStringBaseSelection();

            	}
            	}
            else{
                selction1=this.ruleStringBaseSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }
            // IDP.g:2126:117: ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )*
            loop157:
            do {
                var alt157=2;
                var LA157_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA157_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA157_0==PLUS )) ) {
                    var LA157_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,2) && LA157_2==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,2) && LA157_2==CURRENT )) ) {
                        var LA157_3 = this.input.LA(3);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,3) && LA157_3==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,3) && LA157_3==TYPESTRING )) ) {
                            alt157=1;
                        }


                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA157_2==TYPESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA157_2==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA157_2>=STRING && LA157_2<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA157_2==TYPESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA157_2==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA157_2>=STRING && LA157_2<=TYPESTRINGPARAMETER )) ) {
                        alt157=1;
                    }


                }


                switch (alt157) {
                case 1 :
                    // IDP.g:2126:119: (plus= PLUS ) (selction2= ruleStringBaseSelection )
                    // IDP.g:2126:119: (plus= PLUS )
                    // IDP.g:2126:120: plus= PLUS


                    this.pushNextTokens(PLUS,PLUS,1);
                    plus=this.match(this.input,PLUS,IDPParser.FOLLOW_PLUS_in_ruleStringSelectionClause39724); if (this.state.failed) return retval;
                    if( PLUS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    plus_tree = this.adaptor.create(plus);
                    this.adaptor.addChild(root_0, plus_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var arithObj = new this.entityModelLib.ArithmeticOperator((plus?plus.getText():null)) ;selectionClauseOutput.push(arithObj); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }



                    // IDP.g:2126:307: (selction2= ruleStringBaseSelection )
                    // IDP.g:2126:308: selction2= ruleStringBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClause39734);
                    this.ruleStringBaseSelection_DFAcall = false;

                     if( typeof this.ruleStringSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringSelectionClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSelectionClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction2=this.ruleStringBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSelectionClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction2=this.ruleStringBaseSelection();

                    	}
                    	}
                    else{
                        selction2=this.ruleStringBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction2.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selction2!==null?selction2.value:null)); 
                    }





                    break;

                default :
                    break loop157;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); 
                                              	retval.value = selectionClauseOutput; delete modelManager.isCurrent; 
                                              	if ( this.input.LA(1) === PLUS) { this.parseModelLib.getModelManger().cleanValueListAttribute(); }
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringSelectionClauseStringAndDates_return: (function() {
        IDPParser.ruleStringSelectionClauseStringAndDates_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSelectionClauseStringAndDates_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2128:1: ruleStringSelectionClauseStringAndDates returns [value] : selction1= ruleStringBaseSelectionStringAndDates ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )* ;
    // $ANTLR start "ruleStringSelectionClauseStringAndDates"
    ruleStringSelectionClauseStringAndDates: function() {
        this.currentRule = "ruleStringSelectionClauseStringAndDates";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSelectionClauseStringAndDates_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var plus = null;
         var selction1 = null;
         var selction2 = null;

        var plus_tree=null;

        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2131:17: (selction1= ruleStringBaseSelectionStringAndDates ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )* )
            // IDP.g:2131:33: selction1= ruleStringBaseSelectionStringAndDates ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )*
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringBaseSelectionStringAndDates_in_ruleStringSelectionClauseStringAndDates39891);
            this.ruleStringBaseSelectionStringAndDates_DFAcall = false;

             if( typeof this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleStringBaseSelectionStringAndDates();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleStringBaseSelectionStringAndDates();

            	}
            	}
            else{
                selction1=this.ruleStringBaseSelectionStringAndDates();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }
            // IDP.g:2131:131: ( (plus= PLUS ) (selction2= ruleStringBaseSelection ) )*
            loop158:
            do {
                var alt158=2;
                var LA158_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA158_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA158_0==PLUS )) ) {
                    var LA158_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,2) && LA158_2==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,2) && LA158_2==CURRENT )) ) {
                        var LA158_3 = this.input.LA(3);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,3) && LA158_3==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,3) && LA158_3==TYPESTRING )) ) {
                            alt158=1;
                        }


                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA158_2==TYPESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA158_2==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA158_2>=STRING && LA158_2<=TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA158_2==TYPESTRING )||( this.pushNextTokens(CONCATENATE,CONCATENATE,2) && LA158_2==CONCATENATE )||(  this.pushNextTokens(STRING,TYPESTRINGPARAMETER,2) && LA158_2>=STRING && LA158_2<=TYPESTRINGPARAMETER )) ) {
                        alt158=1;
                    }


                }


                switch (alt158) {
                case 1 :
                    // IDP.g:2131:133: (plus= PLUS ) (selction2= ruleStringBaseSelection )
                    // IDP.g:2131:133: (plus= PLUS )
                    // IDP.g:2131:134: plus= PLUS


                    this.pushNextTokens(PLUS,PLUS,1);
                    plus=this.match(this.input,PLUS,IDPParser.FOLLOW_PLUS_in_ruleStringSelectionClauseStringAndDates39902); if (this.state.failed) return retval;
                    if( PLUS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    plus_tree = this.adaptor.create(plus);
                    this.adaptor.addChild(root_0, plus_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var arithObj = new this.entityModelLib.ArithmeticOperator((plus?plus.getText():null)) ;selectionClauseOutput.push(arithObj);
                    }



                    // IDP.g:2131:258: (selction2= ruleStringBaseSelection )
                    // IDP.g:2131:259: selction2= ruleStringBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClauseStringAndDates39912);
                    this.ruleStringBaseSelection_DFAcall = false;

                     if( typeof this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction2=this.ruleStringBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSelectionClauseStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction2=this.ruleStringBaseSelection();

                    	}
                    	}
                    else{
                        selction2=this.ruleStringBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction2.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((selction2!==null?selction2.value:null)); 
                    }





                    break;

                default :
                    break loop158;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent; /*this.parseUtilsLib.validateValueListForOp(selction1, selction2, selectionClauseOutput, '+');*/
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSelectionClauseStringAndDates";
        }
        return retval;
    },

    // inline static return class
    ruleStringBaseSelection_return: (function() {
        IDPParser.ruleStringBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2133:1: ruleStringBaseSelection returns [value] : (selction= ruleStringSimpleSelection | selction= ruleStringCompoundSelection | selction= ruleStringAdvanceFunction );
    // $ANTLR start "ruleStringBaseSelection"
    ruleStringBaseSelection: function() {
        this.currentRule = "ruleStringBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:2134:17: (selction= ruleStringSimpleSelection | selction= ruleStringCompoundSelection | selction= ruleStringAdvanceFunction )
            var alt159=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case STRING:
            case TYPESTRINGPARAMETER:
                alt159=1;   
                break;
            case TYPESTRING:
            case CURRENT:
                alt159=2;   
                break;
            case CONCATENATE:
                alt159=3;   
                break;
            default:
            this.pushApplyTokens([STRING,TYPESTRINGPARAMETER,TYPESTRING,CURRENT,CONCATENATE]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_159 =
            			new org.antlr.runtime.NoViableAltException(null, 159, 0, this.input);

                nvae_159.c = this.input.LA(1);
                throw nvae_159;
            }

            switch (alt159) {
                case 1 :
                    // IDP.g:2134:33: selction= ruleStringSimpleSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringSimpleSelection_in_ruleStringBaseSelection39965);
                    this.ruleStringSimpleSelection_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA159 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringSimpleSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringSimpleSelection();

                    	}
                    	}
                    else{
                        selction=this.ruleStringSimpleSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2134:100: selction= ruleStringCompoundSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringCompoundSelection_in_ruleStringBaseSelection39975);
                    this.ruleStringCompoundSelection_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA159 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringCompoundSelection();

                    	}
                    	}
                    else{
                        selction=this.ruleStringCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:2134:169: selction= ruleStringAdvanceFunction
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringAdvanceFunction_in_ruleStringBaseSelection39985);
                    this.ruleStringAdvanceFunction_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA159 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringAdvanceFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringAdvanceFunction();

                    	}
                    	}
                    else{
                        selction=this.ruleStringAdvanceFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringBaseSelectionStringAndDates_return: (function() {
        IDPParser.ruleStringBaseSelectionStringAndDates_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringBaseSelectionStringAndDates_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2136:1: ruleStringBaseSelectionStringAndDates returns [value] : (selction= ruleStringSimpleSelectionStringAndDates | selction= ruleStringCompoundSelection | selction= ruleStringAdvanceFunction );
    // $ANTLR start "ruleStringBaseSelectionStringAndDates"
    ruleStringBaseSelectionStringAndDates: function() {
        this.currentRule = "ruleStringBaseSelectionStringAndDates";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringBaseSelectionStringAndDates_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        try {
            // IDP.g:2137:17: (selction= ruleStringSimpleSelectionStringAndDates | selction= ruleStringCompoundSelection | selction= ruleStringAdvanceFunction )
            var alt160=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TIMESTRING:
            case TIMESTAMPSTRING:
            case DATESTRING:
            case STRING:
            case TYPESTRINGPARAMETER:
                alt160=1;   
                break;
            case TYPESTRING:
            case CURRENT:
                alt160=2;   
                break;
            case CONCATENATE:
                alt160=3;   
                break;
            default:
            this.pushApplyTokens([TIMESTRING,TIMESTAMPSTRING,DATESTRING,STRING,TYPESTRINGPARAMETER,TYPESTRING,CURRENT,CONCATENATE]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_160 =
            			new org.antlr.runtime.NoViableAltException(null, 160, 0, this.input);

                nvae_160.c = this.input.LA(1);
                throw nvae_160;
            }

            switch (alt160) {
                case 1 :
                    // IDP.g:2137:33: selction= ruleStringSimpleSelectionStringAndDates
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringSimpleSelectionStringAndDates_in_ruleStringBaseSelectionStringAndDates40033);
                    this.ruleStringSimpleSelectionStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA160 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringSimpleSelectionStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringSimpleSelectionStringAndDates();

                    	}
                    	}
                    else{
                        selction=this.ruleStringSimpleSelectionStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2137:114: selction= ruleStringCompoundSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringCompoundSelection_in_ruleStringBaseSelectionStringAndDates40043);
                    this.ruleStringCompoundSelection_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA160 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringCompoundSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringCompoundSelection();

                    	}
                    	}
                    else{
                        selction=this.ruleStringCompoundSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:2137:183: selction= ruleStringAdvanceFunction
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringAdvanceFunction_in_ruleStringBaseSelectionStringAndDates40053);
                    this.ruleStringAdvanceFunction_DFAcall = false;

                     if( typeof this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA160 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selction=this.ruleStringAdvanceFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseSelectionStringAndDatesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selction=this.ruleStringAdvanceFunction();

                    	}
                    	}
                    else{
                        selction=this.ruleStringAdvanceFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selction!==null?selction.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringBaseSelectionStringAndDates";
        }
        return retval;
    },

    // inline static return class
    ruleStringAdvanceFunction_return: (function() {
        IDPParser.ruleStringAdvanceFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringAdvanceFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2139:1: ruleStringAdvanceFunction returns [value] : func= ruleStringConcatenateFunction ;
    // $ANTLR start "ruleStringAdvanceFunction"
    ruleStringAdvanceFunction: function() {
        this.currentRule = "ruleStringAdvanceFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringAdvanceFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var func = null;


        try {
            // IDP.g:2140:17: (func= ruleStringConcatenateFunction )
            // IDP.g:2140:33: func= ruleStringConcatenateFunction
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringConcatenateFunction_in_ruleStringAdvanceFunction40102);
            this.ruleStringConcatenateFunction_DFAcall = false;

             if( typeof this.ruleStringAdvanceFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringAdvanceFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringAdvanceFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                func=this.ruleStringConcatenateFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringAdvanceFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	func=this.ruleStringConcatenateFunction();

            	}
            	}
            else{
                func=this.ruleStringConcatenateFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (func!==null?func.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringAdvanceFunction";
        }
        return retval;
    },

    // inline static return class
    ruleStringConcatenateFunction_return: (function() {
        IDPParser.ruleStringConcatenateFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringConcatenateFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2142:1: ruleStringConcatenateFunction returns [value] : CONCATENATE LROUNDB (str= ruleConcatenateInputOptions ) ( ( SEMICOLON str= ruleConcatenateInputOptions )* ) RROUNDB ;
    // $ANTLR start "ruleStringConcatenateFunction"
    ruleStringConcatenateFunction: function() {
        this.currentRule = "ruleStringConcatenateFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringConcatenateFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CONCATENATE159 = null;
        var LROUNDB160 = null;
        var SEMICOLON161 = null;
        var RROUNDB162 = null;
         var str = null;

        var CONCATENATE159_tree=null;
        var LROUNDB160_tree=null;
        var SEMICOLON161_tree=null;
        var RROUNDB162_tree=null;

        retval.value = new this.entityModelLib.AdvanceFunction(this.constantsLib.advanceFunctionNamesEnum.concatenate);this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2144:17: ( CONCATENATE LROUNDB (str= ruleConcatenateInputOptions ) ( ( SEMICOLON str= ruleConcatenateInputOptions )* ) RROUNDB )
            // IDP.g:2144:33: CONCATENATE LROUNDB (str= ruleConcatenateInputOptions ) ( ( SEMICOLON str= ruleConcatenateInputOptions )* ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(CONCATENATE,CONCATENATE,1);
            CONCATENATE159=this.match(this.input,CONCATENATE,IDPParser.FOLLOW_CONCATENATE_in_ruleStringConcatenateFunction40185); if (this.state.failed) return retval;
            if( CONCATENATE !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            CONCATENATE159_tree = this.adaptor.create(CONCATENATE159);
            this.adaptor.addChild(root_0, CONCATENATE159_tree);
            }


            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB160=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleStringConcatenateFunction40220); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB160_tree = this.adaptor.create(LROUNDB160);
            this.adaptor.addChild(root_0, LROUNDB160_tree);
            }
            // IDP.g:2146:33: (str= ruleConcatenateInputOptions )
            // IDP.g:2146:34: str= ruleConcatenateInputOptions
            this.pushFollow(IDPParser.FOLLOW_ruleConcatenateInputOptions_in_ruleStringConcatenateFunction40259);
            this.ruleConcatenateInputOptions_DFAcall = false;

             if( typeof this.ruleStringConcatenateFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringConcatenateFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringConcatenateFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleConcatenateInputOptions();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringConcatenateFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleConcatenateInputOptions();

            	}
            	}
            else{
                str=this.ruleConcatenateInputOptions();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            // IDP.g:2146:159: ( ( SEMICOLON str= ruleConcatenateInputOptions )* )
            // IDP.g:2146:160: ( SEMICOLON str= ruleConcatenateInputOptions )*
            // IDP.g:2146:160: ( SEMICOLON str= ruleConcatenateInputOptions )*
            loop161:
            do {
                var alt161=2;
                var LA161_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA161_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA161_0==SEMICOLON )) ) {
                    alt161=1;
                }


                switch (alt161) {
                case 1 :
                    // IDP.g:2146:161: SEMICOLON str= ruleConcatenateInputOptions


                    this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                    SEMICOLON161=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleStringConcatenateFunction40266); if (this.state.failed) return retval;
                    if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    SEMICOLON161_tree = this.adaptor.create(SEMICOLON161);
                    this.adaptor.addChild(root_0, SEMICOLON161_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleConcatenateInputOptions_in_ruleStringConcatenateFunction40272);
                    this.ruleConcatenateInputOptions_DFAcall = false;

                     if( typeof this.ruleStringConcatenateFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringConcatenateFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringConcatenateFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA161 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        str=this.ruleConcatenateInputOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringConcatenateFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	str=this.ruleConcatenateInputOptions();

                    	}
                    	}
                    else{
                        str=this.ruleConcatenateInputOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
                    }


                    break;

                default :
                    break loop161;
                }
            } while (true);






            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB162=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleStringConcatenateFunction40318); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB162_tree = this.adaptor.create(RROUNDB162);
            this.adaptor.addChild(root_0, RROUNDB162_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringConcatenateFunction";
        }
        return retval;
    },

    // inline static return class
    ruleConcatenateInputOptions_return: (function() {
        IDPParser.ruleConcatenateInputOptions_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleConcatenateInputOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2149:1: ruleConcatenateInputOptions returns [value] : (val= ruleTimestampSelectionClause | val= ruleTimeSelectionClause | val= ruleStringSelectionClause | val= ruleNumericSelectionClause | val= ruleDateSelectionClause | val= ruleTimespanSelectionClause );
    // $ANTLR start "ruleConcatenateInputOptions"
    ruleConcatenateInputOptions: function() {
        this.currentRule = "ruleConcatenateInputOptions";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleConcatenateInputOptions_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var val = null;


        try {
            // IDP.g:2150:17: (val= ruleTimestampSelectionClause | val= ruleTimeSelectionClause | val= ruleStringSelectionClause | val= ruleNumericSelectionClause | val= ruleDateSelectionClause | val= ruleTimespanSelectionClause )
            var alt162=6;
            this.ruleConcatenateInputOptions_DFAcall=(typeof this.ruleConcatenateInputOptions_DFAcall === 'undefined' ? false: this.ruleConcatenateInputOptions_DFAcall); // only valid for synpred
            if(this.ruleConcatenateInputOptions_DFAcall === false /*&& !this.failedPredictDFA162*/)
            {   
                this.dfa162NumberOfAlt = alt162;
                this.dfa162InRule = "ruleConcatenateInputOptions";
            	this.dfa162Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleConcatenateInputOptionsCurrentDecisionNumber  = 162; 
                alt162 = this.dfa162.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt162 === 0 || alt162 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 162);
            		return retval;
                }
            }	
            else
                alt162 = this.dfa162AltNumber;	
            switch (alt162) {
                case 1 :
                    // IDP.g:2150:33: val= ruleTimestampSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_ruleConcatenateInputOptions40365);
                    this.ruleTimestampSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleTimestampSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleTimestampSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleTimestampSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2150:93: val= ruleTimeSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_ruleConcatenateInputOptions40375);
                    this.ruleTimeSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleTimeSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleTimeSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleTimeSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:2150:148: val= ruleStringSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClause_in_ruleConcatenateInputOptions40385);
                    this.ruleStringSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleStringSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleStringSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleStringSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;
                case 4 :
                    // IDP.g:2150:205: val= ruleNumericSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleConcatenateInputOptions40395);
                    this.ruleNumericSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleNumericSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleNumericSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleNumericSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;
                case 5 :
                    // IDP.g:2150:263: val= ruleDateSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_ruleConcatenateInputOptions40405);
                    this.ruleDateSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleDateSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleDateSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleDateSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;
                case 6 :
                    // IDP.g:2150:318: val= ruleTimespanSelectionClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleConcatenateInputOptions40415);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleConcatenateInputOptionsCurrentDecisionNumber !== 'undefined' && this.ruleConcatenateInputOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleConcatenateInputOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA162 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        val=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleConcatenateInputOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	val=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        val=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, val.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (val!==null?val.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleConcatenateInputOptions";
        }
        return retval;
    },

    // inline static return class
    ruleOneToZeroSimpleSelectionClause_return: (function() {
        IDPParser.ruleOneToZeroSimpleSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleOneToZeroSimpleSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2153:1: ruleOneToZeroSimpleSelectionClause returns [value] : selction1= ruleNumberBetweenZeroToOne ;
    // $ANTLR start "ruleOneToZeroSimpleSelectionClause"
    ruleOneToZeroSimpleSelectionClause: function() {
        this.currentRule = "ruleOneToZeroSimpleSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleOneToZeroSimpleSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction1 = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2158:18: (selction1= ruleNumberBetweenZeroToOne )
            // IDP.g:2158:34: selction1= ruleNumberBetweenZeroToOne
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumberBetweenZeroToOne_in_ruleOneToZeroSimpleSelectionClause40558);
            this.ruleNumberBetweenZeroToOne_DFAcall = false;

             if( typeof this.ruleOneToZeroSimpleSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleOneToZeroSimpleSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleOneToZeroSimpleSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleNumberBetweenZeroToOne();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleOneToZeroSimpleSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleNumberBetweenZeroToOne();

            	}
            	}
            else{
                selction1=this.ruleNumberBetweenZeroToOne();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); 
                                                              retval.value = selectionClauseOutput; delete modelManager.isCurrent; 
                                                              
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleOneToZeroSimpleSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleNumericFuzzyFunction_return: (function() {
        IDPParser.ruleNumericFuzzyFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericFuzzyFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2160:1: ruleNumericFuzzyFunction returns [value] : WITH_FUZZY (str= ruleOneToZeroSimpleSelectionClause ) ;
    // $ANTLR start "ruleNumericFuzzyFunction"
    ruleNumericFuzzyFunction: function() {
        this.currentRule = "ruleNumericFuzzyFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericFuzzyFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var WITH_FUZZY163 = null;
         var str = null;

        var WITH_FUZZY163_tree=null;

        retval.value = new this.entityModelLib.AdvanceFunction(this.constantsLib.advanceFunctionNamesEnum.fuzzy);this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2162:17: ( WITH_FUZZY (str= ruleOneToZeroSimpleSelectionClause ) )
            // IDP.g:2163:25: WITH_FUZZY (str= ruleOneToZeroSimpleSelectionClause )
            root_0 = this.adaptor.nil();



            this.pushNextTokens(WITH_FUZZY,WITH_FUZZY,1);
            WITH_FUZZY163=this.match(this.input,WITH_FUZZY,IDPParser.FOLLOW_WITH_FUZZY_in_ruleNumericFuzzyFunction40653); if (this.state.failed) return retval;
            if( WITH_FUZZY !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            WITH_FUZZY163_tree = this.adaptor.create(WITH_FUZZY163);
            this.adaptor.addChild(root_0, WITH_FUZZY163_tree);
            }
            // IDP.g:2164:25: (str= ruleOneToZeroSimpleSelectionClause )
            // IDP.g:2164:26: str= ruleOneToZeroSimpleSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleOneToZeroSimpleSelectionClause_in_ruleNumericFuzzyFunction40685);
            this.ruleOneToZeroSimpleSelectionClause_DFAcall = false;

             if( typeof this.ruleNumericFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleOneToZeroSimpleSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleOneToZeroSimpleSelectionClause();

            	}
            	}
            else{
                str=this.ruleOneToZeroSimpleSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericFuzzyFunction";
        }
        return retval;
    },

    // inline static return class
    ruleNumericFuzzyFunctionSelectionClause_return: (function() {
        IDPParser.ruleNumericFuzzyFunctionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericFuzzyFunctionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2167:1: ruleNumericFuzzyFunctionSelectionClause returns [value] : selction1= ruleNumericFuzzyFunction ;
    // $ANTLR start "ruleNumericFuzzyFunctionSelectionClause"
    ruleNumericFuzzyFunctionSelectionClause: function() {
        this.currentRule = "ruleNumericFuzzyFunctionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericFuzzyFunctionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction1 = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2172:18: (selction1= ruleNumericFuzzyFunction )
            // IDP.g:2172:34: selction1= ruleNumericFuzzyFunction
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericFuzzyFunction_in_ruleNumericFuzzyFunctionSelectionClause40819);
            this.ruleNumericFuzzyFunction_DFAcall = false;

             if( typeof this.ruleNumericFuzzyFunctionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericFuzzyFunctionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericFuzzyFunctionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleNumericFuzzyFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericFuzzyFunctionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleNumericFuzzyFunction();

            	}
            	}
            else{
                selction1=this.ruleNumericFuzzyFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); 
                                                              retval.value = selectionClauseOutput; delete modelManager.isCurrent; 
                                                              
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericFuzzyFunctionSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringContainFuzzyFunction_return: (function() {
        IDPParser.ruleStringContainFuzzyFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringContainFuzzyFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2174:1: ruleStringContainFuzzyFunction returns [value] : (str= ruleStringNavigationOnlySelectionClause ) CONTAINS (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause ) ;
    // $ANTLR start "ruleStringContainFuzzyFunction"
    ruleStringContainFuzzyFunction: function() {
        this.currentRule = "ruleStringContainFuzzyFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringContainFuzzyFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CONTAINS164 = null;
         var str = null;

        var CONTAINS164_tree=null;

        retval.value = new this.entityModelLib.AdvanceFunction(this.constantsLib.advanceFunctionNamesEnum.contains_fuzzy);this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2176:17: ( (str= ruleStringNavigationOnlySelectionClause ) CONTAINS (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause ) )
            // IDP.g:2176:19: (str= ruleStringNavigationOnlySelectionClause ) CONTAINS (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause )
            root_0 = this.adaptor.nil();

            // IDP.g:2176:19: (str= ruleStringNavigationOnlySelectionClause )
            // IDP.g:2176:20: str= ruleStringNavigationOnlySelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleStringNavigationOnlySelectionClause_in_ruleStringContainFuzzyFunction40894);
            this.ruleStringNavigationOnlySelectionClause_DFAcall = false;

             if( typeof this.ruleStringContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleStringNavigationOnlySelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleStringNavigationOnlySelectionClause();

            	}
            	}
            else{
                str=this.ruleStringNavigationOnlySelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(CONTAINS,CONTAINS,1);
            CONTAINS164=this.match(this.input,CONTAINS,IDPParser.FOLLOW_CONTAINS_in_ruleStringContainFuzzyFunction40916); if (this.state.failed) return retval;
            if( CONTAINS !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            CONTAINS164_tree = this.adaptor.create(CONTAINS164);
            this.adaptor.addChild(root_0, CONTAINS164_tree);
            }
            // IDP.g:2178:25: (str= ruleOneStringSimpleSelectionClause )
            // IDP.g:2178:26: str= ruleOneStringSimpleSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringContainFuzzyFunction40947);
            this.ruleOneStringSimpleSelectionClause_DFAcall = false;

             if( typeof this.ruleStringContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleOneStringSimpleSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleOneStringSimpleSelectionClause();

            	}
            	}
            else{
                str=this.ruleOneStringSimpleSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            // IDP.g:2179:25: (str= ruleNumericFuzzyFunctionSelectionClause )
            // IDP.g:2179:26: str= ruleNumericFuzzyFunctionSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericFuzzyFunctionSelectionClause_in_ruleStringContainFuzzyFunction40982);
            this.ruleNumericFuzzyFunctionSelectionClause_DFAcall = false;

             if( typeof this.ruleStringContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleNumericFuzzyFunctionSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleNumericFuzzyFunctionSelectionClause();

            	}
            	}
            else{
                str=this.ruleNumericFuzzyFunctionSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringContainFuzzyFunction";
        }
        return retval;
    },

    // inline static return class
    ruleStringNotContainFuzzyFunction_return: (function() {
        IDPParser.ruleStringNotContainFuzzyFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringNotContainFuzzyFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2181:1: ruleStringNotContainFuzzyFunction returns [value] : (str= ruleStringNavigationOnlySelectionClause ) DOES_NOT_CONTAIN (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause ) ;
    // $ANTLR start "ruleStringNotContainFuzzyFunction"
    ruleStringNotContainFuzzyFunction: function() {
        this.currentRule = "ruleStringNotContainFuzzyFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringNotContainFuzzyFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var DOES_NOT_CONTAIN165 = null;
         var str = null;

        var DOES_NOT_CONTAIN165_tree=null;

        retval.value = new this.entityModelLib.AdvanceFunction(this.constantsLib.advanceFunctionNamesEnum.not_contain_fuzzy);this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2183:17: ( (str= ruleStringNavigationOnlySelectionClause ) DOES_NOT_CONTAIN (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause ) )
            // IDP.g:2183:19: (str= ruleStringNavigationOnlySelectionClause ) DOES_NOT_CONTAIN (str= ruleOneStringSimpleSelectionClause ) (str= ruleNumericFuzzyFunctionSelectionClause )
            root_0 = this.adaptor.nil();

            // IDP.g:2183:19: (str= ruleStringNavigationOnlySelectionClause )
            // IDP.g:2183:20: str= ruleStringNavigationOnlySelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleStringNavigationOnlySelectionClause_in_ruleStringNotContainFuzzyFunction41064);
            this.ruleStringNavigationOnlySelectionClause_DFAcall = false;

             if( typeof this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleStringNavigationOnlySelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleStringNavigationOnlySelectionClause();

            	}
            	}
            else{
                str=this.ruleStringNavigationOnlySelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,1);
            DOES_NOT_CONTAIN165=this.match(this.input,DOES_NOT_CONTAIN,IDPParser.FOLLOW_DOES_NOT_CONTAIN_in_ruleStringNotContainFuzzyFunction41086); if (this.state.failed) return retval;
            if( DOES_NOT_CONTAIN !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            DOES_NOT_CONTAIN165_tree = this.adaptor.create(DOES_NOT_CONTAIN165);
            this.adaptor.addChild(root_0, DOES_NOT_CONTAIN165_tree);
            }
            // IDP.g:2185:25: (str= ruleOneStringSimpleSelectionClause )
            // IDP.g:2185:26: str= ruleOneStringSimpleSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringNotContainFuzzyFunction41117);
            this.ruleOneStringSimpleSelectionClause_DFAcall = false;

             if( typeof this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleOneStringSimpleSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleOneStringSimpleSelectionClause();

            	}
            	}
            else{
                str=this.ruleOneStringSimpleSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            // IDP.g:2186:25: (str= ruleNumericFuzzyFunctionSelectionClause )
            // IDP.g:2186:26: str= ruleNumericFuzzyFunctionSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericFuzzyFunctionSelectionClause_in_ruleStringNotContainFuzzyFunction41152);
            this.ruleNumericFuzzyFunctionSelectionClause_DFAcall = false;

             if( typeof this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber !== 'undefined' && this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                str=this.ruleNumericFuzzyFunctionSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringNotContainFuzzyFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	str=this.ruleNumericFuzzyFunctionSelectionClause();

            	}
            	}
            else{
                str=this.ruleNumericFuzzyFunctionSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, str.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.push((str!==null?str.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringNotContainFuzzyFunction";
        }
        return retval;
    },

    // inline static return class
    ruleStringCompoundSelection_return: (function() {
        IDPParser.ruleStringCompoundSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringCompoundSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2188:1: ruleStringCompoundSelection returns [value] : selectionOutput= ruleStringSelection ;
    // $ANTLR start "ruleStringCompoundSelection"
    ruleStringCompoundSelection: function() {
        this.currentRule = "ruleStringCompoundSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringCompoundSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:2191:17: (selectionOutput= ruleStringSelection )
            // IDP.g:2191:33: selectionOutput= ruleStringSelection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringSelection_in_ruleStringCompoundSelection41285);
            this.ruleStringSelection_DFAcall = false;

             if( typeof this.ruleStringCompoundSelectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCompoundSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringCompoundSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleStringSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCompoundSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleStringSelection();

            	}
            	}
            else{
                selectionOutput=this.ruleStringSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               compoundSelectionOutput.selection = (selectionOutput.value  === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.string;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringCompoundSelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringSimpleSelection_return: (function() {
        IDPParser.ruleStringSimpleSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSimpleSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2194:1: ruleStringSimpleSelection returns [value] : (strVal= STRING | param= TYPESTRINGPARAMETER );
    // $ANTLR start "ruleStringSimpleSelection"
    ruleStringSimpleSelection: function() {
        this.currentRule = "ruleStringSimpleSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSimpleSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var strVal = null;
        var param = null;

        var strVal_tree=null;
        var param_tree=null;

        var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var strType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.string; simpleSelectiontOutput.valueType = strType;
        try {
            // IDP.g:2197:13: (strVal= STRING | param= TYPESTRINGPARAMETER )
            var alt163=2;
            var LA163_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(STRING,STRING,1) && LA163_0==STRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(STRING,STRING,1) && LA163_0==STRING )) ) {
                alt163=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRINGPARAMETER,TYPESTRINGPARAMETER,1) && LA163_0==TYPESTRINGPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRINGPARAMETER,TYPESTRINGPARAMETER,1) && LA163_0==TYPESTRINGPARAMETER )) ) {
                alt163=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_163_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 163, 0, this.input);

                nvae_163_0.c = this.input.LA(1);
                throw nvae_163_0;
            }
            switch (alt163) {
                case 1 :
                    // IDP.g:2197:18: strVal= STRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(STRING,STRING,1);
                    strVal=this.match(this.input,STRING,IDPParser.FOLLOW_STRING_in_ruleStringSimpleSelection41415); if (this.state.failed) return retval;
                    if( STRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    strVal_tree = this.adaptor.create(strVal);
                    this.adaptor.addChild(root_0, strVal_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (strVal?strVal.getText():null);  this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, strVal.start, (strVal?strVal.getText():null), this.parseModelLib.getModelManger());
                    }


                    break;
                case 2 :
                    // IDP.g:2198:13: param= TYPESTRINGPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPESTRINGPARAMETER,TYPESTRINGPARAMETER,1);
                    param=this.match(this.input,TYPESTRINGPARAMETER,IDPParser.FOLLOW_TYPESTRINGPARAMETER_in_ruleStringSimpleSelection41438); if (this.state.failed) return retval;
                    if( TYPESTRINGPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSimpleSelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringSimpleSelectionStringAndDates_return: (function() {
        IDPParser.ruleStringSimpleSelectionStringAndDates_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSimpleSelectionStringAndDates_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2200:1: ruleStringSimpleSelectionStringAndDates returns [value] : (str= DATESTRING | str= TIMESTRING | str= TIMESTAMPSTRING | strVal= STRING | param= TYPESTRINGPARAMETER );
    // $ANTLR start "ruleStringSimpleSelectionStringAndDates"
    ruleStringSimpleSelectionStringAndDates: function() {
        this.currentRule = "ruleStringSimpleSelectionStringAndDates";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSimpleSelectionStringAndDates_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var str = null;
        var strVal = null;
        var param = null;

        var str_tree=null;
        var strVal_tree=null;
        var param_tree=null;

        var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var strType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.string; simpleSelectiontOutput.valueType = strType;
        try {
            // IDP.g:2203:13: (str= DATESTRING | str= TIMESTRING | str= TIMESTAMPSTRING | strVal= STRING | param= TYPESTRINGPARAMETER )
            var alt164=5;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case DATESTRING:
                alt164=1;   
                break;
            case TIMESTRING:
                alt164=2;   
                break;
            case TIMESTAMPSTRING:
                alt164=3;   
                break;
            case STRING:
                alt164=4;   
                break;
            case TYPESTRINGPARAMETER:
                alt164=5;   
                break;
            default:
            this.pushApplyTokens([DATESTRING,TIMESTRING,TIMESTAMPSTRING,STRING,TYPESTRINGPARAMETER]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_164 =
            			new org.antlr.runtime.NoViableAltException(null, 164, 0, this.input);

                nvae_164.c = this.input.LA(1);
                throw nvae_164;
            }

            switch (alt164) {
                case 1 :
                    // IDP.g:2203:25: str= DATESTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(DATESTRING,DATESTRING,1);
                    str=this.match(this.input,DATESTRING,IDPParser.FOLLOW_DATESTRING_in_ruleStringSimpleSelectionStringAndDates41576); if (this.state.failed) return retval;
                    if( DATESTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    str_tree = this.adaptor.create(str);
                    this.adaptor.addChild(root_0, str_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (str?str.getText():null); this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, str.start, (str?str.getText():null), this.parseModelLib.getModelManger()); this.input.LT(-1).type = IDPParser.STRING; 
                    }


                    break;
                case 2 :
                    // IDP.g:2204:24: str= TIMESTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TIMESTRING,TIMESTRING,1);
                    str=this.match(this.input,TIMESTRING,IDPParser.FOLLOW_TIMESTRING_in_ruleStringSimpleSelectionStringAndDates41611); if (this.state.failed) return retval;
                    if( TIMESTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    str_tree = this.adaptor.create(str);
                    this.adaptor.addChild(root_0, str_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (str?str.getText():null); this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, str.start, (str?str.getText():null), this.parseModelLib.getModelManger()); this.input.LT(-1).type = IDPParser.STRING; 
                    }


                    break;
                case 3 :
                    // IDP.g:2205:24: str= TIMESTAMPSTRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TIMESTAMPSTRING,TIMESTAMPSTRING,1);
                    str=this.match(this.input,TIMESTAMPSTRING,IDPParser.FOLLOW_TIMESTAMPSTRING_in_ruleStringSimpleSelectionStringAndDates41646); if (this.state.failed) return retval;
                    if( TIMESTAMPSTRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    str_tree = this.adaptor.create(str);
                    this.adaptor.addChild(root_0, str_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (str?str.getText():null); this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, str.start, (str?str.getText():null), this.parseModelLib.getModelManger()); this.input.LT(-1).type = IDPParser.STRING; 
                    }


                    break;
                case 4 :
                    // IDP.g:2206:6: strVal= STRING
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(STRING,STRING,1);
                    strVal=this.match(this.input,STRING,IDPParser.FOLLOW_STRING_in_ruleStringSimpleSelectionStringAndDates41662); if (this.state.failed) return retval;
                    if( STRING !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    strVal_tree = this.adaptor.create(strVal);
                    this.adaptor.addChild(root_0, strVal_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = (strVal?strVal.getText():null);  this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, strVal.start, (strVal?strVal.getText():null), this.parseModelLib.getModelManger());
                    }


                    break;
                case 5 :
                    // IDP.g:2207:13: param= TYPESTRINGPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPESTRINGPARAMETER,TYPESTRINGPARAMETER,1);
                    param=this.match(this.input,TYPESTRINGPARAMETER,IDPParser.FOLLOW_TYPESTRINGPARAMETER_in_ruleStringSimpleSelectionStringAndDates41685); if (this.state.failed) return retval;
                    if( TYPESTRINGPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSimpleSelectionStringAndDates";
        }
        return retval;
    },

    // inline static return class
    ruleStringSelection_return: (function() {
        IDPParser.ruleStringSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2209:1: ruleStringSelection returns [value] : ( CURRENT )? (navigationOutput= TYPESTRING ) ;
    // $ANTLR start "ruleStringSelection"
    ruleStringSelection: function() {
        this.currentRule = "ruleStringSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT166 = null;

        var navigationOutput_tree=null;
        var CURRENT166_tree=null;

        var selectionOutput = {};
        try {
            // IDP.g:2212:17: ( ( CURRENT )? (navigationOutput= TYPESTRING ) )
            // IDP.g:2212:33: ( CURRENT )? (navigationOutput= TYPESTRING )
            root_0 = this.adaptor.nil();

            // IDP.g:2212:33: ( CURRENT )?
            var alt165=2;

            var LA165_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA165_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA165_0==CURRENT )) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // IDP.g:2212:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT166=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleStringSelection41807); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT166_tree = this.adaptor.create(CURRENT166);
                    this.adaptor.addChild(root_0, CURRENT166_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA165 !== undefined && this.failedPredictDFA165)
            { 
                throw null;
            }*/

            // IDP.g:2212:80: (navigationOutput= TYPESTRING )
            // IDP.g:2212:81: navigationOutput= TYPESTRING


            this.pushNextTokens(TYPESTRING,TYPESTRING,1);
            navigationOutput=this.match(this.input,TYPESTRING,IDPParser.FOLLOW_TYPESTRING_in_ruleStringSelection41818); if (this.state.failed) return retval;
            if( TYPESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringNavigationOnly_return: (function() {
        IDPParser.ruleStringNavigationOnly_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringNavigationOnly_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2215:1: ruleStringNavigationOnly returns [value] : navigationOutput= TYPESTRING ;
    // $ANTLR start "ruleStringNavigationOnly"
    ruleStringNavigationOnly: function() {
        this.currentRule = "ruleStringNavigationOnly";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringNavigationOnly_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        var selectionOutput = {};
        try {
            // IDP.g:2218:17: (navigationOutput= TYPESTRING )
            // IDP.g:2218:33: navigationOutput= TYPESTRING
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPESTRING,TYPESTRING,1);
            navigationOutput=this.match(this.input,TYPESTRING,IDPParser.FOLLOW_TYPESTRING_in_ruleStringNavigationOnly41947); if (this.state.failed) return retval;
            if( TYPESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringNavigationOnly";
        }
        return retval;
    },

    // inline static return class
    ruleStringNavigationOnlySelection_return: (function() {
        IDPParser.ruleStringNavigationOnlySelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringNavigationOnlySelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2220:1: ruleStringNavigationOnlySelection returns [value] : selectionOutput= ruleStringNavigationOnly ;
    // $ANTLR start "ruleStringNavigationOnlySelection"
    ruleStringNavigationOnlySelection: function() {
        this.currentRule = "ruleStringNavigationOnlySelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringNavigationOnlySelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var compoundSelectionOutput = {}; 
        try {
            // IDP.g:2223:17: (selectionOutput= ruleStringNavigationOnly )
            // IDP.g:2223:33: selectionOutput= ruleStringNavigationOnly
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringNavigationOnly_in_ruleStringNavigationOnlySelection42075);
            this.ruleStringNavigationOnly_DFAcall = false;

             if( typeof this.ruleStringNavigationOnlySelectionCurrentDecisionNumber !== 'undefined' && this.ruleStringNavigationOnlySelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringNavigationOnlySelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleStringNavigationOnly();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringNavigationOnlySelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleStringNavigationOnly();

            	}
            	}
            else{
                selectionOutput=this.ruleStringNavigationOnly();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               compoundSelectionOutput.selection = (selectionOutput.value  === undefined ?null: (selectionOutput!==null?selectionOutput.value:null)); compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.string;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringNavigationOnlySelection";
        }
        return retval;
    },

    // inline static return class
    ruleStringNavigationOnlySelectionClause_return: (function() {
        IDPParser.ruleStringNavigationOnlySelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringNavigationOnlySelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2225:1: ruleStringNavigationOnlySelectionClause returns [value] : selction1= ruleStringNavigationOnlySelection ;
    // $ANTLR start "ruleStringNavigationOnlySelectionClause"
    ruleStringNavigationOnlySelectionClause: function() {
        this.currentRule = "ruleStringNavigationOnlySelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringNavigationOnlySelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction1 = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2230:17: (selction1= ruleStringNavigationOnlySelection )
            // IDP.g:2230:33: selction1= ruleStringNavigationOnlySelection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringNavigationOnlySelection_in_ruleStringNavigationOnlySelectionClause42216);
            this.ruleStringNavigationOnlySelection_DFAcall = false;

             if( typeof this.ruleStringNavigationOnlySelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringNavigationOnlySelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringNavigationOnlySelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction1=this.ruleStringNavigationOnlySelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringNavigationOnlySelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction1=this.ruleStringNavigationOnlySelection();

            	}
            	}
            else{
                selction1=this.ruleStringNavigationOnlySelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction1.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction1!==null?selction1.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); 
                                              	retval.value = selectionClauseOutput; delete modelManager.isCurrent; 
                                              	this.parseModelLib.getModelManger().cleanValueListAttribute(); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringNavigationOnlySelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleStringCollectionSelectionClause_return: (function() {
        IDPParser.ruleStringCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2238:1: ruleStringCollectionSelectionClause returns [value] : selction= ruleStringCollection ;
    // $ANTLR start "ruleStringCollectionSelectionClause"
    ruleStringCollectionSelectionClause: function() {
        this.currentRule = "ruleStringCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2241:17: (selction= ruleStringCollection )
            // IDP.g:2241:33: selction= ruleStringCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleStringCollection_in_ruleStringCollectionSelectionClause42343);
            this.ruleStringCollection_DFAcall = false;

             if( typeof this.ruleStringCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleStringCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleStringCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleStringCollection();

            	}
            	}
            else{
                selction=this.ruleStringCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleStringCollectionContext_return: (function() {
        IDPParser.ruleStringCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2248:1: ruleStringCollectionContext returns [value] : navigationOutput= ( TYPESTRINGCOLLECTION | TYPESTRINGDT ) ;
    // $ANTLR start "ruleStringCollectionContext"
    ruleStringCollectionContext: function() {
        this.currentRule = "ruleStringCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2249:25: (navigationOutput= ( TYPESTRINGCOLLECTION | TYPESTRINGDT ) )
            // IDP.g:2249:49: navigationOutput= ( TYPESTRINGCOLLECTION | TYPESTRINGDT )
            root_0 = this.adaptor.nil();

            navigationOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && this.input.LA(1)>=TYPESTRINGCOLLECTION && this.input.LA(1)<=TYPESTRINGDT ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(navigationOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_navigationOutput_42536 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_navigationOutput_42536;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                          
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleStringContext_return: (function() {
        IDPParser.ruleStringContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2256:1: ruleStringContext returns [value] : navigationOutput= TYPESTRING ;
    // $ANTLR start "ruleStringContext"
    ruleStringContext: function() {
        this.currentRule = "ruleStringContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2257:25: (navigationOutput= TYPESTRING )
            // IDP.g:2257:49: navigationOutput= TYPESTRING
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPESTRING,TYPESTRING,1);
            navigationOutput=this.match(this.input,TYPESTRING,IDPParser.FOLLOW_TYPESTRING_in_ruleStringContext42676); if (this.state.failed) return retval;
            if( TYPESTRING !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                                                                                              
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleStringAliasDTCollectionContext_return: (function() {
        IDPParser.ruleStringAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2265:1: ruleStringAliasDTCollectionContext returns [value] : navigationOutput= TYPESTRINGDT ;
    // $ANTLR start "ruleStringAliasDTCollectionContext"
    ruleStringAliasDTCollectionContext: function() {
        this.currentRule = "ruleStringAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2266:25: (navigationOutput= TYPESTRINGDT )
            // IDP.g:2266:49: navigationOutput= TYPESTRINGDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPESTRINGDT,TYPESTRINGDT,1);
            navigationOutput=this.match(this.input,TYPESTRINGDT,IDPParser.FOLLOW_TYPESTRINGDT_in_ruleStringAliasDTCollectionContext42805); if (this.state.failed) return retval;
            if( TYPESTRINGDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleStringCollection_return: (function() {
        IDPParser.ruleStringCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2273:1: ruleStringCollection returns [value] : ( (navigationOutputDT= ruleStringAliasDTCollectionContext ) | ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? ) );
    // $ANTLR start "ruleStringCollection"
    ruleStringCollection: function() {
        this.currentRule = "ruleStringCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT167 = null;
        var OF168 = null;
        var CURRENT169 = null;
         var navigationOutputDT = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;

        var CURRENT167_tree=null;
        var OF168_tree=null;
        var CURRENT169_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:2284:17: ( (navigationOutputDT= ruleStringAliasDTCollectionContext ) | ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? ) )
            var alt173=2;
            var LA173_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRINGDT,TYPESTRINGDT,1) && LA173_0==TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRINGDT,TYPESTRINGDT,1) && LA173_0==TYPESTRINGDT )) ) {
                var LA173_1 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred300_IDP()'.indexOf("synpred") !== -1) ||  this.synpred300_IDP()) ) {
                    alt173=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'true'.indexOf("synpred") !== -1) ||  true) ) {
                    alt173=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_173_1 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 173, 1, this.input);

                    nvae_173_1.c = this.input.LA(2);
                    throw nvae_173_1;
                }
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA173_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA173_0==ALL )||( this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGCOLLECTION,1) && LA173_0==TYPESTRINGCOLLECTION )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA173_0>=ZERO_OR_ONE && LA173_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA173_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA173_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA173_0==ALL )||( this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGCOLLECTION,1) && LA173_0==TYPESTRINGCOLLECTION )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA173_0>=ZERO_OR_ONE && LA173_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA173_0==INT )) ) {
                alt173=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_173_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 173, 0, this.input);

                nvae_173_0.c = this.input.LA(1);
                throw nvae_173_0;
            }
            switch (alt173) {
                case 1 :
                    // IDP.g:2284:65: (navigationOutputDT= ruleStringAliasDTCollectionContext )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2284:65: (navigationOutputDT= ruleStringAliasDTCollectionContext )
                    // IDP.g:2284:66: navigationOutputDT= ruleStringAliasDTCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleStringAliasDTCollectionContext_in_ruleStringCollection43062);
                    this.ruleStringAliasDTCollectionContext_DFAcall = false;

                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutputDT=this.ruleStringAliasDTCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutputDT=this.ruleStringAliasDTCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutputDT=this.ruleStringAliasDTCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
                    }





                    break;
                case 2 :
                    // IDP.g:2285:8: ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2285:8: ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? )
                    // IDP.g:2285:9: ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )?
                    // IDP.g:2285:9: ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) )
                    var alt171=3;

                    	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
                    case CURRENT:
                    case TYPESTRINGCOLLECTION:
                    case TYPESTRINGDT:
                        alt171=1;   
                        break;
                    case ZERO_OR_ONE:
                    case TYPENUMBERPARAMETER:
                    case INT:
                        alt171=2;   
                        break;
                    case ALL:
                        alt171=3;   
                        break;
                    default:
                    this.pushApplyTokens([CURRENT,TYPESTRINGCOLLECTION,TYPESTRINGDT,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
                    	//this.pushApplyTokens();
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_171 =
                    			new org.antlr.runtime.NoViableAltException(null, 171, 0, this.input);

                        nvae_171.c = this.input.LA(1);
                        throw nvae_171;
                    }

                    switch (alt171) {
                        case 1 :
                            // IDP.g:2286:49: ( CURRENT )? (navigationOutput= ruleStringCollectionContext )
                            // IDP.g:2286:49: ( CURRENT )?
                            var alt166=2;

                            var LA166_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA166_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA166_0==CURRENT )) ) {
                                alt166=1;
                            }
                            switch (alt166) {
                                case 1 :
                                    // IDP.g:2286:50: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT167=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleStringCollection43126); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT167_tree = this.adaptor.create(CURRENT167);
                                    this.adaptor.addChild(root_0, CURRENT167_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA166 !== undefined && this.failedPredictDFA166)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2286:96: (navigationOutput= ruleStringCollectionContext )
                            // IDP.g:2286:97: navigationOutput= ruleStringCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43137);
                            this.ruleStringCollectionContext_DFAcall = false;

                             if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleStringCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleStringCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleStringCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;
                        case 2 :
                            // IDP.g:2287:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:2287:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) )
                            // IDP.g:2287:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions )
                            // IDP.g:2287:34: (quantity= ruleInteger )
                            // IDP.g:2287:35: quantity= ruleInteger
                            this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleStringCollection43183);
                            this.ruleInteger_DFAcall = false;

                             if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                quantity=this.ruleInteger();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	quantity=this.ruleInteger();

                            	}
                            	}
                            else{
                                quantity=this.ruleInteger();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                            }



                            // IDP.g:2287:113: ( OF rall= ruleAll )?
                            var alt167=2;

                            var LA167_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA167_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA167_0==OF )) ) {
                                alt167=1;
                            }
                            switch (alt167) {
                                case 1 :
                                    // IDP.g:2287:114: OF rall= ruleAll


                                    this.pushNextTokens(OF,OF,1);
                                    OF168=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleStringCollection43189); if (this.state.failed) return retval;
                                    if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    OF168_tree = this.adaptor.create(OF168);
                                    this.adaptor.addChild(root_0, OF168_tree);
                                    }
                                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleStringCollection43195);
                                    this.ruleAll_DFAcall = false;

                                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA167 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        rall=this.ruleAll();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	rall=this.ruleAll();

                                    	}
                                    	}
                                    else{
                                        rall=this.ruleAll();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA167 !== undefined && this.failedPredictDFA167)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2287:221: ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                            // IDP.g:2287:222: ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                            // IDP.g:2287:222: ( CURRENT )?
                            var alt168=2;

                            var LA168_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA168_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA168_0==CURRENT )) ) {
                                alt168=1;
                            }
                            switch (alt168) {
                                case 1 :
                                    // IDP.g:2287:223: CURRENT


                                    this.pushNextTokens(CURRENT,CURRENT,1);
                                    CURRENT169=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleStringCollection43204); if (this.state.failed) return retval;
                                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                                    	this.updateLTType(this.input.LT(1));
                                    }
                                    if ( this.state.backtracking===0 ) {
                                    CURRENT169_tree = this.adaptor.create(CURRENT169);
                                    this.adaptor.addChild(root_0, CURRENT169_tree);
                                    }
                                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                                      selectionOutput.isCurrent = true;
                                    }


                                    break;

                            }
                            /*if(this.failedPredictDFA168 !== undefined && this.failedPredictDFA168)
                            { 
                                throw null;
                            }*/

                            // IDP.g:2287:269: (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                            var alt169=2;

                            var LA169_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA169_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA169_0==TYPESTRING )) ) {
                                alt169=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA169_0>=TYPESTRINGCOLLECTION && LA169_0<=TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA169_0>=TYPESTRINGCOLLECTION && LA169_0<=TYPESTRINGDT )) ) {
                                alt169=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_169_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 169, 0, this.input);

                                nvae_169_0.c = this.input.LA(1);
                                throw nvae_169_0;
                            }
                            switch (alt169) {
                                case 1 :
                                    // IDP.g:2287:270: navigationOutput= ruleStringContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleStringContext_in_ruleStringCollection43215);
                                    this.ruleStringContext_DFAcall = false;

                                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA169 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleStringContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleStringContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleStringContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:2287:309: navigationOutput= ruleStringCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43223);
                                    this.ruleStringCollectionContext_DFAcall = false;

                                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA169 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleStringCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleStringCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleStringCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA169 !== undefined && this.failedPredictDFA169)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                               selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }



                            // IDP.g:2288:61: (order= ruleSortingOptions )
                            // IDP.g:2288:62: order= ruleSortingOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleStringCollection43295);
                            this.ruleSortingOptions_DFAcall = false;

                             if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                order=this.ruleSortingOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	order=this.ruleSortingOptions();

                            	}
                            	}
                            else{
                                order=this.ruleSortingOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                            }



                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                            }





                            break;
                        case 3 :
                            // IDP.g:2289:49: ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                            // IDP.g:2289:49: ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                            // IDP.g:2289:50: (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                            // IDP.g:2289:50: (rall= ruleAll )
                            // IDP.g:2289:51: rall= ruleAll
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleStringCollection43360);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                            }



                            // IDP.g:2289:126: (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                            var alt170=2;

                            var LA170_0 = this.input.LA(1);


                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA170_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA170_0==TYPESTRING )) ) {
                                alt170=1;
                            }
                            else 
                            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA170_0>=TYPESTRINGCOLLECTION && LA170_0<=TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA170_0>=TYPESTRINGCOLLECTION && LA170_0<=TYPESTRINGDT )) ) {
                                alt170=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae_170_0 =
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 170, 0, this.input);

                                nvae_170_0.c = this.input.LA(1);
                                throw nvae_170_0;
                            }
                            switch (alt170) {
                                case 1 :
                                    // IDP.g:2289:127: navigationOutput= ruleStringContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleStringContext_in_ruleStringCollection43370);
                                    this.ruleStringContext_DFAcall = false;

                                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA170 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleStringContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleStringContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleStringContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;
                                case 2 :
                                    // IDP.g:2289:166: navigationOutput= ruleStringCollectionContext
                                    this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43378);
                                    this.ruleStringCollectionContext_DFAcall = false;

                                     if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                                    {
                                    var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                                    	if(/*typeof this.failedPredictDFA170 !== 'undefined' &&*/ this[test2] === false )
                                    	{
                                    	try {
                                        navigationOutput=this.ruleStringCollectionContext();

                                    	} catch (e) {
                                    		var nvae = 
                                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                                    		nvae.c = this.input.LA(1);
                                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                                    		throw nvae;

                                    	}
                                    	}
                                    	else{
                                    	navigationOutput=this.ruleStringCollectionContext();

                                    	}
                                    	}
                                    else{
                                        navigationOutput=this.ruleStringCollectionContext();

                                    }
                                    this.state.a_fsp--;
                                    if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                                    break;

                            }
                            /*if(this.failedPredictDFA170 !== undefined && this.failedPredictDFA170)
                            { 
                                throw null;
                            }*/

                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                            }





                            break;

                    }
                    /*if(this.failedPredictDFA171 !== undefined && this.failedPredictDFA171)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2292:33: (flt= filterClause )?
                    var alt172=2;

                    var LA172_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA172_0>=WHERE && LA172_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA172_0>=WHERE && LA172_0<=FILTER_BY )) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // IDP.g:2292:34: flt= filterClause
                            this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleStringCollection43523);
                            this.filterClause_DFAcall = false;

                             if( typeof this.ruleStringCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA172 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                flt=this.filterClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	flt=this.filterClause();

                            	}
                            	}
                            else{
                                flt=this.filterClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.filterClause = (flt!==null?flt.value:null);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA172 !== undefined && this.failedPredictDFA172)
                    { 
                        throw null;
                    }*/






                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringCollection";
        }
        return retval;
    },

    // inline static return class
    ruleStringBaseCollection_return: (function() {
        IDPParser.ruleStringBaseCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringBaseCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2295:1: ruleStringBaseCollection returns [value] : ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? ) ;
    // $ANTLR start "ruleStringBaseCollection"
    ruleStringBaseCollection: function() {
        this.currentRule = "ruleStringBaseCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringBaseCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT170 = null;
        var OF171 = null;
        var CURRENT172 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;

        var CURRENT170_tree=null;
        var OF171_tree=null;
        var CURRENT172_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:2306:17: ( ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? ) )
            // IDP.g:2306:33: ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? )
            root_0 = this.adaptor.nil();

            // IDP.g:2306:33: ( ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )? )
            // IDP.g:2306:34: ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) ) (flt= filterClause )?
            // IDP.g:2306:34: ( ( CURRENT )? (navigationOutput= ruleStringCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) )
            var alt179=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case CURRENT:
            case TYPESTRINGCOLLECTION:
            case TYPESTRINGDT:
                alt179=1;   
                break;
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt179=2;   
                break;
            case ALL:
                alt179=3;   
                break;
            default:
            this.pushApplyTokens([CURRENT,TYPESTRINGCOLLECTION,TYPESTRINGDT,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_179 =
            			new org.antlr.runtime.NoViableAltException(null, 179, 0, this.input);

                nvae_179.c = this.input.LA(1);
                throw nvae_179;
            }

            switch (alt179) {
                case 1 :
                    // IDP.g:2307:49: ( CURRENT )? (navigationOutput= ruleStringCollectionContext )
                    // IDP.g:2307:49: ( CURRENT )?
                    var alt174=2;

                    var LA174_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA174_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA174_0==CURRENT )) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // IDP.g:2307:50: CURRENT


                            this.pushNextTokens(CURRENT,CURRENT,1);
                            CURRENT170=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleStringBaseCollection43748); if (this.state.failed) return retval;
                            if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            CURRENT170_tree = this.adaptor.create(CURRENT170);
                            this.adaptor.addChild(root_0, CURRENT170_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.isCurrent = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA174 !== undefined && this.failedPredictDFA174)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2307:96: (navigationOutput= ruleStringCollectionContext )
                    // IDP.g:2307:97: navigationOutput= ruleStringCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection43759);
                    this.ruleStringCollectionContext_DFAcall = false;

                     if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleStringCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleStringCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleStringCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;
                case 2 :
                    // IDP.g:2308:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) )
                    // IDP.g:2308:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions ) )
                    // IDP.g:2308:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) ) (order= ruleSortingOptions )
                    // IDP.g:2308:34: (quantity= ruleInteger )
                    // IDP.g:2308:35: quantity= ruleInteger
                    this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleStringBaseCollection43805);
                    this.ruleInteger_DFAcall = false;

                     if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        quantity=this.ruleInteger();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	quantity=this.ruleInteger();

                    	}
                    	}
                    else{
                        quantity=this.ruleInteger();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                    }



                    // IDP.g:2308:113: ( OF rall= ruleAll )?
                    var alt175=2;

                    var LA175_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA175_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA175_0==OF )) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // IDP.g:2308:114: OF rall= ruleAll


                            this.pushNextTokens(OF,OF,1);
                            OF171=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleStringBaseCollection43811); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF171_tree = this.adaptor.create(OF171);
                            this.adaptor.addChild(root_0, OF171_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleStringBaseCollection43817);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA175 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA175 !== undefined && this.failedPredictDFA175)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2308:221: ( ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                    // IDP.g:2308:222: ( CURRENT )? (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                    // IDP.g:2308:222: ( CURRENT )?
                    var alt176=2;

                    var LA176_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA176_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA176_0==CURRENT )) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // IDP.g:2308:223: CURRENT


                            this.pushNextTokens(CURRENT,CURRENT,1);
                            CURRENT172=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleStringBaseCollection43826); if (this.state.failed) return retval;
                            if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            CURRENT172_tree = this.adaptor.create(CURRENT172);
                            this.adaptor.addChild(root_0, CURRENT172_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.isCurrent = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA176 !== undefined && this.failedPredictDFA176)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2308:269: (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                    var alt177=2;

                    var LA177_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA177_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA177_0==TYPESTRING )) ) {
                        alt177=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA177_0>=TYPESTRINGCOLLECTION && LA177_0<=TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA177_0>=TYPESTRINGCOLLECTION && LA177_0<=TYPESTRINGDT )) ) {
                        alt177=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_177_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 177, 0, this.input);

                        nvae_177_0.c = this.input.LA(1);
                        throw nvae_177_0;
                    }
                    switch (alt177) {
                        case 1 :
                            // IDP.g:2308:270: navigationOutput= ruleStringContext
                            this.pushFollow(IDPParser.FOLLOW_ruleStringContext_in_ruleStringBaseCollection43837);
                            this.ruleStringContext_DFAcall = false;

                             if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA177 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleStringContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleStringContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleStringContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2308:309: navigationOutput= ruleStringCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection43845);
                            this.ruleStringCollectionContext_DFAcall = false;

                             if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA177 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleStringCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleStringCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleStringCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA177 !== undefined && this.failedPredictDFA177)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }



                    // IDP.g:2309:61: (order= ruleSortingOptions )
                    // IDP.g:2309:62: order= ruleSortingOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleStringBaseCollection43917);
                    this.ruleSortingOptions_DFAcall = false;

                     if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleSortingOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleSortingOptions();

                    	}
                    	}
                    else{
                        order=this.ruleSortingOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                    }





                    break;
                case 3 :
                    // IDP.g:2310:49: ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                    // IDP.g:2310:49: ( (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext ) )
                    // IDP.g:2310:50: (rall= ruleAll ) (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                    // IDP.g:2310:50: (rall= ruleAll )
                    // IDP.g:2310:51: rall= ruleAll
                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleStringBaseCollection43982);
                    this.ruleAll_DFAcall = false;

                     if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rall=this.ruleAll();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rall=this.ruleAll();

                    	}
                    	}
                    else{
                        rall=this.ruleAll();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                    }



                    // IDP.g:2310:126: (navigationOutput= ruleStringContext | navigationOutput= ruleStringCollectionContext )
                    var alt178=2;

                    var LA178_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA178_0==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,1) && LA178_0==TYPESTRING )) ) {
                        alt178=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA178_0>=TYPESTRINGCOLLECTION && LA178_0<=TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA178_0>=TYPESTRINGCOLLECTION && LA178_0<=TYPESTRINGDT )) ) {
                        alt178=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_178_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 178, 0, this.input);

                        nvae_178_0.c = this.input.LA(1);
                        throw nvae_178_0;
                    }
                    switch (alt178) {
                        case 1 :
                            // IDP.g:2310:127: navigationOutput= ruleStringContext
                            this.pushFollow(IDPParser.FOLLOW_ruleStringContext_in_ruleStringBaseCollection43992);
                            this.ruleStringContext_DFAcall = false;

                             if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA178 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleStringContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleStringContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleStringContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2310:166: navigationOutput= ruleStringCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection44000);
                            this.ruleStringCollectionContext_DFAcall = false;

                             if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA178 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleStringCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleStringCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleStringCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA178 !== undefined && this.failedPredictDFA178)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA179 !== undefined && this.failedPredictDFA179)
            { 
                throw null;
            }*/

            // IDP.g:2313:33: (flt= filterClause )?
            var alt180=2;

            var LA180_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA180_0>=WHERE && LA180_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA180_0>=WHERE && LA180_0<=FILTER_BY )) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // IDP.g:2313:34: flt= filterClause
                    this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleStringBaseCollection44145);
                    this.filterClause_DFAcall = false;

                     if( typeof this.ruleStringBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleStringBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA180 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.filterClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.filterClause();

                    	}
                    	}
                    else{
                        flt=this.filterClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.filterClause = (flt!==null?flt.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA180 !== undefined && this.failedPredictDFA180)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                   this.parseModelLib.getModelManger().cleanAllContext();
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringBaseCollection";
        }
        return retval;
    },

    // inline static return class
    ruleStringSetOfValues_return: (function() {
        IDPParser.ruleStringSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2316:1: ruleStringSetOfValues returns [value] : LROUNDB ( (numberOutput= ruleStringClauseStringAndDates ) ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* ) | (numberOutput= ruleStringCollectionSelectionClause ) ) RROUNDB ;
    // $ANTLR start "ruleStringSetOfValues"
    ruleStringSetOfValues: function() {
        this.currentRule = "ruleStringSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB173 = null;
        var SEMICOLON174 = null;
        var RROUNDB175 = null;
         var numberOutput = null;

        var LROUNDB173_tree=null;
        var SEMICOLON174_tree=null;
        var RROUNDB175_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                                        retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value);
                                                        var valueList = this.parseModelLib.getModelManger().getValueListAttribute();
                                        
        try {
            // IDP.g:2322:9: ( LROUNDB ( (numberOutput= ruleStringClauseStringAndDates ) ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* ) | (numberOutput= ruleStringCollectionSelectionClause ) ) RROUNDB )
            // IDP.g:2322:17: LROUNDB ( (numberOutput= ruleStringClauseStringAndDates ) ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* ) | (numberOutput= ruleStringCollectionSelectionClause ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB173=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleStringSetOfValues44353); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB173_tree = this.adaptor.create(LROUNDB173);
            this.adaptor.addChild(root_0, LROUNDB173_tree);
            }
            // IDP.g:2322:25: ( (numberOutput= ruleStringClauseStringAndDates ) ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* ) | (numberOutput= ruleStringCollectionSelectionClause ) )
            var alt182=2;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case LROUNDB:
            case TYPESTRING:
            case TIMESTRING:
            case TIMESTAMPSTRING:
            case DATESTRING:
            case CONCATENATE:
            case STRING:
            case TYPESTRINGPARAMETER:
                alt182=1;   
                break;
            case CURRENT:
                var LA182_2 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA182_2==TYPESTRING )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA182_2==TYPESTRING )) ) {
                    alt182=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA182_2>=TYPESTRINGCOLLECTION && LA182_2<=TYPESTRINGDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA182_2>=TYPESTRINGCOLLECTION && LA182_2<=TYPESTRINGDT )) ) {
                    alt182=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_182_2 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 182, 2, this.input);

                    nvae_182_2.c = this.input.LA(2);
                    throw nvae_182_2;
                }   
                break;
            case ALL:
            case TYPESTRINGCOLLECTION:
            case TYPESTRINGDT:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt182=2;   
                break;
            default:
            this.pushApplyTokens([LROUNDB,TYPESTRING,TIMESTRING,TIMESTAMPSTRING,DATESTRING,CONCATENATE,STRING,TYPESTRINGPARAMETER,CURRENT,ALL,TYPESTRINGCOLLECTION,TYPESTRINGDT,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_182 =
            			new org.antlr.runtime.NoViableAltException(null, 182, 0, this.input);

                nvae_182.c = this.input.LA(1);
                throw nvae_182;
            }

            switch (alt182) {
                case 1 :
                    // IDP.g:2322:26: (numberOutput= ruleStringClauseStringAndDates ) ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* )
                    // IDP.g:2322:26: (numberOutput= ruleStringClauseStringAndDates )
                    // IDP.g:2322:27: numberOutput= ruleStringClauseStringAndDates
                    this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSetOfValues44361);
                    this.ruleStringClauseStringAndDates_DFAcall = false;

                     if( typeof this.ruleStringSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleStringSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleStringClauseStringAndDates();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleStringClauseStringAndDates();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleStringClauseStringAndDates();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));this.parseModelLib.getModelManger().setLastValueListAttribute(valueList);
                    }



                    // IDP.g:2323:17: ( ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )* )
                    // IDP.g:2323:18: ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )*
                    // IDP.g:2323:18: ( SEMICOLON numberOutput= ruleStringClauseStringAndDates )*
                    loop181:
                    do {
                        var alt181=2;
                        var LA181_0 = this.input.LA(1);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA181_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA181_0==SEMICOLON )) ) {
                            alt181=1;
                        }


                        switch (alt181) {
                        case 1 :
                            // IDP.g:2323:19: SEMICOLON numberOutput= ruleStringClauseStringAndDates


                            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                            SEMICOLON174=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleStringSetOfValues44385); if (this.state.failed) return retval;
                            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            SEMICOLON174_tree = this.adaptor.create(SEMICOLON174);
                            this.adaptor.addChild(root_0, SEMICOLON174_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSetOfValues44391);
                            this.ruleStringClauseStringAndDates_DFAcall = false;

                             if( typeof this.ruleStringSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleStringSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleStringSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA181 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                numberOutput=this.ruleStringClauseStringAndDates();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	numberOutput=this.ruleStringClauseStringAndDates();

                            	}
                            	}
                            else{
                                numberOutput=this.ruleStringClauseStringAndDates();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              retval.value.push((numberOutput!==null?numberOutput.value:null));this.parseModelLib.getModelManger().setLastValueListAttribute(valueList);
                            }


                            break;

                        default :
                            break loop181;
                        }
                    } while (true);






                    break;
                case 2 :
                    // IDP.g:2323:190: (numberOutput= ruleStringCollectionSelectionClause )
                    // IDP.g:2323:190: (numberOutput= ruleStringCollectionSelectionClause )
                    // IDP.g:2323:191: numberOutput= ruleStringCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleStringCollectionSelectionClause_in_ruleStringSetOfValues44406);
                    this.ruleStringCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleStringSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleStringSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleStringCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleStringCollectionSelectionClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleStringCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA182 !== undefined && this.failedPredictDFA182)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB175=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleStringSetOfValues44430); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB175_tree = this.adaptor.create(RROUNDB175);
            this.adaptor.addChild(root_0, RROUNDB175_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleStringComparisonOptionOnly_return: (function() {
        IDPParser.ruleStringComparisonOptionOnly_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringComparisonOptionOnly_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2339:1: ruleStringComparisonOptionOnly returns [value] : ( (b= ( IS_LIKE | LIKE ) ) | (c= ( IS_NOT_LIKE | NOT_LIKE ) ) | (a= CONTAINS ) | (a= DOES_NOT_CONTAIN ) | (a= DOES_NOT_START ) | (a= START_WITH ) | (a= DOES_NOT_END ) | (a= END_WITH ) );
    // $ANTLR start "ruleStringComparisonOptionOnly"
    ruleStringComparisonOptionOnly: function() {
        this.currentRule = "ruleStringComparisonOptionOnly";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringComparisonOptionOnly_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var b = null;
        var c = null;
        var a = null;

        var b_tree=null;
        var c_tree=null;
        var a_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:2342:17: ( (b= ( IS_LIKE | LIKE ) ) | (c= ( IS_NOT_LIKE | NOT_LIKE ) ) | (a= CONTAINS ) | (a= DOES_NOT_CONTAIN ) | (a= DOES_NOT_START ) | (a= START_WITH ) | (a= DOES_NOT_END ) | (a= END_WITH ) )
            var alt183=8;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case IS_LIKE:
            case LIKE:
                alt183=1;   
                break;
            case IS_NOT_LIKE:
            case NOT_LIKE:
                alt183=2;   
                break;
            case CONTAINS:
                alt183=3;   
                break;
            case DOES_NOT_CONTAIN:
                alt183=4;   
                break;
            case DOES_NOT_START:
                alt183=5;   
                break;
            case START_WITH:
                alt183=6;   
                break;
            case DOES_NOT_END:
                alt183=7;   
                break;
            case END_WITH:
                alt183=8;   
                break;
            default:
            this.pushApplyTokens([IS_LIKE,LIKE,IS_NOT_LIKE,NOT_LIKE,CONTAINS,DOES_NOT_CONTAIN,DOES_NOT_START,START_WITH,DOES_NOT_END,END_WITH]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_183 =
            			new org.antlr.runtime.NoViableAltException(null, 183, 0, this.input);

                nvae_183.c = this.input.LA(1);
                throw nvae_183;
            }

            switch (alt183) {
                case 1 :
                    // IDP.g:2342:33: (b= ( IS_LIKE | LIKE ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2342:33: (b= ( IS_LIKE | LIKE ) )
                    // IDP.g:2342:34: b= ( IS_LIKE | LIKE )
                    b=this.input.LT(1);
                    if ( (  this.pushNextTokens(IS_LIKE,LIKE,1) && this.input.LA(1)>=IS_LIKE && this.input.LA(1)<=LIKE ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(b));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_b_44587 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_b_44587;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (b?b.getText():null); fixedVal+= "like";
                    }





                    break;
                case 2 :
                    // IDP.g:2342:98: (c= ( IS_NOT_LIKE | NOT_LIKE ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2342:98: (c= ( IS_NOT_LIKE | NOT_LIKE ) )
                    // IDP.g:2342:99: c= ( IS_NOT_LIKE | NOT_LIKE )
                    c=this.input.LT(1);
                    if ( (  this.pushNextTokens(IS_NOT_LIKE,NOT_LIKE,1) && this.input.LA(1)>=IS_NOT_LIKE && this.input.LA(1)<=NOT_LIKE ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(c));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_c_44605 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_c_44605;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (c?c.getText():null); fixedVal = "not like";
                    }





                    break;
                case 3 :
                    // IDP.g:2344:33: (a= CONTAINS )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2344:33: (a= CONTAINS )
                    // IDP.g:2344:34: a= CONTAINS


                    this.pushNextTokens(CONTAINS,CONTAINS,1);
                    a=this.match(this.input,CONTAINS,IDPParser.FOLLOW_CONTAINS_in_ruleStringComparisonOptionOnly44689); if (this.state.failed) return retval;
                    if( CONTAINS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += "contains";
                    }





                    break;
                case 4 :
                    // IDP.g:2344:95: (a= DOES_NOT_CONTAIN )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2344:95: (a= DOES_NOT_CONTAIN )
                    // IDP.g:2344:96: a= DOES_NOT_CONTAIN


                    this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,1);
                    a=this.match(this.input,DOES_NOT_CONTAIN,IDPParser.FOLLOW_DOES_NOT_CONTAIN_in_ruleStringComparisonOptionOnly44701); if (this.state.failed) return retval;
                    if( DOES_NOT_CONTAIN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal = "not contains";
                    }





                    break;
                case 5 :
                    // IDP.g:2347:19: (a= DOES_NOT_START )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2347:19: (a= DOES_NOT_START )
                    // IDP.g:2347:20: a= DOES_NOT_START


                    this.pushNextTokens(DOES_NOT_START,DOES_NOT_START,1);
                    a=this.match(this.input,DOES_NOT_START,IDPParser.FOLLOW_DOES_NOT_START_in_ruleStringComparisonOptionOnly44733); if (this.state.failed) return retval;
                    if( DOES_NOT_START !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += "not starts";
                    }





                    break;
                case 6 :
                    // IDP.g:2347:89: (a= START_WITH )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2347:89: (a= START_WITH )
                    // IDP.g:2347:90: a= START_WITH


                    this.pushNextTokens(START_WITH,START_WITH,1);
                    a=this.match(this.input,START_WITH,IDPParser.FOLLOW_START_WITH_in_ruleStringComparisonOptionOnly44745); if (this.state.failed) return retval;
                    if( START_WITH !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += "starts";
                    }





                    break;
                case 7 :
                    // IDP.g:2348:33: (a= DOES_NOT_END )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2348:33: (a= DOES_NOT_END )
                    // IDP.g:2348:34: a= DOES_NOT_END


                    this.pushNextTokens(DOES_NOT_END,DOES_NOT_END,1);
                    a=this.match(this.input,DOES_NOT_END,IDPParser.FOLLOW_DOES_NOT_END_in_ruleStringComparisonOptionOnly44789); if (this.state.failed) return retval;
                    if( DOES_NOT_END !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += "not ends";
                    }





                    break;
                case 8 :
                    // IDP.g:2348:99: (a= END_WITH )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2348:99: (a= END_WITH )
                    // IDP.g:2348:100: a= END_WITH


                    this.pushNextTokens(END_WITH,END_WITH,1);
                    a=this.match(this.input,END_WITH,IDPParser.FOLLOW_END_WITH_in_ruleStringComparisonOptionOnly44801); if (this.state.failed) return retval;
                    if( END_WITH !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null); fixedVal += "ends";
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringComparisonOptionOnly";
        }
        return retval;
    },

    // inline static return class
    ruleIncludesPattern_return: (function() {
        IDPParser.ruleIncludesPattern_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleIncludesPattern_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2350:1: ruleIncludesPattern returns [value] : ( (a= CONTAINS (b= PATTERN ) ) | (a= DOES_NOT_CONTAIN (b= PATTERN ) ) );
    // $ANTLR start "ruleIncludesPattern"
    ruleIncludesPattern: function() {
        this.currentRule = "ruleIncludesPattern";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleIncludesPattern_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var a = null;
        var b = null;

        var a_tree=null;
        var b_tree=null;

         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:2353:17: ( (a= CONTAINS (b= PATTERN ) ) | (a= DOES_NOT_CONTAIN (b= PATTERN ) ) )
            var alt184=2;
            var LA184_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CONTAINS,CONTAINS,1) && LA184_0==CONTAINS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CONTAINS,CONTAINS,1) && LA184_0==CONTAINS )) ) {
                alt184=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,1) && LA184_0==DOES_NOT_CONTAIN )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,1) && LA184_0==DOES_NOT_CONTAIN )) ) {
                alt184=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_184_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 184, 0, this.input);

                nvae_184_0.c = this.input.LA(1);
                throw nvae_184_0;
            }
            switch (alt184) {
                case 1 :
                    // IDP.g:2353:33: (a= CONTAINS (b= PATTERN ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2353:33: (a= CONTAINS (b= PATTERN ) )
                    // IDP.g:2353:34: a= CONTAINS (b= PATTERN )


                    this.pushNextTokens(CONTAINS,CONTAINS,1);
                    a=this.match(this.input,CONTAINS,IDPParser.FOLLOW_CONTAINS_in_ruleIncludesPattern44968); if (this.state.failed) return retval;
                    if( CONTAINS !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    // IDP.g:2353:47: (b= PATTERN )
                    // IDP.g:2353:48: b= PATTERN


                    this.pushNextTokens(PATTERN,PATTERN,1);
                    b=this.match(this.input,PATTERN,IDPParser.FOLLOW_PATTERN_in_ruleIncludesPattern44975); if (this.state.failed) return retval;
                    if( PATTERN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    b_tree = this.adaptor.create(b);
                    this.adaptor.addChild(root_0, b_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null) + ' ' + (b?b.getText():null); fixedVal += "contains pattern";
                    }








                    break;
                case 2 :
                    // IDP.g:2354:19: (a= DOES_NOT_CONTAIN (b= PATTERN ) )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2354:19: (a= DOES_NOT_CONTAIN (b= PATTERN ) )
                    // IDP.g:2354:20: a= DOES_NOT_CONTAIN (b= PATTERN )


                    this.pushNextTokens(DOES_NOT_CONTAIN,DOES_NOT_CONTAIN,1);
                    a=this.match(this.input,DOES_NOT_CONTAIN,IDPParser.FOLLOW_DOES_NOT_CONTAIN_in_ruleIncludesPattern45007); if (this.state.failed) return retval;
                    if( DOES_NOT_CONTAIN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    a_tree = this.adaptor.create(a);
                    this.adaptor.addChild(root_0, a_tree);
                    }
                    // IDP.g:2354:41: (b= PATTERN )
                    // IDP.g:2354:43: b= PATTERN


                    this.pushNextTokens(PATTERN,PATTERN,1);
                    b=this.match(this.input,PATTERN,IDPParser.FOLLOW_PATTERN_in_ruleIncludesPattern45015); if (this.state.failed) return retval;
                    if( PATTERN !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    b_tree = this.adaptor.create(b);
                    this.adaptor.addChild(root_0, b_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      origVal = (a?a.getText():null) + ' ' + (b?b.getText():null); fixedVal += "not contains pattern";
                    }








                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleIncludesPattern";
        }
        return retval;
    },

    // inline static return class
    ruleStringComparisonOption_return: (function() {
        IDPParser.ruleStringComparisonOption_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleStringComparisonOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2397:1: ruleStringComparisonOption returns [value] : (comp= ruleBooleanComparisonOperator | comp= ruleNumericComparisonOnlyOption ) ;
    // $ANTLR start "ruleStringComparisonOption"
    ruleStringComparisonOption: function() {
        this.currentRule = "ruleStringComparisonOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleStringComparisonOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var comp = null;


        try {
            // IDP.g:2398:33: ( (comp= ruleBooleanComparisonOperator | comp= ruleNumericComparisonOnlyOption ) )
            // IDP.g:2398:41: (comp= ruleBooleanComparisonOperator | comp= ruleNumericComparisonOnlyOption )
            root_0 = this.adaptor.nil();

            // IDP.g:2398:41: (comp= ruleBooleanComparisonOperator | comp= ruleNumericComparisonOnlyOption )
            var alt185=2;

            var LA185_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA185_0>=EQ_SIGN && LA185_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA185_0>=NOT_EQUAL_SIGN && LA185_0<=EQUALS )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(EQ_SIGN,IS_EQUAL,1) && LA185_0>=EQ_SIGN && LA185_0<=IS_EQUAL )||(  this.pushNextTokens(NOT_EQUAL_SIGN,EQUALS,1) && LA185_0>=NOT_EQUAL_SIGN && LA185_0<=EQUALS )) ) {
                alt185=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA185_0>=GREATER_EQUAL_SIGN && LA185_0<=IS_GREATER_THAN )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(GREATER_EQUAL_SIGN,IS_GREATER_THAN,1) && LA185_0>=GREATER_EQUAL_SIGN && LA185_0<=IS_GREATER_THAN )) ) {
                alt185=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_185_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 185, 0, this.input);

                nvae_185_0.c = this.input.LA(1);
                throw nvae_185_0;
            }
            switch (alt185) {
                case 1 :
                    // IDP.g:2398:42: comp= ruleBooleanComparisonOperator
                    this.pushFollow(IDPParser.FOLLOW_ruleBooleanComparisonOperator_in_ruleStringComparisonOption45731);
                    this.ruleBooleanComparisonOperator_DFAcall = false;

                     if( typeof this.ruleStringComparisonOptionCurrentDecisionNumber !== 'undefined' && this.ruleStringComparisonOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringComparisonOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA185 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comp=this.ruleBooleanComparisonOperator();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringComparisonOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comp=this.ruleBooleanComparisonOperator();

                    	}
                    	}
                    else{
                        comp=this.ruleBooleanComparisonOperator();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comp.getTree());


                    break;
                case 2 :
                    // IDP.g:2398:81: comp= ruleNumericComparisonOnlyOption
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericComparisonOnlyOption_in_ruleStringComparisonOption45739);
                    this.ruleNumericComparisonOnlyOption_DFAcall = false;

                     if( typeof this.ruleStringComparisonOptionCurrentDecisionNumber !== 'undefined' && this.ruleStringComparisonOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleStringComparisonOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA185 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        comp=this.ruleNumericComparisonOnlyOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleStringComparisonOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	comp=this.ruleNumericComparisonOnlyOption();

                    	}
                    	}
                    else{
                        comp=this.ruleNumericComparisonOnlyOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, comp.getTree());


                    break;

            }
            /*if(this.failedPredictDFA185 !== undefined && this.failedPredictDFA185)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (comp!==null?comp.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleStringComparisonOption";
        }
        return retval;
    },

    // inline static return class
    ruleNumberBetweenZeroToOne_return: (function() {
        IDPParser.ruleNumberBetweenZeroToOne_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumberBetweenZeroToOne_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2411:1: ruleNumberBetweenZeroToOne returns [value] : (numberValue= ( ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER ) ;
    // $ANTLR start "ruleNumberBetweenZeroToOne"
    ruleNumberBetweenZeroToOne: function() {
        this.currentRule = "ruleNumberBetweenZeroToOne";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumberBetweenZeroToOne_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var numberValue = null;
        var param = null;

        var numberValue_tree=null;
        var param_tree=null;

        var numberVal = ""; var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var numericType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DECIMAL.value; simpleSelectiontOutput.valueType = numericType; var flags = this.parseModelLib.getModelManger().flags;
        try {
            // IDP.g:2414:9: ( (numberValue= ( ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER ) )
            // IDP.g:2414:17: (numberValue= ( ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER )
            root_0 = this.adaptor.nil();

            // IDP.g:2414:17: (numberValue= ( ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER )
            var alt186=2;

            var LA186_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && LA186_0>=ZERO_TO_ONE && LA186_0<=ZERO_OR_ONE )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && LA186_0>=ZERO_TO_ONE && LA186_0<=ZERO_OR_ONE )) ) {
                alt186=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA186_0==TYPENUMBERPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA186_0==TYPENUMBERPARAMETER )) ) {
                alt186=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_186_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 186, 0, this.input);

                nvae_186_0.c = this.input.LA(1);
                throw nvae_186_0;
            }
            switch (alt186) {
                case 1 :
                    // IDP.g:2414:18: numberValue= ( ZERO_TO_ONE | ZERO_OR_ONE )
                    numberValue=this.input.LT(1);
                    if ( (  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && this.input.LA(1)>=ZERO_TO_ONE && this.input.LA(1)<=ZERO_OR_ONE ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(numberValue));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_numberValue_45903 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_numberValue_45903;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = this.numberConversionLib.convertNumberToNativeFormat((numberValue?numberValue.getText():null), flags);
                    }


                    break;
                case 2 :
                    // IDP.g:2415:17: param= TYPENUMBERPARAMETER


                    this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1);
                    param=this.match(this.input,TYPENUMBERPARAMETER,IDPParser.FOLLOW_TYPENUMBERPARAMETER_in_ruleNumberBetweenZeroToOne45935); if (this.state.failed) return retval;
                    if( TYPENUMBERPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA186 !== undefined && this.failedPredictDFA186)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumberBetweenZeroToOne";
        }
        return retval;
    },

    // inline static return class
    ruleNumber_return: (function() {
        IDPParser.ruleNumber_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumber_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2417:1: ruleNumber returns [value] : ( ( MINUS )? numberValue= ( DECIMAL | INT | ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER );
    // $ANTLR start "ruleNumber"
    ruleNumber: function() {
        this.currentRule = "ruleNumber";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumber_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var numberValue = null;
        var param = null;
        var MINUS176 = null;

        var numberValue_tree=null;
        var param_tree=null;
        var MINUS176_tree=null;

        var numberVal = ""; var simpleSelectiontOutput = {}; simpleSelectiontOutput.index = this.input.lastMarker;   var numericType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DECIMAL.value; simpleSelectiontOutput.valueType = numericType; var flags = this.parseModelLib.getModelManger().flags;
        try {
            // IDP.g:2420:9: ( ( MINUS )? numberValue= ( DECIMAL | INT | ZERO_TO_ONE | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER )
            var alt188=2;
            var LA188_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA188_0==MINUS )||(  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && LA188_0>=ZERO_TO_ONE && LA188_0<=ZERO_OR_ONE )||(  this.pushNextTokens(DECIMAL,INT,1) && LA188_0>=DECIMAL && LA188_0<=INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA188_0==MINUS )||(  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && LA188_0>=ZERO_TO_ONE && LA188_0<=ZERO_OR_ONE )||(  this.pushNextTokens(DECIMAL,INT,1) && LA188_0>=DECIMAL && LA188_0<=INT )) ) {
                alt188=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA188_0==TYPENUMBERPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA188_0==TYPENUMBERPARAMETER )) ) {
                alt188=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_188_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 188, 0, this.input);

                nvae_188_0.c = this.input.LA(1);
                throw nvae_188_0;
            }
            switch (alt188) {
                case 1 :
                    // IDP.g:2420:11: ( MINUS )? numberValue= ( DECIMAL | INT | ZERO_TO_ONE | ZERO_OR_ONE )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2420:11: ( MINUS )?
                    var alt187=2;

                    var LA187_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA187_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA187_0==MINUS )) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // IDP.g:2420:12: MINUS


                            this.pushNextTokens(MINUS,MINUS,1);
                            MINUS176=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleNumber46064); if (this.state.failed) return retval;
                            if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            MINUS176_tree = this.adaptor.create(MINUS176);
                            this.adaptor.addChild(root_0, MINUS176_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              numberVal += "-";
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA187 !== undefined && this.failedPredictDFA187)
                    { 
                        throw null;
                    }*/

                    numberValue=this.input.LT(1);
                    if ( (  this.pushNextTokens(ZERO_TO_ONE,ZERO_OR_ONE,1) && this.input.LA(1)>=ZERO_TO_ONE && this.input.LA(1)<=ZERO_OR_ONE )||(  this.pushNextTokens(DECIMAL,INT,1) && this.input.LA(1)>=DECIMAL && this.input.LA(1)<=INT ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(numberValue));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_numberValue_46074 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_numberValue_46074;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      numberVal += this.numberConversionLib.convertNumberToNativeFormat((numberValue?numberValue.getText():null), flags); simpleSelectiontOutput.value = numberVal; this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, numberValue.start, numberVal, this.parseModelLib.getModelManger());
                    }


                    break;
                case 2 :
                    // IDP.g:2421:17: param= TYPENUMBERPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1);
                    param=this.match(this.input,TYPENUMBERPARAMETER,IDPParser.FOLLOW_TYPENUMBERPARAMETER_in_ruleNumber46114); if (this.state.failed) return retval;
                    if( TYPENUMBERPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumber";
        }
        return retval;
    },

    // inline static return class
    ruleInteger_return: (function() {
        IDPParser.ruleInteger_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleInteger_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2425:1: ruleInteger returns [value] : (numberValue= ( INT | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER ) ;
    // $ANTLR start "ruleInteger"
    ruleInteger: function() {
        this.currentRule = "ruleInteger";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleInteger_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var numberValue = null;
        var param = null;

        var numberValue_tree=null;
        var param_tree=null;

        var numberVal = ""; var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var numericType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.DECIMAL.value; simpleSelectiontOutput.valueType = numericType; var flags = this.parseModelLib.getModelManger().flags;
        try {
            // IDP.g:2428:9: ( (numberValue= ( INT | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER ) )
            // IDP.g:2428:17: (numberValue= ( INT | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER )
            root_0 = this.adaptor.nil();

            // IDP.g:2428:17: (numberValue= ( INT | ZERO_OR_ONE ) | param= TYPENUMBERPARAMETER )
            var alt189=2;

            var LA189_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA189_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA189_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA189_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA189_0==INT )) ) {
                alt189=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA189_0==TYPENUMBERPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA189_0==TYPENUMBERPARAMETER )) ) {
                alt189=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_189_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 189, 0, this.input);

                nvae_189_0.c = this.input.LA(1);
                throw nvae_189_0;
            }
            switch (alt189) {
                case 1 :
                    // IDP.g:2428:18: numberValue= ( INT | ZERO_OR_ONE )
                    numberValue=this.input.LT(1);
                    if ( (this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && this.input.LA(1)==ZERO_OR_ONE )||(this.pushNextTokens(INT,INT,1) && this.input.LA(1)==INT ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(numberValue));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_numberValue_46254 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_numberValue_46254;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       simpleSelectiontOutput.value = this.numberConversionLib.convertNumberToNativeFormat((numberValue?numberValue.getText():null), flags);
                    }


                    break;
                case 2 :
                    // IDP.g:2429:17: param= TYPENUMBERPARAMETER


                    this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1);
                    param=this.match(this.input,TYPENUMBERPARAMETER,IDPParser.FOLLOW_TYPENUMBERPARAMETER_in_ruleInteger46286); if (this.state.failed) return retval;
                    if( TYPENUMBERPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA189 !== undefined && this.failedPredictDFA189)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleInteger";
        }
        return retval;
    },

    // inline static return class
    ruleNumericSelection_return: (function() {
        IDPParser.ruleNumericSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2432:1: ruleNumericSelection returns [value] : ( CURRENT )? navigationOutput= TYPENUMBER ;
    // $ANTLR start "ruleNumericSelection"
    ruleNumericSelection: function() {
        this.currentRule = "ruleNumericSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT177 = null;

        var navigationOutput_tree=null;
        var CURRENT177_tree=null;

        var ruleOutput = {}; 
        try {
            // IDP.g:2435:17: ( ( CURRENT )? navigationOutput= TYPENUMBER )
            // IDP.g:2435:33: ( CURRENT )? navigationOutput= TYPENUMBER
            root_0 = this.adaptor.nil();

            // IDP.g:2435:33: ( CURRENT )?
            var alt190=2;

            var LA190_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA190_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA190_0==CURRENT )) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // IDP.g:2435:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT177=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleNumericSelection46434); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT177_tree = this.adaptor.create(CURRENT177);
                    this.adaptor.addChild(root_0, CURRENT177_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA190 !== undefined && this.failedPredictDFA190)
            { 
                throw null;
            }*/



            this.pushNextTokens(TYPENUMBER,TYPENUMBER,1);
            navigationOutput=this.match(this.input,TYPENUMBER,IDPParser.FOLLOW_TYPENUMBER_in_ruleNumericSelection46444); if (this.state.failed) return retval;
            if( TYPENUMBER !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(ruleOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericSelection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericCollectionContext_return: (function() {
        IDPParser.ruleNumericCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2437:1: ruleNumericCollectionContext returns [value] : navigationOutput= TYPENUMBERCOLLECTION ;
    // $ANTLR start "ruleNumericCollectionContext"
    ruleNumericCollectionContext: function() {
        this.currentRule = "ruleNumericCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2438:25: (navigationOutput= TYPENUMBERCOLLECTION )
            // IDP.g:2438:48: navigationOutput= TYPENUMBERCOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,1);
            navigationOutput=this.match(this.input,TYPENUMBERCOLLECTION,IDPParser.FOLLOW_TYPENUMBERCOLLECTION_in_ruleNumericCollectionContext46555); if (this.state.failed) return retval;
            if( TYPENUMBERCOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleNumericContext_return: (function() {
        IDPParser.ruleNumericContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2445:1: ruleNumericContext returns [value] : navigationOutput= TYPENUMBER ;
    // $ANTLR start "ruleNumericContext"
    ruleNumericContext: function() {
        this.currentRule = "ruleNumericContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2446:25: (navigationOutput= TYPENUMBER )
            // IDP.g:2446:49: navigationOutput= TYPENUMBER
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPENUMBER,TYPENUMBER,1);
            navigationOutput=this.match(this.input,TYPENUMBER,IDPParser.FOLLOW_TYPENUMBER_in_ruleNumericContext46683); if (this.state.failed) return retval;
            if( TYPENUMBER !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleNumericAliasDTCollectionContext_return: (function() {
        IDPParser.ruleNumericAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2453:1: ruleNumericAliasDTCollectionContext returns [value] : navigationOutput= TYPENUMBERDT ;
    // $ANTLR start "ruleNumericAliasDTCollectionContext"
    ruleNumericAliasDTCollectionContext: function() {
        this.currentRule = "ruleNumericAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2454:25: (navigationOutput= TYPENUMBERDT )
            // IDP.g:2454:49: navigationOutput= TYPENUMBERDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPENUMBERDT,TYPENUMBERDT,1);
            navigationOutput=this.match(this.input,TYPENUMBERDT,IDPParser.FOLLOW_TYPENUMBERDT_in_ruleNumericAliasDTCollectionContext46804); if (this.state.failed) return retval;
            if( TYPENUMBERDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleNumericCollection_return: (function() {
        IDPParser.ruleNumericCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2461:1: ruleNumericCollection returns [value] : (collection= ruleNumericBaseCollection | collection= ruleNumericDTAliasCollection | collection= ruleNumericGroupOfAggregation | collection= ruleNumericGroupOfCount );
    // $ANTLR start "ruleNumericCollection"
    ruleNumericCollection: function() {
        this.currentRule = "ruleNumericCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var collection = null;


        try {
            // IDP.g:2463:17: (collection= ruleNumericBaseCollection | collection= ruleNumericDTAliasCollection | collection= ruleNumericGroupOfAggregation | collection= ruleNumericGroupOfCount )
            var alt191=4;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case CURRENT:
            case ALL:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
            case TYPENUMBERCOLLECTION:
                alt191=1;   
                break;
            case TYPENUMBERDT:
                alt191=2;   
                break;
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
                alt191=3;   
                break;
            case COUNT_DISTINCT_OF:
            case COUNT_OF:
            case NUMBER_OF:
                alt191=4;   
                break;
            default:
            this.pushApplyTokens([CURRENT,ALL,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,TYPENUMBERCOLLECTION,TYPENUMBERDT,MAXIMUM_OF,MINIMUM_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF,COUNT_DISTINCT_OF,COUNT_OF,NUMBER_OF]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_191 =
            			new org.antlr.runtime.NoViableAltException(null, 191, 0, this.input);

                nvae_191.c = this.input.LA(1);
                throw nvae_191;
            }

            switch (alt191) {
                case 1 :
                    // IDP.g:2463:33: collection= ruleNumericBaseCollection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseCollection_in_ruleNumericCollection46951);
                    this.ruleNumericBaseCollection_DFAcall = false;

                     if( typeof this.ruleNumericCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA191 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleNumericBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleNumericBaseCollection();

                    	}
                    	}
                    else{
                        collection=this.ruleNumericBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;
                case 2 :
                    // IDP.g:2464:37: collection= ruleNumericDTAliasCollection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericDTAliasCollection_in_ruleNumericCollection46995);
                    this.ruleNumericDTAliasCollection_DFAcall = false;

                     if( typeof this.ruleNumericCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA191 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleNumericDTAliasCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleNumericDTAliasCollection();

                    	}
                    	}
                    else{
                        collection=this.ruleNumericDTAliasCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;
                case 3 :
                    // IDP.g:2465:37: collection= ruleNumericGroupOfAggregation
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericGroupOfAggregation_in_ruleNumericCollection47039);
                    this.ruleNumericGroupOfAggregation_DFAcall = false;

                     if( typeof this.ruleNumericCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA191 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleNumericGroupOfAggregation();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleNumericGroupOfAggregation();

                    	}
                    	}
                    else{
                        collection=this.ruleNumericGroupOfAggregation();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;
                case 4 :
                    // IDP.g:2466:37: collection= ruleNumericGroupOfCount
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericGroupOfCount_in_ruleNumericCollection47083);
                    this.ruleNumericGroupOfCount_DFAcall = false;

                     if( typeof this.ruleNumericCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA191 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleNumericGroupOfCount();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleNumericGroupOfCount();

                    	}
                    	}
                    else{
                        collection=this.ruleNumericGroupOfCount();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (collection!==null?collection.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericCollection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericDTAliasCollection_return: (function() {
        IDPParser.ruleNumericDTAliasCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericDTAliasCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2468:1: ruleNumericDTAliasCollection returns [value] : (navigationOutputDT= ruleNumericAliasDTCollectionContext ) ;
    // $ANTLR start "ruleNumericDTAliasCollection"
    ruleNumericDTAliasCollection: function() {
        this.currentRule = "ruleNumericDTAliasCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericDTAliasCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var navigationOutputDT = null;


        var selectionOutput = {}; var compoundSelectionOutput = {};
        try {
            // IDP.g:2474:49: ( (navigationOutputDT= ruleNumericAliasDTCollectionContext ) )
            // IDP.g:2474:51: (navigationOutputDT= ruleNumericAliasDTCollectionContext )
            root_0 = this.adaptor.nil();

            // IDP.g:2474:51: (navigationOutputDT= ruleNumericAliasDTCollectionContext )
            // IDP.g:2474:52: navigationOutputDT= ruleNumericAliasDTCollectionContext
            this.pushFollow(IDPParser.FOLLOW_ruleNumericAliasDTCollectionContext_in_ruleNumericDTAliasCollection47224);
            this.ruleNumericAliasDTCollectionContext_DFAcall = false;

             if( typeof this.ruleNumericDTAliasCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericDTAliasCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericDTAliasCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                navigationOutputDT=this.ruleNumericAliasDTCollectionContext();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericDTAliasCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	navigationOutputDT=this.ruleNumericAliasDTCollectionContext();

            	}
            	}
            else{
                navigationOutputDT=this.ruleNumericAliasDTCollectionContext();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericDTAliasCollection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericBaseCollection_return: (function() {
        IDPParser.ruleNumericBaseCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericBaseCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2477:1: ruleNumericBaseCollection returns [value] : ( ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) ) (flt= filterClause )? ) ;
    // $ANTLR start "ruleNumericBaseCollection"
    ruleNumericBaseCollection: function() {
        this.currentRule = "ruleNumericBaseCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericBaseCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var CURRENT178 = null;
        var OF179 = null;
        var CURRENT180 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;

        var CURRENT178_tree=null;
        var OF179_tree=null;
        var CURRENT180_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:2488:17: ( ( ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) ) (flt= filterClause )? ) )
            // IDP.g:2488:33: ( ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) ) (flt= filterClause )? )
            root_0 = this.adaptor.nil();

            // IDP.g:2488:33: ( ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) ) (flt= filterClause )? )
            // IDP.g:2488:34: ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) ) (flt= filterClause )?
            // IDP.g:2488:34: ( ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) )
            var alt197=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case CURRENT:
            case TYPENUMBERCOLLECTION:
                alt197=1;   
                break;
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt197=2;   
                break;
            case ALL:
                alt197=3;   
                break;
            default:
            this.pushApplyTokens([CURRENT,TYPENUMBERCOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_197 =
            			new org.antlr.runtime.NoViableAltException(null, 197, 0, this.input);

                nvae_197.c = this.input.LA(1);
                throw nvae_197;
            }

            switch (alt197) {
                case 1 :
                    // IDP.g:2489:48: ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext )
                    // IDP.g:2489:48: ( ( CURRENT )? navigationOutput= ruleNumericCollectionContext )
                    // IDP.g:2489:50: ( CURRENT )? navigationOutput= ruleNumericCollectionContext
                    // IDP.g:2489:50: ( CURRENT )?
                    var alt192=2;

                    var LA192_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA192_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA192_0==CURRENT )) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // IDP.g:2489:51: CURRENT


                            this.pushNextTokens(CURRENT,CURRENT,1);
                            CURRENT178=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleNumericBaseCollection47399); if (this.state.failed) return retval;
                            if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            CURRENT178_tree = this.adaptor.create(CURRENT178);
                            this.adaptor.addChild(root_0, CURRENT178_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.isCurrent = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA192 !== undefined && this.failedPredictDFA192)
                    { 
                        throw null;
                    }*/

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47409);
                    this.ruleNumericCollectionContext_DFAcall = false;

                     if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleNumericCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleNumericCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleNumericCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;
                case 2 :
                    // IDP.g:2490:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) )
                    // IDP.g:2490:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions ) )
                    // IDP.g:2490:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) ) (order= ruleSortingOptions )
                    // IDP.g:2490:34: (quantity= ruleInteger )
                    // IDP.g:2490:35: quantity= ruleInteger
                    this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleNumericBaseCollection47455);
                    this.ruleInteger_DFAcall = false;

                     if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        quantity=this.ruleInteger();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	quantity=this.ruleInteger();

                    	}
                    	}
                    else{
                        quantity=this.ruleInteger();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                    }



                    // IDP.g:2490:113: ( OF rall= ruleAll )?
                    var alt193=2;

                    var LA193_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA193_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA193_0==OF )) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // IDP.g:2490:114: OF rall= ruleAll


                            this.pushNextTokens(OF,OF,1);
                            OF179=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleNumericBaseCollection47461); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF179_tree = this.adaptor.create(OF179);
                            this.adaptor.addChild(root_0, OF179_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleNumericBaseCollection47467);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA193 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA193 !== undefined && this.failedPredictDFA193)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2490:221: ( ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) )
                    // IDP.g:2490:222: ( CURRENT )? ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) )
                    // IDP.g:2490:222: ( CURRENT )?
                    var alt194=2;

                    var LA194_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA194_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA194_0==CURRENT )) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // IDP.g:2490:223: CURRENT


                            this.pushNextTokens(CURRENT,CURRENT,1);
                            CURRENT180=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleNumericBaseCollection47476); if (this.state.failed) return retval;
                            if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            CURRENT180_tree = this.adaptor.create(CURRENT180);
                            this.adaptor.addChild(root_0, CURRENT180_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.isCurrent = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA194 !== undefined && this.failedPredictDFA194)
                    { 
                        throw null;
                    }*/

                    // IDP.g:2490:270: ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) )
                    var alt195=2;

                    var LA195_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA195_0==TYPENUMBER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA195_0==TYPENUMBER )) ) {
                        alt195=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,1) && LA195_0==TYPENUMBERCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,1) && LA195_0==TYPENUMBERCOLLECTION )) ) {
                        alt195=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_195_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 195, 0, this.input);

                        nvae_195_0.c = this.input.LA(1);
                        throw nvae_195_0;
                    }
                    switch (alt195) {
                        case 1 :
                            // IDP.g:2490:271: (navigationOutput= ruleNumericContext )
                            // IDP.g:2490:271: (navigationOutput= ruleNumericContext )
                            // IDP.g:2490:272: navigationOutput= ruleNumericContext
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericContext_in_ruleNumericBaseCollection47489);
                            this.ruleNumericContext_DFAcall = false;

                             if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleNumericContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleNumericContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleNumericContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;
                        case 2 :
                            // IDP.g:2490:313: (navigationOutput= ruleNumericCollectionContext )
                            // IDP.g:2490:313: (navigationOutput= ruleNumericCollectionContext )
                            // IDP.g:2490:314: navigationOutput= ruleNumericCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47499);
                            this.ruleNumericCollectionContext_DFAcall = false;

                             if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleNumericCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleNumericCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleNumericCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA195 !== undefined && this.failedPredictDFA195)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }



                    // IDP.g:2491:61: (order= ruleSortingOptions )
                    // IDP.g:2491:62: order= ruleSortingOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleNumericBaseCollection47572);
                    this.ruleSortingOptions_DFAcall = false;

                     if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleSortingOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleSortingOptions();

                    	}
                    	}
                    else{
                        order=this.ruleSortingOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                    }





                    break;
                case 3 :
                    // IDP.g:2492:49: ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) )
                    // IDP.g:2492:49: ( (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) ) )
                    // IDP.g:2492:50: (rall= ruleAll ) ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) )
                    // IDP.g:2492:50: (rall= ruleAll )
                    // IDP.g:2492:51: rall= ruleAll
                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleNumericBaseCollection47636);
                    this.ruleAll_DFAcall = false;

                     if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rall=this.ruleAll();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rall=this.ruleAll();

                    	}
                    	}
                    else{
                        rall=this.ruleAll();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                    }



                    // IDP.g:2492:126: ( (navigationOutput= ruleNumericContext ) | (navigationOutput= ruleNumericCollectionContext ) )
                    var alt196=2;

                    var LA196_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA196_0==TYPENUMBER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA196_0==TYPENUMBER )) ) {
                        alt196=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,1) && LA196_0==TYPENUMBERCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,1) && LA196_0==TYPENUMBERCOLLECTION )) ) {
                        alt196=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_196_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 196, 0, this.input);

                        nvae_196_0.c = this.input.LA(1);
                        throw nvae_196_0;
                    }
                    switch (alt196) {
                        case 1 :
                            // IDP.g:2492:127: (navigationOutput= ruleNumericContext )
                            // IDP.g:2492:127: (navigationOutput= ruleNumericContext )
                            // IDP.g:2492:128: navigationOutput= ruleNumericContext
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericContext_in_ruleNumericBaseCollection47647);
                            this.ruleNumericContext_DFAcall = false;

                             if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleNumericContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleNumericContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleNumericContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;
                        case 2 :
                            // IDP.g:2492:169: (navigationOutput= ruleNumericCollectionContext )
                            // IDP.g:2492:169: (navigationOutput= ruleNumericCollectionContext )
                            // IDP.g:2492:170: navigationOutput= ruleNumericCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47657);
                            this.ruleNumericCollectionContext_DFAcall = false;

                             if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleNumericCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleNumericCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleNumericCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA196 !== undefined && this.failedPredictDFA196)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA197 !== undefined && this.failedPredictDFA197)
            { 
                throw null;
            }*/

            // IDP.g:2496:33: (flt= filterClause )?
            var alt198=2;

            var LA198_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA198_0>=WHERE && LA198_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA198_0>=WHERE && LA198_0<=FILTER_BY )) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // IDP.g:2496:34: flt= filterClause
                    this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleNumericBaseCollection47837);
                    this.filterClause_DFAcall = false;

                     if( typeof this.ruleNumericBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA198 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.filterClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.filterClause();

                    	}
                    	}
                    else{
                        flt=this.filterClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.filterClause = (flt!==null?flt.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA198 !== undefined && this.failedPredictDFA198)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;  
                                                   this.parseModelLib.getModelManger().cleanAllContext();        
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericBaseCollection";
        }
        return retval;
    },

    // inline static return class
    ruleCompoundNumericSelection_return: (function() {
        IDPParser.ruleCompoundNumericSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCompoundNumericSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2500:1: ruleCompoundNumericSelection returns [value] : (compoundSelectionOutput= ruleNumericAggregationFunction | compoundSelectionOutput= ruleCount ) ;
    // $ANTLR start "ruleCompoundNumericSelection"
    ruleCompoundNumericSelection: function() {
        this.currentRule = "ruleCompoundNumericSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCompoundNumericSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:2501:17: ( (compoundSelectionOutput= ruleNumericAggregationFunction | compoundSelectionOutput= ruleCount ) )
            // IDP.g:2501:33: (compoundSelectionOutput= ruleNumericAggregationFunction | compoundSelectionOutput= ruleCount )
            root_0 = this.adaptor.nil();

            // IDP.g:2501:33: (compoundSelectionOutput= ruleNumericAggregationFunction | compoundSelectionOutput= ruleCount )
            var alt199=2;

            var LA199_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA199_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA199_0==MINIMUM_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA199_0>=HIGHEST && LA199_0<=SUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA199_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA199_0==MINIMUM_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA199_0>=HIGHEST && LA199_0<=SUM_OF )) ) {
                alt199=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA199_0>=COUNT_DISTINCT_OF && LA199_0<=COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA199_0==NUMBER_OF )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA199_0>=COUNT_DISTINCT_OF && LA199_0<=COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA199_0==NUMBER_OF )) ) {
                alt199=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_199_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 199, 0, this.input);

                nvae_199_0.c = this.input.LA(1);
                throw nvae_199_0;
            }
            switch (alt199) {
                case 1 :
                    // IDP.g:2501:34: compoundSelectionOutput= ruleNumericAggregationFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericAggregationFunction_in_ruleCompoundNumericSelection47955);
                    this.ruleNumericAggregationFunction_DFAcall = false;

                     if( typeof this.ruleCompoundNumericSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundNumericSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCompoundNumericSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA199 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericAggregationFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundNumericSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericAggregationFunction();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericAggregationFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2502:35: compoundSelectionOutput= ruleCount
                    this.pushFollow(IDPParser.FOLLOW_ruleCount_in_ruleCompoundNumericSelection47997);
                    this.ruleCount_DFAcall = false;

                     if( typeof this.ruleCompoundNumericSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundNumericSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCompoundNumericSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA199 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleCount();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundNumericSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleCount();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleCount();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA199 !== undefined && this.failedPredictDFA199)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCompoundNumericSelection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericBaseSelection_return: (function() {
        IDPParser.ruleNumericBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2507:1: ruleNumericBaseSelection returns [value] : (selectionOutput= ruleNumber | selectionOutput= ruleNumericSelection | selectionOutput= ruleCompoundNumericSelection | selectionOutput= ruleNumericAdvanceFunction );
    // $ANTLR start "ruleNumericBaseSelection"
    ruleNumericBaseSelection: function() {
        this.currentRule = "ruleNumericBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {};
        try {
            // IDP.g:2509:17: (selectionOutput= ruleNumber | selectionOutput= ruleNumericSelection | selectionOutput= ruleCompoundNumericSelection | selectionOutput= ruleNumericAdvanceFunction )
            var alt200=4;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case MINUS:
            case ZERO_TO_ONE:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case DECIMAL:
            case INT:
                alt200=1;   
                break;
            case TYPENUMBER:
            case CURRENT:
                alt200=2;   
                break;
            case COUNT_DISTINCT_OF:
            case COUNT_OF:
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
                alt200=3;   
                break;
            case NUMBER_OF:
                var LA200_4 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OCCURENCES_REGEXP,OCCURENCES_REGEXP,2) && LA200_4==OCCURENCES_REGEXP )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OCCURENCES_REGEXP,OCCURENCES_REGEXP,2) && LA200_4==OCCURENCES_REGEXP )) ) {
                    alt200=4;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA200_4==LROUNDB )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,2) && LA200_4==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,2) && LA200_4>=COUNT_DISTINCT_OF && LA200_4<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,2) && LA200_4>=CURRENT && LA200_4<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,2) && LA200_4==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,2) && LA200_4==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,2) && LA200_4>=TYPETIMECOLLECTION && LA200_4<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,2) && LA200_4>=TYPETIMESTAMPCOLLECTION && LA200_4<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,2) && LA200_4>=TYPEDATECOLLECTION && LA200_4<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA200_4>=TYPESTRINGCOLLECTION && LA200_4<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,2) && LA200_4>=ZERO_OR_ONE && LA200_4<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,2) && LA200_4>=INT && LA200_4<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,2) && LA200_4>=HIGHEST && LA200_4<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,2) && LA200_4>=TYPETIMEINTERVALCOLLECTION && LA200_4<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,2) && LA200_4==LROUNDB )||( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,2) && LA200_4==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,2) && LA200_4>=COUNT_DISTINCT_OF && LA200_4<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,2) && LA200_4>=CURRENT && LA200_4<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,2) && LA200_4==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,2) && LA200_4==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,2) && LA200_4>=TYPETIMECOLLECTION && LA200_4<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,2) && LA200_4>=TYPETIMESTAMPCOLLECTION && LA200_4<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,2) && LA200_4>=TYPEDATECOLLECTION && LA200_4<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA200_4>=TYPESTRINGCOLLECTION && LA200_4<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,2) && LA200_4>=ZERO_OR_ONE && LA200_4<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,2) && LA200_4>=INT && LA200_4<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,2) && LA200_4>=HIGHEST && LA200_4<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,2) && LA200_4>=TYPETIMEINTERVALCOLLECTION && LA200_4<=TYPETIMEINTERVALDT )) ) {
                    alt200=3;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_200_4 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 200, 4, this.input);

                    nvae_200_4.c = this.input.LA(2);
                    throw nvae_200_4;
                }   
                break;
            case ROUND:
            case POWER:
            case SIN:
            case COS:
            case LOG:
                alt200=4;   
                break;
            default:
            this.pushApplyTokens([MINUS,ZERO_TO_ONE,ZERO_OR_ONE,TYPENUMBERPARAMETER,DECIMAL,INT,TYPENUMBER,CURRENT,COUNT_DISTINCT_OF,COUNT_OF,MAXIMUM_OF,MINIMUM_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF,NUMBER_OF,ROUND,POWER,SIN,COS,LOG]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_200 =
            			new org.antlr.runtime.NoViableAltException(null, 200, 0, this.input);

                nvae_200.c = this.input.LA(1);
                throw nvae_200;
            }

            switch (alt200) {
                case 1 :
                    // IDP.g:2509:33: selectionOutput= ruleNumber
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumber_in_ruleNumericBaseSelection48235);
                    this.ruleNumber_DFAcall = false;

                     if( typeof this.ruleNumericBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA200 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumber();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumber();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumber();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2510:35: selectionOutput= ruleNumericSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSelection_in_ruleNumericBaseSelection48277);
                    this.ruleNumericSelection_DFAcall = false;

                     if( typeof this.ruleNumericBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA200 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selection = ((selectionOutput!==null?selectionOutput.value:null)  === undefined ? null: (selectionOutput!==null?selectionOutput.value:null)); 
                                                                                                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value; 
                                                                                                                                        retval.value = new this.entityModelLib.CompoundSelection(ruleOutput); 
                                                                                                                                       
                    }


                    break;
                case 3 :
                    // IDP.g:2514:35: selectionOutput= ruleCompoundNumericSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundNumericSelection_in_ruleNumericBaseSelection48319);
                    this.ruleCompoundNumericSelection_DFAcall = false;

                     if( typeof this.ruleNumericBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA200 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundNumericSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundNumericSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundNumericSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 4 :
                    // IDP.g:2515:35: selectionOutput= ruleNumericAdvanceFunction
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericAdvanceFunction_in_ruleNumericBaseSelection48361);
                    this.ruleNumericAdvanceFunction_DFAcall = false;

                     if( typeof this.ruleNumericBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleNumericBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA200 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericAdvanceFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericAdvanceFunction();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericAdvanceFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleNumericAdvanceFunction_return: (function() {
        IDPParser.ruleNumericAdvanceFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericAdvanceFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2518:1: ruleNumericAdvanceFunction returns [value] : ( (func= ruleNumericOneParamFunction ) | (func= ruleNumericTwoParamsFunction ) | (func= ruleNumericOccurencesRegexpFunction ) );
    // $ANTLR start "ruleNumericAdvanceFunction"
    ruleNumericAdvanceFunction: function() {
        this.currentRule = "ruleNumericAdvanceFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericAdvanceFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var func = null;


        try {
            // IDP.g:2519:17: ( (func= ruleNumericOneParamFunction ) | (func= ruleNumericTwoParamsFunction ) | (func= ruleNumericOccurencesRegexpFunction ) )
            var alt201=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case SIN:
            case COS:
            case LOG:
                alt201=1;   
                break;
            case ROUND:
            case POWER:
                alt201=2;   
                break;
            case NUMBER_OF:
                alt201=3;   
                break;
            default:
            this.pushApplyTokens([SIN,COS,LOG,ROUND,POWER,NUMBER_OF]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_201 =
            			new org.antlr.runtime.NoViableAltException(null, 201, 0, this.input);

                nvae_201.c = this.input.LA(1);
                throw nvae_201;
            }

            switch (alt201) {
                case 1 :
                    // IDP.g:2519:29: (func= ruleNumericOneParamFunction )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2519:29: (func= ruleNumericOneParamFunction )
                    // IDP.g:2519:30: func= ruleNumericOneParamFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericOneParamFunction_in_ruleNumericAdvanceFunction48440);
                    this.ruleNumericOneParamFunction_DFAcall = false;

                     if( typeof this.ruleNumericAdvanceFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAdvanceFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericAdvanceFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        func=this.ruleNumericOneParamFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAdvanceFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	func=this.ruleNumericOneParamFunction();

                    	}
                    	}
                    else{
                        func=this.ruleNumericOneParamFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (func!==null?func.value:null);
                    }





                    break;
                case 2 :
                    // IDP.g:2520:22: (func= ruleNumericTwoParamsFunction )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2520:22: (func= ruleNumericTwoParamsFunction )
                    // IDP.g:2520:23: func= ruleNumericTwoParamsFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericTwoParamsFunction_in_ruleNumericAdvanceFunction48477);
                    this.ruleNumericTwoParamsFunction_DFAcall = false;

                     if( typeof this.ruleNumericAdvanceFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAdvanceFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericAdvanceFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        func=this.ruleNumericTwoParamsFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAdvanceFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	func=this.ruleNumericTwoParamsFunction();

                    	}
                    	}
                    else{
                        func=this.ruleNumericTwoParamsFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (func!==null?func.value:null);
                    }





                    break;
                case 3 :
                    // IDP.g:2521:22: (func= ruleNumericOccurencesRegexpFunction )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2521:22: (func= ruleNumericOccurencesRegexpFunction )
                    // IDP.g:2521:23: func= ruleNumericOccurencesRegexpFunction
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericOccurencesRegexpFunction_in_ruleNumericAdvanceFunction48510);
                    this.ruleNumericOccurencesRegexpFunction_DFAcall = false;

                     if( typeof this.ruleNumericAdvanceFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAdvanceFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericAdvanceFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        func=this.ruleNumericOccurencesRegexpFunction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAdvanceFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	func=this.ruleNumericOccurencesRegexpFunction();

                    	}
                    	}
                    else{
                        func=this.ruleNumericOccurencesRegexpFunction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (func!==null?func.value:null);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericAdvanceFunction";
        }
        return retval;
    },

    // inline static return class
    ruleNumericOneParamFunction_return: (function() {
        IDPParser.ruleNumericOneParamFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericOneParamFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2523:1: ruleNumericOneParamFunction returns [value] : ( ( (func= ruleNumericOneParamFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) RROUNDB ) ;
    // $ANTLR start "ruleNumericOneParamFunction"
    ruleNumericOneParamFunction: function() {
        this.currentRule = "ruleNumericOneParamFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericOneParamFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB181 = null;
        var RROUNDB182 = null;
         var func = null;
         var result1 = null;

        var LROUNDB181_tree=null;
        var RROUNDB182_tree=null;

        retval.value = null; this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2525:17: ( ( ( (func= ruleNumericOneParamFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) RROUNDB ) )
            // IDP.g:2525:33: ( ( (func= ruleNumericOneParamFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2525:33: ( ( (func= ruleNumericOneParamFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) RROUNDB )
            // IDP.g:2525:35: ( (func= ruleNumericOneParamFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) RROUNDB
            // IDP.g:2525:35: ( (func= ruleNumericOneParamFunctionName ) )
            // IDP.g:2525:36: (func= ruleNumericOneParamFunctionName )
            // IDP.g:2525:36: (func= ruleNumericOneParamFunctionName )
            // IDP.g:2525:37: func= ruleNumericOneParamFunctionName
            this.pushFollow(IDPParser.FOLLOW_ruleNumericOneParamFunctionName_in_ruleNumericOneParamFunction48602);
            this.ruleNumericOneParamFunctionName_DFAcall = false;

             if( typeof this.ruleNumericOneParamFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericOneParamFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericOneParamFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                func=this.ruleNumericOneParamFunctionName();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericOneParamFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	func=this.ruleNumericOneParamFunctionName();

            	}
            	}
            else{
                func=this.ruleNumericOneParamFunctionName();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (func!==null?func.value:null);
            }





            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB181=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericOneParamFunction48640); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB181_tree = this.adaptor.create(LROUNDB181);
            this.adaptor.addChild(root_0, LROUNDB181_tree);
            }
            // IDP.g:2527:33: ( (result1= ruleNumericSelectionClause ) )
            // IDP.g:2527:34: (result1= ruleNumericSelectionClause )
            // IDP.g:2527:34: (result1= ruleNumericSelectionClause )
            // IDP.g:2527:35: result1= ruleNumericSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleNumericOneParamFunction48680);
            this.ruleNumericSelectionClause_DFAcall = false;

             if( typeof this.ruleNumericOneParamFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericOneParamFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericOneParamFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                result1=this.ruleNumericSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericOneParamFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	result1=this.ruleNumericSelectionClause();

            	}
            	}
            else{
                result1=this.ruleNumericSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, result1.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.params.push((result1!==null?result1.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB182=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericOneParamFunction48718); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB182_tree = this.adaptor.create(RROUNDB182);
            this.adaptor.addChild(root_0, RROUNDB182_tree);
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericOneParamFunction";
        }
        return retval;
    },

    // inline static return class
    ruleNumericTwoParamsFunction_return: (function() {
        IDPParser.ruleNumericTwoParamsFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericTwoParamsFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2531:1: ruleNumericTwoParamsFunction returns [value] : ( ( (func= ruleNumericTwoParamsFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) SEMICOLON ( (result2= ruleNumericSelectionClause ) ) RROUNDB ) ;
    // $ANTLR start "ruleNumericTwoParamsFunction"
    ruleNumericTwoParamsFunction: function() {
        this.currentRule = "ruleNumericTwoParamsFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericTwoParamsFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB183 = null;
        var SEMICOLON184 = null;
        var RROUNDB185 = null;
         var func = null;
         var result1 = null;
         var result2 = null;

        var LROUNDB183_tree=null;
        var SEMICOLON184_tree=null;
        var RROUNDB185_tree=null;

        retval.value = null; this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2533:17: ( ( ( (func= ruleNumericTwoParamsFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) SEMICOLON ( (result2= ruleNumericSelectionClause ) ) RROUNDB ) )
            // IDP.g:2533:33: ( ( (func= ruleNumericTwoParamsFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) SEMICOLON ( (result2= ruleNumericSelectionClause ) ) RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2533:33: ( ( (func= ruleNumericTwoParamsFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) SEMICOLON ( (result2= ruleNumericSelectionClause ) ) RROUNDB )
            // IDP.g:2533:35: ( (func= ruleNumericTwoParamsFunctionName ) ) LROUNDB ( (result1= ruleNumericSelectionClause ) ) SEMICOLON ( (result2= ruleNumericSelectionClause ) ) RROUNDB
            // IDP.g:2533:35: ( (func= ruleNumericTwoParamsFunctionName ) )
            // IDP.g:2533:36: (func= ruleNumericTwoParamsFunctionName )
            // IDP.g:2533:36: (func= ruleNumericTwoParamsFunctionName )
            // IDP.g:2533:37: func= ruleNumericTwoParamsFunctionName
            this.pushFollow(IDPParser.FOLLOW_ruleNumericTwoParamsFunctionName_in_ruleNumericTwoParamsFunction48809);
            this.ruleNumericTwoParamsFunctionName_DFAcall = false;

             if( typeof this.ruleNumericTwoParamsFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericTwoParamsFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericTwoParamsFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                func=this.ruleNumericTwoParamsFunctionName();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTwoParamsFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	func=this.ruleNumericTwoParamsFunctionName();

            	}
            	}
            else{
                func=this.ruleNumericTwoParamsFunctionName();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, func.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (func!==null?func.value:null);
            }





            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB183=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericTwoParamsFunction48847); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB183_tree = this.adaptor.create(LROUNDB183);
            this.adaptor.addChild(root_0, LROUNDB183_tree);
            }
            // IDP.g:2535:33: ( (result1= ruleNumericSelectionClause ) )
            // IDP.g:2535:34: (result1= ruleNumericSelectionClause )
            // IDP.g:2535:34: (result1= ruleNumericSelectionClause )
            // IDP.g:2535:35: result1= ruleNumericSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleNumericTwoParamsFunction48887);
            this.ruleNumericSelectionClause_DFAcall = false;

             if( typeof this.ruleNumericTwoParamsFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericTwoParamsFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericTwoParamsFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                result1=this.ruleNumericSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTwoParamsFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	result1=this.ruleNumericSelectionClause();

            	}
            	}
            else{
                result1=this.ruleNumericSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, result1.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.params.push((result1!==null?result1.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
            SEMICOLON184=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleNumericTwoParamsFunction48926); if (this.state.failed) return retval;
            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            SEMICOLON184_tree = this.adaptor.create(SEMICOLON184);
            this.adaptor.addChild(root_0, SEMICOLON184_tree);
            }
            // IDP.g:2537:33: ( (result2= ruleNumericSelectionClause ) )
            // IDP.g:2537:34: (result2= ruleNumericSelectionClause )
            // IDP.g:2537:34: (result2= ruleNumericSelectionClause )
            // IDP.g:2537:35: result2= ruleNumericSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleNumericTwoParamsFunction48967);
            this.ruleNumericSelectionClause_DFAcall = false;

             if( typeof this.ruleNumericTwoParamsFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericTwoParamsFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericTwoParamsFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                result2=this.ruleNumericSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTwoParamsFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	result2=this.ruleNumericSelectionClause();

            	}
            	}
            else{
                result2=this.ruleNumericSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, result2.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.params.push((result2!==null?result2.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB185=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericTwoParamsFunction49006); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB185_tree = this.adaptor.create(RROUNDB185);
            this.adaptor.addChild(root_0, RROUNDB185_tree);
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericTwoParamsFunction";
        }
        return retval;
    },

    // inline static return class
    ruleNumericOccurencesRegexpFunction_return: (function() {
        IDPParser.ruleNumericOccurencesRegexpFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericOccurencesRegexpFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2540:1: ruleNumericOccurencesRegexpFunction returns [value] : ( NUMBER_OF ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) ) ) ;
    // $ANTLR start "ruleNumericOccurencesRegexpFunction"
    ruleNumericOccurencesRegexpFunction: function() {
        this.currentRule = "ruleNumericOccurencesRegexpFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericOccurencesRegexpFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var NUMBER_OF186 = null;
        var OCCURENCES_REGEXP187 = null;
        var IN188 = null;
         var result1 = null;
         var result2 = null;

        var NUMBER_OF186_tree=null;
        var OCCURENCES_REGEXP187_tree=null;
        var IN188_tree=null;

        retval.value = new this.entityModelLib.AdvanceFunction(this.constantsLib.advanceFunctionNamesEnum.number_occurences_regexp);this.parseModelLib.getModelManger().cleanValueListAttribute();
        try {
            // IDP.g:2542:17: ( ( NUMBER_OF ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) ) ) )
            // IDP.g:2542:33: ( NUMBER_OF ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2542:33: ( NUMBER_OF ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) ) )
            // IDP.g:2542:34: NUMBER_OF ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) )


            this.pushNextTokens(NUMBER_OF,NUMBER_OF,1);
            NUMBER_OF186=this.match(this.input,NUMBER_OF,IDPParser.FOLLOW_NUMBER_OF_in_ruleNumericOccurencesRegexpFunction49088); if (this.state.failed) return retval;
            if( NUMBER_OF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            NUMBER_OF186_tree = this.adaptor.create(NUMBER_OF186);
            this.adaptor.addChild(root_0, NUMBER_OF186_tree);
            }
            // IDP.g:2542:44: ( OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) ) )
            // IDP.g:2542:45: OCCURENCES_REGEXP ( (result1= ruleOneStringSimpleSelectionClause ) ) IN ( (result2= ruleStringClause ) )


            this.pushNextTokens(OCCURENCES_REGEXP,OCCURENCES_REGEXP,1);
            OCCURENCES_REGEXP187=this.match(this.input,OCCURENCES_REGEXP,IDPParser.FOLLOW_OCCURENCES_REGEXP_in_ruleNumericOccurencesRegexpFunction49091); if (this.state.failed) return retval;
            if( OCCURENCES_REGEXP !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            OCCURENCES_REGEXP187_tree = this.adaptor.create(OCCURENCES_REGEXP187);
            this.adaptor.addChild(root_0, OCCURENCES_REGEXP187_tree);
            }
            // IDP.g:2544:33: ( (result1= ruleOneStringSimpleSelectionClause ) )
            // IDP.g:2544:34: (result1= ruleOneStringSimpleSelectionClause )
            // IDP.g:2544:34: (result1= ruleOneStringSimpleSelectionClause )
            // IDP.g:2544:35: result1= ruleOneStringSimpleSelectionClause
            this.pushFollow(IDPParser.FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleNumericOccurencesRegexpFunction49164);
            this.ruleOneStringSimpleSelectionClause_DFAcall = false;

             if( typeof this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                result1=this.ruleOneStringSimpleSelectionClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	result1=this.ruleOneStringSimpleSelectionClause();

            	}
            	}
            else{
                result1=this.ruleOneStringSimpleSelectionClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, result1.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.params.push((result1!==null?result1.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }





            this.pushNextTokens(IN,IN,1);
            IN188=this.match(this.input,IN,IDPParser.FOLLOW_IN_in_ruleNumericOccurencesRegexpFunction49202); if (this.state.failed) return retval;
            if( IN !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            IN188_tree = this.adaptor.create(IN188);
            this.adaptor.addChild(root_0, IN188_tree);
            }
            // IDP.g:2546:33: ( (result2= ruleStringClause ) )
            // IDP.g:2546:34: (result2= ruleStringClause )
            // IDP.g:2546:34: (result2= ruleStringClause )
            // IDP.g:2546:35: result2= ruleStringClause
            this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_ruleNumericOccurencesRegexpFunction49243);
            this.ruleStringClause_DFAcall = false;

             if( typeof this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                result2=this.ruleStringClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericOccurencesRegexpFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	result2=this.ruleStringClause();

            	}
            	}
            else{
                result2=this.ruleStringClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, result2.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value.params.push((result2!==null?result2.value:null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }












            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericOccurencesRegexpFunction";
        }
        return retval;
    },

    // inline static return class
    ruleNumericSelectionClause_return: (function() {
        IDPParser.ruleNumericSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2557:1: ruleNumericSelectionClause returns [value] : arr= ruleNumericArithmeticArray ;
    // $ANTLR start "ruleNumericSelectionClause"
    ruleNumericSelectionClause: function() {
        this.currentRule = "ruleNumericSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var arr = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2560:16: (arr= ruleNumericArithmeticArray )
            // IDP.g:2560:25: arr= ruleNumericArithmeticArray
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericArithmeticArray_in_ruleNumericSelectionClause49367);
            this.ruleNumericArithmeticArray_DFAcall = false;

             if( typeof this.ruleNumericSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                arr=this.ruleNumericArithmeticArray();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	arr=this.ruleNumericArithmeticArray();

            	}
            	}
            else{
                arr=this.ruleNumericArithmeticArray();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arr.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((arr!==null?arr.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleNumericArithmeticArray_return: (function() {
        IDPParser.ruleNumericArithmeticArray_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericArithmeticArray_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2562:1: ruleNumericArithmeticArray returns [value] : (arithmeticMinusOper= ruleArithmeticMinus )? p= mexpr ( (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr )* ;
    // $ANTLR start "ruleNumericArithmeticArray"
    ruleNumericArithmeticArray: function() {
        this.currentRule = "ruleNumericArithmeticArray";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericArithmeticArray_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var arithmeticMinusOper = null;
         var p = null;
         var arithmeticPlusMinusOper = null;


        var arr = []; 
        try {
            // IDP.g:2566:16: ( (arithmeticMinusOper= ruleArithmeticMinus )? p= mexpr ( (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr )* )
            // IDP.g:2566:25: (arithmeticMinusOper= ruleArithmeticMinus )? p= mexpr ( (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr )*
            root_0 = this.adaptor.nil();

            // IDP.g:2566:25: (arithmeticMinusOper= ruleArithmeticMinus )?
            var alt202=2;

            var LA202_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA202_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA202_0==MINUS )) ) {
                var LA202_1 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred357_IDP()'.indexOf("synpred") !== -1) ||  this.synpred357_IDP()) ) {
                    alt202=1;
                }
            }
            switch (alt202) {
                case 1 :
                    // IDP.g:2566:26: arithmeticMinusOper= ruleArithmeticMinus
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMinus_in_ruleNumericArithmeticArray49511);
                    this.ruleArithmeticMinus_DFAcall = false;

                     if( typeof this.ruleNumericArithmeticArrayCurrentDecisionNumber !== 'undefined' && this.ruleNumericArithmeticArrayCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericArithmeticArrayCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA202 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticMinusOper=this.ruleArithmeticMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericArithmeticArrayCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticMinusOper=this.ruleArithmeticMinus();

                    	}
                    	}
                    else{
                        arithmeticMinusOper=this.ruleArithmeticMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticMinusOper.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push((arithmeticMinusOper!==null?arithmeticMinusOper.value:null));
                    }


                    break;

            }
            /*if(this.failedPredictDFA202 !== undefined && this.failedPredictDFA202)
            { 
                throw null;
            }*/

            this.pushFollow(IDPParser.FOLLOW_mexpr_in_ruleNumericArithmeticArray49521);
            this.mexpr_DFAcall = false;

             if( typeof this.ruleNumericArithmeticArrayCurrentDecisionNumber !== 'undefined' && this.ruleNumericArithmeticArrayCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericArithmeticArrayCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                p=this.mexpr();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericArithmeticArrayCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	p=this.mexpr();

            	}
            	}
            else{
                p=this.mexpr();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              arr.push.apply(arr, (p!==null?p.value:null));
            }
            // IDP.g:2566:153: ( (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr )*
            loop203:
            do {
                var alt203=2;
                var LA203_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA203_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA203_0==MINUS )) ) {
                    var LA203_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred358_IDP()'.indexOf("synpred") !== -1) ||  this.synpred358_IDP()) ) {
                        alt203=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA203_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA203_0==PLUS )) ) {
                    var LA203_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred358_IDP()'.indexOf("synpred") !== -1) ||  this.synpred358_IDP()) ) {
                        alt203=1;
                    }


                }


                switch (alt203) {
                case 1 :
                    // IDP.g:2566:154: (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr
                    // IDP.g:2566:154: (arithmeticPlusMinusOper= ruleArithmeticPlusMinus )
                    // IDP.g:2566:155: arithmeticPlusMinusOper= ruleArithmeticPlusMinus
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleNumericArithmeticArray49531);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleNumericArithmeticArrayCurrentDecisionNumber !== 'undefined' && this.ruleNumericArithmeticArrayCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericArithmeticArrayCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericArithmeticArrayCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticPlusMinusOper.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push((arithmeticPlusMinusOper!==null?arithmeticPlusMinusOper.value:null));
                    }



                    this.pushFollow(IDPParser.FOLLOW_mexpr_in_ruleNumericArithmeticArray49541);
                    this.mexpr_DFAcall = false;

                     if( typeof this.ruleNumericArithmeticArrayCurrentDecisionNumber !== 'undefined' && this.ruleNumericArithmeticArrayCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericArithmeticArrayCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA203 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        p=this.mexpr();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericArithmeticArrayCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	p=this.mexpr();

                    	}
                    	}
                    else{
                        p=this.mexpr();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push.apply(arr, (p!==null?p.value:null));
                    }


                    break;

                default :
                    break loop203;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = arr;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericArithmeticArray";
        }
        return retval;
    },

    // inline static return class
    mexpr_return: (function() {
        IDPParser.mexpr_return = function(){};
        org.antlr.lang.extend(IDPParser.mexpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2569:1: mexpr returns [value] : (a= atom ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )* ) ;
    // $ANTLR start "mexpr"
    mexpr: function() {
        this.currentRule = "mexpr";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.mexpr_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var a = null;
         var arithmeticMultDivOper = null;
         var b = null;


        var arr = []; var isMultDiv = false; var selectionClauseOutput = new this.entityModelLib.SelectionClause();
        try {
            // IDP.g:2572:16: ( (a= atom ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )* ) )
            // IDP.g:2573:18: (a= atom ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )* )
            root_0 = this.adaptor.nil();

            // IDP.g:2573:18: (a= atom ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )* )
            // IDP.g:2573:20: a= atom ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )*
            this.pushFollow(IDPParser.FOLLOW_atom_in_mexpr49676);
            this.atom_DFAcall = false;

             if( typeof this.mexprCurrentDecisionNumber !== 'undefined' && this.mexprCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.mexprCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                a=this.atom();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.mexprCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	a=this.atom();

            	}
            	}
            else{
                a=this.atom();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, a.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
               arr.push.apply(arr, (a!==null?a.value:null));
            }
            // IDP.g:2573:64: ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )*
            loop204:
            do {
                var alt204=2;
                var LA204_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MULT,MULT,1) && LA204_0==MULT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MULT,MULT,1) && LA204_0==MULT )) ) {
                    var LA204_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred359_IDP()'.indexOf("synpred") !== -1) ||  this.synpred359_IDP()) ) {
                        alt204=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DIV,DIV,1) && LA204_0==DIV )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DIV,DIV,1) && LA204_0==DIV )) ) {
                    var LA204_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred359_IDP()'.indexOf("synpred") !== -1) ||  this.synpred359_IDP()) ) {
                        alt204=1;
                    }


                }


                switch (alt204) {
                case 1 :
                    // IDP.g:2573:65: (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom
                    // IDP.g:2573:65: (arithmeticMultDivOper= ruleArithmeticMultDiv )
                    // IDP.g:2573:66: arithmeticMultDivOper= ruleArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_mexpr49688);
                    this.ruleArithmeticMultDiv_DFAcall = false;

                     if( typeof this.mexprCurrentDecisionNumber !== 'undefined' && this.mexprCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.mexprCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticMultDivOper=this.ruleArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.mexprCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticMultDivOper=this.ruleArithmeticMultDiv();

                    	}
                    	}
                    else{
                        arithmeticMultDivOper=this.ruleArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticMultDivOper.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push((arithmeticMultDivOper!==null?arithmeticMultDivOper.value:null));isMultDiv = true;
                    }



                    this.pushFollow(IDPParser.FOLLOW_atom_in_mexpr49697);
                    this.atom_DFAcall = false;

                     if( typeof this.mexprCurrentDecisionNumber !== 'undefined' && this.mexprCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.mexprCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA204 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        b=this.atom();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.mexprCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	b=this.atom();

                    	}
                    	}
                    else{
                        b=this.atom();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, b.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push.apply(arr, (b!==null?b.value:null));
                    }


                    break;

                default :
                    break loop204;
                }
            } while (true);







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              if (isMultDiv) {selectionClauseOutput.push(arr);   selectionClauseOutput.addCurrentProperty(this.parseModelLib.getModelManger().hasOwnProperty("isCurrent")? this.parseModelLib.getModelManger().isCurrent : false); arr = []; arr.push(selectionClauseOutput);} retval.value = arr;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "mexpr";
        }
        return retval;
    },

    // inline static return class
    atom_return: (function() {
        IDPParser.atom_return = function(){};
        org.antlr.lang.extend(IDPParser.atom_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2575:1: atom returns [value] : (num= ruleNumericBaseSelection | ( (l= LROUNDB ) exp= ruleNumericArithmeticArray r= RROUNDB ) );
    // $ANTLR start "atom"
    atom: function() {
        this.currentRule = "atom";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.atom_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var l = null;
        var r = null;
         var num = null;
         var exp = null;

        var l_tree=null;
        var r_tree=null;

        var arr = []; var selectionClauseOutput = new this.entityModelLib.SelectionClause();  
        try {
            // IDP.g:2578:12: (num= ruleNumericBaseSelection | ( (l= LROUNDB ) exp= ruleNumericArithmeticArray r= RROUNDB ) )
            var alt205=2;
            var LA205_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA205_0==TYPENUMBER )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA205_0>=COUNT_DISTINCT_OF && LA205_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA205_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA205_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA205_0==MINIMUM_OF )||( this.pushNextTokens(MINUS,MINUS,1) && LA205_0==MINUS )||(  this.pushNextTokens(ROUND,LOG,1) && LA205_0>=ROUND && LA205_0<=LOG )||(  this.pushNextTokens(ZERO_TO_ONE,INT,1) && LA205_0>=ZERO_TO_ONE && LA205_0<=INT )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA205_0==NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA205_0>=HIGHEST && LA205_0<=SUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBER,TYPENUMBER,1) && LA205_0==TYPENUMBER )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA205_0>=COUNT_DISTINCT_OF && LA205_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA205_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA205_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA205_0==MINIMUM_OF )||( this.pushNextTokens(MINUS,MINUS,1) && LA205_0==MINUS )||(  this.pushNextTokens(ROUND,LOG,1) && LA205_0>=ROUND && LA205_0<=LOG )||(  this.pushNextTokens(ZERO_TO_ONE,INT,1) && LA205_0>=ZERO_TO_ONE && LA205_0<=INT )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA205_0==NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA205_0>=HIGHEST && LA205_0<=SUM_OF )) ) {
                alt205=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA205_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA205_0==LROUNDB )) ) {
                alt205=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_205_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 205, 0, this.input);

                nvae_205_0.c = this.input.LA(1);
                throw nvae_205_0;
            }
            switch (alt205) {
                case 1 :
                    // IDP.g:2578:25: num= ruleNumericBaseSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_atom49822);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.atomCurrentDecisionNumber !== 'undefined' && this.atomCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.atomCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA205 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        num=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.atomCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	num=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        num=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, num.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      arr.push((num!==null?num.value:null));
                    }


                    break;
                case 2 :
                    // IDP.g:2579:13: ( (l= LROUNDB ) exp= ruleNumericArithmeticArray r= RROUNDB )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2579:13: ( (l= LROUNDB ) exp= ruleNumericArithmeticArray r= RROUNDB )
                    // IDP.g:2579:15: (l= LROUNDB ) exp= ruleNumericArithmeticArray r= RROUNDB
                    // IDP.g:2579:15: (l= LROUNDB )
                    // IDP.g:2579:16: l= LROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    l=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_atom49849); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    l_tree = this.adaptor.create(l);
                    this.adaptor.addChild(root_0, l_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var lbr = new this.entityModelLib.ArithmeticOperator((l?l.getText():null)); selectionClauseOutput.push(lbr);
                    }



                    this.pushFollow(IDPParser.FOLLOW_ruleNumericArithmeticArray_in_atom49858);
                    this.ruleNumericArithmeticArray_DFAcall = false;

                     if( typeof this.atomCurrentDecisionNumber !== 'undefined' && this.atomCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.atomCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        exp=this.ruleNumericArithmeticArray();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.atomCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	exp=this.ruleNumericArithmeticArray();

                    	}
                    	}
                    else{
                        exp=this.ruleNumericArithmeticArray();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, exp.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionClauseOutput.push((exp!==null?exp.value:null));   selectionClauseOutput.addCurrentProperty(this.parseModelLib.getModelManger().hasOwnProperty("isCurrent")? this.parseModelLib.getModelManger().isCurrent : false); arr.push(selectionClauseOutput);
                    }


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    r=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_atom49868); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    r_tree = this.adaptor.create(r);
                    this.adaptor.addChild(root_0, r_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      var rbr = new this.entityModelLib.ArithmeticOperator((r?r.getText():null)); selectionClauseOutput.push(rbr);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = arr; 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "atom";
        }
        return retval;
    },

    // inline static return class
    ruleNumericClause_return: (function() {
        IDPParser.ruleNumericClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2582:1: ruleNumericClause returns [value] : (selectionClauseOutput= ruleNumericSelectionClause | LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleNumericClause"
    ruleNumericClause: function() {
        this.currentRule = "ruleNumericClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB189 = null;
        var RROUNDB190 = null;
         var selectionClauseOutput = null;

        var LROUNDB189_tree=null;
        var RROUNDB190_tree=null;

        try {
            // IDP.g:2583:17: ( (selectionClauseOutput= ruleNumericSelectionClause | LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB ) )
            // IDP.g:2583:33: (selectionClauseOutput= ruleNumericSelectionClause | LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2583:33: (selectionClauseOutput= ruleNumericSelectionClause | LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB )
            var alt206=2;

            this.ruleNumericClause_DFAcall=(typeof this.ruleNumericClause_DFAcall === 'undefined' ? false: this.ruleNumericClause_DFAcall); // only valid for synpred
            if(this.ruleNumericClause_DFAcall === false /*&& !this.failedPredictDFA206*/)
            {   
                this.dfa206NumberOfAlt = alt206;
                this.dfa206InRule = "ruleNumericClause";
            	this.dfa206Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleNumericClauseCurrentDecisionNumber  = 206; 
                alt206 = this.dfa206.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt206 === 0 || alt206 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 206);
            		return retval;
                }
            }	
            else
                alt206 = this.dfa206AltNumber;	
            switch (alt206) {
                case 1 :
                    // IDP.g:2583:34: selectionClauseOutput= ruleNumericSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleNumericClause49941);
                    this.ruleNumericSelectionClause_DFAcall = false;

                     if( typeof this.ruleNumericClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA206 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleNumericSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleNumericSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleNumericSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2584:35: LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB189=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericClause49977); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB189_tree = this.adaptor.create(LROUNDB189);
                    this.adaptor.addChild(root_0, LROUNDB189_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_ruleNumericClause49983);
                    this.ruleNumericSelectionClause_DFAcall = false;

                     if( typeof this.ruleNumericClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA206 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleNumericSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleNumericSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleNumericSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB190=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericClause49985); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB190_tree = this.adaptor.create(RROUNDB190);
                    this.adaptor.addChild(root_0, RROUNDB190_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA206 !== undefined && this.failedPredictDFA206)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericClause";
        }
        return retval;
    },

    // inline static return class
    ruleNumericStatement_return: (function() {
        IDPParser.ruleNumericStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2588:1: ruleNumericStatement returns [value] : selectionLeftOutput= ruleNumericClause ;
    // $ANTLR start "ruleNumericStatement"
    ruleNumericStatement: function() {
        this.currentRule = "ruleNumericStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:2591:17: (selectionLeftOutput= ruleNumericClause )
            // IDP.g:2591:33: selectionLeftOutput= ruleNumericClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericStatement50161);
            this.ruleNumericClause_DFAcall = false;

             if( typeof this.ruleNumericStatementCurrentDecisionNumber !== 'undefined' && this.ruleNumericStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleNumericClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleNumericClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleNumericClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericStatement";
        }
        return retval;
    },

    // inline static return class
    ruleArithmetic_return: (function() {
        IDPParser.ruleArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2593:1: ruleArithmetic returns [value] : arithmeticOperatorOutput= ( PLUS | MINUS | MULT | DIV ) ;
    // $ANTLR start "ruleArithmetic"
    ruleArithmetic: function() {
        this.currentRule = "ruleArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperatorOutput = null;

        var arithmeticOperatorOutput_tree=null;

        try {
            // IDP.g:2594:9: (arithmeticOperatorOutput= ( PLUS | MINUS | MULT | DIV ) )
            // IDP.g:2594:17: arithmeticOperatorOutput= ( PLUS | MINUS | MULT | DIV )
            root_0 = this.adaptor.nil();

            arithmeticOperatorOutput=this.input.LT(1);
            if ( (this.pushNextTokens(MINUS,MINUS,1) && this.input.LA(1)==MINUS )||(this.pushNextTokens(PLUS,PLUS,1) && this.input.LA(1)==PLUS )||(  this.pushNextTokens(MULT,DIV,1) && this.input.LA(1)>=MULT && this.input.LA(1)<=DIV ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(arithmeticOperatorOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_arithmeticOperatorOutput_50280 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_arithmeticOperatorOutput_50280;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.ArithmeticOperator((arithmeticOperatorOutput?arithmeticOperatorOutput.getText():null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleArithmeticPlusMinus_return: (function() {
        IDPParser.ruleArithmeticPlusMinus_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleArithmeticPlusMinus_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2596:1: ruleArithmeticPlusMinus returns [value] : arithmeticOperatorOutput= ( PLUS | MINUS ) ;
    // $ANTLR start "ruleArithmeticPlusMinus"
    ruleArithmeticPlusMinus: function() {
        this.currentRule = "ruleArithmeticPlusMinus";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleArithmeticPlusMinus_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperatorOutput = null;

        var arithmeticOperatorOutput_tree=null;

        try {
            // IDP.g:2597:9: (arithmeticOperatorOutput= ( PLUS | MINUS ) )
            // IDP.g:2597:17: arithmeticOperatorOutput= ( PLUS | MINUS )
            root_0 = this.adaptor.nil();

            arithmeticOperatorOutput=this.input.LT(1);
            if ( (this.pushNextTokens(MINUS,MINUS,1) && this.input.LA(1)==MINUS )||(this.pushNextTokens(PLUS,PLUS,1) && this.input.LA(1)==PLUS ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(arithmeticOperatorOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_arithmeticOperatorOutput_50351 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_arithmeticOperatorOutput_50351;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.ArithmeticOperator((arithmeticOperatorOutput?arithmeticOperatorOutput.getText():null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleArithmeticPlusMinus";
        }
        return retval;
    },

    // inline static return class
    ruleArithmeticMinus_return: (function() {
        IDPParser.ruleArithmeticMinus_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleArithmeticMinus_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2599:1: ruleArithmeticMinus returns [value] : arithmeticOperatorOutput= MINUS ;
    // $ANTLR start "ruleArithmeticMinus"
    ruleArithmeticMinus: function() {
        this.currentRule = "ruleArithmeticMinus";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleArithmeticMinus_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperatorOutput = null;

        var arithmeticOperatorOutput_tree=null;

        try {
            // IDP.g:2600:9: (arithmeticOperatorOutput= MINUS )
            // IDP.g:2600:17: arithmeticOperatorOutput= MINUS
            root_0 = this.adaptor.nil();



            this.pushNextTokens(MINUS,MINUS,1);
            arithmeticOperatorOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_ruleArithmeticMinus50406); if (this.state.failed) return retval;
            if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            arithmeticOperatorOutput_tree = this.adaptor.create(arithmeticOperatorOutput);
            this.adaptor.addChild(root_0, arithmeticOperatorOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.ArithmeticOperator((arithmeticOperatorOutput?arithmeticOperatorOutput.getText():null)); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleArithmeticMinus";
        }
        return retval;
    },

    // inline static return class
    ruleArithmeticMultDiv_return: (function() {
        IDPParser.ruleArithmeticMultDiv_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleArithmeticMultDiv_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2602:1: ruleArithmeticMultDiv returns [value] : arithmeticOperatorOutput= ( MULT | DIV ) ;
    // $ANTLR start "ruleArithmeticMultDiv"
    ruleArithmeticMultDiv: function() {
        this.currentRule = "ruleArithmeticMultDiv";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleArithmeticMultDiv_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperatorOutput = null;

        var arithmeticOperatorOutput_tree=null;

        try {
            // IDP.g:2603:9: (arithmeticOperatorOutput= ( MULT | DIV ) )
            // IDP.g:2603:17: arithmeticOperatorOutput= ( MULT | DIV )
            root_0 = this.adaptor.nil();

            arithmeticOperatorOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(MULT,DIV,1) && this.input.LA(1)>=MULT && this.input.LA(1)<=DIV ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(arithmeticOperatorOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_arithmeticOperatorOutput_50449 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_arithmeticOperatorOutput_50449;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.ArithmeticOperator((arithmeticOperatorOutput?arithmeticOperatorOutput.getText():null));this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleArithmeticMultDiv";
        }
        return retval;
    },

    // inline static return class
    ruleArithmeticMult_return: (function() {
        IDPParser.ruleArithmeticMult_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleArithmeticMult_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2605:1: ruleArithmeticMult returns [value] : arithmeticOperatorOutput= MULT ;
    // $ANTLR start "ruleArithmeticMult"
    ruleArithmeticMult: function() {
        this.currentRule = "ruleArithmeticMult";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleArithmeticMult_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var arithmeticOperatorOutput = null;

        var arithmeticOperatorOutput_tree=null;

        try {
            // IDP.g:2606:9: (arithmeticOperatorOutput= MULT )
            // IDP.g:2606:17: arithmeticOperatorOutput= MULT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(MULT,MULT,1);
            arithmeticOperatorOutput=this.match(this.input,MULT,IDPParser.FOLLOW_MULT_in_ruleArithmeticMult50513); if (this.state.failed) return retval;
            if( MULT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            arithmeticOperatorOutput_tree = this.adaptor.create(arithmeticOperatorOutput);
            this.adaptor.addChild(root_0, arithmeticOperatorOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.ArithmeticOperator((arithmeticOperatorOutput?arithmeticOperatorOutput.getText():null));this.parseModelLib.getModelManger().cleanValueListAttribute();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleArithmeticMult";
        }
        return retval;
    },

    // inline static return class
    ruleNumericSetOfValues_return: (function() {
        IDPParser.ruleNumericSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2609:1: ruleNumericSetOfValues returns [value] : LROUNDB ( (numberOutput= ruleNumericCollectionSelectionClause ) | (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* ) ) RROUNDB ;
    // $ANTLR start "ruleNumericSetOfValues"
    ruleNumericSetOfValues: function() {
        this.currentRule = "ruleNumericSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB191 = null;
        var SEMICOLON192 = null;
        var RROUNDB193 = null;
         var numberOutput = null;

        var LROUNDB191_tree=null;
        var SEMICOLON192_tree=null;
        var RROUNDB193_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                                        retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value);
                                        
        try {
            // IDP.g:2613:9: ( LROUNDB ( (numberOutput= ruleNumericCollectionSelectionClause ) | (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* ) ) RROUNDB )
            // IDP.g:2613:17: LROUNDB ( (numberOutput= ruleNumericCollectionSelectionClause ) | (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB191=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericSetOfValues50634); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB191_tree = this.adaptor.create(LROUNDB191);
            this.adaptor.addChild(root_0, LROUNDB191_tree);
            }
            // IDP.g:2613:25: ( (numberOutput= ruleNumericCollectionSelectionClause ) | (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* ) )
            var alt208=2;

            this.ruleNumericSetOfValues_DFAcall=(typeof this.ruleNumericSetOfValues_DFAcall === 'undefined' ? false: this.ruleNumericSetOfValues_DFAcall); // only valid for synpred
            if(this.ruleNumericSetOfValues_DFAcall === false /*&& !this.failedPredictDFA208*/)
            {   
                this.dfa208NumberOfAlt = alt208;
                this.dfa208InRule = "ruleNumericSetOfValues";
            	this.dfa208Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleNumericSetOfValuesCurrentDecisionNumber  = 208; 
                alt208 = this.dfa208.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt208 === 0 || alt208 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 208);
            		return retval;
                }
            }	
            else
                alt208 = this.dfa208AltNumber;	
            switch (alt208) {
                case 1 :
                    // IDP.g:2613:26: (numberOutput= ruleNumericCollectionSelectionClause )
                    // IDP.g:2613:26: (numberOutput= ruleNumericCollectionSelectionClause )
                    // IDP.g:2613:27: numberOutput= ruleNumericCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionSelectionClause_in_ruleNumericSetOfValues50642);
                    this.ruleNumericCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleNumericSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleNumericSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleNumericCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleNumericCollectionSelectionClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleNumericCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }





                    break;
                case 2 :
                    // IDP.g:2614:13: (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* )
                    // IDP.g:2614:13: (numberOutput= ruleNumericClause )
                    // IDP.g:2614:14: numberOutput= ruleNumericClause
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericSetOfValues50666);
                    this.ruleNumericClause_DFAcall = false;

                     if( typeof this.ruleNumericSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleNumericSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleNumericClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleNumericClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleNumericClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }



                    // IDP.g:2615:17: ( ( SEMICOLON numberOutput= ruleNumericClause )* )
                    // IDP.g:2615:18: ( SEMICOLON numberOutput= ruleNumericClause )*
                    // IDP.g:2615:18: ( SEMICOLON numberOutput= ruleNumericClause )*
                    loop207:
                    do {
                        var alt207=2;
                        var LA207_0 = this.input.LA(1);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA207_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA207_0==SEMICOLON )) ) {
                            alt207=1;
                        }


                        switch (alt207) {
                        case 1 :
                            // IDP.g:2615:19: SEMICOLON numberOutput= ruleNumericClause


                            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                            SEMICOLON192=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleNumericSetOfValues50690); if (this.state.failed) return retval;
                            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            SEMICOLON192_tree = this.adaptor.create(SEMICOLON192);
                            this.adaptor.addChild(root_0, SEMICOLON192_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_ruleNumericSetOfValues50696);
                            this.ruleNumericClause_DFAcall = false;

                             if( typeof this.ruleNumericSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleNumericSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA207 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                numberOutput=this.ruleNumericClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	numberOutput=this.ruleNumericClause();

                            	}
                            	}
                            else{
                                numberOutput=this.ruleNumericClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              retval.value.push((numberOutput!==null?numberOutput.value:null));
                            }


                            break;

                        default :
                            break loop207;
                        }
                    } while (true);






                    break;

            }
            /*if(this.failedPredictDFA208 !== undefined && this.failedPredictDFA208)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB193=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericSetOfValues50723); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB193_tree = this.adaptor.create(RROUNDB193);
            this.adaptor.addChild(root_0, RROUNDB193_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleNumericCollectionSelectionClause_return: (function() {
        IDPParser.ruleNumericCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2619:1: ruleNumericCollectionSelectionClause returns [value] : selction= ruleNumericCollection ;
    // $ANTLR start "ruleNumericCollectionSelectionClause"
    ruleNumericCollectionSelectionClause: function() {
        this.currentRule = "ruleNumericCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2622:17: (selction= ruleNumericCollection )
            // IDP.g:2622:33: selction= ruleNumericCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleNumericCollection_in_ruleNumericCollectionSelectionClause50898);
            this.ruleNumericCollection_DFAcall = false;

             if( typeof this.ruleNumericCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleNumericCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleNumericCollection();

            	}
            	}
            else{
                selction=this.ruleNumericCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    numericAggregationOption_return: (function() {
        IDPParser.numericAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.numericAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2629:1: numericAggregationOption returns [value] : ( (aggregationOutput= avgNumberAggregationOption ) | (aggregationOutput= sumNumberAggregationOption ) | aggregationOutput= maxNumberAggregationOption | (aggregationOutput= minNumberAggregationOption ) ) ;
    // $ANTLR start "numericAggregationOption"
    numericAggregationOption: function() {
        this.currentRule = "numericAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.numericAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var aggregationOutput = null;


         var operatorArgs = {}; var origVal = ""; var fixedVal = ""; 
        try {
            // IDP.g:2632:17: ( ( (aggregationOutput= avgNumberAggregationOption ) | (aggregationOutput= sumNumberAggregationOption ) | aggregationOutput= maxNumberAggregationOption | (aggregationOutput= minNumberAggregationOption ) ) )
            // IDP.g:2632:33: ( (aggregationOutput= avgNumberAggregationOption ) | (aggregationOutput= sumNumberAggregationOption ) | aggregationOutput= maxNumberAggregationOption | (aggregationOutput= minNumberAggregationOption ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2632:33: ( (aggregationOutput= avgNumberAggregationOption ) | (aggregationOutput= sumNumberAggregationOption ) | aggregationOutput= maxNumberAggregationOption | (aggregationOutput= minNumberAggregationOption ) )
            var alt209=4;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case AVERAGE_OF:
                alt209=1;   
                break;
            case SUM_OF:
                alt209=2;   
                break;
            case MAXIMUM_OF:
            case HIGHEST:
                alt209=3;   
                break;
            case MINIMUM_OF:
            case LOWEST:
                alt209=4;   
                break;
            default:
            this.pushApplyTokens([AVERAGE_OF,SUM_OF,MAXIMUM_OF,HIGHEST,MINIMUM_OF,LOWEST]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_209 =
            			new org.antlr.runtime.NoViableAltException(null, 209, 0, this.input);

                nvae_209.c = this.input.LA(1);
                throw nvae_209;
            }

            switch (alt209) {
                case 1 :
                    // IDP.g:2632:34: (aggregationOutput= avgNumberAggregationOption )
                    // IDP.g:2632:34: (aggregationOutput= avgNumberAggregationOption )
                    // IDP.g:2632:35: aggregationOutput= avgNumberAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_avgNumberAggregationOption_in_numericAggregationOption51090);
                    this.avgNumberAggregationOption_DFAcall = false;

                     if( typeof this.numericAggregationOptionCurrentDecisionNumber !== 'undefined' && this.numericAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.numericAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOutput=this.avgNumberAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.numericAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOutput=this.avgNumberAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOutput=this.avgNumberAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal = "avg";
                    }





                    break;
                case 2 :
                    // IDP.g:2633:35: (aggregationOutput= sumNumberAggregationOption )
                    // IDP.g:2633:35: (aggregationOutput= sumNumberAggregationOption )
                    // IDP.g:2633:37: aggregationOutput= sumNumberAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_sumNumberAggregationOption_in_numericAggregationOption51137);
                    this.sumNumberAggregationOption_DFAcall = false;

                     if( typeof this.numericAggregationOptionCurrentDecisionNumber !== 'undefined' && this.numericAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.numericAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOutput=this.sumNumberAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.numericAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOutput=this.sumNumberAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOutput=this.sumNumberAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal = "sum";
                    }





                    break;
                case 3 :
                    // IDP.g:2634:34: aggregationOutput= maxNumberAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_maxNumberAggregationOption_in_numericAggregationOption51182);
                    this.maxNumberAggregationOption_DFAcall = false;

                     if( typeof this.numericAggregationOptionCurrentDecisionNumber !== 'undefined' && this.numericAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.numericAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA209 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOutput=this.maxNumberAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.numericAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOutput=this.maxNumberAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOutput=this.maxNumberAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal = "max";
                    }


                    break;
                case 4 :
                    // IDP.g:2635:34: (aggregationOutput= minNumberAggregationOption )
                    // IDP.g:2635:34: (aggregationOutput= minNumberAggregationOption )
                    // IDP.g:2635:36: aggregationOutput= minNumberAggregationOption
                    this.pushFollow(IDPParser.FOLLOW_minNumberAggregationOption_in_numericAggregationOption51228);
                    this.minNumberAggregationOption_DFAcall = false;

                     if( typeof this.numericAggregationOptionCurrentDecisionNumber !== 'undefined' && this.numericAggregationOptionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.numericAggregationOptionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOutput=this.minNumberAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.numericAggregationOptionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOutput=this.minNumberAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOutput=this.minNumberAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      fixedVal = "min";
                    }





                    break;

            }
            /*if(this.failedPredictDFA209 !== undefined && this.failedPredictDFA209)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              origVal = (aggregationOutput?this.input.toString(aggregationOutput.start,aggregationOutput.stop):null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.originalValue = origVal; operatorArgs.value = fixedVal; retval.value = new this.entityModelLib.OperatorOption(operatorArgs);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "numericAggregationOption";
        }
        return retval;
    },

    // inline static return class
    maxNumberAggregationOption_return: (function() {
        IDPParser.maxNumberAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.maxNumberAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2640:1: maxNumberAggregationOption returns [value] : ( ( HIGHEST ( OF )? ) | MAXIMUM_OF );
    // $ANTLR start "maxNumberAggregationOption"
    maxNumberAggregationOption: function() {
        this.currentRule = "maxNumberAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.maxNumberAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var HIGHEST194 = null;
        var OF195 = null;
        var MAXIMUM_OF196 = null;

        var HIGHEST194_tree=null;
        var OF195_tree=null;
        var MAXIMUM_OF196_tree=null;

        try {
            // IDP.g:2641:25: ( ( HIGHEST ( OF )? ) | MAXIMUM_OF )
            var alt211=2;
            var LA211_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(HIGHEST,HIGHEST,1) && LA211_0==HIGHEST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(HIGHEST,HIGHEST,1) && LA211_0==HIGHEST )) ) {
                alt211=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA211_0==MAXIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA211_0==MAXIMUM_OF )) ) {
                alt211=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_211_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 211, 0, this.input);

                nvae_211_0.c = this.input.LA(1);
                throw nvae_211_0;
            }
            switch (alt211) {
                case 1 :
                    // IDP.g:2641:49: ( HIGHEST ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2641:49: ( HIGHEST ( OF )? )
                    // IDP.g:2641:50: HIGHEST ( OF )?


                    this.pushNextTokens(HIGHEST,HIGHEST,1);
                    HIGHEST194=this.match(this.input,HIGHEST,IDPParser.FOLLOW_HIGHEST_in_maxNumberAggregationOption51354); if (this.state.failed) return retval;
                    if( HIGHEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    HIGHEST194_tree = this.adaptor.create(HIGHEST194);
                    this.adaptor.addChild(root_0, HIGHEST194_tree);
                    }
                    // IDP.g:2641:58: ( OF )?
                    var alt210=2;

                    var LA210_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA210_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA210_0==OF )) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF195=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_maxNumberAggregationOption51356); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF195_tree = this.adaptor.create(OF195);
                            this.adaptor.addChild(root_0, OF195_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA210 !== undefined && this.failedPredictDFA210)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:2641:65: MAXIMUM_OF
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1);
                    MAXIMUM_OF196=this.match(this.input,MAXIMUM_OF,IDPParser.FOLLOW_MAXIMUM_OF_in_maxNumberAggregationOption51362); if (this.state.failed) return retval;
                    if( MAXIMUM_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    MAXIMUM_OF196_tree = this.adaptor.create(MAXIMUM_OF196);
                    this.adaptor.addChild(root_0, MAXIMUM_OF196_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "maxNumberAggregationOption";
        }
        return retval;
    },

    // inline static return class
    minNumberAggregationOption_return: (function() {
        IDPParser.minNumberAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.minNumberAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2642:1: minNumberAggregationOption returns [value] : ( ( LOWEST ( OF )? ) | MINIMUM_OF );
    // $ANTLR start "minNumberAggregationOption"
    minNumberAggregationOption: function() {
        this.currentRule = "minNumberAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.minNumberAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LOWEST197 = null;
        var OF198 = null;
        var MINIMUM_OF199 = null;

        var LOWEST197_tree=null;
        var OF198_tree=null;
        var MINIMUM_OF199_tree=null;

        try {
            // IDP.g:2643:25: ( ( LOWEST ( OF )? ) | MINIMUM_OF )
            var alt213=2;
            var LA213_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LOWEST,LOWEST,1) && LA213_0==LOWEST )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LOWEST,LOWEST,1) && LA213_0==LOWEST )) ) {
                alt213=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA213_0==MINIMUM_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA213_0==MINIMUM_OF )) ) {
                alt213=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_213_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 213, 0, this.input);

                nvae_213_0.c = this.input.LA(1);
                throw nvae_213_0;
            }
            switch (alt213) {
                case 1 :
                    // IDP.g:2643:49: ( LOWEST ( OF )? )
                    root_0 = this.adaptor.nil();

                    // IDP.g:2643:49: ( LOWEST ( OF )? )
                    // IDP.g:2643:50: LOWEST ( OF )?


                    this.pushNextTokens(LOWEST,LOWEST,1);
                    LOWEST197=this.match(this.input,LOWEST,IDPParser.FOLLOW_LOWEST_in_minNumberAggregationOption51427); if (this.state.failed) return retval;
                    if( LOWEST !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LOWEST197_tree = this.adaptor.create(LOWEST197);
                    this.adaptor.addChild(root_0, LOWEST197_tree);
                    }
                    // IDP.g:2643:57: ( OF )?
                    var alt212=2;

                    var LA212_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA212_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA212_0==OF )) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // IDP.g:0:0: OF


                            this.pushNextTokens(OF,OF,1);
                            OF198=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_minNumberAggregationOption51429); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF198_tree = this.adaptor.create(OF198);
                            this.adaptor.addChild(root_0, OF198_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA212 !== undefined && this.failedPredictDFA212)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:2643:63: MINIMUM_OF
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1);
                    MINIMUM_OF199=this.match(this.input,MINIMUM_OF,IDPParser.FOLLOW_MINIMUM_OF_in_minNumberAggregationOption51434); if (this.state.failed) return retval;
                    if( MINIMUM_OF !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    MINIMUM_OF199_tree = this.adaptor.create(MINIMUM_OF199);
                    this.adaptor.addChild(root_0, MINIMUM_OF199_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "minNumberAggregationOption";
        }
        return retval;
    },

    // inline static return class
    avgNumberAggregationOption_return: (function() {
        IDPParser.avgNumberAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.avgNumberAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2644:1: avgNumberAggregationOption returns [value] : AVERAGE_OF ;
    // $ANTLR start "avgNumberAggregationOption"
    avgNumberAggregationOption: function() {
        this.currentRule = "avgNumberAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.avgNumberAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var AVERAGE_OF200 = null;

        var AVERAGE_OF200_tree=null;

        try {
            // IDP.g:2646:25: ( AVERAGE_OF )
            // IDP.g:2646:49: AVERAGE_OF
            root_0 = this.adaptor.nil();



            this.pushNextTokens(AVERAGE_OF,AVERAGE_OF,1);
            AVERAGE_OF200=this.match(this.input,AVERAGE_OF,IDPParser.FOLLOW_AVERAGE_OF_in_avgNumberAggregationOption51494); if (this.state.failed) return retval;
            if( AVERAGE_OF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            AVERAGE_OF200_tree = this.adaptor.create(AVERAGE_OF200);
            this.adaptor.addChild(root_0, AVERAGE_OF200_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "avgNumberAggregationOption";
        }
        return retval;
    },

    // inline static return class
    sumNumberAggregationOption_return: (function() {
        IDPParser.sumNumberAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.sumNumberAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2647:1: sumNumberAggregationOption returns [value] : SUM_OF ;
    // $ANTLR start "sumNumberAggregationOption"
    sumNumberAggregationOption: function() {
        this.currentRule = "sumNumberAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.sumNumberAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var SUM_OF201 = null;

        var SUM_OF201_tree=null;

        try {
            // IDP.g:2648:25: ( SUM_OF )
            // IDP.g:2648:49: SUM_OF
            root_0 = this.adaptor.nil();



            this.pushNextTokens(SUM_OF,SUM_OF,1);
            SUM_OF201=this.match(this.input,SUM_OF,IDPParser.FOLLOW_SUM_OF_in_sumNumberAggregationOption51561); if (this.state.failed) return retval;
            if( SUM_OF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            SUM_OF201_tree = this.adaptor.create(SUM_OF201);
            this.adaptor.addChild(root_0, SUM_OF201_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "sumNumberAggregationOption";
        }
        return retval;
    },

    // inline static return class
    ruleNumericAggregationFunction_return: (function() {
        IDPParser.ruleNumericAggregationFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericAggregationFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2662:1: ruleNumericAggregationFunction returns [value] : ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleNumericCollection | LROUNDB compoundSelectionOutput= ruleNumericCollection RROUNDB ) ;
    // $ANTLR start "ruleNumericAggregationFunction"
    ruleNumericAggregationFunction: function() {
        this.currentRule = "ruleNumericAggregationFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericAggregationFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB202 = null;
        var RROUNDB203 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB202_tree=null;
        var RROUNDB203_tree=null;

        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                        
        try {
            // IDP.g:2667:17: ( ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleNumericCollection | LROUNDB compoundSelectionOutput= ruleNumericCollection RROUNDB ) )
            // IDP.g:2667:33: ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleNumericCollection | LROUNDB compoundSelectionOutput= ruleNumericCollection RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2667:33: ( (aggregationOptionOutput= numericAggregationOption ) )
            // IDP.g:2667:34: (aggregationOptionOutput= numericAggregationOption )
            // IDP.g:2667:34: (aggregationOptionOutput= numericAggregationOption )
            // IDP.g:2667:35: aggregationOptionOutput= numericAggregationOption
            this.pushFollow(IDPParser.FOLLOW_numericAggregationOption_in_ruleNumericAggregationFunction51993);
            this.numericAggregationOption_DFAcall = false;

             if( typeof this.ruleNumericAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAggregationFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericAggregationFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.numericAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAggregationFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.numericAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.numericAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);retval.value = new this.entityModelLib.CompoundSelection(ruleOutput); 
            }



            // IDP.g:2668:34: (compoundSelectionOutput= ruleNumericCollection | LROUNDB compoundSelectionOutput= ruleNumericCollection RROUNDB )
            var alt214=2;

            var LA214_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA214_0>=COUNT_DISTINCT_OF && LA214_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA214_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA214_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA214_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA214_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA214_0>=ZERO_OR_ONE && LA214_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA214_0>=INT && LA214_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA214_0>=HIGHEST && LA214_0<=SUM_OF )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA214_0>=COUNT_DISTINCT_OF && LA214_0<=COUNT_OF )||( this.pushNextTokens(CURRENT,CURRENT,1) && LA214_0==CURRENT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA214_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA214_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA214_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA214_0>=ZERO_OR_ONE && LA214_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA214_0>=INT && LA214_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA214_0>=HIGHEST && LA214_0<=SUM_OF )) ) {
                alt214=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA214_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA214_0==LROUNDB )) ) {
                alt214=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_214_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 214, 0, this.input);

                nvae_214_0.c = this.input.LA(1);
                throw nvae_214_0;
            }
            switch (alt214) {
                case 1 :
                    // IDP.g:2668:36: compoundSelectionOutput= ruleNumericCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericCollection_in_ruleNumericAggregationFunction52043);
                    this.ruleNumericCollection_DFAcall = false;

                     if( typeof this.ruleNumericAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA214 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2668:86: LROUNDB compoundSelectionOutput= ruleNumericCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB202=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericAggregationFunction52047); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB202_tree = this.adaptor.create(LROUNDB202);
                    this.adaptor.addChild(root_0, LROUNDB202_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericCollection_in_ruleNumericAggregationFunction52053);
                    this.ruleNumericCollection_DFAcall = false;

                     if( typeof this.ruleNumericAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleNumericAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA214 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB203=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericAggregationFunction52055); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB203_tree = this.adaptor.create(RROUNDB203);
                    this.adaptor.addChild(root_0, RROUNDB203_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA214 !== undefined && this.failedPredictDFA214)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);if(ruleOutput.aggregationOption.isNoneValuelistAggOperator()){this.parseModelLib.getModelManger().cleanValueListAttribute();}
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericAggregationFunction";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleNumericGroupOfAggregation_return: (function() {
        IDPParser.ruleNumericGroupOfAggregation_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericGroupOfAggregation_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2675:1: ruleNumericGroupOfAggregation returns [value] : ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) ) ) gbc= groupByClause ;
    // $ANTLR start "ruleNumericGroupOfAggregation"
    ruleNumericGroupOfAggregation: function() {
        this.currentRule = "ruleNumericGroupOfAggregation";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericGroupOfAggregation_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB204 = null;
        var RROUNDB205 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;
         var gbc = null;

        var LROUNDB204_tree=null;
        var RROUNDB205_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                        
        try {
            // IDP.g:2680:17: ( ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) ) ) gbc= groupByClause )
            // IDP.g:2680:33: ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) ) ) gbc= groupByClause
            root_0 = this.adaptor.nil();

            // IDP.g:2680:33: ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) ) )
            // IDP.g:2681:49: (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) )
            // IDP.g:2681:49: (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB ) )
            // IDP.g:2681:50: aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB )
            this.pushFollow(IDPParser.FOLLOW_numericAggregationOption_in_ruleNumericGroupOfAggregation52253);
            this.numericAggregationOption_DFAcall = false;

             if( typeof this.ruleNumericGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfAggregationCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericGroupOfAggregationCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.numericAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfAggregationCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.numericAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.numericAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
            // IDP.g:2681:101: (compoundSelectionOutput= ruleNumericBaseCollection | LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB )
            var alt215=2;

            var LA215_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA215_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA215_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA215_0>=ZERO_OR_ONE && LA215_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,TYPENUMBERCOLLECTION,1) && LA215_0>=INT && LA215_0<=TYPENUMBERCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA215_0==CURRENT )||( this.pushNextTokens(ALL,ALL,1) && LA215_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA215_0>=ZERO_OR_ONE && LA215_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,TYPENUMBERCOLLECTION,1) && LA215_0>=INT && LA215_0<=TYPENUMBERCOLLECTION )) ) {
                alt215=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA215_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA215_0==LROUNDB )) ) {
                alt215=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_215_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 215, 0, this.input);

                nvae_215_0.c = this.input.LA(1);
                throw nvae_215_0;
            }
            switch (alt215) {
                case 1 :
                    // IDP.g:2681:103: compoundSelectionOutput= ruleNumericBaseCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseCollection_in_ruleNumericGroupOfAggregation52261);
                    this.ruleNumericBaseCollection_DFAcall = false;

                     if( typeof this.ruleNumericGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfAggregationCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericGroupOfAggregationCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA215 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfAggregationCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericBaseCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2681:157: LROUNDB compoundSelectionOutput= ruleNumericBaseCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB204=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericGroupOfAggregation52265); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB204_tree = this.adaptor.create(LROUNDB204);
                    this.adaptor.addChild(root_0, LROUNDB204_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseCollection_in_ruleNumericGroupOfAggregation52271);
                    this.ruleNumericBaseCollection_DFAcall = false;

                     if( typeof this.ruleNumericGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfAggregationCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericGroupOfAggregationCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA215 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfAggregationCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericBaseCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB205=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericGroupOfAggregation52273); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB205_tree = this.adaptor.create(RROUNDB205);
                    this.adaptor.addChild(root_0, RROUNDB205_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA215 !== undefined && this.failedPredictDFA215)
            { 
                throw null;
            }*/







            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }
            this.pushFollow(IDPParser.FOLLOW_groupByClause_in_ruleNumericGroupOfAggregation52386);
            this.groupByClause_DFAcall = false;

             if( typeof this.ruleNumericGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfAggregationCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericGroupOfAggregationCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                gbc=this.groupByClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfAggregationCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	gbc=this.groupByClause();

            	}
            	}
            else{
                gbc=this.groupByClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, gbc.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.groupByArray = (gbc!==null?gbc.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs); retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericGroupOfAggregation";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleCount_return: (function() {
        IDPParser.ruleCount_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCount_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2693:1: ruleCount returns [value] : ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) ) ;
    // $ANTLR start "ruleCount"
    ruleCount: function() {
        this.currentRule = "ruleCount";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCount_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB206 = null;
        var RROUNDB207 = null;
        var LROUNDB208 = null;
        var RROUNDB209 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB206_tree=null;
        var RROUNDB207_tree=null;
        var LROUNDB208_tree=null;
        var RROUNDB209_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                        
        try {
            // IDP.g:2698:17: ( ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) ) )
            // IDP.g:2698:33: ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2698:33: ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) )
            var alt218=2;

            var LA218_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(COUNT_OF,COUNT_OF,1) && LA218_0==COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA218_0==NUMBER_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(COUNT_OF,COUNT_OF,1) && LA218_0==COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA218_0==NUMBER_OF )) ) {
                alt218=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_DISTINCT_OF,1) && LA218_0==COUNT_DISTINCT_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_DISTINCT_OF,1) && LA218_0==COUNT_DISTINCT_OF )) ) {
                alt218=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_218_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 218, 0, this.input);

                nvae_218_0.c = this.input.LA(1);
                throw nvae_218_0;
            }
            switch (alt218) {
                case 1 :
                    // IDP.g:2699:49: (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) )
                    // IDP.g:2699:49: (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) )
                    // IDP.g:2699:51: aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB )
                    this.pushFollow(IDPParser.FOLLOW_numericCountAggregationOption_in_ruleCount52584);
                    this.numericCountAggregationOption_DFAcall = false;

                     if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.numericCountAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.numericCountAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.numericCountAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    // IDP.g:2699:107: (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB )
                    var alt216=2;

                    var LA216_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA216_0==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA216_0>=COUNT_DISTINCT_OF && LA216_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA216_0>=CURRENT && LA216_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA216_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA216_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA216_0>=TYPETIMECOLLECTION && LA216_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA216_0>=TYPETIMESTAMPCOLLECTION && LA216_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA216_0>=TYPEDATECOLLECTION && LA216_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA216_0>=TYPESTRINGCOLLECTION && LA216_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA216_0>=ZERO_OR_ONE && LA216_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA216_0>=INT && LA216_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA216_0>=HIGHEST && LA216_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA216_0>=TYPETIMEINTERVALCOLLECTION && LA216_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA216_0==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA216_0>=COUNT_DISTINCT_OF && LA216_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA216_0>=CURRENT && LA216_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA216_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA216_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA216_0>=TYPETIMECOLLECTION && LA216_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA216_0>=TYPETIMESTAMPCOLLECTION && LA216_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA216_0>=TYPEDATECOLLECTION && LA216_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA216_0>=TYPESTRINGCOLLECTION && LA216_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA216_0>=ZERO_OR_ONE && LA216_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA216_0>=INT && LA216_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA216_0>=HIGHEST && LA216_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA216_0>=TYPETIMEINTERVALCOLLECTION && LA216_0<=TYPETIMEINTERVALDT )) ) {
                        alt216=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA216_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA216_0==LROUNDB )) ) {
                        alt216=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_216_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 216, 0, this.input);

                        nvae_216_0.c = this.input.LA(1);
                        throw nvae_216_0;
                    }
                    switch (alt216) {
                        case 1 :
                            // IDP.g:2699:109: compoundSelectionOutput= ruleCountOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleCountOptions_in_ruleCount52592);
                            this.ruleCountOptions_DFAcall = false;

                             if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA216 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2699:154: LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB


                            this.pushNextTokens(LROUNDB,LROUNDB,1);
                            LROUNDB206=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleCount52596); if (this.state.failed) return retval;
                            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            LROUNDB206_tree = this.adaptor.create(LROUNDB206);
                            this.adaptor.addChild(root_0, LROUNDB206_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleCountOptions_in_ruleCount52602);
                            this.ruleCountOptions_DFAcall = false;

                             if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA216 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            this.pushNextTokens(RROUNDB,RROUNDB,1);
                            RROUNDB207=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleCount52604); if (this.state.failed) return retval;
                            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            RROUNDB207_tree = this.adaptor.create(RROUNDB207);
                            this.adaptor.addChild(root_0, RROUNDB207_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA216 !== undefined && this.failedPredictDFA216)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:2700:51: (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) )
                    // IDP.g:2700:51: (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) )
                    // IDP.g:2700:53: aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
                    this.pushFollow(IDPParser.FOLLOW_numericCountDistinctAggregationOption_in_ruleCount52667);
                    this.numericCountDistinctAggregationOption_DFAcall = false;

                     if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    // IDP.g:2700:117: (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
                    var alt217=2;

                    var LA217_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA217_0>=COUNT_DISTINCT_OF && LA217_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA217_0>=CURRENT && LA217_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA217_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA217_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA217_0>=TYPETIMECOLLECTION && LA217_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA217_0>=TYPETIMESTAMPCOLLECTION && LA217_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA217_0>=TYPEDATECOLLECTION && LA217_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA217_0>=TYPESTRINGCOLLECTION && LA217_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA217_0>=ZERO_OR_ONE && LA217_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA217_0>=INT && LA217_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA217_0>=HIGHEST && LA217_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA217_0>=TYPETIMEINTERVALCOLLECTION && LA217_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA217_0>=COUNT_DISTINCT_OF && LA217_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA217_0>=CURRENT && LA217_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA217_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA217_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA217_0>=TYPETIMECOLLECTION && LA217_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA217_0>=TYPETIMESTAMPCOLLECTION && LA217_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA217_0>=TYPEDATECOLLECTION && LA217_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA217_0>=TYPESTRINGCOLLECTION && LA217_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA217_0>=ZERO_OR_ONE && LA217_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA217_0>=INT && LA217_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA217_0>=HIGHEST && LA217_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA217_0>=TYPETIMEINTERVALCOLLECTION && LA217_0<=TYPETIMEINTERVALDT )) ) {
                        alt217=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA217_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA217_0==LROUNDB )) ) {
                        alt217=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_217_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 217, 0, this.input);

                        nvae_217_0.c = this.input.LA(1);
                        throw nvae_217_0;
                    }
                    switch (alt217) {
                        case 1 :
                            // IDP.g:2700:119: compoundSelectionOutput= ruleCountAttributeOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleCount52675);
                            this.ruleCountAttributeOptions_DFAcall = false;

                             if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA217 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2700:173: LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB


                            this.pushNextTokens(LROUNDB,LROUNDB,1);
                            LROUNDB208=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleCount52679); if (this.state.failed) return retval;
                            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            LROUNDB208_tree = this.adaptor.create(LROUNDB208);
                            this.adaptor.addChild(root_0, LROUNDB208_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleCount52685);
                            this.ruleCountAttributeOptions_DFAcall = false;

                             if( typeof this.ruleCountCurrentDecisionNumber !== 'undefined' && this.ruleCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA217 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            this.pushNextTokens(RROUNDB,RROUNDB,1);
                            RROUNDB209=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleCount52687); if (this.state.failed) return retval;
                            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            RROUNDB209_tree = this.adaptor.create(RROUNDB209);
                            this.adaptor.addChild(root_0, RROUNDB209_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA217 !== undefined && this.failedPredictDFA217)
                    { 
                        throw null;
                    }*/






                    break;

            }
            /*if(this.failedPredictDFA218 !== undefined && this.failedPredictDFA218)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs); ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCount";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleCountAttributeOptions_return: (function() {
        IDPParser.ruleCountAttributeOptions_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCountAttributeOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2709:1: ruleCountAttributeOptions returns [value] : (compoundSelectionOutput= ruleCollectionSelection | compoundSelectionOutput= ruleNumericCollection | compoundSelectionOutput= ruleTimespanCollection ) ;
    // $ANTLR start "ruleCountAttributeOptions"
    ruleCountAttributeOptions: function() {
        this.currentRule = "ruleCountAttributeOptions";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCountAttributeOptions_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:2711:17: ( (compoundSelectionOutput= ruleCollectionSelection | compoundSelectionOutput= ruleNumericCollection | compoundSelectionOutput= ruleTimespanCollection ) )
            // IDP.g:2711:33: (compoundSelectionOutput= ruleCollectionSelection | compoundSelectionOutput= ruleNumericCollection | compoundSelectionOutput= ruleTimespanCollection )
            root_0 = this.adaptor.nil();

            // IDP.g:2711:33: (compoundSelectionOutput= ruleCollectionSelection | compoundSelectionOutput= ruleNumericCollection | compoundSelectionOutput= ruleTimespanCollection )
            var alt219=3;

            this.ruleCountAttributeOptions_DFAcall=(typeof this.ruleCountAttributeOptions_DFAcall === 'undefined' ? false: this.ruleCountAttributeOptions_DFAcall); // only valid for synpred
            if(this.ruleCountAttributeOptions_DFAcall === false /*&& !this.failedPredictDFA219*/)
            {   
                this.dfa219NumberOfAlt = alt219;
                this.dfa219InRule = "ruleCountAttributeOptions";
            	this.dfa219Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleCountAttributeOptionsCurrentDecisionNumber  = 219; 
                alt219 = this.dfa219.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt219 === 0 || alt219 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 219);
            		return retval;
                }
            }	
            else
                alt219 = this.dfa219AltNumber;	
            switch (alt219) {
                case 1 :
                    // IDP.g:2712:56: compoundSelectionOutput= ruleCollectionSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleCollectionSelection_in_ruleCountAttributeOptions52896);
                    this.ruleCollectionSelection_DFAcall = false;

                     if( typeof this.ruleCountAttributeOptionsCurrentDecisionNumber !== 'undefined' && this.ruleCountAttributeOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountAttributeOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA219 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleCollectionSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountAttributeOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleCollectionSelection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleCollectionSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2713:56: compoundSelectionOutput= ruleNumericCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericCollection_in_ruleCountAttributeOptions52958);
                    this.ruleNumericCollection_DFAcall = false;

                     if( typeof this.ruleCountAttributeOptionsCurrentDecisionNumber !== 'undefined' && this.ruleCountAttributeOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountAttributeOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA219 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleNumericCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountAttributeOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleNumericCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleNumericCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 3 :
                    // IDP.g:2714:56: compoundSelectionOutput= ruleTimespanCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollection_in_ruleCountAttributeOptions53020);
                    this.ruleTimespanCollection_DFAcall = false;

                     if( typeof this.ruleCountAttributeOptionsCurrentDecisionNumber !== 'undefined' && this.ruleCountAttributeOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountAttributeOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA219 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountAttributeOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimespanCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA219 !== undefined && this.failedPredictDFA219)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null); this.parseModelLib.getModelManger().cleanValueListAttribute();
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCountAttributeOptions";
        }
        return retval;
    },

    // inline static return class
    ruleCountOptions_return: (function() {
        IDPParser.ruleCountOptions_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCountOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2717:1: ruleCountOptions returns [value] : (compoundSelectionOutput= ruleCountAttributeOptions | compoundSelectionOutput= ruleRootCollectionSelection ) ;
    // $ANTLR start "ruleCountOptions"
    ruleCountOptions: function() {
        this.currentRule = "ruleCountOptions";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCountOptions_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:2719:17: ( (compoundSelectionOutput= ruleCountAttributeOptions | compoundSelectionOutput= ruleRootCollectionSelection ) )
            // IDP.g:2719:33: (compoundSelectionOutput= ruleCountAttributeOptions | compoundSelectionOutput= ruleRootCollectionSelection )
            root_0 = this.adaptor.nil();

            // IDP.g:2719:33: (compoundSelectionOutput= ruleCountAttributeOptions | compoundSelectionOutput= ruleRootCollectionSelection )
            var alt220=2;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case COUNT_DISTINCT_OF:
            case COUNT_OF:
            case CURRENT:
            case TYPEBOOLEANCOLLECTION:
            case TYPEBOOLEANDT:
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case TYPETIMECOLLECTION:
            case TYPETIMEDT:
            case TYPETIMESTAMPCOLLECTION:
            case TYPEDATEDT:
            case TYPEDATECOLLECTION:
            case TYPESTRINGCOLLECTION:
            case TYPESTRINGDT:
            case TYPENUMBERCOLLECTION:
            case TYPENUMBERDT:
            case NUMBER_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
            case TYPETIMEINTERVALCOLLECTION:
            case TYPETIMEINTERVALDT:
                alt220=1;   
                break;
            case ZERO_OR_ONE:
            case INT:
                	this.updateLTType(this.input.LT(1));switch ( this.input.LA(2) ) {
                case OF:
                    var LA220_6 = this.input.LA(3);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL,ALL,3) && LA220_6==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL,ALL,3) && LA220_6==ALL )) ) {
                        var LA220_7 = this.input.LA(4);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,4) && LA220_7>=TYPETIMEINTERVAL && LA220_7<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,4) && LA220_7>=TYPETIME && LA220_7<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,4) && LA220_7==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,4) && LA220_7==TYPEBOOLEAN )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,4) && LA220_7>=CURRENT && LA220_7<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,4) && LA220_7==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,4) && LA220_7==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,4) && LA220_7==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,4) && LA220_7>=TYPESTRINGCOLLECTION && LA220_7<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,4) && LA220_7==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,4) && LA220_7==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,4) && LA220_7>=TYPETIMEINTERVAL && LA220_7<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,4) && LA220_7>=TYPETIME && LA220_7<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,4) && LA220_7==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,4) && LA220_7==TYPEBOOLEAN )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,4) && LA220_7>=CURRENT && LA220_7<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,4) && LA220_7==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,4) && LA220_7==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,4) && LA220_7==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,4) && LA220_7>=TYPESTRINGCOLLECTION && LA220_7<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,4) && LA220_7==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,4) && LA220_7==TYPETIMEINTERVALCOLLECTION )) ) {
                            alt220=1;
                        }
                        else 
                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,4) && LA220_7==TYPECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,4) && LA220_7==TYPECOLLECTION )) ) {
                            alt220=2;
                        }
                        else {
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                            var nvae_220_7 =
                        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 220, 7, this.input);

                            nvae_220_7.c = this.input.LA(4);
                            throw nvae_220_7;
                        }
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_220_6 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 220, 6, this.input);

                        nvae_220_6.c = this.input.LA(3);
                        throw nvae_220_6;
                    }   
                    break;
                case TYPETIMEINTERVAL:
                case TYPENUMBER:
                case TYPETIME:
                case TYPEDATE:
                case TYPETIMESTAMP:
                case TYPESTRING:
                case TYPEBOOLEAN:
                case CURRENT:
                case TYPEBOOLEANCOLLECTION:
                case TYPETIMECOLLECTION:
                case TYPETIMESTAMPCOLLECTION:
                case TYPEDATECOLLECTION:
                case TYPESTRINGCOLLECTION:
                case TYPESTRINGDT:
                case TYPENUMBERCOLLECTION:
                case TYPETIMEINTERVALCOLLECTION:
                    alt220=1;   
                    break;
                case TYPECOLLECTION:
                    alt220=2;   
                    break;
                default:
                this.pushApplyTokens([OF,TYPETIMEINTERVAL,TYPENUMBER,TYPETIME,TYPEDATE,TYPETIMESTAMP,TYPESTRING,TYPEBOOLEAN,CURRENT,TYPEBOOLEANCOLLECTION,TYPETIMECOLLECTION,TYPETIMESTAMPCOLLECTION,TYPEDATECOLLECTION,TYPESTRINGCOLLECTION,TYPESTRINGDT,TYPENUMBERCOLLECTION,TYPETIMEINTERVALCOLLECTION,TYPECOLLECTION]);
                	//this.pushApplyTokens();
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_220 =
                			new org.antlr.runtime.NoViableAltException(null, 220, 2, this.input);

                    nvae_220.c = this.input.LA(2);
                    throw nvae_220;
                }
               
                break;
            case TYPENUMBERPARAMETER:
                	this.updateLTType(this.input.LT(1));switch ( this.input.LA(2) ) {
                case OF:
                    var LA220_6 = this.input.LA(3);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL,ALL,3) && LA220_6==ALL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL,ALL,3) && LA220_6==ALL )) ) {
                        var LA220_7 = this.input.LA(4);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,4) && LA220_7>=TYPETIMEINTERVAL && LA220_7<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,4) && LA220_7>=TYPETIME && LA220_7<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,4) && LA220_7==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,4) && LA220_7==TYPEBOOLEAN )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,4) && LA220_7>=CURRENT && LA220_7<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,4) && LA220_7==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,4) && LA220_7==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,4) && LA220_7==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,4) && LA220_7>=TYPESTRINGCOLLECTION && LA220_7<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,4) && LA220_7==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,4) && LA220_7==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,4) && LA220_7>=TYPETIMEINTERVAL && LA220_7<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,4) && LA220_7>=TYPETIME && LA220_7<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,4) && LA220_7==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,4) && LA220_7==TYPEBOOLEAN )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANCOLLECTION,4) && LA220_7>=CURRENT && LA220_7<=TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,4) && LA220_7==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,4) && LA220_7==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,4) && LA220_7==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,4) && LA220_7>=TYPESTRINGCOLLECTION && LA220_7<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,4) && LA220_7==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,4) && LA220_7==TYPETIMEINTERVALCOLLECTION )) ) {
                            alt220=1;
                        }
                        else 
                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,4) && LA220_7==TYPECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,4) && LA220_7==TYPECOLLECTION )) ) {
                            alt220=2;
                        }
                        else {
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                            var nvae_220_7 =
                        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 220, 7, this.input);

                            nvae_220_7.c = this.input.LA(4);
                            throw nvae_220_7;
                        }
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_220_6 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 220, 6, this.input);

                        nvae_220_6.c = this.input.LA(3);
                        throw nvae_220_6;
                    }   
                    break;
                case TYPETIMEINTERVAL:
                case TYPENUMBER:
                case TYPETIME:
                case TYPEDATE:
                case TYPETIMESTAMP:
                case TYPESTRING:
                case TYPEBOOLEAN:
                case CURRENT:
                case TYPEBOOLEANCOLLECTION:
                case TYPETIMECOLLECTION:
                case TYPETIMESTAMPCOLLECTION:
                case TYPEDATECOLLECTION:
                case TYPESTRINGCOLLECTION:
                case TYPESTRINGDT:
                case TYPENUMBERCOLLECTION:
                case TYPETIMEINTERVALCOLLECTION:
                    alt220=1;   
                    break;
                case TYPECOLLECTION:
                    alt220=2;   
                    break;
                default:
                this.pushApplyTokens([OF,TYPETIMEINTERVAL,TYPENUMBER,TYPETIME,TYPEDATE,TYPETIMESTAMP,TYPESTRING,TYPEBOOLEAN,CURRENT,TYPEBOOLEANCOLLECTION,TYPETIMECOLLECTION,TYPETIMESTAMPCOLLECTION,TYPEDATECOLLECTION,TYPESTRINGCOLLECTION,TYPESTRINGDT,TYPENUMBERCOLLECTION,TYPETIMEINTERVALCOLLECTION,TYPECOLLECTION]);
                	//this.pushApplyTokens();
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_220 =
                			new org.antlr.runtime.NoViableAltException(null, 220, 3, this.input);

                    nvae_220.c = this.input.LA(2);
                    throw nvae_220;
                }
               
                break;
            case ALL:
                var LA220_4 = this.input.LA(2);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,2) && LA220_4>=TYPETIMEINTERVAL && LA220_4<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,2) && LA220_4>=TYPETIME && LA220_4<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA220_4==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,2) && LA220_4==TYPEBOOLEAN )||( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,2) && LA220_4==TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,2) && LA220_4==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,2) && LA220_4==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,2) && LA220_4==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA220_4>=TYPESTRINGCOLLECTION && LA220_4<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,2) && LA220_4==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,2) && LA220_4==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(TYPETIMEINTERVAL,TYPENUMBER,2) && LA220_4>=TYPETIMEINTERVAL && LA220_4<=TYPENUMBER )||(  this.pushNextTokens(TYPETIME,TYPETIMESTAMP,2) && LA220_4>=TYPETIME && LA220_4<=TYPETIMESTAMP )||( this.pushNextTokens(TYPESTRING,TYPESTRING,2) && LA220_4==TYPESTRING )||( this.pushNextTokens(TYPEBOOLEAN,TYPEBOOLEAN,2) && LA220_4==TYPEBOOLEAN )||( this.pushNextTokens(TYPEBOOLEANCOLLECTION,TYPEBOOLEANCOLLECTION,2) && LA220_4==TYPEBOOLEANCOLLECTION )||( this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMECOLLECTION,2) && LA220_4==TYPETIMECOLLECTION )||( this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPETIMESTAMPCOLLECTION,2) && LA220_4==TYPETIMESTAMPCOLLECTION )||( this.pushNextTokens(TYPEDATECOLLECTION,TYPEDATECOLLECTION,2) && LA220_4==TYPEDATECOLLECTION )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,2) && LA220_4>=TYPESTRINGCOLLECTION && LA220_4<=TYPESTRINGDT )||( this.pushNextTokens(TYPENUMBERCOLLECTION,TYPENUMBERCOLLECTION,2) && LA220_4==TYPENUMBERCOLLECTION )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,2) && LA220_4==TYPETIMEINTERVALCOLLECTION )) ) {
                    alt220=1;
                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,2) && LA220_4==TYPECOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,2) && LA220_4==TYPECOLLECTION )) ) {
                    alt220=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae_220_4 =
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 220, 4, this.input);

                    nvae_220_4.c = this.input.LA(2);
                    throw nvae_220_4;
                }   
                break;
            case TYPECOLLECTION:
                alt220=2;   
                break;
            default:
            this.pushApplyTokens([COUNT_DISTINCT_OF,COUNT_OF,CURRENT,TYPEBOOLEANCOLLECTION,TYPEBOOLEANDT,MAXIMUM_OF,MINIMUM_OF,TYPETIMECOLLECTION,TYPETIMEDT,TYPETIMESTAMPCOLLECTION,TYPEDATEDT,TYPEDATECOLLECTION,TYPESTRINGCOLLECTION,TYPESTRINGDT,TYPENUMBERCOLLECTION,TYPENUMBERDT,NUMBER_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF,TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,ZERO_OR_ONE,INT,TYPENUMBERPARAMETER,ALL,TYPECOLLECTION]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_220 =
            			new org.antlr.runtime.NoViableAltException(null, 220, 0, this.input);

                nvae_220.c = this.input.LA(1);
                throw nvae_220;
            }

            switch (alt220) {
                case 1 :
                    // IDP.g:2720:56: compoundSelectionOutput= ruleCountAttributeOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleCountOptions53210);
                    this.ruleCountAttributeOptions_DFAcall = false;

                     if( typeof this.ruleCountOptionsCurrentDecisionNumber !== 'undefined' && this.ruleCountOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA220 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2721:56: compoundSelectionOutput= ruleRootCollectionSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleRootCollectionSelection_in_ruleCountOptions53272);
                    this.ruleRootCollectionSelection_DFAcall = false;

                     if( typeof this.ruleCountOptionsCurrentDecisionNumber !== 'undefined' && this.ruleCountOptionsCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountOptionsCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA220 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleRootCollectionSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountOptionsCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleRootCollectionSelection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleRootCollectionSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA220 !== undefined && this.failedPredictDFA220)
            { 
                throw null;
            }*/




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCountOptions";
        }
        return retval;
    },

    // inline static return class
    ruleCountDistinct_return: (function() {
        IDPParser.ruleCountDistinct_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCountDistinct_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2723:1: ruleCountDistinct returns [value] : (aggregationOptionOutput= numericCountDistinctAggregationOption ) (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ;
    // $ANTLR start "ruleCountDistinct"
    ruleCountDistinct: function() {
        this.currentRule = "ruleCountDistinct";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCountDistinct_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB210 = null;
        var RROUNDB211 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB210_tree=null;
        var RROUNDB211_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                        
        try {
            // IDP.g:2728:17: ( (aggregationOptionOutput= numericCountDistinctAggregationOption ) (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) )
            // IDP.g:2728:33: (aggregationOptionOutput= numericCountDistinctAggregationOption ) (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:2728:33: (aggregationOptionOutput= numericCountDistinctAggregationOption )
            // IDP.g:2728:35: aggregationOptionOutput= numericCountDistinctAggregationOption
            this.pushFollow(IDPParser.FOLLOW_numericCountDistinctAggregationOption_in_ruleCountDistinct53442);
            this.numericCountDistinctAggregationOption_DFAcall = false;

             if( typeof this.ruleCountDistinctCurrentDecisionNumber !== 'undefined' && this.ruleCountDistinctCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCountDistinctCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.numericCountDistinctAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountDistinctCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.numericCountDistinctAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.numericCountDistinctAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }



            // IDP.g:2729:34: (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
            var alt221=2;

            var LA221_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA221_0>=COUNT_DISTINCT_OF && LA221_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA221_0>=CURRENT && LA221_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA221_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA221_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA221_0>=TYPETIMECOLLECTION && LA221_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA221_0>=TYPETIMESTAMPCOLLECTION && LA221_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA221_0>=TYPEDATECOLLECTION && LA221_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA221_0>=TYPESTRINGCOLLECTION && LA221_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA221_0>=ZERO_OR_ONE && LA221_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA221_0>=INT && LA221_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA221_0>=HIGHEST && LA221_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA221_0>=TYPETIMEINTERVALCOLLECTION && LA221_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA221_0>=COUNT_DISTINCT_OF && LA221_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA221_0>=CURRENT && LA221_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA221_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA221_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA221_0>=TYPETIMECOLLECTION && LA221_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA221_0>=TYPETIMESTAMPCOLLECTION && LA221_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA221_0>=TYPEDATECOLLECTION && LA221_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA221_0>=TYPESTRINGCOLLECTION && LA221_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA221_0>=ZERO_OR_ONE && LA221_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA221_0>=INT && LA221_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA221_0>=HIGHEST && LA221_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA221_0>=TYPETIMEINTERVALCOLLECTION && LA221_0<=TYPETIMEINTERVALDT )) ) {
                alt221=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA221_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA221_0==LROUNDB )) ) {
                alt221=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_221_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 221, 0, this.input);

                nvae_221_0.c = this.input.LA(1);
                throw nvae_221_0;
            }
            switch (alt221) {
                case 1 :
                    // IDP.g:2730:56: compoundSelectionOutput= ruleCountAttributeOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleCountDistinct53545);
                    this.ruleCountAttributeOptions_DFAcall = false;

                     if( typeof this.ruleCountDistinctCurrentDecisionNumber !== 'undefined' && this.ruleCountDistinctCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountDistinctCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA221 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountDistinctCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2731:48: LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB210=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleCountDistinct53595); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB210_tree = this.adaptor.create(LROUNDB210);
                    this.adaptor.addChild(root_0, LROUNDB210_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleCountDistinct53601);
                    this.ruleCountAttributeOptions_DFAcall = false;

                     if( typeof this.ruleCountDistinctCurrentDecisionNumber !== 'undefined' && this.ruleCountDistinctCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleCountDistinctCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA221 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCountDistinctCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleCountAttributeOptions();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleCountAttributeOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB211=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleCountDistinct53603); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB211_tree = this.adaptor.create(RROUNDB211);
                    this.adaptor.addChild(root_0, RROUNDB211_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA221 !== undefined && this.failedPredictDFA221)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCountDistinct";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleNumericGroupOfCount_return: (function() {
        IDPParser.ruleNumericGroupOfCount_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericGroupOfCount_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2740:1: ruleNumericGroupOfCount returns [value] : ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) ) gbc= groupByClause ;
    // $ANTLR start "ruleNumericGroupOfCount"
    ruleNumericGroupOfCount: function() {
        this.currentRule = "ruleNumericGroupOfCount";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericGroupOfCount_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB212 = null;
        var RROUNDB213 = null;
        var LROUNDB214 = null;
        var RROUNDB215 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;
         var gbc = null;

        var LROUNDB212_tree=null;
        var RROUNDB213_tree=null;
        var LROUNDB214_tree=null;
        var RROUNDB215_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.INTEGER.value;
                                        
        try {
            // IDP.g:2745:17: ( ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) ) gbc= groupByClause )
            // IDP.g:2745:33: ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) ) gbc= groupByClause
            root_0 = this.adaptor.nil();

            // IDP.g:2745:33: ( (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) ) | (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) ) )
            var alt224=2;

            var LA224_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(COUNT_OF,COUNT_OF,1) && LA224_0==COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA224_0==NUMBER_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(COUNT_OF,COUNT_OF,1) && LA224_0==COUNT_OF )||( this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && LA224_0==NUMBER_OF )) ) {
                alt224=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_DISTINCT_OF,1) && LA224_0==COUNT_DISTINCT_OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_DISTINCT_OF,1) && LA224_0==COUNT_DISTINCT_OF )) ) {
                alt224=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_224_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 224, 0, this.input);

                nvae_224_0.c = this.input.LA(1);
                throw nvae_224_0;
            }
            switch (alt224) {
                case 1 :
                    // IDP.g:2746:49: (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) )
                    // IDP.g:2746:49: (aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB ) )
                    // IDP.g:2746:50: aggregationOptionOutput= numericCountAggregationOption (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB )
                    this.pushFollow(IDPParser.FOLLOW_numericCountAggregationOption_in_ruleNumericGroupOfCount53870);
                    this.numericCountAggregationOption_DFAcall = false;

                     if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.numericCountAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.numericCountAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.numericCountAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    // IDP.g:2746:106: (compoundSelectionOutput= ruleCountOptions | LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB )
                    var alt222=2;

                    var LA222_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA222_0==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA222_0>=COUNT_DISTINCT_OF && LA222_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA222_0>=CURRENT && LA222_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA222_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA222_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA222_0>=TYPETIMECOLLECTION && LA222_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA222_0>=TYPETIMESTAMPCOLLECTION && LA222_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA222_0>=TYPEDATECOLLECTION && LA222_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA222_0>=TYPESTRINGCOLLECTION && LA222_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA222_0>=ZERO_OR_ONE && LA222_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA222_0>=INT && LA222_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA222_0>=HIGHEST && LA222_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA222_0>=TYPETIMEINTERVALCOLLECTION && LA222_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPECOLLECTION,TYPECOLLECTION,1) && LA222_0==TYPECOLLECTION )||(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA222_0>=COUNT_DISTINCT_OF && LA222_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA222_0>=CURRENT && LA222_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA222_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA222_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA222_0>=TYPETIMECOLLECTION && LA222_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA222_0>=TYPETIMESTAMPCOLLECTION && LA222_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA222_0>=TYPEDATECOLLECTION && LA222_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA222_0>=TYPESTRINGCOLLECTION && LA222_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA222_0>=ZERO_OR_ONE && LA222_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA222_0>=INT && LA222_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA222_0>=HIGHEST && LA222_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA222_0>=TYPETIMEINTERVALCOLLECTION && LA222_0<=TYPETIMEINTERVALDT )) ) {
                        alt222=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA222_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA222_0==LROUNDB )) ) {
                        alt222=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_222_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 222, 0, this.input);

                        nvae_222_0.c = this.input.LA(1);
                        throw nvae_222_0;
                    }
                    switch (alt222) {
                        case 1 :
                            // IDP.g:2746:108: compoundSelectionOutput= ruleCountOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleCountOptions_in_ruleNumericGroupOfCount53878);
                            this.ruleCountOptions_DFAcall = false;

                             if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA222 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2746:153: LROUNDB compoundSelectionOutput= ruleCountOptions RROUNDB


                            this.pushNextTokens(LROUNDB,LROUNDB,1);
                            LROUNDB212=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericGroupOfCount53882); if (this.state.failed) return retval;
                            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            LROUNDB212_tree = this.adaptor.create(LROUNDB212);
                            this.adaptor.addChild(root_0, LROUNDB212_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleCountOptions_in_ruleNumericGroupOfCount53888);
                            this.ruleCountOptions_DFAcall = false;

                             if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA222 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            this.pushNextTokens(RROUNDB,RROUNDB,1);
                            RROUNDB213=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericGroupOfCount53890); if (this.state.failed) return retval;
                            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            RROUNDB213_tree = this.adaptor.create(RROUNDB213);
                            this.adaptor.addChild(root_0, RROUNDB213_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA222 !== undefined && this.failedPredictDFA222)
                    { 
                        throw null;
                    }*/






                    break;
                case 2 :
                    // IDP.g:2747:49: (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) )
                    // IDP.g:2747:49: (aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB ) )
                    // IDP.g:2747:50: aggregationOptionOutput= numericCountDistinctAggregationOption (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
                    this.pushFollow(IDPParser.FOLLOW_numericCountDistinctAggregationOption_in_ruleNumericGroupOfCount53950);
                    this.numericCountDistinctAggregationOption_DFAcall = false;

                     if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    	}
                    	}
                    else{
                        aggregationOptionOutput=this.numericCountDistinctAggregationOption();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
                    // IDP.g:2747:114: (compoundSelectionOutput= ruleCountAttributeOptions | LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB )
                    var alt223=2;

                    var LA223_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA223_0>=COUNT_DISTINCT_OF && LA223_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA223_0>=CURRENT && LA223_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA223_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA223_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA223_0>=TYPETIMECOLLECTION && LA223_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA223_0>=TYPETIMESTAMPCOLLECTION && LA223_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA223_0>=TYPEDATECOLLECTION && LA223_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA223_0>=TYPESTRINGCOLLECTION && LA223_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA223_0>=ZERO_OR_ONE && LA223_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA223_0>=INT && LA223_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA223_0>=HIGHEST && LA223_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA223_0>=TYPETIMEINTERVALCOLLECTION && LA223_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_OF,1) && LA223_0>=COUNT_DISTINCT_OF && LA223_0<=COUNT_OF )||(  this.pushNextTokens(CURRENT,TYPEBOOLEANDT,1) && LA223_0>=CURRENT && LA223_0<=TYPEBOOLEANDT )||( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA223_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA223_0==MINIMUM_OF )||(  this.pushNextTokens(TYPETIMECOLLECTION,TYPETIMEDT,1) && LA223_0>=TYPETIMECOLLECTION && LA223_0<=TYPETIMEDT )||(  this.pushNextTokens(TYPETIMESTAMPCOLLECTION,TYPEDATEDT,1) && LA223_0>=TYPETIMESTAMPCOLLECTION && LA223_0<=TYPEDATEDT )||(  this.pushNextTokens(TYPEDATECOLLECTION,ALL,1) && LA223_0>=TYPEDATECOLLECTION && LA223_0<=ALL )||(  this.pushNextTokens(TYPESTRINGCOLLECTION,TYPESTRINGDT,1) && LA223_0>=TYPESTRINGCOLLECTION && LA223_0<=TYPESTRINGDT )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA223_0>=ZERO_OR_ONE && LA223_0<=TYPENUMBERPARAMETER )||(  this.pushNextTokens(INT,NUMBER_OF,1) && LA223_0>=INT && LA223_0<=NUMBER_OF )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA223_0>=HIGHEST && LA223_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA223_0>=TYPETIMEINTERVALCOLLECTION && LA223_0<=TYPETIMEINTERVALDT )) ) {
                        alt223=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA223_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA223_0==LROUNDB )) ) {
                        alt223=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_223_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 223, 0, this.input);

                        nvae_223_0.c = this.input.LA(1);
                        throw nvae_223_0;
                    }
                    switch (alt223) {
                        case 1 :
                            // IDP.g:2747:116: compoundSelectionOutput= ruleCountAttributeOptions
                            this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleNumericGroupOfCount53958);
                            this.ruleCountAttributeOptions_DFAcall = false;

                             if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA223 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2747:170: LROUNDB compoundSelectionOutput= ruleCountAttributeOptions RROUNDB


                            this.pushNextTokens(LROUNDB,LROUNDB,1);
                            LROUNDB214=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleNumericGroupOfCount53962); if (this.state.failed) return retval;
                            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            LROUNDB214_tree = this.adaptor.create(LROUNDB214);
                            this.adaptor.addChild(root_0, LROUNDB214_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleCountAttributeOptions_in_ruleNumericGroupOfCount53968);
                            this.ruleCountAttributeOptions_DFAcall = false;

                             if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA223 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	compoundSelectionOutput=this.ruleCountAttributeOptions();

                            	}
                            	}
                            else{
                                compoundSelectionOutput=this.ruleCountAttributeOptions();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                            this.pushNextTokens(RROUNDB,RROUNDB,1);
                            RROUNDB215=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleNumericGroupOfCount53970); if (this.state.failed) return retval;
                            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            RROUNDB215_tree = this.adaptor.create(RROUNDB215);
                            this.adaptor.addChild(root_0, RROUNDB215_tree);
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA223 !== undefined && this.failedPredictDFA223)
                    { 
                        throw null;
                    }*/






                    break;

            }
            /*if(this.failedPredictDFA224 !== undefined && this.failedPredictDFA224)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }
            this.pushFollow(IDPParser.FOLLOW_groupByClause_in_ruleNumericGroupOfCount54117);
            this.groupByClause_DFAcall = false;

             if( typeof this.ruleNumericGroupOfCountCurrentDecisionNumber !== 'undefined' && this.ruleNumericGroupOfCountCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericGroupOfCountCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                gbc=this.groupByClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericGroupOfCountCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	gbc=this.groupByClause();

            	}
            	}
            else{
                gbc=this.groupByClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, gbc.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.groupByArray = (gbc!==null?gbc.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs); retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericGroupOfCount";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    numericCountAggregationOption_return: (function() {
        IDPParser.numericCountAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.numericCountAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2762:1: numericCountAggregationOption returns [value] : ( (cnt= ( COUNT_OF | NUMBER_OF ) ) ) ;
    // $ANTLR start "numericCountAggregationOption"
    numericCountAggregationOption: function() {
        this.currentRule = "numericCountAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.numericCountAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var cnt = null;

        var cnt_tree=null;

        var operatorArgs = {};
        try {
            // IDP.g:2766:17: ( ( (cnt= ( COUNT_OF | NUMBER_OF ) ) ) )
            // IDP.g:2766:33: ( (cnt= ( COUNT_OF | NUMBER_OF ) ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2766:33: ( (cnt= ( COUNT_OF | NUMBER_OF ) ) )
            // IDP.g:2767:45: (cnt= ( COUNT_OF | NUMBER_OF ) )
            // IDP.g:2767:45: (cnt= ( COUNT_OF | NUMBER_OF ) )
            // IDP.g:2767:46: cnt= ( COUNT_OF | NUMBER_OF )
            cnt=this.input.LT(1);
            if ( (this.pushNextTokens(COUNT_OF,COUNT_OF,1) && this.input.LA(1)==COUNT_OF )||(this.pushNextTokens(NUMBER_OF,NUMBER_OF,1) && this.input.LA(1)==NUMBER_OF ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(cnt));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_cnt_54338 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_cnt_54338;
            }

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.value = "count"; operatorArgs.originalValue = (cnt?cnt.getText():null);
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.OperatorOption(operatorArgs); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "numericCountAggregationOption";
        }
        return retval;
    },

    // inline static return class
    numericCountDistinctAggregationOption_return: (function() {
        IDPParser.numericCountDistinctAggregationOption_return = function(){};
        org.antlr.lang.extend(IDPParser.numericCountDistinctAggregationOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2770:1: numericCountDistinctAggregationOption returns [value] : ( (cntmad= COUNT_DISTINCT_OF ) ) ;
    // $ANTLR start "numericCountDistinctAggregationOption"
    numericCountDistinctAggregationOption: function() {
        this.currentRule = "numericCountDistinctAggregationOption";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.numericCountDistinctAggregationOption_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var cntmad = null;

        var cntmad_tree=null;

        var operatorArgs = {};
        try {
            // IDP.g:2774:17: ( ( (cntmad= COUNT_DISTINCT_OF ) ) )
            // IDP.g:2774:33: ( (cntmad= COUNT_DISTINCT_OF ) )
            root_0 = this.adaptor.nil();

            // IDP.g:2774:33: ( (cntmad= COUNT_DISTINCT_OF ) )
            // IDP.g:2775:45: (cntmad= COUNT_DISTINCT_OF )
            // IDP.g:2775:45: (cntmad= COUNT_DISTINCT_OF )
            // IDP.g:2775:46: cntmad= COUNT_DISTINCT_OF


            this.pushNextTokens(COUNT_DISTINCT_OF,COUNT_DISTINCT_OF,1);
            cntmad=this.match(this.input,COUNT_DISTINCT_OF,IDPParser.FOLLOW_COUNT_DISTINCT_OF_in_numericCountDistinctAggregationOption54607); if (this.state.failed) return retval;
            if( COUNT_DISTINCT_OF !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            cntmad_tree = this.adaptor.create(cntmad);
            this.adaptor.addChild(root_0, cntmad_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              operatorArgs.value = "countd"; operatorArgs.originalValue = (cntmad?cntmad.getText():null);
            }









            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.OperatorOption(operatorArgs); 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "numericCountDistinctAggregationOption";
        }
        return retval;
    },

    // inline static return class
    timeConstant_return: (function() {
        IDPParser.timeConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.timeConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2791:1: timeConstant returns [value] : timeOutput= ( SECOND | MINUTE | HOUR ) ;
    // $ANTLR start "timeConstant"
    timeConstant: function() {
        this.currentRule = "timeConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.timeConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var timeOutput = null;

        var timeOutput_tree=null;

        try {
            // IDP.g:2793:13: (timeOutput= ( SECOND | MINUTE | HOUR ) )
            // IDP.g:2793:25: timeOutput= ( SECOND | MINUTE | HOUR )
            root_0 = this.adaptor.nil();

            timeOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(SECOND,HOUR,1) && this.input.LA(1)>=SECOND && this.input.LA(1)<=HOUR ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(timeOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_timeOutput_54739 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_timeOutput_54739;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = this.constantsLib.TIME_VALUE_TYPES.getByValue("string", (timeOutput?timeOutput.getText():null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "timeConstant";
        }
        return retval;
    },

    // inline static return class
    timespanForDateConstant_return: (function() {
        IDPParser.timespanForDateConstant_return = function(){};
        org.antlr.lang.extend(IDPParser.timespanForDateConstant_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2795:1: timespanForDateConstant returns [value] : timeOutput= ( DAY | WEEK | MONTH | YEAR ) ;
    // $ANTLR start "timespanForDateConstant"
    timespanForDateConstant: function() {
        this.currentRule = "timespanForDateConstant";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.timespanForDateConstant_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var timeOutput = null;

        var timeOutput_tree=null;

        try {
            // IDP.g:2797:13: (timeOutput= ( DAY | WEEK | MONTH | YEAR ) )
            // IDP.g:2797:25: timeOutput= ( DAY | WEEK | MONTH | YEAR )
            root_0 = this.adaptor.nil();

            timeOutput=this.input.LT(1);
            if ( (  this.pushNextTokens(DAY,YEAR,1) && this.input.LA(1)>=DAY && this.input.LA(1)<=YEAR ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(timeOutput));
                this.state.errorRecovery=false;
            	this.updateLTType(this.input.LT(1));this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse_timeOutput_54822 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                throw mse_timeOutput_54822;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = this.constantsLib.TIME_VALUE_TYPES.getByValue("string", (timeOutput?timeOutput.getText():null));
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "timespanForDateConstant";
        }
        return retval;
    },

    // inline static return class
    ruleSimpleTimespanClause_return: (function() {
        IDPParser.ruleSimpleTimespanClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleSimpleTimespanClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2799:1: ruleSimpleTimespanClause returns [value] : (timespanValue= ruleNumericTimespanClause | param= TYPETIMEINTERVALPARAMETER );
    // $ANTLR start "ruleSimpleTimespanClause"
    ruleSimpleTimespanClause: function() {
        this.currentRule = "ruleSimpleTimespanClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleSimpleTimespanClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var param = null;
         var timespanValue = null;

        var param_tree=null;

        var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var timespanType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value; simpleSelectiontOutput.valueType = timespanType;
        try {
            // IDP.g:2802:9: (timespanValue= ruleNumericTimespanClause | param= TYPETIMEINTERVALPARAMETER )
            var alt225=2;
            var LA225_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA225_0>=ZERO_OR_ONE && LA225_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA225_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA225_0>=ZERO_OR_ONE && LA225_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA225_0==INT )) ) {
                alt225=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA225_0==TYPETIMEINTERVALPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA225_0==TYPETIMEINTERVALPARAMETER )) ) {
                alt225=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_225_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 225, 0, this.input);

                nvae_225_0.c = this.input.LA(1);
                throw nvae_225_0;
            }
            switch (alt225) {
                case 1 :
                    // IDP.g:2802:49: timespanValue= ruleNumericTimespanClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericTimespanClause_in_ruleSimpleTimespanClause55013);
                    this.ruleNumericTimespanClause_DFAcall = false;

                     if( typeof this.ruleSimpleTimespanClauseCurrentDecisionNumber !== 'undefined' && this.ruleSimpleTimespanClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSimpleTimespanClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA225 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        timespanValue=this.ruleNumericTimespanClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSimpleTimespanClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	timespanValue=this.ruleNumericTimespanClause();

                    	}
                    	}
                    else{
                        timespanValue=this.ruleNumericTimespanClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, timespanValue.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       
                                                                                              simpleSelectiontOutput.compoundValue = (timespanValue!==null?timespanValue.value:null); 
                                                                                              simpleSelectiontOutput.isParameter = (timespanValue!==null?timespanValue.value:null).isParameter;
                                                                                              simpleSelectiontOutput.isCompound = true;
                                                                                              simpleSelectiontOutput.originalValue = (timespanValue?this.input.toString(timespanValue.start,timespanValue.stop):null);
                    }


                    break;
                case 2 :
                    // IDP.g:2807:49: param= TYPETIMEINTERVALPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1);
                    param=this.match(this.input,TYPETIMEINTERVALPARAMETER,IDPParser.FOLLOW_TYPETIMEINTERVALPARAMETER_in_ruleSimpleTimespanClause55071); if (this.state.failed) return retval;
                    if( TYPETIMEINTERVALPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleSimpleTimespanClause";
        }
        return retval;
    },

    // inline static return class
    ruleSimpleTimespanForDateClause_return: (function() {
        IDPParser.ruleSimpleTimespanForDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleSimpleTimespanForDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2809:1: ruleSimpleTimespanForDateClause returns [value] : (timespanValue= ruleNumericTimespanForDateClause | param= TYPETIMEINTERVALPARAMETER );
    // $ANTLR start "ruleSimpleTimespanForDateClause"
    ruleSimpleTimespanForDateClause: function() {
        this.currentRule = "ruleSimpleTimespanForDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleSimpleTimespanForDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var param = null;
         var timespanValue = null;

        var param_tree=null;

        var simpleSelectiontOutput = {};  simpleSelectiontOutput.index = this.input.lastMarker;  var timespanType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value; simpleSelectiontOutput.valueType = timespanType;
        try {
            // IDP.g:2812:9: (timespanValue= ruleNumericTimespanForDateClause | param= TYPETIMEINTERVALPARAMETER )
            var alt226=2;
            var LA226_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA226_0>=ZERO_OR_ONE && LA226_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA226_0==INT )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA226_0>=ZERO_OR_ONE && LA226_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA226_0==INT )) ) {
                alt226=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA226_0==TYPETIMEINTERVALPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1) && LA226_0==TYPETIMEINTERVALPARAMETER )) ) {
                alt226=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_226_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 226, 0, this.input);

                nvae_226_0.c = this.input.LA(1);
                throw nvae_226_0;
            }
            switch (alt226) {
                case 1 :
                    // IDP.g:2812:49: timespanValue= ruleNumericTimespanForDateClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleNumericTimespanForDateClause_in_ruleSimpleTimespanForDateClause55241);
                    this.ruleNumericTimespanForDateClause_DFAcall = false;

                     if( typeof this.ruleSimpleTimespanForDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleSimpleTimespanForDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleSimpleTimespanForDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA226 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        timespanValue=this.ruleNumericTimespanForDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleSimpleTimespanForDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	timespanValue=this.ruleNumericTimespanForDateClause();

                    	}
                    	}
                    else{
                        timespanValue=this.ruleNumericTimespanForDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, timespanValue.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       
                                                                                              simpleSelectiontOutput.compoundValue = (timespanValue!==null?timespanValue.value:null); 
                                                                                              simpleSelectiontOutput.isParameter = (timespanValue!==null?timespanValue.value:null).isParameter;
                                                                                              simpleSelectiontOutput.isCompound = true;
                                                                                              simpleSelectiontOutput.originalValue = (timespanValue?this.input.toString(timespanValue.start,timespanValue.stop):null);
                    }


                    break;
                case 2 :
                    // IDP.g:2817:49: param= TYPETIMEINTERVALPARAMETER
                    root_0 = this.adaptor.nil();



                    this.pushNextTokens(TYPETIMEINTERVALPARAMETER,TYPETIMEINTERVALPARAMETER,1);
                    param=this.match(this.input,TYPETIMEINTERVALPARAMETER,IDPParser.FOLLOW_TYPETIMEINTERVALPARAMETER_in_ruleSimpleTimespanForDateClause55299); if (this.state.failed) return retval;
                    if( TYPETIMEINTERVALPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      simpleSelectiontOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null));  simpleSelectiontOutput.isParameter = true;
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.SimpleSelection(simpleSelectiontOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleSimpleTimespanForDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleNumericTimespanClause_return: (function() {
        IDPParser.ruleNumericTimespanClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericTimespanClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2820:1: ruleNumericTimespanClause returns [value] : ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) (timespanConst= timeConstant | timespanConst= timespanForDateConstant ) ;
    // $ANTLR start "ruleNumericTimespanClause"
    ruleNumericTimespanClause: function() {
        this.currentRule = "ruleNumericTimespanClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericTimespanClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var intValue = null;
        var param = null;
         var timespanConst = null;

        var intValue_tree=null;
        var param_tree=null;

        var timespanOutput = {}; var flags = this.parseModelLib.getModelManger().flags; 
        try {
            // IDP.g:2823:17: ( ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) (timespanConst= timeConstant | timespanConst= timespanForDateConstant ) )
            // IDP.g:2823:33: ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) (timespanConst= timeConstant | timespanConst= timespanForDateConstant )
            root_0 = this.adaptor.nil();

            // IDP.g:2823:33: ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) )
            var alt227=2;

            var LA227_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA227_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA227_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA227_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA227_0==INT )) ) {
                alt227=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA227_0==TYPENUMBERPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA227_0==TYPENUMBERPARAMETER )) ) {
                alt227=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_227_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 227, 0, this.input);

                nvae_227_0.c = this.input.LA(1);
                throw nvae_227_0;
            }
            switch (alt227) {
                case 1 :
                    // IDP.g:2823:34: (intValue= ( INT | ZERO_OR_ONE ) )
                    // IDP.g:2823:34: (intValue= ( INT | ZERO_OR_ONE ) )
                    // IDP.g:2823:35: intValue= ( INT | ZERO_OR_ONE )
                    intValue=this.input.LT(1);
                    if ( (this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && this.input.LA(1)==ZERO_OR_ONE )||(this.pushNextTokens(INT,INT,1) && this.input.LA(1)==INT ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(intValue));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_intValue_55438 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_intValue_55438;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      timespanOutput.value = this.numberConversionLib.convertNumberToNativeFormat((intValue?intValue.getText():null), flags); timespanOutput.isParameter = false; this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, intValue.start, (intValue?intValue.getText():null), this.parseModelLib.getModelManger());
                    }





                    break;
                case 2 :
                    // IDP.g:2823:348: (param= TYPENUMBERPARAMETER )
                    // IDP.g:2823:348: (param= TYPENUMBERPARAMETER )
                    // IDP.g:2823:349: param= TYPENUMBERPARAMETER


                    this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1);
                    param=this.match(this.input,TYPENUMBERPARAMETER,IDPParser.FOLLOW_TYPENUMBERPARAMETER_in_ruleNumericTimespanClause55456); if (this.state.failed) return retval;
                    if( TYPENUMBERPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      timespanOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null)); timespanOutput.isParameter = true;
                    }





                    break;

            }
            /*if(this.failedPredictDFA227 !== undefined && this.failedPredictDFA227)
            { 
                throw null;
            }*/

            // IDP.g:2823:485: (timespanConst= timeConstant | timespanConst= timespanForDateConstant )
            var alt228=2;

            var LA228_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(SECOND,HOUR,1) && LA228_0>=SECOND && LA228_0<=HOUR )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(SECOND,HOUR,1) && LA228_0>=SECOND && LA228_0<=HOUR )) ) {
                alt228=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(DAY,YEAR,1) && LA228_0>=DAY && LA228_0<=YEAR )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(DAY,YEAR,1) && LA228_0>=DAY && LA228_0<=YEAR )) ) {
                alt228=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_228_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 228, 0, this.input);

                nvae_228_0.c = this.input.LA(1);
                throw nvae_228_0;
            }
            switch (alt228) {
                case 1 :
                    // IDP.g:2823:486: timespanConst= timeConstant
                    this.pushFollow(IDPParser.FOLLOW_timeConstant_in_ruleNumericTimespanClause55467);
                    this.timeConstant_DFAcall = false;

                     if( typeof this.ruleNumericTimespanClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericTimespanClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericTimespanClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA228 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        timespanConst=this.timeConstant();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTimespanClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	timespanConst=this.timeConstant();

                    	}
                    	}
                    else{
                        timespanConst=this.timeConstant();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, timespanConst.getTree());


                    break;
                case 2 :
                    // IDP.g:2823:517: timespanConst= timespanForDateConstant
                    this.pushFollow(IDPParser.FOLLOW_timespanForDateConstant_in_ruleNumericTimespanClause55475);
                    this.timespanForDateConstant_DFAcall = false;

                     if( typeof this.ruleNumericTimespanClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericTimespanClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleNumericTimespanClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA228 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        timespanConst=this.timespanForDateConstant();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTimespanClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	timespanConst=this.timespanForDateConstant();

                    	}
                    	}
                    else{
                        timespanConst=this.timespanForDateConstant();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, timespanConst.getTree());


                    break;

            }
            /*if(this.failedPredictDFA228 !== undefined && this.failedPredictDFA228)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              timespanOutput.constant = (timespanConst!==null?timespanConst.value:null).string;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = timespanOutput; 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericTimespanClause";
        }
        return retval;
    },

    // inline static return class
    ruleNumericTimespanForDateClause_return: (function() {
        IDPParser.ruleNumericTimespanForDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleNumericTimespanForDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2825:1: ruleNumericTimespanForDateClause returns [value] : ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) timespanConst= timespanForDateConstant ;
    // $ANTLR start "ruleNumericTimespanForDateClause"
    ruleNumericTimespanForDateClause: function() {
        this.currentRule = "ruleNumericTimespanForDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleNumericTimespanForDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var intValue = null;
        var param = null;
         var timespanConst = null;

        var intValue_tree=null;
        var param_tree=null;

        var timespanOutput = {}; var flags = this.parseModelLib.getModelManger().flags; 
        try {
            // IDP.g:2828:17: ( ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) timespanConst= timespanForDateConstant )
            // IDP.g:2828:33: ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) ) timespanConst= timespanForDateConstant
            root_0 = this.adaptor.nil();

            // IDP.g:2828:33: ( (intValue= ( INT | ZERO_OR_ONE ) ) | (param= TYPENUMBERPARAMETER ) )
            var alt229=2;

            var LA229_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA229_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA229_0==INT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && LA229_0==ZERO_OR_ONE )||( this.pushNextTokens(INT,INT,1) && LA229_0==INT )) ) {
                alt229=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA229_0==TYPENUMBERPARAMETER )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1) && LA229_0==TYPENUMBERPARAMETER )) ) {
                alt229=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_229_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 229, 0, this.input);

                nvae_229_0.c = this.input.LA(1);
                throw nvae_229_0;
            }
            switch (alt229) {
                case 1 :
                    // IDP.g:2828:34: (intValue= ( INT | ZERO_OR_ONE ) )
                    // IDP.g:2828:34: (intValue= ( INT | ZERO_OR_ONE ) )
                    // IDP.g:2828:35: intValue= ( INT | ZERO_OR_ONE )
                    intValue=this.input.LT(1);
                    if ( (this.pushNextTokens(ZERO_OR_ONE,ZERO_OR_ONE,1) && this.input.LA(1)==ZERO_OR_ONE )||(this.pushNextTokens(INT,INT,1) && this.input.LA(1)==INT ) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(intValue));
                        this.state.errorRecovery=false;
                    	this.updateLTType(this.input.LT(1));this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse_intValue_55602 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
                        throw mse_intValue_55602;
                    }

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      timespanOutput.value = this.numberConversionLib.convertNumberToNativeFormat((intValue?intValue.getText():null), flags); timespanOutput.isParameter = false; this.parseUtilsLib.updateValueListTokenType(this, retval.start.index, intValue.start, (intValue?intValue.getText():null), this.parseModelLib.getModelManger());
                    }





                    break;
                case 2 :
                    // IDP.g:2828:348: (param= TYPENUMBERPARAMETER )
                    // IDP.g:2828:348: (param= TYPENUMBERPARAMETER )
                    // IDP.g:2828:349: param= TYPENUMBERPARAMETER


                    this.pushNextTokens(TYPENUMBERPARAMETER,TYPENUMBERPARAMETER,1);
                    param=this.match(this.input,TYPENUMBERPARAMETER,IDPParser.FOLLOW_TYPENUMBERPARAMETER_in_ruleNumericTimespanForDateClause55620); if (this.state.failed) return retval;
                    if( TYPENUMBERPARAMETER !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    param_tree = this.adaptor.create(param);
                    this.adaptor.addChild(root_0, param_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      timespanOutput.value = this.utilsLib.getFixedParamName((param?param.getText():null)); timespanOutput.isParameter = true;
                    }





                    break;

            }
            /*if(this.failedPredictDFA229 !== undefined && this.failedPredictDFA229)
            { 
                throw null;
            }*/

            this.pushFollow(IDPParser.FOLLOW_timespanForDateConstant_in_ruleNumericTimespanForDateClause55630);
            this.timespanForDateConstant_DFAcall = false;

             if( typeof this.ruleNumericTimespanForDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleNumericTimespanForDateClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleNumericTimespanForDateClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                timespanConst=this.timespanForDateConstant();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleNumericTimespanForDateClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	timespanConst=this.timespanForDateConstant();

            	}
            	}
            else{
                timespanConst=this.timespanForDateConstant();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, timespanConst.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              timespanOutput.constant = (timespanConst!==null?timespanConst.value:null).string;
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = timespanOutput; 
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleNumericTimespanForDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanSelection_return: (function() {
        IDPParser.ruleTimespanSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2831:1: ruleTimespanSelection returns [value] : ( CURRENT )? navigationOutput= TYPETIMEINTERVAL ;
    // $ANTLR start "ruleTimespanSelection"
    ruleTimespanSelection: function() {
        this.currentRule = "ruleTimespanSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;
        var CURRENT216 = null;

        var navigationOutput_tree=null;
        var CURRENT216_tree=null;

        var ruleOutput = {}; 
        try {
            // IDP.g:2834:17: ( ( CURRENT )? navigationOutput= TYPETIMEINTERVAL )
            // IDP.g:2834:33: ( CURRENT )? navigationOutput= TYPETIMEINTERVAL
            root_0 = this.adaptor.nil();

            // IDP.g:2834:33: ( CURRENT )?
            var alt230=2;

            var LA230_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA230_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA230_0==CURRENT )) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // IDP.g:2834:34: CURRENT


                    this.pushNextTokens(CURRENT,CURRENT,1);
                    CURRENT216=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimespanSelection55753); if (this.state.failed) return retval;
                    if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    CURRENT216_tree = this.adaptor.create(CURRENT216);
                    this.adaptor.addChild(root_0, CURRENT216_tree);
                    }
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.isCurrent = true;
                    }


                    break;

            }
            /*if(this.failedPredictDFA230 !== undefined && this.failedPredictDFA230)
            { 
                throw null;
            }*/



            this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1);
            navigationOutput=this.match(this.input,TYPETIMEINTERVAL,IDPParser.FOLLOW_TYPETIMEINTERVAL_in_ruleTimespanSelection55764); if (this.state.failed) return retval;
            if( TYPETIMEINTERVAL !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?navigationOutput.getText():null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.Selection(ruleOutput, this.parseModelLib.getModelManger());
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanCollectionContext_return: (function() {
        IDPParser.ruleTimespanCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2838:1: ruleTimespanCollectionContext returns [value] : navigationOutput= TYPETIMEINTERVALCOLLECTION ;
    // $ANTLR start "ruleTimespanCollectionContext"
    ruleTimespanCollectionContext: function() {
        this.currentRule = "ruleTimespanCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2839:25: (navigationOutput= TYPETIMEINTERVALCOLLECTION )
            // IDP.g:2839:49: navigationOutput= TYPETIMEINTERVALCOLLECTION
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1);
            navigationOutput=this.match(this.input,TYPETIMEINTERVALCOLLECTION,IDPParser.FOLLOW_TYPETIMEINTERVALCOLLECTION_in_ruleTimespanCollectionContext55948); if (this.state.failed) return retval;
            if( TYPETIMEINTERVALCOLLECTION !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimespanContext_return: (function() {
        IDPParser.ruleTimespanContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2846:1: ruleTimespanContext returns [value] : navigationOutput= TYPETIMEINTERVAL ;
    // $ANTLR start "ruleTimespanContext"
    ruleTimespanContext: function() {
        this.currentRule = "ruleTimespanContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:2847:25: (navigationOutput= TYPETIMEINTERVAL )
            // IDP.g:2847:49: navigationOutput= TYPETIMEINTERVAL
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1);
            navigationOutput=this.match(this.input,TYPETIMEINTERVAL,IDPParser.FOLLOW_TYPETIMEINTERVAL_in_ruleTimespanContext56079); if (this.state.failed) return retval;
            if( TYPETIMEINTERVAL !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleCompoundTimespanSelection_return: (function() {
        IDPParser.ruleCompoundTimespanSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleCompoundTimespanSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2855:1: ruleCompoundTimespanSelection returns [value] : (compoundSelectionOutput= ruleTimespanAggregationFunction ) ;
    // $ANTLR start "ruleCompoundTimespanSelection"
    ruleCompoundTimespanSelection: function() {
        this.currentRule = "ruleCompoundTimespanSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleCompoundTimespanSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var compoundSelectionOutput = null;


        try {
            // IDP.g:2856:17: ( (compoundSelectionOutput= ruleTimespanAggregationFunction ) )
            // IDP.g:2856:33: (compoundSelectionOutput= ruleTimespanAggregationFunction )
            root_0 = this.adaptor.nil();

            // IDP.g:2856:33: (compoundSelectionOutput= ruleTimespanAggregationFunction )
            // IDP.g:2856:34: compoundSelectionOutput= ruleTimespanAggregationFunction
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanAggregationFunction_in_ruleCompoundTimespanSelection56199);
            this.ruleTimespanAggregationFunction_DFAcall = false;

             if( typeof this.ruleCompoundTimespanSelectionCurrentDecisionNumber !== 'undefined' && this.ruleCompoundTimespanSelectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleCompoundTimespanSelectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                compoundSelectionOutput=this.ruleTimespanAggregationFunction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleCompoundTimespanSelectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	compoundSelectionOutput=this.ruleTimespanAggregationFunction();

            	}
            	}
            else{
                compoundSelectionOutput=this.ruleTimespanAggregationFunction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleCompoundTimespanSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanBaseSelection_return: (function() {
        IDPParser.ruleTimespanBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2860:1: ruleTimespanBaseSelection returns [value] : (selectionOutput= ruleBaseTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets );
    // $ANTLR start "ruleTimespanBaseSelection"
    ruleTimespanBaseSelection: function() {
        this.currentRule = "ruleTimespanBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {}; var output = [];
        try {
            // IDP.g:2863:17: (selectionOutput= ruleBaseTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets )
            var alt231=3;
            this.ruleTimespanBaseSelection_DFAcall=(typeof this.ruleTimespanBaseSelection_DFAcall === 'undefined' ? false: this.ruleTimespanBaseSelection_DFAcall); // only valid for synpred
            if(this.ruleTimespanBaseSelection_DFAcall === false /*&& !this.failedPredictDFA231*/)
            {   
                this.dfa231NumberOfAlt = alt231;
                this.dfa231InRule = "ruleTimespanBaseSelection";
            	this.dfa231Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanBaseSelectionCurrentDecisionNumber  = 231; 
                alt231 = this.dfa231.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt231 === 0 || alt231 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 231);
            		return retval;
                }
            }	
            else
                alt231 = this.dfa231AltNumber;	
            switch (alt231) {
                case 1 :
                    // IDP.g:2863:33: selectionOutput= ruleBaseTimespan
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBaseTimespan_in_ruleTimespanBaseSelection56438);
                    this.ruleBaseTimespan_DFAcall = false;

                     if( typeof this.ruleTimespanBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA231 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseTimespan();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseTimespan();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseTimespan();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;
                case 2 :
                    // IDP.g:2864:35: selectionOutput= ruleCompoundTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_ruleTimespanBaseSelection56480);
                    this.ruleCompoundTimespanSelection_DFAcall = false;

                     if( typeof this.ruleTimespanBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA231 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;
                case 3 :
                    // IDP.g:2866:35: selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanBaseSelection56555);
                    this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                     if( typeof this.ruleTimespanBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA231 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = output;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForDateBaseSelection_return: (function() {
        IDPParser.ruleTimespanForDateBaseSelection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForDateBaseSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2870:1: ruleTimespanForDateBaseSelection returns [value] : (selectionOutput= ruleBaseForDateTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets );
    // $ANTLR start "ruleTimespanForDateBaseSelection"
    ruleTimespanForDateBaseSelection: function() {
        this.currentRule = "ruleTimespanForDateBaseSelection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForDateBaseSelection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {}; var output = [];
        try {
            // IDP.g:2873:17: (selectionOutput= ruleBaseForDateTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets )
            var alt232=3;
            this.ruleTimespanForDateBaseSelection_DFAcall=(typeof this.ruleTimespanForDateBaseSelection_DFAcall === 'undefined' ? false: this.ruleTimespanForDateBaseSelection_DFAcall); // only valid for synpred
            if(this.ruleTimespanForDateBaseSelection_DFAcall === false /*&& !this.failedPredictDFA232*/)
            {   
                this.dfa232NumberOfAlt = alt232;
                this.dfa232InRule = "ruleTimespanForDateBaseSelection";
            	this.dfa232Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber  = 232; 
                alt232 = this.dfa232.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt232 === 0 || alt232 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 232);
            		return retval;
                }
            }	
            else
                alt232 = this.dfa232AltNumber;	
            switch (alt232) {
                case 1 :
                    // IDP.g:2873:33: selectionOutput= ruleBaseForDateTimespan
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleBaseForDateTimespan_in_ruleTimespanForDateBaseSelection56778);
                    this.ruleBaseForDateTimespan_DFAcall = false;

                     if( typeof this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA232 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleBaseForDateTimespan();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleBaseForDateTimespan();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleBaseForDateTimespan();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;
                case 2 :
                    // IDP.g:2874:35: selectionOutput= ruleCompoundTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_ruleTimespanForDateBaseSelection56820);
                    this.ruleCompoundTimespanSelection_DFAcall = false;

                     if( typeof this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA232 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;
                case 3 :
                    // IDP.g:2877:35: selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanForDateBaseSelection56928);
                    this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                     if( typeof this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA232 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateBaseSelectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      output = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = output;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForDateBaseSelection";
        }
        return retval;
    },

    // inline static return class
    ruleBaseTimespan_return: (function() {
        IDPParser.ruleBaseTimespan_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseTimespan_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2882:1: ruleBaseTimespan returns [value] : (selectionOutput= ruleSimpleTimespanClause | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimespanSelection );
    // $ANTLR start "ruleBaseTimespan"
    ruleBaseTimespan: function() {
        this.currentRule = "ruleBaseTimespan";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseTimespan_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {};
        try {
            // IDP.g:2884:17: (selectionOutput= ruleSimpleTimespanClause | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimespanSelection )
            var alt233=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
            case TYPETIMEINTERVALPARAMETER:
                alt233=1;   
                break;
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
                alt233=2;   
                break;
            case TYPETIMEINTERVAL:
            case CURRENT:
                alt233=3;   
                break;
            default:
            this.pushApplyTokens([ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,TYPETIMEINTERVALPARAMETER,MAXIMUM_OF,MINIMUM_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF,TYPETIMEINTERVAL,CURRENT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_233 =
            			new org.antlr.runtime.NoViableAltException(null, 233, 0, this.input);

                nvae_233.c = this.input.LA(1);
                throw nvae_233;
            }

            switch (alt233) {
                case 1 :
                    // IDP.g:2884:33: selectionOutput= ruleSimpleTimespanClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleSimpleTimespanClause_in_ruleBaseTimespan57058);
                    this.ruleSimpleTimespanClause_DFAcall = false;

                     if( typeof this.ruleBaseTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA233 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleSimpleTimespanClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleSimpleTimespanClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleSimpleTimespanClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2885:39: selectionOutput= ruleCompoundTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_ruleBaseTimespan57104);
                    this.ruleCompoundTimespanSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA233 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:2886:35: selectionOutput= ruleTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelection_in_ruleBaseTimespan57146);
                    this.ruleTimespanSelection_DFAcall = false;

                     if( typeof this.ruleBaseTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA233 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selection = (selectionOutput!==null?selectionOutput.value:null); 
                                                                                                 ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value; 
                                                                                                 retval.value = new this.entityModelLib.CompoundSelection(ruleOutput)
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseTimespan";
        }
        return retval;
    },

    // inline static return class
    ruleBaseForDateTimespan_return: (function() {
        IDPParser.ruleBaseForDateTimespan_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleBaseForDateTimespan_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2890:1: ruleBaseForDateTimespan returns [value] : (selectionOutput= ruleSimpleTimespanForDateClause | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimespanSelection );
    // $ANTLR start "ruleBaseForDateTimespan"
    ruleBaseForDateTimespan: function() {
        this.currentRule = "ruleBaseForDateTimespan";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleBaseForDateTimespan_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var ruleOutput = {};
        try {
            // IDP.g:2892:17: (selectionOutput= ruleSimpleTimespanForDateClause | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimespanSelection )
            var alt234=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
            case TYPETIMEINTERVALPARAMETER:
                alt234=1;   
                break;
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
                alt234=2;   
                break;
            case TYPETIMEINTERVAL:
            case CURRENT:
                alt234=3;   
                break;
            default:
            this.pushApplyTokens([ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,TYPETIMEINTERVALPARAMETER,MAXIMUM_OF,MINIMUM_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF,TYPETIMEINTERVAL,CURRENT]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_234 =
            			new org.antlr.runtime.NoViableAltException(null, 234, 0, this.input);

                nvae_234.c = this.input.LA(1);
                throw nvae_234;
            }

            switch (alt234) {
                case 1 :
                    // IDP.g:2892:33: selectionOutput= ruleSimpleTimespanForDateClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleSimpleTimespanForDateClause_in_ruleBaseForDateTimespan57241);
                    this.ruleSimpleTimespanForDateClause_DFAcall = false;

                     if( typeof this.ruleBaseForDateTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseForDateTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseForDateTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA234 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleSimpleTimespanForDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseForDateTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleSimpleTimespanForDateClause();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleSimpleTimespanForDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 2 :
                    // IDP.g:2893:39: selectionOutput= ruleCompoundTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_ruleBaseForDateTimespan57287);
                    this.ruleCompoundTimespanSelection_DFAcall = false;

                     if( typeof this.ruleBaseForDateTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseForDateTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseForDateTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA234 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseForDateTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleCompoundTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleCompoundTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value = (selectionOutput!==null?selectionOutput.value:null);
                    }


                    break;
                case 3 :
                    // IDP.g:2894:35: selectionOutput= ruleTimespanSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelection_in_ruleBaseForDateTimespan57329);
                    this.ruleTimespanSelection_DFAcall = false;

                     if( typeof this.ruleBaseForDateTimespanCurrentDecisionNumber !== 'undefined' && this.ruleBaseForDateTimespanCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleBaseForDateTimespanCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA234 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleBaseForDateTimespanCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      ruleOutput.selection = (selectionOutput!==null?selectionOutput.value:null); 
                                                                                                 ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value; 
                                                                                                 retval.value = new this.entityModelLib.CompoundSelection(ruleOutput)
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleBaseForDateTimespan";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForDateSelectionClause_return: (function() {
        IDPParser.ruleTimespanForDateSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForDateSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2901:1: ruleTimespanForDateSelectionClause returns [value] : selectionOutput= ruleTimespanForDateArithmetic ;
    // $ANTLR start "ruleTimespanForDateSelectionClause"
    ruleTimespanForDateSelectionClause: function() {
        this.currentRule = "ruleTimespanForDateSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForDateSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2904:17: (selectionOutput= ruleTimespanForDateArithmetic )
            // IDP.g:2904:33: selectionOutput= ruleTimespanForDateArithmetic
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmetic_in_ruleTimespanForDateSelectionClause57496);
            this.ruleTimespanForDateArithmetic_DFAcall = false;

             if( typeof this.ruleTimespanForDateSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanForDateSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanForDateArithmetic();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanForDateArithmetic();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanForDateArithmetic();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForDateSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanSelectionClause_return: (function() {
        IDPParser.ruleTimespanSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2906:1: ruleTimespanSelectionClause returns [value] : selectionOutput= ruleTimespanArithmetic ;
    // $ANTLR start "ruleTimespanSelectionClause"
    ruleTimespanSelectionClause: function() {
        this.currentRule = "ruleTimespanSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2909:17: (selectionOutput= ruleTimespanArithmetic )
            // IDP.g:2909:33: selectionOutput= ruleTimespanArithmetic
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmetic_in_ruleTimespanSelectionClause57644);
            this.ruleTimespanArithmetic_DFAcall = false;

             if( typeof this.ruleTimespanSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanArithmetic();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanArithmetic();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanArithmetic();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromDateSelectionClause_return: (function() {
        IDPParser.ruleTimespanFromDateSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromDateSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2911:1: ruleTimespanFromDateSelectionClause returns [value] : selectionOutput= ruleTimespanForDateArithmetic ;
    // $ANTLR start "ruleTimespanFromDateSelectionClause"
    ruleTimespanFromDateSelectionClause: function() {
        this.currentRule = "ruleTimespanFromDateSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromDateSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2914:17: (selectionOutput= ruleTimespanForDateArithmetic )
            // IDP.g:2914:33: selectionOutput= ruleTimespanForDateArithmetic
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmetic_in_ruleTimespanFromDateSelectionClause57792);
            this.ruleTimespanForDateArithmetic_DFAcall = false;

             if( typeof this.ruleTimespanFromDateSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanFromDateSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanForDateArithmetic();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanForDateArithmetic();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanForDateArithmetic();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromDateSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromTimestampSelectionClause_return: (function() {
        IDPParser.ruleTimespanFromTimestampSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromTimestampSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2917:1: ruleTimespanFromTimestampSelectionClause returns [value] : selectionOutput= ruleTimespanFromTimestampArithmetic ;
    // $ANTLR start "ruleTimespanFromTimestampSelectionClause"
    ruleTimespanFromTimestampSelectionClause: function() {
        this.currentRule = "ruleTimespanFromTimestampSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromTimestampSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:2920:17: (selectionOutput= ruleTimespanFromTimestampArithmetic )
            // IDP.g:2920:33: selectionOutput= ruleTimespanFromTimestampArithmetic
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampArithmetic_in_ruleTimespanFromTimestampSelectionClause57941);
            this.ruleTimespanFromTimestampArithmetic_DFAcall = false;

             if( typeof this.ruleTimespanFromTimestampSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanFromTimestampSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanFromTimestampArithmetic();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanFromTimestampArithmetic();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanFromTimestampArithmetic();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selectionOutput!==null?selectionOutput.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromTimestampSelectionClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForDateArithmetic_return: (function() {
        IDPParser.ruleTimespanForDateArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForDateArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2922:1: ruleTimespanForDateArithmetic returns [value] : (selectionOutput= ruleTimeSpanFromTimestampSubtraction | selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )* ;
    // $ANTLR start "ruleTimespanForDateArithmetic"
    ruleTimespanForDateArithmetic: function() {
        this.currentRule = "ruleTimespanForDateArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForDateArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:2925:17: ( (selectionOutput= ruleTimeSpanFromTimestampSubtraction | selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )* )
            // IDP.g:2925:33: (selectionOutput= ruleTimeSpanFromTimestampSubtraction | selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2925:33: (selectionOutput= ruleTimeSpanFromTimestampSubtraction | selectionOutput= ruleTimespanForDateArithmeticMultDiv )
            var alt235=2;

            this.ruleTimespanForDateArithmetic_DFAcall=(typeof this.ruleTimespanForDateArithmetic_DFAcall === 'undefined' ? false: this.ruleTimespanForDateArithmetic_DFAcall); // only valid for synpred
            if(this.ruleTimespanForDateArithmetic_DFAcall === false /*&& !this.failedPredictDFA235*/)
            {   
                this.dfa235NumberOfAlt = alt235;
                this.dfa235InRule = "ruleTimespanForDateArithmetic";
            	this.dfa235Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanForDateArithmeticCurrentDecisionNumber  = 235; 
                alt235 = this.dfa235.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt235 === 0 || alt235 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 235);
            		return retval;
                }
            }	
            else
                alt235 = this.dfa235AltNumber;	
            switch (alt235) {
                case 1 :
                    // IDP.g:2925:34: selectionOutput= ruleTimeSpanFromTimestampSubtraction
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimespanForDateArithmetic58082);
                    this.ruleTimeSpanFromTimestampSubtraction_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA235 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2925:91: selectionOutput= ruleTimespanForDateArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanForDateArithmetic58090);
                    this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA235 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA235 !== undefined && this.failedPredictDFA235)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2927:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )*
            loop236:
            do {
                var alt236=3;
                var LA236_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA236_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA236_0==MINUS )) ) {
                    var LA236_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred411_IDP()'.indexOf("synpred") !== -1) ||  this.synpred411_IDP()) ) {
                        alt236=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred412_IDP()'.indexOf("synpred") !== -1) ||  this.synpred412_IDP()) ) {
                        alt236=2;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA236_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA236_0==PLUS )) ) {
                    var LA236_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred411_IDP()'.indexOf("synpred") !== -1) ||  this.synpred411_IDP()) ) {
                        alt236=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred412_IDP()'.indexOf("synpred") !== -1) ||  this.synpred412_IDP()) ) {
                        alt236=2;
                    }


                }


                switch (alt236) {
                case 1 :
                    // IDP.g:2928:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets )
                    // IDP.g:2928:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets )
                    // IDP.g:2928:34: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanForDateArithmetic58199);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_ruleTimespanForDateArithmetic58205);
                    this.ruleTimeSpanFromDateSubtractionWithBrackets_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());





                    break;
                case 2 :
                    // IDP.g:2929:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv )
                    // IDP.g:2929:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv )
                    // IDP.g:2929:34: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanForDateArithmetic58247);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanForDateArithmetic58253);
                    this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null)); selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;

                default :
                    break loop236;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForDateArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanArithmetic_return: (function() {
        IDPParser.ruleTimespanArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2934:1: ruleTimespanArithmetic returns [value] : (arr= ruleTimespanFromTimestampArithmetic ) ;
    // $ANTLR start "ruleTimespanArithmetic"
    ruleTimespanArithmetic: function() {
        this.currentRule = "ruleTimespanArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var arr = null;


        try {
            // IDP.g:2935:17: ( (arr= ruleTimespanFromTimestampArithmetic ) )
            // IDP.g:2935:33: (arr= ruleTimespanFromTimestampArithmetic )
            root_0 = this.adaptor.nil();

            // IDP.g:2935:33: (arr= ruleTimespanFromTimestampArithmetic )
            // IDP.g:2935:34: arr= ruleTimespanFromTimestampArithmetic
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampArithmetic_in_ruleTimespanArithmetic58425);
            this.ruleTimespanFromTimestampArithmetic_DFAcall = false;

             if( typeof this.ruleTimespanArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                arr=this.ruleTimespanFromTimestampArithmetic();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	arr=this.ruleTimespanFromTimestampArithmetic();

            	}
            	}
            else{
                arr=this.ruleTimespanFromTimestampArithmetic();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arr.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (arr!==null?arr.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromTimestampArithmeticSubtraction_return: (function() {
        IDPParser.ruleTimespanFromTimestampArithmeticSubtraction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromTimestampArithmeticSubtraction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2938:1: ruleTimespanFromTimestampArithmeticSubtraction returns [value] : (selectionOutput= ruleTimeSpanFromTimestampSubtraction ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )* ;
    // $ANTLR start "ruleTimespanFromTimestampArithmeticSubtraction"
    ruleTimespanFromTimestampArithmeticSubtraction: function() {
        this.currentRule = "ruleTimespanFromTimestampArithmeticSubtraction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromTimestampArithmeticSubtraction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;
         var selectionOutput2 = null;


        var selections = []; 
        try {
            // IDP.g:2941:17: ( (selectionOutput= ruleTimeSpanFromTimestampSubtraction ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )* )
            // IDP.g:2941:33: (selectionOutput= ruleTimeSpanFromTimestampSubtraction ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2941:33: (selectionOutput= ruleTimeSpanFromTimestampSubtraction )
            // IDP.g:2941:34: selectionOutput= ruleTimeSpanFromTimestampSubtraction
            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimespanFromTimestampArithmeticSubtraction58569);
            this.ruleTimeSpanFromTimestampSubtraction_DFAcall = false;

             if( typeof this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            	}
            	}
            else{
                selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections, (selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2942:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )*
            loop238:
            do {
                var alt238=2;
                var LA238_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA238_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA238_0==MINUS )) ) {
                    var LA238_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred414_IDP()'.indexOf("synpred") !== -1) ||  this.synpred414_IDP()) ) {
                        alt238=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA238_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA238_0==PLUS )) ) {
                    var LA238_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred414_IDP()'.indexOf("synpred") !== -1) ||  this.synpred414_IDP()) ) {
                        alt238=1;
                    }


                }


                switch (alt238) {
                case 1 :
                    // IDP.g:2944:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
                    // IDP.g:2944:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
                    var alt237=2;

                    var LA237_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA237_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA237_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA237_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA237_0==PLUS )) ) {
                        var LA237_1 = this.input.LA(2);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred413_IDP()'.indexOf("synpred") !== -1) ||  this.synpred413_IDP()) ) {
                            alt237=1;
                        }
                        else 
                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'true'.indexOf("synpred") !== -1) ||  true) ) {
                            alt237=2;
                        }
                        else {
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                            var nvae_237_1 =
                        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 237, 1, this.input);

                            nvae_237_1.c = this.input.LA(2);
                            throw nvae_237_1;
                        }
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_237_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 237, 0, this.input);

                        nvae_237_0.c = this.input.LA(1);
                        throw nvae_237_0;
                    }
                    switch (alt237) {
                        case 1 :
                            // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                            // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                            // IDP.g:2944:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
                            this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticSubtraction58681);
                            this.ruleArithmeticPlusMinus_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	}
                            	}
                            else{
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticSubtraction58687);
                            this.ruleTimespanArithmeticMultDiv_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            	}
                            	}
                            else{
                                selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput2.getTree());





                            break;
                        case 2 :
                            // IDP.g:2945:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                            // IDP.g:2945:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                            // IDP.g:2945:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets
                            this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticSubtraction58732);
                            this.ruleArithmeticPlusMinus_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	}
                            	}
                            else{
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanFromTimestampArithmeticSubtraction58738);
                            this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticSubtractionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            	}
                            	}
                            else{
                                selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput2.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA237 !== undefined && this.failedPredictDFA237)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null)); selections.push.apply(selections, (selectionOutput2!==null?selectionOutput2.value:null));
                    }


                    break;

                default :
                    break loop238;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromTimestampArithmeticSubtraction";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromTimestampArithmeticMultDiv_return: (function() {
        IDPParser.ruleTimespanFromTimestampArithmeticMultDiv_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromTimestampArithmeticMultDiv_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2951:1: ruleTimespanFromTimestampArithmeticMultDiv returns [value] : (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )* ;
    // $ANTLR start "ruleTimespanFromTimestampArithmeticMultDiv"
    ruleTimespanFromTimestampArithmeticMultDiv: function() {
        this.currentRule = "ruleTimespanFromTimestampArithmeticMultDiv";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromTimestampArithmeticMultDiv_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;
         var selectionOutput2 = null;


        var selections = []; 
        try {
            // IDP.g:2954:17: ( (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )* )
            // IDP.g:2954:33: (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2954:33: (selectionOutput= ruleTimespanArithmeticMultDiv )
            // IDP.g:2954:34: selectionOutput= ruleTimespanArithmeticMultDiv
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticMultDiv59021);
            this.ruleTimespanArithmeticMultDiv_DFAcall = false;

             if( typeof this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanArithmeticMultDiv();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanArithmeticMultDiv();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanArithmeticMultDiv();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections, (selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2955:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )*
            loop240:
            do {
                var alt240=2;
                var LA240_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA240_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA240_0==MINUS )) ) {
                    var LA240_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred416_IDP()'.indexOf("synpred") !== -1) ||  this.synpred416_IDP()) ) {
                        alt240=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA240_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA240_0==PLUS )) ) {
                    var LA240_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred416_IDP()'.indexOf("synpred") !== -1) ||  this.synpred416_IDP()) ) {
                        alt240=1;
                    }


                }


                switch (alt240) {
                case 1 :
                    // IDP.g:2957:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
                    // IDP.g:2957:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
                    var alt239=2;

                    var LA239_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA239_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA239_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA239_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA239_0==PLUS )) ) {
                        var LA239_1 = this.input.LA(2);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred415_IDP()'.indexOf("synpred") !== -1) ||  this.synpred415_IDP()) ) {
                            alt239=1;
                        }
                        else 
                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'true'.indexOf("synpred") !== -1) ||  true) ) {
                            alt239=2;
                        }
                        else {
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                            var nvae_239_1 =
                        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 239, 1, this.input);

                            nvae_239_1.c = this.input.LA(2);
                            throw nvae_239_1;
                        }
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_239_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 239, 0, this.input);

                        nvae_239_0.c = this.input.LA(1);
                        throw nvae_239_0;
                    }
                    switch (alt239) {
                        case 1 :
                            // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                            // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                            // IDP.g:2957:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
                            this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticMultDiv59133);
                            this.ruleArithmeticPlusMinus_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	}
                            	}
                            else{
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticMultDiv59139);
                            this.ruleTimespanArithmeticMultDiv_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            	}
                            	}
                            else{
                                selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput2.getTree());





                            break;
                        case 2 :
                            // IDP.g:2958:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                            // IDP.g:2958:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                            // IDP.g:2958:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets
                            this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticMultDiv59184);
                            this.ruleArithmeticPlusMinus_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            	}
                            	}
                            else{
                                arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanFromTimestampArithmeticMultDiv59190);
                            this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                             if( typeof this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            	}
                            	}
                            else{
                                selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput2.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA239 !== undefined && this.failedPredictDFA239)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null)); selections.push.apply(selections, (selectionOutput2!==null?selectionOutput2.value:null));
                    }


                    break;

                default :
                    break loop240;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromTimestampArithmeticMultDiv";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromTimestampArithmetic_return: (function() {
        IDPParser.ruleTimespanFromTimestampArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromTimestampArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2964:1: ruleTimespanFromTimestampArithmetic returns [value] : (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction | selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv ) ;
    // $ANTLR start "ruleTimespanFromTimestampArithmetic"
    ruleTimespanFromTimestampArithmetic: function() {
        this.currentRule = "ruleTimespanFromTimestampArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromTimestampArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;


        var selections = []; 
        try {
            // IDP.g:2967:17: ( (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction | selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv ) )
            // IDP.g:2967:33: (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction | selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv )
            root_0 = this.adaptor.nil();

            // IDP.g:2967:33: (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction | selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv )
            var alt241=2;

            this.ruleTimespanFromTimestampArithmetic_DFAcall=(typeof this.ruleTimespanFromTimestampArithmetic_DFAcall === 'undefined' ? false: this.ruleTimespanFromTimestampArithmetic_DFAcall); // only valid for synpred
            if(this.ruleTimespanFromTimestampArithmetic_DFAcall === false /*&& !this.failedPredictDFA241*/)
            {   
                this.dfa241NumberOfAlt = alt241;
                this.dfa241InRule = "ruleTimespanFromTimestampArithmetic";
            	this.dfa241Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber  = 241; 
                alt241 = this.dfa241.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt241 === 0 || alt241 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 241);
            		return retval;
                }
            }	
            else
                alt241 = this.dfa241AltNumber;	
            switch (alt241) {
                case 1 :
                    // IDP.g:2967:34: selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampArithmeticSubtraction_in_ruleTimespanFromTimestampArithmetic59473);
                    this.ruleTimespanFromTimestampArithmeticSubtraction_DFAcall = false;

                     if( typeof this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA241 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2967:101: selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampArithmeticMultDiv_in_ruleTimespanFromTimestampArithmetic59481);
                    this.ruleTimespanFromTimestampArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA241 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanFromTimestampArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanFromTimestampArithmeticMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanFromTimestampArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA241 !== undefined && this.failedPredictDFA241)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections = (selectionOutput!==null?selectionOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromTimestampArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromDateArithmetic_return: (function() {
        IDPParser.ruleTimespanFromDateArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromDateArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2970:1: ruleTimespanFromDateArithmetic returns [value] : (selectionOutput= ruleTimeSpanFromDateSubtraction | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) ) )* ;
    // $ANTLR start "ruleTimespanFromDateArithmetic"
    ruleTimespanFromDateArithmetic: function() {
        this.currentRule = "ruleTimespanFromDateArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromDateArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:2973:17: ( (selectionOutput= ruleTimeSpanFromDateSubtraction | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) ) )* )
            // IDP.g:2973:33: (selectionOutput= ruleTimeSpanFromDateSubtraction | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2973:33: (selectionOutput= ruleTimeSpanFromDateSubtraction | selectionOutput= ruleTimespanArithmeticForDateMultDiv )
            var alt242=2;

            this.ruleTimespanFromDateArithmetic_DFAcall=(typeof this.ruleTimespanFromDateArithmetic_DFAcall === 'undefined' ? false: this.ruleTimespanFromDateArithmetic_DFAcall); // only valid for synpred
            if(this.ruleTimespanFromDateArithmetic_DFAcall === false /*&& !this.failedPredictDFA242*/)
            {   
                this.dfa242NumberOfAlt = alt242;
                this.dfa242InRule = "ruleTimespanFromDateArithmetic";
            	this.dfa242Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  = 242; 
                alt242 = this.dfa242.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt242 === 0 || alt242 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 242);
            		return retval;
                }
            }	
            else
                alt242 = this.dfa242AltNumber;	
            switch (alt242) {
                case 1 :
                    // IDP.g:2973:34: selectionOutput= ruleTimeSpanFromDateSubtraction
                    this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtraction_in_ruleTimespanFromDateArithmetic59686);
                    this.ruleTimeSpanFromDateSubtraction_DFAcall = false;

                     if( typeof this.ruleTimespanFromDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA242 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimeSpanFromDateSubtraction();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimeSpanFromDateSubtraction();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimeSpanFromDateSubtraction();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:2973:86: selectionOutput= ruleTimespanArithmeticForDateMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticForDateMultDiv_in_ruleTimespanFromDateArithmetic59694);
                    this.ruleTimespanArithmeticForDateMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanFromDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA242 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                    break;

            }
            /*if(this.failedPredictDFA242 !== undefined && this.failedPredictDFA242)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2974:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) ) )*
            loop244:
            do {
                var alt244=2;
                var LA244_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA244_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA244_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA244_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA244_0==PLUS )) ) {
                    alt244=1;
                }


                switch (alt244) {
                case 1 :
                    // IDP.g:2974:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) )
                    // IDP.g:2974:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) ) )
                    // IDP.g:2974:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) )
                    // IDP.g:2974:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv ) )
                    // IDP.g:2974:36: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv )
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromDateArithmetic59738);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimespanFromDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    // IDP.g:2975:33: (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv )
                    var alt243=2;

                    this.ruleTimespanFromDateArithmetic_DFAcall=(typeof this.ruleTimespanFromDateArithmetic_DFAcall === 'undefined' ? false: this.ruleTimespanFromDateArithmetic_DFAcall); // only valid for synpred
                    if(this.ruleTimespanFromDateArithmetic_DFAcall === false /*&& !this.failedPredictDFA243*/)
                    {   
                        this.dfa243NumberOfAlt = alt243;
                        this.dfa243InRule = "ruleTimespanFromDateArithmetic";
                    	this.dfa243Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                    	this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  = 243; 
                        alt243 = this.dfa243.predict(this.input);
                    	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt243 === 0 || alt243 === EOF)) {
                    		this.parseUtilsLib.handleAllDFAOptions(this, 243);
                    		return retval;
                        }
                    }	
                    else
                        alt243 = this.dfa243AltNumber;	
                    switch (alt243) {
                        case 1 :
                            // IDP.g:2975:35: selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets
                            this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_ruleTimespanFromDateArithmetic59781);
                            this.ruleTimeSpanFromDateSubtractionWithBrackets_DFAcall = false;

                             if( typeof this.ruleTimespanFromDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromDateArithmeticCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA243 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateArithmeticCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                            	}
                            	}
                            else{
                                selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                            break;
                        case 2 :
                            // IDP.g:2975:98: selectionOutput= ruleTimespanArithmeticForDateMultDiv
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticForDateMultDiv_in_ruleTimespanFromDateArithmetic59788);
                            this.ruleTimespanArithmeticForDateMultDiv_DFAcall = false;

                             if( typeof this.ruleTimespanFromDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateArithmeticCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanFromDateArithmeticCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA243 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateArithmeticCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                            	}
                            	}
                            else{
                                selectionOutput=this.ruleTimespanArithmeticForDateMultDiv();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());


                            break;

                    }
                    /*if(this.failedPredictDFA243 !== undefined && this.failedPredictDFA243)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;

                default :
                    break loop244;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromDateArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanArithmeticAfterTimestampArithmetic_return: (function() {
        IDPParser.ruleTimespanArithmeticAfterTimestampArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanArithmeticAfterTimestampArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2978:1: ruleTimespanArithmeticAfterTimestampArithmetic returns [value] : (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) ) )* ;
    // $ANTLR start "ruleTimespanArithmeticAfterTimestampArithmetic"
    ruleTimespanArithmeticAfterTimestampArithmetic: function() {
        this.currentRule = "ruleTimespanArithmeticAfterTimestampArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanArithmeticAfterTimestampArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:2981:17: ( (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) ) )* )
            // IDP.g:2981:33: (selectionOutput= ruleTimespanArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2981:33: (selectionOutput= ruleTimespanArithmeticMultDiv )
            // IDP.g:2981:34: selectionOutput= ruleTimespanArithmeticMultDiv
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanArithmeticAfterTimestampArithmetic60001);
            this.ruleTimespanArithmeticMultDiv_DFAcall = false;

             if( typeof this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanArithmeticMultDiv();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanArithmeticMultDiv();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanArithmeticMultDiv();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2982:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) ) )*
            loop245:
            do {
                var alt245=2;
                var LA245_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA245_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA245_0==MINUS )) ) {
                    var LA245_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred421_IDP()'.indexOf("synpred") !== -1) ||  this.synpred421_IDP()) ) {
                        alt245=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA245_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA245_0==PLUS )) ) {
                    var LA245_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred421_IDP()'.indexOf("synpred") !== -1) ||  this.synpred421_IDP()) ) {
                        alt245=1;
                    }


                }


                switch (alt245) {
                case 1 :
                    // IDP.g:2982:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) )
                    // IDP.g:2982:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) )
                    // IDP.g:2982:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) )
                    // IDP.g:2982:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) )
                    // IDP.g:2982:36: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv )
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanArithmeticAfterTimestampArithmetic60045);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    // IDP.g:2983:33: (selectionOutput= ruleTimespanArithmeticMultDiv )
                    // IDP.g:2983:34: selectionOutput= ruleTimespanArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanArithmeticAfterTimestampArithmetic60087);
                    this.ruleTimespanArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterTimestampArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanArithmeticMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;

                default :
                    break loop245;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanArithmeticAfterTimestampArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanArithmeticAfterDateArithmetic_return: (function() {
        IDPParser.ruleTimespanArithmeticAfterDateArithmetic_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanArithmeticAfterDateArithmetic_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2986:1: ruleTimespanArithmeticAfterDateArithmetic returns [value] : (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) ) )* ;
    // $ANTLR start "ruleTimespanArithmeticAfterDateArithmetic"
    ruleTimespanArithmeticAfterDateArithmetic: function() {
        this.currentRule = "ruleTimespanArithmeticAfterDateArithmetic";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanArithmeticAfterDateArithmetic_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:2989:17: ( (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) ) )* )
            // IDP.g:2989:33: (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) ) )*
            root_0 = this.adaptor.nil();

            // IDP.g:2989:33: (selectionOutput= ruleTimespanForDateArithmeticMultDiv )
            // IDP.g:2989:34: selectionOutput= ruleTimespanForDateArithmeticMultDiv
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanArithmeticAfterDateArithmetic60267);
            this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

             if( typeof this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2990:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) ) )*
            loop246:
            do {
                var alt246=2;
                var LA246_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA246_0==MINUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA246_0==MINUS )) ) {
                    var LA246_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred422_IDP()'.indexOf("synpred") !== -1) ||  this.synpred422_IDP()) ) {
                        alt246=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(PLUS,PLUS,1) && LA246_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(PLUS,PLUS,1) && LA246_0==PLUS )) ) {
                    var LA246_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred422_IDP()'.indexOf("synpred") !== -1) ||  this.synpred422_IDP()) ) {
                        alt246=1;
                    }


                }


                switch (alt246) {
                case 1 :
                    // IDP.g:2990:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) )
                    // IDP.g:2990:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) )
                    // IDP.g:2990:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )
                    // IDP.g:2990:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )
                    // IDP.g:2990:36: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv )
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanArithmeticAfterDateArithmetic60311);
                    this.ruleArithmeticPlusMinus_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    // IDP.g:2991:33: (selectionOutput= ruleTimespanForDateArithmeticMultDiv )
                    // IDP.g:2991:34: selectionOutput= ruleTimespanForDateArithmeticMultDiv
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanArithmeticAfterDateArithmetic60353);
                    this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticAfterDateArithmeticCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
                    }








                    break;

                default :
                    break loop246;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanArithmeticAfterDateArithmetic";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForDateArithmeticMultDiv_return: (function() {
        IDPParser.ruleTimespanForDateArithmeticMultDiv_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForDateArithmeticMultDiv_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:2994:1: ruleTimespanForDateArithmeticMultDiv returns [value] : (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* ;
    // $ANTLR start "ruleTimespanForDateArithmeticMultDiv"
    ruleTimespanForDateArithmeticMultDiv: function() {
        this.currentRule = "ruleTimespanForDateArithmeticMultDiv";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForDateArithmeticMultDiv_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:2997:17: ( (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* )
            // IDP.g:2998:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            root_0 = this.adaptor.nil();

            // IDP.g:2998:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*
            loop247:
            do {
                var alt247=2;
                this.ruleTimespanForDateArithmeticMultDiv_DFAcall=(typeof this.ruleTimespanForDateArithmeticMultDiv_DFAcall === 'undefined' ? false: this.ruleTimespanForDateArithmeticMultDiv_DFAcall); // only valid for synpred
                if(this.ruleTimespanForDateArithmeticMultDiv_DFAcall === false /*&& !this.failedPredictDFA247*/)
                {   
                    this.dfa247NumberOfAlt = alt247;
                    this.dfa247InRule = "ruleTimespanForDateArithmeticMultDiv";
                	this.dfa247Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                	this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  = 247; 
                    alt247 = this.dfa247.predict(this.input);
                	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt247 === 0 || alt247 === EOF)) {
                		this.parseUtilsLib.handleAllDFAOptions(this, 247);
                		return retval;
                    }
                }	
                else
                    alt247 = this.dfa247AltNumber;	
                switch (alt247) {
                case 1 :
                    // IDP.g:2998:36: selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60570);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA247 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMult_in_ruleTimespanForDateArithmeticMultDiv60578);
                    this.ruleArithmeticMult_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA247 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMult();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }


                    break;

                default :
                    break loop247;
                }
            } while (true);

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60624);
            this.ruleTimespanForDateBaseSelection_DFAcall = false;

             if( typeof this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanForDateBaseSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanForDateBaseSelection();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanForDateBaseSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:2999:146: (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            loop248:
            do {
                var alt248=2;
                var LA248_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MULT,MULT,1) && LA248_0==MULT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MULT,MULT,1) && LA248_0==MULT )) ) {
                    var LA248_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred424_IDP()'.indexOf("synpred") !== -1) ||  this.synpred424_IDP()) ) {
                        alt248=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DIV,DIV,1) && LA248_0==DIV )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DIV,DIV,1) && LA248_0==DIV )) ) {
                    var LA248_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred424_IDP()'.indexOf("synpred") !== -1) ||  this.synpred424_IDP()) ) {
                        alt248=1;
                    }


                }


                switch (alt248) {
                case 1 :
                    // IDP.g:2999:147: arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanForDateArithmeticMultDiv60633);
                    this.ruleArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA248 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60676);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA248 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;

                default :
                    break loop248;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForDateArithmeticMultDiv";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanArithmeticMultDiv_return: (function() {
        IDPParser.ruleTimespanArithmeticMultDiv_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanArithmeticMultDiv_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3003:1: ruleTimespanArithmeticMultDiv returns [value] : (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* ;
    // $ANTLR start "ruleTimespanArithmeticMultDiv"
    ruleTimespanArithmeticMultDiv: function() {
        this.currentRule = "ruleTimespanArithmeticMultDiv";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanArithmeticMultDiv_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:3006:17: ( (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* )
            // IDP.g:3007:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            root_0 = this.adaptor.nil();

            // IDP.g:3007:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*
            loop249:
            do {
                var alt249=2;
                this.ruleTimespanArithmeticMultDiv_DFAcall=(typeof this.ruleTimespanArithmeticMultDiv_DFAcall === 'undefined' ? false: this.ruleTimespanArithmeticMultDiv_DFAcall); // only valid for synpred
                if(this.ruleTimespanArithmeticMultDiv_DFAcall === false /*&& !this.failedPredictDFA249*/)
                {   
                    this.dfa249NumberOfAlt = alt249;
                    this.dfa249InRule = "ruleTimespanArithmeticMultDiv";
                	this.dfa249Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                	this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  = 249; 
                    alt249 = this.dfa249.predict(this.input);
                	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt249 === 0 || alt249 === EOF)) {
                		this.parseUtilsLib.handleAllDFAOptions(this, 249);
                		return retval;
                    }
                }	
                else
                    alt249 = this.dfa249AltNumber;	
                switch (alt249) {
                case 1 :
                    // IDP.g:3007:36: selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticMultDiv60858);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA249 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMult_in_ruleTimespanArithmeticMultDiv60866);
                    this.ruleArithmeticMult_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA249 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMult();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }


                    break;

                default :
                    break loop249;
                }
            } while (true);

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanBaseSelection_in_ruleTimespanArithmeticMultDiv60912);
            this.ruleTimespanBaseSelection_DFAcall = false;

             if( typeof this.ruleTimespanArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanArithmeticMultDivCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanBaseSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticMultDivCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanBaseSelection();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanBaseSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:3008:139: (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            loop250:
            do {
                var alt250=2;
                var LA250_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MULT,MULT,1) && LA250_0==MULT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MULT,MULT,1) && LA250_0==MULT )) ) {
                    var LA250_2 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred426_IDP()'.indexOf("synpred") !== -1) ||  this.synpred426_IDP()) ) {
                        alt250=1;
                    }


                }
                else 
                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(DIV,DIV,1) && LA250_0==DIV )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(DIV,DIV,1) && LA250_0==DIV )) ) {
                    var LA250_3 = this.input.LA(2);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred426_IDP()'.indexOf("synpred") !== -1) ||  this.synpred426_IDP()) ) {
                        alt250=1;
                    }


                }


                switch (alt250) {
                case 1 :
                    // IDP.g:3008:140: arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanArithmeticMultDiv60921);
                    this.ruleArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA250 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticMultDiv60964);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA250 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;

                default :
                    break loop250;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanArithmeticMultDiv";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanArithmeticForDateMultDiv_return: (function() {
        IDPParser.ruleTimespanArithmeticForDateMultDiv_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanArithmeticForDateMultDiv_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3012:1: ruleTimespanArithmeticForDateMultDiv returns [value] : (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* ;
    // $ANTLR start "ruleTimespanArithmeticForDateMultDiv"
    ruleTimespanArithmeticForDateMultDiv: function() {
        this.currentRule = "ruleTimespanArithmeticForDateMultDiv";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanArithmeticForDateMultDiv_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionOutput = null;
         var arithmeticOperOutput = null;


        var selections = []; 
        try {
            // IDP.g:3015:17: ( (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )* )
            // IDP.g:3016:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )* selectionOutput= ruleTimespanForDateBaseSelection (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            root_0 = this.adaptor.nil();

            // IDP.g:3016:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*
            loop251:
            do {
                var alt251=2;
                this.ruleTimespanArithmeticForDateMultDiv_DFAcall=(typeof this.ruleTimespanArithmeticForDateMultDiv_DFAcall === 'undefined' ? false: this.ruleTimespanArithmeticForDateMultDiv_DFAcall); // only valid for synpred
                if(this.ruleTimespanArithmeticForDateMultDiv_DFAcall === false /*&& !this.failedPredictDFA251*/)
                {   
                    this.dfa251NumberOfAlt = alt251;
                    this.dfa251InRule = "ruleTimespanArithmeticForDateMultDiv";
                	this.dfa251Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
                	this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  = 251; 
                    alt251 = this.dfa251.predict(this.input);
                	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt251 === 0 || alt251 === EOF)) {
                		this.parseUtilsLib.handleAllDFAOptions(this, 251);
                		return retval;
                    }
                }	
                else
                    alt251 = this.dfa251AltNumber;	
                switch (alt251) {
                case 1 :
                    // IDP.g:3016:36: selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61146);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA251 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMult_in_ruleTimespanArithmeticForDateMultDiv61154);
                    this.ruleArithmeticMult_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA251 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMult();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMult();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }


                    break;

                default :
                    break loop251;
                }
            } while (true);

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61200);
            this.ruleTimespanForDateBaseSelection_DFAcall = false;

             if( typeof this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionOutput=this.ruleTimespanForDateBaseSelection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionOutput=this.ruleTimespanForDateBaseSelection();

            	}
            	}
            else{
                selectionOutput=this.ruleTimespanForDateBaseSelection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selections.push.apply(selections,(selectionOutput!==null?selectionOutput.value:null));
            }
            // IDP.g:3017:146: (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )*
            loop252:
            do {
                var alt252=2;
                var LA252_0 = this.input.LA(1);


                if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(MULT,DIV,1) && LA252_0>=MULT && LA252_0<=DIV )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(MULT,DIV,1) && LA252_0>=MULT && LA252_0<=DIV )) ) {
                    alt252=1;
                }


                switch (alt252) {
                case 1 :
                    // IDP.g:3017:147: arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection
                    this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanArithmeticForDateMultDiv61209);
                    this.ruleArithmeticMultDiv_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA252 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    	}
                    	}
                    else{
                        arithmeticOperOutput=this.ruleArithmeticMultDiv();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, arithmeticOperOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((arithmeticOperOutput!==null?arithmeticOperOutput.value:null));
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61252);
                    this.ruleNumericBaseSelection_DFAcall = false;

                     if( typeof this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber !== 'undefined' && this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA252 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionOutput=this.ruleNumericBaseSelection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanArithmeticForDateMultDivCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionOutput=this.ruleNumericBaseSelection();

                    	}
                    	}
                    else{
                        selectionOutput=this.ruleNumericBaseSelection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selections.push((selectionOutput!==null?selectionOutput.value:null));
                    }


                    break;

                default :
                    break loop252;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = selections;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanArithmeticForDateMultDiv";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanClause_return: (function() {
        IDPParser.ruleTimespanClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3021:1: ruleTimespanClause returns [value] : (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimespanClause"
    ruleTimespanClause: function() {
        this.currentRule = "ruleTimespanClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB217 = null;
        var RROUNDB218 = null;
         var selectionClauseOutput = null;

        var LROUNDB217_tree=null;
        var RROUNDB218_tree=null;

        try {
            // IDP.g:3022:17: ( (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) )
            // IDP.g:3022:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:3022:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            var alt253=2;

            this.ruleTimespanClause_DFAcall=(typeof this.ruleTimespanClause_DFAcall === 'undefined' ? false: this.ruleTimespanClause_DFAcall); // only valid for synpred
            if(this.ruleTimespanClause_DFAcall === false /*&& !this.failedPredictDFA253*/)
            {   
                this.dfa253NumberOfAlt = alt253;
                this.dfa253InRule = "ruleTimespanClause";
            	this.dfa253Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanClauseCurrentDecisionNumber  = 253; 
                alt253 = this.dfa253.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt253 === 0 || alt253 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 253);
            		return retval;
                }
            }	
            else
                alt253 = this.dfa253AltNumber;	
            switch (alt253) {
                case 1 :
                    // IDP.g:3022:34: selectionClauseOutput= ruleTimespanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanClause61313);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA253 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:3023:35: LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB217=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanClause61349); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB217_tree = this.adaptor.create(LROUNDB217);
                    this.adaptor.addChild(root_0, LROUNDB217_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanClause61355);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA253 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB218=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanClause61357); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB218_tree = this.adaptor.create(RROUNDB218);
                    this.adaptor.addChild(root_0, RROUNDB218_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA253 !== undefined && this.failedPredictDFA253)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromDateClause_return: (function() {
        IDPParser.ruleTimespanFromDateClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromDateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3027:1: ruleTimespanFromDateClause returns [value] : (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimespanFromDateClause"
    ruleTimespanFromDateClause: function() {
        this.currentRule = "ruleTimespanFromDateClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromDateClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB219 = null;
        var RROUNDB220 = null;
         var selectionClauseOutput = null;

        var LROUNDB219_tree=null;
        var RROUNDB220_tree=null;

        try {
            // IDP.g:3028:17: ( (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) )
            // IDP.g:3028:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:3028:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            var alt254=2;

            this.ruleTimespanFromDateClause_DFAcall=(typeof this.ruleTimespanFromDateClause_DFAcall === 'undefined' ? false: this.ruleTimespanFromDateClause_DFAcall); // only valid for synpred
            if(this.ruleTimespanFromDateClause_DFAcall === false /*&& !this.failedPredictDFA254*/)
            {   
                this.dfa254NumberOfAlt = alt254;
                this.dfa254InRule = "ruleTimespanFromDateClause";
            	this.dfa254Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanFromDateClauseCurrentDecisionNumber  = 254; 
                alt254 = this.dfa254.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt254 === 0 || alt254 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 254);
            		return retval;
                }
            }	
            else
                alt254 = this.dfa254AltNumber;	
            switch (alt254) {
                case 1 :
                    // IDP.g:3028:34: selectionClauseOutput= ruleTimespanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromDateClause61465);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanFromDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA254 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:3029:35: LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB219=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanFromDateClause61501); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB219_tree = this.adaptor.create(LROUNDB219);
                    this.adaptor.addChild(root_0, LROUNDB219_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromDateClause61507);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanFromDateClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromDateClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromDateClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA254 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromDateClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB220=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanFromDateClause61509); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB220_tree = this.adaptor.create(RROUNDB220);
                    this.adaptor.addChild(root_0, RROUNDB220_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA254 !== undefined && this.failedPredictDFA254)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromDateClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanFromTimestampClause_return: (function() {
        IDPParser.ruleTimespanFromTimestampClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanFromTimestampClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3033:1: ruleTimespanFromTimestampClause returns [value] : (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) ;
    // $ANTLR start "ruleTimespanFromTimestampClause"
    ruleTimespanFromTimestampClause: function() {
        this.currentRule = "ruleTimespanFromTimestampClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanFromTimestampClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB221 = null;
        var RROUNDB222 = null;
         var selectionClauseOutput = null;

        var LROUNDB221_tree=null;
        var RROUNDB222_tree=null;

        try {
            // IDP.g:3034:17: ( (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB ) )
            // IDP.g:3034:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:3034:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )
            var alt255=2;

            this.ruleTimespanFromTimestampClause_DFAcall=(typeof this.ruleTimespanFromTimestampClause_DFAcall === 'undefined' ? false: this.ruleTimespanFromTimestampClause_DFAcall); // only valid for synpred
            if(this.ruleTimespanFromTimestampClause_DFAcall === false /*&& !this.failedPredictDFA255*/)
            {   
                this.dfa255NumberOfAlt = alt255;
                this.dfa255InRule = "ruleTimespanFromTimestampClause";
            	this.dfa255Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanFromTimestampClauseCurrentDecisionNumber  = 255; 
                alt255 = this.dfa255.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt255 === 0 || alt255 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 255);
            		return retval;
                }
            }	
            else
                alt255 = this.dfa255AltNumber;	
            switch (alt255) {
                case 1 :
                    // IDP.g:3034:34: selectionClauseOutput= ruleTimespanSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromTimestampClause61633);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanFromTimestampClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromTimestampClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA255 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:3035:35: LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB221=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanFromTimestampClause61669); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB221_tree = this.adaptor.create(LROUNDB221);
                    this.adaptor.addChild(root_0, LROUNDB221_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromTimestampClause61675);
                    this.ruleTimespanSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanFromTimestampClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanFromTimestampClauseCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanFromTimestampClauseCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA255 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanFromTimestampClauseCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	selectionClauseOutput=this.ruleTimespanSelectionClause();

                    	}
                    	}
                    else{
                        selectionClauseOutput=this.ruleTimespanSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionClauseOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB222=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanFromTimestampClause61677); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB222_tree = this.adaptor.create(RROUNDB222);
                    this.adaptor.addChild(root_0, RROUNDB222_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA255 !== undefined && this.failedPredictDFA255)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (selectionClauseOutput!==null?selectionClauseOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanFromTimestampClause";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanStatement_return: (function() {
        IDPParser.ruleTimespanStatement_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3039:1: ruleTimespanStatement returns [value] : selectionLeftOutput= ruleTimespanClause ;
    // $ANTLR start "ruleTimespanStatement"
    ruleTimespanStatement: function() {
        this.currentRule = "ruleTimespanStatement";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanStatement_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selectionLeftOutput = null;


        var ruleOutput = {}; var model = new this.entityModelConstractorLib.Model(); 
        try {
            // IDP.g:3042:17: (selectionLeftOutput= ruleTimespanClause )
            // IDP.g:3042:33: selectionLeftOutput= ruleTimespanClause
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_ruleTimespanStatement61849);
            this.ruleTimespanClause_DFAcall = false;

             if( typeof this.ruleTimespanStatementCurrentDecisionNumber !== 'undefined' && this.ruleTimespanStatementCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanStatementCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selectionLeftOutput=this.ruleTimespanClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanStatementCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selectionLeftOutput=this.ruleTimespanClause();

            	}
            	}
            else{
                selectionLeftOutput=this.ruleTimespanClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selectionLeftOutput.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.leftSelectionClause = (selectionLeftOutput!==null?selectionLeftOutput.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              var statement = new this.entityModelLib.SimpleStatement(ruleOutput); model.push(statement); retval.value = model;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanStatement";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForDateSetOfValues_return: (function() {
        IDPParser.ruleTimespanForDateSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForDateSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3044:1: ruleTimespanForDateSetOfValues returns [value] : LROUNDB ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB ;
    // $ANTLR start "ruleTimespanForDateSetOfValues"
    ruleTimespanForDateSetOfValues: function() {
        this.currentRule = "ruleTimespanForDateSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForDateSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB223 = null;
        var SEMICOLON224 = null;
        var RROUNDB225 = null;
         var numberOutput = null;

        var LROUNDB223_tree=null;
        var SEMICOLON224_tree=null;
        var RROUNDB225_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                                        retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value);
                                        
        try {
            // IDP.g:3048:9: ( LROUNDB ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB )
            // IDP.g:3048:17: LROUNDB ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB223=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanForDateSetOfValues62033); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB223_tree = this.adaptor.create(LROUNDB223);
            this.adaptor.addChild(root_0, LROUNDB223_tree);
            }
            // IDP.g:3048:25: ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) )
            var alt257=2;

            this.ruleTimespanForDateSetOfValues_DFAcall=(typeof this.ruleTimespanForDateSetOfValues_DFAcall === 'undefined' ? false: this.ruleTimespanForDateSetOfValues_DFAcall); // only valid for synpred
            if(this.ruleTimespanForDateSetOfValues_DFAcall === false /*&& !this.failedPredictDFA257*/)
            {   
                this.dfa257NumberOfAlt = alt257;
                this.dfa257InRule = "ruleTimespanForDateSetOfValues";
            	this.dfa257Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber  = 257; 
                alt257 = this.dfa257.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt257 === 0 || alt257 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 257);
            		return retval;
                }
            }	
            else
                alt257 = this.dfa257AltNumber;	
            switch (alt257) {
                case 1 :
                    // IDP.g:3048:26: (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* )
                    // IDP.g:3048:26: (numberOutput= ruleTimespanFromDateClause )
                    // IDP.g:3048:27: numberOutput= ruleTimespanFromDateClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromDateClause_in_ruleTimespanForDateSetOfValues62041);
                    this.ruleTimespanFromDateClause_DFAcall = false;

                     if( typeof this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleTimespanFromDateClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleTimespanFromDateClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleTimespanFromDateClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }



                    // IDP.g:3049:17: ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* )
                    // IDP.g:3049:18: ( SEMICOLON numberOutput= ruleTimespanFromDateClause )*
                    // IDP.g:3049:18: ( SEMICOLON numberOutput= ruleTimespanFromDateClause )*
                    loop256:
                    do {
                        var alt256=2;
                        var LA256_0 = this.input.LA(1);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA256_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA256_0==SEMICOLON )) ) {
                            alt256=1;
                        }


                        switch (alt256) {
                        case 1 :
                            // IDP.g:3049:19: SEMICOLON numberOutput= ruleTimespanFromDateClause


                            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                            SEMICOLON224=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleTimespanForDateSetOfValues62065); if (this.state.failed) return retval;
                            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            SEMICOLON224_tree = this.adaptor.create(SEMICOLON224);
                            this.adaptor.addChild(root_0, SEMICOLON224_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromDateClause_in_ruleTimespanForDateSetOfValues62071);
                            this.ruleTimespanFromDateClause_DFAcall = false;

                             if( typeof this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA256 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                numberOutput=this.ruleTimespanFromDateClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	numberOutput=this.ruleTimespanFromDateClause();

                            	}
                            	}
                            else{
                                numberOutput=this.ruleTimespanFromDateClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              retval.value.push((numberOutput!==null?numberOutput.value:null));
                            }


                            break;

                        default :
                            break loop256;
                        }
                    } while (true);






                    break;
                case 2 :
                    // IDP.g:3049:113: (numberOutput= ruleTimespanCollectionSelectionClause )
                    // IDP.g:3049:113: (numberOutput= ruleTimespanCollectionSelectionClause )
                    // IDP.g:3049:114: numberOutput= ruleTimespanCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollectionSelectionClause_in_ruleTimespanForDateSetOfValues62086);
                    this.ruleTimespanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleTimespanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForDateSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleTimespanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleTimespanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA257 !== undefined && this.failedPredictDFA257)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB225=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanForDateSetOfValues62110); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB225_tree = this.adaptor.create(RROUNDB225);
            this.adaptor.addChild(root_0, RROUNDB225_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForDateSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanForTimestampSetOfValues_return: (function() {
        IDPParser.ruleTimespanForTimestampSetOfValues_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanForTimestampSetOfValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3053:1: ruleTimespanForTimestampSetOfValues returns [value] : LROUNDB ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB ;
    // $ANTLR start "ruleTimespanForTimestampSetOfValues"
    ruleTimespanForTimestampSetOfValues: function() {
        this.currentRule = "ruleTimespanForTimestampSetOfValues";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanForTimestampSetOfValues_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB226 = null;
        var SEMICOLON227 = null;
        var RROUNDB228 = null;
         var numberOutput = null;

        var LROUNDB226_tree=null;
        var SEMICOLON227_tree=null;
        var RROUNDB228_tree=null;

         retval.value = new this.entityModelLib.SetOfValues(); 
                                                        retval.value.setValueType(this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.STRING.value);
                                        
        try {
            // IDP.g:3057:9: ( LROUNDB ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB )
            // IDP.g:3057:17: LROUNDB ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) ) RROUNDB
            root_0 = this.adaptor.nil();



            this.pushNextTokens(LROUNDB,LROUNDB,1);
            LROUNDB226=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanForTimestampSetOfValues62223); if (this.state.failed) return retval;
            if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            LROUNDB226_tree = this.adaptor.create(LROUNDB226);
            this.adaptor.addChild(root_0, LROUNDB226_tree);
            }
            // IDP.g:3057:25: ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) )
            var alt259=2;

            this.ruleTimespanForTimestampSetOfValues_DFAcall=(typeof this.ruleTimespanForTimestampSetOfValues_DFAcall === 'undefined' ? false: this.ruleTimespanForTimestampSetOfValues_DFAcall); // only valid for synpred
            if(this.ruleTimespanForTimestampSetOfValues_DFAcall === false /*&& !this.failedPredictDFA259*/)
            {   
                this.dfa259NumberOfAlt = alt259;
                this.dfa259InRule = "ruleTimespanForTimestampSetOfValues";
            	this.dfa259Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
            	this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber  = 259; 
                alt259 = this.dfa259.predict(this.input);
            	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt259 === 0 || alt259 === EOF)) {
            		this.parseUtilsLib.handleAllDFAOptions(this, 259);
            		return retval;
                }
            }	
            else
                alt259 = this.dfa259AltNumber;	
            switch (alt259) {
                case 1 :
                    // IDP.g:3057:26: (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* )
                    // IDP.g:3057:26: (numberOutput= ruleTimespanFromTimestampClause )
                    // IDP.g:3057:27: numberOutput= ruleTimespanFromTimestampClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampClause_in_ruleTimespanForTimestampSetOfValues62231);
                    this.ruleTimespanFromTimestampClause_DFAcall = false;

                     if( typeof this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleTimespanFromTimestampClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleTimespanFromTimestampClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleTimespanFromTimestampClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }



                    // IDP.g:3058:17: ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* )
                    // IDP.g:3058:18: ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )*
                    // IDP.g:3058:18: ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )*
                    loop258:
                    do {
                        var alt258=2;
                        var LA258_0 = this.input.LA(1);


                        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA258_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA258_0==SEMICOLON )) ) {
                            alt258=1;
                        }


                        switch (alt258) {
                        case 1 :
                            // IDP.g:3058:19: SEMICOLON numberOutput= ruleTimespanFromTimestampClause


                            this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                            SEMICOLON227=this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_ruleTimespanForTimestampSetOfValues62255); if (this.state.failed) return retval;
                            if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            SEMICOLON227_tree = this.adaptor.create(SEMICOLON227);
                            this.adaptor.addChild(root_0, SEMICOLON227_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampClause_in_ruleTimespanForTimestampSetOfValues62261);
                            this.ruleTimespanFromTimestampClause_DFAcall = false;

                             if( typeof this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA258 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                numberOutput=this.ruleTimespanFromTimestampClause();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	numberOutput=this.ruleTimespanFromTimestampClause();

                            	}
                            	}
                            else{
                                numberOutput=this.ruleTimespanFromTimestampClause();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              retval.value.push((numberOutput!==null?numberOutput.value:null));
                            }


                            break;

                        default :
                            break loop258;
                        }
                    } while (true);






                    break;
                case 2 :
                    // IDP.g:3058:118: (numberOutput= ruleTimespanCollectionSelectionClause )
                    // IDP.g:3058:118: (numberOutput= ruleTimespanCollectionSelectionClause )
                    // IDP.g:3058:119: numberOutput= ruleTimespanCollectionSelectionClause
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollectionSelectionClause_in_ruleTimespanForTimestampSetOfValues62276);
                    this.ruleTimespanCollectionSelectionClause_DFAcall = false;

                     if( typeof this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber !== 'undefined' && this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        numberOutput=this.ruleTimespanCollectionSelectionClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanForTimestampSetOfValuesCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	numberOutput=this.ruleTimespanCollectionSelectionClause();

                    	}
                    	}
                    else{
                        numberOutput=this.ruleTimespanCollectionSelectionClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, numberOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      retval.value.push((numberOutput!==null?numberOutput.value:null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA259 !== undefined && this.failedPredictDFA259)
            { 
                throw null;
            }*/



            this.pushNextTokens(RROUNDB,RROUNDB,1);
            RROUNDB228=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanForTimestampSetOfValues62300); if (this.state.failed) return retval;
            if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            RROUNDB228_tree = this.adaptor.create(RROUNDB228);
            this.adaptor.addChild(root_0, RROUNDB228_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanForTimestampSetOfValues";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanCollectionSelectionClause_return: (function() {
        IDPParser.ruleTimespanCollectionSelectionClause_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanCollectionSelectionClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3062:1: ruleTimespanCollectionSelectionClause returns [value] : selction= ruleTimespanCollection ;
    // $ANTLR start "ruleTimespanCollectionSelectionClause"
    ruleTimespanCollectionSelectionClause: function() {
        this.currentRule = "ruleTimespanCollectionSelectionClause";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanCollectionSelectionClause_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var selction = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var modelManager = this.parseModelLib.getModelManger(); delete modelManager.isCurrent; var selectionClauseOutput = new this.entityModelLib.SelectionClause(); 
        try {
            // IDP.g:3065:17: (selction= ruleTimespanCollection )
            // IDP.g:3065:33: selction= ruleTimespanCollection
            root_0 = this.adaptor.nil();

            this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollection_in_ruleTimespanCollectionSelectionClause62450);
            this.ruleTimespanCollection_DFAcall = false;

             if( typeof this.ruleTimespanCollectionSelectionClauseCurrentDecisionNumber !== 'undefined' && this.ruleTimespanCollectionSelectionClauseCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanCollectionSelectionClauseCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                selction=this.ruleTimespanCollection();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanCollectionSelectionClauseCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	selction=this.ruleTimespanCollection();

            	}
            	}
            else{
                selction=this.ruleTimespanCollection();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, selction.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.push((selction!==null?selction.value:null));
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionClauseOutput.addCurrentProperty(modelManager.hasOwnProperty("isCurrent")? modelManager.isCurrent : false); retval.value = selectionClauseOutput; delete modelManager.isCurrent;
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanCollectionSelectionClause";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleTimespanAggregationFunction_return: (function() {
        IDPParser.ruleTimespanAggregationFunction_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanAggregationFunction_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3072:1: ruleTimespanAggregationFunction returns [value] : ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleTimespanCollection | LROUNDB compoundSelectionOutput= ruleTimespanCollection RROUNDB ) ;
    // $ANTLR start "ruleTimespanAggregationFunction"
    ruleTimespanAggregationFunction: function() {
        this.currentRule = "ruleTimespanAggregationFunction";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanAggregationFunction_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB229 = null;
        var RROUNDB230 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;

        var LROUNDB229_tree=null;
        var RROUNDB230_tree=null;

         var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value;
                                        
        try {
            // IDP.g:3077:17: ( ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleTimespanCollection | LROUNDB compoundSelectionOutput= ruleTimespanCollection RROUNDB ) )
            // IDP.g:3077:33: ( (aggregationOptionOutput= numericAggregationOption ) ) (compoundSelectionOutput= ruleTimespanCollection | LROUNDB compoundSelectionOutput= ruleTimespanCollection RROUNDB )
            root_0 = this.adaptor.nil();

            // IDP.g:3077:33: ( (aggregationOptionOutput= numericAggregationOption ) )
            // IDP.g:3077:34: (aggregationOptionOutput= numericAggregationOption )
            // IDP.g:3077:34: (aggregationOptionOutput= numericAggregationOption )
            // IDP.g:3077:35: aggregationOptionOutput= numericAggregationOption
            this.pushFollow(IDPParser.FOLLOW_numericAggregationOption_in_ruleTimespanAggregationFunction62597);
            this.numericAggregationOption_DFAcall = false;

             if( typeof this.ruleTimespanAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanAggregationFunctionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanAggregationFunctionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.numericAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanAggregationFunctionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.numericAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.numericAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());



            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs);
            }



            // IDP.g:3078:34: (compoundSelectionOutput= ruleTimespanCollection | LROUNDB compoundSelectionOutput= ruleTimespanCollection RROUNDB )
            var alt260=2;

            var LA260_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA260_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA260_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA260_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA260_0>=ZERO_OR_ONE && LA260_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA260_0==INT )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA260_0>=HIGHEST && LA260_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA260_0>=TYPETIMEINTERVALCOLLECTION && LA260_0<=TYPETIMEINTERVALDT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MAXIMUM_OF,MAXIMUM_OF,1) && LA260_0==MAXIMUM_OF )||( this.pushNextTokens(MINIMUM_OF,MINIMUM_OF,1) && LA260_0==MINIMUM_OF )||( this.pushNextTokens(ALL,ALL,1) && LA260_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA260_0>=ZERO_OR_ONE && LA260_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA260_0==INT )||(  this.pushNextTokens(HIGHEST,SUM_OF,1) && LA260_0>=HIGHEST && LA260_0<=SUM_OF )||(  this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,1) && LA260_0>=TYPETIMEINTERVALCOLLECTION && LA260_0<=TYPETIMEINTERVALDT )) ) {
                alt260=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA260_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA260_0==LROUNDB )) ) {
                alt260=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_260_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 260, 0, this.input);

                nvae_260_0.c = this.input.LA(1);
                throw nvae_260_0;
            }
            switch (alt260) {
                case 1 :
                    // IDP.g:3078:36: compoundSelectionOutput= ruleTimespanCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollection_in_ruleTimespanAggregationFunction62647);
                    this.ruleTimespanCollection_DFAcall = false;

                     if( typeof this.ruleTimespanAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA260 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimespanCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:3078:87: LROUNDB compoundSelectionOutput= ruleTimespanCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB229=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanAggregationFunction62651); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB229_tree = this.adaptor.create(LROUNDB229);
                    this.adaptor.addChild(root_0, LROUNDB229_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollection_in_ruleTimespanAggregationFunction62657);
                    this.ruleTimespanCollection_DFAcall = false;

                     if( typeof this.ruleTimespanAggregationFunctionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanAggregationFunctionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanAggregationFunctionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA260 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanAggregationFunctionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimespanCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimespanCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB230=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanAggregationFunction62659); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB230_tree = this.adaptor.create(RROUNDB230);
                    this.adaptor.addChild(root_0, RROUNDB230_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA260 !== undefined && this.failedPredictDFA260)
            { 
                throw null;
            }*/

            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);if(ruleOutput.aggregationOption.isNoneValuelistAggOperator()){this.parseModelLib.getModelManger().cleanValueListAttribute();}
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanAggregationFunction";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanGroupOfAggregation_return: (function() {
        IDPParser.ruleTimespanGroupOfAggregation_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanGroupOfAggregation_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3081:1: ruleTimespanGroupOfAggregation returns [value] : ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) ) ) gbc= groupByClause ;
    // $ANTLR start "ruleTimespanGroupOfAggregation"
    ruleTimespanGroupOfAggregation: function() {
        this.currentRule = "ruleTimespanGroupOfAggregation";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanGroupOfAggregation_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var LROUNDB231 = null;
        var RROUNDB232 = null;
         var aggregationOptionOutput = null;
         var compoundSelectionOutput = null;
         var gbc = null;

        var LROUNDB231_tree=null;
        var RROUNDB232_tree=null;

         var ctxLength = this.parseModelLib.getModelManger().contextQueue.length;  var aggregationOperatorArgs = {}; var ruleOutput = {};                                          
                                                        ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value;
                                        
        try {
            // IDP.g:3086:17: ( ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) ) ) gbc= groupByClause )
            // IDP.g:3086:33: ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) ) ) gbc= groupByClause
            root_0 = this.adaptor.nil();

            // IDP.g:3086:33: ( (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) ) )
            // IDP.g:3087:49: (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) )
            // IDP.g:3087:49: (aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB ) )
            // IDP.g:3087:50: aggregationOptionOutput= numericAggregationOption (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB )
            this.pushFollow(IDPParser.FOLLOW_numericAggregationOption_in_ruleTimespanGroupOfAggregation62849);
            this.numericAggregationOption_DFAcall = false;

             if( typeof this.ruleTimespanGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleTimespanGroupOfAggregationCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanGroupOfAggregationCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                aggregationOptionOutput=this.numericAggregationOption();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanGroupOfAggregationCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	aggregationOptionOutput=this.numericAggregationOption();

            	}
            	}
            else{
                aggregationOptionOutput=this.numericAggregationOption();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, aggregationOptionOutput.getTree());
            // IDP.g:3087:101: (compoundSelectionOutput= ruleTimespanBaseCollection | LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB )
            var alt261=2;

            var LA261_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(ALL,ALL,1) && LA261_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA261_0>=ZERO_OR_ONE && LA261_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA261_0==INT )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA261_0==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(ALL,ALL,1) && LA261_0==ALL )||(  this.pushNextTokens(ZERO_OR_ONE,TYPENUMBERPARAMETER,1) && LA261_0>=ZERO_OR_ONE && LA261_0<=TYPENUMBERPARAMETER )||( this.pushNextTokens(INT,INT,1) && LA261_0==INT )||( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA261_0==TYPETIMEINTERVALCOLLECTION )) ) {
                alt261=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA261_0==LROUNDB )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(LROUNDB,LROUNDB,1) && LA261_0==LROUNDB )) ) {
                alt261=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_261_0 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 261, 0, this.input);

                nvae_261_0.c = this.input.LA(1);
                throw nvae_261_0;
            }
            switch (alt261) {
                case 1 :
                    // IDP.g:3087:103: compoundSelectionOutput= ruleTimespanBaseCollection
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanGroupOfAggregation62857);
                    this.ruleTimespanBaseCollection_DFAcall = false;

                     if( typeof this.ruleTimespanGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleTimespanGroupOfAggregationCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanGroupOfAggregationCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA261 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanGroupOfAggregationCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    break;
                case 2 :
                    // IDP.g:3087:158: LROUNDB compoundSelectionOutput= ruleTimespanBaseCollection RROUNDB


                    this.pushNextTokens(LROUNDB,LROUNDB,1);
                    LROUNDB231=this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_ruleTimespanGroupOfAggregation62861); if (this.state.failed) return retval;
                    if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    LROUNDB231_tree = this.adaptor.create(LROUNDB231);
                    this.adaptor.addChild(root_0, LROUNDB231_tree);
                    }
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanGroupOfAggregation62867);
                    this.ruleTimespanBaseCollection_DFAcall = false;

                     if( typeof this.ruleTimespanGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleTimespanGroupOfAggregationCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanGroupOfAggregationCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA261 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanGroupOfAggregationCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    	}
                    	}
                    else{
                        compoundSelectionOutput=this.ruleTimespanBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, compoundSelectionOutput.getTree());


                    this.pushNextTokens(RROUNDB,RROUNDB,1);
                    RROUNDB232=this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_ruleTimespanGroupOfAggregation62869); if (this.state.failed) return retval;
                    if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
                    	this.updateLTType(this.input.LT(1));
                    }
                    if ( this.state.backtracking===0 ) {
                    RROUNDB232_tree = this.adaptor.create(RROUNDB232);
                    this.adaptor.addChild(root_0, RROUNDB232_tree);
                    }


                    break;

            }
            /*if(this.failedPredictDFA261 !== undefined && this.failedPredictDFA261)
            { 
                throw null;
            }*/







            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.aggregationOperator = (aggregationOptionOutput!==null?aggregationOptionOutput.value:null); ruleOutput.compoundSelection = (compoundSelectionOutput!==null?compoundSelectionOutput.value:null);
            }
            this.pushFollow(IDPParser.FOLLOW_groupByClause_in_ruleTimespanGroupOfAggregation62982);
            this.groupByClause_DFAcall = false;

             if( typeof this.ruleTimespanGroupOfAggregationCurrentDecisionNumber !== 'undefined' && this.ruleTimespanGroupOfAggregationCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanGroupOfAggregationCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                gbc=this.groupByClause();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanGroupOfAggregationCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	gbc=this.groupByClause();

            	}
            	}
            else{
                gbc=this.groupByClause();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, gbc.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              aggregationOperatorArgs.groupByArray = (gbc!==null?gbc.value:null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              ruleOutput.aggregationOption =  new this.entityModelLib.AggregationOption(aggregationOperatorArgs); retval.value = new this.entityModelLib.CompoundSelection(ruleOutput);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanGroupOfAggregation";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanCollection_return: (function() {
        IDPParser.ruleTimespanCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3100:1: ruleTimespanCollection returns [value] : (collection= ruleTimespanBaseCollection | collection= ruleTimespanDTAliasCollection | collection= ruleTimespanGroupOfAggregation );
    // $ANTLR start "ruleTimespanCollection"
    ruleTimespanCollection: function() {
        this.currentRule = "ruleTimespanCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var collection = null;


        var ctxLength = this.parseModelLib.getModelManger().contextQueue.length; 
        try {
            // IDP.g:3103:17: (collection= ruleTimespanBaseCollection | collection= ruleTimespanDTAliasCollection | collection= ruleTimespanGroupOfAggregation )
            var alt262=3;
            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case ALL:
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
            case TYPETIMEINTERVALCOLLECTION:
                alt262=1;   
                break;
            case TYPETIMEINTERVALDT:
                alt262=2;   
                break;
            case MAXIMUM_OF:
            case MINIMUM_OF:
            case HIGHEST:
            case LOWEST:
            case AVERAGE_OF:
            case SUM_OF:
                alt262=3;   
                break;
            default:
            this.pushApplyTokens([ALL,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALDT,MAXIMUM_OF,MINIMUM_OF,HIGHEST,LOWEST,AVERAGE_OF,SUM_OF]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_262 =
            			new org.antlr.runtime.NoViableAltException(null, 262, 0, this.input);

                nvae_262.c = this.input.LA(1);
                throw nvae_262;
            }

            switch (alt262) {
                case 1 :
                    // IDP.g:3103:33: collection= ruleTimespanBaseCollection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanCollection63213);
                    this.ruleTimespanBaseCollection_DFAcall = false;

                     if( typeof this.ruleTimespanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA262 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleTimespanBaseCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleTimespanBaseCollection();

                    	}
                    	}
                    else{
                        collection=this.ruleTimespanBaseCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;
                case 2 :
                    // IDP.g:3104:37: collection= ruleTimespanDTAliasCollection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanDTAliasCollection_in_ruleTimespanCollection63257);
                    this.ruleTimespanDTAliasCollection_DFAcall = false;

                     if( typeof this.ruleTimespanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA262 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleTimespanDTAliasCollection();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleTimespanDTAliasCollection();

                    	}
                    	}
                    else{
                        collection=this.ruleTimespanDTAliasCollection();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;
                case 3 :
                    // IDP.g:3105:37: collection= ruleTimespanGroupOfAggregation
                    root_0 = this.adaptor.nil();

                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanGroupOfAggregation_in_ruleTimespanCollection63301);
                    this.ruleTimespanGroupOfAggregation_DFAcall = false;

                     if( typeof this.ruleTimespanCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA262 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        collection=this.ruleTimespanGroupOfAggregation();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	collection=this.ruleTimespanGroupOfAggregation();

                    	}
                    	}
                    else{
                        collection=this.ruleTimespanGroupOfAggregation();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, collection.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (collection!==null?collection.value:null);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanCollection";

            					if (ctxLength < this.parseModelLib.getModelManger().contextQueue.length) {
            							  this.parseModelLib.getModelManger().popFromContextQueue();
            					}
            				 
        }
        return retval;
    },

    // inline static return class
    ruleTimespanAliasDTCollectionContext_return: (function() {
        IDPParser.ruleTimespanAliasDTCollectionContext_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanAliasDTCollectionContext_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3112:1: ruleTimespanAliasDTCollectionContext returns [value] : navigationOutput= TYPETIMEINTERVALDT ;
    // $ANTLR start "ruleTimespanAliasDTCollectionContext"
    ruleTimespanAliasDTCollectionContext: function() {
        this.currentRule = "ruleTimespanAliasDTCollectionContext";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanAliasDTCollectionContext_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var navigationOutput = null;

        var navigationOutput_tree=null;

        try {
            // IDP.g:3113:25: (navigationOutput= TYPETIMEINTERVALDT )
            // IDP.g:3113:49: navigationOutput= TYPETIMEINTERVALDT
            root_0 = this.adaptor.nil();



            this.pushNextTokens(TYPETIMEINTERVALDT,TYPETIMEINTERVALDT,1);
            navigationOutput=this.match(this.input,TYPETIMEINTERVALDT,IDPParser.FOLLOW_TYPETIMEINTERVALDT_in_ruleTimespanAliasDTCollectionContext63374); if (this.state.failed) return retval;
            if( TYPETIMEINTERVALDT !== EOF ){ // if it is EOF keep the valid next tokens
            	this.updateLTType(this.input.LT(1));
            }
            if ( this.state.backtracking===0 ) {
            navigationOutput_tree = this.adaptor.create(navigationOutput);
            this.adaptor.addChild(root_0, navigationOutput_tree);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              retval.value = (navigationOutput?navigationOutput.getText():null);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanAliasDTCollectionContext";
             
                                                                        var nav = this.parseModelLib.getModelManger().getCurrentNavigationObject((navigationOutput?navigationOutput.getText():null)); 
                                                                        nav.index = retval.start.index;                                      
                                                                        this.parseModelLib.getModelManger().pushToContextQueue(nav);
                                                            
        }
        return retval;
    },

    // inline static return class
    ruleTimespanDTAliasCollection_return: (function() {
        IDPParser.ruleTimespanDTAliasCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanDTAliasCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3120:1: ruleTimespanDTAliasCollection returns [value] : (navigationOutputDT= ruleTimespanAliasDTCollectionContext ) ;
    // $ANTLR start "ruleTimespanDTAliasCollection"
    ruleTimespanDTAliasCollection: function() {
        this.currentRule = "ruleTimespanDTAliasCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanDTAliasCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

         var navigationOutputDT = null;


        var selectionOutput = {}; var compoundSelectionOutput = {};
        try {
            // IDP.g:3126:49: ( (navigationOutputDT= ruleTimespanAliasDTCollectionContext ) )
            // IDP.g:3126:51: (navigationOutputDT= ruleTimespanAliasDTCollectionContext )
            root_0 = this.adaptor.nil();

            // IDP.g:3126:51: (navigationOutputDT= ruleTimespanAliasDTCollectionContext )
            // IDP.g:3126:52: navigationOutputDT= ruleTimespanAliasDTCollectionContext
            this.pushFollow(IDPParser.FOLLOW_ruleTimespanAliasDTCollectionContext_in_ruleTimespanDTAliasCollection63617);
            this.ruleTimespanAliasDTCollectionContext_DFAcall = false;

             if( typeof this.ruleTimespanDTAliasCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanDTAliasCollectionCurrentDecisionNumber  > 0 )
            {
            var currentDecisionNumber = this.ruleTimespanDTAliasCollectionCurrentDecisionNumber;
            var test2 = "failedPredictDFA"+currentDecisionNumber;
            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
            	{
            	try {
                navigationOutputDT=this.ruleTimespanAliasDTCollectionContext();

            	} catch (e) {
            		var nvae = 
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanDTAliasCollectionCurrentDecisionNumber, 0, this.input);

            		nvae.c = this.input.LA(1);
            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
            		throw nvae;

            	}
            	}
            	else{
            	navigationOutputDT=this.ruleTimespanAliasDTCollectionContext();

            	}
            	}
            else{
                navigationOutputDT=this.ruleTimespanAliasDTCollectionContext();

            }
            this.state.a_fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutputDT.getTree());
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
              selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutputDT?this.input.toString(navigationOutputDT.start,navigationOutputDT.stop):null));
            }






            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  retval.value = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanDTAliasCollection";
        }
        return retval;
    },

    // inline static return class
    ruleTimespanBaseCollection_return: (function() {
        IDPParser.ruleTimespanBaseCollection_return = function(){};
        org.antlr.lang.extend(IDPParser.ruleTimespanBaseCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // IDP.g:3128:1: ruleTimespanBaseCollection returns [value] : ( ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) ) (flt= filterClause )? ) ;
    // $ANTLR start "ruleTimespanBaseCollection"
    ruleTimespanBaseCollection: function() {
        this.currentRule = "ruleTimespanBaseCollection";
    	var currentRuleMark = this.input.mark();
        var retval = new IDPParser.ruleTimespanBaseCollection_return();
        retval.start = this.input.LT(1);

        this.updateLTType(retval.start);

        var root_0 = null;

        var OF233 = null;
        var CURRENT234 = null;
         var navigationOutput = null;
         var quantity = null;
         var rall = null;
         var order = null;
         var flt = null;

        var OF233_tree=null;
        var CURRENT234_tree=null;

        var selectionOutput = {}; var compoundSelectionOutput = {}; var collectionOperatorArgs = {}; var secondAggrigations = false; var ruleOutput = {};
        try {
            // IDP.g:3139:17: ( ( ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) ) (flt= filterClause )? ) )
            // IDP.g:3139:33: ( ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) ) (flt= filterClause )? )
            root_0 = this.adaptor.nil();

            // IDP.g:3139:33: ( ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) ) (flt= filterClause )? )
            // IDP.g:3139:34: ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) ) (flt= filterClause )?
            // IDP.g:3139:34: ( (navigationOutput= ruleTimespanCollectionContext ) | ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) ) | ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) )
            var alt267=3;

            	this.updateLTType(this.input.LT(1));switch ( this.input.LA(1) ) {
            case TYPETIMEINTERVALCOLLECTION:
                alt267=1;   
                break;
            case ZERO_OR_ONE:
            case TYPENUMBERPARAMETER:
            case INT:
                alt267=2;   
                break;
            case ALL:
                alt267=3;   
                break;
            default:
            this.pushApplyTokens([TYPETIMEINTERVALCOLLECTION,ZERO_OR_ONE,TYPENUMBERPARAMETER,INT,ALL]);
            	//this.pushApplyTokens();
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae_267 =
            			new org.antlr.runtime.NoViableAltException(null, 267, 0, this.input);

                nvae_267.c = this.input.LA(1);
                throw nvae_267;
            }

            switch (alt267) {
                case 1 :
                    // IDP.g:3140:49: (navigationOutput= ruleTimespanCollectionContext )
                    // IDP.g:3140:49: (navigationOutput= ruleTimespanCollectionContext )
                    // IDP.g:3140:50: navigationOutput= ruleTimespanCollectionContext
                    this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection63794);
                    this.ruleTimespanCollectionContext_DFAcall = false;

                     if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        navigationOutput=this.ruleTimespanCollectionContext();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	navigationOutput=this.ruleTimespanCollectionContext();

                    	}
                    	}
                    else{
                        navigationOutput=this.ruleTimespanCollectionContext();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;
                case 2 :
                    // IDP.g:3141:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) )
                    // IDP.g:3141:33: ( (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions ) )
                    // IDP.g:3141:34: (quantity= ruleInteger ) ( OF rall= ruleAll )? ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) ) (order= ruleSortingOptions )
                    // IDP.g:3141:34: (quantity= ruleInteger )
                    // IDP.g:3141:35: quantity= ruleInteger
                    this.pushFollow(IDPParser.FOLLOW_ruleInteger_in_ruleTimespanBaseCollection63840);
                    this.ruleInteger_DFAcall = false;

                     if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        quantity=this.ruleInteger();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	quantity=this.ruleInteger();

                    	}
                    	}
                    else{
                        quantity=this.ruleInteger();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, quantity.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       collectionOperatorArgs.quantity = (quantity!==null?quantity.value:null);
                    }



                    // IDP.g:3141:113: ( OF rall= ruleAll )?
                    var alt263=2;

                    var LA263_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(OF,OF,1) && LA263_0==OF )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(OF,OF,1) && LA263_0==OF )) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // IDP.g:3141:114: OF rall= ruleAll


                            this.pushNextTokens(OF,OF,1);
                            OF233=this.match(this.input,OF,IDPParser.FOLLOW_OF_in_ruleTimespanBaseCollection63846); if (this.state.failed) return retval;
                            if( OF !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            OF233_tree = this.adaptor.create(OF233);
                            this.adaptor.addChild(root_0, OF233_tree);
                            }
                            this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimespanBaseCollection63852);
                            this.ruleAll_DFAcall = false;

                             if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA263 !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                rall=this.ruleAll();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	rall=this.ruleAll();

                            	}
                            	}
                            else{
                                rall=this.ruleAll();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null); secondAggrigations = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA263 !== undefined && this.failedPredictDFA263)
                    { 
                        throw null;
                    }*/

                    // IDP.g:3141:221: ( ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) )
                    // IDP.g:3141:222: ( CURRENT )? ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) )
                    // IDP.g:3141:222: ( CURRENT )?
                    var alt264=2;

                    var LA264_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(CURRENT,CURRENT,1) && LA264_0==CURRENT )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(CURRENT,CURRENT,1) && LA264_0==CURRENT )) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // IDP.g:3141:223: CURRENT


                            this.pushNextTokens(CURRENT,CURRENT,1);
                            CURRENT234=this.match(this.input,CURRENT,IDPParser.FOLLOW_CURRENT_in_ruleTimespanBaseCollection63861); if (this.state.failed) return retval;
                            if( CURRENT !== EOF ){ // if it is EOF keep the valid next tokens
                            	this.updateLTType(this.input.LT(1));
                            }
                            if ( this.state.backtracking===0 ) {
                            CURRENT234_tree = this.adaptor.create(CURRENT234);
                            this.adaptor.addChild(root_0, CURRENT234_tree);
                            }
                            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                              selectionOutput.isCurrent = true;
                            }


                            break;

                    }
                    /*if(this.failedPredictDFA264 !== undefined && this.failedPredictDFA264)
                    { 
                        throw null;
                    }*/

                    // IDP.g:3141:270: ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) )
                    var alt265=2;

                    var LA265_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1) && LA265_0==TYPETIMEINTERVAL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1) && LA265_0==TYPETIMEINTERVAL )) ) {
                        alt265=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA265_0==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA265_0==TYPETIMEINTERVALCOLLECTION )) ) {
                        alt265=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_265_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 265, 0, this.input);

                        nvae_265_0.c = this.input.LA(1);
                        throw nvae_265_0;
                    }
                    switch (alt265) {
                        case 1 :
                            // IDP.g:3141:271: (navigationOutput= ruleTimespanContext )
                            // IDP.g:3141:271: (navigationOutput= ruleTimespanContext )
                            // IDP.g:3141:272: navigationOutput= ruleTimespanContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanContext_in_ruleTimespanBaseCollection63874);
                            this.ruleTimespanContext_DFAcall = false;

                             if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimespanContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimespanContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimespanContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;
                        case 2 :
                            // IDP.g:3141:314: (navigationOutput= ruleTimespanCollectionContext )
                            // IDP.g:3141:314: (navigationOutput= ruleTimespanCollectionContext )
                            // IDP.g:3141:315: navigationOutput= ruleTimespanCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection63884);
                            this.ruleTimespanCollectionContext_DFAcall = false;

                             if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimespanCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimespanCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimespanCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA265 !== undefined && this.failedPredictDFA265)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                       selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }



                    // IDP.g:3142:61: (order= ruleSortingOptions )
                    // IDP.g:3142:62: order= ruleSortingOptions
                    this.pushFollow(IDPParser.FOLLOW_ruleSortingOptions_in_ruleTimespanBaseCollection63957);
                    this.ruleSortingOptions_DFAcall = false;

                     if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        order=this.ruleSortingOptions();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	order=this.ruleSortingOptions();

                    	}
                    	}
                    else{
                        order=this.ruleSortingOptions();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, order.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      collectionOperatorArgs.orderBy = (order!==null?order.value:null).orderBy; collectionOperatorArgs.operator = (order!==null?order.value:null).operator;
                    }



                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      (secondAggrigations ? ruleOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs) : compoundSelectionOutput.aggregationOption = new this.entityModelLib.CollectionOperatorOption(collectionOperatorArgs));
                    }





                    break;
                case 3 :
                    // IDP.g:3143:49: ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) )
                    // IDP.g:3143:49: ( (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) ) )
                    // IDP.g:3143:50: (rall= ruleAll ) ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) )
                    // IDP.g:3143:50: (rall= ruleAll )
                    // IDP.g:3143:51: rall= ruleAll
                    this.pushFollow(IDPParser.FOLLOW_ruleAll_in_ruleTimespanBaseCollection64021);
                    this.ruleAll_DFAcall = false;

                     if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        rall=this.ruleAll();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	rall=this.ruleAll();

                    	}
                    	}
                    else{
                        rall=this.ruleAll();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, rall.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      compoundSelectionOutput.aggregationOption = (rall!==null?rall.value:null);
                    }



                    // IDP.g:3143:126: ( (navigationOutput= ruleTimespanContext ) | (navigationOutput= ruleTimespanCollectionContext ) )
                    var alt266=2;

                    var LA266_0 = this.input.LA(1);


                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1) && LA266_0==TYPETIMEINTERVAL )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVAL,TYPETIMEINTERVAL,1) && LA266_0==TYPETIMEINTERVAL )) ) {
                        alt266=1;
                    }
                    else 
                    if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA266_0==TYPETIMEINTERVALCOLLECTION )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(TYPETIMEINTERVALCOLLECTION,TYPETIMEINTERVALCOLLECTION,1) && LA266_0==TYPETIMEINTERVALCOLLECTION )) ) {
                        alt266=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae_266_0 =
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 266, 0, this.input);

                        nvae_266_0.c = this.input.LA(1);
                        throw nvae_266_0;
                    }
                    switch (alt266) {
                        case 1 :
                            // IDP.g:3143:127: (navigationOutput= ruleTimespanContext )
                            // IDP.g:3143:127: (navigationOutput= ruleTimespanContext )
                            // IDP.g:3143:128: navigationOutput= ruleTimespanContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanContext_in_ruleTimespanBaseCollection64032);
                            this.ruleTimespanContext_DFAcall = false;

                             if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimespanContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimespanContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimespanContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;
                        case 2 :
                            // IDP.g:3143:170: (navigationOutput= ruleTimespanCollectionContext )
                            // IDP.g:3143:170: (navigationOutput= ruleTimespanCollectionContext )
                            // IDP.g:3143:171: navigationOutput= ruleTimespanCollectionContext
                            this.pushFollow(IDPParser.FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection64042);
                            this.ruleTimespanCollectionContext_DFAcall = false;

                             if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                            {
                            var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                            var test2 = "failedPredictDFA"+currentDecisionNumber;
                            	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                            	{
                            	try {
                                navigationOutput=this.ruleTimespanCollectionContext();

                            	} catch (e) {
                            		var nvae = 
                            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                            		nvae.c = this.input.LA(1);
                            		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                            		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                            		throw nvae;

                            	}
                            	}
                            	else{
                            	navigationOutput=this.ruleTimespanCollectionContext();

                            	}
                            	}
                            else{
                                navigationOutput=this.ruleTimespanCollectionContext();

                            }
                            this.state.a_fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, navigationOutput.getTree());





                            break;

                    }
                    /*if(this.failedPredictDFA266 !== undefined && this.failedPredictDFA266)
                    { 
                        throw null;
                    }*/

                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.navigationPredicateDetails = this.parseModelLib.validateNavigationRule((navigationOutput?this.input.toString(navigationOutput.start,navigationOutput.stop):null));
                    }





                    break;

            }
            /*if(this.failedPredictDFA267 !== undefined && this.failedPredictDFA267)
            { 
                throw null;
            }*/

            // IDP.g:3146:33: (flt= filterClause )?
            var alt268=2;

            var LA268_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '(  this.pushNextTokens(WHERE,FILTER_BY,1) && LA268_0>=WHERE && LA268_0<=FILTER_BY )'.indexOf("synpred") !== -1) ||  (  this.pushNextTokens(WHERE,FILTER_BY,1) && LA268_0>=WHERE && LA268_0<=FILTER_BY )) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // IDP.g:3146:34: flt= filterClause
                    this.pushFollow(IDPParser.FOLLOW_filterClause_in_ruleTimespanBaseCollection64187);
                    this.filterClause_DFAcall = false;

                     if( typeof this.ruleTimespanBaseCollectionCurrentDecisionNumber !== 'undefined' && this.ruleTimespanBaseCollectionCurrentDecisionNumber  > 0 )
                    {
                    var currentDecisionNumber = this.ruleTimespanBaseCollectionCurrentDecisionNumber;
                    var test2 = "failedPredictDFA"+currentDecisionNumber;
                    	if(/*typeof this.failedPredictDFA268 !== 'undefined' &&*/ this[test2] === false )
                    	{
                    	try {
                        flt=this.filterClause();

                    	} catch (e) {
                    		var nvae = 
                    			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.ruleTimespanBaseCollectionCurrentDecisionNumber, 0, this.input);

                    		nvae.c = this.input.LA(1);
                    		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                    		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                    		throw nvae;

                    	}
                    	}
                    	else{
                    	flt=this.filterClause();

                    	}
                    	}
                    else{
                        flt=this.filterClause();

                    }
                    this.state.a_fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, flt.getTree());
                    //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
                    if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {
                      selectionOutput.filterClause = (flt!==null?flt.value:null);
                    }


                    break;

            }
            /*if(this.failedPredictDFA268 !== undefined && this.failedPredictDFA268)
            { 
                throw null;
            }*/







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            //if ( this.state.backtracking===0 /*&& !this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)*/) {
            if ( this.state.backtracking===0 || this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode)) {

                                                  ruleOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value;
                                                  compoundSelectionOutput.valueType = this.constantsLib.SIMPLE_SELECTION_VALUE_TYPE.TIMESPAN.value;
                                                  compoundSelectionOutput.selection = new this.entityModelLib.Selection(selectionOutput, this.parseModelLib.getModelManger()); 
                                                  var compoundSelection = new this.entityModelLib.CompoundSelection(compoundSelectionOutput); 
                                                  ruleOutput.compoundSelection = compoundSelection;
                                                  this.parseModelLib.getModelManger().cleanAllContext();             
                                                  retval.value = ((secondAggrigations) ? new this.entityModelLib.CompoundSelection(ruleOutput) : compoundSelection );
                                                  
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.lastRule = "ruleTimespanBaseCollection";
        }
        return retval;
    },

    // $ANTLR start "synpred1_IDP"
    synpred1_IDP_fragment: function() {
        // IDP.g:325:47: ( modelSingleExpression )
        // IDP.g:325:47: modelSingleExpression
        this.pushFollow(IDPParser.FOLLOW_modelSingleExpression_in_synpred1_IDP312);
        this.modelSingleExpression_DFAcall = false;

         if( typeof this.synpred1_IDPCurrentDecisionNumber !== 'undefined' && this.synpred1_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred1_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelSingleExpression();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred1_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelSingleExpression();

        	}
        	}
        else{
        this.modelSingleExpression();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred1_IDP",

    // $ANTLR start "synpred2_IDP"
    synpred2_IDP_fragment: function() {
        // IDP.g:325:71: ( modelCollection )
        // IDP.g:325:71: modelCollection
        this.pushFollow(IDPParser.FOLLOW_modelCollection_in_synpred2_IDP316);
        this.modelCollection_DFAcall = false;

         if( typeof this.synpred2_IDPCurrentDecisionNumber !== 'undefined' && this.synpred2_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred2_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelCollection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred2_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelCollection();

        	}
        	}
        else{
        this.modelCollection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred2_IDP",

    // $ANTLR start "synpred3_IDP"
    synpred3_IDP_fragment: function() {
        // IDP.g:329:51: ( modelBooleanPure )
        // IDP.g:329:51: modelBooleanPure
        this.pushFollow(IDPParser.FOLLOW_modelBooleanPure_in_synpred3_IDP423);
        this.modelBooleanPure_DFAcall = false;

         if( typeof this.synpred3_IDPCurrentDecisionNumber !== 'undefined' && this.synpred3_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred3_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelBooleanPure();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred3_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelBooleanPure();

        	}
        	}
        else{
        this.modelBooleanPure();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred3_IDP",

    // $ANTLR start "synpred4_IDP"
    synpred4_IDP_fragment: function() {
        // IDP.g:329:70: ( modelNumric )
        // IDP.g:329:70: modelNumric
        this.pushFollow(IDPParser.FOLLOW_modelNumric_in_synpred4_IDP427);
        this.modelNumric_DFAcall = false;

         if( typeof this.synpred4_IDPCurrentDecisionNumber !== 'undefined' && this.synpred4_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred4_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelNumric();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred4_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelNumric();

        	}
        	}
        else{
        this.modelNumric();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred4_IDP",

    // $ANTLR start "synpred5_IDP"
    synpred5_IDP_fragment: function() {
        // IDP.g:329:84: ( modelString )
        // IDP.g:329:84: modelString
        this.pushFollow(IDPParser.FOLLOW_modelString_in_synpred5_IDP431);
        this.modelString_DFAcall = false;

         if( typeof this.synpred5_IDPCurrentDecisionNumber !== 'undefined' && this.synpred5_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred5_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelString();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred5_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelString();

        	}
        	}
        else{
        this.modelString();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred5_IDP",

    // $ANTLR start "synpred6_IDP"
    synpred6_IDP_fragment: function() {
        // IDP.g:329:98: ( modelTimespan )
        // IDP.g:329:98: modelTimespan
        this.pushFollow(IDPParser.FOLLOW_modelTimespan_in_synpred6_IDP435);
        this.modelTimespan_DFAcall = false;

         if( typeof this.synpred6_IDPCurrentDecisionNumber !== 'undefined' && this.synpred6_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred6_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelTimespan();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred6_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelTimespan();

        	}
        	}
        else{
        this.modelTimespan();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred6_IDP",

    // $ANTLR start "synpred7_IDP"
    synpred7_IDP_fragment: function() {
        // IDP.g:329:115: ( modelDate )
        // IDP.g:329:115: modelDate
        this.pushFollow(IDPParser.FOLLOW_modelDate_in_synpred7_IDP440);
        this.modelDate_DFAcall = false;

         if( typeof this.synpred7_IDPCurrentDecisionNumber !== 'undefined' && this.synpred7_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred7_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelDate();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred7_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelDate();

        	}
        	}
        else{
        this.modelDate();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred7_IDP",

    // $ANTLR start "synpred8_IDP"
    synpred8_IDP_fragment: function() {
        // IDP.g:329:127: ( modelTime )
        // IDP.g:329:127: modelTime
        this.pushFollow(IDPParser.FOLLOW_modelTime_in_synpred8_IDP444);
        this.modelTime_DFAcall = false;

         if( typeof this.synpred8_IDPCurrentDecisionNumber !== 'undefined' && this.synpred8_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred8_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelTime();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred8_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelTime();

        	}
        	}
        else{
        this.modelTime();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred8_IDP",

    // $ANTLR start "synpred9_IDP"
    synpred9_IDP_fragment: function() {
        // IDP.g:333:51: ( modelSingleExpression )
        // IDP.g:333:51: modelSingleExpression
        this.pushFollow(IDPParser.FOLLOW_modelSingleExpression_in_synpred9_IDP552);
        this.modelSingleExpression_DFAcall = false;

         if( typeof this.synpred9_IDPCurrentDecisionNumber !== 'undefined' && this.synpred9_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred9_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelSingleExpression();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred9_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelSingleExpression();

        	}
        	}
        else{
        this.modelSingleExpression();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred9_IDP",

    // $ANTLR start "synpred15_IDP"
    synpred15_IDP_fragment: function() {
        // IDP.g:376:166: ( modelDateCollection )
        // IDP.g:376:166: modelDateCollection
        this.pushFollow(IDPParser.FOLLOW_modelDateCollection_in_synpred15_IDP2183);
        this.modelDateCollection_DFAcall = false;

         if( typeof this.synpred15_IDPCurrentDecisionNumber !== 'undefined' && this.synpred15_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred15_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelDateCollection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred15_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelDateCollection();

        	}
        	}
        else{
        this.modelDateCollection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred15_IDP",

    // $ANTLR start "synpred17_IDP"
    synpred17_IDP_fragment: function() {
        // IDP.g:414:41: ( modelCollection )
        // IDP.g:414:41: modelCollection
        this.pushFollow(IDPParser.FOLLOW_modelCollection_in_synpred17_IDP3545);
        this.modelCollection_DFAcall = false;

         if( typeof this.synpred17_IDPCurrentDecisionNumber !== 'undefined' && this.synpred17_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred17_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
        this.modelCollection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred17_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        this.modelCollection();

        	}
        	}
        else{
        this.modelCollection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred17_IDP",

    // $ANTLR start "synpred44_IDP"
    synpred44_IDP_fragment: function() {
        // IDP.g:700:34: (singleStatementOutput= ruleNumericStatement )
        // IDP.g:700:34: singleStatementOutput= ruleNumericStatement
        this.pushFollow(IDPParser.FOLLOW_ruleNumericStatement_in_synpred44_IDP9436);
        this.ruleNumericStatement_DFAcall = false;

         if( typeof this.synpred44_IDPCurrentDecisionNumber !== 'undefined' && this.synpred44_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred44_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleNumericStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred44_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleNumericStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleNumericStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred44_IDP",

    // $ANTLR start "synpred45_IDP"
    synpred45_IDP_fragment: function() {
        // IDP.g:701:38: (singleStatementOutput= ruleStringSingleStatement )
        // IDP.g:701:38: singleStatementOutput= ruleStringSingleStatement
        this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatement_in_synpred45_IDP9482);
        this.ruleStringSingleStatement_DFAcall = false;

         if( typeof this.synpred45_IDPCurrentDecisionNumber !== 'undefined' && this.synpred45_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred45_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleStringSingleStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred45_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleStringSingleStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleStringSingleStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred45_IDP",

    // $ANTLR start "synpred46_IDP"
    synpred46_IDP_fragment: function() {
        // IDP.g:702:34: (singleStatementOutput= ruleTimespanStatement )
        // IDP.g:702:34: singleStatementOutput= ruleTimespanStatement
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanStatement_in_synpred46_IDP9524);
        this.ruleTimespanStatement_DFAcall = false;

         if( typeof this.synpred46_IDPCurrentDecisionNumber !== 'undefined' && this.synpred46_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred46_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimespanStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred46_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimespanStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimespanStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred46_IDP",

    // $ANTLR start "synpred47_IDP"
    synpred47_IDP_fragment: function() {
        // IDP.g:703:34: (singleStatementOutput= ruleTimeSingleStatement )
        // IDP.g:703:34: singleStatementOutput= ruleTimeSingleStatement
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatement_in_synpred47_IDP9564);
        this.ruleTimeSingleStatement_DFAcall = false;

         if( typeof this.synpred47_IDPCurrentDecisionNumber !== 'undefined' && this.synpred47_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred47_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimeSingleStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred47_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimeSingleStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimeSingleStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred47_IDP",

    // $ANTLR start "synpred48_IDP"
    synpred48_IDP_fragment: function() {
        // IDP.g:704:34: (singleStatementOutput= ruleTimestampSingleStatement )
        // IDP.g:704:34: singleStatementOutput= ruleTimestampSingleStatement
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatement_in_synpred48_IDP9604);
        this.ruleTimestampSingleStatement_DFAcall = false;

         if( typeof this.synpred48_IDPCurrentDecisionNumber !== 'undefined' && this.synpred48_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred48_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimestampSingleStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred48_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimestampSingleStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimestampSingleStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred48_IDP",

    // $ANTLR start "synpred56_IDP"
    synpred56_IDP_fragment: function() {
        // IDP.g:718:122: (flt= ruleModelBooleanWhere )
        // IDP.g:718:122: flt= ruleModelBooleanWhere
        this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanWhere_in_synpred56_IDP9971);
        this.ruleModelBooleanWhere_DFAcall = false;

         if( typeof this.synpred56_IDPCurrentDecisionNumber !== 'undefined' && this.synpred56_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred56_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var flt=this.ruleModelBooleanWhere();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred56_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var flt=this.ruleModelBooleanWhere();

        	}
        	}
        else{
            var flt=this.ruleModelBooleanWhere();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred56_IDP",

    // $ANTLR start "synpred59_IDP"
    synpred59_IDP_fragment: function() {
        // IDP.g:740:95: ( SEMICOLON (nav2= groupByArray ) )
        // IDP.g:740:95: SEMICOLON (nav2= groupByArray )


        this.pushNextTokens(SEMICOLON,SEMICOLON,1);
        this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_synpred59_IDP10527); if (this.state.failed) return ;
        if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:740:105: (nav2= groupByArray )
        // IDP.g:740:107: nav2= groupByArray
        this.pushFollow(IDPParser.FOLLOW_groupByArray_in_synpred59_IDP10535);
        this.groupByArray_DFAcall = false;

         if( typeof this.synpred59_IDPCurrentDecisionNumber !== 'undefined' && this.synpred59_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred59_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var nav2=this.groupByArray();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred59_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var nav2=this.groupByArray();

        	}
        	}
        else{
            var nav2=this.groupByArray();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred59_IDP",

    // $ANTLR start "synpred60_IDP"
    synpred60_IDP_fragment: function() {
        // IDP.g:762:34: (selectionClauseOutput= complexAndModelBooleanEnhanced )
        // IDP.g:762:34: selectionClauseOutput= complexAndModelBooleanEnhanced
        this.pushFollow(IDPParser.FOLLOW_complexAndModelBooleanEnhanced_in_synpred60_IDP10826);
        this.complexAndModelBooleanEnhanced_DFAcall = false;

         if( typeof this.synpred60_IDPCurrentDecisionNumber !== 'undefined' && this.synpred60_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred60_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.complexAndModelBooleanEnhanced();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred60_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.complexAndModelBooleanEnhanced();

        	}
        	}
        else{
            var selectionClauseOutput=this.complexAndModelBooleanEnhanced();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred60_IDP",

    // $ANTLR start "synpred62_IDP"
    synpred62_IDP_fragment: function() {
        // IDP.g:783:34: (selectionClauseOutput= ruleModelBooleanEnhanced )
        // IDP.g:783:34: selectionClauseOutput= ruleModelBooleanEnhanced
        this.pushFollow(IDPParser.FOLLOW_ruleModelBooleanEnhanced_in_synpred62_IDP11120);
        this.ruleModelBooleanEnhanced_DFAcall = false;

         if( typeof this.synpred62_IDPCurrentDecisionNumber !== 'undefined' && this.synpred62_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred62_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.ruleModelBooleanEnhanced();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred62_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.ruleModelBooleanEnhanced();

        	}
        	}
        else{
            var selectionClauseOutput=this.ruleModelBooleanEnhanced();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred62_IDP",

    // $ANTLR start "synpred66_IDP"
    synpred66_IDP_fragment: function() {
        // IDP.g:825:66: (oprt= AND (singleStatementOutputB= singleStatementBoolean ) )
        // IDP.g:825:66: oprt= AND (singleStatementOutputB= singleStatementBoolean )


        this.pushNextTokens(AND,AND,1);
        oprt=this.match(this.input,AND,IDPParser.FOLLOW_AND_in_synpred66_IDP11679); if (this.state.failed) return ;
        if( AND !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:829:34: (singleStatementOutputB= singleStatementBoolean )
        // IDP.g:829:36: singleStatementOutputB= singleStatementBoolean
        this.pushFollow(IDPParser.FOLLOW_singleStatementBoolean_in_synpred66_IDP11690);
        this.singleStatementBoolean_DFAcall = false;

         if( typeof this.synpred66_IDPCurrentDecisionNumber !== 'undefined' && this.synpred66_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred66_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutputB=this.singleStatementBoolean();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred66_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutputB=this.singleStatementBoolean();

        	}
        	}
        else{
            var singleStatementOutputB=this.singleStatementBoolean();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred66_IDP",

    // $ANTLR start "synpred71_IDP"
    synpred71_IDP_fragment: function() {
        // IDP.g:871:118: (oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere ) )
        // IDP.g:871:118: oprt= OR (singleStatementOutputB= complexAndStatementBooleanWhere )


        this.pushNextTokens(OR,OR,1);
        oprt=this.match(this.input,OR,IDPParser.FOLLOW_OR_in_synpred71_IDP12526); if (this.state.failed) return ;
        if( OR !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:871:234: (singleStatementOutputB= complexAndStatementBooleanWhere )
        // IDP.g:871:236: singleStatementOutputB= complexAndStatementBooleanWhere
        this.pushFollow(IDPParser.FOLLOW_complexAndStatementBooleanWhere_in_synpred71_IDP12537);
        this.complexAndStatementBooleanWhere_DFAcall = false;

         if( typeof this.synpred71_IDPCurrentDecisionNumber !== 'undefined' && this.synpred71_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred71_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutputB=this.complexAndStatementBooleanWhere();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred71_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutputB=this.complexAndStatementBooleanWhere();

        	}
        	}
        else{
            var singleStatementOutputB=this.complexAndStatementBooleanWhere();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred71_IDP",

    // $ANTLR start "synpred72_IDP"
    synpred72_IDP_fragment: function() {
        // IDP.g:876:70: (oprt= AND (singleStatementOutputB= singleStatementBooleanWhere ) )
        // IDP.g:876:70: oprt= AND (singleStatementOutputB= singleStatementBooleanWhere )


        this.pushNextTokens(AND,AND,1);
        oprt=this.match(this.input,AND,IDPParser.FOLLOW_AND_in_synpred72_IDP12624); if (this.state.failed) return ;
        if( AND !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:880:34: (singleStatementOutputB= singleStatementBooleanWhere )
        // IDP.g:880:36: singleStatementOutputB= singleStatementBooleanWhere
        this.pushFollow(IDPParser.FOLLOW_singleStatementBooleanWhere_in_synpred72_IDP12635);
        this.singleStatementBooleanWhere_DFAcall = false;

         if( typeof this.synpred72_IDPCurrentDecisionNumber !== 'undefined' && this.synpred72_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred72_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutputB=this.singleStatementBooleanWhere();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred72_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutputB=this.singleStatementBooleanWhere();

        	}
        	}
        else{
            var singleStatementOutputB=this.singleStatementBooleanWhere();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred72_IDP",

    // $ANTLR start "synpred73_IDP"
    synpred73_IDP_fragment: function() {
        // IDP.g:894:11: (singleStatementBoolOutput= ruleBooleanSingleStatement )
        // IDP.g:894:11: singleStatementBoolOutput= ruleBooleanSingleStatement
        this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleStatement_in_synpred73_IDP12829);
        this.ruleBooleanSingleStatement_DFAcall = false;

         if( typeof this.synpred73_IDPCurrentDecisionNumber !== 'undefined' && this.synpred73_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred73_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementBoolOutput=this.ruleBooleanSingleStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred73_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementBoolOutput=this.ruleBooleanSingleStatement();

        	}
        	}
        else{
            var singleStatementBoolOutput=this.ruleBooleanSingleStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred73_IDP",

    // $ANTLR start "synpred74_IDP"
    synpred74_IDP_fragment: function() {
        // IDP.g:895:19: (singleStatementOutput= ruleBooleanSingleSelectionStatement )
        // IDP.g:895:19: singleStatementOutput= ruleBooleanSingleSelectionStatement
        this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleSelectionStatement_in_synpred74_IDP12857);
        this.ruleBooleanSingleSelectionStatement_DFAcall = false;

         if( typeof this.synpred74_IDPCurrentDecisionNumber !== 'undefined' && this.synpred74_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred74_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred74_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred74_IDP",

    // $ANTLR start "synpred75_IDP"
    synpred75_IDP_fragment: function() {
        // IDP.g:896:19: (singleStatementNumericOutput= ruleNumericSingleStatementComparison )
        // IDP.g:896:19: singleStatementNumericOutput= ruleNumericSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleNumericSingleStatementComparison_in_synpred75_IDP12884);
        this.ruleNumericSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred75_IDPCurrentDecisionNumber !== 'undefined' && this.synpred75_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred75_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred75_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementNumericOutput=this.ruleNumericSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred75_IDP",

    // $ANTLR start "synpred76_IDP"
    synpred76_IDP_fragment: function() {
        // IDP.g:897:19: (singleStatementNullOutput= ruleNullStatementComparison )
        // IDP.g:897:19: singleStatementNullOutput= ruleNullStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleNullStatementComparison_in_synpred76_IDP12911);
        this.ruleNullStatementComparison_DFAcall = false;

         if( typeof this.synpred76_IDPCurrentDecisionNumber !== 'undefined' && this.synpred76_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred76_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementNullOutput=this.ruleNullStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred76_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementNullOutput=this.ruleNullStatementComparison();

        	}
        	}
        else{
            var singleStatementNullOutput=this.ruleNullStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred76_IDP",

    // $ANTLR start "synpred77_IDP"
    synpred77_IDP_fragment: function() {
        // IDP.g:898:19: (singleStatementStrOutput= ruleStringSingleStatementComparison )
        // IDP.g:898:19: singleStatementStrOutput= ruleStringSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatementComparison_in_synpred77_IDP12956);
        this.ruleStringSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred77_IDPCurrentDecisionNumber !== 'undefined' && this.synpred77_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred77_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementStrOutput=this.ruleStringSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred77_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementStrOutput=this.ruleStringSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementStrOutput=this.ruleStringSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred77_IDP",

    // $ANTLR start "synpred78_IDP"
    synpred78_IDP_fragment: function() {
        // IDP.g:899:19: (singleStatementTimespanOutput= ruleTimespanSingleStatementComparison )
        // IDP.g:899:19: singleStatementTimespanOutput= ruleTimespanSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanSingleStatementComparison_in_synpred78_IDP12983);
        this.ruleTimespanSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred78_IDPCurrentDecisionNumber !== 'undefined' && this.synpred78_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred78_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred78_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementTimespanOutput=this.ruleTimespanSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred78_IDP",

    // $ANTLR start "synpred79_IDP"
    synpred79_IDP_fragment: function() {
        // IDP.g:900:19: (singleStatementDateOutput= ruleDateSingleStatementComparison )
        // IDP.g:900:19: singleStatementDateOutput= ruleDateSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementComparison_in_synpred79_IDP13010);
        this.ruleDateSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred79_IDPCurrentDecisionNumber !== 'undefined' && this.synpred79_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred79_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementDateOutput=this.ruleDateSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred79_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementDateOutput=this.ruleDateSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementDateOutput=this.ruleDateSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred79_IDP",

    // $ANTLR start "synpred80_IDP"
    synpred80_IDP_fragment: function() {
        // IDP.g:901:19: (singleStatementTimeOutput= ruleTimeSingleStatementComparison )
        // IDP.g:901:19: singleStatementTimeOutput= ruleTimeSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatementComparison_in_synpred80_IDP13037);
        this.ruleTimeSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred80_IDPCurrentDecisionNumber !== 'undefined' && this.synpred80_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred80_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred80_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementTimeOutput=this.ruleTimeSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred80_IDP",

    // $ANTLR start "synpred81_IDP"
    synpred81_IDP_fragment: function() {
        // IDP.g:902:19: (singleStatementTimestampOutput= ruleTimestampSingleStatementComparison )
        // IDP.g:902:19: singleStatementTimestampOutput= ruleTimestampSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementComparison_in_synpred81_IDP13064);
        this.ruleTimestampSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred81_IDPCurrentDecisionNumber !== 'undefined' && this.synpred81_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred81_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred81_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementTimestampOutput=this.ruleTimestampSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred81_IDP",

    // $ANTLR start "synpred82_IDP"
    synpred82_IDP_fragment: function() {
        // IDP.g:903:19: (singleStatementComplexOutput= complexStatementBooleanWhere )
        // IDP.g:903:19: singleStatementComplexOutput= complexStatementBooleanWhere
        this.pushFollow(IDPParser.FOLLOW_complexStatementBooleanWhere_in_synpred82_IDP13115);
        this.complexStatementBooleanWhere_DFAcall = false;

         if( typeof this.synpred82_IDPCurrentDecisionNumber !== 'undefined' && this.synpred82_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred82_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementComplexOutput=this.complexStatementBooleanWhere();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred82_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementComplexOutput=this.complexStatementBooleanWhere();

        	}
        	}
        else{
            var singleStatementComplexOutput=this.complexStatementBooleanWhere();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred82_IDP",

    // $ANTLR start "synpred83_IDP"
    synpred83_IDP_fragment: function() {
        // IDP.g:913:17: (singleStatementOutput= ruleNumericSingleStatementComparison )
        // IDP.g:913:17: singleStatementOutput= ruleNumericSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleNumericSingleStatementComparison_in_synpred83_IDP13296);
        this.ruleNumericSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred83_IDPCurrentDecisionNumber !== 'undefined' && this.synpred83_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred83_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleNumericSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred83_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleNumericSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleNumericSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred83_IDP",

    // $ANTLR start "synpred84_IDP"
    synpred84_IDP_fragment: function() {
        // IDP.g:914:19: (singleStatementOutput= ruleNullStatementComparison )
        // IDP.g:914:19: singleStatementOutput= ruleNullStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleNullStatementComparison_in_synpred84_IDP13323);
        this.ruleNullStatementComparison_DFAcall = false;

         if( typeof this.synpred84_IDPCurrentDecisionNumber !== 'undefined' && this.synpred84_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred84_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleNullStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred84_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleNullStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleNullStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred84_IDP",

    // $ANTLR start "synpred85_IDP"
    synpred85_IDP_fragment: function() {
        // IDP.g:915:19: (singleStatementOutput= ruleBooleanSingleStatement )
        // IDP.g:915:19: singleStatementOutput= ruleBooleanSingleStatement
        this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleStatement_in_synpred85_IDP13350);
        this.ruleBooleanSingleStatement_DFAcall = false;

         if( typeof this.synpred85_IDPCurrentDecisionNumber !== 'undefined' && this.synpred85_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred85_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleBooleanSingleStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred85_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleBooleanSingleStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleBooleanSingleStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred85_IDP",

    // $ANTLR start "synpred86_IDP"
    synpred86_IDP_fragment: function() {
        // IDP.g:916:19: (singleStatementOutput= ruleBooleanSingleSelectionStatement )
        // IDP.g:916:19: singleStatementOutput= ruleBooleanSingleSelectionStatement
        this.pushFollow(IDPParser.FOLLOW_ruleBooleanSingleSelectionStatement_in_synpred86_IDP13378);
        this.ruleBooleanSingleSelectionStatement_DFAcall = false;

         if( typeof this.synpred86_IDPCurrentDecisionNumber !== 'undefined' && this.synpred86_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred86_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred86_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleBooleanSingleSelectionStatement();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred86_IDP",

    // $ANTLR start "synpred87_IDP"
    synpred87_IDP_fragment: function() {
        // IDP.g:917:19: (singleStatementOutput= ruleStringSingleStatementComparison )
        // IDP.g:917:19: singleStatementOutput= ruleStringSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleStringSingleStatementComparison_in_synpred87_IDP13405);
        this.ruleStringSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred87_IDPCurrentDecisionNumber !== 'undefined' && this.synpred87_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred87_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleStringSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred87_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleStringSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleStringSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred87_IDP",

    // $ANTLR start "synpred88_IDP"
    synpred88_IDP_fragment: function() {
        // IDP.g:918:19: (singleStatementOutput= ruleTimespanSingleStatementComparison )
        // IDP.g:918:19: singleStatementOutput= ruleTimespanSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanSingleStatementComparison_in_synpred88_IDP13432);
        this.ruleTimespanSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred88_IDPCurrentDecisionNumber !== 'undefined' && this.synpred88_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred88_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimespanSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred88_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimespanSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimespanSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred88_IDP",

    // $ANTLR start "synpred89_IDP"
    synpred89_IDP_fragment: function() {
        // IDP.g:919:19: (singleStatementOutput= ruleDateSingleStatementComparison )
        // IDP.g:919:19: singleStatementOutput= ruleDateSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleDateSingleStatementComparison_in_synpred89_IDP13459);
        this.ruleDateSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred89_IDPCurrentDecisionNumber !== 'undefined' && this.synpred89_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred89_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleDateSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred89_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleDateSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleDateSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred89_IDP",

    // $ANTLR start "synpred90_IDP"
    synpred90_IDP_fragment: function() {
        // IDP.g:920:19: (singleStatementOutput= ruleTimeSingleStatementComparison )
        // IDP.g:920:19: singleStatementOutput= ruleTimeSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSingleStatementComparison_in_synpred90_IDP13486);
        this.ruleTimeSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred90_IDPCurrentDecisionNumber !== 'undefined' && this.synpred90_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred90_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimeSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred90_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimeSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimeSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred90_IDP",

    // $ANTLR start "synpred91_IDP"
    synpred91_IDP_fragment: function() {
        // IDP.g:921:19: (singleStatementOutput= ruleTimestampSingleStatementComparison )
        // IDP.g:921:19: singleStatementOutput= ruleTimestampSingleStatementComparison
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSingleStatementComparison_in_synpred91_IDP13513);
        this.ruleTimestampSingleStatementComparison_DFAcall = false;

         if( typeof this.synpred91_IDPCurrentDecisionNumber !== 'undefined' && this.synpred91_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred91_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.ruleTimestampSingleStatementComparison();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred91_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.ruleTimestampSingleStatementComparison();

        	}
        	}
        else{
            var singleStatementOutput=this.ruleTimestampSingleStatementComparison();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred91_IDP",

    // $ANTLR start "synpred92_IDP"
    synpred92_IDP_fragment: function() {
        // IDP.g:922:19: (singleStatementOutput= complexStatementBoolean )
        // IDP.g:922:19: singleStatementOutput= complexStatementBoolean
        this.pushFollow(IDPParser.FOLLOW_complexStatementBoolean_in_synpred92_IDP13564);
        this.complexStatementBoolean_DFAcall = false;

         if( typeof this.synpred92_IDPCurrentDecisionNumber !== 'undefined' && this.synpred92_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred92_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var singleStatementOutput=this.complexStatementBoolean();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred92_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var singleStatementOutput=this.complexStatementBoolean();

        	}
        	}
        else{
            var singleStatementOutput=this.complexStatementBoolean();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred92_IDP",

    // $ANTLR start "synpred96_IDP"
    synpred96_IDP_fragment: function() {
        // IDP.g:956:35: (leftSelectionOutput= ruleTimespanClause )
        // IDP.g:956:35: leftSelectionOutput= ruleTimespanClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_synpred96_IDP14406);
        this.ruleTimespanClause_DFAcall = false;

         if( typeof this.synpred96_IDPCurrentDecisionNumber !== 'undefined' && this.synpred96_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred96_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleTimespanClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred96_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleTimespanClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleTimespanClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred96_IDP",

    // $ANTLR start "synpred97_IDP"
    synpred97_IDP_fragment: function() {
        // IDP.g:956:78: (leftSelectionOutput= ruleNumericClause )
        // IDP.g:956:78: leftSelectionOutput= ruleNumericClause
        this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_synpred97_IDP14414);
        this.ruleNumericClause_DFAcall = false;

         if( typeof this.synpred97_IDPCurrentDecisionNumber !== 'undefined' && this.synpred97_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred97_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleNumericClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred97_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleNumericClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleNumericClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred97_IDP",

    // $ANTLR start "synpred98_IDP"
    synpred98_IDP_fragment: function() {
        // IDP.g:956:120: (leftSelectionOutput= ruleDateSelectionClause )
        // IDP.g:956:120: leftSelectionOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred98_IDP14422);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred98_IDPCurrentDecisionNumber !== 'undefined' && this.synpred98_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred98_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred98_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred98_IDP",

    // $ANTLR start "synpred99_IDP"
    synpred99_IDP_fragment: function() {
        // IDP.g:956:168: (leftSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:956:168: leftSelectionOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred99_IDP14430);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred99_IDPCurrentDecisionNumber !== 'undefined' && this.synpred99_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred99_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred99_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred99_IDP",

    // $ANTLR start "synpred100_IDP"
    synpred100_IDP_fragment: function() {
        // IDP.g:956:221: (leftSelectionOutput= ruleTimeSelectionClause )
        // IDP.g:956:221: leftSelectionOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred100_IDP14438);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred100_IDPCurrentDecisionNumber !== 'undefined' && this.synpred100_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred100_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred100_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred100_IDP",

    // $ANTLR start "synpred101_IDP"
    synpred101_IDP_fragment: function() {
        // IDP.g:956:269: (leftSelectionOutput= ruleStringClause )
        // IDP.g:956:269: leftSelectionOutput= ruleStringClause
        this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_synpred101_IDP14446);
        this.ruleStringClause_DFAcall = false;

         if( typeof this.synpred101_IDPCurrentDecisionNumber !== 'undefined' && this.synpred101_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred101_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var leftSelectionOutput=this.ruleStringClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred101_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var leftSelectionOutput=this.ruleStringClause();

        	}
        	}
        else{
            var leftSelectionOutput=this.ruleStringClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred101_IDP",

    // $ANTLR start "synpred104_IDP"
    synpred104_IDP_fragment: function() {
        // IDP.g:962:84: (rightSelectionOutput= ruleTimespanClause )
        // IDP.g:962:84: rightSelectionOutput= ruleTimespanClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanClause_in_synpred104_IDP14718);
        this.ruleTimespanClause_DFAcall = false;

         if( typeof this.synpred104_IDPCurrentDecisionNumber !== 'undefined' && this.synpred104_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred104_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimespanClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred104_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimespanClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimespanClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred104_IDP",

    // $ANTLR start "synpred105_IDP"
    synpred105_IDP_fragment: function() {
        // IDP.g:962:128: (rightSelectionOutput= ruleNumericClause )
        // IDP.g:962:128: rightSelectionOutput= ruleNumericClause
        this.pushFollow(IDPParser.FOLLOW_ruleNumericClause_in_synpred105_IDP14726);
        this.ruleNumericClause_DFAcall = false;

         if( typeof this.synpred105_IDPCurrentDecisionNumber !== 'undefined' && this.synpred105_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred105_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleNumericClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred105_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleNumericClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleNumericClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred105_IDP",

    // $ANTLR start "synpred106_IDP"
    synpred106_IDP_fragment: function() {
        // IDP.g:962:171: (rightSelectionOutput= ruleDateSelectionClause )
        // IDP.g:962:171: rightSelectionOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred106_IDP14734);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred106_IDPCurrentDecisionNumber !== 'undefined' && this.synpred106_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred106_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred106_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred106_IDP",

    // $ANTLR start "synpred107_IDP"
    synpred107_IDP_fragment: function() {
        // IDP.g:962:220: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:962:220: rightSelectionOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred107_IDP14742);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred107_IDPCurrentDecisionNumber !== 'undefined' && this.synpred107_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred107_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred107_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred107_IDP",

    // $ANTLR start "synpred108_IDP"
    synpred108_IDP_fragment: function() {
        // IDP.g:962:274: (rightSelectionOutput= ruleTimeSelectionClause )
        // IDP.g:962:274: rightSelectionOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred108_IDP14750);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred108_IDPCurrentDecisionNumber !== 'undefined' && this.synpred108_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred108_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred108_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred108_IDP",

    // $ANTLR start "synpred109_IDP"
    synpred109_IDP_fragment: function() {
        // IDP.g:962:322: (rightSelectionOutput= ruleStringClause )
        // IDP.g:962:322: rightSelectionOutput= ruleStringClause
        this.pushFollow(IDPParser.FOLLOW_ruleStringClause_in_synpred109_IDP14757);
        this.ruleStringClause_DFAcall = false;

         if( typeof this.synpred109_IDPCurrentDecisionNumber !== 'undefined' && this.synpred109_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred109_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleStringClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred109_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleStringClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleStringClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred109_IDP",

    // $ANTLR start "synpred145_IDP"
    synpred145_IDP_fragment: function() {
        // IDP.g:1194:35: (compoundSelectionOutput= ruleDateCollection )
        // IDP.g:1194:35: compoundSelectionOutput= ruleDateCollection
        this.pushFollow(IDPParser.FOLLOW_ruleDateCollection_in_synpred145_IDP20267);
        this.ruleDateCollection_DFAcall = false;

         if( typeof this.synpred145_IDPCurrentDecisionNumber !== 'undefined' && this.synpred145_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred145_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var compoundSelectionOutput=this.ruleDateCollection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred145_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var compoundSelectionOutput=this.ruleDateCollection();

        	}
        	}
        else{
            var compoundSelectionOutput=this.ruleDateCollection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred145_IDP",

    // $ANTLR start "synpred146_IDP"
    synpred146_IDP_fragment: function() {
        // IDP.g:1195:35: (compoundSelectionOutput= ruleTimestampCollection )
        // IDP.g:1195:35: compoundSelectionOutput= ruleTimestampCollection
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampCollection_in_synpred146_IDP20307);
        this.ruleTimestampCollection_DFAcall = false;

         if( typeof this.synpred146_IDPCurrentDecisionNumber !== 'undefined' && this.synpred146_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred146_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var compoundSelectionOutput=this.ruleTimestampCollection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred146_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var compoundSelectionOutput=this.ruleTimestampCollection();

        	}
        	}
        else{
            var compoundSelectionOutput=this.ruleTimestampCollection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred146_IDP",

    // $ANTLR start "synpred158_IDP"
    synpred158_IDP_fragment: function() {
        // IDP.g:1255:35: ( LROUNDB selectionOutput= ruleBaseTime RROUNDB )
        // IDP.g:1255:35: LROUNDB selectionOutput= ruleBaseTime RROUNDB


        this.pushNextTokens(LROUNDB,LROUNDB,1);
        this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_synpred158_IDP21618); if (this.state.failed) return ;
        if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTime_in_synpred158_IDP21624);
        this.ruleBaseTime_DFAcall = false;

         if( typeof this.synpred158_IDPCurrentDecisionNumber !== 'undefined' && this.synpred158_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred158_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTime();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred158_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTime();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTime();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


        this.pushNextTokens(RROUNDB,RROUNDB,1);
        this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_synpred158_IDP21626); if (this.state.failed) return ;
        if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }


    },
    // $ANTLR end "synpred158_IDP",

    // $ANTLR start "synpred168_IDP"
    synpred168_IDP_fragment: function() {
        // IDP.g:1307:17: ( ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) )
        // IDP.g:1307:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
        // IDP.g:1307:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
        // IDP.g:1307:19: (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1307:19: (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1307:20: dateOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred168_IDP22833);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred168_IDPCurrentDecisionNumber !== 'undefined' && this.synpred168_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred168_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred168_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
            this.input.consume();
            this.state.errorRecovery=false;
        	this.updateLTType(this.input.LT(1));this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse__22839 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
            throw mse__22839;
        }

        // IDP.g:1307:104: (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1307:105: dateOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred168_IDP22852);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred168_IDPCurrentDecisionNumber !== 'undefined' && this.synpred168_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred168_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred168_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;








    },
    // $ANTLR end "synpred168_IDP",

    // $ANTLR start "synpred173_IDP"
    synpred173_IDP_fragment: function() {
        // IDP.g:1338:10: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:1338:10: rightSelectionOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred173_IDP23195);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred173_IDPCurrentDecisionNumber !== 'undefined' && this.synpred173_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred173_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred173_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred173_IDP",

    // $ANTLR start "synpred184_IDP"
    synpred184_IDP_fragment: function() {
        // IDP.g:1437:34: ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB )
        // IDP.g:1437:34: LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB


        this.pushNextTokens(LROUNDB,LROUNDB,1);
        this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_synpred184_IDP25268); if (this.state.failed) return ;
        if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampArithmeticSelectionClause_in_synpred184_IDP25274);
        this.ruleTimestampArithmeticSelectionClause_DFAcall = false;

         if( typeof this.synpred184_IDPCurrentDecisionNumber !== 'undefined' && this.synpred184_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred184_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimestampArithmeticSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred184_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimestampArithmeticSelectionClause();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimestampArithmeticSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


        this.pushNextTokens(RROUNDB,RROUNDB,1);
        this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_synpred184_IDP25276); if (this.state.failed) return ;
        if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }


    },
    // $ANTLR end "synpred184_IDP",

    // $ANTLR start "synpred185_IDP"
    synpred185_IDP_fragment: function() {
        // IDP.g:1444:35: ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB )
        // IDP.g:1444:35: LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB


        this.pushNextTokens(LROUNDB,LROUNDB,1);
        this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_synpred185_IDP25485); if (this.state.failed) return ;
        if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_synpred185_IDP25491);
        this.ruleBaseTimestamp_DFAcall = false;

         if( typeof this.synpred185_IDPCurrentDecisionNumber !== 'undefined' && this.synpred185_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred185_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimestamp();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred185_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimestamp();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimestamp();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


        this.pushNextTokens(RROUNDB,RROUNDB,1);
        this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_synpred185_IDP25493); if (this.state.failed) return ;
        if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }


    },
    // $ANTLR end "synpred185_IDP",

    // $ANTLR start "synpred186_IDP"
    synpred186_IDP_fragment: function() {
        // IDP.g:1447:35: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic )
        // IDP.g:1447:35: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterTimestampArithmetic
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred186_IDP25610);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred186_IDPCurrentDecisionNumber !== 'undefined' && this.synpred186_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred186_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred186_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticAfterTimestampArithmetic_in_synpred186_IDP25684);
        this.ruleTimespanArithmeticAfterTimestampArithmetic_DFAcall = false;

         if( typeof this.synpred186_IDPCurrentDecisionNumber !== 'undefined' && this.synpred186_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred186_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred186_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanArithmeticAfterTimestampArithmetic();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred186_IDP",

    // $ANTLR start "synpred194_IDP"
    synpred194_IDP_fragment: function() {
        // IDP.g:1544:17: ( ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) )
        // IDP.g:1544:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
        // IDP.g:1544:17: ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) )
        // IDP.g:1544:18: (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause )
        // IDP.g:1544:18: (dateOutput= ruleTimestampSelectionClause )
        // IDP.g:1544:19: dateOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred194_IDP27545);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred194_IDPCurrentDecisionNumber !== 'undefined' && this.synpred194_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred194_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred194_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
            this.input.consume();
            this.state.errorRecovery=false;
        	this.updateLTType(this.input.LT(1));this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse__27550 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
            throw mse__27550;
        }

        // IDP.g:1544:107: (dateOutput= ruleTimestampSelectionClause )
        // IDP.g:1544:109: dateOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred194_IDP27564);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred194_IDPCurrentDecisionNumber !== 'undefined' && this.synpred194_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred194_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred194_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;








    },
    // $ANTLR end "synpred194_IDP",

    // $ANTLR start "synpred196_IDP"
    synpred196_IDP_fragment: function() {
        // IDP.g:1545:17: ( ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) )
        // IDP.g:1545:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
        // IDP.g:1545:17: ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) )
        // IDP.g:1545:18: (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1545:18: (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1545:19: dateOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred196_IDP27595);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred196_IDPCurrentDecisionNumber !== 'undefined' && this.synpred196_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred196_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred196_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
            this.input.consume();
            this.state.errorRecovery=false;
        	this.updateLTType(this.input.LT(1));this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse__27601 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
            throw mse__27601;
        }

        // IDP.g:1545:103: (dateOutput= ruleTimeSelectionClause )
        // IDP.g:1545:104: dateOutput= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred196_IDP27614);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred196_IDPCurrentDecisionNumber !== 'undefined' && this.synpred196_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred196_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred196_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;








    },
    // $ANTLR end "synpred196_IDP",

    // $ANTLR start "synpred202_IDP"
    synpred202_IDP_fragment: function() {
        // IDP.g:1600:10: ( (rightSelectionOutput= ruleDateSelectionClause ) )
        // IDP.g:1600:10: (rightSelectionOutput= ruleDateSelectionClause )
        // IDP.g:1600:10: (rightSelectionOutput= ruleDateSelectionClause )
        // IDP.g:1600:12: rightSelectionOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred202_IDP28190);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred202_IDPCurrentDecisionNumber !== 'undefined' && this.synpred202_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred202_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred202_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred202_IDP",

    // $ANTLR start "synpred203_IDP"
    synpred203_IDP_fragment: function() {
        // IDP.g:1603:9: ( (rightSelectionOutput= ruleTimestampSelectionClause ) )
        // IDP.g:1603:9: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:1603:9: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:1603:11: rightSelectionOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred203_IDP28212);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred203_IDPCurrentDecisionNumber !== 'undefined' && this.synpred203_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred203_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred203_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred203_IDP",

    // $ANTLR start "synpred216_IDP"
    synpred216_IDP_fragment: function() {
        // IDP.g:1699:34: ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB )
        // IDP.g:1699:34: LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB


        this.pushNextTokens(LROUNDB,LROUNDB,1);
        this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_synpred216_IDP30252); if (this.state.failed) return ;
        if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        this.pushFollow(IDPParser.FOLLOW_ruleDateArithmeticSelectionClause_in_synpred216_IDP30258);
        this.ruleDateArithmeticSelectionClause_DFAcall = false;

         if( typeof this.synpred216_IDPCurrentDecisionNumber !== 'undefined' && this.synpred216_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred216_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleDateArithmeticSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred216_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleDateArithmeticSelectionClause();

        	}
        	}
        else{
            var selectionOutput=this.ruleDateArithmeticSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


        this.pushNextTokens(RROUNDB,RROUNDB,1);
        this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_synpred216_IDP30260); if (this.state.failed) return ;
        if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }


    },
    // $ANTLR end "synpred216_IDP",

    // $ANTLR start "synpred217_IDP"
    synpred217_IDP_fragment: function() {
        // IDP.g:1709:35: ( LROUNDB selectionOutput= ruleBaseDate RROUNDB )
        // IDP.g:1709:35: LROUNDB selectionOutput= ruleBaseDate RROUNDB


        this.pushNextTokens(LROUNDB,LROUNDB,1);
        this.match(this.input,LROUNDB,IDPParser.FOLLOW_LROUNDB_in_synpred217_IDP30470); if (this.state.failed) return ;
        if( LROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_synpred217_IDP30476);
        this.ruleBaseDate_DFAcall = false;

         if( typeof this.synpred217_IDPCurrentDecisionNumber !== 'undefined' && this.synpred217_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred217_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseDate();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred217_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseDate();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseDate();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


        this.pushNextTokens(RROUNDB,RROUNDB,1);
        this.match(this.input,RROUNDB,IDPParser.FOLLOW_RROUNDB_in_synpred217_IDP30478); if (this.state.failed) return ;
        if( RROUNDB !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }


    },
    // $ANTLR end "synpred217_IDP",

    // $ANTLR start "synpred218_IDP"
    synpred218_IDP_fragment: function() {
        // IDP.g:1712:35: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic )
        // IDP.g:1712:35: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanArithmeticAfterDateArithmetic
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred218_IDP30595);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred218_IDPCurrentDecisionNumber !== 'undefined' && this.synpred218_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred218_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred218_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticAfterDateArithmetic_in_synpred218_IDP30669);
        this.ruleTimespanArithmeticAfterDateArithmetic_DFAcall = false;

         if( typeof this.synpred218_IDPCurrentDecisionNumber !== 'undefined' && this.synpred218_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred218_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred218_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanArithmeticAfterDateArithmetic();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred218_IDP",

    // $ANTLR start "synpred220_IDP"
    synpred220_IDP_fragment: function() {
        // IDP.g:1754:35: (selectionOutput= ruleBaseTimestamp )
        // IDP.g:1754:35: selectionOutput= ruleBaseTimestamp
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_synpred220_IDP31655);
        this.ruleBaseTimestamp_DFAcall = false;

         if( typeof this.synpred220_IDPCurrentDecisionNumber !== 'undefined' && this.synpred220_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred220_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimestamp();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred220_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimestamp();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimestamp();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred220_IDP",

    // $ANTLR start "synpred221_IDP"
    synpred221_IDP_fragment: function() {
        // IDP.g:1750:19: ( ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) ) )
        // IDP.g:1750:19: ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) )
        // IDP.g:1750:19: ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) )
        // IDP.g:1751:22: (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) )
        // IDP.g:1751:22: (selectionOutput= ruleBaseTimestampConstant )
        // IDP.g:1751:23: selectionOutput= ruleBaseTimestampConstant
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestampConstant_in_synpred221_IDP31533);
        this.ruleBaseTimestampConstant_DFAcall = false;

         if( typeof this.synpred221_IDPCurrentDecisionNumber !== 'undefined' && this.synpred221_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred221_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimestampConstant();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred221_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimestampConstant();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimestampConstant();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        // IDP.g:1752:36: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) )
        // IDP.g:1753:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )


        this.pushNextTokens(MINUS,MINUS,1);
        arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_synpred221_IDP31612); if (this.state.failed) return ;
        if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:1754:34: (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )
        var alt316=2;

        this.synpred221_IDP_DFAcall=(typeof this.synpred221_IDP_DFAcall === 'undefined' ? false: this.synpred221_IDP_DFAcall); // only valid for synpred
        if(this.synpred221_IDP_DFAcall === false /*&& !this.failedPredictDFA316*/)
        {   
            this.dfa316NumberOfAlt = alt316;
            this.dfa316InRule = "synpred221_IDP";
        	this.dfa316Mark   = (typeof currentRuleMark === 'undefined' ? 0: currentRuleMark);
        	this.synpred221_IDPCurrentDecisionNumber  = 316; 
            alt316 = this.dfa316.predict(this.input);
        	if (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && (alt316 === 0 || alt316 === EOF)) {
        		this.parseUtilsLib.handleAllDFAOptions(this, 316);
        		return retval;
            }
        }	
        else
            alt316 = this.dfa316AltNumber;	
        switch (alt316) {
            case 1 :
                // IDP.g:1754:35: selectionOutput= ruleBaseTimestamp
                this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_synpred221_IDP31655);
                this.ruleBaseTimestamp_DFAcall = false;

                 if( typeof this.synpred221_IDPCurrentDecisionNumber !== 'undefined' && this.synpred221_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred221_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA316 !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput=this.ruleBaseTimestamp();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred221_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput=this.ruleBaseTimestamp();

                	}
                	}
                else{
                    var selectionOutput=this.ruleBaseTimestamp();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;


                break;
            case 2 :
                // IDP.g:1754:73: selectionOutput= ruleBaseDate
                this.pushFollow(IDPParser.FOLLOW_ruleBaseDate_in_synpred221_IDP31663);
                this.ruleBaseDate_DFAcall = false;

                 if( typeof this.synpred221_IDPCurrentDecisionNumber !== 'undefined' && this.synpred221_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred221_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA316 !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput=this.ruleBaseDate();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred221_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput=this.ruleBaseDate();

                	}
                	}
                else{
                    var selectionOutput=this.ruleBaseDate();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;


                break;

        }
        /*if(this.failedPredictDFA316 !== undefined && this.failedPredictDFA316)
        { 
            throw null;
        }*/









    },
    // $ANTLR end "synpred221_IDP",

    // $ANTLR start "synpred222_IDP"
    synpred222_IDP_fragment: function() {
        // IDP.g:1758:32: ( ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) ) )
        // IDP.g:1758:32: ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) )
        // IDP.g:1758:32: ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) )
        // IDP.g:1758:33: (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) )
        // IDP.g:1758:33: (selectionOutput= ruleBaseTimestamp )
        // IDP.g:1758:34: selectionOutput= ruleBaseTimestamp
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_synpred222_IDP31825);
        this.ruleBaseTimestamp_DFAcall = false;

         if( typeof this.synpred222_IDPCurrentDecisionNumber !== 'undefined' && this.synpred222_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred222_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimestamp();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred222_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimestamp();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimestamp();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        // IDP.g:1759:33: (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) )
        // IDP.g:1759:34: arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp )


        this.pushNextTokens(MINUS,MINUS,1);
        arithmeticOperOutput=this.match(this.input,MINUS,IDPParser.FOLLOW_MINUS_in_synpred222_IDP31867); if (this.state.failed) return ;
        if( MINUS !== EOF ){ // if it is EOF keep the valid next tokens
        	this.updateLTType(this.input.LT(1));
        }
        // IDP.g:1760:33: (selectionOutput= ruleBaseTimestamp )
        // IDP.g:1760:34: selectionOutput= ruleBaseTimestamp
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimestamp_in_synpred222_IDP31909);
        this.ruleBaseTimestamp_DFAcall = false;

         if( typeof this.synpred222_IDPCurrentDecisionNumber !== 'undefined' && this.synpred222_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred222_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimestamp();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred222_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimestamp();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimestamp();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;











    },
    // $ANTLR end "synpred222_IDP",

    // $ANTLR start "synpred228_IDP"
    synpred228_IDP_fragment: function() {
        // IDP.g:1831:30: (dateOutput= ruleDateSelectionClause )
        // IDP.g:1831:30: dateOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred228_IDP32897);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred228_IDPCurrentDecisionNumber !== 'undefined' && this.synpred228_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred228_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred228_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred228_IDP",

    // $ANTLR start "synpred229_IDP"
    synpred229_IDP_fragment: function() {
        // IDP.g:1832:30: (dateOutput= ruleDateSelectionClause )
        // IDP.g:1832:30: dateOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred229_IDP32938);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred229_IDPCurrentDecisionNumber !== 'undefined' && this.synpred229_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred229_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred229_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred229_IDP",

    // $ANTLR start "synpred233_IDP"
    synpred233_IDP_fragment: function() {
        // IDP.g:1832:156: (dateOutput= ruleDateCollectionSelectionClause )
        // IDP.g:1832:156: dateOutput= ruleDateCollectionSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateCollectionSelectionClause_in_synpred233_IDP32965);
        this.ruleDateCollectionSelectionClause_DFAcall = false;

         if( typeof this.synpred233_IDPCurrentDecisionNumber !== 'undefined' && this.synpred233_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred233_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleDateCollectionSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred233_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleDateCollectionSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleDateCollectionSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred233_IDP",

    // $ANTLR start "synpred235_IDP"
    synpred235_IDP_fragment: function() {
        // IDP.g:1838:17: ( ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) )
        // IDP.g:1838:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
        // IDP.g:1838:17: ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) )
        // IDP.g:1838:19: (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause )
        // IDP.g:1838:19: (dateOutput= ruleDateSelectionClause )
        // IDP.g:1838:20: dateOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred235_IDP33087);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred235_IDPCurrentDecisionNumber !== 'undefined' && this.synpred235_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred235_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred235_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        if ( (this.pushNextTokens(AND,AND,1) && this.input.LA(1)==AND )||(this.pushNextTokens(TO,TO,1) && this.input.LA(1)==TO ) ) {
            this.input.consume();
            this.state.errorRecovery=false;
        	this.updateLTType(this.input.LT(1));this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse__33093 = new org.antlr.runtime.MismatchedSetException(this.lastExpecting.expecting, this.input);
            throw mse__33093;
        }

        // IDP.g:1838:104: (dateOutput= ruleDateSelectionClause )
        // IDP.g:1838:105: dateOutput= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred235_IDP33106);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred235_IDPCurrentDecisionNumber !== 'undefined' && this.synpred235_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred235_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var dateOutput=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred235_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var dateOutput=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var dateOutput=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;








    },
    // $ANTLR end "synpred235_IDP",

    // $ANTLR start "synpred241_IDP"
    synpred241_IDP_fragment: function() {
        // IDP.g:1879:10: ( (rightSelectionOutput= ruleTimestampSelectionClause ) )
        // IDP.g:1879:10: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:1879:10: (rightSelectionOutput= ruleTimestampSelectionClause )
        // IDP.g:1879:12: rightSelectionOutput= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred241_IDP34049);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred241_IDPCurrentDecisionNumber !== 'undefined' && this.synpred241_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred241_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred241_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var rightSelectionOutput=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var rightSelectionOutput=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred241_IDP",

    // $ANTLR start "synpred288_IDP"
    synpred288_IDP_fragment: function() {
        // IDP.g:2150:33: (val= ruleTimestampSelectionClause )
        // IDP.g:2150:33: val= ruleTimestampSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimestampSelectionClause_in_synpred288_IDP40365);
        this.ruleTimestampSelectionClause_DFAcall = false;

         if( typeof this.synpred288_IDPCurrentDecisionNumber !== 'undefined' && this.synpred288_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred288_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var val=this.ruleTimestampSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred288_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var val=this.ruleTimestampSelectionClause();

        	}
        	}
        else{
            var val=this.ruleTimestampSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred288_IDP",

    // $ANTLR start "synpred289_IDP"
    synpred289_IDP_fragment: function() {
        // IDP.g:2150:93: (val= ruleTimeSelectionClause )
        // IDP.g:2150:93: val= ruleTimeSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSelectionClause_in_synpred289_IDP40375);
        this.ruleTimeSelectionClause_DFAcall = false;

         if( typeof this.synpred289_IDPCurrentDecisionNumber !== 'undefined' && this.synpred289_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred289_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var val=this.ruleTimeSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred289_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var val=this.ruleTimeSelectionClause();

        	}
        	}
        else{
            var val=this.ruleTimeSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred289_IDP",

    // $ANTLR start "synpred290_IDP"
    synpred290_IDP_fragment: function() {
        // IDP.g:2150:148: (val= ruleStringSelectionClause )
        // IDP.g:2150:148: val= ruleStringSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleStringSelectionClause_in_synpred290_IDP40385);
        this.ruleStringSelectionClause_DFAcall = false;

         if( typeof this.synpred290_IDPCurrentDecisionNumber !== 'undefined' && this.synpred290_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred290_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var val=this.ruleStringSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred290_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var val=this.ruleStringSelectionClause();

        	}
        	}
        else{
            var val=this.ruleStringSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred290_IDP",

    // $ANTLR start "synpred291_IDP"
    synpred291_IDP_fragment: function() {
        // IDP.g:2150:205: (val= ruleNumericSelectionClause )
        // IDP.g:2150:205: val= ruleNumericSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_synpred291_IDP40395);
        this.ruleNumericSelectionClause_DFAcall = false;

         if( typeof this.synpred291_IDPCurrentDecisionNumber !== 'undefined' && this.synpred291_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred291_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var val=this.ruleNumericSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred291_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var val=this.ruleNumericSelectionClause();

        	}
        	}
        else{
            var val=this.ruleNumericSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred291_IDP",

    // $ANTLR start "synpred292_IDP"
    synpred292_IDP_fragment: function() {
        // IDP.g:2150:263: (val= ruleDateSelectionClause )
        // IDP.g:2150:263: val= ruleDateSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleDateSelectionClause_in_synpred292_IDP40405);
        this.ruleDateSelectionClause_DFAcall = false;

         if( typeof this.synpred292_IDPCurrentDecisionNumber !== 'undefined' && this.synpred292_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred292_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var val=this.ruleDateSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred292_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var val=this.ruleDateSelectionClause();

        	}
        	}
        else{
            var val=this.ruleDateSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred292_IDP",

    // $ANTLR start "synpred300_IDP"
    synpred300_IDP_fragment: function() {
        // IDP.g:2284:65: ( (navigationOutputDT= ruleStringAliasDTCollectionContext ) )
        // IDP.g:2284:65: (navigationOutputDT= ruleStringAliasDTCollectionContext )
        // IDP.g:2284:65: (navigationOutputDT= ruleStringAliasDTCollectionContext )
        // IDP.g:2284:66: navigationOutputDT= ruleStringAliasDTCollectionContext
        this.pushFollow(IDPParser.FOLLOW_ruleStringAliasDTCollectionContext_in_synpred300_IDP43062);
        this.ruleStringAliasDTCollectionContext_DFAcall = false;

         if( typeof this.synpred300_IDPCurrentDecisionNumber !== 'undefined' && this.synpred300_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred300_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var navigationOutputDT=this.ruleStringAliasDTCollectionContext();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred300_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var navigationOutputDT=this.ruleStringAliasDTCollectionContext();

        	}
        	}
        else{
            var navigationOutputDT=this.ruleStringAliasDTCollectionContext();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred300_IDP",

    // $ANTLR start "synpred357_IDP"
    synpred357_IDP_fragment: function() {
        // IDP.g:2566:26: (arithmeticMinusOper= ruleArithmeticMinus )
        // IDP.g:2566:26: arithmeticMinusOper= ruleArithmeticMinus
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMinus_in_synpred357_IDP49511);
        this.ruleArithmeticMinus_DFAcall = false;

         if( typeof this.synpred357_IDPCurrentDecisionNumber !== 'undefined' && this.synpred357_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred357_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticMinusOper=this.ruleArithmeticMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred357_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticMinusOper=this.ruleArithmeticMinus();

        	}
        	}
        else{
            var arithmeticMinusOper=this.ruleArithmeticMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred357_IDP",

    // $ANTLR start "synpred358_IDP"
    synpred358_IDP_fragment: function() {
        // IDP.g:2566:154: ( (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr )
        // IDP.g:2566:154: (arithmeticPlusMinusOper= ruleArithmeticPlusMinus ) p= mexpr
        // IDP.g:2566:154: (arithmeticPlusMinusOper= ruleArithmeticPlusMinus )
        // IDP.g:2566:155: arithmeticPlusMinusOper= ruleArithmeticPlusMinus
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred358_IDP49531);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred358_IDPCurrentDecisionNumber !== 'undefined' && this.synpred358_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred358_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred358_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticPlusMinusOper=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        this.pushFollow(IDPParser.FOLLOW_mexpr_in_synpred358_IDP49541);
        this.mexpr_DFAcall = false;

         if( typeof this.synpred358_IDPCurrentDecisionNumber !== 'undefined' && this.synpred358_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred358_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var p=this.mexpr();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred358_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var p=this.mexpr();

        	}
        	}
        else{
            var p=this.mexpr();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred358_IDP",

    // $ANTLR start "synpred359_IDP"
    synpred359_IDP_fragment: function() {
        // IDP.g:2573:65: ( (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom )
        // IDP.g:2573:65: (arithmeticMultDivOper= ruleArithmeticMultDiv ) b= atom
        // IDP.g:2573:65: (arithmeticMultDivOper= ruleArithmeticMultDiv )
        // IDP.g:2573:66: arithmeticMultDivOper= ruleArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_synpred359_IDP49688);
        this.ruleArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred359_IDPCurrentDecisionNumber !== 'undefined' && this.synpred359_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred359_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticMultDivOper=this.ruleArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred359_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticMultDivOper=this.ruleArithmeticMultDiv();

        	}
        	}
        else{
            var arithmeticMultDivOper=this.ruleArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        this.pushFollow(IDPParser.FOLLOW_atom_in_synpred359_IDP49697);
        this.atom_DFAcall = false;

         if( typeof this.synpred359_IDPCurrentDecisionNumber !== 'undefined' && this.synpred359_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred359_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var b=this.atom();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred359_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var b=this.atom();

        	}
        	}
        else{
            var b=this.atom();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred359_IDP",

    // $ANTLR start "synpred361_IDP"
    synpred361_IDP_fragment: function() {
        // IDP.g:2583:34: (selectionClauseOutput= ruleNumericSelectionClause )
        // IDP.g:2583:34: selectionClauseOutput= ruleNumericSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleNumericSelectionClause_in_synpred361_IDP49941);
        this.ruleNumericSelectionClause_DFAcall = false;

         if( typeof this.synpred361_IDPCurrentDecisionNumber !== 'undefined' && this.synpred361_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred361_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.ruleNumericSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred361_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.ruleNumericSelectionClause();

        	}
        	}
        else{
            var selectionClauseOutput=this.ruleNumericSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred361_IDP",

    // $ANTLR start "synpred367_IDP"
    synpred367_IDP_fragment: function() {
        // IDP.g:2613:26: ( (numberOutput= ruleNumericCollectionSelectionClause ) )
        // IDP.g:2613:26: (numberOutput= ruleNumericCollectionSelectionClause )
        // IDP.g:2613:26: (numberOutput= ruleNumericCollectionSelectionClause )
        // IDP.g:2613:27: numberOutput= ruleNumericCollectionSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleNumericCollectionSelectionClause_in_synpred367_IDP50642);
        this.ruleNumericCollectionSelectionClause_DFAcall = false;

         if( typeof this.synpred367_IDPCurrentDecisionNumber !== 'undefined' && this.synpred367_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred367_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var numberOutput=this.ruleNumericCollectionSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred367_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var numberOutput=this.ruleNumericCollectionSelectionClause();

        	}
        	}
        else{
            var numberOutput=this.ruleNumericCollectionSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred367_IDP",

    // $ANTLR start "synpred402_IDP"
    synpred402_IDP_fragment: function() {
        // IDP.g:2863:33: (selectionOutput= ruleBaseTimespan )
        // IDP.g:2863:33: selectionOutput= ruleBaseTimespan
        this.pushFollow(IDPParser.FOLLOW_ruleBaseTimespan_in_synpred402_IDP56438);
        this.ruleBaseTimespan_DFAcall = false;

         if( typeof this.synpred402_IDPCurrentDecisionNumber !== 'undefined' && this.synpred402_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred402_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseTimespan();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred402_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseTimespan();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseTimespan();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred402_IDP",

    // $ANTLR start "synpred403_IDP"
    synpred403_IDP_fragment: function() {
        // IDP.g:2864:35: (selectionOutput= ruleCompoundTimespanSelection )
        // IDP.g:2864:35: selectionOutput= ruleCompoundTimespanSelection
        this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_synpred403_IDP56480);
        this.ruleCompoundTimespanSelection_DFAcall = false;

         if( typeof this.synpred403_IDPCurrentDecisionNumber !== 'undefined' && this.synpred403_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred403_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleCompoundTimespanSelection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred403_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleCompoundTimespanSelection();

        	}
        	}
        else{
            var selectionOutput=this.ruleCompoundTimespanSelection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred403_IDP",

    // $ANTLR start "synpred404_IDP"
    synpred404_IDP_fragment: function() {
        // IDP.g:2873:33: (selectionOutput= ruleBaseForDateTimespan )
        // IDP.g:2873:33: selectionOutput= ruleBaseForDateTimespan
        this.pushFollow(IDPParser.FOLLOW_ruleBaseForDateTimespan_in_synpred404_IDP56778);
        this.ruleBaseForDateTimespan_DFAcall = false;

         if( typeof this.synpred404_IDPCurrentDecisionNumber !== 'undefined' && this.synpred404_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred404_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleBaseForDateTimespan();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred404_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleBaseForDateTimespan();

        	}
        	}
        else{
            var selectionOutput=this.ruleBaseForDateTimespan();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred404_IDP",

    // $ANTLR start "synpred405_IDP"
    synpred405_IDP_fragment: function() {
        // IDP.g:2874:35: (selectionOutput= ruleCompoundTimespanSelection )
        // IDP.g:2874:35: selectionOutput= ruleCompoundTimespanSelection
        this.pushFollow(IDPParser.FOLLOW_ruleCompoundTimespanSelection_in_synpred405_IDP56820);
        this.ruleCompoundTimespanSelection_DFAcall = false;

         if( typeof this.synpred405_IDPCurrentDecisionNumber !== 'undefined' && this.synpred405_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred405_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleCompoundTimespanSelection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred405_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleCompoundTimespanSelection();

        	}
        	}
        else{
            var selectionOutput=this.ruleCompoundTimespanSelection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred405_IDP",

    // $ANTLR start "synpred410_IDP"
    synpred410_IDP_fragment: function() {
        // IDP.g:2925:34: (selectionOutput= ruleTimeSpanFromTimestampSubtraction )
        // IDP.g:2925:34: selectionOutput= ruleTimeSpanFromTimestampSubtraction
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_synpred410_IDP58082);
        this.ruleTimeSpanFromTimestampSubtraction_DFAcall = false;

         if( typeof this.synpred410_IDPCurrentDecisionNumber !== 'undefined' && this.synpred410_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred410_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred410_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimeSpanFromTimestampSubtraction();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred410_IDP",

    // $ANTLR start "synpred411_IDP"
    synpred411_IDP_fragment: function() {
        // IDP.g:2928:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets ) )
        // IDP.g:2928:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets )
        // IDP.g:2928:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets )
        // IDP.g:2928:34: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred411_IDP58199);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred411_IDPCurrentDecisionNumber !== 'undefined' && this.synpred411_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred411_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred411_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_synpred411_IDP58205);
        this.ruleTimeSpanFromDateSubtractionWithBrackets_DFAcall = false;

         if( typeof this.synpred411_IDPCurrentDecisionNumber !== 'undefined' && this.synpred411_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred411_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred411_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred411_IDP",

    // $ANTLR start "synpred412_IDP"
    synpred412_IDP_fragment: function() {
        // IDP.g:2929:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )
        // IDP.g:2929:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv )
        // IDP.g:2929:33: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv )
        // IDP.g:2929:34: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput= ruleTimespanForDateArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred412_IDP58247);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred412_IDPCurrentDecisionNumber !== 'undefined' && this.synpred412_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred412_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred412_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_synpred412_IDP58253);
        this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred412_IDPCurrentDecisionNumber !== 'undefined' && this.synpred412_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred412_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred412_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred412_IDP",

    // $ANTLR start "synpred413_IDP"
    synpred413_IDP_fragment: function() {
        // IDP.g:2944:36: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) )
        // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
        // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
        // IDP.g:2944:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred413_IDP58681);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred413_IDPCurrentDecisionNumber !== 'undefined' && this.synpred413_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred413_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred413_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred413_IDP58687);
        this.ruleTimespanArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred413_IDPCurrentDecisionNumber !== 'undefined' && this.synpred413_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred413_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred413_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        	}
        	}
        else{
            var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred413_IDP",

    // $ANTLR start "synpred414_IDP"
    synpred414_IDP_fragment: function() {
        // IDP.g:2944:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )
        // IDP.g:2944:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
        // IDP.g:2944:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
        var alt355=2;

        var LA355_0 = this.input.LA(1);


        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA355_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA355_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA355_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA355_0==PLUS )) ) {
            var LA355_1 = this.input.LA(2);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred413_IDP()'.indexOf("synpred") !== -1) ||  this.synpred413_IDP()) ) {
                alt355=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'true'.indexOf("synpred") !== -1) ||  true) ) {
                alt355=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return ;}
                var nvae_355_1 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 355, 1, this.input);

                nvae_355_1.c = this.input.LA(2);
                throw nvae_355_1;
            }
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var nvae_355_0 =
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 355, 0, this.input);

            nvae_355_0.c = this.input.LA(1);
            throw nvae_355_0;
        }
        switch (alt355) {
            case 1 :
                // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                // IDP.g:2944:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                // IDP.g:2944:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
                this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred414_IDP58681);
                this.ruleArithmeticPlusMinus_DFAcall = false;

                 if( typeof this.synpred414_IDPCurrentDecisionNumber !== 'undefined' && this.synpred414_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred414_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred414_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	}
                	}
                else{
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;
                this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred414_IDP58687);
                this.ruleTimespanArithmeticMultDiv_DFAcall = false;

                 if( typeof this.synpred414_IDPCurrentDecisionNumber !== 'undefined' && this.synpred414_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred414_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred414_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                	}
                	}
                else{
                    var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;





                break;
            case 2 :
                // IDP.g:2945:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                // IDP.g:2945:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                // IDP.g:2945:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets
                this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred414_IDP58732);
                this.ruleArithmeticPlusMinus_DFAcall = false;

                 if( typeof this.synpred414_IDPCurrentDecisionNumber !== 'undefined' && this.synpred414_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred414_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred414_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	}
                	}
                else{
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;
                this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_synpred414_IDP58738);
                this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                 if( typeof this.synpred414_IDPCurrentDecisionNumber !== 'undefined' && this.synpred414_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred414_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred414_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                	}
                	}
                else{
                    var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;





                break;

        }
        /*if(this.failedPredictDFA355 !== undefined && this.failedPredictDFA355)
        { 
            throw null;
        }*/



    },
    // $ANTLR end "synpred414_IDP",

    // $ANTLR start "synpred415_IDP"
    synpred415_IDP_fragment: function() {
        // IDP.g:2957:36: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) )
        // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
        // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
        // IDP.g:2957:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred415_IDP59133);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred415_IDPCurrentDecisionNumber !== 'undefined' && this.synpred415_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred415_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred415_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred415_IDP59139);
        this.ruleTimespanArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred415_IDPCurrentDecisionNumber !== 'undefined' && this.synpred415_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred415_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred415_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        	}
        	}
        else{
            var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;





    },
    // $ANTLR end "synpred415_IDP",

    // $ANTLR start "synpred416_IDP"
    synpred416_IDP_fragment: function() {
        // IDP.g:2957:33: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) ) )
        // IDP.g:2957:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
        // IDP.g:2957:33: ( (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv ) | (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets ) )
        var alt356=2;

        var LA356_0 = this.input.LA(1);


        if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(MINUS,MINUS,1) && LA356_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA356_0==PLUS )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(MINUS,MINUS,1) && LA356_0==MINUS )||( this.pushNextTokens(PLUS,PLUS,1) && LA356_0==PLUS )) ) {
            var LA356_1 = this.input.LA(2);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'this.synpred415_IDP()'.indexOf("synpred") !== -1) ||  this.synpred415_IDP()) ) {
                alt356=1;
            }
            else 
            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && 'true'.indexOf("synpred") !== -1) ||  true) ) {
                alt356=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return ;}
                var nvae_356_1 =
            			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 356, 1, this.input);

                nvae_356_1.c = this.input.LA(2);
                throw nvae_356_1;
            }
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var nvae_356_0 =
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, 356, 0, this.input);

            nvae_356_0.c = this.input.LA(1);
            throw nvae_356_0;
        }
        switch (alt356) {
            case 1 :
                // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                // IDP.g:2957:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv )
                // IDP.g:2957:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimespanArithmeticMultDiv
                this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred416_IDP59133);
                this.ruleArithmeticPlusMinus_DFAcall = false;

                 if( typeof this.synpred416_IDPCurrentDecisionNumber !== 'undefined' && this.synpred416_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred416_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred416_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	}
                	}
                else{
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;
                this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred416_IDP59139);
                this.ruleTimespanArithmeticMultDiv_DFAcall = false;

                 if( typeof this.synpred416_IDPCurrentDecisionNumber !== 'undefined' && this.synpred416_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred416_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred416_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                	}
                	}
                else{
                    var selectionOutput2=this.ruleTimespanArithmeticMultDiv();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;





                break;
            case 2 :
                // IDP.g:2958:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                // IDP.g:2958:36: (arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets )
                // IDP.g:2958:37: arithmeticOperOutput= ruleArithmeticPlusMinus selectionOutput2= ruleTimeSpanFromTimestampSubtractionWithBrackets
                this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred416_IDP59184);
                this.ruleArithmeticPlusMinus_DFAcall = false;

                 if( typeof this.synpred416_IDPCurrentDecisionNumber !== 'undefined' && this.synpred416_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred416_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred416_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                	}
                	}
                else{
                    var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;
                this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_synpred416_IDP59190);
                this.ruleTimeSpanFromTimestampSubtractionWithBrackets_DFAcall = false;

                 if( typeof this.synpred416_IDPCurrentDecisionNumber !== 'undefined' && this.synpred416_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred416_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred416_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                	}
                	}
                else{
                    var selectionOutput2=this.ruleTimeSpanFromTimestampSubtractionWithBrackets();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;





                break;

        }
        /*if(this.failedPredictDFA356 !== undefined && this.failedPredictDFA356)
        { 
            throw null;
        }*/



    },
    // $ANTLR end "synpred416_IDP",

    // $ANTLR start "synpred417_IDP"
    synpred417_IDP_fragment: function() {
        // IDP.g:2967:34: (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction )
        // IDP.g:2967:34: selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampArithmeticSubtraction_in_synpred417_IDP59473);
        this.ruleTimespanFromTimestampArithmeticSubtraction_DFAcall = false;

         if( typeof this.synpred417_IDPCurrentDecisionNumber !== 'undefined' && this.synpred417_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred417_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred417_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanFromTimestampArithmeticSubtraction();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred417_IDP",

    // $ANTLR start "synpred418_IDP"
    synpred418_IDP_fragment: function() {
        // IDP.g:2973:34: (selectionOutput= ruleTimeSpanFromDateSubtraction )
        // IDP.g:2973:34: selectionOutput= ruleTimeSpanFromDateSubtraction
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtraction_in_synpred418_IDP59686);
        this.ruleTimeSpanFromDateSubtraction_DFAcall = false;

         if( typeof this.synpred418_IDPCurrentDecisionNumber !== 'undefined' && this.synpred418_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred418_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimeSpanFromDateSubtraction();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred418_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimeSpanFromDateSubtraction();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimeSpanFromDateSubtraction();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred418_IDP",

    // $ANTLR start "synpred419_IDP"
    synpred419_IDP_fragment: function() {
        // IDP.g:2975:35: (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets )
        // IDP.g:2975:35: selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets
        this.pushFollow(IDPParser.FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_synpred419_IDP59781);
        this.ruleTimeSpanFromDateSubtractionWithBrackets_DFAcall = false;

         if( typeof this.synpred419_IDPCurrentDecisionNumber !== 'undefined' && this.synpred419_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred419_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred419_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimeSpanFromDateSubtractionWithBrackets();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred419_IDP",

    // $ANTLR start "synpred421_IDP"
    synpred421_IDP_fragment: function() {
        // IDP.g:2982:34: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) ) )
        // IDP.g:2982:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) )
        // IDP.g:2982:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) ) )
        // IDP.g:2982:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) )
        // IDP.g:2982:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv ) )
        // IDP.g:2982:36: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanArithmeticMultDiv )
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred421_IDP60045);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred421_IDPCurrentDecisionNumber !== 'undefined' && this.synpred421_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred421_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred421_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        // IDP.g:2983:33: (selectionOutput= ruleTimespanArithmeticMultDiv )
        // IDP.g:2983:34: selectionOutput= ruleTimespanArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred421_IDP60087);
        this.ruleTimespanArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred421_IDPCurrentDecisionNumber !== 'undefined' && this.synpred421_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred421_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred421_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanArithmeticMultDiv();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;











    },
    // $ANTLR end "synpred421_IDP",

    // $ANTLR start "synpred422_IDP"
    synpred422_IDP_fragment: function() {
        // IDP.g:2990:34: ( ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) ) )
        // IDP.g:2990:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) )
        // IDP.g:2990:34: ( (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) ) )
        // IDP.g:2990:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )
        // IDP.g:2990:35: (arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv ) )
        // IDP.g:2990:36: arithmeticOperOutput= ruleArithmeticPlusMinus (selectionOutput= ruleTimespanForDateArithmeticMultDiv )
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticPlusMinus_in_synpred422_IDP60311);
        this.ruleArithmeticPlusMinus_DFAcall = false;

         if( typeof this.synpred422_IDPCurrentDecisionNumber !== 'undefined' && this.synpred422_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred422_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred422_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticPlusMinus();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        // IDP.g:2991:33: (selectionOutput= ruleTimespanForDateArithmeticMultDiv )
        // IDP.g:2991:34: selectionOutput= ruleTimespanForDateArithmeticMultDiv
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_synpred422_IDP60353);
        this.ruleTimespanForDateArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred422_IDPCurrentDecisionNumber !== 'undefined' && this.synpred422_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred422_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred422_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        	}
        	}
        else{
            var selectionOutput=this.ruleTimespanForDateArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;











    },
    // $ANTLR end "synpred422_IDP",

    // $ANTLR start "synpred424_IDP"
    synpred424_IDP_fragment: function() {
        // IDP.g:2999:147: (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )
        // IDP.g:2999:147: arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_synpred424_IDP60633);
        this.ruleArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred424_IDPCurrentDecisionNumber !== 'undefined' && this.synpred424_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred424_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred424_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_synpred424_IDP60676);
        this.ruleNumericBaseSelection_DFAcall = false;

         if( typeof this.synpred424_IDPCurrentDecisionNumber !== 'undefined' && this.synpred424_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred424_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleNumericBaseSelection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred424_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleNumericBaseSelection();

        	}
        	}
        else{
            var selectionOutput=this.ruleNumericBaseSelection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred424_IDP",

    // $ANTLR start "synpred426_IDP"
    synpred426_IDP_fragment: function() {
        // IDP.g:3008:140: (arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection )
        // IDP.g:3008:140: arithmeticOperOutput= ruleArithmeticMultDiv selectionOutput= ruleNumericBaseSelection
        this.pushFollow(IDPParser.FOLLOW_ruleArithmeticMultDiv_in_synpred426_IDP60921);
        this.ruleArithmeticMultDiv_DFAcall = false;

         if( typeof this.synpred426_IDPCurrentDecisionNumber !== 'undefined' && this.synpred426_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred426_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred426_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        	}
        	}
        else{
            var arithmeticOperOutput=this.ruleArithmeticMultDiv();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;
        this.pushFollow(IDPParser.FOLLOW_ruleNumericBaseSelection_in_synpred426_IDP60964);
        this.ruleNumericBaseSelection_DFAcall = false;

         if( typeof this.synpred426_IDPCurrentDecisionNumber !== 'undefined' && this.synpred426_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred426_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionOutput=this.ruleNumericBaseSelection();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred426_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionOutput=this.ruleNumericBaseSelection();

        	}
        	}
        else{
            var selectionOutput=this.ruleNumericBaseSelection();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred426_IDP",

    // $ANTLR start "synpred429_IDP"
    synpred429_IDP_fragment: function() {
        // IDP.g:3022:34: (selectionClauseOutput= ruleTimespanSelectionClause )
        // IDP.g:3022:34: selectionClauseOutput= ruleTimespanSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_synpred429_IDP61313);
        this.ruleTimespanSelectionClause_DFAcall = false;

         if( typeof this.synpred429_IDPCurrentDecisionNumber !== 'undefined' && this.synpred429_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred429_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred429_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	}
        	}
        else{
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred429_IDP",

    // $ANTLR start "synpred430_IDP"
    synpred430_IDP_fragment: function() {
        // IDP.g:3028:34: (selectionClauseOutput= ruleTimespanSelectionClause )
        // IDP.g:3028:34: selectionClauseOutput= ruleTimespanSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_synpred430_IDP61465);
        this.ruleTimespanSelectionClause_DFAcall = false;

         if( typeof this.synpred430_IDPCurrentDecisionNumber !== 'undefined' && this.synpred430_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred430_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred430_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	}
        	}
        else{
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred430_IDP",

    // $ANTLR start "synpred431_IDP"
    synpred431_IDP_fragment: function() {
        // IDP.g:3034:34: (selectionClauseOutput= ruleTimespanSelectionClause )
        // IDP.g:3034:34: selectionClauseOutput= ruleTimespanSelectionClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanSelectionClause_in_synpred431_IDP61633);
        this.ruleTimespanSelectionClause_DFAcall = false;

         if( typeof this.synpred431_IDPCurrentDecisionNumber !== 'undefined' && this.synpred431_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred431_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred431_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var selectionClauseOutput=this.ruleTimespanSelectionClause();

        	}
        	}
        else{
            var selectionClauseOutput=this.ruleTimespanSelectionClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred431_IDP",

    // $ANTLR start "synpred433_IDP"
    synpred433_IDP_fragment: function() {
        // IDP.g:3048:26: ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) )
        // IDP.g:3048:26: (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* )
        // IDP.g:3048:26: (numberOutput= ruleTimespanFromDateClause )
        // IDP.g:3048:27: numberOutput= ruleTimespanFromDateClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromDateClause_in_synpred433_IDP62041);
        this.ruleTimespanFromDateClause_DFAcall = false;

         if( typeof this.synpred433_IDPCurrentDecisionNumber !== 'undefined' && this.synpred433_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred433_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var numberOutput=this.ruleTimespanFromDateClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred433_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var numberOutput=this.ruleTimespanFromDateClause();

        	}
        	}
        else{
            var numberOutput=this.ruleTimespanFromDateClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        // IDP.g:3049:17: ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* )
        // IDP.g:3049:18: ( SEMICOLON numberOutput= ruleTimespanFromDateClause )*
        // IDP.g:3049:18: ( SEMICOLON numberOutput= ruleTimespanFromDateClause )*
        loop358:
        do {
            var alt358=2;
            var LA358_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA358_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA358_0==SEMICOLON )) ) {
                alt358=1;
            }


            switch (alt358) {
            case 1 :
                // IDP.g:3049:19: SEMICOLON numberOutput= ruleTimespanFromDateClause


                this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_synpred433_IDP62065); if (this.state.failed) return ;
                if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                	this.updateLTType(this.input.LT(1));
                }
                this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromDateClause_in_synpred433_IDP62071);
                this.ruleTimespanFromDateClause_DFAcall = false;

                 if( typeof this.synpred433_IDPCurrentDecisionNumber !== 'undefined' && this.synpred433_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred433_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA358 !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var numberOutput=this.ruleTimespanFromDateClause();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred433_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var numberOutput=this.ruleTimespanFromDateClause();

                	}
                	}
                else{
                    var numberOutput=this.ruleTimespanFromDateClause();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;


                break;

            default :
                break loop358;
            }
        } while (true);






    },
    // $ANTLR end "synpred433_IDP",

    // $ANTLR start "synpred435_IDP"
    synpred435_IDP_fragment: function() {
        // IDP.g:3057:26: ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) )
        // IDP.g:3057:26: (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* )
        // IDP.g:3057:26: (numberOutput= ruleTimespanFromTimestampClause )
        // IDP.g:3057:27: numberOutput= ruleTimespanFromTimestampClause
        this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampClause_in_synpred435_IDP62231);
        this.ruleTimespanFromTimestampClause_DFAcall = false;

         if( typeof this.synpred435_IDPCurrentDecisionNumber !== 'undefined' && this.synpred435_IDPCurrentDecisionNumber  > 0 )
        {
        var currentDecisionNumber = this.synpred435_IDPCurrentDecisionNumber;
        var test2 = "failedPredictDFA"+currentDecisionNumber;
        	if(/*typeof this.failedPredictDFA !== 'undefined' &&*/ this[test2] === false )
        	{
        	try {
            var numberOutput=this.ruleTimespanFromTimestampClause();

        	} catch (e) {
        		var nvae = 
        			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred435_IDPCurrentDecisionNumber, 0, this.input);

        		nvae.c = this.input.LA(1);
        		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
        		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
        		throw nvae;

        	}
        	}
        	else{
        	var numberOutput=this.ruleTimespanFromTimestampClause();

        	}
        	}
        else{
            var numberOutput=this.ruleTimespanFromTimestampClause();

        }
        this.state.a_fsp--;
        if (this.state.failed) return ;



        // IDP.g:3058:17: ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* )
        // IDP.g:3058:18: ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )*
        // IDP.g:3058:18: ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )*
        loop359:
        do {
            var alt359=2;
            var LA359_0 = this.input.LA(1);


            if ( ( (this.parseUtilsLib.isAutocompleteMode(this.parseModelLib.getModelManger().mode) && this.setPred() && '( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA359_0==SEMICOLON )'.indexOf("synpred") !== -1) ||  ( this.pushNextTokens(SEMICOLON,SEMICOLON,1) && LA359_0==SEMICOLON )) ) {
                alt359=1;
            }


            switch (alt359) {
            case 1 :
                // IDP.g:3058:19: SEMICOLON numberOutput= ruleTimespanFromTimestampClause


                this.pushNextTokens(SEMICOLON,SEMICOLON,1);
                this.match(this.input,SEMICOLON,IDPParser.FOLLOW_SEMICOLON_in_synpred435_IDP62255); if (this.state.failed) return ;
                if( SEMICOLON !== EOF ){ // if it is EOF keep the valid next tokens
                	this.updateLTType(this.input.LT(1));
                }
                this.pushFollow(IDPParser.FOLLOW_ruleTimespanFromTimestampClause_in_synpred435_IDP62261);
                this.ruleTimespanFromTimestampClause_DFAcall = false;

                 if( typeof this.synpred435_IDPCurrentDecisionNumber !== 'undefined' && this.synpred435_IDPCurrentDecisionNumber  > 0 )
                {
                var currentDecisionNumber = this.synpred435_IDPCurrentDecisionNumber;
                var test2 = "failedPredictDFA"+currentDecisionNumber;
                	if(/*typeof this.failedPredictDFA359 !== 'undefined' &&*/ this[test2] === false )
                	{
                	try {
                    var numberOutput=this.ruleTimespanFromTimestampClause();

                	} catch (e) {
                		var nvae = 
                			new org.antlr.runtime.NoViableAltException(this.lastExpecting.expecting, this.synpred435_IDPCurrentDecisionNumber, 0, this.input);

                		nvae.c = this.input.LA(1);
                		var currentDecisionNumberNumberOfAlt = "dfa"+currentDecisionNumber+"NumberOfAlt";
                		this[currentDecisionNumberNumberOfAlt] = this[currentDecisionNumberNumberOfAlt]-1;
                		throw nvae;

                	}
                	}
                	else{
                	var numberOutput=this.ruleTimespanFromTimestampClause();

                	}
                	}
                else{
                    var numberOutput=this.ruleTimespanFromTimestampClause();

                }
                this.state.a_fsp--;
                if (this.state.failed) return ;


                break;

            default :
                break loop359;
            }
        } while (true);






    },
    // $ANTLR end "synpred435_IDP"

    // Delegated rules



    synpred218_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred218_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred424_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred424_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred66_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred66_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred203_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred203_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred414_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred414_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred6_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred6_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred221_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred221_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred435_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred435_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred5_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred5_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred44_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred44_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred8_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred8_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred403_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred403_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred45_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred45_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred241_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred241_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred60_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred60_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred292_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred292_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred202_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred202_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred85_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred85_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred17_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred17_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred158_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred158_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred106_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred106_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred79_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred79_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred2_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred2_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred413_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred413_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred290_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred290_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred431_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred431_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred89_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred89_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred77_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred77_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred173_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred173_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred107_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred107_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred109_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred109_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred229_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred229_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred168_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred168_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred73_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred73_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred186_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred186_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred99_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred99_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred358_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred358_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred91_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred91_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred90_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred90_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred233_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred233_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred361_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred361_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred196_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred196_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred46_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred46_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred426_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred426_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred104_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred104_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred402_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred402_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred235_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred235_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred59_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred59_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred78_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred78_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred300_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred300_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred222_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred222_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred430_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred430_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred146_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred146_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred9_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred9_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred48_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred48_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred71_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred71_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred97_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred97_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred83_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred83_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred145_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred145_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred80_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred80_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred96_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred96_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred220_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred220_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred81_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred81_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred291_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred291_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred15_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred15_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred216_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred216_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred87_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred87_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred92_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred92_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred84_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred84_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred429_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred429_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred100_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred100_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred56_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred56_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred105_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred105_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred101_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred101_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred47_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred47_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred74_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred74_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred217_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred217_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred410_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred410_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred289_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred289_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred75_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred75_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred416_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred416_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred86_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred86_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred404_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred404_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred422_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred422_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred72_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred72_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred357_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred357_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred185_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred185_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred4_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred4_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred412_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred412_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred98_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred98_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred1_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred1_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred417_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred417_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred76_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred76_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred433_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred433_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred418_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred418_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred367_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred367_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred419_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred419_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred411_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred411_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred184_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred184_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred62_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred62_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred88_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred88_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred7_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred7_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred194_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred194_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred415_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred415_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred405_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred405_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred228_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred228_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred359_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred359_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred82_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred82_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred421_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred421_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred108_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred108_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred288_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred288_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred3_IDP: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred3_IDP_fragment(); // can never throw exception... yet does for null.replace( ... )
        } catch (re) {
            jQuery.sap.log.debug("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    }

}, true); // important to pass true to overwrite default implementations

org.antlr.lang.augmentObject(IDPParser, {
    DFA1_eotS:
        "\u0041\uffff",
    DFA1_eofS:
        "\u0041\uffff",
    DFA1_minS:
        "\u0001\u0004\u002f\u0000\u0011\uffff",
    DFA1_maxS:
        "\u0001\u00c1\u002f\u0000\u0011\uffff",
    DFA1_acceptS:
        "\u0030\uffff\u0001\u0002\u000e\uffff\u0001\u0001\u0001\u0003",
    DFA1_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001"+
    "\u002e\u0011\uffff}>",
    DFA1_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0019\u0003\uffff\u0001\u0022"+
            "\u0001\u0005\u0002\uffff\u0001\u0023\u0001\u001d\u0001\u0016"+
            "\u0002\uffff\u0001\u0028\u0001\u0030\u0001\u002c\u000e\uffff"+
            "\u0001\u000d\u0001\u0013\u0006\uffff\u0001\u002e\u0001\u002f"+
            "\u000e\uffff\u0002\u002a\u0001\u002b\u0001\u002d\u0001\u0004"+
            "\u0002\u0030\u0008\uffff\u0001\u0017\u0001\u0018\u0001\u0009"+
            "\u0001\u001a\u0001\u000b\u0008\uffff\u0001\u0024\u0001\u0025"+
            "\u0002\u0030\u0001\u001b\u0001\u001c\u0003\u0015\u0002\u0030"+
            "\u0001\u0001\u0001\u001e\u0001\u001f\u000a\uffff\u0001\u0011"+
            "\u0001\u0012\u0001\u000e\u0001\u000f\u0001\u0010\u0013\uffff"+
            "\u0002\u0030\u0001\uffff\u0001\u0029\u0003\uffff\u0001\u0026"+
            "\u0001\u0027\u0002\u0030\u0010\uffff\u0001\u0020\u0001\u0002"+
            "\u0001\u0003\u0001\u0020\u0001\u0002\u0002\u0030\u0001\u000c"+
            "\u0003\uffff\u0001\u0008\u0001\u000a\u0001\u0006\u0001\u0007"+
            "\u000d\uffff\u0001\u0021\u0002\u0030",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA1_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA1_eotS),
    DFA1_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA1_eofS),
    DFA1_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA1_minS),
    DFA1_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA1_maxS),
    DFA1_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA1_acceptS),
    DFA1_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA1_specialS),
    DFA1_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA1_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA1_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA1 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 1;
    this.eot = IDPParser.DFA1_eot;
    this.eof = IDPParser.DFA1_eof;
    this.min = IDPParser.DFA1_min;
    this.max = IDPParser.DFA1_max;
    this.accept = IDPParser.DFA1_accept;
    this.special = IDPParser.DFA1_special;
    this.transition = IDPParser.DFA1_transition;
};


org.antlr.lang.extend(IDPParser.DFA1, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "325:45: ( modelSingleExpression | modelCollection | modelBoolean )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA1_1 = input.LA(1);

                             
                            var index1_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA1_2 = input.LA(1);

                             
                            var index1_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA1_3 = input.LA(1);

                             
                            var index1_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA1_4 = input.LA(1);

                             
                            var index1_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA1_5 = input.LA(1);

                             
                            var index1_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA1_6 = input.LA(1);

                             
                            var index1_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA1_7 = input.LA(1);

                             
                            var index1_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA1_8 = input.LA(1);

                             
                            var index1_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA1_9 = input.LA(1);

                             
                            var index1_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA1_10 = input.LA(1);

                             
                            var index1_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA1_11 = input.LA(1);

                             
                            var index1_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA1_12 = input.LA(1);

                             
                            var index1_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA1_13 = input.LA(1);

                             
                            var index1_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA1_14 = input.LA(1);

                             
                            var index1_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA1_15 = input.LA(1);

                             
                            var index1_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA1_16 = input.LA(1);

                             
                            var index1_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA1_17 = input.LA(1);

                             
                            var index1_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA1_18 = input.LA(1);

                             
                            var index1_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA1_19 = input.LA(1);

                             
                            var index1_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA1_20 = input.LA(1);

                             
                            var index1_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA1_21 = input.LA(1);

                             
                            var index1_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA1_22 = input.LA(1);

                             
                            var index1_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA1_23 = input.LA(1);

                             
                            var index1_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA1_24 = input.LA(1);

                             
                            var index1_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA1_25 = input.LA(1);

                             
                            var index1_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(this.synpred2_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA1_26 = input.LA(1);

                             
                            var index1_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA1_27 = input.LA(1);

                             
                            var index1_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA1_28 = input.LA(1);

                             
                            var index1_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA1_29 = input.LA(1);

                             
                            var index1_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA1_30 = input.LA(1);

                             
                            var index1_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA1_31 = input.LA(1);

                             
                            var index1_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA1_32 = input.LA(1);

                             
                            var index1_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_32);
                            if ( s>=0 ) return s;
                            break;

                        case 32 : 
                            var LA1_33 = input.LA(1);

                             
                            var index1_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_33);
                            if ( s>=0 ) return s;
                            break;

                        case 33 : 
                            var LA1_34 = input.LA(1);

                             
                            var index1_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_34);
                            if ( s>=0 ) return s;
                            break;

                        case 34 : 
                            var LA1_35 = input.LA(1);

                             
                            var index1_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_35);
                            if ( s>=0 ) return s;
                            break;

                        case 35 : 
                            var LA1_36 = input.LA(1);

                             
                            var index1_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_36);
                            if ( s>=0 ) return s;
                            break;

                        case 36 : 
                            var LA1_37 = input.LA(1);

                             
                            var index1_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_37);
                            if ( s>=0 ) return s;
                            break;

                        case 37 : 
                            var LA1_38 = input.LA(1);

                             
                            var index1_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_38);
                            if ( s>=0 ) return s;
                            break;

                        case 38 : 
                            var LA1_39 = input.LA(1);

                             
                            var index1_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_39);
                            if ( s>=0 ) return s;
                            break;

                        case 39 : 
                            var LA1_40 = input.LA(1);

                             
                            var index1_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_40);
                            if ( s>=0 ) return s;
                            break;

                        case 40 : 
                            var LA1_41 = input.LA(1);

                             
                            var index1_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_41);
                            if ( s>=0 ) return s;
                            break;

                        case 41 : 
                            var LA1_42 = input.LA(1);

                             
                            var index1_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_42);
                            if ( s>=0 ) return s;
                            break;

                        case 42 : 
                            var LA1_43 = input.LA(1);

                             
                            var index1_43 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_43);
                            if ( s>=0 ) return s;
                            break;

                        case 43 : 
                            var LA1_44 = input.LA(1);

                             
                            var index1_44 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_44);
                            if ( s>=0 ) return s;
                            break;

                        case 44 : 
                            var LA1_45 = input.LA(1);

                             
                            var index1_45 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_45);
                            if ( s>=0 ) return s;
                            break;

                        case 45 : 
                            var LA1_46 = input.LA(1);

                             
                            var index1_46 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_46);
                            if ( s>=0 ) return s;
                            break;

                        case 46 : 
                            var LA1_47 = input.LA(1);

                             
                            var index1_47 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred1_IDP()) ) {s = 63;}

                            else if ( (this.setPred()) &&(true) ) {s = 64;}

                             
                            input.seek(index1_47);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_1_1 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 1, _s, input);
        this.error(nvae_1_1);
        throw nvae_1_1;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA2_eotS:
        "\u0036\uffff",
    DFA2_eofS:
        "\u0036\uffff",
    DFA2_minS:
        "\u0001\u0004\u0029\u0000\u000c\uffff",
    DFA2_maxS:
        "\u0001\u00bf\u0029\u0000\u000c\uffff",
    DFA2_acceptS:
        "\u002a\uffff\u0001\u0001\u0005\uffff\u0001\u0002\u0001\u0004\u0001"+
    "\u0003\u0001\u0005\u0001\u0006\u0001\u0007",
    DFA2_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u000c\uffff}>",
    DFA2_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0019\u0003\uffff\u0001\u0022"+
            "\u0001\u0005\u0002\uffff\u0001\u0023\u0001\u001d\u0001\u0016"+
            "\u0002\uffff\u0001\u0028\u0001\uffff\u0001\u002a\u000e\uffff"+
            "\u0001\u000d\u0001\u0013\u0006\uffff\u0002\u002a\u000e\uffff"+
            "\u0004\u002a\u0001\u0004\u000a\uffff\u0001\u0017\u0001\u0018"+
            "\u0001\u0009\u0001\u001a\u0001\u000b\u0008\uffff\u0001\u0024"+
            "\u0001\u0025\u0002\uffff\u0001\u001b\u0001\u001c\u0003\u0015"+
            "\u0002\uffff\u0001\u0001\u0001\u001e\u0001\u001f\u000a\uffff"+
            "\u0001\u0011\u0001\u0012\u0001\u000e\u0001\u000f\u0001\u0010"+
            "\u0016\uffff\u0001\u0029\u0003\uffff\u0001\u0026\u0001\u0027"+
            "\u0012\uffff\u0001\u0020\u0001\u0002\u0001\u0003\u0001\u0020"+
            "\u0001\u0002\u0002\uffff\u0001\u000c\u0003\uffff\u0001\u0008"+
            "\u0001\u000a\u0001\u0006\u0001\u0007\u000d\uffff\u0001\u0021",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA2_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA2_eotS),
    DFA2_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA2_eofS),
    DFA2_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA2_minS),
    DFA2_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA2_maxS),
    DFA2_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA2_acceptS),
    DFA2_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA2_specialS),
    DFA2_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA2_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA2_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA2 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 2;
    this.eot = IDPParser.DFA2_eot;
    this.eof = IDPParser.DFA2_eof;
    this.min = IDPParser.DFA2_min;
    this.max = IDPParser.DFA2_max;
    this.accept = IDPParser.DFA2_accept;
    this.special = IDPParser.DFA2_special;
    this.transition = IDPParser.DFA2_transition;
};


org.antlr.lang.extend(IDPParser.DFA2, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "329:49: ( modelBooleanPure | modelNumric | modelString | modelTimespan | modelDate | modelTime | modelTimestamp )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA2_1 = input.LA(1);

                             
                            var index2_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA2_2 = input.LA(1);

                             
                            var index2_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA2_3 = input.LA(1);

                             
                            var index2_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA2_4 = input.LA(1);

                             
                            var index2_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA2_5 = input.LA(1);

                             
                            var index2_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA2_6 = input.LA(1);

                             
                            var index2_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA2_7 = input.LA(1);

                             
                            var index2_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA2_8 = input.LA(1);

                             
                            var index2_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA2_9 = input.LA(1);

                             
                            var index2_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA2_10 = input.LA(1);

                             
                            var index2_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA2_11 = input.LA(1);

                             
                            var index2_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA2_12 = input.LA(1);

                             
                            var index2_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA2_13 = input.LA(1);

                             
                            var index2_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA2_14 = input.LA(1);

                             
                            var index2_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA2_15 = input.LA(1);

                             
                            var index2_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA2_16 = input.LA(1);

                             
                            var index2_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA2_17 = input.LA(1);

                             
                            var index2_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA2_18 = input.LA(1);

                             
                            var index2_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA2_19 = input.LA(1);

                             
                            var index2_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA2_20 = input.LA(1);

                             
                            var index2_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA2_21 = input.LA(1);

                             
                            var index2_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA2_22 = input.LA(1);

                             
                            var index2_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA2_23 = input.LA(1);

                             
                            var index2_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA2_24 = input.LA(1);

                             
                            var index2_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA2_25 = input.LA(1);

                             
                            var index2_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA2_26 = input.LA(1);

                             
                            var index2_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA2_27 = input.LA(1);

                             
                            var index2_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA2_28 = input.LA(1);

                             
                            var index2_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(true) ) {s = 53;}

                             
                            input.seek(index2_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA2_29 = input.LA(1);

                             
                            var index2_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                             
                            input.seek(index2_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA2_30 = input.LA(1);

                             
                            var index2_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                             
                            input.seek(index2_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA2_31 = input.LA(1);

                             
                            var index2_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred7_IDP()) ) {s = 51;}

                             
                            input.seek(index2_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA2_32 = input.LA(1);

                             
                            var index2_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred4_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_32);
                            if ( s>=0 ) return s;
                            break;

                        case 32 : 
                            var LA2_33 = input.LA(1);

                             
                            var index2_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_33);
                            if ( s>=0 ) return s;
                            break;

                        case 33 : 
                            var LA2_34 = input.LA(1);

                             
                            var index2_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred6_IDP()) ) {s = 49;}

                             
                            input.seek(index2_34);
                            if ( s>=0 ) return s;
                            break;

                        case 34 : 
                            var LA2_35 = input.LA(1);

                             
                            var index2_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                             
                            input.seek(index2_35);
                            if ( s>=0 ) return s;
                            break;

                        case 35 : 
                            var LA2_36 = input.LA(1);

                             
                            var index2_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                             
                            input.seek(index2_36);
                            if ( s>=0 ) return s;
                            break;

                        case 36 : 
                            var LA2_37 = input.LA(1);

                             
                            var index2_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred8_IDP()) ) {s = 52;}

                             
                            input.seek(index2_37);
                            if ( s>=0 ) return s;
                            break;

                        case 37 : 
                            var LA2_38 = input.LA(1);

                             
                            var index2_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                             
                            input.seek(index2_38);
                            if ( s>=0 ) return s;
                            break;

                        case 38 : 
                            var LA2_39 = input.LA(1);

                             
                            var index2_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                             
                            input.seek(index2_39);
                            if ( s>=0 ) return s;
                            break;

                        case 39 : 
                            var LA2_40 = input.LA(1);

                             
                            var index2_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                             
                            input.seek(index2_40);
                            if ( s>=0 ) return s;
                            break;

                        case 40 : 
                            var LA2_41 = input.LA(1);

                             
                            var index2_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred3_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred5_IDP()) ) {s = 50;}

                             
                            input.seek(index2_41);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_2_2 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 2, _s, input);
        this.error(nvae_2_2);
        throw nvae_2_2;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA3_eotS:
        "\u0032\uffff",
    DFA3_eofS:
        "\u0032\uffff",
    DFA3_minS:
        "\u0001\u0004\u002f\u0000\u0002\uffff",
    DFA3_maxS:
        "\u0001\u00bf\u002f\u0000\u0002\uffff",
    DFA3_acceptS:
        "\u0030\uffff\u0001\u0001\u0001\u0002",
    DFA3_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001"+
    "\u002e\u0002\uffff}>",
    DFA3_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0019\u0003\uffff\u0001\u0022"+
            "\u0001\u0005\u0002\uffff\u0001\u0023\u0001\u001d\u0001\u0016"+
            "\u0002\uffff\u0001\u0028\u0001\uffff\u0001\u002c\u000e\uffff"+
            "\u0001\u000d\u0001\u0013\u0006\uffff\u0001\u002e\u0001\u002f"+
            "\u000e\uffff\u0002\u002a\u0001\u002b\u0001\u002d\u0001\u0004"+
            "\u000a\uffff\u0001\u0017\u0001\u0018\u0001\u0009\u0001\u001a"+
            "\u0001\u000b\u0008\uffff\u0001\u0024\u0001\u0025\u0002\uffff"+
            "\u0001\u001b\u0001\u001c\u0003\u0015\u0002\uffff\u0001\u0001"+
            "\u0001\u001e\u0001\u001f\u000a\uffff\u0001\u0011\u0001\u0012"+
            "\u0001\u000e\u0001\u000f\u0001\u0010\u0016\uffff\u0001\u0029"+
            "\u0003\uffff\u0001\u0026\u0001\u0027\u0012\uffff\u0001\u0020"+
            "\u0001\u0002\u0001\u0003\u0001\u0020\u0001\u0002\u0002\uffff"+
            "\u0001\u000c\u0003\uffff\u0001\u0008\u0001\u000a\u0001\u0006"+
            "\u0001\u0007\u000d\uffff\u0001\u0021",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA3_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA3_eotS),
    DFA3_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA3_eofS),
    DFA3_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA3_minS),
    DFA3_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA3_maxS),
    DFA3_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA3_acceptS),
    DFA3_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA3_specialS),
    DFA3_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA3_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA3_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA3 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 3;
    this.eot = IDPParser.DFA3_eot;
    this.eof = IDPParser.DFA3_eof;
    this.min = IDPParser.DFA3_min;
    this.max = IDPParser.DFA3_max;
    this.accept = IDPParser.DFA3_accept;
    this.special = IDPParser.DFA3_special;
    this.transition = IDPParser.DFA3_transition;
};


org.antlr.lang.extend(IDPParser.DFA3, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "333:49: ( modelSingleExpression | modelBooleanPure )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA3_1 = input.LA(1);

                             
                            var index3_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA3_2 = input.LA(1);

                             
                            var index3_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA3_3 = input.LA(1);

                             
                            var index3_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA3_4 = input.LA(1);

                             
                            var index3_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA3_5 = input.LA(1);

                             
                            var index3_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA3_6 = input.LA(1);

                             
                            var index3_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA3_7 = input.LA(1);

                             
                            var index3_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA3_8 = input.LA(1);

                             
                            var index3_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA3_9 = input.LA(1);

                             
                            var index3_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA3_10 = input.LA(1);

                             
                            var index3_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA3_11 = input.LA(1);

                             
                            var index3_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA3_12 = input.LA(1);

                             
                            var index3_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA3_13 = input.LA(1);

                             
                            var index3_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA3_14 = input.LA(1);

                             
                            var index3_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA3_15 = input.LA(1);

                             
                            var index3_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA3_16 = input.LA(1);

                             
                            var index3_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA3_17 = input.LA(1);

                             
                            var index3_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA3_18 = input.LA(1);

                             
                            var index3_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA3_19 = input.LA(1);

                             
                            var index3_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA3_20 = input.LA(1);

                             
                            var index3_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA3_21 = input.LA(1);

                             
                            var index3_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA3_22 = input.LA(1);

                             
                            var index3_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA3_23 = input.LA(1);

                             
                            var index3_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA3_24 = input.LA(1);

                             
                            var index3_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA3_25 = input.LA(1);

                             
                            var index3_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA3_26 = input.LA(1);

                             
                            var index3_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA3_27 = input.LA(1);

                             
                            var index3_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA3_28 = input.LA(1);

                             
                            var index3_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA3_29 = input.LA(1);

                             
                            var index3_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA3_30 = input.LA(1);

                             
                            var index3_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA3_31 = input.LA(1);

                             
                            var index3_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA3_32 = input.LA(1);

                             
                            var index3_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_32);
                            if ( s>=0 ) return s;
                            break;

                        case 32 : 
                            var LA3_33 = input.LA(1);

                             
                            var index3_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_33);
                            if ( s>=0 ) return s;
                            break;

                        case 33 : 
                            var LA3_34 = input.LA(1);

                             
                            var index3_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_34);
                            if ( s>=0 ) return s;
                            break;

                        case 34 : 
                            var LA3_35 = input.LA(1);

                             
                            var index3_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_35);
                            if ( s>=0 ) return s;
                            break;

                        case 35 : 
                            var LA3_36 = input.LA(1);

                             
                            var index3_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_36);
                            if ( s>=0 ) return s;
                            break;

                        case 36 : 
                            var LA3_37 = input.LA(1);

                             
                            var index3_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_37);
                            if ( s>=0 ) return s;
                            break;

                        case 37 : 
                            var LA3_38 = input.LA(1);

                             
                            var index3_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_38);
                            if ( s>=0 ) return s;
                            break;

                        case 38 : 
                            var LA3_39 = input.LA(1);

                             
                            var index3_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_39);
                            if ( s>=0 ) return s;
                            break;

                        case 39 : 
                            var LA3_40 = input.LA(1);

                             
                            var index3_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_40);
                            if ( s>=0 ) return s;
                            break;

                        case 40 : 
                            var LA3_41 = input.LA(1);

                             
                            var index3_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_41);
                            if ( s>=0 ) return s;
                            break;

                        case 41 : 
                            var LA3_42 = input.LA(1);

                             
                            var index3_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_42);
                            if ( s>=0 ) return s;
                            break;

                        case 42 : 
                            var LA3_43 = input.LA(1);

                             
                            var index3_43 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_43);
                            if ( s>=0 ) return s;
                            break;

                        case 43 : 
                            var LA3_44 = input.LA(1);

                             
                            var index3_44 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_44);
                            if ( s>=0 ) return s;
                            break;

                        case 44 : 
                            var LA3_45 = input.LA(1);

                             
                            var index3_45 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_45);
                            if ( s>=0 ) return s;
                            break;

                        case 45 : 
                            var LA3_46 = input.LA(1);

                             
                            var index3_46 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_46);
                            if ( s>=0 ) return s;
                            break;

                        case 46 : 
                            var LA3_47 = input.LA(1);

                             
                            var index3_47 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred9_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(true) ) {s = 49;}

                             
                            input.seek(index3_47);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_3_3 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 3, _s, input);
        this.error(nvae_3_3);
        throw nvae_3_3;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA4_eotS:
        "\u0046\uffff",
    DFA4_eofS:
        "\u0012\uffff\u0001\u0028\u001f\uffff\u0001\u0028\u0013\uffff",
    DFA4_minS:
        "\u0001\u0004\u0001\uffff\u0001\u000a\u0002\u0007\u0001\u0006\u0001"+
    "\u0041\u0002\uffff\u0006\u0004\u0003\uffff\u0001\u0000\u0002\uffff\u0001"+
    "\u0089\u0002\u000a\u0002\u0007\u0001\u0041\u0006\u0004\u0001\u0005\u0002"+
    "\u0007\u0001\u000a\u0001\u0040\u0002\u0004\u0001\u0000\u0001\u000a\u0001"+
    "\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001\u0040\u0002\u0004\u0001"+
    "\u0000\u0001\u0089\u0001\u000a\u0002\u0007\u0002\u000a\u0001\u0089\u0001"+
    "\u000a\u0002\u0007\u0002\u000a\u0001\u0089\u0002\u000a\u0001\u0089\u0003"+
    "\u000a",
    DFA4_maxS:
        "\u0001\u00c1\u0001\uffff\u0003\u00c0\u0001\u00c1\u0001\u00a8\u0002"+
    "\uffff\u0006\u00c0\u0003\uffff\u0001\u0000\u0002\uffff\u0001\u0089\u0004"+
    "\u00c0\u0001\u00a8\u0006\u00c0\u0001\u0005\u0006\u00c0\u0001\u0000\u0001"+
    "\u00c0\u0001\u0089\u0007\u00c0\u0001\u0000\u0001\u0089\u0005\u00c0\u0001"+
    "\u0089\u0005\u00c0\u0001\u0089\u0002\u00c0\u0001\u0089\u0003\u00c0",
    DFA4_acceptS:
        "\u0001\uffff\u0001\u0001\u0005\uffff\u0001\u0002\u0001\u0003\u0006"+
    "\uffff\u0001\u0004\u0001\u0005\u0001\u0006\u0001\uffff\u0001\u0007\u0001"+
    "\u0008\u0031\uffff",
    DFA4_specialS:
        "\u0028\uffff\u0001\u0000\u001d\uffff}>",
    DFA4_transitionS: [
            "\u0001\u0005\u0001\uffff\u0001\u0001\u000d\uffff\u0001\u0001"+
            "\u000f\uffff\u0002\u0008\u001a\uffff\u0001\u0006\u0002\u0007"+
            "\u000a\uffff\u0001\u000c\u0001\uffff\u0001\u000e\u000a\uffff"+
            "\u0002\u0013\u0005\uffff\u0001\u0014\u0001\u0012\u0025\uffff"+
            "\u0001\u0011\u0001\u0002\u0007\uffff\u0002\u000f\u0011\uffff"+
            "\u0001\u0003\u0001\u0004\u0001\uffff\u0001\u0003\u0003\u0008"+
            "\u0003\uffff\u0001\u000b\u0001\u000d\u0001\u0009\u0001\u000a"+
            "\u000e\uffff\u0002\u0010",
            "",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\u0001\u0001\u0007"+
            "\u002b\uffff\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff"+
            "\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f"+
            "\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0015\u0002\uffff\u0001\u0010\u0001\u0008\u0002\uffff"+
            "\u0001\u0013\u0001\u0011\u0001\u0014\u0002\uffff\u0001\u000f"+
            "\u0001\u0001\u0001\u0007\u002a\uffff\u0001\u0016\u0001\u0007"+
            "\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014\u0026\uffff"+
            "\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff\u0001\u0008"+
            "\u0017\uffff\u0001\u0010",
            "\u0001\u0015\u0002\uffff\u0001\u0010\u0001\u0008\u0002\uffff"+
            "\u0001\u0013\u0001\u0011\u0001\u0014\u0002\uffff\u0001\u000f"+
            "\u0001\u0001\u0001\u0007\u002a\uffff\u0001\u0016\u0001\u0007"+
            "\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014\u0026\uffff"+
            "\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff\u0001\u0008"+
            "\u0017\uffff\u0001\u0010",
            "\u0001\u0001\u000d\uffff\u0001\u0001\u000f\uffff\u0002\u0008"+
            "\u001a\uffff\u0001\u001a\u0002\u0007\u000a\uffff\u0001\u001e"+
            "\u0001\uffff\u0001\u0020\u000a\uffff\u0002\u0013\u0005\uffff"+
            "\u0001\u0014\u0001\u0021\u0025\uffff\u0001\u0011\u0001\u0017"+
            "\u0007\uffff\u0002\u000f\u0011\uffff\u0001\u0018\u0001\u0019"+
            "\u0001\uffff\u0001\u0018\u0003\u0008\u0003\uffff\u0001\u001d"+
            "\u0001\u001f\u0001\u001b\u0001\u001c\u000e\uffff\u0002\u0010",
            "\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014"+
            "\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff"+
            "\u0001\u0008",
            "",
            "",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u0002\uffff\u0001\u0026\u0038\uffff\u0001\u0008"+
            "\u0048\uffff\u0001\u0024\u001a\uffff\u0001\u0022\u0001\u0023"+
            "\u0001\uffff\u0001\u0022\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u0002\uffff\u0001\u0027\u0038\uffff\u0001\u0008"+
            "\u0048\uffff\u0001\u0024\u001a\uffff\u0001\u0022\u0001\u0023"+
            "\u0001\uffff\u0001\u0022\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\u0029",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\uffff\u0001\u0007"+
            "\u002b\uffff\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff"+
            "\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f"+
            "\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\u0001\u0001\u0007"+
            "\u002b\uffff\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff"+
            "\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f"+
            "\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002a\u0002\uffff\u0001\u0010\u0001\u0008\u0002\uffff"+
            "\u0001\u0013\u0001\u0011\u0001\u0014\u0002\uffff\u0001\u000f"+
            "\u0001\u0001\u0001\u0007\u002a\uffff\u0001\u002b\u0001\u0007"+
            "\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014\u0026\uffff"+
            "\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff\u0001\u0008"+
            "\u0017\uffff\u0001\u0010",
            "\u0001\u002a\u0002\uffff\u0001\u0010\u0001\u0008\u0002\uffff"+
            "\u0001\u0013\u0001\u0011\u0001\u0014\u0002\uffff\u0001\u000f"+
            "\u0001\u0001\u0001\u0007\u002a\uffff\u0001\u002b\u0001\u0007"+
            "\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014\u0026\uffff"+
            "\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff\u0001\u0008"+
            "\u0017\uffff\u0001\u0010",
            "\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff\u0001\u0014"+
            "\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f\u0015\uffff"+
            "\u0001\u0008",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u0002\uffff\u0001\u0030\u0038\uffff\u0001\u0008"+
            "\u0048\uffff\u0001\u002e\u001a\uffff\u0001\u002c\u0001\u002d"+
            "\u0001\uffff\u0001\u002c\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u0002\uffff\u0001\u0031\u0038\uffff\u0001\u0008"+
            "\u0048\uffff\u0001\u002e\u001a\uffff\u0001\u002c\u0001\u002d"+
            "\u0001\uffff\u0001\u002c\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0032",
            "\u0001\u0033\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0034\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0033\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0034\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0008\u0048\uffff\u0001\u0037\u001a\uffff\u0001\u0035"+
            "\u0001\u0036\u0001\uffff\u0001\u0035\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0025\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u0024"+
            "\u001a\uffff\u0001\u0022\u0001\u0023\u0001\uffff\u0001\u0022"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\uffff",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\u0001\u0001\u0007"+
            "\u002a\uffff\u0001\u0016\u0001\u0007\u0018\uffff\u0001\u0013"+
            "\u0006\uffff\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff"+
            "\u0002\u000f\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0038",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\uffff\u0001\u0007"+
            "\u002b\uffff\u0001\u0007\u0018\uffff\u0001\u0013\u0006\uffff"+
            "\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff\u0002\u000f"+
            "\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0039\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u003a\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0039\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u003a\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0008\u0048\uffff\u0001\u003d\u001a\uffff\u0001\u003b"+
            "\u0001\u003c\u0001\uffff\u0001\u003b\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u002f\u003b\uffff\u0001\u0008\u0048\uffff\u0001\u002e"+
            "\u001a\uffff\u0001\u002c\u0001\u002d\u0001\uffff\u0001\u002c"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\uffff",
            "\u0001\u003e",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u003f\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0040\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u003f\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0040\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0002\uffff\u0001\u0013\u0001\u0011"+
            "\u0001\u0014\u0002\uffff\u0001\u000f\u0001\u0001\u0001\u0007"+
            "\u002a\uffff\u0001\u002b\u0001\u0007\u0018\uffff\u0001\u0013"+
            "\u0006\uffff\u0001\u0014\u0026\uffff\u0001\u0011\u0008\uffff"+
            "\u0002\u000f\u0015\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0041",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0042\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0042\u0002\uffff\u0001\u0010\u0001\u0008\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0034\uffff\u0001\u0034\u0067\uffff"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0044",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0034\uffff\u0001\u003a\u0067\uffff"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0045",
            "\u0001\u0010\u0001\u0008\u009c\uffff\u0001\u0008\u0017\uffff"+
            "\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0034\uffff\u0001\u0040\u0067\uffff"+
            "\u0001\u0008\u0017\uffff\u0001\u0010",
            "\u0001\u0010\u0001\u0008\u0034\uffff\u0001\u0043\u0067\uffff"+
            "\u0001\u0008\u0017\uffff\u0001\u0010"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA4_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA4_eotS),
    DFA4_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA4_eofS),
    DFA4_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA4_minS),
    DFA4_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA4_maxS),
    DFA4_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA4_acceptS),
    DFA4_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA4_specialS),
    DFA4_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA4_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA4_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA4 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 4;
    this.eot = IDPParser.DFA4_eot;
    this.eof = IDPParser.DFA4_eof;
    this.min = IDPParser.DFA4_min;
    this.max = IDPParser.DFA4_max;
    this.accept = IDPParser.DFA4_accept;
    this.special = IDPParser.DFA4_special;
    this.transition = IDPParser.DFA4_transition;
};


org.antlr.lang.extend(IDPParser.DFA4, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "376:40: ( modelNonTypeCollection | modelBooleanCollection | modelNumricCollection | modelStringCollection | modelTimespanCollection | modelDateCollection | modelTimeCollection | modelTimestampCollection )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA4_40 = input.LA(1);

                             
                            var index4_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred15_IDP()) ) {s = 17;}

                            else if ( (this.setPred()) &&(true) ) {s = 20;}

                             
                            input.seek(index4_40);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_4_4 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 4, _s, input);
        this.error(nvae_4_4);
        throw nvae_4_4;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA5_eotS:
        "\u003f\uffff",
    DFA5_eofS:
        "\u003f\uffff",
    DFA5_minS:
        "\u0001\u0004\u0001\u0000\u0002\uffff\u0004\u0000\u0004\uffff\u0008"+
    "\u0000\u0011\uffff\u0001\u0000\u0019\uffff",
    DFA5_maxS:
        "\u0001\u00c1\u0001\u0000\u0002\uffff\u0004\u0000\u0004\uffff\u0008"+
    "\u0000\u0011\uffff\u0001\u0000\u0019\uffff",
    DFA5_acceptS:
        "\u0002\uffff\u0001\u0001\u001a\uffff\u0001\u0002\u0021\uffff",
    DFA5_specialS:
        "\u0001\uffff\u0001\u0000\u0002\uffff\u0001\u0001\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0004\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001"+
    "\u0008\u0001\u0009\u0001\u000a\u0001\u000b\u0001\u000c\u0011\uffff\u0001"+
    "\u000d\u0019\uffff}>",
    DFA5_transitionS: [
            "\u0001\u0006\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u001d"+
            "\u0002\uffff\u0003\u001d\u0002\uffff\u0001\u001d\u0001\u0002"+
            "\u0001\u001d\u000e\uffff\u0001\u0013\u0001\u0025\u0006\uffff"+
            "\u0002\u001d\u000e\uffff\u0004\u001d\u0001\u0007\u0002\u0002"+
            "\u0008\uffff\u0002\u001d\u0001\u000f\u0001\u001d\u0001\u0011"+
            "\u0008\uffff\u0002\u001d\u0002\u0002\u0005\u001d\u0002\u0002"+
            "\u0003\u001d\u000a\uffff\u0005\u001d\u0013\uffff\u0002\u0002"+
            "\u0001\uffff\u0001\u001d\u0003\uffff\u0002\u001d\u0002\u0002"+
            "\u0010\uffff\u0001\u001d\u0001\u0004\u0001\u0005\u0001\u001d"+
            "\u0001\u0004\u0002\u0002\u0001\u0012\u0003\uffff\u0001\u000e"+
            "\u0001\u0010\u0001\u000c\u0001\u000d\u000d\uffff\u0001\u001d"+
            "\u0002\u0002",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA5_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA5_eotS),
    DFA5_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA5_eofS),
    DFA5_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA5_minS),
    DFA5_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA5_maxS),
    DFA5_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA5_acceptS),
    DFA5_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA5_specialS),
    DFA5_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA5_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA5_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA5 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 5;
    this.eot = IDPParser.DFA5_eot;
    this.eof = IDPParser.DFA5_eof;
    this.min = IDPParser.DFA5_min;
    this.max = IDPParser.DFA5_max;
    this.accept = IDPParser.DFA5_accept;
    this.special = IDPParser.DFA5_special;
    this.transition = IDPParser.DFA5_transition;
};


org.antlr.lang.extend(IDPParser.DFA5, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "414:40: ( modelCollection | modelBoolean )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA5_1 = input.LA(1);

                             
                            var index5_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA5_4 = input.LA(1);

                             
                            var index5_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_4);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA5_5 = input.LA(1);

                             
                            var index5_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_5);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA5_6 = input.LA(1);

                             
                            var index5_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_6);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA5_7 = input.LA(1);

                             
                            var index5_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_7);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA5_12 = input.LA(1);

                             
                            var index5_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_12);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA5_13 = input.LA(1);

                             
                            var index5_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_13);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA5_14 = input.LA(1);

                             
                            var index5_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_14);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA5_15 = input.LA(1);

                             
                            var index5_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_15);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA5_16 = input.LA(1);

                             
                            var index5_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_16);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA5_17 = input.LA(1);

                             
                            var index5_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_17);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA5_18 = input.LA(1);

                             
                            var index5_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_18);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA5_19 = input.LA(1);

                             
                            var index5_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_19);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA5_37 = input.LA(1);

                             
                            var index5_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred17_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 29;}

                             
                            input.seek(index5_37);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_5_5 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 5, _s, input);
        this.error(nvae_5_5);
        throw nvae_5_5;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA28_eotS:
        "\u002d\uffff",
    DFA28_eofS:
        "\u002d\uffff",
    DFA28_minS:
        "\u0001\u0004\u0014\u0000\u0004\uffff\u000c\u0000\u0008\uffff",
    DFA28_maxS:
        "\u0001\u00bf\u0014\u0000\u0004\uffff\u000c\u0000\u0008\uffff",
    DFA28_acceptS:
        "\u0015\uffff\u0001\u0002\u000f\uffff\u0001\u0003\u0001\uffff\u0001"+
    "\u0004\u0002\uffff\u0001\u0001\u0001\u0005\u0001\u0006",
    DFA28_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0004\uffff\u0001\u0014\u0001"+
    "\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001"+
    "\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0008\uffff}>",
    DFA28_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u001d\u0003\uffff\u0001\u0025"+
            "\u0001\u0005\u0002\uffff\u0001\u0027\u0001\u0021\u0001\u001a"+
            "\u0002\uffff\u0001\u0015\u0010\uffff\u0001\u000d\u0001\u0013"+
            "\u001a\uffff\u0001\u0004\u000a\uffff\u0001\u001b\u0001\u001c"+
            "\u0001\u0009\u0001\u001e\u0001\u000b\u0008\uffff\u0002\u0027"+
            "\u0002\uffff\u0001\u001f\u0001\u0020\u0003\u0019\u0002\uffff"+
            "\u0001\u0001\u0001\u0022\u0001\u0023\u000a\uffff\u0001\u0011"+
            "\u0001\u0012\u0001\u000e\u0001\u000f\u0001\u0010\u0016\uffff"+
            "\u0001\u0015\u0003\uffff\u0002\u0015\u0012\uffff\u0001\u0024"+
            "\u0001\u0002\u0001\u0003\u0001\u0024\u0001\u0002\u0002\uffff"+
            "\u0001\u000c\u0003\uffff\u0001\u0008\u0001\u000a\u0001\u0006"+
            "\u0001\u0007\u000d\uffff\u0001\u0025",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA28_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA28_eotS),
    DFA28_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA28_eofS),
    DFA28_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA28_minS),
    DFA28_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA28_maxS),
    DFA28_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA28_acceptS),
    DFA28_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA28_specialS),
    DFA28_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA28_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA28_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA28 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 28;
    this.eot = IDPParser.DFA28_eot;
    this.eof = IDPParser.DFA28_eof;
    this.min = IDPParser.DFA28_min;
    this.max = IDPParser.DFA28_max;
    this.accept = IDPParser.DFA28_accept;
    this.special = IDPParser.DFA28_special;
    this.transition = IDPParser.DFA28_transition;
};


org.antlr.lang.extend(IDPParser.DFA28, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "700:33: (singleStatementOutput= ruleNumericStatement | singleStatementOutput= ruleStringSingleStatement | singleStatementOutput= ruleTimespanStatement | singleStatementOutput= ruleTimeSingleStatement | singleStatementOutput= ruleTimestampSingleStatement | singleStatementOutput= ruleDateSingleStatement )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA28_1 = input.LA(1);

                             
                            var index28_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA28_2 = input.LA(1);

                             
                            var index28_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA28_3 = input.LA(1);

                             
                            var index28_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA28_4 = input.LA(1);

                             
                            var index28_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred45_IDP()) ) {s = 21;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA28_5 = input.LA(1);

                             
                            var index28_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA28_6 = input.LA(1);

                             
                            var index28_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA28_7 = input.LA(1);

                             
                            var index28_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA28_8 = input.LA(1);

                             
                            var index28_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA28_9 = input.LA(1);

                             
                            var index28_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA28_10 = input.LA(1);

                             
                            var index28_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA28_11 = input.LA(1);

                             
                            var index28_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA28_12 = input.LA(1);

                             
                            var index28_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA28_13 = input.LA(1);

                             
                            var index28_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA28_14 = input.LA(1);

                             
                            var index28_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA28_15 = input.LA(1);

                             
                            var index28_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA28_16 = input.LA(1);

                             
                            var index28_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA28_17 = input.LA(1);

                             
                            var index28_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA28_18 = input.LA(1);

                             
                            var index28_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA28_19 = input.LA(1);

                             
                            var index28_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA28_20 = input.LA(1);

                             
                            var index28_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred45_IDP()) ) {s = 21;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA28_25 = input.LA(1);

                             
                            var index28_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_25);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA28_26 = input.LA(1);

                             
                            var index28_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                             
                            input.seek(index28_26);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA28_27 = input.LA(1);

                             
                            var index28_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_27);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA28_28 = input.LA(1);

                             
                            var index28_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_28);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA28_29 = input.LA(1);

                             
                            var index28_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_29);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA28_30 = input.LA(1);

                             
                            var index28_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred47_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_30);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA28_31 = input.LA(1);

                             
                            var index28_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                             
                            input.seek(index28_31);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA28_32 = input.LA(1);

                             
                            var index28_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(this.synpred48_IDP()) ) {s = 43;}

                             
                            input.seek(index28_32);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA28_33 = input.LA(1);

                             
                            var index28_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_33);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA28_34 = input.LA(1);

                             
                            var index28_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_34);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA28_35 = input.LA(1);

                             
                            var index28_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                            else if ( (this.setPred()) &&(true) ) {s = 44;}

                             
                            input.seek(index28_35);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA28_36 = input.LA(1);

                             
                            var index28_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred44_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred46_IDP()) ) {s = 37;}

                             
                            input.seek(index28_36);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_28_28 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 28, _s, input);
        this.error(nvae_28_28);
        throw nvae_28_28;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA29_eotS:
        "\u0031\uffff",
    DFA29_eofS:
        "\u0031\uffff",
    DFA29_minS:
        "\u0001\u0004\u0017\uffff\u0001\u0000\u0018\uffff",
    DFA29_maxS:
        "\u0001\u00bf\u0017\uffff\u0001\u0000\u0018\uffff",
    DFA29_acceptS:
        "\u0001\uffff\u0001\u0001\u002e\uffff\u0001\u0002",
    DFA29_specialS:
        "\u0018\uffff\u0001\u0000\u0018\uffff}>",
    DFA29_transitionS: [
            "\u0001\u0018\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0002\uffff\u0003\u0001\u0002\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0001\u000e\uffff\u0002\u0001\u0006\uffff\u0002\u0001"+
            "\u000e\uffff\u0005\u0001\u000a\uffff\u0005\u0001\u0008\uffff"+
            "\u0002\u0001\u0002\uffff\u0005\u0001\u0002\uffff\u0003\u0001"+
            "\u000a\uffff\u0005\u0001\u0016\uffff\u0001\u0001\u0003\uffff"+
            "\u0002\u0001\u0012\uffff\u0005\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0004\u0001\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA29_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA29_eotS),
    DFA29_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA29_eofS),
    DFA29_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA29_minS),
    DFA29_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA29_maxS),
    DFA29_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA29_acceptS),
    DFA29_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA29_specialS),
    DFA29_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA29_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA29_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA29 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 29;
    this.eot = IDPParser.DFA29_eot;
    this.eof = IDPParser.DFA29_eof;
    this.min = IDPParser.DFA29_min;
    this.max = IDPParser.DFA29_max;
    this.accept = IDPParser.DFA29_accept;
    this.special = IDPParser.DFA29_special;
    this.transition = IDPParser.DFA29_transition;
};


org.antlr.lang.extend(IDPParser.DFA29, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "718:121: (flt= ruleModelBooleanWhere | LROUNDB flt= ruleModelBooleanWhere RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA29_24 = input.LA(1);

                             
                            var index29_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred56_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 48;}

                             
                            input.seek(index29_24);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_29_29 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 29, _s, input);
        this.error(nvae_29_29);
        throw nvae_29_29;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA32_eotS:
        "\u0031\uffff",
    DFA32_eofS:
        "\u0031\uffff",
    DFA32_minS:
        "\u0001\u0004\u0013\uffff\u0001\u0000\u001c\uffff",
    DFA32_maxS:
        "\u0001\u00bf\u0013\uffff\u0001\u0000\u001c\uffff",
    DFA32_acceptS:
        "\u0001\uffff\u0001\u0001\u002e\uffff\u0001\u0002",
    DFA32_specialS:
        "\u0014\uffff\u0001\u0000\u001c\uffff}>",
    DFA32_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0002\uffff\u0003\u0001\u0002\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0001\u000e\uffff\u0002\u0001\u0006\uffff\u0002\u0001"+
            "\u000e\uffff\u0005\u0001\u000a\uffff\u0005\u0001\u0008\uffff"+
            "\u0002\u0001\u0002\uffff\u0005\u0001\u0002\uffff\u0003\u0001"+
            "\u000a\uffff\u0005\u0001\u0016\uffff\u0001\u0001\u0003\uffff"+
            "\u0002\u0001\u0012\uffff\u0005\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0004\u0001\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA32_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA32_eotS),
    DFA32_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA32_eofS),
    DFA32_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA32_minS),
    DFA32_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA32_maxS),
    DFA32_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA32_acceptS),
    DFA32_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA32_specialS),
    DFA32_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA32_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA32_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA32 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 32;
    this.eot = IDPParser.DFA32_eot;
    this.eof = IDPParser.DFA32_eof;
    this.min = IDPParser.DFA32_min;
    this.max = IDPParser.DFA32_max;
    this.accept = IDPParser.DFA32_accept;
    this.special = IDPParser.DFA32_special;
    this.transition = IDPParser.DFA32_transition;
};


org.antlr.lang.extend(IDPParser.DFA32, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "762:33: (selectionClauseOutput= complexAndModelBooleanEnhanced | LROUNDB selectionClauseOutput= complexAndModelBooleanEnhanced RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA32_20 = input.LA(1);

                             
                            var index32_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred60_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 48;}

                             
                            input.seek(index32_20);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_32_32 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 32, _s, input);
        this.error(nvae_32_32);
        throw nvae_32_32;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA34_eotS:
        "\u0031\uffff",
    DFA34_eofS:
        "\u0031\uffff",
    DFA34_minS:
        "\u0001\u0004\u0013\uffff\u0001\u0000\u001c\uffff",
    DFA34_maxS:
        "\u0001\u00bf\u0013\uffff\u0001\u0000\u001c\uffff",
    DFA34_acceptS:
        "\u0001\uffff\u0001\u0001\u002e\uffff\u0001\u0002",
    DFA34_specialS:
        "\u0014\uffff\u0001\u0000\u001c\uffff}>",
    DFA34_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0002\uffff\u0003\u0001\u0002\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0001\u000e\uffff\u0002\u0001\u0006\uffff\u0002\u0001"+
            "\u000e\uffff\u0005\u0001\u000a\uffff\u0005\u0001\u0008\uffff"+
            "\u0002\u0001\u0002\uffff\u0005\u0001\u0002\uffff\u0003\u0001"+
            "\u000a\uffff\u0005\u0001\u0016\uffff\u0001\u0001\u0003\uffff"+
            "\u0002\u0001\u0012\uffff\u0005\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0004\u0001\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA34_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA34_eotS),
    DFA34_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA34_eofS),
    DFA34_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA34_minS),
    DFA34_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA34_maxS),
    DFA34_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA34_acceptS),
    DFA34_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA34_specialS),
    DFA34_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA34_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA34_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA34 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 34;
    this.eot = IDPParser.DFA34_eot;
    this.eof = IDPParser.DFA34_eof;
    this.min = IDPParser.DFA34_min;
    this.max = IDPParser.DFA34_max;
    this.accept = IDPParser.DFA34_accept;
    this.special = IDPParser.DFA34_special;
    this.transition = IDPParser.DFA34_transition;
};


org.antlr.lang.extend(IDPParser.DFA34, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "783:33: (selectionClauseOutput= ruleModelBooleanEnhanced | LROUNDB selectionClauseOutput= ruleModelBooleanEnhanced RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA34_20 = input.LA(1);

                             
                            var index34_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred62_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 48;}

                             
                            input.seek(index34_20);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_34_34 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 34, _s, input);
        this.error(nvae_34_34);
        throw nvae_34_34;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA44_eotS:
        "\u0039\uffff",
    DFA44_eofS:
        "\u0039\uffff",
    DFA44_minS:
        "\u0001\u0004\u002c\u0000\u000c\uffff",
    DFA44_maxS:
        "\u0001\u00bf\u002c\u0000\u000c\uffff",
    DFA44_acceptS:
        "\u002d\uffff\u0001\u0004\u0001\u000b\u0001\uffff\u0001\u0001\u0001"+
    "\u0002\u0001\u0003\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001"+
    "\u0009\u0001\u000a",
    DFA44_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u000c\uffff}>",
    DFA44_transitionS: [
            "\u0001\u0018\u0001\uffff\u0001\u001d\u0003\uffff\u0001\u0026"+
            "\u0001\u0009\u0002\uffff\u0001\u0027\u0001\u0021\u0001\u001a"+
            "\u0002\uffff\u0001\u0005\u0001\uffff\u0001\u0004\u000e\uffff"+
            "\u0001\u0011\u0001\u0017\u0006\uffff\u0002\u002e\u000e\uffff"+
            "\u0002\u0001\u0001\u0002\u0001\u002d\u0001\u0003\u000a\uffff"+
            "\u0001\u001b\u0001\u001c\u0001\u000d\u0001\u001e\u0001\u000f"+
            "\u0008\uffff\u0001\u0028\u0001\u0029\u0002\uffff\u0001\u001f"+
            "\u0001\u0020\u0003\u0019\u0002\uffff\u0001\u0006\u0001\u0022"+
            "\u0001\u0023\u000a\uffff\u0001\u0015\u0001\u0016\u0001\u0012"+
            "\u0001\u0013\u0001\u0014\u0016\uffff\u0001\u002c\u0003\uffff"+
            "\u0001\u002a\u0001\u002b\u0012\uffff\u0001\u0024\u0001\u0007"+
            "\u0001\u0008\u0001\u0024\u0001\u0007\u0002\uffff\u0001\u0010"+
            "\u0003\uffff\u0001\u000c\u0001\u000e\u0001\u000a\u0001\u000b"+
            "\u000d\uffff\u0001\u0025",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA44_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA44_eotS),
    DFA44_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA44_eofS),
    DFA44_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA44_minS),
    DFA44_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA44_maxS),
    DFA44_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA44_acceptS),
    DFA44_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA44_specialS),
    DFA44_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA44_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA44_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA44 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 44;
    this.eot = IDPParser.DFA44_eot;
    this.eof = IDPParser.DFA44_eof;
    this.min = IDPParser.DFA44_min;
    this.max = IDPParser.DFA44_max;
    this.accept = IDPParser.DFA44_accept;
    this.special = IDPParser.DFA44_special;
    this.transition = IDPParser.DFA44_transition;
};


org.antlr.lang.extend(IDPParser.DFA44, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "891:1: singleStatementBooleanWhere returns [value] : (singleStatementBoolOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementNumericOutput= ruleNumericSingleStatementComparison | singleStatementNullOutput= ruleNullStatementComparison | singleStatementStrOutput= ruleStringSingleStatementComparison | singleStatementTimespanOutput= ruleTimespanSingleStatementComparison | singleStatementDateOutput= ruleDateSingleStatementComparison | singleStatementTimeOutput= ruleTimeSingleStatementComparison | singleStatementTimestampOutput= ruleTimestampSingleStatementComparison | singleStatementComplexOutput= complexStatementBooleanWhere | singleStatementComplexOutput= complexStructStatementBooleanWhere );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA44_1 = input.LA(1);

                             
                            var index44_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred73_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred74_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                             
                            input.seek(index44_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA44_2 = input.LA(1);

                             
                            var index44_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred73_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred74_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                             
                            input.seek(index44_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA44_3 = input.LA(1);

                             
                            var index44_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred73_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred74_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA44_4 = input.LA(1);

                             
                            var index44_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred73_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred74_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                             
                            input.seek(index44_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA44_5 = input.LA(1);

                             
                            var index44_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred74_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                             
                            input.seek(index44_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA44_6 = input.LA(1);

                             
                            var index44_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA44_7 = input.LA(1);

                             
                            var index44_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA44_8 = input.LA(1);

                             
                            var index44_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA44_9 = input.LA(1);

                             
                            var index44_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA44_10 = input.LA(1);

                             
                            var index44_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA44_11 = input.LA(1);

                             
                            var index44_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA44_12 = input.LA(1);

                             
                            var index44_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA44_13 = input.LA(1);

                             
                            var index44_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA44_14 = input.LA(1);

                             
                            var index44_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA44_15 = input.LA(1);

                             
                            var index44_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA44_16 = input.LA(1);

                             
                            var index44_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA44_17 = input.LA(1);

                             
                            var index44_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA44_18 = input.LA(1);

                             
                            var index44_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA44_19 = input.LA(1);

                             
                            var index44_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA44_20 = input.LA(1);

                             
                            var index44_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA44_21 = input.LA(1);

                             
                            var index44_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA44_22 = input.LA(1);

                             
                            var index44_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA44_23 = input.LA(1);

                             
                            var index44_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA44_24 = input.LA(1);

                             
                            var index44_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                            else if ( (this.setPred()) &&(this.synpred82_IDP()) ) {s = 56;}

                             
                            input.seek(index44_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA44_25 = input.LA(1);

                             
                            var index44_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA44_26 = input.LA(1);

                             
                            var index44_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA44_27 = input.LA(1);

                             
                            var index44_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA44_28 = input.LA(1);

                             
                            var index44_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA44_29 = input.LA(1);

                             
                            var index44_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA44_30 = input.LA(1);

                             
                            var index44_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA44_31 = input.LA(1);

                             
                            var index44_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA44_32 = input.LA(1);

                             
                            var index44_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred81_IDP()) ) {s = 55;}

                             
                            input.seek(index44_32);
                            if ( s>=0 ) return s;
                            break;

                        case 32 : 
                            var LA44_33 = input.LA(1);

                             
                            var index44_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                             
                            input.seek(index44_33);
                            if ( s>=0 ) return s;
                            break;

                        case 33 : 
                            var LA44_34 = input.LA(1);

                             
                            var index44_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                             
                            input.seek(index44_34);
                            if ( s>=0 ) return s;
                            break;

                        case 34 : 
                            var LA44_35 = input.LA(1);

                             
                            var index44_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred79_IDP()) ) {s = 53;}

                             
                            input.seek(index44_35);
                            if ( s>=0 ) return s;
                            break;

                        case 35 : 
                            var LA44_36 = input.LA(1);

                             
                            var index44_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred75_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_36);
                            if ( s>=0 ) return s;
                            break;

                        case 36 : 
                            var LA44_37 = input.LA(1);

                             
                            var index44_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_37);
                            if ( s>=0 ) return s;
                            break;

                        case 37 : 
                            var LA44_38 = input.LA(1);

                             
                            var index44_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred78_IDP()) ) {s = 52;}

                             
                            input.seek(index44_38);
                            if ( s>=0 ) return s;
                            break;

                        case 38 : 
                            var LA44_39 = input.LA(1);

                             
                            var index44_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                             
                            input.seek(index44_39);
                            if ( s>=0 ) return s;
                            break;

                        case 39 : 
                            var LA44_40 = input.LA(1);

                             
                            var index44_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                             
                            input.seek(index44_40);
                            if ( s>=0 ) return s;
                            break;

                        case 40 : 
                            var LA44_41 = input.LA(1);

                             
                            var index44_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred80_IDP()) ) {s = 54;}

                             
                            input.seek(index44_41);
                            if ( s>=0 ) return s;
                            break;

                        case 41 : 
                            var LA44_42 = input.LA(1);

                             
                            var index44_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                             
                            input.seek(index44_42);
                            if ( s>=0 ) return s;
                            break;

                        case 42 : 
                            var LA44_43 = input.LA(1);

                             
                            var index44_43 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                             
                            input.seek(index44_43);
                            if ( s>=0 ) return s;
                            break;

                        case 43 : 
                            var LA44_44 = input.LA(1);

                             
                            var index44_44 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred76_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred77_IDP()) ) {s = 51;}

                             
                            input.seek(index44_44);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_44_44 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 44, _s, input);
        this.error(nvae_44_44);
        throw nvae_44_44;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA45_eotS:
        "\u0039\uffff",
    DFA45_eofS:
        "\u0039\uffff",
    DFA45_minS:
        "\u0001\u0004\u002c\u0000\u000c\uffff",
    DFA45_maxS:
        "\u0001\u00bf\u002c\u0000\u000c\uffff",
    DFA45_acceptS:
        "\u002d\uffff\u0001\u0002\u0001\u000b\u0001\uffff\u0001\u0001\u0001"+
    "\u0006\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0007\u0001\u0008\u0001"+
    "\u0009\u0001\u000a",
    DFA45_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u0001\u0029\u0001\u002a\u0001\u002b\u000c\uffff}>",
    DFA45_transitionS: [
            "\u0001\u0014\u0001\uffff\u0001\u0019\u0003\uffff\u0001\u0022"+
            "\u0001\u0005\u0002\uffff\u0001\u0023\u0001\u001d\u0001\u0016"+
            "\u0002\uffff\u0001\u0028\u0001\uffff\u0001\u002c\u000e\uffff"+
            "\u0001\u000d\u0001\u0013\u0006\uffff\u0002\u002e\u000e\uffff"+
            "\u0002\u002a\u0001\u002b\u0001\u002d\u0001\u0004\u000a\uffff"+
            "\u0001\u0017\u0001\u0018\u0001\u0009\u0001\u001a\u0001\u000b"+
            "\u0008\uffff\u0001\u0024\u0001\u0025\u0002\uffff\u0001\u001b"+
            "\u0001\u001c\u0003\u0015\u0002\uffff\u0001\u0001\u0001\u001e"+
            "\u0001\u001f\u000a\uffff\u0001\u0011\u0001\u0012\u0001\u000e"+
            "\u0001\u000f\u0001\u0010\u0016\uffff\u0001\u0029\u0003\uffff"+
            "\u0001\u0026\u0001\u0027\u0012\uffff\u0001\u0020\u0001\u0002"+
            "\u0001\u0003\u0001\u0020\u0001\u0002\u0002\uffff\u0001\u000c"+
            "\u0003\uffff\u0001\u0008\u0001\u000a\u0001\u0006\u0001\u0007"+
            "\u000d\uffff\u0001\u0021",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA45_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA45_eotS),
    DFA45_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA45_eofS),
    DFA45_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA45_minS),
    DFA45_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA45_maxS),
    DFA45_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA45_acceptS),
    DFA45_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA45_specialS),
    DFA45_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA45_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA45_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA45 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 45;
    this.eot = IDPParser.DFA45_eot;
    this.eof = IDPParser.DFA45_eof;
    this.min = IDPParser.DFA45_min;
    this.max = IDPParser.DFA45_max;
    this.accept = IDPParser.DFA45_accept;
    this.special = IDPParser.DFA45_special;
    this.transition = IDPParser.DFA45_transition;
};


org.antlr.lang.extend(IDPParser.DFA45, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "908:1: singleStatementBoolean returns [value] : (singleStatementOutput= ruleNumericSingleStatementComparison | singleStatementOutput= ruleNullStatementComparison | singleStatementOutput= ruleBooleanSingleStatement | singleStatementOutput= ruleBooleanSingleSelectionStatement | singleStatementOutput= ruleStringSingleStatementComparison | singleStatementOutput= ruleTimespanSingleStatementComparison | singleStatementOutput= ruleDateSingleStatementComparison | singleStatementOutput= ruleTimeSingleStatementComparison | singleStatementOutput= ruleTimestampSingleStatementComparison | singleStatementOutput= complexStatementBoolean | singleStatementOutput= complexStructStatementBoolean );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA45_1 = input.LA(1);

                             
                            var index45_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA45_2 = input.LA(1);

                             
                            var index45_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA45_3 = input.LA(1);

                             
                            var index45_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA45_4 = input.LA(1);

                             
                            var index45_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred85_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred86_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA45_5 = input.LA(1);

                             
                            var index45_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA45_6 = input.LA(1);

                             
                            var index45_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA45_7 = input.LA(1);

                             
                            var index45_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA45_8 = input.LA(1);

                             
                            var index45_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA45_9 = input.LA(1);

                             
                            var index45_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA45_10 = input.LA(1);

                             
                            var index45_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA45_11 = input.LA(1);

                             
                            var index45_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA45_12 = input.LA(1);

                             
                            var index45_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA45_13 = input.LA(1);

                             
                            var index45_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA45_14 = input.LA(1);

                             
                            var index45_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA45_15 = input.LA(1);

                             
                            var index45_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA45_16 = input.LA(1);

                             
                            var index45_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA45_17 = input.LA(1);

                             
                            var index45_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA45_18 = input.LA(1);

                             
                            var index45_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA45_19 = input.LA(1);

                             
                            var index45_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA45_20 = input.LA(1);

                             
                            var index45_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                            else if ( (this.setPred()) &&(this.synpred92_IDP()) ) {s = 56;}

                             
                            input.seek(index45_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA45_21 = input.LA(1);

                             
                            var index45_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA45_22 = input.LA(1);

                             
                            var index45_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA45_23 = input.LA(1);

                             
                            var index45_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA45_24 = input.LA(1);

                             
                            var index45_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA45_25 = input.LA(1);

                             
                            var index45_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA45_26 = input.LA(1);

                             
                            var index45_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA45_27 = input.LA(1);

                             
                            var index45_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA45_28 = input.LA(1);

                             
                            var index45_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred91_IDP()) ) {s = 55;}

                             
                            input.seek(index45_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA45_29 = input.LA(1);

                             
                            var index45_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                             
                            input.seek(index45_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA45_30 = input.LA(1);

                             
                            var index45_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                             
                            input.seek(index45_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA45_31 = input.LA(1);

                             
                            var index45_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                            else if ( (this.setPred()) &&(this.synpred89_IDP()) ) {s = 53;}

                             
                            input.seek(index45_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA45_32 = input.LA(1);

                             
                            var index45_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred83_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_32);
                            if ( s>=0 ) return s;
                            break;

                        case 32 : 
                            var LA45_33 = input.LA(1);

                             
                            var index45_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_33);
                            if ( s>=0 ) return s;
                            break;

                        case 33 : 
                            var LA45_34 = input.LA(1);

                             
                            var index45_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred88_IDP()) ) {s = 49;}

                             
                            input.seek(index45_34);
                            if ( s>=0 ) return s;
                            break;

                        case 34 : 
                            var LA45_35 = input.LA(1);

                             
                            var index45_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                             
                            input.seek(index45_35);
                            if ( s>=0 ) return s;
                            break;

                        case 35 : 
                            var LA45_36 = input.LA(1);

                             
                            var index45_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                             
                            input.seek(index45_36);
                            if ( s>=0 ) return s;
                            break;

                        case 36 : 
                            var LA45_37 = input.LA(1);

                             
                            var index45_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred90_IDP()) ) {s = 54;}

                             
                            input.seek(index45_37);
                            if ( s>=0 ) return s;
                            break;

                        case 37 : 
                            var LA45_38 = input.LA(1);

                             
                            var index45_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                             
                            input.seek(index45_38);
                            if ( s>=0 ) return s;
                            break;

                        case 38 : 
                            var LA45_39 = input.LA(1);

                             
                            var index45_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                             
                            input.seek(index45_39);
                            if ( s>=0 ) return s;
                            break;

                        case 39 : 
                            var LA45_40 = input.LA(1);

                             
                            var index45_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred86_IDP()) ) {s = 51;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                             
                            input.seek(index45_40);
                            if ( s>=0 ) return s;
                            break;

                        case 40 : 
                            var LA45_41 = input.LA(1);

                             
                            var index45_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred87_IDP()) ) {s = 52;}

                             
                            input.seek(index45_41);
                            if ( s>=0 ) return s;
                            break;

                        case 41 : 
                            var LA45_42 = input.LA(1);

                             
                            var index45_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred85_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred86_IDP()) ) {s = 51;}

                             
                            input.seek(index45_42);
                            if ( s>=0 ) return s;
                            break;

                        case 42 : 
                            var LA45_43 = input.LA(1);

                             
                            var index45_43 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred85_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred86_IDP()) ) {s = 51;}

                             
                            input.seek(index45_43);
                            if ( s>=0 ) return s;
                            break;

                        case 43 : 
                            var LA45_44 = input.LA(1);

                             
                            var index45_44 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred84_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred85_IDP()) ) {s = 50;}

                            else if ( (this.setPred()) &&(this.synpred86_IDP()) ) {s = 51;}

                             
                            input.seek(index45_44);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_45_45 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 45, _s, input);
        this.error(nvae_45_45);
        throw nvae_45_45;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA47_eotS:
        "\u0030\uffff",
    DFA47_eofS:
        "\u0030\uffff",
    DFA47_minS:
        "\u0001\u0004\u0020\u0000\u000f\uffff",
    DFA47_maxS:
        "\u0001\u00bf\u0020\u0000\u000f\uffff",
    DFA47_acceptS:
        "\u0021\uffff\u0001\u0001\u0001\uffff\u0001\u0005\u0002\uffff\u0001"+
    "\u0006\u0003\uffff\u0001\u0007\u0002\uffff\u0001\u0003\u0001\u0004\u0001"+
    "\u0002",
    DFA47_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u000f\uffff}>",
    DFA47_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0021"+
            "\u0001\u0013\u0002\uffff\u0001\u0023\u0001\u000d\u0001\u0003"+
            "\u0002\uffff\u0001\u0026\u0001\uffff\u0001\u002a\u000e\uffff"+
            "\u0001\u0019\u0001\u001f\u0016\uffff\u0003\u002a\u0001\uffff"+
            "\u0001\u0002\u000a\uffff\u0001\u0004\u0001\u0005\u0001\u0006"+
            "\u0001\u0008\u0001\u0009\u0008\uffff\u0002\u0023\u0002\uffff"+
            "\u0001\u000b\u0001\u000c\u0003\u0001\u0002\uffff\u0001\u0010"+
            "\u0001\u000e\u0001\u000f\u000a\uffff\u0001\u001d\u0001\u001e"+
            "\u0001\u001a\u0001\u001b\u0001\u001c\u0016\uffff\u0001\u0026"+
            "\u0003\uffff\u0002\u0026\u0012\uffff\u0001\u0020\u0001\u0011"+
            "\u0001\u0012\u0001\u0020\u0001\u0011\u0002\uffff\u0001\u0018"+
            "\u0003\uffff\u0001\u0016\u0001\u0017\u0001\u0014\u0001\u0015"+
            "\u000d\uffff\u0001\u0021",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA47_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA47_eotS),
    DFA47_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA47_eofS),
    DFA47_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA47_minS),
    DFA47_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA47_maxS),
    DFA47_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA47_acceptS),
    DFA47_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA47_specialS),
    DFA47_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA47_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA47_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA47 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 47;
    this.eot = IDPParser.DFA47_eot;
    this.eof = IDPParser.DFA47_eof;
    this.min = IDPParser.DFA47_min;
    this.max = IDPParser.DFA47_max;
    this.accept = IDPParser.DFA47_accept;
    this.special = IDPParser.DFA47_special;
    this.transition = IDPParser.DFA47_transition;
};


org.antlr.lang.extend(IDPParser.DFA47, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "956:34: (leftSelectionOutput= ruleTimespanClause | leftSelectionOutput= ruleNumericClause | leftSelectionOutput= ruleDateSelectionClause | leftSelectionOutput= ruleTimestampSelectionClause | leftSelectionOutput= ruleTimeSelectionClause | leftSelectionOutput= ruleStringClause | leftSelectionOutput= ruleBooleanSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA47_1 = input.LA(1);

                             
                            var index47_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                             
                            input.seek(index47_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA47_2 = input.LA(1);

                             
                            var index47_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                            else if ( (this.setPred()) &&(this.synpred101_IDP()) ) {s = 38;}

                            else if ( (this.setPred()) &&(true) ) {s = 42;}

                             
                            input.seek(index47_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA47_3 = input.LA(1);

                             
                            var index47_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                             
                            input.seek(index47_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA47_4 = input.LA(1);

                             
                            var index47_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA47_5 = input.LA(1);

                             
                            var index47_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA47_6 = input.LA(1);

                             
                            var index47_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA47_7 = input.LA(1);

                             
                            var index47_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA47_8 = input.LA(1);

                             
                            var index47_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA47_9 = input.LA(1);

                             
                            var index47_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                             
                            input.seek(index47_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA47_10 = input.LA(1);

                             
                            var index47_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred100_IDP()) ) {s = 35;}

                            else if ( (this.setPred()) &&(this.synpred101_IDP()) ) {s = 38;}

                             
                            input.seek(index47_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA47_11 = input.LA(1);

                             
                            var index47_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                             
                            input.seek(index47_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA47_12 = input.LA(1);

                             
                            var index47_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred99_IDP()) ) {s = 46;}

                             
                            input.seek(index47_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA47_13 = input.LA(1);

                             
                            var index47_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                             
                            input.seek(index47_13);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA47_14 = input.LA(1);

                             
                            var index47_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                             
                            input.seek(index47_14);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA47_15 = input.LA(1);

                             
                            var index47_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred98_IDP()) ) {s = 45;}

                             
                            input.seek(index47_15);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA47_16 = input.LA(1);

                             
                            var index47_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_16);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA47_17 = input.LA(1);

                             
                            var index47_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_17);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA47_18 = input.LA(1);

                             
                            var index47_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_18);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA47_19 = input.LA(1);

                             
                            var index47_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_19);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA47_20 = input.LA(1);

                             
                            var index47_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_20);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA47_21 = input.LA(1);

                             
                            var index47_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_21);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA47_22 = input.LA(1);

                             
                            var index47_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_22);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA47_23 = input.LA(1);

                             
                            var index47_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_23);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA47_24 = input.LA(1);

                             
                            var index47_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_24);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA47_25 = input.LA(1);

                             
                            var index47_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_25);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA47_26 = input.LA(1);

                             
                            var index47_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_26);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA47_27 = input.LA(1);

                             
                            var index47_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_27);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA47_28 = input.LA(1);

                             
                            var index47_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_28);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA47_29 = input.LA(1);

                             
                            var index47_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_29);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA47_30 = input.LA(1);

                             
                            var index47_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_30);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA47_31 = input.LA(1);

                             
                            var index47_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_31);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA47_32 = input.LA(1);

                             
                            var index47_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred96_IDP()) ) {s = 33;}

                            else if ( (this.setPred()) &&(this.synpred97_IDP()) ) {s = 47;}

                             
                            input.seek(index47_32);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_47_47 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 47, _s, input);
        this.error(nvae_47_47);
        throw nvae_47_47;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA48_eotS:
        "\u0031\uffff",
    DFA48_eofS:
        "\u0031\uffff",
    DFA48_minS:
        "\u0001\u0004\u0001\uffff\u0020\u0000\u000f\uffff",
    DFA48_maxS:
        "\u0001\u00bf\u0001\uffff\u0020\u0000\u000f\uffff",
    DFA48_acceptS:
        "\u0001\uffff\u0001\u0001\u0020\uffff\u0001\u0002\u0001\uffff\u0001"+
    "\u0006\u0002\uffff\u0001\u0007\u0003\uffff\u0001\u0008\u0002\uffff\u0001"+
    "\u0004\u0001\u0005\u0001\u0003",
    DFA48_specialS:
        "\u0002\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u000f\uffff}>",
    DFA48_transitionS: [
            "\u0001\u000b\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0022"+
            "\u0001\u0014\u0002\uffff\u0001\u0024\u0001\u000e\u0001\u0004"+
            "\u0002\uffff\u0001\u0027\u0001\uffff\u0001\u002b\u000e\uffff"+
            "\u0001\u001a\u0001\u0020\u0016\uffff\u0003\u002b\u0001\u0001"+
            "\u0001\u0003\u000a\uffff\u0001\u0005\u0001\u0006\u0001\u0007"+
            "\u0001\u0009\u0001\u000a\u0008\uffff\u0002\u0024\u0002\uffff"+
            "\u0001\u000c\u0001\u000d\u0003\u0002\u0002\uffff\u0001\u0011"+
            "\u0001\u000f\u0001\u0010\u000a\uffff\u0001\u001e\u0001\u001f"+
            "\u0001\u001b\u0001\u001c\u0001\u001d\u0016\uffff\u0001\u0027"+
            "\u0003\uffff\u0002\u0027\u0012\uffff\u0001\u0021\u0001\u0012"+
            "\u0001\u0013\u0001\u0021\u0001\u0012\u0002\uffff\u0001\u0019"+
            "\u0003\uffff\u0001\u0017\u0001\u0018\u0001\u0015\u0001\u0016"+
            "\u000d\uffff\u0001\u0022",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA48_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA48_eotS),
    DFA48_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA48_eofS),
    DFA48_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA48_minS),
    DFA48_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA48_maxS),
    DFA48_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA48_acceptS),
    DFA48_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA48_specialS),
    DFA48_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA48_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA48_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA48 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 48;
    this.eot = IDPParser.DFA48_eot;
    this.eof = IDPParser.DFA48_eof;
    this.min = IDPParser.DFA48_min;
    this.max = IDPParser.DFA48_max;
    this.accept = IDPParser.DFA48_accept;
    this.special = IDPParser.DFA48_special;
    this.transition = IDPParser.DFA48_transition;
};


org.antlr.lang.extend(IDPParser.DFA48, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "962:34: (rightSelectionOutput= ruleNullSelectionClause | rightSelectionOutput= ruleTimespanClause | rightSelectionOutput= ruleNumericClause | rightSelectionOutput= ruleDateSelectionClause | rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause | rightSelectionOutput= ruleStringClause | rightSelectionOutput= ruleBooleanSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA48_2 = input.LA(1);

                             
                            var index48_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                             
                            input.seek(index48_2);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA48_3 = input.LA(1);

                             
                            var index48_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                            else if ( (this.setPred()) &&(this.synpred109_IDP()) ) {s = 39;}

                            else if ( (this.setPred()) &&(true) ) {s = 43;}

                             
                            input.seek(index48_3);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA48_4 = input.LA(1);

                             
                            var index48_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                             
                            input.seek(index48_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA48_5 = input.LA(1);

                             
                            var index48_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA48_6 = input.LA(1);

                             
                            var index48_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA48_7 = input.LA(1);

                             
                            var index48_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA48_8 = input.LA(1);

                             
                            var index48_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA48_9 = input.LA(1);

                             
                            var index48_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA48_10 = input.LA(1);

                             
                            var index48_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                             
                            input.seek(index48_10);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA48_11 = input.LA(1);

                             
                            var index48_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                            else if ( (this.setPred()) &&(this.synpred108_IDP()) ) {s = 36;}

                            else if ( (this.setPred()) &&(this.synpred109_IDP()) ) {s = 39;}

                             
                            input.seek(index48_11);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA48_12 = input.LA(1);

                             
                            var index48_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                             
                            input.seek(index48_12);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA48_13 = input.LA(1);

                             
                            var index48_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred107_IDP()) ) {s = 47;}

                             
                            input.seek(index48_13);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA48_14 = input.LA(1);

                             
                            var index48_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                             
                            input.seek(index48_14);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA48_15 = input.LA(1);

                             
                            var index48_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                             
                            input.seek(index48_15);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA48_16 = input.LA(1);

                             
                            var index48_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred106_IDP()) ) {s = 46;}

                             
                            input.seek(index48_16);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA48_17 = input.LA(1);

                             
                            var index48_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_17);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA48_18 = input.LA(1);

                             
                            var index48_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_18);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA48_19 = input.LA(1);

                             
                            var index48_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_19);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA48_20 = input.LA(1);

                             
                            var index48_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_20);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA48_21 = input.LA(1);

                             
                            var index48_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_21);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA48_22 = input.LA(1);

                             
                            var index48_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_22);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA48_23 = input.LA(1);

                             
                            var index48_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_23);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA48_24 = input.LA(1);

                             
                            var index48_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_24);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA48_25 = input.LA(1);

                             
                            var index48_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_25);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA48_26 = input.LA(1);

                             
                            var index48_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_26);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA48_27 = input.LA(1);

                             
                            var index48_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_27);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA48_28 = input.LA(1);

                             
                            var index48_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_28);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA48_29 = input.LA(1);

                             
                            var index48_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_29);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA48_30 = input.LA(1);

                             
                            var index48_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_30);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA48_31 = input.LA(1);

                             
                            var index48_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_31);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA48_32 = input.LA(1);

                             
                            var index48_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_32);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA48_33 = input.LA(1);

                             
                            var index48_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred104_IDP()) ) {s = 34;}

                            else if ( (this.setPred()) &&(this.synpred105_IDP()) ) {s = 48;}

                             
                            input.seek(index48_33);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_48_48 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 48, _s, input);
        this.error(nvae_48_48);
        throw nvae_48_48;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA70_eotS:
        "\u000e\uffff",
    DFA70_eofS:
        "\u000e\uffff",
    DFA70_minS:
        "\u0001\u0040\u0001\u0041\u0001\uffff\u0002\u0007\u0001\u000e\u0001"+
    "\uffff\u0001\u0000\u0003\uffff\u0001\u0089\u0002\u000e",
    DFA70_maxS:
        "\u0001\u00a7\u0001\u0092\u0001\uffff\u0003\u0092\u0001\uffff\u0001"+
    "\u0000\u0003\uffff\u0001\u0089\u0002\u0092",
    DFA70_acceptS:
        "\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0002\u0001\uffff\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0003\uffff",
    DFA70_specialS:
        "\u0007\uffff\u0001\u0000\u0006\uffff}>",
    DFA70_transitionS: [
            "\u0001\u0001\u0002\u0002\u0017\uffff\u0002\u0009\u0005\uffff"+
            "\u0001\u0008\u0001\u0007\u0025\uffff\u0001\u0006\u0001\u0005"+
            "\u0007\uffff\u0002\u000a\u0011\uffff\u0001\u0003\u0001\u0004"+
            "\u0001\uffff\u0001\u0003",
            "\u0001\u0002\u0018\uffff\u0001\u0009\u0006\uffff\u0001\u0008"+
            "\u0026\uffff\u0001\u0006\u0008\uffff\u0002\u000a",
            "",
            "\u0001\u000b\u0006\uffff\u0001\u0009\u0001\u0006\u0001\u0008"+
            "\u0002\uffff\u0001\u000a\u0001\uffff\u0001\u0002\u002a\uffff"+
            "\u0001\u000c\u0001\u0002\u0018\uffff\u0001\u0009\u0006\uffff"+
            "\u0001\u0008\u0026\uffff\u0001\u0006\u0008\uffff\u0002\u000a",
            "\u0001\u000b\u0006\uffff\u0001\u0009\u0001\u0006\u0001\u0008"+
            "\u0002\uffff\u0001\u000a\u0001\uffff\u0001\u0002\u002a\uffff"+
            "\u0001\u000c\u0001\u0002\u0018\uffff\u0001\u0009\u0006\uffff"+
            "\u0001\u0008\u0026\uffff\u0001\u0006\u0008\uffff\u0002\u000a",
            "\u0001\u0009\u0001\u0006\u0001\u0008\u0002\uffff\u0001\u000a"+
            "\u0001\uffff\u0001\u0002\u002b\uffff\u0001\u0002\u0018\uffff"+
            "\u0001\u0009\u0006\uffff\u0001\u0008\u0026\uffff\u0001\u0006"+
            "\u0008\uffff\u0002\u000a",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "\u0001\u000d",
            "\u0001\u0009\u0001\u0006\u0001\u0008\u0002\uffff\u0001\u000a"+
            "\u0001\uffff\u0001\u0002\u002b\uffff\u0001\u0002\u0018\uffff"+
            "\u0001\u0009\u0006\uffff\u0001\u0008\u0026\uffff\u0001\u0006"+
            "\u0008\uffff\u0002\u000a",
            "\u0001\u0009\u0001\u0006\u0001\u0008\u0002\uffff\u0001\u000a"+
            "\u0001\uffff\u0001\u0002\u002a\uffff\u0001\u000c\u0001\u0002"+
            "\u0018\uffff\u0001\u0009\u0006\uffff\u0001\u0008\u0026\uffff"+
            "\u0001\u0006\u0008\uffff\u0002\u000a"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA70_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA70_eotS),
    DFA70_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA70_eofS),
    DFA70_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA70_minS),
    DFA70_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA70_maxS),
    DFA70_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA70_acceptS),
    DFA70_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA70_specialS),
    DFA70_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA70_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA70_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA70 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 70;
    this.eot = IDPParser.DFA70_eot;
    this.eof = IDPParser.DFA70_eof;
    this.min = IDPParser.DFA70_min;
    this.max = IDPParser.DFA70_max;
    this.accept = IDPParser.DFA70_accept;
    this.special = IDPParser.DFA70_special;
    this.transition = IDPParser.DFA70_transition;
};


org.antlr.lang.extend(IDPParser.DFA70, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1193:33: (compoundSelectionOutput= ruleBooleanCollection | compoundSelectionOutput= ruleDateCollection | compoundSelectionOutput= ruleTimestampCollection | compoundSelectionOutput= ruleTimeCollection | compoundSelectionOutput= ruleStringCollection )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA70_7 = input.LA(1);

                             
                            var index70_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred145_IDP()) ) {s = 6;}

                            else if ( (this.setPred()) &&(this.synpred146_IDP()) ) {s = 8;}

                             
                            input.seek(index70_7);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_70_70 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 70, _s, input);
        this.error(nvae_70_70);
        throw nvae_70_70;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA79_eotS:
        "\u000d\uffff",
    DFA79_eofS:
        "\u000d\uffff",
    DFA79_minS:
        "\u0001\u0004\u0001\u0000\u000b\uffff",
    DFA79_maxS:
        "\u0001\u0059\u0001\u0000\u000b\uffff",
    DFA79_acceptS:
        "\u0002\uffff\u0001\u0002\u0009\uffff\u0001\u0001",
    DFA79_specialS:
        "\u0001\uffff\u0001\u0000\u000b\uffff}>",
    DFA79_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0007\uffff\u0001\u0002"+
            "\u0031\uffff\u0001\u0002\u000a\uffff\u0005\u0002\u0008\uffff"+
            "\u0002\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA79_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA79_eotS),
    DFA79_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA79_eofS),
    DFA79_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA79_minS),
    DFA79_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA79_maxS),
    DFA79_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA79_acceptS),
    DFA79_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA79_specialS),
    DFA79_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA79_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA79_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA79 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 79;
    this.eot = IDPParser.DFA79_eot;
    this.eof = IDPParser.DFA79_eof;
    this.min = IDPParser.DFA79_min;
    this.max = IDPParser.DFA79_max;
    this.accept = IDPParser.DFA79_accept;
    this.special = IDPParser.DFA79_special;
    this.transition = IDPParser.DFA79_transition;
};


org.antlr.lang.extend(IDPParser.DFA79, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1255:33: ( LROUNDB selectionOutput= ruleBaseTime RROUNDB | selectionOutput= ruleBaseTime )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA79_1 = input.LA(1);

                             
                            var index79_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred158_IDP()) ) {s = 12;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index79_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_79_79 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 79, _s, input);
        this.error(nvae_79_79);
        throw nvae_79_79;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA87_eotS:
        "\u0010\uffff",
    DFA87_eofS:
        "\u0010\uffff",
    DFA87_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0006\u0000\u0006\uffff",
    DFA87_maxS:
        "\u0001\u0060\u0002\u0000\u0001\uffff\u0006\u0000\u0006\uffff",
    DFA87_acceptS:
        "\u0003\uffff\u0001\u0001\u0008\uffff\u0001\u0002\u0003\uffff",
    DFA87_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0006\uffff}>",
    DFA87_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u0003"+
            "\u0001\uffff\u0001\u000c\u002f\uffff\u0001\u0002\u000a\uffff"+
            "\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009"+
            "\u0008\uffff\u0002\u0003\u0002\uffff\u0005\u000c",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA87_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA87_eotS),
    DFA87_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA87_eofS),
    DFA87_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA87_minS),
    DFA87_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA87_maxS),
    DFA87_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA87_acceptS),
    DFA87_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA87_specialS),
    DFA87_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA87_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA87_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA87 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 87;
    this.eot = IDPParser.DFA87_eot;
    this.eof = IDPParser.DFA87_eof;
    this.min = IDPParser.DFA87_min;
    this.max = IDPParser.DFA87_max;
    this.accept = IDPParser.DFA87_accept;
    this.special = IDPParser.DFA87_special;
    this.transition = IDPParser.DFA87_transition;
};


org.antlr.lang.extend(IDPParser.DFA87, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1303:1: ruleTimeBetweenDateClause returns [value] : ( ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA87_1 = input.LA(1);

                             
                            var index87_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA87_2 = input.LA(1);

                             
                            var index87_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA87_4 = input.LA(1);

                             
                            var index87_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA87_5 = input.LA(1);

                             
                            var index87_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA87_6 = input.LA(1);

                             
                            var index87_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA87_7 = input.LA(1);

                             
                            var index87_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA87_8 = input.LA(1);

                             
                            var index87_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA87_9 = input.LA(1);

                             
                            var index87_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred168_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 12;}

                             
                            input.seek(index87_9);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_87_87 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 87, _s, input);
        this.error(nvae_87_87);
        throw nvae_87_87;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA89_eotS:
        "\u0010\uffff",
    DFA89_eofS:
        "\u0010\uffff",
    DFA89_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0006\u0000\u0006\uffff",
    DFA89_maxS:
        "\u0001\u0060\u0002\u0000\u0001\uffff\u0006\u0000\u0006\uffff",
    DFA89_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff",
    DFA89_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0006\uffff}>",
    DFA89_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u000d"+
            "\u0001\uffff\u0001\u0003\u002f\uffff\u0001\u0002\u000a\uffff"+
            "\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009"+
            "\u0008\uffff\u0002\u000d\u0002\uffff\u0005\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA89_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA89_eotS),
    DFA89_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA89_eofS),
    DFA89_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA89_minS),
    DFA89_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA89_maxS),
    DFA89_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA89_acceptS),
    DFA89_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA89_specialS),
    DFA89_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA89_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA89_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA89 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 89;
    this.eot = IDPParser.DFA89_eot;
    this.eof = IDPParser.DFA89_eof;
    this.min = IDPParser.DFA89_min;
    this.max = IDPParser.DFA89_max;
    this.accept = IDPParser.DFA89_accept;
    this.special = IDPParser.DFA89_special;
    this.transition = IDPParser.DFA89_transition;
};


org.antlr.lang.extend(IDPParser.DFA89, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1338:9: (rightSelectionOutput= ruleTimestampSelectionClause | rightSelectionOutput= ruleTimeSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA89_1 = input.LA(1);

                             
                            var index89_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA89_2 = input.LA(1);

                             
                            var index89_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA89_4 = input.LA(1);

                             
                            var index89_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA89_5 = input.LA(1);

                             
                            var index89_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA89_6 = input.LA(1);

                             
                            var index89_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA89_7 = input.LA(1);

                             
                            var index89_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA89_8 = input.LA(1);

                             
                            var index89_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA89_9 = input.LA(1);

                             
                            var index89_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred173_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index89_9);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_89_89 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 89, _s, input);
        this.error(nvae_89_89);
        throw nvae_89_89;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA100_eotS:
        "\u000e\uffff",
    DFA100_eofS:
        "\u000e\uffff",
    DFA100_minS:
        "\u0001\u0004\u0001\u0000\u000c\uffff",
    DFA100_maxS:
        "\u0001\u0060\u0001\u0000\u000c\uffff",
    DFA100_acceptS:
        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001",
    DFA100_specialS:
        "\u0001\uffff\u0001\u0000\u000c\uffff}>",
    DFA100_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0009\uffff\u0001\u0002"+
            "\u002f\uffff\u0001\u0002\u000a\uffff\u0005\u0002\u000c\uffff"+
            "\u0005\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA100_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA100_eotS),
    DFA100_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA100_eofS),
    DFA100_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA100_minS),
    DFA100_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA100_maxS),
    DFA100_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA100_acceptS),
    DFA100_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA100_specialS),
    DFA100_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA100_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA100_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA100 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 100;
    this.eot = IDPParser.DFA100_eot;
    this.eof = IDPParser.DFA100_eof;
    this.min = IDPParser.DFA100_min;
    this.max = IDPParser.DFA100_max;
    this.accept = IDPParser.DFA100_accept;
    this.special = IDPParser.DFA100_special;
    this.transition = IDPParser.DFA100_transition;
};


org.antlr.lang.extend(IDPParser.DFA100, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1437:32: ( LROUNDB selectionOutput= ruleTimestampArithmeticSelectionClause RROUNDB | selectionOutput= ruleTimestampArithmeticSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA100_1 = input.LA(1);

                             
                            var index100_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred184_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index100_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_100_100 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 100, _s, input);
        this.error(nvae_100_100);
        throw nvae_100_100;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA101_eotS:
        "\u000e\uffff",
    DFA101_eofS:
        "\u000e\uffff",
    DFA101_minS:
        "\u0001\u0004\u0001\u0000\u000c\uffff",
    DFA101_maxS:
        "\u0001\u0060\u0001\u0000\u000c\uffff",
    DFA101_acceptS:
        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001",
    DFA101_specialS:
        "\u0001\uffff\u0001\u0000\u000c\uffff}>",
    DFA101_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0009\uffff\u0001\u0002"+
            "\u002f\uffff\u0001\u0002\u000a\uffff\u0005\u0002\u000c\uffff"+
            "\u0005\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA101_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA101_eotS),
    DFA101_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA101_eofS),
    DFA101_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA101_minS),
    DFA101_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA101_maxS),
    DFA101_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA101_acceptS),
    DFA101_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA101_specialS),
    DFA101_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA101_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA101_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA101 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 101;
    this.eot = IDPParser.DFA101_eot;
    this.eof = IDPParser.DFA101_eof;
    this.min = IDPParser.DFA101_min;
    this.max = IDPParser.DFA101_max;
    this.accept = IDPParser.DFA101_accept;
    this.special = IDPParser.DFA101_special;
    this.transition = IDPParser.DFA101_transition;
};


org.antlr.lang.extend(IDPParser.DFA101, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1444:33: ( LROUNDB selectionOutput= ruleBaseTimestamp RROUNDB | selectionOutput= ruleBaseTimestamp )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA101_1 = input.LA(1);

                             
                            var index101_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred185_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index101_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_101_101 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 101, _s, input);
        this.error(nvae_101_101);
        throw nvae_101_101;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA107_eotS:
        "\u0013\uffff",
    DFA107_eofS:
        "\u0013\uffff",
    DFA107_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0008\uffff",
    DFA107_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0008\uffff",
    DFA107_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff\u0001"+
    "\u0003\u0002\uffff",
    DFA107_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0008"+
    "\uffff}>",
    DFA107_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u000d"+
            "\u0001\u0010\u0001\u0003\u002f\uffff\u0001\u0002\u000a\uffff"+
            "\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009"+
            "\u0008\uffff\u0002\u000d\u0002\uffff\u0002\u0003\u0003\u000a"+
            "\u0003\uffff\u0002\u0010",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA107_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA107_eotS),
    DFA107_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA107_eofS),
    DFA107_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA107_minS),
    DFA107_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA107_maxS),
    DFA107_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA107_acceptS),
    DFA107_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA107_specialS),
    DFA107_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA107_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA107_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA107 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 107;
    this.eot = IDPParser.DFA107_eot;
    this.eof = IDPParser.DFA107_eof;
    this.min = IDPParser.DFA107_min;
    this.max = IDPParser.DFA107_max;
    this.accept = IDPParser.DFA107_accept;
    this.special = IDPParser.DFA107_special;
    this.transition = IDPParser.DFA107_transition;
};


org.antlr.lang.extend(IDPParser.DFA107, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1540:1: ruleTimestampBetweenDateClause returns [value] : ( ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) | ( (dateOutput= ruleTimeSelectionClause ) ( AND | TO ) (dateOutput= ruleTimeSelectionClause ) ) | ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA107_1 = input.LA(1);

                             
                            var index107_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA107_2 = input.LA(1);

                             
                            var index107_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA107_4 = input.LA(1);

                             
                            var index107_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA107_5 = input.LA(1);

                             
                            var index107_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA107_6 = input.LA(1);

                             
                            var index107_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA107_7 = input.LA(1);

                             
                            var index107_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA107_8 = input.LA(1);

                             
                            var index107_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA107_9 = input.LA(1);

                             
                            var index107_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred196_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA107_10 = input.LA(1);

                             
                            var index107_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred194_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index107_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_107_107 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 107, _s, input);
        this.error(nvae_107_107);
        throw nvae_107_107;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA109_eotS:
        "\u0013\uffff",
    DFA109_eofS:
        "\u0013\uffff",
    DFA109_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0008\uffff",
    DFA109_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0008\uffff",
    DFA109_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff\u0001"+
    "\u0003\u0002\uffff",
    DFA109_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0008"+
    "\uffff}>",
    DFA109_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u0010"+
            "\u0001\u0003\u0001\u000d\u002f\uffff\u0001\u0002\u000a\uffff"+
            "\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009"+
            "\u0008\uffff\u0002\u0010\u0002\uffff\u0002\u000d\u0003\u000a"+
            "\u0003\uffff\u0002\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA109_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA109_eotS),
    DFA109_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA109_eofS),
    DFA109_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA109_minS),
    DFA109_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA109_maxS),
    DFA109_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA109_acceptS),
    DFA109_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA109_specialS),
    DFA109_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA109_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA109_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA109 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 109;
    this.eot = IDPParser.DFA109_eot;
    this.eof = IDPParser.DFA109_eof;
    this.min = IDPParser.DFA109_min;
    this.max = IDPParser.DFA109_max;
    this.accept = IDPParser.DFA109_accept;
    this.special = IDPParser.DFA109_special;
    this.transition = IDPParser.DFA109_transition;
};


org.antlr.lang.extend(IDPParser.DFA109, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1600:9: ( (rightSelectionOutput= ruleDateSelectionClause ) | (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleTimeSelectionClause ) )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA109_1 = input.LA(1);

                             
                            var index109_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA109_2 = input.LA(1);

                             
                            var index109_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA109_4 = input.LA(1);

                             
                            var index109_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA109_5 = input.LA(1);

                             
                            var index109_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA109_6 = input.LA(1);

                             
                            var index109_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA109_7 = input.LA(1);

                             
                            var index109_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA109_8 = input.LA(1);

                             
                            var index109_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA109_9 = input.LA(1);

                             
                            var index109_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index109_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA109_10 = input.LA(1);

                             
                            var index109_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred202_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(this.synpred203_IDP()) ) {s = 13;}

                             
                            input.seek(index109_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_109_109 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 109, _s, input);
        this.error(nvae_109_109);
        throw nvae_109_109;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA119_eotS:
        "\u000e\uffff",
    DFA119_eofS:
        "\u000e\uffff",
    DFA119_minS:
        "\u0001\u0004\u0001\u0000\u000c\uffff",
    DFA119_maxS:
        "\u0001\u0065\u0001\u0000\u000c\uffff",
    DFA119_acceptS:
        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001",
    DFA119_specialS:
        "\u0001\uffff\u0001\u0000\u000c\uffff}>",
    DFA119_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0008\uffff\u0001\u0002"+
            "\u0030\uffff\u0001\u0002\u000a\uffff\u0005\u0002\u000e\uffff"+
            "\u0003\u0002\u0003\uffff\u0002\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA119_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA119_eotS),
    DFA119_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA119_eofS),
    DFA119_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA119_minS),
    DFA119_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA119_maxS),
    DFA119_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA119_acceptS),
    DFA119_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA119_specialS),
    DFA119_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA119_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA119_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA119 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 119;
    this.eot = IDPParser.DFA119_eot;
    this.eof = IDPParser.DFA119_eof;
    this.min = IDPParser.DFA119_min;
    this.max = IDPParser.DFA119_max;
    this.accept = IDPParser.DFA119_accept;
    this.special = IDPParser.DFA119_special;
    this.transition = IDPParser.DFA119_transition;
};


org.antlr.lang.extend(IDPParser.DFA119, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1699:32: ( LROUNDB selectionOutput= ruleDateArithmeticSelectionClause RROUNDB | selectionOutput= ruleDateArithmeticSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA119_1 = input.LA(1);

                             
                            var index119_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred216_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index119_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_119_119 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 119, _s, input);
        this.error(nvae_119_119);
        throw nvae_119_119;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA120_eotS:
        "\u000e\uffff",
    DFA120_eofS:
        "\u000e\uffff",
    DFA120_minS:
        "\u0001\u0004\u0001\u0000\u000c\uffff",
    DFA120_maxS:
        "\u0001\u0065\u0001\u0000\u000c\uffff",
    DFA120_acceptS:
        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001",
    DFA120_specialS:
        "\u0001\uffff\u0001\u0000\u000c\uffff}>",
    DFA120_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0008\uffff\u0001\u0002"+
            "\u0030\uffff\u0001\u0002\u000a\uffff\u0005\u0002\u000e\uffff"+
            "\u0003\u0002\u0003\uffff\u0002\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA120_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA120_eotS),
    DFA120_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA120_eofS),
    DFA120_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA120_minS),
    DFA120_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA120_maxS),
    DFA120_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA120_acceptS),
    DFA120_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA120_specialS),
    DFA120_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA120_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA120_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA120 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 120;
    this.eot = IDPParser.DFA120_eot;
    this.eof = IDPParser.DFA120_eof;
    this.min = IDPParser.DFA120_min;
    this.max = IDPParser.DFA120_max;
    this.accept = IDPParser.DFA120_accept;
    this.special = IDPParser.DFA120_special;
    this.transition = IDPParser.DFA120_transition;
};


org.antlr.lang.extend(IDPParser.DFA120, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1709:33: ( LROUNDB selectionOutput= ruleBaseDate RROUNDB | selectionOutput= ruleBaseDate )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA120_1 = input.LA(1);

                             
                            var index120_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred217_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index120_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_120_120 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 120, _s, input);
        this.error(nvae_120_120);
        throw nvae_120_120;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA124_eotS:
        "\u0011\uffff",
    DFA124_eofS:
        "\u0011\uffff",
    DFA124_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0006\uffff",
    DFA124_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0006\uffff",
    DFA124_acceptS:
        "\u0003\uffff\u0001\u0002\u0009\uffff\u0001\u0003\u0002\uffff\u0001"+
    "\u0001",
    DFA124_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0006"+
    "\uffff}>",
    DFA124_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0007\u0008\uffff\u0001\u000d"+
            "\u0001\u0003\u002f\uffff\u0001\u0002\u000a\uffff\u0001\u0004"+
            "\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009\u000c\uffff"+
            "\u0002\u0003\u0003\u0001\u0003\uffff\u0002\u000d",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA124_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA124_eotS),
    DFA124_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA124_eofS),
    DFA124_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA124_minS),
    DFA124_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA124_maxS),
    DFA124_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA124_acceptS),
    DFA124_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA124_specialS),
    DFA124_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA124_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA124_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA124 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 124;
    this.eot = IDPParser.DFA124_eot;
    this.eof = IDPParser.DFA124_eof;
    this.min = IDPParser.DFA124_min;
    this.max = IDPParser.DFA124_max;
    this.accept = IDPParser.DFA124_accept;
    this.special = IDPParser.DFA124_special;
    this.transition = IDPParser.DFA124_transition;
};


org.antlr.lang.extend(IDPParser.DFA124, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1746:1: ruleTimeSpanFromTimestampSubtraction returns [value] : ( ( (selectionOutput= ruleBaseTimestampConstant ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate ) ) ) | ( (selectionOutput= ruleBaseTimestamp ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseTimestamp ) ) ) | ( (selectionOutput= ruleBaseDate ) (arithmeticOperOutput= MINUS (selectionOutput= ruleBaseDate ) ) ) );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA124_1 = input.LA(1);

                             
                            var index124_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred221_IDP()) ) {s = 16;}

                            else if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA124_2 = input.LA(1);

                             
                            var index124_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA124_4 = input.LA(1);

                             
                            var index124_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA124_5 = input.LA(1);

                             
                            var index124_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA124_6 = input.LA(1);

                             
                            var index124_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA124_7 = input.LA(1);

                             
                            var index124_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA124_8 = input.LA(1);

                             
                            var index124_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA124_9 = input.LA(1);

                             
                            var index124_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA124_10 = input.LA(1);

                             
                            var index124_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred222_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index124_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_124_124 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 124, _s, input);
        this.error(nvae_124_124);
        throw nvae_124_124;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA123_eotS:
        "\u0010\uffff",
    DFA123_eofS:
        "\u0010\uffff",
    DFA123_minS:
        "\u0001\u0004\u0001\u0000\u0001\uffff\u0008\u0000\u0005\uffff",
    DFA123_maxS:
        "\u0001\u0065\u0001\u0000\u0001\uffff\u0008\u0000\u0005\uffff",
    DFA123_acceptS:
        "\u0002\uffff\u0001\u0001\u000a\uffff\u0001\u0002\u0002\uffff",
    DFA123_specialS:
        "\u0001\uffff\u0001\u0000\u0001\uffff\u0001\u0001\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA123_transitionS: [
            "\u0001\u0009\u0001\uffff\u0001\u0006\u0008\uffff\u0001\u000d"+
            "\u0001\u0002\u002f\uffff\u0001\u0001\u000a\uffff\u0001\u0003"+
            "\u0001\u0004\u0001\u0005\u0001\u0007\u0001\u0008\u000c\uffff"+
            "\u0002\u0002\u0003\u000a\u0003\uffff\u0002\u000d",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA123_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA123_eotS),
    DFA123_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA123_eofS),
    DFA123_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA123_minS),
    DFA123_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA123_maxS),
    DFA123_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA123_acceptS),
    DFA123_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA123_specialS),
    DFA123_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA123_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA123_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA123 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 123;
    this.eot = IDPParser.DFA123_eot;
    this.eof = IDPParser.DFA123_eof;
    this.min = IDPParser.DFA123_min;
    this.max = IDPParser.DFA123_max;
    this.accept = IDPParser.DFA123_accept;
    this.special = IDPParser.DFA123_special;
    this.transition = IDPParser.DFA123_transition;
};


org.antlr.lang.extend(IDPParser.DFA123, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1754:34: (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA123_1 = input.LA(1);

                             
                            var index123_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA123_3 = input.LA(1);

                             
                            var index123_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_3);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA123_4 = input.LA(1);

                             
                            var index123_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA123_5 = input.LA(1);

                             
                            var index123_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA123_6 = input.LA(1);

                             
                            var index123_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA123_7 = input.LA(1);

                             
                            var index123_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA123_8 = input.LA(1);

                             
                            var index123_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA123_9 = input.LA(1);

                             
                            var index123_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA123_10 = input.LA(1);

                             
                            var index123_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index123_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_123_123 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 123, _s, input);
        this.error(nvae_123_123);
        throw nvae_123_123;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA128_eotS:
        "\u0010\uffff",
    DFA128_eofS:
        "\u0010\uffff",
    DFA128_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA128_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA128_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff",
    DFA128_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA128_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0008\uffff\u0001\u0003"+
            "\u0001\u000d\u002f\uffff\u0001\u0002\u000a\uffff\u0001\u0004"+
            "\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009\u000c\uffff"+
            "\u0002\u000d\u0003\u000a\u0003\uffff\u0002\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA128_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA128_eotS),
    DFA128_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA128_eofS),
    DFA128_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA128_minS),
    DFA128_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA128_maxS),
    DFA128_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA128_acceptS),
    DFA128_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA128_specialS),
    DFA128_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA128_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA128_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA128 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 128;
    this.eot = IDPParser.DFA128_eot;
    this.eof = IDPParser.DFA128_eof;
    this.min = IDPParser.DFA128_min;
    this.max = IDPParser.DFA128_max;
    this.accept = IDPParser.DFA128_accept;
    this.special = IDPParser.DFA128_special;
    this.transition = IDPParser.DFA128_transition;
};


org.antlr.lang.extend(IDPParser.DFA128, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1831:29: (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA128_1 = input.LA(1);

                             
                            var index128_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA128_2 = input.LA(1);

                             
                            var index128_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA128_4 = input.LA(1);

                             
                            var index128_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA128_5 = input.LA(1);

                             
                            var index128_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA128_6 = input.LA(1);

                             
                            var index128_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA128_7 = input.LA(1);

                             
                            var index128_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA128_8 = input.LA(1);

                             
                            var index128_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA128_9 = input.LA(1);

                             
                            var index128_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA128_10 = input.LA(1);

                             
                            var index128_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred228_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index128_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_128_128 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 128, _s, input);
        this.error(nvae_128_128);
        throw nvae_128_128;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA129_eotS:
        "\u0010\uffff",
    DFA129_eofS:
        "\u0010\uffff",
    DFA129_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA129_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA129_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff",
    DFA129_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA129_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0008\uffff\u0001\u0003"+
            "\u0001\u000d\u002f\uffff\u0001\u0002\u000a\uffff\u0001\u0004"+
            "\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009\u000c\uffff"+
            "\u0002\u000d\u0003\u000a\u0003\uffff\u0002\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA129_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA129_eotS),
    DFA129_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA129_eofS),
    DFA129_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA129_minS),
    DFA129_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA129_maxS),
    DFA129_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA129_acceptS),
    DFA129_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA129_specialS),
    DFA129_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA129_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA129_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA129 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 129;
    this.eot = IDPParser.DFA129_eot;
    this.eof = IDPParser.DFA129_eof;
    this.min = IDPParser.DFA129_min;
    this.max = IDPParser.DFA129_max;
    this.accept = IDPParser.DFA129_accept;
    this.special = IDPParser.DFA129_special;
    this.transition = IDPParser.DFA129_transition;
};


org.antlr.lang.extend(IDPParser.DFA129, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1832:29: (dateOutput= ruleDateSelectionClause | dateOutput= ruleTimestampSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA129_1 = input.LA(1);

                             
                            var index129_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA129_2 = input.LA(1);

                             
                            var index129_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA129_4 = input.LA(1);

                             
                            var index129_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA129_5 = input.LA(1);

                             
                            var index129_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA129_6 = input.LA(1);

                             
                            var index129_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA129_7 = input.LA(1);

                             
                            var index129_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA129_8 = input.LA(1);

                             
                            var index129_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA129_9 = input.LA(1);

                             
                            var index129_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA129_10 = input.LA(1);

                             
                            var index129_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred229_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index129_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_129_129 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 129, _s, input);
        this.error(nvae_129_129);
        throw nvae_129_129;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA132_eotS:
        "\u000b\uffff",
    DFA132_eofS:
        "\u000b\uffff",
    DFA132_minS:
        "\u0001\u0040\u0001\u0061\u0001\uffff\u0002\u0007\u0001\u000f\u0001"+
    "\u0000\u0001\uffff\u0001\u0089\u0002\u000f",
    DFA132_maxS:
        "\u0001\u00a7\u0001\u0088\u0001\uffff\u0003\u0088\u0001\u0000\u0001"+
    "\uffff\u0001\u0089\u0002\u0088",
    DFA132_acceptS:
        "\u0002\uffff\u0001\u0001\u0004\uffff\u0001\u0002\u0003\uffff",
    DFA132_specialS:
        "\u0006\uffff\u0001\u0000\u0004\uffff}>",
    DFA132_transitionS: [
            "\u0001\u0001\u0020\uffff\u0001\u0007\u0001\u0006\u0025\uffff"+
            "\u0001\u0002\u0001\u0005\u001a\uffff\u0001\u0003\u0001\u0004"+
            "\u0001\uffff\u0001\u0003",
            "\u0001\u0007\u0026\uffff\u0001\u0002",
            "",
            "\u0001\u0008\u0007\uffff\u0001\u0002\u0001\u0007\u002f\uffff"+
            "\u0001\u0009\u0020\uffff\u0001\u0007\u0026\uffff\u0001\u0002",
            "\u0001\u0008\u0007\uffff\u0001\u0002\u0001\u0007\u002f\uffff"+
            "\u0001\u0009\u0020\uffff\u0001\u0007\u0026\uffff\u0001\u0002",
            "\u0001\u0002\u0001\u0007\u0050\uffff\u0001\u0007\u0026\uffff"+
            "\u0001\u0002",
            "\u0001\uffff",
            "",
            "\u0001\u000a",
            "\u0001\u0002\u0001\u0007\u0050\uffff\u0001\u0007\u0026\uffff"+
            "\u0001\u0002",
            "\u0001\u0002\u0001\u0007\u002f\uffff\u0001\u0009\u0020\uffff"+
            "\u0001\u0007\u0026\uffff\u0001\u0002"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA132_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA132_eotS),
    DFA132_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA132_eofS),
    DFA132_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA132_minS),
    DFA132_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA132_maxS),
    DFA132_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA132_acceptS),
    DFA132_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA132_specialS),
    DFA132_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA132_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA132_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA132 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 132;
    this.eot = IDPParser.DFA132_eot;
    this.eof = IDPParser.DFA132_eof;
    this.min = IDPParser.DFA132_min;
    this.max = IDPParser.DFA132_max;
    this.accept = IDPParser.DFA132_accept;
    this.special = IDPParser.DFA132_special;
    this.transition = IDPParser.DFA132_transition;
};


org.antlr.lang.extend(IDPParser.DFA132, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1832:155: (dateOutput= ruleDateCollectionSelectionClause | dateOutput= ruleTimestampCollectionSelectionClause )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA132_6 = input.LA(1);

                             
                            var index132_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred233_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 7;}

                             
                            input.seek(index132_6);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_132_132 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 132, _s, input);
        this.error(nvae_132_132);
        throw nvae_132_132;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA134_eotS:
        "\u0010\uffff",
    DFA134_eofS:
        "\u0010\uffff",
    DFA134_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA134_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA134_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff",
    DFA134_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA134_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0008\uffff\u0001\u0003"+
            "\u0001\u000d\u002f\uffff\u0001\u0002\u000a\uffff\u0001\u0004"+
            "\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009\u000c\uffff"+
            "\u0002\u000d\u0003\u000a\u0003\uffff\u0002\u0003",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA134_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA134_eotS),
    DFA134_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA134_eofS),
    DFA134_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA134_minS),
    DFA134_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA134_maxS),
    DFA134_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA134_acceptS),
    DFA134_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA134_specialS),
    DFA134_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA134_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA134_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA134 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 134;
    this.eot = IDPParser.DFA134_eot;
    this.eof = IDPParser.DFA134_eof;
    this.min = IDPParser.DFA134_min;
    this.max = IDPParser.DFA134_max;
    this.accept = IDPParser.DFA134_accept;
    this.special = IDPParser.DFA134_special;
    this.transition = IDPParser.DFA134_transition;
};


org.antlr.lang.extend(IDPParser.DFA134, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1834:1: ruleDateBetweenDateClause returns [value] : ( ( (dateOutput= ruleDateSelectionClause ) ( AND | TO ) (dateOutput= ruleDateSelectionClause ) ) | ( (dateOutput= ruleTimestampSelectionClause ) ( AND | TO ) (dateOutput= ruleTimestampSelectionClause ) ) );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA134_1 = input.LA(1);

                             
                            var index134_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA134_2 = input.LA(1);

                             
                            var index134_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA134_4 = input.LA(1);

                             
                            var index134_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA134_5 = input.LA(1);

                             
                            var index134_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA134_6 = input.LA(1);

                             
                            var index134_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA134_7 = input.LA(1);

                             
                            var index134_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA134_8 = input.LA(1);

                             
                            var index134_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA134_9 = input.LA(1);

                             
                            var index134_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA134_10 = input.LA(1);

                             
                            var index134_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred235_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index134_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_134_134 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 134, _s, input);
        this.error(nvae_134_134);
        throw nvae_134_134;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA136_eotS:
        "\u0010\uffff",
    DFA136_eofS:
        "\u0010\uffff",
    DFA136_minS:
        "\u0001\u0004\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA136_maxS:
        "\u0001\u0065\u0002\u0000\u0001\uffff\u0007\u0000\u0005\uffff",
    DFA136_acceptS:
        "\u0003\uffff\u0001\u0001\u0009\uffff\u0001\u0002\u0002\uffff",
    DFA136_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\uffff\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA136_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0008\uffff\u0001\u000d"+
            "\u0001\u0003\u002f\uffff\u0001\u0002\u000a\uffff\u0001\u0004"+
            "\u0001\u0005\u0001\u0006\u0001\u0008\u0001\u0009\u000c\uffff"+
            "\u0002\u0003\u0003\u000a\u0003\uffff\u0002\u000d",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA136_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA136_eotS),
    DFA136_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA136_eofS),
    DFA136_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA136_minS),
    DFA136_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA136_maxS),
    DFA136_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA136_acceptS),
    DFA136_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA136_specialS),
    DFA136_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA136_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA136_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA136 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 136;
    this.eot = IDPParser.DFA136_eot;
    this.eof = IDPParser.DFA136_eof;
    this.min = IDPParser.DFA136_min;
    this.max = IDPParser.DFA136_max;
    this.accept = IDPParser.DFA136_accept;
    this.special = IDPParser.DFA136_special;
    this.transition = IDPParser.DFA136_transition;
};


org.antlr.lang.extend(IDPParser.DFA136, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1879:9: ( (rightSelectionOutput= ruleTimestampSelectionClause ) | (rightSelectionOutput= ruleDateSelectionClause ) )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA136_1 = input.LA(1);

                             
                            var index136_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA136_2 = input.LA(1);

                             
                            var index136_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA136_4 = input.LA(1);

                             
                            var index136_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA136_5 = input.LA(1);

                             
                            var index136_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA136_6 = input.LA(1);

                             
                            var index136_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA136_7 = input.LA(1);

                             
                            var index136_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA136_8 = input.LA(1);

                             
                            var index136_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA136_9 = input.LA(1);

                             
                            var index136_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA136_10 = input.LA(1);

                             
                            var index136_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred241_IDP()) ) {s = 3;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index136_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_136_136 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 136, _s, input);
        this.error(nvae_136_136);
        throw nvae_136_136;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA139_eotS:
        "\u000b\uffff",
    DFA139_eofS:
        "\u0004\uffff\u0001\u000a\u0001\uffff\u0001\u0009\u0004\uffff",
    DFA139_minS:
        "\u0001\u0066\u0003\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0004"+
    "\uffff",
    DFA139_maxS:
        "\u0001\u006f\u0003\uffff\u0001\u00bf\u0001\uffff\u0001\u00bf\u0004"+
    "\uffff",
    DFA139_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\uffff\u0001"+
    "\u0004\u0001\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008",
    DFA139_specialS:
        "\u000b\uffff}>",
    DFA139_transitionS: [
            "\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005"+
            "\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a",
            "",
            "",
            "",
            "\u0001\u000a\u0001\uffff\u0001\u000a\u0003\uffff\u0002\u000a"+
            "\u0002\uffff\u0003\u000a\u0002\uffff\u0001\u000a\u0010\uffff"+
            "\u0002\u000a\u0005\uffff\u0001\u0003\u0014\uffff\u0001\u000a"+
            "\u000a\uffff\u0005\u000a\u0008\uffff\u0002\u000a\u0002\uffff"+
            "\u0005\u000a\u0002\uffff\u0003\u000a\u000a\uffff\u0005\u000a"+
            "\u0016\uffff\u0001\u000a\u0003\uffff\u0002\u000a\u0012\uffff"+
            "\u0005\u000a\u0002\uffff\u0001\u000a\u0003\uffff\u0004\u000a"+
            "\u000d\uffff\u0001\u000a",
            "",
            "\u0001\u0009\u0001\uffff\u0001\u0009\u0003\uffff\u0002\u0009"+
            "\u0002\uffff\u0003\u0009\u0002\uffff\u0001\u0009\u0010\uffff"+
            "\u0002\u0009\u0005\uffff\u0001\u0005\u0014\uffff\u0001\u0009"+
            "\u000a\uffff\u0005\u0009\u0008\uffff\u0002\u0009\u0002\uffff"+
            "\u0005\u0009\u0002\uffff\u0003\u0009\u000a\uffff\u0005\u0009"+
            "\u0016\uffff\u0001\u0009\u0003\uffff\u0002\u0009\u0012\uffff"+
            "\u0005\u0009\u0002\uffff\u0001\u0009\u0003\uffff\u0004\u0009"+
            "\u000d\uffff\u0001\u0009",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA139_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA139_eotS),
    DFA139_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA139_eofS),
    DFA139_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA139_minS),
    DFA139_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA139_maxS),
    DFA139_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA139_acceptS),
    DFA139_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA139_specialS),
    DFA139_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA139_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA139_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA139 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 139;
    this.eot = IDPParser.DFA139_eot;
    this.eof = IDPParser.DFA139_eof;
    this.min = IDPParser.DFA139_min;
    this.max = IDPParser.DFA139_max;
    this.accept = IDPParser.DFA139_accept;
    this.special = IDPParser.DFA139_special;
    this.transition = IDPParser.DFA139_transition;
};


org.antlr.lang.extend(IDPParser.DFA139, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1888:1: ruleNumericComparisonOnlyOption returns [value] : ( (a= GREATER_EQUAL_SIGN ) | (a= LESS_EQUAL_SIGN ) | ( (a= IS_EQUAL_OR_GREATER_THAN ) | (a= GREATER_THAN b= OR c= EQUALS ) ) | ( (a= IS_EQUAL_OR_LESS_THAN ) | (a= LESS_THAN b= OR c= EQUALS ) ) | (a= GREATER_SIGN ) | (a= LESS_SIGN ) | (a= ( IS_LESS_THAN | LESS_THAN ) ) | (a= ( IS_GREATER_THAN | GREATER_THAN ) ) );";
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA162_eotS:
        "\u002d\uffff",
    DFA162_eofS:
        "\u002d\uffff",
    DFA162_minS:
        "\u0001\u0004\u000c\u0000\u0007\uffff\u0014\u0000\u0005\uffff",
    DFA162_maxS:
        "\u0001\u00bf\u000c\u0000\u0007\uffff\u0014\u0000\u0005\uffff",
    DFA162_acceptS:
        "\u000d\uffff\u0001\u0002\u0002\uffff\u0001\u0003\u0017\uffff\u0001"+
    "\u0006\u0001\uffff\u0001\u0001\u0001\u0004\u0001\u0005",
    DFA162_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0007\uffff\u0001\u000c\u0001\u000d\u0001\u000e\u0001"+
    "\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001"+
    "\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001"+
    "\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0005\uffff}>",
    DFA162_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0028"+
            "\u0001\u0017\u0002\uffff\u0001\u000d\u0001\u0024\u0001\u0003"+
            "\u0002\uffff\u0001\u0010\u0010\uffff\u0001\u001d\u0001\u0023"+
            "\u001a\uffff\u0001\u0002\u000a\uffff\u0001\u0004\u0001\u0005"+
            "\u0001\u0006\u0001\u0008\u0001\u0009\u0008\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000b\u0001\u000c\u0003\u000a\u0002\uffff"+
            "\u0001\u0014\u0001\u0025\u0001\u0026\u000a\uffff\u0001\u0021"+
            "\u0001\u0022\u0001\u001e\u0001\u001f\u0001\u0020\u0016\uffff"+
            "\u0001\u0010\u0003\uffff\u0002\u0010\u0012\uffff\u0001\u0027"+
            "\u0001\u0015\u0001\u0016\u0001\u0027\u0001\u0015\u0002\uffff"+
            "\u0001\u001c\u0003\uffff\u0001\u001a\u0001\u001b\u0001\u0018"+
            "\u0001\u0019\u000d\uffff\u0001\u0028",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA162_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA162_eotS),
    DFA162_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA162_eofS),
    DFA162_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA162_minS),
    DFA162_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA162_maxS),
    DFA162_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA162_acceptS),
    DFA162_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA162_specialS),
    DFA162_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA162_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA162_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA162 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 162;
    this.eot = IDPParser.DFA162_eot;
    this.eof = IDPParser.DFA162_eof;
    this.min = IDPParser.DFA162_min;
    this.max = IDPParser.DFA162_max;
    this.accept = IDPParser.DFA162_accept;
    this.special = IDPParser.DFA162_special;
    this.transition = IDPParser.DFA162_transition;
};


org.antlr.lang.extend(IDPParser.DFA162, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2149:1: ruleConcatenateInputOptions returns [value] : (val= ruleTimestampSelectionClause | val= ruleTimeSelectionClause | val= ruleStringSelectionClause | val= ruleNumericSelectionClause | val= ruleDateSelectionClause | val= ruleTimespanSelectionClause );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA162_1 = input.LA(1);

                             
                            var index162_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA162_2 = input.LA(1);

                             
                            var index162_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred290_IDP()) ) {s = 16;}

                            else if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_2);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA162_3 = input.LA(1);

                             
                            var index162_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_3);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA162_4 = input.LA(1);

                             
                            var index162_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_4);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA162_5 = input.LA(1);

                             
                            var index162_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_5);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA162_6 = input.LA(1);

                             
                            var index162_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_6);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA162_7 = input.LA(1);

                             
                            var index162_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_7);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA162_8 = input.LA(1);

                             
                            var index162_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_8);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA162_9 = input.LA(1);

                             
                            var index162_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred289_IDP()) ) {s = 13;}

                            else if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_9);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA162_10 = input.LA(1);

                             
                            var index162_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_10);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA162_11 = input.LA(1);

                             
                            var index162_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_11);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA162_12 = input.LA(1);

                             
                            var index162_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred288_IDP()) ) {s = 42;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_12);
                            if ( s>=0 ) return s;
                            break;

                        case 12 : 
                            var LA162_20 = input.LA(1);

                             
                            var index162_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_20);
                            if ( s>=0 ) return s;
                            break;

                        case 13 : 
                            var LA162_21 = input.LA(1);

                             
                            var index162_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_21);
                            if ( s>=0 ) return s;
                            break;

                        case 14 : 
                            var LA162_22 = input.LA(1);

                             
                            var index162_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_22);
                            if ( s>=0 ) return s;
                            break;

                        case 15 : 
                            var LA162_23 = input.LA(1);

                             
                            var index162_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_23);
                            if ( s>=0 ) return s;
                            break;

                        case 16 : 
                            var LA162_24 = input.LA(1);

                             
                            var index162_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_24);
                            if ( s>=0 ) return s;
                            break;

                        case 17 : 
                            var LA162_25 = input.LA(1);

                             
                            var index162_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_25);
                            if ( s>=0 ) return s;
                            break;

                        case 18 : 
                            var LA162_26 = input.LA(1);

                             
                            var index162_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_26);
                            if ( s>=0 ) return s;
                            break;

                        case 19 : 
                            var LA162_27 = input.LA(1);

                             
                            var index162_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_27);
                            if ( s>=0 ) return s;
                            break;

                        case 20 : 
                            var LA162_28 = input.LA(1);

                             
                            var index162_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_28);
                            if ( s>=0 ) return s;
                            break;

                        case 21 : 
                            var LA162_29 = input.LA(1);

                             
                            var index162_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_29);
                            if ( s>=0 ) return s;
                            break;

                        case 22 : 
                            var LA162_30 = input.LA(1);

                             
                            var index162_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_30);
                            if ( s>=0 ) return s;
                            break;

                        case 23 : 
                            var LA162_31 = input.LA(1);

                             
                            var index162_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_31);
                            if ( s>=0 ) return s;
                            break;

                        case 24 : 
                            var LA162_32 = input.LA(1);

                             
                            var index162_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_32);
                            if ( s>=0 ) return s;
                            break;

                        case 25 : 
                            var LA162_33 = input.LA(1);

                             
                            var index162_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_33);
                            if ( s>=0 ) return s;
                            break;

                        case 26 : 
                            var LA162_34 = input.LA(1);

                             
                            var index162_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_34);
                            if ( s>=0 ) return s;
                            break;

                        case 27 : 
                            var LA162_35 = input.LA(1);

                             
                            var index162_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_35);
                            if ( s>=0 ) return s;
                            break;

                        case 28 : 
                            var LA162_36 = input.LA(1);

                             
                            var index162_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_36);
                            if ( s>=0 ) return s;
                            break;

                        case 29 : 
                            var LA162_37 = input.LA(1);

                             
                            var index162_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_37);
                            if ( s>=0 ) return s;
                            break;

                        case 30 : 
                            var LA162_38 = input.LA(1);

                             
                            var index162_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred292_IDP()) ) {s = 44;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_38);
                            if ( s>=0 ) return s;
                            break;

                        case 31 : 
                            var LA162_39 = input.LA(1);

                             
                            var index162_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred291_IDP()) ) {s = 43;}

                            else if ( (this.setPred()) &&(true) ) {s = 40;}

                             
                            input.seek(index162_39);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_162_162 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 162, _s, input);
        this.error(nvae_162_162);
        throw nvae_162_162;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA206_eotS:
        "\u0016\uffff",
    DFA206_eofS:
        "\u0016\uffff",
    DFA206_minS:
        "\u0001\u0004\u0013\uffff\u0001\u0000\u0001\uffff",
    DFA206_maxS:
        "\u0001\u00b1\u0013\uffff\u0001\u0000\u0001\uffff",
    DFA206_acceptS:
        "\u0001\uffff\u0001\u0001\u0013\uffff\u0001\u0002",
    DFA206_specialS:
        "\u0014\uffff\u0001\u0000\u0001\uffff}>",
    DFA206_transitionS: [
            "\u0001\u0014\u0006\uffff\u0001\u0001\u0018\uffff\u0002\u0001"+
            "\u001a\uffff\u0001\u0001\u000c\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0001\u0013\uffff\u0001\u0001\u000c\uffff\u0005\u0001"+
            "\u002e\uffff\u0005\u0001\u0002\uffff\u0001\u0001\u0003\uffff"+
            "\u0004\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA206_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA206_eotS),
    DFA206_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA206_eofS),
    DFA206_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA206_minS),
    DFA206_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA206_maxS),
    DFA206_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA206_acceptS),
    DFA206_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA206_specialS),
    DFA206_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA206_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA206_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA206 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 206;
    this.eot = IDPParser.DFA206_eot;
    this.eof = IDPParser.DFA206_eof;
    this.min = IDPParser.DFA206_min;
    this.max = IDPParser.DFA206_max;
    this.accept = IDPParser.DFA206_accept;
    this.special = IDPParser.DFA206_special;
    this.transition = IDPParser.DFA206_transition;
};


org.antlr.lang.extend(IDPParser.DFA206, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2583:33: (selectionClauseOutput= ruleNumericSelectionClause | LROUNDB selectionClauseOutput= ruleNumericSelectionClause RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA206_20 = input.LA(1);

                             
                            var index206_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred361_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 21;}

                             
                            input.seek(index206_20);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_206_206 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 206, _s, input);
        this.error(nvae_206_206);
        throw nvae_206_206;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA208_eotS:
        "\u0019\uffff",
    DFA208_eofS:
        "\u0019\uffff",
    DFA208_minS:
        "\u0001\u0004\u0001\u0000\u0001\uffff\u0002\u0000\u0002\uffff\u0008"+
    "\u0000\u0008\uffff\u0001\u0000\u0001\uffff",
    DFA208_maxS:
        "\u0001\u00b1\u0001\u0000\u0001\uffff\u0002\u0000\u0002\uffff\u0008"+
    "\u0000\u0008\uffff\u0001\u0000\u0001\uffff",
    DFA208_acceptS:
        "\u0002\uffff\u0001\u0001\u000c\uffff\u0001\u0002\u0009\uffff",
    DFA208_specialS:
        "\u0001\uffff\u0001\u0000\u0001\uffff\u0001\u0001\u0001\u0002\u0002"+
    "\uffff\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001"+
    "\u0008\u0001\u0009\u0001\u000a\u0008\uffff\u0001\u000b\u0001\uffff}>",
    DFA208_transitionS: [
            "\u0001\u000f\u0006\uffff\u0001\u000f\u0018\uffff\u0001\u000e"+
            "\u0001\u0017\u001a\uffff\u0001\u0001\u000c\uffff\u0001\u000a"+
            "\u0001\uffff\u0001\u000c\u0013\uffff\u0001\u000f\u000c\uffff"+
            "\u0005\u000f\u0014\uffff\u0001\u0002\u0019\uffff\u0001\u000f"+
            "\u0001\u0003\u0001\u0004\u0001\u000f\u0001\u0003\u0002\u0002"+
            "\u0001\u000d\u0003\uffff\u0001\u0009\u0001\u000b\u0001\u0007"+
            "\u0001\u0008",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA208_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA208_eotS),
    DFA208_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA208_eofS),
    DFA208_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA208_minS),
    DFA208_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA208_maxS),
    DFA208_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA208_acceptS),
    DFA208_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA208_specialS),
    DFA208_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA208_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA208_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA208 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 208;
    this.eot = IDPParser.DFA208_eot;
    this.eof = IDPParser.DFA208_eof;
    this.min = IDPParser.DFA208_min;
    this.max = IDPParser.DFA208_max;
    this.accept = IDPParser.DFA208_accept;
    this.special = IDPParser.DFA208_special;
    this.transition = IDPParser.DFA208_transition;
};


org.antlr.lang.extend(IDPParser.DFA208, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2613:25: ( (numberOutput= ruleNumericCollectionSelectionClause ) | (numberOutput= ruleNumericClause ) ( ( SEMICOLON numberOutput= ruleNumericClause )* ) )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA208_1 = input.LA(1);

                             
                            var index208_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA208_3 = input.LA(1);

                             
                            var index208_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_3);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA208_4 = input.LA(1);

                             
                            var index208_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA208_7 = input.LA(1);

                             
                            var index208_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_7);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA208_8 = input.LA(1);

                             
                            var index208_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_8);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA208_9 = input.LA(1);

                             
                            var index208_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_9);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA208_10 = input.LA(1);

                             
                            var index208_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_10);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA208_11 = input.LA(1);

                             
                            var index208_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_11);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA208_12 = input.LA(1);

                             
                            var index208_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_12);
                            if ( s>=0 ) return s;
                            break;

                        case 9 : 
                            var LA208_13 = input.LA(1);

                             
                            var index208_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_13);
                            if ( s>=0 ) return s;
                            break;

                        case 10 : 
                            var LA208_14 = input.LA(1);

                             
                            var index208_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_14);
                            if ( s>=0 ) return s;
                            break;

                        case 11 : 
                            var LA208_23 = input.LA(1);

                             
                            var index208_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred367_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 15;}

                             
                            input.seek(index208_23);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_208_208 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 208, _s, input);
        this.error(nvae_208_208);
        throw nvae_208_208;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA219_eotS:
        "\u0020\uffff",
    DFA219_eofS:
        "\u0020\uffff",
    DFA219_minS:
        "\u0001\u0024\u0001\u0041\u0001\uffff\u0002\u0007\u0001\u000a\u0001"+
    "\uffff\u0006\u0004\u0001\uffff\u0001\u0089\u0001\u000a\u0002\u0007\u0001"+
    "\u000a\u0001\u0040\u0002\u0004\u0001\u000a\u0001\u0089\u0001\u000a\u0002"+
    "\u0007\u0002\u000a\u0001\u0089\u0002\u000a",
    DFA219_maxS:
        "\u0001\u00c1\u0001\u00a8\u0001\uffff\u0003\u00c0\u0001\uffff\u0006"+
    "\u00c0\u0001\uffff\u0001\u0089\u0008\u00c0\u0001\u0089\u0005\u00c0\u0001"+
    "\u0089\u0002\u00c0",
    DFA219_acceptS:
        "\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0002\u0006\uffff\u0001"+
    "\u0003\u0012\uffff",
    DFA219_specialS:
        "\u0020\uffff}>",
    DFA219_transitionS: [
            "\u0002\u0006\u001a\uffff\u0001\u0001\u0002\u0002\u000a\uffff"+
            "\u0001\u000a\u0001\uffff\u0001\u000c\u000a\uffff\u0002\u0002"+
            "\u0005\uffff\u0002\u0002\u0025\uffff\u0001\u0002\u0001\u0005"+
            "\u0007\uffff\u0002\u0002\u0011\uffff\u0001\u0003\u0001\u0004"+
            "\u0001\uffff\u0001\u0003\u0003\u0006\u0003\uffff\u0001\u0009"+
            "\u0001\u000b\u0001\u0007\u0001\u0008\u000e\uffff\u0002\u000d",
            "\u0001\u0002\u0018\uffff\u0001\u0002\u0006\uffff\u0001\u0002"+
            "\u0026\uffff\u0001\u0002\u0008\uffff\u0002\u0002\u0015\uffff"+
            "\u0001\u0006",
            "",
            "\u0001\u000e\u0002\uffff\u0001\u000d\u0001\u0006\u0002\uffff"+
            "\u0003\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0001\u0002"+
            "\u002a\uffff\u0001\u000f\u0001\u0002\u0018\uffff\u0001\u0002"+
            "\u0006\uffff\u0001\u0002\u0026\uffff\u0001\u0002\u0008\uffff"+
            "\u0002\u0002\u0015\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u000e\u0002\uffff\u0001\u000d\u0001\u0006\u0002\uffff"+
            "\u0003\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0001\u0002"+
            "\u002a\uffff\u0001\u000f\u0001\u0002\u0018\uffff\u0001\u0002"+
            "\u0006\uffff\u0001\u0002\u0026\uffff\u0001\u0002\u0008\uffff"+
            "\u0002\u0002\u0015\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u0002\uffff\u0003\u0002\u0002\uffff"+
            "\u0001\u0002\u0001\uffff\u0001\u0002\u002b\uffff\u0001\u0002"+
            "\u0018\uffff\u0001\u0002\u0006\uffff\u0001\u0002\u0026\uffff"+
            "\u0001\u0002\u0008\uffff\u0002\u0002\u0015\uffff\u0001\u0006"+
            "\u0017\uffff\u0001\u000d",
            "",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u0002\uffff\u0001\u0014\u0038\uffff\u0001\u0006"+
            "\u0048\uffff\u0001\u0012\u001a\uffff\u0001\u0010\u0001\u0011"+
            "\u0001\uffff\u0001\u0010\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u0002\uffff\u0001\u0015\u0038\uffff\u0001\u0006"+
            "\u0048\uffff\u0001\u0012\u001a\uffff\u0001\u0010\u0001\u0011"+
            "\u0001\uffff\u0001\u0010\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "",
            "\u0001\u0016",
            "\u0001\u000d\u0001\u0006\u0002\uffff\u0003\u0002\u0002\uffff"+
            "\u0001\u0002\u0001\uffff\u0001\u0002\u002b\uffff\u0001\u0002"+
            "\u0018\uffff\u0001\u0002\u0006\uffff\u0001\u0002\u0026\uffff"+
            "\u0001\u0002\u0008\uffff\u0002\u0002\u0015\uffff\u0001\u0006"+
            "\u0017\uffff\u0001\u000d",
            "\u0001\u0017\u0002\uffff\u0001\u000d\u0001\u0006\u0034\uffff"+
            "\u0001\u0018\u0067\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0017\u0002\uffff\u0001\u000d\u0001\u0006\u0034\uffff"+
            "\u0001\u0018\u0067\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u009c\uffff\u0001\u0006\u0017\uffff"+
            "\u0001\u000d",
            "\u0001\u0006\u0048\uffff\u0001\u001b\u001a\uffff\u0001\u0019"+
            "\u0001\u001a\u0001\uffff\u0001\u0019\u0001\u0006\u0017\uffff"+
            "\u0001\u000d",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u0013\u003b\uffff\u0001\u0006\u0048\uffff\u0001\u0012"+
            "\u001a\uffff\u0001\u0010\u0001\u0011\u0001\uffff\u0001\u0010"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u0002\uffff\u0003\u0002\u0002\uffff"+
            "\u0001\u0002\u0001\uffff\u0001\u0002\u002a\uffff\u0001\u000f"+
            "\u0001\u0002\u0018\uffff\u0001\u0002\u0006\uffff\u0001\u0002"+
            "\u0026\uffff\u0001\u0002\u0008\uffff\u0002\u0002\u0015\uffff"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u001c",
            "\u0001\u000d\u0001\u0006\u009c\uffff\u0001\u0006\u0017\uffff"+
            "\u0001\u000d",
            "\u0001\u001d\u0002\uffff\u0001\u000d\u0001\u0006\u0034\uffff"+
            "\u0001\u001e\u0067\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u001d\u0002\uffff\u0001\u000d\u0001\u0006\u0034\uffff"+
            "\u0001\u001e\u0067\uffff\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u009c\uffff\u0001\u0006\u0017\uffff"+
            "\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u0034\uffff\u0001\u0018\u0067\uffff"+
            "\u0001\u0006\u0017\uffff\u0001\u000d",
            "\u0001\u001f",
            "\u0001\u000d\u0001\u0006\u009c\uffff\u0001\u0006\u0017\uffff"+
            "\u0001\u000d",
            "\u0001\u000d\u0001\u0006\u0034\uffff\u0001\u001e\u0067\uffff"+
            "\u0001\u0006\u0017\uffff\u0001\u000d"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA219_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA219_eotS),
    DFA219_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA219_eofS),
    DFA219_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA219_minS),
    DFA219_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA219_maxS),
    DFA219_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA219_acceptS),
    DFA219_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA219_specialS),
    DFA219_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA219_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA219_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA219 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 219;
    this.eot = IDPParser.DFA219_eot;
    this.eof = IDPParser.DFA219_eof;
    this.min = IDPParser.DFA219_min;
    this.max = IDPParser.DFA219_max;
    this.accept = IDPParser.DFA219_accept;
    this.special = IDPParser.DFA219_special;
    this.transition = IDPParser.DFA219_transition;
};


org.antlr.lang.extend(IDPParser.DFA219, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2711:33: (compoundSelectionOutput= ruleCollectionSelection | compoundSelectionOutput= ruleNumericCollection | compoundSelectionOutput= ruleTimespanCollection )";
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA231_eotS:
        "\u000e\uffff",
    DFA231_eofS:
        "\u000e\uffff",
    DFA231_minS:
        "\u0001\u0004\u0003\uffff\u0006\u0000\u0004\uffff",
    DFA231_maxS:
        "\u0001\u00bf\u0003\uffff\u0006\u0000\u0004\uffff",
    DFA231_acceptS:
        "\u0001\uffff\u0001\u0001\u000a\uffff\u0001\u0003\u0001\u0002",
    DFA231_specialS:
        "\u0004\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0004\uffff}>",
    DFA231_transitionS: [
            "\u0001\u000c\u0005\uffff\u0001\u0001\u0035\uffff\u0001\u0001"+
            "\u000c\uffff\u0001\u0007\u0001\uffff\u0001\u0009\u0054\uffff"+
            "\u0002\u0001\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0006"+
            "\u0001\u0008\u0001\u0004\u0001\u0005\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA231_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA231_eotS),
    DFA231_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA231_eofS),
    DFA231_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA231_minS),
    DFA231_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA231_maxS),
    DFA231_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA231_acceptS),
    DFA231_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA231_specialS),
    DFA231_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA231_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA231_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA231 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 231;
    this.eot = IDPParser.DFA231_eot;
    this.eof = IDPParser.DFA231_eof;
    this.min = IDPParser.DFA231_min;
    this.max = IDPParser.DFA231_max;
    this.accept = IDPParser.DFA231_accept;
    this.special = IDPParser.DFA231_special;
    this.transition = IDPParser.DFA231_transition;
};


org.antlr.lang.extend(IDPParser.DFA231, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2860:1: ruleTimespanBaseSelection returns [value] : (selectionOutput= ruleBaseTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA231_4 = input.LA(1);

                             
                            var index231_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_4);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA231_5 = input.LA(1);

                             
                            var index231_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_5);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA231_6 = input.LA(1);

                             
                            var index231_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_6);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA231_7 = input.LA(1);

                             
                            var index231_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_7);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA231_8 = input.LA(1);

                             
                            var index231_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_8);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA231_9 = input.LA(1);

                             
                            var index231_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred402_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred403_IDP()) ) {s = 13;}

                             
                            input.seek(index231_9);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_231_231 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 231, _s, input);
        this.error(nvae_231_231);
        throw nvae_231_231;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA232_eotS:
        "\u000e\uffff",
    DFA232_eofS:
        "\u000e\uffff",
    DFA232_minS:
        "\u0001\u0004\u0003\uffff\u0006\u0000\u0004\uffff",
    DFA232_maxS:
        "\u0001\u00bf\u0003\uffff\u0006\u0000\u0004\uffff",
    DFA232_acceptS:
        "\u0001\uffff\u0001\u0001\u000a\uffff\u0001\u0003\u0001\u0002",
    DFA232_specialS:
        "\u0004\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0004\uffff}>",
    DFA232_transitionS: [
            "\u0001\u000c\u0005\uffff\u0001\u0001\u0035\uffff\u0001\u0001"+
            "\u000c\uffff\u0001\u0007\u0001\uffff\u0001\u0009\u0054\uffff"+
            "\u0002\u0001\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0006"+
            "\u0001\u0008\u0001\u0004\u0001\u0005\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA232_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA232_eotS),
    DFA232_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA232_eofS),
    DFA232_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA232_minS),
    DFA232_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA232_maxS),
    DFA232_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA232_acceptS),
    DFA232_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA232_specialS),
    DFA232_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA232_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA232_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA232 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 232;
    this.eot = IDPParser.DFA232_eot;
    this.eof = IDPParser.DFA232_eof;
    this.min = IDPParser.DFA232_min;
    this.max = IDPParser.DFA232_max;
    this.accept = IDPParser.DFA232_accept;
    this.special = IDPParser.DFA232_special;
    this.transition = IDPParser.DFA232_transition;
};


org.antlr.lang.extend(IDPParser.DFA232, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2870:1: ruleTimespanForDateBaseSelection returns [value] : (selectionOutput= ruleBaseForDateTimespan | selectionOutput= ruleCompoundTimespanSelection | selectionOutput= ruleTimeSpanFromTimestampSubtractionWithBrackets );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA232_4 = input.LA(1);

                             
                            var index232_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_4);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA232_5 = input.LA(1);

                             
                            var index232_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_5);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA232_6 = input.LA(1);

                             
                            var index232_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_6);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA232_7 = input.LA(1);

                             
                            var index232_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_7);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA232_8 = input.LA(1);

                             
                            var index232_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_8);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA232_9 = input.LA(1);

                             
                            var index232_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred404_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(this.synpred405_IDP()) ) {s = 13;}

                             
                            input.seek(index232_9);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_232_232 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 232, _s, input);
        this.error(nvae_232_232);
        throw nvae_232_232;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA235_eotS:
        "\u0023\uffff",
    DFA235_eofS:
        "\u0023\uffff",
    DFA235_minS:
        "\u0001\u0004\u0001\uffff\u0001\u0000\u0003\uffff\u0001\u0000\u0002"+
    "\uffff\u0002\u0000\u0018\uffff",
    DFA235_maxS:
        "\u0001\u00bf\u0001\uffff\u0001\u0000\u0003\uffff\u0001\u0000\u0002"+
    "\uffff\u0002\u0000\u0018\uffff",
    DFA235_acceptS:
        "\u0001\uffff\u0001\u0001\u000e\uffff\u0001\u0002\u0012\uffff",
    DFA235_specialS:
        "\u0002\uffff\u0001\u0000\u0003\uffff\u0001\u0001\u0002\uffff\u0001"+
    "\u0002\u0001\u0003\u0018\uffff}>",
    DFA235_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0010"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0010\u001a\uffff"+
            "\u0001\u0002\u000a\uffff\u0002\u0001\u0001\u0006\u0001\u0001"+
            "\u0001\u0009\u000c\uffff\u0005\u0001\u0002\uffff\u0001\u0010"+
            "\u0002\u0001\u000a\uffff\u0005\u0010\u002e\uffff\u0005\u0010"+
            "\u0002\uffff\u0001\u0010\u0003\uffff\u0004\u0010\u000d\uffff"+
            "\u0001\u0010",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA235_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA235_eotS),
    DFA235_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA235_eofS),
    DFA235_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA235_minS),
    DFA235_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA235_maxS),
    DFA235_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA235_acceptS),
    DFA235_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA235_specialS),
    DFA235_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA235_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA235_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA235 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 235;
    this.eot = IDPParser.DFA235_eot;
    this.eof = IDPParser.DFA235_eof;
    this.min = IDPParser.DFA235_min;
    this.max = IDPParser.DFA235_max;
    this.accept = IDPParser.DFA235_accept;
    this.special = IDPParser.DFA235_special;
    this.transition = IDPParser.DFA235_transition;
};


org.antlr.lang.extend(IDPParser.DFA235, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2925:33: (selectionOutput= ruleTimeSpanFromTimestampSubtraction | selectionOutput= ruleTimespanForDateArithmeticMultDiv )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA235_2 = input.LA(1);

                             
                            var index235_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred410_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index235_2);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA235_6 = input.LA(1);

                             
                            var index235_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred410_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index235_6);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA235_9 = input.LA(1);

                             
                            var index235_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred410_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index235_9);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA235_10 = input.LA(1);

                             
                            var index235_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred410_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index235_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_235_235 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 235, _s, input);
        this.error(nvae_235_235);
        throw nvae_235_235;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA241_eotS:
        "\u0023\uffff",
    DFA241_eofS:
        "\u0023\uffff",
    DFA241_minS:
        "\u0001\u0004\u0001\uffff\u0001\u0000\u0003\uffff\u0001\u0000\u0002"+
    "\uffff\u0002\u0000\u0018\uffff",
    DFA241_maxS:
        "\u0001\u00bf\u0001\uffff\u0001\u0000\u0003\uffff\u0001\u0000\u0002"+
    "\uffff\u0002\u0000\u0018\uffff",
    DFA241_acceptS:
        "\u0001\uffff\u0001\u0001\u000e\uffff\u0001\u0002\u0012\uffff",
    DFA241_specialS:
        "\u0002\uffff\u0001\u0000\u0003\uffff\u0001\u0001\u0002\uffff\u0001"+
    "\u0002\u0001\u0003\u0018\uffff}>",
    DFA241_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0010"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0010\u001a\uffff"+
            "\u0001\u0002\u000a\uffff\u0002\u0001\u0001\u0006\u0001\u0001"+
            "\u0001\u0009\u000c\uffff\u0005\u0001\u0002\uffff\u0001\u0010"+
            "\u0002\u0001\u000a\uffff\u0005\u0010\u002e\uffff\u0005\u0010"+
            "\u0002\uffff\u0001\u0010\u0003\uffff\u0004\u0010\u000d\uffff"+
            "\u0001\u0010",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA241_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA241_eotS),
    DFA241_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA241_eofS),
    DFA241_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA241_minS),
    DFA241_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA241_maxS),
    DFA241_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA241_acceptS),
    DFA241_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA241_specialS),
    DFA241_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA241_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA241_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA241 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 241;
    this.eot = IDPParser.DFA241_eot;
    this.eof = IDPParser.DFA241_eof;
    this.min = IDPParser.DFA241_min;
    this.max = IDPParser.DFA241_max;
    this.accept = IDPParser.DFA241_accept;
    this.special = IDPParser.DFA241_special;
    this.transition = IDPParser.DFA241_transition;
};


org.antlr.lang.extend(IDPParser.DFA241, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2967:33: (selectionOutput= ruleTimespanFromTimestampArithmeticSubtraction | selectionOutput= ruleTimespanFromTimestampArithmeticMultDiv )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA241_2 = input.LA(1);

                             
                            var index241_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred417_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index241_2);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA241_6 = input.LA(1);

                             
                            var index241_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred417_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index241_6);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA241_9 = input.LA(1);

                             
                            var index241_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred417_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index241_9);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA241_10 = input.LA(1);

                             
                            var index241_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred417_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 16;}

                             
                            input.seek(index241_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_241_241 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 241, _s, input);
        this.error(nvae_241_241);
        throw nvae_241_241;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA242_eotS:
        "\u0020\uffff",
    DFA242_eofS:
        "\u0020\uffff",
    DFA242_minS:
        "\u0001\u0004\u0001\u0000\u0003\uffff\u0001\u0000\u0002\uffff\u0002"+
    "\u0000\u0016\uffff",
    DFA242_maxS:
        "\u0001\u00bf\u0001\u0000\u0003\uffff\u0001\u0000\u0002\uffff\u0002"+
    "\u0000\u0016\uffff",
    DFA242_acceptS:
        "\u0002\uffff\u0001\u0001\u000a\uffff\u0001\u0002\u0012\uffff",
    DFA242_specialS:
        "\u0001\uffff\u0001\u0000\u0003\uffff\u0001\u0001\u0002\uffff\u0001"+
    "\u0002\u0001\u0003\u0016\uffff}>",
    DFA242_transitionS: [
            "\u0001\u0009\u0001\uffff\u0001\u0002\u0003\uffff\u0002\u000d"+
            "\u0003\uffff\u0001\u0002\u0014\uffff\u0002\u000d\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0002\u0002\u0001\u0005\u0001\u0002"+
            "\u0001\u0008\u000e\uffff\u0003\u0002\u0002\uffff\u0001\u000d"+
            "\u0002\u0002\u000a\uffff\u0005\u000d\u002e\uffff\u0005\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0004\u000d\u000d\uffff"+
            "\u0001\u000d",
            "\u0001\uffff",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA242_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA242_eotS),
    DFA242_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA242_eofS),
    DFA242_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA242_minS),
    DFA242_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA242_maxS),
    DFA242_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA242_acceptS),
    DFA242_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA242_specialS),
    DFA242_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA242_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA242_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA242 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 242;
    this.eot = IDPParser.DFA242_eot;
    this.eof = IDPParser.DFA242_eof;
    this.min = IDPParser.DFA242_min;
    this.max = IDPParser.DFA242_max;
    this.accept = IDPParser.DFA242_accept;
    this.special = IDPParser.DFA242_special;
    this.transition = IDPParser.DFA242_transition;
};


org.antlr.lang.extend(IDPParser.DFA242, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2973:33: (selectionOutput= ruleTimeSpanFromDateSubtraction | selectionOutput= ruleTimespanArithmeticForDateMultDiv )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA242_1 = input.LA(1);

                             
                            var index242_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred418_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index242_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA242_5 = input.LA(1);

                             
                            var index242_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred418_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index242_5);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA242_8 = input.LA(1);

                             
                            var index242_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred418_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index242_8);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA242_9 = input.LA(1);

                             
                            var index242_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred418_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index242_9);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_242_242 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 242, _s, input);
        this.error(nvae_242_242);
        throw nvae_242_242;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA243_eotS:
        "\u0019\uffff",
    DFA243_eofS:
        "\u0019\uffff",
    DFA243_minS:
        "\u0001\u0004\u0001\u0000\u0017\uffff",
    DFA243_maxS:
        "\u0001\u00bf\u0001\u0000\u0017\uffff",
    DFA243_acceptS:
        "\u0002\uffff\u0001\u0002\u0015\uffff\u0001\u0001",
    DFA243_specialS:
        "\u0001\uffff\u0001\u0000\u0017\uffff}>",
    DFA243_transitionS: [
            "\u0001\u0001\u0005\uffff\u0002\u0002\u0018\uffff\u0002\u0002"+
            "\u001a\uffff\u0001\u0002\u000c\uffff\u0001\u0002\u0001\uffff"+
            "\u0001\u0002\u0013\uffff\u0001\u0002\u000c\uffff\u0005\u0002"+
            "\u002e\uffff\u0005\u0002\u0002\uffff\u0001\u0002\u0003\uffff"+
            "\u0004\u0002\u000d\uffff\u0001\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA243_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA243_eotS),
    DFA243_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA243_eofS),
    DFA243_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA243_minS),
    DFA243_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA243_maxS),
    DFA243_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA243_acceptS),
    DFA243_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA243_specialS),
    DFA243_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA243_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA243_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA243 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 243;
    this.eot = IDPParser.DFA243_eot;
    this.eof = IDPParser.DFA243_eof;
    this.min = IDPParser.DFA243_min;
    this.max = IDPParser.DFA243_max;
    this.accept = IDPParser.DFA243_accept;
    this.special = IDPParser.DFA243_special;
    this.transition = IDPParser.DFA243_transition;
};


org.antlr.lang.extend(IDPParser.DFA243, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2975:33: (selectionOutput= ruleTimeSpanFromDateSubtractionWithBrackets | selectionOutput= ruleTimespanArithmeticForDateMultDiv )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA243_1 = input.LA(1);

                             
                            var index243_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred419_IDP()) ) {s = 24;}

                            else if ( (this.setPred()) &&(true) ) {s = 2;}

                             
                            input.seek(index243_1);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_243_243 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 243, _s, input);
        this.error(nvae_243_243);
        throw nvae_243_243;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA247_eotS:
        "\u0045\uffff",
    DFA247_eofS:
        "\u0045\uffff",
    DFA247_minS:
        "\u0001\u0004\u0002\u00ac\u0001\uffff\u0006\u0004\u0001\u000a\u0001"+
    "\uffff\u0002\u0007\u0001\u000a\u0006\u0004\u0001\u0024\u0002\u0004\u0001"+
    "\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001\u0040\u0002\u0004\u0002"+
    "\u0007\u0001\u000a\u0006\u0004\u0001\u000a\u0001\u0089\u0001\u000a\u0002"+
    "\u0007\u0001\u000a\u0001\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001"+
    "\u0040\u0002\u0004\u0001\u000a\u0001\u0089\u0002\u000a\u0001\u0089\u0001"+
    "\u000a\u0002\u0007\u0003\u000a\u0001\u0089\u0002\u000a",
    DFA247_maxS:
        "\u0001\u00bf\u0002\u00be\u0001\uffff\u0006\u00c1\u0001\u000b\u0001"+
    "\uffff\u0009\u00c0\u0003\u00c1\u0001\u0089\u0011\u00c0\u0001\u0089\u0004"+
    "\u00c0\u0001\u0089\u0008\u00c0\u0001\u0089\u0002\u00c0\u0001\u0089\u0006"+
    "\u00c0\u0001\u0089\u0002\u00c0",
    DFA247_acceptS:
        "\u0003\uffff\u0001\u0002\u0007\uffff\u0001\u0001\u0039\uffff",
    DFA247_specialS:
        "\u0045\uffff}>",
    DFA247_transitionS: [
            "\u0001\u0003\u0005\uffff\u0001\u0003\u0001\u000b\u0018\uffff"+
            "\u0002\u000b\u001a\uffff\u0001\u000a\u000c\uffff\u0001\u0007"+
            "\u0001\uffff\u0001\u0009\u0013\uffff\u0001\u000b\u000c\uffff"+
            "\u0005\u000b\u002e\uffff\u0001\u000b\u0001\u0001\u0001\u0002"+
            "\u0001\u000b\u0001\u0001\u0002\uffff\u0001\u000b\u0003\uffff"+
            "\u0001\u0006\u0001\u0008\u0001\u0004\u0001\u0005\u000d\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u000e\uffff\u0004\u0003",
            "\u0001\u000b\u000e\uffff\u0004\u0003",
            "",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0016\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0017\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0003\u0001\u000b",
            "",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001e\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001f\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0002\u000b\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0026"+
            "\u0001\uffff\u0001\u0028\u0039\uffff\u0001\u0022\u001a\uffff"+
            "\u0001\u0020\u0001\u0021\u0001\uffff\u0001\u0020\u0003\u000b"+
            "\u0003\uffff\u0001\u0025\u0001\u0027\u0001\u0023\u0001\u0024"+
            "\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0029",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u002e\u001a\uffff\u0001\u002c"+
            "\u0001\u002d\u0001\uffff\u0001\u002c\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0035\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0036\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0019\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0037",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003a",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u003f\u001a\uffff\u0001\u003d"+
            "\u0001\u003e\u0001\uffff\u0001\u003d\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u002b\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0040",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0030\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0041",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0039\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u003c\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0044",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0043\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA247_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA247_eotS),
    DFA247_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA247_eofS),
    DFA247_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA247_minS),
    DFA247_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA247_maxS),
    DFA247_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA247_acceptS),
    DFA247_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA247_specialS),
    DFA247_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA247_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA247_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA247 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 247;
    this.eot = IDPParser.DFA247_eot;
    this.eof = IDPParser.DFA247_eof;
    this.min = IDPParser.DFA247_min;
    this.max = IDPParser.DFA247_max;
    this.accept = IDPParser.DFA247_accept;
    this.special = IDPParser.DFA247_special;
    this.transition = IDPParser.DFA247_transition;
};


org.antlr.lang.extend(IDPParser.DFA247, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "()* loopback of 2998:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*";
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA249_eotS:
        "\u0045\uffff",
    DFA249_eofS:
        "\u0045\uffff",
    DFA249_minS:
        "\u0001\u0004\u0002\u00ac\u0001\uffff\u0006\u0004\u0001\u000a\u0001"+
    "\uffff\u0002\u0007\u0001\u000a\u0006\u0004\u0001\u0024\u0002\u0004\u0001"+
    "\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001\u0040\u0002\u0004\u0002"+
    "\u0007\u0001\u000a\u0006\u0004\u0001\u000a\u0001\u0089\u0001\u000a\u0002"+
    "\u0007\u0001\u000a\u0001\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001"+
    "\u0040\u0002\u0004\u0001\u000a\u0001\u0089\u0002\u000a\u0001\u0089\u0001"+
    "\u000a\u0002\u0007\u0003\u000a\u0001\u0089\u0002\u000a",
    DFA249_maxS:
        "\u0001\u00bf\u0002\u00be\u0001\uffff\u0006\u00c1\u0001\u000b\u0001"+
    "\uffff\u0009\u00c0\u0003\u00c1\u0001\u0089\u0011\u00c0\u0001\u0089\u0004"+
    "\u00c0\u0001\u0089\u0008\u00c0\u0001\u0089\u0002\u00c0\u0001\u0089\u0006"+
    "\u00c0\u0001\u0089\u0002\u00c0",
    DFA249_acceptS:
        "\u0003\uffff\u0001\u0002\u0007\uffff\u0001\u0001\u0039\uffff",
    DFA249_specialS:
        "\u0045\uffff}>",
    DFA249_transitionS: [
            "\u0001\u0003\u0005\uffff\u0001\u0003\u0001\u000b\u0018\uffff"+
            "\u0002\u000b\u001a\uffff\u0001\u000a\u000c\uffff\u0001\u0007"+
            "\u0001\uffff\u0001\u0009\u0013\uffff\u0001\u000b\u000c\uffff"+
            "\u0005\u000b\u002e\uffff\u0001\u000b\u0001\u0001\u0001\u0002"+
            "\u0001\u000b\u0001\u0001\u0002\uffff\u0001\u000b\u0003\uffff"+
            "\u0001\u0006\u0001\u0008\u0001\u0004\u0001\u0005\u000d\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u000b\uffff\u0007\u0003",
            "\u0001\u000b\u000b\uffff\u0007\u0003",
            "",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0016\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0017\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0003\u0001\u000b",
            "",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001e\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001f\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0002\u000b\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0026"+
            "\u0001\uffff\u0001\u0028\u0039\uffff\u0001\u0022\u001a\uffff"+
            "\u0001\u0020\u0001\u0021\u0001\uffff\u0001\u0020\u0003\u000b"+
            "\u0003\uffff\u0001\u0025\u0001\u0027\u0001\u0023\u0001\u0024"+
            "\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0029",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u002e\u001a\uffff\u0001\u002c"+
            "\u0001\u002d\u0001\uffff\u0001\u002c\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0035\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0036\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0019\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0037",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003a",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u003f\u001a\uffff\u0001\u003d"+
            "\u0001\u003e\u0001\uffff\u0001\u003d\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u002b\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0040",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0030\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0041",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0039\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u003c\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0044",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0043\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA249_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA249_eotS),
    DFA249_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA249_eofS),
    DFA249_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA249_minS),
    DFA249_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA249_maxS),
    DFA249_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA249_acceptS),
    DFA249_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA249_specialS),
    DFA249_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA249_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA249_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA249 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 249;
    this.eot = IDPParser.DFA249_eot;
    this.eof = IDPParser.DFA249_eof;
    this.min = IDPParser.DFA249_min;
    this.max = IDPParser.DFA249_max;
    this.accept = IDPParser.DFA249_accept;
    this.special = IDPParser.DFA249_special;
    this.transition = IDPParser.DFA249_transition;
};


org.antlr.lang.extend(IDPParser.DFA249, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "()* loopback of 3007:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*";
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA251_eotS:
        "\u0045\uffff",
    DFA251_eofS:
        "\u0045\uffff",
    DFA251_minS:
        "\u0001\u0004\u0002\u00ac\u0001\uffff\u0006\u0004\u0001\u000a\u0001"+
    "\uffff\u0002\u0007\u0001\u000a\u0006\u0004\u0001\u0024\u0002\u0004\u0001"+
    "\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001\u0040\u0002\u0004\u0002"+
    "\u0007\u0001\u000a\u0006\u0004\u0001\u000a\u0001\u0089\u0001\u000a\u0002"+
    "\u0007\u0001\u000a\u0001\u0089\u0001\u000a\u0002\u0007\u0001\u000a\u0001"+
    "\u0040\u0002\u0004\u0001\u000a\u0001\u0089\u0002\u000a\u0001\u0089\u0001"+
    "\u000a\u0002\u0007\u0003\u000a\u0001\u0089\u0002\u000a",
    DFA251_maxS:
        "\u0001\u00bf\u0002\u00be\u0001\uffff\u0006\u00c1\u0001\u000b\u0001"+
    "\uffff\u0009\u00c0\u0003\u00c1\u0001\u0089\u0011\u00c0\u0001\u0089\u0004"+
    "\u00c0\u0001\u0089\u0008\u00c0\u0001\u0089\u0002\u00c0\u0001\u0089\u0006"+
    "\u00c0\u0001\u0089\u0002\u00c0",
    DFA251_acceptS:
        "\u0003\uffff\u0001\u0002\u0007\uffff\u0001\u0001\u0039\uffff",
    DFA251_specialS:
        "\u0045\uffff}>",
    DFA251_transitionS: [
            "\u0001\u0003\u0005\uffff\u0001\u0003\u0001\u000b\u0018\uffff"+
            "\u0002\u000b\u001a\uffff\u0001\u000a\u000c\uffff\u0001\u0007"+
            "\u0001\uffff\u0001\u0009\u0013\uffff\u0001\u000b\u000c\uffff"+
            "\u0005\u000b\u002e\uffff\u0001\u000b\u0001\u0001\u0001\u0002"+
            "\u0001\u000b\u0001\u0001\u0002\uffff\u0001\u000b\u0003\uffff"+
            "\u0001\u0006\u0001\u0008\u0001\u0004\u0001\u0005\u000d\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u000e\uffff\u0004\u0003",
            "\u0001\u000b\u000e\uffff\u0004\u0003",
            "",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0016\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u0002\uffff\u0001\u0017\u001c\uffff\u0002\u000b"+
            "\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0012\u0001\uffff"+
            "\u0001\u0014\u0039\uffff\u0001\u000e\u001a\uffff\u0001\u000c"+
            "\u0001\u000d\u0001\uffff\u0001\u000c\u0003\u000b\u0003\uffff"+
            "\u0001\u0011\u0001\u0013\u0001\u000f\u0001\u0010\u000e\uffff"+
            "\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0003\u0001\u000b",
            "",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0018\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0019\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001e\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u0002\uffff\u0001\u001f\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u001c\u001a\uffff\u0001\u001a\u0001\u001b"+
            "\u0001\uffff\u0001\u001a\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0002\u000b\u001a\uffff\u0001\u000b\u000c\uffff\u0001\u0026"+
            "\u0001\uffff\u0001\u0028\u0039\uffff\u0001\u0022\u001a\uffff"+
            "\u0001\u0020\u0001\u0021\u0001\uffff\u0001\u0020\u0003\u000b"+
            "\u0003\uffff\u0001\u0025\u0001\u0027\u0001\u0023\u0001\u0024"+
            "\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0015\u001f\uffff\u0002\u000b\u001a\uffff\u0001\u000b"+
            "\u000c\uffff\u0001\u0012\u0001\uffff\u0001\u0014\u0039\uffff"+
            "\u0001\u000e\u001a\uffff\u0001\u000c\u0001\u000d\u0001\uffff"+
            "\u0001\u000c\u0003\u000b\u0003\uffff\u0001\u0011\u0001\u0013"+
            "\u0001\u000f\u0001\u0010\u000e\uffff\u0002\u0003",
            "\u0001\u0029",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002a\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u002b\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u002e\u001a\uffff\u0001\u002c"+
            "\u0001\u002d\u0001\uffff\u0001\u002c\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u001d\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u001c"+
            "\u001a\uffff\u0001\u001a\u0001\u001b\u0001\uffff\u0001\u001a"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u002f\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0030\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0035\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u0002\uffff\u0001\u0036\u0038\uffff\u0001\u000b"+
            "\u0048\uffff\u0001\u0033\u001a\uffff\u0001\u0031\u0001\u0032"+
            "\u0001\uffff\u0001\u0031\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0019\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0037",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0038\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0039\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003a",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u003b\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u003c\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u000b\u0048\uffff\u0001\u003f\u001a\uffff\u0001\u003d"+
            "\u0001\u003e\u0001\uffff\u0001\u003d\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0034\u003b\uffff\u0001\u000b\u0048\uffff\u0001\u0033"+
            "\u001a\uffff\u0001\u0031\u0001\u0032\u0001\uffff\u0001\u0031"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u002b\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0040",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0030\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0041",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0042\u0002\uffff\u0001\u0003\u0001\u000b\u0034\uffff"+
            "\u0001\u0043\u0067\uffff\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0039\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u003c\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003",
            "\u0001\u0044",
            "\u0001\u0003\u0001\u000b\u009c\uffff\u0001\u000b\u0017\uffff"+
            "\u0001\u0003",
            "\u0001\u0003\u0001\u000b\u0034\uffff\u0001\u0043\u0067\uffff"+
            "\u0001\u000b\u0017\uffff\u0001\u0003"
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA251_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA251_eotS),
    DFA251_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA251_eofS),
    DFA251_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA251_minS),
    DFA251_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA251_maxS),
    DFA251_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA251_acceptS),
    DFA251_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA251_specialS),
    DFA251_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA251_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA251_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA251 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 251;
    this.eot = IDPParser.DFA251_eot;
    this.eof = IDPParser.DFA251_eof;
    this.min = IDPParser.DFA251_min;
    this.max = IDPParser.DFA251_max;
    this.accept = IDPParser.DFA251_accept;
    this.special = IDPParser.DFA251_special;
    this.transition = IDPParser.DFA251_transition;
};


org.antlr.lang.extend(IDPParser.DFA251, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "()* loopback of 3016:35: (selectionOutput= ruleNumericBaseSelection arithmeticOperOutput= ruleArithmeticMult )*";
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA253_eotS:
        "\u0024\uffff",
    DFA253_eofS:
        "\u0024\uffff",
    DFA253_minS:
        "\u0001\u0004\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA253_maxS:
        "\u0001\u00bf\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA253_acceptS:
        "\u0001\uffff\u0001\u0001\u0021\uffff\u0001\u0002",
    DFA253_specialS:
        "\u000a\uffff\u0001\u0000\u0019\uffff}>",
    DFA253_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0001\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0005\u0001\u000c\uffff\u0005\u0001"+
            "\u0002\uffff\u0003\u0001\u000a\uffff\u0005\u0001\u002e\uffff"+
            "\u0005\u0001\u0002\uffff\u0001\u0001\u0003\uffff\u0004\u0001"+
            "\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA253_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA253_eotS),
    DFA253_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA253_eofS),
    DFA253_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA253_minS),
    DFA253_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA253_maxS),
    DFA253_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA253_acceptS),
    DFA253_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA253_specialS),
    DFA253_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA253_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA253_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA253 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 253;
    this.eot = IDPParser.DFA253_eot;
    this.eof = IDPParser.DFA253_eof;
    this.min = IDPParser.DFA253_min;
    this.max = IDPParser.DFA253_max;
    this.accept = IDPParser.DFA253_accept;
    this.special = IDPParser.DFA253_special;
    this.transition = IDPParser.DFA253_transition;
};


org.antlr.lang.extend(IDPParser.DFA253, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "3022:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA253_10 = input.LA(1);

                             
                            var index253_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred429_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index253_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_253_253 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 253, _s, input);
        this.error(nvae_253_253);
        throw nvae_253_253;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA254_eotS:
        "\u0024\uffff",
    DFA254_eofS:
        "\u0024\uffff",
    DFA254_minS:
        "\u0001\u0004\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA254_maxS:
        "\u0001\u00bf\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA254_acceptS:
        "\u0001\uffff\u0001\u0001\u0021\uffff\u0001\u0002",
    DFA254_specialS:
        "\u000a\uffff\u0001\u0000\u0019\uffff}>",
    DFA254_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0001\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0005\u0001\u000c\uffff\u0005\u0001"+
            "\u0002\uffff\u0003\u0001\u000a\uffff\u0005\u0001\u002e\uffff"+
            "\u0005\u0001\u0002\uffff\u0001\u0001\u0003\uffff\u0004\u0001"+
            "\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA254_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA254_eotS),
    DFA254_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA254_eofS),
    DFA254_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA254_minS),
    DFA254_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA254_maxS),
    DFA254_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA254_acceptS),
    DFA254_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA254_specialS),
    DFA254_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA254_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA254_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA254 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 254;
    this.eot = IDPParser.DFA254_eot;
    this.eof = IDPParser.DFA254_eof;
    this.min = IDPParser.DFA254_min;
    this.max = IDPParser.DFA254_max;
    this.accept = IDPParser.DFA254_accept;
    this.special = IDPParser.DFA254_special;
    this.transition = IDPParser.DFA254_transition;
};


org.antlr.lang.extend(IDPParser.DFA254, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "3028:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA254_10 = input.LA(1);

                             
                            var index254_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred430_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index254_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_254_254 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 254, _s, input);
        this.error(nvae_254_254);
        throw nvae_254_254;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA255_eotS:
        "\u0024\uffff",
    DFA255_eofS:
        "\u0024\uffff",
    DFA255_minS:
        "\u0001\u0004\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA255_maxS:
        "\u0001\u00bf\u0009\uffff\u0001\u0000\u0019\uffff",
    DFA255_acceptS:
        "\u0001\uffff\u0001\u0001\u0021\uffff\u0001\u0002",
    DFA255_specialS:
        "\u000a\uffff\u0001\u0000\u0019\uffff}>",
    DFA255_transitionS: [
            "\u0001\u000a\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0001\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0005\u0001\u000c\uffff\u0005\u0001"+
            "\u0002\uffff\u0003\u0001\u000a\uffff\u0005\u0001\u002e\uffff"+
            "\u0005\u0001\u0002\uffff\u0001\u0001\u0003\uffff\u0004\u0001"+
            "\u000d\uffff\u0001\u0001",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA255_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA255_eotS),
    DFA255_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA255_eofS),
    DFA255_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA255_minS),
    DFA255_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA255_maxS),
    DFA255_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA255_acceptS),
    DFA255_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA255_specialS),
    DFA255_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA255_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA255_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA255 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 255;
    this.eot = IDPParser.DFA255_eot;
    this.eof = IDPParser.DFA255_eof;
    this.min = IDPParser.DFA255_min;
    this.max = IDPParser.DFA255_max;
    this.accept = IDPParser.DFA255_accept;
    this.special = IDPParser.DFA255_special;
    this.transition = IDPParser.DFA255_transition;
};


org.antlr.lang.extend(IDPParser.DFA255, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "3034:33: (selectionClauseOutput= ruleTimespanSelectionClause | LROUNDB selectionClauseOutput= ruleTimespanSelectionClause RROUNDB )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA255_10 = input.LA(1);

                             
                            var index255_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred431_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index255_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_255_255 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 255, _s, input);
        this.error(nvae_255_255);
        throw nvae_255_255;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA257_eotS:
        "\u0026\uffff",
    DFA257_eofS:
        "\u0026\uffff",
    DFA257_minS:
        "\u0001\u0004\u0005\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u0007"+
    "\uffff\u0002\u0000\u0001\uffff\u0004\u0000\u000e\uffff",
    DFA257_maxS:
        "\u0001\u00c1\u0005\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u0007"+
    "\uffff\u0002\u0000\u0001\uffff\u0004\u0000\u000e\uffff",
    DFA257_acceptS:
        "\u0001\uffff\u0001\u0001\u0021\uffff\u0001\u0002\u0002\uffff",
    DFA257_specialS:
        "\u0006\uffff\u0001\u0000\u0002\uffff\u0001\u0001\u0007\uffff\u0001"+
    "\u0002\u0001\u0003\u0001\uffff\u0001\u0004\u0001\u0005\u0001\u0006\u0001"+
    "\u0007\u000e\uffff}>",
    DFA257_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0001\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0002\u0001\u0001\u0006\u0001\u0001"+
            "\u0001\u0009\u000c\uffff\u0005\u0001\u0002\uffff\u0003\u0001"+
            "\u000a\uffff\u0005\u0001\u0014\uffff\u0001\u0023\u0019\uffff"+
            "\u0001\u0001\u0001\u0011\u0001\u0012\u0001\u0001\u0001\u0011"+
            "\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0016\u0001\u0017"+
            "\u0001\u0014\u0001\u0015\u000d\uffff\u0001\u0001\u0002\u0023",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA257_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA257_eotS),
    DFA257_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA257_eofS),
    DFA257_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA257_minS),
    DFA257_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA257_maxS),
    DFA257_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA257_acceptS),
    DFA257_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA257_specialS),
    DFA257_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA257_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA257_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA257 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 257;
    this.eot = IDPParser.DFA257_eot;
    this.eof = IDPParser.DFA257_eof;
    this.min = IDPParser.DFA257_min;
    this.max = IDPParser.DFA257_max;
    this.accept = IDPParser.DFA257_accept;
    this.special = IDPParser.DFA257_special;
    this.transition = IDPParser.DFA257_transition;
};


org.antlr.lang.extend(IDPParser.DFA257, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "3048:25: ( (numberOutput= ruleTimespanFromDateClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromDateClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA257_6 = input.LA(1);

                             
                            var index257_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_6);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA257_9 = input.LA(1);

                             
                            var index257_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_9);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA257_17 = input.LA(1);

                             
                            var index257_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_17);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA257_18 = input.LA(1);

                             
                            var index257_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_18);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA257_20 = input.LA(1);

                             
                            var index257_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_20);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA257_21 = input.LA(1);

                             
                            var index257_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_21);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA257_22 = input.LA(1);

                             
                            var index257_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_22);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA257_23 = input.LA(1);

                             
                            var index257_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred433_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index257_23);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_257_257 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 257, _s, input);
        this.error(nvae_257_257);
        throw nvae_257_257;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA259_eotS:
        "\u0026\uffff",
    DFA259_eofS:
        "\u0026\uffff",
    DFA259_minS:
        "\u0001\u0004\u0005\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u0007"+
    "\uffff\u0002\u0000\u0001\uffff\u0004\u0000\u000e\uffff",
    DFA259_maxS:
        "\u0001\u00c1\u0005\uffff\u0001\u0000\u0002\uffff\u0001\u0000\u0007"+
    "\uffff\u0002\u0000\u0001\uffff\u0004\u0000\u000e\uffff",
    DFA259_acceptS:
        "\u0001\uffff\u0001\u0001\u0021\uffff\u0001\u0002\u0002\uffff",
    DFA259_specialS:
        "\u0006\uffff\u0001\u0000\u0002\uffff\u0001\u0001\u0007\uffff\u0001"+
    "\u0002\u0001\u0003\u0001\uffff\u0001\u0004\u0001\u0005\u0001\u0006\u0001"+
    "\u0007\u000e\uffff}>",
    DFA259_transitionS: [
            "\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff\u0002\u0001"+
            "\u0003\uffff\u0002\u0001\u0013\uffff\u0002\u0001\u001a\uffff"+
            "\u0001\u0001\u000a\uffff\u0002\u0001\u0001\u0006\u0001\u0001"+
            "\u0001\u0009\u000c\uffff\u0005\u0001\u0002\uffff\u0003\u0001"+
            "\u000a\uffff\u0005\u0001\u0014\uffff\u0001\u0023\u0019\uffff"+
            "\u0001\u0001\u0001\u0011\u0001\u0012\u0001\u0001\u0001\u0011"+
            "\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0016\u0001\u0017"+
            "\u0001\u0014\u0001\u0015\u000d\uffff\u0001\u0001\u0002\u0023",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA259_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA259_eotS),
    DFA259_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA259_eofS),
    DFA259_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA259_minS),
    DFA259_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA259_maxS),
    DFA259_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA259_acceptS),
    DFA259_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA259_specialS),
    DFA259_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA259_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA259_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA259 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 259;
    this.eot = IDPParser.DFA259_eot;
    this.eof = IDPParser.DFA259_eof;
    this.min = IDPParser.DFA259_min;
    this.max = IDPParser.DFA259_max;
    this.accept = IDPParser.DFA259_accept;
    this.special = IDPParser.DFA259_special;
    this.transition = IDPParser.DFA259_transition;
};


org.antlr.lang.extend(IDPParser.DFA259, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "3057:25: ( (numberOutput= ruleTimespanFromTimestampClause ) ( ( SEMICOLON numberOutput= ruleTimespanFromTimestampClause )* ) | (numberOutput= ruleTimespanCollectionSelectionClause ) )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA259_6 = input.LA(1);

                             
                            var index259_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_6);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA259_9 = input.LA(1);

                             
                            var index259_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_9);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA259_17 = input.LA(1);

                             
                            var index259_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_17);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA259_18 = input.LA(1);

                             
                            var index259_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_18);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA259_20 = input.LA(1);

                             
                            var index259_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_20);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA259_21 = input.LA(1);

                             
                            var index259_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_21);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA259_22 = input.LA(1);

                             
                            var index259_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_22);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA259_23 = input.LA(1);

                             
                            var index259_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred435_IDP()) ) {s = 1;}

                            else if ( (this.setPred()) &&(true) ) {s = 35;}

                             
                            input.seek(index259_23);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_259_259 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 259, _s, input);
        this.error(nvae_259_259);
        throw nvae_259_259;
    },
    dummy: null
});
org.antlr.lang.augmentObject(IDPParser, {
    DFA316_eotS:
        "\u0010\uffff",
    DFA316_eofS:
        "\u0010\uffff",
    DFA316_minS:
        "\u0001\u0004\u0001\u0000\u0001\uffff\u0008\u0000\u0005\uffff",
    DFA316_maxS:
        "\u0001\u0065\u0001\u0000\u0001\uffff\u0008\u0000\u0005\uffff",
    DFA316_acceptS:
        "\u0002\uffff\u0001\u0001\u000a\uffff\u0001\u0002\u0002\uffff",
    DFA316_specialS:
        "\u0001\uffff\u0001\u0000\u0001\uffff\u0001\u0001\u0001\u0002\u0001"+
    "\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0005"+
    "\uffff}>",
    DFA316_transitionS: [
            "\u0001\u0009\u0001\uffff\u0001\u0006\u0008\uffff\u0001\u000d"+
            "\u0001\u0002\u002f\uffff\u0001\u0001\u000a\uffff\u0001\u0003"+
            "\u0001\u0004\u0001\u0005\u0001\u0007\u0001\u0008\u000c\uffff"+
            "\u0002\u0002\u0003\u000a\u0003\uffff\u0002\u000d",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(IDPParser, {
    DFA316_eot:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA316_eotS),
    DFA316_eof:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA316_eofS),
    DFA316_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA316_minS),
    DFA316_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(IDPParser.DFA316_maxS),
    DFA316_accept:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA316_acceptS),
    DFA316_special:
        org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA316_specialS),
    DFA316_transition: (function() {
        var a = [],
            i,
            numStates = IDPParser.DFA316_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(IDPParser.DFA316_transitionS[i]));
        }
        return a;
    })()
});

IDPParser.DFA316 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 316;
    this.eot = IDPParser.DFA316_eot;
    this.eof = IDPParser.DFA316_eof;
    this.min = IDPParser.DFA316_min;
    this.max = IDPParser.DFA316_max;
    this.accept = IDPParser.DFA316_accept;
    this.special = IDPParser.DFA316_special;
    this.transition = IDPParser.DFA316_transition;
};


org.antlr.lang.extend(IDPParser.DFA316, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1754:34: (selectionOutput= ruleBaseTimestamp | selectionOutput= ruleBaseDate )";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {

                        case 0 : 
                            var LA316_1 = input.LA(1);

                             
                            var index316_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_1);
                            if ( s>=0 ) return s;
                            break;

                        case 1 : 
                            var LA316_3 = input.LA(1);

                             
                            var index316_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_3);
                            if ( s>=0 ) return s;
                            break;

                        case 2 : 
                            var LA316_4 = input.LA(1);

                             
                            var index316_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_4);
                            if ( s>=0 ) return s;
                            break;

                        case 3 : 
                            var LA316_5 = input.LA(1);

                             
                            var index316_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_5);
                            if ( s>=0 ) return s;
                            break;

                        case 4 : 
                            var LA316_6 = input.LA(1);

                             
                            var index316_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_6);
                            if ( s>=0 ) return s;
                            break;

                        case 5 : 
                            var LA316_7 = input.LA(1);

                             
                            var index316_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_7);
                            if ( s>=0 ) return s;
                            break;

                        case 6 : 
                            var LA316_8 = input.LA(1);

                             
                            var index316_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_8);
                            if ( s>=0 ) return s;
                            break;

                        case 7 : 
                            var LA316_9 = input.LA(1);

                             
                            var index316_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_9);
                            if ( s>=0 ) return s;
                            break;

                        case 8 : 
                            var LA316_10 = input.LA(1);

                             
                            var index316_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.setPred()) &&(this.synpred220_IDP()) ) {s = 2;}

                            else if ( (this.setPred()) &&(true) ) {s = 13;}

                             
                            input.seek(index316_10);
                            if ( s>=0 ) return s;
                            break;
            }
            return retval;
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae_316_316 =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 316, _s, input);
        this.error(nvae_316_316);
        throw nvae_316_316;
    },
    dummy: null
});
 

// public class variables
org.antlr.lang.augmentObject(IDPParser, {
    tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "LROUNDB", "RROUNDB", "FIRST", "OF", "WITH_THE_HIGHEST", "WITH_THE_LOWEST", "TYPETIMEINTERVAL", "TYPENUMBER", "WITH_THE_MOST_RECENT", "WITH_THE_EARLIEST", "TYPETIME", "TYPEDATE", "TYPETIMESTAMP", "SORTED_FROM_Z_TO_A_BY", "SORTED_FROM_A_TO_Z_BY", "TYPESTRING", "TYPECOLLECTION", "TYPEBOOLEAN", "WHERE", "FILTER_BY", "I", "S", "IS", "FILTER", "WS", "BY", "PER", "GROUP_BY", "SEMICOLON", "GROUPED", "COUNT", "DISTINCT", "COUNT_DISTINCT_OF", "COUNT_OF", "COUNTD", "COUNTD_OF", "AND", "EQ_SIGN", "IS_EQUAL", "OR", "ANY_OF", "ALL_OF", "BULLET", "ANY", "THE", "FOLLOWING", "CONDITIONS", "T", "R", "U", "E", "COLON", "FALL", "FWS", "ARE", "TO", "TRUE", "FALSE", "TYPEBOOLEANPARAMETER", "NULL", "CURRENT", "TYPEBOOLEANCOLLECTION", "TYPEBOOLEANDT", "NOT_EQUAL_SIGN", "IS_NOT_EQUAL", "DOES_NOT_EQUAL", "NOT_EQUAL", "EQUALS", "EQUAL", "DOES", "NOT", "LAST", "MOST_RECENT", "MAXIMUM_OF", "EARLIEST", "MINIMUM_OF", "EXISTS_IN", "DOES_NOT_EXISTS_IN", "ONE", "IS_ONE_OF", "IS_NOT_ONE_OF", "EXISTS", "IN", "EXIST", "TIMESTRING", "TYPETIMEPARAMETER", "TYPETIMECOLLECTION", "TYPETIMEDT", "TIMESTAMPSTRING", "TYPETIMESTAMPPARAMETER", "TODAY", "YESTERDAY", "TOMORROW", "TYPETIMESTAMPCOLLECTION", "TYPEDATEDT", "MINUS", "DATESTRING", "TYPEDATEPARAMETER", "GREATER_EQUAL_SIGN", "LESS_EQUAL_SIGN", "IS_EQUAL_OR_GREATER_THAN", "GREATER_THAN", "IS_EQUAL_OR_LESS_THAN", "LESS_THAN", "GREATER_SIGN", "LESS_SIGN", "IS_LESS_THAN", "IS_GREATER_THAN", "ROUND", "POWER", "SIN", "COS", "LOG", "LESS", "THAN", "GREATER", "IS_NOT_LESS_THAN", "IS_NOT_GREATER_THAN", "IS_IN_THE_LAST", "IS_NOT_IN_THE_LAST", "IS_IN_THE_NEXT", "IS_NOT_IN_THE_NEXT", "NEXT", "IS_BEFORE", "BEFORE", "IS_NOT_BEFORE", "IS_AFTER", "AFTER", "IS_NOT_AFTER", "IS_BETWEEN", "BETWEEN", "IS_NOT_BETWEEN", "TYPEDATECOLLECTION", "ALL", "PLUS", "CONCATENATE", "WITH_FUZZY", "CONTAINS", "DOES_NOT_CONTAIN", "STRING", "TYPESTRINGPARAMETER", "TYPESTRINGCOLLECTION", "TYPESTRINGDT", "IS_LIKE", "LIKE", "IS_NOT_LIKE", "NOT_LIKE", "DOES_NOT_START", "START_WITH", "DOES_NOT_END", "END_WITH", "PATTERN", "NOT_IN", "CONTAIN", "START", "WITH", "STARTS", "END", "ENDS", "ZERO_TO_ONE", "ZERO_OR_ONE", "TYPENUMBERPARAMETER", "DECIMAL", "INT", "TYPENUMBERCOLLECTION", "TYPENUMBERDT", "NUMBER_OF", "OCCURENCES_REGEXP", "MULT", "DIV", "HIGHEST", "LOWEST", "AVERAGE_OF", "SUM_OF", "AVERAGE", "SUM", "MAXIMUM", "MOST", "RECENT", "MINIMUM", "SECOND", "MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "YEAR", "TYPETIMEINTERVALPARAMETER", "TYPETIMEINTERVALCOLLECTION", "TYPETIMEINTERVALDT", "H", "G", "L", "O", "W", "D", "SORTED", "C", "N", "M", "OCCURRENCES", "P", "A", "F", "FROM", "Z", "NUMBER", "FOF", "UNDERSCORE", "LINE", "NEW", "LIST", "Y", "B", "Q", "UNIQUE", "FUZZY", "SCORE", "NOT_SIGN", "X", "V", "NOW", "IF", "K", "THIS", "DOT", "LBRACK", "RBRACK", "INVERTED_COMMAS", "IS_NOT", "J", "PARAMETER", "OBJECT", "IS_A", "IS_NOT_OBJ", "ALL_OF_OBJ", "NAVIGATION", "TYPEATTRIBUTE", "TYPETIMESTAMPDT", "Digit", "HexDigit", "UnicodeChar", "EscapeSequence", "StringChar", "Comma", "IntSimple", "IntWithComma", "IntWithDot", "IntWithSpace", "ML_COMMENT", "SL_COMMENT", "ANYCHAR"],
    FOLLOW_EOF_in_dummyRule176: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelSingleExpression_in_model312: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelCollection_in_model316: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBoolean_in_model321: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBooleanPure_in_modelSingleExpression423: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelNumric_in_modelSingleExpression427: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelString_in_modelSingleExpression431: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimespan_in_modelSingleExpression435: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelDate_in_modelSingleExpression440: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTime_in_modelSingleExpression444: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimestamp_in_modelSingleExpression448: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelSingleExpression_in_modelNonCollection552: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBooleanPure_in_modelNonCollection556: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBooleanEnhanced_in_modelBoolean713: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelBoolean716: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelBoolean_in_modelBooleanPure893: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelBooleanPure895: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanStatement_in_modelBooleanType1039: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelBooleanType1041: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericStatement_in_modelNumric1228: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelNumric1230: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatement_in_modelString1385: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelString1387: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanStatement_in_modelTimespan1533: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTimespan1535: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatement_in_modelDate1691: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelDate1693: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatement_in_modelTime1845: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTime1847: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatement_in_modelTimestamp2007: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTimestamp2009: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelNonTypeCollection_in_modelCollection2163: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBooleanCollection_in_modelCollection2167: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelNumricCollection_in_modelCollection2171: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelStringCollection_in_modelCollection2175: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimespanCollection_in_modelCollection2179: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelDateCollection_in_modelCollection2183: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimeCollection_in_modelCollection2187: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimestampCollection_in_modelCollection2191: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelCollection_in_modelNonTypeCollection2325: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelNonTypeCollection2328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelBooleanCollection_in_modelBooleanCollection2484: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelBooleanCollection2486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelNumericCollection_in_modelNumricCollection2670: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelNumricCollection2672: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelStringCollection_in_modelStringCollection2824: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelStringCollection2826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelTimeSpanCollection_in_modelTimespanCollection2982: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTimespanCollection2984: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelDateCollection_in_modelDateCollection3137: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelDateCollection3139: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelTimeCollection_in_modelTimeCollection3287: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTimeCollection3289: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelTimestampCollection_in_modelTimestampCollection3446: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_modelTimestampCollection3448: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelCollection_in_modelAllAutocomplete3545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBoolean_in_modelAllAutocomplete3549: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCollectionClause_in_ruleModelCollection3671: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCollectionSelectionClause_in_ruleCollectionClause3764: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleCollectionClause3800: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleCollectionSelectionClause_in_ruleCollectionClause3806: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleCollectionClause3808: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleRootCollection_in_ruleCollectionSelectionClause4019: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FIRST_in_collectionResultAggregationOption4160: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleInteger_in_collectionResultAggregationOption4169: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_collectionResultAggregationOption4179: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericOrder_in_ruleSortingOptions4367: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateTimeOrder_in_ruleSortingOptions4375: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringOrder_in_ruleSortingOptions4383: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WITH_THE_HIGHEST_in_ruleNumericOrder4590: new org.antlr.runtime.BitSet([0x00000C00, 0x00000000]),
    FOLLOW_WITH_THE_LOWEST_in_ruleNumericOrder4600: new org.antlr.runtime.BitSet([0x00000C00, 0x00000000]),
    FOLLOW_set_in_ruleNumericOrder4611: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WITH_THE_MOST_RECENT_in_ruleDateTimeOrder4775: new org.antlr.runtime.BitSet([0x0001C000, 0x00000000]),
    FOLLOW_WITH_THE_EARLIEST_in_ruleDateTimeOrder4785: new org.antlr.runtime.BitSet([0x0001C000, 0x00000000]),
    FOLLOW_set_in_ruleDateTimeOrder4796: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SORTED_FROM_Z_TO_A_BY_in_ruleStringOrder4964: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_SORTED_FROM_A_TO_Z_BY_in_ruleStringOrder4974: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_TYPESTRING_in_ruleStringOrder4985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_collectionResultAggregationOption_in_ruleRootCollection5149: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleRootCollection5160: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleCollectionContext_in_ruleRootCollection5172: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleRootCollection5284: new org.antlr.runtime.BitSet([0x001000C0, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_OF_in_ruleRootCollection5290: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleRootCollection5296: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleCollectionContext_in_ruleRootCollection5308: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleRootCollection5379: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleRootCollection5434: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleRootCollectionSelection5652: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleCollectionContext_in_ruleRootCollectionSelection5664: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleRootCollectionSelection5776: new org.antlr.runtime.BitSet([0x001000C0, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_OF_in_ruleRootCollectionSelection5782: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleRootCollectionSelection5788: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleCollectionContext_in_ruleRootCollectionSelection5800: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleRootCollectionSelection5871: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleRootCollectionSelection5926: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPECOLLECTION_in_ruleCollectionContext6141: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanCollectionClause_in_ruleModelBooleanCollection6300: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnBooleanCollectionSelectionClause_in_ruleBooleanCollectionClause6386: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleBooleanCollectionClause6422: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000007, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleReturnBooleanCollectionSelectionClause_in_ruleBooleanCollectionClause6428: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleBooleanCollectionClause6430: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanCollection_in_ruleReturnBooleanCollectionSelectionClause6648: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCollectionClause_in_ruleModelStringCollection6759: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnStringCollectionSelectionClause_in_ruleStringCollectionClause6845: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleStringCollectionClause6881: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000000,0x00060200, 0x000000B0]),
    FOLLOW_ruleReturnStringCollectionSelectionClause_in_ruleStringCollectionClause6887: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleStringCollectionClause6889: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCollection_in_ruleReturnStringCollectionSelectionClause7109: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericCollectionClause_in_ruleModelNumericCollection7205: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnNumericCollectionSelectionClause_in_ruleNumericCollectionClause7291: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericCollectionClause7327: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0000A001, 0x00000000,0x00000200, 0x0003C7B0]),
    FOLLOW_ruleReturnNumericCollectionSelectionClause_in_ruleNumericCollectionClause7333: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericCollectionClause7335: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericCollection_in_ruleReturnNumericCollectionSelectionClause7555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollectionClause_in_ruleModelDateCollection7650: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnDateCollectionSelectionClause_in_ruleDateCollectionClause7736: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateCollectionClause7772: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000004,0x00000300, 0x000000B0]),
    FOLLOW_ruleReturnDateCollectionSelectionClause_in_ruleDateCollectionClause7778: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateCollectionClause7780: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollection_in_ruleReturnDateCollectionSelectionClause8000: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCollectionClause_in_ruleModelTimestampCollection8095: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnTimestampCollectionSelectionClause_in_ruleTimestampCollectionClause8181: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimestampCollectionClause8217: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000006,0x00000200, 0x000000B0]),
    FOLLOW_ruleReturnTimestampCollectionSelectionClause_in_ruleTimestampCollectionClause8223: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimestampCollectionClause8225: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCollection_in_ruleReturnTimestampCollectionSelectionClause8445: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanCollectionClause_in_ruleModelTimeSpanCollection8541: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnTimeSpanCollectionSelectionClause_in_ruleTimeSpanCollectionClause8627: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeSpanCollectionClause8663: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x0000A000, 0x00000000,0x00000200, 0x0003C0B0,0x00000003, 0x00000000]),
    FOLLOW_ruleReturnTimeSpanCollectionSelectionClause_in_ruleTimeSpanCollectionClause8669: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeSpanCollectionClause8671: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanCollection_in_ruleReturnTimeSpanCollectionSelectionClause8891: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeCollectionClause_in_ruleModelTimeCollection8986: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleReturnTimeCollectionSelectionClause_in_ruleTimeCollectionClause9072: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeCollectionClause9108: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x0C000001, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleReturnTimeCollectionSelectionClause_in_ruleTimeCollectionClause9114: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeCollectionClause9116: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeCollection_in_ruleReturnTimeCollectionSelectionClause9336: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericStatement_in_ruleSelectionClause9436: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatement_in_ruleSelectionClause9482: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanStatement_in_ruleSelectionClause9524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatement_in_ruleSelectionClause9564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatement_in_ruleSelectionClause9604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatement_in_ruleSelectionClause9644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_navigationPredicate9778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_filterClause9954: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanWhere_in_filterClause9971: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_filterClause9977: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanWhere_in_filterClause9983: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_filterClause9985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_groupByClause10315: new org.antlr.runtime.BitSet([0x0029CC10, 0x00000000]),
    FOLLOW_groupByArray_in_groupByClause10330: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_groupByClause10335: new org.antlr.runtime.BitSet([0x0029CC00, 0x00000000]),
    FOLLOW_groupByArray_in_groupByClause10341: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_groupByClause10343: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_navigationPredicate_in_groupByArray10521: new org.antlr.runtime.BitSet([0x00000002, 0x00000001]),
    FOLLOW_SEMICOLON_in_groupByArray10527: new org.antlr.runtime.BitSet([0x0029CC00, 0x00000000]),
    FOLLOW_groupByArray_in_groupByArray10535: new org.antlr.runtime.BitSet([0x00000002, 0x00000001]),
    FOLLOW_complexAndModelBooleanEnhanced_in_modelBooleanEnhanced10826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_modelBooleanEnhanced10862: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_complexAndModelBooleanEnhanced_in_modelBooleanEnhanced10868: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_modelBooleanEnhanced10870: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexModelBooleanEnhanced_in_complexAndModelBooleanEnhanced11006: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_AND_in_complexAndModelBooleanEnhanced11027: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_complexModelBooleanEnhanced_in_complexAndModelBooleanEnhanced11047: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_ruleModelBooleanEnhanced_in_complexModelBooleanEnhanced11120: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_complexModelBooleanEnhanced11156: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanEnhanced_in_complexModelBooleanEnhanced11162: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_complexModelBooleanEnhanced11164: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelBoolean_in_ruleModelBooleanEnhanced11389: new org.antlr.runtime.BitSet([0x00000002, 0x00000600]),
    FOLLOW_set_in_ruleModelBooleanEnhanced11438: new org.antlr.runtime.BitSet([0x00000000, 0x70000000]),
    FOLLOW_ruleBooleanOnlySimpleSelectionClause_in_ruleModelBooleanEnhanced11493: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexAndStatementBoolean_in_ruleModelBoolean11566: new org.antlr.runtime.BitSet([0x00000002, 0x00000800]),
    FOLLOW_OR_in_ruleModelBoolean11577: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_complexAndStatementBoolean_in_ruleModelBoolean11588: new org.antlr.runtime.BitSet([0x00000002, 0x00000800]),
    FOLLOW_singleStatementBoolean_in_complexAndStatementBoolean11669: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_AND_in_complexAndStatementBoolean11679: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_singleStatementBoolean_in_complexAndStatementBoolean11690: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_ANY_OF_in_complexStructStatementBoolean11778: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
    FOLLOW_ALL_OF_in_complexStructStatementBoolean11783: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
    FOLLOW_BULLET_in_complexStructStatementBoolean11805: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBoolean_in_complexStructStatementBoolean11827: new org.antlr.runtime.BitSet([0x00000000, 0x00004001]),
    FOLLOW_BULLET_in_complexStructStatementBoolean11841: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBoolean_in_complexStructStatementBoolean11847: new org.antlr.runtime.BitSet([0x00000000, 0x00004001]),
    FOLLOW_SEMICOLON_in_complexStructStatementBoolean11876: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ANY_OF_in_complexStructStatementBooleanWhere12256: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
    FOLLOW_ALL_OF_in_complexStructStatementBooleanWhere12261: new org.antlr.runtime.BitSet([0x00000000, 0x00004000]),
    FOLLOW_BULLET_in_complexStructStatementBooleanWhere12283: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanWhere_in_complexStructStatementBooleanWhere12305: new org.antlr.runtime.BitSet([0x00000000, 0x00004001]),
    FOLLOW_BULLET_in_complexStructStatementBooleanWhere12319: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanWhere_in_complexStructStatementBooleanWhere12325: new org.antlr.runtime.BitSet([0x00000000, 0x00004001]),
    FOLLOW_SEMICOLON_in_complexStructStatementBooleanWhere12354: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexAndStatementBooleanWhere_in_ruleModelBooleanWhere12515: new org.antlr.runtime.BitSet([0x00000002, 0x00000800]),
    FOLLOW_OR_in_ruleModelBooleanWhere12526: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_complexAndStatementBooleanWhere_in_ruleModelBooleanWhere12537: new org.antlr.runtime.BitSet([0x00000002, 0x00000800]),
    FOLLOW_singleStatementBooleanWhere_in_complexAndStatementBooleanWhere12615: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_AND_in_complexAndStatementBooleanWhere12624: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_singleStatementBooleanWhere_in_complexAndStatementBooleanWhere12635: new org.antlr.runtime.BitSet([0x00000002, 0x00000100]),
    FOLLOW_LROUNDB_in_complexStatementBoolean12709: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBoolean_in_complexStatementBoolean12715: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_complexStatementBoolean12718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_complexStatementBooleanWhere12781: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleModelBooleanWhere_in_complexStatementBooleanWhere12787: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_complexStatementBooleanWhere12790: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleStatement_in_singleStatementBooleanWhere12829: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleSelectionStatement_in_singleStatementBooleanWhere12857: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSingleStatementComparison_in_singleStatementBooleanWhere12884: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullStatementComparison_in_singleStatementBooleanWhere12911: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatementComparison_in_singleStatementBooleanWhere12956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSingleStatementComparison_in_singleStatementBooleanWhere12983: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatementComparison_in_singleStatementBooleanWhere13010: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatementComparison_in_singleStatementBooleanWhere13037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatementComparison_in_singleStatementBooleanWhere13064: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStatementBooleanWhere_in_singleStatementBooleanWhere13115: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStructStatementBooleanWhere_in_singleStatementBooleanWhere13142: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSingleStatementComparison_in_singleStatementBoolean13296: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullStatementComparison_in_singleStatementBoolean13323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleStatement_in_singleStatementBoolean13350: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleSelectionStatement_in_singleStatementBoolean13378: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatementComparison_in_singleStatementBoolean13405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSingleStatementComparison_in_singleStatementBoolean13432: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatementComparison_in_singleStatementBoolean13459: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatementComparison_in_singleStatementBoolean13486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatementComparison_in_singleStatementBoolean13513: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStatementBoolean_in_singleStatementBoolean13564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStructStatementBoolean_in_singleStatementBoolean13590: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNumericSingleStatementComparison13811: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0x0000FFC0,0x000000E0, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleNumericSingleStatementComparison13854: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleNumericSetOfValues_in_ruleNumericSingleStatementComparison13912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleNumericSingleStatementComparison13957: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBetweenClause_in_ruleNumericSingleStatementComparison14014: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOption_in_ruleNumericSingleStatementComparison14058: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericClause_in_ruleNumericSingleStatementComparison14114: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNumericBetweenClause14217: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleNumericBetweenClause14224: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericClause_in_ruleNumericBetweenClause14255: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_ruleNullStatementComparison14406: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNullStatementComparison14414: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleNullStatementComparison14422: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleNullStatementComparison14430: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleNullStatementComparison14438: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleStringClause_in_ruleNullStatementComparison14446: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleNullStatementComparison14454: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleBooleanComparisonOperator_in_ruleNullStatementComparison14497: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0000030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14541: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14623: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000000F8, 0x00000000]),
    FOLLOW_ruleBooleanComparisonOperator_in_ruleNullStatementComparison14666: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0000030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleNullSelectionClause_in_ruleNullStatementComparison14710: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_ruleNullStatementComparison14718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNullStatementComparison14726: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleNullStatementComparison14734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleNullStatementComparison14742: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleNullStatementComparison14750: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClause_in_ruleNullStatementComparison14757: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleNullStatementComparison14765: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampSelectionClause_in_ruleTimespanSingleStatementComparison14976: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0x0000FFC0,0x000000E0, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleTimespanSingleStatementComparison15020: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleTimespanForDateSetOfValues_in_ruleTimespanSingleStatementComparison15031: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleTimespanSingleStatementComparison15089: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanBetweenClause_in_ruleTimespanSingleStatementComparison15097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOption_in_ruleTimespanSingleStatementComparison15141: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanFromTimestampSelectionClause_in_ruleTimespanSingleStatementComparison15197: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_ruleTimespanBetweenClause15368: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimespanBetweenClause15375: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanClause_in_ruleTimespanBetweenClause15406: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClause_in_ruleStringSingleStatementComparison15613: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0x0000FFC0,0x07F860E0, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleStringSingleStatementComparison15656: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleStringSetOfValues_in_ruleStringSingleStatementComparison15665: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleStringSingleStatementComparison15709: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringBetweenClause_in_ruleStringSingleStatementComparison15717: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleIncludesPattern_in_ruleStringSingleStatementComparison15762: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00018000, 0x00000000]),
    FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringSingleStatementComparison15774: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringComparisonOptionOnly_in_ruleStringSingleStatementComparison15824: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSingleStatementComparison15836: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringComparisonOption_in_ruleStringSingleStatementComparison15885: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSingleStatementComparison15897: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringBetweenClause16024: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleStringBetweenClause16031: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringBetweenClause16062: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleBooleanSimpleSelection16202: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEBOOLEANPARAMETER_in_ruleBooleanSimpleSelection16234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanStatement16328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullSimpleSelection_in_ruleNullSelectionClause16529: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NULL_in_ruleNullSimpleSelection16643: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleBooleanSelection16765: new org.antlr.runtime.BitSet([0x00200000, 0x00000000]),
    FOLLOW_TYPEBOOLEAN_in_ruleBooleanSelection16776: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEBOOLEANCOLLECTION_in_ruleBooleanCollectionContext16896: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEBOOLEAN_in_ruleBooleanContext17023: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEBOOLEANDT_in_ruleBooleanAliasDTCollectionContext17144: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleBooleanCollection17388: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000003, 0x00000000]),
    FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17399: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleBooleanCollection17445: new org.antlr.runtime.BitSet([0x00200080, 0x00000000,0x00000003, 0x00000000]),
    FOLLOW_OF_in_ruleBooleanCollection17451: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleBooleanCollection17457: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000003, 0x00000000]),
    FOLLOW_CURRENT_in_ruleBooleanCollection17465: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000003, 0x00000000]),
    FOLLOW_ruleBooleanContext_in_ruleBooleanCollection17477: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17485: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleBooleanCollection17557: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleBooleanCollection17621: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000003, 0x00000000]),
    FOLLOW_ruleBooleanContext_in_ruleBooleanCollection17631: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleBooleanCollectionContext_in_ruleBooleanCollection17639: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleBooleanCollection17783: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanAliasDTCollectionContext_in_ruleBooleanCollection17830: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelection_in_ruleBooleanCompoundSelection17992: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanCollection_in_ruleBooleanCollectionSelectionClause18139: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSimpleSelection_in_ruleBooleanOnlySimpleSelectionClause18275: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSimpleSelection_in_ruleBooleanSelectionClause18403: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanCompoundSelection_in_ruleBooleanSelectionClause18432: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringContainFuzzyFunction_in_ruleBooleanAdvancedFunction18560: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringNotContainFuzzyFunction_in_ruleBooleanAdvancedFunction18591: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleSelectionStatement18720: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanAdvancedFunction_in_ruleBooleanSingleSelectionStatement18748: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleStatement18878: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0x00000000]),
    FOLLOW_ruleBooleanComparisonOperator_in_ruleBooleanSingleStatement18951: new org.antlr.runtime.BitSet([0x00200000, 0x70000000,0x00000001, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSingleStatement18960: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleBooleanSingleStatement19039: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleBooleanSetOfValues_in_ruleBooleanSingleStatement19047: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanBetweenClause19298: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleBooleanBetweenClause19305: new org.antlr.runtime.BitSet([0x00200000, 0x70000000,0x00000001, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanBetweenClause19336: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleBooleanSetOfValues19525: new org.antlr.runtime.BitSet([0x00300040, 0x70000000,0x00000007, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSetOfValues19534: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleBooleanSetOfValues19560: new org.antlr.runtime.BitSet([0x00200000, 0x70000000,0x00000001, 0x00000000]),
    FOLLOW_ruleBooleanSelectionClause_in_ruleBooleanSetOfValues19566: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleBooleanCollectionSelectionClause_in_ruleBooleanSetOfValues19583: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleBooleanSetOfValues19589: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NOT_EQUAL_SIGN_in_ruleBooleanComparisonOperator19758: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EQ_SIGN_in_ruleBooleanComparisonOperator19788: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_EQUAL_in_ruleBooleanComparisonOperator19816: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_EQUAL_in_ruleBooleanComparisonOperator19845: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_EQUAL_in_ruleBooleanComparisonOperator19874: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NOT_EQUAL_in_ruleBooleanComparisonOperator19903: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EQUALS_in_ruleBooleanComparisonOperator19932: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanCollection_in_ruleCollectionSelection20226: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollection_in_ruleCollectionSelection20267: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCollection_in_ruleCollectionSelection20307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeCollection_in_ruleCollectionSelection20347: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCollection_in_ruleCollectionSelection20387: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_maxDateAggregationOption_in_collectionAggregationOption20689: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_minDateAggregationOption_in_collectionAggregationOption20737: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LAST_in_maxDateAggregationOption20809: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_maxDateAggregationOption20811: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MOST_RECENT_in_maxDateAggregationOption20818: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_maxDateAggregationOption20820: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MAXIMUM_OF_in_maxDateAggregationOption20826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FIRST_in_minDateAggregationOption20893: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_minDateAggregationOption20895: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EARLIEST_in_minDateAggregationOption20902: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_minDateAggregationOption20904: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINIMUM_OF_in_minDateAggregationOption20909: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXISTS_IN_in_ruleSetOfValuesOperator21108: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_EXISTS_IN_in_ruleSetOfValuesOperator21153: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatement21483: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeSelectionClause21618: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleBaseTime_in_ruleTimeSelectionClause21624: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeSelectionClause21626: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTime_in_ruleTimeSelectionClause21667: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeCompoundSelection_in_ruleBaseTime21836: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeBaseSelection_in_ruleBaseTime21878: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeConstantSimpleSelection_in_ruleTimeBaseSelection21961: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTRING_in_ruleTimeConstantSimpleSelection22104: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEPARAMETER_in_ruleTimeConstantSimpleSelection22131: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTRING_in_ruleTimeStringSimpleSelection22239: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelection_in_ruleTimeCompoundSelection22328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimeAggregationSelection_in_ruleTimeCompoundSelection22369: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeCompoundSelection22406: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0000F801, 0x00000000]),
    FOLLOW_ruleTimeCompoundSelection_in_ruleTimeCompoundSelection22412: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeCompoundSelection22414: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimeSelection22536: new org.antlr.runtime.BitSet([0x00004000, 0x00000000]),
    FOLLOW_TYPETIME_in_ruleTimeSelection22548: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeSetOfValues22661: new org.antlr.runtime.BitSet([0x00104050, 0x00000000,0x0F00F801, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeSetOfValues22671: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleTimeSetOfValues22697: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeSetOfValues22704: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleTimeCollectionSelectionClause_in_ruleTimeSetOfValues22722: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeSetOfValues22729: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeBetweenDateClause22833: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimeBetweenDateClause22839: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeBetweenDateClause22852: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimeBetweenDateClause22886: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimeBetweenDateClause22892: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimeBetweenDateClause22905: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatementComparison23070: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0x8000FFC0,0x000000FF, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleTimeSingleStatementComparison23102: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleTimeSetOfValues_in_ruleTimeSingleStatementComparison23118: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleTimeSingleStatementComparison23135: new org.antlr.runtime.BitSet([0x00014050, 0x00000000,0xF300F801, 0x00000001]),
    FOLLOW_ruleTimeBetweenDateClause_in_ruleTimeSingleStatementComparison23151: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOption_in_ruleTimeSingleStatementComparison23169: new org.antlr.runtime.BitSet([0x00014050, 0x00000000,0xF300F801, 0x00000001]),
    FOLLOW_relativeDateClauseOp_in_ruleTimeSingleStatementComparison23177: new org.antlr.runtime.BitSet([0x00014050, 0x00000000,0xF300F801, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimeSingleStatementComparison23195: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimeSingleStatementComparison23204: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeCollection_in_ruleTimeCollectionSelectionClause23360: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMECOLLECTION_in_ruleTimeCollectionContext23509: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIME_in_ruleTimeContext23636: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEDT_in_ruleTimeAliasDTCollectionContext23768: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimeCollection24043: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000001, 0x00000000]),
    FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24055: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleTimeCollection24101: new org.antlr.runtime.BitSet([0x00004080, 0x00000000,0x04000001, 0x00000000]),
    FOLLOW_OF_in_ruleTimeCollection24107: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimeCollection24113: new org.antlr.runtime.BitSet([0x00004000, 0x00000000,0x04000001, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimeCollection24121: new org.antlr.runtime.BitSet([0x00004000, 0x00000000,0x04000001, 0x00000000]),
    FOLLOW_ruleTimeContext_in_ruleTimeCollection24134: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24142: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleTimeCollection24214: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimeCollection24278: new org.antlr.runtime.BitSet([0x00004000, 0x00000000,0x04000001, 0x00000000]),
    FOLLOW_ruleTimeContext_in_ruleTimeCollection24288: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleTimeCollectionContext_in_ruleTimeCollection24296: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleTimeCollection24441: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeAliasDTCollectionContext_in_ruleTimeCollection24488: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_collectionAggregationOption_in_ruleTimeAggregationFunction24766: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x0C000001, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleTimeCollection_in_ruleTimeAggregationFunction24896: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeAggregationFunction24900: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x0C000001, 0x00000000,0x00000200, 0x000000B0]),
    FOLLOW_ruleTimeCollection_in_ruleTimeAggregationFunction24907: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeAggregationFunction24909: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeAggregationFunction_in_ruleCompoundTimeAggregationSelection25015: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatement25197: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimestampSelectionClause25268: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampArithmeticSelectionClause_in_ruleTimestampSelectionClause25274: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimestampSelectionClause25276: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampArithmeticSelectionClause_in_ruleTimestampSelectionClause25318: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimestampArithmeticSelectionClause25485: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimestampArithmeticSelectionClause25491: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimestampArithmeticSelectionClause25493: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimestampArithmeticSelectionClause25534: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimestampArithmeticSelectionClause25610: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticAfterTimestampArithmetic_in_ruleTimestampArithmeticSelectionClause25684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseDate_in_ruleTimestampFromArithmetic25915: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimestampFromArithmetic25957: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimestampFromArithmetic25999: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampBaseConstant_in_ruleBaseTimestampConstant26382: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampConstantSelection_in_ruleTimestampBaseConstant26466: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_timestampConstant_in_ruleTimestampConstantSelection26609: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCompoundSelection_in_ruleBaseTimestamp26704: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampBaseSelection_in_ruleBaseTimestamp26746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampConstantSimpleSelection_in_ruleTimestampBaseSelection26830: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_timestampConstant_in_ruleTimestampConstantSimpleSelection26973: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTAMPSTRING_in_ruleTimestampConstantSimpleSelection26999: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMESTAMPPARAMETER_in_ruleTimestampConstantSimpleSelection27026: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTAMPSTRING_in_ruleTimestampStringSimpleSelection27134: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelection_in_ruleTimestampCompoundSelection27223: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimestampAggregationSelection_in_ruleTimestampCompoundSelection27264: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimestampCompoundSelection27301: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0x0000F801, 0x00000000]),
    FOLLOW_ruleTimestampCompoundSelection_in_ruleTimestampCompoundSelection27307: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimestampCompoundSelection27309: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimestampSelection27431: new org.antlr.runtime.BitSet([0x00010000, 0x00000000]),
    FOLLOW_TYPETIMESTAMP_in_ruleTimestampSelection27443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampBetweenDateClause27545: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimestampBetweenDateClause27550: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampBetweenDateClause27564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimestampBetweenDateClause27595: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimestampBetweenDateClause27601: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimestampBetweenDateClause27614: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleTimestampBetweenDateClause27644: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleTimestampBetweenDateClause27649: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSelectionClause_in_ruleTimestampBetweenDateClause27662: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatementComparison27823: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0xBC00FFC0,0x000000FF, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleTimestampSingleStatementComparison27855: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleDateSetOfValues_in_ruleTimestampSingleStatementComparison27871: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_intervalOp_in_ruleTimestampSingleStatementComparison27896: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimestampSingleStatementComparison27912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleTimestampSingleStatementComparison27929: new org.antlr.runtime.BitSet([0x0001C050, 0x00000000,0xF300F801, 0x00000031]),
    FOLLOW_ruleTimestampBetweenDateClause_in_ruleTimestampSingleStatementComparison27945: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOption_in_ruleTimestampSingleStatementComparison27962: new org.antlr.runtime.BitSet([0x0001C050, 0x00000000,0xF300F801, 0x00000031]),
    FOLLOW_ruleTimestampSingleStatementNumericRelativeComparison_in_ruleTimestampSingleStatementComparison27978: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_relativeDateClauseOp_in_ruleTimestampSingleStatementComparison28010: new org.antlr.runtime.BitSet([0x0001C050, 0x00000000,0xF300F801, 0x00000031]),
    FOLLOW_ruleTimestampSingleStatementNumericRelativeComparison_in_ruleTimestampSingleStatementComparison28025: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28212: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleTimestampSingleStatementNumericRelativeComparison28234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_timestampConstant28363: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCollection_in_ruleTimestampCollectionSelectionClause28531: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMESTAMPCOLLECTION_in_ruleTimestampCollectionContext28684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMESTAMP_in_ruleTimestampContext28803: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEDATEDT_in_ruleTimestampAliasDTCollectionContext28939: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimestampCollection29166: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000001, 0x00000002]),
    FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29178: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleTimestampCollection29224: new org.antlr.runtime.BitSet([0x00010080, 0x00000000,0x00000001, 0x00000002]),
    FOLLOW_OF_in_ruleTimestampCollection29230: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimestampCollection29236: new org.antlr.runtime.BitSet([0x00010000, 0x00000000,0x00000001, 0x00000002]),
    FOLLOW_CURRENT_in_ruleTimestampCollection29244: new org.antlr.runtime.BitSet([0x00010000, 0x00000000,0x00000001, 0x00000002]),
    FOLLOW_ruleTimestampContext_in_ruleTimestampCollection29257: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29265: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleTimestampCollection29337: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimestampCollection29401: new org.antlr.runtime.BitSet([0x00010000, 0x00000000,0x00000001, 0x00000002]),
    FOLLOW_ruleTimestampContext_in_ruleTimestampCollection29411: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleTimestampCollectionContext_in_ruleTimestampCollection29419: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleTimestampCollection29562: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampAliasDTCollectionContext_in_ruleTimestampCollection29610: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_collectionAggregationOption_in_ruleTimestampAggregationFunction29838: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x00000001, 0x00000006,0x00000200, 0x000000B0]),
    FOLLOW_ruleTimestampCollection_in_ruleTimestampAggregationFunction29968: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimestampAggregationFunction29972: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000006,0x00000200, 0x000000B0]),
    FOLLOW_ruleTimestampCollection_in_ruleTimestampAggregationFunction29979: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimestampAggregationFunction29981: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampAggregationFunction_in_ruleCompoundTimestampAggregationSelection30086: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateSelectionClause30252: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateArithmeticSelectionClause_in_ruleDateSelectionClause30258: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateSelectionClause30260: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateArithmeticSelectionClause_in_ruleDateSelectionClause30301: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateArithmeticSelectionClause30470: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseDate_in_ruleDateArithmeticSelectionClause30476: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateArithmeticSelectionClause30478: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleBaseDate_in_ruleDateArithmeticSelectionClause30519: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleDateArithmeticSelectionClause30595: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticAfterDateArithmetic_in_ruleDateArithmeticSelectionClause30669: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCompoundSelection_in_ruleBaseDate30792: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateBaseSelection_in_ruleBaseDate30900: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeSpanFromDateSubtractionWithBrackets30998: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleTimeSpanFromDateSubtraction_in_ruleTimeSpanFromDateSubtractionWithBrackets31004: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeSpanFromDateSubtractionWithBrackets31006: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31047: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31053: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimeSpanFromTimestampSubtractionWithBrackets31055: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseDate_in_ruleTimeSpanFromDateSubtraction31257: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_ruleTimeSpanFromDateSubtraction31299: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseDate_in_ruleTimeSpanFromDateSubtraction31341: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimestampConstant_in_ruleTimeSpanFromTimestampSubtraction31533: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction31612: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31655: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction31663: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31825: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction31867: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleBaseTimestamp_in_ruleTimeSpanFromTimestampSubtraction31909: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction31989: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_ruleTimeSpanFromTimestampSubtraction32031: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseDate_in_ruleTimeSpanFromTimestampSubtraction32073: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateConstantSimpleSelection_in_ruleDateBaseSelection32162: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_dateConstant_in_ruleDateConstantSimpleSelection32305: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DATESTRING_in_ruleDateConstantSimpleSelection32331: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEDATEPARAMETER_in_ruleDateConstantSimpleSelection32358: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DATESTRING_in_ruleDateStringSimpleSelection32466: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelection_in_ruleDateCompoundSelection32555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundDateAggregationSelection_in_ruleDateCompoundSelection32596: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateCompoundSelection32633: new org.antlr.runtime.BitSet([0x00008050, 0x00000000,0x0000F801, 0x00000000]),
    FOLLOW_ruleDateCompoundSelection_in_ruleDateCompoundSelection32639: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateCompoundSelection32641: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleDateSelection32763: new org.antlr.runtime.BitSet([0x00008000, 0x00000000]),
    FOLLOW_TYPEDATE_in_ruleDateSelection32774: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateSetOfValues32887: new org.antlr.runtime.BitSet([0x00118050, 0x00000000,0xF000F801, 0x00000037,0x00000300, 0x000000B0]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateSetOfValues32897: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleDateSetOfValues32905: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleDateSetOfValues32931: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateSetOfValues32938: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleDateSetOfValues32946: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleDateCollectionSelectionClause_in_ruleDateSetOfValues32965: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_ruleTimestampCollectionSelectionClause_in_ruleDateSetOfValues32973: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateSetOfValues32981: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateBetweenDateClause33087: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleDateBetweenDateClause33093: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateBetweenDateClause33106: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleDateBetweenDateClause33138: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_ruleDateBetweenDateClause33143: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleDateBetweenDateClause33156: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatement33339: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatementComparison33472: new org.antlr.runtime.BitSet([0x00000000, 0x00000600,0x000300F8, 0xBC00FFC0,0x000000FF, 0x00000000]),
    FOLLOW_ruleSetOfValuesOperator_in_ruleDateSingleStatementComparison33523: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleDateSetOfValues_in_ruleDateSingleStatementComparison33551: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_intervalOp_in_ruleDateSingleStatementComparison33609: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateSelectionClause_in_ruleDateSingleStatementComparison33637: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_betweenOp_in_ruleDateSingleStatementComparison33707: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateBetweenDateClause_in_ruleDateSingleStatementComparison33736: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOption_in_ruleDateSingleStatementComparison33772: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSingleStatementNumericRelativeComparison_in_ruleDateSingleStatementComparison33801: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_relativeDateClauseOp_in_ruleDateSingleStatementComparison33837: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSingleStatementNumericRelativeComparison_in_ruleDateSingleStatementComparison33866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleDateSingleStatementNumericRelativeComparison34049: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleDateSingleStatementNumericRelativeComparison34071: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GREATER_EQUAL_SIGN_in_ruleNumericComparisonOnlyOption34213: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LESS_EQUAL_SIGN_in_ruleNumericComparisonOnlyOption34251: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_EQUAL_OR_GREATER_THAN_in_ruleNumericComparisonOnlyOption34289: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GREATER_THAN_in_ruleNumericComparisonOnlyOption34301: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
    FOLLOW_OR_in_ruleNumericComparisonOnlyOption34307: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_EQUALS_in_ruleNumericComparisonOnlyOption34313: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_EQUAL_OR_LESS_THAN_in_ruleNumericComparisonOnlyOption34352: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LESS_THAN_in_ruleNumericComparisonOnlyOption34364: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
    FOLLOW_OR_in_ruleNumericComparisonOnlyOption34370: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_EQUALS_in_ruleNumericComparisonOnlyOption34376: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GREATER_SIGN_in_ruleNumericComparisonOnlyOption34414: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LESS_SIGN_in_ruleNumericComparisonOnlyOption34451: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleNumericComparisonOnlyOption34491: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleNumericComparisonOnlyOption34534: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanComparisonOperator_in_ruleNumericComparisonOption34644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOnlyOption_in_ruleNumericComparisonOption34652: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ROUND_in_ruleNumericTwoParamsFunctionName34771: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_POWER_in_ruleNumericTwoParamsFunctionName34809: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SIN_in_ruleNumericOneParamFunctionName34930: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COS_in_ruleNumericOneParamFunctionName34968: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LOG_in_ruleNumericOneParamFunctionName35005: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_IN_THE_LAST_in_intervalOp35639: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_IN_THE_LAST_in_intervalOp35701: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_IN_THE_NEXT_in_intervalOp35762: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_IN_THE_NEXT_in_intervalOp35822: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_relativeDateClauseOp36299: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_BEFORE_in_relativeDateClauseOp36318: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_relativeDateClauseOp36329: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_AFTER_in_relativeDateClauseOp36348: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_betweenOp36639: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_NOT_BETWEEN_in_betweenOp36658: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_dateConstant36875: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollection_in_ruleDateCollectionSelectionClause37047: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEDATECOLLECTION_in_ruleDateCollectionContext37246: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEDATE_in_ruleDateContext37373: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPEDATEDT_in_ruleDateAliasDTCollectionContext37505: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleDateCollection37732: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000001, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37743: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleDateCollection37789: new org.antlr.runtime.BitSet([0x00008080, 0x00000000,0x00000001, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_OF_in_ruleDateCollection37795: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleDateCollection37801: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00000001, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_CURRENT_in_ruleDateCollection37810: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00000001, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_ruleDateContext_in_ruleDateCollection37821: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37829: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleDateCollection37901: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleDateCollection37965: new org.antlr.runtime.BitSet([0x00008000, 0x00000000,0x00000001, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_ruleDateContext_in_ruleDateCollection37975: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleDateCollectionContext_in_ruleDateCollection37983: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleDateCollection38079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateAliasDTCollectionContext_in_ruleDateCollection38125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ALL_in_ruleAll38298: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_collectionAggregationOption_in_ruleDateAggregationFunction38481: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x00000001, 0x00000004,0x00000300, 0x000000B0]),
    FOLLOW_ruleDateCollection_in_ruleDateAggregationFunction38610: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleDateAggregationFunction38614: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000004,0x00000300, 0x000000B0]),
    FOLLOW_ruleDateCollection_in_ruleDateAggregationFunction38621: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleDateAggregationFunction38623: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateAggregationFunction_in_ruleCompoundDateAggregationSelection38758: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClause_in_ruleStringSingleStatement39026: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSelectionClause_in_ruleStringClause39092: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleStringClause39128: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00018800, 0x00000000]),
    FOLLOW_ruleStringSelectionClause_in_ruleStringClause39134: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleStringClause39136: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSelectionClauseStringAndDates_in_ruleStringClauseStringAndDates39304: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleStringClauseStringAndDates39340: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringSelectionClauseStringAndDates_in_ruleStringClauseStringAndDates39346: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleStringClauseStringAndDates39348: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSimpleSelection_in_ruleOneStringSimpleSelectionClause39588: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClause39713: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_PLUS_in_ruleStringSelectionClause39724: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00018800, 0x00000000]),
    FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClause39734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_ruleStringBaseSelectionStringAndDates_in_ruleStringSelectionClauseStringAndDates39891: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_PLUS_in_ruleStringSelectionClauseStringAndDates39902: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00018800, 0x00000000]),
    FOLLOW_ruleStringBaseSelection_in_ruleStringSelectionClauseStringAndDates39912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_ruleStringSimpleSelection_in_ruleStringBaseSelection39965: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCompoundSelection_in_ruleStringBaseSelection39975: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringAdvanceFunction_in_ruleStringBaseSelection39985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSimpleSelectionStringAndDates_in_ruleStringBaseSelectionStringAndDates40033: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCompoundSelection_in_ruleStringBaseSelectionStringAndDates40043: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringAdvanceFunction_in_ruleStringBaseSelectionStringAndDates40053: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringConcatenateFunction_in_ruleStringAdvanceFunction40102: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CONCATENATE_in_ruleStringConcatenateFunction40185: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleStringConcatenateFunction40220: new org.antlr.runtime.BitSet([0x0019CC50, 0x00000030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleConcatenateInputOptions_in_ruleStringConcatenateFunction40259: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleStringConcatenateFunction40266: new org.antlr.runtime.BitSet([0x0019CC50, 0x00000030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_ruleConcatenateInputOptions_in_ruleStringConcatenateFunction40272: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_RROUNDB_in_ruleStringConcatenateFunction40318: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_ruleConcatenateInputOptions40365: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_ruleConcatenateInputOptions40375: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSelectionClause_in_ruleConcatenateInputOptions40385: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSelectionClause_in_ruleConcatenateInputOptions40395: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_ruleConcatenateInputOptions40405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleConcatenateInputOptions40415: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumberBetweenZeroToOne_in_ruleOneToZeroSimpleSelectionClause40558: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WITH_FUZZY_in_ruleNumericFuzzyFunction40653: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000038]),
    FOLLOW_ruleOneToZeroSimpleSelectionClause_in_ruleNumericFuzzyFunction40685: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericFuzzyFunction_in_ruleNumericFuzzyFunctionSelectionClause40819: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringNavigationOnlySelectionClause_in_ruleStringContainFuzzyFunction40894: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
    FOLLOW_CONTAINS_in_ruleStringContainFuzzyFunction40916: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00018000, 0x00000000]),
    FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringContainFuzzyFunction40947: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
    FOLLOW_ruleNumericFuzzyFunctionSelectionClause_in_ruleStringContainFuzzyFunction40982: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringNavigationOnlySelectionClause_in_ruleStringNotContainFuzzyFunction41064: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_DOES_NOT_CONTAIN_in_ruleStringNotContainFuzzyFunction41086: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00018000, 0x00000000]),
    FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleStringNotContainFuzzyFunction41117: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
    FOLLOW_ruleNumericFuzzyFunctionSelectionClause_in_ruleStringNotContainFuzzyFunction41152: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSelection_in_ruleStringCompoundSelection41285: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STRING_in_ruleStringSimpleSelection41415: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESTRINGPARAMETER_in_ruleStringSimpleSelection41438: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DATESTRING_in_ruleStringSimpleSelectionStringAndDates41576: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTRING_in_ruleStringSimpleSelectionStringAndDates41611: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TIMESTAMPSTRING_in_ruleStringSimpleSelectionStringAndDates41646: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STRING_in_ruleStringSimpleSelectionStringAndDates41662: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESTRINGPARAMETER_in_ruleStringSimpleSelectionStringAndDates41685: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleStringSelection41807: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_TYPESTRING_in_ruleStringSelection41818: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESTRING_in_ruleStringNavigationOnly41947: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringNavigationOnly_in_ruleStringNavigationOnlySelection42075: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringNavigationOnlySelection_in_ruleStringNavigationOnlySelectionClause42216: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringCollection_in_ruleStringCollectionSelectionClause42343: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleStringCollectionContext42536: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESTRING_in_ruleStringContext42676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESTRINGDT_in_ruleStringAliasDTCollectionContext42805: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringAliasDTCollectionContext_in_ruleStringCollection43062: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleStringCollection43126: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43137: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleStringCollection43183: new org.antlr.runtime.BitSet([0x00080080, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_OF_in_ruleStringCollection43189: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleStringCollection43195: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_CURRENT_in_ruleStringCollection43204: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringContext_in_ruleStringCollection43215: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43223: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleStringCollection43295: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleStringCollection43360: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringContext_in_ruleStringCollection43370: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringCollection43378: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleStringCollection43523: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleStringBaseCollection43748: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection43759: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleStringBaseCollection43805: new org.antlr.runtime.BitSet([0x00080080, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_OF_in_ruleStringBaseCollection43811: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleStringBaseCollection43817: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_CURRENT_in_ruleStringBaseCollection43826: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringContext_in_ruleStringBaseCollection43837: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection43845: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleStringBaseCollection43917: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleStringBaseCollection43982: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000001, 0x00000000,0x00060000, 0x00000000]),
    FOLLOW_ruleStringContext_in_ruleStringBaseCollection43992: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleStringCollectionContext_in_ruleStringBaseCollection44000: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleStringBaseCollection44145: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleStringSetOfValues44353: new org.antlr.runtime.BitSet([0x00180050, 0x00000000,0x11000001, 0x00000010,0x00078A00, 0x000000B0]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSetOfValues44361: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleStringSetOfValues44385: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x11000001, 0x00000010,0x00018800, 0x00000000]),
    FOLLOW_ruleStringClauseStringAndDates_in_ruleStringSetOfValues44391: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleStringCollectionSelectionClause_in_ruleStringSetOfValues44406: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleStringSetOfValues44430: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleStringComparisonOptionOnly44587: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleStringComparisonOptionOnly44605: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CONTAINS_in_ruleStringComparisonOptionOnly44689: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_CONTAIN_in_ruleStringComparisonOptionOnly44701: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_START_in_ruleStringComparisonOptionOnly44733: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_START_WITH_in_ruleStringComparisonOptionOnly44745: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_END_in_ruleStringComparisonOptionOnly44789: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_END_WITH_in_ruleStringComparisonOptionOnly44801: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CONTAINS_in_ruleIncludesPattern44968: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x00000000]),
    FOLLOW_PATTERN_in_ruleIncludesPattern44975: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOES_NOT_CONTAIN_in_ruleIncludesPattern45007: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x08000000, 0x00000000]),
    FOLLOW_PATTERN_in_ruleIncludesPattern45015: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanComparisonOperator_in_ruleStringComparisonOption45731: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericComparisonOnlyOption_in_ruleStringComparisonOption45739: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleNumberBetweenZeroToOne45903: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBERPARAMETER_in_ruleNumberBetweenZeroToOne45935: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_in_ruleNumber46064: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000000D8]),
    FOLLOW_set_in_ruleNumber46074: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBERPARAMETER_in_ruleNumber46114: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleInteger46254: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBERPARAMETER_in_ruleInteger46286: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleNumericSelection46434: new org.antlr.runtime.BitSet([0x00000800, 0x00000000]),
    FOLLOW_TYPENUMBER_in_ruleNumericSelection46444: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBERCOLLECTION_in_ruleNumericCollectionContext46555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBER_in_ruleNumericContext46683: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPENUMBERDT_in_ruleNumericAliasDTCollectionContext46804: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericBaseCollection_in_ruleNumericCollection46951: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericDTAliasCollection_in_ruleNumericCollection46995: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericGroupOfAggregation_in_ruleNumericCollection47039: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericGroupOfCount_in_ruleNumericCollection47083: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericAliasDTCollectionContext_in_ruleNumericDTAliasCollection47224: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleNumericBaseCollection47399: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47409: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleNumericBaseCollection47455: new org.antlr.runtime.BitSet([0x00000880, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_OF_in_ruleNumericBaseCollection47461: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleNumericBaseCollection47467: new org.antlr.runtime.BitSet([0x00000800, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_CURRENT_in_ruleNumericBaseCollection47476: new org.antlr.runtime.BitSet([0x00000800, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_ruleNumericContext_in_ruleNumericBaseCollection47489: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47499: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleNumericBaseCollection47572: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleNumericBaseCollection47636: new org.antlr.runtime.BitSet([0x00000800, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_ruleNumericContext_in_ruleNumericBaseCollection47647: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleNumericCollectionContext_in_ruleNumericBaseCollection47657: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleNumericBaseCollection47837: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericAggregationFunction_in_ruleCompoundNumericSelection47955: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCount_in_ruleCompoundNumericSelection47997: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumber_in_ruleNumericBaseSelection48235: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSelection_in_ruleNumericBaseSelection48277: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundNumericSelection_in_ruleNumericBaseSelection48319: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericAdvanceFunction_in_ruleNumericBaseSelection48361: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericOneParamFunction_in_ruleNumericAdvanceFunction48440: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericTwoParamsFunction_in_ruleNumericAdvanceFunction48477: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericOccurencesRegexpFunction_in_ruleNumericAdvanceFunction48510: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericOneParamFunctionName_in_ruleNumericOneParamFunction48602: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericOneParamFunction48640: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericSelectionClause_in_ruleNumericOneParamFunction48680: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericOneParamFunction48718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericTwoParamsFunctionName_in_ruleNumericTwoParamsFunction48809: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericTwoParamsFunction48847: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericSelectionClause_in_ruleNumericTwoParamsFunction48887: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleNumericTwoParamsFunction48926: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericSelectionClause_in_ruleNumericTwoParamsFunction48967: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericTwoParamsFunction49006: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NUMBER_OF_in_ruleNumericOccurencesRegexpFunction49088: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
    FOLLOW_OCCURENCES_REGEXP_in_ruleNumericOccurencesRegexpFunction49091: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00018000, 0x00000000]),
    FOLLOW_ruleOneStringSimpleSelectionClause_in_ruleNumericOccurencesRegexpFunction49164: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_IN_in_ruleNumericOccurencesRegexpFunction49202: new org.antlr.runtime.BitSet([0x00080010, 0x00000000,0x00000001, 0x00000000,0x00018800, 0x00000000]),
    FOLLOW_ruleStringClause_in_ruleNumericOccurencesRegexpFunction49243: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericArithmeticArray_in_ruleNumericSelectionClause49367: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticMinus_in_ruleNumericArithmeticArray49511: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_mexpr_in_ruleNumericArithmeticArray49521: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleNumericArithmeticArray49531: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_mexpr_in_ruleNumericArithmeticArray49541: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_atom_in_mexpr49676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleArithmeticMultDiv_in_mexpr49688: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_atom_in_mexpr49697: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleNumericBaseSelection_in_atom49822: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_atom49849: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericArithmeticArray_in_atom49858: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_atom49868: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSelectionClause_in_ruleNumericClause49941: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericClause49977: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericSelectionClause_in_ruleNumericClause49983: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericClause49985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNumericStatement50161: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleArithmetic50280: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleArithmeticPlusMinus50351: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_in_ruleArithmeticMinus50406: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleArithmeticMultDiv50449: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MULT_in_ruleArithmeticMult50513: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericSetOfValues50634: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericCollectionSelectionClause_in_ruleNumericSetOfValues50642: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_ruleNumericClause_in_ruleNumericSetOfValues50666: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleNumericSetOfValues50690: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericClause_in_ruleNumericSetOfValues50696: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_RROUNDB_in_ruleNumericSetOfValues50723: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericCollection_in_ruleNumericCollectionSelectionClause50898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_avgNumberAggregationOption_in_numericAggregationOption51090: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_sumNumberAggregationOption_in_numericAggregationOption51137: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_maxNumberAggregationOption_in_numericAggregationOption51182: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_minNumberAggregationOption_in_numericAggregationOption51228: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_HIGHEST_in_maxNumberAggregationOption51354: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_maxNumberAggregationOption51356: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MAXIMUM_OF_in_maxNumberAggregationOption51362: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LOWEST_in_minNumberAggregationOption51427: new org.antlr.runtime.BitSet([0x00000082, 0x00000000]),
    FOLLOW_OF_in_minNumberAggregationOption51429: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINIMUM_OF_in_minNumberAggregationOption51434: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AVERAGE_OF_in_avgNumberAggregationOption51494: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SUM_OF_in_sumNumberAggregationOption51561: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericAggregationOption_in_ruleNumericAggregationFunction51993: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0000A001, 0x00000000,0x00000200, 0x0003C7B0]),
    FOLLOW_ruleNumericCollection_in_ruleNumericAggregationFunction52043: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericAggregationFunction52047: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0000A001, 0x00000000,0x00000200, 0x0003C7B0]),
    FOLLOW_ruleNumericCollection_in_ruleNumericAggregationFunction52053: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericAggregationFunction52055: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericAggregationOption_in_ruleNumericGroupOfAggregation52253: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x00000001, 0x00000000,0x00000200, 0x000001B0]),
    FOLLOW_ruleNumericBaseCollection_in_ruleNumericGroupOfAggregation52261: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericGroupOfAggregation52265: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000001, 0x00000000,0x00000200, 0x000001B0]),
    FOLLOW_ruleNumericBaseCollection_in_ruleNumericGroupOfAggregation52271: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericGroupOfAggregation52273: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_groupByClause_in_ruleNumericGroupOfAggregation52386: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericCountAggregationOption_in_ruleCount52584: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountOptions_in_ruleCount52592: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleCount52596: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountOptions_in_ruleCount52602: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleCount52604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericCountDistinctAggregationOption_in_ruleCount52667: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleCount52675: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleCount52679: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleCount52685: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleCount52687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCollectionSelection_in_ruleCountAttributeOptions52896: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericCollection_in_ruleCountAttributeOptions52958: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanCollection_in_ruleCountAttributeOptions53020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleCountOptions53210: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleRootCollectionSelection_in_ruleCountOptions53272: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericCountDistinctAggregationOption_in_ruleCountDistinct53442: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleCountDistinct53545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleCountDistinct53595: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleCountDistinct53601: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleCountDistinct53603: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericCountAggregationOption_in_ruleNumericGroupOfCount53870: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountOptions_in_ruleNumericGroupOfCount53878: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericGroupOfCount53882: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountOptions_in_ruleNumericGroupOfCount53888: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericGroupOfCount53890: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_numericCountDistinctAggregationOption_in_ruleNumericGroupOfCount53950: new org.antlr.runtime.BitSet([0x00100050, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleNumericGroupOfCount53958: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleNumericGroupOfCount53962: new org.antlr.runtime.BitSet([0x00100040, 0x00000030,0x0C00A007, 0x00000006,0x00060300, 0x0003C7B0,0x00000003, 0x00000000]),
    FOLLOW_ruleCountAttributeOptions_in_ruleNumericGroupOfCount53968: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleNumericGroupOfCount53970: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_groupByClause_in_ruleNumericGroupOfCount54117: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_numericCountAggregationOption54338: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COUNT_DISTINCT_OF_in_numericCountDistinctAggregationOption54607: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_timeConstant54739: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_timespanForDateConstant54822: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericTimespanClause_in_ruleSimpleTimespanClause55013: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEINTERVALPARAMETER_in_ruleSimpleTimespanClause55071: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericTimespanForDateClause_in_ruleSimpleTimespanForDateClause55241: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEINTERVALPARAMETER_in_ruleSimpleTimespanForDateClause55299: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleNumericTimespanClause55438: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x7F000000]),
    FOLLOW_TYPENUMBERPARAMETER_in_ruleNumericTimespanClause55456: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x7F000000]),
    FOLLOW_timeConstant_in_ruleNumericTimespanClause55467: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_timespanForDateConstant_in_ruleNumericTimespanClause55475: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_ruleNumericTimespanForDateClause55602: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x7F000000]),
    FOLLOW_TYPENUMBERPARAMETER_in_ruleNumericTimespanForDateClause55620: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x7F000000]),
    FOLLOW_timespanForDateConstant_in_ruleNumericTimespanForDateClause55630: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimespanSelection55753: new org.antlr.runtime.BitSet([0x00000400, 0x00000000]),
    FOLLOW_TYPETIMEINTERVAL_in_ruleTimespanSelection55764: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEINTERVALCOLLECTION_in_ruleTimespanCollectionContext55948: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEINTERVAL_in_ruleTimespanContext56079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanAggregationFunction_in_ruleCompoundTimespanSelection56199: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimespan_in_ruleTimespanBaseSelection56438: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_ruleTimespanBaseSelection56480: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanBaseSelection56555: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseForDateTimespan_in_ruleTimespanForDateBaseSelection56778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_ruleTimespanForDateBaseSelection56820: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanForDateBaseSelection56928: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleSimpleTimespanClause_in_ruleBaseTimespan57058: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_ruleBaseTimespan57104: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelection_in_ruleBaseTimespan57146: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleSimpleTimespanForDateClause_in_ruleBaseForDateTimespan57241: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_ruleBaseForDateTimespan57287: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelection_in_ruleBaseForDateTimespan57329: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanForDateArithmetic_in_ruleTimespanForDateSelectionClause57496: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanArithmetic_in_ruleTimespanSelectionClause57644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanForDateArithmetic_in_ruleTimespanFromDateSelectionClause57792: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampArithmetic_in_ruleTimespanFromTimestampSelectionClause57941: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimespanForDateArithmetic58082: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanForDateArithmetic58090: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanForDateArithmetic58199: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_ruleTimespanForDateArithmetic58205: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanForDateArithmetic58247: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanForDateArithmetic58253: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampArithmetic_in_ruleTimespanArithmetic58425: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_ruleTimespanFromTimestampArithmeticSubtraction58569: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticSubtraction58681: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticSubtraction58687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticSubtraction58732: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanFromTimestampArithmeticSubtraction58738: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticMultDiv59021: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticMultDiv59133: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanFromTimestampArithmeticMultDiv59139: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromTimestampArithmeticMultDiv59184: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_ruleTimespanFromTimestampArithmeticMultDiv59190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampArithmeticSubtraction_in_ruleTimespanFromTimestampArithmetic59473: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampArithmeticMultDiv_in_ruleTimespanFromTimestampArithmetic59481: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromDateSubtraction_in_ruleTimespanFromDateArithmetic59686: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanArithmeticForDateMultDiv_in_ruleTimespanFromDateArithmetic59694: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanFromDateArithmetic59738: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_ruleTimespanFromDateArithmetic59781: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanArithmeticForDateMultDiv_in_ruleTimespanFromDateArithmetic59788: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanArithmeticAfterTimestampArithmetic60001: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanArithmeticAfterTimestampArithmetic60045: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_ruleTimespanArithmeticAfterTimestampArithmetic60087: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanArithmeticAfterDateArithmetic60267: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_ruleTimespanArithmeticAfterDateArithmetic60311: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_ruleTimespanArithmeticAfterDateArithmetic60353: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000008,0x00000400, 0x00000000]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60570: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_ruleArithmeticMult_in_ruleTimespanForDateArithmeticMultDiv60578: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60624: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanForDateArithmeticMultDiv60633: new org.antlr.runtime.BitSet([0x00100840, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanForDateArithmeticMultDiv60676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticMultDiv60858: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_ruleArithmeticMult_in_ruleTimespanArithmeticMultDiv60866: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanBaseSelection_in_ruleTimespanArithmeticMultDiv60912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanArithmeticMultDiv60921: new org.antlr.runtime.BitSet([0x00100840, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticMultDiv60964: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61146: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_ruleArithmeticMult_in_ruleTimespanArithmeticForDateMultDiv61154: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61200: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleArithmeticMultDiv_in_ruleTimespanArithmeticForDateMultDiv61209: new org.antlr.runtime.BitSet([0x00100840, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBaseSelection_in_ruleTimespanArithmeticForDateMultDiv61252: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003000]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanClause61313: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanClause61349: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanClause61355: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanClause61357: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromDateClause61465: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanFromDateClause61501: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromDateClause61507: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanFromDateClause61509: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromTimestampClause61633: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanFromTimestampClause61669: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanSelectionClause_in_ruleTimespanFromTimestampClause61675: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanFromTimestampClause61677: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_ruleTimespanStatement61849: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanForDateSetOfValues62033: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8,0x00000003, 0x00000000]),
    FOLLOW_ruleTimespanFromDateClause_in_ruleTimespanForDateSetOfValues62041: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleTimespanForDateSetOfValues62065: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanFromDateClause_in_ruleTimespanForDateSetOfValues62071: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleTimespanCollectionSelectionClause_in_ruleTimespanForDateSetOfValues62086: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanForDateSetOfValues62110: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanForTimestampSetOfValues62223: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8,0x00000003, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampClause_in_ruleTimespanForTimestampSetOfValues62231: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_SEMICOLON_in_ruleTimespanForTimestampSetOfValues62255: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanFromTimestampClause_in_ruleTimespanForTimestampSetOfValues62261: new org.antlr.runtime.BitSet([0x00000020, 0x00000001]),
    FOLLOW_ruleTimespanCollectionSelectionClause_in_ruleTimespanForTimestampSetOfValues62276: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanForTimestampSetOfValues62300: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanCollection_in_ruleTimespanCollectionSelectionClause62450: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericAggregationOption_in_ruleTimespanAggregationFunction62597: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x0000A000, 0x00000000,0x00000200, 0x0003C0B0,0x00000003, 0x00000000]),
    FOLLOW_ruleTimespanCollection_in_ruleTimespanAggregationFunction62647: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanAggregationFunction62651: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x0000A000, 0x00000000,0x00000200, 0x0003C0B0,0x00000003, 0x00000000]),
    FOLLOW_ruleTimespanCollection_in_ruleTimespanAggregationFunction62657: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanAggregationFunction62659: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_numericAggregationOption_in_ruleTimespanGroupOfAggregation62849: new org.antlr.runtime.BitSet([0x00100050, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x000000B0,0x00000001, 0x00000000]),
    FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanGroupOfAggregation62857: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_LROUNDB_in_ruleTimespanGroupOfAggregation62861: new org.antlr.runtime.BitSet([0x00100040, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x000000B0,0x00000001, 0x00000000]),
    FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanGroupOfAggregation62867: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_ruleTimespanGroupOfAggregation62869: new org.antlr.runtime.BitSet([0xC0000000, 0x00000000]),
    FOLLOW_groupByClause_in_ruleTimespanGroupOfAggregation62982: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanBaseCollection_in_ruleTimespanCollection63213: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanDTAliasCollection_in_ruleTimespanCollection63257: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanGroupOfAggregation_in_ruleTimespanCollection63301: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPETIMEINTERVALDT_in_ruleTimespanAliasDTCollectionContext63374: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanAliasDTCollectionContext_in_ruleTimespanDTAliasCollection63617: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection63794: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleInteger_in_ruleTimespanBaseCollection63840: new org.antlr.runtime.BitSet([0x00000480, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
    FOLLOW_OF_in_ruleTimespanBaseCollection63846: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimespanBaseCollection63852: new org.antlr.runtime.BitSet([0x00000400, 0x00000000,0x00000001, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
    FOLLOW_CURRENT_in_ruleTimespanBaseCollection63861: new org.antlr.runtime.BitSet([0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
    FOLLOW_ruleTimespanContext_in_ruleTimespanBaseCollection63874: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection63884: new org.antlr.runtime.BitSet([0x00063300, 0x00000000]),
    FOLLOW_ruleSortingOptions_in_ruleTimespanBaseCollection63957: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleAll_in_ruleTimespanBaseCollection64021: new org.antlr.runtime.BitSet([0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
    FOLLOW_ruleTimespanContext_in_ruleTimespanBaseCollection64032: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_ruleTimespanCollectionContext_in_ruleTimespanBaseCollection64042: new org.antlr.runtime.BitSet([0x00C00002, 0x00000000]),
    FOLLOW_filterClause_in_ruleTimespanBaseCollection64187: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelSingleExpression_in_synpred1_IDP312: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelCollection_in_synpred2_IDP316: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelBooleanPure_in_synpred3_IDP423: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelNumric_in_synpred4_IDP427: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelString_in_synpred5_IDP431: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTimespan_in_synpred6_IDP435: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelDate_in_synpred7_IDP440: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelTime_in_synpred8_IDP444: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelSingleExpression_in_synpred9_IDP552: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelDateCollection_in_synpred15_IDP2183: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_modelCollection_in_synpred17_IDP3545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericStatement_in_synpred44_IDP9436: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatement_in_synpred45_IDP9482: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanStatement_in_synpred46_IDP9524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatement_in_synpred47_IDP9564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatement_in_synpred48_IDP9604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelBooleanWhere_in_synpred56_IDP9971: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SEMICOLON_in_synpred59_IDP10527: new org.antlr.runtime.BitSet([0x0029CC00, 0x00000000]),
    FOLLOW_groupByArray_in_synpred59_IDP10535: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexAndModelBooleanEnhanced_in_synpred60_IDP10826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleModelBooleanEnhanced_in_synpred62_IDP11120: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AND_in_synpred66_IDP11679: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_singleStatementBoolean_in_synpred66_IDP11690: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_OR_in_synpred71_IDP12526: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_complexAndStatementBooleanWhere_in_synpred71_IDP12537: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AND_in_synpred72_IDP12624: new org.antlr.runtime.BitSet([0x0039CC50, 0xF0003030,0xF300F801, 0x001F0039,0x00018A00, 0x8003C7F8]),
    FOLLOW_singleStatementBooleanWhere_in_synpred72_IDP12635: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleStatement_in_synpred73_IDP12829: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleSelectionStatement_in_synpred74_IDP12857: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSingleStatementComparison_in_synpred75_IDP12884: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullStatementComparison_in_synpred76_IDP12911: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatementComparison_in_synpred77_IDP12956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSingleStatementComparison_in_synpred78_IDP12983: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatementComparison_in_synpred79_IDP13010: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatementComparison_in_synpred80_IDP13037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatementComparison_in_synpred81_IDP13064: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStatementBooleanWhere_in_synpred82_IDP13115: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSingleStatementComparison_in_synpred83_IDP13296: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNullStatementComparison_in_synpred84_IDP13323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleStatement_in_synpred85_IDP13350: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBooleanSingleSelectionStatement_in_synpred86_IDP13378: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSingleStatementComparison_in_synpred87_IDP13405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSingleStatementComparison_in_synpred88_IDP13432: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSingleStatementComparison_in_synpred89_IDP13459: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSingleStatementComparison_in_synpred90_IDP13486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSingleStatementComparison_in_synpred91_IDP13513: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_complexStatementBoolean_in_synpred92_IDP13564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_synpred96_IDP14406: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_synpred97_IDP14414: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred98_IDP14422: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred99_IDP14430: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred100_IDP14438: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClause_in_synpred101_IDP14446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanClause_in_synpred104_IDP14718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericClause_in_synpred105_IDP14726: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred106_IDP14734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred107_IDP14742: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred108_IDP14750: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringClause_in_synpred109_IDP14757: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollection_in_synpred145_IDP20267: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampCollection_in_synpred146_IDP20307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_synpred158_IDP21618: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleBaseTime_in_synpred158_IDP21624: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_synpred158_IDP21626: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred168_IDP22833: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_synpred168_IDP22839: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred168_IDP22852: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred173_IDP23195: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_synpred184_IDP25268: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampArithmeticSelectionClause_in_synpred184_IDP25274: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_synpred184_IDP25276: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_synpred185_IDP25485: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleBaseTimestamp_in_synpred185_IDP25491: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_synpred185_IDP25493: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred186_IDP25610: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticAfterTimestampArithmetic_in_synpred186_IDP25684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred194_IDP27545: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_synpred194_IDP27550: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred194_IDP27564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred196_IDP27595: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_synpred196_IDP27601: new org.antlr.runtime.BitSet([0x00004050, 0x00000000,0x0300F801, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred196_IDP27614: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred202_IDP28190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred203_IDP28212: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_synpred216_IDP30252: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateArithmeticSelectionClause_in_synpred216_IDP30258: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_synpred216_IDP30260: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LROUNDB_in_synpred217_IDP30470: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseDate_in_synpred217_IDP30476: new org.antlr.runtime.BitSet([0x00000020, 0x00000000]),
    FOLLOW_RROUNDB_in_synpred217_IDP30478: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred218_IDP30595: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticAfterDateArithmetic_in_synpred218_IDP30669: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimestamp_in_synpred220_IDP31655: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimestampConstant_in_synpred221_IDP31533: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_synpred221_IDP31612: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleBaseTimestamp_in_synpred221_IDP31655: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseDate_in_synpred221_IDP31663: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimestamp_in_synpred222_IDP31825: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_MINUS_in_synpred222_IDP31867: new org.antlr.runtime.BitSet([0x00010050, 0x00000000,0xF000F801, 0x00000001]),
    FOLLOW_ruleBaseTimestamp_in_synpred222_IDP31909: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred228_IDP32897: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred229_IDP32938: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateCollectionSelectionClause_in_synpred233_IDP32965: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred235_IDP33087: new org.antlr.runtime.BitSet([0x00000000, 0x08000100]),
    FOLLOW_set_in_synpred235_IDP33093: new org.antlr.runtime.BitSet([0x00018050, 0x00000000,0xF000F801, 0x00000031]),
    FOLLOW_ruleDateSelectionClause_in_synpred235_IDP33106: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred241_IDP34049: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimestampSelectionClause_in_synpred288_IDP40365: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSelectionClause_in_synpred289_IDP40375: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringSelectionClause_in_synpred290_IDP40385: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSelectionClause_in_synpred291_IDP40395: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleDateSelectionClause_in_synpred292_IDP40405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleStringAliasDTCollectionContext_in_synpred300_IDP43062: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticMinus_in_synpred357_IDP49511: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred358_IDP49531: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_mexpr_in_synpred358_IDP49541: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticMultDiv_in_synpred359_IDP49688: new org.antlr.runtime.BitSet([0x00100850, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_atom_in_synpred359_IDP49697: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericSelectionClause_in_synpred361_IDP49941: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleNumericCollectionSelectionClause_in_synpred367_IDP50642: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseTimespan_in_synpred402_IDP56438: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_synpred403_IDP56480: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleBaseForDateTimespan_in_synpred404_IDP56778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleCompoundTimespanSelection_in_synpred405_IDP56820: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromTimestampSubtraction_in_synpred410_IDP58082: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred411_IDP58199: new org.antlr.runtime.BitSet([0x00000010, 0x00000000]),
    FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_synpred411_IDP58205: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred412_IDP58247: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_synpred412_IDP58253: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred413_IDP58681: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred413_IDP58687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred414_IDP58681: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred414_IDP58687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred414_IDP58732: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_synpred414_IDP58738: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred415_IDP59133: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred415_IDP59139: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred416_IDP59133: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred416_IDP59139: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred416_IDP59184: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimeSpanFromTimestampSubtractionWithBrackets_in_synpred416_IDP59190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanFromTimestampArithmeticSubtraction_in_synpred417_IDP59473: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromDateSubtraction_in_synpred418_IDP59686: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimeSpanFromDateSubtractionWithBrackets_in_synpred419_IDP59781: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred421_IDP60045: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanArithmeticMultDiv_in_synpred421_IDP60087: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticPlusMinus_in_synpred422_IDP60311: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanForDateArithmeticMultDiv_in_synpred422_IDP60353: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticMultDiv_in_synpred424_IDP60633: new org.antlr.runtime.BitSet([0x00100840, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBaseSelection_in_synpred424_IDP60676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleArithmeticMultDiv_in_synpred426_IDP60921: new org.antlr.runtime.BitSet([0x00100840, 0x00000030,0x0000A001, 0x001F0008,0x00000200, 0x0003C7F8]),
    FOLLOW_ruleNumericBaseSelection_in_synpred426_IDP60964: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_synpred429_IDP61313: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_synpred430_IDP61465: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanSelectionClause_in_synpred431_IDP61633: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ruleTimespanFromDateClause_in_synpred433_IDP62041: new org.antlr.runtime.BitSet([0x00000002, 0x00000001]),
    FOLLOW_SEMICOLON_in_synpred433_IDP62065: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanFromDateClause_in_synpred433_IDP62071: new org.antlr.runtime.BitSet([0x00000002, 0x00000001]),
    FOLLOW_ruleTimespanFromTimestampClause_in_synpred435_IDP62231: new org.antlr.runtime.BitSet([0x00000002, 0x00000001]),
    FOLLOW_SEMICOLON_in_synpred435_IDP62255: new org.antlr.runtime.BitSet([0x00118C50, 0x00000030,0xF000F801, 0x001F0039,0x00000200, 0x8003C7F8]),
    FOLLOW_ruleTimespanFromTimestampClause_in_synpred435_IDP62261: new org.antlr.runtime.BitSet([0x00000002, 0x00000001])
});

})();
	return IDPParser;
}());