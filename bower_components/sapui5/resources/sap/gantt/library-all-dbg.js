// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.gantt.library-all');
if ( !jQuery.sap.isDeclared('sap.gantt.AdhocLine') ) {
jQuery.sap.declare('sap.gantt.AdhocLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/AdhocLine",[
	"sap/ui/core/Element"
], function (Element) {
	"use strict";

	/**
	 * Creates and initializes a new AdhocLine class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * The AdhocLine class contains properties to draw an additional vertical line at specific
	 * time points in the chart area. You can use this line to mark milestones, such as the
	 * start of a project start, and special events, such as holidays.
	 * 
	 * @extends sap.ui.core.Element
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.AdhocLine
	 */
	var AdhocLine = Element.extend("sap.gantt.AdhocLine", /** @lends sap.gantt.AdhocLine.prototype */{
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Standard SVG 'stroke' attribute.
				 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
				 * You can provide the stroke attribute with HTML colors and the URL reference to the paint server.
				 * Paint server definitions usually come from paint servers rendered by {@link sap.gantt.GanttChartContainer},
				 * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
				 */
				stroke: {type : "sap.gantt.ValueSVGPaintServer"},

				/**
				 * Standard SVG 'stroke-width' attribute.
				 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
				 */
				strokeWidth: {type: "float", defaultValue: 1},

				/**
				 * Standard SVG 'stroke-dasharray' attribute.
				 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-dasharray'}.
				 */
				strokeDasharray: {type: "string"},

				/**
				 * Standard SVG 'stroke-opacity' attribute.
				 * See {@link http://www.w3.org/TR/SVG11/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
				 */
				strokeOpacity: {type: "float", defaultValue: 1},
				//enableDnD: {type: "boolean", defaultValue: false},

				/**
				 * Time stamp of the adhoc line
				 */
				timeStamp: {type: "string"},

				/**
				 * Description of the time stamp
				 */
				description: {type: "string"}
			}
		}
	});

	return AdhocLine;
}, true);
}; // end of sap/gantt/AdhocLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/GanttChartRenderer",[], function () {
	"use strict";

	/**
	 * Gantt Chart renderer.
	 *
	 * @namespace
	 */
	var GanttChartRenderer = {};

	GanttChartRenderer.render = function (oRenderManager, oGanttChart) {
		jQuery.sap.measure.start("GanttChartRenderer render","GanttPerf:GanttChartRenderer render function");
		
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oGanttChart);
		oRenderManager.addStyle("width", oGanttChart.getWidth());
		oRenderManager.addStyle("height", oGanttChart.getHeight());
		oRenderManager.writeStyles();
		oRenderManager.addClass("sapGanttChart");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		jQuery.sap.measure.start("GanttChartRenderer renderPaintServer","GanttPerf:GanttChartRenderer renderPaintServer part");
		this.renderSvgDefs(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderPaintServer");

		jQuery.sap.measure.start("GanttChartRenderer renderChartHeader","GanttPerf:GanttChartRenderer renderChartHeader part");
		this.renderChartHeader(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderChartHeader");

		jQuery.sap.measure.start("GanttChartRenderer renderChartBody","GanttPerf:GanttChartRenderer renderChartBody part");
		this.renderChartBody(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderChartBody");

		oRenderManager.write("</div>");

		jQuery.sap.measure.end("GanttChartRenderer render");
	};

	GanttChartRenderer.renderSvgDefs = function (oRenderManager, oGanttChart) {
		var oSvgDefs = oGanttChart.getSvgDefs();
		if (oSvgDefs) {
			oRenderManager.write("<svg id='" + oGanttChart.getId() + "-svg-psdef'");
			oRenderManager.addStyle("float", "left");
			oRenderManager.addStyle("width", "0px");
			oRenderManager.addStyle("height", "0px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
			oRenderManager.write(oSvgDefs.getDefString());
			oRenderManager.write("</svg>");
		}
	};

	GanttChartRenderer.renderChartHeader = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-header'");
		oRenderManager.addClass("sapGanttChartHeader");
		oRenderManager.writeClasses();

		var iBaseRowHeight = oGanttChart.getBaseRowHeight();
		var sUiSizeMode = sap.gantt.misc.Utility.findSapUiSizeClass(oGanttChart);
		// extension header, cozy: height: 48 + 4 borders; compact: height: 32 + 4 borders
		var iExtensionHeight = sUiSizeMode === "sapUiSizeCozy" ? 52 : 36;
		var iTotalChartHeight = iBaseRowHeight + iExtensionHeight;

		if (iBaseRowHeight > 0) {
			oRenderManager.addStyle("height", iTotalChartHeight + "px");
		}
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		oRenderManager.write("<svg id='" + oGanttChart.getId() + "-header-svg'");
		oRenderManager.addClass("sapGanttChartHeaderSvg");
		oRenderManager.writeClasses();
		if (iBaseRowHeight > 0) {
			oRenderManager.addStyle("height", iTotalChartHeight + "px");
		}
		oRenderManager.writeStyles();

		oRenderManager.write("></svg>");

		oRenderManager.write("</div>");
	};

	GanttChartRenderer.renderChartBody = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-tt'");
		oRenderManager.addClass("sapUiTableHScr");  // force horizontal scroll bar to show
		oRenderManager.addClass("sapGanttChartTT");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("width", oGanttChart.getWidth());
		oRenderManager.addStyle("flex", "1 1 auto");
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		jQuery.sap.measure.start("GanttChartRenderer renderSvgDiv","GanttPerf:GanttChartRenderer renderPaintServer part");
		this.renderBodySvg(oRenderManager, oGanttChart);
		jQuery.sap.measure.end("GanttChartRenderer renderSvgDiv");

		oRenderManager.renderControl(oGanttChart.getAggregation("_treeTable"));
		oRenderManager.write("</div>");
	};	

	GanttChartRenderer.renderBodySvg = function (oRenderManager, oGanttChart) {
		oRenderManager.write("<div id='" + oGanttChart.getId() + "-svg-ctn'");
		oRenderManager.addClass("sapGanttChartSvgCtn");
		oRenderManager.writeClasses();
		oRenderManager.write(">");

		oRenderManager.write("<svg id='" + oGanttChart.getId() + "-svg'");
		oRenderManager.addClass("sapGanttChartSvg");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("height", "100%");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
		oRenderManager.write("</svg>");
		oRenderManager.write("</div>");
	};

	return GanttChartRenderer;
}, true);

}; // end of sap/gantt/GanttChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ChartScheme') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ChartScheme'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ChartScheme",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new ChartScheme class
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The ChartScheme control is one of the settings of {@link sap.gantt.GanttChart}. 
	 * <p>A Gantt chart uses this setting to decide the mode of Gantt chart and the shapes to display in the Gantt chart.
	 * A Gantt chart contains one or more Chart schemes. By switching between these schemes, the Gantt chart can display different shapes.
	 * </p>
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ChartScheme
	 */
	var ChartScheme = Element.extend("sap.gantt.config.ChartScheme", /** @lends sap.gantt.config.ChartScheme.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the Chart scheme
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the Chart scheme
				 */
				name: {type: "string", defaultValue: null},
				/**
				 * Decides the row height of {@link sap.gantt.GanttChartBase}
				 * For example, if rowSpan is 2, the row height of the Gantt chart equals twice of the row height of the tree table
				 */
				rowSpan: {type: "int", defaultValue: 1},
				/**
				 * URL of the icon of the Chart scheme
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * Key of {@link sap.gantt.config.Mode}
				 */
				modeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Decides whether the shape has a background
				 */
				haveBackground: {type: "boolean", defaultValue: false},
				/**
				 * Decides the background color of the row in the chart scheme
				 */
				backgroundClass: {type: "string"},
				/**
				 * Array of the key of {@link sap.gantt.config.Shape}
				 */
				shapeKeys: {type: "string[]", defaultValue: []},
				/**
				 * Decides which attribute serves as the purpose of "rowIndex" if it has multiple rows
				 */
				rowIndexName: {type: "string", defaultValue: "rowIndex"}
			}
		}
	});

	return ChartScheme;
}, true);
}; // end of sap/gantt/config/ChartScheme.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ColumnAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ColumnAttribute'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ColumnAttribute",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	
	/**
	 * Constructor for a new ColumnAttribute
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the column attribute which is used in the hierarchy column
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ColumnAttribute
	 */
	var ColumnAttribute = Element.extend("sap.gantt.config.ColumnAttribute", /** @lends sap.gantt.config.ColumnAttribute.prototype */ {
		metadata: {
			properties: {
				/**
				 * Key of {@link sap.gantt.config.ObjectType}
				 */
				objectTypeKey: {type: "string", defaultValue: null},
				/**
				 * Attribute name of the column
				 */
				attribute: {type: "string", defaultValue: null}
			}
		}
	});

	return ColumnAttribute;
}, true);
}; // end of sap/gantt/config/ColumnAttribute.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ContainerLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ContainerLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ContainerLayout",[
	'jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/Orientation'
], function (jQuery, Element, Orientation) {
	"use strict";
	/**
	 * Creates and initializes a new container layout
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the container layout. The container layout determines the layout of a Gantt chart container such as the CSS size, orientation, toolbar, and tree table size. 
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ContainerLayout
	 */
	var ContainerLayout = Element.extend("sap.gantt.config.ContainerLayout", /** @lends sap.gantt.config.ContainerLayout.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the container layout
				 */
				key: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY},
				/*
				 * Description of the container layout
				 */
				text: {type: "string", defaultValue: sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("XLST_SINGLE_LAYOUT")},
				/**
				 * Orientation of the Gantt chart container. See {@link sap.ui.core.Oritentation}
				 */
				orientation: {type: "sap.ui.core.Orientation", defaultValue: Orientation.Vertical},
				/**
				 * Active mode key. See {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Toolbar scheme key. See {@link sap.gantt.config.ToolbarScheme}
				 */
				toolbarSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY},
				/**
				 * CSS size of the selection panel. See {@link sap.ui.core.CSSSize}
				 */
				selectionPanelSize: {type: "sap.ui.core.CSSSize", defaultValue: "30%"},
				/**
				 * Array of the Gantt chart layout. See {@link sap.gantt.config.GanttChartLayout}
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.GanttChartLayout[]</code>. Otherwise some properties you set may not function properly.
				 */
				ganttChartLayouts: {type: "object[]", defaultValue: []}
			}
		}
	});
	
	return ContainerLayout;
}, true);
}; // end of sap/gantt/config/ContainerLayout.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ExpandChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ExpandChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ExpandChart",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new expand chart
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the expand chart which is used by {@link sap.gantt.config.ExpandChartGroup}.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ExpandChart
	 */
	var ExpandChart = Element.extend("sap.gantt.config.ExpandChart", /** @lends sap.gantt.config.ExpandChart.prototype */ {
		
		metadata: {
			properties: {
				/**
				 * URL of the icon of the expand chart
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * Specifies whether the action is to expand or to collapse a row in the chart.
				 */
				isExpand: {type: "boolean", defaultValue: null},
				/**
				 * Array of key of {@link sap.gantt.config.ChartScheme}
				 */
				chartSchemeKeys: {type: "string[]", defaultValue: []}
			}
		}
	});

/*	ExpandChart.prototype.init = function () {
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setExpandTooltip(this._oRb.getText("TLTP_SHOW_DETAIL"));
		this.setCollapseTooltip(this._oRb.getText("TLTP_HIDE_DETAIL"));
	};*/

	return ExpandChart;
}, true);

}; // end of sap/gantt/config/ExpandChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.GanttChartLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.GanttChartLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/GanttChartLayout",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new Gantt chart layout
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the Gantt chart layout. This includes but is not limited to the CSS size, mode, and hierarchy of the Gantt chart.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.GanttChartLayout
	 */
	var GanttChartLayout = Element.extend("sap.gantt.config.GanttChartLayout", /** @lends sap.gantt.config.GanttChartLayout.prototype */ {
		metadata: {
			properties: {
				/**
				 *CSS Size of the Gantt chart. See {@link sap.ui.core.CSSSize}
				 */
				ganttChartSize: {type: "sap.ui.core.CSSSize", defaultValue: null},
				/**
				 * Key of the mode. See {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Key of the hierarchy. See {@link sap.gantt.config.Hierarchy}
				 */
				hierarchyKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY}
			}
		}
	});
	
	return GanttChartLayout;
}, true);
}; // end of sap/gantt/config/GanttChartLayout.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Hierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Hierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Hierarchy",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new hierarchy
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the hierarchy in the Gantt chart. The hierarchy is used for building the tree table in {@link sap.gantt.GanttChartWithTable}.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Hierarchy
	 */
	var Hierarchy = Element.extend("sap.gantt.config.Hierarchy", /** @lends sap.gantt.config.Hierarchy.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the hierarchy
				 */
				key: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY},
				/**
				 * Description of the hierarchy
				 */
				text: {type: "string", defaultValue: "Default Hierarchy"},
				/**
				 * Key of {@link sap.gantt.config.Mode}
				 */
				activeModeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},
				/**
				 * Key of {@link sap.gantt.config.ToolbarScheme}
				 */
				toolbarSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY},
				/**
				 * Columns of the hierarchy. Array of {@link sap.gantt.config.HierarchyColumn}
				 */
				columns: {type: "object[]"},
				/**
				 * expandedLevels determines how the tree table is initially expanded.
				 * This property is a two-dimensional array containing object types of row data. Only rows with data of 
				 * the specified object types are expanded. Each child array represents a specific level in the hierarchy 
				 * with the first child array representing the first level and so forth. For example, if 
				 * this property is set to [["02", "03"], ["05"]], rows containing data of object types 02 or 03 in the 
				 * first level and rows containing data of object type 05 in the second level are expanded.
				 * @deprecated This feature may cause severe performance issue! Since TreeTable doesn't have API to 
				 * expand specific multiple rows in one call, GanttChart expand the tree tale to level calculated from 
				 * the configuration, then loop all data in the model, collapse the node which does not full-fill the 
				 * configuration one by one. This feature is application specific and should be handled by application.
				 */
				expandedLevels: {type: "string[][]"}
			}
		}
	});
	Hierarchy.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setText(this._oRb.getText("XLST_DEFAULT_HIE"));
	}; 
	
	return Hierarchy;
}, true);
}; // end of sap/gantt/config/Hierarchy.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.HierarchyColumn') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.HierarchyColumn'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/HierarchyColumn",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new hierarchy column
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the column attribute which is used in the hierarchy column
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.HierarchyColumn
	 */
	var HierarchyColumn = Element.extend("sap.gantt.config.HierarchyColumn", /** @lends sap.gantt.config.HierarchyColumn.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the hierarchy column
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Title is used as the title of the column header in the tree table
				 */
				title: {type: "string", defaultValue: null},
				/**
				 * Content type of the column
				 */
				contentType: {type: "string", defaultValue: null},
				/**
				 * Specifies the attribute by which the tree table sorts items in the column
				 */
				sortAttribute: {type: "string", defaultValue: null},
				/**
				 * Specifies the attribute by which the tree table filter items in the column
				 */
				filterAttribute: {type: "string", defaultValue: null},
				/**
				 * Attribute
				 */
				attribute: {type: "string", defaultValue: null}, // optional.
				/**
				 * Attributes. Array of {@link sap.gantt.config.ColumnAttribute}
				 */
				attributes: {type: "object[]", defaultValue: []}, //optional. array of objects. new file columnAttribute to describe object: object type, attribute
				/**
				 * Column Width
				 */
				width: {type: "sap.ui.core.CSSSize"}
			}
		}
	});

	return HierarchyColumn;
}, true);
}; // end of sap/gantt/config/HierarchyColumn.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Locale') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Locale'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Locale",['jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new Locale
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The locale control is used for converting the UTC date time to your local date time
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Locale
	 */
	var Locale = Element.extend("sap.gantt.config.Locale", /** @lends sap.gantt.config.Locale.prototype */ {
		metadata: {
			properties: {
				/**
				 * User time zone
				 */
				timeZone: {type: "string", defaultValue: "UTC"},
				/**
				 * Gap value to the UTC time in the format hhmmss
				 */
				utcdiff: {type: "string", defaultValue: "000000"},
				/**
				 * Sign of the gap to the UTC time. Two valid values: "+" or "-".
				 */
				utcsign: {type: "string", defaultValue: "+"},
				/**
				 * Day-light saving time periods. Array of {@link sap.gantt.config.TimeHorizon}
				 */
				dstHorizons: {type: "object[]", defaultValue: []}	// dst: day-light saving
				// other locale info like langu, dateFormat, timeFormat and numberFormat, please use UI5 standard configuration object.
			}
		}
	});
	
	return Locale;
}, true);
}; // end of sap/gantt/config/Locale.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Mode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Mode'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Mode",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new mode
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The Mode control specifies the mode which is used in GanttChart and Shape.
	 * Mode enables GanttChart to show the same objects in different views.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Mode
	 */
	var Mode = Element.extend("sap.gantt.config.Mode", /** @lends sap.gantt.config.Mode.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the mode
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the mode
				 */
				text: {type: "string", defaultValue: null},
				/**
				 * URL of the icon of the mode
				 */
				icon: {type: "sap.ui.core.URI", defaultValue: null},
				/**
				 * URL of the active icon of the mode
				 */
				activeIcon: {type: "sap.ui.core.URI"}
			}
		}
	});
	
	return Mode;
}, true);
}; // end of sap/gantt/config/Mode.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ObjectType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ObjectType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ObjectType",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new object type
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Define the ObjectType which is used in GanttChart
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ObjectType
	 */
	var ObjectType = Element.extend("sap.gantt.config.ObjectType", /** @lends sap.gantt.config.ObjectType.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique Key of the object type
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Description of the object type
				 */
				description: {type: "string", defaultValue: null},
				/**
				 * Specifies the chart scheme in which the the object type can be shown
				 * Key of {@link sap.gantt.config.ChartScheme}
				 */
				mainChartSchemeKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MAIN_CHART_SCHEME_KEY},
				/**
				 * Specifies the expanded chart scheme in which the the object type can be shown
				 * Array of keys of {@link sap.gantt.config.ChartScheme}
				 */
				expandedChartSchemeKeys: {type: "string[]", defaultValue: []}
			}
		}
	});

	return ObjectType;
}, true);
}; // end of sap/gantt/config/ObjectType.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.Shape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.Shape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/Shape",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	
	/**
	 * Creates and initializes a shape configuration.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given 
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class
	 * Configuration object for Shape.
	 * 
	 * <p>
	 * This configuration specifies the Shape class used to represent specific data and how the Shape class is constructed.
	 * Some properties of Shape can be directly configured by setting property <code>shapeProperties</code>.
	 * 
	 * A Shape class may come from the shape library provided in namespace <code>sap.gantt.shape</code> or from any extended shape you've created.
	 * Shape classes are instantiated according to the structure described in this configuration class inside <code>sap.gantt.Gantt</code>.
	 * The aggregation structure is described by properties <code>groupAggregation</code>, <code>clippathAggregation</code>, and <code>selectedClassName</code>.
	 * 
	 * The root shape is called 'top shape'. Some properties are only top shape relevant such as <code>key</code>, <code>level</code>, and <code>selectedClassName</code>.
	 * </p>
	 * 
	 * @extends sap.ui.core.Element
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.Shape
	 */
	var Shape = Element.extend("sap.gantt.config.Shape", /** @lends sap.gantt.config.Shape.prototype */ {
		metadata: {
			properties: {
				/**
				 * Primary key of the shape configuration. This property can be referenced from other configuration object, such as
				 * <code>sap.gantt.config.ChartScheme</code>. This property is only relevant to top Shape configuration.
				 */
				key: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the shape class to be used for data representation. Both shapes from <code>sap.gantt.shape</code> and extended
				 * shapes can be used here.
				 */
				shapeClassName: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the name of the data name to be represented. This is for the top shape only.
				 */
				shapeDataName: {type: "string", defaultValue: null},
				
				/**
				 * Specifies the key of modes in which the shape is drawn. If you leave this property empty, the shape is drawn in all modes.
				 */
				modeKeys: {type: "string[]", defaultValue: []},
				
				/**
				 * Level of shapes. Shapes closer to the top shape have a smaller value in level. This property is only relevant to top shape configuration
				 * (non aggregated shape configuration).
				 */
				level: {type: "string", defaultValue: null},
				
				/**
				 * Pre-configured values for Shape. The values specified in this object have a higher priority than values coded in the Shape class.
				 */
				shapeProperties: {type: "object", defaultValue: sap.gantt.config.DEFAULT_EMPTY_OBJECT},
				
				/**
				 * Aggregation shapes for sap.gantt.shape.Group class.
				 * This aggregation is only valid for shape classes with tag='g'.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Shape[]</code>. Otherwise some properties you set may not function properly.
				 */
				groupAggregation: {type: "object[]"},
				
				
				/**
				 * Aggregation path classes for sap.gantt.shape.Clippath class.
				 * This aggregation is only valid for shape classes with tag='clippath'. 
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Shape[]</code>. Otherwise some properties you set may not function properly.
				 */
				clippathAggregation: {type: "object[]"},
				
				/**
				 * Aggregation class for drawing selection of this shape. If nothing is assigned to this property, <code>sap.gantt.Gantt</code>
				 * instantiates the default selected shape class. 
				 */
				selectedClassName: {type: "string", defaultValue: null},
				
				/**
				 * Switch of shape's checkbox value in list legend, its value can be "noShow", "checked" and "unchecked".
				 */
				switchOfCheckBox: {type: "string", defaultValue: "noShow"},
				
				/**
				 * Aggregation class for drawing shadow when resizing this shape. If nothing is assigned to this property, <code>sap.gantt.Gantt</code>
				 * instantiates the default shadow shape class. 
				 */
				resizeShadowClassName: {type: "string", defaultValue: null}
			}
		}
	});
	
	/**
	 * Checks if a property is pre-configured in <code>shapeProperties</code>.
	 * 
	 * <p>This method together with method <code>getShapeProperty()</code> is frequently used in <code>sap.gantt.shape</code> classes 
	 * to make sure the principle of 'configuration first' is applied.
	 * .</p>
	 * 
	 * @public
	 * @param {string} sPropertyName - Name of the shape property.
	 * @returns {boolean} - Whether the property is pre-configured.
	 */
	Shape.prototype.hasShapeProperty = function (sPropertyName){
		return  this.getShapeProperties().hasOwnProperty(sPropertyName);
	};
	
	/**
	 * Get a pre-configured property from <code>shapeProperties</code>.
	 * 
	 * <p>This method together with method <code>hasShapeProperty</code> is frequently used in <code>sap.gantt.shape</code> classes 
	 * to make sure the principle of 'configuration first' is applied.
	 * .</p>
	 * 
	 * @public
	 * @param {string} sPropertyName - Name of the shape property.
	 * @returns {string} - Pre-configured value.
	 */
	Shape.prototype.getShapeProperty = function (sPropertyName) {
		return  this.getShapeProperties()[sPropertyName];
	};
	
	return Shape;
}, true);
}; // end of sap/gantt/config/Shape.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.TimeAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.TimeAxis'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/TimeAxis",[
	"jquery.sap.global", "sap/ui/core/Element"
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new time axis
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the time axis of a Gantt chart
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @deprecated As of version 1.44, replaced by sap.gantt.axistime.AxisTimeStrategy
	 * @alias sap.gantt.config.TimeAxis
	 */
	var TimeAxis = Element.extend("sap.gantt.config.TimeAxis", /** @lends sap.gantt.config.TimeAxis.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Whole time horizon of the Gantt chart
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.TimeHorizon</code>. Otherwise some properties you set may not function properly.
				 */
				planHorizon: {type: "object", defaultValue: sap.gantt.config.DEFAULT_PLAN_HORIZON},
				/**
				 * Time horizon which is displayed after the Gantt chart is initialized
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.TimeHorizon</code>. Otherwise some properties you set may not function properly.
				 */
				initHorizon: {type: "object", defaultValue: sap.gantt.config.DEFAULT_INIT_HORIZON},
				/**
				 * Zoom strategy of the Gantt chart
				 * See {@link sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY} as example
				 */
				zoomStrategy: {type: "object", defaultValue: sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY},
				/**
				 * Initial granularity of the time axis 
				 */
				granularity: {type: "string", defaultValue: "4day"},
				/**
				 * Granularity when the Gantt chart is zoomed in to the maximum
				 */
				finestGranularity: {type: "string", defaultValue: "5min"},
				/**
				 * Granularity when the GanttChart is zoomed out to the minimum
				 */
				coarsestGranularity: {type: "string", defaultValue: "1month"},
				/**
				 * Zoom rate of the Gantt chart
				 */
				rate: {type: "float", defaultValue: 1}
			}
		}
	});
	
	return TimeAxis;
}, true);
}; // end of sap/gantt/config/TimeAxis.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ToolbarGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ToolbarGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarPriority'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ToolbarGroup",[
	'jquery.sap.global', 'sap/ui/core/Element', "sap/m/OverflowToolbarPriority"
], function (jQuery, Element, OverflowToolbarPriority) {
	"use strict";
	/**
	 * Creates and initializes a new toolbar group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the toolbar group. Toolbar groups enables you to categorize related toolbar items. For example, you can 
	 * put all settings-related toolbar items in the Setting group.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ToolbarGroup
	 */
	var ToolbarGroup = Element.extend("sap.gantt.config.ToolbarGroup", /** @lends sap.gantt.config.ToolbarGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Specifies the position of the toolbar group. Note that all toolbar groups must be put into the Gantt chart toolbar.
				 */
				position: {type: "string", defaultValue: null},
				/**
				 * Overflow priority. See {@link sap.m.OverflowToolbarPriority}
				 */
				overflowPriority: {type: "sap.m.OverflowToolbarPriority", defaultValue: OverflowToolbarPriority.Low},

				/**
				 * Type of a button in the toolbar group if it's a button
				 */
				buttonType: {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Default}
			}
		}
	});
	
	return ToolbarGroup;
}, true);
}; // end of sap/gantt/config/ToolbarGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ToolbarScheme') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ToolbarScheme'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ToolbarScheme",[
	'jquery.sap.global', 'sap/ui/core/Element'
], function (jQuery, Element) {
	"use strict";
	/**
	 * Creates and initializes a new toolbar scheme
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines the Toolbar scheme
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ToolbarScheme
	 */
	var ToolbarScheme = Element.extend("sap.gantt.config.ToolbarScheme", /** @lends sap.gantt.config.ToolbarScheme.prototype */ {
		metadata: {
			properties: {
				/**
				 * Unique key of the toolbar scheme
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Toolbar group for selecting a source
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				sourceSelect: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for the Gantt chart layout
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.LayoutGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				layout: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for custom toolbar items
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				customToolbarItems: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for expanding a chart
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ExpandChartGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				expandChart: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for expanding nodes of a tree table
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				expandTree: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for the time zoom
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				timeZoom: {type: "object", defaultValue: null},
				/**
				 * Toolbar group for legend
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				legend: {type: "object", defaultValue: null},
				/**
				 * See {@link sap.gantt.config.SettingGroup}
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.SettingGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				settings: {type: "object", defaultValue: null},
				/**
				 * See {@link sap.gantt.config.ModeGroup}
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ModeGroup</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				mode: {type: "object", defaultValue: null},
				/**
				 * Toolbar design. See {@link sap.m.ToolbarDesign}
				 */
				toolbarDesign: {type: "string", defaultValue: sap.m.ToolbarDesign.Auto}
			}
		}
	});
	
	ToolbarScheme.prototype.setTimeZoom = function(oTimeZoom) {
		//for backward compatibility, oTimeZoom could be instance of sap.gantt.config.ToolbarGroup
		//if so, we need to convert it to sap.gantt.config.TimeZoomGroup
		var oTemp = oTimeZoom;
		if (!(oTemp instanceof sap.gantt.config.TimeZoomGroup)) {
			oTemp = new sap.gantt.config.TimeZoomGroup();
			oTemp.setOverflowPriority(oTimeZoom.getOverflowPriority());
			oTemp.setPosition(oTimeZoom.getPosition());
		}
		this.setProperty("timeZoom", oTemp);
		return this;
	};
	
	return ToolbarScheme;
}, true);
}; // end of sap/gantt/config/ToolbarScheme.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.AssociateContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.AssociateContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/AssociateContainer",[
	"sap/ui/core/Control", "sap/ui/core/Core"
], function (Control, Core) {
	"use strict";
	var AssociateContainer = Control.extend("sap.gantt.control.AssociateContainer", {
		metadata: {
			properties: {
				/**
				 * for block DOM element only
				 */
				enableRootDiv: {type: "boolean", defaultValue: false}
			},
			associations: {
				/**
				 * for block DOM element
				 */
				content: {type: "sap.ui.core.Control", multiple: false}
			}
		}
	});

	AssociateContainer.prototype.setContent = function (vContent) {
		this.setAssociation("content", vContent);
		if (vContent) {
			var oContent = typeof (vContent) === "string" ? Core.byId(vContent) : vContent;
			oContent._oAC = this;
		}
		return this;
	};

	return AssociateContainer;
}, true);
}; // end of sap/gantt/control/AssociateContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.AssociateContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.AssociateContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/AssociateContainerRenderer",[], function () {
	"use strict";

	var AssociateContainerRenderer = {};

	AssociateContainerRenderer.render = function(oRenderManager, oControl) {
		
		if (oControl.getEnableRootDiv()) {
			oRenderManager.write("<div");
			oRenderManager.writeControlData(oControl);
			oRenderManager.addClass("sapGanttChartLayoutBG");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("width", "100%");
			oRenderManager.addStyle("height", "100%");
			oRenderManager.addStyle("overFlow", "hidden");
			oRenderManager.writeStyles();
			oRenderManager.write(">");
		}
		oRenderManager.renderControl(sap.ui.getCore().byId(oControl.getContent()));
		if (oControl.getEnableRootDiv()) {
			oRenderManager.write("</div>");
		}
	};

	return AssociateContainerRenderer;
}, /* bExport= */ true);
}; // end of sap/gantt/control/AssociateContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.Cell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.Cell'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Context'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/Cell",[
	"sap/ui/core/Control", "sap/m/Label", "sap/ui/model/Context"
], function (Control, Label, Context) {
	"use strict";

	/**
	 * Creates and initializes a new Cell class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Cell acts as an abstract class. You can use this class to define a placeholder for your application 
	 * to provide the specific implementation. Applications can fill the cell content by using cellCallback
	 * which returns instances such as Icon, Text, or Text input.
	 * 
	 * You can also use this class to define column specific properties that are applied when rendering a list.
	 * @extends sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.control.Cell
	 */
	var Cell = Control.extend("sap.gantt.control.Cell",/** @lends sap.gantt.control.Cell.prototype */ {
		metadata : {
			properties : {
				/**
				 * Cell callback function that returns the specific control instance which is rendered in a table.
				 */
				cellCallback : {type : "object"},
				/**
				 * Column configuration object.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.HierarchyColumn</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				columnConfig: {type: "object"}
			}
		}
	});

	Cell.prototype.setColumnConfig = function (oColumnConfig) {
		this.setProperty("columnConfig", oColumnConfig);
		if (oColumnConfig) {
			var aAttributes = oColumnConfig.getAttributes();
			if (aAttributes && aAttributes.length > 0) {
				this._oMapAttributes = {};
				aAttributes.forEach(function (oAttribute) {
					this._oMapAttributes[oAttribute.getObjectTypeKey()] = oAttribute.getAttribute();
				}.bind(this));
			}
		}
		return this;
	};

	/**
	 * Returns a control instance provided by cellCallback. If cellCallback does not provides the control instance, this
	 * function returns Text by default. This indicates the function is overwritten by your application.
	 * 
	 * @param {object} oColumnConfig Column configuration object
	 * @return {sap.ui.core.Control} Control instance is rendered in Table/TreeTable
	 */
	Cell.prototype.createCellContent = function (oColumnConfig) {
		var oCellCallback = this.getCellCallback();
		if (oCellCallback && oCellCallback.createCellContent) {
			return oCellCallback.createCellContent(oColumnConfig);
		}
		return new Label();
	};

	/**
	 * To be overwritten by your application. 
	 * The oContext argument is used for some binding feature and editing feature in a table.
	 * 
	 * @param {sap.ui.core.Control} oCellContent Instance of Cell content
	 * @param {sap.ui.model.Context} oContext Cell binding context
	 * @param {string} sAttributeName Key path of the property name
	 * @param {string} sObjectType Object type
	 * @param {sap.gantt.config.HierarchyColumn} oColumnConfig Column of the configuration object
	 */
	Cell.prototype.updateCellContent = function (oCellContent, oContext, sAttributeName, sObjectType, oColumnConfig) {
		var oCellCallback = this.getCellCallback();
		if (oCellCallback && oCellCallback.updateCellContent) {
			oCellCallback.updateCellContent(oCellContent, oContext, sAttributeName, sObjectType, oColumnConfig);
		} else {
			oCellContent.setText(oContext.getProperty(sAttributeName));
		}
	};

	/**
	 * Updates the table cell instance when scrolling or when SAPUI5 needs to update.
	 *
	 * This function is called by a table.
	 * oTable.updateTableContent() -> _updateBindingContext() -> _updateRowBindingContext -> _updateCellBindingContext -> oCell._updateTableCell
	 *
	 * @private
	 * @param {sap.ui.core.Control} oCell Cell control
	 * @param {sap.ui.model.Context} oContext Cell context
	 * @param {DomRef} $tdDomRef jQuery object for <TD>
	 * @param {int} iAbsoluteRowIndex Absolute row index
	 */
	Cell.prototype._updateTableCell = function (oCell, oContext, $tdDomRef, iAbsoluteRowIndex) {
		if (!oContext) {
			return;
		}
		if (!(oContext instanceof Context)) {
			oContext = oContext.context;
		}

		if (!this._oAttributeControl) {
			this._oAttributeControl = this.createCellContent(this.getColumnConfig());
		}

		this._oContext = oContext;
	
		//the  row type name, which is configured while initialize ganttchart, or ganttchartwithtable
		var sRowTypeName = this.data("rowTypeName");
		sRowTypeName = sRowTypeName ? sRowTypeName : "type";
		var sObjectType = oContext.getProperty(sRowTypeName);

		if (this._oMapAttributes) { // attribute name per object type
			this.updateCellContent(this._oAttributeControl, oContext, this._oMapAttributes[sObjectType], sObjectType, this.getColumnConfig());
		} else {// single attribute name
			this.updateCellContent(this._oAttributeControl, oContext, this.getColumnConfig().getAttribute(), sObjectType, this.getColumnConfig());
		}

		if (this.bOutput) {
			var oRM = sap.ui.getCore().createRenderManager(),
				oRenderer = this._oAttributeControl.getRenderer();

			oRenderer.render(oRM, this._oAttributeControl);
			if ($tdDomRef && $tdDomRef.length > 0) {
				oRM.flush(this.getDomRef(), false, false);
			}
			oRM.destroy();
		}
	};

	/**
	 * Creates Cell content if needed or returns Cell content if it is created.
	 * 
	 * @return {sap.ui.core.Control} Content to render in the table
	 */
	Cell.prototype.getContentToRender = function () {
		return this._oAttributeControl;
	};

	/**
	 * Provide accessibility support for control Cell
	 * 
	 * @return {object} Current accessibility state of the control.
	 * @see {sap.ui.core.Control#getAccessibilityInfo}
	 * @protected
	 */
	Cell.prototype.getAccessibilityInfo  = function () {
		var oInnerControl = this.getContentToRender();
		return oInnerControl && oInnerControl.getAccessibilityInfo ? oInnerControl.getAccessibilityInfo() : null;
	};

	return Cell;
}, true);

}; // end of sap/gantt/control/Cell.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.CellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.control.CellRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/CellRenderer",[], function () {
	"use strict";

	/**
	 * Cell renderer.
	 * @namespace
	 */
	var CellRenderer = {};
	
	CellRenderer.render = function(oRenderManager, oControl) {
		var oContentToRender = oControl.getContentToRender();
		oRenderManager.write("<div"); //BCP: 1670160448 div place holder for DOM reference
		oRenderManager.writeControlData(oControl);
		oRenderManager.write(">");
		if (oContentToRender){
			oRenderManager.renderControl(oContentToRender);
		}
		oRenderManager.write("</div>");
	};

	return CellRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/control/CellRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.control.ToolbarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/control/ToolbarRenderer",[], function () {
	"use strict";

	/**
	 * Gantt Chart Toolbar renderer.
	 * @namespace
	 */
	var ToolbarRenderer = {};

	ToolbarRenderer.render = function(oRm, oToolbar) {
		var iNumOfToolbarItems = oToolbar.getAllToolbarItems().length;
		oRm.write("<div");
		oRm.writeControlData(oToolbar);
		oRm.addClass("sapGanttToolbar");
		if (iNumOfToolbarItems == 0) {
			oRm.addClass("sapGanttSkipToolbar");
		}
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oToolbar.getAggregation("_toolbar"));
		oRm.write("</div>");

	};

	return ToolbarRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/control/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.DefBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.DefBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/DefBase",[
	"sap/ui/core/Element"
], function (Element) {
	"use strict";
	
	/**
	 * Creates and initializes a new SVG graphic object for reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all SVG definitions.
	 * 
	 * <p>
	 * SVG uses the 'defs' tag to represent graphic objects that can be reused at a later time.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement 'defs' in SVG}.
	 * Currently <code>sap.gantt</code> provides defs including the following definition tags:
	 * 'pattern', 'gradient', and 'filter'. Applications can also extend this base class to support more functionality.
	 * </p>
	 * 
	 * @extends sap.ui.core.Element
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.DefBase
	 */
	var DefBase = Element.extend("sap.gantt.def.DefBase", /** @lends sap.gantt.def.DefBase.prototype */ {
		metadata : {
			"abstract": true,
			properties: {
				
				/**
				 * Definition string. Subclasses can implement their own getters of this property to override the one in this class.
				 */
				defString: {type: "string", defaultValue: null},
				
				/**
				 * Referencing string. The default implementation is the referencing ID wrapped by 'url(#)'.
				 */
				refString: {type: "string", defaultValue: null}
			}
		}
	});
	
	DefBase.prototype.getRefString = function () {
		var sDefaultRefString = this.getProperty("refString");
		return sDefaultRefString ? sDefaultRefString : "url(#" +  this.generateRefId() + ")";
	};
	
	/**
	 * Provides a referencing ID. The default implementation is to use control ID as the referencing ID.
	 * 
	 * @see sap.ui.table.Table.getSelectedIndex
	 * 
	 * @return {string} Referencing ID.
	 * @public
	 */
	DefBase.prototype.generateRefId = function () {
		return this.getId();
	};

	return DefBase;
}, true);

}; // end of sap/gantt/def/DefBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.SvgDefs') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.SvgDefs'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/SvgDefs",[
	"sap/ui/base/ManagedObject",'sap/ui/core/Element'
], function (ManagedObject, Element) {
	"use strict";

	/**
	 * SVG definition tag class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * The class handles the container tag "defs" for all reusable SVG graphic definitions. It provides 
	 * interfaces for SVG definition strings and referencing strings. The parent class is responsible for 
	 * rendering the definition strings.
	 * 
	 * <p>
	 * SVG uses the 'defs' tag to represent graphic objects that are defined for reuse at a later time.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement 'defs' in SVG}.
	 * Currently <code>sap.gantt</code> provides defs including the following definition tags:
	 * 'pattern', 'gradient', and 'filter'. Applications can also extend this base class to support more functionality.
	 * </p>
	 * 
	 * @extends sap.ui.base.ManagedObject
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.SvgDef
	 */
	var SvgDefs = Element.extend("sap.gantt.def.SvgDefs", /** @lends sap.gantt.def.SvgDefs.prototype */{
		metadata: {
			aggregations: {
				
				/**
				 * SVG definition instances.
				 */
				defs: {type: "sap.gantt.def.DefBase", multiple: true, visibility: "public",
					singularName: "def", bindable: "bindable"}
			}
		}
	});

	/**
	 * Definition string of the SVG 'defs' tag.
	 * 
	 * @returns {string} - Definition string to be rendered by caller.
	 * @public
	 */
	SvgDefs.prototype.getDefString = function () {
		var sRetVal = "<defs id='" + this.getId() + "'>",
			aDefs = this.getDefs();
		
		if (aDefs && aDefs.length > 0) {
			aDefs.forEach(function(oDef, iIndex){
				sRetVal += oDef.getDefString();
			});
		}
		
		return sRetVal + "</defs>";
	};

	/**
	 * Definition data of the SVG 'def' tag. -- experimental
	 * 
	 * @returns {object} - Definition string to be rendered by caller.
	 * @private
	 */
	SvgDefs.prototype.getDefNode = function () {
		var oRetVal = {
			"id": this.getId(),
			"defNodes": []
		};
		var aDefs = this.getDefs();
		
		for (var i = 0; i < aDefs.length; i++){
			oRetVal.defNodes.push(aDefs[i].getDefNode());
		}
		return oRetVal;
	};

	return SvgDefs;
}, true);

}; // end of sap/gantt/def/SvgDefs.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.CalendarDefs') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.CalendarDefs'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/cal/CalendarDefs",[
	"sap/gantt/def/SvgDefs"
], function (SvgDefs) {
	"use strict";
	
	/**
	 * Specific 'def' elements for the calendar.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class
	 * Calendar pattern definition. This class generates the 'defs' tag from the 'defs' aggregation.
	 *  
	 * <p>
	 * Calendar (for non-working hours) is a widely used graphic element in a Gantt chart. Calendar is considered to be highly reusable between different rows of  
	 * resources. A default implementation of patterns is provided. After calendars are rendered from def tags, shape <code>sap.gantt.shape.cal.Calendar</code> can be
	 * used to consume the calendar pattern definition.
	 * 
	 * This class is extended to provide a specific logic for generating referencing strings for calendar patterns.
	 * </p>
	 * 
	 * @extends sap.gantt.def.SvgDefs
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.CalendarDefs
	 */
	var CalendarDefs = SvgDefs.extend("sap.gantt.def.cal.CalendarDefs", /** @lends sap.gantt.def.cal.CalendarDefs */ {});
	
	CalendarDefs.prototype.getRefString = function (calendarKey) {
		var sId = "";
		if (this.getParent() && this.getParent().getId()) {
			sId = this.getParent().getId();
		}
		return "url(#" + sId + "_" + calendarKey + ")";
	};
	
	return CalendarDefs;
}, true);

}; // end of sap/gantt/def/cal/CalendarDefs.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.filter.MorphologyFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.filter.MorphologyFilter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/filter/MorphologyFilter",[
	"../DefBase"
], function (DefBase) {
	"use strict";

	/**
	 * Creates and initializes a morphology filter defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * This filter is a combination of several filters. The main one is morphology.
	 * 
	 * <p>
	 * The purpose of this filter is to generate a white outline of a target shape when the target is overlapping with other shapes. In general this filter is recommended to be used only on 'text' and
	 * 'image' whose outline is very hard to determine. For regular SVG tags like 'rect', 'circle' etc, use the 'stroke' attribute instead if possible. This is because filters in general have worse performance.<br/>
	 * See {@link http://www.w3.org/TR/SVG/filters.html Filter Effects in SVG 1.1 specification} for detail.<br/>
	 * Tags used in this filter are:
	 * <ul>
	 * 	<li>'femorphology': Use operator 'dilate' to make a fatter shape of the source shape. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyElement Tag 'femorphology' in SVG 1.1 specification} for detail.</li>
	 * 	<li>'feColorMatrix': Fills fatter shape. The default matrix turns every color into white. See {@link http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement Tag 'feColorMatrix' in SVG 1.1 specification} for detail.</li>
	 * 	<li>'feMerge': Merges the source shape into the fatter shape to produce an outline effect on the target shape. See {@link http://www.w3.org/TR/SVG/filters.html#feMergeElement Tag 'feMerge' in SVG 1.1 specification} for detail.</li>
	 * </ul>
	 * Effect of this filter is: <br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><filter id="fm1"><feMorphology in="SourceAlpha" result="morphed" operator="dilate" radius="2,1"></feMorphology><feColorMatrix in="morphed" result="recolored" type="matrix" values="-1 0 0 0 1, 0 -1 0 0 1, 0 0 -1 0 1, 0 0 0 1 0"></feColorMatrix><feMerge><feMergeNode in="recolored"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter>
	 * 	<filter id="fm2"><feMorphology in="SourceAlpha" result="morphed" operator="dilate" radius="2,1"></feMorphology><feColorMatrix in="morphed" result="recolored" type="matrix" values="-1 0 0 0 0, 0 -1 0 0 0, 0 0 -1 0 0, 0 0 0 1 0"></feColorMatrix><feMerge><feMergeNode in="recolored"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter></defs>
	 * 	<rect x="1" y="1" width="298" height="150" fill="#222"/>
	 * 	<rect x="1" y="150" width="298" height="68" fill="#ddd"/>
	 * 	<path d="M 80,50 c 0,-50 80,-50 80,0 c 0,50 80,50 80,0" filter="url(#fm1)" stroke="#9E1F63" stroke-width="2" fill="none"/>
	 * 	<text x="20" y="130" filter="url(#fm1)" font-size="30" fill="#1C75BC">Can you see me?</text>
	 * 	<text x="25" y="195" filter="url(#fm2)" font-size="30" fill="#ddd">How about now?</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.filter.MorphologyFilter
	 */
	var MorphologyFilter = DefBase.extend("sap.gantt.def.filter.MorphologyFilter", /** @lends sap.gantt.def.filter.MorphologyFilter.prototype */ {
		metadata: {
			properties: {
				
				/**
				 * Atrribute of SVG tag 'feMorphology'. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyOperatorAttribute 'operator' attribute} for detail.
				 * Possible values are in {@link sap.gantt.def.filter.MorphologyOperator}.
				 */
				operator: {type: "string", defaultValue: sap.gantt.def.filter.MorphologyOperator.Dilate},
				
				/**
				 * Attribute of SVG tag 'feMorphology'. See {@link http://www.w3.org/TR/SVG/filters.html#feMorphologyRadiusAttribute 'radius' attribute} for detail.
				 */
				radius: {type: "string", defaultValue: "2,1"},
				
				/**
				 * Attribute of SVG tag 'feColorMatrix'. See {@link http://www.w3.org/TR/SVG/filters.html#feColorMatrixValuesAttribute 'value' attribute} for detail.
				 * Predefined values are in {@link sap.gantt.def.filter.ColorMatrixValue}. Advanced users can provide a customized matrix in string.
				 */
				colorMatrix: {type: "string", defaultValue: sap.gantt.def.filter.ColorMatrixValue.AllToWhite}
			}
		}
	});
	
	MorphologyFilter.prototype.getDefString = function(){
		return "<filter id='" + this.getId() + "'>" + 
			"<feMorphology in='SourceAlpha' result='morphed' operator='" + this.getOperator() +
			"' radius='" + this.getRadius() + "'/>" +
			"<feColorMatrix in='morphed' result='recolored' type='matrix' values='" + this.getColorMatrix() + "'/>" + 
			"<feMerge>" + 
				"<feMergeNode in='recolored'/>" + 
				"<feMergeNode in='SourceGraphic'/>" +
			"</feMerge>" +
		"</filter>";
	};

	return MorphologyFilter;
}, true);

}; // end of sap/gantt/def/filter/MorphologyFilter.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.LinearGradient') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.LinearGradient'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/LinearGradient",[
	"../DefBase"
], function (DefBase) {
	"use strict";

	/**
	 * Creates and initializes a linear gradient defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Linear gradient defined by SVG tag 'linearGradient'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradients Linear Gradient in SVG 1.1 specification} for detail.<br/>
	 * {@link http://www.w3.org/TR/SVG/images/pservers/lingrad01.svg Linear gradient sample in SVG specification 1.1}:<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <g><defs><linearGradient id="MyGradient"><stop offset="5%" stop-color="#F60" /><stop offset="95%" stop-color="#FF6" /></linearGradient></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <rect fill="url(#MyGradient)" stroke="black" stroke-width="5" x="100" y="100" width="600" height="200"/></g>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.LinearGradient
	 */
	var LinearGradient = DefBase.extend("sap.gantt.def.gradient.LinearGradient", /** @lends sap.gantt.def.gradient.LinearGradient.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'x1' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementX1Attribute 'x1' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				x1: {type: "string", defaultValue: "0"},
				
				/**
				 * Attribute 'y1' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementY1Attribute 'y1' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				y1: {type: "string", defaultValue: "0"},
				
				/**
				 * Attribute 'x2' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementX2Attribute 'x2' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				x2: {type: "string", defaultValue: "100"},
				
				/**
				 * Attribute 'y2' of SVG tag 'linearGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#LinearGradientElementY2Attribute 'y2' attribute of 'linearGradient' element in SVG 1.1 specification} for detail.
				 */
				y2: {type: "string", defaultValue: "15"}
			},
			aggregations:{
				
				/**
				 * 'stop' elements in the 'linearGradient' element. See {@link http://www.w3.org/TR/SVG/pservers.html#GradientStops 'stop' element in SVG 1.1 specification} for detail.
				 */
				stops: {type: "sap.gantt.def.gradient.Stop", multiple: true, singularName: "stop"}
			}
		}
	});

	LinearGradient.prototype.getDefString = function () {
		var sRetVal = "<linearGradient id='" + this.getId() +
			"' x1='" + this.getX1() + "' y1='" + this.getY1() + "' x2='" + this.getX2() +
			"' y2='" + this.getY2() +
			"'>";
		var aStops = this.getStops();
		for (var i = 0; i < aStops.length; i++) {
			sRetVal = sRetVal.concat(aStops[i].getDefString());
		}
		sRetVal = sRetVal.concat("</linearGradient>");
		return sRetVal;
	};

	return LinearGradient;
}, true);

}; // end of sap/gantt/def/gradient/LinearGradient.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.RadialGradient') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.RadialGradient'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/RadialGradient",[
	"../DefBase"
], function (DefBase) {
	"use strict";
	
	/**
	 * Creates and initializes a radial gradient defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Radial gradient defined by SVG tag 'radialGradient'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradients Radical Gradient in SVG 1.1 specification} for detail.<br/>
	 * {@link http://www.w3.org/TR/SVG/images/pservers/radgrad01.svg Radical gradient sample in SVG specification 1.1}:<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <g><defs><radialGradient id="MyGradient" gradientUnits="userSpaceOnUse" cx="400" cy="200" r="300" fx="400" fy="200">
	 * <stop offset="0%" stop-color="red" /><stop offset="50%" stop-color="blue" /><stop offset="100%" stop-color="red" /></radialGradient></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <rect fill="url(#MyGradient)" stroke="black" stroke-width="5" x="100" y="100" width="600" height="200"/></g>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.RadicalGradient
	 */
	var RadialGradient = DefBase.extend("sap.gantt.def.gradient.RadialGradient", /** @lends sap.gantt.def.gradient.RadialGradient.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'cx' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementCXAttribute 'cx' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				cx: {type: "float", defaultValue: 400},
				
				/**
				 * Attribute 'cy' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementCYAttribute 'cy' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				cy: {type: "float", defaultValue: 200},
				
				/**
				 * Attribute 'r' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementRAttribute 'r' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				r: {type: "float", defaultValue: 300},
				
				/**
				 * Attribute 'fx' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementFXAttribute 'fx' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				fx: {type: "float", defaultValue: 400},
				
				/**
				 * Attribute 'fy' of SVG tag 'radialGradient'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#RadialGradientElementFYAttribute 'fy' attribute of 'radialGradient' element in SVG 1.1 specification} for detail.
				 */
				fy: {type: "float", defaultValue: 200}
			},
			aggregations:{
				
				/**
				 * 'stop' elements in the 'radialGradient' element. See {@link http://www.w3.org/TR/SVG/pservers.html#GradientStops 'stop' element in SVG 1.1 specification} for detail.
				 */
				stops: {type: "sap.gantt.def.gradient.Stop", multiple: true, singularName: "stop"}
			}
		}
	});

	return RadialGradient;
}, true);

}; // end of sap/gantt/def/gradient/RadialGradient.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.gradient.Stop') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.gradient.Stop'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/gradient/Stop",[
	"../DefBase"
], function (DefBase) {
	"use strict";
	
	/**
	 * Creates and initializes a gradient stop defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Gradient stop defined by SVG tag 'stop'. 
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#StopElement 'stop' element in SVG 1.1 specification} for detail.
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.gradient.Stop
	 */
	var Stop = DefBase.extend("sap.gantt.def.gradient.Stop", /** @lends sap.gantt.def.gradient.Stop.prototype */ {
		metadata : {
			properties: {
				
				/**
				 * Attribute 'offset' of SVG tag 'stop'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#StopElementOffsetAttribute 'offset' attribute of 'stop' element in SVG 1.1 specification} for detail.
				 */
				offSet: {type: "string", defaultValue: "5%"},
				
				/**
				 * Property 'stop-color' of SVG tag 'stop'. See 
				 * {@link http://www.w3.org/TR/SVG/pservers.html#StopColorProperty 'stop-color' property of 'stop' element in SVG 1.1 specification} for detail.
				 */
				stopColor: {type: "sap.gantt.ValueSVGPaintServer", defaultValue: "#FFFFFF"}
			}
		}
	});

	Stop.prototype.getDefString = function () {
		return "<stop id='" + this.getId() +
			"' offset='" + this.getOffSet() +
			"' stop-color='" + this.getStopColor() + "' />";
	};

	return Stop;
}, true);

}; // end of sap/gantt/def/gradient/Stop.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.PatternBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.PatternBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/PatternBase",[
	"../DefBase"
], function (DefBase) {
	"use strict";

	/**
	 * Creates and initializes a new SVG pattern defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for SVG pattern definitions.
	 * 
	 * <p>
	 * Pattern is a built-in paint server in SVG. It provides tile-based patterns to the SVG 'fill' or 'stroke' attributes.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#Patterns 'pattern' element in SVG}.<br>
	 * See {@link http://www.w3.org/TR/SVG/images/pservers/pattern01.svg Pattern sample fro SVG specificiation 1.1}<br/>
	 * <svg width="8cm" height="4cm" viewBox="0 0 800 400" version="1.1" xmlns="http://www.w3.org/2000/svg">
	 * <defs> <pattern id="TrianglePattern" patternUnits="userSpaceOnUse"  x="0" y="0" width="100" height="100" viewBox="0 0 10 10" >
	 * <path d="M 0 0 L 7 0 L 3.5 7 z" fill="red" stroke="blue" /></pattern></defs>
	 * <rect fill="none" stroke="blue" x="1" y="1" width="798" height="398"/>
	 * <ellipse fill="url(#TrianglePattern)" stroke="black" stroke-width="5" cx="400" cy="200" rx="350" ry="150" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.PatternBase
	 */
	var PatternBase = DefBase.extend("sap.gantt.def.pattern.PatternBase", /** @lends sap.gantt.def.pattern.PatternBase.prototype */ {
		metadata : {
			"abstract": true,
			properties: {

				/**
				 * Width of the pattern tile.
				 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementWidthAttribute 'width' attribute of 'pattern' element} for detail.
				 */
				tileWidth : {type : "int", defaultValue : 8},

				/**
				 * Height of the pattern tile.
				 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementHeightAttribute 'height' attribute of 'pattern' element} for detail.
				 */
				tileHeight : {type : "int", defaultValue : 8},

				/**
				 * Background color of the pattern.
				 * Technically a rectangle with the color is added in the beginning of the pattern definition.
				 */
				backgroundColor : {type : "sap.gantt.ValueSVGPaintServer", defaultValue : "#fff"},

				/**
				 * Fill opacity of background color.
				 */
				backgroundFillOpacity : {type : "float", defaultValue : "1"}
			}
		}
	});

	return PatternBase;
}, true);

}; // end of sap/gantt/def/pattern/PatternBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.SlashPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.SlashPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/SlashPattern",[
	"./PatternBase"
], function (PatternBase) {
	"use strict";

	/**
	 * Creates and initializes a slash pattern defined for later reuse.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Slash pattern defined by a path. Stroke color and stroke width of the path can be changed by corresponding properties.
	 * 
	 * <p>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="p1" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#e2e2e2"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="1"></path></pattern>
	 * 	<pattern class="pattern" id="p2" patternUnits="userSpaceOnUse" x="0" y="0" width="8" height="8"><rect x="0" width="8" height="8" fill="#fff"></rect><path d="M-2,2 l4,-4 M0,8 l8,-8 M6,10 l4,-4 " stroke="#6d6d6d" stroke-width="2"></path></pattern>
	 * 	<pattern class="pattern" id="p3" patternUnits="userSpaceOnUse" x="70" y="85" width="100" height="100"><rect x="0" width="100" height="100" fill="#e2e2e2"></rect><path d="M-25,25 l50,-50 M0,100 l100,-100 M75,125 l50,-50" stroke="#1C75BC" stroke-width="30"></path></pattern></defs>
	 * 	<rect fill="url(#p1)" x="60" y="20" width="80" height="20" />
	 * 	<circle fill="url(#p2)" cx="180" cy="25" r="10" /> <circle fill="url(#p2)" cx="200" cy="30" r="15" />
	 * 	<text x="50" y="75" class="timeText">Tile Detail:</text>
	 * 	<rect fill="url(#p3)" x="70" y="85" width="100" height="100" />
	 * 	<path d="M 70 85 h 100 v 100 h -100 z" class="dashside" />
	 * 	<path d="M 70 85 h -20 m 0 100 h 20 v 20 m 100 0 v -20 m -7 -10 h 20 m 0 -45 h -20 m 7 -25 l 20 -20 m -21 -19 l -20 20" class="dashassist" />
	 * 	<path d="M 50 85 v 100" class="arrowline" />
	 * 	<path d="M 70 205 h 100" class="arrowline" />
	 * 	<path d="M 165 70 l 20 20" class="arrowline" />
	 * 	<text x="65" y="175" class="propertyText" transform="rotate(-90, 65 175)">tileHeight</text>
	 * 	<text x="80" y="200" class="propertyText">tileWidth</text>
	 * 	<text x="185" y="125" class="propertyText">background</text>
	 * 	<text x="185" y="145" class="propertyText">Color</text>
	 * 	<text x="185" y="180" class="propertyText">strokeColor</text>
	 * 	<text x="180" y="75" class="propertyText">strokeWidth</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.pattern.PatternBase
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.SlashPattern
	 */
	var SlashPattern = PatternBase.extend("sap.gantt.def.pattern.SlashPattern", /** @lends sap.gantt.def.pattern.SlashPattern.prototype  */ {
		library : "sap.gantt",
		metadata : {
			properties: {
				
				/**
				 * Value of d attribute in Path element. The value is influenced by property <code>tileWidth</code> and <code>tileHeight</code>.
				 * If this value is changed by coding, the logic cannot be guaranteed.
				 */
				path : {type : "string", defaultValue : null},
				
				/**
				 * Stroke color of the path element.
				 */
				stroke : {type : "sap.gantt.ValueSVGPaintServer"},
				
				/**
				 * Stroke width of the path element.
				 */
				strokeWidth : {type : "int", defaultValue : 2}
			}
		}
	});

	SlashPattern.prototype.getPath = function () {
		var tileWidth = this.getTileWidth();
		var tileHeight = this.getTileHeight();
		var dStr = "";
		dStr = dStr.concat("M-").concat(tileWidth / 4).concat(",").concat(tileHeight / 4).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		dStr = dStr.concat("M0").concat(",").concat(tileHeight).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth).concat(",-").concat(tileHeight).concat(" ");
		dStr = dStr.concat("M").concat(tileWidth / 4 * 3).concat(",").concat(tileHeight / 4 * 5).concat(" ");
		dStr = dStr.concat("l").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		return dStr;
	};
	
	SlashPattern.prototype.getDefString = function () {
		return "<pattern class='pattern' id='" + this.getId() +
			"' patternUnits='userSpaceOnUse' x='0' y='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"'><rect x='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"' fill='" + this.getBackgroundColor() +
			"' fill-opacity='" + this.getBackgroundFillOpacity() +
			"'></rect><path d='" + this.getPath() +
			"' stroke='" + this.getStroke() +
			"' stroke-width='" + this.getStrokeWidth() + "'></path></pattern>";
	};

	return SlashPattern;
}, true);

}; // end of sap/gantt/def/pattern/SlashPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.Drawer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.drawer.Drawer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/Drawer",[
	"sap/ui/base/Object"
], function (Object) {
	"use strict";

	/**
	 * Creates and initializes a new drawer.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Base class for all d3 drawers.
	 * 
	 * <p>In sap.gantt, most d3 logics are wrapped by Drawer classes. This helps to segregate d3 data binding and rendering logic for SVG from genraral UI5 classes.
	 * For now Drawer concept are not open for application development. 
	 * They are instantiated, used and destroyed inside <code>sap.gantt.Gantt</code> and <code>sap.gantt.GanttWithTable</code>.</p>
	 * 
	 * @extend sap.ui.base.Object
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @private
	 * @alias sap.gantt.drawer.Drawer
	 */
	var Drawer = Object.extend("sap.gantt.drawer.Drawer", /* @lends sap.gantt.drawer.Drawer */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Provide drawing logic.
	 * 
	 * <p>Every subclasses should implement this method.</p>
	 *
	 * @private
	 * @function
	 * @param {array} aSvgNode d3 Nodes selected by d3 selector. Current drawer is supposed to draw on all the svg nodes passed in by this parameter.
	 */

	/**
	 * Provide destroying logic.
	 * 
	 * <p>Every subclasses should implement this method. 
	 * Events on SVG elements if exist are recommended to be removed in this methods.</p>
	 *
	 * @private
	 * @function
	 * @param {array} aSvgNode d3 Nodes selected by d3 selector.
	 * Current drawer is supposed to draw on all the svg nodes passed in by this parameter.
	 */

	return Drawer;
}, true);

}; // end of sap/gantt/drawer/Drawer.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ExpandedBackground') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.ExpandedBackground'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ExpandedBackground",[
	"sap/gantt/drawer/Drawer", 
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Core) {
	"use strict";

	var ExpandedBackground = Drawer.extend("sap.gantt.drawer.ExpandedBackground");
	
	ExpandedBackground.prototype.drawSvg = function (aSvg, aData, oChartSchemeBackgroundConfig) {


		if (!aData){
			return null;
		}

		var aExpandedData = [];

		for (var i = 0; i < aData.length; i++){
			if ((aData[i].index && aData[i].index !== 0) || oChartSchemeBackgroundConfig.hasOwnProperty(aData[i].chartScheme)){
				aExpandedData.push(aData[i]);
			}
		}

		var aBackgroundSvg = aSvg.selectAll(".sapGanttChartRowBackground").remove();
		aBackgroundSvg = aSvg.insert("g", ":first-child")
			.classed("sapGanttChartRowBackground", true);
		

		var aSvgRowG = aBackgroundSvg.selectAll(".expandedRow").data(aExpandedData);
		aSvgRowG.enter().append("g").classed("expandedRow",true);
		aSvgRowG.exit().remove();

		// draw
		if (!aSvgRowG.empty()) {
			var iDocumentWidth = jQuery(aSvg.node()).width();
			this._drawExpandedBackground(aSvg, iDocumentWidth, oChartSchemeBackgroundConfig);
		}
	};

	ExpandedBackground.prototype._drawExpandedBackground = function (aSvg, iWidth, oChartSchemeBackgroundConfig) {
		aSvg.selectAll(".expandedRow").selectAll("rect").remove();
		aSvg.selectAll(".expandedRow").append("rect")
			.attr("x", function(d) {
				return 0;
			})
			.attr("y", function(d) {
				return d.y;
			})
			.attr("height", function(d) {
				// -1 just for show parent container border 
				return d.rowHeight - 1;
			})
			.attr("width", function(d) {
				// -1 just for show parent container border
				return "100%";
			})
			.attr("class", function(d) {
				var sBackgroundClass = oChartSchemeBackgroundConfig[d.chartScheme];
				if (sBackgroundClass && sBackgroundClass !== ""){
					return sBackgroundClass;
				} else {
					return "sapGanttExpandChartCntBG";
				}
			});

		aSvg.selectAll(".expandedRow").selectAll("path").remove();
		aSvg.selectAll(".expandedRow").append("path").classed("sapGanttExpandChartLine",true)
			.attr("d", function(d){
				return "M0 " + (d.y - 1) + " H" + (iWidth - 1);
			});
		
	};

	return ExpandedBackground;
},true);

}; // end of sap/gantt/drawer/ExpandedBackground.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.TimePeriodZoomRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.TimePeriodZoomRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/TimePeriodZoomRectangle",[
	"sap/gantt/drawer/Drawer", 
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer) {
	"use strict";

	var TimePeriodZoomRectangle = Drawer.extend("sap.gantt.drawer.TimePeriodZoomRectangle");

	TimePeriodZoomRectangle.prototype.drawSvg = function (aSvgNode, xPosition, iHeight) {
		aSvgNode.selectAll(".sapGanttChartTimePeriodZoomRectangle").remove();
		aSvgNode.append("rect")
			.classed("sapGanttChartTimePeriodZoomRectangle", true)
			.attr("x", function() {
				return xPosition;
			})
			.attr("y", function() {
				return 0;
			})
			.attr("height", function() {
				return iHeight;
			});
	};

	TimePeriodZoomRectangle.prototype.updateSvg = function (aSvgNode, iStartPoint, iEndPoint) {
		aSvgNode.selectAll(".sapGanttChartTimePeriodZoomRectangle")
		.attr("x", function() {
			return iStartPoint;
		})
		.attr("width", function() {
			return iEndPoint - iStartPoint;
		});
	};

	TimePeriodZoomRectangle.prototype.destroySvg = function (aSvgNode) {
		aSvgNode.selectAll(".sapGanttChartTimePeriodZoomRectangle").remove();
	};

	return TimePeriodZoomRectangle;
},true);

}; // end of sap/gantt/drawer/TimePeriodZoomRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.eventHandler.AutoScrollHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.eventHandler.AutoScrollHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/eventHandler/AutoScrollHandler",[
	'jquery.sap.global', 'sap/ui/core/Element', "sap/ui/core/Core"
], function (jQuery, Element, Core) {
	"use strict";
	/**
	 * Constructor for a new AutoScrollHandler
	 *
	 * @param {string} [sId] ID of the new event handler, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new event handler
	 *
	 * @class
	 * Defines the properties required for the initialization of autoscroll setting
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.eventHandler.AutoScrollHandler
	 */
	var AutoScrollHandler = Element.extend("sap.gantt.eventHandler.AutoScrollHandler", /** @lends sap.gantt.config.AutoScrollHandler.prototype */ {
		metadata: {
			properties: {
				/**
				 *the horizontal distance next to which the scroll bar will move automatically
				 */
				horizontalThreshold: {type: "int", defaultValue: 50},
				/**
				 * the vertical distance next to which the scroll bar will move automatically
				 */
				verticalThreshold: {type: "int", defaultValue: 50 },
				/**
				 *the distance of every horizontal scroll
				 */
				horizontalScrollStep: {type: "int", defaultValue: 50},
				/**
				 *the distance of every vertical scroll
				 */
				verticalScrollStep: {type: "int", defaultValue: 50},
				/**
				 *the interval time between each scroll
				 */
				delayInMillis: {type: "int", defaultValue: 200}
			}
		}
	});

	//when the mouse enters a corner of GanttChart, trigger a horizontal or vertical auto-scroll
	AutoScrollHandler.prototype.autoScroll = function (oGanttChart, oEvent) {
		//when mouse moves, clear the timeout value
		this.stop();

		var $svgCtn = jQuery(oGanttChart.getDomSelectorById("svg-ctn"));
		var $hsb = oGanttChart._oTT.$(sap.ui.table.SharedDomRef.HorizontalScrollBar);
		var $vsb = oGanttChart._oTT.$(sap.ui.table.SharedDomRef.VerticalScrollBar);
		if($svgCtn.offset()){
			var iSvgLeft = $svgCtn.offset().left;
			var iSvgRight = iSvgLeft + $svgCtn.width();
			var iSvgTop = $svgCtn.offset().top;
			var iSvgBottom = $svgCtn.offset().top + $svgCtn.height();
			var iHorizontalThreshold = this.getHorizontalThreshold();
			var iVerticalThreshold = this.getVerticalThreshold();
			var iHorizontalScrollStep = this.getHorizontalScrollStep();
			var iVerticalScrollStep = this.getVerticalScrollStep();
			var iDelayInMillis = this.getDelayInMillis();//the interval of every scroll
	
			//when the mouse enters four corners(areas match the condition for both horizontal and vertical auto-scroll),
			//trigger the horizontal auto-scroll first until horizontal scroll bar reaches margin, then trigger vertical auto-scroll
			if (oEvent.pageX - iSvgLeft > 0 && oEvent.pageX - iSvgLeft < iHorizontalThreshold) {
				//when the mouse reaches the left margin of ganttChart with a distance < iHorizontalThreshold
				//shift the horizontal scroll bar to left by iHorizontalScrollStep
				oGanttChart._destroyCursorLine();
				this._iAutoScrollTimeout = jQuery.sap.intervalCall(iDelayInMillis, this, function() {
					if (Core.getConfiguration().getRTL()) {
						$hsb.scrollLeftRTL($hsb.scrollLeftRTL() - iHorizontalScrollStep);
					}else{
						$hsb.scrollLeft($hsb.scrollLeft() - iHorizontalScrollStep);
					}
				});
				return "scrollLeft";
			} else if (iSvgRight - oEvent.pageX > 0 && iSvgRight - oEvent.pageX < iHorizontalThreshold) {
				//when the mouse reaches the right margin of ganttChart with a distance < iHorizontalThreshold
				//shift the horizontal scroll bar to right by iHorizontalScrollStep
				oGanttChart._destroyCursorLine();
				this._iAutoScrollTimeout = jQuery.sap.intervalCall(iDelayInMillis, this, function() {
					if (Core.getConfiguration().getRTL()) {
						$hsb.scrollLeftRTL($hsb.scrollLeftRTL() + iHorizontalScrollStep);
					}else{
						$hsb.scrollLeft($hsb.scrollLeft() + iHorizontalScrollStep);
					}
				});
				return "scrollRight";
			} else if (oEvent.pageY - iSvgTop > 0 && oEvent.pageY - iSvgTop < (iVerticalThreshold - 4)) {
				//when the mouse reaches the top margin of ganttChart with a distance < iVerticalThreshold
				//shift the vertical scroll bar to top by iVerticalScrollStep
				//reserve 4px as the gap between mouse&shape
				this._iAutoScrollTimeout = jQuery.sap.intervalCall(iDelayInMillis, this, function() {
					$vsb.scrollTop($vsb.scrollTop() - iVerticalScrollStep);
				});
				return "scrollTop";
			} else if (iSvgBottom - oEvent.pageY > 0 && iSvgBottom - oEvent.pageY < (iVerticalThreshold + 4)) {
				//when the mouse reaches the bottom margin of ganttChart with a distance < iVerticalThreshold
				//shift the vertical scroll bar to bottom by iVerticalScrollStep
				//reserve 4px as the gap between mouse&shape
				this._iAutoScrollTimeout = jQuery.sap.intervalCall(iDelayInMillis, this, function() {
					$vsb.scrollTop($vsb.scrollTop() + iVerticalScrollStep);
				});
				return "scrollBottom";
			}
		}
	};

	//every time when mouse moves, clear the timeout value
	AutoScrollHandler.prototype.stop = function () {
		jQuery.sap.clearIntervalCall(this._iAutoScrollTimeout);
	};

	return AutoScrollHandler;
}, true);
}; // end of sap/gantt/eventHandler/AutoScrollHandler.js
if ( !jQuery.sap.isDeclared('sap.gantt.eventHandler.MouseWheelHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.eventHandler.MouseWheelHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/gantt/eventHandler/MouseWheelHandler",[
	"jquery.sap.global", "sap/ui/Device", "sap/ui/base/Object"
], function (jQuery, Device, BaseObject) {
	"use strict";
	/**
	 * Constructor for a new MouseWheelHandler
	 *
	 * Initialize the handler and reserve the caller of this handler as the '_oSourceChart'
	 * currently, '_oSourceChart' may be an instance of GanttChart or GanttChartWithTable
	 * @param {object} oChart an instance of the caller
	 * 
	 * @class
	 * Defines the properties required for the initialization of mouse wheel zooming
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.eventHandler.MouseWheelHandler
	 */
	var MouseWheelHandler = BaseObject.extend("sap.gantt.eventHandler.MouseWheelHandler", {
		constructor : function (oChart) {
			BaseObject.call(this);
			this._oSourceChart = oChart;
			this._lastCalledMouseWheelZoom = 0;
			this._iMouseWheelZoomTimer = undefined;
		}
	});

	/**
	 * All pre-process work for mouse wheel event are handled here
	 * @param {object} oEvent JQuery event object
	 * @return {boolean} true if mouse wheel zoom is triggered
	 */
	MouseWheelHandler.prototype.handleEvent = function (oEvent) {
		var oOriginalEvent = oEvent.originalEvent;

		var bIsShitKey = oOriginalEvent.shiftKey;
		var bIsCtrlKey = oOriginalEvent.ctrlKey;
		var iScrollDelta = this._getScrollDelta(oOriginalEvent);
		//this flag is used for outer caller to know whether a zoom is actually triggered, if so, a sync between
		//multiple views may be needed
		var bIsZoomTriggerred = false;

		if (bIsShitKey) {
			//SHIFT + CTRL + WHEEL for zoom
			if (bIsCtrlKey) {
				bIsZoomTriggerred = this._handleZoom(oEvent, iScrollDelta);
			} else {
				//SHIFT+WHEEL for horizontal scrolling
				this._handleHScroll(oEvent, iScrollDelta);
			}
		} else {
			//Pure wheel scroll trigger a vertical scroll
			this._handleVScroll(oEvent, iScrollDelta);
		}
		return bIsZoomTriggerred;
	};

	/**
	 * calculate the scroll delta
	 * @param {object} oEvent JQuery event object
	 * @return {number} the scroll range of the wheel event
	 */
	MouseWheelHandler.prototype._getScrollDelta = function (oEvent) {
		var iScrollDelta = 0;
		if (Device.browser.firefox) {
			iScrollDelta = oEvent.detail;
		} else {
			//For IE, FF, CHROME, the scroll delta is all on 'deltaY', even with key 'shift', 'ctrl', 'alt', or 'shift+ctrl'
			iScrollDelta = oEvent.deltaY || oEvent.deltaX;
		}
		return iScrollDelta;
	};

	/**
	 * when the mouse SCROLL + SHIFT + CTRL key, trigger a zoom
	 * @param {object} oEvent JQuery event object
	 * @param {number} iScrollDelta scroll range of wheel event
	 * @return {boolean} true if mouse wheel zoom is triggered
	 */
	MouseWheelHandler.prototype._handleZoom = function (oEvent, iScrollDelta) {
		var oOriginalEvent = oEvent.originalEvent;
		var oZoomStrategy = this._oSourceChart.getAxisTimeStrategy();
		var bIsZoomTriggerred = false;

		if (oZoomStrategy.getMouseWheelZoomType() !== sap.gantt.MouseWheelZoomType.None) {
			var bZoomIn = iScrollDelta < 0;
			if ((!bZoomIn && oZoomStrategy.getZoomLevel() > 0 ) || (bZoomIn && oZoomStrategy.getZoomLevel() < oZoomStrategy.getZoomLevels() - 1)) {
				if (this._oSourceChart._destroyCursorLine) {
					this._oSourceChart._destroyCursorLine();
				}
				// update the visible horizon by using a delayed mechanism to avoid to many update
				// it will trigger an update each 100ms, so the update requests fired with 100ms will be done once
				// Except: if it is firstly triggered, or the last delayed call is finished and the time elapsed since last call is long enough for the 
				// whole re-draw to be finished, we do an immediate update instead of a delayed one
				var iTimerDelay = (!this._iMouseWheelZoomTimer && (Date.now() - this._lastCalledMouseWheelZoom > 100)) ? 0 : 100;
				if (iTimerDelay === 0) {
					this._updateVisibleHorizon(oOriginalEvent, iScrollDelta);
				} else {
					this._iMouseWheelZoomTimer = this._iMouseWheelZoomTimer || jQuery.sap.delayedCall(iTimerDelay, this, this._updateVisibleHorizon, [oOriginalEvent, iScrollDelta]);
				}
				bIsZoomTriggerred = true;
			}
			this._preventBubbleAndDefault(oEvent);
		}
		return bIsZoomTriggerred;
	};

	/**
	 * calculate new visible horizon time range
	 * @param {object} oEvent JQuery event object
	 * @param {number} iScrollDelta scroll range of wheel event
	 */
	MouseWheelHandler.prototype._updateVisibleHorizon = function (oEvent, iScrollDelta) {
		this._lastCalledMouseWheelZoom = Date.now();

		var oZoomStrategy = this._oSourceChart.getAxisTimeStrategy();

		//calculate the time where mouse pointer located
		var $chartSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		if ($chartSvg) {
			//for MS Edge, the pageX is not usable when browser zoom rate <> 100% and RTL = true,
			//instead, clientX is always right for all zoom rate and RTL scenario
			var iMousePosition = (Device.browser.edge ? oEvent.clientX : oEvent.pageX) - $chartSvg.offset().left || oEvent.offsetX;
			var oTimeAtMousePosition = oZoomStrategy.getAxisTime().viewToTime(iMousePosition);
			// update visible horizon according to different zoom granularity configured in zoom strategy
			oZoomStrategy.updateVisibleHorizonOnMouseWheelZoom(oTimeAtMousePosition, iScrollDelta);
		}
		this._iMouseWheelZoomTimer = undefined;
	};

	/**
	 * SHIFT+WHEEL for horizontal scrolling
	 * @param {object} oEvent JQuery event object
	 * @param {number} iScrollDelta scroll range of wheel event
	 */
	MouseWheelHandler.prototype._handleHScroll = function (oEvent, iScrollDelta) {
		var oHSb = this._oSourceChart.getTTHsbDom();
		var bScrolledToEnd = false;
		var bScrollingForward = iScrollDelta > 0;

		if (oHSb) {
			if (bScrollingForward) {
				bScrolledToEnd = Math.round(oHSb.scrollLeft) === oHSb.scrollWidth - oHSb.clientWidth;
			} else {
				bScrolledToEnd = oHSb.scrollLeft === 0;
			}
			//bubble-up only when scrolling reaches ganttchart boundary
			if (!bScrolledToEnd) {
				this._preventBubbleAndDefault(oEvent);
				oHSb.scrollLeft += iScrollDelta;
			}
		}
	};

	/**
	 * Pure WHEEL for vertical scrolling
	 * @param {object} oEvent JQuery event object
	 * @param {number} iScrollDelta scroll range of wheel event
	 */
	MouseWheelHandler.prototype._handleVScroll = function (oEvent, iScrollDelta) {
		var oVSb = this._oSourceChart.getTTVsbDom();
		var bScrolledToEnd = false;
		var bScrollingForward = iScrollDelta > 0;

		if (oVSb) {
			if (bScrollingForward) {
				bScrolledToEnd = Math.round(oVSb.scrollTop) === oVSb.scrollHeight - oVSb.clientHeight;
			} else {
				bScrolledToEnd = oVSb.scrollTop === 0;
			}
			//bubble-up only when scrolling reaches ganttchart boundary
			if (!bScrolledToEnd) {
				this._preventBubbleAndDefault(oEvent);

				var iRowsPerStep = iScrollDelta / this._oSourceChart.getBaseRowHeight();
				// If at least one row is scrolled, floor to full rows.
				// Below one row, just scroll pixels.
				if (iRowsPerStep > 1) {
					iRowsPerStep = Math.floor(iRowsPerStep);
				}

				oVSb.scrollTop += iRowsPerStep * this._getScrollingPixelsForRow();
			}
		}
	};

	//calculate pixels of a row in scrollable area
	MouseWheelHandler.prototype._getScrollingPixelsForRow = function () {
		var oTable = this._oSourceChart._oTT;
		if (oTable) {
			var iVisibleRowCount = oTable.getVisibleRowCount();
			var iScrollableRowCount = Math.max(1, iVisibleRowCount - oTable.getFixedRowCount() - oTable.getFixedBottomRowCount());
			var iRowHeight = this._oSourceChart.getBaseRowHeight();
			var iVSbHeight = iScrollableRowCount * iRowHeight;
			var iBindingRowCount = oTable.getBinding("rows").getLength();
			var iTotalScrollRowCount = Math.max(iBindingRowCount, iVisibleRowCount + 1);
			var iTotalScrollRange = iTotalScrollRowCount * iRowHeight;
			var iVirtualScrollRange = Math.max(1, iTotalScrollRange - iVSbHeight - this._getRowHeightsDelta());

			var iMaxRowCountForScroll;
			if (iVisibleRowCount > iBindingRowCount) {
				iMaxRowCountForScroll = iBindingRowCount;
			} else {
				iMaxRowCountForScroll = Math.max(0, iBindingRowCount - iVisibleRowCount - 1);
			}

			return Math.ceil(iVirtualScrollRange / Math.max(1, iMaxRowCountForScroll));
		}
		return 0;
	};

	//calculate the delta heights in case expand chart is opened
	MouseWheelHandler.prototype._getRowHeightsDelta = function() {
		var oTable = this._oSourceChart._oTT;
		if (oTable) {
			var iBindingRowCount = oTable.getBinding("rows").getLength();
			var iVisibleRowCount = oTable.getVisibleRowCount();
			var iEstimatedViewportHeight = this._oSourceChart.getBaseRowHeight() * iVisibleRowCount;
			var aRowHeights = this._oSourceChart._getRowHeights();
			// Case: Not enough data to fill all available rows, only sum used rows.
			if (iVisibleRowCount > iBindingRowCount) {
				aRowHeights = aRowHeights.slice(0, iBindingRowCount);
			}
			var iRowHeightsDelta = aRowHeights.reduce(function(a, b) { return a + b; }, 0) - iEstimatedViewportHeight;
			if (iRowHeightsDelta > 0) {
				iRowHeightsDelta = Math.ceil(iRowHeightsDelta);
			}
			return Math.max(0, iRowHeightsDelta);
		}
		return 0;
	};

	MouseWheelHandler.prototype._preventBubbleAndDefault = function (oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	return MouseWheelHandler;
}, true);
}; // end of sap/gantt/eventHandler/MouseWheelHandler.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.DimensionLegendRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.legend.DimensionLegendRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/DimensionLegendRenderer",[], function (Parameters) {
	"use strict";

	/**
	 * Dimension Legend renderer.
	 *
	 * @namespace
	 */
	var DimensionLegendRenderer = {};

	DimensionLegendRenderer.render = function (oRenderManager, oLegend) {
		jQuery.sap.measure.start("DimensionLegendRenderer render","GanttPerf:DimensionLegendRenderer render function");
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oLegend);
		oRenderManager.addStyle("width", "100%");
		oRenderManager.addStyle("height", "100%");
		oRenderManager.addStyle("position", "relative");
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		this.renderSvgDefs(oRenderManager, oLegend);

		oRenderManager.write("<div");
		oRenderManager.addStyle("float", sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left");
		oRenderManager.writeStyles();
		oRenderManager.write(">");
			oRenderManager.write("<svg");
			oRenderManager.writeAttribute("id", oLegend.getId() + "-svg");
			oRenderManager.writeClasses();
			oRenderManager.writeAttributeEscaped("tabindex", (sap.ui.Device.browser.chrome ? null : -1));
			oRenderManager.writeAttributeEscaped("focusable", false);
			oRenderManager.write("></svg>");
			oRenderManager.write("<svg");
			oRenderManager.writeAttribute("id", oLegend.getId() + "-dimension-path");
			oRenderManager.addClass("sapGanttDimensionLegendPath");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("position", "absolute");
			oRenderManager.addStyle(sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left", "0px");
			oRenderManager.writeStyles();
			//in Browser chrome, element still can be focused with tabindex=-1, tabindex=null can avoid that
			oRenderManager.writeAttributeEscaped("tabindex", (sap.ui.Device.browser.chrome ? null : -1));
			oRenderManager.writeAttributeEscaped("focusable", false);
			oRenderManager.write(">");
			oRenderManager.write("</svg>");
			oRenderManager.write("</div>");

			oRenderManager.write("<div><svg");
			oRenderManager.writeAttribute("id", oLegend.getId() + "-dimension-text");
			oRenderManager.addClass("sapGanttDimensionLegendText");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("position", "absolute");
			oRenderManager.addStyle("width", "100px");
			oRenderManager.writeStyles();
			oRenderManager.writeAttributeEscaped("tabindex", (sap.ui.Device.browser.chrome ? null : -1));
			oRenderManager.writeAttributeEscaped("focusable", false);
			oRenderManager.write("></svg></div>");
		oRenderManager.write("</div>");
		jQuery.sap.measure.end("DimensionLegendRenderer render");
	};

	DimensionLegendRenderer.renderSvgDefs = function (oRenderManager, oLegend) {
		var oSvgDefs = oLegend.getSvgDefs();
		if (oSvgDefs) {
			oRenderManager.write("<svg id='" + oLegend.getId() + "-svg-psdef'");
			oRenderManager.addStyle("float", "left");
			oRenderManager.addStyle("width", "0px");
			oRenderManager.addStyle("height", "0px");
			oRenderManager.writeStyles();
			oRenderManager.writeAttributeEscaped("tabindex", (sap.ui.Device.browser.chrome ? null : -1));
			oRenderManager.writeAttributeEscaped("focusable", false);
			oRenderManager.write(">");
			oRenderManager.write(oSvgDefs.getDefString());
			oRenderManager.write("</svg>");
		}
	};

	return DimensionLegendRenderer;
}, true);

}; // end of sap/gantt/legend/DimensionLegendRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.LegendContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Page'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/LegendContainer",[
	"sap/ui/core/Control", "sap/m/NavContainer", "sap/m/Page", "sap/m/List", "sap/m/StandardListItem"
], function (Control, NavContainer, Page, List, StandardListItem) {
	"use strict";

	/**
	 * Creates and initializes a new legend container.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * The LegendContainer control uses the NavContainer control to handle hierarchical navigation between legend sections. The LegendContainer control
	 * contains an initial navigation page. Both the initial navigation page legend sections are Page controls.
	 * 
	 * @extends sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.legend.LegendContainer
	 */
	var LegendContainer = Control.extend("sap.gantt.legend.LegendContainer", /** @lends sap.gantt.legend.Legend.prototype */ {
		metadata: {
			properties: {
				/**
				 * Width of the legend navigation. When the width specified is smaller than a section content, a horizontal scroll bar appears.width of the legend navigation. When the width specified is smaller than a section content, a horizontal scroll bar appears.
				 */
				width: {type : "sap.ui.core.CSSSize", group: "Misc", defaultValue: "200px"},

				/**
				 * Height of the legend navigation. When the height specified is smaller than a section content, a vertical scroll bar appears.
				 */
				height: {type : "sap.ui.core.CSSSize", group: "Misc", defaultValue: "200px"}
			},
			aggregations : {
				/**
				 * <p>This aggregation specifies the title of a legend section. When you add the legend section to a legend navigation container, 
				 * you must specify a title for the legend section so that the section can be identified in the initial navigation list. Otherwise, 
				 * your legend section is not reachable via GUI.
				 */
				legendSections : {type: "sap.m.Page", multiple: true, visibility: "public", singularName: "legendSection"}
			}
		}
	});

	/**
	 * Creates a control instance of NavContainer for the legend and the initial navigation page
	 * 
	 * @private
	 */
	LegendContainer.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this._sTitle = this._oRb.getText("LEGEND_TITLE");
		this._oNavContainer = new NavContainer({
			width: this.getWidth(),
			height: this.getHeight()
		});
		this._oInitNavPage = new Page({title: this._oRb.getText("LEGEND_TITLE"),
										content: [new List()]
									});
		//this._oNavContainer.addPage(this._oInitNavPage);
		this._aLegendSections = [];
	};

	LegendContainer.prototype.setWidth = function(sWidth){
		this.setProperty("width", sWidth, true);
		this._oNavContainer.setWidth(sWidth);
		return this;
	};

	LegendContainer.prototype.setHeight = function(sHeight){
		this.setProperty("height", sHeight, true);
		this._oNavContainer.setHeight(sHeight);
		return this;
	};

	LegendContainer.prototype.addLegendSection = function(oLegendSection){
		if (oLegendSection) {
			if (this._aLegendSections.length == 1) {
				this._oNavContainer.insertPage(this._oInitNavPage, 0);
				this._aLegendSections[0].setShowNavButton(true);
			}

			if (this._aLegendSections.length !== 0) {
				oLegendSection.setShowNavButton(true);
			}

			oLegendSection.attachNavButtonPress(this._onNavBack, this);
			oLegendSection.setBackgroundDesign(sap.m.PageBackgroundDesign.Solid);
			oLegendSection.setEnableScrolling(true);
			var sLegendTitle = oLegendSection.getTitle();
			if (sLegendTitle !== undefined) {
				var oListItem = new StandardListItem({
					title: sLegendTitle,
					type: sap.m.ListType.Navigation
				});
				oListItem.attachPress(this._onNavToLegendSection, this);
				this._oInitNavPage.getContent()[0].addItem(oListItem);
			}
			this._aLegendSections.push(oLegendSection);
			this._oNavContainer.addPage(oLegendSection);
		}
		return this;
	};

	LegendContainer.prototype.insertLegendSection = function(oLegendSection, iIndex){
		if (oLegendSection) {
			var iMaxLength = this._aLegendSections.length;

			if (iMaxLength == 1) {
				this._oNavContainer.insertPage(this._oInitNavPage, 0);
				this._aLegendSections[0].setShowNavButton(true);
			}

			if (iMaxLength !== 0) {
				oLegendSection.setShowNavButton(true);
			}

			if (iIndex >= iMaxLength) {
				iIndex = iMaxLength;
			}

			oLegendSection.attachNavButtonPress(this._onNavBack, this);
			oLegendSection.setBackgroundDesign(sap.m.PageBackgroundDesign.Solid);
			oLegendSection.setEnableScrolling(true);
			var sLegendTitle = oLegendSection.getTitle();
			if (sLegendTitle !== undefined) {
				var oListItem = new StandardListItem({
					title: sLegendTitle,
					type: sap.m.ListType.Navigation
				});
				oListItem.attachPress(this._onNavToLegendSection, this);
				this._oInitNavPage.getContent()[0].insertItem(oListItem, iIndex);
			}
			this._oNavContainer.insertPage(oLegendSection, iIndex + 1);
			this._aLegendSections.splice(iIndex, 0, oLegendSection);
		}
		return this;
	};

	LegendContainer.prototype.indexOfLegendSection = function(oLegendSection){
		var iIndex = jQuery.inArray(oLegendSection, this._aLegendSections);
		return iIndex;
	};

	LegendContainer.prototype.removeLegendSection = function(vPage){
		var oRetValue;
		if ((typeof vPage) === "number") {
			this._oNavContainer.removePage(vPage + 1);
			this._oInitNavPage.getContent()[0].removeItem(vPage);
			oRetValue = this._aLegendSections.splice(vPage + 1, 1);
		} else if (vPage) {
			this._oInitNavPage.getContent()[0].removeItem(jQuery.inArray(vPage, this._oNavContainer.getPages()) - 1);
			this._oNavContainer.removePage(vPage);
			oRetValue = this._aLegendSections.splice(jQuery.inArray(vPage, this._aLegendSections), 1);
		}

		if (this._aLegendSections.length == 1) {
			if (this._oNavContainer.getCurrentPage() == this._oInitNavPage) {
				this._oNavContainer.to(this._aLegendSections[0]);
			}
			this._aLegendSections[0].setShowNavButton(false);
		}
		return oRetValue;
	};

	LegendContainer.prototype.removeAllLegendSection = function(){
		var aRemovedLegendSections = this._aLegendSections.splice(0, this._aLegendSections.length);
		this._oInitNavPage.getContent()[0].removeAllItems();
		this._oNavContainer.removeAllPages();

		return aRemovedLegendSections;
	};

	LegendContainer.prototype.getLegendSections = function(){
		var aPages = this._oNavContainer.getPages();
		var that = this;
		return aPages.filter(function(oValue){
			if (oValue.getTitle() !== that._sTitle) {
				return true;
			}
		});
	};

	/**
	 * Returns the control instance of List Control for the initial navigation page
	 * 
	 * @return {sap.m.Page} Control instance of the initial navigation page
	 * @public
	 */
	LegendContainer.prototype.getNavigationPage = function(){
		return this._oInitNavPage;
	};

	/**
	 * Returns the navigation items in the initial navigation list
	 * 
	 * @return {sap.m.StandardListItem} Control instance of the initial page
	 * @public
	 */
	LegendContainer.prototype.getNavigationItems = function(){
		return this._oInitNavPage.getContent()[0].getItems();
	};

	/**
	 * Returns the currently displayed legend section. If no legend section is added, this function returns the initial navigation page.
	 *
	 * @return {sap.m.Page} Control instance of the legend section
	 * @public
	 */
	LegendContainer.prototype.getCurrentLegendSection = function(){
		return this._oNavContainer.getCurrentPage();
	};

	/**
	 * Navigates to the detailed legend section page.
	 *
	 * @param {object} oEvent Object that has been passed by clicking an item in the initial navigation page
	 * @private
	 */
	LegendContainer.prototype._onNavToLegendSection = function(oEvent){
		var sLegendSectionName = oEvent.getSource().getTitle();

		for (var i = 0; i < this._aLegendSections.length; i++) {
			if (sLegendSectionName == this._aLegendSections[i].getTitle()){
				this._oNavContainer.to(this._aLegendSections[i]);
			}
		}
	};

	/**
	 * Navigates back to the initial navigation page.
	 *
	 * @param {object} oEvent Object that has been passed by clicking return button
	 * @private
	 */
	LegendContainer.prototype._onNavBack = function(oEvent) {
		this._oNavContainer.to(this._oInitNavPage);
	};

	return LegendContainer;
});

}; // end of sap/gantt/legend/LegendContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.legend.LegendContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/legend/LegendContainerRenderer",[], function () {
	"use strict";

	/**
	 * LegendContainer renderer.
	 * @namespace
	 */
	var LegendContainerRenderer = {};

	LegendContainerRenderer.render = function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapGanttChartLegend");
		oRm.writeClasses();
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", "100%");
		oRm.writeStyles();
		oRm.write(">");
		oRm.renderControl(oControl._oNavContainer);
		oRm.write("</div>");
	};
	
	return LegendContainerRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/legend/LegendContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.ListLegendRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.legend.ListLegendRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/ListLegendRenderer",[
	"sap/ui/core/theming/Parameters"
], function (Parameters) {
	"use strict";

	/**
	 * List Legend renderer.
	 *
	 * @namespace
	 */
	var ListLegendRenderer = {};

	ListLegendRenderer.render = function (oRenderManager, oLegend) {
		jQuery.sap.measure.start("ListLegendRenderer render","GanttPerf:ListLegendRenderer render function");
		var aShapes = oLegend._aShapeInstance,
		sLegendWidth = oLegend.getScaledLegendWidth(),
		sLegendHeight = oLegend.getScaledLegendHeight();

		oRenderManager.write("<div");
		oRenderManager.writeControlData(oLegend);
		oRenderManager.addClass("sapGanttLL");
		oRenderManager.write(">");

		jQuery.sap.measure.start("ListLegendRenderer renderPaintServer","GanttPerf:ListLegendRenderer renderPaintServer part");
		this.renderSvgDefs(oRenderManager, oLegend);
		jQuery.sap.measure.end("ListLegendRenderer renderPaintServer");

		for (var i = 0; i < aShapes.length; i++) {
			var sLegend = aShapes[i].getLegend();
				
			oRenderManager.write("<div");
			oRenderManager.writeAttributeEscaped("title", sLegend);
			oRenderManager.addClass("sapGanttLLItem");
			oRenderManager.writeClasses();
			oRenderManager.addStyle("height", sLegendHeight + "px");
			oRenderManager.addStyle("line-height", sLegendHeight + "px");
			oRenderManager.writeStyles();
			oRenderManager.write(">");

				if (oLegend._aCheckBoxes[i]) {
					if (aShapes[i].mShapeConfig.getSwitchOfCheckBox() == "noShow") {
						oLegend._aCheckBoxes[i].addStyleClass("noShowCheckBox");
					}
					oRenderManager.renderControl(oLegend._aCheckBoxes[i]);
				}

				oRenderManager.write("<svg");
				oRenderManager.writeAttribute("id", oLegend.getId() + "-svg-" + i);
				oRenderManager.addClass("sapGanttLLSvg");
				oRenderManager.addStyle("width", sLegendWidth + "px");
				oRenderManager.writeStyles();
				oRenderManager.writeAttributeEscaped("tabindex", -1);
				oRenderManager.writeAttributeEscaped("focusable", false);
				if (oLegend._aCheckBoxes.length == 0) {
					oRenderManager.addClass("NoCheckBox");
				}
				oRenderManager.writeClasses();
				oRenderManager.write("></svg>");

				oRenderManager.write("<div");
				oRenderManager.writeAttribute("id", oLegend.getId() + "-txt-" + i);
				oRenderManager.addClass("sapGanttLLItemTxt");
				oRenderManager.writeClasses();
				oRenderManager.addStyle("font-size", oLegend.getFontSize() + "px");
				oRenderManager.writeStyles();
				oRenderManager.write(">");
					if (sLegend) {
						oRenderManager.writeEscaped(sLegend);
					}
				oRenderManager.write("</div>");
			oRenderManager.write("</div>");
		}
		oRenderManager.write("</div>");
		jQuery.sap.measure.end("ListLegendRenderer render");
	};

	ListLegendRenderer.renderSvgDefs = function (oRenderManager, oLegend) {
		var oSvgDefs = oLegend.getSvgDefs();
		if (oSvgDefs) {
			oRenderManager.write("<svg");
			oRenderManager.writeAttribute("id", oLegend.getId() + "-svg-psdef");
			oRenderManager.addClass("sapGanttLLSvgDefs");
			oRenderManager.writeClasses();
			oRenderManager.write(">");
			oRenderManager.write(oSvgDefs.getDefString());
			oRenderManager.write("</svg>");
		}
	};

	return ListLegendRenderer;
}, true);

}; // end of sap/gantt/legend/ListLegendRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.Format') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.Format'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/Format",[
	"sap/ui/core/format/DateFormat",
	"sap/ui/thirdparty/d3"
], function (DateFormat) {
	"use strict";

	/**
	 * A dummy constructor for Format. Do not construct a Format object; instead, call static methods abapTimestampToDate, dateToAbapTimestamp, and abapTimestampToTimeLabel directly.
	 *
	 * @class
	 * The Format class provides static methods for formatting dates, times, and timestamps to be used in sap.gantt
	 *
	 * @public
	 * @alias sap.gantt.misc.Format
	 */

	var Format = function() {
		// Do not use the constructor
		throw new Error();
	};

	Format._oDefaultDateTimeFormat = DateFormat.getDateTimeInstance();

	/**
	 * Converts an ABAP timestamp(eg:"20150909000000" ) into a Date instance.
	 *
	 * @param {string} sTimestamp The ABAP timestamp to convert
	 * @return {Date} The output date instance
	 * @static
	 * @public
	 */

	Format.abapTimestampToDate = function (sTimestamp) {
		if (typeof sTimestamp === "string") {
			// for the timestamp format such as "20150909000000"
			var date = new Date(sTimestamp.substr(0, 4),
					parseInt(sTimestamp.substr(4, 2), 0) - 1,
					sTimestamp.substr(6, 2),
					sTimestamp.substr(8, 2),
					sTimestamp.substr(10, 2),
					sTimestamp.substr(12, 2));
			//In case ts is in format of "Fri Jun 12 2015 08:00:00 GMT+0800 (China Standard Time)"
			if (!jQuery.isNumeric(date.getTime())){
				date = new Date(sTimestamp);
			}
			return date;
		} else if (jQuery.type(sTimestamp) === "date"){
			return sTimestamp;
		}
		return null;
	};
	
	
	/**
	 * Converts a Date instance into an ABAP timestamp.
	 *
	 * @param {Date} oDate The date instance to convert
	 * @return {string} The output ABAP timestamp
	 * @static
	 * @public
	 */

	Format.dateToAbapTimestamp = function (oDate) {
		if (oDate) {
			return "" + oDate.getFullYear() +
			(oDate.getMonth() < 9 ? "0" : "") + (oDate.getMonth() + 1) +
			(oDate.getDate() < 10 ? "0" : "") + oDate.getDate() +
			(oDate.getHours() < 10 ? "0" : "") + oDate.getHours() +
			(oDate.getMinutes() < 10 ? "0" : "") + oDate.getMinutes() +
			(oDate.getSeconds() < 10 ? "0" : "") + oDate.getSeconds();
		}
		return "";
	};
	
	
	/**
	 * Converts an ABAP timestamp into a time label to be used in Gantt.
	 *
	 * @param {string} sTimestamp The ABAP timestamp to convert
	 * @param {sap.gantt.config.Locale} oLocale The locale object has the time zone and DST info; this determines how the function converts the timestamp into a locale-specific time label
	 * @return {string} The output time label
	 * @static
	 * @public
	 */
	Format.abapTimestampToTimeLabel = function (sTimestamp, oLocale) {
		var localDate = sap.gantt.misc.Format._convertUTCToLocalTime(sTimestamp, oLocale);
		var sLabel = sap.gantt.misc.Format._oDefaultDateTimeFormat.format(localDate);
		return sLabel;

	};

	/**
	 * Converts a relative time object into an absolute time object. Use this method only in relative time axis mode.
	 *
	 * @param {int} iIntervalDays difference in the day segment between the target time and base time
	 * @param {int} iIntervalHours difference in the hour segment between the target time and base time
	 * @param {int} iIntervalMinutes difference in the minute segment between the target time and base time
	 * @param {int} iIntervalSeconds difference in the second segment between the target time and base time
	 * @return {Date} converted absolute time object
	 * @static
	 * @public
	 */

	Format.relativeTimeToAbsolutTime = function (iIntervalDays, iIntervalHours, iIntervalMinutes, iIntervalSeconds) {
		iIntervalDays = iIntervalDays !== undefined ? iIntervalDays : 0;
		iIntervalHours = iIntervalHours !== undefined ? iIntervalHours : 0;
		iIntervalMinutes = iIntervalMinutes !== undefined ? iIntervalMinutes : 0;
		iIntervalSeconds = iIntervalSeconds !== undefined ? iIntervalSeconds : 0;

		var oBaseTime = this.abapTimestampToDate("20120101000000");
		var oTargetTime = new Date();
		oTargetTime.setTime(oBaseTime.getTime() + iIntervalSeconds * 1000 + iIntervalMinutes * 60 * 1000 + iIntervalHours * 3600 * 1000 + iIntervalDays * 24 * 3600 * 1000);

		return oTargetTime;
	};

	/**
	 * Converts an absolute time object into a relative time object, which contains the following properties:
	 *  {
			intervalDays: * difference in the day segment between the target time and base time*,
			intervalHours: * difference in the hour segment between the target time and base time*,
			intervalMinutes: * difference in the minute segment between the target time and base time*,
			intervalSecond: * difference in the segment segment between the target time and base time*
		}
	 * Use this method only in relative time axis mode.
	 *
	 * @param {Date} oTime the absolute time object will be converted
	 * @return {object} relative time information object
	 * @static
	 * @public
	 */

	Format.absolutTimeToRelativeTime = function (oTime) {
		var oBaseTime = this.abapTimestampToDate("20120101000000");
		var iMiliseciondInterval = oTime.getTime() - oBaseTime.getTime();

		var iIntervalDays = Math.floor(iMiliseciondInterval / (24 * 3600 * 1000));
		var iRemainder = iMiliseciondInterval % (24 * 3600 * 1000);

		var iIntervalHours = Math.floor(iRemainder / (3600 * 1000));
		iRemainder = iRemainder % (3600 * 1000);

		var iIntervalMinutes = Math.floor(iRemainder / (60 * 1000));
		iRemainder = iRemainder % (60 * 1000);

		var iIntervalSeconds = Math.floor(iRemainder / 1000);

		var oResult = {
			intervalDays: iIntervalDays,
			intervalHours: iIntervalHours,
			intervalMinutes: iIntervalMinutes,
			intervalSecond: iIntervalSeconds
		};

		return oResult;
	};

	Format._convertUTCToLocalTime = function (sTimeStamp, oLocale) {

		//convert utc date to local date
		//code is from axistime.js
		var timeZoneOffset = 0;
		if (oLocale && oLocale.getUtcdiff()) {
			var format = this.getTimeStampFormatter();
			timeZoneOffset = Math.round((format.parse("20000101" + oLocale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (oLocale.getUtcsign() === "-") {
				timeZoneOffset = -timeZoneOffset;
			}
		}
		var utcDate = sap.gantt.misc.Format.abapTimestampToDate(sTimeStamp);
		var localDate = d3.time.second.offset(utcDate, timeZoneOffset);

		//to solve the daylight saving time
		var aDstHorizons = oLocale.getDstHorizons();
		if (aDstHorizons.length > 0) {
			for (var i = 0; i < aDstHorizons.length; i++) {
				var startDate = sap.gantt.misc.Format.abapTimestampToDate(aDstHorizons[i].getStartTime());
				var endDate = sap.gantt.misc.Format.abapTimestampToDate(aDstHorizons[i].getEndTime());
				if (localDate >= startDate && localDate <= endDate) {
					localDate = d3.time.second.offset(localDate, 60 * 60);
				}
			}
		}
		return localDate;
	};

	Format.getTimeStampFormatter = function(){
		return d3.time.format("%Y%m%d%H%M%S");
	};

	return Format;
}, true);

}; // end of sap/gantt/misc/Format.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.RelativeTimeFormatter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.RelativeTimeFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/misc/RelativeTimeFormatter",[
], function () {
	"use strict";

	/**
	 * Constructor for a new RelativeTimeFormatter
	 *
	 *The private relative formatter for Gantt to format a time label in header, when user use relative time axis
	 * @param {Date} oBaseTime the base start time to calculate the relative time
	 * @param {string} sUnit the time unit defined in library.js
	 * @param {string} sPrefix the prefix of the time label
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.misc.RelativeTimeFormatter
	 */
	var RelativeTimeFormatter = function(oBaseTime, sUnit, sPrefix) {
		this.oBaseTime = oBaseTime;
		this.sUnit = sUnit;
		this.sPrefix = sPrefix;
		this.iIntervalMillisecond = jQuery.sap.getObject(sUnit).offset(oBaseTime, 1).getTime() - oBaseTime.getTime();
	};

	RelativeTimeFormatter.prototype.format = function(oDate){
		var sTimeLabel;
		var iSpan = Math.floor((oDate.getTime() - this.oBaseTime.getTime()) / this.iIntervalMillisecond) + 1;
		sTimeLabel = this.sPrefix + " " + iSpan;
		return sTimeLabel;
	};

	return RelativeTimeFormatter;
}, true);

}; // end of sap/gantt/misc/RelativeTimeFormatter.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ExpandChartGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ExpandChartGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ExpandChartGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new expand chart group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Defines a toolbar group for the expand chart-related toolbar items. These expand chart-related toolbar items are displayed in the Gantt chart toolbar.
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ExpandChartGroup
	 */
	var ExpandChartGroup = ToolbarGroup.extend("sap.gantt.config.ExpandChartGroup", /** @lends sap.gantt.config.ExpandCharGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Array of {@link sap.gantt.config.ExpandChart}
				 */
				expandCharts: {type: "object[]", defaultValue: []},
				
				/**
				 * When this property is enabled, expand button is in emphasized button type, and collapse button
				 * is in default button type.
				 */
				enableRichType: {type: "boolean"},
				
				/**
				 * When this property is enabled, text arrow is shown beside icon indicating expand/collapse function
				 */
				showArrowText: {type: "boolean"}
			}
		}
	});

	return ExpandChartGroup;
}, true);

}; // end of sap/gantt/config/ExpandChartGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.LayoutGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.LayoutGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/LayoutGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new layout group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * You can specify the Gantt chart layout-related toolbar items in the Gantt chart toolbar 
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.LayoutGroup
	 */
	var LayoutGroup = ToolbarGroup.extend("sap.gantt.config.LayoutGroup", /** @lends sap.gantt.config.LayoutGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Determines the button type. See {@link sap.m.ButtonType}
				 * true stands for {@link sap.m.ButtonType.Emphasized}
				 * false stands for {@link sap.m.ButtonType.Default}
				 * @deprecated Since version 1.50
				 */
				enableRichStyle: {type: "boolean", defaultValue: true},
			}
		}
	});
	
	return LayoutGroup;
}, true);
}; // end of sap/gantt/config/LayoutGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.ModeGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.ModeGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/ModeGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";
	/**
	 * Creates and initializes a new mode group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The ModeGroup control specifies the mode-related buttons in the Gantt chart toolbar
	 * 
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.ModeGroup
	 */
	var ModeGroup = ToolbarGroup.extend("sap.gantt.config.ModeGroup", /** @lends sap.gantt.config.ModeGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Array of key of {@link sap.gantt.config.Mode}
				 */
				modeKeys: {type: "string[]", defaultValue: []}
			}
		}
	});
	
	return ModeGroup;
}, true);
}; // end of sap/gantt/config/ModeGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.SettingItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.SettingItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/SettingItem",[
	"sap/ui/core/Element", "./ToolbarGroup"
], function (Element, ToolbarGroup) {
	"use strict";

	/**
	 * Creates and initializes a new setting item.
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The SettingItem control allows you to create a setting item in the toolbar, which is presented as a checkbox with a label.
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.SettingItem
	 */
	var SettingItem = Element.extend("sap.gantt.config.SettingItem", /** @lends sap.gantt.config.SettingItem.prototype */ {
		library : "sap.gantt",
		metadata: {
			properties: {
				/**
				 * Indicates whether the checkbox is selected or not
				 */
				checked: {type: "boolean", defaultValue: false},
				/**
				 * Identifier of an event when the checkbox is toggled
				 */
				key: {type: "string", defaultValue: null},
				/**
				 * Aria label of the checkbox
				 */
				displayText: {type: "string", defaultValue: null}
			}
		}
	});

	return SettingItem;

}, /* bExport= */ true);

}; // end of sap/gantt/config/SettingItem.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.TimeHorizon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.TimeHorizon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/TimeHorizon",[
	'jquery.sap.global', 'sap/ui/core/Element', "sap/gantt/misc/Format"
], function (jQuery, Element, Format) {
	"use strict";
	/**
	 * Creates and initializes a new Time horizon
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] =Initial settings for the new control
	 *
	 * @class
	 * Defines the Time horizon
	 * @extends sap.ui.core.Element
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.TimeHorizon
	 */
	var TimeHorizon = Element.extend("sap.gantt.config.TimeHorizon", /** @lends sap.gantt.config.TimeHorizon.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Start time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				startTime: {type: "string", group: "Misc", defaultValue: undefined},
				/**
				 * End time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of endTime is object, the value is converted to string.
				 */
				endTime: {type: "string", group: "Misc", defaultValue: undefined}
			}
		}
	});
	
	TimeHorizon.prototype.setStartTime = function (vStartTime) {
		this.setProperty("startTime", this._convertTimestamp(vStartTime));
	};
	
	TimeHorizon.prototype.setEndTime = function (vEndTime) {
		this.setProperty("endTime", this._convertTimestamp(vEndTime));
	};
	
	TimeHorizon.prototype._convertTimestamp = function (vTime) {
		var sRetVal = vTime;
		if (sRetVal && typeof sRetVal === "object") {
			sRetVal = Format.dateToAbapTimestamp(sRetVal);
		}
		return sRetVal;
	};
	
	return TimeHorizon;
}, true);
}; // end of sap/gantt/config/TimeHorizon.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.TimeZoomGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.config.TimeZoomGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/gantt/config/TimeZoomGroup",[
	'jquery.sap.global', './ToolbarGroup'
], function (jQuery, ToolbarGroup) {
	"use strict";

	var ZoomControlType = sap.gantt.config.ZoomControlType;

	/**
	 * Creates and initializes a new time zoom group
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * You can define time zooming related toolbar items in the Gantt chart toolbar. 
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.TimeZoomGroup
	 */
	var TimeZoomGroup = ToolbarGroup.extend("sap.gantt.config.TimeZoomGroup", /** @lends sap.gantt.config.LayoutGroup.prototype */ {
		metadata: {
			properties: {
				/**
				 * Enables the Slider control for the time zooming function.
				 * @deprecated As of version 1.44, replaced by zoomControlType
				 */
				showZoomSlider: {type: "boolean", defaultValue: true},
				/**
				 * Enables zoom in and zoom out buttons for the time zooming function.
				 * @deprecated As of version 1.44, replaced by zoomControlType
				 */
				showZoomButtons: {type: "boolean", defaultValue: true},
				/**
				 * Defines the control type to set the zoom rate.
				 */
				zoomControlType: {type: "sap.gantt.config.ZoomControlType", defaultValue: sap.gantt.config.ZoomControlType.SliderWithButtons},
				/**
				 * Sets the step when the zoom control type is sap.gantt.config.ZoomControlType.SliderWithButtons or sap.gantt.config.ZoomControlType.SliderOnly.
				 */
				stepCountOfSlider: {type: "int", defaultValue: 10},
				/**
				 * Array of plain objects which has "key" and "text" properties, or array of sap.ui.core.Item used to configure the items in the Select control 
				 * when the zoom control type is sap.gantt.config.ZoomControlType.Select.
				 * 
				 */
				infoOfSelectItems: {type: "object[]"}
			}
		}
	});

	TimeZoomGroup.prototype.getZoomControlType = function() {
		//for backward compatibility
		var defaultZoomControlType = ZoomControlType.SliderWithButtons;
		var currentZoomControlType = this.getProperty("zoomControlType");
		if (currentZoomControlType == defaultZoomControlType) {
			return this._getZoomControlTypeByDeprecatedProperties();
		}
		
		return currentZoomControlType;
	};
	
	TimeZoomGroup.prototype._getZoomControlTypeByDeprecatedProperties = function() {
		var bShowZoomSlider = this.getShowZoomSlider();
		var bShowZoomButtons = this.getShowZoomButtons();
		if (bShowZoomSlider && bShowZoomButtons) {
			return ZoomControlType.SliderWithButtons;
		}
		if (bShowZoomSlider && !bShowZoomButtons) {
			return ZoomControlType.SliderOnly;
		}
		if (!bShowZoomSlider && bShowZoomButtons) {
			return ZoomControlType.ButtonsOnly;
		}
		if (!bShowZoomSlider && !bShowZoomButtons) {
			return ZoomControlType.None;
		}
		return ZoomControlType.SliderWithButtons;
	};
	
	return TimeZoomGroup;
}, true);
}; // end of sap/gantt/config/TimeZoomGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.Calendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/cal/Calendar",[
	"../DefBase", "sap/gantt/misc/Format"
], function (DefBase,Format) {
	"use strict";
	
	/**
	 * Creates and initializes a calendar defined and embedded in a 'defs' tag for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * A calendar that contains a list of time interval definitions.
	 * 
	 * <p>
	 * A pattern definition is generated per calendar key.
	 * </p>
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.Calendar
	 */
	var Calendar = DefBase.extend("sap.gantt.def.cal.Calendar", /** @lends sap.gantt.def.cal.Calendar */ {
		metadata: {
			properties: {
				
				/**
				 * Key of the calendar. Note that this value is used to generate the referencing string of the calendar pattern.
				 */
				key: {type : "string", defaultValue : "calendar"},
				
				/**
				 * Background color of time intervals.
				 */
				backgroundColor: {type : "sap.gantt.ValueSVGPaintServer", defaultValue: "#e5e5e5"}
			},
			aggregations: {
				
				/**
				 * Time intervals that should be painted with the value of <code>backgroundColor</code>.
				 */
				timeIntervals: {type: "sap.gantt.def.cal.TimeInterval", multiple: true,
					singularName: "timeInterval",bindable: "bindable"}
			}
		}
	});
	
	Calendar.prototype.getDefNode = function () {
		var aTimeIntervals = this.getTimeIntervals();
		var oStatusSet = (this.getParent() && this.getParent().getParent()) ? this.getParent().getParent()._oStatusSet : null;
		var oViewBoundary = oStatusSet ? oStatusSet.aViewBoundary : null;
		var oTimeBoundary = oStatusSet ? oStatusSet.aTimeBoundary : null;

		var aFilteredTimeIntervals = aTimeIntervals;
		if (oTimeBoundary && oStatusSet) {
			aFilteredTimeIntervals = aTimeIntervals.filter(function(oItem){
				var startTime = Format.abapTimestampToDate(oItem.getStartTime());
				var endTime = Format.abapTimestampToDate(oItem.getEndTime());
				if (oStatusSet.bRTL === true){
					return (endTime < oTimeBoundary[0] && endTime > oTimeBoundary[1]) || (startTime > oTimeBoundary[1] && startTime < oTimeBoundary[0]);
				} else {
					return (endTime < oTimeBoundary[1] && endTime > oTimeBoundary[0]) || (startTime > oTimeBoundary[0] && startTime < oTimeBoundary[1]);
				}
			});
		}

		var width = (oViewBoundary && oViewBoundary.length > 1 ) ? (oViewBoundary[1] - oViewBoundary[0]) : 1;
		var patternObj = { id: this.generateRefId(), x: 0, y: 0, width: width, timeIntervals: [] };
		for (var i = 0; i < aFilteredTimeIntervals.length; i++) {
			var oInterval = aFilteredTimeIntervals[i].getDefNode();
			oInterval.fill = this.getBackgroundColor();
			patternObj.timeIntervals.push(oInterval);
		}

		return patternObj;
	};

	Calendar.prototype.generateRefId = function () {
		var sId = (this.getParent() && this.getParent().getParent()) ? this.getParent().getParent().getId() : "";
		return sId + "_" + this.getKey();
	};

	return Calendar;
}, true);

}; // end of sap/gantt/def/cal/Calendar.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.cal.TimeInterval') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.cal.TimeInterval'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/def/cal/TimeInterval",[
	"../DefBase", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (DefBase, Format, Core) {
	"use strict";

	/**
	 * Creates and initializes a time interval inside the calendar.
	 * 
	 * @param {string} [sId] ID of the new element, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new element
	 * 
	 * @class 
	 * A time interval pattern.
	 * 
	 * @extends sap.gantt.def.DefBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.cal.TimeInterval
	 */
	var TimeInterval = DefBase.extend("sap.gantt.def.cal.TimeInterval", {
		metadata: {
			properties: {

				/**
				 * Start Time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				startTime: {type: "string", group: "Misc", defaultValue: null},

				/**
				 * End time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted to string.
				 */
				endTime: {type: "string", group: "Misc", defaultValue: null}
			}
		}
	});

	TimeInterval.prototype.setStartTime = function (vStartTime) {
		this.setProperty("startTime", this._convertTimestamp(vStartTime));
		return this;
	};

	TimeInterval.prototype.setEndTime = function (vEndTime) {
		this.setProperty("endTime", this._convertTimestamp(vEndTime));
		return this;
	};

	TimeInterval.prototype._convertTimestamp = function (vTime) {
		var sRetVal = vTime;
		if (sRetVal && typeof sRetVal === "object") {
			sRetVal = Format.dateToAbapTimestamp(sRetVal);
		}
		return sRetVal;
	};

	TimeInterval.prototype.getDefNode = function () {
		var oAxisTime = (this.getParent() && this.getParent().getParent() && this.getParent().getParent().getParent()) ?
				this.getParent().getParent().getParent().getAxisTime() : null;
		var startX;
		var width;
		if (oAxisTime) { 
			if (Core.getConfiguration().getRTL() === true) {
				startX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime()));
				width = oAxisTime.timeToView(Format.abapTimestampToDate(this.getStartTime())) - startX;
			} else {
				startX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getStartTime()));
				width = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime())) - startX;
			}
		}

		return {x: startX, y: 0, width: width};
	};

	return TimeInterval;
}, true);

}; // end of sap/gantt/def/cal/TimeInterval.js
if ( !jQuery.sap.isDeclared('sap.gantt.def.pattern.BackSlashPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.def.pattern.BackSlashPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/def/pattern/BackSlashPattern",[
	"./PatternBase"
], function (PatternBase) {
	"use strict";
	
	/**
	 * Creates and initializes a backslash pattern defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Backslash pattern defined by a path. The stroke color and stroke width of the path can be modified with properties.
	 * 
	 * <p>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="p3" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#e2e2e2"></rect><path d="M -1 3 l 2 2 M 0 0 l 4 4 M 3 -1 l 2,2" stroke="#9E1F63" stroke-width="1"></path></pattern>
	 * 	<pattern class="pattern" id="p4" patternUnits="userSpaceOnUse" x="0" y="0" width="8" height="8"><rect x="0" width="8" height="8" fill="#fff"></rect><path d="M -2 6 l 4 4 M 0 0 l 8 8 M 6 -2 l 4,4" stroke="#6d6d6d" stroke-width="2"></path></pattern>
	 * 	<pattern class="pattern" id="p5" patternUnits="userSpaceOnUse" x="120" y="85" width="100" height="100"><rect x="0" width="100" height="100" fill="#e2e2e2"></rect><path d="M -25 75 l 50 50 M 0 0 l 100 100 M 75 -25 l 50,50" stroke="#1C75BC" stroke-width="30"></path></pattern></defs>
	 * 	<rect fill="url(#p3)" x="60" y="20" width="80" height="20" />
	 * 	<circle fill="url(#p4)" cx="180" cy="25" r="10" /> <circle fill="url(#p4)" cx="200" cy="30" r="15" />
	 * 	<text x="150" y="75" class="timeText">Tile Detail:</text>
	 * 	<rect fill="url(#p5)" x="120" y="85" width="100" height="100" />
	 * 	<path d="M 120 85 h 100 v 100 h -100 z" class="dashside" />
	 * 	<path d="M 220 85 h 20 m 0 100 h -20 v 20 m -100 0 v -20 m 7 -10 h -20 m 0 -45 h 20 m -7 -25 l -20 -20 m 21 -19 l 20 20" class="dashassist" />
	 * 	<path d="M 240 85 v 100" class="arrowline" />
	 * 	<path d="M 120 205 h 100" class="arrowline" />
	 * 	<path d="M 125 70 l -20 20" class="arrowline" />
	 * 	<text x="235" y="175" class="propertyText" transform="rotate(-90, 235 175)">tileHeight</text>
	 * 	<text x="130" y="200" class="propertyText">tileWidth</text>
	 * 	<text x="20" y="125" class="propertyText">background</text>
	 * 	<text x="50" y="145" class="propertyText">Color</text>
	 * 	<text x="15" y="180" class="propertyText">strokeColor</text>
	 * 	<text x="25" y="75" class="propertyText">strokeWidth</text>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.def.pattern.PatternBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.def.pattern.BackSlashPattern
	 */
	var BackSlashPattern = PatternBase.extend("sap.gantt.def.pattern.BackSlashPattern", /** @lends sap.gantt.def.pattern.BackSlashPattern.prototype  */ {
		metadata : {
			properties: {
				
				/**
				 * Value of the d attribute in Path element. The value is affected by property <code>tileWidth</code> and <code>tileHeight</code>.
				 * If this value is changed by coding, the effect is not guaranteed.
				 */
				path : {type : "string"},
				
				/**
				 * Stroke color of the path element.
				 */
				stroke : {type : "sap.gantt.ValueSVGPaintServer"},
				
				/**
				 * Stroke width of the path element.
				 */
				strokeWidth : {type : "int", defaultValue : 2}
			}
		}
	});

	BackSlashPattern.prototype.getPath = function () {
		var tileWidth = this.getTileWidth();
		var tileHeight = this.getTileHeight();
		var dStr = "";
		dStr = dStr.concat("M").concat(tileWidth / 4).concat(",").concat(tileHeight / 4 * 5).concat(" ");
		dStr = dStr.concat("l-").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		dStr = dStr.concat("M0,0").concat(" ");
		dStr = dStr.concat("l").concat(tileWidth).concat(",").concat(tileHeight).concat(" ");
		dStr = dStr.concat("M").concat(tileWidth / 4 * 5).concat(",").concat(tileHeight / 4).concat(" ");
		dStr = dStr.concat("l-").concat(tileWidth / 2).concat(",-").concat(tileHeight / 2).concat(" ");
		return dStr;
	};

	BackSlashPattern.prototype.getDefString = function () {
		return "<pattern class='pattern' id='" + this.getId() +
			"' patternUnits='userSpaceOnUse' x='0' y='0' width='" + this.getTileWidth() +
			"' height='" + this.getTileHeight() +
			"'><rect x='0' width='" + this.getTileWidth() +
			"' height='" + (this.getTileHeight() + 4) +
			"' stroke-width='" + this.getStrokeWidth() +
			"' fill='" + this.getBackgroundColor() +
			"' fill-opacity='" + this.getBackgroundFillOpacity() +
			"'></rect><path d='" + this.getPath() +
			"' stroke='" + this.getStroke() +
			"' stroke-width='" + this.getStrokeWidth() + "'></path></pattern>";
	};

	return BackSlashPattern;
}, true);

}; // end of sap/gantt/def/pattern/BackSlashPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.Legend') ) {
jQuery.sap.declare('sap.gantt.drawer.Legend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/Legend",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Format",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Format) {
	"use strict";

	var Legend = Drawer.extend("sap.gantt.drawer.Legend");

	Legend.prototype._recursiveDraw = function (aGroup, oShape) {
		var aShape = aGroup.selectAll("." + oShape.getId())
			.data(function (d) {
				var aRetVal = [];
				return aRetVal.concat(d);
			});
		this._drawPerTag(aShape, oShape);
	};

	Legend.prototype._drawPerTag = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance;
		if (oShape.getIsDuration()) {
			oShape.getTime = function() {
				return oLegend.TIME_RANGE[0];
			};
			oShape.getEndTime = function() {
				return oLegend.TIME_RANGE[1];
			};
//			oShape.setTime(oLegend.TIME_RANGE[0]);
//			oShape.setEndTime(oLegend.TIME_RANGE[1]);
		} else {
//			oShape.setTime(oLegend.TIME);
			oShape.getTime = function() {
				return oLegend.TIME;
			};
		}

		oShape.setRowYCenter(oLegend.getScaledLegendHeight() / 2);
		switch (oShape.getTag()) {
			case "g":
				this._drawGroup(aShape, oShape);
				break;
			case "line":
				this._drawLine(aShape, oShape);
				break;
			case "rect":
				this._drawRect(aShape, oShape);
				break;
			case "text":
				this._drawText(aShape, oShape);
				break;
			case "path":
				this._drawPath(aShape, oShape);
				break;
			case "image":
				this._drawImage(aShape, oShape);
				break;
			case "polygon":
				this._drawPolygon(aShape, oShape);
				break;
			case "polyline":
				this._drawPolyline(aShape, oShape);
				break;
			case "circle":
				this._drawCircle(aShape, oShape);
				break;
			default:
				break;
		}
		
		this._insertTitle(aShape, oShape);
	};

	Legend.prototype._insertTitle = function (aShape, oShape) {
		aShape.select("title").remove();
		aShape.insert("title", ":first-child")
			.text(function(d) {
				if (!oShape.getParent()) {
					return oShape.getTitle(d);
				}
			});
	};

	Legend.prototype._drawGroup = function (aShape, oShape) {
		aShape.enter().append("g")
			.classed(oShape.getId(), true)
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();

		var aAggregationShapes = oShape.getShapes();
		if (aAggregationShapes && aAggregationShapes.length > 0) {
			for (var i = 0; i < aAggregationShapes.length; i++) {
				this._recursiveDraw(aShape, aAggregationShapes[i]);
			}
		}
	};

	Legend.prototype._drawLine = function (aShape, oShape) {
		var that = this;
		aShape.enter().append("line")
			.attr("x1", function(d){return oShape.getX1(d);})
			.attr("y1", function(d){return oShape.getY1(d);})
			.attr("x2", function(d){return oShape.getX2(d);})
			.attr("y2", function(d){return oShape.getY2(d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke-dasharray", function(d){return oShape.getStrokeDasharray(d);})
			.attr("fill-Opacity", function(d){return oShape.getFillOpacity(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawRect = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance,
			that = this;

		aShape.enter().append("rect")
			.classed(oShape.getId(), true);
		aShape.attr("x", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					if (sap.ui.getCore().getConfiguration().getRTL()) {
						var aXDomain = oLegend.getXDomain(),
						iXLength = aXDomain.length;
						return oLegend.getScaledLegendWidth() * (iXLength - d.xIndex - 1) + oLegend.getLegendSpace() * (iXLength - d.xIndex);
					}
					return oLegend.getScaledLegendWidth() * d.xIndex + oLegend.getLegendSpace() * (d.xIndex + 1);
				}
				return oShape.getX(d);
			})
			.attr("y", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendHeight() * d.yIndex + oLegend.getLegendSpace() * (d.yIndex + 1);
				}
				return oShape.getY(d);
			})
			.attr("width", function(d){return oShape.getWidth(d);})
			.attr("height", function(d){return oShape.getHeight(d);})
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("rx", function(d){return oShape.getRx(d);})
			.attr("ry", function(d){return oShape.getRy(d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke-dasharray", function(d){return oShape.getStrokeDasharray(d);})
			.attr("opacity", function(d){return oShape.getFillOpacity(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawText = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance,
			that = this;
		aShape.enter().append("text")
			.attr("x", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendWidth() * d.xIndex + oLegend.getLegendSpace() * (d.xIndex + 1);
				}
				return oShape.getX(d);
			})
			.attr("y", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendHeight() * d.yIndex + oLegend.getLegendSpace() * (d.yIndex + 1);
				}
				return oShape.getRowYCenter(d);
			})
			.attr("text-anchor", "middle")
			.attr("font-size", function(d){return oShape.getFontSize(d);})
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("alignment-baseline", "central")
			.attr("font-family", function(d){return oShape.getFontFamily(d);})
			.text(oShape.getText())
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawPath = function (aShape, oShape) {
		var that = this;

		aShape.enter().append("path")
			.attr("d", function(d){return oShape.getD(d);})
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke-dasharray", function(d){return oShape.getStrokeDasharray(d);})
			.attr("opacity", function(d){
				if (oShape.getIsClosed()) {
					return oShape.getFillOpacity(d);
				}
			})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawImage = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance;
		aShape.enter().append("image")
			.attr("xlink:href", function(d){return oShape.getImage(d);})
			.attr("x", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendWidth() * d.xIndex + oLegend.getLegendSpace() * (d.xIndex + 1);
				}
				return oShape.getX(d);
			})
			.attr("y", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendHeight() * d.yIndex + oLegend.getLegendSpace() * (d.yIndex + 1);
				}
				return oShape.getY(d);
			})
			.attr("width", function(d){return oShape.getWidth(d);})
			.attr("height", function(d){return oShape.getHeight(d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawPolygon = function (aShape, oShape) {
		var that = this;

		aShape.enter().append("polygon")
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("points", function(d){return oShape.getPoints(d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawPolyline = function (aShape, oShape) {
		var that = this;
		aShape.enter().append("polyline")
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("points", function(d){return oShape.getPoints(d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype._drawCircle = function (aShape, oShape) {
		var oLegend = oShape.mChartInstance,
			that = this;
		aShape.enter().append("circle")
			.attr("fill", function(d){return that.determineValue("fill", oShape, d);})
			.attr("stroke-width", function(d){return oShape.getStrokeWidth(d);})
			.attr("stroke", function(d){return that.determineValue("stroke", oShape, d);})
			.attr("filter", function(d){return oShape.getFilter(d);})
			.attr("aria-label", function(d){return oShape.getAriaLabel(d);})
			.attr("cx", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendWidth() * (d.xIndex + 0.5) + oLegend.getLegendSpace() * (d.xIndex + 1);
				}
				return oShape.getCx(d);
			})
			.attr("cy", function(d){
				if (oLegend.getLegendSpace !== undefined) {
					return oLegend.getScaledLegendHeight() * (d.yIndex + 0.5) + oLegend.getLegendSpace() * (d.yIndex + 1);
				}
				return oShape.getCy(d);
			})
			.attr("r", function(d){return oShape.getR(d);})
			.attr("transform", function (d) {
				return oShape.getTransform(d);
			})
			.attr("role", function(d){
				if (!oShape.getParent()) {
					return "tooltip";
				}
			})
			.attr("focusable", function(d){
				if (!oShape.getParent()) {
					return true;
				}
			})
			.attr("tabindex", function(d){
				if (!oShape.getParent()) {
					return 0;
				}
			})
			.attr("aria-label", function (d) {
				if (!oShape.getParent()) {
					return oShape.getAriaLabel(d);
				}
			});
		aShape.exit().remove();
	};

	Legend.prototype.determineValue = function(sAttr, oShape, d) {
		var sAttrValue = null;
		if (sAttr === "fill") {
			sAttrValue = oShape.getFill(d);
		} else if (sAttr === "stroke") {
			sAttrValue = oShape.getStroke(d);
		}
		return sap.gantt.ValueSVGPaintServer.normalize(sAttrValue);
	};

	return Legend;
}, true);

}; // end of sap/gantt/drawer/Legend.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.Utility') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.Utility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/misc/Utility",["sap/gantt/misc/Format", "sap/gantt/config/TimeHorizon"], function (Format, TimeHorizon) {
	"use strict";

	var Utility = {};

	/*
	 * This method will do necessary check when you assign parameters,
	 * the check includes:
	 * 1. type check - if type of inputParam does not match defaultParam,
	 * defaultParam will be returned;
	 * 2. value check - if inputParam is undefined,
	 * defaultParam will be returned.
	 */
	Utility.assign = function (inputParam, defaultParam) {
		if (typeof (inputParam) !== typeof (defaultParam)) {
			return defaultParam;
		} else if ((typeof inputParam === "undefined") || inputParam === null) {
			return defaultParam;
		} else {
			return inputParam;
		}
	};

	/*
	 * for JSON object
	 */
	Utility.assignDeep = function (inputObj, defaultObj) {
		if (!inputObj && !defaultObj) {
			return null;
		} else if (inputObj && !defaultObj) {
			return inputObj;
		} else if (!inputObj && defaultObj) {
			return defaultObj;
		} else if (typeof (inputObj) === "object" && typeof (defaultObj) === "object") {
			var retVal = inputObj;
			for (var attr in defaultObj) {
				if (typeof (retVal[attr]) !== "boolean" && !retVal[attr]) {
					retVal[attr] = defaultObj[attr];
				} else if (typeof (defaultObj[attr]) === "object" && typeof (retVal[attr]) === "object") {
					retVal[attr] = this.assignDeep(retVal[attr], defaultObj[attr]);
				}
			}
			return retVal;
		} else {
			return inputObj;
		}
	};

	/**
	 * This method is used to generate an UID for each row object or shapes.
	 * The UID structure will be like this PATH:objectId|DATA:objectType[id]|SCHEME:objectScheme,
	 * For Row object, the uid should contain PATH part and SCHEME part. for shape object,  the uid
	 * should contain PATH part and DATA part, usually shape object doesn't have SCHEME part and row
	 * object doesn't have DATA part.
	 * 
	 * @param {array} [aDataArray] A data array to generate UID.	
	 * @param {object} [oObjectTypesMap] A map for object configuration information.	
	 * @param {array} [aShapeDataNames] An array stored the names of shape data.	
	 * @param {string} [parentUid] The parent uid for children uid generation.
	 * @param {string} [sRowIdName] The attribute name that will serves as the row 'id' in user's data.
	 * @private
	 */
	Utility.generateRowUid = function (aDataArray, oObjectTypesMap, aShapeDataNames, parentUid, sRowIdName) {
		jQuery.each(aDataArray, function (k, v) {
			v.uid = v.id;
			if (parentUid) {
				v.uid = parentUid + "|" + v.uid;
			} else if (v.bindingObj && v.bindingObj.findNode) {
				var oNode = v.bindingObj.findNode(v.rowIndex);
				while (oNode.parent && oNode.level > 0) {
					oNode = oNode.parent;
					v.uid = oNode.context.getObject()[sRowIdName] + "|" + v.uid;
				}
			}
			// if v.index is not available, use -1 instead
			var index = (v.index === undefined) ? -1 : v.index;

			// if chartScheme is not available, use empty string
			var chartScheme = (v.chartScheme === undefined) ? "" : v.chartScheme;

			//generate row uid
			v.uid = "PATH:" + v.uid + "|SCHEME:" + chartScheme + "[" + index + "]";
			v.data.uid = v.uid;
			//generate uids for other arrays e.g order, activity
			for (var i = 0; i < aShapeDataNames.length; i++) {
				var sDataName, sDataIdName;
				if (typeof aShapeDataNames[i] === "string") {
					sDataName = aShapeDataNames[i];
					sDataIdName = "id";
				} else {
					sDataName = aShapeDataNames[i].name;
					sDataIdName = aShapeDataNames[i].idName ? aShapeDataNames[i].idName : "id";
				}
				if (sDataName in v.data) {
					for (var j = 0; j < v.data[sDataName].length; j++) {
						var obj = v.data[sDataName][j];
						//if user provided data doesn't have id, set jQuery.sap.uid as default
						if (obj[sDataIdName] === undefined) {
							obj[sDataIdName] = jQuery.sap.uid();
						}
						obj.uid = v.uid + "|DATA:" + sDataName + "[" + obj[sDataIdName] + "]";
						obj.__id__ = obj[sDataIdName]; // this is a reference to the really index attribute in user's data
					}
				}
			}
			
		});
	};

	/**
	 * This method is used to get ChartScheme for a row object by an UID of a shape in this row.
	 * 	
	 * @param {string} [sShapeUid] The parent uid for children uid generation.
	 * @return {string} chart scheme in the UID
	 */
	Utility.getChartSchemeByShapeUid = function (sShapeUid) {
		return Utility.parseUid(sShapeUid).chartScheme || "";
	};

	/**
	 * Generate UID for relationships. For the sake of UID definition, since relationship doesn't have chart scheme
	 * concept, here pre-append the dummy prefix to complete the UID.
	 *
	 * relationship dataset with UID changed by reference.
	 * @private
	 * @param {array} aDataArray relationship dataset
	 * @param {string} sRlsIdName configured relationship id
	 */
	Utility.generateUidForRelationship = function (aDataArray, sRlsIdName) {
		var sShapeDataName = "relationship";
		var sDummyPrefix = "PATH:DUMMY|SCHEME:DUMMY[0]";
		for (var i = 0; i < aDataArray.length; i++) {
			if (aDataArray[i][sRlsIdName] === undefined) {
				aDataArray[i][sRlsIdName] = jQuery.sap.uid();
			}
			aDataArray[i].uid = sDummyPrefix + "|DATA:" + sShapeDataName + "[" + aDataArray[i][sRlsIdName] + "]";
			aDataArray[i].__id__ = aDataArray[i][sRlsIdName];//this is a reference to the really index attribute in user's data
		}
	};

	/**
	 * This method iterates dataSet and save elements into the map, the key is 'id' of each element and the value is the element itself.
	 * When an element has children, traverse the children and use parent's 'id' plus "." plus child's 'id' as the key.
	 * For example, dataSet is like below which contains two elements and one of the elements has a child.
	 *        [
	 *            {
	 * 				id: 1
	 * 				children: [
	 * 					{
	 * 						id: 2
	 * 					}
	 * 				]
	 * 			},
	 *            {
	 * 				id: 3
	 * 			}
	 *        ]
	 * Then the map will be,
	 *        {
	 * 			"1" : {}
	 * 			"1.2": {}
	 * 			"3": {}
	 * 		}
	 * Notice that the key of children elements are path of ids which indicate both the children's id and their parent's id.
	 * @param {object} [dataSet]
	 *            The object array which contains all objects in the visible area including the hierarchy and chart.
	 * @param {object} [map]
	 *            The idPath map which is initially empty and is to be constructed by this method.
	 * @param {string} [parentId]
	 *            ID of parent element
	 * @returns {object} [relPath]
	 * 			  The returned object map
	 */
	Utility.generateObjectPathToObjectMap = function (dataSet, map, parentId) {
		var relPath;
		for (var i in dataSet) {
			var obj = dataSet[i], id, idx;
			if (obj.objectInfoRef) {
				id = obj.objectInfoRef.id;
				obj = obj.objectInfoRef;
			} else {
				id = obj.id;
			}
			
			if (parentId && parentId != "") {
				id = parentId.concat(".").concat(id);
			}

			idx = id.concat("-").concat(Utility.parseUid(obj.uid).rowIndex);
			map[idx] = obj;

			if (obj.children && obj.children.length > 0) {
				relPath = this.generateObjectPathToObjectMap(obj.children, map, id);
			}
		}
		return relPath;
	};

	/**
	 * This method is used to parse data type by the given uid.
	 * @param {string} [sShapeUid] uid
	 * @returns {string} [sShapeDataName] The date type if any match
	 */
	Utility.getShapeDataNameByUid = function (sShapeUid) {
		return Utility.parseUid(sShapeUid).shapeDataName; 
	};

	/**
	 * Get shape ID or Row ID
	 * 
	 * @private
	 * @param {string} sUid Shape UID or Row UID
	 * @param {boolean} bRow indicator to get row id
	 * @return {string} shape ID or Row ID
	 */
	Utility.getIdByUid = function(sUid, bRow) {
		return bRow ? Utility.parseUid(sUid).rowId : Utility.parseUid(sUid).shapeId;
	};

	/**
	 * Validate input string against defined UID regular expression.
	 * Get matched rowId, chartScheme, shapeDataName, shapeId if possible
	 * 
	 * @private
	 * @param {string} sUid input string
	 * @return {object} matched
	 */
	Utility.parseUid = function(sUid) {
		var regex = /(PATH:(.+)\|SCHEME:(.*?\[-?\d+\]))(?:\|DATA:(.+)\[(.*)\])?$/g;
		var matches = regex.exec(sUid);
		var result = {};
		if (matches) {
			var chartScheme = matches[3];
			if (chartScheme) {
				var sRowIndex = chartScheme.match(/\[-?\d+\]/)[0].slice(1, -1);
				chartScheme = chartScheme.replace(/\[-?\d+\]/, "");
			}

			var sRowUid = matches[1],
				sRowPath = matches[2],
				aRowIds = sRowPath.split("|"),
				sRowId = aRowIds[aRowIds.length - 1];

			result = {
				rowId: sRowId,
				rowPath: sRowPath,
				rowUid: sRowUid,
				chartScheme: chartScheme,
				shapeDataName: matches[4],
				shapeId: matches[5],
				rowIndex: sRowIndex
			};
		}
		return result;
	};

	/**
	 * Scale size value according to current sapUiSize css setting.
	 * 
	 * @param {string} sMode Sap ui size mode.
	 * @param {number} nCompactValue Number to be scaled.
	 * @return {number} Scaled value.
	 * @protected
	 */
	Utility.scaleBySapUiSize = function (sMode, nCompactValue) {
		switch (sMode){
		case "sapUiSizeCozy":
			return nCompactValue * 1.5;
		case "sapUiSizeCondensed":
			return nCompactValue * 0.78;
		default:
			return nCompactValue;
		}
	};

	/**
	 * Determine the active SAP UI size class.
	 * 
	 * @return {string} SAP UI size class name.
	 */
	Utility.findSapUiSizeClass = function (oControl) {
		var $rootDiv, $sizeDef;
		if (oControl) {
			$rootDiv = oControl.$();
		} else {
			$rootDiv = jQuery("body");
		}

		if ($rootDiv) {
			$sizeDef = $rootDiv.closest(".sapUiSizeCompact,.sapUiSizeCondensed,.sapUiSizeCozy");
			if ($sizeDef.hasClass("sapUiSizeCondensed")) { // over-write Compact
				return "sapUiSizeCondensed";
			} else if ($sizeDef.hasClass("sapUiSizeCompact")) {
				return "sapUiSizeCompact";
			} else if ($sizeDef.hasClass("sapUiSizeCozy")) {
				return "sapUiSizeCozy";
			}
			//TODO What is default class?
		}
	};
	
	/**
	 * Compare two float values
	 * 
	 * @return {boolean} true if the two values are equal.
	 */
	Utility.floatEqual = function (fVal1, fVal2) {
		return Math.abs(fVal1 - fVal2) < 0.0001;
	};
	
	/*
	 * Calculate string length
	 * 
	 * @return {number} the length of the string
	 */
	Utility.calculateStringLength = function (sString) {
		var iLength = 0; 
		if (sString.match("[\u4E00-\u9FFF]") === null) {
			iLength = sString.length; 
		} else {
			iLength = sString.length + sString.match(/[\u4E00-\u9FFF]/g).length; 
		}
		return iLength; 
	};

	Utility.judgeTimeHorizonValidity = function (oVisibleHorizon, oTotalHorizon) {
		var oVisibleStartTime = Format.abapTimestampToDate(oVisibleHorizon.getStartTime()).getTime(),
			oVisibleEndTime = Format.abapTimestampToDate(oVisibleHorizon.getEndTime()).getTime(),
			oTotalStartTime = Format.abapTimestampToDate(oTotalHorizon.getStartTime()).getTime(),
			oTotalEndTime = Format.abapTimestampToDate(oTotalHorizon.getEndTime()).getTime();

		return (oVisibleStartTime - oTotalStartTime >= 0) && (oTotalEndTime - oVisibleEndTime >= 0);
	};

	/**
	 * Retrieve the binded D3 shape data of the found DOM elements.
	 * 
	 * @param {array|string} vId document IDs
	 * @param {string} sContainer The container in which the vId resides
	 * @return {array} datum of found elements
	 * @private
	 */
	Utility.getShapeDatumById = function(vId, sContainer) {
		return Utility.getDatumById(vId, "sap-gantt-shape-id", sContainer);
	};

	/**
	 * Get the binded D3 row data of the found elements.
	 * The datum contains objectInfoRef and shapeData as property key
	 *
	 * @param {array|string} vId document IDs
	 * @param {string} sContainer The container in which the vId resides
	 * @return {array} datum of found elements
	 * @private
	 */
	Utility.getRowDatumById = function(vId, sContainer) {
		return Utility.getDatumById(vId, "sap-gantt-row-id", sContainer) || [];
	};

	/**
	 * Get the binded D3 row data of the found elements.
	 * Only get objectInfoRef property from @see getRowDatumById
	 *
	 * @param {array|string} vId document IDs
	 * @param {string} sContainer The container in which the vId resides
	 * @return {array} datum of found elements
	 * @private
	 */
	Utility.getRowDatumRefById = function(vId, sContainer) {
		return Utility.getRowDatumById(vId, sContainer).map(function(oItem) {
			return oItem.objectInfoRef;
		});
	};

	/**
	 * @private
	 */
	Utility.getRowDatumByShapeUid = function(sShapeUid, sContainer) {
		var oPart = this.parseUid(sShapeUid),
			sRowUid = oPart.rowUid,
			sRowId = oPart.rowId;

		var oDatum = null;

		var aRowDatum = this.getRowDatumById(sRowId, sContainer);
		var aFiltered = aRowDatum.filter(function(oDatum){
			return oDatum.objectInfoRef.uid.indexOf(sRowUid) >= 0;
		});
		if (aFiltered.length > 0) {
			oDatum = aFiltered[0].objectInfoRef;
		}
		return oDatum;
	};

	/**
	 * @private
	 */
	Utility.getShapeDatumByShapeUid = function(sShapeUid, sContainer) {
		var oPart = this.parseUid(sShapeUid),
			sShapeId = oPart.shapeId,
			sRowUid = oPart.rowUid;

		var aShapeDatum = this.getShapeDatumById(sShapeId, sContainer);
		var aFiltered = aShapeDatum.filter(function(oDatum){
			return oDatum.uid.indexOf(sRowUid) >= 0;
		});

		return aFiltered[0];
	};

	/**
	 * Get the binded D3 row data of the target DOM.
	 *
	 * @param {array|string} target event target
	 * @return {array} datum of found elements
	 * @private
	 */
	Utility.getRowDatumByEventTarget = function(target) {
		var datum = null;
		var $row = jQuery(target).closest("g[data-sap-gantt-row-id]");
		if ($row.length) {
			datum = d3.select($row.get(0)).datum();
		}
		return datum;
	};

	Utility.getDatumById = function(vId, sAttr, sContainer) {
		jQuery.sap.assert(typeof vId === "string" || vId instanceof Array, "vId must be string or array");
		jQuery.sap.assert(sContainer, "sContainer must specify");
		var param = vId ? vId : "";
		var aIds = param;
		if (typeof param === "string") {
			aIds = [param];
		}
		var datums = [];
		aIds.forEach(function(id) {
			var selector = ["[id='", sContainer, "']", " [data-", sAttr, "='", id, "']"].join("");
			$(selector).each(function(_, dom){
				var $dom = d3.select(dom),
					oNewDatum = $dom.datum();
				var bFound = datums.some(function(oOldDatum) {
					var sOldValue = oOldDatum.uid || oOldDatum.objectInfoRef.uid,
						sNewValue = oNewDatum.uid || oNewDatum.objectInfoRef.uid;
					return sOldValue === sNewValue;
				});
				if (!bFound) {
					datums.push(oNewDatum);
				}
			});
		});
		return jQuery.sap.unique(datums);
	};

	/**
	 * wrap the selector to an Attribute Equal Selector, so that this selector can 
	 * select elements that have the specified attribute with a value exactly equal to a certain value.
	 * @param {string} attributeName the specified attribute of the to-be-selected element
	 * @param {string} value the value which the specified attribute is expected to have and exactly equal to
	 * @return {string} The wrapped selector
	 */
	Utility.attributeEqualSelector = function(attributeName, value) {
		return "[" + attributeName + "=" + "'" + value + "'" + "]";
	};

	//This function calculate the time horizon by given width, and keep the zoom rate as orginal time horizon
	Utility.calculateHorizonByWidth = function(oOriginalHorizon, iOriginalWidth, iCurrentWidth, oCurrentStartTime) {
		var oOriginalStartTime = Format.abapTimestampToDate(oOriginalHorizon.getStartTime());
		var oOriginalEndTime = Format.abapTimestampToDate(oOriginalHorizon.getEndTime());
		var fRate = Math.abs(oOriginalStartTime.getTime() - oOriginalEndTime.getTime()) / iOriginalWidth;

		var oStartTime;
		if (oCurrentStartTime) {
			oStartTime = oCurrentStartTime;
		} else {
			oStartTime = oOriginalStartTime;
		}

		var oEndTime = new Date();
		oEndTime.setTime(oStartTime.getTime() + iCurrentWidth * fRate);

		var oCurrentVisibleHorizon = new TimeHorizon({
			startTime: oStartTime,
			endTime: oEndTime
		});

		return oCurrentVisibleHorizon;
	};

	return Utility;
}, /* bExport= */ true);

}; // end of sap/gantt/misc/Utility.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Shape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Shape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Shape",[
	"sap/ui/core/Element", "sap/gantt/misc/Utility", "sap/gantt/misc/Format",
	"sap/ui/core/Core", "sap/ui/core/format/NumberFormat"
], function (Element, Utility, Format, Core, NumberFormat) {
	"use strict";
	
	/**
	 * Creates and initializes a new Shape class.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * 
	 * @class 
	 * Base class for all shape classes.
	 * 
	 * <p>
	 * Shape class is designed to  describe how data should be visualized by an SVG tag. Most shape classes contain only properties and only one aggregation:
	 * <ul>
	 * 	<li>Some properties come from standard SVG attribute. Examples are <code>fill</code>, <code>stroke</code> etc.</li>
	 * 	<li>Some properties designed to put Shape class into Gantt chart's coordinate system, especially the X axis called <code>sap.gantt.misc.AxisTime</code>. Examples are <code>time</code>, <code>endTime</code> etc.</li>
	 * 	<li>Some properties are designed to provide some geometry attributes. Examples are <code>side</code>, <code>center</code> in some extend shapes.</li>
	 * 	<li>Every shape has aggregation called selectedShape to provide a way to specify how selection of the shape should be designed.</li>
	 * 	<li>Some container shapes like <code>g</code> and <code>clippath</code> has aggregation to aggregate other shapes in.</li>
	 * </ul>
	 * 
	 * Because d3 is used underneath and d3 use array to do batch data-binding, therefore Shape classes are not designed in the way of SAPUI5 standard data-binding (one shape instance per data). 
	 * Instead, each Shape instance stands for a particular way of visualize one data structure. And one Shape instance is used to draw a list of data by Drawers in Gantt chart. 
	 * 
	 * Because of this specialty, application cannot instantiate a shape class directly. Instead they can use configuration {@link sap.gantt.config.Shape} to describe which Shape class is used to draw
	 * which data in what way. And pass this configuration to Gantt chart control by property <code>shapes</code>. Gantt chart control use these configurations to instatiate Shape instances and Drawers. Drawers
	 * consumes Shape instances to draw real SVG shapes.
	 * 
	 * Each shape classes are designed to support 'configuration-first' principle. So called configure is the <code>shapeProperties</code> property of <code>sap.gantt.config.Shape</code>.
	 * In this object property, application can provide following things:
	 * <ul>
	 * 	<li>A value. Example: <code>{tooltip: 'svg rocks'}.</code></li>
	 * 	<li>An attribute from data. Example: <code>{time: {startTime}}</code></li>
	 * 	<li>Formatted attribute from data. <code>{tooltip: "{time:Timestamp} the stock price falls to {price:Number}."}</code> The typed values are formatted by global legacy
	 * 		number, date and time configurations by {@link sap.gantt.misc.Format}.</li>
	 * </ul>
	 * 
	 * In many applications, simple configuration or even binding cannot meet business requriement. Therefore applications are allowed to extend shapes and provide their own getter methods
	 * to effect all properties by data. For in row shapes, two parameters are injected to help application to do coding. All the shapes provided by Gantt chart follows 'configuration first'
	 * principle by invoking method <code>_configFirst()</code>. Meaning if application provide value by sap.gantt.config.Shape, the configuration over-write code logic in getters.
	 * 
	 * <b>Note:</b> Setter methods are only used for set default values. Because a Shape instance stands for a way of drawing. The instance self does not hold any status (property values).
	 * Meanwhile, all getter are injected with actual data and related informations to adapt to d3 paradigm. 
	 * </p>
	 * 
	 * @extend sap.ui.core.Element
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Shape
	 */
	var Shape = Element.extend("sap.gantt.shape.Shape", /** @lends sap.gantt.shape.Shape.prototype */ {
		metadata: {
			"abstract": true,
			/*
			 * See getters for property jsdoc.
			 */
			properties: {
				tag: {type: "string"},
				category: {type: "string", defaultValue: sap.gantt.shape.ShapeCategory.InRowShape},
				htmlClass: {type: "string"},
				isDuration: {type: "boolean", defaultValue: false},
				time: {type: "string"},
				endTime: {type: "string"},
				title: {type: "string"},
				ariaLabel: {type: "string"},
				xBias: {type: "float", defaultValue: 0},
				yBias: {type: "float", defaultValue: 0},
				fill: {type : "sap.gantt.ValueSVGPaintServer"},
				strokeOpacity: {type: "float", defaultValue: 1},
				fillOpacity: {type: "float", defaultValue: 1},
				stroke: {type : "sap.gantt.ValueSVGPaintServer"},
				strokeWidth: {type: "float", defaultValue: 0},
				strokeDasharray: {type: "string"},
				clipPath: {type: "string"},
				transform: {type: "string"},
				filter: {type: "string"},
				enableDnD: {type: "boolean", defaultValue: false},
				enableSelection: {type: "boolean", defaultValue: true},
				enableResize: {type: "boolean", defaultValue: false},
				rowYCenter: {type: "float", defaultValue: 7.5},
				rotationCenter: {type: "float[]"}, // only two elements, 0 for x, 1 for y
				rotationAngle: {type: "float"},
				isBulk: {type: "boolean", defaultValue: false},
				arrayAttribute: {type: "string"},
				timeFilterAttribute: {type: "string"},
				endTimeFilterAttribute: {type: "string"},
				legend: {type: "string"}
			},
			aggregations: {
				
				/**
				 * Selected Shape.
				 * 
				 * Selected shape specifies how to draw the selection high-light. Application can implement it by extending
				 * <code>sap.gantt.shape.SelectedShape</code> and configure it in <code>sap.gantt.config.Shape</code>.
				 */
				selectedShape: {type: "sap.gantt.shape.SelectedShape", multiple: false},
				
				/**
				 * Resize Shadow Shape.
				 * 
				 * Resize Shadow shape specifies how to draw the shadow highlight when resizing. Applications can implement it by extending
				 * <code>sap.gantt.shape.ResizeShadowShape</code> and configure it in <code>sap.gantt.config.Shape</code>.
				 */
				resizeShadowShape: {type: "sap.gantt.shape.ResizeShadowShape", multiple: false}
			}
		}
	});
	
	Shape.prototype.init = function () {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_SHAPE"));

		this.mShapeConfig = null;
		this.mChartInstance = null;
	};

	// used to cache LESS parameter colors
	var mValueColors = {};

	// theme change need reset colors
	sap.ui.getCore().attachThemeChanged(function() {
		mValueColors = {};
	});

	/**
	 * Gets current value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> This value is not recommended to be over-written by configuration or coding.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	Shape.prototype.getTag = function (oData) {
		return this._configFirst("tag", oData);
	};
	
	/**
	 * Gets current value of property <code>category</code>.
	 * 
	 * Values are in enum {@link sap.gantt.shape.ShapeCategory}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>category</code>.
	 * @public
	 */
	Shape.prototype.getCategory = function (oData) {
		return this._configFirst("category", oData);
	};
	
	/**
	 * Gets current value of property <code>htmlClass</code>.
	 * 
	 * Customized html classes. Multiple classes can be provided and seperated by space.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>htmlClass</code>.
	 * @public
	 */
	Shape.prototype.getHtmlClass = function (oData) {
		return this._configFirst("htmlClass", oData);
	};
	
	/**
	 * Gets current value of property <code>isDuration</code>.
	 * 
	 * <p>
	 * When this flag is set to true, the shape is called 'duration shape'. And <code>time</code> stands for startTime, <code>endTime</code> stands for end time.
	 * When this flag is set to be false, the shape is called 'transient shape'. And only <code>time</code> is used.
	 * Usually these 3 properties are used to determine x position of one shape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	Shape.prototype.getIsDuration = function (oData) {
		return this._configFirst("isDuration", oData);
	};
	
	/**
	 * Gets current value of property <code>time</code>.
	 * 
	 * Timestamp for transient shape or start timestamp for duration shape.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>time</code>.
	 * @public
	 */
	Shape.prototype.getTime = function (oData) {
		return this._configFirst("time", oData);
	};
	
	/**
	 * Gets current value of property <code>endTime</code>.
	 * 
	 * End timestamp for duration shape.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>endTime</code>.
	 * @public
	 */
	Shape.prototype.getEndTime = function (oData) {
		return this._configFirst("endTime", oData);
	};
	
	/**
	 * Gets current value of property <code>title</code>.
	 * 
	 * Title is visualized as tooltip by browser.
	 * <b>Notes:</b> Use character entity to do simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	Shape.prototype.getTitle = function (oData) {
		return this._configFirst("title", oData);
	};
	
	/**
	 * Gets current value of property <code>ariaLabel</code>.
	 * 
	 * Arial Label enables screen readers.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>ariaLabel</code>.
	 * @public
	 */
	Shape.prototype.getAriaLabel = function (oData) {
		return this._configFirst("ariaLabel", oData);
	};
	
	/**
	 * Gets current value of property <code>xBias</code>.
	 * 
	 * <p>
	 * Fine-tune x coordinate.
	 * This value only works for category <code>inRowShape</code>.
	 * Shape usually determines position in x coordinate by property <code>isDuration</code>, <code>time</code> and <code>endTime</code>.
	 * Application can use this property to do some x coordinate adjustment in pixel.
	 * The xBias will be automatically mirrored for RTL mode. It means if you set 10 to property xBias, in RTL mode, the value of the xBias will be -10.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>xBias</code>.
	 * @public
	 */
	Shape.prototype.getXBias = function (oData) {
		if (Core.getConfiguration().getRTL() === true) {
			return 0 - this._configFirst("xBias", oData);
		} else {
			return this._configFirst("xBias", oData);
		}
	};
	
	/**
	 * Gets current value of property <code>yBias</code>.
	 * 
	 * <p>
	 * Fine-tune y coordinate.
	 * This value only works for category <code>inRowShape</code>.
	 * Y coordinate is automatically determined by row. Application can use this property to do some y coordinate adjustment in pixel. 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>yBias</code>.
	 * @public
	 */
	Shape.prototype.getYBias = function (oData) {
		return this._configFirst("yBias", oData, true);
	};
	
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to fill. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	Shape.prototype.getFill = function (oData, oRowInfo) {
		return this._configFirst("fill", oData);
	};

	/**
	 * Gets current value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	Shape.prototype.getStrokeOpacity = function (oData) {
		return this._configFirst("strokeOpacity", oData);
	};
	
	/**
	 * Gets current value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	Shape.prototype.getFillOpacity = function (oData) {
		return this._configFirst("fillOpacity", oData);
	};
	
	/**
	 * Gets current value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	Shape.prototype.getStroke = function (oData) {
		return this._configFirst("stroke", oData);
	};
	
	/**
	 * Gets current value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	Shape.prototype.getStrokeWidth = function (oData) {
		return this._configFirst("strokeWidth", oData, true);
	};
	
	/**
	 * Gets current value of property <code>strokeDasharray</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-dasharray' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-dasharray'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>strokeDasharray</code>.
	 * @public
	 */
	Shape.prototype.getStrokeDasharray = function (oData) {
		return this._configFirst("strokeDasharray", oData);
	};
	
	/**
	 * Gets current value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	Shape.prototype.getClipPath = function (oData) {
		return this._configFirst("clipPath", oData);
	};
	

	/**
	 * Gets current value of property <code>transform</code>.
	 * 
	 * <p>
	 * Standard SVG 'transform' attribute.
	 * See {@link http://www.w3.org/TR/SVG/coords.html#TransformAttribute SVG 1.1 specifica6tion for 'transform'}.
	 * Some logic in getTransform() is provided to enable property <code>rotationCenter</code> and <code>rotationAngle</code>. If application over-write this property by
	 * configuration or coding, rotation behavior cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>transform</code>.
	 * @public
	 */
	Shape.prototype.getTransform = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("transform")) {
			return this._configFirst("transform", oData);
		}
		
		var aRetVal = [];
		/*
		 * in transform, the later function take effect first,
		 * so in this sequence, rotate first, then translate.
		 */
		this._translate(oData, oRowInfo, aRetVal);
		this._rotate(oData, oRowInfo, aRetVal);
		
		if (aRetVal.length > 0) {
			return aRetVal.join(" ");
		}
	};
	
	/**
	 * Rotate Shape
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Shape Row Info.
	 * @param {object} aRetVal Return Value.
	 * @protected
	 */
	Shape.prototype._rotate = function (oData, oRowInfo, aRetVal) {
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			nRotationAngle = this.getRotationAngle(oData, oRowInfo);
		
		if (aCenter && aCenter.length === 2 && nRotationAngle) {
			aRetVal.push("rotate(" + nRotationAngle + " " + aCenter[0] + " " + aCenter[1] + ")");
		}
	};
	
	/**
	 * Translate Shape
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Shape Row Info.
	 * @param {object} aRetVal Return Value.
	 * @protected
	 */
	Shape.prototype._translate = function (oData, oRowInfo, aRetVal) {
		var nXBias = this.getXBias(oData, oRowInfo),
			nYBias = this.getYBias(oData, oRowInfo);
		
		if (nXBias || nYBias) {
			nXBias = nXBias ? nXBias : 0;
			nYBias = nYBias ? nYBias : 0;
			aRetVal.push("translate(" + nXBias + " " + nYBias + ")");
		}
	};
	
	/**
	 * Gets current value of property <code>filter</code>.
	 * 
	 * <p>
	 * Standard SVG 'filter' attribute.
	 * See {@link http://www.w3.org/TR/SVG/filters.html#FilterProperty SVG 1.1 specifica6tion for 'filter'}.
	 * Usually value of filter is an url referenced from paint server definition rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>filter</code>.
	 * @public
	 */
	Shape.prototype.getFilter = function (oData) {
		return this._configFirst("filter", oData);
	};
	
	/**
	 * Gets current value of property <code>enableDnD</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for drag-and-drop behavior.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableDnD</code>.
	 * @public
	 */
	Shape.prototype.getEnableDnD = function (oData) {
		return this._configFirst("enableDnD", oData);
	};
	
	/**
	 * Gets current value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for selection behavior.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	Shape.prototype.getEnableSelection = function (oData) {
		return this._configFirst("enableSelection", oData);
	};
	
	/**
	 * Gets current value of property <code>enableResize</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for the resize behavior.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableResize</code>.
	 * @public
	 */
	Shape.prototype.getEnableResize = function (oData) {
		return this._configFirst("enableResize", oData);
	};

	/**
	 * Gets current value of property <code>rotationAngle</code>.
	 * 
	 * <p>
	 * This value is used in combination of property <code>rotationCenter</code>. By providing both shape can be rotated with any angle around rotation center.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>rotationAngle</code>.
	 * @public
	 */
	Shape.prototype.getRotationAngle = function (oData) {
		return this._rtlRotation(this._configFirst("rotationAngle", oData));
	};
	
	/**
	 * Provide logic for rotation considering RTL.
	 * 
	 * @param {number} nAngle Rotation angle.
	 * @return {number} Actual rotation angle.
	 * @protected
	 */
	Shape.prototype._rtlRotation = function (nAngle) {
		if (nAngle > 0 || nAngle < 0) {
			if (Core.getConfiguration().getRTL()){
				return 360 - nAngle;
			} else {
				return nAngle;
			}
		}
	};
	
	/**
	 * Gets current value of property <code>rowYCenter</code>.
	 * 
	 * <p>
	 * Default implementation is return the middle position of the row in y direction.
	 * If application over-write this property by configuration or code, the logic cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {array} Value of property <code>rowYCenter</code>.
	 * @public
	 */
	Shape.prototype.getRowYCenter = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("rowYCenter")) {
			return this._configFirst("rowYCenter", oData);
		}
		
		if (oRowInfo) {
			return oRowInfo.y + oRowInfo.rowHeight / 2;
		} else {
			return this.getProperty("rowYCenter");
		}
	};
	
	/**
	 * Gets current value of property <code>rotationCenter</code>.
	 * 
	 * <p>
	 * This value is used in combination of property <code>rotationAngle</code>. By providing both shape can be rotated with any angle around rotation center.
	 * Default implementation is the coordinate at <code>time</code> in x coordinate, and <code>rowYCenter</code> in y coordinate.
	 * If application over-write this property by configuration or code, the logic cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {array} Value of property <code>rotationCenter</code>.
	 * @public
	 */
	Shape.prototype.getRotationCenter = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("rotationCenter")) {
			return this._configFirst("rotationCenter", oData);
		}
		
		return this._getCenter(oData, oRowInfo);
	};
	
	Shape.prototype._getCenter = function (oData, oRowInfo, bEnd) {
		var oAxisTime = this.getAxisTime();
		
		var sTime = bEnd ? this.getEndTime(oData, oRowInfo) : this.getTime(oData, oRowInfo);
		
		if (!sTime) {
			return undefined;
		}
		var nX = oAxisTime.timeToView(Format.abapTimestampToDate(sTime));
		if (!nX && !nX == 0) {
			nX = oAxisTime.timeToView(0);
		}
		
		var nY = this.getRowYCenter(oData, oRowInfo);
		
		return [nX, nY];
	};
	
	/**
	 * Gets current value of property <code>isBulk</code>.
	 * 
	 * <p>
	 * Gantt chart do filtering of data by timestamp for performance sake. For simple shapes which has <code>time</code> or <code>endTime</code> provided, set this flag
	 * to false. For shapes (path or polygon) which connect a list of data, set this value to false. And if filtering is required to next level data, provide <code>arrayAttribute</code>,
	 * <code>timeFilterAttribute</code> and <code>endTimeFilterAttribute</code> in combination.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isBulk</code>.
	 * @public
	 */
	Shape.prototype.getIsBulk = function (oData) {
		return this._configFirst("isBulk", oData);
	};
	
	/**
	 * Gets current value of property <code>arrayAttribute</code>.
	 * 
	 * <p>
	 * Specify which attribute is child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>arrayAttribute</code>.
	 * @public
	 */
	Shape.prototype.getArrayAttribute = function (oData) {
		return this._configFirst("arrayAttribute", oData);
	};

	/**
	 * Gets current value of property <code>timeFilterAttribute</code>.
	 * 
	 * <p>
	 * Specify which is time attribute of items in child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>timeFilterAttribute</code>.
	 * @public
	 */
	Shape.prototype.getTimeFilterAttribute = function (oData) {
		return this._configFirst("timeFilterAttribute", oData);
	};

	/**
	 * Gets current value of property <code>endTimeFilterAttribute</code>.
	 * 
	 * <p>
	 * Specify which is end time attribute of items in child array.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>endTimeFilterAttribute</code>.
	 * @public
	 */
	Shape.prototype.getEndTimeFilterAttribute = function (oData) {
		return this._configFirst("endTimeFilterAttribute", oData);
	};

	/**
	 * Gets legend value of property <code>legend</code>.
	 * 
	 * <p>
	 * Specifies the legend text of the shape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {string} Value of property <code>legend</code>.
	 * @public
	 */
	Shape.prototype.getLegend = function (oData) {
		return this._configFirst("legend", oData);
	};

	/**
	 * This method must be used to ensure 'configuration-first' principle for extended shapes.
	 * 
	 * @param {string} sAttrName Attribute name.
	 * @param {object} oData Shape data.
	 * @param {boolean} bScaleBySapUiSizeMode whether scale by size mode or not
	 * @return {string} Resolved attribute.
	 * @protected
	 */
	Shape.prototype._configFirst = function (sAttrName, oData, bScaleBySapUiSizeMode) {
		var sPropertyValue = null;
		if (this.mShapeConfig.hasShapeProperty(sAttrName)) {
			var sConfigAttr = this.mShapeConfig.getShapeProperty(sAttrName);
			if (typeof sConfigAttr === "string") {
				sPropertyValue = this._formatting(oData, sAttrName, sConfigAttr);
			} else {
				sPropertyValue = sConfigAttr;
			}
		} else {
			sPropertyValue = this.getProperty(sAttrName);
		}

		if (bScaleBySapUiSizeMode && this.mChartInstance) {
			var sMode = this.mChartInstance.getSapUiSizeClass();
			sPropertyValue = Utility.scaleBySapUiSize(sMode, sPropertyValue);
		}

		return sPropertyValue;
	};

	/**
	 * Get the shape style string
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} shape styles
	 * @protected
	 */
	Shape.prototype.getStyle = function(oData, oRowInfo) {
		var oStyles = {
			"stroke": this.determineValueColor(this.getStroke(oData, oRowInfo)),
			"stroke-width": this.getStrokeWidth(oData, oRowInfo)
		};
		return this.getInlineStyle(oStyles);
	};

	/**
	 * Get the AxisTime of gantt chart instance
	 * 
	 * @return {object} the AxisTime instance
	 * @public
	 */
	Shape.prototype.getAxisTime = function() {
		var oAxisTime = null;
		if(this.mChartInstance) {
			oAxisTime = this.mChartInstance.getAxisTime();
		}

		return oAxisTime;
	};

	/**
	 * Get Inline style string. Convert style object to string and remove invalid values.
	 * 
	 * @param {object} oStyles an object with style attribute and value
	 * @return {string} inline style
	 * @private
	 */
	Shape.prototype.getInlineStyle = function(oStyles) {
		return Object.keys(oStyles).reduce(function(initial, attr){ 
			if (oStyles[attr] !== undefined && oStyles[attr] !== null && oStyles[attr] !== "") {
				initial += (attr + ":" + oStyles[attr] + "; ");
			}
			return initial;
		}, "");
	};

	/**
	 * Determine the actual value color of the less parameter.
	 * 
	 * @param {string} sParameter LESS parameter "@sapUiChartSequence1" for instance
	 * @return {string} real color hex or color name
	 * @private
	 */
	Shape.prototype.determineValueColor = function(sParameter) {
		var sFoundColor = mValueColors[sParameter];
		if (!sFoundColor && sParameter) {
			// if attribute has value but no paint server value
			sFoundColor = sap.gantt.ValueSVGPaintServer.normalize(sParameter);
			mValueColors[sParameter] = sFoundColor;
		}
		return sFoundColor;
	};

	/**
	 * This method is used to get view boundary for visible area in Gantt Chart. The view boundary is 
	 * a range of x-coordinate for visible area.
	 * 
	 * @return {array} View boundary for visible area in Gantt Chart.
	 * @protected
	 */
	Shape.prototype.getShapeViewBoundary = function() {
		var oStatusSet = this.mChartInstance._oStatusSet;
		if (oStatusSet && oStatusSet.aViewBoundary) {
			return oStatusSet.aViewBoundary;
		}
		return null;
	};

	Shape.prototype._formatting = function (oData, sAttrName, sAttrValue) {
		if (!sAttrValue) {
			return "";
		}
		
		//In shapes' configuration, when attribute name binding (e.g. {id}) is used, we cache the result of parsing
		//so that whenever the get<Attribute> methods are called (which are called thousands times in huge data scenario)
		//the binding paths (e.g. {id}) don't need to be parsed all the time which is also time consuming.
		this._attributeNameBindingMap = this._attributeNameBindingMap || {};
		
		if (!this._attributeNameBindingMap[sAttrName]) {
			this._attributeNameBindingMap[sAttrName] = this._resolveAttributeMap(sAttrValue);
		}
		
		return this._formatFromResolvedAttributeMap(oData, sAttrName);
	};

	Shape.prototype._resolveAttributeMap = function (sAttrValue) {
		var aRetVal = [];
		var aMatchResult = sAttrValue.match(/[^\{\}]*(\{.*?\})?/g);
		aMatchResult.pop(); 

		aMatchResult.forEach(function (sValue, iIndex, aArray){
			var oAttrItem = {}, aSplit = sValue.split("{");
			// resolve plain leading text
			if (aSplit[0].length > 0) {
				oAttrItem.leadingText = aSplit[0];
			}
			// resolve binding, if "{" exist, find the part in between "{}", and split the part by ":"
			if (aSplit[1]) {
				aSplit = aSplit[1].split("}")[0].split(":");
				// resolve attribute path + name
				if (aSplit[0].length > 0) {
					oAttrItem.attributeName = aSplit[0].trim().split("/");
				}
				// resolve attribute type
				if (aSplit[1]) {
					oAttrItem.attributeType = aSplit[1].trim();
				}
			}
			aRetVal.push(oAttrItem);
		});
		return aRetVal;
	};

	Shape.prototype._formatFromResolvedAttributeMap = function (oData, sAttrName) {
		var aAttributeNameBindingParts = this._attributeNameBindingMap[sAttrName],
			aRetVal = [], sPart, oValue;
		if (aAttributeNameBindingParts) {
			aAttributeNameBindingParts.forEach(function (oPart, iIndex){
				sPart = oPart.leadingText;
				if (oPart.attributeName) {
					oValue = oData;
					oPart.attributeName.forEach(function (sPath, iIndex){
						oValue = oValue[sPath];
					});
					if (sPart) {
						sPart = sPart + this._formatValue(oValue, oPart.attributeType);
					} else {
						sPart = this._formatValue(oValue, oPart.attributeType);
					}
				}
				aRetVal.push(sPart);
			}.bind(this));
		}
		
		if (aRetVal.length === 1) {
			return aRetVal[0];
		}
		return aRetVal.join("");
	};

	Shape.prototype._formatValue = function (sAttrValue, sType) {
		var sRetVal = sAttrValue;

		switch (sType) {
			case "Number": // fill data for handling resource
				sRetVal = this._formatNumber(sAttrValue);
				break;

			case "Timestamp":
				// This is a possibility that mChartInstance is Legend instance :[
				// but Legend doesn't have locale property and Timestamp type, so move getLocale here
				// to prevent runtime error.
				var oLocaleConfig = this.mChartInstance.getLocale();
				if (oLocaleConfig) {
					sRetVal = Format.abapTimestampToTimeLabel(sAttrValue, oLocaleConfig);
				}
				break;
			default:
				if (sRetVal === undefined || sRetVal === null) {
					sRetVal = "";
				}
				break;
		}
		return sRetVal;
	};

	Shape.prototype._formatNumber = function (number,decimalPlaces) {
		var sRetValue = "";
		if (decimalPlaces !== undefined) {
			sRetValue = NumberFormat.getFloatInstance({
				minFractionDigits: decimalPlaces, // minimal number of fraction digits
				maxFractionDigits: decimalPlaces // maximal number of fraction digits
			}).format(number);
		} else {
			sRetValue = NumberFormat.getFloatInstance().format(number);
		}
		return sRetValue;
	};

	/**
	 * Retrieves the parent shape's referenceId.
	 * 
	 * <p>
	 * The referenceId, which is related to shape data, is generated by a Group shape.
	 * Aggregation shapes can use this method to retrieve the referenceId.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of <code>referenceId</code>.
	 * @public
	 */
	Shape.prototype.getParentReferenceId = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("referenceId")) {
			return this._configFirst("referenceId", oData);
		}
		if (this.getParent() && this.getParent().genReferenceId) {
			return this.getParent().genReferenceId(oData, oRowInfo);
		}
	};

	return Shape;
}, true);

}; // end of sap/gantt/shape/Shape.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Text') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Text'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Text",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Text class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Text shape class using SVG tag 'text'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/text.html SVG specification 1.1 for 'text' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/text/text01.svg Text sample in SVG specification 1.1}:<br/>
	 * <svg width="10cm" height="3cm" viewBox="0 0 1000 300" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="998" height="298" fill="none" stroke="blue" stroke-width="2" />
	 * <text x="250" y="150" font-family="Verdana" font-size="55" fill="blue" >Hello, out there</text>
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/text/textdecoration01.svg Decorated text sample in SVG specification 1.1}: <br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <g font-size="60" fill="blue" stroke="red" stroke-width="1" >
	 * <text x="100" y="75">Normal text</text>
	 * <text x="100" y="165" text-decoration="line-through" >Text with line-through</text>
	 * <text x="100" y="255" text-decoration="underline" >Underlined text</text>
	 * <text x="100" y="345" text-decoration="underline" >
	 * <tspan>One </tspan>
	 * <tspan fill="yellow" stroke="purple" >word </tspan>
	 * <tspan fill="yellow" stroke="black" >has </tspan>
	 * <tspan fill="yellow" stroke="darkgreen" text-decoration="underline" >different </tspan>
	 * <tspan fill="yellow" stroke="blue" >underlining</tspan>
	 * </text>
	 * </g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Text
	 */
	var Text = Shape.extend("sap.gantt.shape.Text", /** @lends sap.gantt.shape.Text.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "text"},

				text: {type: "string"},
				x: {type: "float"},
				y: {type: "float"},
				fontSize: {type: "int", defaultValue: 10},
				textAnchor: {type: "string", defaultValue: "start"},
				fontFamily: {type: "string"},
				wrapWidth: {type: "float", defaultValue: -1},
				wrapDy: {type: "float", defaultValue: 20},
				truncateWidth: {type: "float", defaultValue: -1},
				ellipsisWidth: {type: "float", defaultValue: 12}
			}
		}
	});
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Text.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the bottom-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextElementXAttribute SVG 1.1 specification for 'x' attribute of 'text'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code>.
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Text.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}

		var sTime = this.getTime(oData, oRowInfo);
		var oAxisTime = this.getAxisTime();
		var xPos = oAxisTime.timeToView(Format.abapTimestampToDate(sTime));
		if (!jQuery.isNumeric(xPos)) {
			xPos = oAxisTime.timeToView(0).toFixed(1);
		}
		return xPos;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the bottom-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextElementYAttribute SVG 1.1 specification for 'y' attribute of 'text'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code>
	 * and property <code>height</code> to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Text.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}

		return this.getRowYCenter(oData, oRowInfo) + this.getFontSize(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>text</code>.
	 * 
	 * <p>
	 * Text string.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>text</code>.
	 * @public
	 */
	Text.prototype.getText = function (oData) {
		return this._configFirst("text", oData);
	};

	/**
	 * Gets the value of property <code>textAnchor</code>.
	 * 
	 * <p>
	 * Text anchor. Possible values are 'start', 'middle', and 'end'.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TextAnchorProperty SVG 1.1 specification for 'text-anchor' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>textAnchor</code>.
	 * @public
	 */
	Text.prototype.getTextAnchor = function (oData) {
		return this._configFirst("textAnchor", oData);
	};
	
	/**
	 * Gets the value of property <code>fontSize</code>.
	 * 
	 * <p>
	 * Text font size.
	 * See {@link http://www.w3.org/TR/SVG/text.html#FontSizeProperty SVG 1.1 specification for 'font-size' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>fontSize</code>.
	 * @public
	 */
	Text.prototype.getFontSize = function (oData) {
		return this._configFirst("fontSize", oData, true);
	};

	/**
	 * Gets the value of property <code>fontFamily</code>.
	 * 
	 * <p>
	 * Text font family.
	 * See {@link http://www.w3.org/TR/SVG/text.html#FontSizeProperty SVG 1.1 specification for 'font-family' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>fontFamily</code>.
	 * @public
	 */
	Text.prototype.getFontFamily = function (oData) {
		return this._configFirst("fontFamily", oData, true);
	};
	
	/**
	 * Gets the value of property <code>wrapWidth</code>.
	 * 
	 * <p>
	 * Wrapping width. Default value -1 indicates wrapping function is not activated. To enable wrapping, give a wrap width here. If text legnth is
	 * exceeding wrapping width, text wrap in different lines.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>wrapWidth</code>.
	 * @private
	 */
	Text.prototype.getWrapWidth = function (oData) {
		return this._configFirst("wrapWidth", oData);
	};
	
	/**
	 * Gets the value of property <code>wrapDy</code>.
	 * 
	 * <p>
	 * If wrapping happens, this value gives the deviation of line wrapping. Effect the distance between lines.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>wrapDy</code>.
	 * @private
	 */
	Text.prototype.getWrapDy = function (oData) {
		return this._configFirst("wrapDy", oData);
	};
	
	/**
	 * Gets the value of property <code>truncateWidth</code>.
	 * 
	 * <p>
	 * Truncating width. Default value -1 indicates truncating function is not activated. To enable truncating, give a truncate width here. If text length
	 * exceeds truncate width, text is truncated.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>truncateWidth</code>.
	 * @public
	 */
	Text.prototype.getTruncateWidth = function (oData) {
		return this._configFirst("truncateWidth", oData);
	};
	
	/**
	 * Gets the value of property <code>ellipsisWidth</code>.
	 * 
	 * <p>
	 * Ellipsis width if truncate happens. Default value 12 indicates 12px length reserved for ellipsis. If the value is
	 * -1, no ellipsis appears even truncate happens. If the value is bigger than -1, ellipsis will be 3 dots in length of this value.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>ellipsisWidth</code>.
	 * @public
	 */
	Text.prototype.getEllipsisWidth = function (oData) {
		return this._configFirst("ellipsisWidth", oData);
	};

	Text.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"font-size": this.getFontSize(oData, oRowInfo) + "px;",
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"font-family": this.getFontFamily(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	return Text;
}, true);

}; // end of sap/gantt/shape/Text.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Iconfont') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Iconfont'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/Iconfont",[
	"sap/gantt/shape/Text", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core", "sap/ui/core/IconPool"
], function (Text, Utility, Format, Core, IconPool) {
	"use strict";
	
	/**
	 * Creates and initializes a new Iconfont class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Iconfont shape class using SVG tag 'text'. This shape is usually used to display icons in Gantt chart.
	 * 
	 * @extend sap.gantt.shape.Text
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Iconfont
	 */
	var Iconfont = Text.extend("sap.gantt.shape.ext.Iconfont", /** @lends sap.gantt.shape.ext.Iconfont.prototype */ {
		metadata: {
			properties: {
				name: {type: "string"},
				collectionName: {type: "string"}
			}
		}
	});

	/**
	 * Gets the value of property <code>text</code>.
	 * 
	 * <p>
	 * The text string of iconfont is read via {@link sap.ui.IconPool.getIconInfo} passing Name and CollectionName as parameters.
	 * To use the SAP openui5 predefined icons, don't set the property CollectionName.
	 * To use the icons in other collections, you need register first. 
	 * For example, after calling function sap.ushell.iconfonts.registerFiori2IconFont, then you can use the icon collection with names "BusinessSuiteInAppSymbols", "Fiori2"...
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>text</code>.
	 * @public
	 */
	Iconfont.prototype.getText = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("text")) {
			return this._configFirst("text", oData);
		}
		var sName = this.getName(oData, oRowInfo),
			sCollectionName = this.getCollectionName(oData, oRowInfo);
		if (sCollectionName === "") {
			sCollectionName = undefined;
		}
		var oIconInfo = IconPool.getIconInfo(sName, sCollectionName);
		if (oIconInfo) {
			return oIconInfo.content;
		}
	};
	/**
	 * Gets the value of property <code>name</code>.
	 * 
	 * <p>
	 * The name of iconfont as mentioned in property <code>text</code>
	 * @param {object} oData Shape data.
	 * @return {string} Value of property <code>name</code>.
	 * @public
	 */
	Iconfont.prototype.getName = function (oData) {
		return this._configFirst("name", oData);
	};
	/**
	 * Gets the value of property <code>collectionName</code>.
	 * 
	 * <p>
	 * The collectionName of iconfont as mentioned in property <code>text</code>
	 * @param {object} oData Shape data.
	 * @return {string} Value of property <code>collectionName</code>.
	 * @public
	 */
	Iconfont.prototype.getCollectionName = function (oData) {
		return this._configFirst("collectionName", oData);
	};
	/**
	 * Gets the value of property <code>fontFamily</code>.
	 * 
	 * <p>
	 * Font family of Iconfont.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>fontFamily</code>.
	 * @public
	 */
	Iconfont.prototype.getFontFamily = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fontFamily")) {
			return this._configFirst("fontFamily", oData);
		}
		var sName = this.getName(oData, oRowInfo);
		var sCollectionName = this.getCollectionName(oData, oRowInfo);
		if (sCollectionName === "") {
			sCollectionName = undefined;
		}
		var oIconInfo = IconPool.getIconInfo(sName, sCollectionName);
		if (oIconInfo) {
			return oIconInfo.fontFamily;
		}
	};
	return Iconfont;
}, true);

}; // end of sap/gantt/shape/ext/Iconfont.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartContainerRenderer",['sap/ui/core/theming/Parameters', "sap/gantt/misc/Utility"], function (Parameters, Utility) {
	"use strict";

	/**
	 * Gantt Chart Container renderer.
	 *
	 * @namespace
	 */
	var GanttChartContainerRenderer = {};

	GanttChartContainerRenderer.render = function (oRm, oGanttChartContainer) {
		jQuery.sap.measure.start("GanttChartContainerRenderer render","GanttPerf:GanttChartContainerRenderer render function");
		oRm.write("<div");
		oRm.writeControlData(oGanttChartContainer);
		oRm.addStyle("width", oGanttChartContainer.getWidth());
		oRm.addStyle("height", oGanttChartContainer.getHeight());
		oRm.writeStyles();
		oRm.addClass("sapGanttChartContainer");
		oRm.writeClasses();
		oRm.write(">");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderPaintServer","GanttPerf:GanttChartContainerRenderer renderPaintServer part");
		this.renderSvgDefs(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderPaintServer");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderToolbar","GanttPerf:GanttChartContainerRenderer renderToolbar part");
		this.renderToolbar(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderToolbar");
		
		jQuery.sap.measure.start("GanttChartContainerRenderer renderGanttCharts","GanttPerf:GanttChartContainerRenderer renderGanttCharts part");
		this.renderGanttCharts(oRm, oGanttChartContainer);
		jQuery.sap.measure.end("GanttChartContainerRenderer renderGanttCharts");

		oRm.write("</div>");
		jQuery.sap.measure.end("GanttChartContainerRenderer render");
	};

	GanttChartContainerRenderer.renderSvgDefs = function (oRm, oGanttChartContainer) {
		var oSvgDefs = oGanttChartContainer.getSvgDefs();
		if (oSvgDefs) {
			oRm.write("<svg id='" + oGanttChartContainer.getId() + "-svg-psdef' tabindex='-1' focusable='false'");
			oRm.addClass("sapGanttInvisiblePaintServer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write(oSvgDefs.getDefString());
			oRm.write("</svg>");
		}
	};

	GanttChartContainerRenderer.renderToolbar = function (oRm, oGanttChartContainer) {
		oRm.renderControl(oGanttChartContainer._oToolbar);
	};

	GanttChartContainerRenderer.renderGanttCharts = function (oRm, oGanttChartContainer) {
		oRm.write("<div");
		oRm.addClass("sapGanttViewContainer");
		oRm.writeClasses();
		oRm.addStyle("width", oGanttChartContainer.getWidth());
		var sGanttViewHeight = oGanttChartContainer.getHeight();
		if (oGanttChartContainer._oToolbar.getAllToolbarItems().length > 0) {
			var sCSSMode = Utility.findSapUiSizeClass();
			var sToolbarHeight = (sCSSMode === "sapUiSizeCompact" || sCSSMode === "sapUiSizeCondensed") ? "32px" : "48px";
			sGanttViewHeight = "calc(" + sGanttViewHeight + " - " + sToolbarHeight + ")";
		}
		oRm.addStyle("height", sGanttViewHeight);
		oRm.writeStyles();
		oRm.write(">");
		oRm.renderControl(oGanttChartContainer._oSplitter);
		oRm.write("</div>");
	};

	return GanttChartContainerRenderer;

}, /* bExport= */ true);

}; // end of sap/gantt/GanttChartContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartWithTableRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

jQuery.sap.declare('sap.gantt.GanttChartWithTableRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartWithTableRenderer",['sap/ui/core/theming/Parameters', 'sap/gantt/misc/Utility'], function (Parameters, Utility) {
	"use strict";

	/**
	 * Gantt Chart with table renderer.
	 *
	 * @namespace
	 */
	var GanttChartWithTableRenderer = {};

	GanttChartWithTableRenderer.render = function (oRenderManager, oGanttChartWithTable) {
		oRenderManager.write("<div");
		oRenderManager.writeControlData(oGanttChartWithTable);
		oRenderManager.addClass("sapUiTableHScr");  //force horizontal scroll bar to show
		oRenderManager.addClass("sapGanttChartWithTable");
		oRenderManager.writeClasses();
		oRenderManager.addStyle("width", oGanttChartWithTable.getWidth());
		oRenderManager.addStyle("height", oGanttChartWithTable.getHeight());
		oRenderManager.writeStyles();
		oRenderManager.write(">");

		this._setTableColumnHeaderHeight(oGanttChartWithTable);
		oRenderManager.renderControl(oGanttChartWithTable._oSplitter);
		oRenderManager.write("</div>");

	};

	GanttChartWithTableRenderer._setTableColumnHeaderHeight = function(oGanttChartWithTable) {

		var bHasNoLocalToolbar = oGanttChartWithTable._oToolbar.getAllToolbarItems().length === 0;
		if (bHasNoLocalToolbar) {
			var sMode = Utility.findSapUiSizeClass(oGanttChartWithTable),
				bHcbTheme = jQuery.sap.endsWith(sap.ui.getCore().getConfiguration().getTheme(), "hcb"),
				iHeight = 0,
				iPaddingTop = bHcbTheme ? 4 : 2;
			if (sMode === "sapUiSizeCozy") {
				iHeight = parseInt(Parameters.get("_sap_gantt_Gantt_HeaderHeight"), 10) - iPaddingTop;
			} else {
				iHeight = parseInt(Parameters.get("_sap_gantt_Gantt_CompactHeaderHeight"), 10) - iPaddingTop;
			}
			oGanttChartWithTable._oTT.setColumnHeaderHeight(iHeight);
		}
	};

	return GanttChartWithTableRenderer;
}, /* bExport= */ true);

}; // end of sap/gantt/GanttChartWithTableRenderer.js
if ( !jQuery.sap.isDeclared('sap.gantt.axistime.AxisTimeStrategyBase') ) {
/*sap.gantt.axistime.AxisTimeCategory = {
	consecutive: "consecutive",
	discretive: "discretive"
};*/

jQuery.sap.declare('sap.gantt.axistime.AxisTimeStrategyBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
sap.ui.define("sap/gantt/axistime/AxisTimeStrategyBase",[
	"sap/ui/core/Element", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/misc/RelativeTimeFormatter", "sap/gantt/config/TimeHorizon", "sap/ui/core/Locale"
], function (Element, Utility, Format, RelativeTimeFormatter, TimeHorizon, Locale) {
	"use strict";

	/**
	 * Creates and initializes a new AxisTimeStrategy.
	 * 
	 * @param {string} [sId] ID for the new AxisTimeStrategy, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new AxisTimeStrategy
	 * 
	 * @class 
	 * Base class for all zoom strategies. This base class defines basic properties and aggregations.
	 * 
	 * <p>This base class defines:
	 * <ul>
	 * 		<li>Basic properties and aggregations.</li>
	 * </ul>
	 * This class controls the zoom strategies and zoom rate in Gantt Chart.
	 * sap.gantt provides three basic implementations of <code>AxisTimeStrategy</code>:
	 * <ul>
	 * 		<li><code>sap.gantt.axistime.ProportionZoomStrategy</code> - A zoom strategy that provides the proportional change ability. Proportional change 
	 * ensures that Gantt Chart dynamically adjusts the zoom rate to be the best fit 
	 * for rendering shapes in the chart area. This strategy cannot be used by the Select control.</li>
	 * 		<li><code>sap.gantt.axistime.FullScreenStrategy</code> - A zoom strategy that sets the value of <code>totalHorizon</code> to the value of <code>visibleHorizon</code>. 
	 * When this strategy is implemented, <code>visibleHorizon</code> is fixed. Because of this, when you scroll the splitter to expand or shrink the chart area, 
	 * the value of <code>visibleHorizon</code> remains intact, which makes shapes look larger or smaller accordingly.
	 * Moreover, the horizontal scroll bar never appears and the zoom control is deactivated.</li>
	 * 		<li><code>sap.gantt.axistime.StepwiseZoomStrategy</code> - A zoom strategy that provides the stepwise change ability to control the zoom level of Gantt Chart, 
	 *         which is often used by the Select zoom control.</li>
	 * </ul>
	 * </p>
	 * 
	 * @extends sap.ui.core.Element
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.axistime.AxisTimeStrategyBase
	 */
	var AxisTimeStrategyBase = Element.extend("sap.gantt.axistime.AxisTimeStrategyBase", /* @lends sap.gantt.axistime.AxisTimeStrategyBase */ {
		metadata: {
			"abstract": true,
			properties: {
				/**
				 * Entire time span Gantt Chart can display in the chart area
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.TimeHorizon</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				totalHorizon: {type: "object", defaultValue: sap.gantt.config.DEFAULT_PLAN_HORIZON},
				/**
				 * Time span Gantt Chart currently displays in the chart area
				 * Specifies the start and end points of the time span that is visible in the chart area. <code>visibleHorizon</code> is less
				 * than or equal to <code>totalHorizon</code>.
				 * You can configure the time horizon using one of the following patterns:
				 * <ul>
				 * 		<li>[startTime, null]: Jump to the position where the start time is on the left edge of the screen without changing the zoom rate. When you 
				 * use this pattern, Gantt Chart calculates the endTime according to the current zoom rate.</li>
				 * 		<li>[null, endTime]: Jump to the position where the end time is on the right edge of the screen without changing the zoom rate.
				 *  When you use this pattern, Gantt Chart calculates the startTime accoridng to the current zoom rate.</li>
				 * 		<li>[startTime, endTime]: Every strategy has their own implementation to control misc.AxisTime.</li>
				 * </ul>
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.TimeHorizon</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				visibleHorizon: {type: "object", defaultValue: sap.gantt.config.DEFAULT_INIT_HORIZON},
				/**
				 * Defines granularity levels, labelling formats, and range of the time line. 
				 * <ul>
				 * <li>granularity level: time span between two neighboring vertical lines. Examples: 12 hours.</li>
				 * <li>labelling format: time formats for the upper row and lower row in the time line. These two rows do not have to share the same format. </li>
				 * <li>range: defines a certain length in pixel. Gantt Chart loops the granularity levels from the beginning and chooses the first granularity 
				 * level with the time span that consumes more than the defined length.</li>
				 * For example, if the current range is 90, Gantt Chart loops the granularity levels from the default initial granularity level 5min. If the 6hour 
				 * granularity level consumes 50 pixels, 12hour consumes 100 pixels, and 1Day consumes 200 pixels, the 12hour granularity level is selected as the 
				 * current granularity level as it's the first level with the time span that consumes more than 90 pixels.
				 * </ul>
				 *  
				 * The granularity level is a JSON object with the granularity as the key and some internal information such as formatting. 
				 * 
				 * Take the <code>"12hour"</code> granularity level for example.
				 * 	<ul>
				 * 		<li><code>"12hour":</code> - Granularity level ID.
				 * 			<ul>
				 * 				<li>
				 * 					<code>"innerInterval"</code> - Time interval between neighboring vertical lines is 12 hours. 
				 * 					<ul> 
				 * 						<li><code>"unit": sap.gantt.config.TimeUnit.day</code> - Time unit is day.</li>
				 * 						<li><code>"span": 1</code> - Span is 1.</li>
				 * 						<li><code>"range": 90</code> - This granularity level is selected as the current level if 12 hours is the first time span that 
				 *                                 consumes more than 90 pixels to be displayed in the chart area.</li>
				 * 					</ul>
				 * 				</li>
				 * 				<li>
				 * 					<code>largeInterval</code> - Time interval of the upper row in the timeline is 1 day. Formatted in the locale language with the format string. 
				 *                                               This zoom level implements an interval larger than the interval in the default zoom level.
				 * 					<ul>
				 * 						<li><code>"unit": sap.gantt.config.TimeUnit.day</code> Time unit is day. </li>
				 * 						<li><code>"span": 1</code> - Time span is 1.</li>
				 * 						<li><code>"format": "cccc dd.M.yyyy"</code> - Formats the string in CLDR date/time symbols.</li>
				 * 						<li><code>"pattern": "yyyy"</code> -Aa data pattern in LDML format. This setting takes precedence over the setting of "format".</li>
				 * 						<li><code>"relativeTime": true</code> - Specifies whether or not to use relative time mode, which defaults to "false". When you set this property to "true", Gantt Chart ignores the values of "format" and "pattern". 
				 *                                In this mode, if the largeInterval or the smallInterval of the timeline option uses the "sap.gantt.config.TimeUnit.day" or "sap.gantt.config.TimeUnit.week" unit, you must set the span to 1.</li>
				 * 						<li><code>"relativeTimePrefix": "Day"</code> - A string that specifies the prefix displayed before every relative time point. For example, if you set this property to "Day", the relative timeline will display "Day 1", "Day 2", "Day 3", and so on so forth.</li>
				 * 					</ul>
				 * 				</li>
				 * 				<li>
				 * 					<code>smallInterval</code> - Time interval of the lower row in the timeline is 12 hours. Formatted in the locale language with the format string. 
				 *                                               This zoom level implements an interval the same as the that of the default zoom level.
				 * 					<ul>
				 * 						<li><code>"unit": sap.gantt.config.TimeUnit.hour</code> - Time unit is hour.</li>
				 * 						<li><code>"span": 2</code> - Time span is 2.</li>
				 * 						<li><code>"format": "HH:mm"</code> - Formats the string in CLDR date/time symbols.</li>
				 * 						<li><code>"relativeTime": false</code>
				 * 					</ul>
				 * 				</li>
				 * 			</ul>
				 * 		</li>
				 * 	</ul>
				 * 
				 * The current granularity setting provides the following values in the default time line option:<br/>
				 * <code>5min</code>, <code>10min</code>, <code>15min</code>, <code>30min</code>,<br/>
				 * <code>1hour</code>, <code>2hour</code>, <code>4hour</code>, <code>6hour</code>, <code>12hour</code>,<br/>
				 * <code>1day</code>, <code>2day</code>, <code>4day</code>,<br/>
				 * <code>1week</code>, <code>2week</code>,<br/>
				 * <code>1month</code>, <code>2month</code>, <code>4month</code>, <code>6month</code>,<br/>
				 * <code>1year</code>, <code>2year</code>, <code>5year</code>.
				 * We recommend that you use the default time line option object instead of creating one by yourself. Because the default time line option object has been precisely calculated and it fits most use cases.
				 * If the default time line option is not the best-fit, you can select a time line option from the range (coarsestTimeLineOption, 5 years to finestTimeLineOption, 5 minutes) listed above.
				 * Note that creating a new time line option object is a complex process. Moreover, the extra effort may not serve significant purposes and is likely to cause text overlay in the Gantt Chart header.
				 */
				timeLineOptions: {type: "object"},
				/**
				 * Current time line option of AxisTimeStrategy
				 */
				timeLineOption: {type: "object"},
				/**
				 * Coarsest time line option of AxisTimeStrategy
				 */
				coarsestTimeLineOption: {type: "object"},
				/**
				 * Finest time line option of AxisTimeStrategy
				 */
				finestTimeLineOption: {type: "object"},
				/**
				 * Total number of zoom levels on your zoom control. For example, the step count of Slider control and the item count of Select control.
				 */
				zoomLevels: {type: "int", defaultValue: 10},
				/**
				 * Current zoom level of your Gantt chart with 0 representing the initial zoom level. The value of this property must be lower than that of totalZoomLevels.
				 */
				zoomLevel: {type: "int", defaultValue: 0},
				/**
				 * Configures the calendar type for the Gantt Chart time label.
				 * We recommend that you set the type of this argument to <code>sap.ui.core.CalendarType</code>. 
				 * Otherwise some properties you set may not function properly.
				 */
				calendarType: {type: "string", defaultValue: sap.ui.core.CalendarType.Gregorian},
				/**
				 * Configures the locale of the Gantt Chart time label.
				 * We recommend that you set the type of this argument to <code>sap.ui.core.Locale</code>.
				 * Otherwise some properties you set may not function properly.
				 */
				locale: {type: "object"},
				/**
				 * Specifies the mouse wheel zooming type, which determines the zoom granularity
				 */
				mouseWheelZoomType: {type: "sap.gantt.MouseWheelZoomType", defaultValue: sap.gantt.MouseWheelZoomType.FineGranular}
			},
			aggregations: {
				_axisTime: {type: "sap.gantt.misc.AxisTime", multiple: false, visibility: "hidden"}
			}
		}
	});

	AxisTimeStrategyBase.prototype.applySettings = function () {
		Element.prototype.applySettings.apply(this, arguments);
		this.calZoomBase();
		return this;
	};

	/**
	 * Check if this axis time strategy enable period zoom

	 * @return {boolean} Boolean value shows whether this axis time strategy enable period zoom
	 * @private
	 */
	AxisTimeStrategyBase.prototype.isTimePeriodZoomEnabled = function () {
		return true;
	};

	AxisTimeStrategyBase.prototype.setVisibleHorizon = function (oVisibleHorizon) {
		this.setProperty("visibleHorizon", this._completeTimeHorizon(oVisibleHorizon), true);
		return this;
	};

	AxisTimeStrategyBase.prototype._completeTimeHorizon = function (oVisibleHorizon) {
		var oRetVal = new TimeHorizon({
				startTime: this.getVisibleHorizon().getStartTime(),
				endTime: this.getVisibleHorizon().getEndTime()
			});

		if (oVisibleHorizon) {
			var sStartTime = oVisibleHorizon.getStartTime(),
				sEndTime = oVisibleHorizon.getEndTime(),
				oDate,
				oTotalStartDate = Format.abapTimestampToDate(this.getTotalHorizon().getStartTime()),
				oTotalEndDate = Format.abapTimestampToDate(this.getTotalHorizon().getEndTime());

			if (!sStartTime && !sEndTime) { // illegal case
				return oRetVal;
			}

			var iTimeSpan;

			if (this._oZoom && this._oZoom.base && this._oZoom.base.scale !== undefined && this._nGanttVisibleWidth !== undefined && this.getAxisTime()){
				var nCurrentZoomRate = this.getAxisTime().getZoomRate();
				var nCurrentScale = this._oZoom.base.scale/nCurrentZoomRate;
				iTimeSpan = this._nGanttVisibleWidth * nCurrentScale;
			} else {
				iTimeSpan = Format.abapTimestampToDate(oRetVal.getEndTime()).getTime() -
							Format.abapTimestampToDate(oRetVal.getStartTime()).getTime();
			}

			if (!sStartTime) {
				oDate = Format.abapTimestampToDate(sEndTime);
				oDate.setTime(oDate.getTime() - iTimeSpan);
				if (oDate < oTotalStartDate) {
					oDate = oTotalStartDate;
					sEndTime = Format.dateToAbapTimestamp(new Date(oTotalStartDate + iTimeSpan));
				}
				sStartTime = Format.dateToAbapTimestamp(oDate);
			} else if (!sEndTime) {
				oDate = Format.abapTimestampToDate(sStartTime);
				oDate.setTime(oDate.getTime() + iTimeSpan);
				if (oDate > oTotalEndDate) {
					oDate = oTotalEndDate;
					sStartTime = Format.dateToAbapTimestamp(new Date(oTotalEndDate - iTimeSpan));
				}
				sEndTime = Format.dateToAbapTimestamp(oDate);
			} else {
				oDate = Format.abapTimestampToDate(sStartTime);
				if (oDate < oTotalStartDate) {
					sStartTime = this.getTotalHorizon().getStartTime();
				}
				oDate = Format.abapTimestampToDate(sEndTime);
				if (oDate > oTotalEndDate) {
					sEndTime = this.getTotalHorizon().getEndTime();
				}
			}
			oRetVal.setStartTime(sStartTime);
			oRetVal.setEndTime(sEndTime);
		}

		return oRetVal;
	};

	/**
	 * Creates an AixsTime instance to be used in Gantt Chart.
	 * If you build your own AxisTimeStrategy, you may need to implement this method and return your own AxisTime.
	 * 
	 * @param {sap.gantt.config.Locale} oLocale Locale configuration passed from GanttChart
	 * @public
	 */
	AxisTimeStrategyBase.prototype.createAxisTime = function (oLocale) {
		var oTimeLineOption = this.getTimeLineOption(),
			oVisibleHorizon = this.getVisibleHorizon(),
			oTotalHorizon = this.getTotalHorizon();

		if (!Utility.judgeTimeHorizonValidity(oVisibleHorizon, oTotalHorizon)){
			this.setProperty("visibleHorizon", oTotalHorizon, true);

			jQuery.sap.log.warning("Visible horizon is not in total horizon, so convert visible horizon to total horizon",
				null,
				"sap.gantt.axistime.AxisTimeStrategyBase.createAxisTime()");
		}

		var oHorizonStartTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getStartTime());
		var oHorizonEndTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getEndTime());
		var nHorizonTimeRange = oHorizonEndTime.valueOf() - oHorizonStartTime.valueOf();

		var nUnitTimeRange = jQuery.sap.getObject(oTimeLineOption.innerInterval.unit)
				.offset(oHorizonStartTime, oTimeLineOption.innerInterval.span).valueOf() - oHorizonStartTime.valueOf();

		var oAxisTime = new sap.gantt.misc.AxisTime(
			[oHorizonStartTime, oHorizonEndTime],
			[0, Math.ceil(nHorizonTimeRange * oTimeLineOption.innerInterval.range / nUnitTimeRange)],
			1, null, null,
			oLocale, this);

		this.setAggregation("_axisTime", oAxisTime, true);
	};

	/**
	 * In the shape drawing process, Gantt Chart calls this function to get the latest information about Stop and AxisTime. 
	 * Moreover, when you run this function, AxisTimeStrategy updates the GanttChart status such as the zoom rate of AxisTime.
	 * 
	 * @param {int} nClientWidth Width of the visible area in Gantt Chart
	 * @return {object} The status plain object about AxisTimeStrategy. The return contains two properties <code>zoomLevelChanged</code> and <code>axisTimeChanged</code>.
	 * @public
	 */
	AxisTimeStrategyBase.prototype.syncContext = function (nClientWidth) {
		var oRetVal = {
				zoomLevelChanged : false,
				axisTimeChanged : false
			};
		return oRetVal;
	};

	/**
	 * This is the delegate function of the zoom control event, such as the zoom in or zoom out event.
	 * You must implement your zoom level change logic.
	 * @param {object} oStopInfo Zoom stop information, which contains the parameters <code>key</code> and <code>text</code>.
	 * @public
	 */
	AxisTimeStrategyBase.prototype.updateStopInfo = function (oStopInfo) {
		return null;
	};

	AxisTimeStrategyBase.prototype.setTotalHorizon = function (oTotalHorizon, bSuppressInvalidate) {
		if (typeof bSuppressInvalidate === "undefined") {
			bSuppressInvalidate = true;
		}
		this.setProperty("totalHorizon", oTotalHorizon, bSuppressInvalidate);
		return this;
	};

	/**
	 * Gets the time label formatter for Gantt Chart to draw the top row in the timeline.
	 * 
	 * @return {sap.ui.core.format.DateFormat} Date formatter
	 * @public
	 */
	AxisTimeStrategyBase.prototype.getUpperRowFormatter = function () {
		var oTimeLineOption = this.getTimeLineOption();
		var oLargeInterval = oTimeLineOption.largeInterval;
		var oFormatter;
		if (oLargeInterval.relativeTime){
			var oTotalHorizonStartTime = Format.abapTimestampToDate(this.getTotalHorizon().getStartTime());
			oFormatter = new RelativeTimeFormatter(oTotalHorizonStartTime, oLargeInterval.unit, oLargeInterval.relativeTimePrefix);
		} else {
			var oCalendarType = this.getCalendarType(),
			oCoreLocale = this.getLocale() ? this.getLocale() :
				new Locale(sap.ui.getCore().getConfiguration().getLanguage().toLowerCase());

			oFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({
				format: oLargeInterval.format,
				pattern: oLargeInterval.pattern,
				style: oLargeInterval.style,
				calendarType: oTimeLineOption.calendarType || oCalendarType
			}, oLargeInterval.locale ? new Locale(oLargeInterval.locale) : oCoreLocale);
		}

		return oFormatter;
	};

	/**
	 * Gets the time label formatter for Gantt Chart to draw the lower row in the timeline.
	 * 
	 * @return {sap.ui.core.format.DateFormat} Date formatter
	 * @public
	 */
	AxisTimeStrategyBase.prototype.getLowerRowFormatter = function () {
		var oTimeLineOption = this.getTimeLineOption();
		var oSmallInterval = oTimeLineOption.smallInterval;
		var oFormatter;
		if (oSmallInterval.relativeTime){
			var oTotalHorizonStartTime = Format.abapTimestampToDate(this.getTotalHorizon().getStartTime());
			oFormatter = new RelativeTimeFormatter(oTotalHorizonStartTime, oSmallInterval.unit, oSmallInterval.relativeTimePrefix);
		} else {
			var oCalendarType = this.getCalendarType(),
			oCoreLocale = this.getLocale() ? this.getLocale() :
				new Locale(sap.ui.getCore().getConfiguration().getLanguage().toLowerCase());

			oFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({
				format: oSmallInterval.format,
				pattern: oSmallInterval.pattern,
				style: oSmallInterval.style,
				calendarType: oCalendarType
			}, oSmallInterval.locale ? new Locale(oSmallInterval.locale) : oCoreLocale);
		}
		return oFormatter;
	};

	/**
	 * Checks whether the current level is hour sensitive
	 * @private
	 */
	AxisTimeStrategyBase.prototype.isLowerRowTickHourSensitive = function () {
		var oTimeLineOption = this.getTimeLineOption();
		var sUnit = oTimeLineOption.innerInterval.unit;
		var sSpan = oTimeLineOption.innerInterval.span;

		var oStartTime = Format.getTimeStampFormatter().parse("20000101000000");
		var oEndTime = jQuery.sap.getObject(sUnit).offset(oStartTime, sSpan);

		return (oEndTime.getTime() - oStartTime.getTime()) <= 60 * 60 * 1000; //if span is equal or less than 1h
	};

	/**
	 * Gets the AxiaTime instance in AxisTimeStrategy
	 * @private
	 */
	AxisTimeStrategyBase.prototype.getAxisTime = function () {
		return this.getAggregation("_axisTime");
	};

	/**
	 * Fire the redraw request to Gantt Chart
	 * @private
	 */
	AxisTimeStrategyBase.prototype.fireRedrawRequest = function (bForceUpdated, sReasonCode, oValueBeforeChange) {
		this.fireEvent("_redrawRequest", {forceUpdate: bForceUpdated, reasonCode: sReasonCode, valueBeforeChange: oValueBeforeChange});
	};
	
	/**
	 * Update the Gantt visible width
	 * @private
	 */
	AxisTimeStrategyBase.prototype.updateGanttVisibleWidth = function (nWidth) {
		this._nGanttVisibleWidth = nWidth;
	};

	/**
	 * Get the Gantt visible width
	 * @private
	 */
	AxisTimeStrategyBase.prototype.getGanttVisibleWidth = function () {
		return this._nGanttVisibleWidth;
	};

	/**
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.calZoomScale = function (sUnit, iSpan, iRange) {
		// get granularity objects
		var oStart = Format.getTimeStampFormatter().parse("20000101000000");
		// calculate base rate scale
		var oEnd = jQuery.sap.getObject(sUnit).offset(oStart, iSpan);
		return this.calZoomScaleByDate(oStart, oEnd, iRange);
	};
	
	/**
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.calZoomScaleByDate = function (oStart, oEnd, iRange) {
		return (oEnd.valueOf() - oStart.valueOf()) / iRange;
	};
	
	/**
	 * @protected
	 * @returns {boolean} whether this._oZoom.base is generated
	 */
	AxisTimeStrategyBase.prototype.calZoomBase = function () {
		var oBaseTimeLineOption = this.getTimeLineOption() || this.getFinestTimeLineOption();

		if (oBaseTimeLineOption) {
			var fScale = this.calZoomScale(
					oBaseTimeLineOption.innerInterval.unit,
					oBaseTimeLineOption.innerInterval.span,
					oBaseTimeLineOption.innerInterval.range
			);

			this._oZoom = {
					base: {
						timeLineOption: oBaseTimeLineOption,
						rate: 1,
						scale: fScale
					}
				};
			return true;
		}
		return false;
	};

	/**
	 * update visible horizon for mouse wheel zoom according to configured zoom type
	 * @param {Date} oTimeAtZoomCenter the time where mouse pointer located during the zooming
	 * @param {number} iScrollDelta the range of each mouse wheel scrolling
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.updateVisibleHorizonOnMouseWheelZoom = function(oTimeAtZoomCenter, iScrollDelta) {
		//determin zoomin or zoomout
		var bZoomIn = iScrollDelta < 0;
		var iZoomFactor =  Math.round(Math.abs(iScrollDelta) / 100);

		var sMouseWheelZoomType = this.getMouseWheelZoomType();
		if (sMouseWheelZoomType === sap.gantt.MouseWheelZoomType.FineGranular) {
			this.updateVisibleHorizonOnFineGranularMouseWheelZoom(oTimeAtZoomCenter, bZoomIn, iZoomFactor);
		} else if (sMouseWheelZoomType === sap.gantt.MouseWheelZoomType.Stepwise) {
			this.updateVisibleHorizonOnStepWiseMouseWheelZoom(oTimeAtZoomCenter, bZoomIn, iZoomFactor);
		}
	};

	/**
	 * Calculate and set new visible horizon for fine granular mouse wheel zoom
	 * @param {Date} oTimeAtZoomCenter the time where mouse pointer located during the zooming
	 * @param {boolean} bZoomIn true if zoom in, false if zoom out
	 * @param {number} iZoomFactor the scroll range of each mouse wheel scrolling / 100, serves as a coefficient when calculating zoom delta
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.updateVisibleHorizonOnFineGranularMouseWheelZoom = function(oTimeAtZoomCenter, bZoomIn, iZoomFactor) {
		//change one time unit of the innerInterval for each zoom
		var oVisibleHorizon = this.getVisibleHorizon();
		var oVisibleHorizonStartTime = Format.abapTimestampToDate(oVisibleHorizon.getStartTime());

		var oTimeLineOption = this.getTimeLineOption();
		var nZoomDelta = jQuery.sap.getObject(oTimeLineOption.innerInterval.unit)
							.offset(oVisibleHorizonStartTime, iZoomFactor * oTimeLineOption.innerInterval.span).getTime() - oVisibleHorizonStartTime.getTime();

		var iZoomIncrementSign = bZoomIn ? -1 : 1;
		var oNewVisibleHorizon = this.calVisibleHorizonByDelta(iZoomIncrementSign * nZoomDelta, oTimeAtZoomCenter);

		this.setVisibleHorizon(oNewVisibleHorizon);
	};

	/**
	 * Calculate and set new visible horizon for step-wise mouse wheel zoom
	 * @param {Date} oTimeAtZoomCenter the time where mouse pointer located during the zooming
	 * @param {boolean} bZoomIn true if zoom in, false if zoom out
	 * @param {number} iZoomFactor the scroll range of each mouse wheel scrolling / 100, serves as a coefficient when calculating zoom delta
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.updateVisibleHorizonOnStepWiseMouseWheelZoom = function(oTimeAtZoomCenter, bZoomIn, iZoomFactor) {
		var iZoomIncrementSign = bZoomIn ? -1 : 1;
		var iZoomLevel = this.getZoomLevel() - iZoomIncrementSign * iZoomFactor;
		if (iZoomLevel > -1 && iZoomLevel < this.getZoomLevels()) {
			if (this._aZoomRate[iZoomLevel] && !Utility.floatEqual(this._aZoomRate[iZoomLevel], this._oZoom.rate)) {
				var nZoomRate = this._aZoomRate[iZoomLevel];
				var oNewVisibleHorizon = this.calVisibleHorizonByRate(nZoomRate, oTimeAtZoomCenter);
				this.setVisibleHorizon(oNewVisibleHorizon);
			}
		}
	};

	/**
	 * Calculate new visible horizon according to specified zoom center and zoom rate
	 * @param {number} nZoomRate the rate for new visible horizon
	 * @param {Date} [oAnchorTime] optional the time where the zoom center located, if not provided, take the center of current visible horizon as the zoom center
	 * @return {object} a new visible horizon
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.calVisibleHorizonByRate = function(nZoomRate, oAnchorTime) {
		var nTimeSpanDelta = 0;
		if (this._oZoom && this._oZoom.base && this._oZoom.base.scale !== undefined && this._nGanttVisibleWidth !== undefined){
			var oVisibleHorizonStartTime = Format.abapTimestampToDate(this.getVisibleHorizon().getStartTime());
			var oVisibleHorizonEndTime = Format.abapTimestampToDate(this.getVisibleHorizon().getEndTime());

			var nCurrentTimeSpan = oVisibleHorizonEndTime.getTime() - oVisibleHorizonStartTime.getTime();
			//Calculate new time span according to specified zoom rate
			var nScale = this._oZoom.base.scale/nZoomRate;
			var nNewTimeSpan = this._nGanttVisibleWidth * nScale;
			nTimeSpanDelta = nNewTimeSpan - nCurrentTimeSpan;
		}
		return this.calVisibleHorizonByDelta(nTimeSpanDelta, oAnchorTime);
	};

	/**
	 * Calculate new visible horizon according to specified zoom center and zoom delta
	 * @param {number} nTimeSpanDelta the delta of visible horizon time range in MS unit
	 * @param {Date} [oAnchorTime] optional the time where the zoom center located, if not provided, take the center of current visible horizon as the zoom center
	 * @return {object} a new visible horizon
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.calVisibleHorizonByDelta = function(nTimeSpanDelta, oAnchorTime) {
		var oVisibleHorizon = this.getVisibleHorizon();
		if (nTimeSpanDelta !== 0) {
			//calculate the time in ms for current visible horizon start time and time at zoom center
			var nVisibleHorizonStartTimeInMs = Format.abapTimestampToDate(oVisibleHorizon.getStartTime()).getTime();
			var nVisibleHorizonEndTimeInMs = Format.abapTimestampToDate(oVisibleHorizon.getEndTime()).getTime();
			var nVisibleTimeRange = nVisibleHorizonEndTimeInMs - nVisibleHorizonStartTimeInMs;

			var nAnchorTimeInMs = 0;
			var nLeftTimeDeltaPercentage, nRightTimeDeltaPercentage;

			var nTotalHorizonStartTimeInMs = Format.abapTimestampToDate(this.getTotalHorizon().getStartTime()).getTime();
			var nTotalHorizonEndTimeInMs = Format.abapTimestampToDate(this.getTotalHorizon().getEndTime()).getTime();
			//if start time or end time is at the boundary and try to do zoom out
			if (nTimeSpanDelta > 0 && nVisibleHorizonStartTimeInMs <= nTotalHorizonStartTimeInMs) {
				nLeftTimeDeltaPercentage = 0;
				nRightTimeDeltaPercentage = 1;
				nAnchorTimeInMs = nTotalHorizonStartTimeInMs;
			} else if (nTimeSpanDelta > 0 && nVisibleHorizonEndTimeInMs >= nTotalHorizonEndTimeInMs) {
				nLeftTimeDeltaPercentage = 1;
				nRightTimeDeltaPercentage = 0;
				nAnchorTimeInMs = nTotalHorizonEndTimeInMs;
			} else {
				//if no anchor time is provided, take the middle time of current visible horizon as the anchor
				if (!oAnchorTime) {
					nAnchorTimeInMs = nVisibleHorizonStartTimeInMs +  nVisibleTimeRange / 2;
				} else {
					nAnchorTimeInMs = oAnchorTime.getTime();
				}
				//calculate the percentage of the left and right side according to the zoom center
				nLeftTimeDeltaPercentage = (nAnchorTimeInMs - nVisibleHorizonStartTimeInMs) / nVisibleTimeRange;
				nRightTimeDeltaPercentage = 1 - nLeftTimeDeltaPercentage;
			}

			//new time in ms for visible horizon
			var nNewVisibleTimeRange = nVisibleTimeRange + nTimeSpanDelta;
			var nNewStartTimeInMs = nAnchorTimeInMs - nLeftTimeDeltaPercentage * nNewVisibleTimeRange;
			var nNewEndTimeInMs = nAnchorTimeInMs + nRightTimeDeltaPercentage * nNewVisibleTimeRange;

			var oNewStartTime, oNewEndTime;
			if (nNewStartTimeInMs <= nTotalHorizonStartTimeInMs) {
				oNewStartTime = this.getTotalHorizon().getStartTime();
			} else {
				oNewStartTime = new Date();
				oNewStartTime.setTime(nNewStartTimeInMs);
			}
			if (nNewEndTimeInMs >= nTotalHorizonEndTimeInMs) {
				oNewEndTime = this.getTotalHorizon().getEndTime();
			} else {
				oNewEndTime = new Date();
				oNewEndTime.setTime(nNewEndTimeInMs);
			}

			return new TimeHorizon({
				startTime: oNewStartTime,
				endTime: oNewEndTime
			});
		}
		return oVisibleHorizon;
	};
	
	/**
	 * Calculates the middle date of the given two dates.
	 * @param {date} dStart the start date
	 * @param {date} dEnd the end date
	 * @returns {date} the middle date
	 * @protected
	 */
	AxisTimeStrategyBase.prototype.calMiddleDate = function(dStart, dEnd) {
		return new Date(dStart.getTime() + (dEnd.getTime() - dStart.getTime()) / 2);
	};
	return AxisTimeStrategyBase;
}, true);
}; // end of sap/gantt/axistime/AxisTimeStrategyBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.axistime.ProportionZoomStrategy') ) {
sap.gantt.axistime.ProportionTimeLineOptions = sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY;

jQuery.sap.declare('sap.gantt.axistime.ProportionZoomStrategy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/axistime/ProportionZoomStrategy",[
	"./AxisTimeStrategyBase","sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Locale", "sap/ui/core/Core",
	"sap/gantt/config/TimeHorizon"
], function (AxisTimeStrategyBase, Utility, Format, Locale, Core, TimeHorizon) {
	"use strict";

	/**
	 * Creates and initializes a ProportionZoomStrategy.
	 *
	 * @param {string} [sId] ID for the new AxisTimeStrategy, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new AxisTimeStrategy
	 *
	 * @class
	 * ProportionZoomStrategy
	 *
	 * <p>
	 * A zoom strategy that provides the proportional change ability. Proportional change
	 * ensures that Gantt Chart dynamically adjusts the zoom rate to be the best fit
	 * for rendering shapes in the chart area. This strategy cannot be used by the Select control.
	 * </p>
	 *
	 * @extends sap.gantt.axistime.AxisTimeStrategyBase
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.axistime.ProportionZoomStrategy
	 */
	var ProportionZoomStrategy = AxisTimeStrategyBase.extend("sap.gantt.axistime.ProportionZoomStrategy");

	ProportionZoomStrategy.prototype.init = function () {
		this._aZoomRate = new Array(10);
		this.setProperty("coarsestTimeLineOption", sap.gantt.axistime.ProportionTimeLineOptions["1month"], true);
		this.setProperty("finestTimeLineOption", sap.gantt.axistime.ProportionTimeLineOptions["5min"], true);
		this.setProperty("timeLineOptions", sap.gantt.axistime.ProportionTimeLineOptions, true);
		this.setProperty("timeLineOption", sap.gantt.axistime.ProportionTimeLineOptions["4day"], true);
		this.setProperty("zoomLevel", 0, true);
		this.setProperty("zoomLevels", 10, true);
	};

	ProportionZoomStrategy.prototype.setVisibleHorizon = function (oVisibleHorizon) {
		if (!oVisibleHorizon.getStartTime() && !oVisibleHorizon.getEndTime()){
			this._bHorizontalScroll = false;
		} else if (!oVisibleHorizon.getStartTime() || !oVisibleHorizon.getEndTime()){
			this._bHorizontalScroll = true;
		} else {
			this._bHorizontalScroll = false;
		}
		//redraw will call syncContent(), in there rate will be updated
		var oLastVisibleHorizon = this.getVisibleHorizon();
		AxisTimeStrategyBase.prototype.setVisibleHorizon.apply(this, arguments);
		this.fireRedrawRequest(false, "visibleHorizonUpdated", oLastVisibleHorizon);
		return this;
	};

	ProportionZoomStrategy.prototype.setTotalHorizon = function (oTotalHorizon) {
		AxisTimeStrategyBase.prototype.setTotalHorizon.apply(this, arguments);
		if (this.getAxisTime()){
			this.calZoomBase();
			this.createAxisTime(this.getAxisTime().getLocale());
			this.fireRedrawRequest(true, "totalHorizonUpdated");
		}
		return this;
	};

	/*
	 * @protected
	 */
	ProportionZoomStrategy.prototype.updateStopInfo = function (oStopInfo) {
		this.setZoomLevel(oStopInfo.index);
		return this;
	};

	ProportionZoomStrategy.prototype.setZoomLevel = function (iZoomLevel) {
		if (iZoomLevel >= 0 && iZoomLevel !== this.getZoomLevel()) {
			this.setProperty("zoomLevel", iZoomLevel, true);

			if (this._aZoomRate[iZoomLevel]) {
				var oNewVisibleHorizon = this.calVisibleHorizonByRate(this._aZoomRate[iZoomLevel]);
				this.setVisibleHorizon(oNewVisibleHorizon);
			}
		}
		return this;
	};

	ProportionZoomStrategy.prototype.setZoomLevels = function (iZoomLevels) {
		this.setProperty("zoomLevels", iZoomLevels, true);

		if (iZoomLevels > 1) {
			this._aZoomRate = new Array(iZoomLevels);
		} else {
			this._aZoomRate = [1];
		}
		this._updateZoomRateOnStops();
		return this;
	};

	ProportionZoomStrategy.prototype.syncContext = function (nClientWidth) {
		var bAxisTimeNeedChange = false,
			bZoomBoundaryConditionChange = false;

		var oRetVal = {
			zoomLevelChanged : false,
			axisTimeChanged : false
		};

		var iOriginalVisibleWidth = this.getGanttVisibleWidth();
		if ((iOriginalVisibleWidth !== undefined) && (nClientWidth !== iOriginalVisibleWidth)){ //in situation move Gantt resize
			//when Gantt resize, we can't change zoom rate
			this._updateVisibleHorizon(nClientWidth);
		}

		var oDeterminedByStrategy = this._determineZoomBoundaryByStrategy();
		var oDeterminedByChartWidth = this._determineZoomRateByChartWidth(nClientWidth);

		if (oDeterminedByChartWidth) {

			this.updateGanttVisibleWidth(nClientWidth);

			var fLastMinRate = this._oZoom.minRate || -1;
			this._oZoom.minRate = Math.max(oDeterminedByStrategy.minRate,oDeterminedByChartWidth.minRate) ||
				oDeterminedByStrategy.minRate;

			var fLastMaxRate = this._oZoom.maxRate || -1;
			this._oZoom.maxRate = oDeterminedByStrategy.maxRate;

			var fLastRate = this._oZoom.rate || -1;

			bZoomBoundaryConditionChange =  
				!Utility.floatEqual(fLastMinRate, this._oZoom.minRate) ||
				!Utility.floatEqual(fLastMaxRate, this._oZoom.maxRate);

			if (bZoomBoundaryConditionChange) {
				this._updateZoomRateOnStops();
				this._adjustRateByBoundary();
			}

			if (oDeterminedByChartWidth.suitableRate && !this._bHorizontalScroll) {
				this._oZoom.rate = oDeterminedByChartWidth.suitableRate;
				this._adjustRateByBoundary();
			}

			var iLastZoomLevel = this.getZoomLevel(),
				iZoomLevel = this._calcZoomLevelFromZoomRate(this._oZoom.rate);

			var bZoomLevelChanged = iLastZoomLevel !== iZoomLevel;
			if (bZoomLevelChanged) {
				//this method is mainly called in init period of TimeAxisStrategy, 
				//and init this._oZoom.rate always not equal this._aZoomRate[iZoomLevel], so if call setZoomLevel(iZoomLevel)
				//will cause wrong suitable rate.
				this.setProperty("zoomLevel", iZoomLevel, true);
			}
			oRetVal.zoomLevelChanged = bZoomLevelChanged;

			bAxisTimeNeedChange = !Utility.floatEqual(fLastRate, this._oZoom.rate);
			if (bAxisTimeNeedChange) {
				this.getAxisTime().setZoomRate(this._oZoom.rate);
				this._updateTimeLineOption();
			}
			oRetVal.axisTimeChanged = bAxisTimeNeedChange;
		}

		return oRetVal;
	};

	ProportionZoomStrategy.prototype._updateVisibleHorizon = function (nClientWidth) {
		var oOriginalVisibleHorizon = this.getVisibleHorizon();
		var iOriginalVisibleWidth = this.getGanttVisibleWidth();
		var oCurrentVisibleHorizon = Utility.calculateHorizonByWidth(oOriginalVisibleHorizon, iOriginalVisibleWidth, nClientWidth);
		AxisTimeStrategyBase.prototype.setVisibleHorizon.call(this, oCurrentVisibleHorizon);
	};

	ProportionZoomStrategy.prototype._adjustRateByBoundary = function () {
		if(this._oZoom.rate) {
			this._oZoom.rate = Math.max(this._oZoom.rate, this._oZoom.minRate);
			this._oZoom.rate = Math.min(this._oZoom.rate, this._oZoom.maxRate);
		}
	};

	ProportionZoomStrategy.prototype._updateZoomRateOnStops = function () {
		if (this._oZoom && this._oZoom.maxRate && this._oZoom.minRate) {
			var fMaxRate = this._oZoom.maxRate,
				fMinRate = this._oZoom.minRate,
				iSteps = this.getZoomLevels();

			this._oLog = {};
			this._oLog.fMax = Math.log(fMaxRate);
			this._oLog.fMin = Math.log(fMinRate);
			this._oLog.fStep = (this._oLog.fMax - this._oLog.fMin) / iSteps;
			
			if (iSteps > 0) {
				for (var i = 0; i < iSteps; i++) {
					this._aZoomRate[i] = Math.pow(Math.E, this._oLog.fMin + this._oLog.fStep * i);
				}
			} else {
				this._aZoomRate[0] = 1;
			}
		}
	};

	ProportionZoomStrategy.prototype._calcZoomLevelFromZoomRate = function (fRate) {
		if (this._oZoom && this._oLog && fRate) {
			return Math.round((Math.log(fRate) - this._oLog.fMin) / this._oLog.fStep);
		}
	};

	ProportionZoomStrategy.prototype._determineZoomBoundaryByStrategy = function () {
		if (this._oZoom && this._oZoom.base) {
			var oCoarsestTimeLineOption = this.getCoarsestTimeLineOption(),
				oFinestTimeLineOption = this.getFinestTimeLineOption();
			return {
					minRate:  this._oZoom.base.scale / this.calZoomScale(
							oCoarsestTimeLineOption.innerInterval.unit,
							oCoarsestTimeLineOption.innerInterval.span,
							oCoarsestTimeLineOption.innerInterval.range
					),
					maxRate: this._oZoom.base.scale / this.calZoomScale(
							oFinestTimeLineOption.innerInterval.unit,
							oFinestTimeLineOption.innerInterval.span,
							oFinestTimeLineOption.innerInterval.range * 4
					)
			};
		}
	};

	ProportionZoomStrategy.prototype._determineZoomRateByChartWidth = function (nClientWidth) {
		var oTotalHorizon = this.getTotalHorizon(),
			 oVisibleHorizon = this.getVisibleHorizon(),
			 oRetVal = {};

		if (!this._oZoom) {
			return null;
		}

		if (!Utility.judgeTimeHorizonValidity(oVisibleHorizon, oTotalHorizon)){
			this.setProperty("visibleHorizon", oTotalHorizon, true);
			jQuery.sap.log.warning("Visible horizon is not in total horizon, so convert visible horizon to total horizon",
				null,
				"sap.gantt.axistime.ProportionZoomStrategy.syncContext()");
		}

		// calculate min zoom rate by time horizon against svg container width
		if (oTotalHorizon) {
			var fMinScale = this.calZoomScaleByDate(
				Format.abapTimestampToDate(oTotalHorizon.getStartTime()),
				Format.abapTimestampToDate(oTotalHorizon.getEndTime()),
				nClientWidth);
			oRetVal.minRate =  this._oZoom.base.scale / fMinScale;
		}
		// calculate suitable zoom rate by init horizon against svg container width
		if (oVisibleHorizon && oVisibleHorizon.getStartTime() && oVisibleHorizon.getEndTime()) {
			var fSuitableScale = this.calZoomScaleByDate(
				Format.abapTimestampToDate(oVisibleHorizon.getStartTime()),
				Format.abapTimestampToDate(oVisibleHorizon.getEndTime()),
				nClientWidth);
			oRetVal.suitableRate = this._oZoom.base.scale / fSuitableScale;
		}
		return oRetVal;
	};

	ProportionZoomStrategy.prototype._updateTimeLineOption = function(){
		var startTime = Format.getTimeStampFormatter().parse("20000101000000"),
		iCurrentTickKey,
		i,
		oTimeLineOptions = this.getTimeLineOptions(),
		oTimeLineOption = this.getProperty("timeLineOption");

		var oAxisTime = this.getAxisTime();
		if (oAxisTime) {
			var start = oAxisTime.timeToView(startTime);

			for (i in oTimeLineOptions) {
				var interval = oTimeLineOptions[i].innerInterval;
				var end = oAxisTime.timeToView(jQuery.sap.getObject(interval.unit).offset(startTime, interval.span));
				var r = Math.abs(Math.ceil((end - start)));
				if (r >= interval.range) {
					iCurrentTickKey = i;
					break;
				}
			}
			oTimeLineOption = iCurrentTickKey ? oTimeLineOptions[iCurrentTickKey] : oTimeLineOptions[i];
			this.setProperty("timeLineOption", oTimeLineOption, true);
		}
	};

	ProportionZoomStrategy.prototype.onSetTimeZoomRate = function(fTimeZoomRate){
		var oNewVisibleHorizon = this.calVisibleHorizonByRate(fTimeZoomRate);
		this.setVisibleHorizon(oNewVisibleHorizon);
	};

	return ProportionZoomStrategy;
}, true);
}; // end of sap/gantt/axistime/ProportionZoomStrategy.js
if ( !jQuery.sap.isDeclared('sap.gantt.axistime.StepwiseZoomStrategy') ) {
jQuery.sap.declare('sap.gantt.axistime.StepwiseZoomStrategy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/axistime/StepwiseZoomStrategy",["./AxisTimeStrategyBase", "sap/gantt/misc/Format"], function (AxisTimeStrategyBase, Format) {
	"use strict";
	
	var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
	sap.gantt.axistime.StepwiseTimeLineOptions = {
		"FiveMinutes": {
			text: oRb.getText("SWZS_FIVE_MINUTES"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				range: 32 //2rem
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				//first label e.g.: 9AM / July 12, 2016; others e.g.: "10AM"
				pattern: "ha / MMMM dd, yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				//e.g. 00, 05, ...55
				pattern: "mm "
			}
		},
		"FifteenMinutes": {
			text: oRb.getText("SWZS_FIFTEEN_MINUTES"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				range: 48
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				//first label e.g.: 9AM / July 12, 2016; others e.g.: "10AM"
				pattern: "ha / MMMM dd, yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				pattern: "mm "
			}
		},
		"Hour": {
			text: oRb.getText("SWZS_HOUR"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				range: 48
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				//first label e.g. July 12, 2016; others e.g. July 13
				pattern: "MMMM dd, yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				pattern: "HH:mm "
			}
		},
		"SixHours": {
			text: oRb.getText("SWZS_SIX_HOURS"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				range: 64
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				//first label e.g. July 12, 2016; others e.g. July 13
				pattern: "MMMM dd, yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				pattern: "HH:mm "
			}
		},
		"DayDate": {
			text: oRb.getText("SWZS_DATE_1"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				range: 64
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				//first label e.g.: Jan 2015, Week 04; others e.g. Feb, Mar...
				pattern: "MMM yyyy, 'Week' ww  "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				//e.g. Mon 22, Tue 23
				pattern: sap.ui.getCore().getConfiguration().getRTL() ? "dd EEE " : "EEE dd "
			}
		},
		"Date": {
			text: oRb.getText("SWZS_DATE_2"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				range: 32
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				//first label e.g.: Jan 2015, Week 04; others e.g. Feb, Mar...
				pattern: "MMM yyyy, 'Week' ww  "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				pattern: "dd "
			}
		},
		"CWWeek": {
			text: oRb.getText("SWZS_WEEK_1"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				range: 56
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				//first label: Jan 2015, others: Feb, Mar...
				pattern: "MMM yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				//e.g. CW 01, CW 02...
				pattern: sap.ui.getCore().getConfiguration().getRTL() ? "'CW' ww  " : "'CW' ww  "
			}
		},
		"WeekOfYear": {
			text: oRb.getText("SWZS_WEEK_2"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				range: 32
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				//first label: Jan 2015, others: Feb, Mar...
				pattern: "MMM yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				//e.g. 01, 02..., 53
				pattern: "ww "
			}
		},
		"Month": {
			text: oRb.getText("SWZS_MONTH"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				range: 48
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.quarter,
				span: 1,
				pattern: "yyyy QQQ "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				pattern: "MMM "
			}
		},
		"Quarter": {
			text: oRb.getText("SWZS_QUARTER"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 3,
				range: 48
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				//first label: 2015, Q1, others Q2, Q3, Q4, 2016 Q1, Q2...
				pattern: "yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 3,
				pattern: "QQQ "
			}
		},
		"Year": {
			text: oRb.getText("SWZS_YEAR"),
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				range: 48
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 5,
				pattern: "yyyy "
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				pattern: "yyyy "
			}
		}
	};
	
	var StepwiseTimeLineOptions = sap.gantt.axistime.StepwiseTimeLineOptions;
	
	/**
	 * Constructor for a new StepwiseZoomStrategy.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The class allows you to define a zoom strategy whose time line options are stepwise, i.e. the width of each time line option
	 * is pre-defined and won't be changed during zooming.
	 * @extends sap.gantt.axistime.AxisTimeStrategyBase
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.axistime.StepwiseZoomStrategy
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var StepwiseZoomStrategy = AxisTimeStrategyBase.extend("sap.gantt.axistime.StepwiseZoomStrategy", {
		metadata: {
			library : "sap.gantt"
		}
	});
	
	/**
	 * Initializes member variables which are needed later on.
	 *
	 * @private
	 */
	StepwiseZoomStrategy.prototype.init = function() {
		//set default values for the properties from parent class
		var oTimeLineOption = StepwiseTimeLineOptions.DayDate;
		this.setProperty("timeLineOption", oTimeLineOption, true);
		this.setProperty("timeLineOptions", StepwiseTimeLineOptions, true);
		this.setProperty("zoomLevel", this._getIndexOfTimeLineOption(oTimeLineOption, StepwiseTimeLineOptions), true);
		this.setProperty("mouseWheelZoomType", sap.gantt.MouseWheelZoomType.None, true);
		//set unused properties to null
		this.setProperty("finestTimeLineOption", null, true);
		this.setProperty("coarsestTimeLineOption", null, true);
		this.setProperty("zoomLevels", 0, true);
		
		//private variables
		this._oTotalHorizonBeforeExtension = null;
	};
	
	StepwiseZoomStrategy.prototype.applySettings = function () {
		AxisTimeStrategyBase.prototype.applySettings.apply(this, arguments);
		this._updateZoomRateArray();
		return this;
	};

	StepwiseZoomStrategy.prototype.createAxisTime = function (oLocale) {
		AxisTimeStrategyBase.prototype.createAxisTime.apply(this, arguments);
		this.setZoomLevel(this._getIndexOfTimeLineOption(this.getTimeLineOption(), StepwiseTimeLineOptions));
		this._Locale = oLocale;
		return this;
	};

	/**
	 * Sets the visible horizon of StepwiseZoomStrategy.
	 * 
	 * @param {object} oVisibleHorizon visible horizon of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setVisibleHorizon = function (oVisibleHorizon) {
		//redraw will call syncContent(), in there rate will be updated
		AxisTimeStrategyBase.prototype.setVisibleHorizon.apply(this, arguments);
		this.fireRedrawRequest(true, "visibleHorizonUpdated");
		return this;
	};
	
	/**
	 * Sets the total horizon of StepwiseZoomStrategy. The time range and view range of this.getAxisTime() will also be updated, the rate will remain unchanged.
	 * 
	 * @param {object} oTotalHorizon total horizon of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setTotalHorizon = function (oTotalHorizon) {
		//redraw will call syncContent(), in there rate will be updated
		AxisTimeStrategyBase.prototype.setTotalHorizon.apply(this, arguments);
		var oAxisTime = this.getAxisTime();
		if (oAxisTime) {
			//update time range
			oAxisTime.setTimeRange([Format.getTimeStampFormatter().parse(oTotalHorizon.getStartTime()),
			                                 Format.getTimeStampFormatter().parse(oTotalHorizon.getEndTime())]);
			var oHorizonStartTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getStartTime());
			var oHorizonEndTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getEndTime());
			var nHorizonTimeRange = oHorizonEndTime.valueOf() - oHorizonStartTime.valueOf();
			var oTimeLineOption = this.getTimeLineOption();
			var nUnitTimeRange = jQuery.sap.getObject(oTimeLineOption.innerInterval.unit)
									.offset(oHorizonStartTime, oTimeLineOption.innerInterval.span).valueOf() - oHorizonStartTime.valueOf();
			//update view range
			oAxisTime.setViewRange([0, Math.ceil((nHorizonTimeRange * oTimeLineOption.innerInterval.range / nUnitTimeRange) / this._aZoomRate[this.getZoomLevel()])]);
		}
		return this;
	};
	
	/**
	 * Don't use this method to set zoomLevels because its value is determined by timeLineOptions.
	 * The account of entities in timeLineOptions is zoomLevels.
	 * 
	 * @param {int} iZoomLevels zoom levels of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setZoomLevels = function (iZoomLevels) {
		return this;
	};
	
	/**
	 * Sets the zoom level of StepwiseZoomStrategy.
	 * This method also does below things:
	 * 1. Reverts the total horizon to the one before auto extension.
	 * 2. Extends total horizon if it cannot fulfill the whole visible area according to the current zoom level.
	 * 3. Updates visible horizon and still keeps the same middle date.
	 * 
	 * @param {int} iZoomLevel zoom level of StepwiseZoomStrategy
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setZoomLevel = function (iZoomLevel) {
		if (iZoomLevel >= 0) {
			this.setProperty("zoomLevel", iZoomLevel, true);

			this.setProperty("timeLineOption", this._getTimeLineOptionByIndex(iZoomLevel), true);

			if (this._aZoomRate[iZoomLevel]) {
				var oAxisTime = this.getAxisTime();
				if (oAxisTime) {
					oAxisTime.setZoomRate(this._aZoomRate[iZoomLevel]);
				}
				
				var oTotalHorizon = this.getTotalHorizon();
				if (this._oTotalHorizonBeforeExtension) {
						//Revert total horizon to the one before extension.
						this.setTotalHorizon(new sap.gantt.config.TimeHorizon({
							startTime:this._oTotalHorizonBeforeExtension.getStartTime(),
							endTime: this._oTotalHorizonBeforeExtension.getEndTime()
						}));
				}
				var oNewVisibleHorizon = this._updateVisibleHorizon(this.getGanttVisibleWidth());
				this.setVisibleHorizon(oNewVisibleHorizon);
			}
		}
		return this;
	};
	
	/**
	 * Don't use this method to set coarsestTimeLineOption because its value is determined by timeLineOptions.
	 * The last entry of timeLineOptions is coarsestTimeLineOption.
	 * 
	 * @param {object} oTimeLineOption coarsest time line option of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setCoarsestTimeLineOption = function (oTimeLineOption) {
		return this;
	};
	
	/**
	 * Don't use this method to set finestTimeLineOption because its value is determined by timeLineOptions.
	 * The first entry of timeLineOptions is finestTimeLineOption.
	 * 
	 * @param {object} oTimeLineOption finest time line option of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setFinestTimeLineOption = function (oTimeLineOption) {
		return this;
	};
	
	/**
	 * Sets the time line options of StepwiseZoomStrategy.
	 * 
	 * @param {object} oTimeLineOptions time line options of StepwiseZoomStrategy
	 * @public
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.setTimeLineOptions = function (oTimeLineOptions) {
		AxisTimeStrategyBase.prototype.setTimeLineOptions.apply(this, arguments);
		//TODO qunit test: the value of zoomLevels, coarsestTimeLineOption and finestTimeLineOption should be changed after calling this method
		this._updateZoomRateArray();
		return this;
	};

	StepwiseZoomStrategy.prototype._updateVisibleHorizon = function (nClientWidth) {
		var iWidthOfTotalHorizon = this._getWidthOfTotalHorizon();
		if (iWidthOfTotalHorizon < this.getGanttVisibleWidth()) {
			//extend the total horizon to fulfill the visible area
			this._extendTotalHorizon(this.getGanttVisibleWidth());
		} else if (iWidthOfTotalHorizon < nClientWidth ){
			this._extendTotalHorizon(nClientWidth);
		} else {
			this._extendTotalHorizon (iWidthOfTotalHorizon);
		}
		
		//Calculate the new visible horizon and still keep the same middle date.
		var oVisibleHorizon = this.getVisibleHorizon();
		var dMiddleOfVisibleHorizon = this.calMiddleDate(Format.getTimeStampFormatter().parse(oVisibleHorizon.getStartTime()),
				Format.getTimeStampFormatter().parse(oVisibleHorizon.getEndTime()));
		var oNewVisibleHorizon = this.calVisibleHorizonByRate(this._aZoomRate[this.getZoomLevel()], dMiddleOfVisibleHorizon);
		//this.setVisibleHorizon(oNewVisibleHorizon);
		AxisTimeStrategyBase.prototype.setVisibleHorizon.call(this, oNewVisibleHorizon);
		return oNewVisibleHorizon;
	};

	StepwiseZoomStrategy.prototype.syncContext = function (nClientWidth) {
		var iOriginalVisibleWidth = this.getGanttVisibleWidth();
		if (nClientWidth !== iOriginalVisibleWidth){ //in situation move Gantt resize
			//when Gantt resize, we can't change zoom rate
			this._updateVisibleHorizon(nClientWidth);
		}
		this.updateGanttVisibleWidth(nClientWidth);


		var oRetVal = {
				zoomLevelChanged : true,
				axisTimeChanged : true
			};
		
		return oRetVal;
	};
	
	/**
	 * @private
	 */
	StepwiseZoomStrategy.prototype._updateZoomRateArray = function () {
		if (this._oZoom) {
			var oTimeLineOptions = this.getTimeLineOptions();

			if (oTimeLineOptions) {
				var i = 0;
				this._aZoomRate = [];
				for (var j in oTimeLineOptions) {
					this._aZoomRate[i] = this._oZoom.base.scale / this.calZoomScale(
							oTimeLineOptions[j].innerInterval.unit,
							oTimeLineOptions[j].innerInterval.span,
							oTimeLineOptions[j].innerInterval.range
					);
					i++;
				}
			} else {
				this._aZoomRate[0] = 1;
			}
			
		}
	};
	
	/**
	 * This method does below things:
	 * 1. Sets time line option according to the stop info object.
	 * 2. Sets zoom level according to the stop info object. The setter of zoom level does some additional things.
	 * 
	 * @param {object} oStopInfo Zoom stop information, which contains the parameters <code>key</code> and <code>text</code>.
	 * @protected
	 * @returns {sap.gantt.axistime.StepwiseZoomStrategy} for chaining
	 */
	StepwiseZoomStrategy.prototype.updateStopInfo = function (oStopInfo) {
		this.setProperty("timeLineOption", this.getTimeLineOptions()[oStopInfo.selectedItem.getKey()], true);
		this.setZoomLevel(oStopInfo.index);
				
		return this;
	};
	
	/**
	 * Returns index of the given time line option from given time line options or this.timeLineOptions.
	 * 
	 * @param {object} oTimeLineOption time line option object
	 * @param {object} oTimeLineOptions time line options
	 * @private
	 * @returns {int} index of the given time line option from given time line options or this.timeLineOptions
	 */
	StepwiseZoomStrategy.prototype._getIndexOfTimeLineOption = function (oTimeLineOption, oTimeLineOptions) {
		var iIndex = -1, oOptions = oTimeLineOptions;
		if (!oOptions) {
			oOptions = this.getTimeLineOptions();
		}
		for (var i in oOptions) {
			iIndex++;
			if (oTimeLineOption == oOptions[i]) {
				return iIndex;
			}
		}
		
		return -1;
	};
	
	/**
	 * Returns time line option by the given index.
	 * 
	 * @param {int} iIndex index of time line option
	 * @private
	 * @returns {object} the time line option from this.timeLineOptions
	 */
	StepwiseZoomStrategy.prototype._getTimeLineOptionByIndex = function (iIndex) {
		var oTimeLineOptions = this.getTimeLineOptions();
		var iCounter = 0;
		for (var i in oTimeLineOptions) {
			if (iCounter === iIndex) {
				return oTimeLineOptions[i];
			}
			iCounter++;
		}
		
		return null;
	};
	
	/**
	 * @private
	 * @returns {int} width of the total horizon
	 */
	StepwiseZoomStrategy.prototype._getWidthOfTotalHorizon = function(){
		var oTotalHorizon = this.getTotalHorizon();
		var startTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getStartTime());
		var endTime = Format.getTimeStampFormatter().parse(oTotalHorizon.getEndTime());
		var oAxisTime = this.getAxisTime();
		var start = oAxisTime.timeToView(startTime);
		var end = oAxisTime.timeToView(endTime);
		return Math.abs(end - start);
	};
	
	/**
	 * @param {int} nClientWidth the width of the visible area
	 * @private
	 */
	StepwiseZoomStrategy.prototype._extendTotalHorizon = function(nClientWidth){
		var oTotalHorizon = this.getTotalHorizon();
		var oVisibleHorizon = this.getVisibleHorizon();
		if (!this._oTotalHorizonBeforeExtension) {
			this._oTotalHorizonBeforeExtension = new sap.gantt.config.TimeHorizon({
				startTime: oTotalHorizon.getStartTime(),
				endTime: oTotalHorizon.getEndTime()
			});
		}
		var startTime = Format.getTimeStampFormatter().parse(oVisibleHorizon.getStartTime());
		var endTime = Format.getTimeStampFormatter().parse(oVisibleHorizon.getEndTime());
		var middleTime = this.calMiddleDate(startTime, endTime);
		var oTimeLineOption = this.getTimeLineOption();
		var oTimeUnit = jQuery.sap.getObject(oTimeLineOption.innerInterval.unit);
		var oAxisTime = this.getAxisTime();
		var iStart = oAxisTime.timeToView(startTime);
		var iEnd = oAxisTime.timeToView(endTime);
		var iSubtraction = 1;
		//iteratively extend the startTime and endTime from the middle of visible horizon
		while (Math.abs(iEnd - iStart) < nClientWidth) {
			startTime = oTimeUnit.offset(middleTime, -iSubtraction);
			endTime = oTimeUnit.offset(middleTime, iSubtraction);
			iStart = oAxisTime.timeToView(startTime);
			iEnd = oAxisTime.timeToView(endTime);
			iSubtraction++;
		}
		
		//update the startTime and endTime of total horizon
		oTotalHorizon.setStartTime(Format.dateToAbapTimestamp(startTime));
		oTotalHorizon.setEndTime(Format.dateToAbapTimestamp(endTime));
		this.setTotalHorizon(oTotalHorizon);
	};
	
	return StepwiseZoomStrategy;
}, true);
}; // end of sap/gantt/axistime/StepwiseZoomStrategy.js
if ( !jQuery.sap.isDeclared('sap.gantt.config.SettingGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.config.SettingGroup'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/config/SettingGroup",[
	"./ToolbarGroup", "./SettingItem"
], function (ToolbarGroup, SettingItem) {
	"use strict";
	
	/**
	 * Creates and initializes a new setting group.
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * The SettingGroup control allows you to specify the number of setting items to display in the Setting window.
	 * @extends sap.gantt.config.ToolbarGroup
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.config.SettingGroup
	 */
	var SettingGroup = ToolbarGroup.extend("sap.gantt.config.SettingGroup", /** @lends sap.gantt.config.SettingGroup.prototype */ {
		library : "sap.gantt",
		metadata: {
			properties: {
				/**
				 * Association to the setting item. See {@link sap.gantt.config.SettingItem}
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.SettingItem[]</code>. Otherwise some properties you set may not function properly.
				 */
				items: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS}
			}
		}
	});

	return SettingGroup;
}, /* bExport= */ true);

}; // end of sap/gantt/config/SettingGroup.js
if ( !jQuery.sap.isDeclared('sap.gantt.control.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.control.Toolbar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarPriority'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexDirection'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexJustifyContent'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.m.ViewSettingsDialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.ViewSettingsCustomTab'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
jQuery.sap.require('sap.m.Slider'); // unlisted dependency retained
jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained
sap.ui.define("sap/gantt/control/Toolbar",[
	"sap/ui/core/Control", "sap/ui/core/Core", "sap/m/OverflowToolbar", "sap/m/OverflowToolbarLayoutData", "sap/m/OverflowToolbarPriority", "sap/m/ToolbarSpacer", "sap/m/FlexBox", "sap/m/FlexDirection", "sap/m/FlexJustifyContent",
	"sap/m/Button", "sap/m/ButtonType", "sap/m/SegmentedButton", "sap/m/Select", 
	"sap/ui/core/Item", "sap/m/ViewSettingsDialog", "sap/m/ViewSettingsCustomTab", "sap/m/PlacementType",
	"sap/m/CheckBox", "sap/ui/core/Orientation", "./AssociateContainer", "sap/gantt/legend/LegendContainer", "sap/gantt/misc/Utility", "sap/m/Slider", "sap/m/Popover"
], function (Control, Core, OverflowToolbar, OverflowToolbarLayoutData, OverflowToolbarPriority, ToolbarSpacer, FlexBox, FlexDirection, FlexJustifyContent,
		Button, ButtonType, SegmentedButton, Select, CoreItem, ViewSettingsDialog, ViewSettingsCustomTab, PlacementType, CheckBox,
		Orientation, AssociateContainer, LegendContainer, Utility, Slider, Popover) {
	"use strict";

	var Toolbar = Control.extend("sap.gantt.control.Toolbar", {
		metadata : {
			properties : {
				width : {type : "CSSSize", defaultValue: "100%"},
				height : {type : "CSSSize", defaultValue: "100%"},
				type: {type: "string", defaultValue: sap.gantt.control.ToolbarType.Global},
				sourceId:{type: "string"},
				zoomLevel:{type: "int", defaultValue: 0},
				enableTimeScrollSync: {type: "boolean", defaultValue: true},
				enableCursorLine: {type: "boolean", defaultValue: true},
				enableNowLine: {type: "boolean", defaultValue: true},
				enableVerticalLine: {type: "boolean", defaultValue: true},
				/**
				 * Switch to show and hide adhoc lines representing milestones and events along the time axis
				 */
				enableAdhocLine: {type: "boolean", defaultValue: true},
				/*
				 * Configuration property.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Mode[]</code>. Otherwise some properties you set may not function properly.
				 */
				modes: {
					type: "object[]",
					defaultValue: [sap.gantt.config.DEFAULT_MODE]
				},
				mode: {
					type: "string",
					defaultValue: sap.gantt.config.DEFAULT_MODE_KEY
				},
				/*
				 * Configuration property.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarScheme[]</code>. Otherwise some properties you set may not function properly.
				 */
				toolbarSchemes: {
					type: "object[]",
					defaultValue: [
						sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME,
						sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME,
						sap.gantt.config.EMPTY_TOOLBAR_SCHEME
					]
				},
				/*
				 * Configuration property.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Hierarchy[]</code>. Otherwise some properties you set may not function properly.
				 */
				hierarchies: {
					type: "object[]", 
					defaultValue: [sap.gantt.config.DEFAULT_HIERARCHY]
				},
				/*
				 * Configuration property.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ContainerLayout[]</code>. Otherwise some properties you set may not function properly.
				 */
				containerLayouts: {
					type: "object[]",
					defaultValue: [
						sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT,
						sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT
					]
				}
			},
			aggregations : {
				legend: {type: "sap.ui.core.Control", multiple: false, visibility: "public"},
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public", singularName: "customToolbarItem"},
				_toolbar : {type: "sap.m.OverflowToolbar", multiple: false, visibility: "hidden"}
			},
			events: {
				sourceChange: {
					parameters: {
						id: {type: "string"}
					}
				},
				layoutChange: {
					parameters: {
						id: {type: "string"},
						value: {type: "string"}
					}
				},
				expandChartChange: {
					parameters: {
						action: {type: "string"},
						expandedChartSchemes: {type: "[]"}
					}
				},
				expandTreeChange: {
					parameters: {
						action: {type: "string"}
					}
				},
				zoomStopChange: {
					parameters:{
						index: {type : "int"},
						selectedItem: {type: "sap.ui.core.Item"}
					}
				},
				settingsChange: {
					parameters: {
						id: {type: "string"},
						value: {type: "boolean"}
					}
				},
				modeChange: {
					parameters: {
						mode: {type: "string"}
					}
				}
			}
		}
	});
	
	// shrinkable class name
	Toolbar.ToolbarItemPosition = {
		Left: "Left",
		Right: "Right"
	};

	Toolbar.prototype.init = function() {
		this._oToolbar = new OverflowToolbar({
			width: "auto",
			design: sap.m.ToolbarDesign.Auto
		});
		this.setAggregation("_toolbar", this._oToolbar, true);

		/*
		 * The instances of custom toolbar items are hold by aCustomItems[]
		 * These instances are aggregations of sap.m.Toolbar,
		 * It help us render these buttons and take care the overflow.
		 */
		this._bClearCustomItems = true;
		this._resetToolbarInfo();


		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;

		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;

		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;

		this._oContainerLayoutConfigMap = {};
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT;
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT;

		this._oZoomSlider = null;
		this._oSelect = null;

		// iLiveChangeTimer is used to accumulate zoomRate change event in order to reduce shapes drawing cycle
		this._iLiveChangeTimer = -1;

		this._aTimers = [];
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");

	};

	Toolbar.prototype._resetToolbarInfo = function(){
		this._oItemConfiguration = {
			Left: [],
			Right: []
		};

		this._oAllItems = {
			Left: [],
			Right: []
		};

		/*
		 * When framework invoke method to update managed object's property, like: setLegacyDateFormat()
		 * Gantt chart Tool bar shouldn't clear _aCustomItems which were generated by aggregation binding factory function. 
		 * We need it to recover buttons in resetAllCompositeControl.
		 * Another situation is that we switch to a hierarchy with same button scheme.
		 * Model check update and do nothing, which means proxy won't generate button instances.
		 * So we also need keep Custom tool bar items.
		 */
		if (this._bClearCustomItems) {
			this._aCustomItems = [];
			this._iCustomItemInsertIndex = -1;
		}
	};

	/*
	 * This method happens after init run. It receives config from constructor.
	 * If it's a binding, the super method would resolve binding, and the right
	 * timing to access properties is after super call and before returning.
	 */
	Toolbar.prototype.applySettings = function (mSettings, oScope){
		if (this.getSourceId() && this.getType()) {
			this._resetAllCompositeControls();
		}

		var oRetVal = Control.prototype.applySettings.apply(this, arguments);
		return oRetVal;
	};

	Toolbar.prototype.onAfterRendering = function() {
		if (this._oVHButton && jQuery("#" + this._oVHButton.getId())[0]) {
			jQuery("#" + this._oVHButton.getId()).attr("aria-label", this._oRb.getText("TLTP_SWITCH_GANTTCHART"));
		}
	};

	Toolbar.prototype.setLegend = function (oLegendContainer){
		this.setAggregation("legend", oLegendContainer);

		if (!this._oLegendPop) {
			this._oLegendPop = new Popover({
				placement: PlacementType.Bottom,
				showArrow: false,
				showHeader: false
			});
		}

		if (oLegendContainer) {
			this._oLegendPop.removeAllContent();
			this._oLegendPop.addContent(oLegendContainer);
			this._oLegendPop.setOffsetX(this._calcOffsetForLegendPopover());
		}
	};

	Toolbar.prototype.updateZoomLevel = function (iZoomLevel) {
		if (iZoomLevel >= 0) {
			if (this._oZoomSlider) {
				this._oZoomSlider.setValue(iZoomLevel);
			}
			if (this._oSelect) {
				this._oSelect.setSelectedItem(this._oSelect.getItems()[iZoomLevel]);
			}
			this.setZoomLevel(iZoomLevel);
		}
	};

	Toolbar.prototype.setZoomLevel = function (iZoomLevel, bInvalidate) {
		this.setProperty("zoomLevel", iZoomLevel, bInvalidate);

		if (this._oToolbarScheme && !isNaN(iZoomLevel) && this._oZoomInButton && this._oZoomOutButton && this._oToolbarScheme.getTimeZoom()){
			var iMax = this._oToolbarScheme.getTimeZoom().getStepCountOfSlider() - 1,
				iMin = 0;

			if (iZoomLevel === iMax) {
				this._oZoomInButton.setEnabled(false);
				this._oZoomOutButton.setEnabled(true);
			} else if (iZoomLevel === iMin) {
				this._oZoomInButton.setEnabled(true);
				this._oZoomOutButton.setEnabled(false);
			} else {
				this._oZoomInButton.setEnabled(true);
				this._oZoomOutButton.setEnabled(true);
			}
		}
	};

	Toolbar.prototype.setMode = function(sMode) {
		this.setProperty("mode", sMode);
		//update mode button value, when the toolbar is empty, then there is no _oModeSegmentButton.
		if (this._oModeSegmentButton) {
			this._oModeSegmentButton.setSelectedButton(this._oModeButtonMap[sMode]);
		}
		return this;
	};

	Toolbar.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies, true);
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setContainerLayouts = function (aContainerLayouts) {
		this.setProperty("containerLayouts", aContainerLayouts, true);
		this._oContainerLayoutConfigMap = {};
		if (aContainerLayouts) {
			for (var i = 0; i < aContainerLayouts.length; i++) {
				this._oContainerLayoutConfigMap[aContainerLayouts[i].getKey()] = aContainerLayouts[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes, true);
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};

	Toolbar.prototype.setToolbarDesign = function (sToolbarDesign) {
		this._oToolbar.setDesign(sToolbarDesign);
		return this;
	};
	Toolbar.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes, true);
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setSourceId = function (sSourceId) {
		this.setProperty("sourceId", sSourceId, true);
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.setType = function (sType) {
		this.setProperty("type", sType, true);
		this._resetAllCompositeControls();
		return this;
	};

	Toolbar.prototype.addCustomToolbarItem = function (oCustomToolbarItem) {
		/*
		 * _iCustomItemInsertIndex represent the position of previous control in toolbar
		 * Start from 0, -1 means no other items found
		 */
		if (this._iCustomItemInsertIndex == -1) {
			// put the item at first
			// and move the index cursor to next
			this._oToolbar.insertContent(oCustomToolbarItem, 0);
			this._iCustomItemInsertIndex++;

		} else {
			this._oToolbar.insertContent(oCustomToolbarItem, this._iCustomItemInsertIndex + 1);
			this._iCustomItemInsertIndex++;
		}
		this._aCustomItems.push(oCustomToolbarItem);
		return this;
	};

	Toolbar.prototype.insertCustomToolbarItem = function (oCustomToolbarItem, iIndex) {

		var iMaxLength = this._aCustomItems.length;
		if (iIndex >= iMaxLength) {
			iIndex = iMaxLength;
		}

		if (this._iCustomItemInsertIndex === -1) {
			this._oToolbar.insertContent(oCustomToolbarItem, 0);
			this._aCustomItems.push(oCustomToolbarItem);
		} else {
			//this._iCustomItemInsertIndex - this._aCustomItems.length + 1 is the start position of the custom item
			this._oToolbar.insertContent(oCustomToolbarItem, this._iCustomItemInsertIndex - this._aCustomItems.length + 1 + iIndex);
			this._aCustomItems.splice(iIndex, 0, oCustomToolbarItem);
		}
		this._iCustomItemInsertIndex++;
		return this;
	};

	Toolbar.prototype.removeCustomToolbarItem = function (vCustomToolbarItem) {
		if (this._aCustomItems.length === 0) {
			return this._aCustomItems;
		}
		if ((typeof vCustomToolbarItem) === "number") {
			var iCustomItemCount = this._aCustomItems.length;
			var iRemoveCustomIndex = vCustomToolbarItem > iCustomItemCount ? iCustomItemCount : vCustomToolbarItem;
			this._oToolbar.removeContent(this._iCustomItemInsertIndex - iCustomItemCount + iRemoveCustomIndex + 1);
			this._iCustomItemInsertIndex--;
			return this._aCustomItems.splice(iRemoveCustomIndex, 1);
		} else if (vCustomToolbarItem) {
			this._oToolbar.removeContent(vCustomToolbarItem);
			this._iCustomItemInsertIndex--;
			return this._aCustomItems.splice(jQuery.inArray(vCustomToolbarItem, this._aCustomItems), 1);
		}
	};

	Toolbar.prototype.getCustomToolbarItems = function () {
		return this._aCustomItems.slice(0);
	};

	Toolbar.prototype.destroyCustomToolbarItems = function () {
		var aContents = this.removeAllCustomToolbarItems();
		aContents.forEach(function(oContent){
			oContent.destroy();
		});
		return aContents;
	};

	Toolbar.prototype.removeAllCustomToolbarItems = function () {
		var aRemovedItems = [];
		for (var iIndex = 0; iIndex < this._aCustomItems.length; iIndex++) {
			aRemovedItems.push(this._oToolbar.removeContent(this._aCustomItems[iIndex]));
		}
		this._iCustomItemInsertIndex = this._iCustomItemInsertIndex - this._aCustomItems.length;
		this._aCustomItems.splice(0, this._aCustomItems.length);
		return aRemovedItems;
	};

	Toolbar.prototype._resetAllCompositeControls = function() {
		// determine this._sToolbarSchemeKey, this._sInitMode and this._oToolbarScheme
		this._determineToolbarSchemeConfig(this.getSourceId());
		/*
		 * Why we destroy controls here?
		 * One control/button's content changed, other controls may also need updated.
		 */
		this._destroyCompositeControls();
		if (!this._sToolbarSchemeKey) {
			return;
		}
		// sort group config into this._oItemConfiguration
		this._resolvePositions();

		var iIndex,
			oContent,
			sLeft = Toolbar.ToolbarItemPosition.Left,
			sRight = Toolbar.ToolbarItemPosition.Right;
		var aLeftItemsConfig = this._oItemConfiguration[sLeft];
		for (iIndex = 0; iIndex < aLeftItemsConfig.length; iIndex++) {
			if (aLeftItemsConfig[iIndex]) {
				// the index might come consecutive
				this._createCompositeControl(sLeft, iIndex, aLeftItemsConfig[iIndex]);
			}
		}

		//reverse order
		var aRightItemsConfig = this._oItemConfiguration[sRight];
		for (iIndex = aRightItemsConfig.length - 1; iIndex >= 0; iIndex--) {
			if (aRightItemsConfig[iIndex]) {
				this._createCompositeControl(sRight, iIndex, aRightItemsConfig[iIndex]);
			}
		}

		//Recover buttons to overflow toolbar.
		var fnAddToolbarContent = function (oContent) {
			if (jQuery.isArray(oContent)) {
				for (var m = 0; m < oContent.length; m++) {
					this._oToolbar.addContent(oContent[m]);
				}
			} else if (oContent) {
				this._oToolbar.addContent(oContent);
			}
		};

		// add left items
		for (iIndex = 0; iIndex < this._oAllItems[sLeft].length; iIndex++) {
			oContent = this._oAllItems[sLeft][iIndex];
			fnAddToolbarContent.call(this, oContent);
		}
		// add spacer
		if (this._oAllItems[sLeft].length !== 0 || this._oAllItems[sRight].length !== 0) {
			this._oToolbar.addContent(new ToolbarSpacer());
		}
		// add right items
		for (iIndex = 0; iIndex < this._oAllItems[sRight].length; iIndex++) {
			oContent = this._oAllItems[sRight][iIndex];
			fnAddToolbarContent.call(this, oContent);
		}
	};

	Toolbar.prototype.getAllToolbarItems = function () {
		return this._oToolbar.getContent();
	};

	Toolbar.prototype._determineToolbarSchemeConfig = function (sSourceId) {
		this._sToolbarSchemeKey = null;
		// Determine toolbarSchemeId
		if (this.getType() === sap.gantt.control.ToolbarType.Global && this._oContainerLayoutConfigMap[sSourceId]) {
			this._sToolbarSchemeKey = this._oContainerLayoutConfigMap[sSourceId].getToolbarSchemeKey();
			this._sInitMode = this.getMode() != sap.gantt.config.DEFAULT_MODE_KEY ? this.getMode() : this._oContainerLayoutConfigMap[sSourceId].getActiveModeKey();
		} else if (this.getType() === sap.gantt.control.ToolbarType.Local && this._oHierarchyConfigMap[sSourceId]) {
			this._sToolbarSchemeKey = this._oHierarchyConfigMap[sSourceId].getToolbarSchemeKey();
			this._sInitMode = this.getMode() != sap.gantt.config.DEFAULT_MODE_KEY ? this.getMode() : this._oHierarchyConfigMap[sSourceId].getActiveModeKey();
		}

		// Determine tool bar scheme configuration.
		if (this._oToolbarScheme == this._oToolbarSchemeConfigMap[this._sToolbarSchemeKey]) {
			this._bClearCustomItems = false;
		} else {
			this._oToolbarScheme = this._oToolbarSchemeConfigMap[this._sToolbarSchemeKey];
			this._bClearCustomItems =true;
		}

		if (this._oToolbarScheme && this._oToolbarScheme.getProperty("toolbarDesign")) {
			this.setToolbarDesign(this._oToolbarScheme.getProperty("toolbarDesign"));
		}
	};

	Toolbar.prototype._destroyCompositeControls = function() {
		var aContents = this._oToolbar.removeAllContent();
		this._resetToolbarInfo();
	};

	Toolbar.prototype._resolvePositions = function() {
		if (this._oToolbarScheme) {
			jQuery.each(this._oToolbarScheme.getMetadata().getAllProperties(), function (sProperty) {
				if (sProperty !== "key" && sProperty !== "toolbarDesign") {
					var oProperty = this._oToolbarScheme.getProperty(sProperty);
					if (oProperty) {
						var oPosition = this._parsePosition(oProperty.getPosition());
						this._oItemConfiguration[oPosition.position][oPosition.idx] = $.extend({}, {groupId: sProperty}, oProperty);
					}
				}
			}.bind(this));
			
			var oSchemeConfiguration = this._oItemConfiguration;
			var aAlignments = Object.keys(oSchemeConfiguration);
			aAlignments.forEach(function(sAlignmentKey) {
				var aSchemes = oSchemeConfiguration[sAlignmentKey],
					newSchemes = [];
				
				var aSchemeSortedKeys = Object.keys(aSchemes).sort();
				aSchemeSortedKeys.forEach(function(sSchemeKey, aSelf) {
					newSchemes.push(aSchemes[sSchemeKey]);
				});
				
				oSchemeConfiguration[sAlignmentKey] = newSchemes;
			});
		}
		
	};

	Toolbar.prototype._parsePosition = function(sPosition) {
		return {
			position: sPosition.toUpperCase().substr(0, 1) === "L" ? Toolbar.ToolbarItemPosition.Left : Toolbar.ToolbarItemPosition.Right,
			idx: parseInt(sPosition.substr(1, sPosition.length - 1), 10)
		};
	};

	Toolbar.prototype._createCompositeControl = function(sPosition, iIndex, oGroupConfig) {
		var vControl;
		switch (oGroupConfig.groupId) {
			case "sourceSelect":
				vControl = this._genSourceSelectGroup(oGroupConfig);
				break;
			case "layout":
				vControl = this._genLayoutGroup(oGroupConfig);
				break;
			case "expandChart":
				vControl = this._genExpandChartGroup(oGroupConfig);
				break;
			case "expandTree":
				vControl = this._genExpandTreeGroup(oGroupConfig);
				break;
			case "customToolbarItems":
				vControl = this._genCustomToolbarItemGroup(sPosition, oGroupConfig);
				break;
			case "mode":
				vControl = this._genModeButtonGroup(oGroupConfig);
				break;
			case "timeZoom":
				vControl = this._genTimeZoomGroupControls(oGroupConfig);
				break;
			case "legend":
				vControl = this._genLegend(oGroupConfig);
				break;
			case "settings":
				vControl = this._genSettings(oGroupConfig);
				break;
			default:
				break;
		}
		if (vControl) {
			this._oAllItems[sPosition] = this._oAllItems[sPosition].concat(vControl);
		}
	};

	Toolbar.prototype._genSourceSelectGroup = function(oGroupConfig) {
		var sSourceId = this.getSourceId();
		// that is toolbar itself
		var that = this;
		var aSource;

		this._oSourceSelectBox = new Select({
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			width: "200px",
			change: function (oEvent) {
				var oItem = oEvent.getParameter("selectedItem");
				var oSourceConfig = oItem.oSourceConfig;
				that.fireSourceChange({
					id: oItem.getKey(),
					config: oSourceConfig
				});
			}
		});

		switch (this.getType()){
			case sap.gantt.control.ToolbarType.Global:
				aSource = this.getContainerLayouts();
				this._oSourceSelectBox.setTooltip(this._oRb.getText("TLTP_GLOBAL_HIERARCHY_RESOURCES"));
				break;
			case sap.gantt.control.ToolbarType.Local:
				aSource = this.getHierarchies();
				this._oSourceSelectBox.setTooltip(this._oRb.getText("TLTP_LOCAL_HIERARCHY_RESOURCES"));
				break;
			default:
				return null;
		}

		var oCoreItem;
		for (var iIndex = 0; iIndex < aSource.length; iIndex++) {
			oCoreItem = new CoreItem({
				key: aSource[iIndex].getKey(),
				text: aSource[iIndex].getText()
			});
			oCoreItem.oSourceConfig = aSource[iIndex];
			this._oSourceSelectBox.addItem(oCoreItem);

			if (oCoreItem.getKey() === sSourceId) {
				this._oSourceSelectBox.setSelectedItem(oCoreItem);
			}
		}

		return this._oSourceSelectBox;
	};

	Toolbar.prototype._genLayoutGroup = function(oGroupConfig) {
		if (this.getType === "LOCAL") {
			return null;
		}

		var that = this,
			aHierarchies = this.getHierarchies(),
			oCoreItem,
			i;

		// addGanttChart Select
		this._oAddGanttChartSelect = new Select({
			icon : "sap-icon://add",
			type: sap.m.SelectType.IconOnly,
			autoAdjustWidth: true,
			maxWidth: "50px",
			tooltip: this._oRb.getText("TLTP_ADD_GANTTCHART"),
			forceSelection: false,
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			change: function (oEvent) {
				if (oEvent.getParameter("selectedItem")) {
					var oGanttChartContainer = that.data("holder");
					if (oGanttChartContainer.getGanttCharts().length < oGanttChartContainer.getMaxNumOfGanttCharts()) {
						// Enable less gantt chart buuton when there is one or more gantt charts
						if (!that._oLessGanttChartSelect.getEnabled()){
							that._oLessGanttChartSelect.setEnabled(true);
							if (that._oVHButton) {
								that._oVHButton.setEnabled(true);
							}
						}
						if (oGanttChartContainer.getGanttCharts().length == oGanttChartContainer.getMaxNumOfGanttCharts() - 1){
							this.setEnabled(false);
						}
		
						that.fireLayoutChange({
							id: "add",
							value: {
								hierarchyKey: oEvent.getParameter("selectedItem").getKey(),
								hierarchyConfig: oEvent.getParameter("selectedItem").data("hierarchyConfig")
							}
						});
					} 
					if (oGanttChartContainer.getGanttCharts().length > oGanttChartContainer.getMaxNumOfGanttCharts()){
						this.setEnabled(false);
					}
				}
			}
		});
		// add items if exist
		if (aHierarchies && aHierarchies.length > 0) {
			for (i = 0; i < aHierarchies.length; i++) {
				oCoreItem = new CoreItem({
					text: aHierarchies[i].getText(),
					key: aHierarchies[i].getKey()
				});
				oCoreItem.data("hierarchyConfig", aHierarchies[i]);
				this._oAddGanttChartSelect.addItem(oCoreItem);
			}
		}

		// lessGanttChartSelect
		var bEnabled = this._oContainerLayoutConfigMap[this.getSourceId()].getGanttChartLayouts().length > 1 ? true : false;
		this._oLessGanttChartSelect = new Select({
			icon: "sap-icon://less",
			type: sap.m.SelectType.IconOnly,
			tooltip: this._oRb.getText("TLTP_REMOVE_GANTTCHART"),
			maxWidth: "50px",
			autoAdjustWidth: true,
			forceSelection: false,
			enabled: bEnabled,
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			change: function (oEvent) {
				if (oEvent.getParameter("selectedItem")) {
					var oGanttChartContainer = that.data("holder");
					if (oGanttChartContainer.getGanttCharts().length <= oGanttChartContainer.getMaxNumOfGanttCharts()) {
						if (!that._oAddGanttChartSelect.getEnabled()){
							that._oAddGanttChartSelect.setEnabled(true);
						}
					}
					that.fireLayoutChange({
						id: "less",
						value: {
							hierarchyKey: oEvent.getParameter("selectedItem").getKey(),
							hierarchyConfig: oEvent.getParameter("selectedItem").data("hierarchyConfig"),
							ganttChartIndex: oEvent.getParameter("selectedItem").data("ganttChartIndex")
						}
					});
					var oSelectedItem = oEvent.getSource().getSelectedItem();
					if (oSelectedItem) {
						oSelectedItem.setText("");
					}
					if (oGanttChartContainer.getGanttCharts().length == 1){
						this.setEnabled(false);
						if (that._oVHButton) {
							that._oVHButton.setEnabled(false);
						}
					}
				}
			}
		});
		this._oLessGanttChartSelect.addEventDelegate({
			onclick: this._fillLessGanttChartSelectItem
		}, this);

		// VH Layout Button
		var sIcon = this._oContainerLayoutConfigMap[this.getSourceId()].getOrientation() === Orientation.Vertical ?
				"sap-icon://resize-vertical" : "sap-icon://resize-horizontal";
		var sTooltip = this._oContainerLayoutConfigMap[this.getSourceId()].getOrientation() === Orientation.Vertical ?
				this._oRb.getText("TLTP_ARRANGE_GANTTCHART_VERTICALLY") : this._oRb.getText("TLTP_ARRANGE_GANTTCHART_HORIZONTALLY");
		this._oVHButton = new Button({
			icon: sIcon,
			tooltip: sTooltip,
			type: oGroupConfig.getButtonType(),
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			press: function (oEvent) {
				switch (this.getIcon()){
					case "sap-icon://resize-vertical":
						this.setIcon("sap-icon://resize-horizontal");
						this.setTooltip(that._oRb.getText("TLTP_ARRANGE_GANTTCHART_HORIZONTALLY"));
						that.fireLayoutChange({
							id: "orientation",
							value: Orientation.Horizontal
						});
						break;
					case "sap-icon://resize-horizontal":
						this.setIcon("sap-icon://resize-vertical");
						this.setTooltip(that._oRb.getText("TLTP_ARRANGE_GANTTCHART_VERTICALLY"));
						that.fireLayoutChange({
							id: "orientation",
							value: Orientation.Vertical
						});
						break;
					default:
						break;
				}
			}
		});

		// Segmented Button
		this._oLayoutButton = [this._oAddGanttChartSelect, this._oLessGanttChartSelect, this._oVHButton];

		return this._oLayoutButton;
	};
	
	Toolbar.prototype._fillLessGanttChartSelectItem = function () {
		var aGanttCharts = this.data("holder").getGanttCharts(),
			oItem;

		this._oLessGanttChartSelect.removeAllItems();
		if (aGanttCharts && aGanttCharts.length > 0) {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oItem = new CoreItem({
					text: this._oHierarchyConfigMap[aGanttCharts[i].getHierarchyKey()].getText(),
					key: aGanttCharts[i].getHierarchyKey()
				});
				oItem.data("hierarchyConfig",
						this._oHierarchyConfigMap[aGanttCharts[i].getHierarchyKey()]);
				oItem.data("ganttChartIndex", i);
				this._oLessGanttChartSelect.insertItem(oItem, i);
			}
		}
	};

	Toolbar.prototype._genExpandChartGroup = function (oGroupConfig) {
		this._aChartExpandButtons = [];

		var fnPressEventHanlder =  function(oEvent) {
			this.fireExpandChartChange({
				isExpand: oEvent.getSource().data("isExpand"),
				expandedChartSchemes: oEvent.getSource().data("chartSchemeKeys")
			});
		};

		var aExpandChartButtonConfig = oGroupConfig.getExpandCharts(),
			oButton;
		for (var i = 0; i < aExpandChartButtonConfig.length; i++) {
			var oConfig = aExpandChartButtonConfig[i];

			oButton = new Button({
				icon: oConfig.getIcon(),
				tooltip: oConfig.getTooltip(),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: fnPressEventHanlder.bind(this),
				type: oGroupConfig.getButtonType(),
				customData : [
					new sap.ui.core.CustomData({
						key : "isExpand",
						value : oConfig.getIsExpand()
					}),
					new sap.ui.core.CustomData({
						key : "chartSchemeKeys",
						value : oConfig.getChartSchemeKeys()
					})
				]
			});
			if (oGroupConfig.getShowArrowText()) {
				oButton.setText(oConfig.getIsExpand() ? "ꜜ" : "ꜛ");
				//"￬" : "￪",// "⬇" : "⬆",//"⤓" : "⤒",//"⇊" : "⇈",//"↓" : "↑", //"⇩" : "⇧"
			}
			this._aChartExpandButtons.push(oButton);
		}
		return this._aChartExpandButtons;
	};

	Toolbar.prototype._genCustomToolbarItemGroup = function (sPosition, oGroupConfig) {
		// Determine current insert index.
		if (this._iCustomItemInsertIndex === -1) {
			// Because the order had been sorted in resolvePosition()
			// the position for the custom tool bar item is right after the previous items.
			// If there is no item at all before custom items, set the cursor to -1
			// It's not only an index but also a flag to indicate the current situation.
			// Otherwise, the position is the end of the previous items.
			if (sPosition == Toolbar.ToolbarItemPosition.Left) {
				var iTotalBeforeLength = this._oAllItems[sPosition].length;
				this._iCustomItemInsertIndex = iTotalBeforeLength - 1;
			} else {
				var iTotalBeforeLength = this._oAllItems[Toolbar.ToolbarItemPosition.Left].length + 1 + this._oAllItems[sPosition].length;
				this._iCustomItemInsertIndex = iTotalBeforeLength - 1;
			}
		}
		return this._aCustomItems;
	};

	Toolbar.prototype._genExpandTreeGroup = function (oGroupConfig) {
		var that = this; // tool bar itself
		this._oTreeGroup = [new Button({
				icon: "sap-icon://expand",
				tooltip: this._oRb.getText("TLTP_EXPAND"),
				type: oGroupConfig.getButtonType(),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: function (oEvent) {
					that.fireExpandTreeChange({
						action: "expand"
					});
				}
			}), new Button({
				icon: "sap-icon://collapse",
				tooltip: this._oRb.getText("TLTP_COLLAPSE"),
				layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
				press: function (oEvent) {
					that.fireExpandTreeChange({
						action: "collapse"
					});
				}
			})];
		return this._oTreeGroup;
	};

	Toolbar.prototype._genModeButtonGroup = function (oGroupConfig) {
		var fnModeButtonGroupSelectHandler = function(oEvent) {
			var selected = oEvent.getParameter("button");
			this.fireModeChange({
				mode: selected.data("mode")
			});
		};
		this._oModeSegmentButton = new SegmentedButton({select: fnModeButtonGroupSelectHandler.bind(this)});
		this._oModeButtonMap = {};
		var fnJqueryeachFunction =  function (iIndex, sMode) {
			if (this._oModesConfigMap[sMode]) {
				var oButton = new Button({
					icon: this._oModesConfigMap[sMode].getIcon(),
					activeIcon: this._oModesConfigMap[sMode].getActiveIcon(),
					type: oGroupConfig.getButtonType(),
					tooltip: this._oModesConfigMap[sMode].getText(),
					layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
					customData : [
						new sap.ui.core.CustomData({
							key : "mode",
							value : sMode
						})
					]
				});
				this._oModeButtonMap[sMode] = oButton;
				this._oModeSegmentButton.addButton(oButton);
			}
		};
		jQuery.each(oGroupConfig.getModeKeys(), fnJqueryeachFunction.bind(this));
		if (this._sInitMode) {
			this._oModeSegmentButton.setSelectedButton(this._oModeButtonMap[this._sInitMode]);
		}
		return this._oModeSegmentButton;
	};

	Toolbar.prototype._genTimeZoomGroupControls = function (oGroupConfig) {
		var that = this;
		var sZoomControlType = oGroupConfig.getZoomControlType(),
			aRetVal = [],
			oSelect,
			oZoomSlider,
			oZoomInButton,
			oZoomOutButton;

		var oLayoutData = new OverflowToolbarLayoutData({
			priority: oGroupConfig.getOverflowPriority()
		});

		var fnFireZoomStopChange = function(iZoomLevel, oSelectedItem) {
			jQuery.sap.clearDelayedCall(this._iLiveChangeTimer);
			this._iLiveChangeTimer = -1;

			var iLastZoomLevel = this.getZoomLevel();
			this.setZoomLevel(iZoomLevel, true);

			if (iLastZoomLevel === iZoomLevel) {
				return ;
			}

			this.fireZoomStopChange({index: iZoomLevel, selectedItem: oSelectedItem});
			jQuery.sap.log.debug("Toolbar Zoom Stop index is changed, zoomLevel is: " + iZoomLevel);
		};

		if (sZoomControlType === sap.gantt.config.ZoomControlType.None){

			return aRetVal;
		} else if (sZoomControlType === sap.gantt.config.ZoomControlType.Select){
			var oSelectItems = [],
				aInfoOfSelectItems = this._oToolbarScheme.getTimeZoom().getInfoOfSelectItems();

			if (aInfoOfSelectItems.length > 0 ) {
				if (aInfoOfSelectItems[0] instanceof CoreItem) {
					oSelectItems = aInfoOfSelectItems;
				} else {
					for (var i = 0; i < aInfoOfSelectItems.length; i++){
						var oItem = new CoreItem({
							key: aInfoOfSelectItems[i].key,
							text: aInfoOfSelectItems[i].text
						});
						oSelectItems.push(oItem);
					}
				}
			}

			oSelect = new Select({
				items: oSelectItems,
				layoutData: oLayoutData,
				change: function (oEvent) {
					var oSelect = oEvent.getSource();
					var oSelectedItem = oSelect.getSelectedItem();
					var iSelectItemIndex = oSelect.indexOfItem(oSelectedItem);

					this._iLiveChangeTimer = jQuery.sap.delayedCall(200, that,
							fnFireZoomStopChange, [iSelectItemIndex, oSelectedItem]);
				}
			});

			this._oSelect = oSelect;
			aRetVal.push(oSelect);
		} else {
			var iStepCountOfSlider = this._oToolbarScheme.getTimeZoom().getStepCountOfSlider();
			
			// start: legacy logic to support deprecated property 'sliderStep' of container, to be removed when the property is removed
			if (this.data("holder") && this.data("holder").getSliderStep()) {
				iStepCountOfSlider = this.data("holder").getSliderStep();
			}
			// end
			
			if (sZoomControlType !== sap.gantt.config.ZoomControlType.ButtonsOnly){
				oZoomSlider = new Slider({
					width: "200px",
					layoutData: oLayoutData,
					max: iStepCountOfSlider - 1,
					value: this.getZoomLevel(),
					min: 0,
					step: 1,
					liveChange: function(oEvent) {
						var iSliderValue = parseInt(oEvent.getParameter("value"), 10);
						// Clear the previous accumulated event
						jQuery.sap.clearDelayedCall(this._iLiveChangeTimer);
						this._iLiveChangeTimer = jQuery.sap.delayedCall(200, this, fnFireZoomStopChange, [iSliderValue]);
					}.bind(this)
				});
			}

			if (sZoomControlType !== sap.gantt.config.ZoomControlType.SliderOnly) {
				var fnZoomButtonPressHandler = function(bZoomIn) {
					return function(oEvent){
						var iSliderStepChangeValue = parseInt(bZoomIn ? this._oZoomSlider.stepUp(1).getValue() :
							this._oZoomSlider.stepDown(1).getValue(), 10);

						this._iLiveChangeTimer = jQuery.sap.delayedCall(200, this,
								fnFireZoomStopChange, [iSliderStepChangeValue]);
					};
				};

				oZoomInButton = new sap.m.Button({
					icon: "sap-icon://zoom-in",
					type: oGroupConfig.getButtonType(),
					tooltip: this._oRb.getText("TLTP_SLIDER_ZOOM_IN"),
					layoutData: oLayoutData.clone(),
					press: fnZoomButtonPressHandler(true /**bZoomIn*/).bind(this)
				});

				oZoomOutButton = new Button({
					icon: "sap-icon://zoom-out",
					type: oGroupConfig.getButtonType(),
					tooltip: this._oRb.getText("TLTP_SLIDER_ZOOM_OUT"),
					layoutData: oLayoutData.clone(),
					press: fnZoomButtonPressHandler(false /**bZoomIn*/).bind(this)
				});
			}

			if (oZoomOutButton) {
				aRetVal.push(oZoomOutButton);
				this._oZoomOutButton = oZoomOutButton;
			}
			if (oZoomSlider) {
				aRetVal.push(oZoomSlider);
				this._oZoomSlider = oZoomSlider;
			}
			if (oZoomInButton) {
				aRetVal.push(oZoomInButton);
				this._oZoomInButton = oZoomInButton;
			}
		}

		return aRetVal;
	};

	Toolbar.prototype._genLegend = function (oGroupConfig) {
		if (!this._oLegendPop) {
			this._oLegendPop = new Popover({
				placement: PlacementType.Bottom,
				showArrow: false,
				showHeader: false
			});
		}

		if (this.getLegend()) {
			this._oLegendPop.removeAllContent();
			this._oLegendPop.addContent(this.getLegend());
		}

		this._oLegendButton = new Button({
			icon: "sap-icon://legend",
			type: oGroupConfig.getButtonType(),
			tooltip: this._oRb.getText("TLTP_SHOW_LEGEND"),
			layoutData: new OverflowToolbarLayoutData({
				priority: oGroupConfig.getOverflowPriority(),
				closeOverflowOnInteraction: false
			}),
			press: function (oEvent) {
				this._oLegendPop.setOffsetX(this._calcOffsetForLegendPopover());
				var oLegendPop = this._oLegendPop;
				if (oLegendPop.isOpen()){
					oLegendPop.close();
				} else {
					oLegendPop.openBy(this._oLegendButton);
				}
			}.bind(this)
		});
		return this._oLegendButton;
	};

	Toolbar.prototype._genSettings = function (oGroupConfig) {
		var aSettingGroupItems = oGroupConfig.getItems() || [];

		var that = this;

		var aAllSettingItems = aSettingGroupItems.map(function(oGroupItem){
			return new CheckBox({
				name: oGroupItem.getKey(),
				text: oGroupItem.getDisplayText(),
				tooltip: oGroupItem.getTooltip(),
				selected: oGroupItem.getChecked()
			}).addStyleClass("sapUiSettingBoxItem");
		});

		// Need set the old setting state on the toolbar instance for reference
		this._aOldSettingState = aAllSettingItems.map(function(oItem){
			return oItem.getSelected();
		});

		var fnRetoreOldState = function (aAllSettingItems) {
			for (var i = 0; i < aAllSettingItems.length; i++) {
				switch (aAllSettingItems[i].getName()) {
				case sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY:
					aAllSettingItems[i].setSelected(this.getEnableNowLine());
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY:
					aAllSettingItems[i].setSelected(this.getEnableCursorLine());
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY:
					aAllSettingItems[i].setSelected(this.getEnableVerticalLine());
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY:
					aAllSettingItems[i].setSelected(this.getEnableAdhocLine());
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY:
					aAllSettingItems[i].setSelected(this.getEnableTimeScrollSync());
					break;
				default:
					break;
				}
			}
		}.bind(this);

		this._oSettingsBox = new FlexBox({
			direction: FlexDirection.Column,
			items: aAllSettingItems
		}).addStyleClass("sapUiSettingBox");

		this._oSettingsDialog = new ViewSettingsDialog({
			title: this._oRb.getText("SETTINGS_DIALOG_TITLE"),
			customTabs: [new ViewSettingsCustomTab({content: this._oSettingsBox})],
			confirm: function() {
				var aSettingItems = /*that.aSharedSettingItemStatus ? 
						that.aSharedSettingItemStatus : */this._oSettingsBox.getItems();
				var parameters = [];
				for (var i = 0; i < aSettingItems.length; i++) {
					parameters.push({
						id: aSettingItems[i].getName(),
						value: aSettingItems[i].getSelected()
					});
					that._aOldSettingState[i] = aSettingItems[i].getSelected();
				}
				//store the setting status in toolbar to keep the data consistency when switching views
				//that.aSharedSettingItemStatus = aSettingItems;
				this.fireSettingsChange(parameters);
			}.bind(this),
			cancel: function() {
				// when cancel, the selected state should be restored when reopen
				fnRetoreOldState(aAllSettingItems);
			}
		});

		this._oSettingsButton = new Button({
			icon: "sap-icon://action-settings",
			type: oGroupConfig.getButtonType(),
			tooltip: this._oRb.getText("TLTP_CHANGE_SETTINGS"),
			layoutData: new OverflowToolbarLayoutData({priority: oGroupConfig.getOverflowPriority()}),
			press: function (oEvent) {
				this._oSettingsDialog.open();
			}.bind(this)
		});

		return this._oSettingsButton;
	};

	Toolbar.prototype.getToolbarSchemeKey = function () {
		return this._sToolbarSchemeKey;
	};
	
	Toolbar.prototype.setEnableNowLine = function(bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine, true);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY, bEnableNowLine);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableCursorLine = function(bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine, true);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY, bEnableCursorLine);
		}
		return this;
	};
	
	Toolbar.prototype.setEnableVerticalLine = function(bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine, true);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY, bEnableVerticalLine);
		}
		return this;
	};

	Toolbar.prototype.setEnableTimeScrollSync = function(bEnableTimeScrollSync) {
		this.setProperty("enableTimeScrollSync", bEnableTimeScrollSync, true);
		if (this._oSettingsBox && this._oSettingsBox.getItems().length > 0) {
			this._setSettingItemProperties(sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY, bEnableTimeScrollSync);
		}
		return this;
	};
	
	Toolbar.prototype._setSettingItemProperties = function(settingItemKey, settingItemStatus) {
		var settingItems = this._oSettingsBox.getItems();
		for (var i = 0; i < settingItems.length; i++) {
			if (settingItems[i].getName() === settingItemKey) {
				settingItems[i].setSelected(settingItemStatus);
				break;
			}	
		}
	};

	Toolbar.prototype.exit = function () {
		if (this._oLegendPop) {
			this._oLegendPop.destroy(false);
		}
		if (this._oSettingsPop) {
			this._oSettingsPop.destroy(false);
		}
	};
	
	Toolbar.prototype._calcOffsetForLegendPopover = function () {
		var iOffsetX = 0, iConstant = 65;
		var devicePxPerCssPx = 1;
		var zoom = 1;
		var devicePixelRatio = window.devicePixelRatio || 1;
		devicePixelRatio = Math.round(devicePixelRatio * 100) / 100;

		if (sap.ui.Device.browser.name === "ie") {
			zoom = Math.round((screen.deviceXDPI / screen.logicalXDPI) * 100) / 100;
		} else if (sap.ui.Device.browser.name === "cr") {
			zoom = Math.round((window.outerWidth / window.innerWidth) * 100) / 100;
		} else {
			zoom = devicePixelRatio;
		}
		if (zoom !== 1) {
			//for zoom ratio: 200%, 300%,.... and those less than 100%
			if (zoom < 1 || (zoom - 1) % 1 === 0) {
				iConstant += iConstant * (zoom - 1) * 0.1;
			} else {
				iConstant = 85;
			}
			devicePixelRatio = Math.round(devicePixelRatio * 10) / 10;
			if (zoom < 1) {
				devicePxPerCssPx = devicePixelRatio + Math.floor((1 - zoom) * 10) / 10;
			} else if (zoom <= 1.1) {
				devicePxPerCssPx = Math.round(zoom * 10) / 10 * devicePixelRatio;
			} else {
				devicePxPerCssPx = devicePixelRatio - Math.floor((zoom - 1.1) * 10) / 10;
			}
		}
		if (Core.getConfiguration().getRTL() === true) {
			iOffsetX = 140;
		} else {
			var aLegendContent = this._oLegendPop.getContent();
			if (aLegendContent && aLegendContent.length > 0) {
				var oLegend = sap.ui.getCore().byId(aLegendContent[0].getContent());
				iOffsetX = Math.round((iConstant - parseInt(oLegend.getWidth(), 10)) * devicePxPerCssPx);
			}
		}
		return iOffsetX;
	};

	Toolbar.prototype.getZoomLevels = function () {
		if (this._oToolbarScheme){
			var oTimeZoomGroupConfig = this._oToolbarScheme.getTimeZoom();
			if (oTimeZoomGroupConfig){
				switch (oTimeZoomGroupConfig.getZoomControlType()) {
					case sap.gantt.config.ZoomControlType.Select:
						return oTimeZoomGroupConfig.getTextsOfSelect() || 0;
					case sap.gantt.config.ZoomControlType.None:
						return -1;
					default:
						return oTimeZoomGroupConfig.getStepCountOfSlider();
				}
			}
		}
		return -1;
	};

	return Toolbar;
}, true);

}; // end of sap/gantt/control/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.AdhocLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.AdhocLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/AdhocLine",[
	"sap/ui/core/Core", "sap/gantt/misc/Utility", "./Drawer", "sap/gantt/misc/Format", "sap/ui/thirdparty/d3"
], function (Core, Utility, Drawer, Format) {
	"use strict";

	/**
	 * Constructor for a new Adhoc Line.
	 *
	 * @class
	 * A drawer for constructing multiple adhoc lines in the Gantt Chart
	 * @extends sap.gantt.drawer.Drawer
	 *
	 * @author SAP SE
	 * @version 
	 *
	 * @constructor
	 * @private
	 */
	var AdhocLine = Drawer.extend("sap.gantt.drawer.AdhocLine", /** @lends sap.gantt.drawer.AdhocLine.prototype */ {
		/**
		 * AdhocLine drawer.
		 *
		 * @param {object} Object that converts time and coordinates
		 */
		constructor : function(oAxisTime) {
			this.oAxisTime = oAxisTime;
		}
	});

	/**
	 * Draw adhoc lines of gantt chart.
	 * 
	 * @param {object} SVG DOM element of chart instances.
	 * @param {sap.gantt.AdhocLine[]} A list of adhoc lines' configuration.
	 * @param {object} Status Set of chart instance. It contains information about the visible time area.
	 */
	AdhocLine.prototype.drawSvg = function ($GanttChartSvg, aAdhocLineConfig, oStatusSet, sLayer) {
		if (!aAdhocLineConfig || aAdhocLineConfig.length == 0) {
			return;
		}

		var oVisibleStartTime = Core.getConfiguration().getRTL() ? oStatusSet.aTimeBoundary[1] : oStatusSet.aTimeBoundary[0],
		oVisibleEndTime = Core.getConfiguration().getRTL() ? oStatusSet.aTimeBoundary[0] : oStatusSet.aTimeBoundary[1];
		//only draw adhoc lines in visible area
		var aVisibleAdhocLines = aAdhocLineConfig.filter(function(oValue, iIndex){
			var oDate = Format.abapTimestampToDate(oValue.getTimeStamp());
			if (oVisibleStartTime <= oDate && oDate <= oVisibleEndTime){
				return true;
			}
			return false;
		});

		$GanttChartSvg.selectAll(".sapGanttChartAdhocLine").remove();

		if (aVisibleAdhocLines.length == 0) {
			return;
		}

		var $Chart = jQuery($GanttChartSvg.node()),
			iChartHeight = Math.max.apply(null, $Chart.map(function(){ return jQuery(this).height(); }).get());

		if (sLayer === sap.gantt.AdhocLineLayer.Top) {
			$GanttChartSvg.append("g")
				.classed("sapGanttChartAdhocLine", true);
		} else if (sLayer === sap.gantt.AdhocLineLayer.Bottom) {
			/* eslint-disable sap-no-element-creation */
			var oAdhocLineG = document.createElementNS(d3.ns.prefix.svg, "g");
			/* eslint-enable sap-no-element-creation */
			oAdhocLineG.setAttribute("class", "sapGanttChartAdhocLine");
			var sWrapSelector = Utility.attributeEqualSelector("id", $GanttChartSvg.attr("id"));
			var aCalendar = jQuery(sWrapSelector).find(".sapGanttChartCalendar");
			var aBackground = jQuery(sWrapSelector).find(".sapGanttChartRowBackground");

			if (aCalendar.length > 0) {
				aCalendar.after(oAdhocLineG);
			} else if (aBackground.length > 0){
				aBackground.after(oAdhocLineG);
			} else {
				$GanttChartSvg.insert("g", ":first-child")
					.classed("sapGanttChartAdhocLine", true);
			}
		}
		var oAdhocLineG = $GanttChartSvg.select(".sapGanttChartAdhocLine");
		var aAdhocLines = oAdhocLineG.selectAll(".sapGanttChartAdhocTimestamp").data(aVisibleAdhocLines);

		var that = this;
		aAdhocLines.enter().append("line")
			.classed("sapGanttChartAdhocTimestamp", true)
			.attr("x1", function (d) {
				return that.oAxisTime.timeToView(Format.abapTimestampToDate(d.getTimeStamp()));
			})
			.attr("y1", function (d) {
				return 0;
			})
			.attr("x2", function (d) {
				return that.oAxisTime.timeToView(Format.abapTimestampToDate(d.getTimeStamp()));
			})
			.attr("y2", function (d) {
				return iChartHeight;
			})
			.attr("stroke",function(d) {
				return d.getStroke();
			})
			.attr("stroke-width", function (d) {
				return d.getStrokeWidth();
			})
			.attr("stroke-dasharray", function (d) {
				return d.getStrokeDasharray();
			})
			.attr("stroke-opacity", function (d) {
				return d.getStrokeOpacity();
			});

		aAdhocLines.selectAll("title").remove();
		aAdhocLines.insert("title", ":first-child")
			.text(function (d) {
				return d.getDescription();
			});
	};

	/**
	 * Remove DOM elements of adhoc lines.
	 */
	AdhocLine.prototype.destroySvg = function ($GanttChartSvg) {
		if ($GanttChartSvg) {
			$GanttChartSvg.selectAll(".sapGanttChartAdhocLine").remove();
		}
	};

	return AdhocLine;
}, true);

}; // end of sap/gantt/drawer/AdhocLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.CalendarPattern') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.CalendarPattern'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/CalendarPattern",[
	"sap/ui/core/Core", "sap/gantt/misc/Format","sap/ui/core/format/DateFormat", "sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Core, Format, DateFormat, Drawer, Utility) {
	"use strict";

	var CalendarPattern = Drawer.extend("sap.gantt.drawer.CalendarPattern");

	/*
	 * aSvgNode: svg body of parent node
	 * sParentId: parent id of the paint server defs
	 * 
	 */
	CalendarPattern.prototype.drawSvg = function (aSvgBodyNode, sParentId, oPatternDef, oStatusSet, iBaseRowHeight) {
		// temp save config
		this._oStatusSet = oStatusSet;
		
		if (oPatternDef && oPatternDef.getDefNode() && oPatternDef.getDefNode().defNodes) {
			var defNode = oPatternDef.getDefNode();
			var defId = sParentId + "-calendardefs";
			var sWrapDefSelector = Utility.attributeEqualSelector("id", defId);
			if (!(d3.select(sWrapDefSelector).empty())) {
				jQuery(sWrapDefSelector).remove();
			}
			var width = this._oStatusSet.aViewBoundary[1] - this._oStatusSet.aViewBoundary[0];
			if (width < 0) {
				width = this._oStatusSet.aViewBoundary[0] - this._oStatusSet.aViewBoundary[1];
			}
			var patternProp = {height: iBaseRowHeight, width: width};
			var patternDefG = aSvgBodyNode.select(sWrapDefSelector);
			if (patternDefG.empty()){
				patternDefG = aSvgBodyNode.insert("defs",":first-child")
									.attr("id", defId);
			}
			var patGData = patternDefG.selectAll(".calendarPattern")
									.data(defNode.defNodes);
			patGData.enter().append("pattern")
							.attr("class", "calendarPattern")
							.attr("id", function(d) {
								return d.id;
							})
							.attr("patternUnits", "userSpaceOnUse")
							.attr("x", 0)
							.attr("y", 0)
							.attr("width", patternProp.width)
							.attr("height", patternProp.height);
			patGData.exit().remove();
			
			var patternRect = patGData.selectAll("rect")
									.data(function() { 
											return this.parentNode.__data__.timeIntervals; 
										});
			patternRect.enter().append("rect");
			patternRect.attr("x",function(d) {
							return d.x;	
						})
						.attr("y", function(d) {
							return d.y;	
						})
						.attr("width", function(d) {
							return d.width;	
						})
						.attr("height", patternProp.height)
						.attr("fill", function(d){
							return d.fill;
						});
			patternRect.exit().remove();
		}
	};

	return CalendarPattern;
}, true);

}; // end of sap/gantt/drawer/CalendarPattern.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.CursorLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.CursorLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/CursorLine",[
	"sap/ui/core/Core", "sap/ui/Device", "sap/gantt/misc/Format", "sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Core, Device, Format, Drawer, Utility) {
	"use strict";

	/**
	 * CursorLine drawer.
	 *  ________
	 * | 12.Feb |
	 * |________|
	 *     |
	 *     |
	 *     |
	 *     |
	 *     |
	 */
	var CursorLine = Drawer.extend("sap.gantt.drawer.CursorLine");

	/**
	 * Draw cursor line to all gantt chart instances currently displayed.
	 * 
	 * @param {object} [aSvgBodyNode]: SVG body of all chart instances. update synchronized
	 * @param {object} [aSvgHeaderNode] Header SVG documents of Gantt Chart
	 * @param {sap.gantt.config.Locale} [oLocale] Locale instance
	 * @param {object} [oCursorPoint] Cursor point of the target element information including 
	 *	x: x coordinate of mouse in the triggering SVG relative to the document: pageX,
	 *	y: y coordinate of mouse in the triggering SVG relative to the document: pageY,
	 *	svgHeight: height of the triggering SVG,
	 *	svgId: id of the triggering SVG
	 */
	CursorLine.prototype.drawSvg = function (aSvgBodyNode, aSvgHeaderNode, oLocale, oCursorPoint) {

		this._oLocale = oLocale;

		// Find out the left offset of SVG document which triggered the event 
		var iCursorOffsetLeft = jQuery(Utility.attributeEqualSelector("id", oCursorPoint.svgId)).offset().left;
		
		// The Gantt might have multiple charts. Here find out the chart SVG DOM node offset regarding to the document
		// Notice: Only Gantt charts in vertical layout are considered. It makes sure cursor line is draw vertical axis.
		//         It might have potential drawing problem on horizontal gantt chart layout
		var aActualDrawingPoints = [];
		aSvgBodyNode.each(function(data, index){
			var oSvg = jQuery(this),
				offset = oSvg.offset();
			aActualDrawingPoints.push({
				x: oCursorPoint.x + iCursorOffsetLeft - offset.left,
				y: oCursorPoint.y,

				svgId: oSvg.attr("id"),
				svgHeight: oSvg.height()
			});
		});

		var that = this;

		// Draw rectangle time label in Gantt Chart header SVG document
		aSvgHeaderNode.each(function(data, index){
			var aHeaderTopG = that._createHeaderTopG(d3.select(this));
			that._drawHeaderLabel(aHeaderTopG, aActualDrawingPoints[index]);
		});

		// Draw vertical line indicates the time in Gantt Chart body SVG document
		aSvgBodyNode.each(function(data, index){
			var aBodyTopG = that._createBodyTopG(d3.select(this));
			that._drawCursorLine(aBodyTopG, aActualDrawingPoints[index]);
		});
	};

	CursorLine.prototype._createBodyTopG = function (aSvgBodyNode) {
		// update body top g and bind data
		var aBodyTopG = aSvgBodyNode.selectAll(".cursorline-top")
			.data(function(){
				// use current svg height and id of topG data
				return [{
					svgHeight: jQuery(this.parentNode).height()
				}];
			});
		aBodyTopG.enter().append("g")
			.classed("cursorline-top", true);
		aBodyTopG.exit().remove();
		return aBodyTopG;
	};

	CursorLine.prototype._drawCursorLine = function (aGroup, oSvgPoint) {
		// update path
		var aPath = aGroup.selectAll("path")
			.data(function(d) {
				return [{
					svgHeight: d.svgHeight,
					x: oSvgPoint.x,
					y: oSvgPoint.y
				}];
			});
		aPath.enter().append("path")
			.classed("sapGanttCursorLineBody", true);
		aPath
			.attr("d", function (d) {
				return "M" + d.x + ",0v" + d.svgHeight + "h1h-1";
			});
		aPath.exit().remove();
	};

	CursorLine.prototype._createHeaderTopG = function (aSvgHeaderNode) {
		// update chart header top g and bind data
		var aHeaderTopG = aSvgHeaderNode.selectAll(".cursorline-header-top")
			.data(function(){
				// use current svg height and id of topG data
				return [{
					svgHeight: jQuery(this.parentNode).height()
				}];
			});
		aHeaderTopG.enter().append("g")
			.classed("cursorline-header-top", true);
		aHeaderTopG.exit().remove();
		return aHeaderTopG;
	};

	CursorLine.prototype._drawHeaderLabel = function (aGroup, oSvgPoint) {
		var that = this;
		var oAxisTime = this._getAxisTime(oSvgPoint.svgId);
		// update path
		var aRect = aGroup.selectAll("rect")
			.data(function(d) {
				return [{
					svgHeight: d.svgHeight,
					svgId: d.svgId,
					x: oSvgPoint.x,
					y: oSvgPoint.y
				}];
			});
		
		aRect.enter().append("rect")
			.classed("sapGanttCursorLineHeader", true);
		aRect
			.attr("width", function (d) {
				// Since width and height are not style class in SVG for FF and IE 
				// Have provide default width and height here
				return 64;
			}).attr("height", function (d) {
				// If more than 80, most likely it's in Cozy Mode, so make the height larger
				return d.svgHeight > 80 ? 30 : 25;
			})
			.attr("x", function (d) {
				// Move the start point by moving half of the rectangle width
				return d.x - parseFloat(aRect.attr('width')) / 2;
			})
			.attr("y", function (d) {
				// Minus the height of the rectangle and 5 for the margin
				return d.svgHeight - parseFloat(aRect.attr('height')) - 5;
			});
		aRect.exit().remove();

		var aText = aGroup.selectAll("text")
						.data(function(d) {
							return [{
								x: parseFloat(aRect.attr('x')) + parseFloat(aRect.attr('width') / 2),
								y: parseFloat(aRect.attr('y')) + parseFloat(aRect.attr('height') / 2)
							}];
						});
		aText.enter().append("text").classed("sapGanttCursorLineLabel", true);
		aText
			.attr("x", function (d) {
				return d.x;
			})
			.attr("y", function (d) {
				return d.y;
			})
			.text(function (d) {
				return that._getTimeLabel(
						Format.dateToAbapTimestamp(oAxisTime.viewToTime(d.x)),
						that._oLocale,
						oAxisTime);
			});
		if (Device.browser.msie) {
			// IE doesn't support alignment-baseline, so here need add relative vertical alignment
			aText.attr("dy", ".35em");
		}
		aText.exit().remove();
	};

	CursorLine.prototype.destroySvg = function (aSvgBodyNode, aSvgHeaderNode) {
		aSvgBodyNode.selectAll(".cursorline-top").remove();
		aSvgHeaderNode.selectAll(".cursorline-header-top").remove();
	};

	/**
	 * Get the AxisTime instance associated with the Gantt Chart SVG document
	 * 
	 * @param {string} [elementId] SVG document ID
	 * @returns {AxisTime} AxisTime instance of the Gantt Chart control
	 */
	CursorLine.prototype._getAxisTime = function (elementId) {
		var sWrapSelector = Utility.attributeEqualSelector("id", elementId);
		var $element = jQuery(sWrapSelector);
		var oAxisTime = null;
		if ($element && $element.control()) {
			oAxisTime = $element.control()[0].getAxisTime();
		}
		return oAxisTime;
	};

	CursorLine.prototype._getTimeLabel = function (sTimeStamp, oLocale, oAxisTime) {
		var oLocalTime = Format._convertUTCToLocalTime(sTimeStamp, oLocale),
			oZoomStrategy = oAxisTime.getZoomStrategy();

		return oZoomStrategy.getLowerRowFormatter().format(oLocalTime);
	};

	return CursorLine;
}, true);

}; // end of sap/gantt/drawer/CursorLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.NowLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.NowLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/NowLine",[
	"sap/gantt/misc/Utility", "./Drawer",
	"sap/ui/thirdparty/d3"
], function (Utility, Drawer) {
	"use strict";

	/*
	 * Default triangle length of side
	 */
	var mLengthOfSide = 8;

	/**
	 * Constructor for a NowLine.
	 *
	 * @class
	 * The Now line indicate the current date and time in Gantt Chart
	 * @extends sap.gantt.drawer.Drawer
	 * @constructor
	 * @private
	 * @alias sap.gantt.drawer.NowLine
	 */
	var NowLine = Drawer.extend("sap.gantt.drawer.NowLine", /** @lends sap.gantt.drawer.NowLine.prototype */ {
		/**
		 * Formatter for NowLine drawer.
		 *
		 * @param {object} oAxisTime an object know how to convert time and coordinates
		 */
		constructor : function(oAxisTime) {
			this.oAxisTime = oAxisTime;
		}
	});

	/*
	 * Drawer for NowLine.
	 * ___
	 * \ /
	 *  | It has two parts, header and body. Due to the Gantt Chart has two separate SVG documents represent Axis time header
	 *  | and body respectively, here we also need to draw SVG line separately.
	 */
	NowLine.prototype.drawSvg = function ($GanttChartSvg, $GanttChartHeaderSvg) {

		// Remove the line before drawing first
		this.destroySvg($GanttChartSvg, $GanttChartHeaderSvg);

		var iNowLineAxisX = this.oAxisTime.getNowLabel()[0].value;

		var iChartWidth = jQuery($GanttChartSvg.node()).width();
		if (iNowLineAxisX > iChartWidth) {
			// if the calculated axis-x is larger than the current chart visible area.
			// It means the now line is out of the range so no need to draw anything.
			return;
		}

		var oChartContent = $GanttChartSvg,
			oChartHeader  = $GanttChartHeaderSvg;

		// For Axis X, the start X is calculated from AxitTime based on the latest date time
		// Chart header and content body was separate SVG document and header default height is 64px include 3px bottom padding
		// in order to make the triangle and line connect each other, using 61 as the top point Y Axis coordinate in chart header
		var oStartPoint = {
			x: iNowLineAxisX,
			y: jQuery($GanttChartHeaderSvg.node()).height()
		};
		
		this._drawHeaderTriangle(oStartPoint, oChartHeader);
		this._drawBodyStaightLine(oStartPoint, oChartContent);
	};

	NowLine.prototype._drawHeaderTriangle = function(oStartPoint, oParentSvgNode) {
		var halfTriangleWidth = mLengthOfSide / 2,
			tringleHeight = Math.sqrt(mLengthOfSide * mLengthOfSide - halfTriangleWidth * halfTriangleWidth);

		var aTrianglePoints = [
			oStartPoint,
			{x: oStartPoint.x - halfTriangleWidth, y: oStartPoint.y - tringleHeight},
			{x: oStartPoint.x + halfTriangleWidth, y: oStartPoint.y - tringleHeight},
			oStartPoint
		];
		var fnLine = d3.svg.line()
			.x(function(d) { return d.x; })
			.y(function(d) { return d.y; })
			.interpolate("linera");

		oParentSvgNode.append("g").classed("sapGanttNowLineHeaderSvgPath", true)
			.append("path")
			.attr("d", fnLine(aTrianglePoints));
	};

	NowLine.prototype._drawBodyStaightLine = function(oStartPoint, oParentSvgNode) {
		var aNowlineBody = oParentSvgNode.selectAll(".sapGanttNowLineBodySvgLine")
			.data(function(){
				var iWindowHeight = jQuery(window).height();
				return [{
					x1: oStartPoint.x, y1: 0,
					x2: oStartPoint.x, y2: oStartPoint.y + iWindowHeight
				}];
		});

		aNowlineBody.enter().append("g").classed("sapGanttNowLineBodySvgLine", true);
		var oNowline = aNowlineBody.selectAll("g").data(function(d){
			return [d];
		});
		oNowline.enter().append("line");
		oNowline.attr("x1", function(d){ return d.x1; })
			.attr("y1", function(d){ return d.y1; })
			.attr("x2", function(d){ return d.x2; })
			.attr("y2", function(d){ return d.y2; });
		oNowline.exit().remove();
	};

	NowLine.prototype.destroySvg = function ($GanttChartSvg, $GanttChartHeaderSvg) {
		if ($GanttChartSvg && $GanttChartHeaderSvg) {
			$GanttChartSvg.selectAll(".sapGanttNowLineBodySvgLine").remove();
			$GanttChartHeaderSvg.selectAll(".sapGanttNowLineHeaderSvgPath").remove();
		}
	};

	return NowLine;
}, true);

}; // end of sap/gantt/drawer/NowLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.SelectionPanel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.SelectionPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/SelectionPanel",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility", "sap/ui/core/Core", "sap/ui/core/IconPool", "sap/ui/Device",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Core, IconPool, Device) {
	"use strict";

	var SelectionPanel = Drawer.extend("sap.gantt.drawer.SelectionPanel");

	SelectionPanel.prototype.drawSvg = function (aTableSvg, aData, iTableHeaderWidth, oGanttChartWithTable) {

		if (!aData){
			return;
		}

		this._oGanttChartWithTable = oGanttChartWithTable;
		var aExpandedData = [];
		for (var i = 0; i < aData.length; i++){
			if (aData[i].index && aData[i].index !== 0){
				aExpandedData.push(aData[i]);
			}
		}

		var aTableCntPanelG = aTableSvg.selectAll(".sapGanttSelectionPanel");
		if (aTableCntPanelG.empty()){
			aTableCntPanelG = aTableSvg.append("g").classed("sapGanttSelectionPanel",true);
		}

		if (!aTableCntPanelG.empty()) {
			var iTableWidth = $(aTableSvg.node()).width();
			var oChartSchemeBackgroundConfig = oGanttChartWithTable._oGanttChart._composeChartSchemeBackgroundConfig();
			this._drawExpandedBackground(aTableCntPanelG, iTableWidth, iTableHeaderWidth, aExpandedData, oChartSchemeBackgroundConfig);
			this._drawExpandedContent(aTableCntPanelG, iTableWidth,  iTableHeaderWidth, aExpandedData);
		}
	};

	SelectionPanel.prototype._drawExpandedBackground = function (aSvg, iTableWidth, iTableHeaderWidth, aDatas, oChartSchemeBackgroundConfig) {		

		var aHederBGRect = aSvg.selectAll(".sapGanttExpandChartHeader").data(aDatas);
		aHederBGRect.enter().append("rect").classed("sapGanttExpandChartHeader",true);
		aHederBGRect.attr("x",function(){
			return Core.getConfiguration().getRTL() ? iTableWidth - iTableHeaderWidth + 1 : 2;
		})
		.attr("y", function(d) {
			return d.y;
		})
		.attr("height", function(d) {
			// -1 just for show parent container border 
			return d.rowHeight - 1;
		})
		.attr("width", iTableHeaderWidth - 2)
		.attr("class", function(d){
			var sBackgroundClass = oChartSchemeBackgroundConfig ? oChartSchemeBackgroundConfig[d.chartScheme] : undefined;
			if (sBackgroundClass && sBackgroundClass !== ""){
				return "sapGanttExpandChartHeader " + sBackgroundClass;
			} else {
				return "sapGanttExpandChartHeader sapGanttExpandChartHeaderBG";
			}
		});
		aHederBGRect.exit().remove();

		var aCntBGRect = aSvg.selectAll(".sapGanttExpandChartCnt").data(aDatas);
		aCntBGRect.enter().append("rect").classed("sapGanttExpandChartCnt",true);
		aCntBGRect.attr("x", function(){
			return Core.getConfiguration().getRTL() ? 2 : iTableHeaderWidth + 1;
		})
		.attr("y", function(d) {
			return d.y;
		})
		.attr("height", function(d) {
			// -1 just for show parent container border 
			return d.rowHeight - 1;
		})
		.attr("width", iTableWidth - iTableHeaderWidth - 3)
		.attr("class", function(d){
			var sBackgroundClass = oChartSchemeBackgroundConfig? oChartSchemeBackgroundConfig[d.chartScheme] : undefined;
			if (sBackgroundClass && sBackgroundClass !== ""){
				return "sapGanttExpandChartCnt " + sBackgroundClass;
			} else {
				return "sapGanttExpandChartCnt sapGanttExpandChartCntBG";
			}
		});
		aCntBGRect.exit().remove();

		var aBGPath = aSvg.selectAll("path.sapGanttExpandChartLine").data(aDatas);
		aBGPath.enter().append("path").classed("sapGanttExpandChartLine", true);
		aBGPath.attr("d", function(d){
			return "M0 " + (d.y - 1) + " H" + (iTableWidth - 1);
		});
		aBGPath.exit().remove();
	};

	SelectionPanel.prototype._drawExpandedContent = function (aSvg, iTableWidth, iTableHeaderWidth, aDatas) {
		var fGetLevelIndentByShape = this._getLevelIndentByShape;
		var aCntDatas = [];
		for (var i = 0; i < aDatas.length; i++){
			if (aDatas[i].index === 1){
				var aSubContents = [];
				aSubContents.push(aDatas[i]);
				aCntDatas.push(aSubContents);
			}
		}

		aSvg.selectAll("g").remove();
		var aCntG = aSvg.selectAll("g").data(aCntDatas);
		aCntG.enter().append("g").classed("sapGanttExpandChartContent",true);
		aCntG.exit().remove();

		var aCntIcon = aCntG.selectAll(".sapGanttExpandChartIcon").data(function(d){ return d; });
		aCntIcon.enter().append(function(d){
			/* eslint-disable sap-no-element-creation */
			if (IconPool.isIconURI(d.icon)) {
				return document.createElementNS(d3.ns.prefix.svg, "text");
			}
			return document.createElementNS(d3.ns.prefix.svg, "image");
			/* eslint-enable sap-no-element-creation */
		})
		.classed("sapGanttExpandChartIcon", true)
		.classed("iconFont", function(d){
			return IconPool.isIconURI(d.icon);
		})
		.classed("iconImage", function(d){
			return !(IconPool.isIconURI(d.icon));
		});

		aCntG.selectAll(".iconImage").attr("xlink:href", function (d) {
			return d.icon;
		})
		.attr("x", function (d) {
			return Core.getConfiguration().getRTL() ? iTableWidth - iTableHeaderWidth - fGetLevelIndentByShape(d) - 17 : fGetLevelIndentByShape(d) + iTableHeaderWidth;
		})
		.attr("y", function (d) {
			//top height to parent container
			return d.y + 4.25;
		})
		.attr("width", 16)
		.attr("height", 16);

		aCntG.selectAll(".iconFont").attr("x", function (d) {
			return Core.getConfiguration().getRTL() ? iTableWidth - iTableHeaderWidth - fGetLevelIndentByShape(d) : fGetLevelIndentByShape(d) + iTableHeaderWidth;
		})
		.attr("y", function (d) {
			return d.y + 19;
		})
		.text(function(d){
			var oIconInfo = IconPool.getIconInfo(d.icon);
			if (oIconInfo) {
				return oIconInfo.content;
			}
		}).attr("font-family", function(d){
			var oIconInfo = IconPool.getIconInfo(d.icon);
			if (oIconInfo) {
				return oIconInfo.fontFamily;
			}
		})
		.attr("font-size", "16px");
		aCntIcon.exit().remove();

		var aCntText = aCntG.selectAll("sapGanttExpandChartText").data(function(d) {return d;});
		aCntText.enter().append("text").classed("sapGanttExpandChartText",true);
		aCntText.attr("x", function (d) {
			return Core.getConfiguration().getRTL() ? iTableWidth - iTableHeaderWidth - fGetLevelIndentByShape(d) - 26 : fGetLevelIndentByShape(d) + iTableHeaderWidth + 27;
		})
		.attr("y", function (d) {
			return d.y + 16.5;
		})
		.attr("font-size", function (d) {
			return "0.75em";
		})
		.text(function (d) {
			return d.name;
		})
		.attr("text-anchor", (Device.browser.msie || Device.browser.edge) && Core.getConfiguration().getRTL() ? "end" : "start");

		aCntText.exit().remove();

		var that = this;
		var aCntCloseBtn = aCntG.selectAll(".sapGanttExpandChartCloseButton").data(function(d) {return d;});
		aCntCloseBtn.enter().append("text").classed("sapGanttExpandChartCloseButton", true);
		aCntCloseBtn.attr("x", function (d) {
			var iPrevTextWidth, aPrevText = jQuery(this).prev("text");
			if (aPrevText && aPrevText.length > 0) {
				var oBoundRect = aPrevText[0].getBoundingClientRect();
				if (oBoundRect && oBoundRect.width > 0) {
					iPrevTextWidth = oBoundRect.width;	
				} else {
					iPrevTextWidth = aPrevText[0].clientWidth;
				}
			}
			if (isNaN(iPrevTextWidth) || iPrevTextWidth == null || iPrevTextWidth == 0) {
				iPrevTextWidth = 60;
			}
			var sInitialX = Core.getConfiguration().getRTL() ? iTableWidth - iTableHeaderWidth - fGetLevelIndentByShape(d) - iPrevTextWidth - 37 : fGetLevelIndentByShape(d) + iTableHeaderWidth + iPrevTextWidth + 35;
			return sInitialX;
		})
		.attr("y", function (d) {
			return d.y + 19;
		})
		.text(function(d){
			var oIconInfo = IconPool.getIconInfo("decline", undefined);
			if (oIconInfo) {
				return oIconInfo.content;
			}
		})
		.attr("font-family", function(d){
			var oIconInfo = IconPool.getIconInfo("decline", undefined);
			if (oIconInfo) {
				return oIconInfo.fontFamily;
			}
		})
		.attr("font-size", "14px")
		.attr("font-weight", "bolder")
		.on("click", function (d) {
			var oBinding = that._oGanttChartWithTable._oTT.getBinding("rows");
			var aRows = oBinding.getContexts(0, oBinding.getLength());
			var sRowIdName = that._oGanttChartWithTable.getRowIdName();
			for (var i = 0; i < aRows.length; i++) {
				var oContext = aRows[i].getProperty();
				if (oContext && d.id && oContext[sRowIdName] === d.id) {
					that._oGanttChartWithTable.handleExpandChartChange(false, [d.chartScheme], [i]);
				}
			}
		});

		aCntCloseBtn.select("title").remove();
		aCntCloseBtn.insert("title", ":first-child")
		.text(function(d) {
			return sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("TLTP_CLOSE");
		});
		aCntCloseBtn.exit().remove();
	};


	/**
	 * Calculate the offset in x dimension for expanded chart content. Expected: the expanded chart content should
	 * be slightly indented compared to the current row
	 * 
	 * @param {object} oShape shape date for the current row
	 * 
	 * @return {int} The appropriate x offset where to start drawing expanded chart icon and text.
	 * 
	 */
	SelectionPanel.prototype._getLevelIndentByShape = function (oShape) {
		//Some fragmental margins of the span element at the front of each row, padding-left 8, margin-right 5
		var iFragmentMarginOffset = 13;
		//one margin for one level of hierarchy, the hierarchy at level 0 does not have this
		var iMarginLeftUnit = 17;
		//the width of the span element at the front of each row, to indent the next hierarchy row text
		var iSpanWidth = 25;
		//the level where current row data is in the hierarchy
		var iHierarchyLevel = 0;

		if (oShape && oShape.bindingObj && oShape.bindingObj._aRowIndexMap && oShape.rowIndex && oShape.rowIndex < oShape.bindingObj._aRowIndexMap.length) {
			iHierarchyLevel = oShape.bindingObj._aRowIndexMap[oShape.rowIndex].level;
		}
		if (isNaN(iHierarchyLevel) || iHierarchyLevel == null) {
			iHierarchyLevel = 0;
		}
		return iMarginLeftUnit * iHierarchyLevel + iSpanWidth + iFragmentMarginOffset;
	};

	return SelectionPanel;
},true);

}; // end of sap/gantt/drawer/SelectionPanel.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ShapeCrossRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.ShapeCrossRow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ShapeCrossRow",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility) {
	"use strict";

	var ShapeCrossRow = Drawer.extend("sap.gantt.drawer.ShapeCrossRow");
	
	ShapeCrossRow.prototype.drawSvg = function (aSvgNode, oShape, oAxisTime, oAxisOrdinal) {
		// temp save param
		this._oAxisTime = oAxisTime;
		this._oAxisOrdinal = oAxisOrdinal;
		// create top g
		var aShapeTopG = aSvgNode.select("." + oShape.getId() + "-top");
		if (aShapeTopG.empty()) {
			aShapeTopG = aSvgNode.append("g")
				.classed(oShape.getId() + "-top", true);
		}
		var relationshipDataObjectArray = [];
		for (var i in oShape.dataSet) {
			relationshipDataObjectArray.push(oShape.dataSet[i].shapeData[0]);
		}
		var aShape = aShapeTopG.selectAll("." + oShape.getId())
			.data(relationshipDataObjectArray);
		this._drawPath(aShape, oShape);
		this._drawInsertTitle(aShape, oShape);
	};
	
	ShapeCrossRow.prototype._drawPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.enter().append("path")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape, that)) ? true : false;
			})
			.classed("enableSelected", function (d) {
				return oShape.getEnableSelection(d, fFindObjectInfo(this, oShape, that)) ? true : false;
			})
			.attr("d", function (d) {
				return oShape.getD(d, fFindObjectInfo(this, oShape, that));
			}).attr("fill", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getFill(d, fFindObjectInfo(this, oShape, that));
				}
			}).attr("stroke", function (d) {
				return oShape.getStroke(d, fFindObjectInfo(this, oShape, that));
			}).attr("stroke-width", function (d) {
				return oShape.getStrokeWidth(d, fFindObjectInfo(this, oShape, that));
			}).attr("stroke-dasharray", function (d) {
				return oShape.getStrokeDasharray(d, fFindObjectInfo(this, oShape, that));
			}).attr("fill-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getFillOpacity(d, fFindObjectInfo(this, oShape, that));
				}
			}).attr("stroke-opacity", function (d) {
				if (oShape.getIsClosed(d, fFindObjectInfo(this, oShape, that))) {
					return oShape.getStrokeOpacity(d, fFindObjectInfo(this, oShape, that));
				}
			});

		this.addDataAttributes(aShape);
		aShape.exit().remove();
	};
	
	ShapeCrossRow.prototype._drawInsertTitle = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.select("title").remove();
		aShape.insert("title", ":first-child")
			.each(function (d) {
				var oSelf = d3.select(this);
				oSelf.selectAll("tspan").remove();
				if (sap.ui.Device.browser.msie) {
					var aLines = oShape.getTitle(d, fFindObjectInfo(this, oShape)).split("\n");
					for(var i = 0; i < aLines.length; i++) {
						oSelf.append("tspan")
							.classed("sapGanttTooltipLine", true)
							.text(aLines[i]);
					}
				} else {
					oSelf.text(oShape.getTitle(d, fFindObjectInfo(this, oShape)));
				}
			});
	};

	ShapeCrossRow.prototype._findObjectInfo = function (oNode, oShape, oThis, isSelectedShape) {
		// Since relationship raw data has been processed by _drawShapes method, oRawData (i.e. oNode.__data__.rawData) has already have "fromShapeInstance", "toShapeInstance" attributes.
		// To get the coordinates of the from shape (starting point) and to shape (ending point), it 
		// iterates objectDataSet to find the one whose id equals oRawData.fromObjectPath and gets the raw data of the ref object whose id equals oRawData.fromDataId.
		// The returned object which contains object and shape's raw data of from and to are later used by getD method and are passed into oRawData.fromShapeInstance.getRLSAnchors and
		// oRawData.toShapeInstance.getRLSAnchors methods for getting the coordinates.

		var relationship = oNode.__data__;
		var oRawData = relationship;
		if (isSelectedShape) {
			oRawData = relationship.data.rawData;
		}

		var rlsRetVal = {
			from: {
				objectInfo: oRawData.fromObject.objectInfoRef ? oRawData.fromObject.objectInfoRef : oRawData.fromObject,
				shapeRawData: oRawData.fromShapeRawData
			},
			to: {
				objectInfo: oRawData.toObject.objectInfoRef ? oRawData.toObject.objectInfoRef : oRawData.toObject,
				shapeRawData: oRawData.toShapeRawData
			}
		};
		return rlsRetVal;
	};

	ShapeCrossRow.prototype.destroySvg = function (aSvgNode, oShape) {
	};

	ShapeCrossRow.prototype.generateRelationshipDataSet = function (aSvgNode, oShapeMap, aNonVisibleShapeData, aShapeDataNames, oRelationship, oAxisTime, oAxisOrdinal) {
			/*
			 * This piece of code searches aRelationship and finds all relationships whose starting point and ending point are both expanded. 
			 * Set below attributes for these relationship:
			 * 		"fromShapeInstance"	the instance of shape class		type: object
			 * 		"toShapeInstance"		the instance of shape class		type: object
			 * And push these relationships into the "dataSet" attribute of Relationship class instance for drawing them later on.
			 * Additionally, this method also saves a reference of aDataSet into the "_objectDataSet" attribute of Relationship class.
			 * 
			 * Description of some objects which are used in this algorithm:
			 * - oShapeInstances
			 * 			the collection of shape instances, each element has 'dataSet' attribute which contains the data of that shape to draw
			 * - aRelationship
			 * 			the raw data of relationship which is set and stored in Chart object
			 * - this.dataSet 
			 * 			the array of the data of all the expanded rows (this means that its length is no smaller than 23 because there are always 23 rows in the visible area including empty rows), 
			 * it is changing according to users' interactions on the UI, e.g. expand/collapse a row,
			 * and it is constructed from traversing the initial tree structured data, for example,
			 * tree structure: 
			 * 			root
			 * 				header			id: 0
			 * 					phase		id: 10
			 * 						task	id: 20
			 * 						task	id: 21
			 * 					phase		id: 11
			 * 						task	id: 22
			 * 					phase		id: 12
			 * 				header			id: 1
			 * 
			 * dataSet structure:
			 * 		[header, phase, task, task, phase, task, phase, header]
			 * 
			 * map structure (is constructed in this function):
			 * 		{
			 * 			0: header,
			 * 			1: header,
			 * 			10: phase,
			 * 			11: phase,
			 * 			12: phase,
			 * 			20: task,
			 * 			21: task,
			 * 			22: task
			 * 		}
			 */
			//this._relationships = oRowBinding.getModel().getObject(oRowBinding.getPath() + "/relationships");
			var aRelationship = oRelationship;
			var relationshipDataSet = [];
			if (aRelationship !== undefined && aRelationship.length > 0) {
				var relationshipClass;
				var sShapeId;
				for (sShapeId in oShapeMap) {
					if (oShapeMap[sShapeId].getCategory(null, oAxisTime, oAxisOrdinal)
						=== sap.gantt.shape.ShapeCategory.Relationship) {
						relationshipClass = oShapeMap[sShapeId];
						break;
					}
				}

				if (relationshipClass) {

					var objectIdPathMap = {};

					//Initial objectIdPathMap
					//The purpose of generating the map of expanded row data is for checking whether both the relationship's starting point and ending point are expanded.
					//If the starting point isn't expanded, map[relationship.rawData.fromObjectPath] will be undefined.
					//If the ending point isn't expanded, map[relationship.rawData.toObjectPath] will be undefined.
					//A relationship whose starting point or ending point is not expanded won't be displayed.
					for (sShapeId in oShapeMap) {
						if (oShapeMap[sShapeId].dataSet && oShapeMap[sShapeId].dataSet != "" 
							&& oShapeMap[sShapeId].mShapeConfig.getShapeDataName() != sap.gantt.shape.ShapeCategory.Relationship){
							Utility.generateObjectPathToObjectMap(oShapeMap[sShapeId].dataSet, objectIdPathMap, null);
						}
					}
					Utility.generateObjectPathToObjectMap(aNonVisibleShapeData, objectIdPathMap, null);
						
					var relationship;
					var relationshipRawData;
					
					for (var i = 0; i < aRelationship.length; i++) {
						relationship = aRelationship[i];
						relationshipRawData = relationship;
						var fromObjectPath = relationshipClass.getFromObjectPath(relationshipRawData, null);
						var fromObject = objectIdPathMap[fromObjectPath + "-" + relationshipClass.getFromExpandRowIndex(relationshipRawData, null)];
						
						//If fromObject doesn't exist in the map or it doesn't have 'y' attribute, it means the row isn't expanded,
						//then we are NOT displaying the relationship.
						if (!fromObject) {
							continue;
						}
						
						//Get the raw data of the ref object whose id equals oRawData.fromDataId.
						//objecthierarchy._enhanceObject method sets rawData attribute to ref object, so
						//that the raw data of ref object is available.
						
						var toObjectPath = relationshipClass.getToObjectPath(relationshipRawData, null);
						var toObject = objectIdPathMap[toObjectPath + "-" + relationshipClass.getToExpandRowIndex(relationshipRawData, null)];
						
						//If toObject doesn't exist in the map or it doesn't have 'y' attribute, it means the row isn't expanded,
						//then we are NOT displaying the relationship.
						if (!toObject) {
							continue;
						}
						
					    var fromShapeId = relationshipClass.getFromShapeId(relationshipRawData, null);
						var fromDataId = relationshipClass.getFromDataId(relationshipRawData, null);

						//fromObject.shapeData is the array contains one or multiple elements of shape data (when multiple, in that row there are multiple ones of that shape)
						//fromObject.shapeData MUST NOT be undefined
						var sFromShapeDataName = oShapeMap[fromShapeId].mShapeConfig.getShapeDataName();
						var fromShapeRawData = this._findShapeDataFromRowObjectByShapeDataName(fromObject, fromDataId, sFromShapeDataName);
						if (!fromShapeRawData) {
							continue;
						}

						var toShapeId = relationshipClass.getToShapeId(relationshipRawData, null);
						var toDataId = relationshipClass.getToDataId(relationshipRawData, null);

						var sToShapeDataName = oShapeMap[toShapeId].mShapeConfig.getShapeDataName();
						var toShapeRawData = this._findShapeDataFromRowObjectByShapeDataName(toObject, toDataId, sToShapeDataName);
						if (!toShapeRawData) {
							continue;
						}

						relationshipRawData.fromObject = fromObject;
						relationshipRawData.toObject = toObject;
						relationshipRawData.fromShapeRawData = fromShapeRawData;
						relationshipRawData.toShapeRawData = toShapeRawData;

						var object = {
							"shapeData": [relationship]
						};
						relationshipDataSet.push(object);

					}

				}
			}
			return relationshipDataSet;
		};

		/*
		 * Find the shape data object from the row object by shape data id
		 * 
		 * @param {object} oRowObject
		 * @param {string} sShapeDataId
		 * @return {object} The shape data object whose id equals to the given sShapeDataId
		 * 
		 * Case 1: There is shapeData array in oRowObject, then loop shapeData and return the matched object whose id equals to the given sShapeDataId
		 * oRowObject = {
		 * 		objectInfoRef: {
		 * 			bindingObj: {},
		 * 			contextObj: {},
		 * 			data: {
		 * 				activity: [],
		 * 				order: [],
		 * 				endTime: "2014.09.23",
		 * 				end_loc_id: "BERLIN",
		 * 				id: "0000",
		 * 				selected: false,
		 * 				startTime: "2014.09.20",
		 * 				start_loc_id: "WDF",
		 * 				status: 2,
		 * 				type: "TOL",
		 * 				uuid: "01_0"
		 * 			},
		 * 			rowHeight: 28,
		 * 			uid: "PATH:0000|SCHEME:ac_main",
		 * 			y: 0
		 * 		},
		 * 		shapeData: [{},{},...] <-------------- matched object
		 * }
		 * 
		 * Case 2: oRowObject is already the objectInfoRef of Case 1, then loop <sShapeId> (e.g. 'activity' or 'order' and so on) and return the matched object whose id equals to the given sShapeDataId
		 * oRowObject = {
		 * 		bindingObj: {},
		 * 		contextObj: {},
		 * 		data: {
		 * 			activity: [], <-------------------matched object
		 * 			order: [],
		 * 			endTime: "2014.09.23",
		 * 			end_loc_id: "BERLIN",
		 * 			id: "0000",
		 * 			selected: false,
		 * 			startTime: "2014.09.20",
		 * 			start_loc_id: "WDF",
		 * 			status: 2,
		 * 			type: "TOL",
		 * 			uuid: "01_0"
		 * 		},
		 * 		rowHeight: 28,
		 * 		uid: "PATH:0000|SCHEME:ac_main",
		 * 		y: 0
		 * }
		 */
		ShapeCrossRow.prototype._findShapeDataFromRowObjectByShapeDataName = function (oRowObject, sShapeDataId, sShapeName) {
			/* the key in shapeConfig sometimes is different from shapeDataName, e.g.: {key: "criticalTask", shapeDataName: "task", shapeClassName: }
			 * in above example, the fromShapeId in relationship is "criticalTask", but the uid generation use "task"
			 * use related shapeDataName to get the shape data
			 */
			var oShapeData, aShapeData;

			if (oRowObject.shapeData) {
				aShapeData = oRowObject.shapeData;
			} else if (oRowObject.data && oRowObject.data[sShapeName]){
				aShapeData = oRowObject.data[sShapeName];
			} else if (oRowObject.data) {
				return oRowObject.data;
			} else {
				aShapeData = oRowObject;
			}

			for (var i = 0; i < aShapeData.length; i++) {
				if (aShapeData[i].__id__ !== undefined && aShapeData[i].__id__ == sShapeDataId) {
					oShapeData = aShapeData[i];
					break;
				}
			}
			if (oShapeData == undefined && aShapeData.length > 0) {
				oShapeData = aShapeData[0];
			}
			
			return oShapeData;
		};

		/**
		 * Add DataSet attribute on the Shape DOM element for quick reference.
		 * 
		 * If consumer doesn't specify the id <b>reserved keyword</b> in their data, use
		 * jQuery.sap.uid() instead
		 * 
		 * @param {object} oShape D3 DOM element
		 * @private
		 */
		ShapeCrossRow.prototype.addDataAttributes = function(oShape) {
			oShape.attr("data-sap-gantt-shape-id", function(d){
				return d.__id__;
			});
		};

	return ShapeCrossRow;
}, true);

}; // end of sap/gantt/drawer/ShapeCrossRow.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.ShapeInRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.ShapeInRow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/ShapeInRow",[
	"sap/gantt/drawer/Drawer", "sap/gantt/misc/Utility","sap/gantt/misc/Format",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (Drawer, Utility, Format) {
	"use strict";

	var ShapeInRow = Drawer.extend("sap.gantt.drawer.ShapeInRow", {
	});

	/*
	 * oShape is the shape instance which already have data collected.
	 */
	ShapeInRow.prototype.drawSvg = function (aSvgNode, oShape, oAxisTime, oAxisOrdinal, oStatusSet) {
		// temp save param
		this._oAxisTime = oAxisTime;
		this._oAxisOrdinal = oAxisOrdinal;
		this._oStatusSet = oStatusSet;
		// create top g
		var aShapeTopG = aSvgNode.select("." + oShape.getId() + "-top");
		if (aShapeTopG.empty()) {
			aShapeTopG = aSvgNode.append("g")
				.classed(oShape.getId() + "-top", true);
		}
		if (sap.ui.getCore().byId(oShape.getId()).getMetadata().getName() === "sap.gantt.shape.cal.Calendar") {
			aShapeTopG.classed("sapGanttChartCalendar", true);
		}
		// bind data to row g
		var sRowClassId = oShape.getId() + "-row";
		var aRowG = aShapeTopG.selectAll("." + sRowClassId)
			.data(oShape.dataSet);
		aRowG.enter().append("g")
			.classed(sRowClassId, true);
		aRowG.attr("data-sap-gantt-row-id", function(d) {
			return d.objectInfoRef.id;
		});
		aRowG.exit().remove();
		// draw
		if (!aRowG.empty()) {
			this._recursiveDraw(aRowG, oShape);
		}
	};
	
	//particular for resizing to draw shadow in resizing process
	ShapeInRow.prototype.drawResizeShadow = function (aSvgNode, oShadowShape, oAxisTime, oAxisOrdinal, oStatusSet) {
		// temp save param
		this._oAxisTime = oAxisTime;
		this._oAxisOrdinal = oAxisOrdinal;
		this._oStatusSet = oStatusSet;
		
		if (oShadowShape) {
			//create a resizing shadow g
			var aResizingShadowG = aSvgNode.select(".resizingShadow");
			if (aResizingShadowG.empty()) {
				aResizingShadowG = aSvgNode.append("g")
					.classed("resizingShadow", true);
			}
			var aResizeShapeG = aResizingShadowG.select("." + oShadowShape.getId() + "-resize");
			if (aResizeShapeG.empty()) {
				aResizeShapeG = aResizingShadowG.append("g").classed(oShadowShape.getId() + "-resize", true);
			}
			var aRealShapeG = aResizeShapeG.data(oShadowShape.dataSet);
			aRealShapeG.exit().remove();
			// draw shadow
			if (!aRealShapeG.empty()) {
				this._recursiveDraw(aRealShapeG, oShadowShape);
			}
		}
	};

	ShapeInRow.prototype._recursiveDraw = function (aGroup, oShape, sData) {
		var that = this;
		var aShape = aGroup.selectAll("." + oShape.getId())
			.data(function (d) {
				return that._bindRowData(d, sData, this, oShape);
			});

		this._drawPerTag(aShape, oShape);
		this._drawInsertTitle(aGroup, oShape);
	};

	ShapeInRow.prototype._bindRowData = function (oData, sData, oNode, oShape) {
		var aViewRange = this._oStatusSet && this._oStatusSet.aViewBoundary ? this._oStatusSet.aViewBoundary : undefined;
		var isBulk = oShape.getIsBulk();
		var oFilterParam, i;
		
		if (oData) {
			var aRetVal = [];
			if (oData.shapeData) {  // top shapes
				if (!(oData.shapeData instanceof Array)) {
					aRetVal = aRetVal.concat(oData.shapeData);
				} else {
					for (i = 0; i < oData.shapeData.length; i++) {
						if (oData.shapeData[i]) {
							oFilterParam = {};
							oFilterParam.oShape = oShape;
							oFilterParam.objectInfo = oData.objectInfoRef;
							oFilterParam.dShapeData = oData.shapeData[i];
							oFilterParam.aViewRange = aViewRange;
							if (!isBulk && (aViewRange !== undefined) && this._filterDataVisibleRange(oFilterParam)) {
								continue;
							}
							aRetVal = aRetVal.concat(oData.shapeData[i]);
						}
					}
				}
			} else if (sData && oData[sData]) {	// aggregated shapes and special attribute is identified
				if (oData[sData].length) { // is array
					for (i = 0; i < oData[sData].length; i++) {
						oFilterParam = {};
						oFilterParam.oShape = oShape;
						oFilterParam.objectInfo = oData.objectInfoRef;
						oFilterParam.dShapeData = oData[sData][i];
						oFilterParam.aViewRange = aViewRange;
						if (!isBulk && (aViewRange !== undefined) && this._filterDataVisibleRange(oFilterParam)) {
							continue;
						}
						aRetVal.push(oData[sData][i]);
					}
				} else {
					aRetVal.push(oData[sData]);
				}
			} else if (oData){	// inherigate parent data
				aRetVal = aRetVal.concat(oData);
			}
			//if the shape has a filterValidData method, filter valid data for the shape
			if (oShape.filterValidData && (aRetVal.length > 0)) {
				aRetVal = oShape.filterValidData(aRetVal, oData.objectInfoRef);
			}
			return aRetVal;
		}
	};
	
	ShapeInRow.prototype._filterDataVisibleRange = function (oFilterParam) {
		var oAxisTime = this._oAxisTime;
		var oAxisOrdinal = this._oAxisOrdinal;
		var aViewRange = oFilterParam.aViewRange;
	
		var isDuration = oFilterParam.oShape.getIsDuration(oFilterParam.dShapeData);
		if (isDuration) {
			var startTime = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			var endTime = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getEndTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			if (this._oStatusSet.bRTL === true){
				return (endTime > aViewRange[1]) || (startTime < aViewRange[0]);
			}else {
				return (endTime < aViewRange[0]) || (startTime > aViewRange[1]);
			}
		} else {
			var time = oAxisTime.timeToView(Format.abapTimestampToDate(oFilterParam.oShape.getTime(oFilterParam.dShapeData, undefined, oAxisTime, oAxisOrdinal, oFilterParam.objectInfo)));
			return (time > aViewRange[1]) || (time < aViewRange[0]);
		}
		return false;
	};

	ShapeInRow.prototype._drawPerTag = function (aShape, oShape) {
		switch (oShape.getTag()) {
			case "g":
				this._drawGroup(aShape, oShape);
				break;
			case "line":
				this._drawLine(aShape, oShape);
				break;
			case "rect":
				this._drawRect(aShape, oShape);
				break;
			case "text":
				this._drawText(aShape, oShape);
				break;
			case "path":
				this._drawPath(aShape, oShape);
				break;
			case "clippath":
				this._drawClipPath(aShape, oShape);
				break;
			case "image":
				this._drawImage(aShape, oShape);
				break;
			case "polygon":
				this._drawPolygon(aShape, oShape);
				break;
			case "polyline":
				this._drawPolyline(aShape, oShape);
				break;
			case "circle":
				this._drawCircle(aShape, oShape);
				break;
			case "defs":
				this._drawDefinitions(aShape, oShape);
				break;
			default:
				break;
		}

		if (oShape.getParent() === null) {
			// If the shape is not wrapped inside a group tag, then add the data attribute
			// otherwise only set the attribute on group element
			this.addDataAttributes(aShape);
		}

	};

	ShapeInRow.prototype._drawGroup = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("g")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			});

		aShape.exit().remove();

		var aAggregationShapes = oShape.getShapes();
		if (aAggregationShapes && aAggregationShapes.length > 0) {
			for (var i = 0; i < aAggregationShapes.length; i++) {
				this._recursiveDraw(aShape, aAggregationShapes[i], aAggregationShapes[i].mShapeConfig.getShapeDataName());
			}
		}
	};

	ShapeInRow.prototype._drawLine = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("line")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x1", function (d) {
				return oShape.getX1(d, fFindObjectInfo(this, oShape));
			})
			.attr("y1", function (d) {
				return oShape.getY1(d, fFindObjectInfo(this, oShape));
			})
			.attr("x2", function (d) {
				return oShape.getX2(d, fFindObjectInfo(this, oShape));
			})
			.attr("y2", function (d) {
				return oShape.getY2(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawRect = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("rect")
			.classed(oShape.getId(), true);

		aShape
			.classed(oShape.getHtmlClass(), function (d) {
				return oShape.getHtmlClass(d,fFindObjectInfo(this, oShape)) ? true : false;
			})
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.classed("enableClone", function (d) {
				return oShape.getEnableDnD(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("width", function (d) {
				return oShape.getWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("height", function (d) {
				return oShape.getHeight(d, fFindObjectInfo(this, oShape));
			})
			.attr("rx", function (d) {
				return oShape.getRx(d, fFindObjectInfo(this, oShape));
			})
			.attr("ry", function (d) {
				return oShape.getRy(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("clip-path", function (d) {
				return oShape.getClipPath(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawText = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;

		aShape.enter().append("text")
			.classed(oShape.getId(), true);
		aShape
			.classed("sapGanttShapeSvgText", true)
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("text-anchor", function (d) {
				return oShape.getTextAnchor(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			})
			.text(function (d) {
				return oShape.getText(d, fFindObjectInfo(this, oShape));
			}).each(function (d) { // wrapping, truncating
				var oSelf = d3.select(this);
				oSelf.selectAll("tspan").remove();
				var ObjectInfo = fFindObjectInfo(this, oShape);
				var nWrapWidth = oShape.getWrapWidth(d, ObjectInfo);
				var nTruncateWidth = oShape.getTruncateWidth(d, ObjectInfo);
				if (nTruncateWidth > -1) { // do truncating
					that._textTruncate(d, oSelf, nTruncateWidth, oShape.getEllipsisWidth(d, ObjectInfo));
				} else if (nWrapWidth > -1) { // do wrapping
					that._textWrap(d, this, nWrapWidth, oShape.getWrapDy(d, ObjectInfo));
				}
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._textTruncate = function (oData, oSelf, nTruncateWidth, nEllipsisWidth) {
		var nTextLength = oSelf.node().getComputedTextLength();

		if (nTextLength > nTruncateWidth) { // truncate needed
			var sText = oSelf.text().trim(),
				nTargetLength,
				bEllipsisAppear;

			if (nEllipsisWidth > -1 && nEllipsisWidth < nTruncateWidth) { // ellipsis enabled
				bEllipsisAppear = true;
				nTargetLength = nTruncateWidth - nEllipsisWidth;
			} else { // ellipsis disabled
				bEllipsisAppear = false;
				nTargetLength = nTruncateWidth;
			}

			// truncate
			var nTruncatCount = this._getTextTruncatCountByBinarySearch(oSelf, nTextLength, nTargetLength, sText);
			sText = sText.slice(0, nTruncatCount).trim();
			oSelf.text(sText);
			// add ellipsis if determined to be needed
			if (bEllipsisAppear) {
				if (sap.ui.Device.browser.name === "cr"){
					//Chrome's textlength is rendered differently to ie and ff. If the textlength specified in tspan and the direction is RTL, 
					//then text length is applied to whole text element 
					oSelf.append("tspan")
						.text("...")
						.attr("textLength", oSelf.node().getComputedTextLength())
						.attr("lengthAdjust", "spacingAndGlyphs");
				} else {
					oSelf.append("tspan")
					.text("...")
					.attr("textLength", nEllipsisWidth)
					.attr("lengthAdjust", "spacingAndGlyphs");
				}
			}
		}
	};
	/**
	 * Calculate the number of text letters that can fit in the target length.
	 * 
	 * First do a estimation based on the pixels each letter takes in screen and the target length,
	 * And compare three potential values (example: estimatedCount -1, estimatedCount, estimatedCount + 1) with the target length,
	 * IF one of the estimated values fit, then return
	 * ELSE do a binary search to find the most suitable number of text letters that can fit in the target length 
	 */
	ShapeInRow.prototype._getTextTruncatCountByBinarySearch = function (oSelf, nTextLength, nTargetLength, sText) {
		var nTargetCount = 0;
		if (nTargetLength > 0 && sText.length > 0) {
			//estimate the count of text letters to fullfil the target width
			var nEstimatedCount = Math.round(nTargetLength / Math.ceil(nTextLength / sText.length));
			var nPreCount, nMidCount, nNextCount;
			if (nEstimatedCount < 1) {
				nPreCount = nEstimatedCount;
				nMidCount = nEstimatedCount + 1;
				nNextCount = nEstimatedCount + 2;
			} else if (nEstimatedCount == sText.length) {
				nPreCount = nEstimatedCount - 2;
				nMidCount = nEstimatedCount - 1;
				nNextCount = nEstimatedCount;
			} else {
				nPreCount = nEstimatedCount - 1;
				nMidCount = nEstimatedCount;
				nNextCount = nEstimatedCount + 1;
			}

			var nTextWidthMid = oSelf[0][0].getSubStringLength(0, nMidCount);
			var nTextWidthNext = oSelf[0][0].getSubStringLength(0, nNextCount);
			var nTextWidthPre = oSelf[0][0].getSubStringLength(0, nPreCount);

			if (nTextWidthMid == nTargetLength || (nTextWidthMid < nTargetLength && nTextWidthNext > nTargetLength)) {// the estimated count is fit
				nTargetCount = nMidCount;
			} else if (nTextWidthNext == nTargetLength) {// the next estimated count is fit
				nTargetCount = nNextCount;
			} else if (nTextWidthPre == nTargetLength || (nTextWidthPre < nTargetLength && nTextWidthMid > nTargetLength)){// the previous estimated count is fit
				nTargetCount = nPreCount;
			} else {//the estimated count are not fit, then do a binary search
				var nStart = 1, nEnd = sText.length;
				//the estimated count are all too small for the target width
				if (nTextWidthNext < nTargetLength) {
					nStart = nNextCount;
					//the estimated count are all too big for the target width
				} else if (nTextWidthPre > nTargetLength) {
					nEnd = nPreCount - 1;
				}

				while (nStart <= nEnd) {
					nMidCount = Math.floor(nStart + (nEnd - nStart) / 2);
					nTextWidthMid = oSelf[0][0].getSubStringLength(0, nMidCount);
					nTextWidthNext = oSelf[0][0].getSubStringLength(0, nMidCount + 1);
					if (nTextWidthMid == nTargetLength || (nTextWidthMid < nTargetLength && nTextWidthNext > nTargetLength)) {
						nTargetCount = nMidCount;
						break;
					} else if (nTextWidthMid > nTargetLength) {
						nEnd = nMidCount - 1;
					} else {
						nStart = nMidCount + 1;
					}
				}
			}
		}
		return (nTargetCount >= 0 && nTargetCount <= sText.length) ? nTargetCount : 0;
	};

	ShapeInRow.prototype._textWrap = function (oData, oSelf, nWrapWidth, nWrapDy) {
		//var nTextLength = oSelf.node().getComputedTextLength();
		
		//if (nTextLength > nWrapWidth) { // wrap needed
			// tokenize the text
			// connect tokens in tspan, and check against nWrapWidth
			// create tspan with dy = nWrapDy
		//}
	};

	ShapeInRow.prototype._drawPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("path")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("d", function (d) {
				return oShape.getD(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})			
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawClipPath = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		/**
		 * After sort on expand chart, the clipPath became noneffective in Chrome (but works in IE)
		 * So, draw clipPath inside the tag <defs>, this can ensure the clipPath works in various browser
		 */
		aShape.enter().append("defs").classed(oShape.getId(), true);
		
		aShape.selectAll("clipPath").remove();
		
		aShape.append("clipPath")
				.attr("id", function (d) {  // Jean TODO: id is important for clip path, but why use htmlClass attribute?
					return oShape.getHtmlClass(d, fFindObjectInfo(this, oShape));
			}).append("path")// Jean TODO: why getPaths()[0] ? should loop and generate all, then .apend("path") should be detached from enter();
				.attr("d", function (d) {
					return oShape.getPaths()[0].getD(d, fFindObjectInfo(this, oShape));
			});
		
		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawImage = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		aShape.enter().append("image")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("xlink:href", function (d) {
				return oShape.getImage(d, fFindObjectInfo(this, oShape));
			})
			.attr("x", function (d) {
				return oShape.getX(d, fFindObjectInfo(this, oShape));
			})
			.attr("y", function (d) {
				return oShape.getY(d, fFindObjectInfo(this, oShape));
			})
			.attr("width", function (d) {
				return oShape.getWidth(d, fFindObjectInfo(this, oShape));
			})
			.attr("height", function (d) {
				return oShape.getHeight(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})			
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawPolygon = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("polygon")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("points", function (d) {
				return oShape.getPoints(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};
	
	ShapeInRow.prototype._drawPolyline = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("polyline")
			.classed(oShape.getId(), true);
		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("points", function (d) {
				return oShape.getPoints(d, fFindObjectInfo(this, oShape));
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};
	
	ShapeInRow.prototype._drawCircle = function (aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		var that = this;
		aShape.enter().append("circle")
			.classed(oShape.getId(), true);

		aShape
			.classed("hasTitle", function (d) {
				return oShape.getTitle(d, fFindObjectInfo(this, oShape)) ? true : false;
			})
			.attr("filter",function(d) {
				return oShape.getFilter(d, fFindObjectInfo(this, oShape));
			})
			.attr("transform", function (d) {
				return oShape.getTransform(d, fFindObjectInfo(this, oShape));
			})
			.attr("aria-label", function (d) {
				return oShape.getAriaLabel(d, fFindObjectInfo(this, oShape));
			})
			.attr("cx", function (d) {
				return oShape.getCx(d, fFindObjectInfo(this, oShape));
			})
			.attr("cy", function (d) {
				return oShape.getCy(d, fFindObjectInfo(this, oShape));
			})
			.attr("r", function (d) {
				return oShape.getR(d, fFindObjectInfo(this, oShape));
			})
			.attr("style", function (d){
				return oShape.getStyle(d, fFindObjectInfo(this, oShape));
			});

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawDefinitions = function(aShape, oShape) {
		var fFindObjectInfo = this._findObjectInfo;
		aShape.enter().append("defs")
		.classed(oShape.getId(), true);
		aShape.each(function(d, i){
			jQuery(this).empty();
			var sHtml = oShape.getContent(d, fFindObjectInfo(this));
			var sXML = "<svg xmlns='" + d3.ns.prefix.svg + "'>" + sHtml + "</svg>";
			this.appendChild(jQuery(sXML)[0].firstChild);
		}); 

		aShape.exit().remove();
	};

	ShapeInRow.prototype._drawInsertTitle = function (aGroup, oShape) {
		var fFindObjectInfo = this._findObjectInfo;

		var aShape = aGroup.selectAll("." + oShape.getId() + ".hasTitle");
		aShape.select("title").remove();
		aShape.insert("title", ":first-child")
			.each(function (d) {
				var oSelf = d3.select(this);
				oSelf.selectAll("tspan").remove();
				
				// IE11 doesn't render '\n' newline characters in svg tooltip, here we use tag <tspan> elements as a solution
				// besides, IE11 renders consecutive <tspan> elements with style 'display:block' with double line spacing, 
				// so the style is applied to every other element
				if (sap.ui.Device.browser.msie) {
					var aLines = oShape.getTitle(d, fFindObjectInfo(this, oShape)).split("\n");
					for(var i = 0; i < aLines.length; i++) {
						oSelf.append("tspan")
							.classed("sapGanttTooltipLine", true)
							.text(aLines[i]);
					}
				} else {
					oSelf.text(oShape.getTitle(d, fFindObjectInfo(this, oShape)));
				}
			});
	};

	ShapeInRow.prototype._findObjectInfo = function (oNode, oShape, isSelectedShape) {
		var oTargetNode = oNode;
		while (!oTargetNode.__data__.objectInfoRef) {
			oTargetNode = oTargetNode.parentNode;
		}
		return oTargetNode.__data__.objectInfoRef;
	};

	/**
	 * Add DataSet attribute on the Shape DOM element for quick reference.
	 * 
	 * If consumer doesn't specify the id <b>reserved keyword</b> in their data, use
	 * jQuery.sap.uid() instead
	 * 
	 * @param {object} oShape D3 DOM element
	 * @private
	 */
	ShapeInRow.prototype.addDataAttributes = function(oShape) {
		oShape.attr("data-sap-gantt-shape-id", function(d){
			//the'__id__' is a reference to the real index attribute of user's data, which is generated in Utility generateRowUid
			return d.__id__; 
		});
	};

	ShapeInRow.prototype.destroySvg = function (aSvgNode, oShape) {};

	return ShapeInRow;
}, true);

}; // end of sap/gantt/drawer/ShapeInRow.js
if ( !jQuery.sap.isDeclared('sap.gantt.drawer.VerticalLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.drawer.VerticalLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/drawer/VerticalLine",[
	"sap/gantt/misc/Utility", "./Drawer",
	"sap/ui/thirdparty/d3"
], function (Utility, Drawer) {
	"use strict";

	/**
	 * Constructor for a new Vertical Line.
	 *
	 * @class
	 * A drawer for constructing multiple vertical line in the Gantt Chart
	 * @extends sap.gantt.drawer.Drawer
	 *
	 * @author SAP SE
	 * @version 
	 *
	 * @constructor
	 * @private
	 */
	var VerticalLine = Drawer.extend("sap.gantt.drawer.VerticalLine", /** @lends sap.gantt.drawer.VerticalLine.prototype */ {
		/**
		 * VerticalLine drawer.
		 *
		 * @param {object} oAxisTime an object know how to convert time and coordinates
		 */
		constructor : function(oAxisTime) {
			this.oAxisTime = oAxisTime;
		}
	});

	VerticalLine.prototype.drawSvg = function ($GanttChartSvg) {

		var $Chart = jQuery($GanttChartSvg.node()),
			iChartWidth = $Chart.width(),
			iChartHeight = Math.max.apply(null, $Chart.map(function(){ return jQuery(this).height(); }).get());
//			iWindowHeight = document.body.clientHeight;
		// 1month, 1day etc
		var oZoomStrategy = this.oAxisTime.getZoomStrategy();
		var aTickTimeIntervals = this.oAxisTime.getTickTimeIntervalLabel(oZoomStrategy.getTimeLineOption(), null, [0, iChartWidth]);

		// the second item have all the tick time info
		var aTicks = aTickTimeIntervals[1];

		var sPathContent = "";
		// By Default line width is 1, is need to minus the half width of line
		for (var i = 0; i < aTicks.length; i++) {
			sPathContent += " M" +
				" " + (aTicks[i].value - 1 / 2) +
				" 0" +
				" L" +
				" " + (aTicks[i].value - 1 / 2) +
				" " + (iChartHeight);//(iWindowHeight);
		}
		if (sPathContent) {
			$GanttChartSvg.selectAll(".sapGanttChartVerticalLine").remove();
			var $firstRect = jQuery($GanttChartSvg.select("rect").node());
			var sClassName = $firstRect.attr("class") ? $firstRect.attr("class").split(" ")[0] : "";
			if (sap.ui.getCore().byId(sClassName) && sap.ui.getCore().byId(sClassName).getMetadata().getName() === "sap.gantt.shape.ext.RowBackgroundRectangle") {
				$GanttChartSvg.select("g").append("g").classed("sapGanttChartVerticalLine", true)
				.append("path").attr("d", sPathContent);
			} else {
				$GanttChartSvg.insert("g", ":first-child")
				.classed("sapGanttChartVerticalLine", true)
				.append("path").attr("d", sPathContent);
			}
		}
	};

	VerticalLine.prototype.destroySvg = function ($GanttChartSvg) {
		if ($GanttChartSvg) {
			$GanttChartSvg.selectAll(".sapGanttChartVerticalLine").remove();
		}
	};

	return VerticalLine;
}, true);

}; // end of sap/gantt/drawer/VerticalLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.eventHandler.TimePeriodZoomHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.eventHandler.TimePeriodZoomHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/gantt/eventHandler/TimePeriodZoomHandler",[
	"jquery.sap.global", "sap/ui/base/Object", "sap/gantt/misc/Format", "sap/gantt/config/TimeHorizon",
	"sap/gantt/drawer/TimePeriodZoomRectangle", "sap/ui/core/Orientation", "sap/gantt/misc/Utility"
], function (jQuery, BaseObject, Format, TimeHorizon, TimePeriodZoomRectangle, Orientation, Utility) {
	"use strict";

	/**
	 * Constructor for a new TimePeriodZoomHandler
	 *
	 * Initialize the handler and reserve the caller of this handler as the '_oSourceChart'
	 * currently, '_oSourceChart' may be an instance of GanttChart or GanttChartWithTable
	 * @param {object} oChart an instance of the caller
	 * 
	 * @class
	 * Defines the properties required for the initialization of time period zooming
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.eventHandler.TimePeriodZoomHandler
	 */
	var TimePeriodZoomHandler = BaseObject.extend("sap.gantt.eventHandler.TimePeriodZoomHandler", {
		constructor : function (oChart) {
			BaseObject.call(this);
			this._oSourceChart = oChart;
			this._oTimePeriodZoomRectangleDrawer = new TimePeriodZoomRectangle();
			this._bActive = false;
			//we need to lock mode because when user is dragging but release(key up) the Z button on keyboard,
			//gantt chart must keep the cursor style.
			this._bLocked = false;
			this._bMouseOnSvg = false;
			this._bEnableSetVisibleHorizon = false;
			this._sAutoScrollDirection = undefined;
		}
	});

	TimePeriodZoomHandler.prototype.activate = function (bSuppressEvent){
		this._bActive = true;
		var $svgCtn = jQuery(this._oSourceChart.getDomSelectorById("svg-ctn"));
		$svgCtn.css("cursor", "crosshair");
		if (!bSuppressEvent){
			this.fireActiveStatusChangeEvent(this._bActive);
		}
	};

	TimePeriodZoomHandler.prototype.deactivate = function (bSuppressEvent){
		this._bActive = false;
		var $svgCtn = jQuery(this._oSourceChart.getDomSelectorById("svg-ctn"));
		$svgCtn.css("cursor", "auto");
		if (!bSuppressEvent){
			this.fireActiveStatusChangeEvent(this._bActive);
		}
	};

	TimePeriodZoomHandler.prototype.invertActiveStatus = function (){
		if (this._bActive){
			this.deactivate();
		} else {
			this.activate();
		}
	};

	TimePeriodZoomHandler.prototype.fireActiveStatusChangeEvent = function (bActive){
		this._oSourceChart.fireEvent("_timePeriodZoomStatusChange", {
			isActive: bActive
		});
	};

	TimePeriodZoomHandler.prototype.isTimePeriodZoomEnabled = function (){
		var oAxisTimeStrategy = this._oSourceChart.getAxisTimeStrategy();
		return oAxisTimeStrategy.isTimePeriodZoomEnabled() && this._bMouseOnSvg;
	};

	TimePeriodZoomHandler.prototype.isActive = function (){
		return this._bActive;
	};

	TimePeriodZoomHandler.prototype.handleDragStart = function (oEvent, bSuppressEvent){

		var oGantt = this._oSourceChart;
		this._bLocked = true;
		this._bEnableSetVisibleHorizon = true;

		this.oStartEvent = oEvent;
		this.oStartTime = this._caculateEventTime(oEvent);

		this.createRectangle(this.oStartTime);

		var $GanttSvg = jQuery(oGantt.getDomSelectorById("svg"));

		$GanttSvg.unbind("mousemove.timePeriodZoomDragDrop");
		jQuery(document.body).unbind("mouseup.timePeriodZoomDragDrop");
		oGantt.detachHorizontalScroll(this.handleAutoScroll, this);

		$GanttSvg.bind("mousemove.timePeriodZoomDragDrop", this.handleDragging.bind(this));
		jQuery(document.body).bind("mouseup.timePeriodZoomDragDrop", this.handleDragEnd.bind(this));
		oGantt.attachHorizontalScroll(this.handleAutoScroll, this);

		if(!bSuppressEvent){
			this._bMouseOnSvg = true;
			oGantt.fireEvent("_timePeriodZoomOperation", {
				type: "dragStart",
				dragStartTime: this.oStartTime,
				originalEvent: oEvent
			});
		}
	};

	TimePeriodZoomHandler.prototype.createRectangle = function (oDragStartTime){
		var oGantt = this._oSourceChart;
		var iDragStartX = oGantt.getAxisTime().timeToView(oDragStartTime);
		var aSvgNode = d3.select(oGantt.getDomSelectorById("svg"));
		var iRectHeight = jQuery(oGantt.getDomSelectorById("svg-ctn")).height();
		this._oTimePeriodZoomRectangleDrawer.drawSvg(aSvgNode, iDragStartX, iRectHeight);
	};

	TimePeriodZoomHandler.prototype.handleDragging = function (oEvent, bSuppressEvent) {
		var oGantt = this._oSourceChart;

		var oDraggingTime = this._caculateEventTime(oEvent);
		this.updateRectangle(this.oStartTime, oDraggingTime);

		if(!bSuppressEvent){
			var sDirection = oGantt._handleAutoScroll(oEvent);//trigger auto-scrolling when dragging
			if (sDirection){
				this._sAutoScrollDirection = sDirection;
			}
			oGantt.fireEvent("_timePeriodZoomOperation", {
				type: "dragging",
				dragStartTime: this.oStartTime,
				draggingTime: oDraggingTime,
				originalEvent: oEvent
			});
		}
	};

	TimePeriodZoomHandler.prototype.updateRectangle = function (oDragStartTime, oDraggingTime){
		var oGantt = this._oSourceChart;
		var iDragStartX = oGantt.getAxisTime().timeToView(oDragStartTime);
		var iDraggingX = oGantt.getAxisTime().timeToView(oDraggingTime);
		var aSvgNode = d3.select(oGantt.getDomSelectorById("svg"));
		if (iDraggingX > iDragStartX){
			this._oTimePeriodZoomRectangleDrawer.updateSvg(aSvgNode, iDragStartX, iDraggingX);
		} else {
			this._oTimePeriodZoomRectangleDrawer.updateSvg(aSvgNode, iDraggingX, iDragStartX);
		}
	};

	TimePeriodZoomHandler.prototype.handleDragEnd = function (oEvent, bSuppressEvent) {
		var oGantt = this._oSourceChart;
		oGantt._oAutoScrollHandler.stop();
		this._bLocked = false;
		this.deactivate();
		this._sAutoScrollDirection = undefined;

		this.destoryRectangle();

		var oDragEndTime;

		if (this._bEnableSetVisibleHorizon){
			var iDragStartX = oGantt.getAxisTime().timeToView(this.oStartTime);
			var iDraggingX = this._caculateXPosition(oEvent);
			oDragEndTime = this._caculateEventTime(oEvent);
			var oEndTime = oDragEndTime;

			// Time period zoom only can be triggered when drag and drop than 5 px 
			var iOperationIgnoreExtents = 5;
			if (Math.abs(iDraggingX - iDragStartX) > iOperationIgnoreExtents){ 

				var oStartTime = this.oStartTime;

				if (oEndTime.getTime() < oStartTime.getTime()){
					var oTempTime = oStartTime;
					oStartTime = oEndTime;
					oEndTime = oTempTime;
				}

				var oTargetTimeHorizon = new TimeHorizon({
					startTime: oStartTime,
					endTime: oEndTime
				});
				oGantt.syncVisibleHorizon(oTargetTimeHorizon);
			}
		}

		var $GanttSvg = jQuery(oGantt.getDomSelectorById("svg"));
		$GanttSvg.unbind("mousemove.timePeriodZoomDragDrop");
		jQuery(document.body).unbind("mouseup.timePeriodZoomDragDrop");
		oGantt.detachHorizontalScroll(this.handleAutoScroll, this);

		if(!bSuppressEvent){
			var iVisibleWidth = oGantt.getVisibleWidth();
			oGantt.fireEvent("_timePeriodZoomOperation", {
				type: "dragEnd",
				dragStartTime: this.oStartTime,
				dragEndTime: oDragEndTime,
				visibleWidth: iVisibleWidth,
				originalEvent: oEvent
			});
			this.fireActiveStatusChangeEvent(this._bActive);
		}
	};

	TimePeriodZoomHandler.prototype.destoryRectangle = function(){
		var oGantt = this._oSourceChart;
		var aSvgNode = d3.select(oGantt.getDomSelectorById("svg"));
		this._oTimePeriodZoomRectangleDrawer.destroySvg(aSvgNode);
	};

	TimePeriodZoomHandler.prototype.handleAutoScroll = function (oEvent) {
		if (this._bMouseOnSvg){
			var oGantt = this._oSourceChart;
			var oParameter = oEvent.getParameters();
			var iTimeBias;

			if (this._sAutoScrollDirection === "scrollLeft"){
				var oVisibleHorizonStratTime = Format.abapTimestampToDate(oParameter.startTime);
				iTimeBias = oVisibleHorizonStratTime.getTime() - this.oStartTime.getTime();
			} else if (this._sAutoScrollDirection === "scrollRight"){
				var oVisibleHorizonEndTime = Format.abapTimestampToDate(oParameter.endTime);
				iTimeBias = oVisibleHorizonEndTime.getTime() - this.oStartTime.getTime();
			}

			oGantt.fireEvent("_timePeriodZoomOperation", {
				type: "autoScroll",
				timeBias: iTimeBias,
				originalEvent: oEvent
			});
		}
	};

	TimePeriodZoomHandler.prototype.attachEvents = function(){
		var $GanttSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		$GanttSvg.bind("mouseenter.timePeriodZoomDragDrop", this.handleMouseEnter.bind(this));
		$GanttSvg.bind("mouseleave.timePeriodZoomDragDrop", this.handleMouseLeave.bind(this));
	};

	TimePeriodZoomHandler.prototype.detachEvents = function(){
		var $GanttSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		$GanttSvg.unbind("mouseenter.timePeriodZoomDragDrop");
		$GanttSvg.unbind("mouseleave.timePeriodZoomDragDrop");
	};

	TimePeriodZoomHandler.prototype.handleMouseEnter = function (oEvent) {
		this._bMouseOnSvg = true;
		this._bLocked = true;
		this.setEnableSetVisibleHorizon(true);
	};

	TimePeriodZoomHandler.prototype.handleMouseLeave = function (oEvent) {
		this._bMouseOnSvg = false;
		this._oSourceChart._oAutoScrollHandler.stop();
		this._bLocked = false;
		this.setEnableSetVisibleHorizon(false);
	};

	TimePeriodZoomHandler.prototype.setEnableSetVisibleHorizon = function (bEnable, bSuppressEvent) {
		this._bEnableSetVisibleHorizon = bEnable;

		if(!bSuppressEvent){
			var oGantt = this._oSourceChart;
			oGantt.fireEvent("_timePeriodZoomOperation", {
				type: "enableSetVisibleHorizon",
				enable: bEnable
			});
		}
	};

	TimePeriodZoomHandler.prototype.calculateTargetVisibleHorizonByTimeBias = function (iTimeBias) {
		var oTargetVisibleTimeHorizon;
		var oTargetTime;

		if (iTimeBias !== undefined){
			var oGantt = this._oSourceChart;
			var oTotalHorizon = oGantt.getAxisTimeStrategy().getTotalHorizon();
			oTargetTime = new Date();
			oTargetTime.setTime(this.oStartTime.getTime() + iTimeBias);

			if (iTimeBias < 0) { //left auto-scroll
				var oTotalHorizonStartTime = Format.abapTimestampToDate(oTotalHorizon.getStartTime());
	
				if (oTargetTime.getTime() < oTotalHorizonStartTime.getTime()) {// beyond the left boundary
					oTargetTime = oTotalHorizonStartTime;
					this.oStartTime.setTime(oTargetTime.getTime() - iTimeBias);
				}

				oTargetVisibleTimeHorizon = new TimeHorizon({
					startTime: oTargetTime
				});
			} else { //right auto-scroll
				var oTotalHorizonEndTime = Format.abapTimestampToDate(oTotalHorizon.getEndTime());

				if (oTargetTime.getTime() > oTotalHorizonEndTime.getTime()) {// beyond the right boundary
					oTargetTime = oTotalHorizonEndTime;
					this.oStartTime.setTime(oTargetTime.getTime() - iTimeBias);
				}

				oTargetVisibleTimeHorizon = new TimeHorizon({
					startTime: undefined,
					endTime: oTargetTime
				});
			}
		}
		

		return oTargetVisibleTimeHorizon;
	};

	TimePeriodZoomHandler.prototype.calculateTargetVisibleHorizon = function (oEventData, bSyncStartTime) {
		var oTargetVisibleTimeHorizon;

		if (oEventData.dragEndTime){
			var oGantt = this._oSourceChart;
			var oAxisTimeStrategy = oGantt.getAxisTimeStrategy();
			var oOriginalVisibleHorizon = oAxisTimeStrategy.getVisibleHorizon();
			var iGanttVisibleWidth = oGantt.getVisibleWidth();
			var iDragStartTime = oEventData.dragStartTime.getTime();
			var iDragEndTime = oEventData.dragEndTime.getTime();

			var oStartTime;
			if (bSyncStartTime) {
				oStartTime = iDragStartTime < iDragEndTime ? oEventData.dragStartTime : oEventData.dragEndTime;
			} else {
				oStartTime = Format.abapTimestampToDate(oAxisTimeStrategy.getVisibleHorizon().getStartTime());
			}

			oTargetVisibleTimeHorizon = Utility.calculateHorizonByWidth(oOriginalVisibleHorizon, oEventData.visibleWidth, iGanttVisibleWidth, oStartTime);
		}

		return oTargetVisibleTimeHorizon;
	};

	TimePeriodZoomHandler.prototype.syncTimePeriodZoomOperation = function(oEvent, bTimeScrollSync, sOrientation){
		var oGantt = this._oSourceChart;
		var oParameter = oEvent.getParameters();

		if (sOrientation === Orientation.Vertical){
			if (oParameter.type === "dragStart"){
				this.handleDragStart(oParameter.originalEvent, true);
			} else if (oParameter.type === "dragging"){
				this.handleDragging(oParameter.originalEvent, true);
			} else if (oParameter.type === "dragEnd"){
				this.handleDragEnd(oParameter.originalEvent, true);
			} else if (oParameter.type === "enableSetVisibleHorizon"){
				this.setEnableSetVisibleHorizon(oParameter.enable, true);
			} else if (oParameter.type === "autoScroll"){
				if (!bTimeScrollSync) {
					var oTargetTimeHorizon = this.calculateTargetVisibleHorizonByTimeBias(oParameter.timeBias);
					if (oTargetTimeHorizon) {
						oGantt.syncVisibleHorizon(oTargetTimeHorizon);
					}
				}
			}
		} else if (sOrientation === Orientation.Horizontal){
			if (oParameter.type === "dragStart" && bTimeScrollSync){
				this.createRectangle(oParameter.dragStartTime);
			} else if (oParameter.type === "dragging" && bTimeScrollSync){
				this.updateRectangle(oParameter.dragStartTime, oParameter.draggingTime);
			} else if (oParameter.type === "dragEnd"){
				if (bTimeScrollSync){
					this.destoryRectangle();
				}
				var oTargetTimeHorizon = this.calculateTargetVisibleHorizon(oParameter, bTimeScrollSync);
				if (oTargetTimeHorizon) {
					oGantt.syncVisibleHorizon(oTargetTimeHorizon);
				}
			}
		}
		
	};

	TimePeriodZoomHandler.prototype._caculateXPosition = function (oEvent) {
		var oGantt = this._oSourceChart;

		var iMouseXPos = oGantt._getMouseXPos(oEvent);
		var aSvgNode = jQuery(oGantt.getDomSelectorById("svg"));
		if (aSvgNode.offset()){
			var iXPosition = iMouseXPos - aSvgNode.offset().left || oEvent.offsetX;
		} else {
			return iMouseXPos;
		}

		return iXPosition;
	};

	TimePeriodZoomHandler.prototype._caculateEventTime = function (oEvent) {
		var oGantt = this._oSourceChart;
		var iXPosition = this._caculateXPosition(oEvent);
		return oGantt.getAxisTime().viewToTime(iXPosition);
	};

	return TimePeriodZoomHandler;
}, true);
}; // end of sap/gantt/eventHandler/TimePeriodZoomHandler.js
if ( !jQuery.sap.isDeclared('sap.gantt.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

/**
 * Initialization Code and shared classes of library sap.gantt.
 */
jQuery.sap.declare('sap.gantt.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/gantt/library",['jquery.sap.global', 'sap/ui/core/library', 'sap/gantt/misc/Utility', 'sap/ui/base/DataType'],
	function(jQuery, library1, Utility, DataType) {
	"use strict";


	/**
	 * UI5 library: sap.gantt.
	 *
	 * @namespace
	 * @name sap.gantt
	 * @public
	 */

	// library dependencies

	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.gantt",
		dependencies : ["sap.ui.core", "sap.ui.layout", "sap.ui.table", "sap.m"],
		types: [
			"sap.gantt.control.ToolbarType",
			"sap.gantt.SelectionMode",
			"sap.gantt.shape.ShapeCategory",
			"sap.gantt.def.filter.MorphologyOperator",
			"sap.gantt.def.filter.ColorMatrixValue",
			"sap.gantt.shape.ext.rls.RelationshipType",
			"sap.gantt.config.ZoomControlType",
			"sap.gantt.GenericArray",
			"sap.gantt.dragdrop.GhostAlignment"
		],
		interfaces: [
			"sap.gantt.GanttChartBase"
		],
		controls: [
			"sap.gantt.control.Toolbar",
			"sap.gantt.GanttChart",
			"sap.gantt.GanttChartWithTable",
			"sap.gantt.GanttChartContainer"
		],
		elements: [
			"sap.gantt.config.TimeHorizon",
			"sap.gantt.config.TimeAxis",
			"sap.gantt.config.ToolbarGroup",
			"sap.gantt.config.Mode",
			"sap.gantt.config.ModeGroup",
			"sap.gantt.config.LayoutGroup",
			"sap.gantt.config.ExpandChart",
			"sap.gantt.config.ExpandChartGroup",
			"sap.gantt.config.TimeZoomGroup",
			"sap.gantt.config.ToolbarScheme",
			"sap.gantt.config.Hierarchy",
			"sap.gantt.config.HierarchyColumn",
			"sap.gantt.config.ColumnAttribute",
			"sap.gantt.config.GanttChartLayout",
			"sap.gantt.config.ContainerLayout",
			"sap.gantt.config.SettingItem",
			"sap.gantt.config.SettingGroup",
			"sap.gantt.config.ObjectType",
			"sap.gantt.config.ChartScheme",
			"sap.gantt.config.Locale",
			"sap.gantt.config.Shape",
			"sap.gantt.def.SvgDefs",
			"sap.gantt.axistime.AxisTimeStrategyBase",
			"sap.gantt.AdhocLine"
		],
		noLibraryCSS: false,
		version: "1.50.5"
	});
	
	this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
	/**
	 * Different selection mode for GanttChart
	 *
	 * @enum {string}
	 * @private
	 */
	sap.gantt.SelectionMode = {

		/**
		 * Support Multiple Selection with Ctrl key
		 * From version 1.40 to upper versions, support multiple selection without Ctrl key for rows
		 * @private
		 */
		MultiWithKeyboard : "MultiWithKeyboard",
		
		/**
		 * Support Multiple Selection without Ctrl key
		 * @private
		 */
		Multiple : "Multiple",
		
		/**
		 * Only Support Single Selection
		 * @private
		 */
		Single : "Single",
		
		/**
		 * Do not support Selection
		 * @private
		 */
		None : "None"
	};	

	/**
	 * The layer of adhoc line in chart area
	 *
	 * @enum {string}
	 * @public
	 */
	sap.gantt.AdhocLineLayer = {

		/**
		 * Adhoc lines are on top of all other shapes and patterns.
		 * @public
		 */
		Top : "TOP",

		/**
		 * Adhoc lines are below all other shapes. If a calendar is shown in the chart area,
		 * adhoc lines are on top of the calendar.
		 * @public
		 */
		Bottom : "BOTTOM"
	};

	/**
	 * Different types for a tool bar (predefined types)
	 *
	 * @enum {string}
	 * @public
	 */
	sap.gantt.control.ToolbarType = {

		/**
		 * Toolbar of GanttContainer
		 * @private
		 */
		Global : "GLOBAL",

		/**
		 * Toolbar of GanttWithTable
		 * @private
		 */
		Local : "LOCAL"
	};

	/**
	 * A string type that represents SVG fill color values.
	 *
	 * Allowed values are {@link sap.ui.core.CSSColor} and {@link sap.m.ValueColor} and LESS parameter
	 *
	 * The empty string and invalid less parameter fall back to default black color.
	 *
	 * @public
	 */
	sap.gantt.ValueSVGPaintServer = DataType.createType('sap.gantt.ValueSVGPaintServer', {
		isValid : function(vValue) {
			var bValid = sap.m.ValueCSSColor.isValid(vValue);
			if (!bValid){
				bValid = /(?:url\(['|"]?)(.*?)(?:['|"]?\))|^[@|#](.*?)$|initial|transparent|none|inherit/.test(vValue);
			}
			return bValid;
		}
	}, DataType.getType('string'));
	sap.gantt.ValueSVGPaintServer.setNormalizer(
		/**
		 * Check if the input value is an valid value for property fill and stroke. It allows hex/name color, URL pattern,
		 * Otherwise try to match the input with LESS parameters
		 * 
		 * @param {vValue} vValue user passed value
		 * @return {string} valid paint value
		 */
		function (vValue) {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			if (!vValue) {
				// Return if input is undefined
				return vValue;
			}

			if (vValue.substr(0, 1) === "@") {
				vValue = vValue.substring(1);
			}

			var sRetValue = sap.ui.core.theming.Parameters.get(vValue) || vValue;
			return sRetValue;
		}
	);
	
	/**
	 * The <code>sap.gantt.shape</code> namespace.
	 * 
	 * This namespace provides the following configuration related features:
	 * <ul>
	 * 		<li>A base class <code>sap.gantt.shape.Shape</code> is provided directly in this namespace</li>
	 * 		<li>A default selection shape class <code>sap.gantt.shape.SelectedShape</code> is provided directly in this namespace</li>
	 * 		<li>All basic shapes corresponding to SVG tag are provided directly in this namespace</li>
	 * 		<li>Extended shapes from tag shapes are provided in sub-namespace <code>ext</code></li>
	 * 		<li>Special calendar shape, which should be used in combination with the calendar paint server, is provided in sub-namespace<code>cal</code></li>
	 * </ul>
	 * See {@link http://www.w3.org/TR/SVG/ SVG 1.1 specification}
	 *
	 * @namespace
	 * @name sap.gantt.shape
	 * @public
	 */
	
	/**
	 * Namespace <code>sap.gantt.config</code> provides all configuration related objects and default configuration value for optional ones.
	 *
	 * @namespace
	 * @name sap.gantt.config
	 * @public
	 */

	/**
	 * Shape Categories.
	 * 
	 * Different categories use different Drawers. Therefore, different categories may have different designs of parameters in their getter methods.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.shape.ShapeCategory
	 * @public
	 */
	sap.gantt.shape.ShapeCategory = {
		
		/**
		 * Shapes attached to one row.
		 * @public
		 */
		InRowShape: "inRowShape",
		
		/**
		 * Relationship shapes connecting two in-row shape instances.
		 * @public
		 */
		Relationship: "relationship"
	};

	/**
	 * Morphology Operators.
	 * 
	 * The operator decides the morphology to make the shape fatter or slimmer.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.def.filter.MorphologyOperator
	 * @public
	 */
	sap.gantt.def.filter.MorphologyOperator = {
		
		/**
		 * Fatter Morphology.
		 * @public
		 */
		Dilate: "dilate",
		
		/**
		 * Slimmer Morphology.
		 * @public
		 */
		Erode: "erode"
	};

	/**
	 * Color Matrix Values.
	 * 
	 * The matrix decides what target color from source color.
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.def.filter.ColorMatrixValue
	 * @public
	 */
	sap.gantt.def.filter.ColorMatrixValue = {
		
		/**
		 * Turns every color to white.
		 * @public
		 */
		AllToWhite: "-1 0 0 0 1, 0 -1 0 0 1, 0 0 -1 0 1, 0 0 0 1 0",
		
		/**
		 * Turns every color to black.
		 * @public
		 */
		AllToBlack: "-1 0 0 0 0, 0 -1 0 0 0, 0 0 -1 0 0, 0 0 0 1 0"
	};
	
	/**
	 * Type of relationships
	 *
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.shape.ext.rls.RelationshipType
	 * @public
	 */
	sap.gantt.shape.ext.rls.RelationshipType = {
		/**
		 * Finish to finish type.
		 * @public
		 */
		FinishToFinish: 0,
		/**
		 * Finish to start type.
		 * @public
		 */
		FinishToStart: 1,
		/**
		 * Start to finish type.
		 * @public
		 */
		StartToFinish: 2,
		/**
		 * Start to start type.
		 * @public
		 */
		StartToStart: 3
	};

	/**
	 * Define the type of zoom control in global tool bar 
	 * 
	 * @enum {string}
	 * @name sap.gantt.config.ZoomControlType
	 * @public
	 */
	sap.gantt.config.ZoomControlType = {
			/**
			 * Uses the SliderWithButtons control to modify the time zoom rate.
			 * The SliderWithButtons control consists of zoom in and zoom out magnifier buttons and a slider. 
			 * @public
			 */
			SliderWithButtons: "sliderWithButtons",
			
			/**
		     * Uses the SliderOnly control to modify the time zoom rate.
			 * The SliderOnly control only consists of a slider.   
			 * @public
			 */
			SliderOnly: "sliderOnly",
			
			/**
			 * Uses the ButtonsOnly control to modify the time zoom rate.
			 * The SliderOnly control only consists of zoom in and zoom out buttons. 
			 * @public
			 */
			ButtonsOnly: "buttonsOnly",
			
			/**
			 * Uses the Select control to modify the time zoom rate.
			 * The Select control consists of a drop down list to select a suitable zoom rate.
			 * @public
			 */
			Select: "select",
			
			/**
			 * Display no zoom control
			 * @public
			 */
			None: "none"
		};

	/**
	 * Different time units used as part of the zoom level. They are names of d3 time unit classes.
	 * 
	 * @enum {string}
	 * @name sap.gantt.config.TimeUnit
	 * @public
	 */
	sap.gantt.config.TimeUnit = {
			
		/**
		 * Time unit of minute.
		 * @public
		 */
		minute: "d3.time.minute",
		
		/**
		 * Time unit of hour.
		 * @public
		 */
		hour: "d3.time.hour",
		
		/**
		 * Time unit of day.
		 * @public
		 */
		day: "d3.time.day",
		
		/**
		 * Time unit of week.
		 * @public
		 */
		week: "d3.time.week",
		
		/**
		 * Time unit of month.
		 * @public
		 */
		month: "d3.time.month",
		
		/**
		 * Time unit of year.
		 * @public
		 */
		year: "d3.time.year"
	};

	/**
	 * Defines the default configuration planHorizon.
	 * 
	 * <p>From one year ago, to one year from now.</p>
	 * @public
	 */
	sap.gantt.config.DEFAULT_PLAN_HORIZON = new sap.gantt.config.TimeHorizon({
		startTime: new Date((new Date()).getTime() - 31536000000),
		endTime: new Date((new Date()).getTime() + 31536000000)
	});

	/**
	 * Defines the default configuration initHorizon.
	 * 
	 * <p>From one month ago, to one year from now.</p>
	 * @public
	 */
	sap.gantt.config.DEFAULT_INIT_HORIZON = new sap.gantt.config.TimeHorizon({
		startTime: new Date((new Date()).getTime() - 2628000000),
		endTime: new Date((new Date()).getTime() + 2628000000)
	});

	/**
	 * Defines the default configuration of the time zoom level.
	 * <p>The default time zoom level includes a granularity factor that determines the length of the interval between neighboring vertical lines.
	 *  
	 * The time zoom level now is a JSON object with the granularity as the key and some internal information such as formatting. Each level has 3 interval objects
	 * describing the time unit, the time span, and the jump condition to the next level. The zoom level decides how the time axis behaves and how ticks are displayed.
	 * 
	 * Take <code>"12hour"</code> level for example
	 * 	<ul>
	 * 		<li><code>"12hour":</code> - Granularity level ID.
	 * 			<ul>
	 * 				<li>
	 * 					<code>"innerInterval"</code> - Time interval between neighboring vertical lines is 12 hours. The jump condition to the next level is "1day" when the interval exceeds 90 pixels.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.hour</code> - Time unit is hour.</li>
	 * 						<li><code>"span": 12</code> - Span is 12.</li>
	 * 						<li><code>"range": 90</code> - Jumping condition is 90 pixels between neighboring vertical lines.</li>
	 * 					</ul>
	 * 				</li>
	 * 				<li>
	 * 					<code>largeInterval</code> - Time interval of top row along the time axis is 1 day. Formatted in the locale language with the format string. This zoom level implements an interval larger than the interval in the default zoom level.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.day</code> - </li>
	 * 						<li><code>"span": 1</code> - Time span is 1.</li>
	 * 						<li><code>"pattern": "cccc dd.M.yyyy"</code> - Formats the string in CLDR date/time symbols.</li>
	 * 					</ul>
	 * 				</li>
	 * 				<li>
	 * 					<code>smallInterval</code> - Time interval of the bottom row along the time axis is 12 hours. Formatted in the locale language with the format string. This zoom level implements an interval the same as the interval in the default zoom level.
	 * 					<ul>
	 * 						<li><code>"unit": sap.gantt.config.TimeUnit.hour</code> - Time unit is hour.</li>
	 * 						<li><code>"span": 12</code> - Time span is 12.</li>
	 * 						<li><code>"pattern": "HH:mm"</code> - Formats the string in CLDR date/time symbols.</li>
	 * 					</ul>
	 * 				</li>
	 * 			</ul>
	 * 		</li>
	 * 	</ul>
	 * 
	 * The current granularity setting provides the following values in the default time zoom level:<br/>
	 * <code>5min</code>, <code>10min</code>, <code>15min</code>, <code>30min</code>,<br/>
	 * <code>1hour</code>, <code>2hour</code>, <code>4hour</code>, <code>6hour</code>, <code>12hour</code>,<br/>
	 * <code>1day</code>, <code>2day</code>, <code>4day</code>,<br/>
	 * <code>1week</code>, <code>2week</code>,<br/>
	 * <code>1month</code>, <code>2month</code>, <code>4month</code>, <code>6month</code>,<br/>
	 * <code>1year</code>, <code>2year</code>, <code>5year</code>.
	 * 
	 * @public
	 */
	var sUnitDayPattern = sap.ui.getCore().getConfiguration().getRTL() ? ".M.d" : "d.M.";
	sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY = {
		"5min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 5,
				pattern: "HH:mm"
			}
		},
		"10min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 10,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 10,
				pattern: "HH:mm"
			}
		},
		"15min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 15,
				pattern: "HH:mm"
			}
		},
		"30min": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 30,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.minute,
				span: 30,
				pattern: "HH:mm"
			}
		},
		"1hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 1,
				pattern: "HH:mm"
			}
		},
		"2hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 2,
				pattern: "HH:mm"
			}
		},
		"4hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 4,
				pattern: "HH:mm"
			}
		},
		"6hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 6,
				pattern: "HH:mm"
			}
		},
		"12hour": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 12,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				format: "yyMMMEEEEd"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.hour,
				span: 12,
				pattern: "HH:mm"
			}
		},
		"1day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 1,
				pattern: sUnitDayPattern
			}
		},
		"2day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 2,
				pattern: sUnitDayPattern
			}
		},
		"4day": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.day,
				span: 4,
				pattern: sUnitDayPattern
			}
		},
		"1week": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 1,
				pattern: sUnitDayPattern
			}
		},
		"2week": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.week,
				span: 2,
				pattern: sUnitDayPattern
			}
		},
		"1month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 1,
				pattern: sUnitDayPattern
			}
		},
		"2month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				format: "yyyyMMMM"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 2,
				pattern: sUnitDayPattern
			}
		},
		"4month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 4,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 4,
				pattern: "MMMM"
			}
		},
		"6month": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.month,
				span: 6,
				pattern: "MMMM"
			}
		},
		"1year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 1,
				pattern: "MMMM"
			}
		},
		"2year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 2,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 2,
				pattern: "MMMM"
			}
		},
		"5year": {
			innerInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 5,
				range: 90
			},
			largeInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 10,
				format: "yyyy"
			},
			smallInterval: {
				unit: sap.gantt.config.TimeUnit.year,
				span: 5,
				pattern: "MMMM"
			}
		}
	};

	/**
	 * Defines the default configuration for the time axis.
	 * 
	 * Default values are:
	 * <ul>
	 * 		<li>planHorizon - <code>sap.gantt.config.DEFAULT_PLAN_HORIZON</code></li>
	 * 		<li>initHorizon - <code>sap.gantt.config.DEFAULT_INIT_HORIZON</code></li>
	 * 		<li>zoomStrategy - <code>sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY</code></li>
	 * 		<li>finestGranularity - "15min"</li>
	 * 		<li>coarsestGranularity - "6month"</li>
	 * 		<li>rate> - 1</li>
	 * </ul>
	 * @public
	 */
	sap.gantt.config.DEFAULT_TIME_AXIS = new sap.gantt.config.TimeAxis();
	
	/**
	 * Defines the default mode key.
	 * 
	 * The default mode key is used in Gantt and the default mode configuration is used when no mode configuration is provided.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_MODE_KEY = "sap_mode";
	
	/**
	 * Defines the default configuration mode.
	 * 
	 * Default values are:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>text - "Default"</li>
	 * 		<li>icon - <code>"sap-icon://status-positive"</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_MODE = new sap.gantt.config.Mode({
		key: sap.gantt.config.DEFAULT_MODE_KEY,
		text: this._oRb.getText("TLTP_DEFAULT"),
		icon: "sap-icon://status-positive"
	});

	/**
	 * Defines the default list of configuration modes.
	 *
	 * Default value:  <code>sap.gantt.config.DEFAULT_MODE</code>.
	 * @public
	 * @type {array}
	 */
	
	sap.gantt.config.DEFAULT_MODES = [sap.gantt.config.DEFAULT_MODE];
	
	/**
	 * Defines the default chart scheme key.
	 * 
	 * The Default Chart Scheme Key is used in the default chart scheme configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CHART_SCHEME_KEY = "sap_main";

	/**
	 * Defines the default configuration chart scheme.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CHART_SCHEME_KEY</code></li>
	 * 		<li>name - "Default"</li>
	 * 		<li>rowSpan - 1</li>
	 * 		<li>icon - null</li>
	 * 		<li>modeKey - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>shapeKeys - []</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */ 
	sap.gantt.config.DEFAULT_CHART_SCHEME = new sap.gantt.config.ChartScheme({
		key: sap.gantt.config.DEFAULT_CHART_SCHEME_KEY,
		name: "Default",
		rowSpan: 1
	});

	/**
	 * Defines the default list of chart schemes.
	 *
	 * Default values is <code>sap.gantt.config.DEFAULT_CHART_SCHEME</code>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CHART_SCHEMES = [sap.gantt.config.DEFAULT_CHART_SCHEME];
	
	/**
	 * Defines the default object type key.
	 * 
	 * Default object type key is used in the default object type configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY = "sap_object";
	
	/**
	 * Defines the default configuration object type.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY</code></li>
	 * 		<li>description - "Default"</li>
	 * 		<li>mainChartSchemeKey - <code>sap.gantt.config.DEFAULT_CHART_SCHEME_KEY</code></li>
	 * 		<li>expandedChartSchemeKeys - []</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPE = new sap.gantt.config.ObjectType({
		key: sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY,
		description: "Default",
		mainChartSchemeKey: sap.gantt.config.DEFAULT_CHART_SCHEME_KEY
	});

	/**
	 * Defines the default list of object types.
	 *
	 * The default value is <code>sap.gantt.config.DEFAULT_OBJECT_TYPE</code>.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_OBJECT_TYPES = [sap.gantt.config.DEFAULT_OBJECT_TYPE];

	/**
	 * Defines the default setting item key for the present time indicator.
	 * 
	 * Default setting item key for the present time indicator is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY = "sap_enableNowLine";
	
	/**
	 * Defines the default configuration object for enabling the present time indicator setting item.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Indicate Current Time"</li>
	 * 		<li>tooltip - "Draw a Vertical Line to Indicate the Current Time"</li>
	 * </ul>
	 * @public
	 * 	@type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_NOW_LINE"),
		tooltip: this._oRb.getText("TLTP_NOW_LINE")
	});
	
	/**
	 * Defines the default setting item key for the cursor line.
	 * 
	 * Default setting item key for the cursor line is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY = "sap_enableCursorLine";
	
	/**
	 * Defines the default configuration object for enabling the cursor line setting items.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Show Cursor Line"</li>
	 * 		<li>tooltip - "Show a Vertical Line that Follows the Mouse Pointer"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_CURSOR_LINE"),
		tooltip: this._oRb.getText("TLTP_CURSOR_LINE")
	});

	/**
	 * Defines the default setting item key for the vertical lines.
	 * 
	 * Default setting item key for vertical lines is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY = "sap_enableVerticalLine";

	/**
	 * Defines the default setting item key for the adhoc lines.
	 * 
	 * The default setting item key for adhoc lines is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY = "sap_enableAdhocLine";

	/**
	 * Defines the default configuration object for enabling vertical line setting item.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Show Divider Lines"</li>
	 * 		<li>tooltip - "Show Vertical Divider Lines between Time Periods"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_VERTICAL_LINE"),
		tooltip: this._oRb.getText("TLTP_VERTICAL_LINE")
	});

	/**
	 * Defines the default configuration object for enabling the adhoc line setting item.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Show Adhoc Lines"</li>
	 * 		<li>tooltip - "Show Adhoc Lines"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_ADHOC_LINE"),
		tooltip: this._oRb.getText("TLTP_ADHOC_LINE")
	});

	/**
	 * Defines the default setting item key for synchronized time scroll.
	 * 
	 * Default setting item key for synchronized time scroll is used in the default settings group configuration.
	 * @public 
	 * @type {string}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY = "sap_enableTimeScrollSync";
	
	/**
	 * Defines the default configuration object for enabling the synchronized time scroll setting item.
	 * Default values are:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY</code></li>
	 * 		<li>checked - true</li>
	 * 		<li>displayText - "Synchronize Time Scroll"</li>
	 * 		<li>tooltip - "Synchronize Horizontal Scroll Bars in Chart"</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC = new sap.gantt.config.SettingItem({
		key: sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY,
		checked: true,
		displayText: this._oRb.getText("XCKL_TIME_SCROLL_SYNC"),
		tooltip: this._oRb.getText("TLTP_TIME_SCROLL_SYNC")
	});

	/**
	 * Defines the default configuration object for setting groups in the toolbar.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE</code></li>
	 * 		<li><code>sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC</code></li>
	 * </ul>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS = [
		sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE,
		sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC
	];
	
	/**
	 * Defines the default empty toolbar scheme key.
	 * 
	 * The default empty toolbar scheme key is used in the default empty toolbar scheme.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY = "sap_empty_toolbar";

	/**
	 * Defines the default empty toolbar scheme.
	 * 
	 * This toolbar scheme has no built-in toolbar items. Only one toolbar group
	 * <code>customToolbarItems</code> is configured to allow applications to place custom toolbar items.
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.EMPTY_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L1",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		})
	});
	
	/**
	 * Defines the default toolbar scheme key for GanttContainer.
	 * 
	 * The default GanttContainer toolbar scheme key is used in the default GanttContainer toolbar scheme configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY = "sap_container_toolbar";
	
	/**
	 * Defines the default configuration object for toolbar scheme on <code>sap.gantt.GanttChartContainer</code>.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * 		<li>timeZoom - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "R2",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.NeverOverflow
	 * 			})</code></li>
	 * 		<li>settings - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "R1",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.low,
	 * 				items: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L1",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		}),
		timeZoom: new sap.gantt.config.TimeZoomGroup({
			position: "R2",
			overflowPriority: sap.m.OverflowToolbarPriority.NeverOverflow
		}),
		settings: new sap.gantt.config.SettingGroup({
			position: "R1",
			overflowPriority: sap.m.OverflowToolbarPriority.Low,
			items: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS
		})
	});
	
	/**
	 * Defines the default toolbar scheme key for GanttWithTable.
	 * 
	 * The default GanttWithTable toolbar scheme key is used in the default GanttWithTable toolbar scheme configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY = "sap_ganttchart_toolbar";

	/**
	 * Defines the default configuration object for the toolbar scheme on <code>sap.gantt.GanttChartWithTable</code>.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>customToolbarItems - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L2",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.High
	 * 			})</code></li>
	 * 		<li>expandTree - <code>sap.gantt.config.ToolbarGroup({
	 * 				position: "L3",
	 * 				overflowPriority: sap.m.OverflowToolbarPriority.Low
	 * 			})</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME = new sap.gantt.config.ToolbarScheme({
		key: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY,
		customToolbarItems: new sap.gantt.config.ToolbarGroup({
			position: "L2",
			overflowPriority: sap.m.OverflowToolbarPriority.High
		}),
		expandTree: new sap.gantt.config.ToolbarGroup({
			position: "L3",
			overflowPriority: sap.m.OverflowToolbarPriority.Low
		})
	});

	/**
	 * Defines the default list of toolbar schemes for <code>sap.gantt.GanttChartBase</code>.
	 *
	 * The default values include an empty toolbar and a default Gantt Chart toolbar.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES = [
		sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME,
		sap.gantt.config.EMPTY_TOOLBAR_SCHEME
	];

	/**
	 * Define default list of toolbar schemes for <code>sap.gantt.GanttChartContainer</code>.
	 *
	 * The default values include an empty toolbar and a default Gantt Chart Container toolbar.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES = [
		sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME,
		sap.gantt.config.EMPTY_TOOLBAR_SCHEME
	];
	
	/**
	 * Defines the default hierarchy key.
	 * 
	 * The default hierarchy key is used in the default hierarchy configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_HIERARCHY_KEY = "sap_hierarchy";
	
	/**
	 * Defines the default configuration object for Hierarchy.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_HIERARCHY_KEY</code></li>
	 * 		<li>text - "Default Hierarchy"</li>
	 * 		<li>activeModeKey - <code>sap.gantt.config.DEFAULT_MODE_KEY</code></li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>columns - null</li>
	 * 		<li>expandedLevels - null</li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_HIERARCHY = new sap.gantt.config.Hierarchy();

	/**
	 * Defines the default list of hierarchies.
	 *
	 * The default value is <code>sap.gantt.config.DEFAULT_HIERARCHY</code>
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_HIERARCHYS = [sap.gantt.config.DEFAULT_HIERARCHY];
	
	/**
	 * Defines the default Gantt single layout key.
	 * 
	 * The default Gantt single layout key is used in the default Gantt single layout configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY = "sap_container_layout_single";
	
	/**
	 * Defines the default configuration object for the Single Container layout.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY</code></li>
	 * 		<li>text - "Single Gantt Chart Layout"</li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>ganttChartLayouts - <code>[new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
				hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		})]</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT = new sap.gantt.config.ContainerLayout({
		key: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY,
		text: this._oRb.getText("XLST_SINGLE_LAYOUT"),
		toolbarSchemeKey: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		ganttChartLayouts: [new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		})]
	});
	
	/**
	 * Defines the default Gantt dual-view layout key.
	 * 
	 * The default Gantt dual-view layout key is used in the default Gantt dual layout configuration.
	 * @public
	 * @type {string}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY = "sap_container_layout_dual";
	
	/**
	 * Defines the default configuration object for Dual Container layout.
	 * 
	 * Default values:
	 * <ul>
	 * 		<li>key - <code>sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY</code></li>
	 * 		<li>text - "Dual Gantt Chart Layout"</li>
	 * 		<li>toolbarSchemeKey - <code>sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY</code></li>
	 * 		<li>ganttChartLayouts - <code>[new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
	 *			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		}), new sap.gantt.config.GanttChartLayout({
	 * 			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
	 *			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
	 * 		})]</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT = new sap.gantt.config.ContainerLayout({
		key: sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY,
		text: this._oRb.getText("XLST_DUAL_LAYOUT"),
		toolbarSchemeKey: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY,
		ganttChartLayouts: [new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		}), new sap.gantt.config.GanttChartLayout({
			activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		})]
	});

	/**
	 * Defines the default list of Container layouts.
	 *
	 * Default values are a single-view layout and a dual-view layout.
	 * @public
	 * @type {array}
	 */
	sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS = [
		sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT,
		sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT
	];

	/**
	 * Defines the default configuration object Locale.
	 * 
	 * Default values 
	 * <ul>
	 * 		<li>timeZoine - <code>"CET"</code></li>
	 * 		<li>utcdiff - <code>"000000"</code></li>
	 * 		<li>utcsign - <code>"+"</code></li>
	 * </ul>
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_LOCALE_CET = new sap.gantt.config.Locale({
		timeZone: "CET",
		utcdiff: "000000",
		utcsign: "+"
	});
	
	/**
	 * Defines the default empty JSON object.
	 * @public
	 * @type {object}
	 */
	sap.gantt.config.DEFAULT_EMPTY_OBJECT = {};

	sap.gantt.DIMENSION_LEGEND_NIL = "NIL";

	/**
	 * Different zoom type for mouse wheel zooming
	 *
	 * @enum {string}
	 * @public
	 */
	sap.gantt.MouseWheelZoomType = {

		/**
		 * The granularity is the unit time range of innerInterval under current zoom level
		 * @public
		 */
		FineGranular : "FineGranular",

		/**
		 * The granularity is a whole zoom level, just like the global zoom slider does
		 * @public
		 */
		Stepwise : "Stepwise",

		/**
		 * Do not support mouse wheel zooming
		 * @public
		 */
		None : "None"
	};

	/**
	 * A hybrid data type that can represent an array of string, or array of object.
	 * The result value parsed by this data type are "string[]" or "object[]"
	 *
	 * Examples of valid values in js:
	 * 1. ["order", "activity"]
	 * 2. [{name:"order", idName:"OrderNo"},{name:"activity"}]
	 * 3. [{name:"order", idName:"OrderNo"},"activity"]
	 *
	 * Examples of valid values in xml view:
	 * 1. "order,activity"
	 * 2. "order, activity"
	 * 3. "[order,activity]"
	 * 4. "[order, activity]"
	 * 5. '[{"name":"order", "idName":"OrderNo"},{"name":"activity"}]'
	 * 6. "[{'name':'order', 'idName':'OrderNo'},{'name':'activity'}]"
	 *
	 * @public
	 */
	sap.gantt.GenericArray = DataType.createType('sap.gantt.GenericArray', {
		isValid : function(vValue) {
			if (typeof vValue === "string" || vValue instanceof String) {
				return true;
			}
			if (Array.isArray(vValue)) {
				for (var i = 0; i < vValue.length; i++) {
					if (!(typeof vValue[i] === "string" || vValue[i] instanceof String || typeof vValue[i] === "object")) {
						return false;
					}
				}
				return true;
			}
			return false;
		},
		parseValue : function (sValue) {
			if (sValue) {
				if (Array.isArray(sValue)) {
					return sValue;
				} else if (typeof sValue === "string") {
					var aValues;

					//for valid example #5, #6, need to replace ' with ", because of JSON.parse
					if (sValue.indexOf("[") > -1 && sValue.indexOf("{") > -1) {
						sValue = sValue.replace(/\'/g,"\"");
						aValues = JSON.parse(sValue);
					} else {
						// for valid expample #3-#4, need to get the content between the '[]'
						if (sValue.indexOf("[") > -1) {
							var regex = /^\[(.*)\]$/g;
							var matches = regex.exec(sValue);
							if (matches) {
								sValue = matches[1];
							}
						}
						// for valid example #1-#4, just split by the ','
						aValues = sValue.split(",");
						for (var i = 0; i < aValues.length; i++) {
							//for valid example #2, #4, need to remove the blank space
							aValues[i] = aValues[i].trim();
						}
					}
					return aValues;
				}
			}
			return sValue;
		}
	}, DataType.getType("any"));

	/**
	 * Defines how Gantt Chart aligns a draggable shape to the mouse pointer before dragging.
	 * 
	 * @enum {string}
	 * @namespace
	 * @name sap.gantt.dragdrop.GhostAlignment
	 * @public
	 */
	sap.gantt.dragdrop.GhostAlignment = {
		/**
		 * When you click on a shape to start a drag-and-drop operation, the upper-left corner
		 * of the shape is automatically moved to the mouse pointer before you start dragging.
		 * This option makes the start time of the shape align with the cursor line through
		 * the whole drag-and-drop process, and thus you can precisely determine the start
		 * time when you drop the shape.
		 * @public
		 */
		Start: "Start",

		/**
		 * Default drag-and-drop behavior. When you click on a shape to start a drag-and-drop
		 * operation, Gantt Chart does not move the shape before you start dragging. This option
		 * keeps the relative position between the shape and the mouse pointer intact through
		 * the whole drag-and-drop process.
		 * @public
		 */
		None: "None",

		/**
		 * When you click on a shape to start a drag-and-drop operation, the upper-right corner
		 * of the shape is automatically moved to the mouse pointer before you start dragging.
		 * This option makes the end time of the shape align with the cursor line through the
		 * whole drag-and-drop process, and thus you can precisely determine the end time when
		 * you drop the shape.
		 * @public
		 */
		End: "End"
	};

	return sap.gantt;

});

}; // end of sap/gantt/library.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.AxisOrdinal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.AxisOrdinal'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/AxisOrdinal",[
	"sap/gantt/misc/Utility",   // cannot be referenced because of loop dependency between AxisOrdinal and Utility, use global name to reference
	// Unreferenced libs
	"sap/ui/thirdparty/d3"
], function () {
	"use strict";

	/**
	 * Creates and initializes an AxisOrdinal class.

	 * @class The reusable functional class represents an instance of ordinal pattern coordinate mapping.
	 * 
	 * @param {array} aAlementArray Element array corresponding to an ordinal axis.
	 * @param {array} aScaleArray Scale array where each item represents one or more smallest width units in one-to-one relationship with aAlementArray.
	 * @param {number} nViewBandWidth Smallest width unit for elements.
	 * @param {number} nViewRangeStart Start position of an axis in the viewport area.
	 * @param {number} nViewRangeEnd End position of an axis in the viewport area. The parameter is ignored if viewBandWidth is set.
	 * @param {number} nZoomRate Zoom rate of the viewport area.
	 * @param {number} nZoomOrigin Zoom origin of the viewport area.
	 * @param {number} nPadding Padding for each band.
	 * 
	 * @return Instance of an AxisOrdinal.
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.misc.AxisOrdinal
	 */
	
	var AxisOrdinal = function (aAlementArray, aScaleArray, nViewBandWidth, nViewRangeStart,
	                            nViewRangeEnd, nZoomRate, nZoomOrigin, nPadding) {
		this.elementArray = aAlementArray;
		this.scaleArray = aScaleArray;

		this.padding = sap.gantt.misc.Utility.assign(nPadding, 0);

		this.zoomRate = sap.gantt.misc.Utility.assign(nZoomRate, 1);
		this.zoomOrigin = sap.gantt.misc.Utility.assign(nZoomOrigin, 0);

		this.viewRangeStart = sap.gantt.misc.Utility.assign(nViewRangeStart, 0);
		this.viewBandWidth = nViewBandWidth;
		this.viewRangeEnd = nViewRangeEnd;
		this.scale = d3.scale.ordinal();
	//	this.scaleForVisibleRow = null;
		this._createScale();
	};

	/*
	 * Constants
	 */
	AxisOrdinal.prototype.CONSTANT = {
		C_SEPARATOR: "_@@_",
		C_MESSAGE: {
			ARGUMENT_ERROR: "AxisOrdinal: Argument Error!"
		}
	};

	// private methods =>
	AxisOrdinal.prototype._createScale = function(){
		if (typeof (this.viewBandWidth) !== "undefined"){
			this.viewRangeEnd = undefined;
			this.scale.domain(this._calculateInternalValuesByElements())
				.rangeRoundBands(this._calculateViewRangeByViewBandWidth());
		} else if (typeof (this.viewRangeEnd) !== "undefined"){
			this.viewBandWidth = undefined;
			this.scale.domain(this._calculateInternalValuesByElements())
				.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		} else {
			//sap.gantt.Message.create("Error", this.CONSTANT.C_MESSAGE.ARGUMENT_ERROR);
		}
	};
	
	AxisOrdinal.prototype._calculateInternalValuesByElements = function(){
		var values = [];
		for (var i = 0; i < this.scaleArray.length; i++){
			var id = this.elementArray[i] + this.CONSTANT.C_SEPARATOR;
			for (var j = 0; j < this.scaleArray[i]; j++){
				values.push(id + j);
			}
		}
		return values;
	};
	

	AxisOrdinal.prototype._calculateViewRangeByViewBandWidth = function(){
		var viewRangeWidth = 0;
		for (var i = 0; i < this.scaleArray.length; i++){
			viewRangeWidth += this.scaleArray[i] * this.viewBandWidth;
		}
		return [this.viewRangeStart, this.viewRangeStart + viewRangeWidth];
	};
	// <= private methods

	// public methods =>
	
	/**
	 * Transforms an element to a position in the coordinate system
	 * 
	 * @param {Object} element Element that exists in parameter elementArray of the constructor
	 * 
	 * @return Position in the coordinate system
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.elementToView = function(element){
		return (this.scale(element + this.CONSTANT.C_SEPARATOR + 0) + this.padding - this.zoomOrigin) * this.zoomRate;
	};

	/**
	 * Transforms a position in the coordinate system to an element
	 * 
	 * @param {Number} value Position in the coordinate system
	 * 
	 * @return Element that exists in parameter elementArray of the constructor
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToElement = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var head = 0;
		var tail = this.elementArray.length - 1;
		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(this.elementArray[mid] + this.CONSTANT.C_SEPARATOR + 0);
			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var ret = this.elementArray[head];
		var retValue = this.scale(ret + this.CONSTANT.C_SEPARATOR + 0);
		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand() * this.scaleArray[head]){
			return undefined;
		}
		return ret;
	};

	/**
	 * Transforms a position in the coordinate system to an element index
	 * 
	 * @param {Number} value Position in the coordinate system
	 * 
	 * @return Index of the corresponding element that exists in parameter elementArray of the constructor
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToElementIndex = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;
				
		var head = 0;
		var tail = this.elementArray.length - 1;
		
		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(this.elementArray[mid] + this.CONSTANT.C_SEPARATOR + 0);

			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var ret = this.elementArray[head];
		var retValue = this.scale(ret + this.CONSTANT.C_SEPARATOR + 0);

		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand() * this.scaleArray[head]){
			return -1;
		}
		
		return head;
	};

	/**
	 * Transforms a position in the coordinate system to a band index
	 * 
	 * @param {Number} value A position in the coordinate system
	 * 
	 * @return Index that describes which band the position is located in
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToBandIndex = function(value){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var aInternalElements = this._calculateInternalValuesByElements();
		var head = 0;
		var tail = aInternalElements.length - 1;

		while (head < tail){
			var mid = Math.ceil((head + tail) / 2);
			var midValue = this.scale(aInternalElements[mid]);

			if (curValue < midValue){
				tail = mid - 1;
			} else {
				head = mid;
			}
		}

		var retValue = this.scale(aInternalElements[head]);

		if (curValue < retValue + this.padding || curValue >= retValue + this.scale.rangeBand()){
			return -1;
		}

		return head;
	};

	/**
	 * Transforms a position in the coordinate system to a row index
	 * 
	 * @param {Number} value Position in the coordinate system
	 * @param {Number} iMaxIndex Max row index in the coordinate system
	 * 
	 * @return Index of the corresponding row
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.viewToRowIndex = function(value, iMaxIndex){
		var curValue = value / this.zoomRate + this.zoomOrigin;

		var head = 0;
		//Get the scale of elements
		var viewWidth = this._calculateViewRangeByViewBandWidth();
		
		if (curValue <= viewWidth[1] && curValue >= viewWidth[0]) {
			//If current position is in the elements scale, calculate the row index
			return this.viewToElementIndex(value);
		} else if (jQuery.isNumeric(iMaxIndex) && iMaxIndex > this.elementArray.length) {
			//if current position is out of elements scale, calculate the row index
			var blankIndex = parseInt( ( value - viewWidth[1] - viewWidth[0] ) / this.viewBandWidth, 10);
			var rowIndex = blankIndex + this.elementArray.length;
			head = rowIndex;
		} else {
			return -1;
		}
		return head;
	};

	/**
	 * Sets a new value of elementArray with the corresponding scaleArray.
	 * 
	 * @param {array} elementArray New element array corresponding to an ordinal axis.
	 * @param {array} scaleArray Corresponding scale array where each item represents one or more smallest width units in one-to-one relationship with elementArray.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setElements = function(elementArray, scaleArray){
		this.elementArray = elementArray;
		this.scaleArray = scaleArray;
		this._createScale();
		return this;
	};

	/**
	 * Retrieves the value of elementArray.
	 * 
	 * @return {array} Value of elementArray.
	 * 
	 * @public
	 */
	
	AxisOrdinal.prototype.getElementArray = function(){
		return this.elementArray;
	};

	/**
	 * Retrieves the value of scaleArray.
	 * 
	 * @return {array} Value of scaleArray.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getScaleArray = function(){
		return this.scaleArray;
	};

	/**
	 * Sets a new value of the start position of a view range.
	 * 
	 * @param {number} viewRangeStart Start position of an axis in the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewRangeStart = function(viewRangeStart){
		this.viewBandWidth = undefined;
		this.viewRangeStart = sap.gantt.misc.Utility.assign(viewRangeStart, 0);
		this.scale.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		return this;
	};

	/**
	 * Sets a new value of the end position of a view range.
	 * 
	 * @param {number} viewRangeEnd End position of axis in the viewport area. The parameter is ignored if viewBandWidth is set.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewRangeEnd = function(viewRangeEnd){
		this.viewBandWidth = undefined;
		this.viewRangeEnd = viewRangeEnd;
		this.scale.rangeRoundBands([this.viewRangeStart, this.viewRangeEnd]);
		return this;
	};

	/**
	 * Retrieves the view range of the current viewport area.
	 * 
	 * @return {array} Value of the view range containing the start and end positions.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getViewRange = function(){
		var viewRange = this.scale.rangeExtent();
		return [(viewRange[0] - this.zoomOrigin) * this.zoomRate, (viewRange[1] - this.zoomOrigin) * this.zoomRate];
	};

	/**
	 * Sets a new value of viewBandWidth.
	 * 
	 * @param {number} viewBandWidth Smallest width unit for elements.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setViewBandWidth = function(viewBandWidth){
		this.viewRangeEnd = undefined;
		this.viewBandWidth = viewBandWidth;
		this.scale.rangeRoundBands(this._calculateViewRangeByViewBandWidth());
		return this;
	};

	/**
	 * Retrieves the value of viewBandWidth.
	 * 
	 * @return {number} Value of viewBandWidth that indicates the smallest width unit for elements.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getViewBandWidth = function(){
		return this.scale.rangeBand() * this.zoomRate;
	};

	/**
	 * Sets a new value of zoom rate.
	 * 
	 * @param {number} zoomRate New zoom rate of the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setZoomRate = function(zoomRate){
		this.zoomRate = sap.gantt.misc.Utility.assign(zoomRate, 1);
		return this;
	};

	/**
	 * Retrieves the value of zoom rate.
	 * 
	 * @return {number} Value of zoom rate.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getZoomRate = function(){
		return this.zoomRate;
	};

	/**
	 * Sets the zoom origin.
	 * 
	 * @param {number} zoomOrigin Zoom origin of the viewport area.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.setZoomOrigin = function(zoomOrigin){
		this.zoomOrigin = sap.gantt.misc.Utility.assign(zoomOrigin, 0);
		return this;
	};

	/**
	 * Retrieves the zoom origin.
	 * 
	 * @return {number} Zoom origin.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.getZoomOrigin = function(){
		return this.zoomOrigin;
	};

	/**
	 * Clones a new AxisOrdinal from the current one.
	 * 
	 * @return {sap.gantt.misc.AxisOrdinal} Reference to the newly created clone.
	 * 
	 * @public
	 */

	AxisOrdinal.prototype.clone = function(){
		return new AxisOrdinal(this.elementArray.slice(0), this.scaleArray.slice(0), this.viewBandWidth,
			this.viewRangeStart, this.viewRangeEnd, this.zoomRate, this.zoomOrigin, this.padding);
	};
	// <= public methods

	return AxisOrdinal;
}, true);

}; // end of sap/gantt/misc/AxisOrdinal.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.AxisTime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.misc.AxisTime'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/AxisTime",[
	"sap/ui/base/Object", "sap/ui/core/Core", "sap/gantt/misc/Utility", "sap/gantt/misc/Format",
	"sap/gantt/axistime/ProportionZoomStrategy"
], function (BaseObject, Core, Utility, Format, ProportionZoomStrategy) {
	// Utility cannot be referenced because of cyclic dependency between AxisOrdinal and Utility, use global name to reference
	"use strict";

	/**
	 * Creates and initializes an AxisTime class.
	 * 
	 * @class The reusable functional class represents an instance of time-value linear coordinate mapping.
	 * 
	 * @param {array} timeRange The array must contain two or more dates that represent some ranges of data.
	 * @param {array} viewRange The array must contain two or more values, to match the cardinality of timeRange, representing some ranges of values.
	 * @param {number} zoomRate Zoom rate of the viewport area.
	 * @param {number} zoomOrigin Zoom origin of the viewport area.
	 * @param {number} viewOffset Offset of the viewport area.
	 * @param {object} locale Settings for language, time zone, and daylight saving.
	 * @param {array} oZoomStrategy Specifies the strategy to zoom in/out.
	 * 
	 * @return Instance of AxisTime.
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.misc.AxisTimes
	 */
	
	var AxisTime = function (timeRange, viewRange, zoomRate, zoomOrigin, viewOffset, locale, oZoomStrategy) {
		this.scale = d3.time.scale().domain(timeRange).range(viewRange).clamp(false);

		this.timeRange = timeRange;
		this.viewRange = viewRange;

		this.zoomRate = Utility.assign(zoomRate, 1);
		this.zoomOrigin = Utility.assign(zoomOrigin, 0);

		this.viewOffset = Utility.assign(viewOffset, 0);

		this.locale = locale;

		if (locale && locale.getUtcdiff()) {
			var format = Format.getTimeStampFormatter();
			this.timeZoneOffset = Math.round((format.parse("20000101" + locale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (locale.getUtcsign() === "-") {
				this.timeZoneOffset = -this.timeZoneOffset;
			}
		}

		this._oZoomStrategy = oZoomStrategy ? oZoomStrategy : new ProportionZoomStrategy();
	};

	/*
	 * Constants
	 */
	AxisTime.prototype.CONSTANT = {
		C_SEPARATOR: "_@@_",
		C_MESSAGE: {
			ARGUMENT_ERROR: "AxisOrdinal: Argument Error!"
		}
	};

	// public methods =>
	
	/**
	 * Given a date within the timeRange, this function returns the corresponding value within the viewRange.
	 * 
	 * @param {date} time Given date within the timeRange.
	 * @param: TODO
	 * @return {number} Value corresponding to the given date within the viewRange.
	 * 
	 * @public
	 */
	
	AxisTime.prototype.timeToView = function(time, bIgnoreOffset){
		if (Core.getConfiguration().getRTL() !== true) {
			return Math.round((this.scale(time) - this.zoomOrigin) * this.zoomRate - (bIgnoreOffset ? 0 : this.viewOffset));
		} else {
			return Math.round(this.viewRange[1] * this.zoomRate - (((this.scale(time) + this.zoomOrigin) * this.zoomRate) + (bIgnoreOffset ? 0 : this.viewOffset)));
		}
	};

	/**
	 * Returns the date within the timeRange for the corresponding value within the viewRange.
	 * 
	 * @param {number} value Given value within the viewRange.
	 * 
	 * @return {date} Date corresponding to the given value within the timeRange.
	 * 
	 * @public
	 */

	AxisTime.prototype.viewToTime = function(value, bIgnoreOffset){
		if (Core.getConfiguration().getRTL() !== true) {
			return this.scale.invert((value + (bIgnoreOffset ? 0 : this.viewOffset)) / this.zoomRate + this.zoomOrigin);
		} else {
			return this.scale.invert(this.viewRange[1] - (value + (bIgnoreOffset ? 0 : this.viewOffset)) / this.zoomRate - this.zoomOrigin);
		}
	};

	/**
	 * Sets a new value of timeRange.
	 * 
	 * @param {array} timeRange New value of timeRange.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	
	AxisTime.prototype.setTimeRange = function(timeRange){
		this.timeRange = timeRange;
		this.scale.domain(timeRange);
		return this;
	};

	/**
	 * Retrieves the value of timeRange.
	 * 
	 * @return {array} Value of timeRange.
	 * 
	 * @public
	 */

	AxisTime.prototype.getTimeRange = function(){
		return this.scale.domain();
	};

	/**
	 * Sets a new value of viewRange.
	 * 
	 * @param {array} viewRange New value of viewRange.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */

	AxisTime.prototype.setViewRange = function(viewRange){
		this.viewRange = viewRange;
		this.scale.range(viewRange);
		return this;
	};

	/**
	 * Retrieves the value of viewRange.
	 * 
	 * @return {array} Value of viewRange.
	 * 
	 * @public
	 */

	AxisTime.prototype.getViewRange = function(){
		var range = this.scale.range();
		return [Math.round((range[0] - this.zoomOrigin) * this.zoomRate - this.viewOffset),
		        Math.round((range[1] - this.zoomOrigin) * this.zoomRate - this.viewOffset)];
	};

	/**
	 * Retrieves the value of oZoomStrategy.
	 * 
	 * @return {object} Value of oZoomStrategy.
	 * 
	 * @public
	 */

	AxisTime.prototype.getZoomStrategy = function () {
		return this._oZoomStrategy;
	};

	/**
	 * Sets a new value of zoomRate.
	 * 
	 * @param {number} zoomRate New value of zoomRate.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setZoomRate = function(zoomRate){
		this.zoomRate = Utility.assign(zoomRate, 1);
		return this;
	};

	/**
	 * Retrieves the value of zoomRate.
	 * 
	 * @return {number} Value of zoomRate.
	 * 
	 * @public
	 */
	AxisTime.prototype.getZoomRate = function(){
		return this.zoomRate;
	};

	/**
	 * Sets a new value of zoomOrigin.
	 * 
	 * @param {number} zoomOrigin New value of zoomOrigin.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setZoomOrigin = function(zoomOrigin){
		this.zoomOrigin = Utility.assign(zoomOrigin, 0);
		return this;
	};

	/**
	 * Retrieves the value of zoomOrigin.
	 * 
	 * @return {number} Value of zoomOrigin.
	 * 
	 * @public
	 */
	AxisTime.prototype.getZoomOrigin = function(){
		return this.zoomOrigin;
	};

	/**
	 * Sets a new value of viewOffset.
	 * 
	 * @param {number} viewOffset New value of viewOffset.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to this in order to allow method chaining.
	 * 
	 * @public
	 */
	AxisTime.prototype.setViewOffset = function(viewOffset){
		this.viewOffset = Utility.assign(viewOffset, 0);
		return this;
	};

	/**
	 * Retrieves the value of viewOffset.
	 * 
	 * @return {number} Value of viewOffset.
	 * 
	 * @public
	 */
	AxisTime.prototype.getViewOffset = function(){
		return this.viewOffset;
	};

	AxisTime.prototype.setLocale = function(locale){
		this.locale = locale;
		if (locale && locale.getUtcdiff()) {
			var format = Format.getTimeStampFormatter();
			this.timeZoneOffset = Math.round((format.parse("20000101" + locale.getUtcdiff()).getTime() - format.parse("20000101000000").getTime()) / 1000);
			if (locale.getUtcsign() === "-") {
				this.timeZoneOffset = -this.timeZoneOffset;
			}
		}
		return this;
	};

	AxisTime.prototype.getLocale = function(){
		return this.locale;
	};

	/**
	 * Clones a new AxisTimes from the current one.
	 * 
	 * @return {sap.gantt.misc.AxisTimes} Reference to the newly created clone.
	 * 
	 * @public
	 */
	AxisTime.prototype.clone = function(){
		return new AxisTime([new Date(this.timeRange[0].valueOf()), new Date(this.timeRange[1].valueOf())],
			this.viewRange.slice(0), this.zoomRate, this.zoomOrigin, this.viewOffset, this.locale);
	};

	/**
	 * Retrieves an index of the time interval level in array oZoomStrategy.
	 * 
	 * @return {number} Index of the time interval level in array oZoomStrategy.
	 * 
	 * @public
	 * @deprecated As of version 1.44, replaced by sap.gantt.axistime.AxisTimeStrategyBase.getZoomLevel
	 */
	AxisTime.prototype.getCurrentTickTimeIntervalLevel = function(){
		var oTimeLineOption = this._oZoomStrategy.getTimeLineOption(),
			oTimeLineOptions = this._oZoomStrategy.getTimeLineOptions(),
			i = 0;
		for (var sAttr in oTimeLineOptions) {
			if (oTimeLineOptions[sAttr] === oTimeLineOption) {
				return i;
			}
			i++;
		}
	};
	
	/**
	 * Retrieves a key of the time interval level in array oZoomStrategy.
	 * 
	 * @return {string} Key of the time interval level in array oZoomStrategy.
	 * @deprecated As of version 1.44, replaced by sap.gantt.axistime.AxisTimeStrategyBase.getZoomLevel
	 * 
	 * @public
	 */
	AxisTime.prototype.getCurrentTickTimeIntervalKey = function(){
		var oTimeLineOption = this._oZoomStrategy.getTimeLineOption(),
			oTimeLineOptions = this._oZoomStrategy.getTimeLineOptions();
		for (var sAttr in oTimeLineOptions) {
			if (oTimeLineOptions[sAttr] === oTimeLineOption) {
				return sAttr;
			}
		}
	};

	/**
	 * Retrieves an object containing the information of current time, its position, and label.
	 * 
	 * @return {object} Reference to an object containing the information of current time, its position, and label.
	 * 
	 * @public
	 */
	AxisTime.prototype.getNowLabel = function(){
		var date = new Date();
		var utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000));
		var value = this.timeToView(utcDate);
		var localDate = d3.time.second.offset(utcDate,this.timeZoneOffset);

		return [{"date": localDate, "value": Math.round(value)}];
	};

	/**
	 * Retrieves an array of time ticks, each item containing date position and label, for the specified level within the given timeBoundary or viewBoundary.
	 * 
	 * @param {number} level Corresponding index in array oZoomStrategy.
	 * @param {number} timeBoundary Time range within which time ticks are generated.
	 * @param {number} viewBoundary View range within which time ticks are generated. Available only when timeBoundary isn't specified.
	 * @return {object} Reference to an array of time ticks, each item containing date, position, and label.
	 * 
	 * @public
	 */
	AxisTime.prototype.getTickTimeIntervalLabel = function(oLevel, timeBoundary, viewBoundary){
		var i, 
			preStartDate, 
			preEndDate, 
			daylightInterval = null;
		
		if (this.locale && this.locale.getDstHorizons().length > 0){
			daylightInterval = this.locale.getDstHorizons();
		}
		var format = Format.getTimeStampFormatter();
		var dlsIntervals = [];
		if (daylightInterval){
			for (i = 0; i < daylightInterval.length; i++){
				dlsIntervals[i] = {};
				preStartDate = daylightInterval[i].getStartTime();
				preEndDate = daylightInterval[i].getEndTime();
				dlsIntervals[i].startDate = format.parse(preStartDate);
				dlsIntervals[i].endDate = format.parse(preEndDate);
			}
		}

		var localTimeRange = this.timeZoneOffset ?
			[d3.time.second.offset(this.timeRange[0], this.timeZoneOffset), d3.time.second.offset(this.timeRange[1], this.timeZoneOffset)] :
			this.timeRange;
		var localAxisTime = new sap.gantt.misc.AxisTime(localTimeRange, this.viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null);
		var timeRange = null;
		var viewRange = null;
		var visibleScale = null;
		var dstScale = null;
		var normalScale = null;
		var startTimeRange = null;
		var endTimeRange = null;
		var timeRangeSet = [];
		var viewRangeSet = [];
		var scaleValue = null;
		if (timeBoundary) {
			startTimeRange = this.timeZoneOffset ? d3.time.second.offset(timeBoundary[0], this.timeZoneOffset) : timeBoundary[0];
			endTimeRange = this.timeZoneOffset ? d3.time.second.offset(timeBoundary[1], this.timeZoneOffset) : timeBoundary[1];

			timeRange = this.timeZoneOffset ?
				[d3.time.second.offset(timeBoundary[0], this.timeZoneOffset), d3.time.second.offset(timeBoundary[1], this.timeZoneOffset)] :
				timeBoundary;
			viewRange = [this.timeToView(timeBoundary[0]), this.timeToView(timeBoundary[1])];

			if (dlsIntervals && dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, false);
		} else if (viewBoundary){
			startTimeRange = this.timeZoneOffset ? d3.time.second.offset(this.viewToTime(viewBoundary[0]), this.timeZoneOffset) : this.viewToTime(viewBoundary[0]);
			endTimeRange = this.timeZoneOffset ? d3.time.second.offset(this.viewToTime(viewBoundary[1]), this.timeZoneOffset) : this.viewToTime(viewBoundary[1]);
			timeRange = [startTimeRange, endTimeRange];
			viewRange = viewBoundary;

			if (dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, false);
		} else {
			startTimeRange = localTimeRange[0];
			endTimeRange = localTimeRange[1];
			timeRange = localTimeRange;
			viewRange = this.viewRange;

			if (dlsIntervals.length){
				this._calculateTimeRange(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet);
			}
			scaleValue = this._calculateScale(timeRangeSet, viewRangeSet, timeRange, viewRange, localTimeRange);
		}
		viewRangeSet = scaleValue.viewRangeSet;
		visibleScale = scaleValue.visibleScale;
		dstScale = scaleValue.dstScale;
		normalScale = scaleValue.normalScale;
		var ticks = [];
		var date, normalDate, value, label;
		var largeInterval = {
			unit: this._oZoomStrategy.getTimeLineOption().largeInterval.unit,
			span: this._oZoomStrategy.getTimeLineOption().largeInterval.span
		};
		var smallInterval = {
			unit: this._oZoomStrategy.getTimeLineOption().smallInterval.unit,
			span: this._oZoomStrategy.getTimeLineOption().smallInterval.span
		};

		var iIndex, iInner;
		if (largeInterval) {
			var largeIntervalTicks = [];
			var largeDstIntervalTicks = [];
			var largeNorIntervalTicks = [];

			if (!(visibleScale instanceof Array)){
				if (sap.ui.getCore().getConfiguration().getLanguage().toLowerCase() === "de" && largeInterval.unit === sap.gantt.config.TimeUnit.week){
					largeIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject("d3.time.monday").range, largeInterval.span);
				} else {
					largeIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
				}
				
			} else {
				for (iIndex = 0; iIndex < dstScale.length; iIndex++){
					largeDstIntervalTicks[iIndex] = dstScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
					largeNorIntervalTicks[iIndex] = normalScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
				}
				for (iIndex = 0; iIndex < visibleScale.length; iIndex++){
					largeIntervalTicks[iIndex] = visibleScale[iIndex].ticks(jQuery.sap.getObject(largeInterval.unit).range, largeInterval.span);
				}
			}
			var largeIntervalData = [];
			if (largeIntervalTicks[0] !== null){
				for (iIndex = 0; iIndex < largeIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < largeIntervalTicks[iIndex].length; iInner++) {
						date = largeIntervalTicks[iIndex][iInner];

						value = localAxisTime.timeToView(date);
					
						label = this._oZoomStrategy.getUpperRowFormatter().format(date);

						largeIntervalData.push({"date": date, "value": Math.round(value), "label": label});
					}
				}
			}

			if (largeDstIntervalTicks[0] !== null){
				for (iIndex = 0; iIndex < largeDstIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < largeDstIntervalTicks[iIndex].length; iInner++){
						date = largeDstIntervalTicks[iIndex][iInner];
						normalDate = largeNorIntervalTicks[iIndex][iInner];

						value = localAxisTime.timeToView(d3.time.second.offset(date.getTime(), -60 * 60));
						
						label = this._oZoomStrategy.getUpperRowFormatter().format(date);

						largeIntervalData.push({"date": date, "value": Math.round(value), "label": label});

					}
				}
			}
			ticks.push(largeIntervalData);
		} else {
			ticks.push([]);
		}
		if (smallInterval) {
			var smallDstIntervalTicks = [];
			var smallNorIntervalTicks = [];
			var smallIntervalTicks = [];
			if (!(visibleScale instanceof Array)){
				if (sap.ui.getCore().getConfiguration().getLanguage().toLowerCase() === "de" && smallInterval.unit === sap.gantt.config.TimeUnit.week){
					smallIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject("d3.time.monday").range, smallInterval.span);
				} else {
					smallIntervalTicks[0] = visibleScale.ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
				}
				
			} else {
				for (iIndex = 0; iIndex < dstScale.length; iIndex++){
					smallDstIntervalTicks[iIndex] = dstScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
					smallNorIntervalTicks[iIndex] = normalScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
				}
				for (iIndex = 0; iIndex < visibleScale.length; iIndex++){
					smallIntervalTicks[iIndex] = visibleScale[iIndex].ticks(jQuery.sap.getObject(smallInterval.unit).range, smallInterval.span);
				}
			}

			var smallIntervalData = [];
			if (smallIntervalTicks[0]){
				for (iIndex = 0; iIndex < smallIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < smallIntervalTicks[iIndex].length; iInner++) {
						date = smallIntervalTicks[iIndex][iInner];
						var changeDate;
						var ignoreTickFlag = false;
						if (dlsIntervals.length){
							for (var d = 0; d < dlsIntervals.length; d++){
								if (date.getTime() === dlsIntervals[d].startDate.getTime()){
									changeDate = d3.time.second.offset(date.getTime(), 60 * 60);
									if ((iInner === smallIntervalTicks[iIndex].length - 1) && this._oZoomStrategy.isLowerRowTickHourSensitive()){
										ignoreTickFlag = true;
									}
								}
								if ((iInner === smallIntervalTicks[iIndex].length - 1) && (date.getTime() === d3.time.second.offset(dlsIntervals[d].endDate.getTime(), 60 * 60).getTime())){
									changeDate = d3.time.second.offset(date.getTime(), -60 * 60);
								}
							}
						}

						value = localAxisTime.timeToView(date);

						if (ignoreTickFlag){
							break;
						} else if (changeDate){
							label = this._oZoomStrategy.getLowerRowFormatter().format(changeDate);
							changeDate = null;
						} else {
							label = this._oZoomStrategy.getLowerRowFormatter().format(date);
						}

						smallIntervalData.push({"date": date, "value": Math.round(value), "label": label});
					}
				}
			}

			if (smallDstIntervalTicks[0]){
				for (iIndex = 0; iIndex < smallDstIntervalTicks.length; iIndex++){
					for (iInner = 0; iInner < smallDstIntervalTicks[iIndex].length; iInner++){
						date = smallDstIntervalTicks[iIndex][iInner];
						normalDate = smallNorIntervalTicks[iIndex][iInner];
						var oChangeDate;
						var bIgnoreTickFlag = false;
						if ((iInner === smallDstIntervalTicks[iIndex].length - 1) && this._oZoomStrategy.isLowerRowTickHourSensitive()){
							if (timeRangeSet.length > 0){
								for (var rangeItem = 0; rangeItem < timeRangeSet.length; rangeItem++){
									if ((!timeRangeSet[rangeItem].haveDST) && (normalDate.getTime() === timeRangeSet[rangeItem].range[0].getTime())){
										bIgnoreTickFlag = true;
									}
								}
							}
						}
						if (dlsIntervals.length){
							for (var s = 0; s < dlsIntervals.length; s++){
								if (date.getTime() === dlsIntervals[s].startDate.getTime()){
									oChangeDate = d3.time.second.offset(date.getTime(), 60 * 60);
								}
								if ((iInner === smallDstIntervalTicks[iIndex].length - 1) &&
										(date.getTime() === d3.time.second.offset(dlsIntervals[s].endDate.getTime(), 60 * 60).getTime())){
									oChangeDate = d3.time.second.offset(date.getTime(), -60 * 60);
								}
							}
						}
						if (!this._oZoomStrategy.isLowerRowTickHourSensitive()){
							value = localAxisTime.timeToView(d3.time.second.offset(date.getTime(), -60 * 60));
						} else {
							value = localAxisTime.timeToView(normalDate);
						}
						if (bIgnoreTickFlag){
							break;
						} else if (oChangeDate){
							
							label = this._oZoomStrategy.getLowerRowFormatter().format(oChangeDate);
							oChangeDate = null;
						} else {
							
							label = this._oZoomStrategy.getLowerRowFormatter().format(date);
						}

						smallIntervalData.push({"date": date, "value": Math.round(value), "label": label});

					}
				}
			}
			ticks.push(smallIntervalData);
		} else {
			ticks.push([]);
		}

		return ticks;
	};
	// <= public methods

	AxisTime.prototype._calculateScale = function(timeRangeSet, viewRangeSet, timeRange, viewRange, localTimeRange){
		var visibleScale = null;
		var dstScale = [];
		var normalScale = [];
		if (timeRangeSet.length){
			visibleScale = [];
			var dstCount = 0;
			var visibleCount = 0;
			for (var t = 0; t < timeRangeSet.length; t++){
				viewRangeSet[t] = [this.timeToView(timeRangeSet[t].range[0]), this.timeToView(timeRangeSet[t].range[1])];
				if (timeRangeSet[t].haveDST){
					dstScale[dstCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].dstRange, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null).scale;
					normalScale[dstCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].range, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null).scale;
					dstCount++;
				} else {
					visibleScale[visibleCount] = new sap.gantt.misc.AxisTime(timeRangeSet[t].range, viewRangeSet[t], this.zoomRate, this.zoomOrigin, this.viewOffset, null).scale;
					visibleCount++;
				}
			}
		} else if (localTimeRange) {
			visibleScale = new sap.gantt.misc.AxisTime(localTimeRange, this.viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null).scale;
		} else {
			visibleScale = new sap.gantt.misc.AxisTime(timeRange, viewRange, this.zoomRate, this.zoomOrigin, this.viewOffset, null).scale;
		}
		var retVal = {"viewRangeSet": viewRangeSet, "visibleScale" : visibleScale, "dstScale" : dstScale, "normalScale" : normalScale};
		return retVal;
	};

	AxisTime.prototype._calculateTimeRange = function(dlsIntervals, startTimeRange, endTimeRange, timeRangeSet){
		if (dlsIntervals.length){
			var startTime = startTimeRange;
			var endTime = endTimeRange;
			var tempTimeRange = [];
			var tempDstRange = [];
			var dstStartDate, dstEndDate;
			dstStartDate = dlsIntervals[0].startDate;
			dstEndDate = dlsIntervals[0].endDate;
			this._calculateRangeItem(dstStartDate, dstEndDate, startTime, endTime, tempTimeRange, tempDstRange);
			if (dlsIntervals.length > 1){
				for (var j = 1; j < dlsIntervals.length; j++){
					if (tempTimeRange.length){
						var rangeNeedCal = [];
						for (var item in tempTimeRange){
							rangeNeedCal.push(tempTimeRange[item]);
						}

						tempTimeRange = [];
						//tempDstRange = [];
						for (var t = 0 ; t < rangeNeedCal.length; t++){
							dstStartDate = dlsIntervals[j].startDate;
							dstEndDate = dlsIntervals[j].endDate;
							startTime = rangeNeedCal[t].range[0];
							endTime = rangeNeedCal[t].range[1];
							this._calculateRangeItem(dstStartDate, dstEndDate, startTime, endTime, tempTimeRange, tempDstRange);
						}
					}
				}
			}

			for (var dst in tempDstRange){
				timeRangeSet.push(tempDstRange[dst]);
			}
			for (var time in tempTimeRange){
				timeRangeSet.push(tempTimeRange[time]);
			}
		}
	};

	AxisTime.prototype._calculateRangeItem = function(dstStartDate, dstEndDate, startTimeRange, endTimeRange, tempTimeRange, timeRangeSet){
		var rangeItem = null;
		if (startTimeRange < dstStartDate){
			if (endTimeRange < dstEndDate){
				if (endTimeRange > dstStartDate){
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [startTimeRange, dstStartDate];
					tempTimeRange.push(rangeItem);
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [dstStartDate, endTimeRange];
					rangeItem.dstRange = [d3.time.second.offset(dstStartDate.getTime(), 60 * 60), d3.time.second.offset(endTimeRange, 60 * 60)];
					timeRangeSet.push(rangeItem);
				} else {
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [startTimeRange, endTimeRange];
					tempTimeRange.push(rangeItem);
				}
			} else {
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [startTimeRange, dstStartDate];
				tempTimeRange.push(rangeItem);
				rangeItem = {};
				rangeItem.haveDST = true;
				rangeItem.range = [dstStartDate, dstEndDate];
				rangeItem.dstRange = [d3.time.second.offset(dstStartDate.getTime(), 60 * 60), d3.time.second.offset(dstEndDate.getTime(), 60 * 60)];
				timeRangeSet.push(rangeItem);
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [dstEndDate, endTimeRange];
				tempTimeRange.push(rangeItem);
			}
		} else if (startTimeRange >= dstStartDate){
			if (startTimeRange < dstEndDate){
				if (endTimeRange <= dstEndDate){
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [startTimeRange, endTimeRange];
					rangeItem.dstRange = [d3.time.second.offset(startTimeRange, 60 * 60), d3.time.second.offset(endTimeRange, 60 * 60)];
					timeRangeSet.push(rangeItem);
				} else {
					rangeItem = {};
					rangeItem.haveDST = true;
					rangeItem.range = [startTimeRange, dstEndDate];
					rangeItem.dstRange = [d3.time.second.offset(startTimeRange, 60 * 60), d3.time.second.offset(dstEndDate.getTime(), 60 * 60)];
					timeRangeSet.push(rangeItem);
					rangeItem = {};
					rangeItem.haveDST = false;
					rangeItem.range = [dstEndDate, endTimeRange];
					tempTimeRange.push(rangeItem);
				}
			} else {
				rangeItem = {};
				rangeItem.haveDST = false;
				rangeItem.range = [startTimeRange, endTimeRange];
				tempTimeRange.push(rangeItem);
			}
		}
	};

	return AxisTime;
}, true);

}; // end of sap/gantt/misc/AxisTime.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.ShapeManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides class sap.ui.model.SelectionModel
jQuery.sap.declare('sap.gantt.misc.ShapeManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/ShapeManager",["jquery.sap.global", "sap/ui/base/EventProvider", "./Utility"],
	function(jQuery, EventProvider, Utility) {
	"use strict";

	/**
	 * Constructs an instance of a sap.gantt.misc.ShapeManager.
	 *
	 * @class
	 * @extends sap.ui.base.EventProvider
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @param {int} oGantt <code>sap.gantt.GanttChartBase</code>
	 *
	 * @constructor
	 * @private
	 * @alias sap.ui.model.SelectionModel
	 */
	var ShapeManager = EventProvider.extend("sap.gantt.misc.ShapeManager", /** @lends sap.gantt.misc.ShapeManager.prototype */ {

		constructor : function(oGantt) {
			EventProvider.apply(this);

			this.mShapeElementIds = {};

			this.mShapeConfig = {};

			// {shapeKey: shapeInstance}
			this.mShapeInstance = {};
			// [shapeInstance1, shapeInstance2]
			this.aShapeInstance = [];

			this.oGantt = oGantt;
		}

	});

	ShapeManager.prototype.instantiateShapes = function(aShapes) {
		this.mShapeConfig = {};

		for (var i = 0; i < aShapes.length; i++) {
			this.mShapeConfig[aShapes[i].getKey()] = aShapes[i];
		}

		this.aShapeInstance = this.recursiveInstantiateShapes(this.mShapeConfig);

		jQuery.each(this.aShapeInstance, function (iKey, oShapeInstance) {
			this.mShapeInstance[oShapeInstance.mShapeConfig.getKey()] = oShapeInstance;
		}.bind(this));
	};

	ShapeManager.prototype.getAllShapeInstances = function() {
		return this.aShapeInstance;
	};

	ShapeManager.prototype.getSelectedShapeInstance = function(oShapeConfig, oShapeInstance) {
		var oSelectedShapeInst = null;

		var category = oShapeInstance.getCategory(null, this.oGantt.getAxisTime(), this.oGantt.getAxisOrdinal());

		var sSelectedShapeClassName = oShapeConfig.getSelectedClassName();
		if (!sSelectedShapeClassName) {
			if (category === sap.gantt.shape.ShapeCategory.Relationship) {
				sSelectedShapeClassName = "sap.gantt.shape.ext.rls.SelectedRelationship";
			}else {
				sSelectedShapeClassName = "sap.gantt.shape.SelectedShape";
			}
		}
		oSelectedShapeInst = this.instantiateShapeClass(sSelectedShapeClassName);

		return oSelectedShapeInst;
	};

	ShapeManager.prototype.recursiveInstantiateShapes = function (mShapeConfig, sParentShapeKey) {
		var aInstances = [],
			oShapeInst;

		for (var sKey in mShapeConfig) {
			var sShapeKey = sParentShapeKey ? sParentShapeKey : sKey;
			var sIdentifier = sParentShapeKey ? sParentShapeKey + "_" + sKey : sKey;

			var oShapeConfig = mShapeConfig[sKey];
			var sShapeClassName = oShapeConfig.getShapeClassName();
			if (sShapeClassName) {
				// create shape instance
				oShapeInst = this.instantiateShapeClass(sShapeClassName);
				this.setSpecialProperty(oShapeInst, oShapeConfig);

				this.setShapeElementId(sIdentifier, sShapeKey, oShapeInst.getId());

				// create selected shape instance for top shape only
				if (!sParentShapeKey){
					var oSelectedShapeInst = this.getSelectedShapeInstance(oShapeConfig, oShapeInst);

					this.setSpecialProperty(oSelectedShapeInst, oShapeConfig);

					oShapeInst.setAggregation("selectedShape", oSelectedShapeInst);

					sIdentifier = sShapeKey + "_selected" + sShapeKey;
					this.setShapeElementId(sIdentifier, undefined, oSelectedShapeInst.getId());
					
					// create shadow shape instance for resizing
					this._createResizeShadowShape(oShapeConfig, oShapeInst, sShapeKey + "_resizeShadow" + sShapeKey);
				}
				// create aggregations
				var aShapeGroup = oShapeConfig.getGroupAggregation();
				if (aShapeGroup && aShapeGroup instanceof Array) {
					// create aggregation classes for group
					var aAggregation = this.recursiveInstantiateShapes(aShapeGroup, sShapeKey);
					for (var k = 0; k < aAggregation.length; k++) {
						oShapeInst.addShape(aAggregation[k]);
					}
				}
				var aShapeClipPath = oShapeConfig.getClippathAggregation();
				if (aShapeClipPath && aShapeClipPath instanceof Array) {
					// create aggregation classes for clip-path
					var aPath = this.recursiveInstantiateShapes(aShapeClipPath, sShapeKey);
					for (var j = 0; j < aPath.length; j++) {
						oShapeInst.addPath(aPath[j]);
					}
				}
			}

			aInstances.push(oShapeInst);
		}

		// sort top shape instances and create map by shape id
		if (!sParentShapeKey){
			this.sortByShapeLevelAccendingly(aInstances);
		}

		return aInstances;
	};

	/**
	 * Set mShapeConfig and mChartInstance to Shape Instance for further process.
	 * Shape Instance requires those when drawing SVG
	 *
	 * @param {object} oShapeInstance Shape Element Instance
	 * @param {object} oShapeConfig <code>sap.gantt.config.Shape</code> instance
	 * @private
	 */
	ShapeManager.prototype.setSpecialProperty = function(oShapeInstance, oShapeConfig) {
		oShapeInstance.mShapeConfig = oShapeConfig;
		oShapeInstance.mChartInstance = this.oGantt;
		oShapeInstance.dataSet = [];
	};

	ShapeManager.prototype.sortByShapeLevelAccendingly = function(aInstances) {
		aInstances.sort(function (oShape1, oShape2) {
			var sLevel1 = oShape1.mShapeConfig.getLevel(),
				sLevel2 = oShape2.mShapeConfig.getLevel();
			var level1 = jQuery.isNumeric(sLevel1) ? sLevel1 : 99;
			var level2 = jQuery.isNumeric(sLevel2) ? sLevel2 : 99;
			return level2 - level1;
		});
	};

	ShapeManager.prototype.instantiateShapeClass = function (sShapeClassName) {
		var CustomerClass = jQuery.sap.getObject(sShapeClassName);
		if (!CustomerClass) {
			jQuery.sap.require(sShapeClassName);
			CustomerClass = jQuery.sap.getObject(sShapeClassName);
		}
		var oShapeInstance = new CustomerClass();
		if (!oShapeInstance) {
			jQuery.sap.log.error("shapeClassName:" + sShapeClassName + " can't be instantiated");
			jQuery.sap.log.warning("shapeClassName:" + sShapeClassName + " fallback to sap.gantt.shape.Shape");
			oShapeInstance = new sap.gantt.shape.Shape();
		}
		return oShapeInstance;
	};

	/**
	 * Check if the shape whether selection is enabled or not
	 *
	 * @param {object} oShapeData binded Shape data
	 * @param {string} sElementId shape DOM ID
	 * @return {boolean} true: selectable, false: non-selectable
	 * @private
	 */
	ShapeManager.prototype.isShapeSelectable = function (oShapeData, sElementId) {
		return this.getShapePropertyValue("enableSelection", oShapeData, sElementId);
	};
	
	/**
	 * Indicates whether the shape can be resized by calling getEnableResize method of the related shape instance 
	 * (or a top shape if the shape is in a group)
	 *
	 * @param {object} oShapeData binded Shape data
	 * @param {string} sElementId shape DOM ID
	 * @return {boolean} true: resizable, false: non-resizable
	 * @private
	 */
	ShapeManager.prototype.isShapeResizable = function (oShapeData, sElementId) {
		return this.getShapePropertyValue("enableResize", oShapeData, sElementId);
	};
	
	/**
	 * Indicates whether or not the shape has duration time.
	 *
	 * @param {object} oShapeData binded Shape data
	 * @param {string} sElementId shape DOM ID
	 * @return {boolean} true: duration, false: non-duration
	 * @private
	 */
	ShapeManager.prototype.isShapeDuration = function (oShapeData, sElementId) {
		return this.getShapePropertyValue("isDuration", oShapeData, sElementId);
	};


	/**
	 * Get property value from shape instance dynamically.
	 *
	 * @param {string} sProperty property name
	 * @param {object} oShapeData binded shape data
	 * @param {string} sElementId Shape (modeled via sap.ui.core.Element) instance id
	 * @return {any} property value
	 * @private
	 */
	ShapeManager.prototype.getShapePropertyValue = function(sProperty, oShapeData, sElementId) {
		var oInstance, vValue;
		if (oShapeData) {
			oInstance = this.getShapeInstance(oShapeData, sElementId) || sap.ui.getCore().byId(sElementId);
			var sMethod = "get" + sProperty.substr(0,1).toUpperCase() + sProperty.substr(1);
			vValue = oInstance[sMethod](oShapeData);
		}
		return vValue;
	};

	/**
	 * Check if the shape can be drag & drop by call getEnableDnD method of related shape instance
	 * (or top shape when shape in a group)
	 *
	 * @param {object} oShapeData binded Shape data
	 * @param {string} sElementId shape DOM ID
	 * @return {boolean} true: draggable, false: non-draggable
	 * @private
	 */
	ShapeManager.prototype.isShapeDraggable = function (oShapeData, sElementId) {
		return this.getShapePropertyValue("enableDnD", oShapeData, sElementId);
	};

	/**
	 *
	 * @param {string} sIdentifier Hash MAP key
	 * @param {string} sShapeKey Shape key property from Shape configuration
	 * @param {string} sShapeElementId Shape instance id
	 * @private
	 */
	ShapeManager.prototype.setShapeElementId = function (sIdentifier, sShapeKey, sShapeElementId) {

		this.mShapeElementIds[sIdentifier] = {
			"shapeElementId": sShapeElementId,
			"shapeKey": sShapeKey
		};
	};

	/**
	 * Get Shape Instance based on the binded shape data or element ID directly.
	 *
	 * @private
	 *
	 * @param {object} oShapeData binded shape data
	 * @param {string} sShapeElementId Element sId
	 * @return {object} Shape Instance
	 */
	ShapeManager.prototype.getShapeInstance = function(oShapeData, sShapeElementId) {
		var oConfig = {};
		if (sShapeElementId) {
			oConfig = this._getShapeElementConfig(sShapeElementId);
		} else {
			var sShapeDataName = Utility.getShapeDataNameByUid(oShapeData.uid);
			for (var sShapeKey in this.mShapeInstance) {
				var sShapeName = this.mShapeInstance[sShapeKey].mShapeConfig.getShapeDataName();
				if (sShapeDataName === sShapeName){
					oConfig = this.mShapeElementIds[sShapeKey];
					break;
				}
			}
		}
		return this.mShapeInstance[oConfig ? oConfig.shapeKey : null];
	};

	ShapeManager.prototype._getShapeElementConfig = function (sShapeElementId) {

		for (var sShapeKey in this.mShapeElementIds) {
			var oConfig = this.mShapeElementIds[sShapeKey];
			if (oConfig.shapeElementId === sShapeElementId) {
				return oConfig;
			}
		}
		return null;
	};

	//collect selected shape data and put them into data-set of related shape instance
	ShapeManager.prototype.collectDataForSelectedShapes = function (oSelection, mObjectTypeConfig, mChartSchemeConfig) {
		var mShapeInstanceWithKeys = this.mShapeInstance;

		for (var sShapeKey in mShapeInstanceWithKeys) {
			var oShapeInstance = mShapeInstanceWithKeys[sShapeKey];
			// If sShapeDataName is undefiend, the selectedShape will use row data to draw selection frame.

			var sShapeDataName = oShapeInstance.mShapeConfig.getShapeDataName();
			var oSelectedClassIns = oShapeInstance.getAggregation("selectedShape");
			var sCategory = oSelectedClassIns.getCategory(null, this.oGantt.getAxisTime(), this.oGantt._oAxisOrdinal);
			//collect shape data for every selectedClass instance according to current selection
			oSelectedClassIns.dataSet = [];

			if (sCategory === sap.gantt.shape.ShapeCategory.Relationship) {
				var aSelectedRelationships = oSelection.getSelectedRelationships();
				oSelectedClassIns.dataSet.push({
					"shapeData": aSelectedRelationships
				});
			} else {
				var aSelectedShapes = oSelection.getSelectedShapeDatum();

				for (var iIndex = 0; iIndex < aSelectedShapes.length; iIndex++) {
					var oSelectedShapeData = aSelectedShapes[iIndex];
					if (Utility.getShapeDataNameByUid(oSelectedShapeData.uid) !== sShapeDataName) {
						continue;
					}

					var oRowDatum = Utility.getRowDatumByShapeUid(oSelectedShapeData.uid, this.oGantt.getId());
					// selected shape might not visible in gantt chart, for instance, been collapsed
					// So much check if selected shape is currently visible
					var bVisible = oSelection.isSelectedShapeVisible(oSelectedShapeData.uid, this.oGantt.getId());
					if (oRowDatum && bVisible && this.isShapeSelectable(oSelectedShapeData, oShapeInstance.getId()) &&
							this.isShapeDisplayableInRow(oRowDatum, sShapeKey, mObjectTypeConfig, mChartSchemeConfig)){
						oSelectedClassIns.dataSet.push({
							"objectInfoRef": oRowDatum,
							"shapeData": [oSelectedShapeData]
						});
					}
				}
			}
		}
	};

	/**
	 * This method collect data according to current row's configuration/objectType/shape/chart scheme/mode.
	 * this._aFilteredRowData contains the data for all different shapes so here we need to pick up by sShapeName
	 * once is function finished execution, each instance of shape classes will have 'dataset' attribute
	 * and it is an array of the data picked up from this._aFilteredRowData for drawing that shape.
	 * 
	 * @private
	 *
	 * @param {array} aRowData an array of filtered data from table rows
	 * @param {object} mObjectTypeConfig a key value pair of <code>sap.gantt.config.ObjectType</code>
	 * @param {object} mChartSchemeConfig a key value pair of <code>sap.gantt.config.ChartScheme</code>
	 */
	ShapeManager.prototype.collectDataForAllShapeInstances = function(aRowData, mObjectTypeConfig, mChartSchemeConfig) {
		var bJSONTreeBinding = true;

		var mShapeInstanceWithKeys = this.mShapeInstance;
		for (var sShapeKey in mShapeInstanceWithKeys) {
			var oShapeInstance = mShapeInstanceWithKeys[sShapeKey];
			var oShapeData;
			var sBindingName = oShapeInstance.mShapeConfig.getShapeDataName();

			// clear the existing dataset before collecting for next drawing cycle
			oShapeInstance.dataSet = [];
			if (oShapeInstance._attributeNameBindingMap) {
				oShapeInstance._attributeNameBindingMap = undefined;
			}

			for (var i = 0; i < aRowData.length; i++) {
				//this._aFilteredRowData contains the data for all different shapes so here we need to pick up by sShapeName
				var oRowData = aRowData[i];

				if (!sBindingName) {
					//if user doesn't configure the shape with 'shapeDataName', add all row data to the shape
					oShapeInstance.dataSet.push({
						"objectInfoRef": oRowData,
						"shapeData": oRowData.data
					});
					continue;
				}

				var bDisplayable = this.isShapeDisplayableInRow(oRowData, sShapeKey, mObjectTypeConfig, mChartSchemeConfig);
				if (!bDisplayable) {
					continue;
				}

				if (bJSONTreeBinding){
					oShapeData = oRowData.data[sBindingName];
				} else if (sBindingName === oRowData.shapeName) {
					oShapeData = oRowData.shapeData;
				} else {
					continue;
				}
				if (oShapeData){
					oShapeInstance.dataSet.push({
						"objectInfoRef": oRowData,
						"shapeData": oShapeData
					});
				}
			}
		}
	};

	//the display of shapes can be influenced by Mode
	ShapeManager.prototype.isShapeDisplayableInRow = function (oRowData, sShapeKey, mObjectTypeConfig, mChartSchemeConfig) {
		var sChartScheme;
		if (oRowData.chartScheme) {
			sChartScheme = oRowData.chartScheme;
		} else {
			sChartScheme = mObjectTypeConfig[oRowData.type] ? mObjectTypeConfig[oRowData.type].getMainChartSchemeKey() :
					sap.gantt.config.DEFAULT_CHART_SCHEME_KEY;
		}
		var oChartScheme = mChartSchemeConfig[sChartScheme];
		if (oChartScheme === undefined) {
			return false;
		}
		var aShapeIdsInChartScheme = oChartScheme.getShapeKeys();
		/*
		 * determine mode. if mode is coded against chart scheme, it over-write current mode in chart
		 */
		var sMode = oChartScheme.getModeKey() !== sap.gantt.config.DEFAULT_MODE_KEY ?
				oChartScheme.getModeKey() :
				this.oGantt.getMode();
		//sMode = oChartScheme.getModeKey() ? oChartScheme.getModeKey() : this.getMode();
		/*
		 * check if shape should appear in current chart scheme and mode
		 */
		var mShapeConfig = this.mShapeConfig;
		if ((sChartScheme !== sap.gantt.config.DEFAULT_CHART_SCHEME_KEY && aShapeIdsInChartScheme.indexOf(sShapeKey) === -1 )
				|| (sMode !== sap.gantt.config.DEFAULT_MODE_KEY
					&& mShapeConfig[sShapeKey].getModeKeys()
					&& mShapeConfig[sShapeKey].getModeKeys().length > 0
					&& mShapeConfig[sShapeKey].getModeKeys().indexOf(sMode) < 0 )
				|| !oRowData.data) {
			return false;
		}
		return true;
	};

	//Check if Relationship can be display in current Mode
	ShapeManager.prototype.isRelationshipDisplayable = function (oShapeInstance) {

		var mShapeConfig = this.mShapeConfig;
		var sShapeConfigKey = oShapeInstance.mShapeConfig.getKey();
		var aShapeMode = mShapeConfig[sShapeConfigKey] ? mShapeConfig[sShapeConfigKey].getModeKeys() : [];
		if (jQuery.inArray(this.oGantt.getMode(), aShapeMode) === -1 && this.oGantt.getMode() !== sap.gantt.config.DEFAULT_MODE_KEY) {
			return false;
		}

		return true;
	};
	
	ShapeManager.prototype.getResizeShadowShapeInstance = function(oShapeConfig, oShapeInstance) {
		var oResizeShadowShapeInst = null;

		var category = oShapeInstance.getCategory(null, this.oGantt.getAxisTime(), this.oGantt.getAxisOrdinal());

		var sResizeShadowShapeClassName = oShapeConfig.getResizeShadowClassName();
		if (!sResizeShadowShapeClassName || sResizeShadowShapeClassName === "") {
			if (category === sap.gantt.shape.ShapeCategory.InRowShape) {
				sResizeShadowShapeClassName = "sap.gantt.shape.ResizeShadowShape";
			} else {
				return null;//return null as relationship don't need resizing for now
			}
		}
		oResizeShadowShapeInst = this.instantiateShapeClass(sResizeShadowShapeClassName);
		return oResizeShadowShapeInst;
	};
	
	ShapeManager.prototype._createResizeShadowShape = function (oShapeConfig, oShapeInst, sResizeShadowIdentifier) {
		var oResizeShadowShapeInst = this.getResizeShadowShapeInstance(oShapeConfig, oShapeInst);

		if (oResizeShadowShapeInst) {
			this.setSpecialProperty(oResizeShadowShapeInst, oShapeConfig);
			oShapeInst.setAggregation("resizeShadowShape", oResizeShadowShapeInst);
			this.setShapeElementId(sResizeShadowIdentifier, undefined, oResizeShadowShapeInst.getId());
		}
	};

	return ShapeManager;

});

}; // end of sap/gantt/misc/ShapeManager.js
if ( !jQuery.sap.isDeclared('sap.gantt.misc.ShapeSelectionModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides class sap.gantt.ShapeSelectionModel
jQuery.sap.declare('sap.gantt.misc.ShapeSelectionModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/gantt/misc/ShapeSelectionModel",["jquery.sap.global", "sap/ui/base/ManagedObject", "sap/gantt/misc/Utility"],
	function(jQuery, ManagedObject, Utility) {
	"use strict";

	/**
	 * Constructs an instance of a sap.gantt.ShapeSelectionModel.
	 *
	 * @class
	 * @extends sap.ui.base.ManagedObject
	 *
	 * @author SAP SE
	 * @version {version}
	 *
	 * @param {string} sSelectionMode <code>sap.gantt.SelectionMode.MultiWithKeyboard</code> or
	 * <code>sap.gantt.SelectionMode.Multiple</code> or <code>sap.gantt.SelectionMode.Single</code>
	 * or <code>sap.gantt.SelectionMode.None</code>
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.ShapeSelectionModel
	 */
	var ShapeSelectionModel = ManagedObject.extend("sap.gantt.misc.ShapeSelectionModel", /** @lends sap.gantt.misc.ShapeSelectionModel.prototype */ {

		constructor : function(sId, mSettings) {
			ManagedObject.apply(this, arguments);

			this.aSelectedRelationships = [];

			this.mSelectedShapes = {
				"uid": [],
				"shapes": []
			};
		},
		metadata: {
			properties: {
				"selectionMode": {
					type: "sap.gantt.SelectionMode",
					defaultValue: sap.gantt.SelectionMode.MultiWithKeyboard
				}
			},
			associations: {
				/**
				 * The target gantt chart.
				 */
				"ganttChart": {
					type: "sap.gantt.GanttChart",
					multiple: false
				}
			}
		}
	});

	var DatumType = {
		Row: "Row",
		Shape: "Shape"
	};

	ShapeSelectionModel.prototype.clearAllSelections = function() {
		var bChanged = this.clearShapeSelection();
		var bRlsChanged = this.clearRelationshipSelection();
		return bChanged && bRlsChanged;
	};

	/**
	 * Clear shape selection.
	 *
	 * @return {boolean} true if shape selection changed.
	 */
	ShapeSelectionModel.prototype.clearShapeSelection = function() {
		if (this.mSelectedShapes.uid.length === 0) {
			return false;
		}
		this.mSelectedShapes.uid = [];
//		this.mSelectedShapes.shapes = [];
		return true;
	};

	/**
	 * Clear relationship selection.
	 *
	 * @return {boolean} true if shape selection changed.
	 */
	ShapeSelectionModel.prototype.clearRelationshipSelection = function() {
		if (this.aSelectedRelationships.length === 0) {
			return false;
		}
		this.aSelectedRelationships = [];
		return true;
	};

	/**
	 * Get all selected shapes in Row.
	 *
	 * @return {array} return an array of selected shape datum
	 */
	ShapeSelectionModel.prototype.getSelectedShapeDatum = function() {
		var aDatum = [];
		var iLength = this.mSelectedShapes.uid.length;
		for(var i = 0; i < iLength; i++) {
			var sUid = this.mSelectedShapes.uid[i];
			var oDatum = this.getShapeDatumByShapeUid(sUid);
			if (oDatum) {
				aDatum.push(oDatum);
			}
		}
		return aDatum;
	};

	/**
	 * Get All selected relationships.
	 *
	 * @return {array} an list of selected relationship
	 */
	ShapeSelectionModel.prototype.getSelectedRelationships = function() {
		return this.aSelectedRelationships;
	};

	/**
	 * Check if the shape is selected
	 *
	 * @param {string} sShapeUid Shape UID
	 * @return {boolean} true if shape is selected, otherwise false returned
	 */
	ShapeSelectionModel.prototype.isShapeSelected = function(sShapeUid) {
		return jQuery.inArray(sShapeUid, this.mSelectedShapes.uid) === -1 ? false : true;
	};

	/**
	 * Check whether a relationship is selected or not.
	 *
	 * @param {string} sUid shape UID
	 * @return {boolean} true selected false: unselected
	 */
	ShapeSelectionModel.prototype.isRelationshipSelected = function(sUid) {
		return this.aSelectedRelationships.some(function(oShape){
			return oShape.uid === sUid;
		});
	};

	/**
	 * @private
	 */
	ShapeSelectionModel.prototype.isSelectedShapeVisible = function(sShapeUid, sContainer) {
		var sShapeId = Utility.getIdByUid(sShapeUid);
		// same shape might displayed in different gantt chart
		var aDatum = Utility.getShapeDatumById(sShapeId, sContainer);
		return aDatum.some(function(oItem){
			return oItem.uid === sShapeUid;
		});
	};

	/**
	 * Check if shapeSelectionChange and relationshipSelectionChange happen
	 *
	 * @param {object} oShapeData the shape you want to select
	 * @param {object} oRowInfo the original event, e.g. mouseup
	 * @param {boolean} bCtrlOrMeta if ctrl key is pressed in the original event, on Mac systems the Meta key should be checked instead of the Ctrl key.
	 * @param {boolean} bDragging if user is dragging the shape
	 * @return {object} {shapeSelectionChange, relationshipSelectionChange} return
	 * shapeSelectionChange=true when select shape selection changed,
	 * relationshipSelectionChange=true when relationship selection changed
	 */
	ShapeSelectionModel.prototype.changeShapeSelection = function (oShapeData, oRowInfo, bCtrlOrMeta, bDragging, bResizing) {
		/*
		 * Click on Shapes:	Clear any existing selection of all shape and select current shape.
		 * Click on Shapes + control key:	Keep existing selection of all shapes and change selection of current shape.	Keep all rows selection. Keep all relationship selection
		 * above 2 same for the relationships
		 * Old: Click on Shape + shift key = Click on Shape
		 */
		var bShapeSelectionChange,
			bRelationshipSelectionChange;

		// shouldn't do anything if selection mode is None
		if (this.getSelectionMode() === sap.gantt.SelectionMode.None) {
			return {
				shapeSelectionChange: false,
				relationshipSelectionChange: false
			};
		}

		//check is the current shape a relationship
		var isRelationship = (Utility.getShapeDataNameByUid(oShapeData.uid) === sap.gantt.shape.ShapeCategory.Relationship);

		var bMultiSelection = (bCtrlOrMeta && this.getSelectionMode() === sap.gantt.SelectionMode.MultiWithKeyboard) || this.getSelectionMode() === sap.gantt.SelectionMode.Multiple;
		/*
		 * when ctrl key is pressed or in Fiori multiple selection mode, clicking on an selected shape should be de-selection
		 */
		if (bMultiSelection) {
			// multiple selection scenario
			if (isRelationship) {
				if (this.isRelationshipSelected(oShapeData.uid)){
					bRelationshipSelectionChange = this.deselectRelationship(oShapeData.uid);
				} else {
					bRelationshipSelectionChange = this.selectRelationship(oShapeData);
				}
			} else {
				//if the shape is already in selectedShapes, deselect it, otherwise select it
				if (this.isShapeSelected(oShapeData.uid) && !bDragging && !bResizing){
					bShapeSelectionChange = this.deselectShape(oShapeData.uid);
				} else {
					bShapeSelectionChange = this.selectByShapeData(oShapeData);
				}
			}
		} else {
			// non-multiple selection
			if (isRelationship) {
				/*
				 * clicking a relationship without control key,
				 * if the relationship was unselected, clear existing shape/relationship selection and select current relationship
				 */
				if (!this.isRelationshipSelected(oShapeData.uid)) {
					bRelationshipSelectionChange = this.clearRelationshipSelection();
					bShapeSelectionChange = this.clearShapeSelection();
					bRelationshipSelectionChange = this.selectRelationship(oShapeData) ? true : bRelationshipSelectionChange;
				}
			} else {
				/* clicking a shape, without control key
				 * if the shape was unselected, clear existing shape/relationship selection and select current shape
				 */
				if (!this.isShapeSelected(oShapeData.uid) && !bDragging && !bResizing) {
					bRelationshipSelectionChange = this.clearRelationshipSelection();
					bShapeSelectionChange = this.clearShapeSelection();
					bShapeSelectionChange = this.selectByShapeData(oShapeData) ? true : bShapeSelectionChange;
				}
			}
		}
		return {
			shapeSelectionChange: bShapeSelectionChange,
			relationshipSelectionChange: bRelationshipSelectionChange
		};
	};

	/**
	 * Select a single shape
	 *
	 * @param {object} oShapeData the binded shape data you want to select
	 * @return {boolean} return true when select a shape successfully
	 */
	ShapeSelectionModel.prototype.selectByShapeData = function (oShapeData) {
		if (!oShapeData || this.isShapeSelected(oShapeData.uid)) {
			return false;
		}

		this.mSelectedShapes.uid.push(oShapeData.uid);
//		this.mSelectedShapes.shapes.push(oShapeData);

		return true;
	};

	ShapeSelectionModel.prototype.selectShapeByUid = function (aUid) {
		var bRetVal;
		if (aUid && aUid.length > 0) {
			for (var i = 0; i < aUid.length; i++) {
				bRetVal = bRetVal || this.selectByShapeData(this.getShapeDatumByShapeUid(aUid[i]));
			}
		}
		return bRetVal;
	};

	/**
	 * de-select a single shape by it's uid
	 *
	 * @param {object} sShapeUid the shape you want to deselect
	 * @return {boolean} return true when deselect a shape successfully
	 */
	ShapeSelectionModel.prototype.deselectShape = function (sShapeUid) {
		var iIndex = jQuery.inArray(sShapeUid, this.mSelectedShapes.uid);
		if (iIndex >= 0) {
			this.mSelectedShapes.uid.splice(iIndex, 1);
//			this.mSelectedShapes.shapes.splice(iIndex, 1);
		} else {
			return false;
		}

		return true;
	};

	/**
	 * Select multiple shapes by their binded shape data
	 *
	 * @param {array} [aShapeId] a list of shapes ID
	 * @param {boolean} bExclusive if need to clear other existing selection of shapes
	 * @return {boolean} return true when select shapes successfully
	 */
	ShapeSelectionModel.prototype.selectShapes = function(aShapeId, bExclusive) {

		if (!aShapeId || aShapeId.length === 0) {
			return this.clearShapeSelection();
		}
		var bUpdated;
		if (bExclusive) {
			bUpdated = this.clearShapeSelection();
		}

		var aShapes = this._getShapeDatumForSelection(aShapeId);

		for (var j = 0; j < aShapes.length; j++) {
			bUpdated = this.selectByShapeData(aShapes[j]) ? true : bUpdated;
		}
		return bUpdated;
	};

	/**
	 * Deselect shapes accordingly to shape IDs
	 *
	 * @param {array} [aIds] List ID of the shapes
	 * @return {boolean} true when shape selection changed
	 */
	ShapeSelectionModel.prototype.deselectShapes = function(aIds) {
		if (!aIds || aIds.length === 0) {
			return this.clearShapeSelection();
		}
		var bUpdated;

		var aShapeDatum = this.getSelectedShapeDatum();
		for (var i = 0; i < aShapeDatum.length; i++){
			var oShapeData = aShapeDatum[i];
			if (jQuery.inArray(oShapeData.__id__, aIds) >= 0) {
				bUpdated = this.deselectShape(oShapeData.uid) ? true : bUpdated;
			}
		}

		return bUpdated;
	};

	/**
	 * Select a single relationship shape
	 *
	 * @param {object} oRelationship relationship data
	 * @return {boolean} true if relationship selection changed
	 */
	ShapeSelectionModel.prototype.selectRelationship = function(oRelationship) {
		if (this.isRelationshipSelected(oRelationship.uid)) {
			return false;
		}
		this.aSelectedRelationships.push(oRelationship);
		return true;
	};

	/**
	 * De-select a relationship by it's uid
	 *
	 * @private
	 * @param {string} sRelationshipUid uid of the relationship to be selected
	 * @return {boolean} true if relationship selection changed
	 */
	ShapeSelectionModel.prototype.deselectRelationship = function(sRelationshipUid) {
		var that = this;
		var bUpdated = jQuery.each(this.aSelectedRelationships, function (iIndex, relationship) {
			if (relationship.uid === sRelationshipUid) {
				that.aSelectedRelationships.splice(iIndex, 1);
				return true;
			}
		});
		return bUpdated ? true : false;
	};

	/**
	 * select multiple relationships
	 * @param {array} [aRelationships] List relationships which enable Selection
	 * @param {boolean} bExclusive if clear existing relationship selection
	 * @return {boolean} return true when select relationships successfully
	 */
	ShapeSelectionModel.prototype.selectRelationships = function(aRelationships, bExclusive) {
		if (!aRelationships || aRelationships.length === 0) {
			return this.clearRelationshipSelection();
		}
		var bUpdated;
		if (bExclusive) {
			bUpdated = this.clearRelationshipSelection();
		}
		for (var i = 0; i < aRelationships.length; i++) {
			bUpdated = this.selectRelationship(aRelationships[i]) ? true : bUpdated;
		}
		return bUpdated;
	};

	/**
	 * de-select multiple relationships by their ids
	 * @param {array} [aIds] List ids of the relationships you want to deselect
	 * @return {boolean} return true when deselect relationships successfully
	 */
	ShapeSelectionModel.prototype.deselectRelationships = function(aIds) {
		if (!aIds || aIds.length === 0) {
			return this.clearRelationshipSelection();
		} else {
			var bUpdated;
			for (var j in this.aSelectedRelationships) {
				var oRelationship = this.aSelectedRelationships[j];
				if (jQuery.inArray(oRelationship.id, aIds) >= 0) {
					bUpdated = this.deselectRelationship(oRelationship.uid) ? true : bUpdated;
				}
			}
			return bUpdated;
		}
	};

	/**
	 * @private
	 */
	ShapeSelectionModel.prototype.selectUnderlyingTableRows = function(aIds, oTable, bExclusive) {

		// clear all row selection if exclusive is true
		var aTableSelectedIndices = oTable.getSelectedIndices();
		if (bExclusive && aTableSelectedIndices.length > 0) {
			oTable.clearSelection();
		}

		var aRowDatum = this._getRowDatumForSelection(aIds, oTable);

		for (var iIndex = 0; iIndex < aRowDatum.length; iIndex++) {
			var oRowInfo = aRowDatum[iIndex];

			var sSelectionMode = this.getSelectionMode();
			if (sSelectionMode === sap.gantt.SelectionMode.Multiple ||
				sSelectionMode === sap.gantt.SelectionMode.MultiWithKeyboard) {
				oTable.addSelectionInterval(oRowInfo.rowIndex, oRowInfo.rowIndex);
			}else {
				oTable.setSelectedIndex(oRowInfo.rowIndex);
			}

		}
	};

	/**
	 * @private
	 */
	ShapeSelectionModel.prototype.deselectUnderlyingTableRows = function(aIds, oTable) {

		if (!aIds || aIds.length === 0) {
			// Passing null/undefined/[]/"" clears all table row selection??
			// The behavior is rather strange, but to keep the backward compatibility!
			oTable.clearSelection();
			return;
		}

		var aRowDatum = this._getRowDatumForSelection(aIds, oTable);

		for (var iIndex = 0; iIndex < aRowDatum.length; iIndex++) {
			var oRowInfo = aRowDatum[iIndex];

			oTable.removeSelectionInterval(oRowInfo.rowIndex, oRowInfo.rowIndex);
		}
	};

	/**
	 * Get binded shape datum by shape UID.
	 * 
	 * @param {string} sShapeUid generated UID on binded shape data
	 * 
	 * @return {object} binded shape datum
	 * 
	 * @private
	 */
	ShapeSelectionModel.prototype.getShapeDatumByShapeUid = function (sShapeUid) {
		return this._getDatumByUid(sShapeUid, DatumType.Shape);
	};

	/**
	 * Get binded row datum by shape UID.
	 * 
	 * @param {string} sShapeUid generated UID on binded shape data
	 * 
	 * @return {object} binded row datum
	 * @private
	 */
	ShapeSelectionModel.prototype.getRowDatumByShapeUid = function(sShapeUid) {
		return this._getDatumByUid(sShapeUid, DatumType.Row);
	};

	ShapeSelectionModel.prototype._getDatumByUid = function (sShapeUid, sDatumType) {
		var oGantt = this._getGanttChart();

		// Try to find out the shape/row datum in d3 datum
		var oDatum;
		if (DatumType.Shape === sDatumType) {
			oDatum = Utility.getShapeDatumByShapeUid(sShapeUid, oGantt.getId());
		} else {
			oDatum = Utility.getRowDatumByShapeUid(sShapeUid, oGantt.getId());
		}

		if (oDatum){
			return oDatum;
		}

		// lookup row/shape data inside actual data model
		var rowData, shapeData;
		var sShapeDataName = Utility.getShapeDataNameByUid(sShapeUid);
		var bJSONTreeBinding = (oGantt._oTT.getBinding("rows").getMetadata().getName() === "sap.ui.model.json.JSONTreeBinding");
		var sRowChartScheme = Utility.getChartSchemeByShapeUid(sShapeUid);
		//consider all rows including invisible rows
		var aAllRowData = oGantt.getAllRowData();
		jQuery.each(aAllRowData, function (k, v) {
			var rowInfo = v;
			if (sRowChartScheme === "" || sRowChartScheme === rowInfo.chartScheme) {
				if (bJSONTreeBinding && rowInfo.data[sShapeDataName]) {
					for ( var i = 0; i < rowInfo.data[sShapeDataName].length; i++) {
						if (rowInfo.data[sShapeDataName][i].uid === sShapeUid) {
							rowData = rowInfo;
							shapeData = rowInfo.data[sShapeDataName][i];
							return false;
						}
					}
				}else if (rowInfo.data.uid === sShapeUid) {
					rowData = rowInfo;
					shapeData = rowInfo.data;
					return false;
				}
			}
		});

		if (sDatumType === DatumType.Shape) {
			return shapeData;
		}
		return rowData;
	};

	ShapeSelectionModel.prototype._getRowDatumForSelection = function(aIds, oTable) {
		var aRowIds = aIds ? aIds : [],
			aRowDatum = Utility.getRowDatumRefById(aRowIds, oTable.getParent().getId()),
			bMatched = aRowDatum.length === aRowIds.length;

		if (!bMatched) {
			// If not matched, possible reason is rowId is invalid or rows are in invisible area.
			// For invalid row id, do nothing, here only try to lookup datum in invisible area.
			var aInvisibleRowDatum = this._lookupInvisibleDatum(aRowIds, aRowDatum, DatumType.Row);
			aRowDatum = aRowDatum.concat(aInvisibleRowDatum);
		}
		return aRowDatum;
	};

	ShapeSelectionModel.prototype._getShapeDatumForSelection = function(aId) {
		var oGanttChart = this._getGanttChart();
		var aShapeId = aId ? aId : [];

		var aShapeDatum = Utility.getShapeDatumById(aShapeId, oGanttChart.getId()),
			bMatched = aShapeDatum.length === aShapeId.length;

		if (!bMatched) {
			var aInvisibleShapeDatum = this._lookupInvisibleDatum(aShapeId, aShapeDatum, DatumType.Shape);
			aShapeDatum = aShapeDatum.concat(aInvisibleShapeDatum);
		}
		return aShapeDatum;
	};

	/**
	 * Lookup datum from invisible area.
	 * 
	 * @param {array} aId a list of id to lookup
	 * @param {array} aFoundDatum visible datum
	 * @param {string} sLookupType Lookup type, row or shape
	 * @return {array} list of shape/row datum
	 * 
	 * @private
	 */
	ShapeSelectionModel.prototype._lookupInvisibleDatum = function(aId, aFoundDatum, sDatumType) {

		var aInvisibleId = this._getInvisibleIds(aId, aFoundDatum, sDatumType);

		var aDatum = [];
		if (aInvisibleId.length > 0) {
			// not found the row, invisible row?
			var oGanttChart = this._getGanttChart(),
			aShapeDataNames = oGanttChart.getShapeDataNames();
			var aAllRowData = oGanttChart.getAllRowData();

			var fnLookupShapeDatumInRow = function(oRowData, sShapeId) {
				var oResult = null;
				jQuery.each(aShapeDataNames, function(j, oShapeDataName) {
					var sShapeDataName;
					if (typeof oShapeDataName === "string") {
						sShapeDataName = oShapeDataName;
					} else {
						sShapeDataName = oShapeDataName.name;
					}
					var aShapeData = oRowData.data[sShapeDataName];
					if (aShapeData) {
						jQuery.each(aShapeData, function(k, oShapeDatum) {
							/* eslint-disable eqeqeq */
							if (oShapeDatum.__id__ == sShapeId) {
								 //it's possible that id is numeric but passing a string
							/* eslint-enable eqeqeq */
								oResult = oShapeDatum;
								return false;
							}
						});
						if (oResult) {
							return false;
						}
					}
				});
				return oResult;
			};

			var fnLookupDatumById = function(sId, sType) {
				var oResult = null;
				jQuery.each(aAllRowData, function (i, oRowData) {
					if (sType === DatumType.Shape) {
						oResult = fnLookupShapeDatumInRow(oRowData, sId);
						if (oResult) {
							return false;
						}
					} else {
						/* eslint-disable eqeqeq */
						if (oRowData.id == sId) {
						/* eslint-enable eqeqeq */
							oResult = oRowData;
							return false;
						}
					}
				});
				return oResult;
			};

			aDatum = aInvisibleId.map(function(sId){
				return fnLookupDatumById(sId, sDatumType);
			});
		}
		return aDatum;
	};

	ShapeSelectionModel.prototype._getInvisibleIds = function(aId, aFoundDatum, sDatumType) {
		var aFoundId = aFoundDatum.map(function(oDatum) { 
			//for shape, use the reference '__id__'
			if (sDatumType === DatumType.Shape) {
				return oDatum.__id__; 
			}
			return oDatum.id; 
		});

		return aId.filter(function(sId){
			return jQuery.inArray(sId, aFoundId) === -1;
		});
	};

	ShapeSelectionModel.prototype._getGanttChart = function() {
		return sap.ui.getCore().byId(this.getGanttChart());
	};

	return ShapeSelectionModel;
});

}; // end of sap/gantt/misc/ShapeSelectionModel.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Circle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Circle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Circle",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";
	
	/**
	 * Creates and initializes a new Circle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Circle shape class using SVG tag 'circle'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElement SVG specification 1.1 for 'circle' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/circle01.svg Circle samples in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <circle cx="600" cy="200" r="100" fill="red" stroke="blue" stroke-width="10" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Circle
	 */
	var Circle = Shape.extend("sap.gantt.shape.Circle", /** @lends sap.gantt.shape.Circle.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "circle"},
				
				cx: {type: "float"},
				cy: {type: "float"},
				r: {type: "float", defaultValue: 5}
			}
		}
	});
	
	Circle.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CIRCLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Circle.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>cx</code>.
	 * 
	 * <p>
	 * x coordinate of the center of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementCXAttribute SVG 1.1 specification for 'cx' attribute of 'circle'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using the <code>time</code> property 
	 * as a base and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>cx</code>.
	 * @public
	 */
	Circle.prototype.getCx = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("cx")) {
			return this._configFirst("cx", oData);
		}
		
		return this.getRotationCenter(oData, oRowInfo)[0];
	};
	
	/**
	 * Gets the current value of property <code>cy</code>.
	 * 
	 * <p>
	 * y coordinate of the center of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementCYAttribute SVG 1.1 specification for 'cy' attribute of 'circle'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>cy</code>.
	 * @public
	 */
	Circle.prototype.getCy = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("cy")) {
			return this._configFirst("cy", oData);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>r</code>.
	 * 
	 * <p>
	 * Radius of the circle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#CircleElementRAttribute SVG 1.1 specification for 'r' attribute of 'circle'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>r</code>.
	 * @public
	 */
	Circle.prototype.getR = function (oData) {
		return this._configFirst("r", oData, true);
	};

	Circle.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"fill-opacity": this.getFillOpacity(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	return Circle;
}, true);

}; // end of sap/gantt/shape/Circle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ClipPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ClipPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ClipPath",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";
	
	/**
	 * Creates and initializes a new Clippath class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Clippath shape class using SVG container tag 'clippath'. It is usually used together with {@link sap.gantt.shape.Path} as aggregations, and
	 * referenced by other shapes by URL.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/masking.html#EstablishingANewClippingPath SVG specification 1.1 for 'clippath' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/circle01.svg Circle samples in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * <marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * <style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * .arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<rect x="30" y="30" width="250" height="30" fill="#dddddd"/>
	 * 	<rect x="30" y="30" width="250" height="30" fill="#9E1F63" style="stroke: none; clip-path: url(#clipPath4);"/>
	 * 	<path d="M 90 70 l 10 -20 m 0 0 l 35 0 m 0 0 l 13 7 m 0 0 l 15 -14 m 0 0 l 15 27 m 0 0 l 20 -30 m 0 0 l 14 30" stroke="#1C75BC" stroke-width="2"/>
	 * 	<clipPath id="clipPath4"><path d="M 90 70 l 10 -20 l 35 0 l 13 7 l 15 -14 l 15 27 l 20 -30 l 14 30"/></clipPath>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ClipPath
	 */
	var ClipPath = Shape.extend("sap.gantt.shape.ClipPath", /** @lends sap.gantt.shape.ClipPath.prototype */{
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "clippath"}
			},
			aggregations: {
				
				/**
				 * Paths defining the clipPath.
				 */
				paths: {type: "sap.gantt.shape.Path", multiple: true, singularName: "path"}
			}
		}
	});
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.ClipPath.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */

	return ClipPath;
}, true);

}; // end of sap/gantt/shape/ClipPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Definitions') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Definitions'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Definitions",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";

	/**
	 * Creates and initializes a new SVG graphic object according to shape data.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all SVG definitions. It is different from the svgDefs in <code>GanttChartBase</code>.
	 * It is a container shape and related to shape data.
	 * 
	 * <p>
	 * SVG uses the 'defs' tag to represent graphic objects that can be reused at a later time.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement 'defs' in SVG}.
	 * Currently <code>sap.gantt</code> provides defs like TextRepeat. Applications can also 
	 * extend this base class to support more functionality.
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Definitions
	 */
	var Definitions = Shape.extend("sap.gantt.shape.Definitions", /** @lends sap.gantt.shape.Definitions.prototype */{
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "defs"},
				childTagName: {type: "string"}, //pattern|gradient|xxxx
				/**
				 * Definition string. Subclasses can implement their own getters of this property to override the one in this class.
				 */
				content: {type: "string", defaultValue: ""},
				/**
				 * Unique id for definition.
				 */
				referenceId: {type: "string"}
			}
		}
	});

	/**
	 * Gets the value of the <code>tag</code> property.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Definitions.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>tag</code> property.
	 * @public
	 */

	/**
	 * Gets the value of the <code>childTagName</code> property.
	 * 
	 * The 'defs' element is a container element for referenced elements. The content model for 'defs' is 
	 * the same as that for the 'g' element; thus, any element that can be a child of a 'g' can also be a child 
	 * of a 'defs'. The 'childTagName' is the name of any child element of 'defs'.See {@link http://www.w3.org/TR/SVG/struct.html#DefsElement SVG 1.1 specification for defs}.<br/>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>childTagName</code> property.
	 * @public
	 */
	Definitions.prototype.getChildTagName = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("childTagName")) {
			return this._configFirst("childTagName", oData);
		}
	};

	Definitions.prototype.getContent = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("content")) {
			return this._configFirst("content", oData);
		}
		return null;
	};

	Definitions.prototype.getReferenceId = function(oData, oRowInfo) {
		return this.getParentReferenceId(oData, oRowInfo);
	};

	return Definitions;
}, true);

}; // end of sap/gantt/shape/Definitions.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Group') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Group",[
	"sap/gantt/shape/Shape"
], function (Shape) {
	"use strict";

	/**
	 * Creates and initializes a new Group class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Group shape class using SVG tag 'group'. It is a container shape. Any other shapes can be aggregated under a group.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/struct.html#Groups SVG specification 1.1 for 'group' element} for
	 * more information about the HTML tag.<br/><br/>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Group
	 */
	var Group = Shape.extend("sap.gantt.shape.Group", /** @lends sap.gantt.shape.Group.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "g"},
				RLSAnchors: {type: "object"}
			},
			aggregations: {
				
				/**
				 * 
				 */
				shapes: {type: "sap.gantt.shape.Shape", multiple: true, singularName: "shape"}
			}
		}
	});

	/**
	 * Gets the value of the <code>tag</code> property.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Group.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>tag</code> property.
	 * @public
	 */

	/**
	 * To enable connections between in-row shapes, a custom Group class has to be implemented that extends <code>sap.gantt.shape.Group</code>.
	 * Additionally, the <code>getRLSAnchors</code> method has to be implemented for the Relationship class to know the coordinates of the connection points.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowObjectInfo Information about the row and the row data.
	 * @return {object} Coordinates of the "from" shape (start) and "to" shape (end)
	 * @public
	 */
	Group.prototype.getRLSAnchors = function (oData, oRowObjectInfo){
		return this._configFirst("RLSAnchors", oData);
	};

	/**
	 * Generate a referenceId according to shape data.
	 * 
	 * <p>
	 * 'referenceId' is used to identify Definitions shapes. Aggregation shapes of a Group shape
	 * can retrieve the 'referenceId' by their getParentReferenceId method and then consume the
	 * corresponding Definition shape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of the <code>referenceId</code> property.
	 * @public
	 */
	Group.prototype.genReferenceId = function (oData, oRowObjectInfo) {
		return this._configFirst("referenceId", oData);
	};

	return Group;
}, true);

}; // end of sap/gantt/shape/Group.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Image'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Image",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Image class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Image shape class using SVG tag 'image'. This shape is usually used to represent points in time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElement SVG specification 1.1 for 'image' element} for
	 * more information about the HTML tag.<br/><br/>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Image
	 */
	var Image = Shape.extend("sap.gantt.shape.Image", /** @lends sap.gantt.shape.Image.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "image"},
				
				image: {type: "string"},
				x: {type: "float"},
				y: {type: "float"},
				width: {type: "float", defaultValue : 20},
				height: {type: "float", defaultValue : 20}
			}
		}
	});
	
	Image.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_IMAGE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b>  We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Image.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the current value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the image rectangle.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementXAttribute SVG 1.1 specification for 'x' attribute of 'image'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Image.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		var nTimeX,
			oAxisTime = this.getAxisTime();
		
		if (Core.getConfiguration().getRTL()) {
			if (this.getIsDuration(oData, oRowInfo) === true) {
				nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
			} else {
				nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
			}
		} else {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
		}
		return (nTimeX ? nTimeX : 0) - this.getWidth(oData, oRowInfo) / 2;
	};

	/**
	 * Gets the current value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the image rectangle.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementYAttribute SVG 1.1 specification for 'y' attribute of 'image'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter  <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Image.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}

		return this.getRowYCenter(oData, oRowInfo) - this.getHeight(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>image</code>.
	 * 
	 * <p>
	 * IRI reference of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementHrefAttribute SVG 1.1 specification for 'xlink:href' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>image</code>.
	 * @public
	 */
	Image.prototype.getImage = function (oData){
		return this._configFirst("image", oData);
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementWidthAttribute SVG 1.1 specification for 'width' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Image.prototype.getWidth = function (oData){
		return this._configFirst("width", oData, true);
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the image.
	 * See {@link http://www.w3.org/TR/SVG/struct.html#ImageElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'image'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Image.prototype.getHeight = function (oData){
		return this._configFirst("height", oData, true);
	};
	
	return Image;
}, true);

}; // end of sap/gantt/shape/Image.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Line') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Line'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Line",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function (Shape, Utility, Format) {
	"use strict";
	
	/**
	 * Creates and initializes a new Line class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Line shape class using SVG tag 'line'. This shape is usually used to represent durations.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElement SVG specification 1.1 for 'line' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/line01.svg Line samples in SVG specification 1.1}:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <g stroke="green">
	 *   <line x1="100" y1="300" x2="300" y2="100" stroke-width="5"/>
	 *   <line x1="300" y1="300" x2="500" y2="100" stroke-width="10"/>
	 *   <line x1="500" y1="300" x2="700" y2="100" stroke-width="15"/>
	 *   <line x1="700" y1="300" x2="900" y2="100" stroke-width="20"/>
	 *   <line x1="900" y1="300" x2="1100" y2="100" stroke-width="25"/>
	 * </g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Line
	 */
	var Line = Shape.extend("sap.gantt.shape.Line", /** @lends sap.gantt.shape.Line.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "line"},
				isDuration: {type: "boolean", defaultValue: true},
				
				x1: {type: "float"},
				y1: {type: "float"},
				x2: {type: "float"},
				y2: {type: "float"}
			}
		}
	});
	
	Line.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_LINE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b>  We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Line.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.Line.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x1</code>.
	 * 
	 * <p>
	 * x coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX1Attribute SVG 1.1 specification for 'x1' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x1</code>.
	 * @public
	 */
	Line.prototype.getX1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x1")) {
			return this._configFirst("x1", oData);
		}
		
		return this.getAxisTime().timeToView(
			Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
	};
	
	/**
	 * Gets the value of property <code>y1</code>.
	 * 
	 * <p>
	 * y coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY1Attribute SVG 1.1 specification for 'y1' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code>,
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y1</code>.
	 * @public
	 */
	Line.prototype.getY1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y1")) {
			return this._configFirst("y1", oData, true);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>x2</code>.
	 * 
	 * <p>
	 * x coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX2Attribute SVG 1.1 specification for 'x2' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>endTime</code> as a base
	 * and makes some adjustments.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x2</code>.
	 * @public
	 */
	Line.prototype.getX2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x2")) {
			return this._configFirst("x2", oData);
		}
		
		return this.getAxisTime().timeToView(
				Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
	};
	
	/**
	 * Gets the value of property <code>y2</code>.
	 * 
	 * <p>
	 * y coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY2Attribute SVG 1.1 specification for 'y2' attribute of 'line'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and makes some adjustments to align the center of the row rectangle along the y axis. 
	 * f you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y2</code>.
	 * @public
	 */
	Line.prototype.getY2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y2")) {
			return this._configFirst("y2", oData, true);
		}
		
		return this.getRowYCenter(oData, oRowInfo);
	};

	Line.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"stroke-dasharray": this.getStrokeDasharray(oData, oRowInfo),
			"fill-opacity": this.getFillOpacity(oData, oRowInfo),
			"stroke-opacity": this.getStrokeOpacity(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};

	return Line;
}, true);

}; // end of sap/gantt/shape/Line.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Path') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Path'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Path",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Path class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Path shape class using SVG tag 'path'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html SVG specification 1.1 for 'path' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/paths/triangle01.svg Sample of closed path in SVG specification 1.1}:<br/>
	 * <svg width="4cm" height="4cm" viewBox="0 0 400 400"  xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="398" height="398" fill="none" stroke="blue" />
	 * <path d="M 100 100 L 300 100 L 200 300 z"  fill="red" stroke="blue" stroke-width="3" />
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/paths/cubic01.svg Sample of open curve path in SVG specification 1.1}: <br/>
	 * <svg width="5cm" height="4cm" viewBox="0 0 500 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <style>.Border { fill:none; stroke:blue; stroke-width:1 } .Connect { fill:none; stroke:#888888; stroke-width:2 }
	 * .SamplePath { fill:none; stroke:red; stroke-width:5 } .EndPoint { fill:none; stroke:#888888; stroke-width:2 }
	 * .CtlPoint { fill:#888888; stroke:none } .AutoCtlPoint { fill:none; stroke:blue; stroke-width:4 }
	 * .Label { font-size:22; font-family:Verdana }</style>
	 * <rect class="Border" x="1" y="1" width="498" height="398" />
	 * <polyline class="Connect" points="100,200 100,100" />
	 * <polyline class="Connect" points="250,100 250,200" />
	 * <polyline class="Connect" points="250,200 250,300" />
	 * <polyline class="Connect" points="400,300 400,200" />
	 * <path class="SamplePath" d="M100,200 C100,100 250,100 250,200 S400,300 400,200" />
	 * <circle class="EndPoint" cx="100" cy="200" r="10" />
	 * <circle class="EndPoint" cx="250" cy="200" r="10" />
	 * <circle class="EndPoint" cx="400" cy="200" r="10" />
	 * <circle class="CtlPoint" cx="100" cy="100" r="10" />
	 * <circle class="CtlPoint" cx="250" cy="100" r="10" />
	 * <circle class="CtlPoint" cx="400" cy="300" r="10" />
	 * <circle class="AutoCtlPoint" cx="250" cy="300" r="9" />
	 * <text class="Label" x="25" y="70">M100,200 C100,100 250,100 250,200</text>
	 * <text class="Label" x="325" y="350" style="text-anchor:middle">S400,300 400,200</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Path
	 */
	var Path = Shape.extend("sap.gantt.shape.Path", /** @lends sap.gantt.shape.Path.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "path"},
				isClosed: {type: "boolean", defaultValue: false},
				fill: {type: "string", defaultValue: "none"},

				d: {type: "string"}
			}
		}
	});
	
	Path.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_PATH"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Path.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has very powerful grammar. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for more information.
	 * Rich extension of paths is provided in namespace <code>sap.gantt.shape.ext</code>.<br/>
	 * This shape provides a default implementation of the d attribute:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * <marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * <style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * .arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * <path d="M 80,50 c 0,-50 80,-50 80,0 c 0,50 80,50 80,0" class="side" />
	 * <circle cx="80" cy="50" class="center" />
	 * <circle cx="240" cy="50" class="center" />
	 * <path d="M 80,70 v -20 m 160 0 v -20" class="texthyphon" />
	 * <text x="65" y="85" class="timeText">time</text>
	 * <text x="220" y="25" class="timeText">endTime</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	Path.prototype.getD = function (oData, oRowInfo) {
		var sD;
		if (this.mShapeConfig.hasShapeProperty("d")) {
			sD = this._configFirst("d", oData);
		} else {
			var aCenter = this._getCenter(oData, oRowInfo),
				bIsDuration = this.getIsDuration(oData, oRowInfo),
				sMode = this.mChartInstance.getSapUiSizeClass();
			var nHalfLength = Utility.scaleBySapUiSize(sMode, 7.5);
			
			if (bIsDuration) {
				var aEndCenter = this._getCenter(oData, oRowInfo, true);
				nHalfLength = (aEndCenter[0] - aCenter[0]) / 2;
			}
			
			sD = "M " + aCenter[0] + " " + aCenter[1] +
			" c 0," + -nHalfLength + " " + nHalfLength + "," + -nHalfLength + " " + nHalfLength +
			",0 c 0," + nHalfLength + " " + nHalfLength + "," + nHalfLength + " " + nHalfLength + ",0";
		}
		
		if(this.isValid(sD)) {
			return sD;
		} else {
			jQuery.sap.log.warning("Path shape generated invalid d: " + sD + " from the given data: " + oData);
			return null;
		}
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * <p>
	 * When this value is true, the 'fill' attribute is applied. Otherwise, the 'fill' attribute is none.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	Path.prototype.getIsClosed = function (oData) {
		return this._configFirst("isClosed", oData);
	};

	Path.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"stroke-dasharray:": this.getStrokeDasharray(oData, oRowInfo)
		};
		if (this.getIsClosed(oData, oRowInfo)) {
			oStyles["fill-opacity"] = this.getFillOpacity(oData, oRowInfo);
			oStyles["stroke-opacity"] = this.getStrokeOpacity(oData, oRowInfo);
		}
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	
	/**
	 * Check whether the given d is valid.
	 * 
	 * @param {string} sD attribute of this path
	 * @return {boolean} whether the given d is valid
	 */
	Path.prototype.isValid = function(sD) {
		return !!sD && sD.indexOf("NaN") === -1 && sD.indexOf("undefined") === -1 && sD.indexOf("null") === -1;
	};
	
	return Path;
}, true);

}; // end of sap/gantt/shape/Path.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Polygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Polygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Polygon",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Polygon class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Polygon shape class using SVG tag 'polygon'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElement SVG specification 1.1 for 'polygon' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/polygon01.svg Sample of 'polygon' in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <polygon fill="red" stroke="blue" stroke-width="10" points="350,75  379,161 469,161 397,215 423,301 350,250 277,301 303,215 231,161 321,161" />
	 * <polygon fill="lime" stroke="blue" stroke-width="10" points="850,75  958,137.5 958,262.5 850,325 742,262.6 742,137.5" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Polygon
	 */
	var Polygon = Shape.extend("sap.gantt.shape.Polygon", /** @lends sap.gantt.shape.Polygon.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "polygon"},
				
				points: {type: "string"}
			}
		}
	});

	Polygon.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_POLYGON"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Polygon.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * Points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * Rich extension of paths is provided in namespace <code>sap.gantt.shape.ext</code>.<br/>
	 * This shape provides a default implementation of points:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<polygon points="115.4,30 150,10 184.6,30 184.6,70 150,90 115.4,70" class="side" />
	 * 	<circle cx="150" cy="50" class="center" />
	 * 	<path d="M 150,30 v 20 h 20" class="texthyphon" />
	 * 	<text x="135" y="20" class="timeText">time</text>
	 * 	<text x="190" y="50" class="timeText">rotation</text>
	 * 	<text x="200" y="70" class="timeText">Center</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Polygon.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		// default polygon is a regular hexagon.
		var sMode = this.mChartInstance.getSapUiSizeClass();
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			nXian = Utility.scaleBySapUiSize(sMode, 8),
			nGou = Utility.scaleBySapUiSize(sMode, 4),
			nGu = Utility.scaleBySapUiSize(sMode, 4 * Math.sqrt(3)),
			aRetVal = [];

		if (aCenter && aCenter.length === 2 && jQuery.isNumeric(nXian) && jQuery.isNumeric(nGou) &&
				jQuery.isNumeric(nGu)) {
			aRetVal.push([aCenter[0] - nGu, aCenter[1] - nGou].join(","));
			aRetVal.push([aCenter[0], aCenter[1] - nXian].join(","));
			aRetVal.push([aCenter[0] + nGu, aCenter[1] - nGou].join(","));
			aRetVal.push([aCenter[0] + nGu, aCenter[1] + nGou].join(","));
			aRetVal.push([aCenter[0], aCenter[1] + nXian].join(","));
			aRetVal.push([aCenter[0] - nGu, aCenter[1] + nGou].join(","));
		}

		return aRetVal.join(" ");
	};

	Polygon.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"fill-opacity": this.getFillOpacity(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	return Polygon;
}, true);

}; // end of sap/gantt/shape/Polygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Polyline') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Polyline'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/Polyline",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility"
], function (Shape, Utility) {
	"use strict";
	
	/**
	 * Creates and initializes a new Polyline class.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Polyline shape class using SVG tag 'polyline'.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolylineElement SVG specification 1.1 for 'polyline' element} for
	 * more information about the HTML tag.<br/><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/polyline01.svg Sample of 'polyline' in SVG specification 1.1}:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 1200 400" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2" />
	 * <polyline fill="none" stroke="blue" stroke-width="10" points="50,375
	 * 150,375 150,325 250,325 250,375 350,375 350,250 450,250 450,375 550,375 550,175 650,175 650,375
	 * 750,375 750,100 850,100 850,375 950,375 950,25 1050,25 1050,375 1150,375" />
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Polyline
	 */
	var Polyline = Shape.extend("sap.gantt.shape.Polyline", /** @lends sap.gantt.shape.Polyline.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "polyline"},
				fill: {type: "string", defaultValue: "none"},
				
				points: {type: "string"}
			}
		}
	});
	
	Polyline.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CIRCLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> We do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Polyline.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> The HTML color and URL reference to an SVG definition can be provided to fill. SVG definitions usually come from SVG definitions rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolylineElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polyline'}.
	 * This shape provides a default implementation of points:<br/>
	 * <svg width="12cm" height="4cm" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="98" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<polyline points="120,50 140,50 150,30 154,74 160,50 180,50" class="side" />
	 * 	<circle cx="120" cy="50" class="center" />
	 * 	<path d="M 120,30 v 20 h -20" class="texthyphon" />
	 * 	<text x="105" y="20" class="timeText">time</text>
	 * 	<text x="25" y="50" class="timeText">rotation</text>
	 * 	<text x="30" y="70" class="timeText">Center</text>
	 * </svg>
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Polyline.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		// default polyline.
		var aCenter = this.getRotationCenter(oData, oRowInfo),
			aRetVal = [];
		var sMode = this.mChartInstance.getSapUiSizeClass();

		if (aCenter && aCenter.length === 2) {
			aRetVal.push([aCenter[0] - 15, aCenter[1]].join(","));
			aRetVal.push([aCenter[0] - 10, aCenter[1]].join(","));
			aRetVal.push([aCenter[0] - 5, aCenter[1] - Utility.scaleBySapUiSize(sMode, 7.5)].join(","));
			aRetVal.push([aCenter[0] + 5, aCenter[1] + Utility.scaleBySapUiSize(sMode, 7.5)].join(","));
			aRetVal.push([aCenter[0] + 10, aCenter[1]].join(","));
			aRetVal.push([aCenter[0] + 15, aCenter[1]].join(","));
		}

		return aRetVal.join(" ");
	};

	Polyline.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"fill-opacity": this.getFillOpacity(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	return Polyline;
}, true);

}; // end of sap/gantt/shape/Polyline.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.Rectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.Rectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/Rectangle",[
	"sap/gantt/shape/Shape", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Shape, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Rectangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Rectangle shape class using SVG tag 'rect'. This shape is usually used to represent durations.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElement SVG specification 1.1 for 'rect' element} for
	 * more information about the HTML tag.<br/><br/>
	 * {@link http://www.w3.org/TR/SVG/images/shapes/rect01.svg Rectangle sample in SVG specification 1.1}:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * <rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * <rect x="400" y="100" width="400" height="200" fill="yellow" stroke="navy" stroke-width="10"/>
	 * </svg><br/>
	 * 
	 * {@link http://www.w3.org/TR/SVG/images/shapes/rect02.svg Rectangle sample with rounded corner in SVG specification 1.1}: <br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="4cm" viewBox="0 0 1200 400" version="1.1">
	 * 	<rect x="1" y="1" width="1198" height="398" fill="none" stroke="blue" stroke-width="2"/>
	 * 	<rect x="100" y="100" width="400" height="200" rx="50" fill="green"/>
	 * 	<g transform="translate(700 210) rotate(-30)">
	 * 		<rect x="0" y="0" width="400" height="200" rx="50" fill="none" stroke="purple" stroke-width="30"/>
	 * 	</g>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.Rectangle
	 */
	var Rectangle = Shape.extend("sap.gantt.shape.Rectangle", /** @lends sap.gantt.shape.Rectangle.prototype */ {
		metadata: {
			properties: {
				tag: {type: "string", defaultValue: "rect"},
				isDuration: {type: "boolean", defaultValue: true},

				x: {type: "float"},
				y: {type: "float"},
				width: {type: "float"},
				height: {type: "float", defaultValue: 15},
				rx: {type: "string", defaultValue: "0"},
				ry: {type: "string", defaultValue: "0"}
			}
		}
	});
	
	Rectangle.prototype.init = function() {
		Shape.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_RECTANGLE"));
	};
	
	/**
	 * Gets the value of property <code>tag</code>.
	 * 
	 * SVG tag name of the shape.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html SVG 1.1 specification for shapes}.<br/>
	 * <b>Note:</b> TWe do not recommend that you change this value using a configuration or coding.
	 * 
	 * @name sap.gantt.shape.Rectangle.prototype.getTag
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>tag</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.Rectangle.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the top-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for 'x' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Rectangle.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		var nTimeX;
		var oAxisTime = this.getAxisTime();

		if (Core.getConfiguration().getRTL()) {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
		} else {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
		}
		if (!jQuery.isNumeric(nTimeX)) {
			jQuery.sap.log.warning("Cannot get start time or end time from shape data: " + oData + ", please check whether the attribute name");
			return 0;
		}
		return nTimeX;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the top-left corner of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using parameter <code>oRowInfo</code> as a base
	 * and uses property <code>height</code> as an offset to align the center of the row rectangle along the y axis. 
	 * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Rectangle.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData, true);
		}

		return this.getRowYCenter(oData, oRowInfo) -
			this.getHeight(oData, oRowInfo) / 2;
	};
	
	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for 'width' attribute of 'rect'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using properties <code>time</code> and
	 * <code>endTime</code>. If you override the default value calculated by the getter, proper rendering is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Rectangle.prototype.getWidth = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}

		var oAxisTime = this.getAxisTime();
		var nRetVal,
			startTime = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo))),
			endTime = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));

		//if nRetVal is not numeric, return itself
		if (!jQuery.isNumeric(startTime) || !jQuery.isNumeric(endTime)) {
			return 0;
		}

		if (Core.getConfiguration().getRTL()) {
			nRetVal =  startTime - endTime;
		} else {
			nRetVal = endTime - startTime;
		}

		if (nRetVal === 0 || nRetVal < 0) {
			nRetVal = 1;
		}

		return nRetVal;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Rectangle.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	/**
	 * Gets the value of property <code>rx</code>.
	 * 
	 * <p>
	 * Rx of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute SVG 1.1 specification for 'rx' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>rx</code>.
	 * @public
	 */
	Rectangle.prototype.getRx = function (oData) {
		return this._configFirst("rx", oData);
	};
	
	/**
	 * Gets the value of property <code>ry</code>.
	 * 
	 * <p>
	 * Ry of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementRYAttribute SVG 1.1 specification for 'ry' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>ry</code>.
	 * @public
	 */
	Rectangle.prototype.getRy = function (oData) {
		return this._configFirst("ry", oData);
	};

	Rectangle.prototype.getStyle = function(oData, oRowInfo) {
		var sInheritedStyle = Shape.prototype.getStyle.apply(this, arguments);
		var oStyles = {
			"fill": this.determineValueColor(this.getFill(oData, oRowInfo)),
			"stroke-dasharray": this.getStrokeDasharray(oData, oRowInfo),
			"fill-opacity": this.getFillOpacity(oData, oRowInfo),
			"stroke-opacity": this.getStrokeOpacity(oData, oRowInfo)
		};
		return sInheritedStyle + this.getInlineStyle(oStyles);
	};
	return Rectangle;
}, true);

}; // end of sap/gantt/shape/Rectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ResizeShadowShape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.gantt.shape.ResizeShadowShape.
jQuery.sap.declare('sap.gantt.shape.ResizeShadowShape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ResizeShadowShape",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Path, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Constructor for a new ResizeShadowShape.
	 *
	 * @param {string} [sId] ID of the ResizeShadowShape instance
	 * @param {object} [mSettings] Initial instance for the new control
	 *
	 * @class
	 * <p>
	 *     Provides an implementation of shadow shapes, allowing you to create a highlighting effect by drawing the shadow shapes with thicker strokes in red. 
	 * </p>
	 *
	 *
	 * @extends sap.gantt.shape.Path
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ResizeShadowShape
	 */
	var ResizeShadowShape = Path.extend("sap.gantt.shape.ResizeShadowShape", {
		metadata: {
			properties: {
				height: {type: "int", defaultValue: 15}
			}
		}
	});
	
	ResizeShadowShape.prototype.getIsDuration = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("isDuration")) {
			return this._configFirst("isDuration", oData);
		}
		return this.getParent().getIsDuration();
	};
	
	ResizeShadowShape.prototype.getD = function (oData, oRowInfo) {
		var iStrokeWidth, x1, x2, y1, y2;
		var sPath = "";
		var sParentTag = this.getParent().getTag();
		switch (sParentTag) {
			case "rect": case "image":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = x1 + this.getParent().getWidth(oData, oRowInfo) + iStrokeWidth;
				y2 = y1 + this.getParent().getHeight(oData) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
			case "line":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX1(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY1(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = this.getParent().getX2(oData, oRowInfo) + iStrokeWidth;
				y2 = this.getParent().getY2(oData, oRowInfo) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
				" L " + x2 + " " + y1 +
				" L " + x2 + " " + y2 +
				" L " + x1 + " " + y2 + " z";
				break;
			case "path":
				sPath = this.getParent().getD(oData, oRowInfo);
				break;
			case "clippath":
				sPath = this.getParent().getPaths()[0].getD(oData, oRowInfo);
				break;
			case "polygon": case "polyline":
				var sPoints = this.getParent().getPoints(oData, oRowInfo);
				var aPoints = sPoints.split(" ");
				if (aPoints !== undefined && aPoints[0] == ""){
					aPoints.splice(0, 1);
				}
				if (aPoints !== undefined && aPoints.length > 1) {
					sPath = "M ";
					var sP;
					for (var i in aPoints) {
						sP = aPoints[i].split(",");
						if (aPoints[i] !== "" && sP.length > 1) {
							if (i == aPoints.length - 1) {//polygon has a closed path and the polyline doesn't need to be closed
								if (sParentTag === "polygon") {
									sPath = sPath + sP[0] + " " + sP[1] + " z";
								}else {
									sPath = sPath + sP[0] + " " + sP[1];
								}
							}else {
								sPath = sPath + sP[0] + " " + sP[1] + " L ";
							}
						}
					}
				}
				break;
			case "circle":
				var cX, cY, r;
				cX = this.getParent().getCx(oData, oRowInfo);
				cY = this.getParent().getCy(oData, oRowInfo);
				r = this.getParent().getR(oData);
				//e.g. "M230 230 A 45 45, 0, 1, 1, 275 275--3/4 circle
				sPath = "M " + cX + " " + cY
						+ " A " + r + " " + r + ", 0, 1, 1, " + cX + " " + cY;
				break;
			case "text":
				break;
			default://group
				var iWidth;
				var iParentStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				var	startTime = this.getParent().getTime(oData, oRowInfo);
				var	endTime = this.getParent().getEndTime(oData, oRowInfo);
				var	oAxisTime = this.getParent().getAxisTime();
				var iHeight = this.getHeight(oData) + iParentStrokeWidth;

				if (Core.getConfiguration().getRTL()) {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
				} else {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
				}
				if (this.getParent().mShapeConfig.hasShapeProperty("y")) {
					y1 = this.getParent()._configFirst("y", oData) - iStrokeWidth / 2;
				}else {
					y1 = this.getParent().getRowYCenter(oData, oRowInfo) - iHeight / 2 - iStrokeWidth / 2;
				}
				
				if (this.getParent().mShapeConfig.hasShapeProperty("width")) {
					iWidth = this.getParent()._configFirst("width", oData) + iStrokeWidth;
				}else {
					iWidth = x2 - x1 - iParentStrokeWidth - 1 + iStrokeWidth;
				}
				
				if (iWidth === 0 || iWidth < 0 || !iWidth) {
					iWidth = 2;
				}
				x2 = x1 + iWidth;
				y2 = y1 + iHeight;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
		}
		if(this.isValid(sPath)) {
			return sPath;
		} else {
			jQuery.sap.log.warning("ResizeShadowShape generated invalid d: " + sPath + " from the given data: " + oData);
			return null;
		}
	};
	
	ResizeShadowShape.prototype.getStrokeWidth = function (oData, oRowInfo) {
		var iStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
		return iStrokeWidth ? iStrokeWidth : 2;
	};
	
	ResizeShadowShape.prototype.getTransform = function (oData, oRowInfo) {
		return this.getParent().getTransform(oData, oRowInfo);
	};
	
	ResizeShadowShape.prototype.getEnableSelection = function (oData, oRowInfo) {
		return false;
	};
	
	ResizeShadowShape.prototype.getStroke = function (oData, oRowInfo) {
		return "red";
	};
	
	ResizeShadowShape.prototype.getFill = function (oData, oRowInfo) {
		return "none";
	};
	
	ResizeShadowShape.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	return ResizeShadowShape;
}, true);

}; // end of sap/gantt/shape/ResizeShadowShape.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.SelectedShape') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.gantt.shape.SelectedShape.
jQuery.sap.declare('sap.gantt.shape.SelectedShape'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/SelectedShape",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Path, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Constructor for a new SelectedShape.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * <p>
	 *     Provides an implementation of selected shapes, allowing you to create a highlighting effect by drawing the selected shapes with red and thicker strokes. 
	 * </p>
	 *
	 *
	 * @extends sap.gantt.shape.Path
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.SelectedShape
	 */
	var SelectedShape = Path.extend("sap.gantt.shape.SelectedShape", {
		metadata: {
			properties: {
				fill: {type: "string", defaultValue: "none"},
				fillOpacity: {type: "float", defaultValue: 0},
				strokeOpacity: {type: "float", defaultValue: 0},
				height: {type: "int", defaultValue: 15}
			}
		}
	});

	/**
	 * Gets current value of property <code>isDuration</code>.
	 * 
	 * <p>
	 * When this flag is set to true, the shape is called 'duration shape'. And <code>time</code> stands for startTime, <code>endTime</code> stands for end time.
	 * When this flag is set to be false, the shape is called 'transient shape'. And only <code>time</code> is used.
	 * Usually these 3 properties are used to determine x position of one shape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */
	SelectedShape.prototype.getIsDuration = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("isDuration")) {
			return this._configFirst("isDuration", oData);
		}
		return this.getParent().getIsDuration();
	};

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using properties <code>time</code>, <code>endTime</code>,
	 * <code>tailLength</code>, <code>headLength</code>, and <code>height</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	SelectedShape.prototype.getD = function (oData, oRowInfo) {
		var iStrokeWidth, x1, x2, y1, y2;
		var sPath = "";
		var sParentTag = this.getParent().getTag();
		switch (sParentTag) {
			case "rect": case "image":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = x1 + this.getParent().getWidth(oData, oRowInfo) + iStrokeWidth;
				y2 = y1 + this.getParent().getHeight(oData) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
			case "line":
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				x1 = this.getParent().getX1(oData, oRowInfo) - iStrokeWidth / 2;
				y1 = this.getParent().getY1(oData, oRowInfo) - iStrokeWidth / 2;
				x2 = this.getParent().getX2(oData, oRowInfo) + iStrokeWidth;
				y2 = this.getParent().getY2(oData, oRowInfo) + iStrokeWidth;
				sPath = "M " + x1 + " " + y1 +
				" L " + x2 + " " + y1 +
				" L " + x2 + " " + y2 +
				" L " + x1 + " " + y2 + " z";
				break;
			case "path":
				sPath = this.getParent().getD(oData, oRowInfo);
				break;
			case "clippath":
				sPath = this.getParent().getPaths()[0].getD(oData, oRowInfo);
				break;
			case "polygon": case "polyline":
				var sPoints = this.getParent().getPoints(oData, oRowInfo);
				var aPoints = sPoints.split(" ");
				if (aPoints !== undefined && aPoints[0] == ""){
					aPoints.splice(0, 1);
				}
				if (aPoints !== undefined && aPoints.length > 1) {
					sPath = "M ";
					var sP;
					for (var i in aPoints) {
						sP = aPoints[i].split(",");
						if (aPoints[i] !== "" && sP.length > 1) {
							if (i == aPoints.length - 1) {//polygon has a closed path and the polyline doesn't need to be closed
								if (sParentTag === "polygon") {
									sPath = sPath + sP[0] + " " + sP[1] + " z";
								}else {
									sPath = sPath + sP[0] + " " + sP[1];
								}
							}else {
								sPath = sPath + sP[0] + " " + sP[1] + " L ";
							}
						}
					}
				}
				break;
			case "circle":
				var cX, cY, r;
				cX = this.getParent().getCx(oData, oRowInfo);
				cY = this.getParent().getCy(oData, oRowInfo);
				r = this.getParent().getR(oData);
				//e.g. "M230 230 A 45 45, 0, 1, 1, 275 275--3/4 circle
				sPath = "M " + cX + " " + cY 
						+ " A " + r + " " + r + ", 0, 1, 1, " + cX + " " + cY;
				break;
			case "text":
				break;
			default://group
				var iWidth;
				var iParentStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
				iStrokeWidth = this.getStrokeWidth(oData, oRowInfo);
				var startTime = this.getParent().getTime(oData, oRowInfo);
				var endTime = this.getParent().getEndTime(oData, oRowInfo);
				var oAxisTime = this.getParent().getAxisTime();
				var iHeight = this.getHeight(oData);

				if (Core.getConfiguration().getRTL()) {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
				} else {
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(startTime));
					x2 = oAxisTime.timeToView(Format.abapTimestampToDate(endTime));
				}
				if (this.getParent().mShapeConfig.hasShapeProperty("y")) {
					y1 = this.getParent()._configFirst("y", oData) - iStrokeWidth / 2;
				}else {
					y1 = this.getParent().getRowYCenter(oData, oRowInfo) - iHeight / 2;
				}

				if (this.getParent().mShapeConfig.hasShapeProperty("width")) {
					iWidth = this.getParent()._configFirst("width", oData) + iStrokeWidth;
				}else {
					iWidth = x2 - x1 - iParentStrokeWidth - 1 + iStrokeWidth;
				}

				if (iWidth === 0 || iWidth < 0 || !iWidth) {
					iWidth = 2;
				}
				x2 = x1 + iWidth;
				y2 = y1 + iHeight;
				sPath = "M " + x1 + " " + y1 +
					" L " + x2 + " " + y1 +
					" L " + x2 + " " + y2 +
					" L " + x1 + " " + y2 + " z";
				break;
		}
		if(this.isValid(sPath)) {
			return sPath;
		} else {
			jQuery.sap.log.warning("SelectedShape generated invalid d: " + sPath + " from the given data: " + oData);
			return null;
		}
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> An HTML color and URL reference to an SVG definition can be provided for strokes. SVG definitions usually come from SVG definitions rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	SelectedShape.prototype.getStroke = function (oData, oRowInfo) {
		return "red";
	};
	
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to fill. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	SelectedShape.prototype.getFill = function (oData, oRowInfo) {
		return "none";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	SelectedShape.prototype.getStrokeWidth = function (oData, oRowInfo) {
		var iStrokeWidth = this.getParent().getStrokeWidth(oData, oRowInfo);
		return iStrokeWidth ? iStrokeWidth : 2;
	};
	
	/**
	 * Gets the value of property <code>transform</code>.
	 * 
	 * <p>
	 * Standard SVG 'transform' attribute.
	 * See {@link http://www.w3.org/TR/SVG/coords.html#TransformAttribute SVG 1.1 specifica6tion for 'transform'}.
	 * The implementation of getTransform() provides some logic to enable properties <code>rotationCenter</code> and <code>rotationAngle</code>. 
	 * If you override the default value calculated by the getter, proper rotation is not guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>transform</code>.
	 * @public
	 */
	SelectedShape.prototype.getTransform = function (oData, oRowInfo) {
		return this.getParent().getTransform(oData, oRowInfo);
	};
	
	/**
	 * Gets the value of property <code>enableDnD</code>.
	 * 
	 * <p>
	 * This value determines whether the selectedShape of a shape is enabled for drag-and-drop.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>enableDnD</code>.
	 * @public
	 */
	SelectedShape.prototype.getEnableDnD = function (oData, oRowInfo) {
		return false;
	};
	
	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value determines whether the selectedShape of a shape is enabled for selection.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	SelectedShape.prototype.getEnableSelection = function (oData, oRowInfo) {
		return false;
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * This value determines the height of the selectedShape.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	SelectedShape.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	return SelectedShape;
}, true);

}; // end of sap/gantt/shape/SelectedShape.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.cal.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.cal.Calendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/cal/Calendar",[
	"sap/gantt/shape/Rectangle"
], function (Rectangle) {
	"use strict";
	
	/**
	 * Creates a Calendar shape which consumes pattern from Calendar in 'def' package.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Calendar shape.
	 * 
	 * <p>
	 * The Calendar shape must be used in combination with Calendar def class {@link sap.gantt.def.cal.Calendar} which draws SVG 'defs' tag.
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.cal.Calendar
	 */
	var Calendar = Rectangle.extend("sap.gantt.shape.cal.Calendar", /** @lends sap.gantt.shape.cal.Calendar.prototype */ {
		metadata: {
			properties: {
				isBulk: {type: "boolean", defaultValue: true},
				enableSelection: {type: "boolean", defaultValue: false},
				
				calendarName: {type: "string", defaultValue: "nwt"}
			}
		}
	});
	
	Calendar.prototype.init = function() {
		Rectangle.prototype.init.apply(this, arguments);
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CALENDAR"));
	};
	
	
	/**
	 * Gets the value of property <code>calendarName</code>.
	 * 
	 * <p>
	 * Calendar key.
	 * 
	 * This property is used to generate referencing string to compose the <code>fill</code> property. This property is must provided.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of property <code>calendarName</code>.
	 * @public
	 */
	Calendar.prototype.getCalendarName = function (oData) {
		return this._configFirst("calendarName", oData);
	};
	
	/**
	 * Gets current value of property <code>isBulk</code>.
	 * 
	 * General recommendation is don't configure or code against this property.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>isBulk</code>.
	 * @public
	 */
	Calendar.prototype.getIsBulk = function (oData) {
		if (this.mShapeConfig.isBulk) {
			return this._configFirst("isBulk", oData);
		}
		
		return true;
	};
	
	/**
	 * Gets current value of property <code>enableSelection</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	Calendar.prototype.getEnableSelection = function (oData) {
		if (this.mShapeConfig.enableSelection) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};
	
	/**
	 * Gets current value of property <code>x</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	Calendar.prototype.getX = function (oData) {
		if (this.mShapeConfig.x) {
			return this._configFirst("x", oData);
		}

		return this.mChartInstance._oStatusSet.aViewBoundary[0];
	};
	
	/**
	 * Gets current value of property <code>y</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	Calendar.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.y) {
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};
	
	/**
	 * Gets current value of property <code>width</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Calendar.prototype.getWidth = function (oData) {
		if (this.mShapeConfig.width) { 
			return this._configFirst("width", oData);
		}
		
		var oStatusSet = this.mChartInstance._oStatusSet;
		if (oStatusSet) {
			return oStatusSet.aViewBoundary[1] - oStatusSet.aViewBoundary[0];
		} else {
			return 0;
		}

	};
	
	/**
	 * Gets current value of property <code>height</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Calendar.prototype.getHeight = function (oData, oRowInfo) {
		if (this.mShapeConfig.height) {
			return this._configFirst("height", oData);
		}
		
		return oRowInfo.rowHeight;
	};
	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * General recommendation is don't configure or code against this property. Calendar is treated as a bulk shape filled with pattern occupying visible chart area.
	 * Application should implement their own shape if a select able calendar is expected.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	
	Calendar.prototype.getFill = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")) {
			return this._configFirst("fill", oData);
		}
		
		var sCalendarName = this.getCalendarName(oData, oRowInfo);
		var oPaintServerDef = this.mChartInstance.getCalendarDef();
		if (oPaintServerDef) {
			return oPaintServerDef.getRefString(sCalendarName);	
		}
	};
	
	return Calendar;
}, true);

}; // end of sap/gantt/shape/cal/Calendar.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Chevron') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Chevron'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/Chevron",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function (Path, Utility, Format, Core) {
	"use strict";
	
	/**
	 * Creates and initializes a new Chevron class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Chevron shape class using SVG tag 'path'. It's usually used to represent a duration of time.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for 'path' element} for
	 * detail information about the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 60 50 h 150 l 70 50 l -70 50 h -150 l 40 -50 z" class="side" />
	 * 	<path d="M 60 50 v 100" class="dashside" />
	 * 	<circle cx="60" cy="100" class="center" />
	 * 	<path d="M 60 50 h -20 m 0 100 h 20 v 20 m 40 0 v -70 m 180 0 v 70 m -70 0 v -20" class="dashassist" />
	 * 	<path d="M 40 50 v 100" class="arrowline" />
	 * 	<path d="M 60 170 h 40" class="arrowline" />
	 * 	<path d="M 210 170 h 70" class="arrowline" />
	 * 	<path d="M 60 50 v -20 m 150 0 v 20 m -130 50 h -20" class="texthyphon" />
	 * 	<text x="45" y="25" class="timeText">time</text>
	 * 	<text x="190" y="25" class="timeText">endTime</text>
	 * 	<text x="105" y="95" class="timeText">rotation</text>
	 * 	<text x="110" y="115" class="timeText">Center</text>
	 * 	<text x="35" y="125" class="propertyText" transform="rotate(-90, 35, 125)">height</text>
	 * 	<text x="60" y="190" class="propertyText">tailLength</text>
	 * 	<text x="210" y="190" class="propertyText">headLength</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Chevron
	 */
	var Chevron = Path.extend("sap.gantt.shape.ext.Chevron", /** @lends sap.gantt.shape.ext.Chevron.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},
				isDuration: {type: "boolean", defaultValue: true},
				
				headLength: {type: "float", defaultValue: 5},
				tailLength: {type: "float", defaultValue: 5},
				height: {type: "float", defaultValue: 15}
			}
		}
	});

	Chevron.prototype.init = function() {
		// RTL mode
		this._isRTL = Core.getConfiguration().getRTL();
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CHEVRON"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Chevron.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>isDuration</code>.
	 * 
	 * @name sap.gantt.shape.ext.Chevron.prototype.getIsDuration
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isDuration</code>.
	 * @public
	 */

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for the 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using property <code>time</code>, <code>endTime</code>,
	 * <code>tailLength</code>, <code>headLength</code>, and <code>height</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	Chevron.prototype.getD = function (oData, oRowInfo) {
		var sD;
		if (this.mShapeConfig.hasShapeProperty("d")) {
			sD = this._configFirst("d", oData);
		} else {
			var nHeight = this.getHeight(oData, oRowInfo);
			
			var nHeadLength = this.getHeadLength(oData, oRowInfo),
				nTailLength = this.getTailLength(oData, oRowInfo),
				oAxisTime = this.getAxisTime();
			
			var nStartOriginalX = oAxisTime.timeToView(Format.abapTimestampToDate(
					this.getTime(oData, oRowInfo)));
			var nEndOriginalX = oAxisTime.timeToView(Format.abapTimestampToDate(
					this.getEndTime(oData, oRowInfo)));
			
			var nRowYCenter = this.getRowYCenter(oData, oRowInfo);
			
			sD = this.getDString({
				nStartOriginalX: nStartOriginalX,
				nEndOriginalX: nEndOriginalX,
				nTailLength: nTailLength,
				nHeadLength: nHeadLength,
				nHeight: nHeight,
				nRowYCenter: nRowYCenter
			});
		}
		
		if(this.isValid(sD)) {
			return sD;
		} else {
			jQuery.sap.log.warning("Chevron shape generated invalid d: " + sD + " from the given data: " + oData);
			return null;
		}
	};
	
	Chevron.prototype.getDString = function (oConf) {
		var nHalfHeight = oConf.nHeight / 2;
		
		if (this._isRTL) {
			//for RTL mode, get the axis X1
			var nBodyLength = oConf.nStartOriginalX - oConf.nEndOriginalX - oConf.nHeadLength;
			var nBodyLength = (nBodyLength > 0) ? nBodyLength : 1;
			var nX1 = (nBodyLength === 1) ? (oConf.nStartOriginalX - 1) : (oConf.nStartOriginalX - oConf.nTailLength);
			var sRetVal = "m " + nX1 + " " + oConf.nRowYCenter + " l " + oConf.nTailLength + " -" + nHalfHeight + " l -" + nBodyLength + " " +
				0 + " l -" + oConf.nHeadLength + " " + nHalfHeight + " l " + oConf.nHeadLength + " " + nHalfHeight + " l " + nBodyLength +
				" " + 0 + " z";
		} else {
			var nBodyLength = oConf.nEndOriginalX - oConf.nStartOriginalX - oConf.nHeadLength;
			var nBodyLength = (nBodyLength > 0) ? nBodyLength : 1;
			var nX1 = (nBodyLength === 1) ? (oConf.nStartOriginalX + 1) : (oConf.nStartOriginalX + oConf.nTailLength);
			var sRetVal = "m " + nX1 + " " + oConf.nRowYCenter + " l -" + oConf.nTailLength + " -" + nHalfHeight + " l " + nBodyLength + " " +
				0 + " l " + oConf.nHeadLength + " " + nHalfHeight + " l -" + oConf.nHeadLength + " " + nHalfHeight + " l -" + nBodyLength +
				" " + 0 + " z";
		}
		
		return sRetVal;
	};
	
	/**
	 * Gets the value of property <code>headLength</code>.
	 * 
	 * <p>
	 * Head length of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>headLength</code>.
	 * @public
	 */
	Chevron.prototype.getHeadLength = function (oData) {
		return this._configFirst("headLength", oData, true);
	};
	
	/**
	 * Gets the value of property <code>tailLength</code>.
	 * 
	 * <p>
	 * Tail length of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>tailLength</code>.
	 * @public
	 */
	Chevron.prototype.getTailLength = function (oData) {
		return this._configFirst("tailLength", oData, true);
	};
	
	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a chevron shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Chevron.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};
	
	return Chevron;
}, true);

}; // end of sap/gantt/shape/ext/Chevron.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Cursor') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Cursor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Cursor",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Cursor class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Cursor shape class using SVG tag 'path'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 100 50 v 80 l 70 40 l 70 -40 v -80 z" class="side" />
	 * 	<path d="M 170 50 v 120" class="dashside" />
	 * 	<circle cx="170" cy="110" class="center" />
	 * 	<path d="M 240 50 v -20 m -140 0 v 20 h -20 m 20 80 h -20 m 0 40 h 90" class="dashassist" />
	 * 	<path d="M 100 30 h 140" class="arrowline" />
	 * 	<path d="M 80 50 v 80" class="arrowline" />
	 * 	<path d="M 80 130 v 40" class="arrowline" />
	 * 	<path d="M 190 110 h -20 m 0 60 v 20" class="texthyphon" />
	 * 	<text x="155" y="205" class="timeText">time</text>
	 * 	<text x="175" y="105" class="timeText">rotation</text>
	 * 	<text x="180" y="125" class="timeText">Center</text>
	 * 	<text x="150" y="45" class="propertyText">length</text>
	 * 	<text x="35" y="100" class="propertyText">width</text>
	 * 	<text x="35" y="145" class="propertyText">point</text>
	 * 	<text x="25" y="165" class="propertyText">Height</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Cursor
	 */
	var Cursor = Path.extend("sap.gantt.shape.ext.Cursor", /** @lends sap.gantt.shape.ext.Cursor.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				length: {type: "float", defaultValue: 10},
				width: {type: "float", defaultValue: 5},
				pointHeight: {type: "float", defaultValue: 5}
			}
		}
	});

	Cursor.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_CURSOR"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Cursor.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>length</code>, 
	 * <code>width</code>, and <code>pointHeight</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getLength, getWidth, and getPointHeight). 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	Cursor.prototype.getD = function (oData, oRowInfo) {
		var sD;
		if (this.mShapeConfig.hasShapeProperty("d")) {
			sD = this._configFirst("d", oData);
		} else {
			var nPointHeight = this.getPointHeight(oData, oRowInfo);
			var nWidth = this.getWidth(oData, oRowInfo);
			var nLength = this.getLength(oData, oRowInfo);
			var nHalflength = nLength / 2;

			var aCenter = this.getRotationCenter(oData, oRowInfo);

			if (aCenter && aCenter.length === 2 && jQuery.isNumeric(nPointHeight) && jQuery.isNumeric(nWidth) &&
					jQuery.isNumeric(nLength) && jQuery.isNumeric(nHalflength)) {
				sD = "M " + aCenter.join(" ") +
				" m " + -nHalflength + " " + -(nWidth + nPointHeight) / 2 +
				" l " + nLength + " 0 l 0 " + nWidth + " l -" + nHalflength +
				" " + nPointHeight + " l -" + nHalflength + " -" + nPointHeight + " z";
			}
		}

		if(this.isValid(sD)) {
			return sD;
		} else {
			jQuery.sap.log.warning("Cursor shape generated invalid d: " + sD + " from the given data: " + oData);
			return null;
		}
	};
	
	/**
	 * Gets the value of property <code>length</code>.
	 * 
	 * <p>
	 * Length of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>length</code>.
	 * @public
	 */
	Cursor.prototype.getLength = function (oData) {
		return this._configFirst("length", oData, true);
	};
	
	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	Cursor.prototype.getWidth = function (oData) {
		return this._configFirst("width", oData, true);
	};
	
	/**
	 * Gets the value of property <code>pointHeight</code>.
	 * 
	 * <p>
	 * Point height of a cursor.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>pointHeight</code>.
	 * @public
	 */
	Cursor.prototype.getPointHeight = function (oData) {
		return this._configFirst("pointHeight", oData, true);
	};
	
	return Cursor;
}, true);

}; // end of sap/gantt/shape/ext/Cursor.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Diamond') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Diamond'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Diamond",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Diamond class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Diamond shape class using SVG tag 'path'. It's usually treated as transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 40 120 l 100 -70 l 100 70 l -100 70 z" class="side" />
	 * 	<path d="M 40 120 h 200 m -100 -70 v 140" class="dashside" />
	 * 	<circle cx="140" cy="120" class="center" />
	 * 	<path d="M 40 120 v 90 m 200 0 v -90 m -100 -70 h 120 m 0 140 h -120" class="dashassist" />
	 * 	<path d="M 40 210 h 200" class="arrowline" />
	 * 	<path d="M 260 50 v 140" class="arrowline" />
	 * 	<path d="M 140 50 v -20 m 0 90 h 20" class="texthyphon" />
	 * 	<text x="125" y="25" class="timeText">time</text>
	 * 	<text x="155" y="115" class="timeText">rotation</text>
	 * 	<text x="160" y="135" class="timeText">Center</text>
	 * 	<text x="70" y="205" class="propertyText">horizontalDiagonal</text>
	 * 	<text x="255" y="185" class="propertyText" transform="rotate(-90, 255, 185)">vertitalDiagonal</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Diamond
	 */
	var Diamond = Path.extend("sap.gantt.shape.ext.Diamond", /** @lends sap.gantt.shape.ext.Diamond.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				verticalDiagonal: {type: "float", defaultValue: 12},
				horizontalDiagonal: {type: "float", defaultValue: 12}
			}
		}
	});

	Diamond.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_DIAMOND"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Diamond.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for the 'd' attribute of 'path'}.
	 * 
	 * You application should not configure this value. Instead, the getter calculates value of d by using properties <code>horizontalDiagonal</code> and <code>verticalDiagonal</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getHorizontalDiagonal and getVerticalDiagonal). 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	Diamond.prototype.getD = function (oData, oRowInfo) {
		var sD;
		if (this.mShapeConfig.hasShapeProperty("d")) {
			sD = this._configFirst("d", oData);
		} else {
			var halfVertical = this.getVerticalDiagonal(oData, oRowInfo) / 2;
			var halfHorizontal = this.getHorizontalDiagonal(oData, oRowInfo) / 2;

			var aCenter = this.getRotationCenter(oData, oRowInfo);

			if (aCenter && aCenter.length === 2 && jQuery.isNumeric(halfVertical) && jQuery.isNumeric(halfHorizontal)) {
				sD = "M " + aCenter.join(" ") +
				" m " + -halfHorizontal + " 0" +
				" l " + halfHorizontal + " -" + halfVertical +
				" l " + halfHorizontal + " " + halfVertical +
				" l -" + halfHorizontal + " " + halfVertical + " z";
			}
		}

		if(this.isValid(sD)) {
			return sD;
		} else {
			jQuery.sap.log.warning("Diamond shape generated invalid d: " + sD + " from the given data: " + oData);
			return null;
		}
	};

	/**
	 * Gets the value of property <code>verticalDiagonal</code>.
	 * 
	 * <p>
	 * Vertical diagonal of a diamond shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>verticalDiagonal</code>.
	 * @public
	 */
	Diamond.prototype.getVerticalDiagonal = function (oData) {
		return this._configFirst("verticalDiagonal", oData, true);
	};

	/**
	 * Gets the value of property <code>horizontalDiagonal</code>.
	 * 
	 * <p>
	 * Horizontal diagonal of a diamond shape.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>horizontalDiagonal</code>.
	 * @public
	 */
	Diamond.prototype.getHorizontalDiagonal = function (oData) {
		return this._configFirst("horizontalDiagonal", oData, true);
	};

	return Diamond;
}, true);

}; // end of sap/gantt/shape/ext/Diamond.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Pentangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Pentangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Pentangle",[
	"sap/gantt/shape/Polygon", "sap/gantt/misc/Utility"
], function (Polygon, Utility) {
	"use strict";
	/**
	 * Creates and initializes a new Pentangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Pentangle shape class using SVG tag 'polygon'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElement SVG specification 1.1 for the 'polygon' element} for
	 * detail information of the html tag.<br/><br/>
	 * Following SVG image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 120 50 l 23.4 49 l52.3 7.8 l -37.9 38.2 l 9 53.8 l-46.8 -25.4 l -46.7 25.4 l 8.9 -53.8 l -37.8 -38.2 l 52.2 -7.8 z" class="side" />
	 * 	<path d="M 120 50 v 125" class="dashside" />
	 * 	<circle cx="120" cy="132" class="center" />
	 * 	<path d="M 120 50 h 100 m 0 82 h -100 m 0 43 h 100" class="dashassist" />
	 * 	<path d="M 220 50 v 82" class="arrowline" />
	 * 	<path d="M 220 132 v 43" class="arrowline" />
	 * 	<path d="M 120 50 v -20 m 0 102 h -20" class="texthyphon" />
	 * 	<text x="105" y="25" class="timeText">time</text>
	 * 	<text x="20" y="130" class="timeText">rotation</text>
	 * 	<text x="25" y="150" class="timeText">Center</text>
	 * 	<text x="225" y="95" class="propertyText">radius</text>
	 * 	<text x="225" y="160" class="propertyText">radius2</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Pentangle
	 */
	var Pentangle = Polygon.extend("sap.gantt.shape.ext.Pentangle", /** @lends sap.gantt.shape.ext.Pentangle.prototype */ {
		metadata: {
			properties: {
				radius: {type: "float", defaultValue: 10},
				radius2: {type: "float", defaultValue: undefined}
			}
		}
	});

	Pentangle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_PENTANGLE"));
	};

	/**
	 * Gets the value of property <code>radius</code>.
	 * 
	 * <p>
	 * Radius of a pentangle shape.
	 * 
	 * This property influences property <code>points</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>radius</code>.
	 * @public
	 */
	Pentangle.prototype.getRadius = function (oData) {
		return this._configFirst("radius", oData, true);
	};
	
	/**
	 * Gets the value of property <code>radius2</code>.
	 * 
	 * <p>
	 * The second radius of a pentangle shape. If this property is not provided, radius2 is set to a value making 
	 * radius and radius2 fit the golden ratio.
	 * 
	 * This property influences property <code>points</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>radius2</code>.
	 * @public
	 */
	Pentangle.prototype.getRadius2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("radius2")) {
			return this._configFirst("radius2", oData, true);
		}
		
		var sDefaultRadius2 = this.getProperty("radius2");
		if (sDefaultRadius2 || sDefaultRadius2 === 0) {
			var sMode = this.mChartInstance.getSapUiSizeClass();
			return Utility.scaleBySapUiSize(sMode, sDefaultRadius2);
		} else { 
			return this.calRadius2ByGoldenRatio(this.getRadius(oData, oRowInfo));
		}
	};
	
	Pentangle.prototype.calRadius2ByGoldenRatio = function (nRadius) {
		return nRadius * Math.cos( 2 * Math.PI / 5) / Math.cos( Math.PI / 5);
	};
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>radius</code> and <code>radus2</code>.
	 * The value of these properties can be retrieved using the corresponding getters (getRadius and getRadius2). 
	 * If your application overwrites the value of d by configuration or code, accurate results cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	Pentangle.prototype.getPoints = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		var aCenter = this.getRotationCenter(oData, oRowInfo);
		var nRadius = this.getRadius(oData, oRowInfo);
		var nRadius2 = this.getRadius2(oData, oRowInfo);
		var aPoints = [];
		
		if (aCenter && aCenter.length === 2 && jQuery.isNumeric(nRadius) && jQuery.isNumeric(nRadius2)) {
			aPoints = this._generatePentaclePoints(aCenter, nRadius, nRadius2);
		}
		return aPoints.join("");
	};

	Pentangle.prototype._generatePentaclePoints = function (aCenter, nRadius, nRadius2) {
		var oPoint = {},
			aPoints = [],
			nAngleUnit = Math.PI / 5,
			nAngle = 0;

		for (var i = 0; i < 10; i++){
			nAngle = nAngleUnit * i;
			oPoint.x = this._getPointX(aCenter[0], (i % 2 == 0) ? nRadius : nRadius2, nAngle);
			oPoint.y = this._getPointY(aCenter[1], (i % 2 == 0) ? nRadius : nRadius2, nAngle);
			aPoints.push(" " + oPoint.x + "," + oPoint.y);
		}
		return aPoints;
	};

	Pentangle.prototype._getPointX = function (nX, nRadius, nAngle) {
		return nX + (nRadius * Math.sin(nAngle));
	};

	Pentangle.prototype._getPointY = function (nY, nRadius, nAngle) {
		return nY - (nRadius * Math.cos(nAngle));
	};

	return Pentangle;
}, true);

}; // end of sap/gantt/shape/ext/Pentangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.TextRepeat') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.TextRepeat'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/TextRepeat",[
	"sap/gantt/shape/Definitions", "sap/ui/core/Core", "sap/gantt/misc/Format"
], function (Definitions, Core, Format) {
	"use strict";

	/**
	 * Creates and initializes a repeatable text pattern defined for later reuse.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * A TextRepeat definition shape is used to define graphic objects which can be replicated
	 * ("tiled") at fixed intervals in the x and y axes to cover the areas to be painted.
	 * The text patterns are defined using a 'pattern' element and then referenced by the
	 * 'fill' and 'stroke' properties on a given graphics element to indicate that the element
	 * will be filled or stroked with the referenced pattern.
	 * 
	 * @extend sap.gantt.shape.Definitions
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.TextRepeat
	 */
	var TextRepeat = Definitions.extend("sap.gantt.shape.ext.TextRepeat", /** @lends sap.gantt.shape.ext.TextRepeat.prototype */{
		metadata: {
			properties: {
				childTagName: {type: "string", defaultValue: "pattern"},
				x: {type: "float"},
				y: {type: "float"},
				width: {type: "float"},
				height: {type: "float", defaultValue: 15},
				dx: {type: "string"},
				dy: {type: "string"},
				text: {type: "string"},
				fontSize: {type: "int"},
				fontFamily: {type: "string"}
			}
		}
	});

	/**
	 * Gets the value of the <code>childTagName</code> property.
	 * 
	 * <p>
	 * Child element of 'defs' element. The default value is 'pattern'.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>childTagName</code> property.
	 * @public
	 */
	TextRepeat.prototype.getChildTagName = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("childTagName")) {
			return this._configFirst("childTagName", oData);
		}
		return 'pattern';
	};

	/**
	 * Gets the value of the <code>x</code> property.
	 * 
	 * <p>
	 * x coordinate of the text pattern tiles.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementXAttribute SVG 1.1 specification for 'x' attribute of 'pattern'}.
	 * 
	 * Usually applications do not set this value. This getter carries out the calculation using property <code>time</code> as a base.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {float} Value of the <code>x</code> property.
	 * @public
	 */
	TextRepeat.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		var nTimeX;
		var oAxisTime = this.getAxisTime();

		if (Core.getConfiguration().getRTL()) {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getEndTime(oData, oRowInfo)));
		} else {
			nTimeX = oAxisTime.timeToView(Format.abapTimestampToDate(this.getTime(oData, oRowInfo)));
		}
		if (!jQuery.isNumeric(nTimeX)) {
			return 0;
		}
		return nTimeX;
	};

	/**
	 * Gets the value of the <code>y</code> property.
	 * 
	 * <p>
	 * y coordinate of the text pattern tiles.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementYAttribute SVG 1.1 specification for 'y' attribute of 'pattern'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {float} Value of the <code>y</code> property.
	 * @public
	 */
	TextRepeat.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}
		return 0;
	};

	/**
	 * Gets the value of the <code>width</code> property.
	 * 
	 * <p>
	 * Width of a reference rectangle.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementWidthAttribute SVG 1.1 specification for 'width' attribute of 'pattern'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {float} Value of the <code>width</code> property.
	 * @public
	 */
	TextRepeat.prototype.getWidth = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}
		return 0;
	};

	/**
	 * Gets the value of the <code>height</code> property.
	 * 
	 * <p>
	 * Height of a reference rectangle.
	 * See {@link http://www.w3.org/TR/SVG/pservers.html#PatternElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'pattern'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {float} Value of the <code>height</code> property.
	 * @public
	 */
	TextRepeat.prototype.getHeight = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")) {
			return this._configFirst("height", oData);
		}
		return 0;
	};

	/**
	 * Gets the value of the <code>dx</code> property.
	 * 
	 * <p>
	 * dx value of the start position of text pattern tiles.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TSpanElementDXAttribute SVG 1.1 specification for 'dx' attribute of 'text'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>dx</code> property.
	 * @public
	 */
	TextRepeat.prototype.getDx = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("dx")) {
			return this._configFirst("dx", oData);
		}
		return "0";
	};

	/**
	 * Gets the value of the <code>dy</code> property.
	 * 
	 * <p>
	 * dy value of the start position of text pattern tiles.
	 * See {@link http://www.w3.org/TR/SVG/text.html#TSpanElementDYAttribute SVG 1.1 specification for 'dy' attribute of 'text'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>dy</code> property.
	 * @public
	 */
	TextRepeat.prototype.getDy = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("dy")) {
			return this._configFirst("dy", oData);
		}
		return "0";
	};

	/**
	 * Gets the value of the <code>text</code> property.
	 * 
	 * <p>
	 * Text string.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>text</code> property.
	 * @public
	 */
	TextRepeat.prototype.getText = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("text")) {
			return this._configFirst("text", oData);
		}
		return "";
	};

	TextRepeat.prototype.getContent = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("content")) {
			return this._configFirst("content", oData);
		}

		var sChildTagName = this.getChildTagName(oData, oRowInfo);
		return "<" + sChildTagName + 
			" id='" + this.getReferenceId(oData, oRowInfo) + 
			"' patternUnits='userSpaceOnUse'" + 
			" width=" + this.getWidth(oData, oRowInfo) +
			" height=" + this.getHeight(oData, oRowInfo) +
			" x=" + this.getX(oData, oRowInfo) + 
			" y=" + this.getY(oData, oRowInfo) + 
			"><text dx=" + this.getDx(oData, oRowInfo) +
			" dy=" + this.getDy(oData, oRowInfo) + 
			" font-size=" + this.getFontSize(oData, oRowInfo) + 
			" font-family='" + this.getFontFamily(oData, oRowInfo) +
			"'>" + this.getText(oData, oRowInfo) + 
			"</text></" + sChildTagName + ">" ;
	};

	/**
	 * Gets the value of the <code>fontSize</code> property.
	 * 
	 * <p>
	 * Text font size.
	 * See {@link http://www.w3.org/TR/SVG/text.html#FontSizeProperty SVG 1.1 specification for 'font-size' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {int} Value of the <code>fontSize</code> property.
	 * @public
	 */
	TextRepeat.prototype.getFontSize = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fontSize")) {
			return this._configFirst("fontSize", oData, true);
		}
		return 12;
	};

	/**
	 * Gets the value of the <code>fontFamily</code> property.
	 * 
	 * <p>
	 * Text font family.
	 * See {@link http://www.w3.org/TR/SVG/text.html#FontSizeProperty SVG 1.1 specification for 'font-family' property of 'text'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {string} Value of the <code>fontFamily</code> property.
	 * @public
	 */
	TextRepeat.prototype.getFontFamily = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fontFamily")) {
			return this._configFirst("fontFamily", oData, true);
		}
		return "";
	};

	return TextRepeat;
}, true);

}; // end of sap/gantt/shape/ext/TextRepeat.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.Triangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.Triangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/Triangle",[
	"sap/gantt/shape/Path"
], function (Path) {
	"use strict";
	
	/**
	 * Creates and initializes a new Triangle class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Triangle shape class using SVG tag 'path'. It's usually treated as a transient shape.
	 * 
	 * <p>
	 * See {@link http://www.w3.org/TR/SVG/paths.html#PathElement SVG specification 1.1 for the 'path' element} for
	 * detail information of the html tag.<br/><br/>
	 * The following image shows how the properties are designed:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<path d="M 200 50 l -150 100 l 180 0 z" class="side" />
	 * 	<path d="M 200 50 v 100" class="dashside" />
	 * 	<circle cx="200" cy="100" class="center" />
	 * 	<path d="M 200 50 h -170 m 0 100 h 20 v 40 m 180 0 v -40 m -30 0 v 20" class="dashassist" />
	 * 	<path d="M 30 50 v 100" class="arrowline" />
	 * 	<path d="M 50 170 h 150" class="arrowline" />
	 * 	<path d="M 50 190 h 180" class="arrowline" />
	 * 	<path d="M 200 50 v -20 m 0 70 h 20" class="texthyphon" />
	 * 	<text x="185" y="25" class="timeText">time</text>
	 * 	<text x="225" y="95" class="timeText">rotation</text>
	 * 	<text x="230" y="114" class="timeText">Center</text>
	 * 	<text x="35" y="100" class="propertyText">height</text>
	 * 	<text x="55" y="165" class="propertyText">distanceOfyAxisHeight</text>
	 * 	<text x="100" y="185" class="propertyText">base</text>
	 * </svg>
	 * </p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.Triangle
	 */
	var Triangle = Path.extend("sap.gantt.shape.ext.Triangle", /** @lends sap.gantt.shape.ext.Triangle.prototype */ {
		metadata: {
			properties: {
				isClosed: {type: "boolean", defaultValue: true},

				base: {type: "float", defaultValue: 10},
				height: {type: "float", defaultValue: 10},
				distanceOfyAxisHeight: {type: "float", defaultValue: 5}
			}
		}
	});
	
	Triangle.prototype.init = function() {
		var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
		this.setProperty("ariaLabel", oRb.getText("ARIA_TRIANGLE"));
	};
	
	/**
	 * Gets the value of property <code>isClosed</code>.
	 * 
	 * @name sap.gantt.shape.ext.Triangle.prototype.getIsClosed
	 * @function
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>isClosed</code>.
	 * @public
	 */
	
	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of d by using properties <code>time</code>, <code>base</code>, <code>height</code>, 
	 * and <code>distanceOfyAxisHeight</code>. The value of these properties can be retrieved from the corresponding getters (getTime, getBase, getHeight, and getDistanceOfyAxisHeight).
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	Triangle.prototype.getD = function (oData, oRowInfo) {
		var sD;
		if (this.mShapeConfig.hasShapeProperty("d")) {
			sD = this._configFirst("d", oData);
		} else {
			var nBase = this.getBase(oData, oRowInfo);
			var nHeight = this.getHeight(oData, oRowInfo);
			var nDisOfYaxisH = this.getDistanceOfyAxisHeight(oData, oRowInfo);
			var nHalfHeight = this.getHeight(oData, oRowInfo) / 2;

			var aCenter = this.getRotationCenter(oData, oRowInfo);

			if (aCenter && aCenter.length === 2 && jQuery.isNumeric(nBase) && jQuery.isNumeric(nHeight) &&
					jQuery.isNumeric(nDisOfYaxisH) && jQuery.isNumeric(nHalfHeight)) {
				sD = "M " + aCenter.join(" ") +
				" m 0 " + nHalfHeight +
				" l -" + nDisOfYaxisH + " 0 l " + nDisOfYaxisH +
				" -" + nHeight + " l " + Number(nBase - nDisOfYaxisH) + " " + nHeight + " l -" +
				Number(nBase - nDisOfYaxisH) + " 0 z";
			}
		}

		if(this.isValid(sD)) {
			return sD;
		} else {
			jQuery.sap.log.warning("Triangle shape generated invalid d: " + sD + " from the given data: " + oData);
			return null;
		}
	};

	/**
	 * Gets the value of property <code>base</code>.
	 * 
	 * <p>
	 * Base side of a triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>base</code>.
	 * @public
	 */
	Triangle.prototype.getBase = function (oData) {
		return this._configFirst("base", oData, true);
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	Triangle.prototype.getHeight = function (oData) {
		return this._configFirst("height", oData, true);
	};

	/**
	 * Gets the value of property <code>distanceOfyAxisHeight</code>.
	 * 
	 * <p>
	 * distanceOfyAxisHeight of a triangle, which refers to the distance between the left point to the altitude of the triangle.
	 * 
	 * This property influences property <code>d</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>distanceOfyAxisHeight</code>.
	 * @public
	 */
	Triangle.prototype.getDistanceOfyAxisHeight = function (oData) {
		return this._configFirst("distanceOfyAxisHeight", oData, true);
	};

	return Triangle;
}, true);

}; // end of sap/gantt/shape/ext/Triangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.rls.Relationship') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.rls.Relationship'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/rls/Relationship",[
	"sap/gantt/shape/Path", "sap/ui/core/Core"
], function (Path, Core) {
	"use strict";
	/**
	 * Creates and initializes a Relationship object
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no is given
	 * @param {object} [mSetting] Initial settings for the new control
	 * 
	 * @class 
	 * Enables users to visualize the relationship between elements.
	 * 
	 * <p>Four types of relationships are supported and L-shaped lines are supported for the finish-to-start type.</p>
	 * 
	 * @extend sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.rls.Relationship
	 */
	var Relationship = Path.extend("sap.gantt.shape.ext.rls.Relationship", /* @lends sap.gantt.shape.ext.rls.Relationship */ {
		metadata: {
			properties: {
				/**
				 * CSS class name of the relationship shape
				 */
				htmlClass: {type: "string", defaultValue: "relationshipLine"},
				/**
				 * Category name
				 */
				category: {type: "string", defaultValue: sap.gantt.shape.ShapeCategory.Relationship},
				/**
				 * Indicates whether the shape is a closed path
				 */
				isClosed: {type: "boolean", defaultValue: true},
				/**
				 * Indicates whether the width of the polygon represents the duration of time
				 */
				isDuration: {type: "boolean", defaultValue: false},
				/**
				 * Line color of the relationship shape
				 */
				stroke: {type: "string", defaultValue: "#000000"},
				/**
				 * Fill color of the relationship shape (the color of the arrow and the square at the ends)
				 */
				fill: {type: "string", defaultValue: "#000000"},

				/**
				 * Relationship type
				 */
				type: {type: "sap.gantt.shape.ext.rls.RelationshipType", defaultValue: sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish},
				/**
				* Path of predecessor element
				*/
				fromObjectPath: {type: "string"},
				/**
				* Expand row index of predecessor element
				*/
				fromExpandRowIndex: {type: "int", defaultValue: 0},
				/**
				* Shape of predecessor element
				*/
				fromShapeId: {type: "string"},
				/**
				* Data of predecessor element
				*/
				fromDataId: {type: "string"},
				/**
				* Path of successor element
				*/
				toObjectPath: {type: "string"},
				/**
				* Expand row index of successor element
				*/
				toExpandRowIndex: {type: "int", defaultValue: 0},
				/**
				* Shape of successor element
				*/
				toShapeId: {type: "string"},
				/**
				* Data of successor element
				*/
				toDataId: {type: "string"},

				/**
				* Indicates whether the start point (square) of the relationship shape is visible
				*/
				showStart: {type: "boolean", defaultValue: false},
				/**
				* Indicates whether the end point (arrow) of the relationship shape is visible
				*/
				showEnd: {type: "boolean", defaultValue: true},
				/**
				* Indicates whether an 'L' shape is used for the finish-to-start type
				*/
				lShapeforTypeFS: {type: "boolean", defaultValue: true},
				/**
				* Minimum length for relationship lines 
				*/
				minXLen: {type: "float", defaultValue: 10},
				/**
				* Size of the arrow
				*/
				arrowSideLength: {type: "float", defaultValue: 5}

			},
			aggregations: {
				selectedShape: {type: "sap.gantt.shape.ext.rls.SelectedRelationship", multiple: false}
			}
		}
	});
	
	// RTL mode check
	Relationship.prototype.init = function () {
			this._isRTL = Core.getConfiguration().getRTL();
			var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
			this.setProperty("ariaLabel", oRb.getText("ARIA_RELATIONSHIP"));
	};

	/**
	 * Gets the relationship type 
	 * @returns {number} The type number (from 0 to 3)
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getType = function (oData) {
		return this._configFirst("type", oData);
	};
	/**
     * Gets the path of predecessor object
     * @returns {string} Path of predecessor element
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getFromObjectPath = function (oData) {
		return this._configFirst("fromObjectPath", oData);
	};
	/**
     * Gets the expand row index of predecessor object
     * @returns {int} Expand row index of predecessor element
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getFromExpandRowIndex = function (oData) {
		return oData.hasOwnProperty("fromExpandRowIndex") ? this._configFirst("fromExpandRowIndex", oData) : this.getProperty("fromExpandRowIndex");
	};
    /**
     * Gets the shape ID of the predecessor element
     * @returns {string} Shape ID of the predecessor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getFromShapeId = function (oData) {
		return this._configFirst("fromShapeId", oData);
	};
    /**
     * Gets the data of the predecessor element
     * @returns {string} Data of predecessor
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getFromDataId = function (oData) {
		return this._configFirst("fromDataId", oData);
	};
	/**
     * Gets the path of the successor element
     * @returns {string} Path of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToObjectPath = function (oData) {
		return this._configFirst("toObjectPath", oData);
	};
	/**
     * Gets the expand row index of successor object
     * @returns {int} Expand row index of successor element
     * @param {object} oData Raw data object
	 * @public
	 */
	Relationship.prototype.getToExpandRowIndex = function (oData) {
		return oData.hasOwnProperty("toExpandRowIndex") ? this._configFirst("toExpandRowIndex", oData) : this.getProperty("toExpandRowIndex");
	};
    /**
     * Gets the shape ID of the successor element
     * @returns {string} Shape ID of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToShapeId = function (oData) {
		return this._configFirst("toShapeId", oData);
	};
    /**
     * Gets the data of the successor element
     * @returns {string} Data of the successor element
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getToDataId = function (oData) {
		return this._configFirst("toDataId", oData);
	};
    /**
     * Gets the'L' shape switch
     * @returns {boolean} 'L' shape configuration (whether the system uses L-shaped lines to represent finish-start relationships)
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getLShapeforTypeFS = function (oData) {
		return this._configFirst("lShapeforTypeFS", oData);
	};
    /**
     * Gets the CSS class of the relationship shape
     * @returns {string} CSS class name of the relationship shape
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getHtmlClass = function (oData) {
		return this._configFirst("htmlClass", oData);
	};
    /**
     * Gets whether the start shape is visible 
     * @returns {boolean} Start shape configuration (whether the start shape is visible)
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getShowStart = function (oData) {
		return this._configFirst("showStart", oData);
	};
    /**
     * Gets whether the end shape is visible
     * @returns {boolean} End shape configuration (whether the end shape is visible
     * @param {object} oData Raw data object
     * @public
     */
	Relationship.prototype.getShowEnd = function (oData) {
		return this._configFirst("showEnd", oData);
	};

	/**
	 * @returns {string} a string of commands for the "d" attribute of <path> element or null if the generated d is invalid according to the given data.
	 * @param {object} oData Raw data object
	 * @param {object} oRowInfo Information about the shape object. The object is like
	 *                {
						from: {
							objectInfo: from_object,
							shapeRawData: from_shape_rawData
						},
						to: {
							objectInfo: to_object,
							shapeRawData: to_shape_rawData
						}
				};
	 */
	Relationship.prototype.getD = function (oData, oRowInfo) {
		var showEnd = this.getShowEnd(oData, oRowInfo);
		var showStart = this.getShowStart(oData, oRowInfo);
		
		var x1, y1, x2, y2;
		var type;
		try {
			type = window.parseInt(this.getType(oData, oRowInfo));
		} catch (e) {
			jQuery.sap.log.warning("invalid relationship type");
		}
		var lShapeforTypeFS = this.getLShapeforTypeFS(oData, oRowInfo);
		
		// To get the coordinates of the from shape (starting point) and to shape (ending point).
		var sFromShapeKey = this.getFromShapeId(oData, oRowInfo.from.objectInfo);
		var oFromShapeInstance = this.mChartInstance.getShapeInstance(sFromShapeKey);
		var oPoints1 = oFromShapeInstance.getRLSAnchors(oRowInfo.from.shapeRawData, oRowInfo.from.objectInfo);

		// For some shapes that wants to make the point of junction be on the top or the bottom of the shape (e.g. diamond), there are some special treatments based on lShapeforTypeFS.
		var sToShapeKey = this.getToShapeId(oData, oRowInfo.from.objectInfo);
		var oToShapeInstance = this.mChartInstance.getShapeInstance(sToShapeKey);
		var oPoints2 = oToShapeInstance.getRLSAnchors(oRowInfo.to.shapeRawData, oRowInfo.to.objectInfo);
		
		if (this._isRTL) {
			//For RTL mode, shift the startPoint and endPoint for axis X and Y
			if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish){// Finish-Finish relationship
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToStart){ //Finish-Start
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToFinish){ //Start-Finish
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToStart){ //Start-Start
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
			}
		} else if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish){// Finish-Finish relationship
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
		 }else if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToStart){ //Finish-Start
				x1 = oPoints1.endPoint.x;
				y1 = oPoints1.endPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
		 }else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToFinish){ //Start-Finish
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.endPoint.x;
				y2 = oPoints2.endPoint.y;
		 }else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToStart){ //Start-Start
				x1 = oPoints1.startPoint.x;
				y1 = oPoints1.startPoint.y;
				x2 = oPoints2.startPoint.x;
				y2 = oPoints2.startPoint.y;
		  }
		

		var dStr = "";
		
		//Concatenate the Move and Line commands for the coordinates of the square
		if (showStart){
			var squarePoints = this._calculateSquareCoordinate(type, x1, y1);
			dStr = dStr.concat("M").concat(squarePoints[0].x).concat(",").concat(squarePoints[0].y).concat(" ");
			var squarePointsLength = squarePoints.length;
			for (var i = 1; i < squarePointsLength; i++){
				dStr = dStr.concat("L").concat(squarePoints[i].x).concat(",").concat(squarePoints[i].y).concat(" ");
			}
		}
		
		//Concatenate the Move and Line commands for the coordinates of the relationship line body
		var linePoints = this._calculateLineCoordinate(lShapeforTypeFS, type, x1, x2, y1, y2, oRowInfo.from.objectInfo, oPoints2.startPoint.height);
		dStr = dStr.concat("M").concat(linePoints[0].x).concat(",").concat(linePoints[0].y).concat(" ");
		var linePointsLength = linePoints.length;
		for (var j = 0; j < linePointsLength; j++){
			dStr = dStr.concat("L").concat(linePoints[j].x).concat(",").concat(linePoints[j].y).concat(" ");
			dStr = dStr.concat("M").concat(linePoints[j].x).concat(",").concat(linePoints[j].y).concat(" ");
		}
		
		//Concatenate the Move and Line commands for the coordinates of the arrow
		if (showEnd){
			var arrowPoints = this._calculateArrowCoordinate(lShapeforTypeFS, type, x1, x2, y1, y2, oPoints2.startPoint.height);
			var arrowPointsLength = arrowPoints.length;
			for (var k = 0; k < arrowPointsLength; k++){
				dStr = dStr.concat("L").concat(arrowPoints[k].x).concat(",").concat(arrowPoints[k].y).concat(" ");
			}
		}
		dStr = dStr.concat("Z");
		if(this.isValid(dStr)) {
			return dStr;
		} else {
			jQuery.sap.log.warning("Relationship shape generated invalid d: " + dStr + " from the given data: " + oData);
			return null;
		}
};

	/**
	 * Private method
	 * calculate the points of the square at the starting of the line.
	 * @param {number} type Relationship type
	 * @param {number} x1 Start point coordinate
	 * @param {number} y1 Start point coordinate
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2] Containing all the points of the square
	 */
	Relationship.prototype._calculateSquareCoordinate = function (type, x1, y1) {
		var square = [];

		if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish || type === sap.gantt.shape.ext.rls.RelationshipType.FinishToStart) {
			if (this._isRTL) {
				//for RTL mode, square at the left of activity's left side
				square = [x1, y1 - 2, x1 - 3, y1 - 2, x1 - 3, y1 + 1.5, x1, y1 + 1.5, x1, y1 - 2];
			} else {
				// square at the right of activity's right side
				square = [x1 - 1, y1 - 2, x1 - 1 + 3, y1 - 2, x1 - 1 + 3, y1 + 1.5, x1 - 1, y1 + 1.5, x1 - 1, y1 - 2];
			}
		}else if (this._isRTL){
			//for RTL mode, square at the right of activity's right side
			square = [x1 - 1, y1 - 2, x1 - 1 + 3, y1 - 2, x1 - 1 + 3, y1 + 1.5, x1 - 1, y1 + 1.5, x1 - 1, y1 - 2];
		} else {
			//square at the left of activity's left side
			square = [x1, y1 - 2, x1 - 3, y1 - 2, x1 - 3, y1 + 1.5, x1, y1 + 1.5, x1, y1 - 2];
		}

		var object = [];
		var squareLength = square.length;
		for (var i = 0; i < squareLength;) {
			object[object.length] = {"x": square[i++], "y": square[i++]};
		}
		return object;
	};

	/**
	 * Private method
	 * calculate the points in the line.
	 * @param {boolean} lShapeforTypeFS Whether to draw 'L' shape for finish-to-start type of relationships
	 * @param {number} type the type of relationship
	 * @param {number} x1 Start point coordinate
	 * @param {number} x2 End point coordinate
	 * @param {number} y1 Start point coordinate
	 * @param {number} y2 End point coordinate 
	 * @param {object} fromObjectInfo The row object of starting point shape
	 * @param {number} shapeHeight Height of ending point shape
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2] Containing all the points on the line
	 */
	Relationship.prototype._calculateLineCoordinate = function (lShapeforTypeFS, type, x1, x2, y1, y2, fromObjectInfo, shapeHeight) {
		var data = [];

		var round, ceiling;

		if (y1 === y2) {// if two activities in a single row, simply returning line from start point to end point.
			data = data.concat([x1, y1, x2, y2]);
		}else {
			var k = this.getMinXLen(); //minimum length of the x-axis line.
			if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish) {// Finish-Finish relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line as same as Start-Start relationship
					data = data.concat([x1, y1, Math.min(x1, x2) - k, y1, Math.min(x1, x2) - k, y2, x2, y2]);
				} else {
					data = data.concat([x1, y1, Math.max(x1, x2) + k, y1, Math.max(x1, x2) + k, y2, x2, y2]);//eliminate the length of line
				}
				
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToStart) {//Finish-Start relationship
				if (lShapeforTypeFS) {//L shape for finish start line shape
					if (this._isRTL){
						//for RTL mode, eliminate the length of line 
						if (x1 > x2) {//L shape when there is space between two activities.
							if (y1 < y2) {//top down direction.
								y2 = y2 - shapeHeight / 2;
							}else {//bottom up direction.
								y2 = y2 + shapeHeight / 2;
							}
							data = data.concat([x1, y1, x2, y1, x2, y2]);
						}else if (y1 < y2){//S shape when there is no space.
							ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
							data = data.concat([x1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
						}else if (y1 > y2) {
							round = fromObjectInfo.y;
							data = data.concat([x1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
						}
					} else if (x1 <= x2){//L shape when there is space between two activities.
						if (y1 < y2) {//top down direction.
							y2 = y2 - shapeHeight / 2 - 2;
						}else {
							y2 = y2 + shapeHeight / 2 + 2;
						}
						data = data.concat([x1, y1, x2, y1, x2, y2]);
					} else if (y1 < y2) {//S shape when there is no space.
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
					} else if (y1 > y2) {
						round = fromObjectInfo.y;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
					}
				}else if (this._isRTL) {//S shape for finish start line shape.
					//for RTL mode, eliminate the length of line 
					if (x1 - k > x2) {//reserve k space for each connection
						data = data.concat([x1, y1, x1 - k, y1, x1 - k, y2, x2, y2]);
					} else if (y1 < y2) {
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
					} else if (y1 > y2) {
						round = fromObjectInfo.y - fromObjectInfo.rowHeight;
						data = data.concat([x1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
					}
				} else if (x1 + k <= x2) {//reserve k space for each connection
					if (this.getShowEnd()) {
						var arrowSideLength = this.getArrowSideLength();
						k = (x1 + k + arrowSideLength > x2) ? Math.abs(k - arrowSideLength) : k; 
					}
					data = data.concat([x1, y1, x1 + k, y1, x1 + k, y2, x2, y2]);
				} else if (y1 < y2) {
					ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
					data = data.concat([x1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
				} else if (y1 > y2) {
					round = fromObjectInfo.y - fromObjectInfo.rowHeight;
					data = data.concat([x1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
				}
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToFinish) { //Start-Finish relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line 
					if (x1 < x2 - k) {
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, y2, x2, y2]);
					}else if (y1 < y2){
						ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, ceiling, x2 - k, ceiling, x2 - k, y2, x2, y2]);
					}else if (y1 > y2) {
						round = fromObjectInfo.y;
						data = data.concat([x1, y1, x1 + k, y1, x1 + k, round, x2 - k, round, x2 - k, y2, x2, y2]);
					}
				} else if (x1 >= x2 + k) {
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, y2, x2, y2]);
				}else if (y1 < y2){
					ceiling = fromObjectInfo.y + fromObjectInfo.rowHeight;
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, ceiling, x2 + k, ceiling, x2 + k, y2, x2, y2]);
				}else if (y1 > y2) {
					round = fromObjectInfo.y;
					data = data.concat([x1, y1, x1 - k, y1, x1 - k, round, x2 + k, round, x2 + k, y2, x2, y2]);
				}
			
			}else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToStart) {  //Start-Start relationship
				if (this._isRTL){
					//for RTL mode, eliminate the length of line as same as Finish-Finish relationship
					data = data.concat([x1, y1, Math.max(x1, x2) + k, y1, Math.max(x1, x2) + k, y2, x2, y2]);
				} else {
					data = data.concat([x1, y1, Math.min(x1, x2) - k, y1, Math.min(x1, x2) - k, y2, x2, y2]);
				}
				
			}
		}

		var object = [];
		var dataLength = data.length;
		for (var i = 0; i < dataLength;) {
			object[object.length] = {"x": data[i++], "y": data[i++]};
		}
		return object;
	};

	/**
	 * Private method
	 * calculate the points of the arrow at the ending of the line.
	 * @param {boolean} lShapeforTypeFS Whether to draw 'L' shape for finish-to-start type of relationships
	 * @param {number} type the type of relationship
	 * @param {number} x1 Start point coordinate
	 * @param {number} x2 End point coordinate
	 * @param {number} y1 Start point coordinate
	 * @param {number} y2 End point coordinate
	 * @param {number} shapeHeight Height of the ending point shape
	 * @returns {object} array[x1,y1,xa,ya,xb,yb...x2,y2], containing all the points of the arrow
	 */
	Relationship.prototype._calculateArrowCoordinate = function (lShapeforTypeFS, type, x1, x2, y1, y2, shapeHeight) {
		var arrow = [];
		var arrowSideLength = this.getArrowSideLength();

		if (type === sap.gantt.shape.ext.rls.RelationshipType.FinishToFinish || type === sap.gantt.shape.ext.rls.RelationshipType.StartToFinish) {
			if (this._isRTL){
				//for RTL mode, right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				// left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			}
		}else if (type === sap.gantt.shape.ext.rls.RelationshipType.StartToStart) {
			if (this._isRTL){
				//for RTL mode, left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				//right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			}
			
		}else if (lShapeforTypeFS) {// finish-start relationship, need to check if L shape or S shape.
				//L shape for finish start line shape
				if (this._isRTL){
					//RTL mode, arrow for L shape
					if (x1 > x2) {
						if (y1 < y2) {//top down direction.
							y2 = y2 - shapeHeight / 2 - 1;
						}else if (y1 > y2) {//bottom up direction.
							y2 = y2 + shapeHeight / 2 + 1;
						}else {//y1 == y2
							//do nothing
						}
						if (y1 < y2) {//down
							arrow = [x2 + arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 - arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2];
						}else if (y1 == y2) {
							arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
						}else {//up
							arrow = [x2 + arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 - arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2];
						}
					}else {//S shape, right arrow
						arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
					}
				} else if (x1 <= x2) {
					if (y1 < y2) {//top down direction.
						y2 = y2 - shapeHeight / 2 - 1;
					} else if (y1 > y2) {//bottom up direction.
						y2 = y2 + shapeHeight / 2 + 1;
					} else {//y1 == y2
						//do nothing
					}
					if (y1 < y2) {//down
						arrow = [x2 - arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 + arrowSideLength / 2, y2 - arrowSideLength * Math.pow(3, 1 / 2) / 2];
					} else if (y1 == y2) {
						arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
					} else {//up
						arrow = [x2 - arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, x2 + arrowSideLength / 2, y2 + arrowSideLength * Math.pow(3, 1 / 2) / 2];
					}

				} else {//S shape, right arrow
					arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
				}
			}else if (this._isRTL){
				//RTL mode, left arrow
				arrow = [x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 + arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];
			} else {
				// S shape, right arrow
				arrow = [x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 - arrowSideLength / 2, x2 - arrowSideLength * Math.pow(3, 1 / 2) / 2, y2 + arrowSideLength / 2];	
		    }

		var object = [];
		var arrowLength = arrow.length;
		for (var i = 0; i < arrowLength;) {
			object[object.length] = {"x": arrow[i++], "y": arrow[i++]};
		}
		return object;
	};

	return Relationship;
}, true);

}; // end of sap/gantt/shape/ext/rls/Relationship.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.rls.SelectedRelationship') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */

// Provides control sap.gantt.shape.ext.rls.SelectedRelationship.
jQuery.sap.declare('sap.gantt.shape.ext.rls.SelectedRelationship'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/rls/SelectedRelationship",[
	"sap/gantt/shape/ext/rls/Relationship"
], function (Relationship) {
	"use strict";

	/**
	 * Creates and initializes a SelectedRelationship object
	 *
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * <p>
	 *     Provides an implementation of shape for drawing relationships with red and wider lines when they are selected. 
	 * </p>
	 *
	 *
	 * @extends sap.gantt.shape.ext.rls.Relationship
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.rls.SelectedRelationship
	 */
	var SelectedRelationship = Relationship.extend("sap.gantt.shape.ext.rls.SelectedRelationship", {
		metadata: {
			properties: {
				/**
				 * Line color of the relationship.
				 */
				stroke: {type: "string"},
				/**
				 * Width of the relationship line.
				 */
				strokeWidth: {type: "int"}
			}
		}
	});
	
	/**
	 * Gets the value of <code>stroke</code>.
	 * 
	 * <p>
	 * See {@link sap.gantt.shape.Shape#getStroke} for a detailed description of <code>stroke</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {string} Hard coded value: "red".
	 * @public
	 */
	// For now, we cannot set the stroke by using default value because shape class for selected state doesn't support shapeProperties configuration.
	SelectedRelationship.prototype.getStroke = function (oData) {
		return "red";
	};
	/**
	 * Gets the value of <code>fill</code>.
	 * 
	 * <p> 
	 * See {@link sap.gantt.shape.Shape#getFill} for a detailed description of <code>fill</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {string} Hard coded value: "red".
	 * @public
	 */
	SelectedRelationship.prototype.getFill = function (oData) {
		return "red";
	};
	/**
	 * Gets the value of <code>strokeWidth</code>.
	 * 
	 * <p>
	 * See {@link sap.gantt.shape.Shape#getStrokeWidth} for a detailed description of <code>strokeWidth</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @return {int} Hard coded value: 2.
	 * @public
	 */
	// For now, we cannot set the strokeWidth by using default value because shape class for selected state doesn't support shapeProperties configuration.
	SelectedRelationship.prototype.getStrokeWidth = function (oData) {
		return 2;
	};

	return SelectedRelationship;
}, true);

}; // end of sap/gantt/shape/ext/rls/SelectedRelationship.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcBorderPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcBorderPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcBorderPath",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/Path"
], function(Utility, Format, Path) {
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Bar Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a planned capacity line.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcBorderPath
	 */
	var UbcBorderPath = Path.extend("sap.gantt.shape.ext.ubc.UbcBorderPath", /** @lends sap.gantt.shape.ext.ubc.UbcBorderPath.prototype */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for a Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}

		return false;
	};

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * d attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * 'd' attribute has powerful usages. For more information, see {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	UbcBorderPath.prototype.getD = function(oData, oRowInfo) {
		var path = "";
		if (this.mShapeConfig.hasShapeProperty("d")) {
			path = this._configFirst("d", oData);
		} else {
			//oData.drawData is filtered data
			var drawData = oData.drawData ? oData.drawData : oData.period;
			if (drawData.length > 0) {
				var maxTotalRevised = this._getMaxTotalRevised(oData);
				var maxY = this._getMaxY(oData, oRowInfo);
				var drawRowHeight = oRowInfo.rowHeight - 1;
				var oAxisTime = this.getAxisTime();
				for (var i = 0; i < drawData.length; i++) {
					var x1, x2, y1, y2;
					x1 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
					if (i < drawData.length - 1) {
						x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
					}else {
						x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
					}
					
					if ( !jQuery.isNumeric(x1)) {
						x1 = oAxisTime.timeToView(0).toFixed(1);
					}
					if ( !jQuery.isNumeric(x2)) {
						x1 = oAxisTime.timeToView(0).toFixed(1);
					}
					
					y1 = maxY - drawData[i].demand / maxTotalRevised * drawRowHeight;
					y1 = y1.toFixed(1);
					
					if (y1 < oRowInfo.y) {
						y1 = oRowInfo.y;
					}
					if (i < drawData.length - 1) {
						y2 = maxY - drawData[i + 1].demand / maxTotalRevised * drawRowHeight;
					} else {
						x2 = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
						y2 = maxY - drawData[i].demand / maxTotalRevised * drawRowHeight;
					}
					y2 = y2.toFixed(1);
					
					if (y2 < oRowInfo.y) {
						y2 = oRowInfo.y;
					}
					
					path += " M " + x1 + " " + y1 + "L" + x2 + " " + y1;
					path += " M " + x2 + " " + y1 + "L" + x2 + " " + y2;
				}
			}
		}

		if(this.isValid(path)) {
			return path;
		} else {
			jQuery.sap.log.warning("UbcBorderPath shape generated invalid d: " + path + " from the given data: " + oData);
			return null;
		}
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b>You can provide stroke with HTML colors and the URL reference to a paint server can be provided. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "blue".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")) {
			return this._configFirst("stroke", oData);
		}
		return "blue";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcBorderPath.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")) {
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	UbcBorderPath.prototype._getMaxY = function(oData, oRowInfo) {
		var topCapacityY = oRowInfo.y;
		var drawRowHeight = oRowInfo.rowHeight - 1;    // 1 is the border width for polygon.
		var maxY = topCapacityY + drawRowHeight;
		return maxY;
	};

	UbcBorderPath.prototype._getMaxTotalRevised = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		var maxTotalRevised = maxTotal + this._getmaxExceedCap(oData);
		return maxTotalRevised;
	};

	UbcBorderPath.prototype._getMaxTotal = function(oData) {
		var maxTotal = Math.max.apply(Math,
				oData.period.map(function(obj){
									return obj.supply;
								}));
		if (maxTotal <= 0 ) {
			maxTotal = 1;
		}
		
		return maxTotal;
	};

	UbcBorderPath.prototype._getmaxExceedCap = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		
		var maxExceedCap = 25;
		if (this.mShapeConfig.hasShapeProperty("maxExceedCapacity")){
			maxExceedCap = this._configFirst("maxExceedCapacity", oData);
		}
		
		return maxTotal * maxExceedCap / 100;
	};
	
	return UbcBorderPath;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcBorderPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/shape/Polygon"
], function(Utility, Polygon){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Base class for <code> sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon</code>, <code> sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon</code>,
	 * <code> sap.gantt.shape.ext.ubc.UbcShortagePolygon</code>, <code> sap.gantt.shape.ext.ubc.UbcUsedPolygon</code>.
	 * 
	 * <p>This base class defines a number of shared methods. 
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Polygon
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcPolygon
	 */
	var UbcPolygon = Polygon.extend("sap.gantt.shape.ext.ubc.UbcPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcPolygon.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for a Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcPolygon.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	UbcPolygon.prototype._getMaxY = function(oData, oRowInfo) {
		var topCapacityY = oRowInfo.y;
		var drawRowHeight = oRowInfo.rowHeight - 1;
		var maxY = topCapacityY + drawRowHeight;
		return maxY;
	};

	UbcPolygon.prototype._getMaxTotal = function(oData) {
		var maxTotal = Math.max.apply(Math,
				oData.period.map(function(obj){
					return obj.supply;
				}));
		if (maxTotal <= 0 ) {
			maxTotal = 1;
		}
		
		return maxTotal;
	};

	UbcPolygon.prototype._getmaxExceedCap = function(oData, total) {
		var maxTotal;
		if (total){
			maxTotal = total;
		}else {
			maxTotal = this._getMaxTotal(oData);
		}
		var maxExceedCap = 25;
		if (this.mShapeConfig.hasShapeProperty("maxExceedCapacity")){
			maxExceedCap = this._configFirst("maxExceedCapacity", oData);
		}
		
		return maxTotal * maxExceedCap / 100;
	};

	UbcPolygon.prototype._getMaxTotalRevised = function(oData) {
		var maxTotal = this._getMaxTotal(oData);
		var maxTotalRevised = this._getmaxExceedCap(oData, maxTotal) + maxTotal;
		return maxTotalRevised;
	};

	return UbcPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcShortageCapacityPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a shortage capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="10,155 10,90 50,90 50,155 130,155 130,80 170,80 170,155 250,155 250,80 290,80 290,155" fill="url(#pEx2)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon
	 */
	var UbcShortageCapacityPolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#FF0000".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getFill = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#FF0000";
	};

	/**
	 * Gets current value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML color and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	/**
	 * Gets current value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points for the shortage capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcShortageCapacityPolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		var overCapacityPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var topCapacityY = oRowInfo.y;
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;

		//oData.drawData is filtered data
		var drawData = oData.drawData ? oData.drawData : oData.period;
		var oAxisTime = this.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}
			
			if (!jQuery.isNumeric(xPointStart)) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if (!jQuery.isNumeric(xPointEnd)) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
			
			var capacityY = maxY;
			if (periodData.demand > periodData.supply) {
				if  ( periodData.demand / maxTotalRevised > 1 ) {
					capacityY = topCapacityY;
				} else {
					capacityY = maxY - periodData.demand / maxTotalRevised * drawRowHeight;
				}
			}
			capacityY = capacityY.toFixed(1);
			
			overCapacityPoints += xPointStart + "," + capacityY + " ";
			overCapacityPoints += xPointEnd + "," + capacityY + " ";
			
			if (i === drawData.length - 1) {
				overCapacityPoints += xPointStart + "," + capacityY + " ";
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
		}
		return overCapacityPoints;
	};
	
	return UbcShortageCapacityPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcShortageCapacityPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcTooltipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcTooltipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcTooltipRectangle",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/Rectangle"
], function(Utility, Format, Rectangle){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent an invisible rectangle with tooltips. Note that a tooltip appears 
	 * only when the title tag is specified on the rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<path d="M 10 105 h 40 v 5 h 80 v -20 h 40 v -10 h 40 v 20 h 80" class="dashassist" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * 	<rect x="10" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 50&#10;Required Capacity: 65</title></rect>
	 * 	<rect x="50" y="65" width="80" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 45&#10;Required Capacity: 10</title></rect>
	 * 	<rect x="130" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 65&#10;Required Capacity: 75</title></rect>
	 * 	<rect x="170" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 75&#10;Required Capacity: 35</title></rect>
	 * 	<rect x="210" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 55&#10;Required Capacity: 55</title></rect>
	 * 	<rect x="250" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>Capacity: 55&#10;Required Capacity: 75</title></rect>
	</svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcTooltipRectangle
	 */
	var UbcTooltipRectangle = Rectangle.extend("sap.gantt.shape.ext.ubc.UbcTooltipRectangle", /** @lends sap.gantt.shape.ext.ubc.UbcTooltipRectangle.prototype */ {});

	UbcTooltipRectangle.prototype.init = function(){
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.gantt");
	};	

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for a selection behavior. The default value for the Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getEnableSelection = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")) {
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for the 'x' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of x by using property <code>start_date</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information of the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getX = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")) {
			return this._configFirst("x", oData);
		}
		
		var oAxisTime = this.getAxisTime();
		var x = oAxisTime.timeToView(Format.abapTimestampToDate(oData.start_date)).toFixed(1);
		if (!jQuery.isNumeric(x)) {
			x = this.axisTime.timeToView(0).toFixed(1);
		}
		return x;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the top-left point of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for the 'y' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the value of y by using parameter <code>oRowInfo</code>.
	 * </p>
	 * <p>The default value is the y coordinate of the top-left point of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getY = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")) {
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Your application should not configure this value. Instead, the getter calculates the width by using property <code>start_date</code> and
	 * property <code>end_date</code>. If your application overwrites the getter by configuration or code, accurate results cannot be guaranteed.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")) {
			return this._configFirst("width", oData);
		}
		
		var width, startX, endX;
		var oAxisTime = this.getAxisTime();
		startX = oAxisTime.timeToView(Format.abapTimestampToDate(oData.start_date)).toFixed(1);
		endX = oAxisTime.timeToView(Format.abapTimestampToDate(oData.end_date)).toFixed(1);
		if (!jQuery.isNumeric(startX)) {
			startX = this.axisTime.timeToView(0).toFixed(1);
		}
		if (!jQuery.isNumeric(endX)) {
			endX = this.axisTime.timeToView(0).toFixed(1);
		}
		
		width = (endX - startX > 0) ? (endX - startX) : (startX - endX);
		
		if ((width === 0) || !jQuery.isNumeric(width)) {
			width = 1;
		}
		return width;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of a rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * </p>
	 * <p>The default value is the height of the row minus 1px, which is the width of stroke.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getHeight = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")) {
			return this._configFirst("height", oData);
		}
		return oRowInfo.rowHeight - 1;
	};

	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * The value of strokeOpacity for a rectangle with tooltips must be 0.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")) {
			return this._configFirst("strokeOpacity", oData);
		}
		return 0;
	};
	
	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * The value of fillOpacity for a rectangle with tooltips must be 0.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getFillOpacity = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")) {
			return this._configFirst("fillOpacity", oData);
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>title</code>.
	 * 
	 * A title is visualized as a tooltip in web browsers.
	 * <b>Notes:</b> Use character entities to perform simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	UbcTooltipRectangle.prototype.getTitle = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("title")) {
			return this._configFirst("title", oData);
		}
		var retVal = this._oRb.getText("TLTP_CAPACITY", [oData.supply, oData.demand]);
		if (oData.demand > oData.supply) {
			retVal += this._oRb.getText("TLTP_OVER_CAPACITY", [oData.demand - oData.supply]);
		}
		return retVal;
	}; 
	
	return UbcTooltipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcTooltipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcUnderCapacityZonePolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent an unplanned capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="50,155 50,110 130,110 130,155 170,155 170,80 210,80 210,155" fill="#ffffff" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon
	 */
	var UbcUnderCapacityZonePolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon", /** @lends sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#40d44c".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcUnderCapacityZonePolygon.prototype.getFill = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#40d44c";
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points of the unplanned capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcUnderCapacityZonePolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		var overCapacityPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;

		//oData.drawData is filtered data
		var drawData = oData.drawData ? oData.drawData : oData.period;
		var oAxisTime = this.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}
			
			if (!jQuery.isNumeric(xPointStart)) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if (!jQuery.isNumeric(xPointEnd)) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
			
			var capacityY = maxY - periodData.supply / maxTotalRevised * drawRowHeight;
			capacityY = capacityY.toFixed(1);
			
			overCapacityPoints += xPointStart + "," + capacityY + " ";
			overCapacityPoints += xPointEnd + "," + capacityY + " ";
			
			if (i === drawData.length - 1) {
				overCapacityPoints += xPointStart + "," + capacityY + " ";
				overCapacityPoints += xPointStart + "," + maxY + " ";
			}
		}
		return overCapacityPoints;
	};
	
	return UbcUnderCapacityZonePolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcUnderCapacityZonePolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcUsedPolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcUsedPolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcUsedPolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, Format, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent a healthy planned capacity area.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="10,105 50,105 50,145 130,145 130,90 170,90 170,120 210,120 210,100 290,100 290,155 10,155" fill="#efefef" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcUsedPolygon
	 */
	var UbcUsedPolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcUsedPolygon", /** @lends sap.gantt.shape.ext.ubc.UbcUsedPolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the fill attribute with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcUsedPolygon.prototype.getFill = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by using the coordinates of all points for the healthy planned capacity area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcUsedPolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}

		var usedPoints = "";
		var maxY = this._getMaxY(oData, oRowInfo);
		var maxTotalRevised = this._getMaxTotalRevised(oData);
		var drawRowHeight = oRowInfo.rowHeight - 1;

		//oData.drawData is filtered data
		var drawData = oData.drawData ? oData.drawData : oData.period;
		var oAxisTime = this.getAxisTime();
		for (var i = 0; i < drawData.length; i++) {
			var periodData = drawData[i];
			var xPointStart, xPointEnd;
			var usedResY;
			xPointStart = oAxisTime.timeToView(Format.abapTimestampToDate(periodData.start_date)).toFixed(1);
			if (i < drawData.length - 1) {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i + 1].start_date)).toFixed(1);
			}else {
				xPointEnd = oAxisTime.timeToView(Format.abapTimestampToDate(drawData[i].start_date)).toFixed(1);
			}

			if (!jQuery.isNumeric(xPointStart)) {
				xPointStart = oAxisTime.timeToView(0).toFixed(1);
			}
			if (!jQuery.isNumeric(xPointEnd)) {
				xPointEnd = oAxisTime.timeToView(0).toFixed(1);
			}
			
			if (i === 0) {
				usedPoints += xPointStart + "," + maxY + " ";
			}
			
			if (periodData.demand >= periodData.supply) {
				usedResY = maxY - periodData.supply / maxTotalRevised * drawRowHeight;
			} else {
				usedResY = maxY - periodData.demand / maxTotalRevised * drawRowHeight;
			}
			usedResY = usedResY.toFixed(1);
			
			usedPoints += xPointStart + "," + usedResY + " ";
			usedPoints += xPointEnd + "," + usedResY + " ";
			
			if (i === drawData.length - 1) {
				usedPoints += xPointStart + "," + usedResY + " ";
				usedPoints += xPointStart + "," + maxY + " ";
			}
		}	
		return usedPoints;
	};
	
	return UbcUsedPolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcUsedPolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UtilizationBarChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UtilizationBarChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UtilizationBarChart",[
	"sap/gantt/shape/Group", "sap/gantt/misc/Format"
], function(Group, Format) {
	"use strict";

	/**
	 * Creates and initializes a new Utilization Bar Chart (UBC) container class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * UBC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated into this container.
	 * You can remove a fragment from the container if your application does not need it. 
	 * 
	 * <p>The container has six aggregations: 
	 * <ul>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon}(used to represent the OverCapacity Zone area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon}(used to represent the Unplanned Capacity area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon}(used to the draw Shortage area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcUsedPolygon}(used to represent the HealthyPlanned Capacity area),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcBorderPath}(used to represent the planned capacity line),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ubc.UbcTooltipRectangle}(used to represent a rectangle with invisible tooltips for each period of capacity change).</li>
	 * </ul>
	 * </p>
	 * 
	 * <p>A super class <code> sap.gantt.shape.ext.ubc.UbcPolygon</code> is abstracted because the four polygons in this container (UbcOverCapacityZonePolygon, 
	 * UbcUnderCapacityZonePolygon, UbcShortageCapacityPolygon, and UbcUsedPolygon) share similar logic.</p>
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * 	<polygon points="50,155 50,110 130,110 130,155 170,155 170,80 210,80 210,155" fill="#ffffff" />
	 * 	<polygon points="10,155 10,90 50,90 50,155 130,155 130,80 170,80 170,155 250,155 250,80 290,80 290,155" fill="url(#pEx2)" />
	 * 	<polygon points="10,105 50,105 50,145 130,145 130,90 170,90 170,120 210,120 210,100 290,100 290,155 10,155" fill="#efefef" />
	 * 	<path d="M 10 90 h 40 v 55 h 80 v -65 h 40 v 40 h 40 v -20 h 40 v -20 h 40" class="side" />
	 * 	<rect x="10" y="65" width="40" height="90" opacity="0"><title>Capacity: 50&#10;Required Capacity: 65</title></rect>
	 * 	<rect x="50" y="65" width="80" height="90" opacity="0"><title>Capacity: 45&#10;Required Capacity: 10</title></rect>
	 * 	<rect x="130" y="65" width="40" height="90" opacity="0"><title>Capacity: 65&#10;Required Capacity: 75</title></rect>
	 * 	<rect x="170" y="65" width="40" height="90" opacity="0"><title>Capacity: 75&#10;Required Capacity: 35</title></rect>
	 * 	<rect x="210" y="65" width="40" height="90" opacity="0"><title>Capacity: 55&#10;Required Capacity: 55</title></rect>
	 * 	<rect x="250" y="65" width="40" height="90" opacity="0"><title>Capacity: 55&#10;Required Capacity: 75</title></rect>
	 * 	<path d="M 20 80 l 10 -30 m 120 0 l -10 30 m 140 10 l -10 -40 m -10 90 l -10 30 m -150 0 l -10 -30" class="dashassist" />
	 * 	<text x="20" y="40" class="propertyText">OverCapacity</text>
	 * 	<text x="40" y="60" class="propertyText">Zone</text>
	 * 	<text x="140" y="40" class="propertyText">Planned</text>
	 * 	<text x="160" y="60" class="propertyText">Capacity</text>
	 * 	<text x="220" y="40" class="propertyText">Shortage</text>
	 * 	<text x="180" y="190" class="propertyText">HealthyPlanned</text>
	 * 	<text x="200" y="210" class="propertyText">Capacity</text>
	 * 	<text x="60" y="190" class="propertyText">UnPlanned</text>
	 * 	<text x="80" y="210" class="propertyText">Capacity</text>
	 * </svg>
	 * </p>
	 * 
	 * <p>An example of the structure of data to feed utilization bar chart: </br>
	 * <code>
	 * {	
	 * 		bc_capacity: {
	 * 			id: "capacity_0",
	 * 			period: [
	 * 				{
	 * 					start_date: "20160123000000",
	 * 					supply: "9",
	 * 					demand: "7"
	 * 				},{
	 * 					start_date: "20160127093400",
	 * 					supply: "8",
	 * 					demand: "8"
	 * 				}
	 * 			]
	 * 		},
	 * 		bc_tooltip: [
	 * 				{
	 * 					start_date: "20160123000000",
	 * 					supply: "9",
	 * 					demand: "7",
	 * 					end_date: "20160127093400"
	 * 				},{
	 * 					start_date: "20160127093400",
	 * 					supply: "8",
	 * 					demand: "8",
	 * 					start_date: "20160203134520"
	 * 				}
	 * 		]
	 * }
	 * </code>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Group
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UtilizationBarChart
	 */
	var UtilizationBarChart = Group.extend("sap.gantt.shape.ext.ubc.UtilizationBarChart", /** @lends sap.gantt.shape.ext.ubc.UtilizationBarChart.prototype */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This property determines whether a shape is enabled for selection behavior. The default value for the Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UtilizationBarChart.prototype.getEnableSelection = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")){
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	UtilizationBarChart.prototype.filterValidData = function (aData/*, oProperty, aTimeBoundary, oYAxis, oObjectInfo*/){
		if (!aData) {
			return [];
		}
		var aFilterData = [];
		for (var i = 0; i < aData.length; i++) {
			var isBulk = this.getIsBulk(aData[i]);
			var sArrayAttribute = this.getArrayAttribute(aData[i]);
			var sTimeFilter = this.getTimeFilterAttribute(aData[i]);
			var sEndTimeFilter = this.getEndTimeFilterAttribute(aData[i]);
			var aTimeBoundary = this.mChartInstance._oStatusSet.aTimeBoundary;
			var oTempData = jQuery.extend(true, {}, aData[i]);

			if (isBulk && sArrayAttribute && sTimeFilter && sEndTimeFilter){
				var startArray = null;
				var endArray = null;
				var aShapes = this.getShapes();
				var aShapeDatas = [];
				for (var j = 0; j < aShapes.length; j++) {
					var dataName = aShapes[j].mShapeConfig.getShapeDataName();
					if (dataName && (jQuery.inArray(dataName, aShapeDatas) == -1)) {
						aShapeDatas.push(dataName);
					}
				}
				for (var key in oTempData) {
					if ((jQuery.type(oTempData[key]) == "object") && oTempData[key][sArrayAttribute] && oTempData[key][sArrayAttribute].length > 0) {
						startArray = this._binarySearchElement(aTimeBoundary[0], oTempData[key][sArrayAttribute], sTimeFilter, sEndTimeFilter);
						endArray = this._binarySearchElement(aTimeBoundary[1], oTempData[key][sArrayAttribute], sTimeFilter, sEndTimeFilter, startArray);

						if (startArray !== null && endArray !== null && startArray <= endArray){
							//For there is no end_date for oTempData[key][sArrayAttribute], so the endArray needs to plus 2
							startArray = startArray >= 1 ? startArray - 1 : startArray;
							oTempData[key].drawData = oTempData[key][sArrayAttribute].slice(startArray, endArray + 2);
							for (var k = 0; k < aShapeDatas.length; k++){
								if (key !== aShapeDatas[k] && (jQuery.type(oTempData[aShapeDatas[k]]) == "array") && oTempData[aShapeDatas[k]].length > 0) {
									oTempData[aShapeDatas[k]] = oTempData[aShapeDatas[k]].slice(startArray, endArray + 1);
								}
							}
						}
						break;
					}
				}
			}
			aFilterData.push(oTempData);
		}

		return aFilterData;
	};

	UtilizationBarChart.prototype._binarySearchElement = function (value, array, sTimeAttr, sEndTimeAttr, lowValue) {
		var low = 0;
		var high = array.length - 1;
		if (lowValue && lowValue < high) {
			low = lowValue;
		}
		var mid;
		while (low <= high) {
			mid = Math.floor((low + high) / 2);
			var startDate = Format.abapTimestampToDate(array[mid][sTimeAttr]);
			var endDate = Format.abapTimestampToDate(array[mid][sEndTimeAttr]);
			if (!endDate) {
				endDate = startDate;
			}
			if (startDate <= value && value <= endDate) {
				return mid;
			} else if (endDate < value) {
				low = mid + 1;
			} else if (startDate > value) {
				high = mid - 1;
			}
		}
		return mid;
	};

	return UtilizationBarChart;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UtilizationBarChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcBorderPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcBorderPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcBorderPath",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function(Path, Utility, Format){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw dimension lines.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * 	<defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="side" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="texthyphon" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcBorderPath
	 */
	var UlcBorderPath = Path.extend("sap.gantt.shape.ext.ulc.UlcBorderPath", /** @lends sap.gantt.shape.ext.ulc.UlcBorderPath.prototype */ {});

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * 'd' attribute of the path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has powerful usages. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	UlcBorderPath.prototype.getD = function(oData, oRowInfo){
		var retVal = "";
		if (this.mShapeConfig.hasShapeProperty("d")){
			retVal = this._configFirst("d", oData);
		} else {
			if (oData.values) {
				for (var i = 0; i < oData.values.length; i++) {
					var oAxisTime = this.getAxisTime();
					var xPos1 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].from));
					var xPos2 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].to));
					var ratio = oData.values[i].value;
					if (isNaN(ratio)){
						ratio = 0;
					}
					var maxVisibleRatio = 25;
					if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
						maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
					}
					if (ratio > (100 + maxVisibleRatio)) {
						ratio = 100 + maxVisibleRatio;
					}
					var yPos = oRowInfo.y + oRowInfo.rowHeight - oRowInfo.rowHeight * (ratio / (100 + maxVisibleRatio));
					var lowY = oRowInfo.y + oRowInfo.rowHeight;
					
					retVal = retVal +
							(oData.values[i].firstOne ? " M " + xPos1 + " " + lowY : "") +
							" L " + xPos1 + " " + yPos + " L " + xPos2 + " " + yPos +
							(oData.values[i].lastOne ? " L " + xPos2 + " " + lowY : "");
				}
			}
		}
		
		if(this.isValid(retVal)) {
			return retVal;
		} else {
			jQuery.sap.log.warning("UlcBorderPath shape generated invalid d: " + retVal + " from the given data: " + oData);
			return null;
		}
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide stroke with HTML colors and URL references to paint servers. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcBorderPath.prototype.getStroke = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		var oUtilizationCurves;
		if (this.mShapeConfig.hasShapeProperty("utilizationCurves")){
			oUtilizationCurves = this._configFirst("utilizationCurves", oData);
			return oUtilizationCurves[oData.dimension].color;
		}
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 1.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcBorderPath.prototype.getStrokeWidth = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 1;
	};

	return UlcBorderPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcBorderPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcClipPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcClipPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcClipPath",[
	"sap/gantt/shape/ClipPath"
], function(ClipPath){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is a container of {@link sap.gantt.shape.ext.ulc.UlcClipingPath}.
	 * 
	 * @extends sap.gantt.shape.ClipPath
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcClipPath
	 */
	var UlcClipPath = ClipPath.extend("sap.gantt.shape.ext.ulc.UlcClipPath", /** @lends sap.gantt.shape.ext.ulc.UlcClipPath.prototype */ {});

	/**
	 * Gets the value of property <code>htmlClass</code>.
	 * 
	 * Customized HTML classes. To provide multiple classes, separate them using space. Note that each UlcClipPath must have a unique 
	 * HTML class or a unique set of HTML classes. The 'clip-path' property of UlcOverClipRectangle and UlcUnderClipRectangle identifies HTML classes.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>htmlClass</code>.
	 * @public
	 */
	UlcClipPath.prototype.getHtmlClass = function (oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("htmlClass")){
			return this._configFirst("htmlClass", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_");
		
		return newUid + "_" +  oData.id + "_" + oData.dimension;
	};

	return UlcClipPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcClipPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcClipingPath') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcClipingPath'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcClipingPath",[
	"sap/gantt/shape/Path", "sap/gantt/misc/Utility", "sap/gantt/misc/Format"
], function(Path, Utility, Format){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to define path data inside {@link sap.gantt.shape.ext.ulc.UlcClipPath}.
	 * 
	 * @extends sap.gantt.shape.Path
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcClipingPath
	 */
	var UlcClipingPath = Path.extend("sap.gantt.shape.ext.ulc.UlcClipingPath", /** @lends sap.gantt.shape.ext.ulc.UlcClipingPath.prototype */ {});

	/**
	 * Gets the value of property <code>d</code>.
	 * 
	 * <p>
	 * 'd' attribute of path element.
	 * See {@link http://www.w3.org/TR/SVG/paths.html#DAttribute SVG 1.1 specification for 'd' attribute of 'path'}.
	 * The 'd' attribute has powerful usages. See {@link http://www.w3.org/TR/SVG/paths.html#PathDataBNF BNF grammar} for detail.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>d</code> or null if the generated d is invalid according to the given data.
	 * @public
	 */
	UlcClipingPath.prototype.getD = function(oData, oRowInfo){
		var retVal = "";
		if (this.mShapeConfig.hasShapeProperty("d")){
			retVal = this._configFirst("d", oData);
		} else {
			if (oData.values) {
				for (var i = 0; i < oData.values.length; i++) {
					var oAxisTime = this.getAxisTime();
					var xPos1 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].from));
					var xPos2 = oAxisTime.timeToView(Format.abapTimestampToDate(oData.values[i].to));
					var ratio = oData.values[i].value;
					if (isNaN(ratio)){
						ratio = 0;
					}
					var maxVisibleRatio = 25;
					if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
						maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
					}
					if (ratio > (100 + maxVisibleRatio)) {
						ratio = 100 + maxVisibleRatio;
					}
					var yPos = oRowInfo.y + oRowInfo.rowHeight  - oRowInfo.rowHeight  * (ratio / (100 + maxVisibleRatio));
					var lowY = oRowInfo.y + oRowInfo.rowHeight ;
					
					retVal = retVal +
							(oData.values[i].firstOne ? " M " + xPos1 + " " + lowY : "") +
							" L " + xPos1 + " " + yPos + " L " + xPos2 + " " + yPos +
							(oData.values[i].lastOne ? " L " + xPos2 + " " + lowY : "");
				}
			}
		}
		
		if(this.isValid(retVal)) {
			return retVal;
		} else {
			jQuery.sap.log.warning("UlcClipingPath shape generated invalid d: " + retVal + " from the given data: " + oData);
			return null;
		}
	};

	return UlcClipingPath;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcClipingPath.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcDimension') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcDimension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcDimension",[
	"sap/gantt/shape/Group"
], function(Group){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is a container for {@link sap.gantt.shape.ext.ulc.UlcBorderPath}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
	 * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcClipPath}, {@link sap.gantt.shape.ext.ulc.UlcClipingPath}.
	 * 
	 * <p>For each dimension, it has two colors, one is OverCapacity and the other is UnderCapacity. When the <code>UlcClipPath</code> of a dimension and 
	 * <code>UlcOverClipRectangle</code> overlap, which means the utilization rate is above 100%, the overlapped part will be colored by OverCapacity. 
	 * The overlapped part of <code>UlcClipPath</code>  and <code>UlcUnderClipRectangle</code> is colored by UnderCapacity. 
	 * </p>
	 * 
	 * <p><code>UlcClipingPath</code> is aggregated in <code>UlcClipPath</code>. <code>UlcClipingPath</code> and <code>UlcBorderPath</code> share the same 
	 * value of property 'd'. <code>UlcBorderPath</code> is used to visualize the dimension line.
	 * </p>
	 * @extends sap.gantt.shape.Group
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcDimension
	 */
	var UlcDimension = Group.extend("sap.gantt.shape.ext.ulc.UlcDimension", /** @lends sap.gantt.shape.ext.ulc.UlcDimension.prototype */ {});

	return UlcDimension;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcDimension.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcMiddleLine') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcMiddleLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcMiddleLine",[
	"sap/gantt/shape/Line"
], function(Line){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw a middle line, which indicates the position of 50%.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path id="middleLine" d="M 10 120 h 280" class="dashassist" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Line
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcMiddleLine
	 */
	var UlcMiddleLine = Line.extend("sap.gantt.shape.ext.ulc.UlcMiddleLine", /** @lends sap.gantt.shape.ext.ulc.UlcMiddleLine.prototype */ {});

	/**
	 * Gets the value of property <code>x1</code>.
	 * 
	 * <p>
	 * x coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX1Attribute SVG 1.1 specification for 'x1' attribute of 'line'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x1 by using 
	 * the view boundary for the visible area in the Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x1</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getX1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x1")){
			return this._configFirst("x1", oData);
		}
		
		var aViewRange = this.mChartInstance._oStatusSet ? this.mChartInstance._oStatusSet.aViewBoundary : [];
		if (aViewRange.length > 0){
			return aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y1</code>.
	 * 
	 * <p>
	 * y coordinate of the start of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY1Attribute SVG 1.1 specification for 'y1' attribute of 'line'}.
	 * 
	 * At the top of each row, a certain amount of space (in the shape of a rectangular frame) is reserved for over capacity area. 
	 * You can use 'maxVisibleRatio' in 'shapeConfig' to specify the amount of area to reserve. With the reserved area deducted 
	 * from a row, the height of the middle line is set to 50% of the row height.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y1</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getY1 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y1")){
			return this._configFirst("y1", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.y + oRowInfo.rowHeight  * (50 + maxVisibleRatio) / (100 + maxVisibleRatio);
	};

	/**
	 * Gets the value of property <code>x2</code>.
	 * 
	 * <p>
	 * x coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementX2Attribute SVG 1.1 specification for 'x2' attribute of 'line'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of 'x2' by using the 
	 * view boundary's terminal point, which is filtered by the visible area in a Gantt Chart.
	 * 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>x2</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getX2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x2")){
			return this._configFirst("x2", oData);
		}
		
		var aViewRange = this.mChartInstance._oStatusSet ? this.mChartInstance._oStatusSet.aViewBoundary : [];
		if (aViewRange.length > 0){
			return aViewRange[1];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y2</code>.
	 * 
	 * <p>
	 * y coordinate of the end of the line.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#LineElementY2Attribute SVG 1.1 specification for 'y2' attribute of 'line'}.
	 * 
	 * y2 shares the same value with y1.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and the row data.
	 * @return {number} Value of property <code>y2</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getY2 = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y2")){
			return this._configFirst("y2", oData);
		}
		
		return this.getY1(oData, oRowInfo);
	};

	/**
	 * Gets the value of property <code>strokeDasharray</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-dasharray' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-dasharray'}.
	 * </p>
	 * <p>The default value is "5,5".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>strokeDasharray</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStrokeDasharray = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeDasharray")){
			return this._configFirst("strokeDasharray", oData);
		}
		
		return "5,5";
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide the stroke with HTML colors and the URL reference to a paint server. Paint server definitions can be 
	 * retrieved from paint servers rendered by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, 
	 * or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStroke = function (oData) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 1.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcMiddleLine.prototype.getStrokeWidth = function (oData) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 1;
	};

	return UlcMiddleLine;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcMiddleLine.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcRectangle",[
	"sap/gantt/shape/Rectangle"
], function(Rectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * Base class for {@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
	 * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}.
	 * 
	 * <p>This base class defines a number of shared methods. 
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Rectangle
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcRectangle
	 */
	var UlcRectangle = Rectangle.extend("sap.gantt.shape.ext.ulc.UlcRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcRectangle.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Get fill value for UlcRectangle, return `transparent` as default value
	 * 
	 * @return {string} fill rectangle fill value
	 */
	UlcRectangle.prototype.getFill = function() {
		return Rectangle.prototype.getFill.apply(this, arguments) || "transparent";
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for the 'x' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x by using the view boundary for the visible area in a Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UlcRectangle.prototype.getX = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("x")){
			return this._configFirst("x", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of a rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * Usually application does not configure this value. Instead getter calculates the value of y using parameter <code>oRowInfo</code>.
	 * </p>
	 * <p>The default value is y coordinate of the top-left point of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UlcRectangle.prototype.getY = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("y")){
			return this._configFirst("y", oData);
		}
		
		return oRowInfo.y;
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of width by using the view boundary for the visible area in a Gantt Chart.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UlcRectangle.prototype.getWidth = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("width")){
			return this._configFirst("width", oData);
		}
		
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			return aViewRange[1] - aViewRange[0];
		}
		return 0;
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * The default value of height is calculated by the over capacity rectangle.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcRectangle.prototype.getHeight = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.rowHeight  * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	return UlcRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcTooltipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcTooltipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/shape/ext/ulc/UlcTooltipRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Core"
], function(UlcRectangle, Utility, Format, Core){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to create invisible rectangles with tooltips enabled by tag 'title'.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="dashassist" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="dashassist" />
	 * 	<rect x="40" y="65" width="25" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 0-150%&#10;dimention2: 0-110%</title></rect>
	 * 	<rect x="65" y="65" width="50" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 150%&#10;dimention2: 110%</title></rect>
	 * 	<rect x="115" y="65" width="20" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 150%-70%&#10;dimention2: 110%-105%</title></rect>
	 * 	<rect x="135" y="65" width="100" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 70%&#10;dimention2: 105%</title></rect>
	 * 	<rect x="235" y="65" width="40" height="90" fill="#cdcdcd" fill-opacity="0.5" stroke="#cdcdcd" stroke-width="0.5"><title>dimention1: 70%-0&#10;dimention2: 105%-0</title></rect>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcTooltipRectangle
	 */
	var UlcTooltipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcTooltipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcTooltipRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>title</code>.
	 * 
	 * Title is visualized as a tooltip by browsers.
	 * <b>Notes:</b> Use character entities to perform simple text tabbing and breaking. (Use "&#09;" for tab and "&#10;" for break.)
	 * See {@link http://www.w3.org/TR/SVG/struct.html#TitleElement SVG 1.1 specification for 'title'}.
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>title</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getTitle = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("title")){
			return this._configFirst("title", oData);
		}
		
		var retVal = "";
		var oUtilCurves;
		if (this.mShapeConfig.hasShapeProperty("utilizationCurves")){
			oUtilCurves = this._configFirst("utilizationCurves", oData);
		}
		if (oData) {
			for (var util in oUtilCurves){
				if (oData[oUtilCurves[util].ratioAttribute] || oData[oUtilCurves[util].ratioAttribute] === 0){
					// a changer
					if (oData[oUtilCurves[util].ratioAttribute].previous !== undefined){
						retVal += oUtilCurves[util].name + "\t" +
						oData[oUtilCurves[util].ratioAttribute].previous + "-" +
							oData[oUtilCurves[util].ratioAttribute].next + "%" + "\n";
					// a carrier or follower
					}else {
						retVal += oUtilCurves[util].name + "\t" +
						oData[oUtilCurves[util].ratioAttribute].value + "%" + "\n";
					}
				}
			}
		}
		return retVal;
	};

	/**
	 * Gets the value of property <code>x</code>.
	 * 
	 * <p>
	 * x coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementXAttribute SVG 1.1 specification for 'x' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates the value of x by using property <code>from</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>x</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getX = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("x")){
			return this._configFirst("x", oData);
		}

		var oAxisTime = this.getAxisTime();
		if (Core.getConfiguration().getRTL()) {
			return oAxisTime.timeToView(Format.abapTimestampToDate(oData.to));
		} else {
			return oAxisTime.timeToView(Format.abapTimestampToDate(oData.from));
		}
	};

	/**
	 * Gets the value of property <code>width</code>.
	 * 
	 * <p>
	 * Width of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementWidthAttribute SVG 1.1 specification for the 'width' attribute of 'rect'}.
	 * 
	 * Usually an application does not configure this value. Instead, the getter calculates value of width by using the <code>from</code> and
	 * <code>to</code> properties.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>width</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getWidth = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("width")){
			return this._configFirst("width", oData);
		}

		var oAxisTime = this.getAxisTime();
		if (Core.getConfiguration().getRTL()) {
			return Math.abs(oAxisTime.timeToView(Format.abapTimestampToDate(oData.from)) - 
					oAxisTime.timeToView(Format.abapTimestampToDate(oData.to)));
		} else {
			return Math.abs(oAxisTime.timeToView(Format.abapTimestampToDate(oData.to)) - 
					oAxisTime.timeToView(Format.abapTimestampToDate(oData.from)));
		}
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for the 'height' attribute of 'rect'}.
	 * </p>
	 * <p>The default value is the height of the row.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getHeight = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		return oRowInfo.rowHeight;
	};
	
	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * The value of strokeOpacity for tooltip rectangles must be 0.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")){
			return this._configFirst("strokeOpacity", oData);
		}
		
		return 0;
	};

	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * The value of fillOpacity for tooltip rectangles must be 0.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UlcTooltipRectangle.prototype.getFillOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")){
			return this._configFirst("fillOpacity", oData);
		}
		
		return 0;
	};

	return UlcTooltipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcTooltipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcUnderClipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcUnderClipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcUnderClipRectangle",[
"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the under clipping rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="underSide" x="10" y="85" width="280" height="70" clip-path="url(#cpSide)" fill="#858585" fill-opacity="0.5" />
	 * 	<rect id="underTexthyphone" x="10" y="85" width="280" height="70" clip-path="url(#cpTexthyphon)" fill="#858585" fill-opacity="0.5" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcUnderClipRectangle
	 */
	var UlcUnderClipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcUnderClipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcUnderClipRectangle.prototype" */ {});

	/**
	 * Gets the value of property <code>y</code>.
	 * 
	 * <p>
	 * y coordinate of the rectangle left-top point.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementYAttribute SVG 1.1 specification for 'y' attribute of 'rect'}.
	 * 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>y</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getY = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("y")){
			return this._configFirst("y", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.y + oRowInfo.rowHeight * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	/**
	 * Gets the value of property <code>height</code>.
	 * 
	 * <p>
	 * Height of the rectangle.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#RectElementHeightAttribute SVG 1.1 specification for 'height' attribute of 'rect'}.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>height</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getHeight = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("height")){
			return this._configFirst("height", oData);
		}
		
		var maxVisibleRatio = 25;
		if (this.mShapeConfig.hasShapeProperty("maxVisibleRatio")){
			maxVisibleRatio = this._configFirst("maxVisibleRatio", oData);
		}
		return oRowInfo.rowHeight - oRowInfo.rowHeight * maxVisibleRatio / (100 + maxVisibleRatio);
	};

	/**
	 * Gets current value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the <code>fill</code> property with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#F2F2F2".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getFill = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#F2F2F2";
	};
	
	/**
	 * Gets the value of property <code>strokeOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeOpacityProperty SVG 1.1 specification for 'stroke-opacity'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeOpacity</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getStrokeOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("strokeOpacity")){
			return this._configFirst("strokeOpacity", oData);
		}
		
		return 0.3;
	};

	/**
	 * Gets the value of property <code>fillOpacity</code>.
	 * 
	 * <p>
	 * Standard SVG 'fill-Opacity' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillOpacityProperty SVG 1.1 specification for 'fill-opacity'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>fillOpacity</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getFillOpacity = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fillOpacity")){
			return this._configFirst("fillOpacity", oData);
		}
		
		return 0.3;
	};

	/**
	 * Gets the value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * 
	 *  The referred ID must be consistent with the html class generated by <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	UlcUnderClipRectangle.prototype.getClipPath = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("clipPath")){
			return this._configFirst("clipPath", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_");
		
		return "url(#" + newUid + "_" + oData.id + "_" + oData.dimension + ")";
	};

	return UlcUnderClipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcUnderClipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UtilizationLineChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UtilizationLineChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UtilizationLineChart",[
	"sap/gantt/shape/Group"
], function(Group){
	"use strict";
	
	/**
	 * Creates and initializes a new Utilization Line Chart container class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * ULC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated into this container.
	 * You can remove a fragment from the container if your application does not need it.
	 * 
	 * <p>The container has four aggregations: 
	 * <ul>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcMiddleLine}(used to draw a middle line, which indicates the position of 50% utilization rate),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}(used to draw over capacity Zone),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcDimension}(used to draw Dimensions, OverCapacityClipping, and UnderCapacityClipping),</li>
	 * 		<li>{@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}(used to draw invisible tooltip rectangles for each period of capacity change).</li>
	 * </ul>
	 * </p>
	 * 
	 * <p>
	 * Each dimension consists of <code>UlcOverClipRectangle</code>, <code>UlcUnderClipRectangle</code>, <code>UlcClipPath</code>, and <code>UlcBorderPath</code>.
	 * <code>UlcClipingPath</code> is aggregated in <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * <p>A super class <code>sap.gantt.shape.ext.ulc.UlcRectangle</code> is abstracted because the other four rectangles(UlcOverCapacityZoneRectangle, 
	 * UlcOverClipRectangle, UlcUnderClipRectangle, and UlcTooltipRectangle) share similar logic.
	 * </p>
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * <rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="overBg" x="10" y="65" width="280" height="20" fill="url(#pUlc)" />
	 * 	<rect id="overSide"x="10" y="65" width="280" height="20" clip-path="url(#cpSide)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="overTexthyphon" x="10" y="65" width="280" height="20" clip-path="url(#cpTexthyphon)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="underBg" x="10" y="85" width="280" height="70" fill="#efefef" />
	 * 	<path id="middleLine" d="M 10 120 h 280" class="dashassist" />
	 * 	<rect id="underSide" x="10" y="85" width="280" height="70" clip-path="url(#cpSide)" fill="#858585" fill-opacity="0.5" />
	 * 	<rect id="underTexthyphone" x="10" y="85" width="280" height="70" clip-path="url(#cpTexthyphon)" fill="#858585" fill-opacity="0.5" />
	 * 	<path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" class="side" />
	 * 	<path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" class="texthyphon" />
	 * 	<rect x="40" y="65" width="25" height="90" opacity="0"><title>dimention1: 0-150%&#10;dimention2: 0-110%</title></rect>
	 * 	<rect x="65" y="65" width="50" height="90" opacity="0"><title>dimention1: 150%&#10;dimention2: 110%</title></rect>
	 * 	<rect x="115" y="65" width="20" height="90" opacity="0"><title>dimention1: 150%-70%&#10;dimention2: 110%-105%</title></rect>
	 * 	<rect x="135" y="65" width="100" height="90" opacity="0"><title>dimention1: 70%&#10;dimention2: 105%</title></rect>
	 * 	<rect x="235" y="65" width="40" height="90" opacity="0"><title>dimention1: 70%-0&#10;dimention2: 105%-0</title></rect>
	 * 	<path d="M 50 70 l 10 -20 m 120 0 l -70 30 m -90 70 l -5 20 m 60 -50 l 40 50 m 50 -30 l 10 55 m 30 -100 l 20 80 l 20 -75" class="dashassist" />
	 * 	<text x="20" y="40" class="propertyText"> >100% Zone</text>
	 * 	<text x="120" y="40" class="propertyText">OverCapacityClipping</text>
	 * 	<text x="10" y="190" class="propertyText"> <100% Zone</text>
	 * 	<text x="110" y="190" class="propertyText">50%</text>
	 * 	<text x="130" y="210" class="propertyText">UnderCapacityClipping</text>
	 * 	<text x="190" y="190" class="timeText">Dimensions</text>
	 * </svg>
	 * </p>
	 * 
	 *  <p>An example for the structure of data to feed balance chart: </br>
	 * <code>
	 * {	
	 * 		order: [{
	 * 			id: "ulc_0",
	 * 			util: [
	 * 				{
	 * 					dimension: "util_volumn",
	 * 					values:[
	 * 						{
	 * 							from: "20160123000000",
	 * 							to: "20160123000000",
	 * 							firstOne: true,
	 * 							value: 0
	 * 						},
	 * 						{
	 * 							from: "20160124071000",
	 * 							to: "20160124071000",
	 * 							value: 97.6
	 * 						}, {
	 * 							from: "20160124071000",
	 * 							to: "20160127051300",
	 * 							firstOne: true,
	 * 							value: 97.6
	 * 						},{
	 * 							from: "20160127051300",
	 * 							to: "20160127051300",
	 * 							value: 97.6
	 * 						},{
	 * 							from: "20160128093312",
	 * 							to: "20160128093312",
	 * 							lastOne: true,
	 * 							value: 0
	 * 						}
	 * 					]
	 * 				},{
	 * 					dimension: "util_mass",
	 * 					values:[
	 * 						{
	 * 							from: "20160123000000",
	 * 							to: "20160123000000",
	 * 							firstOne: true,
	 * 							value: 0
	 * 						}
	 * 						{
	 * 							from: "20160124071000",
	 * 							to: "20160124071000",
	 * 							value: 114.5
	 * 						}, {
	 * 							from: "20160124071000",
	 * 							to: "20160127051300",
	 * 							value: 114.5
	 * 						},{
	 * 							from: "20160127051300",
	 * 							to: "20160127051300",
	 * 							value: 114.5
	 * 						},{
	 * 							from: "20160128093312",
	 * 							to: "20160128093312",
	 * 							lastOne: true,
	 * 							value: 0
	 * 						}
	 * 					]
	 * 				}
	 * 			]
	 * 		}],
	 * 		tooltip: [
	 * 			{
 * 					from: "20160123000000",
 * 					to: "20160124071000",
 * 					firstOne: true,
 * 					util_volumn: {
 * 						previous: 0,
 * 						next: 97.6
 * 					},
 * 					util_mass:{
 * 						previous: 0,
 * 						next: 114.5
 * 					}
 * 				},{
 * 					from: "20160124071000",
 * 					to: "20160127051300",
 * 					util_volumn: {
 * 						val: 97.6
 * 					},
 * 					util_mass:{ 
 * 						val: 114.5
 * 					}
 * 				},{
 * 					from: "20160127051300",
 * 					to: "20160128093312",
 * 					lastOne: true,
 * 					util_volumn: {
 * 						previous: 97.6,
 * 						next: 0
 * 					},
 * 					util_mass:{
 * 						previous: 114.5,
 * 						next: 0
 * 					}
 * 				}
	 * 		]
	 * }
	 * </code>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.Shape
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UtilizationLineChart
	 */
	var UtilizationLineChart = Group.extend("sap.gantt.shape.ext.ulc.UtilizationLineChart", /** @lends sap.gantt.shape.ext.ulc.UtilizationLineChart.prototype" */ {});

	/**
	 * Gets the value of property <code>enableSelection</code>.
	 * 
	 * <p>
	 * This value controls whether a shape is enabled for selection behavior. The default value for Utilization Line Chart is false.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {boolean} Value of property <code>enableSelection</code>.
	 * @public
	 */
	UtilizationLineChart.prototype.getEnableSelection = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("enableSelection")){
			return this._configFirst("enableSelection", oData);
		}
		
		return false;
	};

	return UtilizationLineChart;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UtilizationLineChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartBase",[
	'jquery.sap.global', './library', 'sap/ui/core/Control',
	"./misc/Utility", "./config/TimeHorizon"
], function (jQuery, library, Control, Utility, TimeHorizon) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all Gantt charts.
	 * 
	 * <p>This base class defines:
	 * <ul>
	 * 		<li>Basic properties and aggregations.</li>
	 * 		<li>Metadata required integrate with GanttChartContainer.</li>
	 * </ul>
	 * sap.gantt provides two basic implementations of <code>GanttChartBase</code>:
	 * <ul>
	 * 		<li><code>sap.gantt.GanttChart</code> - A chart area that contains rows along the vertical axis and a time scale along the horizontal axis.</li>
	 * 		<li><code>sap.gantt.GanttChartWithTable</code> - A tree table and a chart area separated by a splitter with rows synchronized.</li>
	 * </ul>
	 * </p>
	 * 
	 * <p>A number of <code>get</code> and <code>select</code> functions in this class use the row ID, row UI ID (UID), shape ID, or shape UID as the input to identify the objects to 
	 * select or retrieve.
	 * 
	 * A row UID comprises the following parts:
	 * <ul>
	 * 		<li>Row ID: Identifier of a specific row. In most cases, this ID is specified in your data model, for example: 0001. The system generates a 
	 * random ID for a row if you do not specify the row ID.</li>
	 * 		<li>Row path: Represents the ID hierarchy in a tree structure. For example, if a tree has a three-level hierarchy, the row path 
	 * follows this pattern: Level_1_row_id|level_2_row_id|level_3_row_id</li>
	 * 		<li>Scheme: Chart scheme which is configured in shape configuration. The scheme controls what kind of shapes are shown in a row.</li>
	 * </ul>
	 * Row UID pattern: PATH:row_id|SCHEME:chart_scheme_key[index]
	 * 
	 * A shape UID comprises the following parts:
	 * <ul>
	 * 		<li>Row UID: UID of the row where the shape is located.</li>
	 * 		<li>Shape data name: Key of the shape in the data model. For example: DATA:activity_greedy</li>
	 * 		<li>Shape ID: Identifier of a specific shape. In most cases, this ID is specified in your data model. The system generates a 
	 * random ID for a shape if you do not specify the shape ID.</li>
	 * </ul>
	 * Row UID pattern: PATH:row_id|SCHEME:chart_scheme_key[index]|DATA:shape_data_name[shape_id]
	 * 
	 * Note that you do not need to specify the UID for a shape or row. Gantt  Chart automatically forms the UIDs for shapes or rows.
	 * </p>
	 * 
	 * @extends sap.ui.core.Control
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartBase
	 */
	var GanttChartBase = Control.extend("sap.gantt.GanttChartBase", /** @lends sap.gantt.GanttChartBase.prototype */ {
		metadata: {
			"abstract": true,
			library: "sap.gantt",
			
			properties: {
				
				/**
				 * Width of the control.
				 */
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				
				/**
				 * Height of the control.
				 */
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},
				
				/**
				 * Switch to show and hide the cursor line that follows the cursor.
				 */
				enableCursorLine: {type: "boolean", defaultValue: true},
				
				/**
				 * Switch to show and hide the present time indicator
				 */
				enableNowLine: {type: "boolean", defaultValue: true},
				
				/**
				 * Switch to show and hide vertical lines representing intervals along the time axis
				 */
				enableVerticalLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to show and hide adhoc lines representing milestones and events along the time axis
				 */
				enableAdhocLine: {type: "boolean", defaultValue: true},

				/**
				 * Zoom level in float.
				 * 
				 * This property allows application developers to control the zoom level. 
				 * When GanttChart is embedded in <code>sap.gantt.GanttChartContainer</code>, you do not have to manage this property.
				 * @deprecated As of version 1.44, please use sap.gantt.axistime.AxisTimeStrategy to change the zoom rate
				 */
				timeZoomRate: {type: "float", defaultValue: 1},
				
				/**
				 * Current mode of the Gantt chart.
				 * 
				 * If no value is provided, GanttChart uses a default mode key.
				 */
				mode: {type: "string", defaultValue: sap.gantt.config.DEFAULT_MODE_KEY},

				/**
				 * Selection mode for GanttChart
				 * 
				 * This property controls whether multiToggle or multi-selection mode is enabled for the tree table and
				 * for shapes. It may also affect the visual appearance, such as whether check boxes are available for selection.
				 * From version 1.40 to upper versions, multi is replaced by multiToggle selection mode in tree table
				 * @deprecated Please use <code>tableProperties</code>(e.g. <code>setTableproperties({selectionMode: "None"})</code>)
				 * to control table selection mode, and <code>shapeSelectionMode</code>(e.g. <code>setShapeSelectionMode("None")</code>)
				 * to control shape selection mode.
				 */
				selectionMode: {type : "sap.gantt.SelectionMode", defaultValue : sap.gantt.SelectionMode.MultiWithKeyboard},

				/**
				 * Selection mode for shape
				 * 
				 * This property controls 4 shape selection modes(MultiWithKeyboard, Multiple, Single, None).
				 * You can use <code>setShapeSelectionMode("None")</code> to set shape selection mode.
				 */
				shapeSelectionMode: {type : "sap.gantt.SelectionMode", defaultValue : sap.gantt.SelectionMode.MultiWithKeyboard},

				/**
				 * If the implementation contains a selection panel, this is the initial width.
				 * 
				 * In the current library, <code>sap.gantt.GanttChart</code> does not have a selection panel. 
				 * <code>sap.gantt.GanttChart</code> has a selection panel implemented by <code>sap.ui.table.TreeTable</code>.
				 */
				selectionPanelSize: {type: "sap.ui.core.CSSSize", defaultValue: "30%"},
				
				/**
				 * Current hierarchy key referencing from configuration property <code>hierarchies</code>.
				 * 
				 * If <code>source select group</code> is enabled in the Gantt chart toolbar, the current hierarchy name referenced from <code>hierarchies</code>
				 * by this property is shown.
				 * For applications that do not require this function, this property can be ignored and a default value is used.
				 */
				hierarchyKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_HIERARCHY_KEY},
				
				baseRowHeight: {type : "int", group : "Appearance", defaultValue : null},

				/**
				 * SVG reusable element definitions.
				 * 
				 * If this property is provided, the paint server definition of the SVG is rendered. Method <code>getDefString()</code> should be
				 * implemented by all paint server classes that are passed in in this property.
				 * We recommend that you set the type of this argument to <code>sap.gantt.def.SvgDefs</code>. Otherwise some properties you set may not function properly.
				 */
				svgDefs: {type: "object", defaultValue: null},

				/**
				 * Configuration of the time axis.
				 *
				 * @deprecated As of version 1.44, replaced by aggregation 'axisTimeStrategy'.
				 * Planning horizon, initial horizon, and zoom level can be configured with this property. If not provided, a default
				 * configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.TimeAxis</code>. Otherwise some properties you set may not function properly.
				 */
				timeAxis: {type: "object", defaultValue: sap.gantt.config.DEFAULT_TIME_AXIS},
				
				/**
				 * Configuration of available modes.
				 *
				 * List of available modes. To apply modes to toolbar and shapes, further configuration is needed. If not provided, a default
				 * configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Mode[]</code>. Otherwise some properties you set may not function properly.
				 */
				modes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_MODES},
				
				/**
				 * Configuration of toolbar schemes.
				 *
				 * List of available toolbar schemes. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarScheme[]</code>. Otherwise some properties you set may not function properly.
				 */
				toolbarSchemes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES},
				
				/**
				 * Configuration of hierarchies.
				 *
				 * List of available hierarchies. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Hierarchy[]</code>. Otherwise some properties you set may not function properly.
				 */
				hierarchies: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_HIERARCHYS},
				
				/**
				 * Configuration of object types.
				 *
				 * List of available object types. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ObjectType[]</code>. Otherwise some properties you set may not function properly.
				 */
				objectTypes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_OBJECT_TYPES},
				
				/**
				 * Configuration of chart schemes.
				 *
				 * List of available chart schemes. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ChartScheme[]</code>. Otherwise some properties you set may not function properly.
				 */
				chartSchemes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_CHART_SCHEMES},

				/**
				 * Configuration of locale settings.
				 *
				 * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving time option
				 * are provided by locale settings.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Locale</code>. Otherwise some properties you set may not function properly.
				 */
				locale: {type: "object", defaultValue: sap.gantt.config.DEFAULT_LOCALE_CET},

				/**
				 * Configuration of shape data names and the attribute in raw data that serves as 'id'.
				 * 
				 * This property value should be an array, either an array of string, each string represents one available shape data name, or an array of object, each object specifies the shape data name
				 * and data attribute that will serves as 'id'.
				 * This configuration must be provided if SVG graphics are needed.
				 */
				shapeDataNames: {type: "sap.gantt.GenericArray", defaultValue: []},

				/**
				 * Configuration of shape data against shape classes.
				 *
				 * List of available shapes. The shapes configured in this list are initialized inside <code>sap.gantt.GanttChartBase</code>.
				 * Note that for JSON data binding, this configuration supports deep structured data structures. For ODATA binding, only one level is supported.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Shape[]</code>. Otherwise some properties you set may not function properly.
				 */
				shapes: {type: "object[]", defaultValue: []},

				/**
				 * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and patterns.
				 */
				adhocLineLayer: {type: "string", defaultValue: sap.gantt.AdhocLineLayer.Top},

				/**
				 * Exposed property from sap.ui.table.
				 */
				tableProperties: {type: "object", defaultValue: {}},

				/**
				 * Defines how to adjust the relative position between a draggable shape and the mouse pointer.
				 */
				ghostAlignment: {type: "string", defaultValue: sap.gantt.dragdrop.GhostAlignment.None}
			},

			aggregations: {

				/**
				 * Rows of <code>sap.gantt.GanttChartBase</code>
				 *
				 * This aggregation is delegated to <code>sap.gantt.table.TreeTable</code>. Rows are provide a base for
				 * shapes with a category of <code>"InRowShape"</code>. The configuration in property <code>shapes</code>
				 * determines how the shapes are drawn.
				 */
				rows: {type: "sap.ui.core.Control", multiple: true, singularName: "row", bindable: "bindable", visibility: "public"},
					
				/**
				 * Relationships of shapes carried by rows.
				 *
				 * Similar to rows, this aggregation does not request templates either. Relationships are a special shape with a category of 
				 * <code>"crossRowShape"</code>. How relationships are drawn is also specified in configuration property <code>shapes</code>.
				 */
				relationships: {type: "sap.ui.core.Control", multiple: true, bindable: "bindable", visibility: "public"},
				
				/**
				 * Paint servers consumed by special shape <code>sap.gantt.shape.cal.Calendar</code>.
				 *
				 * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar definition with calendar shapes.
				 * It is possible to define a Calendar paint server to draw only one rectangle for each row. Notes for classes extended from
				 * <code>sap.gantt.def.cal.CalendarDef</code>: Different from property <code>paintServerDefs</code>, paint servers defined here must
				 * implement method <code>getDefNode()</code> instead of method <code>getDefString()</code>.
				 */	
				calendarDef: {type: "sap.gantt.def.cal.CalendarDefs", multiple: false, bindable: "bindable", visibility: "public"},
				/**
				 * This aggregation controls the zoom strategies and zoom rate in Gantt Chart.
				 */
				axisTimeStrategy: {type: "sap.gantt.axistime.AxisTimeStrategyBase", multiple: false, bindable: "bindable", visibility: "public"},

				/**
				 * The aggregation is used to store configuration of adhoc lines, adhoc lines represent milestones and events in axis time.
				 */
				adhocLines: {type: "sap.gantt.AdhocLine", multiple: true, singularName: "adhocLine", bindable: "bindable", visibility: "public"}
			},
			
			events: {
				
				/**
				 * Event fired when the hierarchy key has changed in the Gantt chart toolbar.
				 */
				ganttChartSwitchRequested: {
					parameters: {
						/**
						 * Target hierarchy key.
						 */
						hierarchyKey: {type: "string"}
					}
				},
				
				/**
				 * Splitter (if exists) resized.
				 *
				 * If a splitter exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 * You can listen for this event and obtain <code>zoomInfo</code>.
				 *
				 */
				splitterResize: {
					parameters : {
						/**
						 * ID of the source control.
						 */
						id : {type : "string"},

						/**
						 * Old size in the form of [height, width].
						 */
						oldSizes : {type : "int[]"},

						/**
						 * New size in the form of [height, width].
						 */
						newSizes : {type : "int[]"},

						/**
						 * Zoom information.
						 *
						 * This object contains all related information for the listener to get the current zoom level of the time axis.
						 * Usually <code>zoomInfo</code> contains the following information:
						 * <ul>
						 * 	<li><code>"base"</code> - Base for zooming calculation.
						 *		<ul>
						 * 			<li><code>"sGranularity"</code>: "4day", - Zoom level that is used to calculate the zoom base; it is taken from timeAxis.granularity.</li>
						 * 			<li><code>"fScale"</code>: 3840000 - Base scale determined by zoomStrategy level and now().</li>
						 * 		</ul>
						 * 	</li>
						 * 	<li><code>"determinedByConfig"</code> - Zoom level calculated by configuration <code>timeAxis</code>.
						 * 		<ul>
						 * 			<li><code>"fRate"</code>: 1, - Zoom rate determined by configuration timeAxis.granularity.</li>
						 * 			<li><code>"fMaxRate"</code>: 384, - Maximum zoom rate determined by configuration timeAxis.finestGranularity.</li>
						 * 			<li><code>"fMinRate"</code>: 0.02197802197802198 - Minimum zoom rate determined by configuration timeAxis.coarsestGranularity.</li>
						 * 		</ul>
						 * 	</li>
						 * 	<li><code>"determinedByChartWidth"</code> - Zoom level calculated by the SVG width.
						 * 		<ul>
						 * 			<li><code>"fMinRate"</code>: 0.0279009617614573, - Minimum zoom rate determined by the chart width and configuration timeAxis.planHorizon.</li>
						 * 			<li><code>"fSuitableRate"</code>: 0.5078804440909039 - Suitable zoom rate determined by the chart width and configuration timeAxis.initHorizon.</li>
						 * 		</ul>					 
						 * 	</li>
						 * 	<li><code>iChartWidth</code>: 417 - Chart width in pixel.</li>
						 * </ul>
						 */
						zoomInfo: {type: "object"}
					}
				},

				/**
				 * Horizontal (time axis) scroll.
				 *
				 * If the horizontal scroll bar exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 * @deprecated As of version 1.44
				 */
				horizontalScroll: {
					parameters: {
						/**
						 * Scroll steps.
						 */
						scrollSteps: {type: "int"},
						/**
						 * The start time of Gantt Chart visible area when the event fired
						 */
						startTime: {type: "string"},
						/**
						 * The end time of Gantt Chart visible area when the event fired
						 */
						endTime: {type: "string"}
					}
				},

				/**
				 * Vertical (row axis) scroll.
				 *
				 * If the vertical scroll bar exists and synchronization is needed with other Gantt charts in the container, use this event. 
				 * @deprecated As of version 1.44
				 */
				verticalScroll: {
					parameters: {
						/**
						 * Scroll steps.
						 */
						scrollSteps: {type: "int"}
					}
				},

				/**
				 * Event is fired when a mouse-hover occurs in the graphic part.
				 */
				chartMouseOver: {
					parameters: {
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},

				/**
				 * Event fired when the chart is clicked
				 */
				chartClick: {
					parameters:{
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},

				/**
				 * Event fired when the chart is double-clicked
				 */
				chartDoubleClick: {
					parameters:{
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},

				/**
				 * Event fired when the chart is right-clicked
				 */
				chartRightClick: {
					parameters:{
						/**
						 * Row object information of the current mouse point.
						 */
						objectInfo: {type: "object"},

						/**
						 * Leading row object information. null when it is the main row at current mouse point; main row information if it is one of multiple expanded rows.
						 */
						leadingRowInfo: {type: "object"},

						/**
						 * Timestamp of the current mouse point.
						 */
						timestamp: {type: "string"},

						/**
						 * ID of SVG.
						 */
						svgId: {type: "string"},

						/**
						 * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
						 */
						svgCoordinate: {type: "int[]"},

						/**
						 * Effective mode. It can be the current Gantt Chart mode or a mode derived from the chart scheme mode.
						 */
						effectingMode: {type: "string"},

						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				//Be used in Gantt to handle dragging shapes between different ganttCharts
				chartDragEnter: {
					parameters: {
						originEvent: {type: "object"}
					}
				},
				
				//Be used in Gantt to handle dragging shapes between different ganttCharts
				chartDragLeave: {
					parameters: {
						originEvent: {type: "object"},
						draggingSource: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the selection status of rows changes.
				 */
				rowSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				
				},
				
				/**
				 * Event fired when the selection status of relationships changes.
				 */
				relationshipSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when the selection status of shapes changes.
				 */
				shapeSelectionChange: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"}
					}
				},
				
				/**
				 * Event fired when a drag-and-drop occurs on one or more selected shapes.
				 */
				shapeDragEnd: {
					parameters: {
						/**
						 * Original JQuery event object.
						 */
						originEvent: {type: "object"},

						/**
						 * List of source shape data.
						 */
						sourceShapeData: {type: "object[]"},

						/**
						 * Source SVG ID.
						 */
						sourceSvgId: {type: "string"},

						/**
						 * Information about the drop position and target row. It contains the following properties:
						 * <ul>
						 * 		<li>shapeTimestamp
						 * 		startTime and endTime of a dropped shape.
						 * 		This property is added to support the newly introduced drag-and-drop behaviors.
						 * 		For more information, see <code>sap.gantt.dragdrop.GhostAlignment</code>.
						 * 		</li>
						 * 		<li>cursorTimestamp
						 * 		Cursor timestamp when a shape is dropped.
						 * 		This property is added to support the newly introduced drag-and-drop behaviors.
						 * 		For more information, see <code>sap.gantt.dragdrop.GhostAlignment</code>.
						 * 		</li>
						 * 		<li>mode
						 * 		Mode of the current view.
						 * 		</li>
						 * 		<li>objectInfo
						 * 		Data of the row where you dropped the shape.
						 * 		</li>
						 * </ul>
						 * Note: The original property 'mouseTimestamp', which contains the startTime/endTime of a
						 * dropped shape has been deprecated.
						 */
						targetData: {type: "object"},

						/**
						 * Target SVG ID.
						 */
						targetSvgId: {type: "string"}
					}
				},

				/**
				 * Event fired when toggle node of the tree table.
				 */
				treeTableToggleEvent: {
					parameters: {
						/**
						 * The index of the expanded/collapsed row.
						 */
						rowIndex: {type: "int"},
						/**
						 * The binding context of the selected row.
						 */
						rowContext: {type: "object"},
						/**
						 * flag whether the node has been expanded or collapsed.
						 */
						expanded: {type: "boolean"}
					}
				},

				/**
				 * Event fired when a resizing occurs on a resized shape.
				 */
				shapeResizeEnd: {
					parameters: {
						/**
						 * UID of the resized shape.
						 */
						shapeUid: {type: "string"},
						/**
						 * Row object of the resizing shape.
						 */
						rowObject: {type: "object"},
						/**
						 * Original shape time array, including the start time and end time.
						 */
						oldTime: {type: "string[]"},
						
						/**
						 * New shape time array, including the start time and end time.
						 */
						newTime: {type: "string[]"}
					}
				}
			}
		}
	});

	// enable calling 'bindAggregation("rows")' without a factory
	GanttChartBase.getMetadata().getAllAggregations()["rows"]._doesNotRequireFactory = true;
	// enable calling 'bindAggrgation("rows")' without a factory
	GanttChartBase.getMetadata().getAllAggregations()["relationships"]._doesNotRequireFactory = true;

	/**
	 * Initializes the GanttChart instance after creation.
	 *
	 * @protected
	 */
	GanttChartBase.prototype.init = function () {
		this._iBaseRowHeight = undefined;
		
		//Exposed properties from sap.ui.table
		this.mDefaultTableProperties = {
			rowHeight: 0,
			threshold: 100,
			firstVisibleRow: 0,
			selectionMode: sap.ui.table.SelectionMode.MultiToggle,
			selectionBehavior: sap.ui.table.SelectionBehavior.Row
		};
	};

	/**
	 * Jumps to a given time.
	 * 
	 * This method sets the position of the visible area to a certain timestamp. It can be used to implement the function of
	 * Jump To First, Jump To Last, and Jump To Current.
	 * 
	 * A Redraw of SVG is triggered.
	 * 
	 * @name sap.gantt.GanttChartBase.prototype.jumpToPosition
	 * @function
	 * 
	 * @param {timestamp} vDate Accepted value is a 14-digit timestamp or a Date object.
	 * @public
	 */

	/**
	 * Provides the Ordinal Axis that is used to draw the SVG graphic.
	 *
	 * This method is intended to allow access to the ordinal axis. Do not change the ordinal axis.
	 * All subclasses must provide implementations.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getAxisOrdinal
	 * @function
	 *
	 * @return {sap.gantt.misc.AxisOrdinal} Returns the axis ordinal instance.
	 * @public
	 */

	/**
	 * Provides the Time Axis that is used to draw the SVG graphic.
	 *
	 * This method is intended to allow access to the time axis. Do not change the time axis.
	 * All subclasses must provide implementations.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getAxisTime
	 * @function
	 *
	 * @return {sap.gantt.misc.AxisTime} Returns the axis time instance.
	 * @public
	 */

	/**
	 * Selects shape data or row data by UI ID (UID).
	 *
	 * UID is generated by Gantt Chart to identify the appearance of shape data and row data. You can retrieve UIDs by certain events.
	 * The current implementation only supports shape selection by UID.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.selectByUid
	 * @function
	 *
	 * @param {aUid} Array of the UIDs of the UI elements to be selected
	 * @public

	 * Gets the selected rows.
	 *
	 * @return {array} Row data of the selected rows
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getSelectedRows
	 * @function
	 *
	 * @public
	 */

	/**
	 * Gets the selected rows, shapes, and relationships.
	 *
	 * @return {object} The returned object contains row data for all selected rows, shape data for all selected shapes, and relationship 
	 * data for all selected relationships.
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getAllSelections
	 * @function
	 *
	 * @public
	 */

	/**
	 * Gets the shape data of the selected shapes.
	 *
	 * @return {array} Selected shapes. The returned structure is shown as below.
	 * {
	 *     "shapeDataName1": [oShapeData1, oShapeData2, ...]
	 *     "shapeDataName2": [oShapeData3, oShapeData3, ...]
	 *     ...
	 * }
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getSelectedShapes
	 * @function
	 *
	 * @public
	 */

	/**
	 * Gets all the selected relationships.
	 *
	 * @return {array} selected relationships
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getSelectedRelationships
	 * @function
	 *
	 * @public
	 */

	/**
	 * Gets a row object by the corresponding shape UID.
	 *
	 * @param {string} [sShapeUid] Shape UID
	 * @return {object} Row object
	 *
	 * @name sap.gantt.GanttChartBase.prototype.getRowByShapeUid
	 * @function
	 *
	 * @public
	 */

	/**
	 * Selects a group of shapes specified by the aId array. Alternatively, this function 
	 * deselects all selected shapes when aId is a null list and bExclusive is true.
	 *
	 * @param {array} [aId] List of the IDs of the shapes to select
	 * @param {boolean} [bExclusive] Whether or not to deselect all selected shapes when aId is null
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.selectShapes
	 * @function
	 *
	 * @public
	 */

	/**
	 * Deselects a group of shapes specified by the aId array.
	 *
	 * @param {array} [aId] List of IDs of the shapes to deselect
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.deselectShapes
	 * @function
	 *
	 * @public
	 */

	/**
	 * Selects rows and all shapes contained in those rows specified by an array of row IDs. Alternatively, this function 
	 * deselects all selected rows and shapes in those rows if the row ID array is null and bExclusive is true.
	 *
	 * @param {array} [aRowId] List of IDs of the rows to select
	 * @param {boolean} [bExclusive] Whether or not to deselect all selected rows and shapes when aRowId is null
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.selectRowsAndShapes
	 * @function
	 *
	 * @public
	 */

	/**
	 * Selects a group of relationships specified by the aId array. Alternatively, this function 
	 * deselects all selected relationships if aId is a null list and bExclusive is true.
	 *
	 * @param {array} [aId] List of IDs of the relationships to select
	 * @param {boolean} [bExclusive] Whether or not to deselect all selected shapes when aId is null
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.selectRelationships
	 * @function
	 *
	 * @public
	 */

	/**
	 * Deselects a group of relationships specified by the aId array.
	 *
	 * @param {array} [aId] List of IDs of the relationships to deselect
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.deselectRelationships
	 * @function
	 *
	 * @public
	 */

	/**
	 * Selects a group of rows specified by the aId array.
	 *
	 * @param {array} [aId] List of IDs of the rows to select
	 * @param {boolean} [bExclusive] Whether or not to deselect all selected rows when aId is null
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 * 
	 * @name sap.gantt.GanttChartBase.prototype.selectRows
	 * @function
	 * 
	 * @public
	 */

	/**
	 * Deselects a group of rows specified by the aId array.
	 *
	 * @param {array} [aId] List of the rows that you want to deselect
	 * @return {sap.gantt.GanttChartBase} Gantt Chart instance
	 *
	 * @name sap.gantt.GanttChartBase.prototype.deselectRows
	 * @function
	 *
	 * @public
	 */

	/**
	 * Expands the Gantt chart to the given level.
	 *
	 * @see sap.ui.table.TreeTable.expandToLevel
	 *
	 * @param {int} iLevel
	 *         Level to be expanded to
	 * @return {sap.gantt.GanttChartBase} Reference to the GanttChart control, which can be used for chaining
	 * 
	 * @name sap.gantt.GanttChartBase.prototype.expandToLevel
	 * @function
	 *
	 * @public
	 */

	/**
	 * Default event handler for the internal event expandChartChange from global TOOLBAR.
	 *
	 * @param {boolean} bExpanded expand or collapse the selected row
	 * @param {array} aChartSchemes bound chart scheme
	 * @param {array} aSelectedIndices user selected row indices
	 *
	 * @protected
	 */
	GanttChartBase.prototype.handleExpandChartChange = function(bExpanded, aChartSchemes, aSelectedIndices){

	};

	/**
	 * Notifies that the data source has changed.
	 * 
	 * @protected
	 */
	GanttChartBase.prototype.notifySourceChange = function(){

	};
	
	/**
	 * Utilize {@link sap.ui.Table}._setLargeDataScrolling method which 
	 * lets you control in which situation the <code>ScrollBar</code> fires scroll events.
	 * We can make this method public once sap.ui.Table._setLargeDataScrolling is public.
	 *
	 * @param {boolean} bLargeDataScrolling Set to true to let the <code>ScrollBar</code> only fires scroll events when
	 * the scroll handle is released. No matter what the setting is, the <code>ScrollBar</code> keeps on firing scroll events
	 * when the user scroll with the mousewheel or using touch
	 * @private
	 */
	GanttChartBase.prototype._setLargeDataScrolling = function(bLargeDataScrolling) {
		
	};

	/**
	 * get the keys for row data : id, type, which is configured when init gantt chart
	 * @return {object} indicate which attribute in raw rowData that serves as the purpose of 'id' and 'type'
	 * @private
	 */
	GanttChartBase.prototype._getConfiguredRowKeys = function(oBindingInfo) {
		if (!oBindingInfo) {
			oBindingInfo = this.getBindingInfo("rows");
		}
		var oRowConfiguredKeys;
		if (oBindingInfo && oBindingInfo.parameters) {
			oRowConfiguredKeys = oBindingInfo.parameters.gantt;
		}
		this._configuredRowKeys = {
				rowIdName : oRowConfiguredKeys && oRowConfiguredKeys.rowIdName ? oRowConfiguredKeys.rowIdName : "id",
				rowTypeName : oRowConfiguredKeys && oRowConfiguredKeys.rowTypeName ? oRowConfiguredKeys.rowTypeName : "type"
		};
		return this._configuredRowKeys;
	};

	GanttChartBase.prototype.getRowIdName = function() {
		if (!this._configuredRowKeys) {
			this._getConfiguredRowKeys();
		}
		return this._configuredRowKeys.rowIdName;
	};

	GanttChartBase.prototype.getRowTypeName = function() {
		if (!this._configuredRowKeys) {
			this._getConfiguredRowKeys();
		}
		return this._configuredRowKeys.rowTypeName;
	};
	
	GanttChartBase.prototype.getRlsIdName = function() {
		if (!this._configuredRlsKeys) {
			this._getConfiguredRlsKeys();
		}
		return this._configuredRlsKeys.rlsIdName;
	};
	
	GanttChartBase.prototype._getConfiguredRlsKeys = function() {
		var	oBindingInfo = this.getBindingInfo("relationships");
		var oConfiguredRlsKeys;
		if (oBindingInfo && oBindingInfo.parameters) {
			oConfiguredRlsKeys = oBindingInfo.parameters.gantt;
		}
		this._configuredRlsKeys = {
				rlsIdName : oConfiguredRlsKeys && oConfiguredRlsKeys.rlsIdName ? oConfiguredRlsKeys.rlsIdName : "id"
		};
		return this._configuredRlsKeys;
	};

	/**
	 * Wrap the selector of a dom element to the Attribute Equeal Selector, which can work fine even if the ID of the
	 * Gantt has some invalid character like colons "::".
	 * @param {string} sSuffix the ID suffix to get a dom object for
	 * @return {string} The wrapped selector for the Dom
	 */
	GanttChartBase.prototype.getDomSelectorById = function(sSuffix) {
		var selector = Utility.attributeEqualSelector("id", sSuffix ? this.getId() + "-" + sSuffix : this.getId());
		return selector;
	};

	/**
	 * For Exposing properties from sap.ui.table
	 * @param {object} oTableProperties
	 *         The object include some properties same as sap.ui.table
	 * @return {sap.gantt.GanttChartBase} Reference to this in order to allow method chaining
	 * @public
	 */
	GanttChartBase.prototype.setTableProperties = function(oTableProperties) {
		var currentTableProperties = this.getTableProperties();
		for (var prop in oTableProperties) {
			if (this.mDefaultTableProperties.hasOwnProperty(prop)) {
				var sMethodName = "set" + prop[0].toUpperCase() + prop.substr(1);
				var value = oTableProperties[prop];
				currentTableProperties[prop] = value;
				this._oTT[sMethodName](value);
			}
			else {
				jQuery.sap.log.warning("The property of \"" + prop + "\" is not allowed because property may change the Gantt chart layout!");
			}
		}
		this.setProperty("tableProperties", currentTableProperties);
		return this;
	};

	/**
	 * Expands the row for the given row index in the selection panel
	 *
	 * @see sap.ui.table.Table.expand
	 *
	 * @param {int} iRowIndex
	 *         Index of the row to expand
	 * @return {sap.gantt.GanttChartBase} A reference to the GanttChartBase control, which can be used for chaining
	 * @public
	 */

	/**
	 * Collapses the row for the given row index in the selection panel
	 *
	 * @see sap.ui.table.Table.collapse
	 *
	 * @param {int} iRowIndex
	 *         index of the row to expand
	 * @return {sap.gantt.GanttChartBase} A reference to the GanttChartBase control, which can be used for chaining
	 * @public
	 */

	/**
	 * Gets the number of visible rows in the selection panel.
	 *
	 * @see sap.ui.table.Table.getVisibleRowCount
	 *
	 * @return {int} The first visible row index
	 * @public
	 */

	return GanttChartBase;
}, true);

}; // end of sap/gantt/GanttChartBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartContainer",[
	"./library", "sap/ui/core/Control", "sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData", "sap/ui/core/Orientation",
	"./legend/LegendContainer", "./control/Toolbar", "./control/AssociateContainer",
	"./config/TimeHorizon", "./misc/Utility"
], function (library, Control, Splitter, SplitterLayoutData, Orientation, LegendContainer, Toolbar, AssociateContainer,
	TimeHorizon, Utility) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt chart container.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * A container that holds one or more <code>GanttChartBase</code> instances.
	 *
	 * <p> This class has several built-in several controls to support <code>GanttChartBase</code> instances:
	 *  <ul>
	 * 		<li>A toolbar above all Gantt Charts. Many built-in controls can be enabled or disabled using configuration property <code>toolbarScheme</code>. Built-in functions include:
	 *			<ul>
	 *				<li>ComboBox for container selection</li>
	 *				<li>Buttons for Add View, Delete View, and Switch Splitter Orientation</li>
	 *				<li>Expand/Collapse groups for expandable charts</li>
	 *				<li>A zooming slider</li>
	 *				<li>A legend button</li>
	 *				<li>A Settings button</li>
	 *			</ul>
	 *			If nothing is added to the toolbar, the toolbar is hidden automatically. For more information about the functions and configuration, 
	 *			see the API documentation of <code>sap.gantt.config.ToolbarScheme.</code>
	 *		</li>
	 *		<li>A Splitter containing aggregation <code>ganttCharts</code></li>
	 *  </ul>
	 * </p>
	 *
	 * @extend sap.ui.core.Control
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var GanttChartContainer = Control.extend("sap.gantt.GanttChartContainer", /** @lends sap.gantt.GanttChartContainer.prototype */ {
		metadata: {
			library: "sap.gantt",
			properties: {
				/**
				 * Width of the control
				 */
				width: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},

				/**
				 * Height of the control
				 */
				height: {type: "sap.ui.core.CSSSize", defaultValue: "100%"},

				/**
				 * Switch to enable and disable scroll synchronization by time on instances of aggregation <code>ganttCharts</code>.
				 */
				enableTimeScrollSync: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable the cursor line that follows the cursor.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableCursorLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable the present time indicator.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableNowLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable vertical lines representing intervals along the time axis.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableVerticalLine: {type: "boolean", defaultValue: true},

				/**
				 * Switch to enable and disable adhoc lines representing milestones and events along the time axis.
				 *
				 * When this value is set, it overrides the corresponding value on instances of aggregation <code>ganttCharts</code>.
				 */
				enableAdhocLine: {type: "boolean", defaultValue: true},

				/**
				 * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
				 * 
				 * If this property is provided, the paint server definition of the SVG is rendered. Method <code>getDefString()</code> should be
				 * implemented by all paint server classes that are passed in in this property. It is easier to assign a common paint server definition
				 * in this class instead of in separate instances of <code>sap.gantt.GanttChartBase</code>. Then the definition is 
				 * rendered only once.
				 * We recommend that you set the type of this argument to <code>sap.gantt.def.SvgDefs</code>. Otherwise some properties you set may not function properly.
				 */
				svgDefs: {type: "object", defaultValue: null},

				/**
				 * List of available modes. To apply modes to the toolbar and shapes, further configuration is needed. (specifically, 
				 * in property <code>toolbarSchemes</code>, and properties <code>toolbarSchemes</code> and <code>shapes</code> in 
				 * the <code>GanttChartBase</code> class)If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Mode[]</code>. Otherwise some properties you set may not function properly.
				 */
				modes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_MODES},

				/**
				 * List of available toolbar schemes. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ToolbarScheme[]</code>. Otherwise some properties you set may not function properly.
				 */
				toolbarSchemes: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES},

				/**
				 * List of available hierarchies. If not provided, a default configuration is provided.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.Hierarchy[]</code>. Otherwise some properties you set may not function properly.
				 */
				hierarchies: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_HIERARCHYS},

				/**
				 * Configuration of container layouts.
				 * 
				 * This configuration affects the data source selection ComboBox in the Container Toolbar. When the selection
				 * changes, the <code>ganttChartChangeRequested</code> event that is triggered includes the corresponding layout key.
				 * We recommend that you set the type of this argument to <code>sap.gantt.config.ContainerLayout[]</code>. Otherwise some properties you set may not function properly.
				 */
				containerLayouts: {type: "object[]", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS},

				/**
				 * Current container layout key.
				 * 
				 * This is a key configured in configuration property <code>containerLayouts</code>.
				 */
				containerLayoutKey: {type: "string", defaultValue: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY},

				/**
				 * Define the amount of units to change the time zoom slider.
				 *
				 * See {@link sap.m.Slider#setStep}
				 * @deprecated As of version 1.44, please set the property 'stepCountOfSlider' in sap.gantt.config.TimeZoomGroup.
				 */
				sliderStep: {type: "int", defautValue: undefined},

				/**
				 * Define the maximum number of Gantt charts to be displayed on the same screen. 
				 * When this number is reached, the "Add Gantt Chart" button is grayed out. 
				 */
				maxNumOfGanttCharts: {type: "int", defaultValue: 3}
			},
			aggregations: {
				
				/**
				 * Legend shown when the legend button is clicked.
				 * 
				 * This aggregation is used only when the Legend button is configured to be shown in the container toolbar.
				 */
				legendContainer: {type: "sap.gantt.legend.LegendContainer", multiple: false, visibility: "public"},

				/**
				 * Controls to be placed in the container toolbar.
				 * 
				 * <p>This aggregation is used only when the custom toolbar item group is configured to be shown in the container toolbar.
				 * Different from the built-in buttons that are configured to be shown or hidden, these controls are free controls created 
				 * by the application, but are only placed in the container toolbar by <code>sap.gantt.GanttChartContainer</code>.</p>
				 * 
				 * <p>If the source selection group is enabled and you want your application to use a container layout pre-configured 
				 * for a specific source, you can implement your custom toolbar items in the event handler of event <code>ganttChartChangeRequested</code>.</p>
				 */
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public",
					singularName: "customToolbarItem", bindable: "bindable"},

				/**
				 * Gantt chart instances.
				 * 
				 * <p>If the source selection group is enabled and you want your application to use a container layout pre-configured 
				 * for a specific source, you can implement your custom toolbar items in the event handler of event <code>ganttChartChangeRequested</code>.</p>
				 * <p>Provide a Gantt chart in compliance with the container layout setting.
				 * GanttChartContainer is designed to support Gantt chart layouts that include multiple views.</p>
				 */
				ganttCharts: {type: "sap.gantt.GanttChartBase", multiple: true, visibility: "public", singularName: "ganttChart", bindable: "bindable"},

				_toolbar: {type: "sap.gantt.control.Toolbar", multiple: false, visibility: "hidden"}
			},
			events: {
				
				/**
				 * Event fired when any change occurs in the toolbar that requests the application to change aggregation <code>ganttCharts</code>. 
				 * 
				 * <p>Possible triggers are:
				 * <ul>
				 * 	<li>The source selection group changes in the container toolbar.</li>
				 * 	<li>The layout group button is clicked in the container toolbar.</li>
				 * 	<li>The source selection group changes in the Gantt chart toolbar.</li>
				 * </ul>
				 * </p>
				 */
				ganttChartChangeRequested: {
					parameters: {
						/**
						 * Action that caused the change.
						 * 
						 * <p>Possible action values are:
						 * <ul>
						 * 	<li><code>'switchGanttChart'</code>: The source selection group of one Gantt chart toolbar is changed.</li>
						 * 	<li><code>'addGanttChart'</code>: The Add Gantt chart dropdown menu is selected.</li>
						 *  <li><code>'lessGanttChart'</code>: The Less Gantt chart dropdown menu is selected.</li>
						 *  <li><code>'switchContainerLayout'</code>: The source selection group of the Container toolbar is changed.</li>
						 * </ul>
						 * </p>
						 */
						action: {type: "string"},
						
						/**
						 * Provided for actions <code>'switchGanttChart'</code> and <code>'lessGanttChart'</code>.
						 */
						ganttChartIndex: {type: "int"},
						
						/**
						 * Provided for actions <code>'switchGanttChart'</code>, <code>'addGanttChart'</code> and <code>'lessGanttChart'</code>.
						 */
						hierarchyKey: {type: "string"},
						
						/**
						 * Provided for action <code>'switchGanttChart'</code>.
						 */
						oldHierarchyKey: {type: "string"},
						
						/**
						 * Provided for action <code>'switchContainerLayout'</code>.
						 */
						containerLayoutKey: {type: "string"}
					}
				},
				
				/**
				 * Event fired when the custom settings are changed.
				 * 
				 * The Custom settings are application-injected settings that can be configured in the Settings dialog box. This event allows the application to handle these settings.
				 * Only check boxes are supported.
				 */
				customSettingChange: {
					parameters: {
						/**
						 * ID of the custom setting
						 */
						id: {type: "string"},
						
						/**
						 * The value of the custom setting
						 */
						value: {type: "boolean"}
					}
				},
				
				/**
				 * Event fired when toggle node of the tree table.
				 */
				treeTableToggleEvent: {
					parameters: {
						/**
						 * The index of the expanded/collapsed row.
						 */
						rowIndex: {type: "int"},
						/**
						 * The binding context of the selected row.
						 */
						rowContext: {type: "object"},
						/**
						 * flag whether the node has been expanded or collapsed.
						 */
						expanded: {type: "boolean"}
					}
				}
			}
		}
	});

	GanttChartContainer.prototype.init = function () {
		jQuery.sap.measure.start("GanttChartContainer Init","GanttPerf:GanttChartContainer Init function");
		
		this._bInitHorizonApplied = false;

		this._oToolbar = new Toolbar({
			type: sap.gantt.control.ToolbarType.Global,
			sourceId: sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY
		});
		this.setAggregation("_toolbar", this._oToolbar);
		this._oToolbar.attachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.attachLayoutChange(this._onToolbarLayoutChange, this);
		this._oToolbar.attachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.attachZoomStopChange(this._onToolbarZoomStopChange, this);
		this._oToolbar.attachSettingsChange(this._onToolbarSettingsChange, this);
		this._oToolbar.data("holder", this);

		this._oSplitter = new Splitter({
			width: "100%",
			height: "100%",
			orientation: Orientation.Vertical
		});

		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;
		
		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;

		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;
		
		this._oContainerLayoutConfigMap = {};
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT;
		this._oContainerLayoutConfigMap[sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY] = sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT;

		jQuery.sap.measure.end("GanttChartContainer Init");
	};

	GanttChartContainer.prototype.applySettings = function (mSettings, oScope) {
		var retVal = Control.prototype.applySettings.apply(this, arguments);
		if (this.getContainerLayouts() && this.getContainerLayoutKey()) {
			this.switchOrientation(null, true);
		}
		return retVal;
	};

	GanttChartContainer.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes);
		this._oToolbar.setModes(aModes);
		// build a map for easy look up
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};
	
	GanttChartContainer.prototype.setTimeZoomRate = function (fTimeZoomRate) {
		var aGanttCharts = this.getGanttCharts();
		var i, oGanttChart;
		for (i = 0; i < aGanttCharts.length; i++) {
			oGanttChart = aGanttCharts[i];
			oGanttChart.setTimeZoomRate(fTimeZoomRate);
		}
		return this;
	};
	
	GanttChartContainer.prototype.setTimeZoomStop = function (oTimeZoomStop) {
		var aGanttCharts = this.getGanttCharts();
		var i, oGanttChart;
		for (i = 0; i < aGanttCharts.length; i++) {
			oGanttChart = aGanttCharts[i];
			oGanttChart.setTimeZoomStop(oTimeZoomStop);
		}
		return this;
	};

	GanttChartContainer.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes);
		this._oToolbar.setToolbarSchemes(aToolbarSchemes);
		// build a map for easy look up
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		return this;
	};
	
	GanttChartContainer.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies);
		this._oToolbar.setHierarchies(aHierarchies);
		// build a map for easy look up
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		return this;
	};
	
	GanttChartContainer.prototype.setContainerLayouts = function (aContainerLayouts) {
		this.setProperty("containerLayouts", aContainerLayouts);
		this._oToolbar.setContainerLayouts(aContainerLayouts);
		// build a map for easy look up
		this._oContainerLayoutConfigMap = {};
		if (aContainerLayouts) {
			for (var i = 0; i < aContainerLayouts.length; i++) {
				this._oContainerLayoutConfigMap[aContainerLayouts[i].getKey()] = aContainerLayouts[i];
			}
		}
		if (this.getContainerLayoutKey()) {
			this.switchOrientation(null, true);
		}
		return this;
	};

	GanttChartContainer.prototype.setEnableCursorLine = function (bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableCursorLine(bEnableCursorLine);
		}
		this.getAggregation("_toolbar").setEnableCursorLine(bEnableCursorLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableNowLine = function (bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableNowLine(bEnableNowLine);
		}
		this.getAggregation("_toolbar").setEnableNowLine(bEnableNowLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableVerticalLine = function (bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableVerticalLine(bEnableVerticalLine);
		}
		this.getAggregation("_toolbar").setEnableVerticalLine(bEnableVerticalLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableAdhocLine = function (bEnableAdhocLine) {
		this.setProperty("enableAdhocLine", bEnableAdhocLine);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].setEnableAdhocLine(bEnableAdhocLine);
		}
		this.getAggregation("_toolbar").setEnableAdhocLine(bEnableAdhocLine);
		return this;
	};

	GanttChartContainer.prototype.setEnableTimeScrollSync = function (bEnableTimeScrollSync) {
		this.setProperty("enableTimeScrollSync", bEnableTimeScrollSync);
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].detachHorizontalScroll(this._onGanttChartHSBScroll, this);
			if (bEnableTimeScrollSync) {
				aGanttCharts[i].attachHorizontalScroll(this._onGanttChartHSBScroll, this);
			}
		}
		this.getAggregation("_toolbar").setEnableTimeScrollSync(bEnableTimeScrollSync);
		return this;
	};
	

	GanttChartContainer.prototype.setContainerLayoutKey = function (sContainerLayoutKey) {
		if (this.getProperty("containerLayoutKey") === sContainerLayoutKey) {
			return this;
		}
		this.setProperty("containerLayoutKey", sContainerLayoutKey);

		this._oToolbar.setSourceId(sContainerLayoutKey);

		if (this.getContainerLayouts()) {
			this.switchOrientation(null, true);
		}
		return this;
	};

	GanttChartContainer.prototype.setLegendContainer = function (oLegendContainer) {
		this.setAggregation("legendContainer", oLegendContainer);
		if (oLegendContainer){
			this._oToolbar.setLegend(new AssociateContainer({
				content: oLegendContainer.getId()
			}));
		}
		return this;
	};

	GanttChartContainer.prototype.addGanttChart = function (oGanttChart, bReadConfig) {
		if (this.getGanttCharts().length < this.getMaxNumOfGanttCharts()) {
			this.addAggregation("ganttCharts", oGanttChart);
			this._insertGanttChart(oGanttChart, bReadConfig);
		}
	};

	GanttChartContainer.prototype.insertGanttChart = function (oGanttChart, iIndex) {
		if (this.getGanttCharts().length < this.getMaxNumOfGanttCharts()) {
			this.insertAggregation("ganttCharts", oGanttChart, iIndex);
			this._insertGanttChart(oGanttChart, false, iIndex);
		}
	};

	GanttChartContainer.prototype.removeGanttChart = function (vGanttChart) {
		this._removeGanttChart(vGanttChart);
		this.removeAggregation("ganttCharts", vGanttChart);
	};

	GanttChartContainer.prototype.removeAllGanttCharts = function () {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			this._removeGanttChart(aGanttCharts[i]);
		}
		this.removeAllAggregation("ganttCharts");
	};

	GanttChartContainer.prototype._insertGanttChart = function (oGanttChart, bReadConfig, iIndex) {
		jQuery.sap.measure.start("GanttChartContainer _insertGanttChart","GanttPerf:GanttChartContainer _insertGanttChart function");
		if (!oGanttChart) {
			return;
		}

		var bReadSPConfig = true;
		// if initial, apply layout settings for selection panel, otherwise, just keep the same with other contents
		var sSelectionPanelSize = "30%";
		var oFirstGanttChart = this.getGanttCharts()[0];
		if (this._oSplitter.getContentAreas().length > 0) {
			bReadSPConfig = false;
			var oFirstViewSplitter = oFirstGanttChart._oSplitter;
			if (oFirstViewSplitter && oFirstViewSplitter.getContentAreas().length > 0) {
				var oLayoutData = oFirstViewSplitter.getContentAreas()[0].getLayoutData();
				sSelectionPanelSize = oLayoutData ? oLayoutData.getSize() : sSelectionPanelSize;
			}
		}
		oGanttChart.setSelectionPanelSize(sSelectionPanelSize);
		oGanttChart.getAxisTimeStrategy().setZoomLevel(this._oToolbar.getZoomLevel());
		oGanttChart.getAxisTimeStrategy().setZoomLevels(this._oToolbar.getZoomLevels());
		oGanttChart.getAxisTimeStrategy().setTimeLineOption(oFirstGanttChart.getAxisTimeStrategy().getTimeLineOption());
		oGanttChart.getAxisTimeStrategy().setVisibleHorizon(oFirstGanttChart.getAxisTimeStrategy().getVisibleHorizon());

		// wrap association container
		var oAssociateContainer = new AssociateContainer({
			content: oGanttChart.getId(),
			layoutData: new SplitterLayoutData({
				size: "auto"
			})
		});
		if (iIndex !== 0 && !iIndex) {
			this._oSplitter.addContentArea(oAssociateContainer);
		} else {
			this._oSplitter.insertContentArea(oAssociateContainer, iIndex);
		}
		this._adjustSplitterLayoutData(bReadSPConfig, bReadConfig);
		this._oSplitter.triggerResize(true);
		// attach events
		if (this.getEnableTimeScrollSync()) {
			oGanttChart.attachHorizontalScroll(this._onGanttChartHSBScroll, this);
		}

		oGanttChart.attachEvent("_visibleHorizonUpdate", this._onGanttChartVisibleHorizonUpdate, this);
		oGanttChart.attachEvent("_timePeriodZoomStatusChange", this._onGanttChartTimePeriodZoomStatusChange, this);
		oGanttChart.attachEvent("_timePeriodZoomOperation", this._onGanttChartTimePeriodZoomOperation, this);
		oGanttChart.attachSplitterResize(this._onViewSplitterResize, this);
		oGanttChart.attachGanttChartSwitchRequested(this._onGanttChartSwitchRequested, this);
		oGanttChart.attachChartDragEnter(this._onChartDragEnter, this);
		oGanttChart.attachChartDragLeave(this._onChartDragLeave, this);
		oGanttChart.attachShapeDragEnd(this._onShapeDragEnd, this);
		oGanttChart.attachTreeTableToggleEvent(this._onTreeTableToggle, this);
		oGanttChart.attachEvent("_zoomInfoUpdated", this._onZoomInfoUpdated, this);
		jQuery.sap.measure.end("GanttChartContainer _insertGanttChart");
	};

	GanttChartContainer.prototype._onGanttChartVisibleHorizonUpdate = function(oEvent){
		//if the time scroll sync is enabled, the whole sync between multiple views will be handled in _onGanttChartHSBScroll,
		//so, here there is no need to care about it.
		if (!this.getEnableTimeScrollSync()){
			var oParameter = oEvent.getParameters();
			var aGanttCharts = this.getGanttCharts();
			var sSyncFunctionName;

			if (oParameter.reasonCode === "mouseWheelZoom"){
				sSyncFunctionName = "syncMouseWheelZoom";
			}

			if(sSyncFunctionName){
				for (var i = 0; i < aGanttCharts.length; i++){
					if (oEvent.getSource().getId() === aGanttCharts[i].getId()){
						continue;
					}

					aGanttCharts[i][sSyncFunctionName](oParameter.eventData);
				}
			}
		}
	};

	GanttChartContainer.prototype._onGanttChartTimePeriodZoomStatusChange = function(oEvent){
		var oParameter = oEvent.getParameters();
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			if (oEvent.getSource().getId() === aGanttCharts[i].getId()){
				continue;
			}

			aGanttCharts[i].syncTimePeriodZoomStatus(oParameter.isActive);
		}
	};

	GanttChartContainer.prototype._onGanttChartTimePeriodZoomOperation = function (oEvent){
		var bTimeScrollSync = this.getEnableTimeScrollSync();
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			if (oEvent.getSource().getId() === aGanttCharts[i].getId()){
				continue;
			}
			var sOrientation = this._oSplitter.getOrientation();
			aGanttCharts[i].syncTimePeriodZoomOperation(oEvent, bTimeScrollSync, sOrientation);
		}
	};

	/**
	 * check the layout size for gantt charts. This method makes sure a splitter bar has two content areas with
	 * one "auto" layout and one "non-auto" layout.
	 *
	 * @param {boolean} [bReadSPConfig] Appliy configured selection panel ratio.
	 * @param {boolean} [bReadConfig] Apply configured layout ratio to gantt charts.
	 * @private
	 */
	GanttChartContainer.prototype._adjustSplitterLayoutData = function (bReadSPConfig, bReadConfig) {

		//when change hierarchy of the container, apply selection panel size settings for each gantt chart
		if (bReadSPConfig) {
			this._setSelectionPanelLayoutByConfiguration();
		}

		var aContents = this._oSplitter.getContentAreas();
		var that = this;
		if (aContents) {
			aContents.forEach(function(oContent, index){
				if (oContent.getLayoutData()) {
					if (index % 2 == 0) {
						var iLayoutRatio = Math.floor(1 / aContents.length * 100);
						var sLayoutSize = oContent.getLayoutData().getSize();

						if (bReadConfig) {
							sLayoutSize = that.getConfiguredGanttChartLayoutSize(that.getGanttCharts()[index]);
						} else {
							sLayoutSize = iLayoutRatio + "%";
						}

						//make sure the even content area has a layout size that is not "auto"
						if (sLayoutSize == "auto" || (bReadConfig && (sLayoutSize == "100%" || aContents.length == 1))) {
							oContent.getLayoutData().setSize(iLayoutRatio + "%");
						} else {
							oContent.getLayoutData().setSize(sLayoutSize);
						}
					} else {
						if (oContent.getLayoutData().getSize() !== "auto") {
							oContent.getLayoutData().setSize("auto");
						}
					}
				}
			});
		}
	};
	GanttChartContainer.prototype.getConfiguredGanttChartLayoutSize = function (oGanttChart) {
			var oContainerLayoutConfig = this._oContainerLayoutConfigMap[this.getContainerLayoutKey()];
			var sGanttChartSize = "auto";
			if (oContainerLayoutConfig) {
				var aGanttChartLayouts = oContainerLayoutConfig.getGanttChartLayouts();
				if (aGanttChartLayouts) {
					for (var i = 0; i < aGanttChartLayouts.length; i++) {
						if (aGanttChartLayouts[i] && oGanttChart 
								&& aGanttChartLayouts[i].getHierarchyKey() === oGanttChart.getHierarchyKey()) {
							sGanttChartSize = aGanttChartLayouts[i].getGanttChartSize() ? 
									aGanttChartLayouts[i].getGanttChartSize() : sGanttChartSize;
							break;
						}
					}
				}
			}
			return sGanttChartSize;
	};

	GanttChartContainer.prototype.getConfiguredSelectionPanelLayoutSize = function () {
		var sSelectionPanelSize = "30%";
		var oContainerLayoutConfig = this._oContainerLayoutConfigMap[this.getContainerLayoutKey()];
		if (oContainerLayoutConfig) {
			var sConfiguredSelectionPanelSize = oContainerLayoutConfig.getSelectionPanelSize();
			sSelectionPanelSize = (sConfiguredSelectionPanelSize && sConfiguredSelectionPanelSize !== "auto") ? 
					sConfiguredSelectionPanelSize : sSelectionPanelSize;
		}
		return sSelectionPanelSize;
	};

	GanttChartContainer.prototype._setSelectionPanelLayoutByConfiguration = function (bReadConfig) {
		var sSelectionPanelSize = this.getConfiguredSelectionPanelLayoutSize();
		var aGanttCharts = this.getGanttCharts();
		if (aGanttCharts && sSelectionPanelSize) {
			aGanttCharts.forEach(function(oGanttChart, index){
				oGanttChart.setSelectionPanelSize(sSelectionPanelSize);
			});
		}
	};

	GanttChartContainer.prototype._removeGanttChart = function (vGanttChart) {
		var oGanttChart = vGanttChart;
		if ((typeof vGanttChart) === "number") {
			oGanttChart = this.getGanttCharts()[vGanttChart];
		}
		if (oGanttChart) {
			// remove associated container
			this._oSplitter.removeContentArea(oGanttChart._oAC);
			this._adjustSplitterLayoutData();
			this._oSplitter.triggerResize(true);
			// detach events
			oGanttChart.detachHorizontalScroll(this._onGanttChartHSBScroll, this);
			oGanttChart.detachSplitterResize(this._onViewSplitterResize, this);
			oGanttChart.detachGanttChartSwitchRequested(this._onGanttChartSwitchRequested, this);
			oGanttChart.detachChartDragEnter(this._onChartDragEnter, this);
			oGanttChart.detachChartDragLeave(this._onChartDragLeave, this);
			oGanttChart.detachShapeDragEnd(this._onShapeDragEnd, this);
			oGanttChart.detachTreeTableToggleEvent(this._onTreeTableToggle, this);
		}
	};

	GanttChartContainer.prototype.onBeforeRendering = function () {
		this._detachEvents();
		//View switch will initial global toolbar, need to reset the correct setting status to global toolbar
		this._oToolbar.setEnableTimeScrollSync(this.getEnableTimeScrollSync());
		this._oToolbar.setEnableCursorLine(this.getEnableCursorLine());
		this._oToolbar.setEnableNowLine(this.getEnableNowLine());
		this._oToolbar.setEnableVerticalLine(this.getEnableVerticalLine());

		var aGanttCharts = this.getGanttCharts();
		// Views need to respect the setting in Gantt, especially when changing
		// hierarchy layout, which triggered binding updated
		for (var i = 0; i < aGanttCharts.length; i++) {
			var oGanttChart = aGanttCharts[i];
			oGanttChart.setEnableCursorLine(this.getEnableCursorLine());
			oGanttChart.setEnableNowLine(this.getEnableNowLine());
			oGanttChart.setEnableVerticalLine(this.getEnableVerticalLine());
		}
	};

	GanttChartContainer.prototype._detachEvents = function () {};

	GanttChartContainer.prototype.onAfterRendering = function () {
		this._attachEvents();
	};

	
	GanttChartContainer.prototype._attachEvents = function () {
	};
	
	GanttChartContainer.prototype._detachToolbarEvents = function () {
		this._oToolbar.detachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.detachLayoutChange(this._onToolbarLayoutChange, this);
		this._oToolbar.detachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.detachZoomStopChange(this._onToolbarZoomStopChange, this);
		this._oToolbar.detachSettingsChange(this._onToolbarSettingsChange, this);
	};

	GanttChartContainer.prototype._onGanttChartHSBScroll = function(oEvent){
		var oParameter = oEvent.getParameters();
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++){
			if (oEvent.getSource().getId() === aGanttCharts[i].getId()){
				continue;
			}

			aGanttCharts[i].syncVisibleHorizon(new TimeHorizon({
				startTime: oParameter.startTime,
				endTime: oParameter.endTime
			}), oParameter.visibleWidth);
		}
	};

	GanttChartContainer.prototype._onViewSplitterResize = function (oEvent) {
		if (this._oSplitter.getOrientation() === Orientation.Vertical) {
			this._syncSelectionPanelSizeBetweenViews(oEvent);
		}
	};
	
	GanttChartContainer.prototype._onZoomInfoUpdated = function (oEvent) {
		var oSourceGantt = oEvent.getSource();
		var bZoomLevelChanged = oEvent.getParameter("zoomLevelChanged");

		if (bZoomLevelChanged){
			this._oToolbar.updateZoomLevel(oSourceGantt.getAxisTime().getZoomStrategy().getZoomLevel());
		}
	};

	
	GanttChartContainer.prototype._syncSelectionPanelSizeBetweenViews = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			if (oEvent.getSource().getId() === aGanttCharts[i].getId() && aGanttCharts.length > 1) {
				continue;
			}
			var selectionPanelSize = oEvent.getParameter("newSizes")[0];
			var ganttChartSize = oEvent.getParameter("newSizes")[1];
			
			if (selectionPanelSize >= 0 && (selectionPanelSize + ganttChartSize) !== 0) {
				var selectionPanelSizeInPercentage = (100 * selectionPanelSize / (selectionPanelSize + ganttChartSize)).toFixed(0);
				aGanttCharts[i].setSelectionPanelSize(selectionPanelSizeInPercentage + "%", true);
			}
		}
	};

	GanttChartContainer.prototype._onGanttChartSwitchRequested = function (oEvent) {

		oEvent.getSource().notifySourceChange();

		//this._oGanttChart.resetRowStatusMap();
		this.fireGanttChartChangeRequested({
			action: "switchGanttChart",
			hierarchyKey: oEvent.getParameter("hierarchyKey"),
			oldHierarchyKey: oEvent.getParameter("oldHierarchyKey"),
			oldMode: oEvent.getParameter("oldMode"),
			ganttChartIndex: this.getGanttCharts().indexOf(oEvent.getSource())
		});
	};
	
	GanttChartContainer.prototype._onTreeTableToggle = function (oEvent) {
		this.fireTreeTableToggleEvent({
			rowIndex: oEvent.getParameter("rowIndex"),
			rowContext: oEvent.getParameter("rowContext"),
			expanded: oEvent.getParameter("expanded")
		});
	};
	
	GanttChartContainer.prototype._onToolbarLayoutChange = function (oEvent){
		var sEventId = oEvent.getParameter("id");
		var oEventValue = oEvent.getParameter("value");
		switch (sEventId) {
			case "orientation":
				this.switchOrientation(oEventValue);
				break;
			case "add":
				this.fireGanttChartChangeRequested({
					action: "addGanttChart",
					hierarchyKey: oEventValue.hierarchyKey,
					ganttChartIndex: this.getGanttCharts().length
				});
				break;
			case "less":
				this.fireGanttChartChangeRequested({
					action: "lessGanttChart",
					hierarchyKey: oEventValue.hierarchyKey,
					ganttChartIndex: oEventValue.ganttChartIndex
				});
				break;
			default:
				break;
		}
	};

	GanttChartContainer.prototype._onToolbarSourceChange = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();
		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].notifySourceChange();
		}

		this.setContainerLayoutKey(oEvent.getParameter("id"));
		this.fireGanttChartChangeRequested({
			action: "switchContainerLayout",
			containerLayoutKey: oEvent.getParameter("id")
		});
	};

	GanttChartContainer.prototype._onToolbarExpandChartChange = function (oEvent) {
		var bExpanded = oEvent.getParameter("isExpand"),
			aChartSchemes = oEvent.getParameter("expandedChartSchemes");
		var aGanttCharts = this.getGanttCharts();

		for (var i = 0; i < aGanttCharts.length; i++) {
			aGanttCharts[i].handleExpandChartChange(bExpanded, aChartSchemes, null /**selected Indices*/);
		}

	};

	GanttChartContainer.prototype._onToolbarZoomStopChange = function (oEvent) {
		var aGanttCharts = this.getGanttCharts();

		aGanttCharts.forEach(function (oGanttChart){
			oGanttChart.getAxisTimeStrategy().updateStopInfo({
				index: oEvent.getParameter("index"),
				selectedItem: oEvent.getParameter("selectedItem")
			});
		});
	};
	
	GanttChartContainer.prototype._onChartDragEnter = function (oEvent) {
		//do the following only when the mouse is still down
		var oSourceEvent = oEvent.getParameter("originEvent");
		var oGanttChart = oEvent.getSource();
		if (oSourceEvent.button === 0 && oSourceEvent.buttons !== 0 && this._oDraggingSource !== undefined) {
			oGanttChart.setDraggingData(this._oDraggingSource);
			this._oDraggingSource = undefined;
		}else {
			this._oDraggingSource = undefined;
			oGanttChart.setDraggingData(this._oDraggingSource);
		}
	};

	GanttChartContainer.prototype._onChartDragLeave = function (oEvent) {
		var oParam = oEvent.getParameters();
		if (oParam.draggingSource !== undefined) {
			//drag out of chart
			this._oDraggingSource = oParam.draggingSource;
		}else {
			this._oDraggingSource = undefined;
		}
	};

	GanttChartContainer.prototype._onShapeDragEnd = function (oEvent) {
		this._oDraggingSource = undefined;

		// On multiple Gantt scenario, when dragging a shape from one to another, 
		// Shape selection is wrong on the source Gantt after D&D
		// So explicitly set event status to shapeDragEnd on both Gantt instances fix the issue.
		this.getGanttCharts().forEach(function(oItem){
			var oChart = oItem.getAggregation("_chart");
			// Need ensure on GanttChart instance
			if (oChart && oChart._setEventStatus) {
				oChart._setEventStatus("shapeDragEnd");
			}
		});
	};

	GanttChartContainer.prototype._onToolbarSettingsChange = function(oEvent){
		var oParameters = oEvent.getParameters();
		for (var i = 0; i < oParameters.length; i++) {
			switch (oParameters[i].id)	{
				case sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY:
					if (this.getEnableTimeScrollSync() !== oParameters[i].value) {
						this.setEnableTimeScrollSync(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY:
					if (this.getEnableCursorLine() !== oParameters[i].value) {
						this.setEnableCursorLine(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY:
					if (this.getEnableNowLine() !== oParameters[i].value) {
						this.setEnableNowLine(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY:
					if (this.getEnableVerticalLine() !== oParameters[i].value) {
						this.setEnableVerticalLine(oParameters[i].value);
					}
					break;
				case sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY:
					if (this.getEnableAdhocLine() !== oParameters[i].value) {
						this.setEnableAdhocLine(oParameters[i].value);
					}
					break;
				default:
					this.fireCustomSettingChange(oParameters[i]);
			}
		}
	};

	/**
	 * Switches the splitter orientation.
	 * 
	 * @param {string} [vOrientation] Target orientation. If not provided, this method inverts the orientation.
	 * @param {boolean} [bReadConfig] If this value is provided, it overrides the target orientation from the current configuration indicated by property <code>containerLayoutKey</code>.
	 * @returns {object} - <code>this</code>
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.switchOrientation = function (vOrientation, bReadConfig) {
		// init target orientation by switch current orientation
		var sOrientation = this._oSplitter.getOrientation() === Orientation.Horizontal ?
				Orientation.Vertical :
				Orientation.Horizontal;
		// over-write target orientation by input
		sOrientation = vOrientation ? vOrientation : sOrientation;


		if (bReadConfig) { // if bReadConfig, over-write target orientation by config 
			var sContainerLayoutKey = this.getContainerLayoutKey();
			if (this._oContainerLayoutConfigMap[sContainerLayoutKey]) {
				sOrientation = this._oContainerLayoutConfigMap[sContainerLayoutKey].getOrientation();
			}
		}
		this._oSplitter.setOrientation(sOrientation);
		this._adjustSplitterLayoutData(bReadConfig, bReadConfig);
		this._oSplitter.triggerResize(true);
		return this;
	};

	/**
	 * Returns the current effective toolbar scheme key.
	 * 
	 * @returns {string} - Toolbar scheme key.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getToolbarSchemeKey = function () {
		return this._oToolbar.getToolbarSchemeKey();
	};
	
	/**
	 * Selects in-row shapes and returns a success code.
	 * 
	 * @param {int} [iGanttChart] Index of the Gantt chart containing the shapes that you want to select
	 * @param {array} [aIds] L of the shape IDs that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected shapes are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectShapes = function(iGanttChart, aIds, isExclusive) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChart != undefined && iGanttChart < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChart];
			bRetVal = oGanttChart.selectShapes(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectShapes(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Deselects in-row shapes and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the shapes that you want to deselect
	 * @param {array} [aIds] List of the shapes that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectShapes = function(iGanttChartIndex, aIds) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < this.getGanttCharts().length) {
			oGanttChart = this.getGanttCharts()[iGanttChartIndex];
			bRetVal = oGanttChart.deselectShapes(aIds);
		}else {
			for (var iGanttChart in aGanttCharts) {
				oGanttChart = aGanttCharts[iGanttChart];
				if (oGanttChart.deselectShapes(aIds)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Selects relationships and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the relationships that you want to select
	 * @param {array} [aIds] List of the relationships that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected relationships are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRelationships = function(iGanttChartIndex, aIds, isExclusive) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRelationships(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRelationships(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Deselects relationships and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the relationships that you want to deselect
	 * @param {array} [aIds] List of the relationships that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectRelationships = function(iGanttChartIndex, aIds) {
		var aGanttCharts = this.getGanttCharts(),
			bRetVal = false,
			oGanttChart;

		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.deselectRelationships(aIds);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.deselectRelationships(aIds)) {
					bRetVal = true;
				}
			}
		}

		return bRetVal;
	};

	/**
	 * Selects rows and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows that you want to select
	 * @param {array} [aIds] List of the rows that you want to select
	 * @param {boolean} [isExclusive] Whether all other selected rows are to be deselected
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRows = function(iGanttChartIndex, aIds, isExclusive) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRows(aIds, isExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRows(aIds, isExclusive)) {
					bRetVal = true;
				}
			}
		}

		return bRetVal;
	};

	/**
	 * Deselects rows and returns a success code.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows that you want to deselect
	 * @param {array} [aIds] List of the rows that you want to deselect
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.deselectRows = function(iGanttChartIndex, aIds) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.deselectRows(aIds);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.deselectRows(aIds)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};
	
	/**
	 * Selects rows and all shapes contained in these rows.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the rows and shapes that you want to select
	 * @param {array} [aIds] Row UIDs
	 * @param {boolean} [bIsExclusive] Whether reset all other selected rows and shapes are to be reset
	 * @returns {boolean} - If any selection change is applied, returns true.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.selectRowsAndShapes = function(iGanttChartIndex, aIds, bIsExclusive) {
		var bRetVal = false,
			aGanttCharts = this.getGanttCharts(),
			oGanttChart;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			bRetVal = oGanttChart.selectRowsAndShapes(aIds, bIsExclusive);
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				if (oGanttChart.selectRowsAndShapes(aIds, bIsExclusive)) {
					bRetVal = true;
				}
			}
		}
		return bRetVal;
	};

	/**
	 * Gets the selected in-row shapes.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected shapes that you want to get
	 * @return {array} Returns all selected shapes in the chart
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedShapes = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart,
			oSelectedShapes;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			oSelectedShapes = oGanttChart.getSelectedShapes();
			if (oSelectedShapes !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedShapes": oSelectedShapes});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				oSelectedShapes = oGanttChart.getSelectedShapes();
				if (oSelectedShapes !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedShapes": oSelectedShapes});
				}
			}
		}
		
		return aRetVal;
	};

	/**
	 * Gets the selected rows.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected rows that you want to get
	 * @return {array} Returns all selected rows
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedRows = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, aRows;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			aRows = oGanttChart.getSelectedRows();
			if (aRows !== undefined && aRows.length > 0) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedRows": aRows});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				aRows = oGanttChart.getSelectedRows();
				if (aRows !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedRows": aRows});
				}
			}
		}
		
		return aRetVal;
	};
	
	/**
	 * Gets the selected relationships.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing the selected relationships that you want to get
	 * @return {array} Returns all selected relationships in the chart
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getSelectedRelationships = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, aRelationships;

		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			aRelationships = oGanttChart.getSelectedRelationships();
			if (aRelationships !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "selectedRelationships": aRelationships});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				aRelationships = oGanttChart.getSelectedRelationships();
				if (aRelationships !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "selectedRelationships": aRelationships});
				}
			}
		}
		
		return aRetVal;
	};
	
	/**
	 * Gets all selected rows and shapes, including relationships.
	 * 
	 * @param {int} [iGanttChartIndex] Index of the Gantt chart containing that you want to get
	 * @return {object} The returned object contains "rows" for all selected rows, "shapes" for all selected shapes, and "relationships" for all selected relationships
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	GanttChartContainer.prototype.getAllSelections = function(iGanttChartIndex) {
		var aRetVal = [],
			aGanttCharts = this.getGanttCharts(),
			oGanttChart, oSelections;
		
		if (iGanttChartIndex != undefined && iGanttChartIndex < aGanttCharts.length) {
			oGanttChart = aGanttCharts[iGanttChartIndex];
			oSelections = oGanttChart.getAllSelections();
			if (oSelections !== undefined) {
				aRetVal.push({"ganttChartIndex": iGanttChartIndex, "allSelection": oSelections});
			}
		}else {
			for (var i = 0; i < aGanttCharts.length; i++) {
				oGanttChart = aGanttCharts[i];
				oSelections = oGanttChart.getAllSelections();
				if (oSelections !== undefined) {
					aRetVal.push({"ganttChartIndex": i, "allSelection": oSelections});
				}
			}
		}
		
		return aRetVal;
	};

	GanttChartContainer.prototype.exit = function () {
		this._detachEvents();
		this._oToolbar.destroy();
		this._oSplitter.destroy();
	};

	["addCustomToolbarItem", "insertCustomToolbarItem", "removeCustomToolbarItem", "indexOfCustomToolbarItem", "removeAllCustomToolbarItems", "destroyCustomToolbarItems", "getCustomToolbarItems"]
	.forEach(function (sMethod) {
		GanttChartContainer.prototype[sMethod] = function () {
			return this._oToolbar[sMethod].apply(this._oToolbar, arguments);
		};
	});
	return GanttChartContainer;
}, true);

}; // end of sap/gantt/GanttChartContainer.js
if ( !jQuery.sap.isDeclared('sap.gantt.axistime.FullScreenStrategy') ) {
sap.gantt.axistime.FullScreenTimeLineOptions = sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY;

jQuery.sap.declare('sap.gantt.axistime.FullScreenStrategy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/axistime/FullScreenStrategy",[
	"./AxisTimeStrategyBase","sap/gantt/misc/Utility", "sap/gantt/misc/Format", "sap/ui/core/Locale", "sap/ui/core/Core",
	"sap/gantt/config/TimeHorizon", "sap/gantt/misc/AxisTime"
], function (AxisTimeStrategyBase, Utility, Format, Locale, Core, TimeHorizon, AxisTime) {
	"use strict";

	/**
	 * Creates and initializes a FullScreenStrategy.
	 *
	 * @param {string} [sId] ID for the new AxisTimeStrategy, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new AxisTimeStrategy
	 *
	 * @class
	 * FullScreenStrategy
	 *
	 * <p>
	 * A zoom strategy that sets the value of <code>totalHorizon</code> to the value of <code>visibleHorizon</code>.
	 * When this strategy is implemented, <code>visibleHorizon</code> is fixed. Because of this, when you scroll the
	 * splitter to expand or shrink the chart area, the value of <code>visibleHorizon</code> remains intact, which makes
	 * shapes look larger or smaller accordingly. Moreover, the horizontal scroll bar never appears and the zoom control
	 * is deactivated.
	 * </p>
	 *
	 * @extends sap.gantt.axistime.AxisTimeStrategyBase
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.axistime.FullScreenStrategy
	 */
	var FullScreenStrategy = AxisTimeStrategyBase.extend("sap.gantt.axistime.FullScreenStrategy");

	FullScreenStrategy.prototype.init = function () {
		this.setProperty("totalHorizon", sap.gantt.config.DEFAULT_PLAN_HORIZON, true);
		this.setProperty("visibleHorizon", sap.gantt.config.DEFAULT_PLAN_HORIZON, true);
		this.setProperty("coarsestTimeLineOption", sap.gantt.axistime.FullScreenTimeLineOptions["1month"], true);
		this.setProperty("finestTimeLineOption", sap.gantt.axistime.FullScreenTimeLineOptions["5min"], true);
		this.setProperty("timeLineOptions", sap.gantt.axistime.FullScreenTimeLineOptions, true);
		this.setProperty("timeLineOption", sap.gantt.axistime.FullScreenTimeLineOptions["4day"], true);
		this.setProperty("zoomLevel", 0, true);
		this.setProperty("zoomLevels", 0, true);
		this.setProperty("mouseWheelZoomType", sap.gantt.MouseWheelZoomType.None, true);
	};

	/**
	 * Do not allow to enable time period zoom, because this kind of zoom strategy does not support any type of zoom
	 * @override
	 */
	FullScreenStrategy.prototype.isTimePeriodZoomEnabled = function () {
		return false;
	};

	/**
	 * Do not allow to set zoom type, because this kind of zoom strategy does not support any type of zoom
	 * @param {sap.gantt.MouseWheelZoomType} sMouseWheelZoomType zoom type to be set
	 * @return {object} the FullScreenStrategy instance itself
	 * @override
	 */
	FullScreenStrategy.prototype.setMouseWheelZoomType = function (sMouseWheelZoomType) {
		jQuery.sap.log.warning("FullScreenStrategy does not support zoom, its zoom type is None and can not be set",
				null,
				"FullScreenStrategy.prototype.setMouseWheelZoomType()");
		return this;
	};

	FullScreenStrategy.prototype.setVisibleHorizon = function (oVisibleHorizon) {
		//redraw will call syncContent(), in there rate will be updated
		this.setTotalHorizon(oVisibleHorizon);
		AxisTimeStrategyBase.prototype.setVisibleHorizon.apply(this, arguments);
		this.fireRedrawRequest(true, "visibleHorizonUpdated");
		return this;
	};

	FullScreenStrategy.prototype.syncContext = function (nClientWidth) {
		var bAxisTimeNeedChange = false;

		var oRetVal = {
			zoomLevelChanged : false,
			axisTimeChanged : false
		};

		var fSuitableRate = this._calSuitableRateByChartWidth(nClientWidth);

		if (fSuitableRate !== undefined) {
			var fLastRate = this._oZoom.rate || -1;

			this._oZoom.rate = fSuitableRate;
			this.getAxisTime().setZoomRate(this._oZoom.rate);
			this._adjustRateByBoundary();

			bAxisTimeNeedChange = !Utility.floatEqual(fLastRate, this._oZoom.rate);
			if (bAxisTimeNeedChange) {
				oRetVal.axisTimeChanged = true;
			}
		}

		this._updateTimeLineOption();
		return oRetVal;
	};

	FullScreenStrategy.prototype._adjustRateByBoundary = function () {
		this._oZoom.rate = Math.max(this._oZoom.rate, this._oZoom.minRate);
		this._oZoom.rate = Math.min(this._oZoom.rate, this._oZoom.maxRate);
	};

	FullScreenStrategy.prototype._calSuitableRateByChartWidth = function (nClientWidth) {
		var oInitHorizon = this.getVisibleHorizon(),
			fSuitableRate;

		// calculate suitable zoom rate by init horizon against svg container width
		if (oInitHorizon && oInitHorizon.getStartTime() && oInitHorizon.getEndTime()) {
			var fSuitableScale = this.calZoomScaleByDate(
				Format.abapTimestampToDate(oInitHorizon.getStartTime()),
				Format.abapTimestampToDate(oInitHorizon.getEndTime()),
				nClientWidth);
			fSuitableRate = this._oZoom.base.scale / fSuitableScale;
		}

		return fSuitableRate;
	};

	FullScreenStrategy.prototype._updateTimeLineOption = function(){
		var startTime = Format.getTimeStampFormatter().parse("20000101000000"),
		iCurrentTickKey, 
		i,
		oTimeLineOptions = this.getTimeLineOptions(),
		oTimeLineOption = this.getProperty("timeLineOption");

		var oAxisTime = this.getAxisTime();
		if (oAxisTime) {
			var start = oAxisTime.timeToView(startTime);

			for (i in oTimeLineOptions) {
				var interval = oTimeLineOptions[i].innerInterval;
				var end = oAxisTime.timeToView(jQuery.sap.getObject(interval.unit).offset(startTime, interval.span));
				var r = Math.abs(Math.ceil((end - start)));
				if (r >= interval.range) {
					iCurrentTickKey = i;
					break;
				}
			}
			oTimeLineOption = iCurrentTickKey ? oTimeLineOptions[iCurrentTickKey] : oTimeLineOptions[i];
			this.setProperty("timeLineOption", oTimeLineOption, true);
		}
	};

	return FullScreenStrategy;
}, true);
}; // end of sap/gantt/axistime/FullScreenStrategy.js
if ( !jQuery.sap.isDeclared('sap.gantt.eventHandler.ShapeResizeHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.eventHandler.ShapeResizeHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
sap.ui.define("sap/gantt/eventHandler/ShapeResizeHandler",[
	"jquery.sap.global", "sap/ui/Device", "sap/ui/base/Object", "sap/gantt/misc/ShapeManager", 
	"sap/gantt/misc/Format", "sap/ui/core/Core", "sap/gantt/misc/Utility", "sap/gantt/drawer/ShapeInRow"
], function (jQuery, Device, BaseObject, ShapeManager, Format, Core, Utility, ShapeInRowDrawer) {
	"use strict";
	/**
	 * Constructor for a new ShapeResizeHandler
	 *
	 * Initializes the handler and reserves the caller of this handler as the '_oSourceChart'. 
	 * '_oSourceChart' can either be an instance of GanttChart or an instance of GanttChartWithTable.
	 * @param {object} oChart An instance of the caller
	 * 
	 * @class
	 * Defines the properties required for the initialization of shape resizing
	 * @extends sap.ui.base.Object
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @private
	 * @alias sap.gantt.eventHandler.ShapeResizeHandler
	 */
	var ShapeResizeHandler = BaseObject.extend("sap.gantt.eventHandler.ShapeResizeHandler", {
		constructor : function (oChart) {
			BaseObject.call(this);
			this._oSourceChart = oChart;
			this._bResizing = false;
			this._oResizingData = undefined;
			this._oShapeManager = oChart._oShapeManager;
			this._oSourceChartId = this._oSourceChart.getId();
			this._oShapeInRowDrawer = new ShapeInRowDrawer();
			/*The threshold to show the resize cursor.
			  If the distance between the hover position in the shape and the any side of the shape is less than this threshold,the resize cursor appears.
			  The default value is 15 pixels.*/
			this._DEFAULT_RESIZE_CURSOR_SHOWING_THRESHOLD = 15;
			//Defines the minimum mouse moving distance that triggers the shape resize process, which defaults to 3 pixels.
			this._DEFAULT_MOUSE_MOVE_PIXEL = 3;
			//Identifies the configured shape start time
			this._TIMESTAMP_START_TIME_KEY = "time";
			//Identifies the configured shape end time
			this._TIMESTAMP_END_TIME_KEY = "endTime";
		}
	});
	
	/**
	 * Getter for the resizing behavior
	 * @param {boolean} Indicates whether or not the resize process occurs
	 */
	ShapeResizeHandler.prototype.getIsResizing = function () {
		return this._bResizing;
	};
	
	/**
	 * Getter for the resizing data
	 * @param {object} Get resizing related data
	 */
	ShapeResizeHandler.prototype.getResizingData = function () {
		return this._oResizingData;
	};
	

	/**
	 * Invoke shape resize
	 * @param {object} oEvent JQuery event object
	 */
	ShapeResizeHandler.prototype.handleShapeResize = function (oEvent) {
		if (oEvent.button === 0) {
			var oShapeData = d3.select(oEvent.target).datum();
			if (oEvent.target.getAttribute("class") && oShapeData) {
				var sClassId = oEvent.target.getAttribute("class").split(" ")[0];
				if (d3.select(oEvent.target).classed("sapUiShapeResizingCursor") 
						&& this._oShapeManager.isShapeResizable(oShapeData, sClassId)
						&& this._oShapeManager.isShapeDuration(oShapeData, sClassId)) {
					this._handleShapeResizeStart(oEvent);
					this._preventBubbleAndDefault(oEvent);
				}
			}
		}
	};
	
	ShapeResizeHandler.prototype._handleShapeResizeStart = function (oEvent) {
		var aSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		//if mouse down on a shape that is resizable
		var shapeData = d3.select(oEvent.target).datum();
		if (shapeData) {
			var rowInfo = Utility.getRowDatumByShapeUid(shapeData.uid, this._oSourceChart.getId());
			if (rowInfo) {
				//+y info
				rowInfo.y = this._oSourceChart._oAxisOrdinal.elementToView(rowInfo.uid);
				//get current position of the mouse
				var x = oEvent.pageX - aSvg.offset().left || oEvent.offsetX;
				//var topShapeInstance = this._oShapeManager.getShapeInstance(shapeData, oEvent.target.getAttribute("class").split(" ")[0]);
				var topShapeInstance = this._getTopShapeInstance(shapeData, oEvent.target.getAttribute("class").split(" ")[0]);
				var startTime, endTime;
				if (topShapeInstance) {
					if (Core.getConfiguration().getRTL() === true) {
						startTime = topShapeInstance.getEndTime(shapeData);
						endTime = topShapeInstance.getTime(shapeData);
					} else {
						startTime = topShapeInstance.getTime(shapeData);
						endTime = topShapeInstance.getEndTime(shapeData);
					}
				}
				var oShapeData = {
						"shapeData": shapeData,
						"objectInfoRef": rowInfo
				};
				this._oResizingData = {
						"oShapeData": oShapeData,
						"aOldTime": [startTime, endTime],
						"resizeStartPointX": x,
						"topShapeInstance": topShapeInstance
				};
				jQuery(document.body).unbind("mousemove.shapeResizing");
				jQuery(document.body).unbind("mouseup.shapeResizing");
				jQuery(document.body).bind("mousemove.shapeResizing", this._handleShapeResizing.bind(this));
				jQuery(document.body).bind("mouseup.shapeResizing", this._handleShapeResizeEnd.bind(this));
			}	
		}
	};
	
	ShapeResizeHandler.prototype.checkShapeResizable = function (oShapeData, sTarget, sPointX) {
		if (oShapeData && sTarget && sPointX) {
			jQuery(sTarget).removeClass("sapUiShapeResizingCursor");
			var sClassId = sTarget.getAttribute("class") ? 
					sTarget.getAttribute("class").split(" ")[0] : undefined;
			//prevent pass special class like "sapGanttExpandChartCntBG", "sapGanttChartAdhocTimestamp"	
			if (sClassId.indexOf("__") < 0) {
				return;
			} 		
			if (this._oShapeManager.isShapeResizable(oShapeData, sClassId)) {
				var hoverPointDistance, shapeStartX, shapeEndX;
				var oShapeInstance = this._getShapeInstance(oShapeData, sClassId);
				
				if (oShapeInstance) {
					var oStartTime = oShapeInstance.getTime(oShapeData);
					var oEndTime = oShapeInstance.getEndTime(oShapeData);
					
					shapeStartX = this._oSourceChart.getAxisTime().timeToView(Format.abapTimestampToDate(oStartTime));
					shapeEndX = this._oSourceChart.getAxisTime().timeToView(Format.abapTimestampToDate(oEndTime));
					
					hoverPointDistance = Math.abs(shapeEndX - sPointX) < Math.abs(shapeStartX - sPointX) 
											? Math.abs(shapeEndX - sPointX) :  Math.abs(shapeStartX - sPointX);
				}
				//if the distance between hover position in the shape and the any side of the shape is less than 15 pixel, show the cursor
				if (hoverPointDistance <= this._DEFAULT_RESIZE_CURSOR_SHOWING_THRESHOLD) { 
					jQuery(sTarget).addClass("sapUiShapeResizingCursor");
				} else {
					jQuery(sTarget).removeClass("sapUiShapeResizingCursor");
				}
			}
		}		
	};
	
	ShapeResizeHandler.prototype._preventBubbleAndDefault = function (oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};
	
	ShapeResizeHandler.prototype._handleShapeResizing = function (oEvent) {
		if (!Device.support.touch && (oEvent.button !== 0 || oEvent.buttons === 0 || oEvent.ctrlKey)) {
			return false;
		}
		var aSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		var dx = Math.abs((oEvent.pageX - aSvg.offset().left || oEvent.offsetX) - this._oResizingData.resizeStartPointX);
		//if the mouse moving distance is greater than 3 pixels, resizing can be easily to identify
		if (dx > this._DEFAULT_MOUSE_MOVE_PIXEL) {
			if (this._oResizingData !== undefined) {
				this._updateResizingShapeData(oEvent);
				this._bResizing = true;
				//trigger auto-scrolling when resizing
				this._oSourceChart._oAutoScrollHandler.autoScroll(this._oSourceChart, oEvent);
			}
		}
	};
	
	ShapeResizeHandler.prototype._updateResizingShapeData = function (oEvent) {
		var aSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		var currentX = oEvent.pageX - aSvg.offset().left || oEvent.offsetX;
		var aResizedNewTime = this._calculateResizedNewTime(currentX);
		this._drawResizingShadow(aResizedNewTime);
	};
	
	ShapeResizeHandler.prototype._parseShapeTimeProperty = function (oShapeInstance, sAttrName) {
		var sPropertyValue;
		if (oShapeInstance.mShapeConfig.hasShapeProperty(sAttrName)) {
			var sConfigAttr = oShapeInstance.mShapeConfig.getShapeProperty(sAttrName);
			if (typeof sConfigAttr === "string" 
				&& sConfigAttr.charAt(0) === "{" 
					&& sConfigAttr.charAt(sConfigAttr.length - 1) === "}") {
				sPropertyValue = sConfigAttr.substring(1, sConfigAttr.length - 1);
			}
		} 
		return sPropertyValue;
	};
	
	ShapeResizeHandler.prototype._drawResizingShadow = function (oResizedNewTime) {
		var aSvg = d3.select(this._oSourceChart.getDomSelectorById("svg"));
		if (oResizedNewTime) {
			//clone data
			var clonedShapeData = jQuery.extend(true, {}, this._oResizingData.oShapeData.shapeData);
			var oShadowShape = this._oResizingData.topShapeInstance.getAggregation("resizeShadowShape");
			
			var oConfigTime = this._parseShapeTimeProperty(oShadowShape, this._TIMESTAMP_START_TIME_KEY);
			var oConfigEndTime = this._parseShapeTimeProperty(oShadowShape, this._TIMESTAMP_END_TIME_KEY);
			
			var sNewStartTime, sNewEndTime;
			if (Core.getConfiguration().getRTL() === true) {
				sNewStartTime = oResizedNewTime[1];
				sNewEndTime = oResizedNewTime[0];
			} else {
				sNewStartTime = oResizedNewTime[0];
				sNewEndTime = oResizedNewTime[1];
			}
			if (clonedShapeData[oConfigTime]) {
				clonedShapeData[oConfigTime] = sNewStartTime;
			}
			if (clonedShapeData[oConfigEndTime]) {
				clonedShapeData[oConfigEndTime] = sNewEndTime;
			}
			var sBaseDataSet = {
					"objectInfoRef" : this._oResizingData.oShapeData.objectInfoRef
			};
			sBaseDataSet.shapeData = clonedShapeData;
			//draw shadow through shapeInRow drawer
			oShadowShape.dataSet = [sBaseDataSet];
			this._oShapeInRowDrawer.drawResizeShadow(aSvg, oShadowShape,
					this._oSourceChart.getAxisTime(), this._oSourceChart._oAxisOrdinal, this._oSourceChart._oStatusSet);		
		}
	};
	
	ShapeResizeHandler.prototype._calculateResizedNewTime = function (oCurrentX) {
		var aResizedNewTime = [];
		var aNewStartTime, aNewEndTime;
		
		var oldStartTime = this._oResizingData.aOldTime[0];
		var oldEndTime = this._oResizingData.aOldTime[1];
		
		var oldStartTimeX = this._oSourceChart.getAxisTime().timeToView(Format.abapTimestampToDate(oldStartTime));
		var oldEndTimeX = this._oSourceChart.getAxisTime().timeToView(Format.abapTimestampToDate(oldEndTime));
		
		var isLeftSideClick = undefined;
		if (this._oResizingData.isLeftSideClick !== undefined 
				&& this._oResizingData.isLeftSideClick !== null) {
			isLeftSideClick = this._oResizingData.isLeftSideClick;
		} else {
			isLeftSideClick = Math.abs(this._oResizingData.resizeStartPointX - oldStartTimeX) < Math.abs(this._oResizingData.resizeStartPointX - oldEndTimeX) ? true : false;
			this._oResizingData.isLeftSideClick = isLeftSideClick;
		}
		if (isLeftSideClick) {//click shape start point to reduce or increase shape
			aNewEndTime = oldEndTime;
			//if resize the shape left start point to move to exceed the right end point of the shape, 
			//set the start x coordinate value as the one of end x
			if (oCurrentX >= oldEndTimeX) {
				aNewStartTime = oldEndTime;//this._oResizingData.originalShapeData.shapeData.endTime;
			} else {
				aNewStartTime = Format.dateToAbapTimestamp(this._oSourceChart.getAxisTime().viewToTime(oCurrentX));
			}
			
		} else {//click shape end point to reduce or increase shape
			aNewStartTime = oldStartTime;
			//if resize the shape right end point to move to exceed the left start point of the shape, 
			//set the end x coordinate value as the one of start x
			if (oCurrentX <= oldStartTimeX) {
				aNewEndTime = oldStartTime;//this._oResizingData.originalShapeData.shapeData.startTime;
			} else {
				aNewEndTime = Format.dateToAbapTimestamp(this._oSourceChart.getAxisTime().viewToTime(oCurrentX));
			}
		}
		aResizedNewTime = [aNewStartTime, aNewEndTime];
		return aResizedNewTime;
	};
	
	ShapeResizeHandler.prototype._getShapeInstance = function (oShapeData, sClassId) {
		var mShapeInstance = this._oShapeManager.getShapeInstance(oShapeData, sClassId);
		if (mShapeInstance) {
			if (mShapeInstance.getId() === sClassId) {
				return mShapeInstance;
			} else if (mShapeInstance.getShapes()) {
				var shapes = mShapeInstance.getShapes();
				for (var i = 0; i < shapes.length; i++) {
					if (shapes[i].getId() === sClassId) {
						return shapes[i];
					}
				}
			}
		} else { //fix the issue of 0 duration shape can't be resized, here using selected shapeId to get the top shape
			var oTopShapeInstance = Core.byId(sClassId).getParent();
			if (oTopShapeInstance) {
				return oTopShapeInstance;
			}
		}
		return undefined;
	};
	
	ShapeResizeHandler.prototype._getTopShapeInstance = function (oShapeData, sClassId) {
		var mShapeInstance = this._oShapeManager.getShapeInstance(oShapeData, sClassId);
		if (mShapeInstance) {
			return mShapeInstance;
		} else { //fix the issue of 0 duration shape can't be resized, here using selected shapeId to get the top shape
			var oTopShapeInstance = Core.byId(sClassId).getParent();
			if (oTopShapeInstance) {
				return oTopShapeInstance;
			}
		}
		return undefined;
	};
	
	ShapeResizeHandler.prototype._handleShapeResizeEnd = function (oEvent) {
		this._oSourceChart._oAutoScrollHandler.stop();
		var resizeShadowG = d3.selectAll(".resizingShadow");
		if (!resizeShadowG.empty()){
			resizeShadowG.remove();
		}
		if (this._bResizing && this._oResizingData !== undefined) {
			this._collectResizingShapeData(oEvent);
			this._oSourceChart.fireShapeResizeEnd({
				shapeUid: this._oResizingData.oShapeData.shapeData.uid,
				rowObject: this._oResizingData.oShapeData.objectInfoRef,
				oldTime: this._oResizingData.aOldTime,
				newTime: this._oResizingData.aNewTime
			});
		}
		jQuery(document.body).unbind("mousemove.shapeResizing");
		jQuery(document.body).unbind("mouseup.shapeResizing");
		jQuery(oEvent.target).removeClass("sapUiShapeResizingCursor");
		
		this._bResizing = false;
		this._oResizingData = undefined;
	};
	
	ShapeResizeHandler.prototype._collectResizingShapeData = function (oEvent) {
		var aSvg = jQuery(this._oSourceChart.getDomSelectorById("svg"));
		var oCurrentX = oEvent.pageX - aSvg.offset().left || oEvent.offsetX;
		var resizedShapeData = this._calculateResizedNewTime(oCurrentX);
		var sNewStartTime, sNewEndTime;
		if (Core.getConfiguration().getRTL() === true) {
			sNewStartTime = resizedShapeData[1];
			sNewEndTime = resizedShapeData[0];
		} else {
			sNewStartTime = resizedShapeData[0];
			sNewEndTime = resizedShapeData[1];
		}
		this._oResizingData.aNewTime = [sNewStartTime, sNewEndTime];
	};


	return ShapeResizeHandler;
}, true);

}; // end of sap/gantt/eventHandler/ShapeResizeHandler.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.LegendBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.LegendBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/LegendBase",[
	"sap/ui/core/Control", "sap/gantt/shape/cal/Calendar", "sap/gantt/misc/Utility", "sap/gantt/misc/Format", "../misc/AxisTime"
], function (Control, Calendar, Utility, Format, AxisTime) {
	"use strict";

	/**
	 * Creates and initializes a new Legend class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Base class for all legend template.
	 * 
	 * <p>This base class defines basic properties for legend templates.
	 * sap.gantt provides two basic implementations of <code>LegendBase</code>:
	 * <ul>
	 * 		<li><code>sap.gantt.legend.ListLegend</code> - A list legend template defines the representation of a list of legend 
	 * items and their corresponding meanings</li>
	 * 		<li><code>sap.gantt.legend.DimensionLegend</code> - A dimension legend template defines the representation (shape, 
	 * pattern, and color) of individual legend items and their corresponding meanings in both dimensions</li>
	 * </ul>
	 * </p>
	 * 
	 * @extends sap.ui.core.Control
	 * @abstract
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.legend.LegendBase
	 */
	var LegendBase = Control.extend("sap.gantt.legend.LegendBase",/** @lends sap.gantt.legend.LegendBase.prototype */ {
		metadata: {
			abstract: true,
			properties: {
				/**
				 * SVG reusable element definitions.
				 * 
				 * If this property is provided, the paint server definition of SVG is rendered. Method <code>getDefString()</code> should be
				 * implemented by all paint server classes that are passed to this property.
				 */
				svgDefs: {type: "sap.gantt.def.SvgDefs", defaultValue: null},

				/**
				 * Width of a legend item.
				 */
				legendWidth: {type: "float", defaultValue: 32}, // width in pixels in compact mode

				/**
				 * Height of a legend item.
				 */
				legendHeight: {type: "float", defaultValue: 32}, // height in pixels in compact mode

				/**
				 * Font size of legend item texts.
				 */
				fontSize: {type: "int", defaultValue: 16} // font size for legend text
			}
		}
	});

	// timestamp to create a fake axistime.
	LegendBase.prototype.TIME_RANGE = ["20160101000000", "20160103000000"];
	// middle timestamp of the time axis.
	LegendBase.prototype.TIME = "20160102000000";

	LegendBase.prototype.init = function () {
		this._aTimeRange = [Format.getTimeStampFormatter().parse(this.TIME_RANGE[0]),
			Format.getTimeStampFormatter().parse(this.TIME_RANGE[1])];
	};


	LegendBase.prototype.getAxisTime = function () {
		return this._oAxisTime;
	};

	LegendBase.prototype.onBeforeRendering = function () {
		this._sUiSizeMode = Utility.findSapUiSizeClass();
		this._aViewRange = [0, this.getScaledLegendWidth()];
		this._oAxisTime = new AxisTime(this._aTimeRange, this._aViewRange);
	};

	/**
	 * Gets the legend item width according to the SAP UI size class.
	 * 
	 * @return {string} Value of the legend item width.
	 * @public
	 */
	LegendBase.prototype.getScaledLegendWidth = function () {
		var sMode = this.getSapUiSizeClass();
		return Utility.scaleBySapUiSize(sMode, this.getLegendWidth());
	};

	/**
	 * Gets the legend item height according to the SAP UI size class.
	 * 
	 * @return {string} Value of the legend item height.
	 * @public
	 */
	LegendBase.prototype.getScaledLegendHeight = function () {
		var sMode = this.getSapUiSizeClass();
		return Utility.scaleBySapUiSize(sMode, this.getLegendHeight());
	};

	LegendBase.prototype._instantShape = function (aShapes) {
		var aRetVal = [];
		// parse shape instances
		for (var i = 0; i < aShapes.length; i++) {
			if (aShapes[i].getShapeClassName()) {
				// create shape instance
				var oShapeInst = this._instantiateCustomerClass(aShapes[i].getShapeClassName(), i, aShapes[i]);

				if (aShapes[i].getClippathAggregation() && aShapes[i].getClippathAggregation() instanceof Array) {
					// create aggregation classes for clip-path
					var aPath = this._instantShape(aShapes[i].getClippathAggregation());
					for (var j = 0; j < aPath.length; j++) {
						oShapeInst.addPath(aPath[j]);
					}
				} else if (aShapes[i].getGroupAggregation() && aShapes[i].getGroupAggregation() instanceof Array) {
					// create aggregation classes for group
					var aAggregation = this._instantShape(aShapes[i].getGroupAggregation());
					for (var k = 0; k < aAggregation.length; k++) {
						oShapeInst.addShape(aAggregation[k]);
					}
				}

				if (this._isProperShape(oShapeInst)) {
					aRetVal.push(oShapeInst);
				}
			}
		}

		return aRetVal;
	};

	LegendBase.prototype._isProperShape = function (oShapeInst) {
		if (oShapeInst instanceof sap.gantt.shape.cal.Calendar) {
			jQuery.sap.log.warning("Calendar is not proper shape", "key '" + oShapeInst.mShapeConfig.getKey() + "'", "ListLegend");
			return false;
		} else if (oShapeInst.getTag() == "clippath") {
			return false;
		} else {
			return true;
		}
	};

	LegendBase.prototype._instantiateCustomerClass = function (sCustomerClassName, sShapeId, oShapeConfig) {
		var CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		if (!CustomerClass) {
			jQuery.sap.require(sCustomerClassName);
			CustomerClass = jQuery.sap.getObject(sCustomerClassName);
		}
		
		var oCustomerClassInstance = new CustomerClass();

		oCustomerClassInstance.mShapeConfig = oShapeConfig;
		oCustomerClassInstance.mChartInstance = this;

		return oCustomerClassInstance;
	};

	/**
	 * Gets the value of the SAP UI size class.
	 * 
	 * @return {string} Value of the SAP UI size class.
	 * @public
	 */
	LegendBase.prototype.getSapUiSizeClass = function () {
		return this._sUiSizeMode;
	};
	return LegendBase;
}, true);

}; // end of sap/gantt/legend/LegendBase.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.ListLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
/**
 * CheckBox Value of ListLegend Item.
 *
 * @enum {string}
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.gantt.legend = sap.gantt.legend || {};
sap.gantt.legend.ListLegendItemCheckbox = {
	/**
	 * The list legend item has no checkbox.
	 * @public
	 */
	NoShow : "noShow",

	/**
	 * The list legend item has a checked checkbox.
	 * @public
	 */
	Checked : "checked",

	/**
	 * The list legend item has a unchecked checkbox.
	 * @public
	 */
	Unchecked : "unchecked"
};

jQuery.sap.declare('sap.gantt.legend.ListLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/ListLegend",[
	"./LegendBase", "sap/m/CheckBox", "sap/gantt/drawer/Legend"
], function (LegendBase, CheckBox, LegendDrawer) {
	"use strict";

	/**
	 * Creates and initializes a new List Legend class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * List Legend is a legend template that contains a list of shapes. You can use this class to define a list legend.
	 * 
	 * @extends sap.gantt.legend.LegendBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.legend.ListLegend
	 */
	var ListLegend = LegendBase.extend("sap.gantt.legend.ListLegend",/** @lends sap.gantt.legend.ListLegend.prototype */ {
		metadata: {
			properties: {
				/**
				 * Shapes for legend items. These shapes are used in the Gantt chart.
				 */
				shapes: {type: "sap.gantt.config.Shape[]"}
			},
			events: {
				/**
				 * Event fired when the check box of a certain legend item is selected.
				 */
				checkBoxChange: {
					parameters: {
						/**
						 * The shape that is checked or unchecked.
						 */
						legendType: {type: "string"},

						/**
						 * The value of the check box.
						 */
						value: {type: "boolean"}
					}
				}
			}
		}
	});

	ListLegend.prototype.init = function () {
		LegendBase.prototype.init.apply(this, arguments);
		this._oListLegendDrawer = new LegendDrawer();
		this._aCheckBoxes = [];
	};

	ListLegend.prototype.onAfterRendering = function () {
		for (var i = 0; i < this._aShapeInstance.length; i++) {
			var oShape = this._aShapeInstance[i];
			var aSvg = d3.select("#" + this.getId() + "-svg-" + i);
			var aShape = aSvg.selectAll("." + oShape.getId())
							.data([i]);
			this._oListLegendDrawer._drawPerTag(aShape, oShape);
		}
	};
	

	ListLegend.prototype.setShapes = function (aShapes) {
		this.setProperty("shapes", aShapes);
		if (aShapes && aShapes.length > 0) {
			this._aShapeInstance = this._instantShape(aShapes);
			this._aCheckBoxes = [];
			var bHasCheckBox = false;

			for (var i = 0; i < this._aShapeInstance.length; i++) {
				var sSwitchOfCheckBox = this._aShapeInstance[i].mShapeConfig.getSwitchOfCheckBox();
				if (sSwitchOfCheckBox == sap.gantt.legend.ListLegendItemCheckbox.Checked || sSwitchOfCheckBox == sap.gantt.legend.ListLegendItemCheckbox.Unchecked) {
					bHasCheckBox = true;
					break;
				}
			}

			if (bHasCheckBox) {
				for (var j = 0; j < this._aShapeInstance.length; j++) {
					var oShape = this._aShapeInstance[j];
					var sCheckBoxValue = oShape.mShapeConfig.getSwitchOfCheckBox();

					var oCheckBox = new CheckBox({
						selected: (sCheckBoxValue == sap.gantt.legend.ListLegendItemCheckbox.Checked) ? true : false,
						enabled: (sCheckBoxValue == sap.gantt.legend.ListLegendItemCheckbox.NoShow) ? false : true
					})
					.data("key", (oShape.mShapeConfig.getKey && oShape.mShapeConfig.getKey()) ? oShape.mShapeConfig.getKey()
								: oShape.getLegend())
					.setTooltip(oShape.getLegend())
					.attachSelect(this._onCheckBoxChange, this);
					this._aCheckBoxes.push(oCheckBox);
				}
			}
		}
		return this;
	};

	ListLegend.prototype._onCheckBoxChange = function(oEvent) {
		var oSource = oEvent.getSource();
		this.fireCheckBoxChange({legendType: oSource.data("key"), value: oEvent.getParameter("selected")});
	};

	return ListLegend;
}, true);

}; // end of sap/gantt/legend/ListLegend.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ubc/UbcOverCapacityZonePolygon",[
	"sap/gantt/misc/Utility", "sap/gantt/shape/ext/ubc/UbcPolygon"
], function(Utility, UbcPolygon){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to represent the background of an over capacity zone.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUbc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx2" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#9E1F63" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 65 h 280 v 90 h -280 z" class="dashside" />
	 * 	<polygon points="10,65 290,65 290,155 10,155" fill="url(#pUbc)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ubc.UbcPolygon
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon
	 */
	var UbcOverCapacityZonePolygon = UbcPolygon.extend("sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon", /** @lends sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide fill with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}. The default value 
	 * of 'fill' is the URL reference. 
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getFill = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		var sColor, sPattern;
		if (this.mShapeConfig.hasShapeProperty("backgroundColor")) {
			sColor = this._configFirst("backgroundColor", oData);
		}
		if (this.mShapeConfig.hasShapeProperty("pattern")) {
			sPattern = this._configFirst("pattern", oData);
		}
		var sPatternId;
		if (sColor && sPattern){
			sPatternId = "pattern_" + sPattern + "_" + (sColor.indexOf("#") == 0 ? sColor.substring(1, sColor.length) : sColor);
		}
		if (sPatternId && sap.ui.getCore().byId(sPatternId)){
			return sap.ui.getCore().byId(sPatternId).getRefString();
		}
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> You can provide stroke with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.3.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")) {
			return this._configFirst("strokeWidth", oData);
		}
		return 0.3;
	};

	/**
	 * Gets the value of property <code>points</code>.
	 * 
	 * <p>
	 * points attribute of the polygon element.
	 * See {@link http://www.w3.org/TR/SVG/shapes.html#PolygonElementPointsAttribute SVG 1.1 specification for the 'points' attribute of 'polygon'}.
	 * The value of 'points' is calculated by the coordinates of four vertices of a visible area.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>points</code>.
	 * @public
	 */
	UbcOverCapacityZonePolygon.prototype.getPoints = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("points")) {
			return this._configFirst("points", oData);
		}
		
		var overCapacityZonePoints = "";
		var aViewRange = this.getShapeViewBoundary();
		if (aViewRange){
			overCapacityZonePoints = aViewRange[0] + "," + oRowInfo.y + " " + (aViewRange[1] - aViewRange[0]) + 
			"," + oRowInfo.y + " " + (aViewRange[1] - aViewRange[0]) + "," + ( oRowInfo.y + 
			oRowInfo.rowHeight ) + " " + aViewRange[0] + "," + ( oRowInfo.y + 
			oRowInfo.rowHeight );
			return overCapacityZonePoints;
		}
	};

	return UbcOverCapacityZonePolygon;
}, true);

}; // end of sap/gantt/shape/ext/ubc/UbcOverCapacityZonePolygon.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcOverCapacityZoneRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";
	
	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the over capacity zone background.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<rect id="overBg" x="10" y="65" width="280" height="20" fill="url(#pUlc)" />
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle
	 */
	var UlcOverCapacityZoneRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide <code>fill</code> property with the HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}. The default value 
	 * of 'fill' is a URL reference.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getFill = function (oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		var sColor, sPattern;
		if (this.mShapeConfig.hasShapeProperty("backgroundColor")) {
			sColor = this._configFirst("backgroundColor", oData);
		}
		if (this.mShapeConfig.hasShapeProperty("pattern")) {
			sPattern = this._configFirst("pattern", oData);
		}
		var sPatternId;
		if (sColor && sPattern){
			sPatternId = "pattern_" + sPattern + "_" + (sColor.indexOf("#") == 0 ? sColor.substring(1, sColor.length) : sColor);
		}
		if (sPatternId && sap.ui.getCore().byId(sPatternId)){
			return sap.ui.getCore().byId(sPatternId).getRefString();
		}
		
		return "#F6F6F6";
	};

	/**
	 * Gets the value of property <code>stroke</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeProperty SVG 1.1 specification for 'stroke'}.
	 * <b>Note:</b> HTML colors and url reference to paint server can be provided to stroke. Paint server definitions usually comes from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#CAC7BA".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>stroke</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getStroke = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("stroke")){
			return this._configFirst("stroke", oData);
		}
		
		return "#CAC7BA";
	};

	/**
	 * Gets the value of property <code>strokeWidth</code>.
	 * 
	 * <p>
	 * Standard SVG 'stroke-width' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#StrokeWidthProperty SVG 1.1 specification for 'stroke-width'}.
	 * </p>
	 * <p>The default value is 0.</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {number} Value of property <code>strokeWidth</code>.
	 * @public
	 */
	UlcOverCapacityZoneRectangle.prototype.getStrokeWidth = function(oData, oRowInfo) {
		if (this.mShapeConfig.hasShapeProperty("strokeWidth")){
			return this._configFirst("strokeWidth", oData);
		}
		
		return 0;
	};

	return UlcOverCapacityZoneRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcOverCapacityZoneRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.shape.ext.ulc.UlcOverClipRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.shape.ext.ulc.UlcOverClipRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/gantt/shape/ext/ulc/UlcOverClipRectangle",[
	"sap/gantt/shape/ext/ulc/UlcRectangle"
], function(UlcRectangle){
	"use strict";

	/**
	 * Creates and initializes a fragment of the Utilization Line Chart.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings of the new control
	 * 
	 * @class 
	 * This shape is used to draw the over clipping rectangle.
	 * 
	 * <p>
	 * Graphic Effect is:<br/>
	 * <svg xmlns="http://www.w3.org/2000/svg" width="12cm" height="8.8cm" viewBox="0 0 300 220" version="1.1">
	 * <defs><marker id="arrowend" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 0 l 10 5 l -10 5 l 4 -5 z" fill="#6d6d6d" /></marker>
	 * 	<marker id="arrowstart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="strokeWidth" markerWidth="12" markerHeight="9" orient="auto"><path d="M 0 5 l 10 -5 l -4 5 l 4 5 z" fill="#6d6d6d" /></marker></defs>
	 * 	<style>.side{stroke-width:2;stroke:#1C75BC;fill:none;} .dashside{stroke-width:1;stroke:#1C75BC;fill:none; stroke-dasharray:5,1;} .dashassist{stroke-width:1;stroke:#6d6d6d;fill:none; stroke-dasharray:5,1;}
	 * 	.arrowline{stroke-width:1;stroke:#6d6d6d;fill:none;marker-end:url(#arrowend);marker-start:url(#arrowstart);} .center{r:3;fill:#6d6d6d;stroke:#9E1F63;} .texthyphon{stroke-width:1;stroke:#9E1F63;fill:none} .propertyText{stroke:#6d6d6d;} .timeText{stroke:#9E1F63;} </style>
	 * 	<rect x="1" y="1" width="298" height="218" fill="none" stroke="blue" stroke-width="0.5"/>
	 * 	<defs><pattern class="pattern" id="pUlc" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#efefef"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#6d6d6d" stroke-width="0.5"></path></pattern>
	 * 	<pattern class="pattern" id="pEx" patternUnits="userSpaceOnUse" x="0" y="0" width="4" height="4"><rect x="0" width="4" height="4" fill="#f2a5a5"></rect><path d="M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2 " stroke="#d16d6d" stroke-width="0.5"></path></pattern></defs>
	 * 	<path d="M 10 85 h 280 v -20 h -280 v 90 h 280 v -70" class="dashside" />
	 * 	<clippath id="cpSide"><path d="M 40 155 l 25 -90 h 50 l 20 30 h 100 l 40 60" /></clippath>
	 * 	<clippath id="cpTexthyphon"><path d="M 40 155 l 25 -85 h 50 l 20 10 h 100 l 40 75" /></clippath>
	 * 	<rect id="overSide"x="10" y="65" width="280" height="20" clip-path="url(#cpSide)" fill="url(#pEx)" stroke="none"/>
	 * 	<rect id="overTexthyphon" x="10" y="65" width="280" height="20" clip-path="url(#cpTexthyphon)" fill="url(#pEx)" stroke="none"/>
	 * </svg>
	 * </p>
	 * 
	 * @extends sap.gantt.shape.ext.ulc.UlcRectangle
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.shape.ext.ulc.UlcOverClipRectangle
	 */
	var UlcOverClipRectangle = UlcRectangle.extend("sap.gantt.shape.ext.ulc.UlcOverClipRectangle", /** @lends sap.gantt.shape.ext.ulc.UlcOverClipRectangle.prototype */ {});

	/**
	 * Gets the value of property <code>fill</code>.
	 * 
	 * <p> 
	 * Standard SVG 'fill' attribute.
	 * See {@link http://www.w3.org/TR/SVG/painting.html#FillProperty SVG 1.1 specification for 'fill'}.
	 * <b>Note:</b> You can provide the <code>fill</code> property with HTML colors and the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
	 * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
	 * </p>
	 * <p>The default value is "#FF0000".</p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>fill</code>.
	 * @public
	 */
	UlcOverClipRectangle.prototype.getFill = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("fill")){
			return this._configFirst("fill", oData);
		}
		
		return "#FF0000";
	};

	/**
	 * Gets the value of property <code>clipPath</code>.
	 * 
	 * <p>
	 * Standard SVG 'clippath' attribute.
	 * See {@link http://www.w3.org/TR/SVG/masking.html#ClipPathProperty SVG 1.1 specification for 'clippath'}.
	 * 
	 *  The referred ID must be consistent with the HTML class generated by <code>UlcClipPath</code>.
	 * </p>
	 * 
	 * @param {object} oData Shape data.
	 * @param {object} oRowInfo Information about the row and row data.
	 * @return {string} Value of property <code>clipPath</code>.
	 * @public
	 */
	UlcOverClipRectangle.prototype.getClipPath = function(oData, oRowInfo){
		if (this.mShapeConfig.hasShapeProperty("clipPath")){
			return this._configFirst("clipPath", oData);
		}
		
		var uid = oRowInfo.uid;
		var pattern = new RegExp("\\[|\\]|:|\\|", "g");
		var newUid = uid.replace(pattern, "_"); 
		
		return "url(#" + newUid + "_" + oData.id + "_" + oData.dimension + ")";
	};

	return UlcOverClipRectangle;
}, true);

}; // end of sap/gantt/shape/ext/ulc/UlcOverClipRectangle.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Row'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChart",[
	"jquery.sap.global", "sap/ui/Device", "sap/gantt/GanttChartBase", "sap/ui/core/Core", "sap/ui/table/TreeTable", "sap/ui/table/Row",
	"sap/gantt/misc/Utility", "sap/ui/core/theming/Parameters", "sap/gantt/shape/SelectedShape", "sap/gantt/shape/ext/rls/SelectedRelationship",
	"sap/gantt/drawer/ShapeInRow", "sap/gantt/drawer/ShapeCrossRow", "sap/gantt/drawer/CursorLine", "sap/gantt/drawer/NowLine", "sap/gantt/drawer/VerticalLine", "sap/gantt/drawer/AdhocLine",
	"sap/gantt/drawer/CalendarPattern","sap/gantt/drawer/ExpandedBackground",
	"sap/gantt/config/TimeAxis", "sap/gantt/misc/AxisTime", "sap/gantt/misc/AxisOrdinal", "sap/gantt/misc/Format", "sap/gantt/eventHandler/AutoScrollHandler",
	"sap/gantt/eventHandler/MouseWheelHandler", "sap/gantt/eventHandler/TimePeriodZoomHandler", "sap/gantt/axistime/AxisTimeStrategyBase", "sap/gantt/axistime/ProportionZoomStrategy", "sap/gantt/config/TimeHorizon", "sap/gantt/misc/ShapeSelectionModel",
	"sap/gantt/misc/ShapeManager", "sap/gantt/shape/Group", "sap/gantt/eventHandler/ShapeResizeHandler",
	// 3rd party lib
	"sap/ui/thirdparty/d3"
], function (jQuery, Device, GanttChartBase, Core, TreeTable, Row,
		Utility, Parameters, SelectedShape, SelectedRelationship,
		ShapeInRowDrawer, ShapeCrossRowDrawer, CursorLineDrawer, NowLineDrawer, VerticalLineDrawer, AdhocLineDrawer,
		CalendarPattern, ExpandedBackground,
		TimeAxis, AxisTime, AxisOrdinal, Format, AutoScrollHandler, MouseWheelHandler, TimePeriodZoomHandler, AxisTimeStrategyBase, ProportionZoomStrategy, TimeHorizon, ShapeSelectionModel,
		ShapeManager, Group, ShapeResizeHandler) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt Chart.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Gantt Chart control.
	 * 
	 * <p>The Gantt chart has a horizontal axis at the top that represents time and a vertical axis that represents rows.
	 * </p>
	 *
	 * @extends sap.gantt.GanttChartBase
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChart
	 */
	var GanttChart = GanttChartBase.extend("sap.gantt.GanttChart", /** @lends sap.gantt.GanttChart.prototype */ {
		metadata: {
			aggregations: {
				_treeTable: {type: "sap.ui.table.TreeTable", multiple: false, visibility: "hidden"} // to ensure model pass down
			}
		}
	});
	
	GanttChart.prototype.init = function () {
		GanttChartBase.prototype.init.apply(this, arguments);
		jQuery.sap.measure.start("GanttChart init","GanttPerf:GanttChart init function");
		// create tree table
		this._oTT = new TreeTable(this.getId() + "-table", {
			visibleRowCountMode: "Auto",
			minAutoRowCount: 1,
			columnHeaderVisible: false
		});

		this._oTT.setUseFlatMode(true);
		this._bJSONTreeBinding = true;//true by default, will be updated on binding the rows
		this._oRowStatusMap = {};
		this._oTT._bVariableRowHeightEnabled = true;

		/***
		 * Overwrite _collectRowHeights to dynamically update row heights based on
		 * The execution context is tree table itself
		 */
		var that = this;
		this._oTT._collectRowHeights = function(bHeader) {
			var aHeights = TreeTable.prototype._collectRowHeights.apply(this, arguments);
			if (bHeader) {
				return aHeights;
			}
			that._aHeights = aHeights;
			if (that._aHeights[0] !== undefined && that._aHeights[0] !== 0){
				that._iInferedBaseRowHeightOnTT = that._aHeights[0];
			}
			var iBaseRowHeight = that.getBaseRowHeight();
			var iFirstVisibleRowIndex = this.getFirstVisibleRow();
			var iRowCount = that._aHeights.length;
			var iMainRowHeight = iBaseRowHeight;
			var aShapeData = that._getDrawingData([iFirstVisibleRowIndex,iFirstVisibleRowIndex + iRowCount - 1]);
			if (aShapeData && aShapeData.length > 0){
				iMainRowHeight = aShapeData[0].rowSpan * iBaseRowHeight;
			}
			for (var i = 0; i < iRowCount; i++) {
				var oContext = this.getContextByIndex(iFirstVisibleRowIndex + i);
				if (oContext){
					var oContextObject;
					if (that._bJSONTreeBinding) {
						oContextObject = oContext.getObject();
					} else if (that._aFilteredRowData) {
						oContextObject = that._aFilteredRowData[i];
					}
					var sUid = oContextObject ? oContextObject.uid : undefined;
					if (sUid && that._oRowStatusMap[sUid]){
						that._aHeights[i] = that._oRowStatusMap[sUid].visibleRowSpan * iBaseRowHeight;
					} else {
						that._aHeights[i] = iMainRowHeight;
					}
				} else {
					that._aHeights[i] = iBaseRowHeight;
				}
			}

			return that._aHeights;
		};

		this._oColumn = new sap.ui.table.Column({
			template: new sap.m.Label()
		});
		this._oTT.addColumn(this._oColumn);
		this.setAggregation("_treeTable", this._oTT);
		this._oTT.attachEvent("_rowsUpdated", this._onTTRowUpdate.bind(this));
		this._oTT.attachRowSelectionChange(this._onRowSelectionChange, this);

		this._oTT.addEventDelegate({
			onAfterRendering: this._bindScrollLogicForTT
		}, this);

		this._oTT.addEventDelegate({
			onAfterRendering: this._initialSvgDrawing
		}, this);

		// create drawers
		this._oShapeInRowDrawer = new ShapeInRowDrawer();
		this._oShapeCrossRowDrawer = new ShapeCrossRowDrawer();
		this._oCursorLineDrawer = new CursorLineDrawer();
		this._oCalendarPatternDrawer = new CalendarPattern();
		this._oExpandedBackgroundDrawer = new ExpandedBackground();

		// internal private members
		this._oAxisOrdinal = undefined;
		this._aFilteredRowData = undefined; // data to be drawn on svg using registed shape instances

		this._oStatusSet = null;
		this._nLowerRange = 0;
		this._nUpperRange = 0;

		this._oShapeSelection = new ShapeSelectionModel({
			selectionMode: this.getShapeSelectionMode(),
			ganttChart: this
		});

		this._oShapeManager = new ShapeManager(this);

		//add for mouse events to support drag shape over views
		this._bMouseDown = false;
		this._bDragging = false;
		/**
		 *Reason to add a flag "_bDragStart": to distinguish the 'mouse click' and the 'mouse move' during a drag&drop case. It helps to distinguish a
		 *drag&drop and a simple mouse click,etc
		 */
		this._bDragStart = false;
		this._oDraggingData = undefined;

		this._lastHoverRowIndex = undefined;

		// defualt maps
		this._oChartSchemesConfigMap = {};
		this._oChartSchemesConfigMap[sap.gantt.config.DEFAULT_CHART_SCHEME_KEY] = sap.gantt.config.DEFAULT_CHART_SCHEME;
		this._oObjectTypesConfigMap = {};
		this._oObjectTypesConfigMap[sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY] = sap.gantt.config.DEFAULT_OBJECT_TYPE;

		this._fExtendFactor = 0.382;

		// create default AxisTimeStrategy
		this._setAxisTimeStrategy(new ProportionZoomStrategy());

		// performance tuning
		this._mTimeouts = {};

		//this flag is used to remove Gantt sync in GanttChartContainer cycling deadlock issue.
		this._bSuppressSyncEvent = false;

		//this flag is used to remove visible horizon and scroll bar position cycling deadlock issue.
		this._bSuppressSetVisibleHorizon = false;

		//init event handler
		this._oAutoScrollHandler = new AutoScrollHandler();

		//init mouse wheel handler
		this._oMouseWheelHandler = new MouseWheelHandler(this);

		// init for time period zoom
		this._oTimePeriodZoomHandler = new TimePeriodZoomHandler(this);
		
		//init shape resize handler
		this._oShapeResizeHandler = new ShapeResizeHandler(this);

		this.setTableProperties(this.mDefaultTableProperties);

		jQuery.sap.measure.end("GanttChart init");
	};

	/**
	 * Set AxixTimeStrategy aggregation.
	 * 
	 * @public
	 * 
	 * @param {object} oAxisTimeStrategy an instance of AxisTime Zoom Strategy
	 * @return {object} GanttChart instance for chaining
	 */
	GanttChart.prototype.setAxisTimeStrategy = function (oAxisTimeStrategy) {
		this._setAxisTimeStrategy(oAxisTimeStrategy);
		this._oStatusSet = null;
		this._draw(true); // only _draw is triggered
		return this;
	};

	/**
	 * Set AxixTimeStrategy aggregation, create AxisTime instance and react on _redrawRequest event
	 * fired when zoom strategy changed.
	 * 
	 * @private
	 * 
	 * @param {object} oAxisTimeStrategy an instance of AxisTime Zoom Strategy
	 */
	GanttChart.prototype._setAxisTimeStrategy = function(oAxisTimeStrategy) {
		this.setAggregation("axisTimeStrategy", oAxisTimeStrategy, true);
		this._createAxisTime(oAxisTimeStrategy);
		oAxisTimeStrategy.attachEvent("_redrawRequest", this._onRedrawRequest, this);
	};

	GanttChart.prototype._onRedrawRequest = function(oEvent){
		var bForceUpdate = oEvent.getParameter("forceUpdate");
		var oValueBeforeChange = oEvent.getParameter("valueBeforeChange");
		if (oEvent.getParameter("reasonCode") === "visibleHorizonUpdated" && oValueBeforeChange) {
			this._oLastVisibleHorizon = oValueBeforeChange;
		}
		this.redraw(bForceUpdate);
	};

	/**
	 * @deprecated As of version 1.44, the property 'timeAxis' is deprecated, replaced by axisTimeStrategy
	 */
	// legacy logic for deprecated property 'timeAxis', should be removed when the property is deleted
	GanttChart.prototype.setTimeAxis = function (oTimeAxis) {
		this.setProperty("timeAxis", oTimeAxis, true); // no need to trigger rerender
		
		if (oTimeAxis) {
			var oTimeLineOptions = oTimeAxis.getZoomStrategy();
			this.setAxisTimeStrategy(new ProportionZoomStrategy({
				totalHorizon: oTimeAxis.getPlanHorizon(),
				visibleHorizon: oTimeAxis.getInitHorizon(),
				timeLineOption: oTimeLineOptions[oTimeAxis.getGranularity()],
				coarsestTimeLineOption: oTimeLineOptions[oTimeAxis.getCoarsestGranularity()],
				finestTimeLineOption: oTimeLineOptions[oTimeAxis.getFinestGranularity()],
				timeLineOptions: oTimeLineOptions
			}));
		} else {
			this.setAxisTimeStrategy(null);
		}
	};

	GanttChart.prototype.setLocale = function (oLocale) {
		this.setProperty("locale", oLocale, true);
		var oAxisTime = this.getAxisTime();
		if (oAxisTime) {
			oAxisTime.setLocale(oLocale);
			this._draw(true);
		}
		return this;
	};

	GanttChart.prototype.setChartSchemes = function (aChartSchemes) {
		this.setProperty("chartSchemes", aChartSchemes, true); // no need to trigger rerender
		// build a map for easy look up
		this._oChartSchemesConfigMap = {};
		if (aChartSchemes) {
			for (var i = 0; i < aChartSchemes.length; i++) {
				this._oChartSchemesConfigMap[aChartSchemes[i].getKey()] = aChartSchemes[i];
			}
		}
		
		this._draw(true);
		
		return this;
	};
	
	GanttChart.prototype.setObjectTypes = function (aObjectTypes) {
		this.setProperty("objectTypes", aObjectTypes, true); // no need to trigger rerender
		// build a map for easy look up
		this._oObjectTypesConfigMap = {};
		if (aObjectTypes) {
			for (var i = 0; i < aObjectTypes.length; i++){
				this._oObjectTypesConfigMap[aObjectTypes[i].getKey()] = aObjectTypes[i];
			}
		}
		this._draw(true);
		
		return this;
	};

	GanttChart.prototype.setSelectionMode = function (sSelectionMode) {
		this.setProperty("selectionMode", sSelectionMode, true);
		this.setShapeSelectionMode(sSelectionMode);
		switch (sSelectionMode) {
			case sap.gantt.SelectionMode.Multiple:
			case sap.gantt.SelectionMode.MultiWithKeyboard:
				this.setTableProperties({
					selectionMode: sap.ui.table.SelectionMode.MultiToggle
				});
				break;
			case sap.gantt.SelectionMode.None:
			case sap.gantt.SelectionMode.Single:
				this.setTableProperties({
					selectionMode: sSelectionMode
				});
				break;
		}
		return this;
	};

	GanttChart.prototype.setShapeSelectionMode = function (sShapeSelectionMode) {
		this.setProperty("shapeSelectionMode", sShapeSelectionMode, true);
		this._oShapeSelection.setSelectionMode(sShapeSelectionMode);
		return this;
	};

	GanttChart.prototype.setTableProperties = function (oTableProperties) {
		GanttChartBase.prototype.setTableProperties.apply(this, arguments);
		this._oTT.setSelectionBehavior(sap.ui.table.SelectionBehavior.RowOnly);
		return this;
	};

	GanttChart.prototype._createAxisTime = function (oAxisTimeStrategy) {
		if (oAxisTimeStrategy){
			oAxisTimeStrategy.createAxisTime(this.getLocale());
			this._nLowerRange = Math.ceil(this.getAxisTime().getViewRange()[0]);
			this._nUpperRange = Math.ceil(this.getAxisTime().getViewRange()[1]);
		}
	};

	GanttChart.prototype.setShapes = function (aShapes) {
		this.setProperty("shapes", aShapes, true);
		if (aShapes && aShapes.length > 0) {
			this._oShapeManager.instantiateShapes(aShapes);
			this._draw(true/**bForce*/);
		}
		return this;
	};

	/**
	 * @deprecated As of version 1.44
	 */
	GanttChart.prototype.setTimeZoomRate = function (fTimeZoomRate) {
		this.setProperty("timeZoomRate", fTimeZoomRate, true); // no need to trigger rerender
		var oAxisTimeStrategy = this.getAxisTimeStrategy();
		if (oAxisTimeStrategy.onSetTimeZoomRate){
			oAxisTimeStrategy.onSetTimeZoomRate(fTimeZoomRate);
		}
		return this;
	};

	/**
	 * @private
	 */
	GanttChart.prototype.redraw = function (bForce) {
		if (!this._initHorizonApplied) {
			return;
		}
		
		if (bForce) {
			this.resetWidthInfo();
		}
		this._draw(bForce);
	};

	GanttChart.prototype.resetWidthInfo = function () {
		this.getAxisTime().setViewOffset(0);
		this._oStatusSet = null;
		this._nLowerRange = Math.ceil(this.getAxisTime().getViewRange()[0]);
		this._nUpperRange = Math.ceil(this.getAxisTime().getViewRange()[1]);
	};

	/*
	 * Called by UI5 ManagedObject before and after retrieving data.
	 */
	GanttChart.prototype.updateRelationships = function (sReason) {
		var oBinding = this.getBinding("relationships");
		
		if (oBinding) {
			var aContext = oBinding.getContexts(0, 0);
			
			if (aContext && aContext.length > 0) {
				this._aRelationshipsContexts = aContext;
			}
		}
		this._prepareRelationshipDataFromModel();
	};

	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.addRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"addRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.insertRelationship = function (iIndex, oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"insertRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.removeRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"removeRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.getRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"getRelationships\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.destroyRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"destroyRelationships\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.indexOfRelationship = function (oRelationship) {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"indexOfRelationship\" cannot be used programmatically!");
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChart.prototype.removeAllRelationships = function () {
		jQuery.sap.log.error("The control manages the relationships aggregation. The method \"removeAllRelationships\" cannot be used programmatically!");
	};

	GanttChart.prototype._bindAggregation = function (sName, oBindingInfo) {
		if (sName == "rows" && oBindingInfo){
			var oModel = this.getModel(oBindingInfo.model);
			// resolve the path if view itself is binded
			var oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			this._getConfiguredRowKeys(oBindingInfo);
			this._oTT.bindRows(oBindingInfo);
			this._bJSONTreeBinding = (oModel instanceof sap.ui.model.json.JSONModel);
		} else {
			return sap.ui.core.Control.prototype._bindAggregation.apply(this, arguments);
		}
	};

	GanttChart.prototype.onBeforeRendering = function () {
		this._bTableReady = false;
		this._iSvgHeight = 0;
		
		this._detachEvents();
	};

	GanttChart.prototype._detachEvents = function () {
		var $svgCtn = jQuery(this.getDomSelectorById("svg-ctn"));
		var $chartHeaderSvgCnt = jQuery(this.getDomSelectorById("header"));
		// unbind wheel event
		$svgCtn.unbind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel);
		$svgCtn.unbind("wheel.sapUiTableMouseWheel", this._onMouseWheel);
		$chartHeaderSvgCnt.unbind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel);
		$chartHeaderSvgCnt.unbind("wheel.sapUiTableMouseWheel", this._onMouseWheel);

		// unbind mouse events
		$svgCtn.unbind("mouseleave", this._onSvgMouseLeave);
		$svgCtn.unbind("mouseenter", this._onSvgMouseEnter);
		$svgCtn.unbind("mousedown", this._onSvgMouseDown);
		$svgCtn.unbind("mousemove", this._onSvgMouseMove);
		$svgCtn.unbind("mouseup", this._onSvgMouseUp);
		$svgCtn.unbind("dblclick", this._onSvgDoubleClick);

		// unbind keyboard events
		jQuery(document.body).unbind("keydown.ganttKeyboardEvent");

		// unbind touch events
		if (Device.support.touch) {
			$svgCtn.unbind("touchstart", this._onSvgTouchstart);
			$svgCtn.unbind("touchend", this._onSvgTouchend);
			$svgCtn.unbind("touchmove", this._onSvgTouchmove);
			$chartHeaderSvgCnt.unbind("touchstart", this._onSvgTouchstart);
			$chartHeaderSvgCnt.unbind("touchend", this._onSvgTouchend);
			$chartHeaderSvgCnt.unbind("touchmove", this._onSvgTouchmove);
		}

		this._oTimePeriodZoomHandler.detachEvents();
	};

	GanttChart.prototype.onAfterRendering = function () {
		this._attachEvents();
	};

	GanttChart.prototype._attachEvents = function () {
		var $svgCtn = jQuery(this.getDomSelectorById("svg-ctn"));
		var $chartHeaderSvgCnt = jQuery(this.getDomSelectorById("header"));
		// register wheel event
		if (Device.browser.firefox) {
			$svgCtn.bind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
			$chartHeaderSvgCnt.bind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
		} else {
			$svgCtn.bind("wheel.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
			$chartHeaderSvgCnt.bind("wheel.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
		}

		// register mouse events
		$svgCtn.bind("mouseenter", this._onSvgMouseEnter.bind(this));
		$svgCtn.bind("mouseleave", this._onSvgMouseLeave.bind(this));
		$svgCtn.bind("mousedown", this._onSvgMouseDown.bind(this));
		$svgCtn.bind("mousemove", this._onSvgMouseMove.bind(this));
		$svgCtn.bind("mouseup", this._onSvgMouseUp.bind(this));
		$svgCtn.bind("dblclick", this._onSvgDoubleClick.bind(this));

		// register keyboard events
		jQuery(document.body).bind("keydown.ganttKeyboardEvent", this._onKeyDown.bind(this));

		// register touch events
		if (Device.support.touch) {
			$svgCtn.bind("touchstart", this._onSvgTouchstart.bind(this));
			$svgCtn.bind("touchend", this._onSvgTouchend.bind(this));
			$svgCtn.bind("touchmove", this._onSvgTouchmove.bind(this));
			$chartHeaderSvgCnt.bind("touchstart", this._onSvgTouchstart.bind(this));
			$chartHeaderSvgCnt.bind("touchend", this._onSvgTouchend.bind(this));
			$chartHeaderSvgCnt.bind("touchmove", this._onSvgTouchmove.bind(this));
		}

		this._oTimePeriodZoomHandler.attachEvents();
	};

	GanttChart.prototype._getMouseOrTouchPoint = function (oEvent) {
		// touchstart, touchmove
		if (oEvent.targetTouches && oEvent.targetTouches.length > 0) {
			return oEvent.targetTouches[oEvent.targetTouches.length - 1];
		// touchend
		} else if (oEvent.changedTouches && oEvent.changedTouches.length > 0) {
			return oEvent.changedTouches[oEvent.changedTouches.length - 1];
		}
		// mouse*
		return {"pageX": oEvent.pageX, "pageY": oEvent.pageY};
	};

	GanttChart.prototype._onTouchScrollStart = function (oEvent) {
		if (Device.system.combi || Device.system.phone || Device.system.tablet) {
			this._aTouchStartPosition = null;
			this._bIsScrollVertical = null;
			var oTouch = this._getMouseOrTouchPoint(oEvent);
			this._aTouchStartPosition = [oTouch.pageX, oTouch.pageY];
			var oVsb = this.getTTVsbDom();
			if (oVsb) {
				this._iTouchScrollTop = oVsb.scrollTop;
			}

			var oHsb = this.getTTHsbDom();
			if (oHsb) {
				this._iTouchScrollLeft = oHsb.scrollLeft;
			}
		}
	};

	GanttChart.prototype._onTouchScroll = function (oEvent) {
		if ((Device.system.combi || Device.system.phone || Device.system.tablet) && this._aTouchStartPosition) {
			var oTouch = this._getMouseOrTouchPoint(oEvent);
			var iDeltaX = (oTouch.pageX - this._aTouchStartPosition[0]);
			var iDeltaY = (oTouch.pageY - this._aTouchStartPosition[1]);
			if (this._bIsScrollVertical == null) {
				this._bIsScrollVertical = Math.abs(iDeltaY) > Math.abs(iDeltaX);
			}

			if (this._bIsScrollVertical) {
				var sVsb = sap.ui.table.SharedDomRef.VerticalScrollBar;
				var oVsb = this._oTT.getDomRef(sVsb);
				if (oVsb) {
					var iScrollTop = this._iTouchScrollTop - iDeltaY;
					//bubble-up only when scrolling reaches ganttchart boundary
					if (iScrollTop > 0 && iScrollTop < (this._oTT.getDomRef(sVsb + "-content").clientHeight - oVsb.clientHeight) - 1) {
						this._preventBubbleAndDefault(oEvent);
					}
					oVsb.scrollTop = iScrollTop;
				}
			} else {
				var sHsb = sap.ui.table.SharedDomRef.HorizontalScrollBar;
				var oHsb = this._oTT.getDomRef(sHsb);
				if (oHsb) {
					var iScrollLeft = this._iTouchScrollLeft - iDeltaX;
					//bubble-up only when scrolling reaches ganttchart boundary
					if (iScrollLeft > 0 && iScrollLeft < (this._oTT.getDomRef(sHsb + "-content").clientWidth - oHsb.clientWidth) - 1) {
						this._preventBubbleAndDefault(oEvent);
					}
					oHsb.scrollLeft = iScrollLeft;
				}
			}
			this._bScrolling = true;
		}
	};

	/**
	 * Handler for mousewheel event on scroll areas.
	 * @private
	 */
	GanttChart.prototype._onMouseWheel = function(oEvent) {
		var bIsZoomTriggerred = this._oMouseWheelHandler.handleEvent(oEvent);
		if (bIsZoomTriggerred) {
			this.fireEvent("_visibleHorizonUpdate", {
				reasonCode: "mouseWheelZoom",
				eventData: {
					originEvent: oEvent
				}
			});
		}
	};

	/**
	 * @private
	 * this function should only be triggered by sync mouse wheel zoom from ganttchart container, in this function will remove the scroll event deadlock
	 */
	GanttChart.prototype.syncMouseWheelZoom = function (oEventData){
		this._bSuppressSyncEvent = true;
		this._oMouseWheelHandler.handleEvent(oEventData.originEvent);
	};

	GanttChart.prototype.handleExpandChartChange = function(bExpanded, aChartSchemes, aSelectedIndices) {

		aSelectedIndices = aSelectedIndices ? aSelectedIndices : this._oTT.getSelectedIndices();

		// Do nothing if no selections on table
		if (aSelectedIndices.length > 0) {
			this._updateRowStatusMap(bExpanded, aChartSchemes, aSelectedIndices);
			this._oTT.updateRows();
		}

	};

	GanttChart.prototype.invertRowExpandStatus = function (aSelectedIndices, aChartSchemes) {

		aSelectedIndices = aSelectedIndices ? aSelectedIndices : this._oTT.getSelectedIndices();

		if (aSelectedIndices.length > 0 && aChartSchemes) {
			for (var i = 0; i < aSelectedIndices.length; i++){
				var iIndex = aSelectedIndices[i];
				var bExpanded = this._ifRowExpanded(iIndex, aChartSchemes);
				if (bExpanded !== null){
					this._updateRowStatusMap(!bExpanded, aChartSchemes, [iIndex]);
				}
			}

			this._oTT.updateRows();
		}
	};

	GanttChart.prototype._ifRowExpanded = function (iIndex, aChartSchemes) {
		var oTable = this._oTT;
		var oBinding = oTable.getBinding();
		var oContext = oBinding.getContextByIndex(iIndex);
		var bExpanded = null;

		if (oContext){
			//var sPath = oContext.getPath();
			var oContextObject = oContext.getObject();
			var sUid = oContextObject.uid;
			var oSchemeInfo = this._getRowSpanWithData(oContextObject, aChartSchemes),
				sSchemeName = oSchemeInfo.name;
			if (sUid && this._oRowStatusMap[sUid] && this._oRowStatusMap[sUid][sSchemeName]){
				bExpanded = true;
			} else {
				bExpanded = false;
			}
		}

		return bExpanded;
	};

	GanttChart.prototype._updateRowStatusMap = function (bExpanded, aExpandChartSchemes, aExpandedIndices) {
		var oTable = this._oTT;
		var oBinding = oTable.getBinding();
		for (var i = 0; i < aExpandedIndices.length; i++){
			var iIndex = aExpandedIndices[i];
			var oContext = oBinding.getContextByIndex(iIndex);
			if (oContext){
				//var sPath = oContext.getPath();
				var oContextObject;
				if (this._bJSONTreeBinding) {
					oContextObject = oContext.getObject();
				} else {
					oContextObject = this._aFilteredRowData[iIndex].data;
				}
				var sUid = oContextObject.uid;
				if (sUid){
					var oSchemeInfo = this._getRowSpanWithData(oContextObject, aExpandChartSchemes),
					sSchemeName = oSchemeInfo.name;

					if (bExpanded){
						if (this._oRowStatusMap[sUid]) {
							this._oRowStatusMap[sUid][sSchemeName] = oSchemeInfo;
						} else {
							this._oRowStatusMap[sUid] = {};
							this._oRowStatusMap[sUid][sSchemeName] = oSchemeInfo;
						}
					} else if (!bExpanded && this._oRowStatusMap[sUid]){
						delete this._oRowStatusMap[sUid][sSchemeName];
						delete this._oRowStatusMap[sUid].visibleRowSpan;
						if (jQuery.isEmptyObject(this._oRowStatusMap[sUid])) {
							delete this._oRowStatusMap[sUid];
							continue;
						}
					}
					this._getDrawingData([iIndex, iIndex]);
				}
			}
		}
	};

	GanttChart.prototype.isRowExpanded = function(){
		var bRowExpanded = !jQuery.isEmptyObject(this._oRowStatusMap);
		return bRowExpanded;
	};
	/**
	 * @param object row data get from the row context, so its 'id' and 'type' are specified by configuration
	 */
	GanttChart.prototype._getRowSpanWithData = function (oSelectedData, aExpandChartSchemes) {
		//Calculate delta height
		var iRowSpan = 1,
			sScheme = null,
			aDrawData = null,
			sRowTypeName = this.getRowTypeName();
		for (var key = 0; key < aExpandChartSchemes.length; key++) {
			var sExpandScheme = aExpandChartSchemes[key];
			var sMode;
			if (this._oChartSchemesConfigMap[sExpandScheme] && this._oChartSchemesConfigMap[sExpandScheme].getModeKey()) {
				sMode = this._oChartSchemesConfigMap[sExpandScheme].getModeKey();
			} else {
				sMode = this.getMode();
			}

			//Check whether the current object data has the expanded chart scheme
			if (this._oObjectTypesConfigMap[oSelectedData[sRowTypeName]] && this._oObjectTypesConfigMap[oSelectedData[sRowTypeName]].getExpandedChartSchemeKeys().length > 0) {
				var aValidSchems = this._oObjectTypesConfigMap[oSelectedData[sRowTypeName]].getExpandedChartSchemeKeys();
				if ($.inArray(sExpandScheme, aValidSchems) > -1) {
					//If the expandedChartScheme is available in current mode, return all valid data names, which can be drawn by shapes of the expandedChartScheme
					var oSchemeInfo = this._collectDataNameForValidChartScheme(sExpandScheme, sMode);
					if (oSchemeInfo) {
						aDrawData = oSchemeInfo.drawData;
						iRowSpan += oSchemeInfo.rowSpan;
						sScheme = sExpandScheme;
					}
				}
			}
		}
		return {
			rowSpan: iRowSpan,
			name: sScheme,
			data: aDrawData
		};
	};

	GanttChart.prototype._updateTableRowHeights = function () {
		if (this._aHeights){
			this._oTT._updateRowHeights(this._aHeights, false);
		}
	};

	GanttChart.prototype.notifySourceChange = function () {
		//when switch hierarchy, set the first row as the first visible row
		this._oTT.setFirstVisibleRow(0);
		// reset the rowStatusMap after switching hierarchy
		this.resetRowStatusMap();
	};

	GanttChart.prototype.resetRowStatusMap = function () {
		this._oRowStatusMap = {};
	};

	GanttChart.prototype._collectDataNameForValidChartScheme = function (sScheme, sMode) {
		if (this._oChartSchemesConfigMap[sScheme]) {
			var aDrawData = [];
			var aShapesForChartScheme = this._oChartSchemesConfigMap[sScheme].getShapeKeys();
			var iRowSpan = this._oChartSchemesConfigMap[sScheme].getRowSpan();
			var sRowIndexName = this._oChartSchemesConfigMap[sScheme].getRowIndexName();
			var mShapeConfig = this._oShapeManager.mShapeConfig;
			jQuery.each(aShapesForChartScheme, function (iKey, oVal) {
				if (mShapeConfig[oVal]) {
					var aModeKeys = mShapeConfig[oVal].getModeKeys();
					if ((aModeKeys && aModeKeys.length > 0 && $.inArray(sMode, aModeKeys) > -1) || aModeKeys.length == 0 || sMode == sap.gantt.config.DEFAULT_MODE_KEY) {
						aDrawData.push(mShapeConfig[oVal].getShapeDataName());
					} 
				}
			});
			if (aDrawData.length > 0 && iRowSpan >= 1) {
				return {"drawData" : aDrawData, "rowSpan" : iRowSpan, "rowIndexName" : sRowIndexName};
			}
		}
	};

	GanttChart.prototype._composeParameterForClickPosition = function (event) {
		var aSvg = jQuery(this.getDomSelectorById("svg"));
		var iMouseXPos = this._getMouseXPos(event);
		var oSvgPoint = this._getSvgCoodinateByDiv(aSvg[0], iMouseXPos, event.pageY);
		var x = iMouseXPos - aSvg.offset().left || event.offsetX;
		var y = event.pageY - aSvg.offset().top || event.offsetY;
		if (!this._oAxisOrdinalOfVisibleRow) {
			return null;
		}

		var startTime = this.getAxisTime().viewToTime(x);

		// For expand chart scenario, get the main row (leading row) data
		// viewToRowIndex to get actual tree table row index.
		var iLeadingRowIndex = this._oAxisOrdinalOfVisibleRow.viewToRowIndex(y, this._getVisibleRowCount()) + this._oTT.getFirstVisibleRow();

		var oRowDatum = Utility.getRowDatumByEventTarget(event.target);
		var oLeadingRowInfo = oRowDatum ? oRowDatum.objectInfoRef : null;

		// Only for expand chart. viewToElementIndex to get the clicked shape index (fake row)
		var bExpandedRow = false;
		var iShapeRowIndex = this._oAxisOrdinal.viewToElementIndex(y);
		var oShapeData = this._aFilteredRowData[iShapeRowIndex];
		if (oShapeData && oShapeData.index && oShapeData.index !== 0){
			bExpandedRow = true;
		}

		// If Gantt has no expand chart, leadingRowInfo equals rowInfo
		var param = {
			"startTime": startTime,
			"svgPoint": oSvgPoint,
			"leadingRowNum": iLeadingRowIndex,
			"leadingRowInfo": oLeadingRowInfo, 
			"rowIndex": iShapeRowIndex,
			"rowInfo": oShapeData,
			"isExpandedRow": bExpandedRow
		};
		return param;
	};

	GanttChart.prototype.getAllRowData = function() {
		var oBinding = this._oTT.getBinding("rows");
		return this._getDrawingData([0, oBinding.getLength() - 1]);
	};

	GanttChart.prototype.getAllSelections = function () {
		var selectedRows = this.getSelectedRows();
		var selectedShapes = this.getSelectedShapes();
		var selectedRelationships = this.getSelectedRelationships();
		var currentSelection = {"rows": selectedRows, "shapes": selectedShapes, "relationships": selectedRelationships};
		return currentSelection;
	};

	GanttChart.prototype.getSelectedRows = function () {
		var aSelectedRows = [];
		var aSelectedIndexs = this._oTT.getSelectedIndices();
		var aAllRowData = this.getAllRowData();

		var aMainRows = [];
		for (var i = 0; i < aAllRowData.length; i++) {
			//filter out the expanded rows(this method should just collect the selected main rows, rather than
			//expanded rows)
			if (aAllRowData[i] && !aAllRowData[i].parentId) {
				aMainRows.push(aAllRowData[i]);
			}
		}
		for (var j = 0; j < aSelectedIndexs.length; j++) {
			if (aSelectedIndexs[j] > -1 && aSelectedIndexs[j] < aMainRows.length && aMainRows[aSelectedIndexs[j]]) {
				aSelectedRows.push(aMainRows[aSelectedIndexs[j]]);
			}
		}
		return aSelectedRows;
	};

	GanttChart.prototype.getSelectedShapes = function() {
		var aSelectedShapes = this._oShapeSelection.getSelectedShapeDatum();
		var oResult = {};
		aSelectedShapes.forEach(function(oShape){
			var oRowData = this._oShapeSelection.getRowDatumByShapeUid(oShape.uid, this),
				sShapeDataName = Utility.getShapeDataNameByUid(oShape.uid);

			var aSelected = oResult[sShapeDataName] || [];
			aSelected.push({
				"shapeUid": oShape.uid,
				"shapeData": oShape,
				"objectInfoRef": oRowData
			});
			oResult[sShapeDataName] = aSelected;
		}.bind(this));

		return oResult;
	};

	GanttChart.prototype.getSelectedRelationships = function () {
		return this._oShapeSelection.getSelectedRelationships();
	};

	GanttChart.prototype.getRowByShapeUid = function (sShapeUid) {
		return this._oShapeSelection.getRowDatumByShapeUid(sShapeUid, this);
	};

	GanttChart.prototype.selectShapes = function(aIds, bExclusive) {
		var bShapeSelectionChanged = this._oShapeSelection.selectShapes(aIds, bExclusive);
		if (bShapeSelectionChanged) {
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype.selectByUid = function (aUid) {
		var aShapeUid = aUid;
		// TODO: add logic to seperate aUid into an array of rowUids, shapeUids, relationshipUids
		// TODO: add logic to select row
		// TODO: add logic to select relationship
		var bShapeSelectionChange = this._oShapeSelection.selectShapeByUid(aUid, this);
		if (bShapeSelectionChange) {
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype.deselectShapes = function(aIds) {
		var bShapeSelectionChanged = this._oShapeSelection.deselectShapes(aIds);
		if (bShapeSelectionChanged){
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype.selectRowsAndShapes = function(aRowId, bExclusive) {
		if (!aRowId || aRowId.length === -1) {
			this.deselectShapes();
			this.deselectRows();
			return this;
		}

		var aShapes = [];
		var aRowDatum = Utility.getRowDatumById(aRowId, this.getId());

		jQuery.each(aRowDatum, function(_, oRowDatum) {
			var aShapeData = oRowDatum.shapeData;
			for (var i = 0; i < aShapeData.length; i++) {
				var oShapeData = aShapeData[i];
				if (this.isShapeSelectable(oShapeData)) {
					aShapes.push(oShapeData.__id__);
				}
			}
		}.bind(this));

		this._oShapeSelection.selectUnderlyingTableRows(aRowId, this._oTT);

		var bShapeSelectionChanged = this._oShapeSelection.selectShapes(aShapes, bExclusive);
		if (bShapeSelectionChanged) {
			this._drawSelectedShapes();
		}

		return this;
	};

	GanttChart.prototype.selectRelationships = function(aIds, bExclusive) {
		var aRelationshipDatum = Utility.getShapeDatumById(aIds, this.getId()/**sContainer*/);
		var bUpdated = this._oShapeSelection.selectRelationships(aRelationshipDatum, bExclusive);
		if (bUpdated) {
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype.deselectRelationships = function(aIds) {
		var bUpdated = this._oShapeSelection.deselectRelationships(aIds);
		if (bUpdated){
			this._drawSelectedShapes();
		}
		return this;
	};

	GanttChart.prototype.selectRows = function(aIds, bExclusive) {
		this._oShapeSelection.selectUnderlyingTableRows(aIds, this._oTT, bExclusive);
		return this;
	};

	GanttChart.prototype.deselectRows = function(aIds) {
		this._oShapeSelection.deselectUnderlyingTableRows(aIds, this._oTT);
		return this;
	};

	GanttChart.prototype.expandToLevel = function (iLevel) {
		this._oTT.expandToLevel(iLevel);
		return this;
	};

	GanttChart.prototype.expand = function(iRowIndex) {
		this._oTT.expand(iRowIndex);
		return this;
	};

	GanttChart.prototype.collapse = function(iRowIndex) {
		this._oTT.collapse(iRowIndex);
		return this;
	};

	GanttChart.prototype.getVisibleRowCount = function() {
		return this._oTT.getVisibleRowCount();
	};
	
	GanttChart.prototype._onRowSelectionChange = function (oEvent) {
		this.fireRowSelectionChange({
			originEvent: oEvent
		});
	};

	/*
	 * If Device.os.name is mac, we support the meta key i.e. 'Command' for multiple shapes selection. https://api.jquery.com/event.metakey/
	 */
	GanttChart.prototype._selectionChange = function (oShapeData, bCtrlOrMeta, bShift, origEvent) {
		var oRowDatum = Utility.getRowDatumByEventTarget(origEvent.target);
		var oRowInfo = oRowDatum ? oRowDatum.objectInfoRef : null;
		var oUpdated = this._oShapeSelection.changeShapeSelection(oShapeData, oRowInfo, bCtrlOrMeta, this._bDragging, this._oShapeResizeHandler.getIsResizing());

		return oUpdated;
	};

	/*
	 * Synconize the clicks on empty space of chart with selection of rows in the back table
	 */
	GanttChart.prototype._syncTTSelection = function(event){
		jQuery.sap.measure.start("GanttChart syncTTSelection","GanttPerf:GanttChart syncTTSelection function");
		var bShift = event.shiftKey;
		var bCtrl = event.ctrlKey;
		var $svg = jQuery(this.getDomSelectorById("svg"))[0];
		var oClickPoint = this._getSvgCoodinateByDiv($svg, this._getMouseXPos(event), event.pageY);

		var iRowIndex = parseInt(this._oAxisOrdinalOfVisibleRow.viewToElementIndex(oClickPoint.y), 10);
		if (iRowIndex < 0){
			return false;
		}
		var aVisibleRows = this._oTT.getRows();
		var iIndex, oSelectedRow = d3.select("#" + aVisibleRows[iRowIndex].getId());
		if (iRowIndex < aVisibleRows.length && oSelectedRow && oSelectedRow.attr("data-sap-ui-rowindex")){
			iIndex = this._oTT.getFirstVisibleRow() + parseInt(oSelectedRow.attr("data-sap-ui-rowindex"), 10);
		}

		var sSelectionMode = this._oTT.getSelectionMode();
		if (iIndex >= 0 && sSelectionMode !== sap.ui.table.SelectionMode.None) {
			if (sSelectionMode === sap.ui.table.SelectionMode.Single) {
				if (!this._oTT.isIndexSelected(iIndex)) {
					this._oTT.setSelectedIndex(iIndex);
				} else {
					this._oTT.clearSelection();
				}
			} else {
				//if (sSelectionMode === sap.ui.table.SelectionMode.MultiToggle && this.getSelectionMode === sap.gantt.SelectionMode.Multiple) {
				//As of version 1.40, sap.ui.table.SelectionMode.Multi is deprecated and replaced by sap.ui.table.SelectionMode.MultiToggle
				bCtrl = true;
				//}
				if (bShift) {
					// If no row is selected getSelectedIndex returns -1 - then we simply select the clicked row:
					// Click on Empty place + shift key: Keep all shape/relationship selection.
					// sync the row selection with original treetable row selection behavior
					var iSelectedIndex = this._oTT.getSelectedIndex();
					if (iSelectedIndex >= 0) {
						if (iSelectedIndex < iIndex) {
							this._oTT.addSelectionInterval(iSelectedIndex, iIndex);
						}else {
							this._oTT.addSelectionInterval(iIndex, iSelectedIndex);
						}
					}else {
						this._oTT.setSelectedIndex(iIndex);
					}
				}else if (!this._oTT.isIndexSelected(iIndex)) {
					if (bCtrl) {
						this._oTT.addSelectionInterval(iIndex, iIndex);
					} else {
						//this._oTT.clearSelection();
						this._oTT.setSelectedIndex(iIndex);
					}
				}else if (bCtrl) {
					this._oTT.removeSelectionInterval(iIndex, iIndex);
				}else if (this._oTT.getSelectedIndices().length > 1) {
					//this._oTT.clearSelection();
					this._oTT.setSelectedIndex(iIndex);
				}
			}
		}
		jQuery.sap.measure.end("GanttChart syncTTSelection");
	};

	//Set global variances for svg events
	GanttChart.prototype._setEventStatus = function (sEventName) {
		switch (sEventName) {
			case "dragEnter":
				this._bDragStart = true;
				break;
			case "mouseDown":
				this._bMouseDown = true;
				this._bDragging = false;
				this._bDragStart = false;
				this._bScrolling = false;
				break;
			case "mouseUp":
				this._bMouseDown = false;
				this._bScrolling = false;
				break;
			case "shapeDragStart":
				this._bDragStart = true;
				break;
			case "shapeDragging":
				/**
				 * only when drag is prepared. if not do like this, when 'dragLeave' is
				 * triggered on gantt chart view A, the flag "_bDragging" is set to false. But the 
				 * "mousemove" handler is still from A until the dragged shape enter another gantt chart
				 * view B ("dragEnter" triggered on B),
				 * so before that, the "mousemove" keeps being triggered on A and the '_bDragging' would
				 * be set to true again, which is not expected and will cause wrong result of the final drop.
				*/
				if (this._bDragStart) {
					this._bDragging = true;
				}
				break;
			case "shapeDragEnd":
				this._bDragging = false;
				this._bDragStart = false;
				this._oDraggingData = undefined;
				break;
			case "dragLeave":
				this._bDragStart = false;
				break;
			default:
				break;
		}
	};

	GanttChart.prototype._handleShapeDragStart = function (oEvent) {
		var aSvg = jQuery(this.getDomSelectorById("svg"));
		//if mouse down on a shape that is dragable
		var oSourceShapeData = d3.select(oEvent.target).datum();
		var sClassId = oEvent.target.getAttribute("class").split(" ")[0];
		var bEnableDnD = this._oShapeManager.isShapeDraggable(oSourceShapeData, sClassId);
		if (oSourceShapeData && bEnableDnD) {
			var rowInfo = this._oShapeSelection.getRowDatumByShapeUid(oSourceShapeData.uid, this);
			if (rowInfo) {
				var x = this._getMouseXPos(oEvent) - aSvg.offset().left || oEvent.offsetX;
				var y = oEvent.pageY - aSvg.offset().top || oEvent.offsetY;
				var shapeX, shapeWidth;
				if (oEvent.target.getAttribute("x") && oEvent.target.getAttribute("width")) {
					shapeX = parseInt(oEvent.target.getAttribute("x"), 10);
					shapeWidth = parseInt(oEvent.target.getAttribute("width"), 10);
				}else if (oSourceShapeData.startTime){
					var x1 = this.getAxisTime().timeToView(Format.abapTimestampToDate(oSourceShapeData.startTime));
					var x2 = this.getAxisTime().timeToView(Format.abapTimestampToDate(oSourceShapeData.endTime));
					if (Core.getConfiguration().getRTL()) {
						shapeX = x2;
						shapeWidth = (x1 - x2) > 0 ? (x1 - x2) : 1;
					} else {
						shapeX = x1;
						shapeWidth = (x2 - x1) > 0 ? (x2 - x1) : 1;
					}
				}else {
					shapeX = x;
					shapeWidth = 1;
				}
				var oDragStartPoint = {"x": x, "y": y, "shapeX": shapeX, "shapeWidth": shapeWidth};

				var aSourceShapeData = [];
				aSourceShapeData.push({
					"shapeData": oSourceShapeData,
					"objectInfo": rowInfo
				});

				//put other selected shapes into the dragging list
				var aSelectedShapes = this._oShapeSelection.getSelectedShapeDatum();
				for (var i = 0; i < aSelectedShapes.length; i++) {
					if (aSelectedShapes[i].uid !== oSourceShapeData.uid && this._oShapeManager.isShapeDraggable(aSelectedShapes[i])) {
						aSourceShapeData.push({
							"shapeData": aSelectedShapes[i],
							"objectInfo": this._oShapeSelection.getRowDatumByShapeUid(aSelectedShapes[i].uid, this)
						});
					}
				}

				this._oDraggingData = {
						"sourceShapeData": aSourceShapeData,
						"dragStartPoint": oDragStartPoint,
						"sourceSvgId": this.getId(),
						"targetSvgId": this.getId(),
						"domObject": this._getDraggingDomObjs(oEvent)
				};
				this._setEventStatus("shapeDragStart");
				//remove all drag&drop related events bound to document.body
				jQuery(document.body).unbind("mousemove.ganttChartDragDrop");
				jQuery(document).unbind("mouseup.ganttChartDragDrop");//change document.body to document
				jQuery(document.body).bind("mousemove.ganttChartDragDrop", this._handleShapeDragging.bind(this));
				jQuery(document).bind("mouseup.ganttChartDragDrop", this._handleShapeDragEnd.bind(this));
			}
		}
	};

	GanttChart.prototype._getDraggingDomObjs = function (oEvent) {
		var currentNode = d3.select(oEvent.target)[0][0];
		var sClasses; 
		if (currentNode.parentElement) {
			sClasses = currentNode.parentElement.getAttribute("class");
		} else if (currentNode.parentNode) {
			sClasses = currentNode.parentNode.getAttribute("class");
		}
		if (sClasses) {
			var sTopShapeClass = sClasses.split(" ")[0];
			if (sap.ui.getCore().byId(sTopShapeClass) instanceof sap.gantt.shape.Group){
				return currentNode.parentNode.childNodes;
			}
		}
		return [currentNode];
	};

	GanttChart.prototype._handleShapeDragging = function (oEvent) {
		if (!Device.support.touch && (oEvent.button !== 0 || oEvent.buttons === 0 || oEvent.ctrlKey)) {
			return false;
		}
		var aSvg = jQuery(this.getDomSelectorById("svg"));
		var dx = Math.abs((this._getMouseXPos(oEvent) - aSvg.offset().left || oEvent.offsetX) - this._oDraggingData.dragStartPoint.x);
		var dy = Math.abs((oEvent.pageY - aSvg.offset().top || oEvent.offsetY) - this._oDraggingData.dragStartPoint.y);
		if (dx > 3 || dy > 3) {
			var aDragDiv = d3.select("#dragDropShadow");
			var dragDiv = aDragDiv[0];
			if (this._oDraggingData === undefined) {
				if (!aDragDiv.empty()){
					aDragDiv.remove();
				}
			} else {
				var iShapeX = this._oDraggingData.dragStartPoint.shapeX;
				var iStartMouseX = this._oDraggingData.dragStartPoint.x;
				if (aDragDiv.empty() || dragDiv === null) {
					//when drag an unselected shape, check if need to clear other shape selection
					this._handleDragWithoutSelection(oEvent);
					var nShapeCount = this._oDraggingData.sourceShapeData.length;
					dragDiv = d3.select("body").append("div").attr("id", "dragDropShadow");
					dragDiv.classed("sapGanttDraggingShadow", true);
					var aCloneDoms = [];
					var width = 12;
					var height = 10;
					var fontSize = 12;
					for (var i = 0; i < this._oDraggingData.domObject.length; i++) {
						var oNode = d3.select(this._oDraggingData.domObject[i]);
						if (!oNode.empty()) {
							var currentWidth = parseInt(oNode.attr("width"), 10);
							var currentHeight = parseInt(oNode.attr("height"), 10);
							var sTransform = oNode.attr("transform");

							width = currentWidth > width ? currentWidth : width;
							height = currentHeight > height ? currentHeight : height;

							var sShadowTransform = "";
							if (sTransform) {
								var subs = sTransform.split(")");
								for (var iIndex = 0; iIndex < subs.length - 1; iIndex++){
									if (subs[iIndex].indexOf("translate") < 0) {
										sShadowTransform = sShadowTransform + subs[iIndex] + ") ";
									}
								}
								sShadowTransform.replace("))", ")");
							}
							var shadow = d3.select(this._oDraggingData.domObject[i].cloneNode())
								.classed("shadow", true)
								.attr("fill-opacity", "0.5")
								.attr("x", 0)
								.attr("y", 0)
								.attr("transform", sShadowTransform);
							aCloneDoms.push(shadow);
						}
					}
					var g = dragDiv.append("svg").attr("id", "dragDropShadowSvg").attr("width", width)
					.append("g").attr("id", "dragDropShadowSvgGroup");
					for (var k = 0; k < aCloneDoms.length; k++) {
						g.node().appendChild(aCloneDoms[k].node());
					}
					g.append("text")
						.attr("x", width / 2 - fontSize / 2)
						.attr("y", height - fontSize / 2 + 4)
						.attr("fill", "blue")
						.attr("font-size", fontSize)
						.text(function () {
							return nShapeCount; 
						});
				}
				var iCurrentX;
				if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.Start) {
					iCurrentX = Core.getConfiguration().getRTL() ? (oEvent.pageX - this._oDraggingData.dragStartPoint.shapeWidth) : oEvent.pageX;
				} else if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.None) {
					iCurrentX = iShapeX + (this._getMouseXPos(oEvent) - iStartMouseX);
				}else if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.End) {
					iCurrentX = Core.getConfiguration().getRTL() ? oEvent.pageX : (oEvent.pageX - this._oDraggingData.dragStartPoint.shapeWidth);
				}
				var iCurrentY = oEvent.pageY;//calculate current Y on the align of shape&row

				d3.select("#dragDropShadow").style("left", iCurrentX + "px");
				d3.select("#dragDropShadow").style("top", iCurrentY + 4 + "px");
				jQuery(document.body).addClass("sapGanttDraggingCursor");

				this._setEventStatus("shapeDragging");
				this._handleAutoScroll(oEvent); //trigger auto-scrolling when dragging
			}
		}
	};

	GanttChart.prototype._handleDragWithoutSelection = function (oEvent) {
		//if a drag is really happening, put the currently dragged shape into selected list
		var oCurrentShapeData = this._oDraggingData.sourceShapeData[0];
		if (!this._oShapeSelection.isShapeSelected(oCurrentShapeData.shapeData.uid)) {
			var bRelSelectionChange = false;

			if (!oEvent.ctrlKey) {
				this._oDraggingData.sourceShapeData.splice(1, this._oDraggingData.sourceShapeData.length - 1);
				bRelSelectionChange = this._oShapeSelection.clearAllSelections();
			}

			this._oShapeSelection.selectByShapeData(oCurrentShapeData.shapeData);
			this._drawSelectedShapes();

			this.fireShapeSelectionChange({
				originEvent: oEvent
			});
			if (bRelSelectionChange) {
				this.fireRelationshipSelectionChange({
					originEvent: oEvent
				});
			}
		}
	};

	//auto-scroll the vertical scroll bar or horizontal scroll bar when mouse move closed to chart boundary and hold
	GanttChart.prototype._handleAutoScroll = function (oEvent) {
		return this._oAutoScrollHandler.autoScroll(this, oEvent);
	};

	GanttChart.prototype._handleShapeDragEnd = function (oEvent) {
		//make auto scroll stop
		this._oAutoScrollHandler.stop();

		var div = d3.select("#dragDropShadow");
		if (!div.empty()){
			div.remove();
		}

		if (this._bDragging && this._oDraggingData !== undefined) {
			var sTargetSvgId = this.getId();
			this._collectDraggingShapeData(this._oDraggingData, oEvent);
			this.fireShapeDragEnd({
				originEvent: oEvent,
				sourceSvgId: this._oDraggingData.sourceSvgId,
				targetSvgId: sTargetSvgId,
				sourceShapeData: this._oDraggingData.sourceShapeData,
				targetData: this._oDraggingData.targetData
			});
		}

		jQuery(document.body).unbind("mousemove.ganttChartDragDrop");
		jQuery(document).unbind("mouseup.ganttChartDragDrop");
		jQuery(document.body).removeClass("sapGanttDraggingCursor");
		this._setEventStatus("shapeDragEnd");
	};

	GanttChart.prototype._collectDraggingShapeData = function (oDraggingSource, oEvent) {
		var aSvg = jQuery(this.getDomSelectorById("svg"));
		var x = parseInt((this._getMouseXPos(oEvent) - aSvg.offset().left || oEvent.offsetX), 10);
		var sStartPointX = oDraggingSource.dragStartPoint.x;
		var iDragDistance = x - parseInt(sStartPointX, 10);
		var sShapeCurrentStartX;
		if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.Start) {
			sShapeCurrentStartX = x;
		} else if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.None) {
			sShapeCurrentStartX = parseInt(oDraggingSource.dragStartPoint.shapeX, 10) + iDragDistance;
		}else if (this.getGhostAlignment() === sap.gantt.dragdrop.GhostAlignment.End) {
			sShapeCurrentStartX = x - parseInt(oDraggingSource.dragStartPoint.shapeWidth, 10);
		}
		var sShapeCurrentEndX = sShapeCurrentStartX + parseInt(oDraggingSource.dragStartPoint.shapeWidth, 10);
		var sNewStartTime, sNewEndTime;
		if (Core.getConfiguration().getRTL() === true) {
			sNewStartTime = this.getAxisTime().viewToTime(sShapeCurrentEndX).getTime();
			sNewEndTime = this.getAxisTime().viewToTime(sShapeCurrentStartX).getTime();
		} else {
			sNewStartTime = this.getAxisTime().viewToTime(sShapeCurrentStartX).getTime();
			sNewEndTime = this.getAxisTime().viewToTime(sShapeCurrentEndX).getTime();
		}
		/*
		 * Only Update the clicking shape data with the row object at the current point
		 * keep other shape data as the same as they are in sourceshapedata
		 */
		var param = this._composeParameterForClickPosition(oEvent);
		var rowInfo = param ? param.rowInfo : undefined;
		oDraggingSource.targetData = {
			"cursorTimestamp": this.getAxisTime().viewToTime(x).getTime(),
			"shapeTimestamp": {startTime: sNewStartTime, endTime: sNewEndTime},
			"mouseTimestamp": {startTime: sNewStartTime, endTime: sNewEndTime},
			"mode": this.getMode(),
			"objectInfo": rowInfo
		};
	};

	/*
	 * set draggingSource when a drag is from outside of the current chart
	 */
	GanttChart.prototype.setDraggingData = function (oDraggingSource) {
		this._oDraggingData = oDraggingSource;
		if (this._oDraggingData !== undefined) {
			this._oDraggingData.targetSvgId = this.getId();
			jQuery(document.body).unbind("mousemove.ganttChartDragDrop");
			jQuery(document).unbind("mouseup.ganttChartDragDrop");
			jQuery(document.body).bind("mousemove.ganttChartDragDrop", this._handleShapeDragging.bind(this));
			jQuery(document).bind("mouseup.ganttChartDragDrop", this._handleShapeDragEnd.bind(this));
			this._setEventStatus("dragEnter");
		}
	};

	GanttChart.prototype._onSvgMouseEnter = function (oEvent) {
		//This event is handled in the same manner as "mouseLeave"
		if (oEvent.button === 0 && oEvent.buttons !== 0 // check if the mouse left key is down
				&& oEvent.target 
				&& (oEvent.target.id === this.getId() + "-svg-ctn"
						|| oEvent.target.id === this.getId() + "-svg"
						|| this._mouseInSvgCtn(oEvent))) {
			this.fireChartDragEnter({originEvent: oEvent});
		}
	};

	GanttChart.prototype._onSvgMouseLeave = function (oEvent) {
		/*Reason not using '_bDragging': '_bDragging' is set to true until 'mousemove' is triggered, but waiting
		 * that happen may sometimes miss the timing when 'mouseleave' is triggered if the drag happens really quick*/

		//The mouseleave&mouseenter will also be triggered by shapes inside the svg, so add this "IF" condition to only 
		//handle the events triggered by svg.
		//Also, in some bounding case, when user drag a shape from one view to another view through an area full of shapes
		//the events may be only triggered by those shapes, thus the svg will never get the event, so there is a need to
		//check whether mouse is in the svg-ctn area to ensure the event got handled whenever needed
		if (oEvent.target && (oEvent.target.id === this.getId() + "-svg-ctn" 
								|| oEvent.target.id === this.getId() + "-svg" || !this._mouseInSvgCtn(oEvent))) {
			if (this._bDragStart && this._oDraggingData !== undefined) {
				this._handleDragLeave(oEvent);
			}
			this._destroyCursorLine();
			this._handleHoverLeave();
		}
	};

	GanttChart.prototype._mouseInSvgCtn = function (oEvent) {
		var $chartBodySvgCnt = jQuery(this.getDomSelectorById("svg-ctn"));
		var nVisibleWidth = $chartBodySvgCnt.width() - ((Core.getConfiguration().getRTL() || (jQuery(this.getTTVsbDom()).css("display") == "none")) ? 0 : jQuery(this.getTTVsbDom()).width());
		var nClientHeight = $chartBodySvgCnt.height();
		var oSvgCtnOffset = $chartBodySvgCnt.offset();
		var nMouseXInSvgCtn = this._getMouseXPos(oEvent) - oSvgCtnOffset.left;
		var nMouseYInSvgCtn = (oEvent.pageY || oEvent.clientY) - oSvgCtnOffset.top;
		if (nMouseYInSvgCtn >= 0 && nMouseYInSvgCtn < nClientHeight
				&& nMouseXInSvgCtn >= 0 && nMouseXInSvgCtn < nVisibleWidth) {
			return true;
		}
		return false;
	};

	GanttChart.prototype._onSvgMouseDown = function (oEvent) {
		this._prepareSelection(oEvent);
		this._prepareDragging(oEvent);
		this._oShapeResizeHandler.handleShapeResize(oEvent);
	};

	GanttChart.prototype._onSvgMouseMove = function(oEvent){
		this._drawCursorLine(oEvent);
		this._handleHover(oEvent);
	};

	GanttChart.prototype._onSvgMouseUp = function (oEvent) {
		/* check if a dragging is happended, if yes, fireShapeDragEnd
		 * Otherwise check if a single click or a double click should happend
		 */
		if (oEvent.button == 2){
			this._handleRightClick(oEvent);
		}else if (oEvent.button == 0 && !this._bDragging && this._bMouseDown && !this._oShapeResizeHandler.getIsResizing()) {
			this._handleSelectionChange(oEvent);
		}
	};

	GanttChart.prototype._onSvgDoubleClick = function (oEvent) {
		if (!this._bDragging && !oEvent.ctrlKey && !oEvent.shiftKey && !this._oShapeResizeHandler.getIsResizing()) {
			var param = this._composeParameterForClickPosition(oEvent);
			this.fireChartDoubleClick({
				objectInfo: param ? param.rowInfo : undefined,
				leadingRowInfo: param ? param.leadingRowInfo : undefined,
				timestamp: param ? param.startTime.getTime() : undefined,
				svgId: this.getId() + "-svg",
				svgCoordinate: param ? param.svgPoint : undefined,
				effectingMode: this.getMode(),
				originEvent: oEvent
			});
		}
	};

	GanttChart.prototype._onSvgTouchstart = function (oEvent) {
		this._prepareSelection(oEvent);
		this._onTouchScrollStart(oEvent);
	};

	GanttChart.prototype._onSvgTouchmove = function (oEvent) {
		this._onTouchScroll(oEvent);
	};

	GanttChart.prototype._onSvgTouchend = function (oEvent) {
		if (!this._bScrolling) {
			this._handleSelectionChange(oEvent);
		}else {
			this._setEventStatus("mouseUp");
		}
	};

	GanttChart.prototype._onKeyDown = function (oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.Z && this._oTimePeriodZoomHandler.isTimePeriodZoomEnabled()) {
			this._oTimePeriodZoomHandler.invertActiveStatus();
		}
	};

	GanttChart.prototype._preventBubbleAndDefault = function (oEvent) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
		//oEvent.originalEvent.cancelBubble = true;
	};

	GanttChart.prototype._prepareSelection = function (oEvent) {
		if (!Device.support.touch && oEvent.button !== 0 ) {
			return false;
		}
		if (!this._bDragging && !this._oShapeResizeHandler.getIsResizing()) {
			this._setEventStatus("mouseDown");
		}
	};

	GanttChart.prototype._prepareDragging = function (oEvent) {
		if (oEvent.button == 0 ) {
			if (this._oTimePeriodZoomHandler && this._oTimePeriodZoomHandler.isActive()) {//handle rectangular zoom
				this._oTimePeriodZoomHandler.handleDragStart(oEvent);
				this._preventBubbleAndDefault(oEvent);
			} else {
				var oShapeData = d3.select(oEvent.target).data()[0];
				var sClassId, shapeResizingCursor;
				if (oEvent.target.getAttribute("class")){
					sClassId = oEvent.target.getAttribute("class").split(" ")[0];
					shapeResizingCursor = d3.select(oEvent.target).classed("sapUiShapeResizingCursor");
				}
				//only when the mousedown is happened to a selectable shape, the shape selection change & dragNdrop are available, but the row selection still works
				if (!shapeResizingCursor && sClassId && oShapeData && this.isShapeSelectable(oShapeData, sClassId)) {
					/**
					 * Reason to move this out of the Timeout: in scenario when user drags a shape really quick to another view, the 'dragLeave' is triggered 
					 * before this "handleShapeDragStart“ got processed because of a delay of the timeout. Then it will generate wrong drop info from "dragEnd" event
					*/
					if (this._bMouseDown){
						this._handleShapeDragStart(oEvent);
					}
					//Needed for disabling default drag and drop behaviour in Firefox. This is not harmful to the behaviour in other browsers.
					this._preventBubbleAndDefault(oEvent);
				}
			}
		}
	};

	GanttChart.prototype.syncTimePeriodZoomStatus = function (bActive){
		if (bActive){
			this._oTimePeriodZoomHandler.activate(true);
		} else {
			this._oTimePeriodZoomHandler.deactivate(true);
		}
	};

	GanttChart.prototype.syncTimePeriodZoomOperation = function (oEvent, bTimeScrollSync, sOrientation){
		this._oTimePeriodZoomHandler.syncTimePeriodZoomOperation(oEvent, bTimeScrollSync, sOrientation);
	};

	GanttChart.prototype._handleRightClick = function (oEvent) {
		var param = this._composeParameterForClickPosition(oEvent);
		this.fireChartRightClick({
			objectInfo: param ? param.rowInfo : undefined,
			leadingRowInfo: param ? param.leadingRowInfo : undefined,
			timestamp: param ? param.startTime.getTime() : undefined,
			svgId: this.getId() + "-svg",
			svgCoordinate: param ? param.svgPoint : undefined,
			effectingMode: this.getMode(),
			originEvent: oEvent
		});
	};

	GanttChart.prototype._handleClick = function(oEvent) {
		var param = this._composeParameterForClickPosition(oEvent);
		this.fireChartClick({ 
			objectInfo: param ? param.rowInfo : undefined,
			leadingRowInfo: param ? param.leadingRowInfo : undefined,
			timestamp: param ? param.startTime.getTime() : undefined,
			svgId: this.getId() + "-svg",
			svgCoordinate: param ? param.svgPoint : undefined, 
			effectingMode: this.getMode(),
			originEvent: oEvent
		});
	};

	GanttChart.prototype._drawCursorLine = function (oEvent) {
		if (this.getEnableCursorLine()) {
			var aSvg = jQuery(this.getDomSelectorById("svg"));
			// calculate svg coordinate for hover
			var oSvgPoint = this._getSvgCoodinateByDiv(aSvg[0], this._getMouseXPos(oEvent), oEvent.pageY || oEvent.clientY);

			// draw cursorLine. select svgs of all chart instances to impl synchronized cursorLine
			this._oCursorLineDrawer.drawSvg(
				d3.selectAll(".sapGanttChartSvg"),
				d3.selectAll(".sapGanttChartHeaderSvg"),
				this.getLocale(),
				oSvgPoint
			);
		}
	};

	GanttChart.prototype._destroyCursorLine = function () {
		if (this.getEnableCursorLine()) {
			this._oCursorLineDrawer.destroySvg(
				d3.selectAll(".sapGanttChartSvg"),
				d3.selectAll(".sapGanttChartHeaderSvg"));
		}
	};

	/**
	 * Handle Mouse over event on Gantt Chart SVG, fire chartMouseOver event once row index get changed.
	 * Meanwhile, trigger the mouse over browser event for the underlying tree table row in order to show
	 * the hover effect (gray background for hovered row)
	 * 
	 * @param {object} oEvent Event object
	 * @private
	 */
	GanttChart.prototype._handleHover = function (oEvent) {
		var param = this._composeParameterForClickPosition(oEvent);
		// Use leadingRowNum here to get the actual tree table row index
		var iRowIndex = param ? param.leadingRowNum - this._oTT.getFirstVisibleRow() : -1;
		iRowIndex = iRowIndex < 0 ? -1 : iRowIndex;
		var bExpandedRow = param ? param.isExpandedRow : false;

		var oShapeData = d3.select(oEvent.target).data()[0];
		//if shape data exists, go check show resizable, if yes showing the resize cursor
		if (oShapeData) {
			var pointX = oEvent.pageX - jQuery(this.getDomSelectorById("svg")).offset().left || oEvent.offsetX;
			this._oShapeResizeHandler.checkShapeResizable(oShapeData, oEvent.target, param.svgPoint ? param.svgPoint.x : pointX);
		}
		if (iRowIndex  > -1 && 
				((oShapeData !== undefined && oShapeData.uid !== this._lastHoverShapeUid)
						|| (oShapeData === undefined && this._lastHoverShapeUid !== undefined) || iRowIndex !== this._lastHoverRowIndex)) {
			this.fireChartMouseOver({
				objectInfo: param ? param.rowInfo : undefined,
				leadingRowInfo: param ? param.leadingRowInfo : undefined,
				timestamp: param ? param.startTime.getTime() : undefined,
				svgId: this.getId() + "-svg",
				svgCoordinate: param ? param.svgPoint : undefined, 
				effectingMode: this.getMode(),
				originEvent: oEvent
			});
			if (oShapeData !== undefined) {
				this._lastHoverShapeUid = oShapeData.uid;
			}else {
				this._lastHoverShapeUid = undefined;
			}
		}

		if (iRowIndex > -1 && iRowIndex !== this._lastHoverRowIndex) {
			var oTT = this._oTT;
			var oHoveredRow = oTT.getRows()[iRowIndex];
			if (oHoveredRow) {
				oTT.$().find(".sapUiTableRowHvr").trigger("mouseout");
				if (!bExpandedRow){
					oHoveredRow.$().trigger("mouseover");
				}
			}
		}
		if (iRowIndex !== this._lastHoverRowIndex) {
			this._lastHoverRowIndex = iRowIndex;
		}
	};
	GanttChart.prototype._handleDragLeave = function (oEvent) {
		this._oDraggingData.targetSvgId = undefined;
		this._setEventStatus("dragLeave");
		//if drag a shape out of a chart(view), then fire an event to Gantt
		this.fireChartDragLeave({
			//eventStatus: this._bDragging, this._mouseup, this.mousedown, or can those status already can be judged by the target(null or not?)
			originEvent: oEvent,
			draggingSource: this._oDraggingData
		});
	};

	GanttChart.prototype._handleHoverLeave = function () {
		//Trigger mouseout event from oSVG to tree table
		var oTT = this._oTT;
		oTT.$().find(".sapUiTableRowHvr").trigger("mouseleave");

		this._lastHoverShapeUid = undefined;
		this._lastHoverRowIndex = -1;
	};

	//event handler for single click on chart
	GanttChart.prototype._handleSelectionChange = function (oEvent) {
		var oShapeData = d3.select(oEvent.target).datum();
		var sClassId;
		if (oEvent.target.getAttribute("class")){
			sClassId = oEvent.target.getAttribute("class").split(" ")[0];
		}
		var oSelectionChange = {};
		if (oShapeData !== undefined && this.isShapeSelectable(oShapeData, sClassId)) {
			//handle shape or relationship selection change
			var bCtrlOrMeta = oEvent.ctrlKey || (Device.os.name === sap.ui.Device.os.OS.MACINTOSH && oEvent.metaKey);
			oSelectionChange = this._selectionChange(oShapeData, bCtrlOrMeta, oEvent.shiftKey, oEvent);
		} else {
			//handle row selection change
			var param = this._composeParameterForClickPosition(oEvent);
			if (param && !param.isExpandedRow){
				if (this.getTableProperties().selectionBehavior !== sap.ui.table.SelectionBehavior.RowSelector) {
					this._syncTTSelection(oEvent);
				}
			} else {
				// do nothing when click on expanded row
				return null;
			}
			if (this.getShapeSelectionMode() !== sap.gantt.SelectionMode.MultiWithKeyboard) {
				//Non row selection in Fiori mode, when click on row, clear all shape selection	
				oSelectionChange.shapeSelectionChange = this._oShapeSelection.clearShapeSelection();
				oSelectionChange.relationshipSelectionChange = this._oShapeSelection.clearRelationshipSelection();
			}
		}

		if (oSelectionChange.shapeSelectionChange || oSelectionChange.relationshipSelectionChange) {
			this._drawSelectedShapes();
		}

		this._setEventStatus("mouseUp");
		if (oSelectionChange.shapeSelectionChange) {
			this.fireShapeSelectionChange({
				originEvent: oEvent
			});
		}
		if (oSelectionChange.relationshipSelectionChange) {
			this.fireRelationshipSelectionChange({
				originEvent: oEvent
			});
		}
		this._handleClick(oEvent);
	};

	GanttChart.prototype._bindScrollLogicForTT = function (){
		this._bindHorizontalScroll();
		this._bindVerticalScroll();
	};

	GanttChart.prototype._bindHorizontalScroll = function () {
		this._updateScrollLeft();
		var $hsb = jQuery(this.getTTHsbDom());
		$hsb.unbind("scroll.sapUiTableHScroll");
		$hsb.unbind("scroll.sapUiTableHScrollForGanttChart", this._onHSbScroll);
		$hsb.bind("scroll.sapUiTableHScrollForGanttChart", jQuery.proxy(this._onHSbScroll, this));
	};
	
	GanttChart.prototype._bindVerticalScroll = function (){
		var $vsb = jQuery(this.getTTVsbDom());
		$vsb.unbind("scroll.sapUiTableVScrollForGanttChart", this._onVSbScroll);
		$vsb.bind("scroll.sapUiTableVScrollForGanttChart", jQuery.proxy(this._onVSbScroll, this));
	};

	GanttChart.prototype._getSvgHeight = function () {
		return this._oTT.$().find(".sapUiTableCCnt").height();
	};

	/*
	 * For internal use, called by GanttChartWithTable
	 */
	GanttChart.prototype._getRowHeights = function () {
		return this._aHeights;
	};

	GanttChart.prototype.setBaseRowHeight = function (nBaseRowHeight) {
		this.setProperty("baseRowHeight", nBaseRowHeight, true);
		this._oTT.setRowHeight(nBaseRowHeight);
		return this;
	};

	GanttChart.prototype._setInferedBaseRowHeight = function (nInferedBaseRowHeight) {
		this._iInferedBaseRowHeight = nInferedBaseRowHeight;
	};

	GanttChart.prototype.getBaseRowHeight = function () {
		/*
		 * _iInferedBaseRowHeight is base row height of left panel,
		 * its value is given by GanttChartWithTable through calling _setInferedBaseRowHeight.
		 * _iInferedBaseRowHeightOnTT value is base row height of tree table inside GanttChart,
		 * its value is given during _collectRowHeights.
		 * _iInferedBaseRowHeight is used if available, otherwise using _iInferedBaseRowHeightOnTT,
		 * because left panel has higher row height than right at times
		 */
		return this._iInferedBaseRowHeight ? this._iInferedBaseRowHeight : this._iInferedBaseRowHeightOnTT;
	};

	GanttChart.prototype._initialSvgDrawing = function () {
		if (this.getBaseRowHeight() && this._iSvgHeight != this._getSvgHeight()) {
			this._iSvgHeight = this._getSvgHeight();
			this._bTableReady = true;
			this._onTTRowUpdate();
		}
	};

	GanttChart.prototype._onHSbScroll = function (oEvent) {
		if (this._initHorizonApplied) {
			var iScrollLeft = this._getHSBScrollLeft();

			if (!this._bSuppressSetVisibleHorizon){
				var fScrollRate = this._getScrollRateByScrollLeft(iScrollLeft);
				var oTimeHorizon = this._getVisibleHorizonByScrollRate(fScrollRate);
				this._updateVisibleHorizon(oTimeHorizon);
			}
			this._bSuppressSetVisibleHorizon = false;

			if (!this._bSuppressSyncEvent){
				var oAxisTimeStrategy = this.getAxisTimeStrategy();
				var oVisibleHorizon = oAxisTimeStrategy.getVisibleHorizon();
				var iGanttVisibleWidth = this.getVisibleWidth();

				this.fireHorizontalScroll({
					scrollSteps: iScrollLeft,
					startTime: oVisibleHorizon.getStartTime(),
					endTime: oVisibleHorizon.getEndTime(),
					visibleWidth: iGanttVisibleWidth
				});
			}
			this._bSuppressSyncEvent = false;
		}
	};

	GanttChart.prototype._getScrollRateByScrollLeft = function (iScrollLeft){
		var $HSBContent = this._oTT.$(sap.ui.table.SharedDomRef.HorizontalScrollBar + "-content");
		var nScrollWidth = $HSBContent.width();
		var nVisibleWidth = this.getVisibleWidth();
		var fScrollRate = 0;

		if (nScrollWidth !== nVisibleWidth){
			//ie, ff, safari and cr are different in scroll bar handling in RTL mode. All below comments describe the behavior in RTL mode, not LTR mode
			//ie: The scrollLeft() of scroll bar returns 0 if the scroll bar indicator is at the most right side.
			//It means in ie, the scrollLeft returns the width of the invisible part of DOM element which is at the right of the scroll bar
			//cr: The scrollLeft() of scroll bar returns 0 if the scroll bar indicator is at the most left side
			//It means in cr, the scrollLeft returns the width of the hidden DOM element which is at the left of the scroll bar
			//ff: The scrollLeft() returns negative value. The scrollLeftRTL() returns positive value.
			//safari: The scrollLeft() and scrollLeftRTL() return negative value. 
			//The scrollLeft() returns the opposite value of the width of the invisible part of the DOM element which is at the right of the scroll bar
			//To keep the fLeftOffsetRate value consistent, the fLeftOffsetRate always means 
			// (The width of hidden part at the left of scroll bar) / ( The total width - the visible width of the chart )
			//So for 4 browsers, the handling are all different:
			//ie: we doesn't use the value of scrollLeft() directly, because in ie, scrollLeft() returns the hidden part at right of scroll bar, do the conversion for ie
			//cr: no special handling;
			//ff: before call updateLeftOffsetRate, use the scrollLeftRTL() to get the value and pass it to nPosition
			//safari: similar as ie, but use the opposite value of scrollLeft()
			if (Core.getConfiguration().getRTL() === true && Device.browser.msie) {
				fScrollRate = (nScrollWidth - iScrollLeft - nVisibleWidth) / (nScrollWidth - nVisibleWidth);
			} else if (Core.getConfiguration().getRTL() === true && Device.browser.safari) {
				fScrollRate = (nScrollWidth + iScrollLeft - nVisibleWidth) / (nScrollWidth - nVisibleWidth); 
			} else {
				fScrollRate = iScrollLeft / (nScrollWidth - nVisibleWidth);
			}

			fScrollRate = fScrollRate < 0 ? 0 : fScrollRate;
			fScrollRate = fScrollRate > 1 ? 1 : fScrollRate;
		}

		return fScrollRate;
	};

	GanttChart.prototype._getScrollRateByHorizon = function (oTimeHorizon){
		var fScrollRate = 0;
		var nTotalContentWidth = this._nUpperRange - this._nLowerRange;
		var nVisibleWidth = this.getVisibleWidth();

		if (this._initHorizonApplied && nTotalContentWidth !== nVisibleWidth){
			var nDatePosition;

			if (Core.getConfiguration().getRTL()) {
				nDatePosition = this.getAxisTime().timeToView(Format.abapTimestampToDate(oTimeHorizon.getEndTime()), true);
				fScrollRate = nDatePosition / (nTotalContentWidth - nVisibleWidth);
			} else {
				nDatePosition = this.getAxisTime().timeToView(Format.abapTimestampToDate(oTimeHorizon.getStartTime()), true);
				fScrollRate = nDatePosition / (nTotalContentWidth - nVisibleWidth);
			}

			fScrollRate = fScrollRate < 0 ? 0 : fScrollRate;
			fScrollRate = fScrollRate > 1 ? 1 : fScrollRate;
		}

		return fScrollRate;
	};

	GanttChart.prototype._getHSBScrollLeftByScrollRate = function (fScrollRate){
		var $HSBContent = this._oTT.$(sap.ui.table.SharedDomRef.HorizontalScrollBar + "-content");
		var nScrollWidth = $HSBContent.width();
		var nVisibleWidth = this.getVisibleWidth();
		var nScrollLeft = fScrollRate * (nScrollWidth - nVisibleWidth);
		if (Core.getConfiguration().getRTL() && Device.browser.msie) {
			nScrollLeft = nScrollWidth - nVisibleWidth - nScrollLeft;
		} else if (Core.getConfiguration().getRTL() && Device.browser.safari) {
			nScrollLeft = 0 - (nScrollWidth - nVisibleWidth - nScrollLeft);
		}
		return nScrollLeft;
	};

	GanttChart.prototype._getContentScrollLeftByScrollRate = function (fScrollRate){
		var nTotalContentWidth = this._nUpperRange - this._nLowerRange;
		var nVisibleWidth = this.getVisibleWidth();

		var nScrollLeft = fScrollRate * (nTotalContentWidth - nVisibleWidth);
		return nScrollLeft;
	};

	GanttChart.prototype._getVisibleHorizonByScrollRate = function (fScrollRate){
		var nContentScrollLeft = this._getContentScrollLeftByScrollRate(fScrollRate);
		var oTotalHorizon = this.getAxisTimeStrategy().getTotalHorizon();
		var oVisibleHorizon;
		var oTimeHorizonSetting = {};
		var bRTL = Core.getConfiguration().getRTL();
		if (fScrollRate === 0) {
			oTimeHorizonSetting.startTime = bRTL ? undefined : oTotalHorizon.getStartTime();
			oTimeHorizonSetting.endTime = bRTL ? oTotalHorizon.getEndTime() : undefined;
		} else if (fScrollRate === 1){
			oTimeHorizonSetting.startTime = bRTL ? oTotalHorizon.getStartTime() : undefined;
			oTimeHorizonSetting.endTime = bRTL ? undefined : oTotalHorizon.getEndTime();
		} else {
			var oTime = this.getAxisTime().viewToTime(nContentScrollLeft, true);
			oTimeHorizonSetting.startTime = bRTL ? undefined : oTime;
			oTimeHorizonSetting.endTime = bRTL ? oTime : undefined;
		}

		//In here we only pass the start/end time, because if give a end/start time the zoom rate may be change.
		//But in this function zoom rate can't be changed bacause this function is triggered by horizontal scroll.
		//Then in AxisTimeStrategy we will calucate a suitable end/start time.
		oVisibleHorizon = new TimeHorizon(oTimeHorizonSetting);
		return oVisibleHorizon;
	};

	/**
	 * @private
	 * this function should only be triggered by sync scroll, in this function will remove the scroll event deadlock
	 */
	GanttChart.prototype.syncVisibleHorizon = function (oTimeHorizon, iVisibleWidth){
		this._bSuppressSyncEvent = true;

		var oTargetVisibleHorizon;
		if (iVisibleWidth !== undefined) {
			var iCurrentVisibleWidth = this.getVisibleWidth();
			oTargetVisibleHorizon = Utility.calculateHorizonByWidth(oTimeHorizon, iVisibleWidth, iCurrentVisibleWidth);
		} else {
			oTargetVisibleHorizon = oTimeHorizon;
		}
		this._updateVisibleHorizon(oTargetVisibleHorizon);
	};

	GanttChart.prototype._onVSbScroll = function () {
		if (!this._mTimeouts._drawSvg) {
			this.$().find(".sapGanttChartSvg").css("transform", "translateY(" + (-this._oTT.$().find(".sapUiTableCCnt").scrollTop()) + "px)");
		}

		this.fireVerticalScroll({
			scrollSteps: this._oTT.getFirstVisibleRow(),
			scrollPosition: jQuery(this.getTTVsbDom()).scrollTop()
		});
	};

	GanttChart.prototype._hSbScrollLeft = function (nScrollPosition) {
		var $chartBodySvgCnt = jQuery(this.getDomSelectorById("svg-ctn"));
		var $chartHeaderSvgCnt = jQuery(this.getDomSelectorById("header"));
		var nScrollLeft;
		if (Core.getConfiguration().getRTL() === true) {
			//Header and Body should have same width. Use header to calculate the scroll position in RTL mode
			if (!Device.browser.safari) {
				nScrollLeft = this._oStatusSet.aViewBoundary[1] - $chartHeaderSvgCnt.width() - nScrollPosition;
				if ( nScrollLeft < 0) {
					nScrollLeft = 0;
				}
			} else {
				nScrollLeft = 0 - nScrollPosition;
			}
		} else {
			nScrollLeft = nScrollPosition;
		}

		//scroll divs
		if (Core.getConfiguration().getRTL() === true && Device.browser.firefox) {
			if (Math.abs($chartBodySvgCnt.scrollLeftRTL() - nScrollLeft) > 1) {
				$chartBodySvgCnt.scrollLeftRTL(nScrollLeft);
			}
			if (Math.abs($chartHeaderSvgCnt.scrollLeftRTL() - nScrollLeft) > 1) {
				$chartHeaderSvgCnt.scrollLeftRTL(nScrollLeft);
			}
		} else {
			if (Math.abs($chartBodySvgCnt.scrollLeft() - nScrollLeft) > 1) {
				$chartBodySvgCnt.scrollLeft(nScrollLeft);
			}
			if (Math.abs($chartHeaderSvgCnt.scrollLeft() - nScrollLeft) > 1) {
				$chartHeaderSvgCnt.scrollLeft(nScrollLeft);
			}
		}
	};

	GanttChart.prototype.jumpToPosition = function(value) {
		if (value instanceof Date) {
			this._updateVisibleHorizon(new TimeHorizon({
				startTime: value
			}));
		} else if (value instanceof Array) {
			this._updateVisibleHorizon(new TimeHorizon({
				startTime: value[0],
				endTime: value[1]
			}));
		} else if (value === undefined) {
			this._updateVisibleHorizon(this.getAxisTimeStrategy().getTotalHorizon());
		}

	};

	GanttChart.prototype._updateVisibleHorizon = function(oTimeHorizon){
		var oAxisTimeStrategy = this.getAxisTimeStrategy();
		var nVisibleWidth = this.getVisibleWidth();
		oAxisTimeStrategy.updateGanttVisibleWidth(nVisibleWidth);
		oAxisTimeStrategy.setVisibleHorizon(oTimeHorizon);
	};

	GanttChart.prototype._onTTRowUpdate = function () {
		if (this._bTableReady) {
			this._syncSvgHeightWithTT();
			this._syncSvgDataWithTT();
			this._draw(true);
		}
	};

	GanttChart.prototype._syncSvgHeightWithTT = function () {
		var $svgCtn = this.$().find(".sapGanttChartSvgCtn");
		$svgCtn.height(this._getSvgHeight());
		var $svg = this.$().find(".sapGanttChartSvg");
		$svg.height($(this._oTT.$().find(".sapUiTableCtrlRowScroll:not(.sapUiTableCHT)")).height());
	};

	GanttChart.prototype._syncSvgDataWithTT = function () {
		var oBinding = this._oTT.getBinding("rows");
		if (!oBinding) {
			return false;
		}

		var iFirstVisibleRow = this._oTT.getFirstVisibleRow();
		var iVisibleRowCount = this._getVisibleRowCount();

		// structured data for drawing by D3
		this._aFilteredRowData = [];
		this._aNonVisibleShapeData = [];
		// temporary variables
		var _aTopNonVisibleShapeData = [];
		var _aBottomNonVisibleShapeData = [];
		// default visible range
		var aVisibleRange = [iFirstVisibleRow, iFirstVisibleRow + iVisibleRowCount - 1];
		var bIfRelationshipsExist = this._aRelationshipsContexts && this._aRelationshipsContexts.length > 0;

		if (bIfRelationshipsExist) {
			oBinding.getContexts(0, 0);// get all contexts

			if (iFirstVisibleRow > 0) {
				_aTopNonVisibleShapeData = this._getDrawingData([0, iFirstVisibleRow - 1]);
			}
			_aBottomNonVisibleShapeData = this._getDrawingData([iFirstVisibleRow + iVisibleRowCount, oBinding.getLength() - 1]);

			oBinding.getContexts(aVisibleRange[0], aVisibleRange[1]);// get contexts of visible area
		}

		this._aFilteredRowData = this._getDrawingData(aVisibleRange);

		// merge _aTopNonVisibleShapeData with _aBottomNonVisibleShapeData
		this._aNonVisibleShapeData = _aTopNonVisibleShapeData.concat(_aBottomNonVisibleShapeData);

		var iBaseRowHeight = this.getBaseRowHeight();
		if (!iBaseRowHeight) {
			iBaseRowHeight = 0;
		}
		this._oAxisOrdinal = this._createAxisOrdinal(this._aFilteredRowData, iBaseRowHeight, 0);

		// this._replaceDataRef(); // replace ref --TODO: move this logic to app
		this._cacheObjectPosition(this._aFilteredRowData, this._oAxisOrdinal);	// +y, +rowHeight
		this._cacheObjectPosition(_aTopNonVisibleShapeData, this._oAxisOrdinal, true);	// +y, +rowHeight
		this._cacheObjectPosition(_aBottomNonVisibleShapeData, this._oAxisOrdinal, false);	// +y, +rowHeight

		if (!this._aVisibleRange || this._aVisibleRange[0] !== aVisibleRange[0] || this._aVisibleRange[1] !== aVisibleRange[1]) {
			this._aVisibleRange = aVisibleRange;
			return true;
		}

		return false;
	};

	/*
	 * Calculate [rowHeight] and [y] property for each object based on a given axisY
	 * @param {object[]} objects Shape data array for whose entity we will add y and rowHeight properties to.
	 * @param {object} axisY AxisOrdinal object.
	 * @param {boolean} bAboveOrUnderVisibleArea Optional. Only used for drawing elements in the non visible area.
	 * 		if undefined, means the objects are in the visible area
	 * 		if true, means the objects are above the visible area, then y are -100
	 * 		if false, means the objects are under the visible area, then y are axisY.getViewRange()[1]+100
	 * @return undefined
	 */
	GanttChart.prototype._cacheObjectPosition = function (objects, axisY, bAboveVisibleArea) {
		if (objects && objects.length > 0) {
			if (bAboveVisibleArea === true) {
				for (var i = 0; i < objects.length; i++) {
					objects[i].y = -100;
					objects[i].rowHeight = axisY.getViewBandWidth();
				}
			} else if (bAboveVisibleArea === false) {
				for (var j = 0; j < objects.length; j++) {
					objects[j].y = axisY.getViewRange()[1] + 100;
					objects[j].rowHeight = axisY.getViewBandWidth();
				}
			} else {
				var aVisibleRow = [];
				var aVisibleRowSpan = [];
				for (var k = 0; k < objects.length; k++) {
					objects[k].y = axisY.elementToView(objects[k].uid);

					if (k > 0) {
						objects[k - 1].rowHeight = objects[k].y - objects[k - 1].y;
					}

					if (objects[k].visibleRowSpan) {
						objects[k].visibleRowHeight = objects[k].visibleRowSpan * axisY.getViewBandWidth();
						aVisibleRow.push(objects[k].uid);
						aVisibleRowSpan.push(objects[k].visibleRowSpan);
					}
				}
				objects[objects.length - 1].rowHeight = axisY.getViewRange()[1] - objects[objects.length - 1].y;
				this._oAxisOrdinalOfVisibleRow = new AxisOrdinal(aVisibleRow, aVisibleRowSpan, this.getBaseRowHeight(), 0);
			}
		}
	};
	
	/*
	 * Loop this._aRelationshipsContexts and call getObject method on each entity and then push the value into this._aRelationships
	 */
	GanttChart.prototype._prepareRelationshipDataFromModel = function () {
		this._aRelationships = [];
		if (this._aRelationshipsContexts) {
			for (var i = 0; i < this._aRelationshipsContexts.length; i++) {
				var oRelationship = this._aRelationshipsContexts[i].getObject();
				if (oRelationship !== undefined) {
					this._aRelationships.push(oRelationship);
				}
			}
		}
		Utility.generateUidForRelationship(this._aRelationships, this.getRlsIdName());
	};

	GanttChart.prototype._createAxisOrdinal = function (aShapeData, iBaseRowHeight, fShift) {
		var aRowNames = aShapeData.map(function (oRow) {
			return oRow.uid;
		});
		var aRowHeights = aShapeData.map(function (oRow) {
			if (oRow.rowSpan) {
				return oRow.rowSpan;
			} else {
				//For blank rows in hierarchy, just return 1, since there is no place to specify its rowSpan now...
				return 1;
			}
		});

		return new AxisOrdinal(aRowNames, aRowHeights, iBaseRowHeight, fShift);
	};

	GanttChart.prototype.getFilteredRowData = function(aRange) {
		return this._aFilteredRowData;
	};

	GanttChart.prototype._getDrawingData = function(aRange) {
		var fAddDataToExpandedRows = function(aExpandedRows, index, sDataType, oData) {
			if (!aExpandedRows[index]) {
				aExpandedRows.push({});
			} 
			if (!aExpandedRows[index][sDataType]) {
				aExpandedRows[index][sDataType] = [];
			}
			aExpandedRows[index][sDataType].push(oData);
		};

		var i, j, k, l, oRow, sChartScheme;
		var sRowIdName = this.getRowIdName();
		var sRowTypeName = this.getRowTypeName();

		var oBinding = this._oTT.getBinding("rows");
		var oBindingInfo = this._oTT.getBindingInfo("rows");

		var aRowList = [];
		if (oBinding !== undefined){
			var oModel = oBinding.getModel();
			var aShapeDataNames = this.getShapeDataNames();
			for (i = aRange[0]; i <= aRange[1]; i++) {
				var oContext = this._oTT.getContextByIndex(i);
				if (!oContext) {
					continue;
				} else {
					oRow = oContext.getObject();
					if (!oRow){
						continue;
					}
				}
				var rowSpan = 1;
				sChartScheme = this._oObjectTypesConfigMap[oRow[sRowTypeName]] ?
					this._oObjectTypesConfigMap[oRow[sRowTypeName]].getMainChartSchemeKey() :
					sap.gantt.config.DEFAULT_CHART_SCHEME_KEY;
				if (oRow[sRowTypeName]) {
					var oChartScheme = this._oChartSchemesConfigMap[sChartScheme];
					if (oChartScheme) {
						rowSpan = oChartScheme.getRowSpan();
					}
				}
				var mainRow = {
						"bindingObj": oBinding,
						"bindingInfo": oBindingInfo,
						"contextObj": oContext,
						"data": oRow,
						"id": oRow[sRowIdName],
						"type": oRow[sRowTypeName],
						"rowSpan": rowSpan,
						"chartScheme": sChartScheme,
						"rowIndex": i,
						"index": 0,
						"visibleRowSpan": rowSpan
					};
				
				aRowList.push(mainRow);
				
				// construct data for odata binding
				if (!this._bJSONTreeBinding) {
					/* for shape data, we support below cases:
					1. no shape classes set shapeDataName, then row data will be used as shape data;
					2. all shape classes set shapeDataName, then shape classes consume shape data;
					mixture: some shape classes set shapeDataName and some don't, this is NOT supported. */
					if (aShapeDataNames && aShapeDataNames.length > 0) {
						for (j = 0; j < aShapeDataNames.length; j++) {
							var sShapeName;
							if (typeof aShapeDataNames[j] === "string") {
								sShapeName = aShapeDataNames[j];
							} else {
								sShapeName = aShapeDataNames[j].name;
							}
							var aShapeDataPath = oContext.getProperty(sShapeName);//e.g. ["HeaderDetail('0%20')","HeaderDetail('48%20')"]
							var oShapeData;
							if (aShapeDataPath) {
								mainRow.data[sShapeName] = [];
								for (k = 0; k < aShapeDataPath.length; k++) {
									var sShapeDataPath = aShapeDataPath[k];
									//aShapeDataPath may have already been shape data objects
									if (typeof sShapeDataPath === "string") {
										oShapeData = oModel.getData("/" + sShapeDataPath);
									} else {
										oShapeData = sShapeDataPath;
									}
									mainRow.data[sShapeName].push(oShapeData);
								}
							}
						}
					}
				}
	
				// generate uid for row and shapes
				Utility.generateRowUid([mainRow], this._oObjectTypesConfigMap, aShapeDataNames, undefined, sRowIdName);
	
				// for expanded row
				var sUid = oRow.uid;
				if (sUid && this._oRowStatusMap[sUid]) {
					for (sChartScheme in this._oRowStatusMap[sUid]) {
						var sMode;
						if (this._oChartSchemesConfigMap[sChartScheme] && this._oChartSchemesConfigMap[sChartScheme].getModeKey() && this._oChartSchemesConfigMap[sChartScheme].getModeKey() !== sap.gantt.config.DEFAULT_MODE_KEY) {
							sMode = this._oChartSchemesConfigMap[sChartScheme].getModeKey();
						} else {
							sMode = this.getMode();
						}
						var oSchemeInfo = this._collectDataNameForValidChartScheme(sChartScheme, sMode);
						if (oSchemeInfo && oSchemeInfo.drawData) {
							var maxIndex = 0;
							var aExpandedRows = [{}];
							//get the maximum number of valid expanded row
							for (j = 0; j < oSchemeInfo.drawData.length; j++) {
								if (!oRow[oSchemeInfo.drawData[j]]) {
									continue;
								}
								for (k = 0; k < oRow[oSchemeInfo.drawData[j]].length; k++) {
									var iRowIndex = oRow[oSchemeInfo.drawData[j]][k][oSchemeInfo.rowIndexName];
									if (iRowIndex && maxIndex < iRowIndex){
										maxIndex = iRowIndex;
									}
								}
							}
	
							//only if there is valid data to expand
							if (maxIndex > 0) {
								for (j = 0; j < oSchemeInfo.drawData.length; j++) {
									if (!oRow[oSchemeInfo.drawData[j]]) {
										continue;
									}
									for (k = 0; k < oRow[oSchemeInfo.drawData[j]].length; k++) {
										var index = oRow[oSchemeInfo.drawData[j]][k][oSchemeInfo.rowIndexName];
										if (index) {
											fAddDataToExpandedRows(aExpandedRows, index, oSchemeInfo.drawData[j], oRow[oSchemeInfo.drawData[j]][k]);
										} else {
											//check for data without valid row index, put them in all expanded rows
											for (l = 1; l <= maxIndex; l++) {
												fAddDataToExpandedRows(aExpandedRows, l, oSchemeInfo.drawData[j], oRow[oSchemeInfo.drawData[j]][k]);
											}
										}
									}
								}
	
								for (j = 1; j <= maxIndex; j++) {
									var oExpandedRow = {
										"bindingObj": oBinding,
										"bindingInfo": oBindingInfo,
										"data": aExpandedRows[j],
										"id":  oRow[sRowIdName],
										"type":  oRow[sRowTypeName],
										"parentId": mainRow.id,
										"rowSpan": oSchemeInfo.rowSpan,
										"chartScheme": sChartScheme,
										"rowIndex": i,
										"index": j, // > 0
										"icon": this._oChartSchemesConfigMap[sChartScheme].getIcon(),
										"closeIcon": "./image/closeChart.png",
										"name": this._oChartSchemesConfigMap[sChartScheme].getName()
									};
									Utility.generateRowUid([oExpandedRow], this._oObjectTypesConfigMap, aShapeDataNames, undefined, sRowIdName);
									aRowList.push(oExpandedRow);
									mainRow.visibleRowSpan += oSchemeInfo.rowSpan;
								}
								
							}
						}
					}
					this._oRowStatusMap[sUid].visibleRowSpan = mainRow.visibleRowSpan;
				}
			}
		}
		return aRowList;
	};

	GanttChart.prototype._prepareVerticalDrawingRange = function() {
		var nLastBindingRow = this._oTT.getBinding("rows").getLength() - 1;
		if (nLastBindingRow < 0) {
			return [0, -1];
		}
		var nFirstVisibleRow = this._oTT.getFirstVisibleRow();
		var nLastVisibleRow = nFirstVisibleRow + this._getVisibleRowCount() - 1;
		var nFirstDrawingRow = nFirstVisibleRow;
		var nLastDrawingRow = nLastVisibleRow < nLastBindingRow ? nLastVisibleRow : nLastBindingRow;
		return [nFirstDrawingRow, nLastDrawingRow];
	};

	GanttChart.prototype._prepareHorizontalDrawingRange = function () {
		//oStatusSet must keep the value of LTR mode because other functions use it
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		var nVisibleWidth = this.getVisibleWidth();

		if (!this._oStatusSet) {
			this._updateScrollWidth();
		}

		var nScrollLeft = this._getContentScrollLeft();
		if (this._oStatusSet) {
			if ((nVisibleWidth >= nContentWidth || (this._oStatusSet.aViewBoundary[0] <= nScrollLeft - this._oStatusSet.nOffset &&
				this._oStatusSet.aViewBoundary[1] >= nScrollLeft + nVisibleWidth - this._oStatusSet.nOffset))) {
				if (!this._mTimeouts._drawSvg) {
					this._updateScrollLeft();
					this._scrollSvg();
				}
				return false;
			}
		}

		var nWidth = nVisibleWidth * (1 + this._fExtendFactor * 2);
		var nOffset = nScrollLeft - nVisibleWidth * this._fExtendFactor;
		if (nOffset < this._nLowerRange) {
			nWidth += nOffset;
			nOffset = 0;
		}
		if (nOffset + nWidth > this._nUpperRange) {
			nWidth = this._nUpperRange - nOffset;
		}

		//this call really set the SVG scroll left, so the end time of visible horizon is useless
		//so the core drawing logic is: zoom rate + offset
		this.getAxisTime().setViewOffset(nOffset);

		if (nWidth < 0){
			return false;
		} 
		this._oStatusSet = {
				nWidth: nWidth,
				nOffset: nOffset,
				nScrollLeft: nScrollLeft,
				aViewBoundary: [0, nWidth],
				aTimeBoundary: [this.getAxisTime().viewToTime(0), this.getAxisTime().viewToTime(nWidth)],
				bRTL: Core.getConfiguration().getRTL()
		};

		return true;
	};

	GanttChart.prototype._draw = function (bForced) {
		if (!this._bTableReady) {
			return;
		}
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		if (nContentWidth <= 2) {
			return;
		}
		var nVisibleWidth = this.getVisibleWidth();
		if (!nVisibleWidth || nVisibleWidth <= 0 || nVisibleWidth > document.body.clientWidth) {
			return;
		}

		var oSyncZoomStrategyResult = this.getAxisTimeStrategy().syncContext(nVisibleWidth);
		this.fireEvent("_zoomInfoUpdated", oSyncZoomStrategyResult);

		if (oSyncZoomStrategyResult.axisTimeChanged) {
			this.setProperty("timeZoomRate", this.getAxisTime().getZoomRate(), true);
			this.resetWidthInfo();
		}


		if (!this._prepareHorizontalDrawingRange() && !bForced) {
			return;
		}
		this._updateTableRowHeights();
		var that = this;

		this._mTimeouts._drawSvg = this._mTimeouts._drawSvg || window.setTimeout(function() {
			that._drawSvg();
		}, 0);
	};

	/**
	 * @private
	 */
	GanttChart.prototype.getVisibleWidth = function () {
		var $svgCtn = jQuery(this.getDomSelectorById("svg-ctn"));
		if (!$svgCtn) {
			return null;
		}

		var nVisibleWidth = $svgCtn.width() - ((Core.getConfiguration().getRTL()) ? 0 : jQuery(this.getTTVsbDom()).width());
		if (!nVisibleWidth || nVisibleWidth <= 0) {
			return null;
		}

		return nVisibleWidth;
	};

	GanttChart.prototype._updateScrollWidth = function () {
		var nContentWidth = this._nUpperRange - this._nLowerRange;
		//If use fullscreen zoom strategy, the total horizon and visible horizon is equal,
		//but if we use the width directly, buttom will show the unnecessary horizontal scroll bar,
		//so we have to minus 4px.
		this._oColumn.setWidth((nContentWidth - 4) + "px");
	};

	GanttChart.prototype._updateScrollLeft = function (bUpdateVisibleHorizon) {

		var $hsb = jQuery(this.getTTHsbDom());
		var nScrollLeft = this._calHSBScrollLeft();

		var nCurrentScrollLeft = this._getHSBScrollLeft($hsb);

		if (Math.abs(nCurrentScrollLeft - nScrollLeft) > 1) {
			this._bSuppressSetVisibleHorizon = !bUpdateVisibleHorizon;
			if ((Core.getConfiguration().getRTL() === true && Device.browser.firefox)) {
				$hsb.scrollLeftRTL(nScrollLeft);
			} else {
				$hsb.scrollLeft(nScrollLeft);
			}
		} else if (this._forceHsbScrollSync(nCurrentScrollLeft, nScrollLeft)) {
			this._bSuppressSetVisibleHorizon = !bUpdateVisibleHorizon;
			this._onHSbScroll();
		}
	};

	GanttChart.prototype._forceHsbScrollSync = function (nCurrentScrollLeft, nTargetScrollLeft){
		//if currently, the visible horizon has been changed
		//we need to force the horizontal scroll sync, because jumpTo and mouseWheelZoom both rely on
		//this to sync between views
		if (this._oLastVisibleHorizon) {
			var oVisibleHorizon = this.getAxisTimeStrategy().getVisibleHorizon();
			if (oVisibleHorizon && (this._oLastVisibleHorizon.getStartTime() != oVisibleHorizon.getStartTime()
					|| this._oLastVisibleHorizon.getEndTime() != oVisibleHorizon.getEndTime())) {
				this._oLastVisibleHorizon = oVisibleHorizon;
				return true;
			}
		}
		return false;
	};

	GanttChart.prototype._calHSBScrollLeft = function (){
		var oTimeHorizon = this.getAxisTimeStrategy().getVisibleHorizon();
		var fScrollRate = this._getScrollRateByHorizon(oTimeHorizon);
		var nScrollLeft = this._getHSBScrollLeftByScrollRate(fScrollRate);
		return nScrollLeft;
	};

	/*
	 *Firefox scrollLeft doesn't work in RTL mode if passing positive number, must use scrollLeftRTL or passing negative number to scrollLeft()
	 *To make the algorithm consistent, use scrollLeftRTL
	 */
	GanttChart.prototype._getHSBScrollLeft = function ($hsb){
		if (!$hsb) {
			$hsb = jQuery(this.getTTHsbDom());
		}
		return (Core.getConfiguration().getRTL() === true && Device.browser.firefox) ? $hsb.scrollLeftRTL() : $hsb.scrollLeft();
	};

	GanttChart.prototype._scrollSvg = function () {
		var $svg = jQuery(this.getDomSelectorById("svg"));
		var $header = jQuery(this.getDomSelectorById("header-svg"));
		if (Math.abs(this._oStatusSet.nWidth - $svg.width()) > 1) {
			$svg.width(this._oStatusSet.nWidth + ((Core.getConfiguration().getRTL()) ? 0 : jQuery(this.getTTVsbDom()).width()));
		}
		if (Math.abs(this._oStatusSet.nWidth - $header.width()) > 1) {
			$header.width(this._oStatusSet.nWidth + ((Core.getConfiguration().getRTL()) ? 0 : jQuery(this.getTTVsbDom()).width()));
		}

		var nVisibleWidth = this.getVisibleWidth();
		var nScrollLeft = this._getContentScrollLeft();

		if (Core.getConfiguration().getRTL() === true && !Device.browser.msie) {
			//Refer to comments in updateLeftOffsetRate, since the scrollLeft() in RTL in ie already returns the value of hidden part at right, 
			//so no special handling for ie in RTL here.
			this._hSbScrollLeft(this._oStatusSet.nOffset - nScrollLeft + this._oStatusSet.nWidth - nVisibleWidth);
		} else {
			this._hSbScrollLeft(nScrollLeft - this._oStatusSet.nOffset);
		}
	};

	GanttChart.prototype._getContentScrollLeft = function (){
		var oTimeHorizon = this.getAxisTimeStrategy().getVisibleHorizon();
		var fScrollRate = this._getScrollRateByHorizon(oTimeHorizon);
		var nScrollLeft = this._getContentScrollLeftByScrollRate(fScrollRate);

		return nScrollLeft;
	};

	GanttChart.prototype._drawSvg = function () {
		jQuery.sap.measure.start("GanttChart _drawSvg","GanttPerf:GanttChart _drawSvg function");

		if (!this._initHorizonApplied) {
			this._prepareHorizontalDrawingRange();
			this._initHorizonApplied = true;
			//first update scroll left, we have to reset the visible horizon
			this._updateScrollLeft(true);
		} else {
			this._updateScrollLeft();
		}

		// before draw
		jQuery(this.getDomSelectorById("svg-ctn")).css("visibility", "hidden");
		this._scrollSvg();
		jQuery(this.getDomSelectorById("svg-ctn")).css("visibility", "visible");
		this._sUiSizeMode = Utility.findSapUiSizeClass(this);

		// draw
		this._drawCalendarPattern();
		this._drawHeader();
		this._drawNowLine();
		this._drawVerticalLine();
		this._drawExpandedBackground();
		this._drawShapes();
		this._drawSelectedShapes();
		this._drawAdhocLine();

		// after draw
		delete this._mTimeouts._drawSvg;

		this.$().find(".sapGanttChartSvg").css("transform", "translateY(" + (-this._oTT.$().find(".sapUiTableCCnt").scrollTop()) + "px)");
		this.fireEvent("_shapesUpdated", {aSvg: jQuery(this.getDomSelectorById("svg"))});

		jQuery.sap.measure.end("GanttChart _drawSvg");
	};

	GanttChart.prototype._drawHeader = function () {
		var $headerDom = jQuery(this.getDomRef()).find(".sapGanttChartHeader");
		var nSvgHeight = $headerDom.height();
		var oHeaderSvg = d3.select(jQuery(this.getDomRef()).find(".sapGanttChartHeaderSvg").get(0));
		oHeaderSvg.attr("height", nSvgHeight);

		// Split the total SVG height as 5 parts for drawing 
		// label0 (MM YYYY), label1 (DD) and vertical line (|)
		var nfirstRowYOffset = nSvgHeight / 5 * 2;
		var nMiddleLineYOffset = nSvgHeight / 5 * 4;
		var nSecondRowYOffset = nSvgHeight / 5 * 4;
		var oAxisTimeStrategy = this.getAxisTimeStrategy();

		var aLabelList = this.getAxisTime().getTickTimeIntervalLabel(
				oAxisTimeStrategy.getTimeLineOption(), null, [0, this._oStatusSet.nWidth]);

		// append group
		oHeaderSvg.selectAll("g").remove();
		var oGroupSvg = oHeaderSvg.append("g");

		// append text for labels on first row
		oGroupSvg.selectAll("label0")
			.data(aLabelList[0])
			.enter()
			.append("text")
			.classed("sapGanttTimeHeaderSvgText0", true)
			.text(function (d) {
				return d.label;
			}).attr("x", this._getXwithOffset).attr("y", function (d) {
				return nfirstRowYOffset;
			}).attr("text-anchor",  "start");

		// append text for labels on second row
		oGroupSvg.selectAll("label1")
			.data(aLabelList[1])
			.enter()
			.append("text")
			.classed("sapGanttTimeHeaderSvgText1", true)
			.text(function (d) {
				return d.label;
			}).attr("x", this._getXwithOffset).attr("y", function (d) {
				return nSecondRowYOffset;
			});

		//IE can't render SVG text in rtl situation.This IE bug has not been fixed (developer.microsoft.com/en-us/microsoft-edge/platform/issues/817823/)
		//There is a mistake when set text-anchor to "end".In the meantime , SVG text don't support dx in IE.So I use function translate to change postion x when situation is IE and RTL.
		//But it will low the performance, so it should be set text-anchor to "end" to get ideal result when IE fix his bug.
		if ((Device.browser.msie || Device.browser.edge) && Core.getConfiguration().getRTL()) {
			d3.selectAll(".sapGanttChartHeader .sapGanttTimeHeaderSvgText0")
				.each(function(d,i) {
					d3.select(this).attr("transform", function(d) {
						var sOffsetTranslate = "translate(" + ( -Utility.calculateStringLength(d.label) * parseInt($(".sapGanttTimeHeaderSvgText0").css("font-size") , 10) / 2) + ")";
						return sOffsetTranslate;
					});
				});
			d3.selectAll(".sapGanttChartHeader .sapGanttTimeHeaderSvgText1")
				.each(function(d,i) {
					d3.select(this).attr("transform", function(d) {
						var sOffsetTranslate = "translate(" + ( -Utility.calculateStringLength(d.label) * parseInt($(".sapGanttTimeHeaderSvgText1").css("font-size") , 10) / 2) + ")";
						return sOffsetTranslate;
					});
				});
		}
		
		// append path for scales on both rows
		var sPathData = "";
		for (var i = 0; i < aLabelList[1].length; i++) {
			var oLabel = aLabelList[1][i];
			if (oLabel) {
				sPathData +=
					" M" +
					" " + (oLabel.value - 1 / 2) +
					" " + nMiddleLineYOffset +
					" L" +
					" " + (oLabel.value - 1 / 2 ) +
					" " + nSvgHeight;
			}
		}
		
		// append path for scales on both rows
		var sLargeIntervalPathData = "";
		for (var i = 0; i < aLabelList[0].length; i++) {
			var oLabel = aLabelList[0][i];
			if (oLabel) {
				sLargeIntervalPathData +=
					" M" +
					" " + (oLabel.value - 1 / 2) +
					" 0" +
					" L" +
					" " + (oLabel.value - 1 / 2 ) +
					" " + nSvgHeight / 2;
			}
		}

		oGroupSvg.append("path").classed("sapGanttTimeHeaderSvgPath", true).attr("d", sPathData);
		oGroupSvg.append("path").classed("sapGanttTimeHeaderLargeIntervalSvgPath", true).attr("d", sLargeIntervalPathData);
	};
	
	GanttChart.prototype._getXwithOffset = function (data) {
		//constant
		var OFFSET_5 = 5;
		
		if (Core.getConfiguration().getRTL()) {
			return data.value - OFFSET_5;
		} else {
			return data.value + OFFSET_5;
		}
	};
	
	GanttChart.prototype._drawCalendarPattern = function () {
		var $GanttChartSvg = d3.select(this.getDomSelectorById("svg"));
		this._oCalendarPatternDrawer.drawSvg($GanttChartSvg, this.getId(), this.getCalendarDef(), this._oStatusSet, this.getBaseRowHeight());
	};

	GanttChart.prototype._drawNowLine = function () {
		this._oNowlineDrawer  = new NowLineDrawer(this.getAxisTime());
		var $GanttChartHeader = d3.select(this.getDomSelectorById("header-svg")),
		$GanttChartSvg = d3.select(this.getDomSelectorById("svg"));
	
		if (this.getEnableNowLine()) {
			this._oNowlineDrawer.drawSvg($GanttChartSvg, $GanttChartHeader);
		} else {
			this._oNowlineDrawer.destroySvg($GanttChartSvg, $GanttChartHeader);
		}
	};

	GanttChart.prototype._drawVerticalLine = function() {
		this._oVerticalLineDrawer = new VerticalLineDrawer(this.getAxisTime());
		var $GanttChartSvg = d3.select(this.getDomSelectorById("svg"));
		if (this.getEnableVerticalLine()) {
			this._oVerticalLineDrawer.drawSvg($GanttChartSvg);
		} else {
			this._oVerticalLineDrawer.destroySvg($GanttChartSvg);
		}
	};

	GanttChart.prototype._drawAdhocLine = function() {
		this._oAdhocLineDrawer = new AdhocLineDrawer(this.getAxisTime());
		var $GanttChartSvg = d3.select(this.getDomSelectorById("svg"));
		if (this.getEnableAdhocLine()) {
			this._oAdhocLineDrawer.drawSvg($GanttChartSvg, this.getAdhocLines(), this._oStatusSet, this.getAdhocLineLayer());
		} else {
			this._oAdhocLineDrawer.destroySvg($GanttChartSvg);
		}
	};

	GanttChart.prototype._drawExpandedBackground = function() {
		var aSvg = d3.select(this.getDomSelectorById("svg"));
		if (!this._oTT || !this._oTT.getRows() || this._oTT.getRows().length <= 0) {
			return;
		}

		if (this._aFilteredRowData){
			var oChartSchemeBackgroundConfig = this._composeChartSchemeBackgroundConfig();
			this._oExpandedBackgroundDrawer.drawSvg(aSvg, this._aFilteredRowData, oChartSchemeBackgroundConfig);
		}
	};

	GanttChart.prototype._composeChartSchemeBackgroundConfig = function() {
		var oChartSchemeConfig = this._oChartSchemesConfigMap;
		var oBackgroundConfig = {};
		if (oChartSchemeConfig){
			for (var sShemeName in oChartSchemeConfig){
				if (oChartSchemeConfig[sShemeName].getHaveBackground()){
					oBackgroundConfig[sShemeName] = oChartSchemeConfig[sShemeName].getBackgroundClass();
				}
			}
		}

		return oBackgroundConfig;
	};

	GanttChart.prototype._drawShapes = function () {
		var aSvg = d3.select(this.getDomSelectorById("svg"));
		var aAllShapeInstances = this._oShapeManager.getAllShapeInstances();
		var mShapeInstanceWithKeys = this._oShapeManager.mShapeInstance;
		// draw shape
		if (this._aFilteredRowData && aAllShapeInstances && aAllShapeInstances.length > 0) {

			this._oShapeManager.collectDataForAllShapeInstances(this._aFilteredRowData, this._oObjectTypesConfigMap, this._oChartSchemesConfigMap);
			
			var oAxisTime = this.getAxisTime();
			var relationshipDataSet = this._oShapeCrossRowDrawer.generateRelationshipDataSet(aSvg, mShapeInstanceWithKeys, this._aNonVisibleShapeData,
					this.getShapeDataNames(), this._aRelationships, oAxisTime, this._oAxisOrdinal);

			for (var i = 0; i < aAllShapeInstances.length; i++) {
				var oShapeInstance = aAllShapeInstances[i];
				switch (oShapeInstance.getCategory(null, oAxisTime, this._oAxisOrdinal)) {
					case sap.gantt.shape.ShapeCategory.InRowShape:
						this._oShapeInRowDrawer.drawSvg(aSvg, oShapeInstance,
							oAxisTime, this._oAxisOrdinal, this._oStatusSet);
						break;
					case sap.gantt.shape.ShapeCategory.Relationship:
						oShapeInstance.dataSet = this._oShapeManager.isRelationshipDisplayable(oShapeInstance) ? relationshipDataSet : [];
						this._oShapeCrossRowDrawer.drawSvg(aSvg, oShapeInstance, oAxisTime, this._oAxisOrdinal);
						break;
					default:
						break;
				}
			}
		}
	};

	/**
	 * Get instantiated shape instance by Shape Key, it's a wrapper for ShapeManager.getShpeeInstance.
	 * 
	 * @param {string} sShapeKey configured shape key
	 * @private
	 */
	GanttChart.prototype.getShapeInstance = function(sShapeKey) {
		return this._oShapeManager.mShapeInstance[sShapeKey];
	};

	//draw all the selected shapes and relationships
	GanttChart.prototype._drawSelectedShapes = function () {
		var aSvg = d3.select(this.getDomSelectorById("svg"));
		var mShapeInstanceWithKeys = this._oShapeManager.mShapeInstance;
		// draw selected shape
//		this._collectSelectedDataPerShapeKey();
		this._oShapeManager.collectDataForSelectedShapes(this._oShapeSelection, this._oObjectTypesConfigMap, this._oChartSchemesConfigMap);
		var oAxisTime = this.getAxisTime();
		var relationshipDataSet = this._oShapeCrossRowDrawer.generateRelationshipDataSet(aSvg, mShapeInstanceWithKeys, this._aNonVisibleShapeData,
				this.getShapeDataNames(), this._oShapeSelection.getSelectedRelationships(), oAxisTime, this._oAxisOrdinal);
		for (var sShapeKey in mShapeInstanceWithKeys) {
			var oSelectedClassIns = mShapeInstanceWithKeys[sShapeKey].getAggregation("selectedShape");
			var category = oSelectedClassIns.getCategory(null, this._oAxisTime, this._oAxisOrdinal);

			switch (category) {
			case sap.gantt.shape.ShapeCategory.InRowShape:
				this._oShapeInRowDrawer.drawSvg(aSvg, oSelectedClassIns, oAxisTime, this._oAxisOrdinal, this._oStatusSet);
				break;
			case sap.gantt.shape.ShapeCategory.Relationship:
				oSelectedClassIns.dataSet = relationshipDataSet;
				this._oShapeCrossRowDrawer.drawSvg(aSvg, oSelectedClassIns, oAxisTime, this._oAxisOrdinal);
				break;
			default:
				break;
			}
		}
	};

	GanttChart.prototype._getSvgCoodinateByDiv = function(oNode, x, y){
		var oClickPoint = oNode.createSVGPoint();
			oClickPoint.x = x;
			oClickPoint.y = y;
			oClickPoint = oClickPoint.matrixTransform(oNode.getScreenCTM().inverse());
			oClickPoint.svgHeight = oNode.height.baseVal.value;
			oClickPoint.svgId = this.getId() + "-svg";
		
		return oClickPoint;
	};

	/**
	 * Check whether the shape selection is enabled or not
	 * 
	 * @param {object} oShapeData Binded Shape Data
	 * @param {string} sElementId Shape Instance ID
	 * @return {boolean} true: shape is select-able, false: not select-able
	 * @private
	 */
	GanttChart.prototype.isShapeSelectable = function (oShapeData, sElementId) {	
		return this._oShapeManager.isShapeSelectable(oShapeData, sElementId);
	};

	GanttChart.prototype.getAxisOrdinal = function () {
		return this._oAxisOrdinal;
	};

	GanttChart.prototype.getAxisTime = function () {
		return this.getAxisTimeStrategy().getAxisTime();
	};

	GanttChart.prototype.ondblclick = function (oEvent) {
		return null;
	};

	GanttChart.prototype.onclick = function (oEvent) {
		return null;
	};

	GanttChart.prototype.getSapUiSizeClass = function () {
		return this._sUiSizeMode;
	};

	/**
	 * Sets the first visible row in the Gantt Chart Control.
	 * 
	 * @see sap.ui.table.Table.setFirstVisibleRow
	 * 
	 * @param {int} iRowIndex The row index to be set as the first visible row
	 * @return {sap.gantt.GanttChart} A reference to the GanttChart control, which can be used for chaining
	 * @public
	 * @deprecated We recommend use setTableProperties function instead
	 */
	GanttChart.prototype.setFirstVisibleRow = function(iRowIndex) {
		this.setTableProperties({
			firstVisableRow: iRowIndex
		});
		return this;
	};

	GanttChart.prototype._getVisibleRowCount = function () {
		return this._oTT.getVisibleRowCount() + 1;
	};

	/*
	 * Implementation of sap.gantt.GanttChartBase._setLargeDataScrolling method.
	 */
	GanttChart.prototype._setLargeDataScrolling = function(bLargeDataScrolling) {
		if (this._oTT._setLargeDataScrolling) {
			this._oTT._setLargeDataScrolling(!!bLargeDataScrolling);
		}
	};

	GanttChart.prototype.exit = function () {
		// TODO: destroy axis time and ordinal after refactor to listener pattern.
		// other children are all strong aggregation relations, no need to destroy.
		this._detachEvents();
		this._cleanUpTimers();
	};

	/**
	 * cleanup the timers when not required anymore
	 * @private
	 */
	GanttChart.prototype._cleanUpTimers = function() {
		for (var sKey in this._mTimeouts) {
			if (this._mTimeouts[sKey]) {
				clearTimeout(this._mTimeouts[sKey]);
				this._mTimeouts[sKey] = undefined;
			}
		}
	};

	GanttChart.prototype.getTTHsbDom = function () {
		return this._oTT.getDomRef(sap.ui.table.SharedDomRef.HorizontalScrollBar);
	};

	GanttChart.prototype.getTTVsbDom = function () {
		return this._oTT.getDomRef(sap.ui.table.SharedDomRef.VerticalScrollBar);
	};

	//for MS Edge, the pageX is not usable when browser zoom rate <> 100% and RTL = true,
	//instead, clientX is always right for all zoom rate and RTL scenario
	GanttChart.prototype._getMouseXPos = function (oEvent) {
		if (Device.browser.edge) {
			return oEvent.clientX;
		};
		return oEvent.pageX;
	};

	return GanttChart;

}, true);

}; // end of sap/gantt/GanttChart.js
if ( !jQuery.sap.isDeclared('sap.gantt.GanttChartWithTable') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.GanttChartWithTable'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ScrollBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/gantt/GanttChartWithTable",[
	"sap/ui/core/Core", "sap/ui/Device", "sap/gantt/GanttChartBase", "sap/ui/table/Column", "sap/ui/table/TreeTable", "sap/ui/core/ScrollBar",
	"sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData",
	"sap/gantt/GanttChart", "sap/gantt/control/Cell", "sap/gantt/control/Toolbar",
	"sap/gantt/control/AssociateContainer","sap/gantt/drawer/SelectionPanel",
	"sap/gantt/misc/Utility", "sap/gantt/misc/AxisOrdinal", "sap/gantt/eventHandler/MouseWheelHandler", "sap/ui/thirdparty/d3"
], function (Core, Device, GanttChartBase, Column, TreeTable, ScrollBar, Splitter, SplitterLayoutData,
		GanttChart, Cell, Toolbar, AssociateContainer, SelectionPanelDrawer, Utility, AxisOrdinal, MouseWheelHandler) {
	"use strict";

	/**
	 * Creates and initializes a new Gantt Chart with a TreeTable control on the left and a svg chart area on the right.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Embed a <code>sap.ui.table.TreeTable</code> and a <code>sap.gantt.GanttChart</code> side-by-side.
	 *
	 * <p>This class defines:
	 * The TreeTable part provide a column view of data with sorting/filtering functions available. The svg chart part provide graphic Gantt chart
	 * view of data. Both width can be adjusted by a splitter bar, and row scrolling are always synchronized.3
	 * </p>
	 *
	 * @extends sap.gantt.GanttChartBase
	 *
	 * @author SAP SE
	 * @version 1.50.5
	 *
	 * @constructor
	 * @public
	 * @alias sap.gantt.GanttChartWithTable
	 */
	var GanttChartWithTable = GanttChartBase.extend("sap.gantt.GanttChartWithTable", /** @lends sap.gantt.GanttChartWithTable.prototype */ {
		metadata: {
			properties: {
				
				/**
				 * A customized cell callback function.
				 * 
				 * <p> This property is used in combination with configuration property <code>hierarchies</code>.
				 * If aggregation <code>columns</code> is provided, property <code>hierarchies</code> and <code>cellCallback</code> is ignored.
				 * Otherwise property <code>hierarchies</code> must provide column configurations that cellCallback can consume. And if cellCallback
				 * is not provided, a default cellCallback adds <code>sap.m.Label</code> to fill cells.
				 * </p>
				 */
				cellCallback: {type: "object"},
				
				/**
				 * Property propagated from <code>sap.ui.table.Table</code>.
				 * @see sap.ui.table.Table#fixedColumnCount
				 * @deprecated We don't recommend use this property
				 */
				fixedColumnCount: {type: "int"}
			},
			aggregations: {
				
				/**
				 * Controls to be place in Gantt chart toolbar.
				 * 
				 * <p>This aggregation is only used when custom toolbar item group is configured to be shown in Gantt chart toolbar.
				 * Different from the build-in buttons which are configured to be shown or hidden, these are free controls created 
				 * by application, only they are placed in container toolbar by <code>sap.gantt.GanttChartWithTable</code>.</p>
				 * 
				 * <p>A common recommendation is, if the source select group is enabled and application wants to pre-configure
				 * container layouts, the chance to change custom toolbar items is in event handler to event <code>ganttChartSwitchRequested</code>.</p>
				 */
				customToolbarItems: {type: "sap.ui.core.Control", multiple: true, visibility: "public",
					singularName: "customToolbarItem", bindable: "bindable"},
					
				/**
				 * Aggregation delegated to <code>sap.ui.table.Table</code>.
				 * 
				 * <p>If this aggregation is provided, call back property <code>cellCallBack</code> and column configuration in property <code>hierarchies</code> will be ignored.</p>
				 * @see sap.ui.table.Table#columns
				 */
				columns: {type: "sap.ui.table.Column", multiple: true, visibility: "public", singularName: "column"},
				
				_selectionPanel: {type: "sap.ui.table.TreeTable", multiple: false, visibility: "hidden"},
				_chart: {type: "sap.gantt.GanttChart", multiple: false, visibility: "hidden"}
			}
		}
	});

	GanttChartWithTable.prototype.init = function () {
		GanttChartBase.prototype.init.apply(this, arguments);
		// create chart
		jQuery.sap.measure.start("GanttChartWithTable Init","GanttPerf:GanttChartWithTable Init function");
		this._oGanttChart = new GanttChart();
		this.setAggregation("_chart", this._oGanttChart);
		this._oGanttChartCnt = new AssociateContainer({
			enableRootDiv: true,
			content: this._oGanttChart
		});
		this._oTC = this._oGanttChart._oTT;
		var that = this;

		// create selection panel
		this._oTT = new TreeTable({
			visibleRowCountMode: "Auto",
			minAutoRowCount: 1
		});
		
		this._oTT._bVariableRowHeightEnabled = true;
		this._oTT._collectRowHeights = function(bHeader){
			var aHeights = TreeTable.prototype._collectRowHeights.apply(this, arguments);
			if (bHeader) {
				return aHeights;
			}
			that._aHeights = aHeights;
			var iBaseRowHeight = that._aHeights[0];
			var iFirstVisibleRowIndex = this.getFirstVisibleRow();
			var iRowCount = that._aHeights.length;
			var iMainRowHeight = iBaseRowHeight;
			var aShapeData = that._oGanttChart._getDrawingData([iFirstVisibleRowIndex,iFirstVisibleRowIndex + iRowCount - 1]);
			if (aShapeData && aShapeData.length > 0){
				iMainRowHeight = aShapeData[0].rowSpan * iBaseRowHeight;
			}
			for (var i = 0; i < iRowCount; i++) {
				var oContext = this.getContextByIndex(iFirstVisibleRowIndex + i);
				if (oContext){
					var oContextObject = oContext.getObject();
					var sUid = oContextObject ? oContextObject.uid : undefined;
					if (sUid && that._oGanttChart._oRowStatusMap[sUid]){
						that._aHeights[i] = that._oGanttChart._oRowStatusMap[sUid].visibleRowSpan * iBaseRowHeight;
					} else {
						that._aHeights[i] = iMainRowHeight;
					}
				} else {
					that._aHeights[i] = iBaseRowHeight;
				}
			}
			return that._aHeights;
		};

		this._oTT._updateTableContent = function() {
			sap.ui.table.TreeTable.prototype._updateTableContent.apply(this, arguments);

			var aRows = this.getRows(),
				aRowHeights = that._getRowHeights();
			if (!aRowHeights) {
				return;
			}
			var $fixedRows = this.$().find(".sapUiTableCtrlFixed > tbody > tr.sapUiTableTr");
			var $rowHeaders = this.$().find(".sapUiTableRowHdr");
			for (var iIndex = 0; iIndex < aRows.length; iIndex++) {
				var $Row = aRows[iIndex].$(),
					$fixedRow = $fixedRows.filter(":eq(" + iIndex + ")"),
					$rowHeader = $rowHeaders.filter(":eq(" + iIndex + ")"),
					iHeight = aRowHeights[iIndex] || 0;
				var iBaseRowHeight = that._oGanttChart.getBaseRowHeight();
				var bAddedClass = iHeight / iBaseRowHeight > 1;
				$Row.toggleClass('sapGanttExpandedRow', bAddedClass);
				$fixedRow.toggleClass('sapGanttExpandedRow', bAddedClass);
				$rowHeader.toggleClass('sapGanttExpandedRow', bAddedClass);
			}
		};

		this._oTT.addEventDelegate({
			onAfterRendering: this._bindVerticalScrollForTT
		}, this);

		this._oTT.attachToggleOpenState(function(oEvent) {
			//bubble up the toggle event
			that.fireTreeTableToggleEvent({
				rowIndex : oEvent.getParameter("rowIndex"),
				rowContext : oEvent.getParameter("rowContext"),
				expanded : oEvent.getParameter("expanded")
			});
		});

		this._oTT.attachEvent("_rowsUpdated", this._onTTRowUpdate.bind(this));

		this.setAggregation("_selectionPanel", this._oTT);
		this._oToolbar = new Toolbar({
			type: sap.gantt.control.ToolbarType.Local,
			sourceId: sap.gantt.config.DEFAULT_HIERARCHY_KEY
		});
		this._oToolbar.data("holder", this);
		this._oToolbar.attachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.attachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.attachExpandTreeChange(this._onToolbarExpandTreeChange, this);
		this._oToolbar.attachModeChange(this._onToolbarModeChange, this);
		this._oTT.addExtension(this._oToolbar);
		this._oSelectionPanelCnt = new AssociateContainer({
			enableRootDiv: true,
			content: this._oTT,
			layoutData: new SplitterLayoutData({
				size: "30%"
			})
		});

		// create horizontal layout
		this._oSplitter = new Splitter({
			width: "100%",
			height: "100%",
			orientation: sap.ui.core.Orientation.Horizontal,
			contentAreas: [this._oSelectionPanelCnt, this._oGanttChartCnt]
		}).addStyleClass("sapGanttViewSplitterH");

		// attach this to layout resize
		this._oSplitter.attachResize(this._onSplitterResize, this);
		// sync oTC oTT vertical scroll
		this._oGanttChart.attachHorizontalScroll(this._onChartHSbScroll, this);
		this._oGanttChart.attachVerticalScroll(this._onChartVSbScroll, this);
		this._oGanttChart.attachRowSelectionChange(this._onRowSelectionChange, this);
		this._oGanttChart.attachShapeSelectionChange(this._onShapeSelectionChange, this);
		this._oGanttChart.attachChartMouseOver(this._onChartMouseOver, this);
		this._oGanttChart.attachRelationshipSelectionChange(this._onRelationshipSelectionChange, this);
		this._oGanttChart.attachChartClick(this._onClick, this);
		this._oGanttChart.attachChartDoubleClick(this._onDoubleClick, this);
		this._oGanttChart.attachChartRightClick(this._onRightClick, this);
		this._oGanttChart.attachEvent("_zoomInfoUpdated", this._onZoomInfoUpdated, this);
		this._oGanttChart.attachEvent("_shapesUpdated", this._onShapesUpdated, this);
		this._oGanttChart.attachChartDragEnter(this._onChartDragEnter, this);
		this._oGanttChart.attachChartDragLeave(this._onChartDragLeave, this);
		this._oGanttChart.attachShapeDragEnd(this._onShapeDragEnd, this);
		this._oGanttChart.attachEvent("_visibleHorizonUpdate" , this._onGanttChartVisibleHorizonUpdate, this);
		this._oGanttChart.attachEvent("_timePeriodZoomStatusChange" , this._onGanttChartTimePeriodZoomStatusChange, this);
		this._oGanttChart.attachEvent("_timePeriodZoomOperation" , this._onGanttChartTimePeriodZoomOperation, this);
		this._oGanttChart.attachShapeResizeEnd(this._onShapeResizeEnd, this);

		this._oModesConfigMap = {};
		this._oModesConfigMap[sap.gantt.config.DEFAULT_MODE_KEY] = sap.gantt.config.DEFAULT_MODE;

		this._oToolbarSchemeConfigMap = {};
		this._oToolbarSchemeConfigMap[sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY] = sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME;
		this._oToolbarSchemeConfigMap[sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY] = sap.gantt.config.EMPTY_TOOLBAR_SCHEME;

		this._oHierarchyConfigMap = {};
		this._oHierarchyConfigMap[sap.gantt.config.DEFAULT_HIERARCHY_KEY] = sap.gantt.config.DEFAULT_HIERARCHY;

		this._oSelectionPanelDrawer = new SelectionPanelDrawer();

		// defualt maps
		this._oGanttChartSchemesConfigMap = {};
		this._oGanttChartSchemesConfigMap[sap.gantt.config.DEFAULT_CHART_SCHEME_KEY] = sap.gantt.config.DEFAULT_CHART_SCHEME;
		this._oObjectTypesConfigMap = {};
		this._oObjectTypesConfigMap[sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY] = sap.gantt.config.DEFAULT_OBJECT_TYPE;
		this._oShapesConfigMap = {};

		//init mouse wheel handler
		this._oMouseWheelHandler = new MouseWheelHandler(this);

		jQuery.extend(this.mDefaultTableProperties, {
			fixedColumnCount: 0,
			showColumnVisibilityMenu: false
		});
		this.setTableProperties(this.mDefaultTableProperties);
		jQuery.sap.measure.end("GanttChartWithTable Init");
	};

	/**
	 * To set fixedColumnCount value
	 * @see sap.ui.table.Table.setFixedColumnCount
	 * @param {int} iFixedColumnCount
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 * @deprecated We recommend use setTableProperties function instead
	 */
	GanttChartWithTable.prototype.setFixedColumnCount = function (iFixedColumnCount) {
		this.setTableProperties({
			fixedColumnCount: iFixedColumnCount
		});
		return this;
	};

	/**
	 * To get fixedColumnCount value
	 * @see sap.ui.table.Table.getFixedColumnCount
	 * @return {int} The value of fixedColumnCount
	 * @public
	 * @deprecated We recommend use getTableProperties function instead
	 */
	GanttChartWithTable.prototype.getFixedColumnCount = function () {
		return this.getTableProperties().fixedColumnCount;
	};

	GanttChartWithTable.prototype.setTimeAxis = function (oTimeAxis) {
		this.setProperty("timeAxis", oTimeAxis, true);
		this._oGanttChart.setTimeAxis(oTimeAxis);
		return this;
	};

	GanttChartWithTable.prototype.setMode = function (sMode) {
		this.setProperty("mode", sMode);
		this._oGanttChart.setMode(sMode);
		this._oToolbar.setMode(sMode);
		return this;
	};

	GanttChartWithTable.prototype.setModes = function (aModes) {
		this.setProperty("modes", aModes);
		this._oToolbar.setModes(aModes);
		this._oGanttChart.setModes(aModes);
		this._oModesConfigMap = {};
		if (aModes) {
			for (var i = 0; i < aModes.length; i++) {
				this._oModesConfigMap[aModes[i].getKey()] = aModes[i];
			}
		}
		return this;
	};

	GanttChartWithTable.prototype.setSelectionMode = function (sSelectionMode) {
		this.setProperty("selectionMode", sSelectionMode);
		switch (sSelectionMode) {
			case sap.gantt.SelectionMode.Multiple:
			case sap.gantt.SelectionMode.MultiWithKeyboard:
				this.setTableProperties({
					selectionMode: sap.ui.table.SelectionMode.MultiToggle,
					selectionBehavior: sap.ui.table.SelectionBehavior.Row
				});
				break;
			case sap.gantt.SelectionMode.Single:
				this.setTableProperties({
					selectionMode: sap.ui.table.SelectionMode.Single,
					selectionBehavior: sap.ui.table.SelectionBehavior.Row
				});
				break;
			case sap.gantt.SelectionMode.None:
				this.setTableProperties({
					selectionMode: sap.ui.table.SelectionMode.None,
					selectionBehavior: sap.ui.table.SelectionBehavior.RowOnly
				});
				break;
		}
		this._oGanttChart.setSelectionMode(sSelectionMode);
		return this;
	};

	GanttChartWithTable.prototype.setShapeSelectionMode = function (sShapeSelectionMode) {
		this.setProperty("shapeSelectionMode", sShapeSelectionMode);
		this._oGanttChart.setShapeSelectionMode(sShapeSelectionMode);
		return this;
	};

	GanttChartWithTable.prototype.setToolbarSchemes = function (aToolbarSchemes) {
		this.setProperty("toolbarSchemes", aToolbarSchemes);
		this._oToolbar.setToolbarSchemes(aToolbarSchemes);
		this._oToolbarSchemeConfigMap = {};
		if (aToolbarSchemes) {
			for (var i = 0; i < aToolbarSchemes.length; i++) {
				this._oToolbarSchemeConfigMap[aToolbarSchemes[i].getKey()] = aToolbarSchemes[i];
			}
		}
		return this;
	};

	GanttChartWithTable.prototype.setHierarchyKey = function (sHierarchyKey) {
		this.setProperty("hierarchyKey", sHierarchyKey);
		this._oGanttChart.setProperty("hierarchyKey", sHierarchyKey);
		this._oToolbar.setSourceId(sHierarchyKey);
		this._hierarchyChange();
		return this;
	};

	GanttChartWithTable.prototype.setHierarchies = function (aHierarchies) {
		this.setProperty("hierarchies", aHierarchies);
		this._oToolbar.setHierarchies(aHierarchies);
		this._oGanttChart.setHierarchies(aHierarchies);
		this._oHierarchyConfigMap = {};
		if (aHierarchies) {
			for (var i = 0; i < aHierarchies.length; i++) {
				this._oHierarchyConfigMap[aHierarchies[i].getKey()] = aHierarchies[i];
			}
		}
		this._hierarchyChange();
		return this;
	};

	GanttChartWithTable.prototype.setCalendarDef = function (oCalendarDef) {
		this.setAggregation("calendarDef", oCalendarDef);
		/*
		 * Copy oCalendarDef to this._oGanttChart instead of set it directly to this._oGanttChart.
		 * Because if we do so, in binding case, copying of private aggregation '_chart' won't copy
		 * template calendarDef. Therefore have to go this way.
		 * And in this way, have to set templateShareable = true if oCalendarDef is a template.
		 */
		var oPSBindingInfo = oCalendarDef.getBindingInfo("defs");
		if (oPSBindingInfo) {
			oPSBindingInfo.templateShareable = true;
		}
		this._oGanttChart.setCalendarDef(oCalendarDef.clone());
		return this;
	};

	GanttChartWithTable.prototype.setAdhocLineLayer = function (sLayer) {
		this.setProperty("adhocLineLayer", sLayer);
		this._oGanttChart.setAdhocLineLayer(sLayer);
		return this;
	};

	GanttChartWithTable.prototype.addAdhocLine = function (oAdhocLine) {
		this._oGanttChart.addAdhocLine(oAdhocLine);
		return this;
	};

	GanttChartWithTable.prototype.insertAdhocLine = function (oAdhocLine, iIndex) {
		this._oGanttChart.insertAdhocLine(oAdhocLine, iIndex);
		return this;
	};

	GanttChartWithTable.prototype.removeAdhocLine = function (oAdhocLine) {
		return this._oGanttChart.removeAdhocLine(oAdhocLine);
	};

	GanttChartWithTable.prototype.getAdhocLines = function () {
		return this._oGanttChart.getAdhocLines();
	};

	GanttChartWithTable.prototype.removeAllAdhocLines = function () {
		return this._oGanttChart.removeAllAdhocLines();
	};

	/**
	 * Allows to hide the hierarchy structure (tree icons, indentation) in left table.
	 * This might be useful in some scenarios when the data is not hierarchical, no need for any expand/collapse.
	 * <b>Note:</b> In flat mode the hierarchy is not visible to the user.
	 * @param {boolean} bFlat If set to <code>true</code>, the flat mode is enabled
	 * @protected
	 */
	GanttChartWithTable.prototype.setUseFlatMode = function (bFlat) {
		this._oTT.setUseFlatMode(bFlat);
		return this;
	};

	GanttChartWithTable.prototype._hierarchyChange = function (sOldHierarchyKey) {
		var sHierarchyKey = this.getHierarchyKey();
		if (sHierarchyKey && this._oHierarchyConfigMap[sHierarchyKey]) {
			// if current hierarchy has a column configuration, generate columns from configuration.
			if (this._oHierarchyConfigMap[sHierarchyKey].getColumns() &&
					this._oHierarchyConfigMap[sHierarchyKey].getColumns().length > 0) {
				this._buildColumnFromCellCallback();
			}
			// adjust current mode
			var sMode =  this.getMode();
			if (sMode === sap.gantt.config.DEFAULT_MODE_KEY && this._oHierarchyConfigMap[this.getHierarchyKey()]) {
				sMode = this._oHierarchyConfigMap[this.getHierarchyKey()].getActiveModeKey();
			}
			this.setMode(sMode);
		}
	};

	GanttChartWithTable.prototype._buildColumnFromCellCallback = function () {
		this._oTT.removeAllColumns();

		var oHierarchyConfig, aColumnConfig;
		oHierarchyConfig = this._oHierarchyConfigMap[this.getHierarchyKey()];
		if (oHierarchyConfig){
			aColumnConfig = oHierarchyConfig.getColumns();
		}
		if (aColumnConfig) {
			for (var i = 0; i < aColumnConfig.length; i++) {
				var oCol = new Column({
					label: aColumnConfig[i].getTitle(),
					sortProperty: aColumnConfig[i].getSortAttribute(),
					filterProperty: aColumnConfig[i].getFilterAttribute(),
					width: aColumnConfig[i].getWidth(),
					template: new Cell({
						cellCallback: this.getCellCallback(),
						columnConfig: aColumnConfig[i]
					}).data("rowTypeName", this.getRowTypeName())
				});
				this._oTT.addColumn(oCol);
			}
		} 
	};

	GanttChartWithTable.prototype.setObjectTypes = function (aObjectTypes) {
		this.setProperty("objectTypes", aObjectTypes, true);
		this._oGanttChart.setObjectTypes(aObjectTypes);
		// build a map for easy look up
		this._oObjectTypesConfigMap = {};
		if (aObjectTypes) {
			for (var i = 0; i < aObjectTypes.length; i++){
				this._oObjectTypesConfigMap[aObjectTypes[i].getKey()] = aObjectTypes[i];
			}
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setChartSchemes = function (aChartSchemes) {
		this.setProperty("chartSchemes", aChartSchemes, true);
		this._oGanttChart.setChartSchemes(aChartSchemes);
		// build a map for easy look up
		this._oGanttChartSchemesConfigMap = {};
		if (aChartSchemes) {
			for (var i = 0; i < aChartSchemes.length; i++) {
				this._oGanttChartSchemesConfigMap[aChartSchemes[i].getKey()] = aChartSchemes[i];
			}
		}
		return this;
	};
	
	GanttChartWithTable.prototype.setShapeDataNames = function (aShapeDataNames) {
		this.setProperty("shapeDataNames", aShapeDataNames);
		this._oGanttChart.setShapeDataNames(aShapeDataNames);
		return this;
	};
	
	GanttChartWithTable.prototype.setLocale = function (oLocale) {
		this.setProperty("locale", oLocale, true);
		this._oGanttChart.setLocale(oLocale);
		return this;
	};
	
	GanttChartWithTable.prototype.setShapes = function (aShapes) {
		this.setProperty("shapes", aShapes, true);
		this._oGanttChart.setShapes(aShapes);
		// build a map for easy look up
		this._oShapesConfigMap = {};
		if (aShapes) {
			for (var i = 0; i < aShapes.length; i++) {
				this._oShapesConfigMap[aShapes[i].getKey()] = aShapes[i];
			}
		}
		return this;
	};

	GanttChartWithTable.prototype.setSvgDefs = function (oSvgDefs) {
		this.setProperty("svgDefs", oSvgDefs);
		this._oGanttChart.setSvgDefs(oSvgDefs);
		return this;
	};

	GanttChartWithTable.prototype.setEnableCursorLine = function (bEnableCursorLine) {
		this.setProperty("enableCursorLine", bEnableCursorLine);
		this._oGanttChart.setEnableCursorLine(bEnableCursorLine);
		this._oToolbar.setEnableCursorLine(bEnableCursorLine);
		return this;
	};

	GanttChartWithTable.prototype.setEnableNowLine = function (bEnableNowLine) {
		this.setProperty("enableNowLine", bEnableNowLine);
		this._oGanttChart.setEnableNowLine(bEnableNowLine);
		this._oToolbar.setEnableNowLine(bEnableNowLine);
		return this;
	};

	GanttChartWithTable.prototype.setEnableVerticalLine = function (bEnableVerticalLine) {
		this.setProperty("enableVerticalLine", bEnableVerticalLine);
		this._oGanttChart.setEnableVerticalLine(bEnableVerticalLine);
		this._oToolbar.setEnableVerticalLine(bEnableVerticalLine);
		return this;
	};

	GanttChartWithTable.prototype.setEnableAdhocLine = function (bEnableAdhocLine) {
		this.setProperty("enableAdhocLine", bEnableAdhocLine);
		this._oGanttChart.setEnableAdhocLine(bEnableAdhocLine);
		this._oToolbar.setEnableAdhocLine(bEnableAdhocLine);
		return this;
	};

	GanttChartWithTable.prototype.setTimeZoomRate = function (fTimeZoomRate) {
		this.setProperty("timeZoomRate", fTimeZoomRate, true);
		this._oGanttChart.setTimeZoomRate(fTimeZoomRate);
		return this;
	};

	GanttChartWithTable.prototype.setAxisTimeStrategy = function (oAxisTimeStrategy) {
		this._oGanttChart.setAxisTimeStrategy(oAxisTimeStrategy);
		return this;
	};

	GanttChartWithTable.prototype.getAxisTimeStrategy = function () {
		return this._oGanttChart.getAxisTimeStrategy();
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.addRelationship = function (oRelationship) {
		this._oGanttChart.addRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.insertRelationship = function (iIndex, oRelationship) {
		this._oGanttChart.insertRelationship(iIndex, oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.removeRelationship = function (oRelationship) {
		this._oGanttChart.removeRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.getRelationships = function () {
		this._oGanttChart.getRelationships();
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.destroyRelationships = function () {
		this._oGanttChart.destroyRelationships();
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.indexOfRelationship = function (oRelationship) {
		this._oGanttChart.indexOfRelationship(oRelationship);
	};
	/*
	 * @see JSDoc generated by SAPUI5 control API generator
	 */
	GanttChartWithTable.prototype.removeAllRelationships = function () {
		this._oGanttChart.removeAllRelationships();
	};
	
	// This method is needed because once relationships data is retrieved from the backend,
	// UI5 core will try to call this method and if it not exist the updateAggregation method is called,
	// then it will execute binding.factory method which is a dummy method and causes exceptions.
	GanttChartWithTable.prototype.updateRelationships = function (sReason) {
		this._oGanttChart.updateRelationships(sReason);
	};

	GanttChartWithTable.prototype.setSelectionPanelSize = function (sCSSSize, bSuppressInvalidate) {
		this.setProperty("selectionPanelSize", sCSSSize, bSuppressInvalidate);
		this._oSelectionPanelCnt.setLayoutData(new SplitterLayoutData({
			size: sCSSSize
		}));
		return this;
	};

	GanttChartWithTable.prototype.addColumn = function (oColumn) {
		this._oTT.addColumn(oColumn);
	};

	GanttChartWithTable.prototype.insertColumn = function (oColumn, iIndex) {
		this._oTT.insertColumn(oColumn, iIndex);
	};

	GanttChartWithTable.prototype.removeColumn = function (oColumn) {
		this._oTT.removeColumn(oColumn);
	};

	GanttChartWithTable.prototype.removeAllColumns = function () {
		this._oTT.removeAllColumns();
	};
	
	GanttChartWithTable.prototype.getColumns = function () {
		return this._oTT.getColumns();
	};

	GanttChartWithTable.prototype.setGhostAlignment = function (sGhostAlignment) {
		this.setProperty("ghostAlignment", sGhostAlignment);
		this._oGanttChart.setGhostAlignment(sGhostAlignment);
		return this;
	};

	GanttChartWithTable.prototype._bindAggregation = function (sName, oBindingInfo) {
		var oModel, oBindingContext;
		if (sName == "rows" && oBindingInfo){
			oModel = this.getModel(oBindingInfo.model);
			// resolve the path if gantt chart itself is binded
			oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			// bind rows to tt and chart, two diff binding objects will be created
			this._oTT.bindRows(oBindingInfo);
			this._oGanttChart.bindRows(oBindingInfo);
			// sync behaviors of both controls (expand, etc...)
			this._oTC.updateRows = this._updateRows.bind(this);
		} else if (sName == "relationships" && oBindingInfo) {
			oModel = this.getModel(oBindingInfo.model);
			// resolve the path if gantt chart itself is binded
			oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			this._oGanttChart.bindRelationships(oBindingInfo);
		} else if (sName == "columns" && oBindingInfo) {
			oModel = this.getModel(oBindingInfo.model);

			oBindingContext = this.getBindingContext(oBindingInfo.model);
			if (oBindingContext && oModel){
				oBindingInfo.path = oModel.resolve(oBindingInfo.path, oBindingContext);
			}
			// bind columns to tt
			this._oTT.bindColumns(oBindingInfo);
		} else {
			return sap.ui.core.Control.prototype._bindAggregation.apply(this, arguments);
		}
	};

	GanttChartWithTable.prototype.setTableProperties = function (oTableProperties) {
		GanttChartBase.prototype.setTableProperties.apply(this, arguments);
		this._oGanttChart.setTableProperties(oTableProperties);
		return this;
	};

	GanttChartWithTable.prototype._updateRows = function (sReason) {
		if (sReason !== sap.ui.table.TableUtils.RowsUpdateReason.VerticalScroll && (this._oTC.getFirstVisibleRow() === this._oTT.getFirstVisibleRow() || sReason === sap.ui.model.ChangeReason.Filter || sReason === sap.ui.model.ChangeReason.Sort)){
			sap.ui.table.Table.prototype.updateRows.apply(this._oTT, arguments);
		}
		sap.ui.table.Table.prototype.updateRows.apply(this._oTC, arguments);
	};

	GanttChartWithTable.prototype._detachToolbarEvents = function () {
		this._oToolbar.detachSourceChange(this._onToolbarSourceChange, this);
		this._oToolbar.detachExpandChartChange(this._onToolbarExpandChartChange, this);
		this._oToolbar.detachExpandTreeChange(this._onToolbarExpandTreeChange, this);
	};

	GanttChartWithTable.prototype.onAfterRendering = function () {
		this._attachEvents();
	};

	GanttChartWithTable.prototype.onBeforeRendering = function () {
		if (this._oToolbar.getAllToolbarItems().length === 0) {
			this._oTT.removeExtension(this._oToolbar);
		} else if (this._oTT.getExtension().length == 0){
			this._oTT.addExtension(this._oToolbar);
		}
	};

	GanttChartWithTable.prototype._attachEvents = function () {
		// add 'onAfterRendering' event delegate to this._oTT
		var oDelegate = {
			onAfterRendering: this._syncGanttTablesDomEvents
		};
		this._oTT.removeEventDelegate(oDelegate);
		this._oTT.addEventDelegate(oDelegate,this);
		// add 'onAfterRendering' event delegate to this._oTC
		this._oTC.removeEventDelegate(oDelegate);
		this._oTC.addEventDelegate(oDelegate,this);

		this._appendMaskSvg();
		var $tableMaskSvg = this.$().find(this.getDomSelectorById("spm-svg-table"));
		if (Device.browser.firefox) {
			$tableMaskSvg.unbind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
			$tableMaskSvg.bind("MozMousePixelScroll.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
		} else {
			$tableMaskSvg.unbind("wheel.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
			$tableMaskSvg.bind("wheel.sapUiTableMouseWheel", this._onMouseWheel.bind(this));
		}
	};

	GanttChartWithTable.prototype._onMouseWheel = function(oEvent) {
		this._oMouseWheelHandler.handleEvent(oEvent);
	};

	GanttChartWithTable.prototype._onRowSelectionChange = function (oEvent){
		this.fireRowSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
		this._oTT._oSelection.fireSelectionChanged(); //sync selection of oTC and oTT -- when table impl changes, change accordingly
	};

	GanttChartWithTable.prototype._onChartMouseOver = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartMouseOver({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
	
	GanttChartWithTable.prototype._onShapeSelectionChange = function (oEvent){
		this.fireShapeSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
	};
	GanttChartWithTable.prototype._onRelationshipSelectionChange = function (oEvent){
		this.fireRelationshipSelectionChange({
			originEvent: oEvent.getParameter("originEvent")
		});
	};

	GanttChartWithTable.prototype._onClick = function(oEvent) {
		var oParam = oEvent.getParameters();
		this.fireChartClick({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};

	GanttChartWithTable.prototype._onDoubleClick = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartDoubleClick({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
	/*
	 * This method will fire the right click event on the chart
	 */		
	GanttChartWithTable.prototype._onRightClick = function (oEvent){
		var oParam = oEvent.getParameters();
		this.fireChartRightClick({
			objectInfo: oParam.objectInfo,
			leadingRowInfo: oParam.leadingRowInfo,
			timestamp: oParam.timestamp,
			svgId: oParam.svgId,
			svgCoordinate: oParam.svgCoordinate, 
			effectingMode: oParam.effectingMode,
			originEvent: oParam.originEvent
		});
	};
 
	GanttChartWithTable.prototype._onChartDragEnter = function (oEvent) {
		this.fireChartDragEnter({
			originEvent: oEvent.getParameter("originEvent")
		});
	};

	GanttChartWithTable.prototype._onChartDragLeave = function (oEvent) {
		this.fireChartDragLeave({
			originEvent: oEvent.getParameter("originEvent"),
			draggingSource: oEvent.getParameter("draggingSource")
		});
	};

	GanttChartWithTable.prototype._onShapeDragEnd = function (oEvent) {
		var oParam = oEvent.getParameters();
		this.fireShapeDragEnd({
			originEvent: oParam.originEvent,
			sourceShapeData: oParam.sourceShapeData,
			targetData: oParam.targetData,
			sourceSvgId: oParam.sourceSvgId,
			targetSvgId: oParam.targetSvgId
		});
	};
	
	GanttChartWithTable.prototype._onShapeResizeEnd = function (oEvent) {
		var oParam = oEvent.getParameters();
		this.fireShapeResizeEnd({
			shapeUid: oParam.shapeUid,
			rowObject: oParam.rowObject,
			oldTime: oParam.oldTime,
			newTime: oParam.newTime
		});
	};

	GanttChartWithTable.prototype._onGanttChartVisibleHorizonUpdate = function (oEvent) {
		this.fireEvent("_visibleHorizonUpdate", oEvent.getParameters());
	};

	GanttChartWithTable.prototype._onGanttChartTimePeriodZoomStatusChange = function (oEvent) {
		this.fireEvent("_timePeriodZoomStatusChange", oEvent.getParameters());
	};

	GanttChartWithTable.prototype._onGanttChartTimePeriodZoomOperation = function (oEvent){
		this.fireEvent("_timePeriodZoomOperation", oEvent.getParameters());
	};

	GanttChartWithTable.prototype.syncTimePeriodZoomStatus = function (bActive){
		this._oGanttChart.syncTimePeriodZoomStatus(bActive);
	};

	GanttChartWithTable.prototype.syncTimePeriodZoomOperation = function (oEvent, bTimeScrollSync, sOrientation){
		this._oGanttChart.syncTimePeriodZoomOperation(oEvent, bTimeScrollSync, sOrientation);
	};

	GanttChartWithTable.prototype.syncMouseWheelZoom = function (oEventData) {
		this._oGanttChart.syncMouseWheelZoom(oEventData);
	};


	GanttChartWithTable.prototype._onChartHSbScroll = function (oEvent) {
		this.fireHorizontalScroll(oEvent.getParameters());
	};

	GanttChartWithTable.prototype.syncVisibleHorizon = function (oTimeHorizon, iVisibleWidth){
		this._oGanttChart.syncVisibleHorizon(oTimeHorizon, iVisibleWidth);
	};

	GanttChartWithTable.prototype._onChartVSbScroll = function (oEvent) {
		var $ttvsb = jQuery(this.getTTVsbDom());
		var $tcvsb = jQuery(this.getTCVsbDom());
		if (this.sScrollSource === null || this.sScrollSource !== "GanttChartWithTable") {
			this.sScrollSource = "GanttChart";
			window.requestAnimationFrame(function(){$ttvsb.scrollTop($tcvsb.scrollTop());});
		} else {
			this.sScrollSource = null;
		}

		this.fireVerticalScroll({
			scrollSteps: this._oTC.getFirstVisibleRow(),
			scrollPosition: jQuery(this.getTCVsbDom()).scrollTop()
		});
	};

	GanttChartWithTable.prototype._drawSvg = function () {
		this._appendMaskSvg();
		this._updateMaskSvg();
		this._updateTableRowHeights();
		this._drawSelectionPanel();
	};

	GanttChartWithTable.prototype._onZoomInfoUpdated = function (oEvent) {
		var oParameters = oEvent.getParameters();
		if (oParameters.axisTimeChanged) {
			this.setProperty("timeZoomRate", this._oGanttChart.getAxisTime().getZoomRate(), true);
		}
		this.fireEvent("_zoomInfoUpdated",oParameters);
	};

	GanttChartWithTable.prototype._onShapesUpdated = function (oEvent) {
		this.fireEvent("_shapesUpdated", {aSvg: oEvent.getParameter("aSvg")});
	};

	GanttChartWithTable.prototype._bindVerticalScrollForTT = function() {
		var $vsb = jQuery(this.getTTVsbDom());
		$vsb.unbind("scroll.sapUiTableVScrollForGanttChartWithTable", this._onSelectionPanelVSbScroll);
		$vsb.bind("scroll.sapUiTableVScrollForGanttChartWithTable", jQuery.proxy(this._onSelectionPanelVSbScroll, this));
	};

	GanttChartWithTable.prototype._onSelectionPanelVSbScroll = function() {
		var $ttvsb = jQuery(this.getTTVsbDom());
		var $tcvsb = jQuery(this.getTCVsbDom());
		if (this.sScrollSource === null || this.sScrollSource !== "GanttChart") {
			this.sScrollSource = "GanttChartWithTable";
			window.requestAnimationFrame(function(){$tcvsb.scrollTop($ttvsb.scrollTop());});
		} else {
			this.sScrollSource = null;
		}
		this._applyTransform();
	};

	GanttChartWithTable.prototype._applyTransform = function(){
		this.$().find(this.getDomSelectorById("spm-svg-table"))
			.css("transform", "translateY(" + (-this._oTT.$().find(".sapUiTableCCnt").scrollTop()) + "px)");
	};

	GanttChartWithTable.prototype._onSplitterResize = function (oEvent) {
		var oParam = oEvent.getParameters();
		this._oGanttChart._draw();
		// fire event
		this.fireSplitterResize(oParam);

	};

	GanttChartWithTable.prototype._onToolbarSourceChange = function (oEvent) {
		var oldHierarchy = this.getHierarchyKey();
		var oldMode = this.getMode();
		this.setHierarchyKey(oEvent.getParameter("id"));

		this.notifySourceChange();
		this.fireGanttChartSwitchRequested({
			hierarchyKey: oEvent.getParameter("id"),
			oldHierarchyKey: oldHierarchy,
			oldMode: oldMode
		});
	};
	
	GanttChartWithTable.prototype._onToolbarExpandChartChange = function (oEvent) {
		var bExpanded = oEvent.getParameter("isExpand"),
			aChartSchemes = oEvent.getParameter("expandedChartSchemes");
		this.handleExpandChartChange(bExpanded, aChartSchemes, null /**selected Indices*/);

	};

	GanttChartWithTable.prototype._onToolbarExpandTreeChange = function(oEvent){
		var sAction = oEvent.getParameter("action");
		if (sAction){
			var aSelectedRows = this._oTT.getSelectedIndices();
			for (var i = aSelectedRows.length - 1; i > -1; i--){
				this._oTT[sAction](aSelectedRows[i]);
				aSelectedRows = this._oTT.getSelectedIndices();
			}
		}
	};

	GanttChartWithTable.prototype._onToolbarModeChange = function (oEvent) {
		// update data if mode is bound to model
		var oBindingInfo = this.getBinding("mode");
		if (oBindingInfo) {
			oBindingInfo.setValue(oEvent.getParameter("mode"));
		}
		// trigger mode change
		this.setMode(oEvent.getParameter("mode"));
	};

	GanttChartWithTable.prototype.handleExpandChartChange = function (bExpanded, aChartSchemes, aSelectedIndices) {
		aSelectedIndices = aSelectedIndices ? aSelectedIndices : this._oTT.getSelectedIndices();
		this._oGanttChart.handleExpandChartChange(bExpanded, aChartSchemes, aSelectedIndices);
	};

	GanttChartWithTable.prototype.invertRowExpandStatus = function (aSelectedIndices, aChartSchemes) {
		if (aSelectedIndices && aSelectedIndices.length > 0 && aChartSchemes){
			this._oGanttChart.invertRowExpandStatus(aSelectedIndices, aChartSchemes);
		}
	};

	GanttChartWithTable.prototype._updateTableRowHeights = function () {
		var oTable = this._oTT;

		var aHeights = this._getRowHeights();
		if (!aHeights) {
			return;
		}
		oTable._updateRowHeights(aHeights, false);
	};

	GanttChartWithTable.prototype._getRowHeights = function () {
		return this._aHeights;
	};

	GanttChartWithTable.prototype.setBaseRowHeight = function (nBaseRowHeight) {
		this.setProperty("baseRowHeight", nBaseRowHeight);
		this._oTT.setRowHeight(nBaseRowHeight);
		return this._oGanttChart.setBaseRowHeight(nBaseRowHeight);
	};

	GanttChartWithTable.prototype.getBaseRowHeight = function () {
		return this._oGanttChart.getBaseRowHeight();
	};

	GanttChartWithTable.prototype._onTTRowUpdate = function(){
		var $tableMask = this.$().find(this.getDomSelectorById("spm-svg-table-ctn"));
		if (this._oGanttChart.isRowExpanded()){
			var $tableDom = this._oTT.$();
			$tableMask.height($tableDom.find(".sapUiTableCCnt").height());
			$tableMask.show();

			var $tableMaskSvg = $tableMask.find(".sapGanttSPMaskSvg");
			$tableMaskSvg.height($tableDom.find(".sapUiTableCtrlCnt").height());
			this._drawSvg();
		} else {
			$tableMask.hide();
		}
		this._adjustGanttInferredRowHeight();
		this._oTT._updateTableContent();
		this._adjustChartHeaderHeight();
	};

	GanttChartWithTable.prototype._adjustChartHeaderHeight = function (){
		var $tableExtDiv = this._oTT.$().find(".sapUiTableExt");
		var $tableHeaderDiv = this._oTT.$().find(".sapUiTableColHdrCnt");
		var iGanttChartHeaderHeight = $tableExtDiv.outerHeight() + $tableHeaderDiv.height() + 2;

		var $headerDiv = this._oGanttChart.$().find(".sapGanttChartHeader");
		$headerDiv.height(iGanttChartHeaderHeight);
		$headerDiv.css("min-height", iGanttChartHeaderHeight);
		var $headerSvg = this._oGanttChart.$().find(".sapGanttChartHeaderSvg");
		$headerSvg.height(iGanttChartHeaderHeight);
		$headerSvg.css("min-height", iGanttChartHeaderHeight);
	};

	GanttChartWithTable.prototype._adjustGanttInferredRowHeight = function (){
		var aHeights = this._getRowHeights();
		var iFirstVisibleRowIndex = this.getFirstVisibleRow();
		var aShapeDatas = this._oGanttChart._getDrawingData([iFirstVisibleRowIndex, iFirstVisibleRowIndex]);
		if (aHeights && aHeights.length > 0 && aShapeDatas && aShapeDatas.length > 0){
			var iBaseRowHeight = aHeights[0] / aShapeDatas[0].visibleRowSpan;
			var iPreInferedBaseRowHeight = this._oGanttChart._iInferedBaseRowHeight;
			if (iBaseRowHeight !== iPreInferedBaseRowHeight) {
				this._oGanttChart._setInferedBaseRowHeight(iBaseRowHeight);
				/* For the very first initial loading of GanttChart, sometimes (at certain probability) the GanttChart rendered
				 * before left selection panel which means the '_iInferedBaseRowHeight' remain undefined while GanttChart got rendered,
				 * when GanttChart did not know the right row height of selection panel. The result is GanttChart row height is not sync with left
				 * selection panel, so here needs to trigger re-render of GanttChart manually*/
				if (iPreInferedBaseRowHeight === undefined) {
					this._oTC.updateRows();
				}
			}
		}
	};

	GanttChartWithTable.prototype._syncGanttTablesDomEvents = function(oEvent) {

		var oSourceTable = oEvent.srcControl,
			oTargetTable = oSourceTable.getId() === this._oTT.getId() ? this._oTC : this._oTT;

		oSourceTable.$().find(".sapUiTableRowHdr, .sapUiTableTr").hover(function(oEvent) {
			var iIndex = jQuery(oEvent.currentTarget).data("sapUiRowindex");

			oTargetTable.$().find(".sapUiTableCtrlFixed > tbody > tr.sapUiTableTr")
							.filter(":eq(" + iIndex + ")").addClass("sapUiTableRowHvr");
			oTargetTable.$().find(".sapUiTableCtrlScroll > tbody > tr.sapUiTableTr")
							.filter(":eq(" + iIndex + ")").addClass("sapUiTableRowHvr");
			oTargetTable.$().find(".sapUiTableRowHdr")
							.filter(":eq(" + iIndex + ")").addClass("sapUiTableRowHvr");

		}, function(oEvent) {
			oTargetTable.$().find(".sapUiTableCtrlFixed > tbody > tr.sapUiTableTr").removeClass("sapUiTableRowHvr");
			oTargetTable.$().find(".sapUiTableCtrlScroll > tbody > tr.sapUiTableTr").removeClass("sapUiTableRowHvr");
			oTargetTable.$().find(".sapUiTableRowHdr").removeClass("sapUiTableRowHvr");
		});
	};

	/*
	 * Implementation of sap.gantt.GanttChartBase._setLargeDataScrolling method.
	 */
	GanttChartWithTable.prototype._setLargeDataScrolling = function(bLargeDataScrolling) {
		if (this._oTT._setLargeDataScrolling) {
			this._oTT._setLargeDataScrolling(!!bLargeDataScrolling);
		}
		if (this._oTC._setLargeDataScrolling) {
			this._oTC._setLargeDataScrolling(!!bLargeDataScrolling);
		}
	};

	/**
	 * Returns the effective toolbar scheme key.
	 * 
	 * @returns {string} - Toolbar scheme key.
	 * @public
	 */
	GanttChartWithTable.prototype.getToolbarSchemeKey = function () {
		return this._oToolbar.getToolbarSchemeKey();
	};

	/**
	 * Scrolls the visible chart area to a certain time. 
	 * 
	 * <p>It can be used to implement the function of 'Jump To First', 'Jump To Last' and 'Jump To Current'.</p>
	 *
	 * @param {Date} oDate The date object to which the user wants the visible area to scroll.
	 * @public
	 */
	GanttChartWithTable.prototype.jumpToPosition = function(oDate) {
		this._oGanttChart.jumpToPosition(oDate);
	};

	GanttChartWithTable.prototype.selectShapes = function(aIds, isExclusive) {
		return this._oGanttChart.selectShapes(aIds, isExclusive);
	};

	GanttChartWithTable.prototype.deselectShapes = function(aIds) {
		return this._oGanttChart.deselectShapes(aIds);
	};

	GanttChartWithTable.prototype.selectRelationships = function(aIds, isExclusive) {
		return this._oGanttChart.selectRelationships(aIds, isExclusive);
	};

	GanttChartWithTable.prototype.deselectRelationships = function(aIds) {
		return this._oGanttChart.deselectRelationships(aIds);
	};

	GanttChartWithTable.prototype.selectRows = function(aIds, isExclusive) {
		return this._oGanttChart.selectRows(aIds, isExclusive);
	};

	GanttChartWithTable.prototype.deselectRows = function(aIds) {
		return this._oGanttChart.deselectRows(aIds);
	};

	GanttChartWithTable.prototype.selectRowsAndShapes = function(aIds, bIsExclusive) {
		return this._oGanttChart.selectRowsAndShapes(aIds, bIsExclusive);
	};

	GanttChartWithTable.prototype.getAllSelections = function () {
		return this._oGanttChart.getAllSelections();
	};

	GanttChartWithTable.prototype.getSelectedShapes = function() {
		var aSelectedShapes = this._oGanttChart.getSelectedShapes();
		return aSelectedShapes;
	};

	GanttChartWithTable.prototype.getSelectedRows = function() {
		var aSelectedRows = this._oGanttChart.getSelectedRows();
		return aSelectedRows;
	};

	GanttChartWithTable.prototype.getSelectedRelationships = function() {
		var aSelectedRelationships = this._oGanttChart.getSelectedRelationships();
		return aSelectedRelationships;
	};

	GanttChartWithTable.prototype.setDraggingData = function(oDraggingShape) {
		this._oGanttChart.setDraggingData(oDraggingShape);
	};

	GanttChartWithTable.prototype.getRowByShapeUid = function (sShapeUid) {
		return this._oGanttChart.getRowByShapeUid(sShapeUid);
	};

	GanttChartWithTable.prototype._drawSelectionPanel = function () {
		var iTableHeaderWidth = this._oTT.$().find(".sapUiTableRowHdrScr").width();

		var aVisibleRowDatas = this._getVisibleRowData();
		if (aVisibleRowDatas !== undefined){
			this._oSelectionPanelDrawer.drawSvg(d3.select(this.getDomSelectorById("spm-svg-table")), aVisibleRowDatas, iTableHeaderWidth, this);
			this.$().find(this.getDomSelectorById("spm-svg-table")).css("transform", "translateY(" + (-this._oTT.$().find(".sapUiTableCCnt").scrollTop()) + "px)");
		}
	};

	GanttChartWithTable.prototype._getVisibleRowData = function () {
		var iFirstVisibleRow = this._oTT.getFirstVisibleRow();
		//"+1" is to keep consistency with GanttChart, where one extra row would be drawn
		var iVisibleRowCount = this.getVisibleRowCount() + 1;

		var aVisibleRowDatas = this._oGanttChart._getDrawingData([iFirstVisibleRow, iFirstVisibleRow + iVisibleRowCount - 1]);
		var iBaseRowHeight = this._oGanttChart.getBaseRowHeight();
		var iPointY = 0;

		for (var i = 0; i < aVisibleRowDatas.length; i++){
			var oShapeData = aVisibleRowDatas[i];
			oShapeData.rowHeight = oShapeData.rowSpan * iBaseRowHeight;
			oShapeData.y = iPointY;
			iPointY += oShapeData.rowHeight;
		}

		return aVisibleRowDatas;
	};

	GanttChartWithTable.prototype._appendMaskSvg = function(){
		var $tableMask = this.$().find(this.getDomSelectorById("spm-svg-table-ctn"));
		var $tableDom = this._oTT.$();

		if ($tableMask.length == 0) {

			$tableMask = $("<div id='" + this.getId() + "-spm-svg-table-ctn' class='sapGanttChartSPMSvgCtn' >" + 
						"<svg id='" + this.getId() + "-spm-svg-table' class='sapGanttSPMaskSvg'>" +
						"</svg>" +
					"</div>");

			$tableDom.parent().append($tableMask);
		}
	};

	GanttChartWithTable.prototype._updateMaskSvg = function (){
		var $tableMask = this.$().find(this.getDomSelectorById("spm-svg-table-ctn"));
		var $tableDom = this._oTT.$();

		$tableMask.height($tableDom.find(".sapUiTableCCnt").height());
		$tableMask.width($(document).width());
		
		$tableMask.css("top", this._oGanttChart.$().find(".sapGanttChartHeader").height() + 1);
		$tableMask.css("min-width", $tableDom.find("table").css("min-width"));
		
		var $tableMaskSvg = $tableMask.find(".sapGanttSPMaskSvg");
		$tableMaskSvg.width($tableMask.width());
		$tableMaskSvg.height($tableDom.find(".sapUiTableCtrlCnt").height());
	};

	GanttChartWithTable.prototype.getAxisOrdinal = function () {
		return this._oGanttChart.getAxisOrdinal();
	};

	GanttChartWithTable.prototype.getAxisTime = function () {
		return this._oGanttChart.getAxisTime();
	};

	GanttChartWithTable.prototype.expandToLevel = function (iLevel) {
		this._oTT.expandToLevel(iLevel);
		return this;
	};

	GanttChartWithTable.prototype.expand = function(iRowIndex) {
		this._oTT.expand(iRowIndex);
		return this;
	};
	
	GanttChartWithTable.prototype.collapse = function(iRowIndex) {
		this._oTT.collapse(iRowIndex);
		return this;
	};

	GanttChartWithTable.prototype.getVisibleRowCount = function() {
		return this._oTT.getVisibleRowCount();
	};
	
	/**
	 * Selects a row in the selection panel.
	 * 
	 * @see sap.ui.table.Table.setSelectedIndex
	 * 
	 * @param {int} iRowIndex The row index to be selected (if any exists)
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 */
	GanttChartWithTable.prototype.setSelectedIndex = function(iRowIndex) {
		this._oTT.setSelectedIndex(iRowIndex);
		return this;
	};
	
	/**
	 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
	 * start and end of a selection range, when using Shift-Click to select multiple entries. 
	 * 
	 * @see sap.ui.table.Table.getSelectedIndex
	 * 
	 * @return {int[]} An array containing all selected indexes (ascending ordered integers)
	 * @public
	 */
	GanttChartWithTable.prototype.getSelectedIndex = function() {
		return this._oTT.getSelectedIndex();
	};
	
	/**
	 * Gets the first visible row of the selection panel. 
	 * 
	 * @see sap.ui.table.Table.getFirstVisibleRow
	 * 
	 * @return {int} the first visible row index
	 * @public
	 * @deprecated We recommend use getTableProperties function instead
	 */
	GanttChartWithTable.prototype.getFirstVisibleRow = function() {
		return this.getTableProperties().firstVisibleRow;
	};

	/**
	 * Sets the first visible row in the selection panel.
	 * 
	 * @see sap.ui.table.Table.setFirstVisibleRow
	 * 
	 * @param {int} iRowIndex The row index to be set as the first visible row
	 * @return {sap.gantt.GanttChartWithTable} A reference to the GanttChartWithTable control, which can be used for chaining
	 * @public
	 * @deprecated We recommend use setTableProperties function instead
	 */
	GanttChartWithTable.prototype.setFirstVisibleRow = function(iRowIndex) {
		this.setTableProperties({
			firstVisibleRow: iRowIndex
		});
		return this;
	};
	
	GanttChartWithTable.prototype.getRows = function() {
		return this._oTT.getRows();
	};
	
	GanttChartWithTable.prototype.exit = function () {
		this._detachToolbarEvents();
		this._oSplitter.destroy();
	};

	GanttChartWithTable.prototype.notifySourceChange = function(){
		//when switch hierarchy, set the first row as the first visible row
		this._oTT.setFirstVisibleRow(0);
		this._oGanttChart.notifySourceChange();
	};

	/**
	 * Triggers automatic resizing of a column to the widest content.(experimental!)
	 * 
	 * @see sap.ui.table.Table.autoResizeColumn
	 * 
	 * @param {int} iColId column id
	 * @public
	 */
	GanttChartWithTable.prototype.autoResizeColumn = function(iColId) {
		if (iColId >= 0 && jQuery.isNumeric(iColId)) {
			this._oTT.autoResizeColumn(iColId);
		} else {
			for (var i = this._oTT.getColumns().length; i >= 0; i--) {
				this._oTT.autoResizeColumn(i);
			}
		}
	};
	/**
	 * Keep code here although it is not used. If autoResizeColumn enhanced by UI5, we can use it.
	 * Currently autoResizeColumn will cause table flashing several times. Because UI5 only support the autoResizeColumn
	 * one column by one column, no API to resize all columns one time.
	 * @private
	 */
	GanttChartWithTable.prototype._autoResizeColumn = function() {
		if (this._oHierarchyConfigMap[this.getHierarchyKey()].getAutoResizeColumn()) {
			this.autoResizeColumn();
		}
	};
	
	GanttChartWithTable.prototype.redraw = function (bHard) {
		this._oGanttChart.redraw(bHard);
	};

	GanttChartWithTable.prototype.selectByUid = function (aUid) {
		this._oGanttChart.selectByUid(aUid);
	};

	GanttChartWithTable.prototype.getTTHsbDom = function () {
		return this._oTT.getDomRef(sap.ui.table.SharedDomRef.HorizontalScrollBar);
	};

	GanttChartWithTable.prototype.getTTVsbDom = function () {
		return this._oTT.getDomRef(sap.ui.table.SharedDomRef.VerticalScrollBar);
	};

	GanttChartWithTable.prototype.getTCVsbDom = function () {
		return this._oGanttChart.getTTVsbDom();
	};

	["addCustomToolbarItem", "insertCustomToolbarItem", "removeCustomToolbarItem", "indexOfCustomToolbarItem", "removeAllCustomToolbarItems", "destroyCustomToolbarItems", "getCustomToolbarItems"]
	.forEach(function (sMethod) {
		GanttChartWithTable.prototype[sMethod] = function () {
			return this._oToolbar[sMethod].apply(this._oToolbar, arguments);
		};
	});
	return GanttChartWithTable;
}, true);

}; // end of sap/gantt/GanttChartWithTable.js
if ( !jQuery.sap.isDeclared('sap.gantt.legend.DimensionLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

		(c) Copyright 2009-2015 SAP SE. All rights reserved
	
 */
jQuery.sap.declare('sap.gantt.legend.DimensionLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/gantt/legend/DimensionLegend",[
	"sap/ui/core/Control", "./LegendBase", "sap/gantt/drawer/Legend"
], function (Control, LegendBase, LegendDrawer) {
	"use strict";

	/**
	 * Creates and initializes a new Dimension Legend class.
	 * 
	 * @param {string} [sId] ID of the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * 
	 * @class 
	 * Dimension Legend provides a template for two-dimension legends. This template defines the representation (shape, 
	 * pattern, and color) of individual legend items and their corresponding meanings in both dimensions.
	 * 
	 * Consider that you need to create a legend where legend items represent both the type and status of an object. 
	 * In this case, you can configure xDimention to indicate object types and yDimension to indicate object statuses. 
	 * Assume that valid object types are "Freight Order", "Freight Unit", and "Trailer Unit"; valid object statuses are
	 * "Executed", "In Execution", "Fixed", "Planned", and “Unplanned”. You will have a three by four two-dimension legend 
	 * containing twelve legend items. Each them represents an object in a specific type and a specific status. For 
	 * example, a red square stands for executed freight orders.
	 * 
	 * @extends sap.gantt.legend.LegendBase
	 * 
	 * @author SAP SE
	 * @version 1.50.5
	 * 
	 * @constructor
	 * @public
	 * @alias sap.gantt.legend.DimensionLegend
	 */
	var DimensionLegend = LegendBase.extend("sap.gantt.legend.DimensionLegend",/** @lends sap.gantt.legend.DimensionLegend.prototype */ {
		metadata: {
			properties: {
				/**
				 * A Shape instance that contains two sets of data, one for the 'x' dimension and the other for the 'y' dimension. 
				 * The system determines the representation of a legend element according to its 'x' dimension and 'y' dimension 
				 * values.
				 */
				shape: {type: "sap.gantt.config.Shape"},

				/**
				 * Name of xDimension. Note that the Shape instance used in DimensionLegend must have a set of data matches 
				 * this property's value. The data set contains entries specifying the representation of individual legend 
				 * items.
				 */
				xDimension: {type: "string"},

				/**
				 * Name of yDimension. Note that the Shape instance used in DimensionLegend must have a set of data matches 
				 * this property's value. The data set contains entries specifying the representation of individual legend 
				 * items.
				 */
				yDimension: {type: "string"},

				/**
				 * Valid values of xDimension. Each of these values has a corresponding entry in the data set that matches 
				 * xDimension in the Shape instance.
				 */
				xDomain: {type: "any[]", defaultValue: []},

				/**
				 * Valid values of yDimension. Each of these values has a corresponding entry in the data set that matches 
				 * yDimension in the Shape instance.
				 */
				yDomain: {type: "any[]", defaultValue: []},

				//TODO: add jsdoc here
				/**
				 * 
				 */
				exclude: {type: "any[][]", defaultValue: []},

				/**
				 * Space between two legend items.
				 */
				legendSpace: {type: "float", defaultValue: 8}
			}
		}
	});

	DimensionLegend.prototype.init = function () {
		LegendBase.prototype.init.apply(this, arguments);
		this._oDimensionLegendDrawer = new LegendDrawer();
	};
	
	DimensionLegend.prototype.applySettings = function () {
		var retVal = Control.prototype.applySettings.apply(this, arguments);
		this._modifyDimensionFunction();
		return retVal;
	};
	
	DimensionLegend.prototype._modifyDimensionFunction = function () {
		var sXDimension = this.getXDimension(),
			sYDimension = this.getYDimension();
		
		this._oShapeInstance._oLegend = this;
		this._oShapeInstance._sXDimension = sXDimension;
		this._oShapeInstance._sYDimension = sYDimension;
		
		this._oShapeInstance["get" + this._capitalFirst(sXDimension)] = function (oData) {
			if (this.mShapeConfig.hasShapeProperty(this._sXDimension)) {
				return this._configFirst(this._sXDimension, oData);
			}
			if (oData.xIndex === -1) {
				return sap.gantt.DIMENSION_LEGEND_NIL;
			}
			return this._oLegend.getXDomain()[oData.xIndex];
		};
		
		this._oShapeInstance["get" + this._capitalFirst(sYDimension)] = function (oData) {
			if (this.mShapeConfig.hasShapeProperty(this._sYDimension)) {
				return this._configFirst(this._sYDimension, oData);
			}
			if (oData.yIndex === -1) {
				return sap.gantt.DIMENSION_LEGEND_NIL;
			}
			return this._oLegend.getYDomain()[oData.yIndex];
		};
	};
	
	DimensionLegend.prototype._capitalFirst = function (sOrigin) {
		return sOrigin.charAt(0).toUpperCase() + (
				sOrigin.length > 1 ? sOrigin.slice(1) : "");
	};

	DimensionLegend.prototype.onAfterRendering = function () {
		if (this._oShapeInstance) {
			var aSvg = d3.select("#" + this.getId() + "-svg");
			var oLegendSize = this._drawDimensionLegend(aSvg, this._oShapeInstance);
			aSvg.attr("width", oLegendSize.width + "px");
			aSvg.attr("height", oLegendSize.height + "px");

			var aPath = d3.select("#" + this.getId() + "-dimension-path");
			var oPathSize = this._drawDimensionPath(aPath, this._oShapeInstance);
			aPath.attr("width", oLegendSize.width + "px");
			aPath.attr("height", oPathSize.height + "px");
			aPath.style("top", oLegendSize.height + "px");

			var aText = d3.select("#" + this.getId() + "-dimension-text");
			this._drawDimensionText(aText, this._oShapeInstance);
			aText.style(sap.ui.getCore().getConfiguration().getRTL() ? "right" : "left", oLegendSize.width + "px");
			aText.attr("height", oLegendSize.height + oPathSize.height + this.getLegendSpace() * 2 + "px");

			d3.select("#" + this.getId()).style("height", oLegendSize.height + oPathSize.height + this.getLegendSpace() * 2 + "px");
		}
	};

	DimensionLegend.prototype.setShape = function (oShape) {
		this.setProperty("shape", oShape);
		if (oShape) {
			this._oShapeInstance = this._instantShape([oShape])[0];
		}
		return this;
	};

	DimensionLegend.prototype._drawDimensionLegend = function (aShape, oShape) {
		var aXDomain = this.getXDomain();

		//create data to draw dimension legend
		var aDrawData = this._prepareData(oShape);

		// bind data to row g
		var aRowG = aShape.selectAll("." + oShape.getId() + "-row")
			.data(aDrawData);
		aRowG.enter().append("g")
			.classed(oShape.getId() + "-row", true);
		aRowG.exit().remove();
		// draw
		if (!aRowG.empty()) {
			this._oDimensionLegendDrawer._recursiveDraw(aRowG, oShape);
		}
		var oLegendSize = {};
		var iLength = aXDomain.length;
		if (iLength > 0) {
			oLegendSize.width = this.getScaledLegendWidth() * iLength + this.getLegendSpace() * (iLength + 1);
			oLegendSize.height = this.getScaledLegendHeight() * aDrawData.length + this.getLegendSpace() * 
								(aDrawData.length + 1);
		}
		return oLegendSize;
	};

	DimensionLegend.prototype._prepareData = function (oShape) {
		var aRetVal = [],
		sXDimension = this.getXDimension(),
		sYDimension = this.getYDimension(),
		aXDomain = this.getXDomain(),
		aYDomain = this.getYDomain(),
		aExcludeData = this.getExclude();
		this.aXDimension = [];
		this.aYDimension = [];
		var that = this,
			oLegendData;

		jQuery.each(aXDomain, function(iIndex, sVal) {
			oLegendData = {};
			oLegendData.xIndex = iIndex;
			oLegendData.yIndex = -1;
			that.aXDimension.push(oShape.getLegend(oLegendData));
		});
		this.aReversedXDimension = jQuery.extend(true, [], this.aXDimension);
		this.aReversedXDimension.reverse();

		jQuery.each(aYDomain, function(iIndex, sVal) {
			oLegendData = {};
			oLegendData.xIndex = -1;
			oLegendData.yIndex = iIndex;
			that.aYDimension.push(oShape.getLegend(oLegendData));
		});

		jQuery.each(aYDomain, function(iYIndex, oYValue) {
			var aRowData = [];
			jQuery.each(aXDomain, function(iXIndex, oXValue) {
				var bExclude = false;
				jQuery.each(aExcludeData, function(i, aData){
					if ((oXValue == aData[0]) && (oYValue == aData[1])) {
						bExclude = true;
						return false;
					}
				});
				if (!bExclude) {
					var oLegendData = {};
					oLegendData.xIndex = iXIndex;
					oLegendData.yIndex = iYIndex;
					oLegendData[sXDimension] = oXValue;
					oLegendData[sYDimension] = oYValue;
					oLegendData.xName = that.aXDimension[iXIndex];
					oLegendData.yName = that.aYDimension[iYIndex];
					aRowData.push(oLegendData);
				}
			});
			if (aRowData.length > 0) {
				aRetVal.push(aRowData);
			}
		});
		return aRetVal;
	};

	DimensionLegend.prototype._drawDimensionPath = function (aShape, oShape) {
		var aXDomain = this.getXDomain(),
		iXLength = aXDomain.length,
		that = this;

		var aPaths = aShape.selectAll(".dimension-path")
		.data(aXDomain);
		aPaths.enter().append("path")
		.attr("d", function(d, i){
			var iWidth = that.getScaledLegendWidth();
			var iHeight = that.getScaledLegendHeight();
			var x0 = 0,
			height = height = iHeight * (iXLength - 1 - i) + that.getLegendSpace() * (iXLength - i),
			width = iWidth * (iXLength - 1 - i) + that.getLegendSpace() * (iXLength - i);
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				x0 = iWidth * (iXLength - 1 - i) + that.getLegendSpace() * (iXLength - i) + iWidth / 2;
				width = -width;
			}else {
				x0 = iWidth * i + that.getLegendSpace() * (i + 1) + iWidth / 2;
			}
			return "M" + x0 + " 0 v" + height + " h" + width;
		})
		.attr("fill", "none");
		aPaths.exit().remove();

		var oPathSize = {};
		oPathSize.height = 0;
		if (iXLength > 0) {
			oPathSize.height = this.getScaledLegendHeight() * iXLength + this.getLegendSpace() * (iXLength - 1);
		}
		return oPathSize;
	};

	DimensionLegend.prototype._drawDimensionText = function (aShape, oShape) {
		var aData = this.aYDimension.concat(this.aReversedXDimension);
		var iXDimensionStartIndex = this.aYDimension.length;
		var that = this;

		var aTexts = aShape.selectAll(".dimension-text")
		.data(aData);
		aTexts.enter().append("text")
		.attr("x",function (d) {
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				return 100;
			}
			return 0;
		})
		.attr("y", function(d, i){
			return that.getScaledLegendHeight() * i + that.getLegendSpace() * (i + 1) + 
					parseInt(that.getFontSize(), 10) / 2 + that.getScaledLegendHeight() / 2 - 2;})
		.text(function(d){return d;})
		.attr("font-size", that.getFontSize() + "px")
		.attr("font-style", function(d,i){
			return i < iXDimensionStartIndex ? "normal" : "italic";
		})
		.attr("text-anchor", sap.ui.Device.browser.name === "ie" && sap.ui.getCore().getConfiguration().getRTL() ? "end" : "start");
		aTexts.select("title").remove();
		aTexts.insert("title", ":first-child")
		.text(function(d){return d;});
		aTexts.exit().remove();
	};

	return DimensionLegend;
}, true);

}; // end of sap/gantt/legend/DimensionLegend.js
