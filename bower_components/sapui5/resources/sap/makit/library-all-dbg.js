// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.makit.library-all');
if ( !jQuery.sap.isDeclared('sap.makit.ChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.makit.ChartRenderer");

/**
 * @class Chart renderer. 
 * @static
 */
sap.makit.ChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.makit.ChartRenderer.render = function(oRm, oControl){
	 // write the HTML into the render manager
	 oRm.write("<div id=\"sap-ui-dummy-" + oControl.getId() + "\" style=\"display:none\">");
	 oRm.write("<div");
	 oRm.writeControlData(oControl);
	 oRm.writeAttribute("data-sap-ui-preserve", oControl.getId());
	 oRm.addClass("sapMakitChart");
	 oRm.writeClasses();
	 oRm.write(">"); // div element
	 oRm.write("</div>");
	 oRm.write("</div>");
};

}; // end of sap/makit/ChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.makit.CombinationChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */


jQuery.sap.declare("sap.makit.CombinationChartRenderer");

/**
 * @class CombinationChart renderer. 
 * @static
 */
sap.makit.CombinationChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.makit.CombinationChartRenderer.render = function(oRm, oControl){ 
	 oRm.write("<div id=\"sap-ui-dummy-" + oControl.getId() + "\" style=\"display:none\">");
	 oRm.write("<div");
	 oRm.writeControlData(oControl);
	 oRm.writeAttribute("data-sap-ui-preserve", oControl.getId());
	 oRm.addClass("sapMakitChart");
	 oRm.writeClasses();
	 oRm.write(">");
	 oRm.write("</div>");
	 oRm.write("</div>");
};
}; // end of sap/makit/CombinationChartRenderer.js
if ( !jQuery.sap.isDeclared('sap.makit.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.makit (1.50.6)
 */
jQuery.sap.declare("sap.makit.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * Mobile Chart controls based on the Sybase MAKIT charting lib.
 *
 * @namespace
 * @name sap.makit
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.makit",
	dependencies : ["sap.ui.core"],
	types: [
		"sap.makit.ChartType",
		"sap.makit.LegendPosition",
		"sap.makit.SortOrder",
		"sap.makit.ValueBubblePosition",
		"sap.makit.ValueBubbleStyle"
	],
	interfaces: [],
	controls: [
		"sap.makit.Chart",
		"sap.makit.CombinationChart"
	],
	elements: [
		"sap.makit.Axis",
		"sap.makit.Category",
		"sap.makit.CategoryAxis",
		"sap.makit.Column",
		"sap.makit.Layer",
		"sap.makit.MakitLib",
		"sap.makit.Row",
		"sap.makit.Series",
		"sap.makit.Value",
		"sap.makit.ValueAxis",
		"sap.makit.ValueBubble"
	],
	version: "1.50.6"
});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ChartType.
jQuery.sap.declare("sap.makit.ChartType");
/**
 * @class Enumeration for chart type
 *
 * @version 1.50.6
 * @static
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.ChartType = {

	/**
	 * Column chart
	 * @public
	 */
	Column : "Column",

	/**
	 * Line chart
	 * @public
	 */
	Line : "Line",

	/**
	 * Bubble chart
	 * @public
	 */
	Bubble : "Bubble",

	/**
	 * Horizontal table bar chart
	 * @public
	 */
	Bar : "Bar",

	/**
	 * Pie chart
	 * @public
	 */
	Pie : "Pie",

	/**
	 * Donut chart
	 * @public
	 */
	Donut : "Donut",

	/**
	 * Stacked column chart
	 * @public
	 */
	StackedColumn : "StackedColumn",

	/**
	 * 100% stacked column chart
	 * @public
	 */
	HundredPercentStackedColumn : "HundredPercentStackedColumn",

	/**
	 * Waterfall Column chart
	 * @public
	 */
	WaterfallColumn : "WaterfallColumn",

	/**
	 * Waterfall Bar chart
	 * @public
	 */
	WaterfallBar : "WaterfallBar"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.LegendPosition.
jQuery.sap.declare("sap.makit.LegendPosition");
/**
 * @class Enumeration for legend position.
 *
 * @version 1.50.6
 * @static
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.LegendPosition = {

	/**
	 * Legend location is on the top of the chart
	 * @public
	 */
	Top : "Top",

	/**
	 * Legend location is on the left of the chart
	 * @public
	 */
	Left : "Left",

	/**
	 * Legend location is on the bottom of the chart
	 * @public
	 */
	Bottom : "Bottom",

	/**
	 * Legend location is on the right of the chart
	 * @public
	 */
	Right : "Right",

	/**
	 * Hide the legend
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.SortOrder.
jQuery.sap.declare("sap.makit.SortOrder");
/**
 * @class Enumeration for sort order
 *
 * @version 1.50.6
 * @static
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.SortOrder = {

	/**
	 * Ascending sort
	 * @public
	 */
	Ascending : "Ascending",

	/**
	 * Descending sort
	 * @public
	 */
	Descending : "Descending",

	/**
	 * Partially sort
	 * @public
	 */
	Partial : "Partial",

	/**
	 * No sorting
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ValueBubblePosition.
jQuery.sap.declare("sap.makit.ValueBubblePosition");
/**
 * @class Position for Value Bubble only applies to Pie/Donut Chart.
 *
 * @version 1.50.6
 * @static
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.ValueBubblePosition = {

	/**
	 * Value Bubble position set to above the chart
	 * @public
	 */
	Top : "Top",

	/**
	 * Value Bubble position set to beside the chart
	 * @public
	 */
	Side : "Side"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ValueBubbleStyle.
jQuery.sap.declare("sap.makit.ValueBubbleStyle");
/**
 * @class Enumeration for Value Bubble's positioning style. This applies all chart types except Pie/Donut/HBar chart.
 *
 * @version 1.50.6
 * @static
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.ValueBubbleStyle = {

	/**
	 * The Value Bubble snaps above of the chart, the chart height will adjust accordingly.
	 * @public
	 */
	Top : "Top",

	/**
	 * The Value Bubble floats on the touch point, chart's size will not change.
	 * @public
	 */
	Float : "Float",

	/**
	 * The Value Bubble floats and snaps above of the chart, chart's size will not change.
	 * @public
	 */
	FloatTop : "FloatTop"

};

}; // end of sap/makit/library.js
if ( !jQuery.sap.isDeclared('sap.makit.Axis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Axis.
jQuery.sap.declare("sap.makit.Axis");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Axis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getShowPrimaryLine showPrimaryLine} : boolean (default: true)</li>
 * <li>{@link #getShowGrid showGrid} : boolean (default: false)</li>
 * <li>{@link #getThickness thickness} : float (default: 1)</li>
 * <li>{@link #getColor color} : string (default: 'gray')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base element for the Axis object for the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Axis
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Axis", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * Indicates whether to show label of the Axis by the primary line
		 */
		"showLabel" : {type : "boolean", group : "Appearance", defaultValue : true},

		/**
		 * Indicates whether to show the primary line of the Axis on the chart area
		 */
		"showPrimaryLine" : {type : "boolean", group : "Appearance", defaultValue : true},

		/**
		 * Indicates whether to show grid of the Axis in the chart area
		 */
		"showGrid" : {type : "boolean", group : "Appearance", defaultValue : false},

		/**
		 * The line thickness of the primary line
		 */
		"thickness" : {type : "float", group : "Appearance", defaultValue : 1},

		/**
		 * Color of the primary line. Accept the following format:
		 * standard name format: gray, red, black, etc
		 * hex format: #ff00ff
		 * rgb format: rgb(256, 0, 256)
		 */
		"color" : {type : "string", group : "Appearance", defaultValue : 'gray'}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Axis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Axis.extend
 * @function
 */


/**
 * Getter for property <code>showLabel</code>.
 * Indicates whether to show label of the Axis by the primary line
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLabel</code>
 * @public
 * @name sap.makit.Axis#getShowLabel
 * @function
 */

/**
 * Setter for property <code>showLabel</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLabel  new value for property <code>showLabel</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowLabel
 * @function
 */


/**
 * Getter for property <code>showPrimaryLine</code>.
 * Indicates whether to show the primary line of the Axis on the chart area
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPrimaryLine</code>
 * @public
 * @name sap.makit.Axis#getShowPrimaryLine
 * @function
 */

/**
 * Setter for property <code>showPrimaryLine</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPrimaryLine  new value for property <code>showPrimaryLine</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowPrimaryLine
 * @function
 */


/**
 * Getter for property <code>showGrid</code>.
 * Indicates whether to show grid of the Axis in the chart area
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showGrid</code>
 * @public
 * @name sap.makit.Axis#getShowGrid
 * @function
 */

/**
 * Setter for property <code>showGrid</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowGrid  new value for property <code>showGrid</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowGrid
 * @function
 */


/**
 * Getter for property <code>thickness</code>.
 * The line thickness of the primary line
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>thickness</code>
 * @public
 * @name sap.makit.Axis#getThickness
 * @function
 */

/**
 * Setter for property <code>thickness</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fThickness  new value for property <code>thickness</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setThickness
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * Color of the primary line. Accept the following format:
 * standard name format: gray, red, black, etc
 * hex format: #ff00ff
 * rgb format: rgb(256, 0, 256)
 *
 * Default value is <code>gray</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.makit.Axis#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>gray</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setColor
 * @function
 */

// Start of sap/makit/Axis.js
/*!
 * @copyright@
 */
}; // end of sap/makit/Axis.js
if ( !jQuery.sap.isDeclared('sap.makit.Category') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Category.
jQuery.sap.declare("sap.makit.Category");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Category.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumn column} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Category data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Category
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Category", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * Specify the name of the column to be mapped to the Category Axis's value.
		 */
		"column" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * The text label representing this Category(on value bubble or table's header)
		 */
		"displayName" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Number formatting for the value. Accepted values:
		 * number
		 * currency
		 * percent
		 * roundedN - where N represents number of decimal places e.g. rounded4
		 */
		"format" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Category with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Category.extend
 * @function
 */


/**
 * Getter for property <code>column</code>.
 * Specify the name of the column to be mapped to the Category Axis's value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>column</code>
 * @public
 * @name sap.makit.Category#getColumn
 * @function
 */

/**
 * Setter for property <code>column</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sColumn  new value for property <code>column</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setColumn
 * @function
 */


/**
 * Getter for property <code>displayName</code>.
 * The text label representing this Category(on value bubble or table's header)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Category#getDisplayName
 * @function
 */

/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setDisplayName
 * @function
 */


/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Category#getFormat
 * @function
 */

/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setFormat
 * @function
 */

// Start of sap/makit/Category.js
/*!
 * @copyright@
 */

}; // end of sap/makit/Category.js
if ( !jQuery.sap.isDeclared('sap.makit.CategoryAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.CategoryAxis.
jQuery.sap.declare("sap.makit.CategoryAxis");




/**
 * Constructor for a new CategoryAxis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSortOrder sortOrder} : sap.makit.SortOrder (default: sap.makit.SortOrder.None)</li>
 * <li>{@link #getDisplayLastLabel displayLastLabel} : boolean (default: false)</li>
 * <li>{@link #getDisplayAll displayAll} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.makit.Axis#constructor sap.makit.Axis}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains the properties of the Category's Axis.
 * @extends sap.makit.Axis
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CategoryAxis
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.Axis.extend("sap.makit.CategoryAxis", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * Sort order of the chart
		 */
		"sortOrder" : {type : "sap.makit.SortOrder", group : "Misc", defaultValue : sap.makit.SortOrder.None},

		/**
		 * Whether to always display the last label on the axis regardless of the automatic resize
		 */
		"displayLastLabel" : {type : "boolean", group : "Misc", defaultValue : false},

		/**
		 * Specify whether to display all the category values when there are multiple category data regions.
		 */
		"displayAll" : {type : "boolean", group : "Misc", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.makit.CategoryAxis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.CategoryAxis.extend
 * @function
 */


/**
 * Getter for property <code>sortOrder</code>.
 * Sort order of the chart
 *
 * Default value is <code>None</code>
 *
 * @return {sap.makit.SortOrder} the value of property <code>sortOrder</code>
 * @public
 * @name sap.makit.CategoryAxis#getSortOrder
 * @function
 */

/**
 * Setter for property <code>sortOrder</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.makit.SortOrder} oSortOrder  new value for property <code>sortOrder</code>
 * @return {sap.makit.CategoryAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CategoryAxis#setSortOrder
 * @function
 */


/**
 * Getter for property <code>displayLastLabel</code>.
 * Whether to always display the last label on the axis regardless of the automatic resize
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayLastLabel</code>
 * @public
 * @name sap.makit.CategoryAxis#getDisplayLastLabel
 * @function
 */

/**
 * Setter for property <code>displayLastLabel</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayLastLabel  new value for property <code>displayLastLabel</code>
 * @return {sap.makit.CategoryAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CategoryAxis#setDisplayLastLabel
 * @function
 */


/**
 * Getter for property <code>displayAll</code>.
 * Specify whether to display all the category values when there are multiple category data regions.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayAll</code>
 * @public
 * @name sap.makit.CategoryAxis#getDisplayAll
 * @function
 */

/**
 * Setter for property <code>displayAll</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayAll  new value for property <code>displayAll</code>
 * @return {sap.makit.CategoryAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CategoryAxis#setDisplayAll
 * @function
 */

// Start of sap/makit/CategoryAxis.js
/*!
 * @copyright@
 */

sap.makit.CategoryAxis.prototype.init = function(){
	this.setShowGrid(false);
	this.setShowPrimaryLine(true);
};

}; // end of sap/makit/CategoryAxis.js
if ( !jQuery.sap.isDeclared('sap.makit.Chart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Chart.
jQuery.sap.declare("sap.makit.Chart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Chart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getType type} : sap.makit.ChartType (default: sap.makit.ChartType.Column)</li>
 * <li>{@link #getShowRangeSelector showRangeSelector} : boolean (default: true)</li>
 * <li>{@link #getShowTableView showTableView} : boolean (default: false)</li>
 * <li>{@link #getLegendPosition legendPosition} : sap.makit.LegendPosition</li>
 * <li>{@link #getLineThickness lineThickness} : float (default: 1)</li>
 * <li>{@link #getShowTableValue showTableValue} : boolean (default: true)</li>
 * <li>{@link #getMaxSliceCount maxSliceCount} : int (default: 12)</li>
 * <li>{@link #getPrimaryColorPalette primaryColorPalette} : any</li>
 * <li>{@link #getShowTotalValue showTotalValue} : boolean (default: false)</li>
 * <li>{@link #getNumberOfVisibleCategories numberOfVisibleCategories} : int</li>
 * <li>{@link #getRangeSelectorStartPosition rangeSelectorStartPosition} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRows rows} : sap.makit.Row[]</li>
 * <li>{@link #getColumns columns} : sap.makit.Column[]</li>
 * <li>{@link #getSeries series} : sap.makit.Series</li>
 * <li>{@link #getValues values} : sap.makit.Value[]</li>
 * <li>{@link #getCategoryRegions categoryRegions} : sap.makit.Category[]</li>
 * <li>{@link #getCategory category} : sap.makit.Category</li>
 * <li>{@link #getCategoryAxis categoryAxis} : sap.makit.CategoryAxis</li>
 * <li>{@link #getValueAxis valueAxis} : sap.makit.ValueAxis</li>
 * <li>{@link #getValueBubble valueBubble} : sap.makit.ValueBubble</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.makit.Chart#event:doubletap doubletap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.makit.Chart#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.makit.Chart#event:longpress longpress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Chart control.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.makit.Chart", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"getSelectedCategory", "getSelectedSeries", "getNumberOfCategories", "getSelectedCategoryGroup"
	],
	library : "sap.makit",
	properties : {

		/**
		 * The width of the Chart
		 */
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

		/**
		 * The height of the Chart
		 */
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

		/**
		 * Chart type
		 */
		"type" : {type : "sap.makit.ChartType", group : "Appearance", defaultValue : sap.makit.ChartType.Column},

		/**
		 * Specify whether the range selector should be visible.
		 */
		"showRangeSelector" : {type : "boolean", group : "Appearance", defaultValue : true},

		/**
		 * Toggle to display table view
		 */
		"showTableView" : {type : "boolean", group : "Misc", defaultValue : false},

		/**
		 * Legend position all chart types except Bar chart.
		 * Default position for Pie/Donut chart is Left. All other chart's default position is None. Note: the default legend position is set when the chart type is set first time, subsequent change to the chart type will keep using initial legend position unless it is changed explicitly by user.
		 */
		"legendPosition" : {type : "sap.makit.LegendPosition", group : "Misc", defaultValue : null},

		/**
		 * Specify the line thickness of the line graph. Only applies to Line chart type.
		 */
		"lineThickness" : {type : "float", group : "Misc", defaultValue : 1},

		/**
		 * Toggle to display the table value on a Bar chart. Only applies to Bar chart.
		 */
		"showTableValue" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Set the maximum number of slices in a Pie/Donut chart. If exceeding the specified value, the rest will be categorised into a single slice. Only applies to Pie/Donut.
		 */
		"maxSliceCount" : {type : "int", group : "Misc", defaultValue : 12},

		/**
		 * Allow a chart’s color palette to be modified without affecting the other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
		 * Accept an array of color in string format or hex format. e.g.
		 * 0xff0000
		 * "red"
		 * "rgb(255,0,0)"
		 */
		"primaryColorPalette" : {type : "any", group : "Misc", defaultValue : null},

		/**
		 * Specify whether to show the sum of the value for Waterfall/Waterfall Bar chart. Only applies to Waterfall/WaterfallBar chart.
		 */
		"showTotalValue" : {type : "boolean", group : "Misc", defaultValue : false},

		/**
		 * The number of categories that will be visible on the chart at any time. The minimum value is 2. If not set, the number of visible categories will be automatically adjusted depending on the screen size
		 */
		"numberOfVisibleCategories" : {type : "int", group : "Misc", defaultValue : null},

		/**
		 * Specify the range selector start position, default value is 0.
		 */
		"rangeSelectorStartPosition" : {type : "int", group : "Misc", defaultValue : 0}
	},
	aggregations : {

		/**
		 * The data rows of the chart. User should bind these to their data source
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"rows" : {type : "sap.makit.Row", multiple : true, singularName : "row", bindable : "bindable", deprecated: true}, 

		/**
		 * The data column map of the chart.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"columns" : {type : "sap.makit.Column", multiple : true, singularName : "column", bindable : "bindable", deprecated: true}, 

		/**
		 * Data region property of the chart's Series
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"series" : {type : "sap.makit.Series", multiple : false, deprecated: true}, 

		/**
		 * Data region property of the chart's Values
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"values" : {type : "sap.makit.Value", multiple : true, singularName : "value", deprecated: true}, 

		/**
		 * Data region property of the chart's Categories
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"categoryRegions" : {type : "sap.makit.Category", multiple : true, singularName : "categoryRegion", deprecated: true}, 

		/**
		 * Data region property of the chart's Category
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"category" : {type : "sap.makit.Category", multiple : false, deprecated: true}, 

		/**
		 * Category Axis property of the Chart. Accepts only an instance of CategoryAxis element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"categoryAxis" : {type : "sap.makit.CategoryAxis", multiple : false, deprecated: true}, 

		/**
		 * Value Axis property of the Chart. Accept only an instance of ValueAxis element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"valueAxis" : {type : "sap.makit.ValueAxis", multiple : false, deprecated: true}, 

		/**
		 * Value Bubble property of the Chart. Accept only an instance of ValueBubble element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"valueBubble" : {type : "sap.makit.ValueBubble", multiple : false, deprecated: true}
	},
	events : {

		/**
		 * Double tap event on the chart
		 */
		"doubletap" : {}, 

		/**
		 * Single tap event on the chart
		 */
		"tap" : {}, 

		/**
		 * Long press event on the chart
		 */
		"longpress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Chart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Chart.extend
 * @function
 */

sap.makit.Chart.M_EVENTS = {'doubletap':'doubletap','tap':'tap','longpress':'longpress'};


/**
 * Getter for property <code>width</code>.
 * The width of the Chart
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.makit.Chart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the Chart
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.makit.Chart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setHeight
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Chart type
 *
 * Default value is <code>Column</code>
 *
 * @return {sap.makit.ChartType} the value of property <code>type</code>
 * @public
 * @name sap.makit.Chart#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Column</code> 
 *
 * @param {sap.makit.ChartType} oType  new value for property <code>type</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setType
 * @function
 */


/**
 * Getter for property <code>showRangeSelector</code>.
 * Specify whether the range selector should be visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showRangeSelector</code>
 * @public
 * @name sap.makit.Chart#getShowRangeSelector
 * @function
 */

/**
 * Setter for property <code>showRangeSelector</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowRangeSelector  new value for property <code>showRangeSelector</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setShowRangeSelector
 * @function
 */


/**
 * Getter for property <code>showTableView</code>.
 * Toggle to display table view
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showTableView</code>
 * @public
 * @name sap.makit.Chart#getShowTableView
 * @function
 */

/**
 * Setter for property <code>showTableView</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowTableView  new value for property <code>showTableView</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setShowTableView
 * @function
 */


/**
 * Getter for property <code>legendPosition</code>.
 * Legend position all chart types except Bar chart.
 * Default position for Pie/Donut chart is Left. All other chart's default position is None. Note: the default legend position is set when the chart type is set first time, subsequent change to the chart type will keep using initial legend position unless it is changed explicitly by user.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.makit.LegendPosition} the value of property <code>legendPosition</code>
 * @public
 * @name sap.makit.Chart#getLegendPosition
 * @function
 */

/**
 * Setter for property <code>legendPosition</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.makit.LegendPosition} oLegendPosition  new value for property <code>legendPosition</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setLegendPosition
 * @function
 */


/**
 * Getter for property <code>lineThickness</code>.
 * Specify the line thickness of the line graph. Only applies to Line chart type.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>lineThickness</code>
 * @public
 * @name sap.makit.Chart#getLineThickness
 * @function
 */

/**
 * Setter for property <code>lineThickness</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fLineThickness  new value for property <code>lineThickness</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setLineThickness
 * @function
 */


/**
 * Getter for property <code>showTableValue</code>.
 * Toggle to display the table value on a Bar chart. Only applies to Bar chart.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTableValue</code>
 * @public
 * @name sap.makit.Chart#getShowTableValue
 * @function
 */

/**
 * Setter for property <code>showTableValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTableValue  new value for property <code>showTableValue</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setShowTableValue
 * @function
 */


/**
 * Getter for property <code>maxSliceCount</code>.
 * Set the maximum number of slices in a Pie/Donut chart. If exceeding the specified value, the rest will be categorised into a single slice. Only applies to Pie/Donut.
 *
 * Default value is <code>12</code>
 *
 * @return {int} the value of property <code>maxSliceCount</code>
 * @public
 * @name sap.makit.Chart#getMaxSliceCount
 * @function
 */

/**
 * Setter for property <code>maxSliceCount</code>.
 *
 * Default value is <code>12</code> 
 *
 * @param {int} iMaxSliceCount  new value for property <code>maxSliceCount</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setMaxSliceCount
 * @function
 */


/**
 * Getter for property <code>primaryColorPalette</code>.
 * Allow a chart’s color palette to be modified without affecting the other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
 * Accept an array of color in string format or hex format. e.g.
 * 0xff0000
 * "red"
 * "rgb(255,0,0)"
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>primaryColorPalette</code>
 * @public
 * @name sap.makit.Chart#getPrimaryColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryColorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oPrimaryColorPalette  new value for property <code>primaryColorPalette</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setPrimaryColorPalette
 * @function
 */


/**
 * Getter for property <code>showTotalValue</code>.
 * Specify whether to show the sum of the value for Waterfall/Waterfall Bar chart. Only applies to Waterfall/WaterfallBar chart.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showTotalValue</code>
 * @public
 * @name sap.makit.Chart#getShowTotalValue
 * @function
 */

/**
 * Setter for property <code>showTotalValue</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowTotalValue  new value for property <code>showTotalValue</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setShowTotalValue
 * @function
 */


/**
 * Getter for property <code>numberOfVisibleCategories</code>.
 * The number of categories that will be visible on the chart at any time. The minimum value is 2. If not set, the number of visible categories will be automatically adjusted depending on the screen size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfVisibleCategories</code>
 * @public
 * @name sap.makit.Chart#getNumberOfVisibleCategories
 * @function
 */

/**
 * Setter for property <code>numberOfVisibleCategories</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfVisibleCategories  new value for property <code>numberOfVisibleCategories</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setNumberOfVisibleCategories
 * @function
 */


/**
 * Getter for property <code>rangeSelectorStartPosition</code>.
 * Specify the range selector start position, default value is 0.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>rangeSelectorStartPosition</code>
 * @public
 * @name sap.makit.Chart#getRangeSelectorStartPosition
 * @function
 */

/**
 * Setter for property <code>rangeSelectorStartPosition</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iRangeSelectorStartPosition  new value for property <code>rangeSelectorStartPosition</code>
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#setRangeSelectorStartPosition
 * @function
 */


/**
 * Getter for aggregation <code>rows</code>.<br/>
 * The data rows of the chart. User should bind these to their data source
 * 
 * @return {sap.makit.Row[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getRows
 * @function
 */


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.makit.Row}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#insertRow
 * @function
 */

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.makit.Row}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#addRow
 * @function
 */

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.makit.Row} vRow the row to remove or its index or id
 * @return {sap.makit.Row} the removed row or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeRow
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Row[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeAllRows
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Row</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Row}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#indexOfRow
 * @function
 */
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyRows
 * @function
 */


/**
 * Binder for aggregation <code>rows</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#bindRows
 * @function
 */

/**
 * Unbinder for aggregation <code>rows</code>.
 *
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#unbindRows
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * The data column map of the chart.
 * 
 * @return {sap.makit.Column[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.makit.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.makit.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.makit.Column} vColumn the column to remove or its index or id
 * @return {sap.makit.Column} the removed column or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Column[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyColumns
 * @function
 */


/**
 * Binder for aggregation <code>columns</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#bindColumns
 * @function
 */

/**
 * Unbinder for aggregation <code>columns</code>.
 *
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#unbindColumns
 * @function
 */


/**
 * Getter for aggregation <code>series</code>.<br/>
 * Data region property of the chart's Series
 * 
 * @return {sap.makit.Series}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getSeries
 * @function
 */


/**
 * Setter for the aggregated <code>series</code>.
 * @param {sap.makit.Series} oSeries
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#setSeries
 * @function
 */
	

/**
 * Destroys the series in the aggregation 
 * named <code>series</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroySeries
 * @function
 */


/**
 * Getter for aggregation <code>values</code>.<br/>
 * Data region property of the chart's Values
 * 
 * @return {sap.makit.Value[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getValues
 * @function
 */


/**
 * Inserts a value into the aggregation named <code>values</code>.
 *
 * @param {sap.makit.Value}
 *          oValue the value to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the value should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the value is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the value is inserted at 
 *             the last position        
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#insertValue
 * @function
 */

/**
 * Adds some value <code>oValue</code> 
 * to the aggregation named <code>values</code>.
 *
 * @param {sap.makit.Value}
 *            oValue the value to add; if empty, nothing is inserted
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#addValue
 * @function
 */

/**
 * Removes an value from the aggregation named <code>values</code>.
 *
 * @param {int | string | sap.makit.Value} vValue the value to remove or its index or id
 * @return {sap.makit.Value} the removed value or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeValue
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>values</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Value[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeAllValues
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Value</code> in the aggregation named <code>values</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Value}
 *            oValue the value whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#indexOfValue
 * @function
 */
	

/**
 * Destroys all the values in the aggregation 
 * named <code>values</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyValues
 * @function
 */


/**
 * Getter for aggregation <code>categoryRegions</code>.<br/>
 * Data region property of the chart's Categories
 * 
 * @return {sap.makit.Category[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getCategoryRegions
 * @function
 */


/**
 * Inserts a categoryRegion into the aggregation named <code>categoryRegions</code>.
 *
 * @param {sap.makit.Category}
 *          oCategoryRegion the categoryRegion to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the categoryRegion should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the categoryRegion is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the categoryRegion is inserted at 
 *             the last position        
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#insertCategoryRegion
 * @function
 */

/**
 * Adds some categoryRegion <code>oCategoryRegion</code> 
 * to the aggregation named <code>categoryRegions</code>.
 *
 * @param {sap.makit.Category}
 *            oCategoryRegion the categoryRegion to add; if empty, nothing is inserted
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#addCategoryRegion
 * @function
 */

/**
 * Removes an categoryRegion from the aggregation named <code>categoryRegions</code>.
 *
 * @param {int | string | sap.makit.Category} vCategoryRegion the categoryRegion to remove or its index or id
 * @return {sap.makit.Category} the removed categoryRegion or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeCategoryRegion
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>categoryRegions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Category[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#removeAllCategoryRegions
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Category</code> in the aggregation named <code>categoryRegions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Category}
 *            oCategoryRegion the categoryRegion whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#indexOfCategoryRegion
 * @function
 */
	

/**
 * Destroys all the categoryRegions in the aggregation 
 * named <code>categoryRegions</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyCategoryRegions
 * @function
 */


/**
 * Getter for aggregation <code>category</code>.<br/>
 * Data region property of the chart's Category
 * 
 * @return {sap.makit.Category}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getCategory
 * @function
 */


/**
 * Setter for the aggregated <code>category</code>.
 * @param {sap.makit.Category} oCategory
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#setCategory
 * @function
 */
	

/**
 * Destroys the category in the aggregation 
 * named <code>category</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyCategory
 * @function
 */


/**
 * Getter for aggregation <code>categoryAxis</code>.<br/>
 * Category Axis property of the Chart. Accepts only an instance of CategoryAxis element.
 * 
 * @return {sap.makit.CategoryAxis}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getCategoryAxis
 * @function
 */


/**
 * Setter for the aggregated <code>categoryAxis</code>.
 * @param {sap.makit.CategoryAxis} oCategoryAxis
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#setCategoryAxis
 * @function
 */
	

/**
 * Destroys the categoryAxis in the aggregation 
 * named <code>categoryAxis</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyCategoryAxis
 * @function
 */


/**
 * Getter for aggregation <code>valueAxis</code>.<br/>
 * Value Axis property of the Chart. Accept only an instance of ValueAxis element.
 * 
 * @return {sap.makit.ValueAxis}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getValueAxis
 * @function
 */


/**
 * Setter for the aggregated <code>valueAxis</code>.
 * @param {sap.makit.ValueAxis} oValueAxis
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#setValueAxis
 * @function
 */
	

/**
 * Destroys the valueAxis in the aggregation 
 * named <code>valueAxis</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyValueAxis
 * @function
 */


/**
 * Getter for aggregation <code>valueBubble</code>.<br/>
 * Value Bubble property of the Chart. Accept only an instance of ValueBubble element.
 * 
 * @return {sap.makit.ValueBubble}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#getValueBubble
 * @function
 */


/**
 * Setter for the aggregated <code>valueBubble</code>.
 * @param {sap.makit.ValueBubble} oValueBubble
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#setValueBubble
 * @function
 */
	

/**
 * Destroys the valueBubble in the aggregation 
 * named <code>valueBubble</code>.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Chart#destroyValueBubble
 * @function
 */


/**
 * Double tap event on the chart
 *
 * @name sap.makit.Chart#doubletap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'doubletap' event of this <code>sap.makit.Chart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.Chart</code>.<br/> itself. 
 *  
 * Double tap event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.Chart</code>.<br/> itself.
 *
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#attachDoubletap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'doubletap' event of this <code>sap.makit.Chart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#detachDoubletap
 * @function
 */

/**
 * Fire event doubletap to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.Chart#fireDoubletap
 * @function
 */


/**
 * Single tap event on the chart
 *
 * @name sap.makit.Chart#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.makit.Chart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.Chart</code>.<br/> itself. 
 *  
 * Single tap event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.Chart</code>.<br/> itself.
 *
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.makit.Chart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.Chart#fireTap
 * @function
 */


/**
 * Long press event on the chart
 *
 * @name sap.makit.Chart#longpress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'longpress' event of this <code>sap.makit.Chart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.Chart</code>.<br/> itself. 
 *  
 * Long press event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.Chart</code>.<br/> itself.
 *
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#attachLongpress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'longpress' event of this <code>sap.makit.Chart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Chart#detachLongpress
 * @function
 */

/**
 * Fire event longpress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.Chart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.Chart#fireLongpress
 * @function
 */


/**
 * Get the value of the currently highlighted category
 *
 * @name sap.makit.Chart#getSelectedCategory
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Get the value of the currently highlighted series
 *
 * @name sap.makit.Chart#getSelectedSeries
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Get the number of distinct category values
 *
 * @name sap.makit.Chart#getNumberOfCategories
 * @function
 * @type int
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Return an array of categories value that is currently selected.
 *
 * @name sap.makit.Chart#getSelectedCategoryGroup
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/makit/Chart.js
/*!
 * @copyright@
 */

jQuery.sap.require('sap.makit.MakitLib'); // unlisted dependency retained


/**
 * @override
 */
sap.makit.Chart.prototype.init = function() {
	//Private variable
	this._makitChart = null;
	this._parentCurrentHeight = 0;
	this._selectedCatIdx = 0;
	this._chartTypeDefined = false;
	this._legendPosDefined = false;
	this._createRowsCalled = false;
	
	this._datarows = []; //This is the placeholder for the Chart's data row it's a 1-to-1 mapping to rows aggregation.
	this._styleClasses = []; //workaround for custom classes

	this.setCategoryAxis(new sap.makit.CategoryAxis());
	this.setValueAxis(new sap.makit.ValueAxis());
	this.setValueBubble(new sap.makit.ValueBubble());
	this.setPrimaryColorPalette(null);
	
	
	if(this.getType() === sap.makit.ChartType.Pie || this.getType() === sap.makit.ChartType.Donut) {
		this.setLegendPosition(sap.makit.LegendPosition.Left);	
	}
	else {
		this.setLegendPosition(sap.makit.LegendPosition.None);
	}
	
	this.attachEvent("_change", this._onPropertyChanged);
	sap.ui.getCore().attachThemeChanged(this._applyCSS, this);
};

/**
 * Attempt to preserve the chart's DOM reference before re-rendering it
 * @override
 */
sap.makit.Chart.prototype.onBeforeRendering = function(oEvent) {
	this.fireEvent("_beforeRendering", this);
	if(this.getDomRef() && !sap.ui.core.RenderManager.isPreservedContent(this.getDomRef())){
		sap.ui.core.RenderManager.preserveContent(this.getDomRef(), /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
	}
};

/**
 * Once the place holder is rendered, we will create the MAKit chart object or 
 * retrieve the preserved chart DOM reference if exists.
 * @override
 */
sap.makit.Chart.prototype.onAfterRendering = function(oEvent) {
	this.fireEvent("_afterRendering", this);
	var $placeholder = jQuery(jQuery.sap.domById("sap-ui-dummy-" + this.getId()));
	var $oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	var $newContent = null;
	
	if ($oldContent.size() == 0) {
		this.fireEvent("_createMAKitObject", this);
		this._createChartObject();
		$newContent = new jQuery(this.getDomRef());
		$placeholder.replaceWith($newContent);
		var parent = this.getParent();
		var parentId = parent.getId();
		var parentDom = jQuery.sap.domById(parentId);
		this._parentCurrentHeight = parentDom.offsetHeight;
		sap.ui.core.ResizeHandler.register(parentDom, jQuery.proxy(this._onResize, this));
	} else if ( $oldContent.size() > 0 ) {
		this.fireEvent("_restoreMAKitObject", this);
		// replace dummy with old content
		$placeholder.replaceWith($oldContent);
	} else {
		$placeholder.remove();
	}
	
	if($newContent) {
		this._makitChart.showRangeSelectorView(this.getShowRangeSelector());
		this._makitChart.showTableView(this.getShowTableView());
		this._makitChart.setGraphLineWidth(this.getLineThickness());
		this._makitChart.showTableValue(this.getShowTableValue());
		this._makitChart.setMaxPies(this.getMaxSliceCount());
		this._makitChart.setPalette(this.getPrimaryColorPalette());
		this._makitChart.setProperty("ShowTotal", this.getShowTotalValue());
		this._makitChart.setNumberOfVisibleCategories(this.getNumberOfVisibleCategories());
		this._makitChart.setRangeSelectorStartPosition(this.getRangeSelectorStartPosition());
	}
	
	this._setDataTable();
};


/** 
 * WORKAROUND: MAKit chart current behavior overwrite the div's css class when it's created
 *				So we need to intercept addition of custom style classes before
 *				this._makitChart is created.
 * @override
 */
sap.makit.Chart.prototype.addStyleClass = function(sStyleClass, bSuppressRerendering) {
	 //If it's already in the control, then it is in the _styleClasses array
	if (this._styleClasses.indexOf(sStyleClass) === -1) {
		this._styleClasses.push(sStyleClass);
	}

	if(this._makitChart) {
		sap.ui.core.Control.prototype.addStyleClass.call(this, sStyleClass, bSuppressRerendering);
	}
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeStyleClass = function(sStyleClass, bSuppressRerendering) {
	var idx = this._styleClasses.indexOf(sStyleClass);
	if (idx > -1) {
		this._styleClasses.splice(idx, 1);
	}

	if(this._makitChart) {
		sap.ui.core.Control.prototype.removeStyleClass.call(this, sStyleClass, bSuppressRerendering);
	}
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.bindAggregation = function(sName, oBindingInfo) {
	// special handling for the rows aggregation
	if (sName === "rows") {
		// old API compatibility (sName, sPath, oTemplate, oSorter, aFilters)
		if (typeof oBindingInfo == "string") {
			oBindingInfo = {
				path: arguments[1],
				template: arguments[2],
				sorter: arguments[3], 
				filters: arguments[4]
			};
		}
		// the rows aggregation has neither a template nor a factory function!
		oBindingInfo.template = undefined;
		oBindingInfo.factory = function() {};
		// call the real bindAggregation method
		return sap.ui.core.Element.prototype.bindAggregation.call(this, sName, oBindingInfo); 
	}
	// call the real bindAggregation method
	return sap.ui.core.Element.prototype.bindAggregation.apply(this, arguments);
};

/** 
 * User should not use these API programmatically.
 * @override
 */
sap.makit.Chart.prototype.addRow = function(oRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"addRow\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Chart.prototype.insertRow = function(oRow, iIndex){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"insertRow\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeRow = function(vRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"removeRow\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeAllRows = function(){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"removeAllRows\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Chart.prototype.destroyRows = function(vRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"destroyRows\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Chart.prototype.updateRows = function(){
	this.fireEvent("_startUpdateRows", this);
	this._createRows();
	this._createRowsCalled = true;
	if (this._makitChart) {
		this._setDataTable();
	}
	this.fireEvent("_endUpdateRows", this);
};

/**
 * @override
 */
sap.makit.Chart.prototype.setValueBubble = function(oValueBubble){
	if (oValueBubble instanceof sap.makit.ValueBubble) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "valueBubble", oValueBubble, false);
		oValueBubble.attachEvent("_change", this._onValueBubbleChanged, this);
		if (this._makitChart) {
			var valueBubbleObj = oValueBubble.toObject();
			this._makitChart.setValueBubbleStyle(valueBubbleObj);
			if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
				this._makitChart.showValueBubble(valueBubbleObj.visible);
			}
		}
	}
	else {
		throw new Error("valueBubble property must be of type sap.makit.ValueBubble");
	}
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.setCategory = function(oCategory){
	//sap.ui.core.Element.prototype.setAggregation.call(this, "category", oCategory, false);
	//oCategory.attachEvent("_change", {type: "category"}, this._onDataRegionPropChanged, this);
	var categories = this.getCategoryRegions();
	if (categories.length > 0){
		this.removeCategoryRegion(0);
	}
	this.insertCategoryRegion(oCategory, 0);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.getCategory = function(oCategory){
	var categories = this.getCategoryRegions();
	return categories[0];
};

/**
 * @override
 */
sap.makit.Chart.prototype.destroyCategory = function(){
	this.removeCategoryRegion(0);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.addCategoryRegion= function(oCategory){
	sap.ui.core.Element.prototype.addAggregation.call(this, "categoryRegions", oCategory, false);
	oCategory.attachEvent("_change", {type: "categories"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.insertCategoryRegion= function(oCategory, iIndex){
	sap.ui.core.Element.prototype.insertAggregation.call(this, "categoryRegions", oCategory, iIndex, false);
	oCategory.attachEvent("_change", {type: "categories"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeCategoryRegion= function(oCategory){
	var removedObj = sap.ui.core.Element.prototype.removeAggregation.call(this, "categoryRegions", oCategory, false);
	if(removedObj != null) {
		oCategory.detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObj;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeAllCategoryRegions = function(){
	var removedObjs = sap.ui.core.Element.prototype.removeAllAggregation.call(this, "categoryRegions", false);
	var len = removedObjs.length;
	var i;
	for( i = 0; i < len; i++){ 
		removedObjs[i].detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObjs;
};

/**
 * @override
 */
sap.makit.Chart.prototype.addValue= function(oValue){
	sap.ui.core.Element.prototype.addAggregation.call(this, "values", oValue, false);
	oValue.attachEvent("_change", {type: "values"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.insertValue= function(oValue, iIndex){
	sap.ui.core.Element.prototype.insertAggregation.call(this, "values", oValue, iIndex, false);
	oValue.attachEvent("_change", {type: "values"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeValue= function(oValue){
	var removedObj = sap.ui.core.Element.prototype.removeAggregation.call(this, "values", oValue, false);
	if(removedObj != null) {
		removedObj.detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObj;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeAllValues = function(){
	var removedObjs = sap.ui.core.Element.prototype.removeAllAggregation.call(this, "values", false);
	var len = removedObjs.length;
	var i;
	for( i = 0; i < len; i++){ 
		removedObjs[i].detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObjs;
};

/**
 * @override
 */
sap.makit.Chart.prototype.setSeries = function(oSeries){
	sap.ui.core.Element.prototype.setAggregation.call(this, "series", oSeries, false);
	oSeries.attachEvent("_change", {type: "series"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.setValueAxis = function (oValueAxis){
	if (oValueAxis instanceof sap.makit.ValueAxis) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "valueAxis", oValueAxis, false);
		oValueAxis.attachEvent("_change", { axis:"values" }, this._onAxisPropChanged, this);
	}
	else {
		throw new Error("valueAxis property must be of type sap.makit.ValueAxis");
	}
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.setCategoryAxis = function (oCategoryAxis){
	if (oCategoryAxis instanceof sap.makit.CategoryAxis) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "categoryAxis", oCategoryAxis, false);
		oCategoryAxis.attachEvent("_change", { axis:"category" }, this._onAxisPropChanged, this);
	}
	else {
		throw new Error("categoryAxis property must be of type sap.makit.CategoryAxis");
	}
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.setPrimaryColorPalette = function(oColorPalette) {
	if (oColorPalette == null || (oColorPalette instanceof Array && oColorPalette.length > 0)) {
		sap.ui.core.Element.prototype.setProperty.call(this, "primaryColorPalette", oColorPalette, false);
		if (this._makitChart) {
			this._makitChart.setPalette(oColorPalette);
		}
	}
	else {
		throw new Error("primaryColorPalette property must be an array");
	}
	return this;
};


/*=================================================================================
 *== PRIVATE METHODS
 *=================================================================================
 **/

/**
 * Set the Chart's height. Canvas does not support % height, 
 * so it need to have an absolute height
 * 
 * @return true, if the height is using % value, false otherwise
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._setRealHeight = function(height){
	var elem = this.getDomRef();
	var prevHeight = elem.style.height;
	var newHeight = "0px";
	if(height.indexOf("%") > -1) {
		var domref = this.getDomRef();
		//always get parentDom, fixed for IE QUnit Test failed.
		var parent = this.getParent();
		var parentId = parent.getId();
		var parentDom = jQuery.sap.domById(parentId);
		
		var intHeight = parseInt(height, 10);
		var realHeight = Math.ceil(parentDom.offsetHeight * (intHeight / 100));
		newHeight = realHeight + "px";
	}
	else {
		newHeight = height;
	}
	
	if (prevHeight != newHeight){
		elem.style.height = newHeight;
	}
};

/**
 * We will construct the row aggregation in this function
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._createRows = function() {
	this.fireEvent("_startCreateRows", this);
	var oTemplate = new sap.makit.Row(this.getId() + "-dummyrows");
	var aCols = this.getColumns();
	for (var i = 0, l = aCols.length; i < l; i++) {
		var oColTemplate = aCols[i];
		if (oColTemplate) {
			var name = aCols[i].getName();
			var oClone = oColTemplate.clone("col" + i);
			oClone.detachEvent("_change", this._onColumnPropChanged, this);
			for(var prop in oColTemplate.mProperties) {
				if(oColTemplate.mProperties.hasOwnProperty(prop)) {
					oClone.setProperty(prop, oColTemplate.getProperty(prop), false);
				}
			}
			oClone.data("sap-ui-colindex", i);
			oTemplate.addAggregation("cells",oClone);
			oClone.unbindAggregation("name",true);
		}
	}
	this.fireEvent("_endColumn", this);
	this.destroyAggregation("rows");
	this.fireEvent("_endDestroyRows", this);
	var aContexts = undefined;
	var oBinding = this.getBinding("rows");
	if (oBinding) {
		aContexts = oBinding.getContexts();
	}
	var totalRows = oBinding.getLength();
	this._datarows = [];
	var bi = this.getBindingInfo("rows");
	var sModelName = undefined;
	if (bi && bi.model) {
		sModelName = bi.model;
	}
	this.fireEvent("_endPrepareRows", this);
	for (var i = 0; i < totalRows; i++) {
		if (aContexts && aContexts[i]) {
			var oClone = oTemplate.clone("row" + i);
			oClone.setBindingContext(aContexts[i], sModelName);
			this.addAggregation("rows", oClone);
			this._datarows.push(oClone._datarow);
		}
	}
	this.fireEvent("_endCreateRows", this);
	// destroy the template
	oTemplate.destroy();
};

/**
 * Create and initialize the MAKit $MA.Chart object
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._createChartObject = function (){
	var elem = this.getDomRef();
	jQuery.sap.assert(elem, "Chart's DomRef is not ready");
	
	elem.style.width = this.getWidth();
	this._setRealHeight(this.getHeight());

	this._makitChart = new window.$MA.Chart(this.getId(), true);
	var that = this;
	
	this._makitChart.bind("initialized", function() {
		that._makitChart.showToolBar(false);
		that._setMakitChartProperties();
	});
	
	this._makitChart.bind("beforerender", function() {
		that.fireEvent("_makitBeforeRender", that);
	});
	
	this._makitChart.bind("renderstart", function() {
		that.fireEvent("_makitRenderStart", that);
	});
	
	this._makitChart.bind("renderend", function() {
		that.fireEvent("_makitRenderEnd", that);
	});
	
	this._makitChart.bind("animationend", function() {
		that.fireEvent("_makitAnimationEnd", that);
	});

	var syntax = this._getChartSyntax();

	this._makitChart.create(syntax);

	this._makitChart.bind("tap", function(param) {
		that._selectedCatIdx = that._makitChart.getSelectedCategoryIndex();
		that.fireTap(param);
	});
	this._makitChart.bind("doubletap", function(param) {
		that.fireEvent("doubletap", param);
	});
	this._makitChart.bind("longpress", function(param) {
		that._selectedCatIdx = that._makitChart.getSelectedCategoryIndex();
		that.fireEvent("longpress", param);
	});

	//workaround for overwritten classes
	var len = this._styleClasses.length;
	for (var i = 0; i < len; i++ ){
		this.addStyleClass(this._styleClasses[i]);
	}
	
	this._applyCSS();
};

/**
 * This function is used to apply the Makit properties that will be reset when changing chart type. 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._setMakitChartProperties = function() {
	if (!this._makitChart) {
		return;
	}
	this._makitChart.setLegend(this.getLegendPosition().toLowerCase());
	
	// We should only apply this if the chart's data has been initialised at least once
	if(this._dataInitialized){
		this._makitChart.showTableView(this.getShowTableView());
		this._makitChart.showRangeSelectorView(this.getShowRangeSelector());
		this._makitChart.setGraphLineWidth(this.getLineThickness());
		this._makitChart.showTableValue(this.getShowTableValue());
		this._makitChart.setPalette(this.getPrimaryColorPalette());
		this._makitChart.setProperty("ShowTotal", this.getShowTotalValue());
		this._makitChart.setNumberOfVisibleCategories(this.getNumberOfVisibleCategories());
		this._makitChart.setRangeSelectorStartPosition(this.getRangeSelectorStartPosition());
	}

	var valueBubble = this.getValueBubble();
	if (valueBubble) {
		var valueBubbleObj = valueBubble.toObject();
		this._makitChart.setValueBubbleStyle(valueBubbleObj);
		if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
			this._makitChart.showValueBubble(valueBubbleObj.visible);
		}
	}
};

sap.makit.Chart.prototype.addColumn= function(oValue){
	sap.ui.core.Element.prototype.addAggregation.call(this, "columns", oValue, false);
	oValue.attachEvent("_change", {type: "columns"}, this._onColumnPropChanged, this);
	return this;
};

/**
 * Generate the MAKit chart metadata syntax based on the sap.makit.Chart properties.
 * To be used to create the MAKit chart.
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._getChartSyntax = function() {
	var categoryAxisObj = this.getCategoryAxis();
	var categoryObjs = this.getCategoryRegions();
	var catLen = categoryObjs.length;
	if (catLen > 0){
		var i;
		var categorySyntax = "<Categories";
		if(categoryAxisObj) { 
			if(categoryAxisObj.getDisplayAll()) {
				categorySyntax += ' display="' + categoryAxisObj.getDisplayAll() + '"';
			}
		}
		categorySyntax += ">";
		var displayNames = "";
		for (i = catLen - 1; i >= 0; i--) {
			var temp = categoryObjs[i].getDisplayName();
			if(temp && temp.length > 0 ){
				displayNames += temp + " | ";
			}
		}
		displayNames = displayNames.substr(0, displayNames.length - 3);
		
		for (i = 0; i < catLen; i++){
			var categoryObj = categoryObjs[i];
			categorySyntax += '<Category column="' + categoryObj.getColumn() + '"';
			if (categoryObj.getFormat()) {
					categorySyntax += ' format="' + categoryObj.getFormat() + '"';
			}
			if (i == 0) {
				categorySyntax += ' displayname="' + displayNames + '"';
			}
			if(categoryAxisObj) {
				categorySyntax += ' showprimaryline="'+ categoryAxisObj.getShowPrimaryLine() +'"';
				categorySyntax += ' showgrid="'+ categoryAxisObj.getShowGrid() +'"';
				categorySyntax += ' showlabel="'+ categoryAxisObj.getShowLabel() +'"';
				categorySyntax += ' thickness="'+ categoryAxisObj.getThickness() +'"';
				categorySyntax += ' color="'+ categoryAxisObj.getColor() +'"';
				categorySyntax += ' sortorder="'+ categoryAxisObj.getSortOrder().toLowerCase() +'"';
				categorySyntax += ' displaylastlabel="'+ categoryAxisObj.getDisplayLastLabel() +'"';
			}
			categorySyntax += ' />';
		}
		categorySyntax += "</Categories>";
	}
	else {
		throw new Error("Chart '"+ this.getId() +"' needs at least one Category data region");
	}

	var seriesObj = this.getSeries();
	var seriesSyntax = '';
	if (seriesObj) {
		seriesSyntax = '<Series Column="' + seriesObj.getColumn() + '"';
		if (seriesObj.getFormat()) {
			seriesSyntax += ' format="' + seriesObj.getFormat() + '"';
		}
		if (seriesObj.getDisplayName()) {
			seriesSyntax += ' displayname="' + seriesObj.getDisplayName() + '"';
		}
		seriesSyntax += '/>';
	}

	var valueAxisObj = this.getValueAxis();
	var valuesSyntax = '<Values>';
	if(valueAxisObj) {
		valuesSyntax = '<Values';
		valuesSyntax += ' showprimaryline="'+ valueAxisObj.getShowPrimaryLine() +'"';
		valuesSyntax += ' showgrid="'+ valueAxisObj.getShowGrid() +'"';
		valuesSyntax += ' showlabel="'+ valueAxisObj.getShowLabel() +'"';
		valuesSyntax += ' thickness="'+ valueAxisObj.getThickness() +'"';
		valuesSyntax += ' color="'+ valueAxisObj.getColor() +'"';
		if(valueAxisObj.getMin() !== "") {
			valuesSyntax += ' min="'+ valueAxisObj.getMin() +'"';
		}
		if(valueAxisObj.getMax() !== "") {
			valuesSyntax += ' max="'+ valueAxisObj.getMax() +'"';
		}
		valuesSyntax += '>';
	}

	var valuesObj = this.getValues();
	var length = valuesObj.length;
	if (length == 0) {
		throw new Error("Chart '"+ this.getId() +"' needs at least one Value data region");
	}
	var valueObj;
	for (var i = 0; i < length; i++) {
		valueObj = valuesObj[i];
		valuesSyntax += '<Value Expression="' + valueObj.getExpression() + '"';
		if (valueObj.getFormat()) {
			valuesSyntax += ' format="' + valueObj.getFormat() + '"';
		}
		if (valueObj.getDisplayName()) {
			valuesSyntax += ' displayname="' + valueObj.getDisplayName() + '"';
		}
		if(valueObj.getLocale() !== "") {
			valuesSyntax += ' Locale="'+ valueObj.getLocale() +'"';
		}
		valuesSyntax += '/>';
	}
	valuesSyntax += '</Values>';

	var type = this.getType().toLowerCase();
	var pieStyle = null;
	if (type === "donut" || type === "pie"){
		pieStyle = type; // it's the pieStyle that can be pie or donut
		type = "pie"; // in MAKit the chart's type is always pie for Pie/Donut chart
	}
	var chartSyntax = '<Chart ChartType="' + type + '"';
	if(pieStyle !== null) {
		chartSyntax += ' PieStyle="' + pieStyle + '"';
	}
	chartSyntax += ' >';

	chartSyntax += categorySyntax;
	if (seriesObj) {
		chartSyntax += seriesSyntax;
	}
	chartSyntax += valuesSyntax;
	chartSyntax += '</Chart>';

	return chartSyntax;
};

/**
 * Update the data table of MAKit chart. 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._setDataTable = function() {
	//Use delayed call to prevent setDataTable to be called too fast and too many times in a short period.
	this._setDataTableTimer = this._setDataTableTimer || jQuery.sap.delayedCall(150, this, function(){
		jQuery.sap.assert(this._makitChart, "_makitChart is not initialized");
		if(this._datarows && this._datarows.length > 0){
			this.fireEvent("_createDataTable", this);
			var data = this._datarows;
			var dataTable = new window.$MA.DataTable();
			var columns = this.getColumns();
			var colLen = columns.length;
			if (colLen == 0) {
				columns = this.getRows()[0].getCells();
				colLen = columns.length;
			}
			for (var i = 0; i < colLen; i++){
				dataTable.addColumn(columns[i].getName(), columns[i].getType());
			}

			dataTable.addRows(data);
			this.fireEvent("_beforeSetDataTable", this);
			this._makitChart.setDataTable(dataTable);
			this._dataInitialized = true;
		}
		this._setDataTableTimer = undefined;
	});
};


/** 
 * Read and parse the css classes in the document and apply those style to the MAKit Chart 
 * 
 * @private
 */
sap.makit.Chart.prototype._applyCSS = function(oEvent) {
	if (this._makitChart){
		this._makitChart.applyCSS();
	}
};


/*===================================================================================
 *=	PRIVATE EVENT HANDLERS
 *===================================================================================
 **/

/**
 * Handler for onresize event. 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._onResize = function(oEvent) {
	var parent = this.getParent();
	var parentId = parent.getId();
	var parentDom = jQuery.sap.domById(parentId);
	var parentDomCurHeight = parentDom.offsetHeight;
	var parentDomCurWidth = parentDom.offsetWidth;
	
	if ((this._parentCurrentHeight != parentDomCurHeight && parentDomCurHeight > 0) || parentDomCurHeight < 5) {
		this._setRealHeight(this.getHeight());
		this._parentCurrentHeight = parentDom.offsetHeight;
	}
	if(this._makitChart != null && parentDomCurHeight > 0 && parentDomCurWidth > 0) {
		this._makitChart.refresh();
	}
};

/**
 * Handler for Chart's direct properties change. 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._onPropertyChanged = function(oEvent){
	var name = oEvent.mParameters["name"];
	var newVal = oEvent.mParameters["newValue"];
	
	if (name === "type" && !this._chartTypeDefined) {
		this._chartTypeDefined = true;
		if(!this._legendPosDefined){
			if(newVal === sap.makit.ChartType.Pie || newVal === sap.makit.ChartType.Donut) {
				this.setLegendPosition(sap.makit.LegendPosition.Left);	
			}
			else {
				this.setLegendPosition(sap.makit.LegendPosition.None);
			}
		}
	}
	else if (name === "legendPosition" && !this._legendPosDefined) {
		this._legendPosDefined = true;
	}
	
	if(this._makitChart){
		if (name === "type") {
			var type = newVal.toLowerCase();
			var pieStyle = null;
			this._makitChart.setProperty("ChartType", type);
			if (type === "donut" || type === "pie"){
				pieStyle = type; // it's the pieStyle that can be pie or donut
				type = "pie"; // in MAKit the chart's type is always pie for Pie/Donut chart
				this._makitChart.setProperty("PieStyle", pieStyle);
			}
		} else if (name === "showRangeSelector") {
			this._makitChart.showRangeSelectorView(newVal);
		}
		else if (name === "showTableView") {
			this._makitChart.showTableView(newVal);
		}
		else if (name === "legendPosition") {
			this._makitChart.setLegend(newVal.toLowerCase());
		}
		else if(name === "width") {
			this.getDomRef().style.width = this.getWidth();
		}
		else if(name === "height") {
			this._setRealHeight(newVal);
		}
		else if(name === "lineThickness") {
			this._makitChart.setGraphLineWidth(newVal);
		}
		else if(name === "maxSliceCount") {
			this._makitChart.setMaxPies(newVal);
		}
		else if(name === "showTableValue") {
			this._makitChart.showTableValue(newVal);
		}
		else if(name === "primaryColorPalette") {
			this._makitChart.setPalette(newVal);
		}
		else if(name === "showTotalValue") {
			this._makitChart.setProperty("ShowTotal", newVal);
		} else if(name === "numberOfVisibleCategories") {
			this._makitChart.setNumberOfVisibleCategories(newVal);
		} else if (name === "rangeSelectorStartPosition") {
			this._makitChart.setRangeSelectorStartPosition(newVal);
		}
		
		this._makitChart.setSelectedCategoryIndex(this._selectedCatIdx);
		this._makitChart.refresh();
	}
};

sap.makit.Chart.prototype._onColumnPropChanged = function(oEvent, oData){
	var oParams = oEvent.mParameters;
	if (oParams["name"] == "name" && this._createRowsCalled) {
		jQuery.sap.log.info("Column name property is changed due to name has been binded");
		this._createRows();
	}
};

/**
 * Handler for Category, Value and Series data region property change 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._onDataRegionPropChanged = function(oEvent, oData){
	jQuery.sap.assert(oData, "oData is expected to be set in _onDataRegionPropChanged");
	if (!this._makitChart) {
		return;
	}
	var oParams = oEvent.mParameters;
	if (oData["type"] == "values") {
		var valObj = oEvent.oSource;
		var idx = this.indexOfValue(valObj);
		if(idx > -1){
			this._makitChart.setProperty(oData["type"] + "["+idx+"]." + oParams["name"], oParams["newValue"]);
		}
	}
	else if (oData["type"] == "categories") {
		var catObj = oEvent.oSource;
		var idx = this.indexOfCategoryRegion(catObj);
		var propName = oParams["name"];
		if(idx > -1){
			if(propName == "displayName") {
				var cats = this.getCategoryRegions();
				var i, value = "", len = cats.length;
				for(i = 0; i < len; i ++){
					value += cats[i].getDisplayName();
					if (i != len -1) {
						value +=  " | ";
					}
				}
				this._makitChart.setProperty("category." + propName, oParams["newValue"]);
			}
			else {
				this._makitChart.setProperty(oData["type"] + "["+idx+"]." + propName, oParams["newValue"]);
			}
		}
	} else {
		this._makitChart.setProperty(oData["type"] + "." + oParams["name"], oParams["newValue"]);
	}
};

/**
 * Handler for CategoryAxis and ValueAxis change 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._onAxisPropChanged = function(oEvent, oData){
	jQuery.sap.assert(oData, "oData is expected to be set in _onAxisPropChanged");
	if (!this._makitChart) {
		return;
	}
	var oParams = oEvent.mParameters;
	var sName =  oParams["name"].toLowerCase();
	var value =  oParams["newValue"];
	// Sortorder in makit only accepts lowercase value
	var axis = oData["axis"];
	if (sName === "sortorder") {
		value = value.toLowerCase();
	}
	else if (sName === "displayall") {
		axis = "categories";
		sName = "display";
		if(!value){
			value = "";
		}
	}
	
	this._makitChart.setProperty(axis + "." + sName, value);
	if (sName === "sortorder") {
		this._setDataTable();
	}
	
};

/**
 * Handler for ValueBubble properties change 
 * 
 * @private
 * 
 * */
sap.makit.Chart.prototype._onValueBubbleChanged = function (oEvent){
	if (!this._makitChart) {
		return;
	}
	var valueBubbleObj = this.getValueBubble().toObject();
	this._makitChart.setValueBubbleStyle(valueBubbleObj);
	if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
		this._makitChart.showValueBubble(valueBubbleObj.visible);
	}
	this._makitChart.refresh();
};

/*=================================================================================
 *== PUBLIC METHODS
 *=================================================================================
 **/

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.Chart.prototype.getSelectedCategory = function() {
	var selectedCategory = undefined;
	if (this._makitChart){
		selectedCategory = this._makitChart.getSelectedCategory();
	}
	return selectedCategory;
};

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.Chart.prototype.getSelectedSeries = function() {
	var selectedSeries = undefined;
	if (this._makitChart){
		selectedSeries = this._makitChart.getSelectedSeries();
	}
	return selectedSeries;
};

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.Chart.prototype.getNumberOfCategories = function() {
	var numOfCat = undefined;
	if (this._makitChart){
		numOfCat = this._makitChart.getNumberOfCategories();
	}
	return numOfCat;
};

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.Chart.prototype.getSelectedCategoryGroup = function() {
	var selectedCategoryGroup = undefined;
	if (this._makitChart){
		selectedCategoryGroup = this._makitChart.getSelectedCategoryGroup();
	}
	return selectedCategoryGroup;
};
}; // end of sap/makit/Chart.js
if ( !jQuery.sap.isDeclared('sap.makit.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Column.
jQuery.sap.declare("sap.makit.Column");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Column.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getType type} : string (default: 'string')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The data column of the Chart's data table
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Column
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Column", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * The name representing the Column
		 */
		"name" : {type : "string", group : "Identification", defaultValue : null},

		/**
		 * The value mapped to this Column (User should map this using data binding)
		 */
		"value" : {type : "any", group : "Data", defaultValue : null},

		/**
		 * The data type of the Column:
		 * number
		 * string
		 * datetime
		 */
		"type" : {type : "string", group : "Misc", defaultValue : 'string'}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Column.extend
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name representing the Column
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.makit.Column#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setName
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The value mapped to this Column (User should map this using data binding)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>value</code>
 * @public
 * @name sap.makit.Column#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setValue
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * The data type of the Column:
 * number
 * string
 * datetime
 *
 * Default value is <code>string</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.makit.Column#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>string</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setType
 * @function
 */

// Start of sap/makit/Column.js
/*!
 * @copyright@
 */
}; // end of sap/makit/Column.js
if ( !jQuery.sap.isDeclared('sap.makit.CombinationChart') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.CombinationChart.
jQuery.sap.declare("sap.makit.CombinationChart");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CombinationChart.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getShowRangeSelector showRangeSelector} : boolean (default: true)</li>
 * <li>{@link #getLegendPosition legendPosition} : sap.makit.LegendPosition (default: sap.makit.LegendPosition.Left)</li>
 * <li>{@link #getPrimaryColorPalette primaryColorPalette} : any</li>
 * <li>{@link #getSecondaryColorPalette secondaryColorPalette} : any</li>
 * <li>{@link #getShowTableValue showTableValue} : boolean (default: true)</li>
 * <li>{@link #getNumberOfVisibleCategories numberOfVisibleCategories} : int</li>
 * <li>{@link #getRangeSelectorStartPosition rangeSelectorStartPosition} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCategoryRegions categoryRegions} : sap.makit.Category[]</li>
 * <li>{@link #getLayers layers} : sap.makit.Layer[]</li>
 * <li>{@link #getCategoryAxis categoryAxis} : sap.makit.CategoryAxis</li>
 * <li>{@link #getPrimaryValueAxis primaryValueAxis} : sap.makit.ValueAxis</li>
 * <li>{@link #getSecondaryValueAxis secondaryValueAxis} : sap.makit.ValueAxis</li>
 * <li>{@link #getValueBubble valueBubble} : sap.makit.ValueBubble</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.makit.CombinationChart#event:doubletap doubletap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.makit.CombinationChart#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.makit.CombinationChart#event:longpress longpress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The CombinationChart control.
 * @extends sap.ui.core.Control
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.12
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.makit.CombinationChart", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"getSelectedCategory", "getNumberOfCategories", "getSelectedCategoryGroup"
	],
	library : "sap.makit",
	properties : {

		/**
		 * The width of the Chart
		 */
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

		/**
		 * The height of the Chart
		 */
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

		/**
		 * Specify whether the range selector should be visible.
		 */
		"showRangeSelector" : {type : "boolean", group : "Appearance", defaultValue : true},

		/**
		 * Legend position for Pie /Donut chart only.
		 */
		"legendPosition" : {type : "sap.makit.LegendPosition", group : "Misc", defaultValue : sap.makit.LegendPosition.Left},

		/**
		 * Allow a combination chart’s primary axis color palette to be modified without affecting other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
		 * Accept an array of color in string format or hex format. e.g.
		 * 0xff0000
		 * "red"
		 * "rgb(255,0,0)"
		 */
		"primaryColorPalette" : {type : "any", group : "Misc", defaultValue : null},

		/**
		 * Allow a combination chart’s secondary axis color palette to be modified without affecting other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
		 * Accept an array of color in string format or hex format. e.g.
		 * 0xff0000
		 * "red"
		 * "rgb(255,0,0)"
		 */
		"secondaryColorPalette" : {type : "any", group : "Misc", defaultValue : null},

		/**
		 * Toggle to display the table value on a Bar chart. Only applies to Bar chart.
		 */
		"showTableValue" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * The number of categories that will be visible on the chart at any time. The minimum value is 2. If not set, the number of visible categories will be automatically adjusted depending on the screen size
		 */
		"numberOfVisibleCategories" : {type : "int", group : "Misc", defaultValue : null},

		/**
		 * Specify the range selector start position, default value is 0.
		 */
		"rangeSelectorStartPosition" : {type : "int", group : "Misc", defaultValue : 0}
	},
	aggregations : {

		/**
		 * Data region property of the chart's Categories
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"categoryRegions" : {type : "sap.makit.Category", multiple : true, singularName : "categoryRegion", deprecated: true}, 

		/**
		 * The collection of charts
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"layers" : {type : "sap.makit.Layer", multiple : true, singularName : "layer", deprecated: true}, 

		/**
		 * Category Axis property of the Chart. Accepts only an instance of CategoryAxis element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"categoryAxis" : {type : "sap.makit.CategoryAxis", multiple : false, deprecated: true}, 

		/**
		 * Property of the Combination Chart's primary Value Axis. Accept only an instance of ValueAxis element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"primaryValueAxis" : {type : "sap.makit.ValueAxis", multiple : false, deprecated: true}, 

		/**
		 * Property of the Combination Chart's secondary Value Axis. Accept only an instance of ValueAxis element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"secondaryValueAxis" : {type : "sap.makit.ValueAxis", multiple : false, deprecated: true}, 

		/**
		 * Value Bubble property of the Chart. Accept only an instance of ValueBubble element.
		 * @deprecated Since version 1.38. 
		 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
		 */
		"valueBubble" : {type : "sap.makit.ValueBubble", multiple : false, deprecated: true}
	},
	events : {

		/**
		 * Double tap event on the chart
		 */
		"doubletap" : {}, 

		/**
		 * Single tap event on the chart
		 */
		"tap" : {}, 

		/**
		 * Long press event on the chart
		 */
		"longpress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.makit.CombinationChart with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.CombinationChart.extend
 * @function
 */

sap.makit.CombinationChart.M_EVENTS = {'doubletap':'doubletap','tap':'tap','longpress':'longpress'};


/**
 * Getter for property <code>width</code>.
 * The width of the Chart
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.makit.CombinationChart#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the Chart
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.makit.CombinationChart#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setHeight
 * @function
 */


/**
 * Getter for property <code>showRangeSelector</code>.
 * Specify whether the range selector should be visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showRangeSelector</code>
 * @public
 * @name sap.makit.CombinationChart#getShowRangeSelector
 * @function
 */

/**
 * Setter for property <code>showRangeSelector</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowRangeSelector  new value for property <code>showRangeSelector</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setShowRangeSelector
 * @function
 */


/**
 * Getter for property <code>legendPosition</code>.
 * Legend position for Pie /Donut chart only.
 *
 * Default value is <code>Left</code>
 *
 * @return {sap.makit.LegendPosition} the value of property <code>legendPosition</code>
 * @public
 * @name sap.makit.CombinationChart#getLegendPosition
 * @function
 */

/**
 * Setter for property <code>legendPosition</code>.
 *
 * Default value is <code>Left</code> 
 *
 * @param {sap.makit.LegendPosition} oLegendPosition  new value for property <code>legendPosition</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setLegendPosition
 * @function
 */


/**
 * Getter for property <code>primaryColorPalette</code>.
 * Allow a combination chart’s primary axis color palette to be modified without affecting other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
 * Accept an array of color in string format or hex format. e.g.
 * 0xff0000
 * "red"
 * "rgb(255,0,0)"
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>primaryColorPalette</code>
 * @public
 * @name sap.makit.CombinationChart#getPrimaryColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryColorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oPrimaryColorPalette  new value for property <code>primaryColorPalette</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setPrimaryColorPalette
 * @function
 */


/**
 * Getter for property <code>secondaryColorPalette</code>.
 * Allow a combination chart’s secondary axis color palette to be modified without affecting other charts' color palette. If not set, the chart will use the default color palette defined in the theme.
 * Accept an array of color in string format or hex format. e.g.
 * 0xff0000
 * "red"
 * "rgb(255,0,0)"
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>secondaryColorPalette</code>
 * @public
 * @name sap.makit.CombinationChart#getSecondaryColorPalette
 * @function
 */

/**
 * Setter for property <code>secondaryColorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oSecondaryColorPalette  new value for property <code>secondaryColorPalette</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setSecondaryColorPalette
 * @function
 */


/**
 * Getter for property <code>showTableValue</code>.
 * Toggle to display the table value on a Bar chart. Only applies to Bar chart.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showTableValue</code>
 * @public
 * @name sap.makit.CombinationChart#getShowTableValue
 * @function
 */

/**
 * Setter for property <code>showTableValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowTableValue  new value for property <code>showTableValue</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setShowTableValue
 * @function
 */


/**
 * Getter for property <code>numberOfVisibleCategories</code>.
 * The number of categories that will be visible on the chart at any time. The minimum value is 2. If not set, the number of visible categories will be automatically adjusted depending on the screen size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfVisibleCategories</code>
 * @public
 * @name sap.makit.CombinationChart#getNumberOfVisibleCategories
 * @function
 */

/**
 * Setter for property <code>numberOfVisibleCategories</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfVisibleCategories  new value for property <code>numberOfVisibleCategories</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setNumberOfVisibleCategories
 * @function
 */


/**
 * Getter for property <code>rangeSelectorStartPosition</code>.
 * Specify the range selector start position, default value is 0.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>rangeSelectorStartPosition</code>
 * @public
 * @name sap.makit.CombinationChart#getRangeSelectorStartPosition
 * @function
 */

/**
 * Setter for property <code>rangeSelectorStartPosition</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iRangeSelectorStartPosition  new value for property <code>rangeSelectorStartPosition</code>
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#setRangeSelectorStartPosition
 * @function
 */


/**
 * Getter for aggregation <code>categoryRegions</code>.<br/>
 * Data region property of the chart's Categories
 * 
 * @return {sap.makit.Category[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getCategoryRegions
 * @function
 */


/**
 * Inserts a categoryRegion into the aggregation named <code>categoryRegions</code>.
 *
 * @param {sap.makit.Category}
 *          oCategoryRegion the categoryRegion to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the categoryRegion should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the categoryRegion is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the categoryRegion is inserted at 
 *             the last position        
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#insertCategoryRegion
 * @function
 */

/**
 * Adds some categoryRegion <code>oCategoryRegion</code> 
 * to the aggregation named <code>categoryRegions</code>.
 *
 * @param {sap.makit.Category}
 *            oCategoryRegion the categoryRegion to add; if empty, nothing is inserted
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#addCategoryRegion
 * @function
 */

/**
 * Removes an categoryRegion from the aggregation named <code>categoryRegions</code>.
 *
 * @param {int | string | sap.makit.Category} vCategoryRegion the categoryRegion to remove or its index or id
 * @return {sap.makit.Category} the removed categoryRegion or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#removeCategoryRegion
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>categoryRegions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Category[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#removeAllCategoryRegions
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Category</code> in the aggregation named <code>categoryRegions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Category}
 *            oCategoryRegion the categoryRegion whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#indexOfCategoryRegion
 * @function
 */
	

/**
 * Destroys all the categoryRegions in the aggregation 
 * named <code>categoryRegions</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroyCategoryRegions
 * @function
 */


/**
 * Getter for aggregation <code>layers</code>.<br/>
 * The collection of charts
 * 
 * @return {sap.makit.Layer[]}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getLayers
 * @function
 */


/**
 * Inserts a layer into the aggregation named <code>layers</code>.
 *
 * @param {sap.makit.Layer}
 *          oLayer the layer to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the layer should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the layer is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the layer is inserted at 
 *             the last position        
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#insertLayer
 * @function
 */

/**
 * Adds some layer <code>oLayer</code> 
 * to the aggregation named <code>layers</code>.
 *
 * @param {sap.makit.Layer}
 *            oLayer the layer to add; if empty, nothing is inserted
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#addLayer
 * @function
 */

/**
 * Removes an layer from the aggregation named <code>layers</code>.
 *
 * @param {int | string | sap.makit.Layer} vLayer the layer to remove or its index or id
 * @return {sap.makit.Layer} the removed layer or null
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#removeLayer
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>layers</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Layer[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#removeAllLayers
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Layer</code> in the aggregation named <code>layers</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Layer}
 *            oLayer the layer whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#indexOfLayer
 * @function
 */
	

/**
 * Destroys all the layers in the aggregation 
 * named <code>layers</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroyLayers
 * @function
 */


/**
 * Getter for aggregation <code>categoryAxis</code>.<br/>
 * Category Axis property of the Chart. Accepts only an instance of CategoryAxis element.
 * 
 * @return {sap.makit.CategoryAxis}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getCategoryAxis
 * @function
 */


/**
 * Setter for the aggregated <code>categoryAxis</code>.
 * @param {sap.makit.CategoryAxis} oCategoryAxis
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#setCategoryAxis
 * @function
 */
	

/**
 * Destroys the categoryAxis in the aggregation 
 * named <code>categoryAxis</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroyCategoryAxis
 * @function
 */


/**
 * Getter for aggregation <code>primaryValueAxis</code>.<br/>
 * Property of the Combination Chart's primary Value Axis. Accept only an instance of ValueAxis element.
 * 
 * @return {sap.makit.ValueAxis}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getPrimaryValueAxis
 * @function
 */


/**
 * Setter for the aggregated <code>primaryValueAxis</code>.
 * @param {sap.makit.ValueAxis} oPrimaryValueAxis
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#setPrimaryValueAxis
 * @function
 */
	

/**
 * Destroys the primaryValueAxis in the aggregation 
 * named <code>primaryValueAxis</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroyPrimaryValueAxis
 * @function
 */


/**
 * Getter for aggregation <code>secondaryValueAxis</code>.<br/>
 * Property of the Combination Chart's secondary Value Axis. Accept only an instance of ValueAxis element.
 * 
 * @return {sap.makit.ValueAxis}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getSecondaryValueAxis
 * @function
 */


/**
 * Setter for the aggregated <code>secondaryValueAxis</code>.
 * @param {sap.makit.ValueAxis} oSecondaryValueAxis
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#setSecondaryValueAxis
 * @function
 */
	

/**
 * Destroys the secondaryValueAxis in the aggregation 
 * named <code>secondaryValueAxis</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroySecondaryValueAxis
 * @function
 */


/**
 * Getter for aggregation <code>valueBubble</code>.<br/>
 * Value Bubble property of the Chart. Accept only an instance of ValueBubble element.
 * 
 * @return {sap.makit.ValueBubble}
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#getValueBubble
 * @function
 */


/**
 * Setter for the aggregated <code>valueBubble</code>.
 * @param {sap.makit.ValueBubble} oValueBubble
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#setValueBubble
 * @function
 */
	

/**
 * Destroys the valueBubble in the aggregation 
 * named <code>valueBubble</code>.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.CombinationChart#destroyValueBubble
 * @function
 */


/**
 * Double tap event on the chart
 *
 * @name sap.makit.CombinationChart#doubletap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'doubletap' event of this <code>sap.makit.CombinationChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.CombinationChart</code>.<br/> itself. 
 *  
 * Double tap event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.CombinationChart</code>.<br/> itself.
 *
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#attachDoubletap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'doubletap' event of this <code>sap.makit.CombinationChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#detachDoubletap
 * @function
 */

/**
 * Fire event doubletap to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.CombinationChart#fireDoubletap
 * @function
 */


/**
 * Single tap event on the chart
 *
 * @name sap.makit.CombinationChart#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.makit.CombinationChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.CombinationChart</code>.<br/> itself. 
 *  
 * Single tap event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.CombinationChart</code>.<br/> itself.
 *
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.makit.CombinationChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.CombinationChart#fireTap
 * @function
 */


/**
 * Long press event on the chart
 *
 * @name sap.makit.CombinationChart#longpress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'longpress' event of this <code>sap.makit.CombinationChart</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.makit.CombinationChart</code>.<br/> itself. 
 *  
 * Long press event on the chart
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.makit.CombinationChart</code>.<br/> itself.
 *
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#attachLongpress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'longpress' event of this <code>sap.makit.CombinationChart</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CombinationChart#detachLongpress
 * @function
 */

/**
 * Fire event longpress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.makit.CombinationChart} <code>this</code> to allow method chaining
 * @protected
 * @name sap.makit.CombinationChart#fireLongpress
 * @function
 */


/**
 * Get the value of the currently highlighted category
 *
 * @name sap.makit.CombinationChart#getSelectedCategory
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Get the number of distinct category values
 *
 * @name sap.makit.CombinationChart#getNumberOfCategories
 * @function
 * @type int
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */


/**
 * Return an array of categories value that is currently selected.
 *
 * @name sap.makit.CombinationChart#getSelectedCategoryGroup
 * @function
 * @type object
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/makit/CombinationChart.js
/*!
 * @copyright@
 */

//jQuery.sap.require("sap.makit.js.SybaseMA");
//jQuery.sap.declare("sap.makit.js.SybaseMA");
jQuery.sap.require('sap.makit.MakitLib'); // unlisted dependency retained


/**
 * @override
 */
sap.makit.CombinationChart.prototype.init = function() {
	//Private variable
	this._makitChart = null;
	
	this._parentCurrentHeight = 0;
	this._selectedCatIdx = 0;
	
	this._datarows = []; //This is the placeholder for the Chart's data row it's a 1-to-1 mapping to rows aggregation.
	this._styleClasses = []; //workaround for custom classes

	this.setCategoryAxis(new sap.makit.CategoryAxis());
	this.setPrimaryValueAxis(new sap.makit.ValueAxis());
	this.setSecondaryValueAxis(new sap.makit.ValueAxis());
	this.setValueBubble(new sap.makit.ValueBubble());
	
	this.attachEvent("_change", this._onPropertyChanged);
	sap.ui.getCore().attachThemeChanged(this._applyCSS, this);
};

/**
 * Attempt to preserve the chart's DOM reference before re-rendering it
 * @override
 */
sap.makit.CombinationChart.prototype.onBeforeRendering = function(oEvent) {
	this.fireEvent("_beforeRendering", this);
	if(this.getDomRef() && !sap.ui.core.RenderManager.isPreservedContent(this.getDomRef())){
		sap.ui.core.RenderManager.preserveContent(this.getDomRef(), /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
	}
};

/**
 * Once the place holder is rendered, we will create the MAKit chart object or 
 * retrieve the preserved chart DOM reference if exists.
 * @override
 */
sap.makit.CombinationChart.prototype.onAfterRendering = function(oEvent) {
	this.fireEvent("_afterRendering", this);
	var $placeholder = jQuery(jQuery.sap.domById("sap-ui-dummy-" + this.getId()));
	var $oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	var $newContent = null;
	if (this.getLayers().length > 0) {
		if ($oldContent.size() == 0) {
			this.fireEvent("_createMAKitObject", this);
			$newContent = new jQuery(this.getDomRef());
			$placeholder.replaceWith($newContent);
			this._createChartObject();
			var parent = this.getParent();
			var parentId = parent.getId();
			var parentDom = jQuery.sap.domById(parentId);
			this._parentCurrentHeight = parentDom.offsetHeight;
			sap.ui.core.ResizeHandler.register(parentDom, jQuery.proxy(this._onResize, this));
		} else if ( $oldContent.size() > 0 ) {
			this.fireEvent("_restoreMAKitObject", this);
			// replace dummy with old content
			$placeholder.replaceWith($oldContent);
		}
		
		if($newContent) {
			//this._makitChart.showRangeSelectorView(this.getShowRangeSelector());
			this._makitChart.setPalette(this.getPrimaryColorPalette(), "primaryaxis");
			this._makitChart.setPalette(this.getSecondaryColorPalette(), "secondaryaxis");
			//this._makitChart.showTableValue(this.getShowTableValue());
			this._makitChart.setNumberOfVisibleCategories(this.getNumberOfVisibleCategories());
			this._makitChart.setRangeSelectorStartPosition(this.getRangeSelectorStartPosition());
			this._setDataTable();
		}
	}
};

/** 
 * WORKAROUND: MAKit chart current behavior overwrite the div's css class when it's created
 *				So we need to intercept addition of custom style classes before
 *				this._makitChart is created.
 * @override
 */
sap.makit.CombinationChart.prototype.addStyleClass = function(sStyleClass, bSuppressRerendering) {
	 //If it's already in the control, then it is in the _styleClasses array
	if (this._styleClasses.indexOf(sStyleClass) === -1) {
		this._styleClasses.push(sStyleClass);
	}

	if(this._makitChart) {
		sap.ui.core.Control.prototype.addStyleClass.call(this, sStyleClass, bSuppressRerendering);
	}
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.removeStyleClass = function(sStyleClass, bSuppressRerendering) {
	var idx = this._styleClasses.indexOf(sStyleClass);
	if (idx > -1) {
		this._styleClasses.splice(idx, 1);
	}

	if(this._makitChart) {
		sap.ui.core.Control.prototype.removeStyleClass.call(this, sStyleClass, bSuppressRerendering);
	}
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.addLayer= function(oLayer){
	if(this._makitChart) {
		throw new Error("Cannot add layer once the chart has been rendered");
	}
	this._checkLayer(oLayer);
	
	sap.ui.core.Element.prototype.addAggregation.call(this, "layers", oLayer, false);
	oLayer.attachEvent("rowsUpdated", this._setDataTable, this);
	oLayer.attachEvent("dataRegionChanged", this._onDataRegionPropChanged, this);
	oLayer.attachEvent("_change", this._onLayerPropertyChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.insertLayer= function(oLayer, iIndex){
	if(this._makitChart) {
		throw new Error("Cannot add layer once the chart has been rendered");
	}
	this._checkLayer(oLayer);
	
	sap.ui.core.Element.prototype.insertAggregation.call(this, "layers", oLayer, iIndex, false);
	oLayer.attachEvent("rowsUpdated", this._setDataTable, this);
	oLayer.attachEvent("dataRegionChanged", this._onDataRegionPropChanged, this);
	oLayer.attachEvent("_change", this._onLayerPropertyChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.removeLayer = function(oLayer){
	if(this._makitChart) {
		throw new Error("Cannot remove layer once the chart has been rendered");
	}
	var removedObj = sap.ui.core.Element.prototype.removeAggregation.call(this, "layers", oLayer, false);
	if(removedObj != null) {
		removedObj.detachEvent("rowsUpdated", this._setDataTable, this);
		removedObj.detachEvent("dataRegionChanged", this._onDataRegionPropChanged, this);
		removedObj.detachEvent("_change", this._onLayerPropertyChanged, this);
	}
	return removedObj;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.removeAllLayers = function(){
	if(this._makitChart) {
		throw new Error("Cannot remove layers once the chart has been rendered");
	}
	var removedObjs = sap.ui.core.Element.prototype.removeAllAggregation.call(this, "layers", false);
	var len = removedObjs.length;
	var i;
	for( i = 0; i < len; i++){ 
		removedObjs[i].detachEvent("rowsUpdated", this._setDataTable, this);
		removedObjs[i].detachEvent("dataRegionChanged", this._onDataRegionPropChanged, this);
		removedObjs[i].detachEvent("_change", this._onLayerPropertyChanged, this);
	}
	return removedObjs;
};

sap.makit.CombinationChart.prototype._checkLayer= function(oLayer){
	var layers = this.getLayers();
	var layersCount = layers.length;
	var i;
	if(oLayer.getType() == sap.makit.ChartType.Line){
		for (i = 0; i < layersCount; i++) {
			if (layers[i].getType() == sap.makit.ChartType.Bar){
				oLayer.setLineType("verticalline");
				break;
			}
			else {
				oLayer.setLineType("line");
			}
		}
	}
	else {
		for (i = 0; i < layersCount; i++) {
			if (layers[i].getType() != sap.makit.ChartType.Line){
				throw new Error("Cannot combine 2 different non-line chart type");
			}
		}
		
		for (i = 0; i < layersCount; i++) {
			if (layers[i].getType() == sap.makit.ChartType.Line){
				if (oLayer.getType() == sap.makit.ChartType.Bar){
					layers[i].setLineType("verticalline");
				}
				else {
					layers[i].setLineType("line");
				}
			}
		}
	}
}

/**
 * @override
 */
sap.makit.CombinationChart.prototype.setValueBubble = function(oValueBubble){
	if (oValueBubble instanceof sap.makit.ValueBubble) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "valueBubble", oValueBubble, false);
		oValueBubble.attachEvent("_change", this._onValueBubbleChanged, this);
		if (this._makitChart) {
			var valueBubbleObj = oValueBubble.toObject();
			this._makitChart.setValueBubbleStyle(valueBubbleObj);
			if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
				this._makitChart.showValueBubble(valueBubbleObj.visible);
			}
		}
	}
	else {
		throw new Error("valueBubble property must be of type sap.makit.ValueBubble");
	}
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.addCategoryRegion= function(oCategory){
	sap.ui.core.Element.prototype.addAggregation.call(this, "categoryRegions", oCategory, false);
	oCategory.attachEvent("_change", {type: "categories"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.insertCategoryRegion= function(oCategory, iIndex){
	sap.ui.core.Element.prototype.insertAggregation.call(this, "categoryRegions", oCategory, iIndex, false);
	oCategory.attachEvent("_change", {type: "categories"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.removeCategoryRegion= function(oCategory){
	var removedObj = sap.ui.core.Element.prototype.removeAggregation.call(this, "categoryRegions", oCategory, false);
	if(removedObj != null) {
		oCategory.detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObj;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.removeAllCategoryRegions = function(){
	var removedObjs = sap.ui.core.Element.prototype.removeAllAggregation.call(this, "categoryRegions", false);
	var len = removedObjs.length;
	var i;
	for( i = 0; i < len; i++){ 
		removedObjs[i].detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObjs;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.setPrimaryValueAxis = function (oValueAxis){
	if (oValueAxis instanceof sap.makit.ValueAxis) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "primaryValueAxis", oValueAxis, false);
		oValueAxis.attachEvent("_change", { axis:"values", secondaryAxis: false }, this._onAxisPropChanged, this);
	}
	else {
		throw new Error("primaryValueAxis property must be of type sap.makit.ValueAxis");
	}
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.setSecondaryValueAxis = function (oValueAxis){
	if (oValueAxis instanceof sap.makit.ValueAxis) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "secondaryValueAxis", oValueAxis, false);
		oValueAxis.attachEvent("_change", { axis:"values", secondaryAxis: true }, this._onAxisPropChanged, this);
	}
	else {
		throw new Error("secondaryValueAxis property must be of type sap.makit.ValueAxis");
	}
	return this;
};

/**
 * @override
 */
sap.makit.CombinationChart.prototype.setCategoryAxis = function (oCategoryAxis){
	if (oCategoryAxis instanceof sap.makit.CategoryAxis) {
		sap.ui.core.Element.prototype.setAggregation.call(this, "categoryAxis", oCategoryAxis, false);
		oCategoryAxis.attachEvent("_change", { axis:"category" }, this._onAxisPropChanged, this);
	}
	else {
		throw new Error("categoryAxis property must be of type sap.makit.CategoryAxis");
	}
	return this;
};

/*=================================================================================
 *== PRIVATE METHODS
 *=================================================================================
 **/

/**
 * Set the Chart's height. Canvas does not support % height, 
 * so it need to have an absolute height
 * 
 * @return true, if the height is using % value, false otherwise
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._setRealHeight = function(height){
	var elem = this.getDomRef();
	var prevHeight = elem.style.height;
	var newHeight = "0px";
	if(height.indexOf("%") > -1) {
		var parent = this.getParent();
		var parentId = parent.getId();
		var parentDom = jQuery.sap.domById(parentId);
		var intHeight = parseInt(height, 10);
		var realHeight = Math.ceil(parentDom.offsetHeight * (intHeight / 100));
		newHeight = realHeight + "px";
	}
	else {
		newHeight = height;
	}
	
	if (prevHeight != newHeight){
		elem.style.height = newHeight;
	}
};

/**
 * Create and initialize the MAKit $MA.Chart object
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._createChartObject = function (){
	var elem = this.getDomRef();
	jQuery.sap.assert(elem, "Chart's DomRef is not ready");
	
	elem.style.width = this.getWidth();
	this._setRealHeight(this.getHeight());

	this._makitChart = new window.$MA.Chart(this.getId(), true);
	var that = this;
	this._makitChart.bind("initialized", function() {
		that._makitChart.showToolBar(false);		
		that._setMakitChartProperties();
	});
	
	this._makitChart.bind("beforerender", function() {
		that.fireEvent("_makitBeforeRender", that);
	});
	
	this._makitChart.bind("renderstart", function() {
		that.fireEvent("_makitRenderStart", that);
	});
	
	this._makitChart.bind("renderend", function() {
		that.fireEvent("_makitRenderEnd", that);
	});
	
	this._makitChart.bind("animationend", function() {
		that.fireEvent("_makitAnimationEnd", that);
	});

	var syntax = this._getChartSyntax();
	
	this._makitChart.create(syntax);
	this._makitChart.bind("tap", function(param) {
		that._selectedCatIdx = that._makitChart.getSelectedCategoryIndex();
		that.fireTap(param);
	});
	this._makitChart.bind("doubletap", function(param) {
		that.fireEvent("doubletap", param);
	});
	this._makitChart.bind("longpress", function(param) {
		that._selectedCatIdx = that._makitChart.getSelectedCategoryIndex();
		that.fireEvent("longpress", param);
	});

	//workaround for overwritten classes
	var len = this._styleClasses.length;
	for (var i = 0; i < len; i++ ){
		this.addStyleClass(this._styleClasses[i]);
	}
	
	this._applyCSS();
};

/**
 * This function is used to apply the Makit properties that will be reset when changing chart type. 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._setMakitChartProperties = function() {
	if (!this._makitChart) {
		return;
	}
	this._makitChart.setLegend(this.getLegendPosition().toLowerCase());
	// We should only apply this if the chart's data has been initialised at least once
	//if(this._dataInitialized){
		this._makitChart.setPalette(this.getPrimaryColorPalette(), "primaryaxis");
		this._makitChart.setPalette(this.getSecondaryColorPalette(), "secondaryaxis");
		this._makitChart.showRangeSelectorView(this.getShowRangeSelector());
		this._makitChart.showTableValue(this.getShowTableValue());
		this._makitChart.setNumberOfVisibleCategories(this.getNumberOfVisibleCategories());
		this._makitChart.setRangeSelectorStartPosition(this.getRangeSelectorStartPosition());
		
	//}

	var valueBubble = this.getValueBubble();
	if (valueBubble) {
		var valueBubbleObj = valueBubble.toObject();
		this._makitChart.setValueBubbleStyle(valueBubbleObj);
		if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
			this._makitChart.showValueBubble(valueBubbleObj.visible);
		}
	}
	
	var layersArr = this.getLayers();
	var len = layersArr.length;
	for(var i = 0; i < len; i++) {
		var layer = layersArr[i];
		if(layer.getType() == sap.makit.ChartType.Line) {
			this._makitChart.setGraphLineWidth(layer.getLineThickness(), layer.getId());
		}
		
		var pcp = layer.getPrimaryColorPalette();
		if (pcp) {
			this._makitChart.setPalette(pcp, layer.getId());
		}
		this._makitChart.setProperty(layer.getId() + ".values.SecondaryAxis", layer.getDrawOnSecondaryAxis());
	}
};

/**
 * Generate the MAKit chart metadata syntax based on the sap.makit.Chart properties.
 * To be used to create the MAKit chart.
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._getChartSyntax = function() {
	var categoryAxisObj = this.getCategoryAxis();
	var categoryObjs = this.getCategoryRegions();
	var catLen = categoryObjs.length;
	if (catLen > 0){
		var i;
		var categorySyntax = "<Categories";
		if(categoryAxisObj) { 
			if(categoryAxisObj.getDisplayAll()) {
				categorySyntax += ' display="' + categoryAxisObj.getDisplayAll() + '"';
			}
		}
		categorySyntax += ">";
		var displayNames = "";
		for (i = catLen - 1; i >= 0; i--) {
			var temp = categoryObjs[i].getDisplayName();
			if(temp && temp.length > 0 ){
				displayNames += temp + " | ";
			}
		}
		displayNames = displayNames.substr(0, displayNames.length - 3);
		
		for (i = 0; i < catLen; i++){
			var categoryObj = categoryObjs[i];
			categorySyntax += '<Category column="' + categoryObj.getColumn() + '"';
			if (categoryObj.getFormat()) {
					categorySyntax += ' format="' + categoryObj.getFormat() + '"';
			}
			if (i == 0) {
				categorySyntax += ' displayname="' + displayNames + '"';
			}
			if(categoryAxisObj) {
				categorySyntax += ' showprimaryline="'+ categoryAxisObj.getShowPrimaryLine() +'"';
				categorySyntax += ' showgrid="'+ categoryAxisObj.getShowGrid() +'"';
				categorySyntax += ' showlabel="'+ categoryAxisObj.getShowLabel() +'"';
				categorySyntax += ' thickness="'+ categoryAxisObj.getThickness() +'"';
				categorySyntax += ' color="'+ categoryAxisObj.getColor() +'"';
				categorySyntax += ' sortorder="'+ categoryAxisObj.getSortOrder().toLowerCase() +'"';
				categorySyntax += ' displaylastlabel="'+ categoryAxisObj.getDisplayLastLabel() +'"';
			}
			categorySyntax += ' />';
		}
		categorySyntax += "</Categories>";
	}
	else {
		throw new Error("CombinationChart '"+ this.getId() +"' needs at least one Category data region");
	}
	
	var layersArr = this.getLayers();
	var len = layersArr.length;
	var layersSyntax = "";
	
	for(var i = 0; i < len; i++) {
		var layer = layersArr[i];
		layersSyntax += layer.getSyntax(this.getPrimaryValueAxis(), this.getSecondaryValueAxis() );
	}
	
	var overlayGroupSyntax = '<OverlayGroup>';
	overlayGroupSyntax += categorySyntax;
	overlayGroupSyntax += layersSyntax;
	overlayGroupSyntax += '</OverlayGroup>';

	return overlayGroupSyntax;
};

/**
 * Update the data table of MAKit chart. 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._setDataTable = function() {
	//Use delayed call to prevent setDataTable to be called too fast and too many times in a short period.
	if(this._makitChart){
		this._setDataTableTimer = this._setDataTableTimer || jQuery.sap.delayedCall(150, this, function(){
			jQuery.sap.assert(this._makitChart, "_makitChart is not initialized");
			this.fireEvent("_createDataTable", this);
			var layersArr = this.getLayers();
			var len = layersArr.length;
			
			this.fireEvent("_beforeSetDataTable", this);
			for(var i = 0; i < len; i++) {
				var layer = layersArr[i];
				//layersSyntax += layer.getSyntax();
				this._makitChart.setDataTable(layer.getDataTable(), layer.getId());
			}
			
			//this._makitChart.setDataTable(dataTable);
			this._dataInitialize = true;
	
			this._setDataTableTimer = undefined;
		});
	}
};


/** 
 * Read and parse the css classes in the document and apply those style to the MAKit Chart 
 * 
 * @private
 */
sap.makit.CombinationChart.prototype._applyCSS = function(oEvent) {
	if (this._makitChart){
		this._makitChart.applyCSS();
	}
};

/** 
 * Retrieve selected series value of the layer 
 * 
 * @private
 */
sap.makit.CombinationChart.prototype._getSelectedSeries = function(oLayer) {
	var index = this.indexOfLayer(oLayer);
	if (index >= 0 && this._makitChart){
		return this._makitChart.getSelectedSeries(oLayer.getId());
	}
};

/*===================================================================================
 *=	PRIVATE EVENT HANDLERS
 *===================================================================================
 **/

/**
 * Handler for onresize event. 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onResize = function(oEvent) {
	var parent = this.getParent();
	var parentId = parent.getId();
	var parentDom = jQuery.sap.domById(parentId);
	var parentDomCurHeight = parentDom.offsetHeight;
	var parentDomCurWidth = parentDom.offsetWidth;
	
	if (this._parentCurrentHeight != parentDomCurHeight && parentDomCurHeight > 0 ) {
		this._setRealHeight(this.getHeight());
		this._parentCurrentHeight = parentDom.offsetHeight;
	}
	if(this._makitChart != null && parentDomCurHeight > 0 && parentDomCurWidth > 0) {
		this._makitChart.refresh();
	}
};

/**
 * Handler for properties change. 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onPropertyChanged = function(oEvent){
	if (!this._makitChart) {
		return;
	}
	var name = oEvent.mParameters["name"];
	var newVal = oEvent.mParameters["newValue"];
	if(this._makitChart){
		if (name === "showRangeSelector") {
			this._makitChart.showRangeSelectorView(newVal);
		}
		else if (name === "legendPosition") {
			this._makitChart.setLegend(newVal.toLowerCase());
		}
		else if(name === "width") {
			this.getDomRef().style.width = this.getWidth();
		}
		else if(name === "height") {
			this._setRealHeight(newVal);
		}
		else if(name === "showTableValue") {
			this._makitChart.showTableValue(newVal);
		}
		else if (name === "primaryColorPalette") {
			this._makitChart.setPalette(newVal, "primaryaxis");
		}
		else if (name === "secondaryColorPalette") {
			this._makitChart.setPalette(newVal, "secondaryaxis");
		} else if(name === "numberOfVisibleCategories") {
			this._makitChart.setNumberOfVisibleCategories(newVal);
		} else if (name === "rangeSelectorStartPosition") {
			this._makitChart.setRangeSelectorStartPosition(newVal);
		}
		
		this._makitChart.setSelectedCategoryIndex(this._selectedCatIdx);
		this._makitChart.refresh();
	}
}

/**
 * Handler for Layer's properties change. 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onLayerPropertyChanged = function(oEvent){
	if (!this._makitChart) {
		return;
	}
	var name = oEvent.mParameters["name"];
	var newVal = oEvent.mParameters["newValue"];
	var oldVal = oEvent.mParameters["oldValue"];
	if(this._makitChart){
		if (name === "type") {
			var layer = oEvent.getSource();
			var index = this.indexOfLayer(layer);
			
			var layers = this.getLayers();
			var layersCount = layers.length;
			
			var i;
			//If the new chart type is not Line we need to check and make sure it does not conflict
			if (newVal != sap.makit.ChartType.Line) {
				//First check for conflict type
				for (i = 0; i < layersCount; i++) {
					var chartType = layers[i].getType();
					if(index != i && chartType != sap.makit.ChartType.Line) {
						layer.setType(oldVal); //set it back to old value;
						throw new Error("CombinationChart : " + newVal + " chart type cannot be combine with " + chartType + " chart type"); 
					}
				}
			}
			//We need to find what is the major chart type to determine which orientation the line should be
			// 	(i.e. vertical line or horizontal line)
			
			var mainChartType = newVal;
			//If the mainChartType is Line, find out what type of chart 
			// is the main type (i.e. or Vertical or Horizontal)
			if (mainChartType == sap.makit.ChartType.Line) {
				for (i = 0; i < layersCount; i++) {
					if(layers[i].getType() != sap.makit.ChartType.Line) {
						mainChartType = layers[i].getType();
						break;
					}
				}
			}
			
			//Determine which type of line it should be
			var lineType = "line";
			if(mainChartType == sap.makit.ChartType.Bar) {
				lineType = "verticalline";
			}
			
			var type = newVal;
			if(newVal == sap.makit.ChartType.Line) {
				type = lineType;
			}
			
			this._makitChart.setProperty(layer.getId() + ".ChartType", type);

			//Set the rest of the Line chart layers to the correct type (vertical or not), if required.
			for (i = 0; i < layersCount; i++) {
				if(layers[i].getType() == sap.makit.ChartType.Line && layers[i].getLineType() != lineType && layer != layers[i]) {
					layers[i].setLineType(lineType);
					this._makitChart.setProperty(layers[i].getId() + ".ChartType", lineType);
				}
			}
		}
		else if (name === "lineThickness") {
			this._makitChart.setGraphLineWidth(newVal, oEvent.getSource().getId());
		}
		else if (name === "primaryColorPalette") {
			this._makitChart.setPalette(newVal, oEvent.getSource().getId());
		}
		else if(name === "drawOnSecondaryAxis") {
			this._makitChart.setProperty(oEvent.getSource().getId() + ".values.SecondaryAxis", newVal);
		}
		this._makitChart.setSelectedCategoryIndex(this._selectedCatIdx);
		this._makitChart.refresh();
	}
}

/**
 * Handler for Category, Value and Series data region property change 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onDataRegionPropChanged = function(oEvent, oData){
	if (!this._makitChart) {
		return;
	}
	
	var oParams = oEvent.mParameters;
	if (oParams["type"] == "values") {
		var id = oEvent.getSource().getId();
		var idx = oParams["index"];
		if(idx > -1){
			this._makitChart.setProperty(id + "." + oParams["type"] + "["+idx+"]." + oParams["name"], oParams["newValue"]);
		}
	}
	else if (oParams["type"] == "series") {
		var id = oEvent.getSource().getId();
		var idx = oParams["index"];
		this._makitChart.setProperty(id + "." + oParams["type"] + "["+idx+"]." + oParams["name"], oParams["newValue"]);
	}
	else if (oData != undefined){
		this._makitChart.setProperty(oData["type"] + "." + oParams["name"], oParams["newValue"]);
	}
};

/**
 * Handler for CategoryAxis and ValueAxis change 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onAxisPropChanged = function(oEvent, oData){
	jQuery.sap.assert(oData, "oData is expected to be set in _onAxisPropChanged");
	if (!this._makitChart) {
		return;
	}
	var oParams = oEvent.mParameters;
	var sName =  oParams["name"].toLowerCase();
	var value =  oParams["newValue"];
	// Sortorder in makit only accepts lowercase value 
	if (sName === "sortorder") {
		value = value.toLowerCase();
	}
	if(oData["axis"] == "values"){
		var whichAxis = "primaryaxis";
		if (oData["secondaryAxis"]) {
			whichAxis = "secondaryaxis"
		}
		this._makitChart.setProperty(whichAxis + "." + oData["axis"] + "." + sName, value);
	}
	else {
		var axis = oData["axis"];
		if (sName === "displayall") {
			axis = "categories";
			sName = "display";
			if(!value){
				value = "";
			}
		}
		this._makitChart.setProperty(axis + "." + sName, value);
	}
	
	this._makitChart.refresh();
	
	if (sName === "sortorder" || sName == "display") {
		this._setDataTable();
	}
	
};

/**
 * Handler for ValueBubble properties change 
 * 
 * @private
 * 
 * */
sap.makit.CombinationChart.prototype._onValueBubbleChanged = function (oEvent){
	if (!this._makitChart) {
		return;
	}
	var valueBubbleObj = this.getValueBubble().toObject();
	this._makitChart.setValueBubbleStyle(valueBubbleObj);
	if (this._makitChart.isValueBubbleVisible() != valueBubbleObj.visible) {
		this._makitChart.showValueBubble(valueBubbleObj.visible);
	}
	this._makitChart.refresh();
};

/*=================================================================================
 *== PUBLIC METHODS
 *=================================================================================
 **/

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.CombinationChart.prototype.getSelectedCategory = function() {
	var selectedCategory = undefined;
	if (this._makitChart){
		selectedCategory = this._makitChart.getSelectedCategory();
	}
	return selectedCategory;
};

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.CombinationChart.prototype.getNumberOfCategories = function() {
	var numOfCat = undefined;
	if (this._makitChart){
		numOfCat = this._makitChart.getNumberOfCategories();
	}
	return numOfCat;
};

/**
 * See the generated JSDoc for the documentation of this public function
 * 
 * @public
 * */
sap.makit.CombinationChart.prototype.getSelectedCategoryGroup = function() {
	var selectedCategoryGroup = undefined;
	if (this._makitChart){
		selectedCategoryGroup = this._makitChart.getSelectedCategoryGroup();
	}
	return selectedCategoryGroup;
};
}; // end of sap/makit/CombinationChart.js
if ( !jQuery.sap.isDeclared('sap.makit.Layer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Layer.
jQuery.sap.declare("sap.makit.Layer");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Layer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.makit.ChartType (default: sap.makit.ChartType.Column)</li>
 * <li>{@link #getLineThickness lineThickness} : float (default: 1)</li>
 * <li>{@link #getPrimaryColorPalette primaryColorPalette} : any</li>
 * <li>{@link #getDrawOnSecondaryAxis drawOnSecondaryAxis} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRows rows} : sap.makit.Row[]</li>
 * <li>{@link #getColumns columns} : sap.makit.Column[]</li>
 * <li>{@link #getSeries series} : sap.makit.Series</li>
 * <li>{@link #getValues values} : sap.makit.Value[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Layer represent a chart in the CombinationChart
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.12
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Layer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Layer", { metadata : {

	deprecated : true,
	publicMethods : [
		// methods
		"getSelectedSeries"
	],
	library : "sap.makit",
	properties : {

		/**
		 * Chart type
		 */
		"type" : {type : "sap.makit.ChartType", group : "Appearance", defaultValue : sap.makit.ChartType.Column},

		/**
		 * Specify the line thickness of the line graph. Only applies to Line chart type.
		 */
		"lineThickness" : {type : "float", group : "Appearance", defaultValue : 1},

		/**
		 * Allow a layer’s primary axis color palette to be modified without affecting other charts in the same screen. If not set, the chart will use the default color palette defined in the theme. This property will take precedence over other CombinationChart's color palette properties.
		 * Accept an array of color in string format or hex format. e.g.
		 * 0xff0000
		 * "red"
		 * "rgb(255,0,0)"
		 */
		"primaryColorPalette" : {type : "any", group : "Misc", defaultValue : null},

		/**
		 * Specifiy whether this layer should be drawn on the secondary axis.
		 */
		"drawOnSecondaryAxis" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {

		/**
		 * The data rows of the chart. User should bind these to their data source
		 */
		"rows" : {type : "sap.makit.Row", multiple : true, singularName : "row", bindable : "bindable"}, 

		/**
		 * The data column map of the chart.
		 */
		"columns" : {type : "sap.makit.Column", multiple : true, singularName : "column", bindable : "bindable"}, 

		/**
		 * Data region property of the chart's Series
		 */
		"series" : {type : "sap.makit.Series", multiple : false}, 

		/**
		 * Data region property of the chart's Values
		 */
		"values" : {type : "sap.makit.Value", multiple : true, singularName : "value"}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Layer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Layer.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Chart type
 *
 * Default value is <code>Column</code>
 *
 * @return {sap.makit.ChartType} the value of property <code>type</code>
 * @public
 * @name sap.makit.Layer#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Column</code> 
 *
 * @param {sap.makit.ChartType} oType  new value for property <code>type</code>
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#setType
 * @function
 */


/**
 * Getter for property <code>lineThickness</code>.
 * Specify the line thickness of the line graph. Only applies to Line chart type.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>lineThickness</code>
 * @public
 * @name sap.makit.Layer#getLineThickness
 * @function
 */

/**
 * Setter for property <code>lineThickness</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fLineThickness  new value for property <code>lineThickness</code>
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#setLineThickness
 * @function
 */


/**
 * Getter for property <code>primaryColorPalette</code>.
 * Allow a layer’s primary axis color palette to be modified without affecting other charts in the same screen. If not set, the chart will use the default color palette defined in the theme. This property will take precedence over other CombinationChart's color palette properties.
 * Accept an array of color in string format or hex format. e.g.
 * 0xff0000
 * "red"
 * "rgb(255,0,0)"
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>primaryColorPalette</code>
 * @public
 * @name sap.makit.Layer#getPrimaryColorPalette
 * @function
 */

/**
 * Setter for property <code>primaryColorPalette</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oPrimaryColorPalette  new value for property <code>primaryColorPalette</code>
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#setPrimaryColorPalette
 * @function
 */


/**
 * Getter for property <code>drawOnSecondaryAxis</code>.
 * Specifiy whether this layer should be drawn on the secondary axis.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>drawOnSecondaryAxis</code>
 * @public
 * @name sap.makit.Layer#getDrawOnSecondaryAxis
 * @function
 */

/**
 * Setter for property <code>drawOnSecondaryAxis</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDrawOnSecondaryAxis  new value for property <code>drawOnSecondaryAxis</code>
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#setDrawOnSecondaryAxis
 * @function
 */


/**
 * Getter for aggregation <code>rows</code>.<br/>
 * The data rows of the chart. User should bind these to their data source
 * 
 * @return {sap.makit.Row[]}
 * @public
 * @name sap.makit.Layer#getRows
 * @function
 */


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.makit.Row}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#insertRow
 * @function
 */

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.makit.Row}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#addRow
 * @function
 */

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.makit.Row} vRow the row to remove or its index or id
 * @return {sap.makit.Row} the removed row or null
 * @public
 * @name sap.makit.Layer#removeRow
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Row[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.makit.Layer#removeAllRows
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Row</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Row}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.makit.Layer#indexOfRow
 * @function
 */
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#destroyRows
 * @function
 */


/**
 * Binder for aggregation <code>rows</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#bindRows
 * @function
 */

/**
 * Unbinder for aggregation <code>rows</code>.
 *
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#unbindRows
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * The data column map of the chart.
 * 
 * @return {sap.makit.Column[]}
 * @public
 * @name sap.makit.Layer#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.makit.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.makit.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.makit.Column} vColumn the column to remove or its index or id
 * @return {sap.makit.Column} the removed column or null
 * @public
 * @name sap.makit.Layer#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Column[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.makit.Layer#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.makit.Layer#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#destroyColumns
 * @function
 */


/**
 * Binder for aggregation <code>columns</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#bindColumns
 * @function
 */

/**
 * Unbinder for aggregation <code>columns</code>.
 *
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#unbindColumns
 * @function
 */


/**
 * Getter for aggregation <code>series</code>.<br/>
 * Data region property of the chart's Series
 * 
 * @return {sap.makit.Series}
 * @public
 * @name sap.makit.Layer#getSeries
 * @function
 */


/**
 * Setter for the aggregated <code>series</code>.
 * @param {sap.makit.Series} oSeries
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#setSeries
 * @function
 */
	

/**
 * Destroys the series in the aggregation 
 * named <code>series</code>.
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#destroySeries
 * @function
 */


/**
 * Getter for aggregation <code>values</code>.<br/>
 * Data region property of the chart's Values
 * 
 * @return {sap.makit.Value[]}
 * @public
 * @name sap.makit.Layer#getValues
 * @function
 */


/**
 * Inserts a value into the aggregation named <code>values</code>.
 *
 * @param {sap.makit.Value}
 *          oValue the value to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the value should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the value is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the value is inserted at 
 *             the last position        
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#insertValue
 * @function
 */

/**
 * Adds some value <code>oValue</code> 
 * to the aggregation named <code>values</code>.
 *
 * @param {sap.makit.Value}
 *            oValue the value to add; if empty, nothing is inserted
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#addValue
 * @function
 */

/**
 * Removes an value from the aggregation named <code>values</code>.
 *
 * @param {int | string | sap.makit.Value} vValue the value to remove or its index or id
 * @return {sap.makit.Value} the removed value or null
 * @public
 * @name sap.makit.Layer#removeValue
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>values</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Value[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.makit.Layer#removeAllValues
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Value</code> in the aggregation named <code>values</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Value}
 *            oValue the value whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.makit.Layer#indexOfValue
 * @function
 */
	

/**
 * Destroys all the values in the aggregation 
 * named <code>values</code>.
 * @return {sap.makit.Layer} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Layer#destroyValues
 * @function
 */


/**
 * Get the value of the currently highlighted series
 *
 * @name sap.makit.Layer#getSelectedSeries
 * @function
 * @type string
 * @public
 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
 */

// Start of sap/makit/Layer.js
/*!
* @copyright@
 */
jQuery.sap.require('sap.makit.MakitLib'); // unlisted dependency retained


/**
 * @override
 */
sap.makit.Layer.prototype.init = function() {
	this._datarows = [];
	this._createRowsCalled = false;
	this._lineType = null;
};

/**
 * @override
 */
sap.makit.Layer.prototype.addValue= function(oValue){
	sap.ui.core.Element.prototype.addAggregation.call(this, "values", oValue, false);
	oValue.attachEvent("_change", {type: "values"}, this._onDataRegionPropChanged, this);
	return this;
};


sap.makit.Layer.prototype.addColumn= function(oValue){
	sap.ui.core.Element.prototype.addAggregation.call(this, "columns", oValue, false);
	oValue.attachEvent("_change", {type: "columns"}, this._onColumnPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.insertValue= function(oValue, iIndex){
	sap.ui.core.Element.prototype.insertAggregation.call(this, "values", oValue, iIndex, false);
	oValue.attachEvent("_change", {type: "values"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeValue= function(oValue){
	var removedObj = sap.ui.core.Element.prototype.removeAggregation.call(this, "values", oValue, false);
	if(removedObj != null) {
		removedObj.detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObj;
};

/**
 * @override
 */
sap.makit.Chart.prototype.removeAllValues = function(){
	var removedObjs = sap.ui.core.Element.prototype.removeAllAggregation.call(this, "values", false);
	var len = removedObjs.length;
	var i;
	for( i = 0; i < len; i++){ 
		removedObjs[i].detachEvent("_change", this._onDataRegionPropChanged, this);
	}
	return removedObjs;
};

/**
 * @override
 */
sap.makit.Layer.prototype.setSeries = function(oSeries){
	sap.ui.core.Element.prototype.setAggregation.call(this, "series", oSeries, false);
	oSeries.attachEvent("_change", {type: "series"}, this._onDataRegionPropChanged, this);
	return this;
};

/**
 * @override
 */
sap.makit.Layer.prototype.bindAggregation = function(sName, oBindingInfo) {
	// special handling for the rows aggregation
	if (sName === "rows") {
		// old API compatibility (sName, sPath, oTemplate, oSorter, aFilters)
		if (typeof oBindingInfo == "string") {
			oBindingInfo = {
				path: arguments[1],
				template: arguments[2],
				sorter: arguments[3], 
				filters: arguments[4]
			};
		}
		// the rows aggregation has neither a template nor a factory function!
		oBindingInfo.template = undefined;
		oBindingInfo.factory = function() {};
		// call the real bindAggregation method
		return sap.ui.core.Element.prototype.bindAggregation.call(this, sName, oBindingInfo); 
	}
	// call the real bindAggregation method
	return sap.ui.core.Element.prototype.bindAggregation.apply(this, arguments);
};

/** 
 * User should not use these API programmatically.
 * @override
 */
sap.makit.Layer.prototype.addRow = function(oRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"addRow\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Layer.prototype.insertRow = function(oRow, iIndex){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"insertRow\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Layer.prototype.removeRow = function(vRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"removeRow\" cannot be used programmatically!");
};

/**
 * @override
 */

sap.makit.Layer.prototype.removeAllRows = function(){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"removeAllRows\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Layer.prototype.destroyRows = function(vRow){
	jQuery.sap.log.error("The control manages the rows aggregation. The method \"destroyRows\" cannot be used programmatically!");
};

/**
 * @override
 */
sap.makit.Layer.prototype.updateRows = function(){
	this.fireEvent("_startUpdateRows", this);
	this._createRows();
	this._createRowsCalled = true;
	this.fireEvent("rowsUpdated");
	this.fireEvent("_endUpdateRows", this);
};


/**
 * @override
 */
sap.makit.CombinationChart.prototype.setType = function(oType){
	if(oType == sap.makit.ChartType.Pie || oType == sap.makit.ChartType.Donut || oType == sap.makit.ChartType.Bubble){
		throw new Error("Combination Chart does not support " + oType + " chart type");
		return;
	} else {
		sap.ui.core.Element.prototype.setProperty.call(this, "type", oType, false);
	}
	return this;
};

/*=================================================================================
 *== PRIVATE METHODS
 *=================================================================================
 **/

/**
 * Handler for Value and Series data region property change 
 * 
 * @private
 * 
 * */
sap.makit.Layer.prototype._onDataRegionPropChanged = function(oEvent, oData){
	jQuery.sap.assert(oData, "oData is expected to be set in _onDataRegionPropChanged");
	var oParams = oEvent.mParameters;
	oParams["type"] = oData["type"];
	if (oData["type"] == "values") {
		var valObj = oEvent.oSource;
		var idx = this.indexOfValue(valObj);
		oParams["index"] = idx;
	}
	this.fireEvent("dataRegionChanged", oParams);
};


sap.makit.Layer.prototype._onColumnPropChanged = function(oEvent, oData){
	var oParams = oEvent.mParameters;
	if (oParams["name"] == "name" && this._createRowsCalled) {
		jQuery.sap.log.info("Column name property is changed due to name has been binded");
		this._createRows();
	}
};
/**
 * We will construct the row aggregation in this function
 * 
 * @private
 * 
 * */
sap.makit.Layer.prototype._createRows = function() {
	var oTemplate = new sap.makit.Row(this.getId() + "-dummyrows");
		var aCols = this.getColumns();
		for (var i = 0, l = aCols.length; i < l; i++) {
			var oColTemplate = aCols[i];
			if (oColTemplate) {
				var name = aCols[i].getName();
				var oClone = oColTemplate.clone("col" + i);
				oClone.detachEvent("_change", this._onColumnPropChanged, this);
				for(var prop in oColTemplate.mProperties) {
					if(oColTemplate.mProperties.hasOwnProperty(prop)) {
						oClone.setProperty(prop, oColTemplate.getProperty(prop), false);
					}
				}
				oClone.data("sap-ui-colindex", i);
				oTemplate.addAggregation("cells",oClone);
				oClone.unbindAggregation("name",true);
			}
		}

	this.destroyAggregation("rows");
	var aContexts = undefined;
	var oBinding = this.getBinding("rows");
	if (oBinding) {
		aContexts = oBinding.getContexts();
	}
	var totalRows = oBinding.getLength();
	this._datarows = [];
	var bi = this.getBindingInfo("rows");
	var sModelName = undefined;
	if (bi && bi.model) {
		sModelName = bi.model;
	}
	for (var i = 0; i < totalRows; i++) {
		if (aContexts && aContexts[i]) {
			var oClone = oTemplate.clone("row" + i);
			oClone.setBindingContext(aContexts[i], sModelName);
			this.addAggregation("rows", oClone);
			this._datarows.push(oClone._datarow);
		}
	}

	// destroy the template
	oTemplate.destroy();
};

/**
 * Set the line type, verticaline or line.
 * 
 * @internal
 * */
sap.makit.Layer.prototype.setLineType = function(sLineType) {
	this._lineType = sLineType;
};

/**
 * return the line type
 * 
 * @internal
 */
sap.makit.Layer.prototype.getLineType = function() {
	return this._lineType;
};

/**
 * Generate the MAKit chart metadata syntax based on the sap.makit.Chart properties.
 * To be used to create the MAKit chart.
 * Should only be accessed by CombinationChart
 * @internal
 * 
 * */
sap.makit.Layer.prototype.getSyntax = function(primaryValueAxisObj, secondaryValueAxisObj) {
	var seriesObj = this.getSeries();
	var seriesSyntax = '';
	if (seriesObj) {
		seriesSyntax = '<Series Column="' + seriesObj.getColumn() + '"';
		if (seriesObj.getFormat()) {
			seriesSyntax += ' format="' + seriesObj.getFormat() + '"';
		}
		if (seriesObj.getDisplayName()) {
			seriesSyntax += ' displayname="' + seriesObj.getDisplayName() + '"';
		}
		seriesSyntax += '/>';
	}

	var drawOnSecondaryAxis = this.getDrawOnSecondaryAxis();
	var valuesSyntax = '<Values>';
	var valueAxisObj = drawOnSecondaryAxis? secondaryValueAxisObj : primaryValueAxisObj;
	if(valueAxisObj) {
		valuesSyntax = '<Values';
		if (drawOnSecondaryAxis) {
			valuesSyntax += ' SecondaryAxis="'+ drawOnSecondaryAxis +'"';
		}
		valuesSyntax += ' showprimaryline="'+ valueAxisObj.getShowPrimaryLine() +'"';
		valuesSyntax += ' showgrid="'+ valueAxisObj.getShowGrid() +'"';
		valuesSyntax += ' showlabel="'+ valueAxisObj.getShowLabel() +'"';
		valuesSyntax += ' thickness="'+ valueAxisObj.getThickness() +'"';
		valuesSyntax += ' color="'+ valueAxisObj.getColor() +'"';
		if(valueAxisObj.getMin() !== "") {
			valuesSyntax += ' min="'+ valueAxisObj.getMin() +'"';
		}
		if(valueAxisObj.getMax() !== "") {
			valuesSyntax += ' max="'+ valueAxisObj.getMax() +'"';
		}
		valuesSyntax += '>';
	}

	var valuesObj = this.getValues();
	var length = valuesObj.length;
	if (length == 0) {
		throw new Error("Chart '"+ this.getId() +"' needs at least one Value data region");
	}
	var valueObj;
	for (var i = 0; i < length; i++) {
		valueObj = valuesObj[i];
		valuesSyntax += '<Value Expression="' + valueObj.getExpression() + '"';
		if (valueObj.getFormat()) {
			valuesSyntax += ' format="' + valueObj.getFormat() + '"';
		}
		if (valueObj.getDisplayName()) {
			valuesSyntax += ' displayname="' + valueObj.getDisplayName() + '"';
		}
		if(valueObj.getLocale() !== "") {
			valuesSyntax += ' Locale="'+ valueObj.getLocale() +'"';
		}
		valuesSyntax += '/>';
	}
	valuesSyntax += '</Values>';

	var type = this.getType().toLowerCase();
	var lineType = this.getLineType();
	var pieStyle = null;
	if (type === "donut" || type === "pie"){
		pieStyle = type; // it's the pieStyle that can be pie or donut
		type = "pie"; // in MAKit the chart's type is always pie for Pie/Donut chart
	}
	else if (type === "line" && lineType){
		type = lineType;
	}
	var chartSyntax = '<Layer Name="' + this.getId() + '" ChartType="' + type + '"';
	if(pieStyle !== null) {
		chartSyntax += ' PieStyle="' + pieStyle + '"';
	}
	chartSyntax += ' >';

	if (seriesObj) {
		chartSyntax += seriesSyntax;
	}
	chartSyntax += valuesSyntax;
	chartSyntax += '</Layer>';

	return chartSyntax;
};

/*=================================================================================
 *== PUBLIC METHODS
 *=================================================================================
 **/

/**
 * Update the data table of MAKit chart. 
 * 
 * @private
 * 
 * */
sap.makit.Layer.prototype.getDataTable = function() {
	if(this._datarows && this._datarows.length > 0){
		var data = this._datarows;
		var dataTable = new window.$MA.DataTable();
		var columns = this.getColumns();
		var colLen = columns.length;
		if (colLen == 0) {
			columns = this.getRows()[0].getCells();
			colLen = columns.length;
		}
		for (var i = 0; i < colLen; i++){
			dataTable.addColumn(columns[i].getName(), columns[i].getType());
		}

		dataTable.addRows(data);
		return dataTable;
	}
	
	return null;
};

sap.makit.Layer.prototype.getSelectedSeries = function(){
	var parent = this.getParent();
	if( parent ) {
		return parent._getSelectedSeries(this);
	}
};


}; // end of sap/makit/Layer.js
if ( !jQuery.sap.isDeclared('sap.makit.Row') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Row.
jQuery.sap.declare("sap.makit.Row");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Row.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.makit.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The data row of the Chart's data table
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Row
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Row", { metadata : {

	deprecated : true,
	library : "sap.makit",
	aggregations : {

		/**
		 * Representing the cells of the row. User should not add individual cells. The cells will be added automatically via Column mapping.
		 */
		"cells" : {type : "sap.makit.Column", multiple : true, singularName : "cell"}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Row with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Row.extend
 * @function
 */


/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Representing the cells of the row. User should not add individual cells. The cells will be added automatically via Column mapping.
 * 
 * @return {sap.makit.Column[]}
 * @public
 * @name sap.makit.Row#getCells
 * @function
 */


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.makit.Column}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#insertCell
 * @function
 */

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.makit.Column}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#addCell
 * @function
 */

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.makit.Column} vCell the cell to remove or its index or id
 * @return {sap.makit.Column} the removed cell or null
 * @public
 * @name sap.makit.Row#removeCell
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Column[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.makit.Row#removeAllCells
 * @function
 */

/**
 * Checks for the provided <code>sap.makit.Column</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Column}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.makit.Row#indexOfCell
 * @function
 */
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#destroyCells
 * @function
 */

// Start of sap/makit/Row.js
/*!
 * @copyright@
 */

sap.makit.Row.prototype.init = function(){
	this._datarow = {};
};

sap.makit.Row.prototype.addCell = function(oCell){
	sap.ui.core.Element.prototype.addAggregation.call(this, "cells", oCell, false);
	var sId = this.getId();
	//We only want to attach event on real rows not on template rows.
	if (!jQuery.sap.endsWith(sId, "dummyrows")){	
		this._datarow[oCell.getName()] = oCell.getValue();
		oCell.attachEvent("_change", this.onCellChanged, this);
	}
};

sap.makit.Row.prototype.onCellChanged = function(oEvent){
	if (oEvent.mParameters['name'] === "name"){
		var oldName = oEvent.mParameters['oldValue'];
		var newName = oEvent.mParameters['newValue'];
		this._datarow[newName] = undefined;
		if(oldName && oldName !== ""){
			this._datarow[newName] = this._datarow[oldName];
			this._datarow[oldName] = null;
			this._datarow[oldName] = undefined;
			delete this._datarow[oldName];
		}
	}
	else if(oEvent.mParameters['name'] === "value"){
		var cellName = oEvent.oSource.getName();
		this._datarow[cellName] = oEvent.mParameters['newValue'];
	}
};

}; // end of sap/makit/Row.js
if ( !jQuery.sap.isDeclared('sap.makit.Series') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Series.
jQuery.sap.declare("sap.makit.Series");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Series.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumn column} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Series data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Series
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Series", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * The name of the column that will be mapped to the chart's Series value
		 */
		"column" : {type : "string", group : "Data", defaultValue : null},

		/**
		 * The displayed name of the Series
		 */
		"displayName" : {type : "string", group : "Appearance", defaultValue : null},

		/**
		 * Number formatting for the value. Accepted values:
		 * number
		 * currency
		 * percent
		 * roundedN - where N represents number of decimal places e.g. rounded4
		 */
		"format" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Series with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Series.extend
 * @function
 */


/**
 * Getter for property <code>column</code>.
 * The name of the column that will be mapped to the chart's Series value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>column</code>
 * @public
 * @name sap.makit.Series#getColumn
 * @function
 */

/**
 * Setter for property <code>column</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sColumn  new value for property <code>column</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setColumn
 * @function
 */


/**
 * Getter for property <code>displayName</code>.
 * The displayed name of the Series
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Series#getDisplayName
 * @function
 */

/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setDisplayName
 * @function
 */


/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Series#getFormat
 * @function
 */

/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setFormat
 * @function
 */

// Start of sap/makit/Series.js
/*!
 * @copyright@
 */

}; // end of sap/makit/Series.js
if ( !jQuery.sap.isDeclared('sap.makit.Value') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Value.
jQuery.sap.declare("sap.makit.Value");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Value.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getExpression expression} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li>
 * <li>{@link #getLocale locale} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Value data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.Value
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.Value", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * The user should map the column on this property. The expression allows more advanced column mapping. Instead of just specifying the column name (e.g. revenueValue), the user can use SAP expression language e.g. Assuming the user has a revenueValue column and an operatingCost column, the user can specify the following expression:
		 * "revenueValue - operatingCost"
		 * the resulting value displayed in the chart will be the arithmatic operation result on these two columns.
		 */
		"expression" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * The text label representing this Value (on value bubble or table's header)
		 */
		"displayName" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Number formatting for the value. Accepted values:
		 * number
		 * currency
		 * percent
		 * roundedN - where N represents number of decimal places e.g. rounded4
		 */
		"format" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Comma separated locales for specifiying values in different locale. The locale will be mapped in the same order as the series data.
		 * e.g. zh-CH, en-US, de-DE
		 * The first zh-CH will be applied to the value of the first series, en-US will be applied to the second series.
		 * Currently will only work with 'currency' format.
		 * Supported locales:
		 * en, zh, de, fr, es, ru, ja, pt and their more specific variations such as en-CA, es-AR, zh-HK, etc.
		 */
		"locale" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Value with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Value.extend
 * @function
 */


/**
 * Getter for property <code>expression</code>.
 * The user should map the column on this property. The expression allows more advanced column mapping. Instead of just specifying the column name (e.g. revenueValue), the user can use SAP expression language e.g. Assuming the user has a revenueValue column and an operatingCost column, the user can specify the following expression:
 * "revenueValue - operatingCost"
 * the resulting value displayed in the chart will be the arithmatic operation result on these two columns.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>expression</code>
 * @public
 * @name sap.makit.Value#getExpression
 * @function
 */

/**
 * Setter for property <code>expression</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExpression  new value for property <code>expression</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setExpression
 * @function
 */


/**
 * Getter for property <code>displayName</code>.
 * The text label representing this Value (on value bubble or table's header)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Value#getDisplayName
 * @function
 */

/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setDisplayName
 * @function
 */


/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Value#getFormat
 * @function
 */

/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setFormat
 * @function
 */


/**
 * Getter for property <code>locale</code>.
 * Comma separated locales for specifiying values in different locale. The locale will be mapped in the same order as the series data.
 * e.g. zh-CH, en-US, de-DE
 * The first zh-CH will be applied to the value of the first series, en-US will be applied to the second series.
 * Currently will only work with 'currency' format.
 * Supported locales:
 * en, zh, de, fr, es, ru, ja, pt and their more specific variations such as en-CA, es-AR, zh-HK, etc.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>locale</code>
 * @public
 * @name sap.makit.Value#getLocale
 * @function
 */

/**
 * Setter for property <code>locale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLocale  new value for property <code>locale</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setLocale
 * @function
 */

// Start of sap/makit/Value.js
/*!
 * @copyright@
 */

}; // end of sap/makit/Value.js
if ( !jQuery.sap.isDeclared('sap.makit.ValueAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.ValueAxis.
jQuery.sap.declare("sap.makit.ValueAxis");




/**
 * Constructor for a new ValueAxis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMin min} : string</li>
 * <li>{@link #getMax max} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.makit.Axis#constructor sap.makit.Axis}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains the properties of the Value's Axis.
 * @extends sap.makit.Axis
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.ValueAxis
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.makit.Axis.extend("sap.makit.ValueAxis", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range). Set to empty string to switch back to automatic calculation.
		 */
		"min" : {type : "string", group : "Misc", defaultValue : null},

		/**
		 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range)
		 */
		"max" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.ValueAxis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.ValueAxis.extend
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range). Set to empty string to switch back to automatic calculation.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>min</code>
 * @public
 * @name sap.makit.ValueAxis#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMin  new value for property <code>min</code>
 * @return {sap.makit.ValueAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueAxis#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>max</code>
 * @public
 * @name sap.makit.ValueAxis#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMax  new value for property <code>max</code>
 * @return {sap.makit.ValueAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueAxis#setMax
 * @function
 */

// Start of sap/makit/ValueAxis.js
/*!
 * @copyright@
 */

sap.makit.ValueAxis.prototype.init = function(){
	this.setShowGrid(true);
	this.setShowPrimaryLine(false);
};

}; // end of sap/makit/ValueAxis.js
if ( !jQuery.sap.isDeclared('sap.makit.ValueBubble') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2017 SAP SE. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.ValueBubble.
jQuery.sap.declare("sap.makit.ValueBubble");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ValueBubble.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowCategoryText showCategoryText} : boolean (default: true)</li>
 * <li>{@link #getShowCategoryDisplayName showCategoryDisplayName} : boolean (default: true)</li>
 * <li>{@link #getShowValueDisplayName showValueDisplayName} : boolean (default: true)</li>
 * <li>{@link #getShowValueOnPieChart showValueOnPieChart} : boolean (default: false)</li>
 * <li>{@link #getShowLegendLabel showLegendLabel} : boolean (default: true)</li>
 * <li>{@link #getShowNullValue showNullValue} : boolean (default: true)</li>
 * <li>{@link #getPosition position} : sap.makit.ValueBubblePosition (default: sap.makit.ValueBubblePosition.Top)</li>
 * <li>{@link #getStyle style} : sap.makit.ValueBubbleStyle (default: sap.makit.ValueBubbleStyle.Top)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The properties of the Chart's Value Bubble.
 * @extends sap.ui.core.Element
 *
 * @author SAP SE
 * @version 1.50.6
 *
 * @constructor
 * @public
 * @since 1.8
 * @deprecated Since version 1.38. 
 * MAKIT charts have been replaced with sap.viz and vizFrame in 1.38. This control will not be supported anymore from 1.38.
 * @name sap.makit.ValueBubble
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Element.extend("sap.makit.ValueBubble", { metadata : {

	deprecated : true,
	library : "sap.makit",
	properties : {

		/**
		 * Whether to display category's text on the Value Bubble
		 */
		"showCategoryText" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Whether to display category's display name on the Value Bubble
		 */
		"showCategoryDisplayName" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Whether to display value's display name on the Value Bubble
		 */
		"showValueDisplayName" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Whether to display value on Pie or Donut chart
		 */
		"showValueOnPieChart" : {type : "boolean", group : "Misc", defaultValue : false},

		/**
		 * Whether to display legend's label (Pie or Donut chart only)
		 */
		"showLegendLabel" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * Whether to render null item on the Value Bubble
		 */
		"showNullValue" : {type : "boolean", group : "Misc", defaultValue : true},

		/**
		 * The position of the Value Bubble (Pie or Donut chart only)
		 */
		"position" : {type : "sap.makit.ValueBubblePosition", group : "Misc", defaultValue : sap.makit.ValueBubblePosition.Top},

		/**
		 * Value Bubble positioning style (All the chart types except: Pie/Donut/HBar chart)
		 */
		"style" : {type : "sap.makit.ValueBubbleStyle", group : "Misc", defaultValue : sap.makit.ValueBubbleStyle.Top},

		/**
		 * Whether the Value Bubble is visible
		 */
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.makit.ValueBubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.ValueBubble.extend
 * @function
 */


/**
 * Getter for property <code>showCategoryText</code>.
 * Whether to display category's text on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCategoryText</code>
 * @public
 * @name sap.makit.ValueBubble#getShowCategoryText
 * @function
 */

/**
 * Setter for property <code>showCategoryText</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCategoryText  new value for property <code>showCategoryText</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowCategoryText
 * @function
 */


/**
 * Getter for property <code>showCategoryDisplayName</code>.
 * Whether to display category's display name on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCategoryDisplayName</code>
 * @public
 * @name sap.makit.ValueBubble#getShowCategoryDisplayName
 * @function
 */

/**
 * Setter for property <code>showCategoryDisplayName</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCategoryDisplayName  new value for property <code>showCategoryDisplayName</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowCategoryDisplayName
 * @function
 */


/**
 * Getter for property <code>showValueDisplayName</code>.
 * Whether to display value's display name on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValueDisplayName</code>
 * @public
 * @name sap.makit.ValueBubble#getShowValueDisplayName
 * @function
 */

/**
 * Setter for property <code>showValueDisplayName</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValueDisplayName  new value for property <code>showValueDisplayName</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowValueDisplayName
 * @function
 */


/**
 * Getter for property <code>showValueOnPieChart</code>.
 * Whether to display value on Pie or Donut chart
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showValueOnPieChart</code>
 * @public
 * @name sap.makit.ValueBubble#getShowValueOnPieChart
 * @function
 */

/**
 * Setter for property <code>showValueOnPieChart</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowValueOnPieChart  new value for property <code>showValueOnPieChart</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowValueOnPieChart
 * @function
 */


/**
 * Getter for property <code>showLegendLabel</code>.
 * Whether to display legend's label (Pie or Donut chart only)
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLegendLabel</code>
 * @public
 * @name sap.makit.ValueBubble#getShowLegendLabel
 * @function
 */

/**
 * Setter for property <code>showLegendLabel</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLegendLabel  new value for property <code>showLegendLabel</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowLegendLabel
 * @function
 */


/**
 * Getter for property <code>showNullValue</code>.
 * Whether to render null item on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNullValue</code>
 * @public
 * @name sap.makit.ValueBubble#getShowNullValue
 * @function
 */

/**
 * Setter for property <code>showNullValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNullValue  new value for property <code>showNullValue</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowNullValue
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * The position of the Value Bubble (Pie or Donut chart only)
 *
 * Default value is <code>Top</code>
 *
 * @return {sap.makit.ValueBubblePosition} the value of property <code>position</code>
 * @public
 * @name sap.makit.ValueBubble#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>Top</code> 
 *
 * @param {sap.makit.ValueBubblePosition} oPosition  new value for property <code>position</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setPosition
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Value Bubble positioning style (All the chart types except: Pie/Donut/HBar chart)
 *
 * Default value is <code>Top</code>
 *
 * @return {sap.makit.ValueBubbleStyle} the value of property <code>style</code>
 * @public
 * @name sap.makit.ValueBubble#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>Top</code> 
 *
 * @param {sap.makit.ValueBubbleStyle} oStyle  new value for property <code>style</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setStyle
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Whether the Value Bubble is visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.makit.ValueBubble#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setVisible
 * @function
 */

// Start of sap/makit/ValueBubble.js
/*!
 * @copyright@
 */

sap.makit.ValueBubble.prototype.toObject = function(){
	var obj = {};
	
	obj.showCategoryText = this.getShowCategoryText();
	obj.showCategoryDisplayName = this.getShowCategoryDisplayName();
	obj.showValueDisplayName = this.getShowValueDisplayName();
	obj.showValueOnPieChart = this.getShowValueOnPieChart();
	obj.showLegendLabel = this.getShowLegendLabel();
	obj.showNullValue  = this.getShowNullValue();
	obj.style = this.getStyle().toLowerCase();
	obj.position = this.getPosition().toLowerCase();
	obj.visible = this.getVisible();
	return obj;
};
}; // end of sap/makit/ValueBubble.js
