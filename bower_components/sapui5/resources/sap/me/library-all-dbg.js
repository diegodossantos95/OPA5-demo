// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.me.library-all');
if ( !jQuery.sap.isDeclared('sap.me.CalendarDate') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.me.CalendarDate'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
sap.ui.define("sap/me/CalendarDate",['jquery.sap.global', 'sap/ui/core/date/UniversalDate'],
	function (jQuery, UniversalDate) {
		"use strict";

		/**
		 * Constructor, create a Date.now date.
		 * @private
		 */
		var theCalendarDate = sap.ui.base.Object.extend("sap.me.CalendarDate", {
			constructor: function () {
				if (arguments.length === 0 || !(arguments[0] instanceof Date || arguments[0] instanceof UniversalDate)) {
					var oDate = new Date();
					this._date = theCalendarDate.createDate(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());
				} else {
					var initDate = arguments[0];
					if (initDate  instanceof UniversalDate) {
						initDate = new Date(initDate.getTime());
					}
					this._date = theCalendarDate.createDate(initDate.getFullYear(), initDate.getMonth(), initDate.getDate());
				}
			}
		});

		/**
		 * Creates a Date, and sets the time to noon.
		 * @param {number} year The year
		 * @param {number} month The month
		 * @param {number} day The day of the month
		 * @private
		 * @returns {UniversalDate} The Date.
		 */
		theCalendarDate.createDate = function (year, month, day) {
			var oDate = new Date(year, month, day, 12, 0, 0);
			return new UniversalDate( oDate.getTime() );
		};

		/**
		 * ^ assert position at start of the string
		 * Non capturing group (?:Mon|Tue|Wed|Thu|Fri|Sat|Sun)
		 *              Alternatives Mon, Tue, Wed, Thu, Fri, Sat, Sun
		 * space
		 * 1st Capturing group (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)
		 *              Alternatives: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
		 * space
		 * 2nd Capturing group (\d\d?)
		 *              \d match a digit [0-9]
		 *              \d? match a digit [0-9], between zero and one time, as many times as possible,
		 *              giving back as needed [greedy]. This is for IE9 support.
		 *              Could make the regexp stronger by forcing days between 01 and 31.
		 * space
		 * 3rd Capturing group (\d\d\d\d)
		 *              \d match a digit [0-9]
		 *              \d match a digit [0-9]
		 *              \d match a digit [0-9]
		 *              \d match a digit [0-9]
		 * $ assert position at end of the string
		 *
		 * i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])
		 */
		theCalendarDate._regExpToDateString = /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d\d?) (\d\d\d\d)$/i;

		/**
		 * Returns the Date object.
		 * Warning, any operation like setMonth, setDate, ... will directly modify this object.
		 *
		 * @private
		 * @return {UniversalDate} The date object.
		 */
		theCalendarDate.prototype.getDateObject = function () {
			return this._date;
		};

		/**
		 * Returns a copy of the Date object
		 *
		 * @private
		 * @return {UniversalDate} The copy of the date object.
		 */
		theCalendarDate.prototype.getCopyDateObject = function () {
			var cloneDate = new UniversalDate(this._date.getTime());
			return cloneDate;
		};

		/**
		 * Returns the 0 based month index of the month contained in the given string.
		 * @private
		 * @param {String} strMonth The 3 first letters of the month, in American English.
		 * This string should not contain unicode characters. It must also match the months 'created' by a call to Date.toDateString.
		 * @return {number} A value between 0 and 11, matching the given month or -1 in case of error.
		 */
		theCalendarDate.getMonthFromString = function (strMonth) {
			var aMonths = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
			strMonth = strMonth.toLowerCase();
			return jQuery.inArray(strMonth, aMonths);
		};

		/**
		 * Parses a Date from a string, assuming it was created using Date.toDateString.
		 * If the function detects that something is not right, then it will just call the Date constructor
		 * and provide the string to it, as is. In that case, there will also be a warning log in the console.
		 *
		 * @param {String} fromToDateString The String to parse to create a Date.
		 * @param {boolean} bThrowOnParseError (Optional) Throws an error if the parsing. Default value is false.
		 * @return {UniversalDate} The Date created from the string.
		 * @throws {Error} If the string provided does not match a toDateString produced string.
		 * @private
		 * @static
		 */
		theCalendarDate.parseFromToDateString = function (fromToDateString, bThrowOnParseError) {
			var parsedDate;
			var aResult = theCalendarDate._regExpToDateString.exec(fromToDateString);
			// all groups must have been found and the matched string must be the given string.
			if (aResult !== null && aResult.length === 4 && aResult[0] === fromToDateString) {
				// var myRe = /^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d\d?) (\d\d\d\d)$/i;
				// var arr = myRe.exec("Mon Apr 1 2041"); // the date might not exist, the day of the week was randomly typed.
				// arr is: ["Mon Apr 1 2041", "Apr", "1", "2041"]
				parsedDate = theCalendarDate.createDate(parseInt(aResult[3], 10), theCalendarDate.getMonthFromString(aResult[1]), parseInt(aResult[2], 10));
			}
			else {
				jQuery.sap.log.warning("The provided string does not match the toDateString format: " + fromToDateString);
				if (typeof bThrowOnParseError === "boolean" && bThrowOnParseError) {
					throw new Error("Unparseable string provided: " + fromToDateString);
				}
				var oDate = new Date(fromToDateString);
				parsedDate = new UniversalDate( oDate.getTime() );
			}

			return parsedDate;
		};

		/**
		 * Modifies the Date object and sets it to the first day of the next month.
		 *
		 * @private
		 * @return {UniversalDate} the first day of the next month.
		 */
		theCalendarDate.prototype.nextMonth = function () {
			this._date = theCalendarDate.getNextMonth(this._date);
			return this._date;
		};

		/**
		 * Returns the Date of the first day of the next month of the given Date.
		 * @param {UniversalDate} oDate The Date for which the date of the first day of the next month must be returned
		 * @private
		 * @static
		 * @return {UniversalDate} the first day of the next month of the given Date, in a new Date object.
		 */
		theCalendarDate.getNextMonth = function (oDate) {
			var nextMonth = new UniversalDate(oDate);
			nextMonth.setMonth(nextMonth.getMonth() + 1, 1);
			nextMonth.setHours(12, 0, 0);
			return nextMonth;
		};

		/**
		 * Modifies the Date object and sets it to the first day of the previous month.
		 * @private
		 * @return {UniversalDate} The first day of the previous month.
		 */
		theCalendarDate.prototype.previousMonth = function () {
			this._date = theCalendarDate.getPreviousMonth(this._date);
			return this._date;
		};

		/**
		 * Returns the first day of the previous month of the given date.
		 * @private
		 * @static
		 * @param {UniversalDate} oDate The Date for which the date of the first day of the previous month must be returned
		 * @return {UniversalDate} the first day of the previous month of the given Date, in a new Date object.
		 */
		theCalendarDate.getPreviousMonth = function (oDate) {
			var previousMonth = new UniversalDate(oDate);
			previousMonth.setMonth(previousMonth.getMonth() - 1, 1);
			previousMonth.setHours(12, 0, 0);
			return previousMonth;
		};

		/**
		 * @private
		 */
		theCalendarDate.prototype.nextWeek = function () {
			this._date.setHours(12);
			this._date.setDate(this._date.getDate() + 7);
			return this._date;
		};

		/**
		 * @private
		 */
		theCalendarDate.prototype.previousWeek = function () {
			this._date.setHours(12);
			this._date.setDate(this._date.getDate() - 7);
			return this._date;
		};

		theCalendarDate.prototype.toDateString = function () {
			var oDate = new Date(this._date.getTime());
			return oDate.toDateString();
		};

		return theCalendarDate;
	}, /* bExport= */ true);

}; // end of sap/me/CalendarDate.js
if ( !jQuery.sap.isDeclared('sap.me.CalendarLegendRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.me.CalendarLegendRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/me/CalendarLegendRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class CalendarLegend renderer. 
	 * @static
	 */
	var CalendarLegendRenderer = {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	CalendarLegendRenderer.render = function(oRm, oControl){ 
		 // write the HTML into the render manager
	 	var labelsArr = oControl.getAggregation("labels");
		if(oControl.getVisible() && labelsArr && labelsArr.length >0){
		var myStyles = "";
		// Style for width
		var sWidth = oControl.getWidth();
		if(sWidth) {
			myStyles += "width:" + sWidth + ";";
		}
		 oRm.write("<div"); // outer container	
		 oRm.writeControlData(oControl);
		 oRm.addClass("sapUIMeLegendOuterContainer");
		 oRm.writeAttribute("style", myStyles);
		 oRm.writeClasses();
		 oRm.write(">");
		 oRm.write("<div");
		 oRm.addClass("sapMeCalendarLegend");
		 oRm.addClass("sapMeCalendarLegend"+oControl.getDesign());
		 oRm.writeClasses();
		 oRm.write(">"); // div element
		 oRm.write("<div  id='" + oControl.getId() + "-arrow'"); //legend header
		 oRm.addClass("sapUIMeLegend");
		 oRm.writeClasses();
		 oRm.write(">");
		 if(oControl.getExpandable()){
			 oRm.renderControl(oControl.getAggregation("icon"));
		 }
		 oRm.write("<div id='" + oControl.getId() + "-LegendMenuContainer'"); //legend menu container
		 oRm.addClass("sapUIMeLegendMenuContainer");
		 oRm.writeClasses();
		 oRm.write(">");
			 oRm.write("<div id='" + oControl.getId() + "-LegendMenu'"); //legend menu container
			 oRm.addClass("sapUIMeLegendMenu");
			 if(!oControl.getExpanded()){
				 oRm.write("style = 'display:none'");
			 }
			 oRm.writeClasses();
			 oRm.write(">");
			 var w = oControl.getLegendWidth();
			for ( var i = 0; i < labelsArr.length; i++) {
					oRm.write("<div "); //legend line
					oRm.addClass("sapUIMeLegendLine");
					oRm.writeClasses();
					/*
					oRm.addStyle("min-width",w);
					oRm.writeStyles();
					*/	
					oRm.write(">");
					oRm.write("<div "); //legend color
					oRm.addClass("sapUIMeLegendColor");
					oRm.addClass(oControl._getColorBoxStyle(labelsArr[i].getId()));
					oRm.writeClasses();	
					oRm.write("></div>"); // legend color
					oRm.renderControl(labelsArr[i]);
					oRm.write("</div>");//legend line
			}
			oRm.write("</div>");//legend menu 
			oRm.write("</div>");//legend menu container
		 oRm.write("</div>");//legend header
		 oRm.write("</div>");
		 oRm.write("</div>");// outer container
	
		}
	};
	

	return CalendarLegendRenderer;

}, /* bExport= */ true);

}; // end of sap/me/CalendarLegendRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.CalendarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.me.CalendarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LocaleData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
sap.ui.define("sap/me/CalendarRenderer",['jquery.sap.global', './CalendarDate', 'sap/ui/core/LocaleData', 'sap/ui/core/format/DateFormat', 'sap/ui/core/date/UniversalDate'],
	function(jQuery, CalendarDate, LocaleData, DateFormat, UniversalDate) {
	"use strict";



	/**
	 * @class Calendar renderer.
	 * @static
	 */
	var CalendarRenderer = {
	};

	/**
	 *
	 * @param {object} oRm
	 * @param {sap.m.Calendar} oControl
	 * @private
	 */
	CalendarRenderer.render = function (oRm, oControl) {
		if (!oControl.getVisible()) {
			return;
		}

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapMeCalendar");
		var sClass = "sapMeCalendar" + oControl.getDesign();
		oRm.addClass(sClass);
		oRm.writeClasses();
		var w = oControl.getWidth();
		if (w != undefined) {
			oRm.addStyle("width", w);
			oRm.writeStyles();
		}
		oRm.write(">");

		oRm.renderControl(oControl._oPrevBtn);
		oRm.renderControl(oControl._oNextBtn);

		var bSingleRow = oControl.getSingleRow();

		var iMonths = bSingleRow ? 1 : oControl.getMonthsToDisplay();
		var oNow = new CalendarDate();
		var sNow = oNow.toDateString(); // so it is same time as other dates
		var i;
		if (iMonths === 1) {
			this._renderMonth(oRm, oControl, oControl._oInternalDate.getDateObject(), sNow);
		}else {
			var currentDate = oControl._oInternalDate.getCopyDateObject();
			var iMonthToGoBack = Math.floor(iMonths / 2);
			for (i = 0; i < iMonthToGoBack; i++) { // we go first back in time
				currentDate = CalendarDate.getPreviousMonth(currentDate);
			}
			for (i = 0; i < iMonths; i++) {
				this._renderMonth(oRm, oControl, currentDate, sNow);
				currentDate = CalendarDate.getNextMonth(currentDate);
			}
		}

		oRm.write("</div>"); // sapMeCalendar DIV
	};

	/**
	 *
	 * @param {UniversalDate} currentDate
	 * @param {sap.me.Calendar} oControl The Calendar control
	 * @param {integer} iTotalDays The total number of days displayed.
	 * @returns {string} A formatted string to display the month above the calendar.
	 * @private
	 */
	CalendarRenderer._getMonthTitle = function (oCurrentDate, bSingleRow, iTotalDays) {
		var oFormatOption = {
			format: "yMMM"
		};

		var oFormat;
		var oTempDate;

		if (bSingleRow) {
			oTempDate = new UniversalDate(oCurrentDate.getTime());
			oTempDate.setDate(oTempDate.getDate() + iTotalDays - 1);

			// change the displayed date to be an interval
			oFormatOption.interval = true;
		}

		oFormat = DateFormat.getDateInstance(oFormatOption);

		return oFormatOption.interval ? oFormat.format([oCurrentDate, oTempDate]) : oFormat.format(oCurrentDate);
	};

	/**
	 *
	 * @param {object} oRm The render manager.
	 * @param {sap.me.Calendar} oControl The sap.me calendar.
	 * @param {UniversalDate} oMonthDate This date must be cloned! The month to render.
	 * @param {string} sDateNow Today's date (as a toDateString string) so that
	 * it is shown with a border around it if it is in the month being rendered.
	 * @private
	 */
	CalendarRenderer._renderMonth = function (oRm, oControl, oMonthDate, sDateNow) {
		var bSingleRow = oControl.getSingleRow();
		var iFirstDayOffset = oControl.getFirstDayOffset();
		var aWeekDays = oControl.getDays();
		var iWeekDays = aWeekDays.length;
		var iWeeksPerRow = oControl.getWeeksPerRow();
		var iDaysInRow = iWeeksPerRow * iWeekDays;
		var iDayWidth = (100 / iDaysInRow);
		var iDayHeight = oControl.getDayHeight();
		var iMonthWidth = (100 / (bSingleRow ? 1 : oControl.getMonthsPerRow()));

		var oTmpDate = new Date(oMonthDate.getTime());
		var currentDate = CalendarDate.createDate(oTmpDate.getFullYear(), oTmpDate.getMonth(), oTmpDate.getDate());
		// save the current day in the month
		var iCurrentDate = currentDate.getDate();
		// save the current week day of the date
		var iCurrentDay = currentDate.getDay();

		// go to first day of month
		currentDate.setDate(1);
		var iMonthFirstDay = currentDate.getDay();
		if (iMonthFirstDay < iFirstDayOffset) {
			iMonthFirstDay += 7;
		}
		var iCurrentMonth = currentDate.getMonth();
		var dateForNbOfDaysInThisMonth = new UniversalDate(currentDate);
		dateForNbOfDaysInThisMonth.setMonth(iCurrentMonth + 1, 0);
		var nbOfDaysInThisMonth = dateForNbOfDaysInThisMonth.getDate();

		var iDaysToGoBack = bSingleRow ? iCurrentDay + 1 - iFirstDayOffset : iCurrentDate + iMonthFirstDay - iFirstDayOffset;

		var nbOfRows = Math.ceil((nbOfDaysInThisMonth + iDaysToGoBack - iCurrentDate) / 7);
		var iTotalDays = bSingleRow ? iDaysInRow : (nbOfRows * 7);

		// 002075129500003097872016
		// For single row calendars, we want to be able to see all the month names displayed so we change
		// the current date before asking for the month title. For regular (non single row) calendars, we don't
		// want to change a thing, which is why the date is changed as usual, after the getMonthTitle call.
		if (bSingleRow) {
			currentDate = oControl._getCalendarFirstDate();
		}

		// default title (in en_US, for instance): MMM y
		var sMonthTitle = this._getMonthTitle(currentDate, bSingleRow, iTotalDays);

		if (!bSingleRow) {
			currentDate.setDate(iCurrentDate - iDaysToGoBack + 1);
		}

		oRm.write('<div'); // month div
		oRm.addClass("sapMeCalendarMonth");
		if (!bSingleRow) {
			oRm.addClass("sapMeCalendarMonthNotSingle");
		}
		oRm.writeClasses();
		oRm.addStyle("width", iMonthWidth + "%");
		oRm.writeStyles();
		oRm.write(">");

		oRm.write('<div'); // monthname div
		oRm.addClass("sapMeCalendarMonthName");
		oRm.writeClasses();
		if (oControl.getHideMonthTitles()) {
			oRm.addStyle("visibility", "hidden");
			oRm.writeStyles();
		}
		oRm.write(">");
		oRm.writeEscaped(sMonthTitle);
		oRm.write("</div>"); // monthname


		oRm.write('<div'); // MonthDayNames div
		oRm.addClass("sapMeCalendarMonthDayNames");
		oRm.writeClasses();
		oRm.write(">");

		var i;
		for (i = 0; i < iDaysInRow; i++) {
			var sContent = aWeekDays[(i + iFirstDayOffset) % iWeekDays];
			this._renderDay(oRm, oControl, null, sContent, iDayWidth);
		}

		oRm.write('</div>'); // MonthDayNames div

		oRm.write('<div'); // MonthDays div
		oRm.addClass("sapMeCalendarMonthDays");
		oRm.writeClasses();
		oRm.write(">");

		for (i = 0; i < iTotalDays; i++) { // max days of a month
			var iMonth = currentDate.getMonth();
			var iDayInWeek = currentDate.getDay();
			iCurrentDay = currentDate.getDate();

			var bNotThisMonth = iMonth !== iCurrentMonth;
			oTmpDate = new Date(currentDate.getTime());
			var sId = oTmpDate.toDateString();
			var bIsToday = sId == sDateNow;
			this._renderDay(oRm, oControl, sId, iCurrentDay + "", iDayWidth, iDayHeight, iDayInWeek, bNotThisMonth, bIsToday);

			currentDate.setDate(currentDate.getDate() + 1);
		}

		oRm.write('</div>'); // MonthDays div

		oRm.write('</div>'); // month div
	};

	/**
	 *
	 * @param {object} oRm
	 * @param {object} oControl
	 * @param {string} sId
	 * @param {string} sContent
	 * @param {number} iDayWidth
	 * @param {number} iDayHeight
	 * @param {number} iDayInWeek
	 * @param {boolean} bNotThisMonth
	 * @param {boolean} bIsToday
	 * @private
	 */
	CalendarRenderer._renderDay = function (oRm, oControl, sId, sContent, iDayWidth, iDayHeight, iDayInWeek, bNotThisMonth, bIsToday) {
		oRm.write("<div");
		oRm.addClass("sapMeCalendarMonthDay");

		if (bIsToday) {
			oRm.addClass("sapMeCalendarDayNow");
		}
		if (bNotThisMonth && !oControl.getSingleRow()) {
			oRm.addClass("sapMeCalendarDayNotInCurrentMonth");
		}
		if (typeof iDayInWeek === "number") {
			oRm.addClass("sapMeCalendarWeekDay" + iDayInWeek);
			if (oControl.isWeekend(iDayInWeek)) {
				oRm.addClass("sapMeCalendarWeekendDay");
			}
		}
		oRm.writeClasses();
		oRm.addStyle("width", iDayWidth + "%");
		if (iDayHeight) {
			oRm.addStyle("height", iDayHeight + "px");
		}
		oRm.writeStyles();
		if ( sId != null ){
			var sIdWithDashes = sId.replace(/\s/g,"-");
			oRm.writeAttribute('id', oControl.getId() + "-" + sIdWithDashes);
		}
		oRm.write(">");
		oRm.write('<span>');
		oRm.writeEscaped(sContent);
		oRm.write("</span>");
		if ( sId != null ){
			oRm.write('<input type="hidden" value="' + sId + '"></input>');
		}
		oRm.write("</div>");
	};


	return CalendarRenderer;

}, /* bExport= */ true);

}; // end of sap/me/CalendarRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.me.OverlapCalendarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/me/OverlapCalendarRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class OverlapCalendar renderer.
	 * @static
	 */
	var OverlapCalendarRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render
	 *            output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be
	 *            rendered
	 */
	OverlapCalendarRenderer.render = function(oRm, oControl) {
		if( oControl.getVisible()==false){
			return;
		}
		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapMeOverlapCalendar");  
		oRm.writeClasses();
		var w = oControl.getWidth();
		if( w != undefined ){
			oRm.addStyle("width", w);
			oRm.writeStyles();
		}
		oRm.write(">");
		oRm.write("<div");
		oRm.addClass("sapMeOverlapCalendarCalendar");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getCalendar());
		oRm.write("</div>");
		oRm.write("<div");
		oRm.addClass("sapMeOverlapCalendarOverlapIndicator");
		oRm.writeClasses();
		oRm.write(">");
		var iWeekDays = 7;// aWeekDays.length;
		var iWeeksPerRow = oControl.getCalendar().getWeeksPerRow();
		var iDaysInRow = iWeeksPerRow * iWeekDays;
		var date = new Date(oControl.getStartDate());
		var iDayWidth = (100 / iDaysInRow);
		for ( var i = 0; i < iDaysInRow; i++) {
			oRm.write("<div");
			oRm.writeAttribute("id", oControl._provideId("overlap", i));
			oRm.addClass("sapMeOverlapCalendarOverlap");
			oRm.writeClasses();
			oRm.addStyle("width", iDayWidth + "%");
			oRm.writeStyles();
			oRm.write("></div>");
			date.setDate(date.getDate()+1);
		}
		oRm.write("</div>");
		this._renderGrid(oRm, oControl);
		oRm.write("</div>");
	};

	OverlapCalendarRenderer._renderGrid = function(oRm, oControl) {
		// var aWeekDays = oControl._WEEKDAYS;
		var iWeekDays = 7;// aWeekDays.length;
		var iWeeksPerRow = oControl.getCalendar().getWeeksPerRow();
		var iDaysInRow = iWeeksPerRow * iWeekDays;

		var rows =  oControl._aRows;
		if( rows ) {
			var iNumberOfRows = rows.length;

			oRm.write('<div'); // month div
			oRm.addClass("sapMeOverlapCalendarGrid");
			oRm.writeClasses();
			oRm.addStyle("width", "100%");
			oRm.writeStyles();
			oRm.write(">");
			for ( var i = 0; i < iNumberOfRows; i++) {
				if( rows[i] != undefined ) {
					this._renderRow(oRm, oControl, iDaysInRow, i, new Date(oControl.getStartDate()));
				}
			}
			oRm.write('</div>');
		}
	};

	OverlapCalendarRenderer._renderRow = function(oRm, oControl, iDaysInRow, rowIndex, currentDate) {

		var iDayWidth = (100 / iDaysInRow);	
		var iDayHeight = oControl.getCalendar().getDayHeight();
		oRm.write('<div'); // MonthDays div
		oRm.writeAttribute("id", oControl._provideId("row", rowIndex));
		oRm.addClass("sapMeOverlapCalendarRow");
		oRm.writeClasses();
		oRm.addStyle("height", iDayHeight + "px");
		oRm.writeStyles();
		oRm.write(">");
		oRm.write('<div'); // Row labels div
		oRm.writeAttribute("id", oControl._provideId("row", rowIndex, "lbls"));
		oRm.addClass("sapMeOverlapCalendarRowLabels");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl._getLabelForRow(rowIndex));
		oRm.write('</div>');
		for ( var i = 0; i < iDaysInRow; i++) {
			this._renderDay(oRm, oControl, iDayWidth, iDayHeight, rowIndex, i);

			currentDate.setDate(currentDate.getDate() + 1);
		}
		oRm.write('</div>');
	};

	OverlapCalendarRenderer._renderDay = function(oRm, oControl, iDayWidth, iDayHeight, iRowIndex, iDayIndex) {
		oRm.write("<div");
		oRm.writeAttribute("id", oControl._provideId(iRowIndex, iDayIndex));
		oRm.addClass("sapMeOverlapCalendarDay");
		oRm.writeClasses();
		oRm.addStyle("width", iDayWidth + "%");
		if (iDayHeight) {
			oRm.addStyle("height", iDayHeight + "px");
		}
		oRm.writeStyles();
		oRm.write("></div>");
	};


	return OverlapCalendarRenderer;

}, /* bExport= */ true);

}; // end of sap/me/OverlapCalendarRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides default renderer for control sap.ui.commons.ProgressIndicator
jQuery.sap.declare('sap.me.ProgressIndicatorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/me/ProgressIndicatorRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class ProgressIndicator renderer.
	 * @static
	 */
	var ProgressIndicatorRenderer = {
	};
	
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
	 *
	 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
	 */
	ProgressIndicatorRenderer.render = function (oRenderManager, oProgressIndicator) {
		/* For backwards compatibility we can't remove the deprecated sap.me.ProgressIndicator.
		 * However, if the compatibility version is 1.16 or higher then the sap.me.ProgressIndicator
		 * should not be used.
		*/
		var useProgressIndicatorCompatVersion = new jQuery.sap.Version(sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMeProgressIndicator"));
		if(useProgressIndicatorCompatVersion.compareTo("1.16") >= 0) {
			jQuery.sap.log.error("The sap.me.ProgressIndicator control is not supported as of SAPUI5 version 1.16. Please us sap.m.ProgressIndicator instead.");
			return;
		}
	
		// .convenience variable
		var rm = oRenderManager;
		var widthControl = oProgressIndicator.getWidth();
		var widthBar = oProgressIndicator.getPercentValue();
		var widthBorder;
		var positionEnd;
	
		// return immediately if control is invisible
		if (!oProgressIndicator.getVisible()) {
			return;
		}
	
		if (widthBar > 100) {
			widthBorder = (10000 / widthBar) + '%';
		}
		else {
			widthBorder = '100%';
		}
	
		// write the HTML into the render manager
		rm.write('<DIV');
		rm.writeControlData(oProgressIndicator);
	
		rm.writeAttribute('tabIndex', '0');
	
	
		if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
			rm.writeAttribute('style', 'width:' + widthControl + ';');
		}
	
		if (oProgressIndicator.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue() + '- ' + oProgressIndicator.getTooltip_AsString());
		}
		else {
			rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue());
		}
	
		rm.addClass('sapUIMeProgInd');
		rm.writeClasses();
	
		rm.write('>');
	
		rm.write('<DIV');
		rm.writeAttribute('id', oProgressIndicator.getId() + '-box');
	
		if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
			rm.writeAttribute('style', 'width:' + widthBorder + ';');
		}
	
		rm.addClass('sapUIMeProgIndBorder');
		rm.writeClasses();
	
		rm.write('>');
	
		rm.write('<DIV');
	
		rm.writeAttribute('id', oProgressIndicator.getId() + '-bar');
		rm.writeAttribute('onselectstart', "return false");
		rm.writeAttribute('style', 'width:' + oProgressIndicator.getPercentValue() + '%;');
	
		var sBarColor = oProgressIndicator.getBarColor();
		rm.addClass("sapUIMeProgIndBar");
		if (sBarColor != "") {
			rm.addClass("sapUIMeProgIndBar" + jQuery.sap.encodeHTML(sBarColor));
		}
	
		rm.writeClasses();
	
		rm.write('>');
	
		rm.write('<DIV');
		rm.writeAttribute('id', oProgressIndicator.getId() + '-end');
	
		// Do not mind about color for the end of the bar
		if (widthBar > 100) {
			rm.addClass('sapUIMeProgIndEnd');
		}
		else {
			rm.addClass('sapUIMeProgIndEndHidden');
		}
	
		rm.writeClasses();
		rm.writeAttribute('style', 'position: relative; left:' + widthBorder);
	
		rm.write('>');
		rm.write('</DIV>');
	
		rm.write('<SPAN');
	
		rm.addClass('sapUIMeProgIndFont');
		rm.writeClasses();
	
		rm.write('>');
	
		if (oProgressIndicator.getShowValue() && oProgressIndicator.getShowValue() == true) {
			if (oProgressIndicator.getDisplayValue() && oProgressIndicator.getDisplayValue() != '') {
				rm.writeEscaped(oProgressIndicator.getDisplayValue());
			}
		}
	
		rm.write('</SPAN>');
		rm.write('</DIV>');
		rm.write('</DIV>');
		rm.write('</DIV>');
	};

	return ProgressIndicatorRenderer;

}, /* bExport= */ true);

}; // end of sap/me/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.TabContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.me.TabContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/me/TabContainerRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * @class TabContainer renderer.
	 * @static
	 */
	var TabContainerRenderer = {};
	
	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render
	 *            output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be
	 *            rendered
	 */
	TabContainerRenderer.render = function(oRm, oControl) {
		/* For backwards compatibility we can't remove the deprecated TabContainer.
		 * However, if the compatibility version is 1.16 or higher then the TabContainer
		 * should not be used.
		*/
		var useTabContainerCompatVersion = new jQuery.sap.Version(sap.ui.getCore().getConfiguration().getCompatibilityVersion("sapMeTabContainer"));
		if(useTabContainerCompatVersion.compareTo("1.16") >= 0) {
			jQuery.sap.log.error("The sap.me.TabContainer control is not supported as of SAPUI5 version 1.16. Please us sap.m.IconTabBar instead.");
			return;
		}
	
		// Return immediately if control is invisible
		if (!oControl.getVisible()) {
			return;
		}
		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUIMeTabContainer");
		oRm.writeClasses();
		oRm.writeStyles();
		oRm.write(">");
		// Buttons
		oRm.write("<div ");
		oRm.addClass("sapUIMeTabContainerButtons");
		oRm.writeClasses();
		oRm.write(">");
		var btn = oControl.getAggregation("tabs");
		var iIndex = oControl.getSelectedTab();
		var badges = oControl.getAggregation("badges");
		if (btn) {
			if (jQuery.isArray(btn)) {
				for ( var i = 0; i < btn.length; i++) {
					var sTabName = btn[i].getCustomData();
					if (oControl._getContentForBtn(btn[i].getId())) { // render button just for tab with content
						oRm.write("<div ");
						oRm.addClass("sapUIMeTabContainerTab");
						if (i === iIndex) {
							oRm.addClass("sapUIMeTabContainerTabSelected");
						}
						oRm.writeClasses();
						oRm.write(">");
						if( badges && badges[i].getText() != ""){
							oRm.renderControl(badges[i]);
						}
						oRm.renderControl(btn[i]);
						oRm.write("</div>");
					}
				}
			} else if (btn) {
				oRm.write("<div ");
				oRm.addClass("sapUIMeTabContainerTab");
				oRm.writeClasses();
				oRm.write(">");
				if( badges && badges[0].getText() != ""){
					oRm.renderControl(badges[0]);
				}
				oRm.renderControl(btn);
				oRm.write("</div>");
			}
		}
		oRm.write("</div>");
		// Content
		var oContent = oControl._getContentForBtn(btn[iIndex].getId());
		if (oContent != undefined) {
			oRm.write("<div ");
			oRm.addClass("sapUIMeTabContainerContent");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("<div id='" + oControl.getId() + "-arrow'");
			oRm.addClass("sapUIMeTabContainerContentArrow");
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</div>");
			oRm.write("<div id='" + oControl.getId() + "-container'");
			oRm.write(" style='height:auto'");
			oRm.addClass("sapUIMeTabContainerTabContent");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oContent);
			oRm.write("</div>");
			oRm.write("</div>");
		}
		oRm.write("</div>");
	};
	

	return TabContainerRenderer;

}, /* bExport= */ true);

}; // end of sap/me/TabContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.me.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.me.
 */
jQuery.sap.declare('sap.me.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/me/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library'],
	function(jQuery, Core, library1) {
	"use strict";

	/**
	 * SAPUI5 library with controls specialized for mobile devices (extension).
	 *
	 * @namespace
	 * @name sap.me
	 * @public
	 */


	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.me",
		version: "1.50.6",
		dependencies : ["sap.ui.core"],
		types: [
			"sap.me.CalendarDesign",
			"sap.me.CalendarEventType",
			"sap.me.CalendarSelectionMode"
		],
		interfaces: [],
		controls: [
			"sap.me.Calendar",
			"sap.me.CalendarLegend",
			"sap.me.OverlapCalendar",
			"sap.me.ProgressIndicator",
			"sap.me.TabContainer"
		],
		elements: [
			"sap.me.OverlapCalendarEvent"
		]
	});
	
	/**
	 * Type of Design for the Calendar
	 *
	 * @enum {string}
	 * @public
	 * @experimental Since version 1.12. 
	 * API is not yet finished and might change completely
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.me.CalendarDesign = {
	
		/**
		 * Colors match calendar design for Action
		 * @public
		 */
		Action : "Action",
	
		/**
		 * Colors match calendar design for Approval
		 * @public
		 */
		Approval : "Approval"
	
	};

	/**
	 * Type code for a calendar event
	 *
	 * @enum {string}
	 * @public
	 * @experimental Since version 1.12. 
	 * API is not yet finished and might change completely
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.me.CalendarEventType = {
	
		/**
		 * Type 00 (non-working day (e.g. weekend))
		 * @public
		 */
		Type00 : "Type00",
	
		/**
		 * Type 01 (nonattendance / submitted day)
		 * @public
		 */
		Type01 : "Type01",
	
		/**
		 * Type 04 (open request / manager action needed)
		 * @public
		 */
		Type04 : "Type04",
	
		/**
		 * Type 06 (public holiday)
		 * @public
		 */
		Type06 : "Type06",
	
		/**
		 * Type 07 (deletion requested / your action needed)
		 * @public
		 */
		Type07 : "Type07",
	
		/**
		 * Type 10 (workday)
		 * @public
		 */
		Type10 : "Type10"
	
	};

	/**
	 * Selection Mode for the Calendar
	 *
	 * @enum {string}
	 * @public
	 * @experimental Since version 1.12. 
	 * API is not yet finished and might change completely
	 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
	 */
	sap.me.CalendarSelectionMode = {
	
		/**
		 * Can only select one date
		 * @public
		 */
		SINGLE : "SINGLE",
	
		/**
		 * Can select multiple dates and ranges
		 * @public
		 */
		MULTIPLE : "MULTIPLE",
	
		/**
		 * Can select a range of dates
		 * @public
		 */
		RANGE : "RANGE"
	
	};

	return sap.me;

}, /* bExport= */ true);

}; // end of sap/me/library.js
if ( !jQuery.sap.isDeclared('sap.me.Calendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.Calendar.
jQuery.sap.declare('sap.me.Calendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LocaleData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
sap.ui.define("sap/me/Calendar",['jquery.sap.global', './CalendarDate', './library', 'sap/ui/core/Control', 'sap/ui/core/LocaleData', 'sap/ui/core/IconPool', 'sap/ui/core/date/UniversalDate'],
	function(jQuery, CalendarDate, library, Control, LocaleData, IconPool, UniversalDate) {
	"use strict";



	/**
	 * Constructor for a new Calendar.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * This is the Calendar control
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.26.0.
	 * This control was experimental since 1.12. Please use the sap.ui.unified.Calendar instead!
	 * @alias sap.me.Calendar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var Calendar = Control.extend("sap.me.Calendar", /** @lends sap.me.Calendar.prototype */ { metadata : {

		library : "sap.me",
		properties : {

			/**
			 * visibility of the control
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true},

			/**
			 * hides the area of navigation controls
			 */
			hideNavControls : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * hides the area of month titles
			 */
			hideMonthTitles : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * months to display in a row. This sets the width of the whole control in order to contain the desired number of months per row
			 */
			monthsPerRow : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * the width of a day
			 */
			dayWidth : {type : "int", group : "Misc", defaultValue : 45},

			/**
			 * the height of a day
			 */
			dayHeight : {type : "int", group : "Misc", defaultValue : 50},

			/**
			 * weeks to display in a row
			 */
			weeksPerRow : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * boolean that sets the view to week mode or month mode
			 */
			singleRow : {type : "boolean", group : "Misc", defaultValue : null},

			/**
			 * number of months in a row.
			 */
			monthsToDisplay : {type : "int", group : "Misc", defaultValue : 1},

			/**
			 * the center date where the month/week will be built around
			 */
			currentDate : {type : "string", group : "Misc", defaultValue : null},

			/**
			 * to enable multiselection feature
			 */
			enableMultiselection : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * to offset the first day of the week (0 = sunday)
			 */
			firstDayOffset : {type : "int", group : "Misc", defaultValue : 0},

			/**
			 * Array of weekDays (as integers where 0=Sunday, 1=Monday etc) to be disabled. Interaction will be disabled for these week days.
			 */
			disabledWeekDays : {type : "any", group : "Misc", defaultValue : null},

			/**
			 * Array of specific dates (strings or Date objects) that will be disabled/non interactive
			 */
			disabledDates : {type : "any", group : "Misc", defaultValue : null},

			/**
			 * When enabled, swipe gestures will navigate and not select
			 */
			swipeToNavigate : {type : "boolean", group : "Misc", defaultValue : false},

			/**
			 * Indicates the design of the calendar (mainly colors)
			 */
			design : {type : "sap.me.CalendarDesign", group : "Appearance", defaultValue : sap.me.CalendarDesign.Approval},

			/**
			 * Indicates the design of the calendar (mainly colors)
			 */
			selectionMode : {type : "sap.me.CalendarSelectionMode", group : "Behavior", defaultValue : sap.me.CalendarSelectionMode.SINGLE},

			/**
			 * The width of the calendar
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},

			/**
			 * Array of day names, default value is sap.m.getLocaleData().getDays("abbreviated")
			 * Check sap.ui.core.LocaleData documentation for more info.
			 */
			days : {type : "any", group : "Appearance", defaultValue : null},

			/**
			 * Array of month names, default value is sap.m.getLocaleData().getMonths("abbreviated")
			 * Check sap.ui.core.LocaleData documentation for more info.
			 */
			months : {type : "any", group : "Appearance", defaultValue : null}
		},
		events : {

			/**
			 * event fired when a date is tapped
			 */
			tapOnDate : {
				parameters : {

					/**
					 * date tapped
					 */
					date : {type : "string"},

					/**
					 * if day was selected
					 */
					didSelect : {type : "boolean"}
				}
			},

			/**
			 * event fired when tap to next or previous button and currentDate is updated
			 */
			changeCurrentDate : {
				parameters : {

					/**
					 * new date
					 */
					currentDate : {type : "string"}
				}
			},

			/**
			 * when the range of selected dates changes
			 */
			changeRange : {
				parameters : {

					/**
					 * from date
					 */
					fromDate : {type : "string"},

					/**
					 * to date
					 */
					toDate : {type : "string"}
				}
			}
		}
	}});


	/**
	 * @private
	 */
	Calendar.prototype.init = function () {
		// by default set internalDate and currentDate to now
		this.__setCurrentDate((new CalendarDate().toDateString()), true);

		// TODO: should use _oLocaleData below.
		var oi18n = sap.m.getLocaleData();
		this.setDays(oi18n.getDays("abbreviated"));
		this.setMonths(oi18n.getMonths("abbreviated"));

		var oPrevBtn = new sap.ui.core.Icon({
			src: IconPool.getIconURI("navigation-left-arrow")
		});
		oPrevBtn.addStyleClass("sapMeCalendarPrevious");
		oPrevBtn.attachPress(null, this._gotoPrevious, this);
		oPrevBtn.setParent(this);
		this._oPrevBtn = oPrevBtn;

		var oNextBtn = new sap.ui.core.Icon({
			src: IconPool.getIconURI("navigation-right-arrow")
		});
		oNextBtn.addStyleClass("sapMeCalendarNext");
		oNextBtn.attachPress(null, this._gotoNext, this);
		oNextBtn.setParent(this);
		this._oNextBtn = oNextBtn;

		this._oDatesClasses = {};

		this._$interactiveDates = null;

		this._oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
		this._oLocaleData = LocaleData.getInstance(this._oLocale);

		this._bRtl  = sap.ui.getCore().getConfiguration().getRTL();
	};

	Calendar.prototype.exit = function () {
		this._oPrevBtn.destroy();
		delete this._oPrevBtn;
		this._oNextBtn.destroy();
		delete this._oNextBtn;

		delete this._oDatesClasses;
		delete this._$interactiveDates;

		delete this._$fromDate;
		delete this._$toDate;
	};

	Calendar.prototype.onBeforeRendering = function () {
		delete this._$interactiveDates;
	};

	Calendar.prototype.onAfterRendering = function () {
		var $this = this.$();
		var $dates = null;
		var aDisabledWeekDays = this.getDisabledWeekDays() || [];
		var aClassesToDisable = [];
		var i;
		var sDate;
		for (i = 0; i < aDisabledWeekDays.length; i++) {
			aClassesToDisable.push(".sapMeCalendarWeekDay" + aDisabledWeekDays[i]);
		}

		var bIncludeNotInCurrentMonth = this.getSingleRow() || this.getMonthsToDisplay() === 1;
		if (!bIncludeNotInCurrentMonth) {
			aClassesToDisable.push(".sapMeCalendarDayNotInCurrentMonth");
		}
		if (aClassesToDisable.length) {
			var sToExclude = aClassesToDisable.join(", ");
			// remove pointer events for non-interactive dates
			$this.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays")
				.children(sToExclude).css({
					"pointer-events": "none"
				});
			$dates = $this.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays > .sapMeCalendarMonthDay:not(" + sToExclude + ")");
		} else {
			$dates = $this.find(".sapMeCalendarMonth > div.sapMeCalendarMonthDays > .sapMeCalendarMonthDay");
		}
		var aDatesToDisable = this.getDisabledDates() || [];
		for (i = 0; i < aDatesToDisable.length; i++) {
			sDate = aDatesToDisable[i];
			$dates.children("input[value='" + sDate + "']") // get the right input
				.parent() // get the date
				.css({
					"pointer-events": "none"
				}); // disable
		}
		for (sDate in this._oDatesClasses) {
			var sStates = this._oDatesClasses[sDate].join(" ");
			$dates.children("input[value='" + sDate + "']") // get the right input
				.parent() // get the date
				.addClass(sStates); // set selection
		}
		// i save this array so it will be more performant instead of doing
		// selectors.
		this._$interactiveDates = $dates;

		// hiding nav controls
		var bHide = this.getHideNavControls();
		this._oPrevBtn.$().css({
			display: bHide ? "none" : ""
		});
		this._oNextBtn.$().css({
			display: bHide ? "none" : ""
		});
	};

	Calendar.prototype.setEnableMultiselection = function (bEnable) {
		// no rerender needed
		return this.setProperty("selectionMode", bEnable ? sap.me.CalendarSelectionMode.MULTIPLE : sap.me.CalendarSelectionMode.SINGLE, true);
	};

	Calendar.prototype.getEnableMultiselection = function () {
		return this.getProperty("selectionMode") == sap.me.CalendarSelectionMode.MULTIPLE;
	};

	Calendar.prototype.setHideNavControls = function (bHide) {
		if (this.getDomRef()) {
			this._oPrevBtn.$().css({
				// Should use visibility-hidden instead, to ensure the controls maintain their ground
				// and don't get overlapped by all the other controls. Unused in the renderer anyway...
				display: bHide ? "none" : ""
			});
			this._oNextBtn.$().css({
				// should use visibility-hidden instead, to ensure the controls maintain their spaces
				// and don't get overlapped by all the other controls. Unused in the renderer anyway...
				display: bHide ? "none" : ""
			});
		}
		return this.setProperty("hideNavControls", bHide, true); // no rerender
		// needed
	};

	Calendar.prototype.setHideMonthTitles = function (bHide) {
		if (this.getDomRef()) {
			this.$().find(".sapMeCalendarMonthName").css({
				visibility: bHide ? "hidden" : ""
			});
		}
		return this.setProperty("hideMonthTitles", bHide, true); // no rerender
		// needed
	};

	Calendar.prototype.setFirstDayOffset = function (iOffset) {
		iOffset = iOffset % this.getDays().length;
		return this.setProperty("firstDayOffset", iOffset);
	};

	Calendar.prototype.setWeeksPerRow = function (iWeeks) {
		iWeeks = iWeeks % 5;
		return this.setProperty("weeksPerRow", iWeeks);
	};

	Calendar.prototype.setDisabledWeekDays = function (aWeekDays) {
		aWeekDays = aWeekDays || [];
		return this.setProperty("disabledWeekDays", aWeekDays);
	};

	Calendar.prototype.setDisabledDates = function (aDates) {
		aDates = aDates || [];
		var i;
		for (i = 0; i < aDates.length; i++) {
			var oDate = aDates[i];
			if (typeof oDate === "string") {
				// this will change the type of oDate from String to Date.
				oDate = CalendarDate.parseFromToDateString(oDate);
			}
			var sDate = oDate.toDateString();
			aDates[i] = sDate;
		}
		return this.setProperty("disabledDates", aDates);
	};

	// ** GESTURE HANDLERS ** //

	Calendar.prototype.ontouchstart = function (oEvent) {
		if (!this.getSwipeToNavigate()) {
			this._gestureStart(oEvent);
		}
	};

	Calendar.prototype._gestureStart = function (oEvent) {
		this._$fromDate = this.getEnableMultiselection() ? this
				._getDateDomRef(oEvent.target) : null;
	};

	Calendar.prototype.ontouchmove = function (oEvent) {
		if (!this.getSwipeToNavigate()) {
			this._gestureMove(oEvent);
		}
	};

	Calendar.prototype._gestureMove = function (oEvent) {
		if (this._$fromDate) {
			if (!this._$toDate) { // it means it is the first time it moves
				this._$fromDate.addClass("sapMeCalendarHighlight");
				this._$toDate = this._$fromDate;
			}
			oEvent.stopPropagation();
			oEvent.preventDefault();
			var oDomRef = oEvent.target;
			if (oEvent.touches.length) {
				var oTouch = oEvent.touches[0];
				oDomRef = document.elementFromPoint(oTouch.clientX, oTouch.clientY);
			}
			var $toDate = this._getDateDomRef(oDomRef);
			if ($toDate && $toDate != this._$toDate) {
				this._$toDate.removeClass("sapMeCalendarHighlight");
				this._$fromDate.addClass("sapMeCalendarHighlight"); // because it
				// could have
				// been = toDate
				$toDate.addClass("sapMeCalendarHighlight");
				this._$toDate = $toDate;
			}
		}
	};

	Calendar.prototype.ontouchend = function (oEvent) {
		if (!this.getSwipeToNavigate()) {
			this._gestureEnd(oEvent);
		}
	};

	Calendar.prototype._gestureEnd = function (oEvent) {
		if (this._$fromDate && this._$toDate) { // this means it has moved
			oEvent.stopPropagation();
			oEvent.preventDefault();
			var sFromDate = this._getDateValue(this._$fromDate);
			var sToDate = this._getDateValue(this._$toDate);
			this._$fromDate.removeClass("sapMeCalendarHighlight");
			this._$toDate.removeClass("sapMeCalendarHighlight");
			this.toggleDatesRangeSelection(sFromDate, sToDate, true);
			this.fireChangeRange({
				fromDate: sFromDate,
				toDate: sToDate
			});
		}
		delete this._$fromDate;
		delete this._$toDate;
	};

	Calendar.prototype.ontap = function (oEvent) {
		this._gestureSelect(oEvent);
	};

	Calendar.prototype._gestureSelect = function (oEvent) {
		var $date = this._getDateDomRef(oEvent.target);
		// CSS 0120061532 0001461331 2014
		// In IE < 11, the pointer-events none on a div is still throwing event so we check here
		if ( sap.ui.Device.browser.msie && sap.ui.Device.browser.version < 11 ) {
			if ( $date.css("pointer-events") == "none" ){
				return;
			}
		}
		if ($date) { // handle tap-like event
			var sDate = this._getDateValue($date);
			var bDidSelect = !$date.hasClass("sapMeCalendarSelected");

			if (!this.getEnableMultiselection()) {
				if (this.getSelectionMode() == sap.me.CalendarSelectionMode.SINGLE) {
					this.unselectAllDates();
				} else if (this.getSelectedDates().length > 1) {
					this.unselectAllDates();
				}
			}
			if ((this.getSelectionMode() == sap.me.CalendarSelectionMode.RANGE) && (this.getSelectedDates().length == 1)) {
				var sFromDate = this.getSelectedDates()[0];
				this.toggleDatesRangeSelection(sFromDate, sDate, true);
				this.fireChangeRange({
					fromDate: sFromDate,
					toDate: sDate
				});
			} else {
				$date.toggleClass("sapMeCalendarSelected", bDidSelect);
				this._updateDatesWithClass("sapMeCalendarSelected", sDate, bDidSelect);
				this.fireTapOnDate({
					didSelect: bDidSelect,
					date: sDate
				});
			}
		}
	};

	Calendar.prototype.onswipeleft = function (oEvent) {
		if (this.getSwipeToNavigate()) {
			if (!this._bRtl) {
				this._gotoNext();
			} else {
				this._gotoPrevious();
			}
		}
	};

	Calendar.prototype.onswiperight = function (oEvent) {
		if (this.getSwipeToNavigate()) {
			if (!this._bRtl) {
				this._gotoPrevious();
			} else {
				this._gotoNext();
			}
		}
	};

	// ** PUBLIC METHODS **//


	/**
	 * returns an array of the currently selected dates (dates are strings formatted as Date.toDateString())
	 *
	 * @type any
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Calendar.prototype.getSelectedDates = function () {
		return this._getDatesWithStyleClass("sapMeCalendarSelected");
	};


	/**
	 * it toggles the passed dates to selected/unselected
	 *
	 * @param {any} aDates
	 *         Array of the dates to be toggled. they can be Strings or Date objects.
	 * @param {boolean} bSelected
	 *         select/unselect. Optional, if omitted it inverts each date's current state
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Calendar.prototype.toggleDatesSelection = function (aDates, bSelected) {
		this._toggleDatesStyleClass("sapMeCalendarSelected", aDates, bSelected);
	};


	/**
	 * Change the type of the given dates
	 *
	 * @param {any} aDates
	 *         An array of dates in string representation
	 * @param {sap.me.CalendarEventType} sType
	 *         The type of event
	 * @param {boolean} bSelected
	 *         Add/remove the type, if ommited it will toggle
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Calendar.prototype.toggleDatesType = function (aDates, sType, bSelected) {
		this._toggleDatesStyleClass("sapMeCalendar" + sType, aDates, bSelected);
	};

	Calendar.prototype.removeTypesOfAllDates = function () {
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type00);
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type01);
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type04);
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type06);
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type07);
		this._removeStyleClassOfAllDates("sapMeCalendar" + sap.me.CalendarEventType.Type10);
	};


	/**
	 * unselect all the dates
	 *
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Calendar.prototype.unselectAllDates = function () {
		this._removeStyleClassOfAllDates("sapMeCalendarSelected");
	};


	/**
	 * it toggles the selection of the dates within the passed range to selected/unselected
	 *
	 * @param {any} oDateStart
	 *         starting date of the range. It can be Strings or Date objects.
	 * @param {any} oDateEnd
	 *         ending date of the range. It can be Strings or Date objects.
	 * @param {boolean} bSelected
	 *         selected/unselected. Optional, if omitted it inverts each date's current state
	 * @type void
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Calendar.prototype.toggleDatesRangeSelection = function (oDateStart, oDateEnd, bSelected) {
		this._toggleDatesRangeStyleClass("sapMeCalendarSelected", oDateStart,
			oDateEnd, bSelected);
	};

	// ** PRIVATE, INTERNAL METHODS **//
	Calendar.prototype._getDatesWithStyleClass = function (sState) {
		var aDates = [];
		var sDate;
		for (sDate in this._oDatesClasses) {
			if (jQuery.inArray(sState, this._oDatesClasses[sDate]) !== -1) {
				aDates.push(sDate);
			}
		}
		return aDates;
	};

	Calendar.prototype._toggleDatesRangeStyleClass = function (sClass, oDateStart, oDateEnd, bActive) {

		var oUniversalDateStart;
		var oUniversalDateEnd;
		if (typeof oDateStart == "string") {
			// this will change the type of oDateStart from String to Date.
			oUniversalDateStart = CalendarDate.parseFromToDateString(oDateStart);
		}else if ( oDateStart instanceof Date){
			oUniversalDateStart = new UniversalDate( oDateStart.getTime() );
		}
		if (typeof oDateEnd == "string") {
			// this will change the type of oDateEnd from String to Date.
			oUniversalDateEnd = CalendarDate.parseFromToDateString(oDateEnd);
		}else if ( oDateEnd instanceof Date){
			oUniversalDateEnd = new UniversalDate( oDateEnd.getTime() );
		}

		if (oUniversalDateStart && oUniversalDateEnd && typeof oUniversalDateStart.getTime == "function"
			&& typeof oUniversalDateEnd.getTime == "function") {
			if (oUniversalDateStart.getTime() > oUniversalDateEnd.getTime()) {
				var oTemp = new UniversalDate(oUniversalDateStart.getTime());
				oUniversalDateStart = oUniversalDateEnd;
				oUniversalDateEnd = oTemp;
			}
			var aDates = [];
			var oDateStartCopy = new UniversalDate(oUniversalDateStart.getTime());
			var oDate;
			while (oUniversalDateEnd - oDateStartCopy >= 0) {
				oDate = new Date(oDateStartCopy.getTime());
				aDates.push(oDate.toDateString());
				oDateStartCopy.setDate(oDateStartCopy.getDate() + 1);
			}
			this._toggleDatesStyleClass(sClass, aDates, bActive);
		}
	};

	Calendar.prototype._toggleDatesStyleClass = function (sClass, aDates, bActive) {
		var i;
		for (i = 0; i < aDates.length; i++) {
			var oDate = aDates[i];
			if (typeof oDate == "string") {
				// Type change String to Date
				oDate = CalendarDate.parseFromToDateString(oDate);
			}else if ( oDate instanceof Date){
				oDate = new UniversalDate( oDate.getTime() );
			}
			oDate = new Date(oDate.getTime());
			var sDate = oDate.toDateString();
			aDates[i] = sDate;
			this._updateDatesWithClass(sClass, sDate, bActive);
			if (this._$interactiveDates) {
				this._$interactiveDates.children("input[value='" + sDate + "']")
					.parent().toggleClass(sClass, bActive);
			}
		}
	};

	Calendar.prototype._removeStyleClassOfAllDates = function (sClass) {
		var sDate;
		for (sDate in this._oDatesClasses) {
			this._updateDatesWithClass(sClass, sDate, false);
		}
		if (this._$interactiveDates) {
			this._$interactiveDates.removeClass(sClass);
		}
	};

	Calendar.prototype._gotoPrevious = function () {
		var bSingleRow = this.getSingleRow();
		if (bSingleRow) {
			this._oInternalDate.previousWeek();
		} else {
			this._oInternalDate.previousMonth();
		}
		var sCurDate = this._oInternalDate.toDateString();
		this.setCurrentDate(sCurDate);
		this.fireChangeCurrentDate({
			currentDate: sCurDate
		});
	};

	Calendar.prototype._gotoNext = function () {
		var bSingleRow = this.getSingleRow();
		if (bSingleRow) {
			this._oInternalDate.nextWeek();
		} else {
			this._oInternalDate.nextMonth();
		}
		var sCurDate = this._oInternalDate.toDateString();
		this.setCurrentDate(sCurDate);
		this.fireChangeCurrentDate({
			currentDate: sCurDate
		});
	};

	Calendar.prototype._updateDatesWithClass = function (sClass, sDate, bActive) {
		var aStates = this._oDatesClasses[sDate] || [];
		var i = jQuery.inArray(sClass, aStates);
		if (bActive && i === -1) {
			aStates.push(sClass);
		} else if (!bActive && i !== -1) {
			aStates.splice(i, 1);
		}

		if (aStates.length === 0) {
			this._oDatesClasses[sDate] = null;
			delete this._oDatesClasses[sDate];
		} else {
			this._oDatesClasses[sDate] = aStates;
		}
	};

	Calendar.prototype._getDateValue = function ($date) {
		// TODO find proper way (e.g. do CalendarDay control)
		return $date.children("input").eq(0).val();
	};

	Calendar.prototype._getMonthDate = function (oDomRef) {
		var $domref = jQuery(oDomRef);
		var $this = jQuery(this.getDomRef());
		while ($domref && $domref != $this
				&& !$domref.hasClass("sapMeCalendarMonthDay")) {
			$domref = $domref.parent();
		}
		return $domref && $domref.parent().hasClass("sapMeCalendarMonth") ? $domref
				: null;
	};

	Calendar.prototype._getDateDomRef = function (oDomRef) {
		var $src = oDomRef ? jQuery(oDomRef) : null;
		var sThisId = this.getId();
		var $result = null;
		while ($src && $src[0].id != sThisId
				&& !$src.hasClass("sapMeCalendarMonth")) {
			if ($src.hasClass("sapMeCalendarMonthDay")
					&& $src.parent().hasClass("sapMeCalendarMonthDays")) {
				$result = $src;
				break;
			}
			$src = $src.parent();
		}
		return $result;
	};

	Calendar.prototype._checkLanguageRegion = function (language, region) {
		return (region === this._oLocale.getRegion() && language === this._oLocale.getLanguage());
	};

	Calendar.prototype._getIntervalPattern = function (pattern) {
		return this._oLocaleData.getIntervalPattern(pattern);
	};

	Calendar.prototype.getCurrentDate = function () {
		return this._oInternalDate.toDateString();
	};

	/**
	 * Sets the current date of the calendar.
	 * @param {String} strDate The Date to set, the format being identical to a date string produced by "toDateString".
	 *
	 * @return {sap.me.Calendar} <code>this</code> to allow method chaining.
	 * @public
	 */
	Calendar.prototype.setCurrentDate = function (strDate) {
		this.__setCurrentDate(strDate, false);
		return this;
	};

	/**
	 * Sets the current date of the calendar.
	 * @param {String} strDate The Date to set, the format being identical to a date string produced by "toDateString".
	 * @param {boolean} bSuppressInvalidate Set to true to prevent invalidation of the control
	 * @private
	 */
	Calendar.prototype.__setCurrentDate = function (strDate, bSuppressInvalidate) {
		this._oInternalDate = new CalendarDate(CalendarDate.parseFromToDateString(strDate));
		this.setProperty("currentDate", this._oInternalDate.toDateString(), bSuppressInvalidate);
	};

	/**
	 * Helper function to instantiate a Date from the string(s) provided
	 * by the getCurrentDate, getSelectedDates methods.
	 * <B>IMPORTANT:</B> The only valid values for the created Date are: year, month, day.
	 * Disregard any other value: hours, minutes, seconds, milliseconds...
	 *
	 * @param {String} strDate The date, produced by a former call to Date.toDateString.
	 * @throws {Error} If the string provided does not match a toDateString produced string.
	 * @public
	 * @static
	 * @return {Date} The Date, parsed from the input string.
	 */
	Calendar.parseDate = function (strDate) {
		// DO NOT USE sap.me.CalendarDate directly
		var oDate = CalendarDate.parseFromToDateString(strDate, true);
		return new Date( oDate.getTime());
	};

	/**
	 * This method returns the first day to display, based on the current date's value and the defined
	 * first day of the week.
	 * Please note that this function was only tested for single row calendars.
	 *
	 * @returns {Date} The calendar's current date if it is not a single row calendar.
	 * Otherwise, the date is the first day of the week as set by using setFirstDayOffset that
	 * is on or before the current date.
	 *
	 * @private
	 */
	Calendar.prototype._getCalendarFirstDate = function () {
		// copy the current date, we will modify this copy to "move back in time" or return it as is.
		var oFirstDate = new UniversalDate(this._oInternalDate._date.getTime());

		if (this.getSingleRow()) {
			// since we're not working with UTC, we set the hour to noon so that we can safely add/remove days
			oFirstDate.setHours(12);
			// How many days are there between the current date's day and the first day of the week?
			var deltaDays = oFirstDate.getDay() - this.getFirstDayOffset();
			var daysToGoBack;
			// if the difference is negative, this means that the first day of the week is later in the week
			if (deltaDays < 0) {
				// we have to move back to the previous week. %7 is for safety, it shouldn't be useful (depends on getFirstDayOffset).
				daysToGoBack = (7 - Math.abs(deltaDays)) % 7;
			} else {
				daysToGoBack = deltaDays;
			}
			// Move our copy date back of the necessary amount of days
			oFirstDate.setDate(oFirstDate.getDate() - daysToGoBack);
		} else {
			jQuery.sap.log.error("You cannot use this method in a non single row calendar, returning current date.");
		}

		return oFirstDate;
	};

	/**
	 * This function returns true if the given day is a weekend, based on the current locale.
	 *
	 * @param {number} dayOfTheWeek The day of the week, as provided by the getDay() of the Javascript Date object.
	 * Must be between 0 and 6.
	 *
	 * @returns {boolean} true if the given day of the week is a week end, based on the current locale.
	 */
	Calendar.prototype.isWeekend = function (dayOfTheWeek) {
		var start = this._oLocaleData.getWeekendStart(),
			end = this._oLocaleData.getWeekendEnd(),
			bIsWeekend = false;

		if (start <= end) {
			bIsWeekend = (start <= dayOfTheWeek) && (dayOfTheWeek <= end);
		}
		else {
			bIsWeekend = (dayOfTheWeek >= start) || (dayOfTheWeek <= end);
		}

		return bIsWeekend;
	};

	return Calendar;

}, /* bExport= */ true);

}; // end of sap/me/Calendar.js
if ( !jQuery.sap.isDeclared('sap.me.CalendarLegend') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.CalendarLegend.
jQuery.sap.declare('sap.me.CalendarLegend'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/me/CalendarLegend",['jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ui/core/theming/Parameters'],
	function(jQuery, library, Control, IconPool, Parameters) {
	"use strict";


	
	/**
	 * Constructor for a new CalendarLegend.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Legend for the calendar control
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.34.0.
	 * This control was experimental since 1.12. Please use the sap.ui.unified.CalendarLegend instead!
	 * @alias sap.me.CalendarLegend
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var CalendarLegend = Control.extend("sap.me.CalendarLegend", /** @lends sap.me.CalendarLegend.prototype */ { metadata : {
	
		library : "sap.me",
		properties : {
	
			/**
			 * legend for type 00
			 */
			legendForType00 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for type 01
			 */
			legendForType01 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for type 04
			 */
			legendForType04 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for type 06
			 */
			legendForType06 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for type 07
			 */
			legendForType07 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for today
			 */
			legendForToday : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for selected
			 */
			legendForSelected : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for selected 00
			 */
			legendForSelected00 : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * legend for normal
			 */
			legendForNormal : {type : "string", group : "Misc", defaultValue : null},
	
			/**
			 * Indicates if the legend can be collapsed and expanded
			 */
			expandable : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Indicates if the legend is expanded or not
			 */
			expanded : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Indicates the whole component width
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
	
			/**
			 * Indicates the legend items width
			 */
			legendWidth : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '12.5rem'},
	
			/**
			 * Indicates if the legend is visible
			 */
			visible : {type : "boolean", group : "Appearance", defaultValue : true},
	
			/**
			 * design name for the legend
			 */
			design : {type : "sap.me.CalendarDesign", group : "Appearance", defaultValue : sap.me.CalendarDesign.Approval}
		},
		aggregations : {
	
			/**
			 * label aggregation
			 */
			labels : {type : "sap.m.Label", multiple : true, singularName : "label", visibility : "hidden"}, 
	
			/**
			 * colors aggregation
			 */
			colors : {type : "sap.ui.core.Control", multiple : true, singularName : "color", visibility : "hidden"}, 
	
			/**
			 * Expand / collapse icon
			 */
			icon : {type : "sap.ui.core.Icon", multiple : false, visibility : "hidden"}
		}
	}});
	
	CalendarLegend.prototype.init = function() {
		this._createIcon();
		IconPool.insertFontFaceStyle();
		this._legendIndex = [];
	};
	
	
	CalendarLegend.prototype.setLegendForType00 = function( iValue ){
		this._setLegendLabelByName("ForType00",iValue);
	};
	CalendarLegend.prototype.setLegendForType01 = function( iValue ){
		this._setLegendLabelByName("ForType01",iValue);
	};
	CalendarLegend.prototype.setLegendForType04 = function( iValue ){
		this._setLegendLabelByName("ForType04",iValue);
	};
	CalendarLegend.prototype.setLegendForType06 = function( iValue ){
		this._setLegendLabelByName("ForType06",iValue);
	};
	CalendarLegend.prototype.setLegendForType07 = function( iValue ){
		this._setLegendLabelByName("ForType07",iValue);
	};
	CalendarLegend.prototype.setLegendForToday= function( iValue ){
		this._setLegendLabelByName("ForToday",iValue);
	};
	CalendarLegend.prototype.setLegendForSelected = function( iValue ){
		this._setLegendLabelByName("ForSelected",iValue);
	};
	CalendarLegend.prototype.setLegendForSelected00 = function( iValue ){
		this._setLegendLabelByName("ForSelected00",iValue);
	};
	CalendarLegend.prototype.setLegendForNormal = function( iValue ){
		this._setLegendLabelByName("ForNormal",iValue);
	};
	CalendarLegend.prototype.setExpanded = function( iValue ){
		this.setProperty("expanded", iValue);
		this._changeIconSrc();
	};
	
	CalendarLegend.prototype._setLegendLabelByName = function(iName,iValue){
		var olabel = sap.ui.getCore().byId(this.getId()+"-"+iName);
		var oColor = sap.ui.getCore().byId(this.getId()+'-Color'+iName);
		if(!olabel){ // create label and add to aggregation
			olabel = new sap.m.Label(this.getId() + '-'+iName,{
				width:"auto"
			});
			olabel.addStyleClass("sapUIMeCalendarLegendLabels");
			this.addAggregation("labels",olabel,true);
			olabel.setText(iValue);
			// create box label
			oColor = new sap.m.Label(this.getId() + '-Color'+iName);
			oColor.addStyleClass("sapUIMeLegendColor");
			oColor.addStyleClass("sapUIMeLegendColor"+iName);
			this.addAggregation("colors",oColor,true);
			this._legendIndex.push(iName);

		} else {
			
			olabel.setText(iValue);
			if(!iValue){
				this.removeAggregation("colors",oColor,true);
				this.removeAggregation("labels",olabel,true);
	
			}
			else{
				var index = this._legendIndex.indexOf(iName);
				this.insertAggregation("colors",oColor,index,true);
				this.insertAggregation("labels",olabel,index,true);
			}
	
		}
		this.setProperty("legend"+iName,iValue);
	
	};
	CalendarLegend.prototype.setExpandable= function( iValue ){
		this.setProperty("expandable",iValue);
		if(!iValue && !this.getExpanded()){
			this.toggleExpandCollapse();
		}
	};
	CalendarLegend.prototype.setVisible= function( iValue ){
		this.setProperty("visible",iValue);
	};
	
	CalendarLegend.prototype.toggleExpandCollapse = function() {
		if(!this.getExpandable())
			return;
		var bExpand = !this.getExpanded();
		//this.setExpanded(bExpand);
		var $container = this.$("LegendMenu");	
		if (bExpand) {
			this.$("LegendMenu").css("display","none").css("height","auto");
			$container.slideDown('600', "swing",jQuery.proxy(this.onTransitionEnded, this));
		} else {
			$container.slideUp('600', jQuery.proxy(this.onTransitionEnded, this));
		}
		this.setProperty("expanded", bExpand,true);
		this._changeIconSrc();
	
	};
	CalendarLegend.prototype._createIcon = function() {
		var sIconName = this.getExpanded() ? "collapse" : "expand";
		var sColor = Parameters.get("sapUiLightIcon");
		var sActiveBgColor = Parameters.get("sapUiHighlight");
		var sActiveColor = Parameters.get("sapUiIconInverted");
		var oIcon = new sap.ui.core.Icon(this.getId() + sIconName,{
				src: IconPool.getIconURI(sIconName),
				color: sColor,
				activeBackgroundColor: sActiveBgColor,
				activeColor: sActiveColor,
				press: jQuery.proxy(this.toggleExpandCollapse,this)
		});
		oIcon.addStyleClass("sapUIMeLegendIcon");
		this.setAggregation("icon",oIcon,true);
	};
	CalendarLegend.prototype._getColorBoxStyle = function(oID) {
		var id = this.getId() + "-";
		var styleName = oID.substr(oID.indexOf(id) + id.length);
		styleName = "sapUIMeLegendColor"+styleName;
		return styleName;
	};
	
	CalendarLegend.prototype._changeIconSrc =function () {
		var sIconName = this.getExpanded() ? "collapse" : "expand";
		this.getAggregation("icon").setSrc(IconPool.getIconURI(sIconName));
	};

	return CalendarLegend;

}, /* bExport= */ true);

}; // end of sap/me/CalendarLegend.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.OverlapCalendar.
jQuery.sap.declare('sap.me.OverlapCalendar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.date.UniversalDate'); // unlisted dependency retained
sap.ui.define("sap/me/OverlapCalendar",['jquery.sap.global', './Calendar', './CalendarDate', './library', 'sap/ui/core/Control', 'sap/ui/core/theming/Parameters', 'sap/ui/core/date/UniversalDate'],
	function(jQuery, Calendar, CalendarDate, library, Control, Parameters, UniversalDate) {
	"use strict";

	/**
	 * Constructor for a new OverlapCalendar.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * A calendar that allows to display events in a grid and show the overlapped events
	 * @extends sap.ui.core.Control
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.34.0.
	 * This control was experimental since 1.12. Please use the sap.m.PlanningCalendar instead!
	 * @alias sap.me.OverlapCalendar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var OverlapCalendar = Control.extend("sap.me.OverlapCalendar", /** @lends sap.me.OverlapCalendar.prototype */ { metadata : {
		library : "sap.me",
		properties: {
			/**
			 * The first date to display for the calendar
			 */
			startDate: {type: "string", group: "Data", defaultValue: null},

			/**
			 * Number of weeks
			 */
			weeksPerRow: {type: "int", group: "Appearance", defaultValue: 2},

			/**
			 * Indicate how to offset the first day in regards to a Sunday (by default)
			 */
			firstDayOffset: {type: "int", group: "Appearance", defaultValue: 0},

			/**
			 * Do we want to display the overlap indicator
			 */
			showOverlapIndicator: {type: "boolean", group: "Appearance", defaultValue: false},

			/**
			 * Indicates if we should render this component
			 */
			visible: {type: "boolean", group: "Appearance", defaultValue: true},

			/**
			 * Use swipe gesture to navigate
			 */
			swipeToNavigate: {type: "boolean", group: "Behavior", defaultValue: true},

			/**
			 * The width of the calendar
			 */
			width: {type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: '100%'}
		},
		aggregations: {
			/**
			 * The list of events to display in the calendar grid
			 */
			calendarEvents: {type: "sap.me.OverlapCalendarEvent", multiple: true, singularName: "calendarEvent"},

			/**
			 * Calendar instance
			 */
			calendar: {type: "sap.me.Calendar", multiple: false, visibility: "hidden"},

			/**
			 * Hidden aggregation of the label for event type
			 */
			typeLabels: {type: "sap.m.Label", multiple: true, singularName: "typeLabel", visibility: "hidden"},

			/**
			 * Hidden aggregation for the name label
			 */
			nameLabels: {type: "sap.m.Label", multiple: true, singularName: "nameLabel", visibility: "hidden"}
		},
		events: {
			/**
			 * Indicates that we have reach the last week with data
			 */
			endOfData: {
				parameters: {

					/**
					 * Indicates if the data missing are before the start date or at the end
					 */
					before: {type: "boolean"}
				}
			},

			/**
			 * Triggered when the displayed dates change
			 */
			changeDate: {
				parameters: {

					/**
					 * The first date displayed in the calendar
					 */
					firstDate: {type: "object"},

					/**
					 * The last date that will be displayed
					 */
					lastDate: {type: "object"}
				}
			}
		}
	}
	});


	/**
	 * @private
	 */
	OverlapCalendar.prototype.init = function () {
		// Private property for the sap.me.Calendar control instance
		this.setAggregation("calendar", new Calendar({
			singleRow: true,
			weeksPerRow: this.getWeeksPerRow(),
			monthsPerRow: 1,
			monthsToDisplay: 1,
			dayWidth: 48,
			dayHeight: 48,
			swipeToNavigate: this.getSwipeToNavigate()
		}));
		this.getCalendar().attachChangeCurrentDate(this.onCurrentDateChanged, this);
		this._typeWithBgImages = ["04", "07"];
		this._oDaysOverlap = {};
		this._bRtl = sap.ui.getCore().getConfiguration().getRTL();
	};

	/**
	 * @param {event} oEvent
	 * @public
	 */
	OverlapCalendar.prototype.onswiperight = function (oEvent) {
		if (this.getSwipeToNavigate()) {
			this.getCalendar().onswiperight(oEvent);
		}
	};

	/**
	 * @param {event} oEvent
	 * @public
	 */
	OverlapCalendar.prototype.onswipeleft = function (oEvent) {
		if (this.getSwipeToNavigate()) {
			this.getCalendar().onswipeleft(oEvent);
		}
	};

	/**
	 * @param {boolean} bSwipe
	 * @public
	 */
	OverlapCalendar.prototype.setSwipeToNavigate = function (bSwipe) {
		this.getCalendar().setSwipeToNavigate(bSwipe);
		this.setProperty("swipeToNavigate", bSwipe, true);
	};

	/**
	 * @returns {*}
	 * @private
	 */
	OverlapCalendar.prototype._getFirstDateDisplayed = function () {
		var iFirstDayOffset = this.getCalendar().getFirstDayOffset();
		var currentDate = this._createDateInDays(this.getStartDate());
		var iCurrentDate = currentDate.getDate();
		var iCurrentDay = currentDate.getDay();
		currentDate.setDate(1); // go to first day of month
		var iDaysToGoBack = iCurrentDay + 1 - iFirstDayOffset;
		currentDate.setDate(iCurrentDate - iDaysToGoBack + 1);
		return currentDate;
	};

	/**
	 * @returns {*}
	 * @private
	 */
	OverlapCalendar.prototype._getLastDateDisplayed = function () {
		var aWeekDays = this.getCalendar().getDays();
		var iWeekDays = aWeekDays.length;
		var iWeeksPerRow = this.getCalendar().getWeeksPerRow();
		var iDaysInRow = iWeeksPerRow * iWeekDays;
		var currentDate = this._getFirstDateDisplayed();
		var tempDate = this._createDateInDays(currentDate.getTime());
		tempDate.setDate(tempDate.getDate() + iDaysInRow - 1);
		return tempDate;
	};

	/**
	 * @param {number} iWeeksPerRow The integer number of weeks per row
	 * @public
	 */
	OverlapCalendar.prototype.setWeeksPerRow = function (iWeeksPerRow) {
		this.getCalendar().setWeeksPerRow(iWeeksPerRow);
		this.setProperty("weeksPerRow", iWeeksPerRow);
	};

	/**
	 * @public
	 * @returns {sap.me.Calendar} The calendar object
	 */
	OverlapCalendar.prototype.getCalendar = function () {
		return this.getAggregation("calendar");
	};

	/**
	 * The output of this function can be passed to the javascript Date constructor.
	 * The main purpose is to prevent a UniversalDate to be passed to the Date ctor.
	 *
	 * @param {Date | string | UniversalDate} date
	 * @returns {Date | number} The input itself or the getTime value of the UniversalDate.
	 * @private
	 */
	OverlapCalendar._ctorSafeDate = function (date) {
		var safeDate = date;
		if (date instanceof UniversalDate) {
			safeDate = date.getTime();
		}

		return safeDate;
	};

	/**
	 * Transforms a UniversalDate into a Date object.
	 * If the parameter is not a UniversalDate, this function does nothing.
	 *
	 * @param {Date | string | UniversalDate} date The parameter to convert from UniversalDate to Date or to leave unchanged.
	 * @returns {Date | string} A Date, if the parameter was a UniversalDate.
	 * @private
	 */
	OverlapCalendar._getJSDate = function (date) {
		var jsDate = date;
		if (date instanceof UniversalDate) {
			jsDate = new Date(date.getTime());
		}
		return jsDate;
	};

	/**
	 * @param {string|Date} sDate The start date, expected toDateString.
	 * @public
	 */
	OverlapCalendar.prototype.setStartDate = function (sDate) {
		var safeDate = OverlapCalendar._ctorSafeDate(sDate);
		this.getCalendar().setFirstDayOffset(0);
		this.getCalendar().setCurrentDate(safeDate);
		this.setProperty("startDate", safeDate);
		var offset = this._getDaysOffset(this._createDateInDays(safeDate), this._getFirstDateDisplayed());
		this.getCalendar().setFirstDayOffset(offset);
	};

	/**
	 * @param {event} oEvent Event emitted by the Calendar. See changeCurrentDate event of sap.me.Calendar.
	 *
	 * @fires OverlapCalendar#changeDate
	 * @private
	 */
	OverlapCalendar.prototype.onCurrentDateChanged = function (oEvent) {
		this.setProperty("startDate", oEvent.getParameter("currentDate"), true);
		this.getCalendar().invalidate();
		this._renderCalendarEvents();
		/**
		 * changeDate event.
		 *
		 * @event OverlapCalendar#changeDate
		 * @type {object}
		 * @property {Date} firstDate - Javascript Date object representing the first date displayed by the overlap calendar.
		 * @property {Date} endDate - Javascript Date object representing the last date displayed by the overlap calendar.
		 */
		this.fireChangeDate({
			firstDate: OverlapCalendar._getJSDate(this._getFirstDateDisplayed()),
			endDate: OverlapCalendar._getJSDate(this._getLastDateDisplayed())
		});
	};

	/**
	 * @public
	 */
	OverlapCalendar.prototype.onBeforeRendering = function () {
		this._cleanUp();
		this._aRows = [];
		this._lastDate = null;
		this._firstDate = null;
		var aCalendarEvents = this.getCalendarEvents();
		jQuery.each(aCalendarEvents, jQuery.proxy(this._parseCalendarEvent, this));
	};

	/**
	 * @public
	 */
	OverlapCalendar.prototype.onAfterRendering = function () {
		this._renderCalendarEvents();
		sap.ui.Device.resize.attachHandler(this._onResize, this);
	};

	/**
	 * on resize handler
	 * @private
	 */
	OverlapCalendar.prototype._onResize = function () {
		if (this._sDelayedResize) {
			jQuery.sap.clearIntervalCall(this._sDelayedResize);
		}
		this._sDelayedResize = jQuery.sap.delayedCall(200, this, this._fireRecomputeElementsSizes);
	};

	/**
	 * @private
	 */
	OverlapCalendar.prototype.exit = function () {
		this._cleanUp();
	};

	/**
	 * clean up function, removes the on resize handler.
	 * @private
	 */
	OverlapCalendar.prototype._cleanUp = function () {
		sap.ui.Device.resize.detachHandler(this._onResize, this);
	};

	/**
	 * Retrieves all the elements that need to be resized based on their parents.
	 * @private
	 */
	OverlapCalendar.prototype._fireRecomputeElementsSizes = function () {
		var oCalendar = this.$();
		// Get all the half days
		var aElements = oCalendar.find(".sapMeOverlapCalendarHalfDay");
		// Add all the rows containing the labels.
		jQuery.merge(aElements, oCalendar.find(".sapMeOverlapCalendarRowLabels"));
		// resize them all
		this._sizeElementsToParent(aElements);
	};

	/**
	 * @param {date} date
	 * @returns {number} The number of days between the given date and the first date displayed
	 * @private
	 */
	OverlapCalendar.prototype._getDayId = function (date) {
		var currentDate = this._createDateInDays(this._getFirstDateDisplayed());
		return this._getDaysOffset(currentDate, this._createDateInDays(date));
	};

	/**
	 * @private
	 */
	OverlapCalendar.prototype._cleanUpDivs = function () {
		// filter the queries on the calendar.
		var oCalendar = this.$();
		// Clean up the divs
		oCalendar.find(".sapMeOverlapCalendarDay").removeClass().addClass("sapMeOverlapCalendarDay");
		oCalendar.find(".sapMeOverlapCalendarHalfDay").remove();
		oCalendar.find(".sapMeOverlapCalendarDay.sapMeOverlapCalendarDayWithHalf").removeClass(".sapMeOverlapCalendarDayWithHalf");
		oCalendar.find(".sapMeOverlapCalendarOverlap").css("background-color", "transparent").css("border", "none");
		oCalendar.find(".sapMeOverlapCalendarTypeLbl").remove();
	};

	/**
	 * @private
	 */
	OverlapCalendar.prototype._renderCalendarEvents = function () {
		var id;
		this._mHalfDays = {};
		this._cleanUpDivs();
		// Render the events
		this._oDaysOverlap = {};
		var aCalendarEvents = this.getCalendarEvents();
		jQuery.each(aCalendarEvents, jQuery.proxy(this._renderCalendarEvent, this));
		jQuery.each(this._mHalfDays, jQuery.proxy(this._renderHalfDayCalendarEvent, this));
		// Render overlap
		if (this.getShowOverlapIndicator()) {
			for (id in this._oDaysOverlap) {
				if (this._oDaysOverlap[id] != undefined && this._oDaysOverlap[id] > 1) {
					var $div = jQuery.sap.byId(this._provideId("overlap", id));
					$div.css("background-color", Parameters.get("sapMeOverlapCalendarIndicator"));
					$div.css("border-right", "1px solid " + Parameters.get("sapMeOverlapCalendarIndicator"));
				}
			}
		}

		// Test if we reach the end
		if (this._firstDate && this._lastDate) {
			var currentDatePlus7 = this._getFirstDateDisplayed();
			currentDatePlus7.setDate(currentDatePlus7.getDate() + 7);
			var currentDateEndMinus7 = this._getLastDateDisplayed();
			currentDateEndMinus7.setDate(currentDateEndMinus7.getDate() - 7);
			if ((this._dayIsBefore(this._lastDate, currentDatePlus7) )) {
				this.fireEndOfData({before: false});
			} else if (this._dayIsAfter(this._firstDate, currentDateEndMinus7)) {
				this.fireEndOfData({before: true});
			}
		}
	};

	/**
	 *
	 * @returns {string} A string prefixed by this control's ID, to which the optional parameters are concatenated.
	 * @private
	 */
	OverlapCalendar.prototype._provideId = function (/*arguments*/) {
		var strPrefix = jQuery.makeArray(arguments).join("-");
		return this.getId() + "-" + strPrefix;
	};

	/**
	 * @param {number} dayId The ID of the day
	 * @private
	 */
	OverlapCalendar.prototype._addToDayOverlap = function (dayId) {
		if (this._oDaysOverlap[dayId] == undefined) {
			this._oDaysOverlap[dayId] = 0;
		}
		this._oDaysOverlap[dayId]++;
	};

	/**
	 * @param {date} firstDate First date of the offset
	 * @param {date} secondDate Second date of the offset
	 * @returns {number} The number of days (integer) between the two dates. Always positive or zero.
	 * @private
	 */
	OverlapCalendar.prototype._getDaysOffset = function (firstDate, secondDate) {
		return Math.abs(this._getRawDaysDifference(firstDate, secondDate));
	};

	/**
	 * @param {date} firstDate First date of the difference
	 * @param {date} secondDate Second date of the difference
	 * @returns {number} The number (integer) of days between the dates.
	 * @private
	 */
	OverlapCalendar.prototype._getDaysDifference = function (firstDate, secondDate) {
		return this._getRawDaysDifference(firstDate, secondDate);
	};

	/**
	 * @param {date} firstDate First date of the difference
	 * @param {date} secondDate Second date of the difference
	 * @returns {number} The number of days, as an integer, between the two dates.
	 * @private
	 */
	OverlapCalendar.prototype._getRawDaysDifference = function (firstDate, secondDate) {
		// The number of milliseconds in one day = 1000 * 60 * 60 * 24
		var ONE_DAY = 86400000;

		// Convert both dates to milliseconds
		var date1_ms = firstDate.getTime();
		var date2_ms = secondDate.getTime();

		// Calculate the difference in milliseconds
		var difference_ms = date1_ms - date2_ms;

		// Between two dates there can be a non integer difference due to daylight saving
		return Math.round(difference_ms / ONE_DAY);
	};

	/**
	 * @param {date} date The date to test
	 * @param {date} dateToCompare The date to compare against.
	 * @returns {boolean} true if the tested date is after the date to compare against.
	 * @private
	 */
	OverlapCalendar.prototype._dayIsAfter = function (date, dateToCompare) {
		return (this._getDaysDifference(date, dateToCompare) > 0 );
	};

	/**
	 * @param {date} date The date to test
	 * @param {date} dateToCompare The date to compare against.
	 * @returns {boolean} true if the tested date is before the date to compare against.
	 * @private
	 */
	OverlapCalendar.prototype._dayIsBefore = function (date, dateToCompare) {
		return (this._getDaysDifference(date, dateToCompare) < 0 );
	};

	/**
	 * @param {date} date The date to use to create a new Date object with a precision of the day ; everything smaller is zeroed out.
	 * @returns {Date} The date, without any information lower than a day.
	 * @private
	 */
	OverlapCalendar.prototype._createDateInDays = function (date) {
		var ctorSafeDate = OverlapCalendar._ctorSafeDate(date);
		var dateInDays = new Date(ctorSafeDate);
		// This is because of DST, 0120061532 0001393111 2014, 0120025231 0000919744 2015
		return CalendarDate.createDate(dateInDays.getUTCFullYear(), dateInDays.getUTCMonth(), dateInDays.getUTCDate());
	};

	/**
	 * Changes the sizes of the given jQuery elements to have the same size than their parents.
	 * This will be used to modify the half days as well as the row of the labels.
	 * The labels themselves are created using percentage values of their parents and don't
	 * need to be modified after having been created.
	 * @param {array} aElements Array of jQuery elements.
	 * @private
	 */
	OverlapCalendar.prototype._sizeElementsToParent = function (aElements) {
		var count = (aElements !== null && aElements.length) ? aElements.length : 0;
		var $el, $parent;
		var i, w, h;
		for (i = 0; i < count; i++) {
			$el = jQuery(aElements[i]);
			if ($el) {
				$parent = $el.parent();
				w = $parent.width();
				h = $parent.height();
				$el.width(w).height(h);
			}
		}
	};

	/**
	 * @param {string} key
	 * @param {array} aHalfDaysEvent
	 * @private
	 */
	OverlapCalendar.prototype._renderHalfDayCalendarEvent = function (key, aHalfDaysEvent) {
		var e = aHalfDaysEvent[0];
		var $div = jQuery.sap.byId(key);
		var t = e.getType();
		var b = (jQuery.inArray(t, this._typeWithBgImages) > -1 );
		$div.addClass("sapMeOverlapCalendarDayWithHalf");

		var $newStartDiv = jQuery("<div/>");
		$newStartDiv.addClass("sapMeOverlapCalendarHalfDay")
		.addClass("sapMeOverlapCalendarType" + t + "HalfDayStart");
		$div.append($newStartDiv);

		var $newEndDiv = null;
		if (aHalfDaysEvent.length > 1) {
			var e2 = aHalfDaysEvent[1];
			var t2 = e2.getType();
			$newEndDiv = jQuery("<div/>");
			$newEndDiv.addClass("sapMeOverlapCalendarHalfDay")
			.addClass("sapMeOverlapCalendarType" + t2 + "HalfDayEnd");
		} else if (b) {
			$newEndDiv = jQuery("<div/>");
			$newEndDiv.addClass("sapMeOverlapCalendarHalfDay")
			.addClass("sapMeOverlapCalendarTypeHalfDayEnd");
		}
		if ($newEndDiv !== null) {
			$div.append($newEndDiv);
		}

		this._sizeElementsToParent([$newStartDiv, $newEndDiv]);
	};

	/**
	 * Ensures the first and last date are properly defined
	 * @param {Date} startDate The start date
	 * @param {Date} endDate The end date
	 * @private
	 */
	OverlapCalendar.prototype._defineFirstAndLastDates = function (startDate, endDate) {
		if (this._lastDate == undefined) {
			this._lastDate = endDate;
		}
		if (this._dayIsAfter(endDate, this._lastDate)) {
			this._lastDate = endDate;
		}
		if (this._firstDate == undefined) {
			this._firstDate = startDate;
		}
		if (this._dayIsBefore(startDate, this._firstDate)) {
			this._firstDate = startDate;
		}
	};

	/**
	 * @param {number} index
	 * @param {event} oCalendarEvent
	 * @private
	 */
	OverlapCalendar.prototype._renderCalendarEvent = function (index, oCalendarEvent) {
		var startDate = this._createDateInDays(oCalendarEvent.getStartDay());
		var endDate = this._createDateInDays(oCalendarEvent.getEndDay());

		this._defineFirstAndLastDates(startDate, endDate);

		var currentDate = this._getFirstDateDisplayed();
		var lastDate = this._getLastDateDisplayed();

		if ((!this._dayIsBefore(endDate, currentDate)) && (!this._dayIsAfter(startDate, lastDate))) {
			var row = oCalendarEvent.getRow();

			var date = this._dayIsAfter(startDate, currentDate) ? startDate : currentDate;
			endDate = this._dayIsAfter(endDate, lastDate) ? lastDate : endDate;
			var nbOfDays = this._getDaysOffset(date, endDate) + 1;
			var nbOfDaysOffset = this._getDaysOffset(currentDate, date);
			var css = "sapMeOverlapCalendarType" + oCalendarEvent.getType();
			var $div;
			// save the id of the first day of the event
			var id;
			if (oCalendarEvent.getHalfDay() === true) {
				id = this._getDayId(date);
				var rowId = this._provideId(row, id);
				if (this._mHalfDays[rowId] == undefined) {
					this._mHalfDays[rowId] = [];
					$div = jQuery.sap.byId(rowId);
				}
				this._mHalfDays[rowId].push(oCalendarEvent);
			} else {
				while (!this._dayIsAfter(date, endDate)) {
					id = this._getDayId(date);
					this._addToDayOverlap(id);
					$div = jQuery.sap.byId(this._provideId(row, id));
					$div.addClass(css);
					date.setDate(date.getDate() + 1);
				}
			}
			if ($div != undefined) {
				this._createEventLabel(oCalendarEvent, date, nbOfDays, nbOfDaysOffset);
			}
		}
	};

	/**
	 * Creates a new label for one event
	 * @param {event} oCalendarEvent The calendar event.
	 * @param {date} date The date of the event
	 * @param {number} nbOfDays The number of days this event takes
	 * @param {number} nbOfDaysOffset Where the event starts in the displayed week
	 * @private
	 */
	OverlapCalendar.prototype._createEventLabel = function (oCalendarEvent, date, nbOfDays, nbOfDaysOffset) {
		// The type of the event, aka the text to display
		var type = oCalendarEvent.getTypeName();

		// create a label only if there is a text to display
		if (type && type.length > 0) {
			// the current row
			var row = oCalendarEvent.getRow();
			// The ID of the label to create
			var lblId = this._provideId(row, this._getDayId(date));

			var labelDivId = this._provideId("row", row, "lbls");
			// This is the jQuery object of the DIV containing all the labels
			var $labelDiv = jQuery.sap.byId(labelDivId);

			// Ensure the maximum width of the label's DIV is the calendar's width.
			// This DIV has a position:absolute CSS attribute, which seems to change the parent.
			// this.getWidth might return a width in percentage. The jQuery width is in pixels.
			$labelDiv.width(jQuery.sap.byId(this.getId()).width());

			var newLblId = this._provideId("lbl", lblId);

			// Do not recreate a label if there was already one created.
			if (jQuery.sap.byId(newLblId).length === 0) {
				var $lbl = jQuery("<label dir='Inherit' id='" + newLblId + "'>" + type + "</label>");
				$labelDiv.append($lbl);
				$lbl.addClass("sapMeOverlapCalendarTypeLbl sapMLabel");

				this._modifyLabel($lbl, nbOfDays, nbOfDaysOffset);
			}
		}
	};

	/**
	 * Sets various parameters on the given label: width, height.
	 * @param {object} $lbl jQuery object representing a label. Additional attributes will be added.
	 * @param {number} nbOfDays Length of the event.
	 * @param {number} nbOfDaysOffset Offset of the event, from the first displayed date of the calendar.
	 * @private
	 */
	OverlapCalendar.prototype._modifyLabel = function ($lbl, nbOfDays, nbOfDaysOffset) {
		var dayWidth = (100 / (this.getCalendar().getWeeksPerRow() * 7));
		var width = (nbOfDays * dayWidth);
		$lbl.width(width + "%");
		var offset = (nbOfDaysOffset * dayWidth);
		var m = (nbOfDaysOffset == 0 ) ? 1 : 0.5;
		var leftOffset = offset + "%";
		if (this._bRtl) {
			$lbl.css("right", leftOffset);
			$lbl.css("padding-right", m + "rem");
			$lbl.css("text-align", "right");
		} else {
			$lbl.css("left", leftOffset);
			$lbl.css("padding-left", m + "rem");
		}
	};

	/**
	 * @param {number} i
	 * @param {event} oCalendarEvent
	 * @private
	 */
	OverlapCalendar.prototype._parseCalendarEvent = function (i, oCalendarEvent) {
		var row = oCalendarEvent.getRow();
		if (row != -1) {
			if (oCalendarEvent.getName() != undefined) {
				if (this._aRows[row] == undefined && oCalendarEvent.getName() != "") {
					this._aRows[row] = oCalendarEvent.getName();
				}
			} else {
				jQuery.sap.log.debug("Calendar event has no name");
			}
		} else {
			jQuery.sap.log.debug("Invalid calendar event row");
		}
	};

	/**
	 * @param {number} index The row index
	 * @returns {sap.m.Label} The label of the row
	 * @private
	 */
	OverlapCalendar.prototype._getLabelForRow = function (index) {
		return this._getLabel(this._aRows[index], "nameLabels").addStyleClass("sapMeOverlapCalendarNameLbl");
	};

	/**
	 * @param {string} sText The text to display in the label
	 * @param {string} sAggregationName The name of the aggregation in which the label is added
	 * @returns {sap.m.Label} The label
	 * @private
	 */
	OverlapCalendar.prototype._getLabel = function (sText, sAggregationName) {
		var l = new sap.m.Label({text: sText});
		this.addAggregation(sAggregationName, l, true);
		return l;
	};


	return OverlapCalendar;

}, /* bExport= */ true);

}; // end of sap/me/OverlapCalendar.js
if ( !jQuery.sap.isDeclared('sap.me.OverlapCalendarEvent') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.OverlapCalendarEvent.
jQuery.sap.declare('sap.me.OverlapCalendarEvent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/me/OverlapCalendarEvent",['jquery.sap.global', './library', 'sap/ui/core/Element'],
	function(jQuery, library, Element) {
	"use strict";


	
	/**
	 * Constructor for a new OverlapCalendarEvent.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Represent the data of an event for the overlap calendar
	 * @extends sap.ui.core.Element
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.34.0.
	 * This control was experimental since 1.12. Please use the sap.ui.unified.CalendarAppointment instead!
	 * @alias sap.me.OverlapCalendarEvent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var OverlapCalendarEvent = Element.extend("sap.me.OverlapCalendarEvent", /** @lends sap.me.OverlapCalendarEvent.prototype */ { metadata : {
	
		library : "sap.me",
		properties : {
	
			/**
			 * The first day of the event
			 */
			startDay : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
	
			/**
			 * Last day of the event
			 */
			endDay : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
	
			/**
			 * Indicates if this elements is relevant to be consider in the overlap
			 */
			relevant : {type : "boolean", group : "Misc", defaultValue : null, bindable : "bindable"},
	
			/**
			 * Type of the event. Display in the second label (no overlap)
			 */
			type : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
	
			/**
			 * The CSS class to use
			 */
			typeName : {type : "string", group : "Appearance", defaultValue : null, bindable : "bindable"},
	
			/**
			 * Is this half a day
			 */
			halfDay : {type : "boolean", group : "Data", defaultValue : false, bindable : "bindable"},
	
			/**
			 * Id of the row on which to place this event
			 */
			row : {type : "int", group : "Data", defaultValue : -1, bindable : "bindable"},
	
			/**
			 * Name of the row
			 */
			name : {type : "string", group : "Misc", defaultValue : null, bindable : "bindable"}
		}
	}});
	

	return OverlapCalendarEvent;

}, /* bExport= */ true);

}; // end of sap/me/OverlapCalendarEvent.js
if ( !jQuery.sap.isDeclared('sap.me.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.ProgressIndicator.
jQuery.sap.declare('sap.me.ProgressIndicator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/me/ProgressIndicator",['jquery.sap.global', './library', 'sap/ui/core/Control'],
	function(jQuery, library, Control) {
	"use strict";


	
	/**
	 * Constructor for a new ProgressIndicator.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Shows the progress of a process in a graphical way. The indicator can be displayed with or without numerical values.
	 * The filling can be displayed in color only, or additionally with the percentage rate. The indicator status can be interactive.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.14. 
	 * This control is replaced by sap.m.ProgressIndicator
	 * @alias sap.me.ProgressIndicator
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ProgressIndicator = Control.extend("sap.me.ProgressIndicator", /** @lends sap.me.ProgressIndicator.prototype */ { metadata : {
	
		deprecated : true,
		library : "sap.me",
		properties : {
	
			/**
			 * Invisible controls are not rendered
			 */
			visible : {type : "boolean", group : "Behavior", defaultValue : true},
	
			/**
			 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
			 */
			enabled : {type : "boolean", group : "Behavior", defaultValue : true},
	
			/**
			 * The color of the bar. Enumeration sap.ui.core.BarColor provides CRITICAL (yellow), NEGATIVE (red), POSITIVE (green), NEUTRAL (blue) (default value).
			 */
			barColor : {type : "sap.ui.core.BarColor", group : "Appearance", defaultValue : sap.ui.core.BarColor.NEUTRAL},
	
			/**
			 * The text value to be displayed in the bar.
			 */
			displayValue : {type : "string", group : "Appearance", defaultValue : '0%'},
	
			/**
			 * The numerical value for the displayed length of the progress bar.
			 */
			percentValue : {type : "int", group : "Data", defaultValue : 0},
	
			/**
			 * Specifies whether the current value shall be rendered inside the bar.
			 */
			showValue : {type : "boolean", group : "Appearance", defaultValue : true},
	
			/**
			 * The width of the control.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
		}
	}});
	
	
	ProgressIndicator.prototype.setEndBar = function () {
	
		var widthBar = this.getPercentValue();
		var widthBorder;
		var sBarColor = this.getBarColor();
		var time;
	
		this.oBar  = this.getDomRef("bar");
		this.oEnd  = this.getDomRef("end");
		this.oBox  = this.getDomRef("box");
	
		jQuery(this.oEnd).removeClass('sapUIMeProgIndEndHidden');
	 	jQuery(this.oEnd).addClass('sapUIMeProgIndEnd');
	
		if (widthBar > 100) {
			widthBorder = (10000 / widthBar) + '%';
		}
		else {
			widthBorder = '100%';
		}
	
		if (widthBar > 100) {
			time = (widthBar - 100) * 20;
		}
		else {
			time = (100 - widthBar) * 20;
		}
	
		jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
	 	jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
		jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	
		if(!this.oThis){
			this.oThis = this.$();
		}
	
	};
	
	ProgressIndicator.prototype.setEndBarGoesBack = function (iPercentValue) {
	
		var widthBar = this.getPercentValue();
		var widthBorder;
		var sBarColor = this.getBarColor();
		var time;
	
		this.oBar  = this.getDomRef("bar");
		this.oEnd  = this.getDomRef("end");
		this.oBox  = this.getDomRef("box");
	
		if (iPercentValue > 100) {
			widthBorder = (10000 / iPercentValue) + '%';
		}
		else {
			widthBorder = '100%';
		}
	
	 	jQuery(this.oEnd).removeClass('sapUIMeProgIndEnd');
	 	jQuery(this.oEnd).addClass('sapUIMeProgIndEndHidden');
	
		if (widthBar > 100) {
			time = (widthBar - 100) * 20;
		}
		else {
			time = (100 - widthBar) * 20;
		}
	
		jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
		jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	 	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	
		if(!this.oThis){
			this.oThis = this.$();
		}
	
	};
	
	/**
	 * Property setter for the PercentValue
	 * A new rendering is not necessary, only the bar has to be moved.
	 *
	 * @param iPercentValue
	 * @return {sap.me.ProgressIndicator} <code>this</code> to allow method chaining
	 * @public
	 */
	ProgressIndicator.prototype.setPercentValue = function(iPercentValue) {
	
		var widthBar = this.getPercentValue();
		var widthBorder;
		var sBarColor = this.getBarColor();
	
		this.oBar  = this.getDomRef("bar");
		this.oEnd  = this.getDomRef("end");
		this.oBox  = this.getDomRef("box");
	
		var that = this;
		var time;
	
		if (iPercentValue < 0) {
			iPercentValue = 0;
		}
	
		if (iPercentValue > 100) {
			widthBorder = (10000 / iPercentValue) + '%';
		}
		else {
			widthBorder = '100%';
		}
	
		if(!this.oBar){
			// Not already rendered -> return and render
			time = iPercentValue * 20;
			this.setProperty('percentValue', iPercentValue, true); // No re-rendering!
			jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
			return this;
		}
	
		if (iPercentValue > 100 && widthBar <= 100) {
			time = (100 - widthBar) * 20;
			this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
			jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
			that.setEndBar();
			});
		}
		else if (iPercentValue <= 100 && widthBar > 100) {
			time = (widthBar - 100) * 20;
			this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
			jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
			that.setEndBarGoesBack();
			});
		}
		else if (iPercentValue > 100 && widthBar > 100) {
			if (iPercentValue > widthBar) {
				time = (iPercentValue - widthBar) * 20;
			}
			else {
				time = (widthBar - iPercentValue) * 20;
			}
			widthBorder = (10000 / iPercentValue) + '%';
			this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
	
			jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');
	 	 	jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
			jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear', function() {
			});
	
			if(!this.oThis){
				this.oThis = this.$();
			}
	 	}
		else {
			if (iPercentValue > widthBar) {
				time = (iPercentValue - widthBar) * 20;
			}
			else {
				time = (widthBar - iPercentValue) * 20;
			}
			this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
			jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
			if(!this.oThis){
				this.oThis = this.$();
			}
	 	}
	
		return this;
	};
	

	return ProgressIndicator;

}, /* bExport= */ true);

}; // end of sap/me/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.me.TabContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2016 SAP SE. All rights reserved
    
 */

// Provides control sap.me.TabContainer.
jQuery.sap.declare('sap.me.TabContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/me/TabContainer",['jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ui/core/theming/Parameters'],
	function(jQuery, library, Control, IconPool, Parameters) {
	"use strict";


	
	/**
	 * Constructor for a new TabContainer.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * The TabContainer allow to stack 1 to 4 contents in a
	 * view with corresponding icons
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 *
	 * @constructor
	 * @public
	 * @deprecated Since version 1.15.0. 
	 * The functionality of this control is merged with the sap.m.IconTabBar.
	 * Please use the sap.m.IconTabBar instead!
	 * This control will not be supported anymore.
	 * @alias sap.me.TabContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TabContainer = Control.extend("sap.me.TabContainer", /** @lends sap.me.TabContainer.prototype */ { metadata : {
	
		deprecated : true,
		library : "sap.me",
		properties : {
	
			/**
			 * Return the index of the selected tab
			 */
			selectedTab : {type : "int", group : "Data", defaultValue : null},
	
			/**
			 * The number to display in the badge for the info tab
			 */
			badgeInfo : {type : "int", group : "Data", defaultValue : null},
	
			/**
			 * The number to display in the badge for the notes tab
			 */
			badgeNotes : {type : "int", group : "Data", defaultValue : null},
	
			/**
			 * The number to display in the badge for the attachments tab
			 */
			badgeAttachments : {type : "int", group : "Data", defaultValue : null},
	
			/**
			 * The number to display in the badge for the people tab
			 */
			badgePeople : {type : "int", group : "Data", defaultValue : null},
	
			/**
			 * Indicates if the tab can be collapsed and expanded
			 */
			expandable : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * Indicates if the actual tab is expanded or not
			 */
			expanded : {type : "boolean", group : "Misc", defaultValue : true},
	
			/**
			 * setter for visible property
			 */
			visible : {type : "boolean", group : "Misc", defaultValue : true}
		},
		aggregations : {
	
			/**
			 * The tab icons in order
			 */
			tabs : {type : "sap.ui.core.Icon", multiple : true, singularName : "tab", visibility : "hidden"}, 
	
			/**
			 * The info tab
			 */
			contentInfo : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 * The attachments tab
			 */
			contentAttachments : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 * The notes tab
			 */
			contentNotes : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 * The people tab
			 */
			contentPeople : {type : "sap.ui.core.Control", multiple : false}, 
	
			/**
			 */
			badges : {type : "sap.ui.core.Control", multiple : true, singularName : "badge", visibility : "hidden"}
		},
		events : {
	
			/**
			 * Indicates that the selected tab has changed
			 */
			select : {allowPreventDefault : true}, 
	
			/**
			 * Indicates that the tab will expand
			 */
			expand : {}, 
	
			/**
			 * Indicates that the tab will collapse
			 */
			collapse : {}
		}
	}});
	
	
	TabContainer.prototype.init = function() {
		this.addAggregation("tabs",this._createButton("Info"));
		this.addAggregation("tabs",this._createButton("Notes"));
		this.addAggregation("tabs",this._createButton("Attachments"));
		this.addAggregation("tabs",this._createButton("People"));
		IconPool.insertFontFaceStyle();
		this._bFirstRendering = true;
	};
	
	TabContainer.prototype.setBadgeInfo = function( iValue ){
		this._setBadgeLabelByName("badgeInfo",iValue);
	};
	
	TabContainer.prototype.setBadgeAttachments = function( iValue ){
		this._setBadgeLabelByName("badgeAttachments",iValue);
	};
	TabContainer.prototype.setBadgeNotes = function( iValue ){
		this._setBadgeLabelByName("badgeNotes",iValue);
	};
	TabContainer.prototype.setBadgePeople = function( iValue ){
		this._setBadgeLabelByName("badgePeople",iValue);
	};
	TabContainer.prototype.onBeforeRendering = function() {
		if (this.getSelectedTab() == undefined) {
			this.setProperty("selectedTab", 0, true); // no invalidation when rendering phase has started
		}
	};
	
	
	TabContainer.prototype._setBadgeLabelByName = function(iName,iValue){
		var label = sap.ui.getCore().byId(this.getId()+"-"+iName);
		label.setText(iValue);
		this.setProperty(iName,iValue);
		label.toggleStyleClass("sapUIMeTabContainerHiddenBadges" , (iValue == 0) );
	};
	TabContainer.prototype._placeElements = function(){
		// Place the arrow
		var $arrow = this.$("arrow");
		var oBtn = this.getAggregation("tabs")[this.getSelectedTab()];
		if (oBtn && (oBtn.$().outerWidth() > 8)) {
			var iLeft = parseFloat(oBtn.$()[0].offsetLeft) + parseFloat(oBtn.$().outerWidth() / 2) - parseFloat($arrow.width() / 2);
			$arrow.css("left", iLeft + "px");
		}
	};
	
	
	TabContainer.prototype.onAfterRendering = function() {
		this.setProperty("expanded", true, true);
		if( this._bFirstRendering){
			this._bFirstRendering = false;
			setTimeout(jQuery.proxy(this._placeElements,this),300); // Timeout to make sure the icon are placed
		} else {
			this._placeElements();
		}
	};
	
	TabContainer.prototype.onThemeChanged  = function() {
		this._placeElements();
	};
	
	
	TabContainer.prototype.onTransitionEnded = function() {
		var $container = this.$("container");
		if( this.getExpanded()){ // expanding
			this.$("arrow").show();
			$container.css("display" , "block");
			this.$().find(".sapUIMeTabContainerContent").removeClass("sapUIMeTabContainerContentClosed");
		}else{ // collapsing
			$container.css("display" , "none");
			this.$().find(".sapUIMeTabContainerContent").addClass("sapUIMeTabContainerContentClosed");
		}
	};
	
	TabContainer.prototype.toggleExpandCollapse = function() {
		var bExpand = !this.getExpanded();
		var $container = this.$("container");
	
		var $arrow = this.$("arrow");
		if (bExpand) {
			this.$().find(".sapUIMeTabContainerButtons").children().filter(":eq(" + this.getSelectedTab() + ")").addClass("sapUIMeTabContainerTabSelected");
			$container.slideDown('400', jQuery.proxy(this.onTransitionEnded, this));
			this.fireExpand();
		} else {
			$arrow.hide();
			this.$().find(".sapUIMeTabContainerTabSelected").removeClass("sapUIMeTabContainerTabSelected");
			$container.slideUp('400', jQuery.proxy(this.onTransitionEnded, this));
			this.fireCollapse();
		}
		this.setProperty("expanded", bExpand, true);
	};
	
	TabContainer.prototype.onButtonTap = function(oEvent) {
		var oBtn = oEvent.getSource();
		var iIndex = this.indexOfAggregation("tabs", oBtn);
		if (iIndex == this.getSelectedTab() && this.getExpandable()) {
	
			this.toggleExpandCollapse();
		} else {
	
			this.setProperty("expanded", true, true);
	
			var oBtnID = oBtn.getId();
			var oContent = this._getContentForBtn(oBtnID);
			if (oContent) {
	
				if (this.fireSelect()) {
					this.setSelectedTab(iIndex); // note: this currently rerenders. When this is changed not to rerender, then remember to also update the selected-tab CSS class!
				}
			}
	
		}
	
	};
	
	TabContainer.prototype._getContentForBtn = function(oBtnID) {
		var id = this.getId() + "-";
		var contentName = oBtnID.substr(oBtnID.indexOf(id) + id.length);
		return this.getAggregation(contentName);
	};
	TabContainer.prototype._getBagdeForBtn = function(oBtnID) {
		var id = this.getId() + "-content";
		var badgeName = oBtnID.substr(oBtnID.indexOf(id) + id.length);
		badgeName.charAt(0).toUpperCase();
		badgeName = "badge"+badgeName;
		return this.getProperty(badgeName);
	};
	
	
	TabContainer.prototype._getScrollContainer = function(oContent) {
		return new sap.m.ScrollContainer({
			content : oContent
		});
	};
	TabContainer.prototype._createButton = function(sId) {
		var sIconName = Parameters.get("sapMeTabIcon"+sId);
		var sURI = IconPool.getIconURI(sIconName);
		var sColor = Parameters.get("sapMeTabColor"+sId);
		var oBtn = new sap.ui.core.Icon(this.getId() + '-content' + sId,{
			   src: sURI,
			   backgroundColor: sColor,
			   activeColor :  Parameters.get("sapUiIconInverted")
		});
		oBtn.addStyleClass("sapUIMeTabContainerBtn");
		oBtn.addStyleClass("sapUIMeTabContainerBtn"+sId);
		oBtn.attachPress(this.onButtonTap, this);
		
		var oLabel = new sap.m.Label(this.getId() + '-badge' + sId,{
			textAlign:"Center"
	
		});
		oLabel.addStyleClass("sapUIMeTabContainerBadge");
		oLabel.addStyleClass("sapUIMeTabContainerBadge"+sId);
		this.addAggregation("badges",oLabel);
		return oBtn;
	};
	

	return TabContainer;

}, /* bExport= */ true);

}; // end of sap/me/TabContainer.js
