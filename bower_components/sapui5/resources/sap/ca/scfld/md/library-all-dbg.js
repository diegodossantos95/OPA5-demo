// This file has been generated by the SAPUI5 'AllInOne' Builder
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
sap.ui.controller("sap.ca.scfld.md.view.App", {
	onInit : function() {

	},

	onExit : function() {

	}
});
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
sap.ui.controller("sap.ca.scfld.md.view.MainSplitContainer", {

	onInit : function() {
		sap.ca.scfld.md.app.Application.getImpl().setSplitContainer(this.byId("MainSplitContainer"));
	}

});
jQuery.sap.declare('sap.ca.scfld.md.library-all');
jQuery.sap.declare('sap.ca.scfld.md.view.App.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ca.scfld.md.view.MainSplitContainer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.ApplicationFacade') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.ApplicationFacade");
/**
* @class llll This class represents a Master Detail App. It provides access to generic services.
* Note that the App does not create an instance of this class on its own.
* The App will get access to this instance in its implementation of &lt;identity&gt;.Configuration.getApplicationParameters(oApplicationFacade).
* It is recommended that the app stores the reference to this instance in an appropriate variable .
* @name sap.ca.scfld.md.ApplicationFacade
* @extends sap.ui.base.Object
* @public
*/
sap.ui.base.Object.extend("sap.ca.scfld.md.ApplicationFacade",{


	constructor : function (oApplicationImplementation) {
		this.oApplicationImplementation = oApplicationImplementation;
	},

	/**
	* Use this method to access the resource bundle of the App
	* @returns the resource bundle of this App
	* @public
	* @function
	* @name sap.ca.scfld.md.ApplicationFacade#getResourceBundle
	* @memberOf sap.ca.scfld.md.ApplicationFacade
	*/
	getResourceBundle : function () {
		return this.oApplicationImplementation.getResourceBundle();
	},

	/**
	* Return a specific ODataModel based on its name as defined in the configuration.</br>
	* Note that there is a special logic in case the specified name is <i>i18n</i>. In this case the
	* resource model for this App is returned.
	* @param {string} sName the name of the ODataModel to retrieve, or undefined for the default model
	* @returns {sap.ui.model.Model} the requested ODataModel. Actually this will be an
	* instance of <code>sap.ui.model.odata.ODataModel</code>. The only exception is, when <code>sName == 'i18n'</code>.
	* In this case it is an instance of <code>sap.ui.model.resource.ResourceModel</code>.
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#getODataModel
	* @function
	*/
	getODataModel : function (sName) {
		return this.oApplicationImplementation.getODataModel(sName);
	},

	/**
	* Utility function to determine if we are running the application against
	* some mock data
	*
	* @returns {boolean} A flag depending on the <code>responderOn</code> uri
	*          parameter
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#isMock
	* @function
	*/
	isMock : function () {
		return this.oApplicationImplementation.isMock();
	},

	/**
	* Store a sap.ui.model instance in a global hashmap for the application.
	* This is used to allow apps to share models between different views.
	* The models will not be assigned to the views automatically but can be retrieved and assigned manually.
	* This is mainly made to have dirty hacks like settings model on sap.ui.getCore() or reading data from the oSplitContainer
	* @param {string} sName The name for the model (must be non null)
	* @param {sap.ui.model.Model} oModel the model to store
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#setApplicationModel
	* @function
	*/
	setApplicationModel : function (sName, oModel) {
		this.oApplicationImplementation.setApplicationModel(sName, oModel);
	},

	/**
	* Retrieve a model stored in the global hashmap based on its name
	* @param {string} sName the string of the model to retrieve
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#getApplicationModel
	* @function
	*/
	getApplicationModel : function (sName) {
		return this.oApplicationImplementation.getApplicationModel(sName);
	},

	/**
	* returns the scaffolding language model
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#getUiLibResourceModel
	* @returns {object} the scaffolding language model
	* @function
	*/
	getUiLibResourceModel : function () {
		return this.oApplicationImplementation.getUiLibResourceBundle();
	},

	/**
	* Registers a function to be called directly after a refresh was performed on the Master List of a master-detail app.
	* The function will be called for all master list refreshes regardless if they were triggered manually by clicking
	*"refresh" or automatically during a back end search
	* @param  {function} fHandler The function that has to be called at a master list refresh
	* @param  {object} oListener is the object that provides the handler function
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#registerOnMasterListRefresh
	* @function
	*/
	registerOnMasterListRefresh : function (fHandler, oListener) {
		return this.oApplicationImplementation.attachEvent("_scfldOnMasterListRefresh", fHandler, oListener);
	},

	/**
	* Deregisters a function that was previously registered with method "registerOnMasterListRefresh". The method
	* parameters have to be the same as during the registration
	* @param {function} fHandler The function that has to be called at a master list refresh
	* @param {object} oListener is the object that provides the handler function
	* @public
	* @name sap.ca.scfld.md.ApplicationFacade#deRegisterOnMasterListRefresh
	* @function
	*/
	deRegisterOnMasterListRefresh : function (fHandler, oListener) {
		return this.oApplicationImplementation.detachEvent("_scfldOnMasterListRefresh", fHandler, oListener);
	}

});

}; // end of sap/ca/scfld/md/ApplicationFacade.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.Startup') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.Startup");

sap.ca.scfld.md.Startup = {};
sap.ca.scfld.md.Startup.init = function(sIdentity, oMainCtr) {

//	// local resources
//	sap.ui.localResources("view");

	var fStartApplication = function() {
		var oBody = oMainCtr.byId("fioriContent");
		if (oBody) {
			// oBody.setAttribute("id", "content");
			jQuery.sap.require("sap.ca.scfld.md.app.Application");
			var app = new sap.ca.scfld.md.app.Application({
				identity : sIdentity,
                component: oMainCtr.getView().getViewData().component,
				oViewHook : oBody.getId()
			});
			app.setIdentity(sIdentity);
			return true;
		}
		return false;
	};
	if (!fStartApplication()) {
		jQuery(fStartApplication);
	}

	/**
	 * Hide Master SplitApp page when needed. This could be changed if UI5 team
	 * provide a way to hide the master
	 */
	var sStyle = "<style> "
			+ ".sapMSplitAppFullscreen > .sapMSplitContainerMaster { position: fixed; height: 0; left: -10000px; width: 0; } "
			+ ".sapMSplitAppFullscreen > .sapMSplitContainerDetail .sapMSplitContainerMasterBtn { display: none; } "
			+ "</style>";
	jQuery("head").append(sStyle);
};

}; // end of sap/ca/scfld/md/Startup.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.BarOverflowLayoutData') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare('sap.ca.scfld.md.app.BarOverflowLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ca/scfld/md/app/BarOverflowLayoutData",['sap/ui/core/LayoutData'],
	function(fnLayoutData) {
		"use strict";

		var BarOverflowLayoutData = fnLayoutData.extend("sap.ca.scfld.md.app.BarOverflowLayoutData", {

			metadata : {
				properties : {
					moveToOverflow : {
						type: "boolean",
						defaultValue: true
					},
					stayInOverflow : {
						type: "boolean",
						defaultValue: false
					},
					overflowButton: {
						type: "boolean",
						defaultValue: false
					}
				}
			}

		});


		return BarOverflowLayoutData;

}, /* bExport= */ true);

}; // end of sap/ca/scfld/md/app/BarOverflowLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.ConnectionManager') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation
jQuery.sap.declare("sap.ca.scfld.md.app.ConnectionManager");
jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.odata.ODataUtils'); // unlisted dependency retained

//jQuery.sap.require("sap.ca.scfld.md.ComponentBase");

sap.ui.base.ManagedObject.extend("sap.ca.scfld.md.app.ConnectionManager", {
	metadata : {
		properties : {
			identity : "string",
			configuration : "object",
			defaultConfiguration : "object",
			component : "object"
		}
	},

	/**
	 * Initialize all the models as defined in the configuration service list. The models should define : - their
	 * url - the name of the model that they will create - a isDefault property that will set the model as the
	 * undefined model (to support getModel()) - a mockedDataSource to define if mock data are available (and to
	 * switch to MockServer class in this case)
	 */
	initModels : function () {

		function attachParams (oParams, sAdditionalParams) {
			(sAdditionalParams || "").split("&").forEach(function (sParam) {
				var i = sParam.indexOf("="), sKey = sParam, sValue = "";
				if (i >= 0) {
					sValue = decodeURIComponent(sKey.slice(i + 1));
					sKey = sKey.slice(0, i);
				}
				sKey = decodeURIComponent(sKey);
				if (sKey) {
					oParams[sKey] = sValue;
				}
			});
		}

		function cloneServiceList (aServiceList) {
			var aClone = JSON.parse(JSON.stringify(aServiceList));

			jQuery.each(aClone, function (i, oService) {
				oService.fRequestFailed = aServiceList[i].fRequestFailed;
			});

			return aClone;
		}

		this.modelList = {}; // Map containing all the models
		this.mockServerList = {}; // Map containing all the models
		this.iRequestCount = 0;
		// Init all the ODataModel based on the configuration
		//*deep* array clone in order not to overwrite SAP app configuration
		var serviceList = jQuery.isArray(this.getConfiguration().getServiceList())
				? cloneServiceList(this.getConfiguration().getServiceList())
				: null;
		var excludedParameters = this.getConfiguration().getExcludedQueryStringParameters() || [];
		var isMocked = this.getConfiguration().isMock();
		var that = this;
		var sapServer = jQuery.sap.getUriParameters().get("sap-server");
		var sapHost = jQuery.sap.getUriParameters().get("sap-host");
		var sapHostHttp = jQuery.sap.getUriParameters().get("sap-host-http");
		var sapClient = jQuery.sap.getUriParameters().get("sap-client");

		var oComponent = that.getComponent();
		// check if system alias is contained in startup parameters of the component
		var mStartupParameters = (oComponent.getComponentData() || {}).startupParameters || {};
		var vSapSystem = mStartupParameters["sap-system"] || {};
		var sSystemAlias = typeof vSapSystem === "object" ? vSapSystem[0] : vSapSystem;

		this.sErrorInStartMessage = "";
		this.bIsComponentBase = !!oComponent.setRouterSetCloseDialogs;
//		this.bIsComponentBase = oComponent instanceof sap.ca.scfld.md.ComponentBase;  // added value can be provided in this case
		this.bIsShowingMessage = false;   // suppress more then one message box (e.g. when several models provide an error
		if (!sap.ui.getCore().getConfiguration().getDisableCustomizing() && oComponent && oComponent.getMetadata()) {

			var oConfig = oComponent.getMetadata().getConfig(),
				sParentComponentName = oComponent.getMetadata().getParent().getName(),
				serviceListExt = oConfig["sap.ca.serviceConfigs"] || [];

			var fMergeConfigs = function (aServiceList, aExtensionConfig) {
				var oServiceList, oExtConfig;
				//*deep* array clone in order not to overwrite the custom configuration
				var aExtConfig = jQuery.isArray(aExtensionConfig)
						? cloneServiceList(aExtensionConfig)
						: [];
				for (var i = 0; i < aServiceList.length; i++) {
					oServiceList = aServiceList[i];
					for (var j = 0; j < aExtConfig.length; j++) {
						oExtConfig = aExtConfig[j];
						if (oServiceList.name == oExtConfig.name) {
							for (var key in oExtConfig) {
								oServiceList[key] = oExtConfig[key];
							}
							aExtConfig.splice(j, 1);
							//array was sqashed - adapt the index in order to
							//check the 'new entry' that moved its position
							j--;
						}
					}
				}
				aServiceList = aServiceList.concat(aExtConfig);
				return aServiceList;
			};

			if (sParentComponentName !== "sap.ca.scfld.md.ComponentBase") {
				// oComponent is an extension of an scfld based app --> fill serviceListExt
				// from config[sap.ca.serviceConfigs] and app descriptor
				var oManifestEntry = oComponent.getMetadata().getManifestEntry("sap.app");
				if (oManifestEntry && oManifestEntry.dataSources) {
					// an app descriptor with a new service is available, convert and use it
					var oDataSources = oManifestEntry.dataSources,
						aServiceListFromManifest = [];
					for (var key in oDataSources) {
						var oDataSource = oDataSources[key],
							oDataSourceSettings = oDataSource.settings,
							oServiceObject = {
								name : key,
								serviceUrl : oDataSource.uri
							};

						if (oDataSourceSettings && oDataSourceSettings.localUri) {
							oServiceObject.mockedDataSource =
								jQuery.sap.getModulePath(oManifestEntry.id) + "/"
									+ oDataSourceSettings.localUri;
						}
						aServiceListFromManifest.push(oServiceObject);
					}
					if (aServiceListFromManifest.length > 0) {
						serviceListExt = fMergeConfigs(serviceListExt, aServiceListFromManifest);
					}
				}
			}

			if (serviceListExt.length > 0 && serviceList != null) {
				serviceList = fMergeConfigs(serviceList, serviceListExt);
			}

		}

		if (serviceList != null) {
			jQuery
				.each(
					serviceList,
					function (index, service) {
						function logMetadataError(oEvt, oService) {
							var sError = "Cannot load meta data for service " + oService.serviceUrl,
								sDetails = oEvt.getParameter("statusCode"),
								sComponent = that.getIdentity() || "sap.ca.scfld.md.app.ConnectionManager";
							sDetails += " (";
							sDetails += oEvt.getParameter("statusText");
							sDetails += ") - ";
							sDetails += oEvt.getParameter("message");
							sDetails += "\n";
							sDetails += oEvt.getParameter("responseText");
							jQuery.sap.log.error(sError, sDetails, sComponent);
						}
						var sUrlUri = URI(service.serviceUrl),
							bUseV2Model = (service.useV2ODataModel === true);

						if (sapServer != null && (jQuery.inArray("sap-server", excludedParameters) == -1)) {
							sUrlUri.addSearch("sap-server", sapServer);
						} else if (sapHost != null && (jQuery.inArray("sap-host", excludedParameters) == -1)) {
							sUrlUri.addSearch("sap-host", sapHost);
						} else if (sapHostHttp != null && (jQuery.inArray("sap-host-http", excludedParameters) == -1)) {
							sUrlUri.addSearch("sap-host-http", sapHostHttp);
						}
						if (sapClient != null && (jQuery.inArray("sap-client", excludedParameters) == -1)) {
							sUrlUri.addSearch("sap-client", sapClient);
						}
						var sUrl = sUrlUri.toString();
						// Add origin segment if sap-system start parameter is available
						if (sSystemAlias) {
							sUrl = sap.ui.model.odata.ODataUtils.setOrigin(sUrl, sSystemAlias);
						}
						if (isMocked) {
							jQuery.sap.require("sap.ui.core.util.MockServer");
							// remove query parameters, add trailing '/'
							var sMockServerUrl = (sUrl.split("?")[0]).replace(/\/?$/, "/");
							var oMockServer = new sap.ui.core.util.MockServer({
								rootUri : sMockServerUrl
							});
							if (service.mockedDataSource) {
								oMockServer.simulate(service.mockedDataSource, {
									// the replace instruction strips the filename, returning only the path with trailing slash
									// eg. model/metadata.xml --> model/
									sMockdataBaseUrl: service.mockedDataSource.replace(/[^\/]+$/, ""),
									bGenerateMissingMockData: true
								});
							} else {
								oMockServer.simulate(sMockServerUrl + "$metadata");
							}
							oMockServer.start();
							that.mockServerList[service.name] = oMockServer;
							if (service.isDefault) {
								that.mockServerList[undefined] = oMockServer;
							}
						}

						var oConfig = {
								metadataUrlParams: {},
								json: true,
								loadMetadataAsync: service.loadMetadataAsync === true || bUseV2Model //v2.ODataModel always loads metadata async
							};
						attachParams(oConfig.metadataUrlParams, service.metadataParams);
						if (service.serviceUrl.indexOf("/sap/opu/") === 0) {
							// a Gateway URL, try adding sap-language to $metadata
							var sapLanguage = sap.ushell && sap.ushell.Container
									? sap.ushell.Container.getUser().getLanguage()
									: jQuery.sap.getUriParameters().get("sap-language");
							if (sapLanguage && excludedParameters.indexOf("sap-language") < 0) {
								oConfig.metadataUrlParams["sap-language"] = sapLanguage;
							}
						}
						var oModel = bUseV2Model
								? new sap.ui.model.odata.v2.ODataModel(sUrl, oConfig)
								: new sap.ui.model.odata.ODataModel(sUrl, oConfig);
						if (oConfig.loadMetadataAsync) {
							oModel.attachMetadataLoaded({oModel: oModel, oService: service}, function (oEvt, oParams) {
								that.checkModelMetaData(oParams.oModel,oParams.oService);
							}, this);
							oModel.attachMetadataFailed({oModel: oModel, oService: service}, function (oEvt, oParams) {
								logMetadataError(oEvt, oParams.oService);
								that.checkModelMetaData(oParams.oModel,oParams.oService);
							}, this);

						} else {
							oModel.attachMetadataFailed(service, logMetadataError, this);
							that.checkModelMetaData(oModel, service);
						}

						// Override Metadata way of returning properties
						if (service.overrideGetPropertyMetadata && oModel.oMetadata) {
							oModel.oMetadata._getPropertyMetadata = function (oEntityType, sProperty) {
								sProperty = sProperty.replace(/^\/|\/$|\)$|\w*\(/g, "");
								return sap.ui.model.odata.ODataMetadata.prototype._getPropertyMetadata.apply(this, [oEntityType, sProperty]);
							};
						}

						// To comply with security guidelines, batch mode is used except if :
						// - service configuration explicitly contains useBatch:false
						// - service is a mock service
						if ((service.useBatch) && !isMocked) {
							oModel.setUseBatch(true);
						}
						if (service.countSupported) {
							// v2.ODataModel has no method setCountSupported; we keep it however for the ODataModel as apps may call oModel.isCountSupported then
							if (bUseV2Model) {
								oModel.setDefaultCountMode(sap.ui.model.odata.CountMode.Request);
							} else {
								oModel.setCountSupported(true);
							}
						} else {
							if (bUseV2Model) {
								oModel.setDefaultCountMode(sap.ui.model.odata.CountMode.Inline);
							} else {
								oModel.setCountSupported(false);
							}
						}
						if (service.sDefaultBindingMode) {
							oModel.setDefaultBindingMode(service.sDefaultBindingMode);
						}
						// test whether the call went through
						//if (!oModel.getServiceMetadata()) {
						//	var oII18NModel = that.getProperty("configuration").oApplicationFacade.oApplicationImplementation.UilibI18nModel
						//		.getResourceBundle();
						//	that.sErrorInStartMessage = oII18NModel.getText("ERROR_MSG_NO_METADATA", [service.name]);
						//	var oSettings = {
						//		type : sap.ca.ui.message.Type.ERROR,
						//		message : that.sErrorInStartMessage,
						//		details : oII18NModel.getText("ERROR_DETAIL_NO_METADATA", [service.serviceUrl])
						//		};
						//	that.showMessageBox(oSettings);
						//	return;
						//}
						if (service.fRequestFailed) {
							oModel.attachRequestFailed(null, service.fRequestFailed);
						} else {
							oModel.attachRequestFailed(null, jQuery.proxy(that.handleRequestFailed, that));
						}
						// some applications requested the possibility to avoid the busy indicator
						if (service.noBusyIndicator == true) {
							// attach only default logic
							oModel.attachRequestSent(null, jQuery.proxy(that.handleRequestSentInner, that));
							oModel.attachRequestCompleted(null, jQuery.proxy(that.handleRequestCompletedInner, that));
						} else {
							// attach default logic + busy Indicator
							oModel.attachRequestSent(null, jQuery.proxy(that.handleRequestSent, that));
							oModel.attachRequestCompleted(null, jQuery.proxy(that.handleRequestCompleted, that));
						}
						if (service.isDefault) {
							that.modelList[undefined] = oModel;
							that.setDefaultConfiguration(service);
						} else {
							that.modelList[service.name] = oModel;
						}
					});
		}
	},

	checkModelMetaData: function (oModel, oService) {
		if (!oModel.getServiceMetadata()) {
			var oII18NModel = this.getProperty("configuration").oApplicationFacade.oApplicationImplementation.UilibI18nModel
					.getResourceBundle();
			this.sErrorInStartMessage = oII18NModel.getText("ERROR_MSG_NO_METADATA", [oService.name]);
			var oSettings = {
				type : sap.ca.ui.message.Type.ERROR,
				message : this.sErrorInStartMessage,
				details : oII18NModel.getText("ERROR_DETAIL_NO_METADATA", [oService.serviceUrl])
			};
			this.showMessageBox(oSettings);
			return;
		}
	},

	setIdentity : function (sIdentity) {
		var oldIdentity = this.getIdentity();
		if (oldIdentity != sIdentity) {
			this.setProperty("identity", sIdentity);
		}
	},

	/**
	 * Retrieve a single model based on its name
	 *
	 * @param {string} sName
	 * @returns {*}
	 */
	getModel : function (sName) {
		return this.modelList[sName];
	},

	/**
	 * Method to be called each time a request is sent on the ODataModel
	 *
	 * @param {object} oEvent
	 */
	handleRequestSent : function (oEvent) {
		sap.ca.ui.utils.busydialog.requireBusyDialog();
		this.handleRequestSentInner(oEvent);
	},

	handleRequestSentInner : function (oEvent) {
		this.iRequestCount++;
		jQuery.sap.log.info("Connection Manager", "Request sent");
	},

	/**
	 * Method to be called each time a request fails on the ODataModel
	 *
	 * @param {object} oEvent
	 */
	handleRequestFailed : function (oEvent) {
		jQuery.sap.log.error("Connection Manager", "Failed to load data");
		// v2 provides the error nested in response parameter
		var oResponse = oEvent.getParameter("response"),
			oSettings = {
				type : sap.ca.ui.message.Type.ERROR,
				message : oEvent.getParameter("message")
					|| (oResponse && oResponse.message),
				details : oEvent.getParameter("responseText")
					|| (oResponse && oResponse.responseText)
			};
		this.showMessageBox(oSettings);
	},

	/**
	 * Method to be called each time a request is completed on the ODataModel
	 *
	 * @param {object} oEvent
	 */
	handleRequestCompleted : function (oEvent) {
		sap.ca.ui.utils.busydialog.releaseBusyDialog();
		this.handleRequestCompletedInner(oEvent);
	},

	handleRequestCompletedInner : function (oEvent) {
		if (oEvent.getParameter("success")) {
			jQuery.sap.log.info("Connection Manager", "Request succesfully completed");
		} else {
			jQuery.sap.log
					.info("Connection Manager", "Request completed with errors", oEvent.getParameter("message"));
		}
	},

	showMessageBox : function (oSettings) {
		if (this.bIsShowingMessage) {
			return;
		}
		this.bIsShowingMessage = true;
		if (this.bIsComponentBase) {
			var oComponent = this.getComponent();
			var bIsClosing = oComponent._bRouterCloseDialogs;
			oComponent.setRouterSetCloseDialogs(false);
		}
		sap.ca.ui.message.showMessageBox(oSettings, jQuery.proxy(function () {
			this.bIsShowingMessage = false;
			if (this.bIsComponentBase) {
				oComponent.setRouterSetCloseDialogs(bIsClosing);
			}
		}, this));
	}
});

// factory method may be more flexible in future
sap.ca.scfld.md.app.ConnectionManager.getNewInstance = function (sIdentity, oConfiguration, oDefaultConfiguration,
		oComponent) {
	var oConnManager = new sap.ca.scfld.md.app.ConnectionManager({
		identity : sIdentity,
		configuration : oConfiguration,
		defaultConfiguration : oDefaultConfiguration,
		component : oComponent
	});
	oConnManager.initModels();
	return oConnManager;
};

}; // end of sap/ca/scfld/md/app/ConnectionManager.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.MasterHeaderFooterHelper') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.MasterHeaderFooterHelper");

sap.ui.base.Object.extend("sap.ca.scfld.md.app.MasterHeaderFooterHelper", {

	constructor : function(oApplicationImplementation) {
		this.oApplicationImplementation = oApplicationImplementation;
		this.oCommonHeaderFooterHelper = new sap.ca.scfld.md.app.CommonHeaderFooterHelper(oApplicationImplementation, {});
	},

	// set master header bar and footer bar
	defineMasterHeaderFooter : function(oController, bAllDisabled) {
		this.defineMasterHeaderFooterInner(oController, bAllDisabled);
	},

	defineMasterHeaderFooterInner : function(oController, bAllDisabled) {
		var oOptions = oController.getHeaderFooterOptions();
		this.setHeaderFooter(oController, oOptions, bAllDisabled);
	},

	setHeaderFooter : function(oController, oOptions, bAllDisabled, bKeepModifications){
		// get content information from app
		if (!oOptions) {
			return;
		}
		var oPage = this.oCommonHeaderFooterHelper.startBuild(oController, oOptions, { bEditState : false, bIsSearching : false, bAllDisabled : bAllDisabled }, bKeepModifications);
		this.defineHeader(oController, oPage);
		this.defineFooter(oController, oPage);
		this.oApplicationImplementation.oCurController.MasterCtrl = oController;
		this.oApplicationImplementation.oCurController.FullCtrl = null;

		this.oCommonHeaderFooterHelper.endBuild(oController);

	},

	// function defining the master header
	defineHeader : function(oController, oPage) {
		var oCustHeader = oPage.getCustomHeader();
		if (!oCustHeader) {
			oCustHeader = new sap.m.Bar();
			oPage.setCustomHeader(oCustHeader);
		}
		this.defineMasterSubHeader(oController, oPage);
		var iCount = -1;
		if (!oController.isBackendSearch()) {
			if (oController._oControlStore.oMasterSearchField) {
				var sFilterPattern = oController._oControlStore.oMasterSearchField.getValue();
				if (sFilterPattern) {
					iCount = oController.applySearchPattern(sFilterPattern);
					oController.evaluateClientSearchResult(iCount, oController.getList(), oController._emptyList);
				}
			}
		}
		if (iCount < 0) {
			if (oController._oMasterListBinding){
				iCount = oController._oMasterListBinding.getLength();
			} else {
			  var oList = oController.getList();
			  var aItems = oList.getItems();
			  iCount = 0;
			  for (var i = 0; i < aItems.length; i++){
				  if (!(aItems[i] instanceof sap.m.GroupHeaderListItem)){
					  iCount++;
				  }
			  }
			}
		}
		this.defineMasterTitle(oController, oCustHeader, iCount);
		this.oCommonHeaderFooterHelper.setBackButton(oController, oCustHeader, true);
		this.defineEditButton(oController, oCustHeader);
	},

	// function defining the master footer
	defineFooter : function(oController, oPage) {
		this.defineSettingsButton(oController);
		this.defineFooterRight(oController);
	},

	// define subheader of master list
	defineMasterSubHeader : function(oController, oPage) {
		if (oController._oControlStore.oMasterSearchField || oController._oControlStore.oMasterPullToRefresh) {
			return; // subheader has already been set
		}
		var oSubHeader = new sap.m.Bar();
		oPage.setSubHeader(oSubHeader);
		var bIsTouch = sap.ui.Device.support.touch;
		this.createMasterSearchField(oController, oSubHeader, bIsTouch);
		if (bIsTouch && !oController._oControlStore.bAllDisabled) {
			this.createMasterPullToRefresh(oController, oPage);
		}
	},

	createMasterSearchField : function(oController, oSubHeader, bIsTouch) {
		oController._oControlStore.oMasterSearchField = new sap.m.SearchField({
			id: this.oCommonHeaderFooterHelper.createId(oController, "scfld_SEARCH")
		});
		oController._oControlStore.oMasterSearchField.setEnabled(!oController._oControlStore.bAllDisabled);
		if (!bIsTouch) {
			oController._oControlStore.oMasterSearchField.setShowRefreshButton(true);
			oController._oControlStore.oMasterSearchField.setRefreshButtonTooltip(
				this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("REFRESH"));
		}
		oController._oControlStore.oMasterSearchField.setShowRefreshButton(!bIsTouch);
		oController._oControlStore.oMasterSearchField.setSelectOnFocus(false);
		//init search text
		oController._oControlStore.sMasterSearchText = null;
		// currently required for refresh and search
		oController._oControlStore.oMasterSearchField.attachSearch(jQuery.proxy(function(oEvent) {
			this.handleMasterSearch(oController, oEvent);
		}, this));
		if (oController.isLiveSearch()) {
			var _oController = oController;
//			oController._oControlStore.oMasterSearchField.attachLiveChange(jQuery.proxy(oController._applyClientSideSearch,
//					oController));
			oController._oControlStore.oMasterSearchField.attachLiveChange(jQuery.proxy(function(){
				_oController._applyClientSideSearch();
				_oController._oControlStore.sMasterSearchText = _oController._oControlStore.oMasterSearchField.getValue();
			}, this));
		}
		if (oController._oHeaderFooterOptions.sI18NSearchFieldPlaceholder) {
			var oBundle = this.oApplicationImplementation.AppI18nModel.getResourceBundle();
			var sPlaceholder = oBundle.getText(oController._oHeaderFooterOptions.sI18NSearchFieldPlaceholder);
		} else {
			var oBundle = this.oApplicationImplementation.UilibI18nModel.getResourceBundle();
			var sPlaceholder = oBundle.getText("MASTER_PLACEHOLDER_SEARCHFIELD");
		}
		oController._oControlStore.oMasterSearchField.setPlaceholder(sPlaceholder);
		oSubHeader.addContentMiddle(oController._oControlStore.oMasterSearchField);
	},

	createMasterPullToRefresh : function(oController, oPage) {
		oController._oControlStore.oMasterPullToRefresh = new sap.m.PullToRefresh();
		oController._oControlStore.oMasterPullToRefresh.attachRefresh(jQuery.proxy(function() {
			this.handleMasterPullToRefresh(oController);
		}, this));
		oPage.insertContent(oController._oControlStore.oMasterPullToRefresh, 0);
	},

	handleMasterSearch : function(oController, oEvent) {
		var bBackendSearch = oController.isBackendSearch();
		var bIsRefresh = oEvent.getParameter("refreshButtonPressed");
		if (!bIsRefresh) {
			//if not refreshing, store the text of the master search field in the control store
			//a refresh will only be done with the last entered search term stored in the control store
			oController._oControlStore.sMasterSearchText = oController._oControlStore.oMasterSearchField.getValue();
		}
		if (bIsRefresh || bBackendSearch) {
			this.refreshList(oController, bIsRefresh);
		}
		if (!bBackendSearch && !oController.isLiveSearch()) {
			oController._applyClientSideSearch();
			oController._oControlStore.sMasterSearchText = oController._oControlStore.oMasterSearchField.getValue();
		}
		// todo: handle paging case
	},

	handleMasterPullToRefresh : function(oController) {
		this.refreshList(oController, true);
	},

	refreshList : function(oController, bIsRefresh) {
		//restore old search pattern if we are in refresh mode
		var bIsBackendSearch = oController.isBackendSearch();
		bIsRefresh = bIsRefresh && (oController._oControlStore.sMasterSearchText != null || oController._oMasterListBinding != null);
		oController._oControlStore.bIsSearching = !bIsRefresh;          // when we are in a search we will not do a renavigation later on
		if (bIsRefresh){
			//in this case not confirmed search text will be replaced by last entered
			var sTempSearchField = oController._oControlStore.sMasterSearchText;
			if (sTempSearchField === null){
				sTempSearchField = "";
			}
			oController._oControlStore.oMasterSearchField.setValue(sTempSearchField);
			//bManualMasterRefresh is use as additional information in the _scfldOnMasterListRefresh event
			this.oApplicationImplementation.bManualMasterRefresh = true;
		} else {
			var sTempSearchField = oController._oControlStore.oMasterSearchField.getValue();
		}
		var oList = oController.getList();
		//collect selected list items
		this.oApplicationImplementation.aKeyValues = null;
		if (this.oApplicationImplementation.aMasterKeys) {
			var aItems = oList.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				var oListItem = aItems[i];
				if (oListItem.getSelected()) {
					this.oApplicationImplementation.aKeyValues = [];
					//TODO oController.sModelName is undefined initially until the application has called
					//		ScfldMasterController.registerMasterListBind(sModelName).
					//		This works accidentally because default model has name undefined.
					var oItemBinding = oListItem.getBindingContext(oController.sModelName);
					for ( var j = 0; j < this.oApplicationImplementation.aMasterKeys.length; j++) {
						this.oApplicationImplementation.aKeyValues.push(oItemBinding
								.getProperty(this.oApplicationImplementation.aMasterKeys[j]));
					}
					i = aItems.length;
				}
			}
		}
		// give the application the possibility to step in. There are two possible scenarios for this:
		// 1. Application might want to prevent the refresh (e.g. because there are unsaved	changes)
		// 2. List is not bound to an oData model but to a json model -> must do refresh themselves
		if (oController._oHeaderFooterOptions.onRefresh) {
			var fRefreshCompleted = jQuery.proxy(function() {
				this.oApplicationImplementation.onMasterRefreshed(oController);
				if (oController._oControlStore.oMasterPullToRefresh) {
					oController._oControlStore.oMasterPullToRefresh.hide();
				}
			}, this);
			// possible outcomes:
			// >0: proceed as normal
			// =0: refresh has been aborted
			// <0: App will perform the refresh itself and call fRefreshCompleted when finished
			var iDecision = oController._oHeaderFooterOptions.onRefresh(sTempSearchField, fRefreshCompleted);
			if (iDecision == 0) {
				this.aKeyValues = null;                           // prevent that this is used for future change events
				oController._oControlStore.bIsSearching = false;
				if (oController._oControlStore.oMasterPullToRefresh) {
					oController._oControlStore.oMasterPullToRefresh.hide();
				}
			}
			if (iDecision <= 0) {
				if (iDecision < 0) {this.setMasterListVisible(oController);}
				return;
			}
		}
		var oBinding = oController._oMasterListBinding;
		var bBackendCalled = !oBinding;
		if (oBinding){
			oBinding.attachChange(oController._onMasterListLoaded, oController);
			var fReceivedHandler = jQuery.proxy(function() {
				if (oController._oControlStore.oMasterPullToRefresh) {
					oController._oControlStore.oMasterPullToRefresh.hide();
				}
				if (bIsBackendSearch){
					oController._oControlStore.sMasterSearchText = sTempSearchField;
					oController._oControlStore.oMasterSearchField.setValue(oController._oControlStore.sMasterSearchText);
				}
				oBinding.detachDataReceived(fReceivedHandler);
			}, this);

			//will be called synchronously
			var fRequestedHandler = jQuery.proxy(function() {
				bBackendCalled = true;
				oBinding.detachDataRequested(fRequestedHandler);
			}, this);

			oBinding.attachDataRequested(fRequestedHandler);
			oBinding.attachDataReceived(fReceivedHandler);
		}
		if (bIsBackendSearch && !bIsRefresh) {
			//we always give the application the hook independent from oBinding state
			var bSearchRejected = oController.applyBackendSearchPattern(sTempSearchField, oBinding);
			if (bSearchRejected) {
				oBinding.detachDataRequested(fRequestedHandler);
				oBinding.detachDataReceived(fReceivedHandler);
				return; //Application said no refresh
			}
			//check if App has replaced the binding
			if (oBinding && oBinding != oController._oMasterListBinding){
				oBinding.detachDataRequested(fRequestedHandler);
				oBinding.detachDataReceived(fReceivedHandler);
				oController._oControlStore.sMasterSearchText = sTempSearchField;
				// backend call should have already been triggered by replacing the binding
				this.setMasterListVisible(oController);
				return;
			}
		}

		//if application does not bind because of invalid search pattern (e.g. too little characters)
		if ((bIsBackendSearch || bIsRefresh) && (!bBackendCalled && oController._oMasterListBinding)) {
			oController._oMasterListBinding.refresh();
		}

		this.setMasterListVisible(oController);
	},

	setMasterListVisible: function(oController){
		//if live search and backend search are both active it can happen that the master list is still
		//set to invisible (after a unsuccessful live search) when a backend search/refresh is done
		//-> make sure to display the master list after a refresh/backend search
		if (oController._emptyList && !oController._emptyList.hasStyleClass("hiddenList")){
//			oController._emptyList.setVisible(false);
//			oController.getList().setVisible(true);
			oController._emptyList.addStyleClass("hiddenList");
			oController.getList().removeStyleClass("hiddenList");
		}
	},

	defineMasterTitle : function(oController, oCustHeader, iCount) {
		var sTitleId;
		if (!oController._oHeaderFooterOptions.sI18NMasterTitle) {
			return;
		}
		if (!oController._oControlStore.oMasterTitle) {
			if (this.oCommonHeaderFooterHelper.isUsingStableIds()) {
				sTitleId = oController._oHeaderFooterOptions.sMasterTitleId;
				sTitleId = this.oCommonHeaderFooterHelper.createId(oController, sTitleId);
			}
			oController._oControlStore.oMasterTitle = new sap.m.Title(sTitleId, {level: sap.ui.core.TitleLevel.H2});
			oController.getList().addAriaLabelledBy(oController._oControlStore.oMasterTitle);
			oCustHeader.addContentMiddle(oController._oControlStore.oMasterTitle);
		}
		this.setMasterTitle(oController, iCount);
	},

	setMasterTitle : function(oController, iCount) {
		if (!oController._oControlStore.oMasterTitle) {
			return;
		}
		var oBundle = this.oApplicationImplementation.AppI18nModel.getResourceBundle();
		var sTitle = oBundle.getText(oController._oHeaderFooterOptions.sI18NMasterTitle, [iCount]);
		oController._oControlStore.oMasterTitle.setText(sTitle);
	},

	// handle standard edit button
	defineEditButton : function(oController, oCustHeader) {
		var sId;
		if (oController._oHeaderFooterOptions.onEditPress || oController._oHeaderFooterOptions.oEditBtn) {
			if (!oController._oControlStore.oEditBtn) {
				var sId = oController._oHeaderFooterOptions.oEditBtn
					&& this.oCommonHeaderFooterHelper.createId(oController,
						oController._oHeaderFooterOptions.oEditBtn.sId);
				if (!sId) {
					sId = this.oCommonHeaderFooterHelper.createId(oController, "scfld_EDIT");
				}
				oController._oControlStore.oEditBtn = new sap.m.Button({id: sId});
				oCustHeader.addContentRight(oController._oControlStore.oEditBtn);
				oController._oControlStore.oEditBtn.attachPress(jQuery.proxy(function() {
					if (oController._oControlStore.bEditState) {
						oController._oControlStore.oEditBtn.setIcon("sap-icon://multi-select");
						oController._oControlStore.oEditBtn.setTooltip(
							this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("MULTI_SELECT"));
					} else {
						oController._oControlStore.oEditBtn.setIcon("sap-icon://sys-cancel");
						oController._oControlStore.oEditBtn.setTooltip(
							this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("CANCEL"));
					}
					oController._oControlStore.bEditState = !oController._oControlStore.bEditState;
					(oController._oHeaderFooterOptions.onEditPress || oController._oHeaderFooterOptions.oEditBtn.onBtnPressed)(oController._oControlStore.bEditState);
				}, this));
			}
			if (oController._oControlStore.bEditState) {
				oController._oControlStore.oEditBtn.setIcon("sap-icon://sys-cancel");
				oController._oControlStore.oEditBtn.setTooltip(
						this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("CANCEL"));
			} else {
				oController._oControlStore.oEditBtn.setIcon("sap-icon://multi-select");
				oController._oControlStore.oEditBtn.setTooltip(
						this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("MULTI_SELECT"));
			}
			oController._oControlStore.oEditBtn.setVisible(true);
			oController._oControlStore.oEditBtn.setEnabled(!(!(oController._oHeaderFooterOptions.onEditPress || !oController._oHeaderFooterOptions.oEditBtn.bDisabled) || oController._oControlStore.bAllDisabled));
			if (oController._oHeaderFooterOptions.oEditBtn && oController._oHeaderFooterOptions.oEditBtn.sId) {
				oController._oControlStore.oButtonListHelper.mButtons[oController._oHeaderFooterOptions.oEditBtn.sId] = oController._oControlStore.oEditBtn;
			}
		} else if (oController._oControlStore.oEditBtn) {
			oController._oControlStore.oEditBtn.setVisible(false);
		}
	},

	defineSettingsButton : function(oController) {
		this.oCommonHeaderFooterHelper.createSettingsButton(oController);
	},

	defineFooterRight : function(oController) {
		var iFooterRightCount = this.getFooterRightCount(oController);
//		this.oCommonHeaderFooterHelper.getGenericButtons(iFooterRightCount, oController,
//				oController._oControlStore.oButtonListHelper);
		if (oController._oHeaderFooterOptions.buttonList) {
			for ( var i = 0; i < oController._oHeaderFooterOptions.buttonList.length; i++) {
				var oBtnMeta = {};
				jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.buttonList[i]);
				delete oBtnMeta.sIcon;
				if (this.oCommonHeaderFooterHelper.isUsingStableIds()) {
					this.oCommonHeaderFooterHelper.addIds(oBtnMeta,
						oController._oHeaderFooterOptions.buttonList[i].sId,
						oController,
						undefined
					);
				}
				oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b", iFooterRightCount);
			}
		}
		this.oCommonHeaderFooterHelper.getGenericButtons(iFooterRightCount, oController,
		oController._oControlStore.oButtonListHelper);

		if (oController._oHeaderFooterOptions.onAddPress || oController._oHeaderFooterOptions.oAddOptions) {
			this.addAddButton(oController);
		}
	},

	getFooterRightCount : function(oController) {
		var iSmall = 1;
		var iMedium = 2;
		var iLimit = iSmall;

		var iGenCount = this.oCommonHeaderFooterHelper.getGenericCount(oController);
		var iActCount = this.oCommonHeaderFooterHelper.getActionsCount(oController, true);

		if ( this.oApplicationImplementation.bIsPhone
				&& sap.ui.Device.orientation.landscape ){
				if (iActCount === 1 && iGenCount < 4){
					return iActCount + iGenCount;
				}
				iLimit = iMedium;
			}
		// avoid that the overflow contains only one generic item
		if (iActCount === 0) {
			return 3;
		}
		if (iActCount === iLimit && iGenCount === 1) {
			return iLimit + 1;
		}
		return iLimit;
	},

	addAddButton : function(oController) {
		if (oController._oHeaderFooterOptions.onAddPress) {
			var oBtnMeta = {
				onBtnPressed : oController._oHeaderFooterOptions.onAddPress,
				sTooltip: this.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("ADD")
			};
		} else {
			var oBtnMeta = {};
			jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.oAddOptions);
			delete oBtnMeta.sBtnText;
			delete oBtnMeta.sI18nBtnTxt;
		}
		if (this.oCommonHeaderFooterHelper.isUsingStableIds()) {
			this.oCommonHeaderFooterHelper.addIds(oBtnMeta,
				oController._oHeaderFooterOptions.oAddOptions
					? oController._oHeaderFooterOptions.oAddOptions.sId : undefined,
				oController, "scfld_ADD");
		}
		oBtnMeta.sIcon = "sap-icon://add";
		oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b");
	}

});

}; // end of sap/ca/scfld/md/app/MasterHeaderFooterHelper.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright
 *         2009-2014 SAP SE. All rights reserved
 *     
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ca.scfld.md (1.50.0)
 */
jQuery.sap.declare("sap.ca.scfld.md.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: Scaffolding for Master Detail applications
 *
 * @namespace
 * @name sap.ca.scfld.md
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.ca.scfld.md",
	dependencies : ["sap.ui.core","sap.m","sap.ca.ui"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	noLibraryCSS: true,
	version: "1.50.0"
});


}; // end of sap/ca/scfld/md/library.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.BarOverflow') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare('sap.ca.scfld.md.app.BarOverflow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ca/scfld/md/app/BarOverflow",['sap/ui/base/Object', "./BarOverflowLayoutData", "sap/ui/core/ResizeHandler"],
	function(fnUi5Object, fnBarOverflowLayoutData, fnResizeHandler) {
		"use strict";

		var BarOverflow = fnUi5Object.extend("sap.ca.scfld.md.app.BarOverflow", {

			constructor : function(oBar, oActionSheet, fnResized) {

				//Call base
				fnUi5Object.apply(this, arguments);

				//Init privates
				this._oBar = oBar;
				this._oActionSheet = oActionSheet;
				this._previousBarWidth = 0;
				this._bActionSheetGotCleared = false;
				this._bInitialized = false;
				this._fnResized = fnResized;

				//Event delegate to attach to the bar's rendering cycle
				this._oEventDelegate = {
					onAfterRendering : this._attachResize,
					onBeforeRendering : this._detachResize
				};

				//If the bar is already rendered, handle an initial sizechange
				if (oBar.getDomRef()) {
					this._handleSizeChange();
				}

				//attach to bar's rendering cycle
				oBar.addEventDelegate(this._oEventDelegate, this);

			},

			/**
			 * @internal Invalidates the BarOverflow, since the size of one of its contents has changed
			 */
			buttonTextChanged : function () {
				if (this._iTimeout) {
					return;
				}

				var that = this;

				this._iTimeout = setTimeout(function () {
					that._handleSizeChange(true);
					that._iTimeout = null;
				}, 0);
			},

			/**
			 * @private detaches the BarOverflow from the resize handler
			 */
			_detachResize : function () {
				if (this._sResizeListenerId === undefined) {
					return;
				}

				fnResizeHandler.deregister(this._sResizeListenerId);
				this._sResizeListenerId = undefined;
			},

			/**
			 * @private attaches the BarOverflow to the resize handler, using the bar's dom reference
			 */
			_attachResize : function () {
				// Bar is not rendered - no resize will take place
				if (!this._oBar.getDomRef()) {
					return;
				}

				// Already attached
				if (this._sResizeListenerId !== undefined) {
					return;
				}

				// handle the size change since this gets called after a rendering
				this._handleSizeChange();

				// attach to the resize handler to be informed about changes of the bar width
				this._sResizeListenerId = fnResizeHandler.register(this._oBar.getDomRef(), jQuery.proxy(this._handleSizeChange, this));
			},

			/**
			 * @private used to remember the positions of the content to keep the order of the buttons after moving them between action sheet and bar
			 */
			_initialize : function () {
				var aBarContent = this._oBar.getContentRight();
				this._bInitialized = true;

				this._oControlOrder = {};

				//First add all the buttons in the bar
				aBarContent.forEach(function (oControl, iIndex) {
					this._oControlOrder[oControl.sId] = {
						index : iIndex
					};
				}, this);

				//Then the buttons of the action sheet
				this._oActionSheet.getButtons().forEach(function (oControl, iIndex) {

					this._oControlOrder[oControl.sId] = {
						index : iIndex + aBarContent.length
					};

				}, this);
			},

			/**
			 * @private moves the content of the action sheet to the bar, and sorts the content afterwards
			 */
			_clearActionSheet : function () {
				this._bActionSheetGotCleared = true;
				if (this._fnResized) {
					this._fnResized();
				}
			},

			/**
			 * @private Calculate the width of the left area of the footer bar.
			 * @return {int}
			 *   The width of the left footer bar
			 */
			_calculateLeftWidth: function () {
				// TODO this accesses internal data of the Bar control
				var $LeftBar = this._oBar._$LeftBar,
					iWidth = 0,
					sLeftBarWidth;
				if ($LeftBar) {
					sLeftBarWidth = $LeftBar.css("width");
					$LeftBar.css({width: "", visibility: "hidden"});
					iWidth = $LeftBar.outerWidth(true);
					$LeftBar.css({width: sLeftBarWidth, visibility: ""});
				}
				return iWidth;
			},

			/**
			 * @private should be called after a rerendering/sizechange of the bar, will be called multiple times, because
			 * multiple rerenderings will be triggered by this function.
			 * Here is a rerendering cycle:
			 *
			 * 1 - render Bar (triggered by application or initial one)
			 * 2 - if action sheet has content - move all controls from the action sheet to the bar
			 * 3 - render Bar (only if step 2 applied)
			 * 4 - move all the controls that do not fit to the action sheet
			 * 5 - render Bar (only if step 4 moved something)
			 *
			 */
			_handleSizeChange : function (bContentChanged) {
				var iBarWidth = this._oBar.$().width() - this._calculateLeftWidth();

				//record the buttons index if it has not been done yet
				if (!this._bInitialized) {
					this._initialize();
				}

				// check if the bar's width is still the same and no text changed
				if (this._previousBarWidth === iBarWidth && !bContentChanged
						&& !this._bActionSheetGotCleared){
					//if the action sheet did not get cleared, we can stop processing here
					//since nothing changed
					return;
				}
				// there is actually a change of the bar or its content - clear the action sheet
				this._bActionSheetGotCleared = false;

				// If there is content in the action sheet, clear it
				if (this._oActionSheet.getButtons().length) {
					this._clearActionSheet();

					// We need to restore the original state - all buttons to the bar.
					// while doing this, bar will get invalidated so it will hit this function again.
					// we can not immediately continue moving buttons from A to B
					return;
				}

				// Remember the bar width, since we will move controls to the overflow now
				this._previousBarWidth = iBarWidth;

				// nothing to do if the bar is empty
				if (!this._oBar.getContentRight().length) {
					return;
				}

				// move the controls over to the action sheet
				this._moveControlsToOverflow(iBarWidth);
			},

			/**
			 * @private loops through the controls of the bar, retrieves their width and then calculates the resulting overflow in px.
			 * keeps track of layoutData and the width of the buttons.
			 */
			_calculateOverflowData : function (iBarWidth) {

				var iBarContentWidth = 0,
					oOverflowButtonInfo = null,
					aButtonInfos = [];

				this._oBar.getContentRight().forEach(function (oControl) {
					var bIsOverflowButton = false,
						//include the margins for the calculation, since the bar will add margins
						iWidthIncludingMargin = oControl.$().outerWidth(true),
						oButtonInfo = {
							stayInOverflow : false,
							isOverflowButton : bIsOverflowButton,
							moveToOverflow : true,
							control : oControl,
							width : iWidthIncludingMargin
						};

					//remember the layout data
					var oLayoutData = oControl.getLayoutData();
					if (oLayoutData instanceof fnBarOverflowLayoutData) {
						bIsOverflowButton = oLayoutData.getOverflowButton();
						oButtonInfo.stayInOverflow = oLayoutData.getStayInOverflow();
						oButtonInfo.isOverflowButton = bIsOverflowButton;

						if (!bIsOverflowButton) {
							oButtonInfo.moveToOverflow = oLayoutData.getMoveToOverflow();
						} else {
							// TODO avoid hard coded width (if button is hidden it does not have
							// a width)
							if (!iWidthIncludingMargin) {
								iWidthIncludingMargin = 48;
								oButtonInfo.width = iWidthIncludingMargin;
							}
							oOverflowButtonInfo = oButtonInfo;
							oButtonInfo.moveToOverflow = false;
						}
					}

					var sControlName = oControl.getMetadata().getName();

					if (sControlName !== "sap.m.Button" && sControlName !== "sap.m.Select") {
						//Only move buttons and selects to the overflow
						oButtonInfo.moveToOverflow = false;
					}

					//needed to move the buttons to the action sheet later
					aButtonInfos.push(oButtonInfo);

					//add the width of the control to the total width
					iBarContentWidth += iWidthIncludingMargin;

				}, this);

				//calculate the overflow
				var iOverflowInPx = iBarContentWidth - iBarWidth;

				return {
					buttonInfos : aButtonInfos,
					overflowInPx : iOverflowInPx,
					overflowButtonInfo : oOverflowButtonInfo
				};
			},

			/**
			 * @private moves the controls that do not fit to the bar to the actionsheet.
			 * It starts with the leftmost item and will take the layout data into account.
			 */
			_moveControlsToOverflow : function (iBarWidth) {

				var oOverflowData = this._calculateOverflowData(iBarWidth),
					aButtonInfos = oOverflowData.buttonInfos,
					iOverflowInPx = oOverflowData.overflowInPx,
					bHasButtonInActionSheet = false,
					oOverflowButtonInfo = oOverflowData.overflowButtonInfo,
					aStayInOverflowButtons = [],
					aButtonsToMove = [];

				// Move all the buttons that are forced to the overflow first.
				aButtonInfos = aButtonInfos.filter(function (oButtonInfo) {

					if (!oButtonInfo.stayInOverflow) {
						return true;
					}

					bHasButtonInActionSheet = true;
					iOverflowInPx -= oButtonInfo.width;
					aStayInOverflowButtons.push(oButtonInfo.control);

					return false;
				}, this);

				if (oOverflowButtonInfo) {
					if (!bHasButtonInActionSheet &&
							(iOverflowInPx - oOverflowButtonInfo.width <= 0)) {
						iOverflowInPx -= oOverflowButtonInfo.width;
					}

				}

				// Rightmost button should disappear first
				aButtonInfos.reverse();

				aButtonInfos.some(function (oButtonInfo) {
					// If there is no overflow there is no need to move a control
					var bHasNoOverflow = iOverflowInPx <= 0;

					if (bHasNoOverflow) {
						// will stop iterating after overflow got eliminated
						return bHasNoOverflow;
					}

					// here we are sure, the bar is overflowing or the control should stay in the overflow. - move it to the action sheet and reduce the overflow by the controls width
					if (oButtonInfo.moveToOverflow) {
						iOverflowInPx -= oButtonInfo.width;
						aButtonsToMove.push(oButtonInfo.control);
					}
				});

				// In the action sheet we need the original order again
				aButtonsToMove.reverse();

				// The buttons with stay in overflow come last
				aButtonsToMove = aButtonsToMove.concat(aStayInOverflowButtons);

				if (aButtonsToMove.length > 0) {
					if (this._fnResized) {
						this._fnResized(aButtonsToMove);
					}
				} else {
					// if there are no buttons to move to overflow close the action sheet if it
					// is open
					if (this._oActionSheet.isOpen()) {
						this._oActionSheet.close();
					}
				}
			},

			/**
			 * @public
			 * cleans up the events of the controls BarOverflow registered to.
			 */
			destroy : function () {

				// if bar overflow gets destroyed close action sheet if it is open
				if (this._oActionSheet.isOpen()) {
					this._oActionSheet.close();
				}

				//Call base
				fnUi5Object.apply(this, arguments);

				this._oBar.removeEventDelegate(this._oEventDelegate, this);
				this._detachResize();
			}
		});


		return BarOverflow;

}, /* bExport= */ true);

}; // end of sap/ca/scfld/md/app/BarOverflow.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.ButtonListHelper') ) {
/*
 * Copyright (C) 2009-2016 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.ButtonListHelper");
jQuery.sap.require('sap.ca.ui.dialog.Dialog'); // unlisted dependency retained



jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained


(function () {
	var DEBUG = jQuery.sap.log.isLoggable(jQuery.sap.log.Level.DEBUG),
		CLASSNAME = "sap.ca.scfld.md.app.ButtonListHelper";

	/**
	 * Iterate over the array of controls (this.aButtons) and search the given button/select.
	 * @param {array} aControlObjects
	 *    Array of control objects as defined internally in ButtonListHelper.
	 * @param {sap.ui.core.Control} oControl
	 *    Control which is searched within given control objects array.
	 * @returns {oObject}
	 *    the internal representation of the control as stored in aButtons array of
	 *    ButtonListHelper.
	 */
	function findControlObject(aControlObjects, oControl) {
		var i, oObject;
		for (i = aControlObjects.length - 1; i >= 0; i -= 1) {
			oObject = aControlObjects[i];
			if (oObject.oButton === oControl || oObject.oSelect === oControl) {
				return oObject;
			}
		}
		return null;
	}

	/**
	 * Searches in the given control array if it contains an element matching the given control
	 * info.
	 *
	 * @param {object} aControls
	 *   An array of controls in which the element is searched.
	 * @param {object} oControlInfo
	 *   The control info of the element to search for
	 * @returns {sap.ui.core.Control}
	 *   The matching control out of the given list
	 */
	function findMatchingElement(aControls, oControlInfo) {
		var oControl, i, max,
			sId = oControlInfo.id,
			bIsButton,
			sText,
			sTooltip;

		for (i = 0, max = aControls.length; i < max; i++) {
			oControl = aControls[i];
			if (sId === oControl.getId()) {
				return oControl;
			}
			// icon does not change when moving between footer and overflow
			if (oControlInfo.icon === oControl.getIcon()) {
				bIsButton = oControl.getMetadata().getName() === "sap.m.Button";
				sTooltip = oControl.getTooltip() || oControl._sTooltip
					|| (bIsButton ? oControl.getText() : undefined);
				sText = bIsButton
					? oControl.getText() || oControl._sTextInActionSheet
					: oControlInfo.text; // selects do not have any text
				if (oControlInfo.tooltip === sTooltip && oControlInfo.text === sText) {
					return oControl;
				}
			}
		}
	}

	/**
	 * Find the element with a given ID in the given controls array and return information about
	 * the area, position and the control itself.
	 *
	 * @param {string} sFocusedId
	 *   The control ID of the focused element which needs to be searched in the given controls
	 *   array
	 * @param {sap.ui.core.Control[]} aControls
	 *   An array of controls in which to search the element with the given ID
	 * @param {string} sArea
	 *   The name of the area
	 * @returns {object}
	 *   An object containing information about the focused element or undefined if no element is
	 *   found.
	 *   The resulting object has following structure { area : string, pos : number, controlInfo :
	 *   { icon : string, id : string, tooltip : string, text : string } }
	 */
	function getFocusInfoForId(sFocusedId, aControls, sArea) {
		var oControl, i, bIsButton, max;

		for (i = 0, max = aControls.length; i < max; i++) {
			oControl = aControls[i];
			if (oControl.getId() === sFocusedId) {
				bIsButton = oControl.getMetadata().getName() === "sap.m.Button";
				return {
					area : sArea,
					pos : i,
					controlInfo : {
						icon : oControl.getIcon(),
						id : oControl.getId(),
						text : (bIsButton ? oControl.getText() : "")
							|| oControl._sTextInActionSheet,
						tooltip : oControl.getTooltip() || oControl._sTooltip
							|| (bIsButton ? oControl.getText() : "")
					}
				};
			}
		}
	}

	/**
	 * Search the overflow button in given control array.
	 *
	 * @param {sap.ui.core.Control[]} aControls
	 *    The entries are of type sap.ui.core.Control
	 * @returns {number}
	 *    the index of the overflow button within the array of given controls or undefined if not
	 *    found.
	 *
	 */
	function getIndexOfOverflow(aControls) {
		var i, oButton, oLayoutData;
		for (i = aControls.length - 1; i >= 0; i -= 1) {
			oButton = aControls[i];
			oLayoutData = oButton.getLayoutData();
			if (oLayoutData instanceof sap.ca.scfld.md.app.BarOverflowLayoutData
					&& oLayoutData.getOverflowButton()) {
				return i;
			}
		}
	}

	/**
	 * Find next visible control in given controls array starting with given position.
	 * If there are no visible elements after given position search backwards.
	 *
	 * @param {sap.ui.core.Control[]} aControls
	 *    The list of controls; must not be undefined
	 * @param {number} iStart
	 *    The start index
	 * @returns {sap.ui.core.Control}
	 *    The closest visible control or undefined if no control found
	 */
	function getNextVisibleElement(aControls, iStart) {
		var i = iStart, iMax = aControls.length, oResult;
		while (i < iMax) {
			oResult = aControls[i];
			if (oResult.getVisible()) {
				return oResult;
			}
			i++;
		}
		// no element found search backwards
		i = iStart - 1;
		while (i >= 0) {
			oResult = aControls[i];
			if (oResult.getVisible()) {
				return oResult;
			}
			i--;
		}
		return undefined;
	}

	/**
	 * Get text from resource bundle or from given button meta data.
	 *
	 * @param {object} oBtnMeta
	 *   Button metadata; oBtnMeta.sI18nBtnTxt or oBtnMeta.sBtnTxt are used to determine the text.
	 */
	function getText(oBtnMeta, oApplicationImplementation) {
		var sText;
		if (oBtnMeta.sI18nBtnTxt) {
			var oBundle = oApplicationImplementation.AppI18nModel.getResourceBundle();
			sText = oBundle.getText(oBtnMeta.sI18nBtnTxt);
		} else {
			sText = oBtnMeta.sBtnTxt;
		}
		return sText;
	}

	/**
	 * After resize controls need to be moved from bar to overflow or back.
	 * @param {sap.ui.core.Control[]} aControls
	 *    The entries are of type sap.ui.core.Control
	 *    If array is undefined all controls from overflow will be added to the bar again.
	 *    If array contains entries these entries will be moved from bar to overflow.
	 */
	function resized(aControls) {
		var oBar = this.oBar,
			bAddedToActionSheet = false,
			oActionSheet = this.oOverflowList.oActionSheet,
			aButtons, i, oControlObject, iIndexOfOverflow, oControl;

		if (aControls === undefined) {
			// move all to bar
			aButtons = oActionSheet.getButtons();
			iIndexOfOverflow = getIndexOfOverflow(this.oBar.getContentRight());
			for (i = 0; i < aButtons.length; i += 1) {
				oControlObject = findControlObject(this.aButtons, aButtons[i]);
				if (oControlObject.oSelect) {
					oControl = oControlObject.oSelect;
					oControl.setVisible(true);
					if (oControlObject.oButton) {
						oControlObject.oButton.setVisible(false);
					}
					// remove button
					oActionSheet.removeButton(aButtons[i]);
				} else {
					oControl = oControlObject.oButton;
					// adjust representation text, tooltip and style might be different
					if (oControl._sTextInBar !== undefined) {
						oControl.setText(oControl._sTextInBar);
					}
					if (oControl._sTypeInBar !== undefined) {
						oControl.setType(oControl._sTypeInBar);
					}
					if (oControl._sTooltip !== undefined) {
						oControl.setTooltip(oControl._sTooltip);
					}
				}
				oBar.insertContentRight(oControl,iIndexOfOverflow);
				iIndexOfOverflow++;
			}
			// finally make overflow button invisible
			oBar.getContentRight()[iIndexOfOverflow].setVisible(false);

			//TODO: remove me when UI5 fixes a bug that popup does not clear the domref if it was opened once and then is closed
			if (oActionSheet.isOpen()) {
				oActionSheet.attachEventOnce("afterClose", function () {
					oActionSheet.$().remove();
				});
			} else {
				oActionSheet.$().remove();
			}

		} else {
			// move given controls to overflow
			aControls.forEach(function (oControl) {
				oControlObject = findControlObject(this.aButtons, oControl);
				if (!oControlObject) {
					jQuery.sap.log.error("Unsupported control - " + oControl.toString());
				}
				if (oControlObject.oSelect) {
					// remove the select control from the bar
					oBar.removeContentRight(oControlObject.oSelect);
				}
				if (oControlObject.oButton) {
					oControl = oControlObject.oButton;
					// adjust representation text, tooltip and style might be different
					if (oControl._sTextInActionSheet !== undefined) {
						oControl.setText(oControl._sTextInActionSheet);
						if (oControl._sTextInActionSheet === oControl._sTooltip) {
							oControl.setTooltip("");
						}
					}
					if (oControl._sTypeInActionSheet !== undefined) {
						oControl.setType(oControl._sTypeInActionSheet);
					}
					oControl.setVisible(true);
					if (oControlObject.oSelect) {
						oControlObject.oSelect.setVisible(false);
					}
					oActionSheet.addButton(oControl);
					bAddedToActionSheet = true;
				} else {
					jQuery.sap.log.error("No button representation for control - "
						+ oControl.toString());
				}
			}, this);
			// if at least one element has been added to action sheet make overflow button visible
			if (bAddedToActionSheet) {
				oBar.getContentRight()[getIndexOfOverflow(this.oBar.getContentRight())]
					.setVisible(true);
			}
		}

	}

sap.ui.base.Object.extend("sap.ca.scfld.md.app.ButtonListHelper", {

	constructor : function (oApplicationImplementation, iMode, bAllDisabled, bAutomaticOverflow,
			sOverflowId) {
		this.oApplicationImplementation = oApplicationImplementation;
		this.bAutomaticOverflow = bAutomaticOverflow;
		this.sOverflowId = sOverflowId;
		this.oOverflowButton = undefined; // create button lazy
		this.iMode = iMode;
		if (this.iMode == 20) {
			this.oBar = new sap.m.Bar();
		} else if (this.iMode >= 10) {
			this.oActionSheet = new sap.m.ActionSheet();
			this.oActionSheet.setPlacement(sap.m.PlacementType.Top);
			this.oActionSheet.setShowCancelButton(true);
		}
		this.aButtons = [];
		this.bAllDisabled = bAllDisabled;
		this.startBuild();
		if (this.iMode == 25) {
			this.sDirection = "Left";
		} else {
			this.sDirection = "Right";
		}
		this.mSelections = {};
	},

	addButtonListHelper : function (oButtonListHelper) {
		if (this.oChild) {
			this.oChild.addButtonListHelper(oButtonListHelper);
		} else {
			this.oChild = oButtonListHelper;
			oButtonListHelper.bAllDisabled = this.bAllDisabled;
			delete oButtonListHelper.oModifications;
		}
	},

	/**
	 * Find the control fitting to the given focus information.
	 *
	 * @param {object} oFocusInfo
	 *   The information about the last focused element which has following structure
	 *   { area : string, pos : number, controlInfo :
	 *   { icon : string, id : string, tooltip : string, text : string } }
	 * @returns {sap.ui.core.Control} The control which best matches the given focus information;
	 *   might be undefined if no element could be found. If last focused element has been removed
	 *   take the closest control if possible.
	 */
	findFocusedElement : function (oFocusInfo) {
		var aControls, oElementToFocus;

		if (!oFocusInfo) { // no focus -> noting to do
			return undefined;
		}

		if (oFocusInfo.area === "left") {
			aControls = this.oBar && this.oBar.getContentLeft() || [];
			oElementToFocus = findMatchingElement(aControls, oFocusInfo.controlInfo);
		} else if (oFocusInfo.area === "right") {
			aControls = this.oBar && this.oBar.getContentRight() || [];
			oElementToFocus = findMatchingElement(aControls, oFocusInfo.controlInfo);
		} else if (oFocusInfo.area === "overflow") {
			// first search in right, if button has been moved to the footer
			aControls = this.oBar && this.oBar.getContentRight() || [];
			oElementToFocus = findMatchingElement(aControls, oFocusInfo.controlInfo);
			if (!oElementToFocus && this.oOverflowList && this.oOverflowList.oActionSheet) {
				// try overflow area
				oElementToFocus = findMatchingElement(
					this.oOverflowList.oActionSheet.getButtons() || [],
					oFocusInfo.controlInfo);
			}
		}
		if (oElementToFocus) {
			return oElementToFocus;
		}
		// element not found -> select the element next to the "lost" element
		if (aControls.length > 0) {
			oElementToFocus = getNextVisibleElement(aControls,
				Math.min(oFocusInfo.pos, aControls.length - 1));
			if (oElementToFocus) {
				return oElementToFocus;
			}
		}
		// there is no element left in the current are; select nearest element in the other area
		if (oFocusInfo.area === "left") {
			aControls = this.oBar && this.oBar.getContentRight() || [];
			return getNextVisibleElement(aControls, 0);
		} else {
			aControls = this.oBar && this.oBar.getContentLeft() || [];
			return  getNextVisibleElement(aControls, Math.max(0, aControls.length - 1));
		}
	},

	/**
	 * If focused element is part of this button list return information about the area, the
	 * position and some control attributes of the focused element.
	 *
	 * @param {object} [oShareSheet]
	 *   An optional 'sap.m.ActionSheet' in which the focused element is also searched
	 * @returns {object}
	 *   An object containing information about the focused element or undefined if no element is
	 *   found.
	 *   The resulting object has following structure { area : string, pos : number, controlInfo :
	 *   { icon : string, id : string, tooltip : string, text : string } }
	 */
	getFocusInfo : function (oShareSheet) {
		var oBar = this.oBar,
			sFocusedId = sap.ui.getCore().getCurrentFocusedControlId(),
			oFocusInfo;

		if (this._focusInfo) {
			oFocusInfo = this._focusInfo;
			this._focusInfo = undefined;
			return oFocusInfo;
		}

		if (!sFocusedId) {
			return undefined; // no focused element
		}

		if (this.oOverflowList) {
			oFocusInfo = this.oOverflowList.getFocusInfo();
			if (oFocusInfo) {
				oFocusInfo.area = "overflow"; // overwrite area
				return oFocusInfo;
			}
		}

		return oBar && getFocusInfoForId(sFocusedId, oBar.getContentLeft() || [], "left")
			|| oBar && getFocusInfoForId(sFocusedId, oBar.getContentRight() || [], "right")
			|| oShareSheet && getFocusInfoForId(sFocusedId, oShareSheet.getButtons() || [], "share")
			|| this.oActionSheet && getFocusInfoForId(sFocusedId, this.oActionSheet.getButtons() || [], "action")
			|| this.oClient && this.oClient.getFocusInfo();
	},

	startBuild : function (bKeepModifications) {
		this.mButtons = {};
		this.aCallBacks = [];
		this.oPositions = {
			iActive : 0,
			iControlPosition : 0
		};
		this.bHasOverflow = false;
		if (this.oChild) {
			this.oChild.startBuild(true);
		}
		if (this.oOverflowList) {
			this.oOverflowList.startBuild(true);
		}
		if (!bKeepModifications) {
		  this.oModifications = {
			  mChangedEnablements : {},
			  mChangedTexts : {}
		  };
		}
		// cleanup also bar, action sheet, bar overflow and overflow list
		this.aButtons = [];
		if (this.oActionSheet) {
			this.oActionSheet.destroyButtons();
		}
		if (this.oBar) {
			this.oBar.destroyContentRight();
			this.oBar.destroyContentLeft();
		}
		if (this.oBarOverflow) {
			this.oBarOverflow.destroy();
			delete this.oBarOverflow;
		}
		if (this.oOverflowList) {
			this.oOverflowList.destroy();
			delete this.oOverflowList;
		}
	},

	endBuild : function () {
		var sId;

		for (var i = this.oPositions.iActive; i < this.aButtons.length; i++) {
			var oControl = this.aButtons[i];
			if (oControl.oButton) {
				oControl.oButton.setVisible(false);
			}
			if (oControl.oSelect) {
				oControl.oSelect.setVisible(false);
			}
		}
		if (this.oChild) {
			this.oChild.endBuild();
		}
		if (this.oOverflowList) {
			this.oOverflowList.endBuild();
		}
		this.bIsOverflowReplaced = false;
		if (this.oModifications) {
			for (sId in this.oModifications.mChangedEnablements) {
				this.setBtnEnabled(sId, this.oModifications.mChangedEnablements[sId], true);
			}
			for (sId in this.oModifications.mChangedTexts) {
				this.setBtnText(sId, this.oModifications.mChangedTexts[sId], true);
			}
		}
		if (this.oBarOverflow) {
			// ensure that BarOverflow gets invalidated
			this.oBarOverflow.buttonTextChanged();
		}
	},

	destroy : function () {
		for (var i = 0; i < this.aButtons.length; i++) {
			var oControlObject = this.aButtons[i];
			if (oControlObject.oButton) {
				oControlObject.oButton.destroy(true);
			}
			if (oControlObject.oSelect) {
				oControlObject.oSelect.destroy(true);
			}
		}
		if (this.oBar) {
			this.oBar.destroy();
			delete this.oBar;
		}
		if (this.oActionSheet) {
			this.oActionSheet.destroy();
			delete this.oActionSheet;
		}
		if (this.oChild) {
			this.oChild.destroy();
			delete this.oChild;
		}
		if (this.oBarOverflow) {
			this.oBarOverflow.destroy();
			delete this.oBarOverflow;
		}
		if (this.oOverflowList) {
			this.oOverflowList.destroy();
			delete this.oOverflowList;
		}
	},

	/**
	 * Create an overflow button and add it to the bar. If automatic overflow is set a
	 * sap.ca.scfld.md.app.BarOverflow is registered.
	 * @return {sap.m.ActionSheet}
	 *   the action sheet in which the overflow content needs to be put in
	 */
	addOverflowButton: function () {
		var oActionSheet,
			oOverflow,
			that = this;
		if (!this.oOverflowList) {
			this.oOverflowList = new sap.ca.scfld.md.app.ButtonListHelper(this.oApplicationImplementation, 10);
			this.oOverflowList.bAllDisabled = this.bAllDisabled;
			this.oOverflowList.oBarList = this;
		}
		this.iOverflowPosition = this.oPositions.iActive;
		oOverflow = this.ensureButton(sap.ca.scfld.md.app.ButtonListHelper.getOverflowMeta(this), "b");
		this.oOverflowButton = oOverflow;
		// store button information also at oOverflowList
		this.oOverflowList.oOverflowButton = oOverflow;

		oOverflow.setEnabled(true);
		oOverflow.setLayoutData(new sap.ca.scfld.md.app.BarOverflowLayoutData({
			moveToOverflow: false,
			stayInOverflow: false,
			overflowButton: true
		}));

		oActionSheet = this.oOverflowList.oActionSheet;

		if (this.bAutomaticOverflow  && !this.oBarOverflow) {
			// If there is automatic overflow, the BarOverflow is able to move buttons to the
			// overflow if the bar would get too wide otherwise. However initially all buttons
			// will be rendered directly to the bar and the overflow button is unnecessary.
			// Moving will occur during rendering. To avoid flickering we make it invisible
			// initially. It will be made visible in BarOverflow._moveControlsToOverflow.
			oOverflow.setVisible(false);
			this.oBarOverflow = new sap.ca.scfld.md.app.BarOverflow(
				this.oBar,
				oActionSheet,
				resized.bind(that)
			);
		}

		return oActionSheet;
	},

	ensureButton : function (oBtnMeta, sType, iMaxCountBeforeOverflow) {
		var oControl;
		if (iMaxCountBeforeOverflow && this.oPositions.iActive >= iMaxCountBeforeOverflow) {
			if (!this.bHasOverflow) {
				this.addOverflowButton();
				this.bHasOverflow = true;
			}
			return this.oOverflowList.ensureButton(oBtnMeta, sType);
		}
		var iButtonsCount = this.oPositions.iActive;
		if (iButtonsCount == this.aButtons.length) {
			this.aButtons.push({});
		}

		oControl = this.ensureControlAtPosition(oBtnMeta, sType, iButtonsCount, this.oPositions);
		if (this.bAutomaticOverflow) {
			oControl.setLayoutData(new sap.ca.scfld.md.app.BarOverflowLayoutData());
			// if iMaxCountBeforeOverflow is not defined button must not go to overflow
			if (!iMaxCountBeforeOverflow) {
				oControl.getLayoutData().setMoveToOverflow(false);
			}
		}
		return oControl;
	},

	setBtnEnabled : function (sId, bEnabled, bNoStorage) {
		if (this.bAllDisabled) {
			return;
		}
		var oButton = this.mButtons[sId],
			oControlObject;
		if (oButton) {
			oButton.setEnabled(bEnabled);
			if (oButton.getMetadata().getName() === "sap.m.Select") {
				// select control adjust text of button representation only
				oControlObject = findControlObject(this.aButtons, oButton);
				oButton = oControlObject.oButton;
				// set enabled state of button replacement also
				if (oButton) {
					oButton.setEnabled(bEnabled);
				}
			}
		} else {
			if (this.oChild) {
				this.oChild.setBtnEnabled(sId, bEnabled, true);
			}
			if (this.oOverflowList) {
				this.oOverflowList.setBtnEnabled(sId, bEnabled, true);
			}
		}
		if (!bNoStorage) {
			this.oModifications.mChangedEnablements[sId] = bEnabled;
		}
	},

	ensureControlAtPosition : function (oBtnMeta, sType, iButtonsCount, oPositions) {
		var oControlObject = this.aButtons[iButtonsCount], sText, sTextInActionSheet,
			iControlPosition, oRet;
		if (sType == "b" || this.iMode < 20) { // selects are only possible in bars
			if (oControlObject.oSelect) {
				oPositions.iControlPosition = this.oBar["indexOfContent" + this.sDirection](oControlObject.oSelect);
				oControlObject.oSelect.setVisible(false);
			}
			if (oControlObject.oButton) {
				oControlObject.oButton.setVisible(true);
				if (this.oBar) {
					iControlPosition = this.oBar["indexOfContent" + this.sDirection](oControlObject.oButton);
					if (iControlPosition > oPositions.iControlPosition) {
						oPositions.iControlPosition = iControlPosition;
					}
				}
			} else {
				oControlObject.oButton = new sap.m.Button({id: oBtnMeta.sControlId});
				oControlObject.oButton.attachPress(jQuery.proxy(function (oEvent) {
					if (this.aCallBacks[iButtonsCount]) {
						this.aCallBacks[iButtonsCount](oEvent);
					}
				}, this));
				oPositions.iControlPosition++;
				if (this.iMode >= 20) {
					this.oBar["insertContent" + this.sDirection](oControlObject.oButton, oPositions.iControlPosition);
				} else if (this.iMode >= 10) {
					this.oActionSheet.addButton(oControlObject.oButton);
				} else if (this.iMode == 5) {
					this.oBar.insertContentLeft(oControlObject.oButton, oPositions.iControlPosition);
				}
			}
			sText = getText(oBtnMeta, this.oApplicationImplementation);
			sTextInActionSheet = sText;
			if (!(this.iMode < 20 || !oBtnMeta.sIcon)) {
				oControlObject.oButton._sTooltip = oBtnMeta.sTooltip || sText;
				oControlObject.oButton.setTooltip(oControlObject.oButton._sTooltip);
				sText = "";
			} else if (oBtnMeta.sTooltip && oBtnMeta.sTooltip !== sText) {
				oControlObject.oButton._sTooltip = oBtnMeta.sTooltip;
				oControlObject.oButton.setTooltip(oControlObject.oButton._sTooltip);
			}
			oControlObject.oButton._sTextInActionSheet = sTextInActionSheet;
			oControlObject.oButton._sTextInBar = sText;
			if (sText != oControlObject.oButton.getText()) {
				oControlObject.oButton.setText(sText);
			}
			oControlObject.oButton._sTypeInActionSheet = sap.m.ButtonType.Default;

			if (this.iMode == 20) { // styles are only used in bars
				if (oControlObject.oButton.getType() != oBtnMeta.style) {
					oControlObject.oButton.setType(oBtnMeta.style);
					oControlObject.oButton._sTypeInBar = oBtnMeta.style;
				}
			}
			if (sType == "b") {
				this.aCallBacks[iButtonsCount] = oBtnMeta.onBtnPressed;
			} else {
				this.aCallBacks[iButtonsCount] = this.getSelectReplacement(oBtnMeta);
			}
			oRet = oControlObject.oButton;
		} else { // select
			if (oControlObject.oButton) {
				oPositions.iControlPosition = this.oBar["indexOfContent" + this.sDirection](oControlObject.oButton);
				oControlObject.oButton.setVisible(false);
			}
			if (oControlObject.oSelect) {
				oControlObject.oSelect.setVisible(true);
				iControlPosition = this.oBar["indexOfContent" + this.sDirection](oControlObject.oSelect);
				if (iControlPosition > oPositions.iControlPosition) {
					oPositions.iControlPosition = iControlPosition;
				}

				var sCurrentSelectedKey = oControlObject.oSelect.getSelectedKey();
				oControlObject.oSelect.destroyItems();
				oControlObject.oSelect.setSelectedKey(sCurrentSelectedKey);

			} else {
				oControlObject.oSelect = new sap.m.Select({id: oBtnMeta.sControlId
					? oBtnMeta.sControlId + "_SELECT" : undefined});
				oControlObject.oSelect.setType(sap.m.SelectType.IconOnly);
				oControlObject.oSelect.setAutoAdjustWidth(true);
				oControlObject.oSelect.setTooltip(oBtnMeta.sTooltip);
				oPositions.iControlPosition++;
				this.oBar["insertContent" + this.sDirection](oControlObject.oSelect, oPositions.iControlPosition);
				oControlObject.oSelect.attachChange(jQuery.proxy(function (oEvent) {
					var sKey = oEvent.getSource().getSelectedKey();
					if (this.aCallBacks[iButtonsCount]) {
						this.aCallBacks[iButtonsCount](sKey);
					}
				}, this));
				// if responsive bar is used create also a button for that select
				if (this.bAutomaticOverflow && !oControlObject.oButton) {
					oControlObject.oButton = new sap.m.Button();
					oControlObject.oButton.setText(
						getText(oBtnMeta, this.oApplicationImplementation)
					);
					if (oBtnMeta.sIcon) {
						oControlObject.oButton.setIcon(oBtnMeta.sIcon);
					}
					oControlObject.oButton.attachPress(jQuery.proxy(function (oEvent) {
						var fnSelect = this.getSelectReplacement(oBtnMeta);
						if (fnSelect) {
							fnSelect(oEvent);
						}
					}, this));
					oControlObject.oButton.setEnabled(!oBtnMeta.bDisabled && !this.bAllDisabled);
				}
			}

			if (oBtnMeta.sSelectedItemKey) {
				oControlObject.oSelect.setSelectedItem(oBtnMeta.sSelectedItemKey);
			}

			for ( var i = 0; i < oBtnMeta.aItems.length; i++) {
				var oSettings = oBtnMeta.aItems[i], oItem;
				if (!oSettings.id && oBtnMeta.sControlId) {
					// use stable IDs
					oSettings.id = oControlObject.oSelect.getId() + "_" + i;
				}
				oItem = new sap.ui.core.Item(oSettings);
				oControlObject.oSelect.addItem(oItem);
			}

			if (oBtnMeta.sSelectedItemKey) {
				oControlObject.oSelect.setSelectedKey(oBtnMeta.sSelectedItemKey);
			}

			this.aCallBacks[iButtonsCount] = oBtnMeta.onChange;
			oRet = oControlObject.oSelect;
		}
		if (oBtnMeta.sIcon != oRet.getIcon()) {
			oRet.setIcon(oBtnMeta.sIcon);
		}
		if (oBtnMeta.sId) {
			this.mButtons[oBtnMeta.sId] = oRet;
		}
		oRet.setEnabled(!oBtnMeta.bDisabled && !this.bAllDisabled);
		oPositions.iActive++;
		return oRet;
	},

	/*
	 * getSelectReplacement: function(oBtnMeta){ return jQuery.proxy(function(oEvent){ var iButtonsCount =
	 * this.oBarList.iOverflowPosition; oPositions = { iActive : 0, iControlPosition :
	 * this.oBarList.oBar.indexOfContentRight(this.oBarList.aButtons[iButtonsCount].oButton), }; var oSelectMeta = {}
	 * jQuery.extend(oSelectMeta, oBtnMeta); var oBarList = this.oBarList; oSelectMeta.onChange = function(oKey){
	 * oBarList.revertOverflowReplacement(); oBtnMeta.onChange(oKey); };
	 * this.oBarList.ensureControlAtPosition(oSelectMeta, "s", iButtonsCount, oPositions); //
	 * this.oBarList.aButtons[iButtonsCount].oSelect.getPopup().open(); this.oBarList.bIsOverflowReplaced = true; },
	 * this); },
	 */

	getSelectReplacement : function (oBtnMeta) {
		var sSelectedItemKey = oBtnMeta.sSelectedItemKey,
			that = this;

		return function (oEvent) {
			var aItems = [];
			var iSelection = 0;
			for ( var i = 0; i < oBtnMeta.aItems.length; i++) {
				aItems.push({
					itemContent : oBtnMeta.aItems[i].text
				});
				if (oBtnMeta.aItems[i].key == sSelectedItemKey) {
					iSelection = i;
				}
			}
			sSelectedItemKey = oBtnMeta.aItems[iSelection].key;
			sap.ca.ui.dialog.selectItem.open({
				title : oEvent.getSource().getText(),
				items : aItems,
				defaultIndex : iSelection
			}, function (oResult) {
				var aControls = that.oActionSheet && that.oActionSheet.getButtons() || [],
					oFocusInfo,
					aSourceButton = findMatchingElement(aControls, {
						icon: oBtnMeta.sIcon,
						text: oBtnMeta.sBtnTxt,
						tooltip : oBtnMeta.sTooltip
					});
				if (DEBUG) {
					jQuery.sap.log.debug("Closed item selection for " + oBtnMeta.sBtnTxt,
						CLASSNAME);
				}
				// select replacement can happen only if a select control is rendered in an
				// overflow area; after closing the dialog the button which opened the dialog is
				// not visible any more --> focus the overflow button instead
				if (that.oOverflowButton) {
					if (aSourceButton && that.oBarList) {
						// store focus information for the button which opened the dialog at the
						// parent bar
						oFocusInfo = getFocusInfoForId(aSourceButton.getId(), aControls, "overflow");
						if (oFocusInfo) {
							oFocusInfo.pos = 1000;
							that.oBarList._focusInfo = oFocusInfo;
							if (DEBUG) {
								jQuery.sap.log.debug("Save focus information",
									JSON.stringify(oFocusInfo), CLASSNAME);
							}
						}
					}
					// if footer does not get modified by the application, set the focus to the
					// overflow button
					that.oOverflowButton.focus();
				}
				if (oResult.selectedIndex >= 0) {
					var sSelectedItemKeyNew = oBtnMeta.aItems[oResult.selectedIndex].key;
					if (sSelectedItemKeyNew != sSelectedItemKey) {
						sSelectedItemKey = sSelectedItemKeyNew;
						oBtnMeta.sSelectedItemKey = sSelectedItemKey;
					  oBtnMeta.onChange(sSelectedItemKey);
					}
				}
			});
		};
	},

	revertOverflowReplacement : function () {
		if (this.bIsOverflowReplaced) {
			this.ensureControlAtPosition(sap.ca.scfld.md.app.ButtonListHelper.getOverflowMeta(this), "b",
					this.iOverflowPosition, {});
			this.bIsOverflowReplaced = false;
		}
	},

	setBtnText : function (sId, sText, bNoStorage) {
		var oButton = this.mButtons[sId],
			oControlObject;
		if (oButton) {
			if (oButton.getMetadata().getName() === "sap.m.Select") {
				// if text is set, tooltip of select needs to be set
				oButton.setTooltip(sText);
				oButton._sTooltip = sText;
				// select control adjust text of button representation only
				oControlObject = findControlObject(this.aButtons, oButton);
				oButton = oControlObject.oButton;
			}
			if (oButton) {
				oButton.setText(sText);
				// if text is set, no tooltip is needed
				oButton.setTooltip("");
				oButton._sTooltip = "";
				if (oButton._sTextInBar) {
					oButton._sTextInBar = sText;
				}
				if (oButton._sTextInActionSheet) {
					oButton._sTextInActionSheet = sText;
				}
				if (this.oBarOverflow) {
					this.oBarOverflow.buttonTextChanged();
				}
			}
		} else {
			if (this.oChild) {
				this.oChild.setBtnText(sId, sText, true);
			}
			if (this.oOverflowList) {
				this.oOverflowList.setBtnText(sId, sText, true);
			}
		}
		if (!bNoStorage) {
			this.oModifications.mChangedTexts[sId] = sText;
		}
	},

	/**
	 * Helper to retrieve current selection for given generic button type.
	 * @param {string} sType
	 *     The type name of the generic button (e.g. "filter")
	 * @param {string} sDefaultKey
	 *     The key that should be used if there is no selection available
	 * @return {string}
	 *     The currently stored selected key for given generic button type
	 * @private
	 */
	_getCurrentSelection: function (sType, sDefaultKey) {
		if (!this.mSelections[sType]) {
			this.mSelections[sType] = sDefaultKey;
		}
		return this.mSelections[sType];
	},

	/**
	 * Update the selected key for given generic button type.
	 * @param {string} sType
	 *     The type name of the generic button (e.g. "filter")
	 * @param {string} sCurrentKey
	 *     The current selected key value for given generic button type
	 * @private
	 */
	_updateCurrentSelection: function (sType, sCurrentKey) {
		this.mSelections[sType] = sCurrentKey;
	}
});

sap.ca.scfld.md.app.ButtonListHelper.getOverflowMeta = function (oOwner) {
	return {
		sIcon : "sap-icon://overflow",
		sControlId : oOwner.sOverflowId,
		sTooltip: oOwner.oApplicationImplementation.UilibI18nModel.getResourceBundle().getText("MORE"),
		onBtnPressed : function (evt) {
			oOwner.oOverflowList.oActionSheet.openBy(evt.getSource());
		}
	};
};
})();

}; // end of sap/ca/scfld/md/app/ButtonListHelper.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.CommonHeaderFooterHelper') ) {
/*
 * Copyright (C) 2009-2016 SAP SE or an SAP affiliate company. All rights reserved
 */
(function () {
	var DEBUG = jQuery.sap.log.isLoggable(jQuery.sap.log.Level.DEBUG),
		CLASSNAME = "sap.ca.scfld.md.app.CommonHeaderFooterHelper";

jQuery.sap.declare("sap.ca.scfld.md.app.CommonHeaderFooterHelper");
jQuery.sap.require('sap.ushell.ui.footerbar.JamShareButton'); // unlisted dependency retained

jQuery.sap.require('sap.ushell.ui.footerbar.JamDiscussButton'); // unlisted dependency retained

jQuery.sap.require('sap.ushell.ui.footerbar.AddBookmarkButton'); // unlisted dependency retained


jQuery.sap.require('sap.ushell.services.AppConfiguration'); // unlisted dependency retained




/**
 * After re-creating footer bar elements try to reset the focus on the element which had the focus
 * before.
 *
 * @param {sap.ca.scfld.md.app.ButtonListHelper} oButtonListHelper
 *    The button list helper representing the current footer bar.
 * @param {sap.ca.scfld.md.app.CommonHeaderFooterHelper} oThat
 *    The CommonHeaderFooterHelper instance for which the focus needs to be restored
 */
function restoreFocus(oButtonListHelper, oThat) {
	var oElementToFocus,
		oFocus = oThat.focusInfo,
		oOverflow = oButtonListHelper.oOverflowButton;

	if (oFocus) {
		if (oFocus.area === "share") {
			// focused element was in share action sheet -> move focus to the share button
			oFocus.area = "right";
			oFocus.pos = 1000;
			oFocus.controlInfo = {
				icon : "sap-icon://action",
				text : "",
				tooltip : oThat.shareText
			};
		}
		oElementToFocus = oButtonListHelper.findFocusedElement(oFocus, oOverflow);
		if (oElementToFocus) {
			setTimeout(function () {
				if (!jQuery(oElementToFocus.$()[0]).is(":visible")) {
					oElementToFocus = oOverflow;
				}
				if (oElementToFocus) {
					oElementToFocus.focus();
					if (DEBUG) {
						jQuery.sap.log.debug("Restored focus on " + oElementToFocus.getId(),
							CLASSNAME);
					}
				}
				oThat.focusInfo = undefined;
			}, 100 /* to be sure to set focus after dynamic overflow is complete */);
		} else {
			oThat.focusInfo = undefined;
		}
	}
}

sap.ui.base.Object
		.extend("sap.ca.scfld.md.app.CommonHeaderFooterHelper", {
					constructor : function(oApplicationImplementation, detailHeaderFooterRules, bAutomaticOverflow) {
						this.oAppImp = oApplicationImplementation;
						this.detailHeaderFooterRules = detailHeaderFooterRules;
						this.bAutomaticOverflow = !!bAutomaticOverflow;
					},

					startBuild : function(oController, oOptions, oStartOptions, bKeepModifications) {
						var oControlStore = oController._oControlStore;

						oController._oHeaderFooterOptions = oOptions;
						var oPage = oController.getPage();
						if (oControlStore) {
							// store focus information; store information only once in one roundtrip
							if (!this.focusInfo) {
								this.focusInfo = oControlStore.oButtonListHelper.getFocusInfo(oControlStore.oShareSheet);
								if (DEBUG) {
									jQuery.sap.log.debug("Store focus information for " + oController.getMetadata().getName(),
										JSON.stringify(this.focusInfo), CLASSNAME);
								}
							}
							oController._oControlStore.oButtonListHelper.startBuild(bKeepModifications);
						} else {
							oController._oControlStore = {};
							if (oStartOptions) {
								jQuery.extend(oController._oControlStore, oStartOptions);
							}
							oController._oControlStore.oButtonListHelper =
								new sap.ca.scfld.md.app.ButtonListHelper(this.oAppImp, 20,
									oController._oControlStore.bAllDisabled,
									this.bAutomaticOverflow,
									this.createId(oController, "scfld_OVERFLOW")
								);
							this.oAppImp.registerExitModule(function(){
								var sKey, o;
								if (oController._oControlStore) {
									oController._oControlStore.oButtonListHelper.destroy();
									delete oController._oControlStore.oButtonListHelper;
									for (sKey in oController._oControlStore) {
										o = oController._oControlStore[sKey];
										if (o && typeof o.destroy === "function") {
											o.destroy();
										}
										delete oController._oControlStore[sKey];
									}
									delete oController._oControlStore;
								}
							});
							// make sure to remove the old (probably empty) footer before creating a new one
							// otherwise duplicate id problems may occur of static viewIds are used
							var oFooter = oPage.getFooter();
							if (oFooter && oFooter.destroy) {
									oFooter.destroy();
							}
							oPage.setFooter(oController._oControlStore.oButtonListHelper.oBar);
						}
						return oPage;
					},

					endBuild : function(oController) {
						var oButtonListHelper = oController._oControlStore.oButtonListHelper;

						oButtonListHelper.endBuild();
						restoreFocus(oButtonListHelper, this);
					},

					defineFooterRight : function(oController, oPage, iFooterRightCount, bIncludeGenerics, bIncludePosNeg) {

						var bHasButton = false, bStableIds = this.isUsingStableIds(), oBtnMeta;
						if (this.bAutomaticOverflow) {
							// no buttons into overflow at the beginning
							iFooterRightCount = 10000;
						}
						// standard Buttons
						if (oController._oHeaderFooterOptions.oEditBtn) {
							oBtnMeta = {};
							jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.oEditBtn);
							if (bStableIds) {
								this.addIds(oBtnMeta, oController._oHeaderFooterOptions
									.oEditBtn.sId, oController, "scfld_EDIT");
							}
							oBtnMeta.style = sap.m.ButtonType.Emphasized;
							oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b", iFooterRightCount);
							bHasButton = true;
						} else /* if (bIncludePosNeg) */{
							if (oController._oHeaderFooterOptions.oPositiveAction) {
								oBtnMeta = {};
								jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.oPositiveAction);
								if (bStableIds) {
									this.addIds(oBtnMeta, oController._oHeaderFooterOptions
										.oPositiveAction.sId, oController, "scfld_POSITIVE");
								}
								oBtnMeta.style = sap.m.ButtonType.Accept;
								oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b", iFooterRightCount);
								bHasButton = true;
							}
							if (oController._oHeaderFooterOptions.oNegativeAction) {
								oBtnMeta = {};
								jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.oNegativeAction);
								if (bStableIds) {
									this.addIds(oBtnMeta, oController._oHeaderFooterOptions
										.oNegativeAction.sId, oController, "scfld_NEGATIVE");
								}
								oBtnMeta.style = sap.m.ButtonType.Reject;
								oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b", iFooterRightCount);
								bHasButton = true;
							}
						}

						// App specific buttons
						if (oController._oHeaderFooterOptions.buttonList) {
							for (var i = 0; i < oController._oHeaderFooterOptions.buttonList.length; i++) {
								oBtnMeta = {};
								jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.buttonList[i]);
								if (bStableIds) {
									this.addIds(oBtnMeta, oController._oHeaderFooterOptions
										.buttonList[i].sId, oController, undefined);
								}
								oBtnMeta.style = sap.m.ButtonType.Default;
								oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b", iFooterRightCount);
								bHasButton = true;
							}
						}
						if (bIncludeGenerics) {
							var aGenButtons = this.getGenericButtons(iFooterRightCount, oController,
									oController._oControlStore.oButtonListHelper);
							bHasButton = bHasButton || aGenButtons.length > 0;
						}
						if (this.bAutomaticOverflow) {
							oController._oControlStore.oButtonListHelper.addOverflowButton();
						}
						bHasButton = this.defineShareButton(oController) || bHasButton;
						return bHasButton;
					},

					defineShareButton : function(oController) {
						var aButtons = this.getShareButtons(oController);
						if (aButtons.length == 0) {
							return false;
						}
						if (!oController._oControlStore.oShareSheet) {
							oController._oControlStore.oShareSheet = new sap.m.ActionSheet();
							oController._oControlStore.oShareSheet.setShowCancelButton(true);
							oController._oControlStore.oShareSheet.setPlacement(sap.m.PlacementType.Top);
						} else {
							oController._oControlStore.oShareSheet.removeAllButtons();
						}
						this.shareText = this.oAppImp.UilibI18nModel.getResourceBundle()
							.getText("SHARE");
						var oBtnMeta = {
							sIcon : "sap-icon://action",
							sTooltip: this.shareText,
							onBtnPressed : function(evt) {
								if (oController._oHeaderFooterOptions.oJamOptions){
									if (oController._oHeaderFooterOptions.oJamOptions.fGetShareSettings) {
										var oShareSettings = oController._oHeaderFooterOptions.oJamOptions.fGetShareSettings();
										if (oShareSettings) {
											oController._oControlStore.oJamShareButton.setJamData(oShareSettings);
										}
									}
									if (oController._oHeaderFooterOptions.oJamOptions.fGetDiscussSettings) {
										var oDiscussSettings = oController._oHeaderFooterOptions.oJamOptions.fGetDiscussSettings();
										if (oDiscussSettings) {
											oController._oControlStore.oJamDiscussButton.setJamData(oDiscussSettings);
										}
									}
								}
								oController._oControlStore.oShareSheet.openBy(evt.getSource());
							}
						};
						if (this.isUsingStableIds()) {
							this.addIds(oBtnMeta, undefined, oController, "scfld_SHARE");
						}
						oController._oControlStore.oButtonListHelper.ensureButton(oBtnMeta, "b");
						for (var i = 0; i < aButtons.length; i++) {
							oController._oControlStore.oShareSheet.addButton(aButtons[i]);
						}
						return true;
					},


					hasShareButtons : function(oController) {
						return oController.isMainScreen() || !!(oController._oHeaderFooterOptions.oEmailSettings
								|| (oController._oHeaderFooterOptions.oJamOptions && (oController._oHeaderFooterOptions.oJamOptions.oShareSettings
										|| oController._oHeaderFooterOptions.oJamOptions.fGetShareSettings || oController._oHeaderFooterOptions.oJamOptions.oDiscussSettings || oController._oHeaderFooterOptions.oJamOptions.fGetDiscussSettings))
								|| oController._oHeaderFooterOptions.oAddBookmarkSettings || (oController._oHeaderFooterOptions.additionalShareButtonList && oController._oHeaderFooterOptions.additionalShareButtonList.length > 0));
					},

					getShareButtons : function(oController) {
						var aRet = [];
						var oEmailButton = this.getEmailButton(oController);
						var oJamShareButton = this.getJamShareButton(oController);
						var oJamDiscussButton = this.getJamDiscussButton(oController);
						var oBookmarksButton = this.getBookmarkButton(oController);
						if (oEmailButton) {
							aRet.push(oEmailButton);
						}
						if (oJamShareButton) {
							aRet.push(oJamShareButton);
						}
						if (oJamDiscussButton) {
							aRet.push(oJamDiscussButton);
						}
						if (oBookmarksButton) {
							aRet.push(oBookmarksButton);
						}
						if (oController._oHeaderFooterOptions.additionalShareButtonList) {
							var aAddButtons = this.getAdditionalShareButtons(oController);
							aRet = aRet.concat(aAddButtons);
						}
						return aRet;
					},

					getEmailButton : function(oController) {
						var sBody;
						if (!oController._oHeaderFooterOptions.oEmailSettings) {
							return null;
						}
						if (!oController._oControlStore.oEmailButton) {
							oController._oControlStore.oEmailButton = new sap.m.Button(
								{id: this.createId(oController, "scfld_MAIL")});
							oController._oControlStore.oEmailButton.setIcon("sap-icon://email");
							oController._oControlStore.oEmailButton.setText(this.oAppImp.UilibI18nModel.getResourceBundle().getText(
									"SEND_EMAIL"));
							oController._oControlStore.oEmailButton.attachPress(function() {
								if (oController._oHeaderFooterOptions.oEmailSettings.fGetMailBody) {
									sBody = oController._oHeaderFooterOptions.oEmailSettings.fGetMailBody();
								} else {
									sBody = null;
								}
								sap.m.URLHelper.triggerEmail(oController._oHeaderFooterOptions.oEmailSettings.sRecepient,
										oController._oHeaderFooterOptions.oEmailSettings.sSubject, sBody);
							});
						}
						this.supportEnablement(oController, oController._oControlStore.oEmailButton,
								oController._oHeaderFooterOptions.oEmailSettings);
						return oController._oControlStore.oEmailButton;
					},

					getJamShareButton : function(oController) {
						if (!oController._oHeaderFooterOptions.oJamOptions
								|| !(oController._oHeaderFooterOptions.oJamOptions.oShareSettings || oController._oHeaderFooterOptions.oJamOptions.fGetShareSettings)) {
							return null;
						}
						if (!oController._oControlStore.oJamShareButton) {
							oController._oControlStore.oJamShareButton =
								new sap.ushell.ui.footerbar.JamShareButton(
									{id: this.createId(oController, "scfld_JAMSHARE")});
						}
						if (oController._oHeaderFooterOptions.oJamOptions.oShareSettings) {
							oController._oControlStore.oJamShareButton
									.setJamData(oController._oHeaderFooterOptions.oJamOptions.oShareSettings);
							this.supportEnablement(oController, oController._oControlStore.oJamShareButton,
									oController._oHeaderFooterOptions.oJamOptions.oShareSettings);
						}
						return oController._oControlStore.oJamShareButton;
					},

					getJamDiscussButton : function(oController) {
						if (!oController._oHeaderFooterOptions.oJamOptions ||
								 !(oController._oHeaderFooterOptions.oJamOptions.oDiscussSettings ||  oController._oHeaderFooterOptions.oJamOptions.fGetDiscussSettings)) {
							return null;
						}
						if (!oController._oControlStore.oJamDiscussButton) {
							oController._oControlStore.oJamDiscussButton =
								new sap.ushell.ui.footerbar.JamDiscussButton(
									{id: this.createId(oController, "scfld_JAMDISCUSS")});
						}
						if (oController._oHeaderFooterOptions.oJamOptions.oDiscussSettings) {
						  oController._oControlStore.oJamDiscussButton.setJamData(oController._oHeaderFooterOptions.oJamOptions.oDiscussSettings);
						  this.supportEnablement(oController, oController._oControlStore.oJamDiscussButton,
								oController._oHeaderFooterOptions.oJamOptions.oDiscussSettings);
						}
						return oController._oControlStore.oJamDiscussButton;
					},

					getBookmarkButton : function(oController) {
						if (oController._oHeaderFooterOptions.bSuppressBookmarkButton || (!oController._oHeaderFooterOptions.oAddBookmarkSettings && !oController.isMainScreen())) {
							return null;
						}
						if (!oController._oControlStore.oBookmarkButton) {
							oController._oControlStore.oBookmarkButton =
								new sap.ushell.ui.footerbar.AddBookmarkButton({id: this.createId(oController, "scfld_ADDBOOKMARK")});
						}

						var oAppData = {
							url : document.URL,
							title : oController._oControlStore.oTitle.getText()
						};
						jQuery.extend(oAppData, oController._oHeaderFooterOptions.oAddBookmarkSettings || {});
						oController._oControlStore.oBookmarkButton.setAppData(oAppData);
						this.supportEnablement(oController, oController._oControlStore.oBookmarkButton,
								oController._oHeaderFooterOptions.oAddBookmarkSettings || {});
						return oController._oControlStore.oBookmarkButton;
					},

					supportEnablement : function(oController, oButton, oSettings) {
						oButton.setEnabled(!oSettings.bDisabled);
						if (oSettings.sId) {
							oController._oControlStore.oButtonListHelper.mButtons[oSettings.sId] = oButton;
						}
					},

					getAdditionalShareButtons : function(oController) {
						var aRet = [];
						if (!oController._oControlStore.shareButtons) {
							oController._oControlStore.shareButtons = new sap.ca.scfld.md.app.ButtonListHelper(this.oAppImp, 1);
							oController._oControlStore.oButtonListHelper.addButtonListHelper(oController._oControlStore.shareButtons);
						}
						for ( var i = 0; i < oController._oHeaderFooterOptions.additionalShareButtonList.length; i++) {
							var oBtnMeta = {};
							jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.additionalShareButtonList[i]);
							//additional share buttons shall show the configured icon
							//delete oBtnMeta.sIcon;
							if (this.isUsingStableIds()) {
								this.addIds(oBtnMeta, oController._oHeaderFooterOptions
									.additionalShareButtonList[i].sId, oController, undefined);
							}
							var oBtn = oController._oControlStore.shareButtons.ensureButton(oBtnMeta, "b");
							aRet.push(oBtn);
						}
						return aRet;
					},

					getFooterRightCount : function(oController, sTSize) {
						var iLimit;
//					var iCount = this.getActionsCount(oController);

						switch (sTSize) {
						case "XL" :
							iLimit = this.detailHeaderFooterRules.maxBtnCountXL;
						  break;
						case "L":
							iLimit = this.detailHeaderFooterRules.maxBtnCountL;
						  break;
						case "M":
							iLimit = this.detailHeaderFooterRules.maxBtnCountM;
						  break;
						case "S":
							iLimit = this.detailHeaderFooterRules.maxBtnCountS;
						  break;
						default:
							iLimit = this.detailHeaderFooterRules.maxBtnCountXL;
						}

//						if (iCount <= iLimit + 1) {
//							//SIL: has to be refined: this rule shall be valid only for
//							//generic buttons (sort,group,filter)
//							return iCount;
//						}
						return iLimit;
					},

					getActionsCount : function(oController, bSkipEditButton){
						var iCount = 0;
						if (oController._oHeaderFooterOptions.buttonList) {
							iCount = oController._oHeaderFooterOptions.buttonList.length;
						}
						if (oController._oHeaderFooterOptions.oEditBtn) {
							if (!bSkipEditButton) {
								// in master view the edit button belongs to the header and must
								// not be count!
								iCount++;
							}
						} else {
							if (oController._oHeaderFooterOptions.oPositiveAction) {
								iCount++;
							}
							if (oController._oHeaderFooterOptions.oNegativeAction) {
								iCount++;
							}
						}
						return iCount;
					},

					createSettingsButton : function(oController) {
						var bRet;
						if (oController._oControlStore.oSettingsButton) {
							bRet = false;
						} else {
							bRet = true;
						}
						if (oController._oHeaderFooterOptions.aAdditionalSettingButtons) {
							if (!oController._oControlStore.oSettingsButtonListHelper) {
								oController._oControlStore.oSettingsButtonListHelper = new sap.ca.scfld.md.app.ButtonListHelper(
										this.oAppImp, 0);
								oController._oControlStore.oButtonListHelper
										.addButtonListHelper(oController._oControlStore.oSettingsButtonListHelper);
							}
							var aButtons = [];
							for ( var i = 0; i < oController._oHeaderFooterOptions.aAdditionalSettingButtons.length; i++) {
								var oBtnMeta = {};
								jQuery.extend(oBtnMeta, oController._oHeaderFooterOptions.aAdditionalSettingButtons[i]);
								delete oBtnMeta.sIcon;
								var oButton = oController._oControlStore.oSettingsButtonListHelper.ensureButton(oBtnMeta, "b");
								oButton.setWidth("100%");
								aButtons.push(oButton);
							}
							sap.ushell.services.AppConfiguration.addApplicationSettingsButtons(aButtons);
						}
						return bRet;
					},

					getGenericButtons : function(iFooterRightCount, oController, oButtonListHelper) {
						var aRet = [];
						if (oController._oHeaderFooterOptions.oSortOptions) {
							aRet.push(this.addSortButton(iFooterRightCount, oController, oButtonListHelper));
						}
						if (oController._oHeaderFooterOptions.oFilterOptions) {
							aRet.push(this.addFilterButton(iFooterRightCount, oController, oButtonListHelper));
						}
						if (oController._oHeaderFooterOptions.oGroupOptions) {
							aRet.push(this.addGroupButton(iFooterRightCount, oController, oButtonListHelper));
						}
						return aRet;
					},

					addFilterButton : function(iFooterRightCount, oController, oButtonListHelper) {
						var sButtonText = this.oAppImp.UilibI18nModel.getResourceBundle().getText("FILTER"),
							oBtnMeta = {
								bDisabled : oController._oHeaderFooterOptions.oFilterOptions.bDisabled,
								sIcon : "sap-icon://filter",
								sBtnTxt : sButtonText,
								sTooltip :
									oController._oHeaderFooterOptions.oFilterOptions.sTooltip
										|| sButtonText
							}, sType;
						this.addIds(oBtnMeta,
							oController._oHeaderFooterOptions.oFilterOptions.sId, oController,
							"scfld_FILTER");


						if (oController._oHeaderFooterOptions.oFilterOptions.aFilterItems) {
							oBtnMeta.onChange = jQuery.proxy(function(oKey) {
								oButtonListHelper._updateCurrentSelection("filter", oKey);
								oController._oHeaderFooterOptions.oFilterOptions.onFilterSelected(oKey);
							}, this);
							oBtnMeta.aItems = oController._oHeaderFooterOptions.oFilterOptions.aFilterItems;
							oBtnMeta.sSelectedItemKey = oButtonListHelper._getCurrentSelection("filter",
								oController._oHeaderFooterOptions.oFilterOptions.sSelectedItemKey);
							sType = "s";
						} else {
							oBtnMeta.onBtnPressed = jQuery.proxy(function(oEvent) {
								oController._oHeaderFooterOptions.oFilterOptions.onFilterPressed(oEvent);
							}, this);
							sType = "b";
						}
						return oButtonListHelper.ensureButton(oBtnMeta, sType, iFooterRightCount);
					},

					addSortButton : function(iFooterRightCount, oController, oButtonListHelper) {
						var sButtonText = this.oAppImp.UilibI18nModel.getResourceBundle().getText("SORT"),
							oBtnMeta = {
								bDisabled : oController._oHeaderFooterOptions.oSortOptions.bDisabled,
								sIcon : "sap-icon://sort",
								sBtnTxt : sButtonText,
								sTooltip : oController._oHeaderFooterOptions.oSortOptions.sTooltip
									|| sButtonText
							}, sType;
						this.addIds(oBtnMeta, oController._oHeaderFooterOptions.oSortOptions.sId,
							oController, "scfld_SORT");

						if (oController._oHeaderFooterOptions.oSortOptions.aSortItems) {
							oBtnMeta.onChange = jQuery.proxy(function(oKey) {
								oButtonListHelper._updateCurrentSelection("sort", oKey);
								oController._oHeaderFooterOptions.oSortOptions.onSortSelected(oKey);
							}, this);
							oBtnMeta.aItems = oController._oHeaderFooterOptions.oSortOptions.aSortItems;
							oBtnMeta.sSelectedItemKey = oButtonListHelper._getCurrentSelection("sort",
								oController._oHeaderFooterOptions.oSortOptions.sSelectedItemKey);
							sType = "s";
						} else {
							oBtnMeta.onBtnPressed = jQuery.proxy(function(oEvent) {
								oController._oHeaderFooterOptions.oSortOptions.onSortPressed(oEvent);
							}, this);
							sType = "b";
						}
						return oButtonListHelper.ensureButton(oBtnMeta, sType, iFooterRightCount);
					},

					addGroupButton : function(iFooterRightCount, oController, oButtonListHelper) {
						var sButtonText = this.oAppImp.UilibI18nModel.getResourceBundle().getText("GROUP"),
							oBtnMeta = {
								bDisabled : oController._oHeaderFooterOptions.oGroupOptions.bDisabled,
								sIcon : "sap-icon://group-2",
								sBtnTxt : sButtonText,
								sTooltip : oController._oHeaderFooterOptions.oGroupOptions.sTooltip
									|| sButtonText
							}, sType;
						this.addIds(oBtnMeta, oController._oHeaderFooterOptions.oGroupOptions.sId,
							oController, "scfld_GROUP");

						if (oController._oHeaderFooterOptions.oGroupOptions.aGroupItems) {
							oBtnMeta.onChange = jQuery.proxy(function(oKey) {
								oButtonListHelper._updateCurrentSelection("group", oKey);
								oController._oHeaderFooterOptions.oGroupOptions.onGroupSelected(oKey);
							}, this);
							oBtnMeta.aItems = oController._oHeaderFooterOptions.oGroupOptions.aGroupItems;
							oBtnMeta.sSelectedItemKey = oButtonListHelper._getCurrentSelection("group",
								oController._oHeaderFooterOptions.oGroupOptions.sSelectedItemKey);
							sType = "s";
						} else {
							oBtnMeta.onBtnPressed = jQuery.proxy(function(oEvent) {
								oController._oHeaderFooterOptions.oGroupOptions.onGroupPressed(oEvent);
							}, this);
							sType = "b";
						}
						return oButtonListHelper.ensureButton(oBtnMeta, sType, iFooterRightCount);
					},

					ensureHeader : function(oController, oPage, bGenericBackButton, bSuppressBackButton, sTitleId) {
						if (!oController._oControlStore.oHeaderBar) {
							oController._oControlStore.oHeaderBar = new sap.m.Bar();
							sTitleId = this.isUsingStableIds() && sTitleId
								? this.createId(oController, sTitleId)
								: undefined;
							oController._oControlStore.oTitle = new sap.m.Title(sTitleId, {level: sap.ui.core.TitleLevel.H2});
							oController._oControlStore.oHeaderBar.addContentMiddle(oController._oControlStore.oTitle);
							var oCustHeader = oPage.getCustomHeader();
							if (oCustHeader && oCustHeader.destroy) {
								oCustHeader.destroy();
							}
							oPage.setCustomHeader(oController._oControlStore.oHeaderBar);
						}
						this.setBackButton(oController, oController._oControlStore.oHeaderBar, bGenericBackButton, bSuppressBackButton);
					},

					setAppHeaderBtn : function(oController, oBtnSettings){
						if (!oController._oControlStore.oHeaderBar){
							return;
						}
						if (!oController._oControlStore.oHeaderBtn){
							if (oBtnSettings.sId){
							oController._oControlStore.oHeaderBtn = new sap.m.Button(oBtnSettings.sId);
							} else {
								oController._oControlStore.oHeaderBtn = new sap.m.Button();
							}
							oController._oControlStore.oHeaderBar.addContentRight(oController._oControlStore.oHeaderBtn);
						}
						var _oHeaderBtn = oController._oControlStore.oHeaderBtn;
						if (oBtnSettings.sIcon){
							_oHeaderBtn.setIcon(oBtnSettings.sIcon);
						}
						if (oBtnSettings.onBtnPressed){
							_oHeaderBtn.attachPress(oBtnSettings.onBtnPressed);
						}
						if (oBtnSettings.sText){
							_oHeaderBtn.setText(oBtnSettings.sText);
						} else if (oBtnSettings.oTextBinding){
							if (oBtnSettings.oTextBinding.elementPath){
								if (oBtnSettings.oTextBinding.parameters){
									_oHeaderBtn.bindElement(oBtnSettings.oTextBinding.elementPath, oBtnSettings.oTextBinding.parameters);
								} else {
									_oHeaderBtn.bindElement(oBtnSettings.oTextBinding.elementPath);
								}
							}
							if  (oBtnSettings.oTextBinding.property){
								_oHeaderBtn.bindProperty("text", oBtnSettings.oTextBinding.property);
							}
						}else if (this.oAppImp.bIsPhone && oBtnSettings.i18nPhoneTxt){
							_oHeaderBtn.setText(this.oAppImp.UilibI18nModel.getResourceBundle().getText(oBtnSettings.i18nPhoneTxt));
						}else if (oBtnSettings.i18nTxt){
							_oHeaderBtn.setText(this.oAppImp.UilibI18nModel.getResourceBundle().getText(oBtnSettings.i18nTxt));
						}
					},
					setBackButton : function(oController, oBar, bGenericBackButton, bSuppressBackButton){
						if (bSuppressBackButton || (bGenericBackButton && oController._oHeaderFooterOptions.onBack === null)){
							oController._oControlStore.fBack = null;
						} else if (bGenericBackButton && oController._oHeaderFooterOptions.onBack == undefined){
							if (window.history.length == 0){
								oController._oControlStore.fBack = null;
							} else {
								oController._oControlStore.fBack = function(){
									window.history.back(1);
								};
							}
						} else {
							oController._oControlStore.fBack = oController._oHeaderFooterOptions.onBack;
						}
						if (oController._oControlStore.oBackButton) {
							oController._oControlStore.oBackButton.setVisible(!!oController._oControlStore.fBack);
						} else if (oController._oControlStore.fBack) {
							oController._oControlStore.oBackButton = new sap.m.Button({
								id: this.createId(oController, "scfld_BACK")
							});
							oController._oControlStore.oBackButton.setIcon("sap-icon://nav-back");
							oController._oControlStore.oBackButton.setTooltip(this.oAppImp.UilibI18nModel.getResourceBundle().getText("BACK"));
							oController._oControlStore.oBackButton.attachPress(function(oEvent) {
								oController._oControlStore.fBack(oEvent);
							});
							oBar.addContentLeft(oController._oControlStore.oBackButton);
						}
					},

					getGenericCount : function(oController) {
						var iRet = 0;
						if (oController._oHeaderFooterOptions.oSortOptions) {
							iRet++;
						}
						if (oController._oHeaderFooterOptions.oFilterOptions) {
							iRet++;
						}
						if (oController._oHeaderFooterOptions.oGroupOptions) {
							iRet++;
						}
						return iRet;
					},

					/**
					 * Enhances given button metadata object by internal and external IDs based on activation of stable
					 * IDs feature.
					 *
					 * @param {object} oButtonMetaData
					 *    The button metadata that need to be enhanced.
					 * @param {string} sAppSpecificId
					 *    The application specified ID of the control.
					 * @param {object} oController
					 *    The current controller object (is needed to generate the ID)
					 * @param {string} sDefaultStableId
					 *    Default ID if application specific ID is no valid ID or if it is not given at all.
					 * @protected
					 */
					addIds: function (oButtonMetaData, sAppSpecificId, oController,
							sDefaultStableId) {
						var sButtonid = sap.ui.core.ID.isValid(sAppSpecificId)
							? sAppSpecificId : sDefaultStableId;
						delete oButtonMetaData.sControlId;
						delete oButtonMetaData.sId;

						if (this.isUsingStableIds()) {
							oButtonMetaData.sControlId = this.createId(oController, sButtonid);
							oButtonMetaData.sId = sAppSpecificId || sDefaultStableId;
						} else {
							oButtonMetaData.sId = sAppSpecificId;
						}
					},

					/**
					 * Create view relative ID for the given ID if stable IDs are used.
					 * If ID is invalid undefined is returned.
					 * @param {object} oController
					 *    The controller needed to generate the ID.
					 * @param {string} sId
					 *    The ID of the control.
					 * @returns {string}
					 *    The view relative ID or undefined.
					 * @protected
					 */
					createId: function (oController, sId) {
						if (this.isUsingStableIds() && sId && sap.ui.core.ID.isValid(sId)) {
							return oController.getView().createId(sId);
						}
						return undefined;
					},

					/**
					 * Returns true if application is configured to use stable IDs.
					 * @returns {boolean}
					 *    <code>true</code> if application is using stable IDs.
					 * @protected
					 */
					isUsingStableIds: function () {
						return this.oAppImp.oConfiguration &&
							this.oAppImp.oConfiguration.isUsingStableIds &&
							this.oAppImp.oConfiguration.isUsingStableIds();
					}

				});

// default implementation how page is retireved from the controller
sap.ca.scfld.md.app.CommonHeaderFooterHelper.getPageFromController = function(oController){
	return oController.getView().getContent()[0];
};
})();

}; // end of sap/ca/scfld/md/app/CommonHeaderFooterHelper.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.DetailHeaderFooterHelper') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.DetailHeaderFooterHelper");


sap.ui.base.Object
		.extend(
				"sap.ca.scfld.md.app.DetailHeaderFooterHelper",
				{

					constructor : function (oApplicationImplementation) {
						this.oAppImp = oApplicationImplementation;
						this.oCommonHeaderFooterHelper = new sap.ca.scfld.md.app.CommonHeaderFooterHelper(oApplicationImplementation, undefined, true);
					},

					defineDetailHeaderFooter : function (oController) {
						var oOptions = oController.getHeaderFooterOptions();
						this.setHeaderFooter(oController, oOptions);
					},

					setHeaderFooter : function (oController, oOptions, bKeepModifications){
						if (!oOptions) {
							return;
						}
						var oPage = this.oCommonHeaderFooterHelper.startBuild(oController, oOptions, null, bKeepModifications);
						// important to run header before footer, as the addBookmark button relies on the title
						this.defineHeader(oController, oPage);
						this.defineFooter(oController, oPage);

						this.oAppImp.oCurController.DetailCtrl = oController;
						this.oAppImp.oCurController.FullCtrl = null;

						this.oCommonHeaderFooterHelper.endBuild(oController);

					},

					defineFooter : function (oController, oPage) {
						var bHasButton = this.oCommonHeaderFooterHelper.defineFooterRight(
							oController, oPage, 1000, false, true, /*automaticOverflow*/true
						);
						oPage.setShowFooter(bHasButton || !!oController.isMainScreen());		// note that isMainScreen() may return "X"
					},

					defineHeader : function (oController, oPage) {
						var bSuppressBackButton = !this.oAppImp.bIsPhone && (oController.isMainScreen() == true),
							sTitleId = oController._oHeaderFooterOptions.sDetailTitleId;
						this.oCommonHeaderFooterHelper.ensureHeader(oController, oPage, this.oAppImp.bIsPhone, bSuppressBackButton, sTitleId);
						if (oController._oHeaderFooterOptions.oHeaderBtnSettings) {
							this.oCommonHeaderFooterHelper.setAppHeaderBtn(oController, oController._oHeaderFooterOptions.oHeaderBtnSettings);
						}
						if (oController._oHeaderFooterOptions.oUpDownOptions) {
							this.setUpDownButtons(oController, oController._oHeaderFooterOptions.oUpDownOptions.iPosition, oController._oHeaderFooterOptions.oUpDownOptions.iCount);
							var aPars = this.getPositionPars(oController);
							if (this.oAppImp.bIsPhone) {
								if (oController._oHeaderFooterOptions.oUpDownOptions.sI18NPhoneTitle) {
									var oBundle = this.oAppImp.getResourceBundle();
									var sKey = oController._oHeaderFooterOptions.oUpDownOptions.sI18NPhoneTitle;
								} else {
									var oBundle = this.oAppImp.getUiLibResourceBundle();
									var sKey = "ITEM_TITLE_PHONE";
								}
							} else {
								if (oController._oHeaderFooterOptions.oUpDownOptions.sI18NDetailTitle) {
									var oBundle = this.oAppImp.getResourceBundle();
									var sKey = oController._oHeaderFooterOptions.oUpDownOptions.sI18NDetailTitle;
								} else {
									var oBundle = this.oAppImp.getUiLibResourceBundle();
									var sKey = "ITEM_TITLE";
								}
							}
							var sTitle = oBundle.getText(sKey, aPars);
						} else {
							this.setUpDownButtons(oController, 0, 0);
							if (oController._oHeaderFooterOptions.sI18NDetailTitle) {
								var oBundle = this.oAppImp.getResourceBundle();
								var sTitle = oBundle.getText(oController._oHeaderFooterOptions.sI18NDetailTitle);
							} else if (oController._oHeaderFooterOptions.sDetailTitle) {
								var sTitle = oController._oHeaderFooterOptions.sDetailTitle;
							} else {
								var oBundle = this.oAppImp.getResourceBundle();
								var sTitle = oBundle.getText("DETAIL_TITLE");
							}
						}
						oController._oControlStore.oTitle.setText(sTitle);
					},

					setUpDownButtons : function (oController, iPos, iCount) {
						if (iCount <= 1) {
							if (oController._oControlStore.oUpButton){
								oController._oControlStore.oUpButton.setVisible(false);
								oController._oControlStore.oDownButton.setVisible(false);
							}
						} else {
							if (!oController._oControlStore.oUpButton) {
								var fMoveUpDown = function (delta) {
									oController._oHeaderFooterOptions.oUpDownOptions.fSetPosition(oController._oHeaderFooterOptions.oUpDownOptions.iPosition + delta);
								};
								oController._oControlStore.oUpButton = new sap.m.Button();
								oController._oControlStore.oUpButton.setIcon("sap-icon://down");
								oController._oControlStore.oUpButton.attachPress(function () {
									fMoveUpDown(1);
								});
								oController._oControlStore.oHeaderBar.addContentRight(oController._oControlStore.oUpButton);
								oController._oControlStore.oDownButton = new sap.m.Button();
								oController._oControlStore.oDownButton.setIcon("sap-icon://up");
								oController._oControlStore.oDownButton.attachPress(function () {
									fMoveUpDown(-1);
								});
								oController._oControlStore.oHeaderBar.addContentRight(oController._oControlStore.oDownButton);
							}
							oController._oControlStore.oUpButton.setVisible(true);
							oController._oControlStore.oDownButton.setVisible(true);
							oController._oControlStore.oUpButton.setEnabled(iPos < iCount - 1);
							oController._oControlStore.oDownButton.setEnabled(iPos > 0);
						}
					},

					getPositionPars : function (oController) {
						if (oController._oHeaderFooterOptions) {
							var aRet = [oController._oHeaderFooterOptions.oUpDownOptions.iPosition + 1, oController._oHeaderFooterOptions.oUpDownOptions.iCount];
							if (oController._oHeaderFooterOptions.oUpDownOptions.oParent){
								aRet = aRet.concat(this.getPositionPars(oController._oHeaderFooterOptions.oUpDownOptions.oParent));
							}
							return aRet;
						}
						return [];
					}
				});

}; // end of sap/ca/scfld/md/app/DetailHeaderFooterHelper.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.FullScreenHeaderFooterHelper') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.FullScreenHeaderFooterHelper");
jQuery.sap.require('sap.ushell.ui.footerbar.JamShareButton'); // unlisted dependency retained

jQuery.sap.require('sap.ushell.ui.footerbar.JamDiscussButton'); // unlisted dependency retained

jQuery.sap.require('sap.ushell.ui.footerbar.AddBookmarkButton'); // unlisted dependency retained




sap.ui.base.Object.extend("sap.ca.scfld.md.app.FullScreenHeaderFooterHelper", {
	constructor : function (oApplicationImplementation) {
		this.oAppImp = oApplicationImplementation;
		this.oCommonHeaderFooterHelper = new sap.ca.scfld.md.app.CommonHeaderFooterHelper(
				oApplicationImplementation, undefined, true);
	},

	defineHeaderFooter : function (oController) {
		var oOptions = oController.getHeaderFooterOptions();
		this.setHeaderFooter(oController, oOptions);
	},

	setHeaderFooter : function (oController, oOptions, bKeepModifications) {
		if (!oOptions) {
			return;
		}
		var oPage = this.oCommonHeaderFooterHelper.startBuild(oController, oOptions, { iSettingsPosition : 0 }, bKeepModifications);
		this.oCommonHeaderFooterHelper.createSettingsButton(oController);
		var bHasFooterButtons = this.needsFooter(oController);
	// important to run header before footer, as the addBookmark button relies on the title
		this.defineHeader(oController, oPage, bHasFooterButtons);
		this.defineFooter(oController, oPage, bHasFooterButtons);
		this.oAppImp.oCurController.FullCtrl = oController;
		this.oAppImp.oCurController.MasterCtrl = null;
		this.oAppImp.oCurController.DetailCtrl = null;
		this.oCommonHeaderFooterHelper.endBuild(oController);
	},

	defineFooter : function (oController, oPage, bHasFooterButtons) {
		if (bHasFooterButtons) {
			//var iFooterRightCount = this.getFooterRightCount(oController);
			this.oCommonHeaderFooterHelper.defineFooterRight(oController, oPage, 1000,
					this.oAppImp.bIsPhone, false, /*automaticOverflow*/true);
			if (!this.oAppImp.bIsPhone) {
				if (!oController._oControlStore.oLeftButtonList) {
					oController._oControlStore.oLeftButtonList = new sap.ca.scfld.md.app.ButtonListHelper(this.oAppImp, 25);
					oController._oControlStore.oLeftButtonList.oBar = oController._oControlStore.oButtonListHelper.oBar;
					oController._oControlStore.oButtonListHelper
							.addButtonListHelper(oController._oControlStore.oLeftButtonList);
				}
				this.oCommonHeaderFooterHelper.getGenericButtons(3, oController,
						oController._oControlStore.oLeftButtonList);
			}
		}
	},

	defineHeader : function (oController, oPage, bHasFooterButtons) {
		var sTitleId = oController._oHeaderFooterOptions.sFullscreenTitleId;
		this.oCommonHeaderFooterHelper.ensureHeader(oController, oPage, true, undefined, sTitleId);
		if (oController._oHeaderFooterOptions.oHeaderBtnSettings) {
			this.oCommonHeaderFooterHelper.setAppHeaderBtn(oController, oController._oHeaderFooterOptions.oHeaderBtnSettings);
		}
		if (oController._oHeaderFooterOptions.sI18NFullscreenTitle) {
			var oBundle = this.oAppImp.getResourceBundle();
			var sTitle = oBundle.getText(oController._oHeaderFooterOptions.sI18NFullscreenTitle);
		} else if (oController._oHeaderFooterOptions.sFullscreenTitle) {
			var sTitle = oController._oHeaderFooterOptions.sFullscreenTitle;
		} else {
			var oBundle = this.oAppImp.getResourceBundle();
			var sTitle = oBundle.getText("FULLSCREEN_TITLE");
		}
		oController._oControlStore.oTitle.setText(sTitle);
		if (oController._oControlStore.oFacetFilterButton) {
			oController._oControlStore.oFacetFilterButton.setVisible(!!oController._oHeaderFooterOptions.onFacetFilter);
		} else if (oController._oHeaderFooterOptions.onFacetFilter) {
			oController._oControlStore.oFacetFilterButton = new sap.m.Button();
			oController._oControlStore.oFacetFilterButton.setIcon("sap-icon://filter");
			oController._oControlStore.oFacetFilterButton.attachPress(function (oEvent) {
				oController._oHeaderFooterOptions.onFacetFilter(oEvent);
			});
			oController._oControlStore.oHeaderBar.addContentRight(oController._oControlStore.oFacetFilterButton);
		}
	},

	needsFooter : function (oController) {
		return oController._oHeaderFooterOptions.onFacetFilter ||
		  this.oCommonHeaderFooterHelper.getGenericCount(oController) > 0 ||
		  this.oCommonHeaderFooterHelper.getActionsCount(oController) > 0 ||
		  this.oCommonHeaderFooterHelper.hasShareButtons(oController);
	},

	getFooterRightCount : function (oController) {

		var iLimit = this.oCommonHeaderFooterHelper.getFooterRightCount(oController, "S");

		var iGenCount = this.oCommonHeaderFooterHelper.getGenericCount(oController);
		var iActCount = this.oCommonHeaderFooterHelper.getActionsCount(oController);

		if (this.oAppImp.bIsPhone && sap.ui.Device.orientation.landscape) {
				if (iActCount === 1 && iGenCount < 4) {
					return iActCount + iGenCount;
				}
				if (iActCount === 0) {
					return iGenCount;
				}
				iLimit = this.oCommonHeaderFooterHelper.getFooterRightCount(oController, "M");
		} else if (this.oAppImp.bIsPhone && !sap.ui.Device.orientation.landscape) {
			if (iActCount === 0) {
				return iGenCount;
			}
			iLimit = this.oCommonHeaderFooterHelper.getFooterRightCount(oController, "S");
		} else if (this.oAppImp.bIsIPad && !sap.ui.Device.orientation.landscape) {
			iLimit = this.oCommonHeaderFooterHelper.getFooterRightCount(oController, "M");
		} else {
			iLimit = this.oCommonHeaderFooterHelper.getFooterRightCount(oController, "XL");
		}
		// avoid that the overflow contains only one generic item
		if (iActCount === iLimit && iGenCount === 1) {
			return iLimit + 1;
		}
		return iLimit;
	}
});
}; // end of sap/ca/scfld/md/app/FullScreenHeaderFooterHelper.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.controller.BaseDetailController') ) {
  jQuery.sap.declare('sap.ca.scfld.md.controller.BaseDetailController');
/*
 * Copyright (C) 2009-2015 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained


/**
 * @class This class shall be used as the base class for the detail view controllers in
 *     master-detail scenarios.
 * @name sap.ca.scfld.md.controller.BaseDetailController
 * @extends sap.ui.core.mvc.Controller
 * @public
 */
sap.ui.core.mvc.Controller.extend("sap.ca.scfld.md.controller.BaseDetailController", {

	constructor : function () {
		this.oApplicationImplementation = sap.ca.scfld.md.app.Application.getImpl();
		// Make sure that our init-coding is executed even if the App overrides onInit() and does not call
		// onInit() of the super class.
		var fMyOnInit = jQuery.proxy(function () {

			// get routing object for navigation
			this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);

			this.oApplicationFacade = sap.ca.scfld.md.app.Application.getImpl().oConfiguration.oApplicationFacade;

			this.oConnectionManager = sap.ca.scfld.md.app.Application.getImpl().getConnectionManager();


			this.oApplicationImplementation.setModels(this);

			// for compatibility reasons. This only affects cases where the App defines the header itself and relies
			// on this piece of code that was entered by mistake
			if (sap.ui.Device.system.phone){
			  var oPage = this.getPage();
			  oPage.setShowNavButton(true);
			  oPage.attachNavButtonPress(this._navBack);
			}

			var oPage = this.getView().getContent()[0];
			oPage.setShowNavButton(sap.ui.Device.system.phone);
			oPage.attachNavButtonPress(this._navBack);

			// --------------------------
			var fMyOnBeforeShow = jQuery.proxy(function (evt) {
				this.oApplicationImplementation.defineDetailHeaderFooter(this);
			}, this);

			// register for onBeforeShow
			if (typeof this.onBeforeShow === "function") {
				var fAppOnBeforeShow = jQuery.proxy(this.onBeforeShow, this);
				this.onBeforeShow = function (evt) {
					fAppOnBeforeShow(evt);
					fMyOnBeforeShow(evt);
				};
			} else {
				this.getView().addEventDelegate({
					onBeforeShow : jQuery.proxy(function (evt) {
						fMyOnBeforeShow();
					}, this)
				});
			}
			// -------------------------------------
		}, this);

		var fAppOnInit = jQuery.proxy(this.onInit, this);
		this.onInit = function () {
			fMyOnInit();
			fAppOnInit();
		};
	},

	onInit : function() {
		// do not add any coding here. Just needed in case the App calls onInit() of the super class
	},

	/*
	 * override this method if you have not used the standard way to include the page in the view
	 */
	getPage : function() {
		return sap.ca.scfld.md.app.CommonHeaderFooterHelper.getPageFromController(this);
	},

	/**
	 * Obsolete: Use {@link #setHeaderFooterOptions} in order to explicitly set the header and
	 * footer when they need to be changed.
	 */
	getHeaderFooterOptions : function() {
		return null;
	},

	/**
	 * Sets the detail's page header and footer content.
	 * @param {object} oOptions
	 *     An object containing meta information about the content of the header and the footer
	 *     of the detail page.<br>
	 * <b>Supported properties for buttons defined below:</b><br>
	 * There are several predefined buttons which you can use on the footer bar or in the header.
	 * If you provide properties below you can overwrite the default values of the predefined
	 * buttons. These properties are also needed for custom-defined buttons. In general, every
	 * button can have the following properties:</p>
	 * <ul>
	 *     <li>{function} <b>onBtnPressed</b><br>
	 *     Callback function of the specific button, that is called if the button is pressed.</li>
	 *     <li>{boolean} <b>bDisabled</b><br>
	 *     An <i>optional</i> property to set the button initially disabled/enabled.</li>
	 *     <li>{string} <b>sI18nBtnTxt</b><br>
	 *     If the button doesn't have a fix predefined text, you can provide the key of the i18n
	 *     text which is used as the text of the button.</li>
	 *     <li>{string} <b>sIcon</b><br>
	 *     URL of an icon for the button (usually something like <i>"sap-icon://world"</i>).
	 *     <li>{string} <b>sId</b><br>
	 *     An <i>optional</i> property to set an ID for the specific button. This ID is meant to be
	 *     used in the call of the <code>setBtnEnabled</code> or <code>setBtnText</code> method.
	 *     If you configure your application to use stable IDs
	 *     (see {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}) this ID is used to
	 *     generate a stable ID. Ensure that <code>sId</code> is a valid SAPUI5 ID.</li>
	 *     <li>{string} <b>sTooltip</b><br>
	 *     Optional tooltip for the button. Ensure that the text is localized.
	 * </ul>
	 * The following properties are supported:<br>
	 * <b>Detail page header part:</b>
	 * <ul>
	 *     <li>{string} <b>oOptions.sI18NDetailTitle</b><br>
	 *     You can provide the i18n-key for the title in the i18n-properties file of the
	 *     application.
	 *     </li>
	 *     <li>{string} <b>oOptions.sDetailTitle</b><br>
	 *     You can also set the title text directly.<br>
	 *     If both are not provided, the i18n-key <code>DETAIL_TITLE</code> will be taken.</li>
	 *     <li>{string} <b>oOptions.sDetailTitleId</b><br>
	 *     An ID for the detail title. This property is supported only if application is configured
	 *     to use stable IDs (see {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}). The
	 *     resulting control ID is relative to the enclosing view ID.
	 *     Ensure that <code>sDetailTitleId</code> is a valid SAPUI5 ID.</li>
	 *     <li>{function} <b>oOptions.onBack</b>
	 *     If the application need to overwrite the default <code>history.back</code> behavior of
	 *     the detail view, the application needs to provide a function that the framework can call.
	 *     If you want to suppress the back button in the detail page, you can set the
	 *     <code>onBack</code> property with value <code>null</code>.
	 *     Framework also hides the back button if the application is not running on a phone or
	 *     if <code>{@link #isMainScreen}()</code> returns <code>true</code></li>
	 *     <li>{object} <b>oOptions.oUpDownOptions</b><br>
	 *     In order to get the up-down buttons in the right upper header, provide the following
	 *     properties:</li>
	 *     <ul>
	 *         <li>{number} <b>oOptions.oUpDownOptions.iPosition</b><br>
	 *         The (0-based) index of the item currently displayed.</li>
	 *         <li>{number} <b>oOptions.oUpDownOptions.iCount</b><br>
	 *         The total number of items.</li>
	 *         <li>{function (iNewIndex)} <b>oOptions.oUpDownOptions.fSetPosition</b><br>
	 *         Callback function that is called when a new item should be displayed. The (0-based)
	 *         index of the new item is passed to this method.</li>
	 *         <li>{string} <b>oOptions.oUpDownOptions.sI18NDetailTitle</b><br>
	 *         Key in your i18n-file which maps to a text with two placeholders (e.g.
	 *         'Order {0} of {1}') that is used as title on desktop and tablet ('Item {0} of {1}'
	 *         is taken as default)</li>
	 *         <li>{string} <b>oOptions.oUpDownOptions.sI18NPhoneTitle</b><br>
	 *         Key in your i18n-file which maps to a text with two placeholders (e.g.
	 *         ' Limit: {0} of {1}') that is used as title on phone ('{0} of {1}' is taken as
	 *         default).</li>
	 *     </ul>
	 *     <li>{object} <b>oOptions.oHeaderBtnSettings</b><br>
	 *     The definition object for the header button. Only one header button can be defined and
	 *     it will be displayed on the right (left in RTL mode) hand side of the header bar.
	 *     The following settings can be made for the header button:
	 *     <ul>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.sIcon</b><br>
	 *         An <i>optional</i> icon that is added to the button.</li>
	 *         <li>{function} <b>oOptions.oHeaderBtnSettings.onBtnPressed</b><br>
	 *         The handler function for the buttons's press event.</li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.sText</b><br>
	 *         An <i>optional</i> static text that is displayed on the button.</li>
	 *         <li>{object} <b>oOptions.oHeaderBtnSettings.oTextBinding</b><br>
	 *         <i>optional</i> if <i>sText</i> is not given the <i>oTextBinding</i> object can be
	 *         used to bind the button's text to a entity in the model using element binding.<br>
	 *         The following settings need to be made:
	 *         <ul>
	 *             <li>{string} <b>oOptions.oHeaderBtnSettings.oTextBinding.elementPath</b><br>
	 *             Path to the element of the model that is used as the binding context.</li>
	 *             <li>{string} <b>oOptions.oHeaderBtnSettings.oTextBinding.property</b><br>
	 *             Name of the property containing the text to be displayed.</li>
	 *             <li>{object} <b>oOptions.oHeaderBtnSettings.oTextBinding.parameters</b><br>
	 *             <i>optional</i> map of additional parameters for the binding (e.g."select" - for
	 *             a full description of possible values check the binding documentation).</li>
	 *         </ul></li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.i18nTxt</b><br>
	 *         <i>optional</i> if <i>sText</i> and <i>oTextBinding</i> are not given <i>i18nTxt</i>
	 *         can be used to fill the button's text from the i18n files. Additionally a different
	 *         text can be defined for phones (see <i>i18nPhoneTxt</i>).</li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.i18nPhoneTxt</b><br>
	 *         <i>optional</i> if <i>sText</i> and <i>oTextBinding</i> are not given
	 *         <i>i18nPhoneTxt</i> can be used to fill the button's text from the i18n files if the
	 *         used device is a phone.</li>
	 *    </ul></li>
	 * </ul>
	 * <b>Detail page footer part:</b><br>
	 * <ul>
	 *     <li>{object} <b>oOptions.oEditBtn</b><br>
	 *     The button for default/recommended action of the view - usually this would be the edit
	 *     button but also other usages are possible.</li>
	 *     <li>{object} <b>oOptions.oPositiveAction</b><br>
	 *     Can be used as the positive button e.g. for "Approve" action in an approval scenario.
	 *     </li>
	 *     <li>{object} <b>oOptions.oNegativeAction</b><br>
	 *     Can be used as the negative button e.g. for "Reject" action in an approval scenario.
	 *     </li>
	 *     <li>{array} <b>oOptions.buttonList</b><br>
	 *     A list of buttons which can be defined additionally to the predefined buttons. Each
	 *     button needs meta information as described above.</li>
	 *     <li>{object} <b>oOptions.oAddBookmarkSettings</b><br>
	 *     Describes the settings for the "Add Bookmark"-button, which should have the same
	 *     parameters provided for "sap.ushell.services.Bookmark" with the exception that the
	 *     property <code>url</code> can be left out, because it is set by the scaffolding.
	 *     The bookmark button will be displayed only on the main screen (see {@link #isMainScreen}
	 *     ). Even if there are no settings provided it is displayed. If you don't want to suppress
	 *     that button you have to set <b>oOptions.bSuppressBookmarkButton</b>.</li>
	 *     <li>{boolean} <b>oOptions.bSuppressBookmarkButton</b><br>
	 *     Suppresses the "Add Bookmark"-button from the 'Share' menu if this property is set to
	 *     <code>true</code>.</li>
	 *     <li>{object} <b>oOptions.oEmailSettings</b><br>
	 *     Settings for the Email functionality. Take care that the framework creates a link for
	 *     the e-mail which contains the information below and that some browsers have a length
	 *     restriction for URLs.
	 *        <ul>
	 *            <li>{string} <b>oOptions.oEmailSettings.sSubject</b><br>
	 *            The subject for the e-mail.</li>
	 *            <li>{string} <b>oOptions.oEmailSettings.sRecepient</b><br>
	 *            The e-mail addresses of the recipient as a string.</li>
	 *            <li>{function} <b>oOptions.oEmailSettings.fGetMailBody</b><br>
	 *            A callback function that is called to get the e-mail body text.</li>
	 *        </ul></li>
	 *     <li>{object} <b>oOptions.oJamOptions</b><br>
	 *     The configuration for the "Share in SAP Jam" and the "Discuss in SAP Jam" button.</li>
	 *     <ul>
	 *         <li>You can pass the share settings once or you can provide a callback function that
	 *         is called whenever the "Share" button is pressed.
	 *         <ul>
	 *             <li>{object} <b>oOptions.oJamOptions.oShareSettings</b><br>
	 *             The settings for the "Share in SAP Jam" button, for further allowed settings
	 *             check "sap.collaboration.components.fiori.sharing.Component.setSettings"
	 *             function.</li>
	 *             <li>{function} <b>oOptions.oJamOptions.fGetShareSettings</b><br>
	 *             The callback function for getting the "Share in SAP Jam" button settings. For
	 *             further allowed settings check
	 *             "sap.collaboration.components.fiori.sharing.Component.setSettings" function.
	 *             </li>
	 *         </ul></li>
	 *         <li>You can pass the discuss settings once or you can provide a callback function
	 *         that is called whenever the "Share" button is pressed.
	 *         <ul>
	 *             <li>{object} <b>oOptions.oJamOptions.oDiscussSettings</b><br>
	 *             The settings for the "Discuss in SAP Jam" button, for further allowed settings
	 *             check "sap.collaboration.components.fiori.feed.Component.setSettings"
	 *             function.</li>
	 *             <li>{function} <b>oOptions.oJamOptions.fGetDiscussSettings</b><br>
	 *             The callback function for getting the "Discuss in SAP Jam" button settings. For
	 *             further allowed settings check
	 *             "sap.collaboration.components.fiori.feed.Component.setSettings" function.
	 *             </li>
	 *         </ul></li>
	 *     </ul>
	 *     <li>{array} <b>oOptions.additionalShareButtonList</b><br>
	 *     Contains information about additional buttons in the share menu. Each button needs meta
	 *     information as described above.</li>
	 * </ul>
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseDetailController#setHeaderFooterOptions
	 * @function
	 */
	setHeaderFooterOptions : function(oOptions) {
		this.oApplicationImplementation.oDHFHelper.setHeaderFooter(this, oOptions);
	},

	/**
	 * Enables/disables the header/footer button based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be enabled/disabled.
	 * @param {boolean} bEnabled
	 *     The indicator whether the button has to be enabled.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseDetailController#setBtnEnabled
	 * @function
	 */
	setBtnEnabled : function(sId, bEnabled) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnEnabled(sId, bEnabled);
		}
	},

	/**
	 * Updates the header/footer button text based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be updated.
	 * @param {string} sText
	 *     The new text for the button to be updated.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseDetailController#setBtnText
	 * @function
	 */
	setBtnText : function(sId, sText) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnText(sId, sText);
		}
	},

	/**
	 * Gets a reference to the header button on the top right (left in RTL mode) or
	 * <code>null</code> if no header button is defined.
	 *
	 * @returns {object}
	 *     The reference to the header button or <code>null</code>.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseDetailController#getHeaderBtn
	 * @function
	 */
	getHeaderBtn : function() {
		if (this._oControlStore.oHeaderBtn) {
			return this._oControlStore.oHeaderBtn;
		} else {
			return null;
		}
	},
	/**
	 * Override this method in order to describe whether this view is the main detail (S3) screen
	 * or a screen on deeper hierarchy level.
	 * Note: This method must only return true or false.
	 * The default implementation also returns other values for compatibility reasons.
	 * @returns {boolean}
	 *     Returns <code>true</code> if the application is on the main detail screen.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseDetailController#isMainScreen
	 * @function
	 */
	isMainScreen : function() {
		if (this._oControlStore.oBackButton) {
			return false;
		}
		// for compatibility reasons in order to distinguish from overridden cases
		return "X";
	},

	_navBack : function() {
		window.history.back();
	}
});

}; // end of sap/ca/scfld/md/controller/BaseDetailController.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.controller.BaseMasterController') ) {
  jQuery.sap.declare('sap.ca.scfld.md.controller.BaseMasterController');
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained


/**
 * @class Deprecated, use ScfldMasterController.js instead
 * @name sap.ca.scfld.md.controller.BaseMasterController
 * @constructor
 * @extends sap.ui.core.mvc.Controller
 * @public
 */
sap.ui.core.mvc.Controller.extend("sap.ca.scfld.md.controller.BaseMasterController", {
	constructor : function () {
		// Make sure that our init-coding is executed even if the App overrides onInit() and does not call
		// onInit() of the super class.
		var fMyOnInit = jQuery.proxy(function () {
			var bIsInitialCall = true;
			// get routing object for navigation
			this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);

			this.oApplicationImplementation = sap.ca.scfld.md.app.Application.getImpl();
			this.oApplicationFacade = this.oApplicationImplementation.oConfiguration.oApplicationFacade;

			this.oConnectionManager = this.oApplicationImplementation.getConnectionManager();
			this.iRequestCountStart = this.oConnectionManager.iRequestCount;
			this.oApplicationImplementation.setModels(this);

			// needed for set item from bookmark navigation
			this.oRouter.attachRoutePatternMatched(function (oEvent) {
				var sName = oEvent.getParameter("name");
				var sNewHash;
				var bIsInitial = bIsInitialCall;

				bIsInitialCall = false;
				this._bIsDetailRoute = false;
				this._bIsMasterRoute = false;

				if (sName === "detail") {
					this._bIsDetailRoute = true;
					// call of hook function for hash resolution
					var sResolvedHash = this.resolveHash(oEvent);
					sNewHash = sResolvedHash === undefined ? "/" + oEvent.getParameter("arguments").contextPath : sResolvedHash;

					//if the call is initial the function gets invoked anyway we don't want to invoke it twice
					if (!bIsInitial && this._hashParam !== sNewHash) {
						this._hashParam = sNewHash;
						this._selectDetail();
					}

				}
				if (sName === "master") {
					this._bIsMasterRoute = true;
				}

				this._hashParam = sNewHash;
			}, this);
		}, this);

		var fAppOnInit = jQuery.proxy(this.onInit, this);
		this.onInit = jQuery.proxy(function () {
			fMyOnInit();
			fAppOnInit();
			if (!this.bIsMasterListBindingExists) {
				var oList = this.getList();
				if (oList) {
					var oBinding = oList.getBinding("items");
					this.oApplicationImplementation.setMasterListBinding(this, oBinding);
				}
			}
			// when no request was sent, header and footer will be displayed immediately
			if (this.iRequestCountStart == this.oConnectionManager.iRequestCount) {
				this.oApplicationImplementation.oMHFHelper.defineMasterHeaderFooter(this);
			}
		}, this);
	},

	onInit : function () {
		// do not add any coding here. Just needed in case the App calls onInit() of the super class
	},

	/*
	 * override this method if you have not used the standard way to include the page in the view
	 */
	getPage : function () {
		return sap.ca.scfld.md.app.CommonHeaderFooterHelper.getPageFromController(this);
	},

	/**
	 * function resolveHash needs to be overridden to define a App specific navigation hash resolution
	 * the default navigation hash handler assumes that the hash parameter corresponds to a list item context binding
	 * @param {objectc} oEvent
	 *          event from the attachRoutePatternMatched handler
	 * @return
	 *          binding context derived from resolved Url. Decoding can be done by usage of global function decodeURIComponent
	 *          e.g. decodeURIComponent(oEvent.getParameter("arguments").contextPath)
	 */
	resolveHash : function (oEvent) {
		return;
	},

	_onMasterListLoaded : function (oEvent) {
		this.onDataLoaded();
		this.oApplicationImplementation.onMasterRefreshed(this);
		oEvent.oSource.detachChange(this._onMasterListLoaded, this);
	},

	_onMasterListChanged : function (oEvent) {
		this.oApplicationImplementation.onMasterChanged(this);
	},

	/*************************************************************************************************************
	 * this method is meant to be overridden by the app It shall return an object describing the header or footer
	 * content Return <code>null</code> if you want to define header and footer on your own (default behavior).
	 * Otherwise return an object with attributes determining the header and footer. The following attributes are
	 * supported: <code>onEditPress</code> a handler for the edit button on the master list. Note that this
	 * button will be displayed if this attribute is available. <code>sI18NMasterTitle</code> the i18n-key for
	 * the title of the master list in the i18n-properties file of the App. Note that the corresponding text
	 * should possess a placeholder for the number of displayed items (e.g. <i>Purchase Orders ({0})</i>) The
	 * <code>sI18NSearchFieldPlaceholder</code> the i18n-key for the placeholder text to be displayed in the
	 * search field. Note that this attribute should only be used if you want to display a more specific text then
	 * default ("Search"). E.g. "Search for Purchase Order ...". Normally, this will only be sensible, if backend
	 * search is enabled or the application defines a very specific frontend search.
	 */
	getHeaderFooterOptions : function () {
		return null;
	},

	setBtnEnabled : function (sId, bEnabled) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnEnabled(sId, bEnabled);
		}
	},

	setBtnText : function (sId, sText) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnText(sId, sText);
		}
	},

	refreshHeaderFooterForEditToggle : function () {
		this.oApplicationImplementation.oMHFHelper.defineMasterHeaderFooterInner(this);
	},

	_handleSelect : function (oEvent) {
		this.setListItem(oEvent.getParameter("listItem"));
		if (!sap.ui.Device.system.phone) {
			// note: this only applies when device is in
			// portrait mode
			this.oApplicationImplementation.oSplitContainer.hideMaster();
		}
	},

	_handleItemPress : function (oEvent) {

		this.setListItem(oEvent.getSource());
	},

	getList : function () {
		return this.byId("list");
	},

	setListItem : function (oItem) {

		var oList = this.getList();
		oList.removeSelections();
		oItem.setSelected(true);
		oList.setSelectedItem(oItem, true);

		this.oRouter.navTo("detail", {
			contextPath : oItem.getBindingContext(this.sModelName).getPath().substr(1)
		}, !sap.ui.Device.system.phone);
	},

	/**
	 * Can be overridden where selection is not the default data load behavior
	 *
	 */
	onDataLoaded : function () {
		this._selectDetail();
	},

	/**
	 * Initially selects the first item (excluding for phones) Select the second items in case of a grouped list,
	 * select the first one otherwhise
	 */
	_selectDetail : function () {
		var list = this.getList();
		var items = list.getItems();

		//Only do this on the master/detail view
		if (!(this._bIsDetailRoute || this._bIsMasterRoute)) {
			return;
		}

		// no items available in list: navigate to empty page
		if (items.length === 0 && this.oRouter._oRoutes.noData !== undefined) {
			this.navToEmptyView();
			return;
		}

		// in case items are available and there are no selected items, select the first item in the list
		// (grouping: select the second item)
		if (!sap.ui.Device.system.phone && this._bIsMasterRoute && !list.getSelectedItem()) {
			// in case of a grouped list, need to select the second item (first one is the group header)
			if (list.getBindingInfo("items").binding.isGrouped()) {
				if (items.length > 1) {
					this.setListItem(items[1]);
				} else {
					jQuery.sap.log.error("Selection of the first list item failed as there is only 1 item in a grouped list");
				}
			} else {
				this.setListItem(items[0]);
			}
		}

		if (this._bIsDetailRoute) {
			// deeplink scenario: identify corresponding list item from Url hash

			for (var i = 0; i < items.length; i++) {
				if ((items[i] instanceof sap.m.GroupHeaderListItem)) {
					continue;
				}
				if (items[i].getBindingContext(this.sModelName).getPath() != this._hashParam) {
					continue;
				}

				if (!sap.ui.Device.system.phone) {
					list.removeSelections();
					items[i].setSelected(true);
				}

				return;

			}

			//deeplink but the item was not in the list: pass hash to applyFilterFromContext (needs to be overridden by the app)
			if (this.isBackendSearch()) {
				this.applyFilterFromContext(this._hashParam);
			} else {
				this.navToEmptyView();
			}

		}
	},

	/**
	 * @private
	 * Navigates to the empty view
	 */
	navToEmptyView : function () {
		this.showEmptyView();
	},

	/**
	 * displays the empty detail view with header and info text
	 * @param {string} sViewTitle apps language model Key of the detail views title
	 * @param {string} sLanguageKey scaffoldings language model Key of the emtpy page text
	 * @param {string} sInfoText optional: instead of passing the empty text language key, the text can directly be passed
	 */
	showEmptyView : function (sViewTitle, sLanguageKey, sInfoText) {
		var oList = this.getList();
		oList.removeSelections();

		var oView = this.oRouter.getView(this.getNoDataViewName(), sap.ui.core.mvc.ViewType.XML);
		var oSplitContainer = this.getSplitContainer();

		oSplitContainer.addDetailPage(oView);

		if (sViewTitle === undefined) {
			sViewTitle = this.oApplicationImplementation.oConfiguration.getDetailTitleKey();
		}

		if (sInfoText === undefined) {
			if (sLanguageKey === undefined) {
				sLanguageKey = this.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey();
			}
		}

		oSplitContainer.to(oView.getId(), "show", {
			viewTitle : sViewTitle,
			languageKey : sLanguageKey,
			infoText : sInfoText
		});

		return this;
	},

	/**
	 * returns the split container, that contains the master view
	 */
	getSplitContainer : function () {
		return this.getView().getParent().getParent();
	},

	getNoDataViewName : function () {
		return "sap.ca.scfld.md.view.empty";
	},

	/**
	 * Can be overrideden to define a App specific frontend search. Note that in most cases it is more sensible to
	 * override {@link applySearchPatternToListItem}
	 *
	 * @param {string} sFilterPattern
	 *          the content of the search field
	 * @return the number of list items still visible
	 */
	applySearchPattern : function (sFilterPattern) {
		sFilterPattern = sFilterPattern.toLowerCase();
		var aListItems = this.getList().getItems();
		var bVisibility;

		var iCount = 0;
		var oGroupItem = null;
		var iCountInGroup = 0;
		for (var i = 0; i < aListItems.length; i++) {
			if (aListItems[i] instanceof sap.m.GroupHeaderListItem) {
				if (oGroupItem) {
					if (iCountInGroup == 0) {
						oGroupItem.setVisible(false);
					} else {
						oGroupItem.setCount(iCountInGroup);
					}
				}
				oGroupItem = aListItems[i];
				iCountInGroup = 0;
			} else {
				bVisibility = this.applySearchPatternToListItem(aListItems[i], sFilterPattern);
				aListItems[i].setVisible(bVisibility);
				if (bVisibility) {
					iCount++;
					iCountInGroup++;
				}
			}
		}
		return iCount;
	},

	/**
	 * This method needs to be overridden in case backend search is active (see {@link isBackendSearch}). It
	 * should modify the list binding such that it reflects the filter entered in the search field. Sample coding:
	 * var oFilter = new sap.ui.model.Filter("MyField", sap.ui.model.FilterOperator.EQ, sFilterPattern); var
	 * aFilters = [oFilter]; oBinding.filter(aFilters);
	 *
	 * @param {string} sFilterPattern
	 *          the content of the search field
	 * @param {object} oBinding
	 *          the context binding of the list items to be modified.
	 *
	 * list binding needs to be updated with filter parameter -> this will trigger a new oData get automatically
	 */
	applyBackendSearchPattern : function (sFilterPattern, oBinding) {

	},

	/**
	 * @param {string} sContext
	 *           contains the hash provided via bookmark navigation
	 * Deeplink navigation with backend search active: when navigating to the app via bookmark, the bookmarked item
	 * might not be part of the initially loaded list items (usually the case for scenarios where more items exist in the backend
	 * than shown at once in the list). The assumption in this case is that the backend search is active in order to be able to retrieve
	 * further list items. If the check on the initial list against the navigation context value gives no result, this method is being called.
	 * This method needs to be overridden by apps where this scenario applies; the app has then to take care about retrieving the correct item via backend search
	 */
	applyFilterFromContext : function (sContext) {
		this.navToEmptyView();
	},

	/**
	 * Override this method when defining a custom frontend search. This method will be called for each list item
	 * and decides whether it fulfills the search criteria.
	 *
	 * @param {object} oItem
	 *          the item to be tested
	 * @param {string} sFilterPattern
	 *          the search pattern
	 * @returns {boolean} whether the item fulfills the search pattern
	 */
	applySearchPatternToListItem : function (oItem, sFilterPattern) {
		if (sFilterPattern == "") {
			return true;
		}
		var oIteshellata = oItem.getBindingContext(this.sModelName).getProperty();
		for (var sKey in oIteshellata) {
			var sValue = oIteshellata[sKey];
			// if (sValue instanceof Date) {
			// //just for the filter take each number as string
			// sValue = sValue.getDate() + "." +
			// sValue.getMonth() + "." + sValue.getFullYear();
			// }
			if (typeof sValue == "string") {
				if (sValue.toLowerCase().indexOf(sFilterPattern) != -1) {
					return true;
				}
			}
		}
		// if nothing found in unformatted data, check UI
		// elements
		if ((oItem.getIntro() && oItem.getIntro().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getTitle() && oItem.getTitle().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getNumber() && oItem.getNumber().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getNumberUnit() && oItem.getNumberUnit().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getFirstStatus() && oItem.getFirstStatus().getText().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getSecondStatus() && oItem.getSecondStatus().getText().toLowerCase().indexOf(sFilterPattern) != -1)) {
			return true;
		}
		// last source is attribute array
		var aAttributes = oItem.getAttributes();
		for (var j = 0; j < aAttributes.length; j++) {
			if (aAttributes[j].getText().toLowerCase().indexOf(sFilterPattern) != -1) {
				return true;
			}
		}
		return false;
	},

	_applyClientSideSearch : function () {
		var sFilterPattern = this._oControlStore.oMasterSearchField.getValue();
		var iCount = this.applySearchPattern(sFilterPattern);
		this.oApplicationImplementation.oMHFHelper.setMasterTitle(this, iCount);
	},

	/**
	 * determines whether search is triggered with each change of the search field content (or only when the user
	 * explicitly starts the search). Default implementation triggers search immediately, exactly when backend
	 * search is disabled (see {@link isBackendSearch}. Override this method if you want 'live' search on backend
	 * or explicit search on frontend.
	 */
	isLiveSearch : function () {
		return !this.isBackendSearch();
	},

	/**
	 * determines whether search (triggered by search field) is performed on backend or frontend (frontend being
	 * default behavior).
	 */
	isBackendSearch : function () {
		return false;
	},

	/**
	 * when ever you bind a master list dynamically you have to call this method
	 */
	registerMasterListBind : function (oList) {
		if (oList) {
			var oBinding = oList.getBinding("items");
			this.oApplicationImplementation.setMasterListBinding(this, oBinding);
		}
		// when no request was sent, header and footer will be displayed immediately
		if (this.iRequestCountStart == this.oConnectionManager.iRequestCount) {
			this.oApplicationImplementation.oMHFHelper.defineMasterHeaderFooter(this);
		}
	}
});
}; // end of sap/ca/scfld/md/controller/BaseMasterController.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.controller.ScfldMasterController') ) {
  jQuery.sap.declare('sap.ca.scfld.md.controller.ScfldMasterController');
/*
 * Copyright (C) 2009-2015 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained



/**
 * @class This class shall be used as the base class for the master view controllers in
 *     master-detail scenarios.
 * @name sap.ca.scfld.md.controller.ScfldMasterController
 * @constructor
 * @extends sap.ui.core.mvc.Controller
 * @public
 */
sap.ui.core.mvc.Controller.extend("sap.ca.scfld.md.controller.ScfldMasterController", {
	/**
	 * Clear selection of master list, if needed.
	 * If the list is in MultiSelect mode and the function keepMultiSelection of the configuration
	 * returns true, then the selection is not cleared.
	 * @private
	 */
	_clearSelection : function () {
		var oList = this.getList(),
			bKeepSelection = this._oApplicationImplementation.oConfiguration.keepMultiSelection();
		if (oList && (oList.getMode() !== sap.m.ListMode.MultiSelect || !bKeepSelection)) {
			oList.removeSelections(true);
		}
	},

	_onMasterListChanged : function (oEvent) {
		this._oApplicationImplementation.onMasterChanged(this);
		this.selectItemMatchingTheLastNavigation();
		var oList = this.getList();
		if (oList && oList.getMode() === "MultiSelect" && this._oApplicationImplementation.bManualMasterRefresh === true) {
			oList.removeSelections(true);
		}
		//when filtering and search are used together it can happen that the search activated the emptyList. If subsequently
		//the filtering is removed the emptyList needs to be replaced by the original master list. The search can't do that because
		//commenHeaderFooter handler is not involved in filtering
	if (oList && oList.hasStyleClass("hiddenList") && oList.getBinding("items").getLength() > 0) {
		this.getList().removeStyleClass("hiddenList");
		this._emptyList.addStyleClass("hiddenList");
		}
	},

	_handleItemPress : function (oEvent) {
		this.setListItem(oEvent.getSource());
	},
	_handleSelect : function (oEvent) {
		this.setListItem(oEvent.getParameter("listItem"));
		if (!sap.ui.Device.system.phone) {
			// note: this only applies when device is in
			// portrait mode
			this._oApplicationImplementation.oSplitContainer.hideMaster();
		}
	},
	_onMasterListLoaded : function (oEvent) {
		this.onDataLoaded();
		this._oApplicationImplementation.onMasterRefreshed(this);
		oEvent.oSource.detachChange(this._onMasterListLoaded, this);
		this._bListLoaded = true;
		this.fireEvent("_onMasterListLoaded");
	},
	constructor : function () {
		sap.ui.core.mvc.Controller.apply(this, arguments);

		this._bListLoaded = false;
		var iRequestCount = 0;
		var oConnectionManager = null;
		// Make sure that our init-coding is executed even if the App overrides onInit() and does not call
		// onInit() of the super class.
		var fMyOnInit = jQuery.proxy(function () {
			// get routing object for navigation
			this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);

			this._oApplicationImplementation = sap.ca.scfld.md.app.Application.getImpl();
			this.oApplicationFacade = this._oApplicationImplementation.oConfiguration.oApplicationFacade;

			oConnectionManager = this._oApplicationImplementation.getConnectionManager();
			iRequestCount = oConnectionManager.iRequestCount;

			// needed for set item from bookmark navigation
			this.oRouter.attachRoutePatternMatched(function (oEvent) {
				this._sDetailContextPath = undefined;

				if (this.isDetailRoute(oEvent)) {
					this._onDetailMatched(oEvent);
				}
				if (this.isMasterRoute(oEvent)) {
					this._onMasterMatched(oEvent);
				}
			}, this);

			this._iRequestCount = 0;
			var oModel = oConnectionManager.getModel(this.sModelName);
			// if the model could not be created still create header and footer bar, but then return
			if (!oModel) {
				jQuery.sap.log.error("ScfldMasterController", "Initialization stopped, as no model is available");
				return;
			}
			oModel.attachRequestSent(null, function () {
				this._iRequestCount ++;
			}, this);

			oModel.attachRequestCompleted(null, function () {
				this._iRequestCount --;
				//some requests are sent before we attach us, we are only interested when
				//there is no queue after initializing the controller
				if (this._iRequestCount < 0) {
					this._iRequestCount = 0;
				}
				if (this._iRequestCount === 0) {
					this.fireEvent("_allListModelUpdatesCompleted");
				}
			}, this);

			this._oApplicationImplementation.setModels(this);

			this._emptyList = new sap.m.List();
			this._emptyList.addStyleClass("hiddenList");
			this.getPage().addContent(this._emptyList);
			var fMyOnExit = jQuery.proxy(function () {
				if (this._emptyList) {
					var oPage = this.getPage();
					if (oPage) {
						oPage.removeContent(this._emptyList);
					}
					this._emptyList.destroy();
					if (this._oControlStore && this._oControlStore.oMasterSearchField) {
						this._oControlStore.oMasterSearchField.destroy();
						delete this._oControlStore.oMasterSearchField;
					}
				}
			}, this);

			this._oApplicationImplementation.registerExitModule(fMyOnExit);

		}, this);

		var fAppOnInit = jQuery.proxy(this.onInit, this);
		this.onInit = jQuery.proxy(function () {
			fMyOnInit();
			fAppOnInit();
			var oList = this.getList();
			if (oList) {
				var oBinding = oList.getBinding("items");
				this._oApplicationImplementation.setMasterListBinding(this, oBinding);
			}
			// when no request was sent, header and footer will be displayed immediately
			if (iRequestCount == oConnectionManager.iRequestCount) {
				var bAllDisabled = !!oConnectionManager.sErrorInStartMessage;
				this._oApplicationImplementation.oMHFHelper.defineMasterHeaderFooter(this, bAllDisabled);
				if (bAllDisabled) {
					this._bListLoaded = true;
					if (this._oApplicationImplementation.bIsPhone) {
					  var oList = this.getList();
					  if (oList) {
						  oList.setNoDataText(oConnectionManager.sErrorInStartMessage);
					  }
					} else {
						this.showEmptyView(this._oApplicationImplementation.oConfiguration.getDetailTitleKey(), undefined, oConnectionManager.sErrorInStartMessage);
					}
/*					  this.getView().addEventDelegate({
						  onBeforeShow : jQuery.proxy(function () {
					    this.showEmptyView(this._oApplicationImplementation.oConfiguration.getDetailTitleKey(), undefined, oConnectionManager.sErrorInStartMessage);
					  }, this)});
				  } */
			  }
			}
		}, this);
	},

	onInit : function () {
		// do not add any coding here. Just needed in case the App calls onInit() of the super class
	},

	/**
	 * Gets the <code>sap.m.Page</code> instance for the master-detail scenario. Override this
	 * function if you have not used the standard way to include the page in the view.
	 * @returns {sap.m.Page}
	 *    The page instance.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getPage
	 * @function
	 */
	getPage : function () {
		return sap.ca.scfld.md.app.CommonHeaderFooterHelper.getPageFromController(this);
	},

	/**
	 * Returns the list control of the master list.
	 * @returns {sap.m.List}
	 *    The list instance of the master view.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getList
	 * @function
	 */
	getList : function () {
		return this.byId("list");
	},

	/**
	 * Sets the list item and navigates to the corresponding hash.
	 * Maybe overridden.
	 *
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#setListItem
	 * @function
	 */
	setListItem : function (oItem) {
		this._clearSelection();
		oItem.setSelected(true);
		this._navToListItem(oItem);
	},

	/**
	 * Indicates whether the given route information is a detail route.
	 * May be overwritten.
	 *
	 * @param {object} oEvent
	 *     The route matched event object.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#isDetailRoute
	 * @function
	 */
	isDetailRoute : function (oEvent) {
		var sName = oEvent.getParameter("name");
		return sName === this.getDetailRouteName();
	},

	/**
	 * Gets the name of the detail route.
	 * Needs to be overwritten if the name of the route leading to the detail view differs from the
	 * default which is "detail".
	 * @returns {string}
	 *     The name of the detail route.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getDetailRouteName
	 * @function
	 */
	getDetailRouteName : function () {
		return "detail";
	},

	/**
	 * Indicates whether the given route information is a master route.
	 * May be overwritten.
	 * @param {object} oEvent
	 *     The route matched event object.
	 * @returns {boolean}
	 *     Returns <code>true</code> if the route of the route matched event is a master route.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#isMasterRoute
	 * @function
	 */
	isMasterRoute : function (oEvent) {
		var sName = oEvent.getParameter("name");
		return sName === this.getMasterRouteName();
	},

	/**
	 * Gets the name of the master route.
	 * Needs to be overwritten if the name of the route leading to the master view differs from
	 * the default which is "master".
	 * @return {string}
	 *     The name of the route leading to the master view.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getMasterRouteName
	 * @function
	 */
	getMasterRouteName : function () {
		return "master";
	},

	/**
	 * Gets executed when the hash matches the pattern of the master route.
	 * @private
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#_onMasterMatched
	 * @function
	 */
	_onMasterMatched : function (oEvent) {
		//Do nothing on the phone, just show the list
		if (sap.ui.Device.system.phone) {
			return;
		}

		//Handle desktop

		//Wait for the list to load - then select the first item
		if (!this._bListLoaded) {
			this.attachEventOnce("_onMasterListLoaded", function () {
				this.selectFirstItem();
			}, this);
		} else {
			this.selectFirstItem();
		}
	},

	/**
	 * Gets executed when the hash matches the pattern of the detail route.
	 * @private
	 */
	_onDetailMatched : function (oEvent) {
		var sContextPath = this._sDetailContextPath = this.getBindingContextPathFor(oEvent.getParameter("arguments"));
		//List is still getting refreshed
		if (this._iRequestCount > 0) {
			this.attachEventOnce("_allListModelUpdatesCompleted", function () {
				this._handleDetailMatched(sContextPath);
			}, this);
			return;
		}

		//Wait for the list to load - then select the corresponding item
		if (!this._bListLoaded) {
			this.attachEventOnce("_onMasterListLoaded", function () {
				this._handleDetailMatched(sContextPath);
			}, this);
		} else {
			this._handleDetailMatched(sContextPath);
		}
	},

	/**
	 * Checks if the item exists in the list, if it does not it will show the empty view.
	 *@private
	 */
	_handleDetailMatched : function (sContextPath) {
		//no context path was given, an app might not have implemented this. Return before errors happen.
		if (sContextPath === undefined) {
			return;
		}

		var oItem = this.findItemByContextPath(sContextPath);

		//Item was not found
		if (!oItem) {
			//In the desktop case with backend search, the app can try to load more entries, if not the empty view will show up
			if (!sap.ui.Device.system.phone && this.isBackendSearch()) {
				this.applyFilterFromContext(sContextPath);
				return;
			}

			//we show the empty screen as default
			this.noItemFoundForContext(sContextPath);
			return;
		}

		//Clear the list selection in the desktop case.
		if (!sap.ui.Device.system.phone && oItem) {
			this._clearSelection();
			oItem.setSelected(true);
		}
	},

	/**
	 * Selects the last item that was hit by the detail route.
	 * @protected
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#selectItemMatchingTheLastNavigation
	 * @function
	 */
	selectItemMatchingTheLastNavigation : function () {
		var oList = this.getList();
		if (oList.getMode() === "MultiSelect") {
			return;
		}

		if (this._sDetailContextPath === undefined) {
			return;
		}

		var oItem = oList.getSelectedItem();
		var oContext = oItem && oItem.getBindingContext(this.sModelName);

		//If this item is already selected, don't iterate over the whole list again
		if (oContext && oContext.getPath() === this._sDetailContextPath) {
			return;
		}

		oItem = this.findItemByContextPath(this._sDetailContextPath);
		this._clearSelection();
		if (oItem) {
			oItem.setSelected(true);
		}
	},

	/**
	 * Reacts on the case when an item was not found in the list after navigating. The default
	 * implementation shows the empty view.<br>
	 * May be overwritten by the application.
	 * @param {string} sContextPath
	 *    The binding context path.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#noItemFoundForContext
	 * @function
	 */
	noItemFoundForContext : function (sContextPath) {
		if (this._oApplicationImplementation.bIsPhone) {
			var oSplitContainer = this.getSplitContainer();
			oSplitContainer.to(this.getView(), "show");
		} else {
		  this.showEmptyView(null, null, this._oApplicationImplementation.oConnectionManager.sErrorInStartMessage);
		}
	},

	/**
	 * Finds an item by the given context path.
	 * @param {string} sContextPath
	 *    The binding context path.
	 * @returns {sap.m.ListItemBase}
	 *    A list item or <code>null</code> if for given path no item was found.
	 * @protected
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#findItemByContextPath
	 * @function
	 */
	findItemByContextPath : function (sContextPath) {
		var oBindingContext;
		var oList = this.getList();
		var aItems = oList.getItems();

		var result = jQuery.grep(aItems, function (oItem) {
			oBindingContext = oItem.getBindingContext(this.sModelName);

			if (oItem instanceof sap.m.GroupHeaderListItem) {
				return false;
			}

			if (oBindingContext && (oBindingContext.getPath() !== sContextPath)) {
				return false;
			}

			return true;
		});

		return result[0] || null;
	},


	/**
	 * Creates a Binding path from the arguments of the detail route that matches a list item.
	 * May be overwritten by the application.
	 *
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getBindingContextPathFor
	 * @function
	 */
	getBindingContextPathFor : function (oArguments) {
		if (oArguments.contextPath === undefined) {
			jQuery.sap.log.warning("The context path was undefined. If you are using a route without it please overwrite the function getBindingContextPathFor in your master controller.");
			return undefined;
		}

		return "/" + oArguments.contextPath;
	},

	/**
	 * Selects and navigates to the first item of the List.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#selectFirstItem
	 * @function
	 */
	selectFirstItem : function () {
		var oList = this.getList();
		var aItems = oList.getItems();
		var oListItem;

		if (aItems.length < 1) {
			return;
		}
		oListItem = this._oApplicationImplementation.getFirstListItem(this);

		if (oListItem) {
			this.setListItem(oListItem);
		}
	},

	/**
	 * Navigates to a list item and adds a history on the phone. In desktop it is not history
	 * relevant
	 * @private
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#_navToListItem
	 * @function
	 */
	_navToListItem : function (oListItem) {
		this.oRouter.navTo(this.getDetailRouteName(),
				this.getDetailNavigationParameters(oListItem),
				!sap.ui.Device.system.phone);
	},

	/**
	 * Creates the parameters necessary for injecting the values into the detail route of the
	 * application. May be overwritten.
	 * @param {sap.m.ListItemBase} oListItem
	 * @returns {object}
	 *     Returns an object with a property <code>contextPath</code> which contains the binding
	 *     context path for the given list item.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getDetailNavigationParameters
	 * @function
	 */
	getDetailNavigationParameters : function (oListItem) {
		return {
			contextPath : oListItem.getBindingContext(this.sModelName).getPath().substr(1)
		};
	},

	/**
	 * Gets the content for the header and footer of the master view.
	 *
	 * <b>This function is meant to be overridden by the application</b>. It shall return an object
	 * describing the Master page header and footer content. Return <code>null</code> if you want
	 * to define Master page header and footer on your own (default behavior). Otherwise return an
	 * object with properties determining the Master page header and footer.
	 *
	 * <b>Supported properties for buttons defined below:</b>
	 * There are several predefined buttons which you can use on the footer bar or in the header.
	 * If you provide properties below you can overwrite the default values of the predefined
	 * buttons. These properties are also needed for custom-defined buttons. In general, every
	 * button can have the following properties:</p>
	 * <ul>
	 *     <li>{function} <b>onBtnPressed</b><br>
	 *     Callback function of the specific button, that is called if the button is pressed.</li>
	 *     <li>{boolean} <b>bDisabled</b><br>
	 *     An <i>optional</i> property to set the button initially disabled/enabled.</li>
	 *     <li>{string} <b>sI18nBtnTxt</b><br>
	 *     If the button doesn't have a fix predefined text, you can provide the key of the i18n
	 *     text which is used as the text of the button.</li>
	 *     <li>{string} <b>sId</b><br>
	 *     An <i>optional</i> property to set an ID for the specific button. This ID is meant to be
	 *     used in the call of the <code>setBtnEnabled</code> or <code>setBtnText</code> function.
	 *     If you configure your application to use stable IDs
	 *     (see {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}) this ID is used to
	 *     generate a stable ID. Ensure that <code>sId</code> is a valid SAPUI5 ID.</li>
	 *     <li>{string} <b>sTooltip</b><br>
	 *     Optional tooltip for the button. Ensure that the text is localized.
	 * </ul>
	 * The following properties are supported:<br>
	 * <b>Master page header part:</b>
	 * <ul>
	 * <li>{function} <b>onBack</b>
	 * If the application need to overwrite the default <code>history.back</code> behavior of the
	 * master view, the application needs to provide a function that the framework can call.
	 * If you want to suppress the back button in the master page, you can set the
	 * <code>onBack</code> property with value <code>null</code>.</li>
	 * <li>{function (sTempSearchValue, fRefreshCompleted)} <b>onRefresh</b><br>
	 * If the application might want to prevent a refresh of the master list (e.g. because
	 * there are unsaved changes) or if the list is not bound to an OData model but to a JSON model
	 * and the application must do the refresh itself the application might define this callback
	 * function. The <code>onRefresh</code> handler will get the current value of the search field
	 * as first parameter and the framework callback function as second parameter and it has to
	 * return:
	 *     <ul><li><i>&gt;0</i>: which means framework proceeds as usual</li>
	 *     <li><i>0</i>: which means framework shall abort the refresh</li>
	 *     <li><i>&lt;0</i>: which means the application will perform the refresh itself and calls
	 *     the given <code>fRefreshCompleted</code> function when refresh is finished</li></ul>
	 * <li>In the upper right corner of the master list you have the edit button which allows to
	 * toggle between single and multi-select. You can choose one of the following properties:
	 *    <ul>
	 *    <li>{function} <b>onEditPress</b><br>
	 *    You can provide this callback function if you just want to get notified if the edit
	 *    button is pressed.</li>
	 *    <li>{object} <b>oEditBtn</b><br>
	 *    Alternatively you can provide some meta information for the edit button. Only
	 *    <code>sId</code>, <code>bDisabled</code> and <code>onBtnPressed</code> are supported.
	 *    </li>
	 *    </ul>
	 * </li>
	 * <li>{string} <b>sMasterTitleId</b><br>
	 * An ID for the master title. This property is supported only if application is configured to
	 * use stable IDs (see {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}). The
	 * resulting control ID is relative to the enclosing view ID.
	 * Ensure that <code>sMasterTitleId</code> is a valid SAPUI5 ID.</li>
	 * <li>{string} <b>sI18NMasterTitle</b><br>
	 * The i18n-key for the title of the master page in the i18n-properties file of the
	 * application. Note that the corresponding text should possess a placeholder for the number of
	 * displayed items (e.g. <i>Purchase Orders ({0})</i>)</li>
	 * <li>{string} <b>sI18NSearchFieldPlaceholder</b><br>
	 * The i18n-key for the placeholder text to be displayed in the search field. Note that this
	 * property should only be used if you want to display a more specific text then default
	 * (<i>Search</i>). E.g. <i>"Search for Purchase Order ..."</i>. Normally, this will only be
	 * sensible, if backend search is enabled or the application defines a very specific frontend
	 * search.</li>
	 * </ul>
	 * <b>Master page footer part:</b>
	 * <ul>
	 * <li>{array} <b>aAdditionalSettingButtons</b><br>
	 * Array of button definitions which can be added to the technical settings menu (e.g. About,
	 * Login Details and Logout). Every button should have the above listed meta information.</li>
	 * <li>If you want to get the predefined add button, you can choose one of the following
	 * properties:
	 *    <ul>
	 *    <li>{function} <b>onAddPress</b><br>
	 *    You can provide this callback function if you just want to get notified if the <i>add</i>
	 *    button is pressed</li>
	 *    <li>{object} <b>oAddOptions</b><br>
	 *    You can provide meta information for the add button as described above.
	 *    <code>oAddOptions.sI18nBtnTxt</code> cannot be set. The add button does not have a text.
	 *    </li>
	 *    </ul>
	 * </li>
	 * <li>{object} <b>oFilterOptions</b><br>
	 * If you want to get the predefined filter button, you can choose one of the following options
	 * besides the default button properties <code>oFilterOptions.bDisabled</code>,
	 * <code>oFilterOptions.sId</code> and <code>oFilterOptions.sTooltip</code> as described above:
	 *     <ul>
	 *     <li>{function} <b>oFilterOptions.onFilterPressed</b><br>
	 *     Provide the callback function if you only want to get notified if the filter button is
	 *     pressed.</li>
	 *     <li>In case of your filter criterion/item can be represented by simple text with key,
	 *     you can provide the following settings:<br>
	 *         <ul><li>
	 *         {array} <b>oFilterOptions.aFilterItems</b><br>
	 *         An array including the possible filter items with the following properties:
	 *             <ul><li>{string}<b>oFilterOptions.aFilterItems[i].text</b><br>
	 *             The text to be shown to the user.</li>
	 *             <li>{string} <b>oFilterOptions.aFilterItems[i].key</b><br>
	 *             The unique filter key value.</li></ul></li>
	 *        <li>{string} <b>oFilterOptions.sSelectedItemKey</b><br>
	 *        The key value of the default/current selected filter item.</li>
	 *        <li>{function (sKey)} <b>oFilterOptions.onFilterSelected</b><br>
	 *        The callback function for the application, if a filter item is selected. The filter
	 *        key will be passed as as parameter.</li>
	 *        </ul>
	 *     </li></ul>
	 * </li>
	 * <li>{object} <b>oGroupOptions</b><br>
	 * If you want to get the predefined group button, you can choose one of the following options
	 * besides the default button properties <code>oGroupOptions.bDisabled</code>,
	 * <code>oGroupOptions.sId</code> and <code>oGroupOptions.sTooltip</code> as described above:
	 *     <ul>
	 *     <li>{function} <b>oGroupOptions.onGroupPressed</b><br>
	 *     Provide the callback function if you only want to get notified if the group button is
	 *     pressed.</li>
	 *     <li>In case of your group criterion/item can be represented by simple text with key,
	 *     you can provide the following settings:<br>
	 *         <ul><li>
	 *         {array} <b>oGroupOptions.aGroupItems</b><br>
	 *         An array including the possible group items with the following properties:
	 *             <ul><li>{string} <b>oGroupOptions.aGroupItems[i].text</b><br>
	 *             The text to be shown to the user.</li>
	 *             <li>{string}<b>oGroupOptions.aGroupItems[i].key</b><br>
	 *             The unique group key value.</li></ul></li>
	 *        <li>{string} <b>oGroupOptions.sSelectedItemKey</b><br>
	 *        The key value of the default/current selected group item.</li>
	 *        <li>{function (sKey)} <b>oGroupOptions.onGroupSelected</b><br>
	 *        The callback function for the application, if a group item is selected. The group key
	 *        will be passed as as parameter.</li>
	 *        </ul>
	 *     </li></ul>
	 * </li>
	 * <li>{object} <b>oSortOptions</b><br>
	 * If you want to get the predefined sort button, you can choose one of the following options
	 * besides the default button properties <code>oSortOptions.bDisabled</code>,
	 * <code>oSortOptions.sId</code> and <code>oSortOptions.sTooltip</code> as described above:
	 *     <ul>
	 *     <li>{function} <b>oSortOptions.onSortPressed</b><br>
	 *     Provide the callback function if you only want to get notified if the sort button is
	 *     pressed.</li>
	 *     <li>In case of your sort criterion/item can be represented by simple text with key,
	 *     you can provide the following settings:<br>
	 *         <ul><li>
	 *         {array} <b>oSortOptions.aSortItems</b><br>
	 *         An array including the possible sort items with the following properties:
	 *             <ul><li>{string}<b>oSortOptions.aSortItems[i].text</b><br>
	 *             The text to be shown to the user.</li>
	 *             <li>{string} <b>oSortOptions.aSortItems[i].key</b><br>
	 *             The unique sort key value.</li></ul></li>
	 *        <li>{string} <b>oSortOptions.sSelectedItemKey</b><br>
	 *        The key value of the default/current selected sort item.</li>
	 *        <li>{function (sKey)} <b>oSortOptions.onSortSelected</b><br>
	 *        The callback function for the application, if a sort item is selected. The sort key
	 *        will be passed as as parameter.</li>
	 *        </ul>
	 *     </li></ul>
	 * </li>
	 * <li>{array} <b>buttonList</b><br>
	 * A list of buttons which can be defined additionally to the predefined buttons. Each button
	 * needs meta information as described above.</li>
	 * </ul>
	 * @public
	 * @returns {object}
	 *    Returns <code>null</code> or the configuration object for master header and footer
	 *    content as described above.
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getHeaderFooterOptions
	 * @function
	 */
	getHeaderFooterOptions : function () {
		return null;
	},

	/**
	 * Enables/disables the header/footer button based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be enabled/disabled.
	 * @param {boolean} bEnabled
	 *     The indicator whether the button has to be enabled.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#setBtnEnabled
	 * @function
	 */
	setBtnEnabled : function (sId, bEnabled) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnEnabled(sId, bEnabled);
		}
	},

	/**
	 * Updates the header/footer button text based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be updated.
	 * @param {string} sText
	 *     The new text for the button to be updated.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#setBtnText
	 * @function
	 */
	setBtnText : function (sId, sText) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnText(sId, sText);
		}
	},

	/**
	 * Triggers a re-computation to adjust the master footer bar.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#refreshHeaderFooterForEditToggle
	 * @function
	 */
	refreshHeaderFooterForEditToggle : function () {
		this._oApplicationImplementation.oMHFHelper.defineMasterHeaderFooterInner(this);
	},

	/**
	 * A hook for the application to be notified if the master list data has been loaded.
	 * The default implementation does nothing.
	 * Can be overwritten by the application.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#onDataLoaded
	 * @function
	 */
	onDataLoaded : function () {
	},

	/**
	 * Displays the empty detail view with header and info text.
	 * @param {string} sViewTitle
	 *    The application's language model key of the empty detail view's title.
	 * @param {string} sLanguageKey
	 *    Scaffolding's language model key for the empty page text.
	 * @param {string} [sInfoText=undefined]
	 *    Instead of passing <code>sLanguageKey</code>, the text can directly be passed.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#showEmptyView
	 * @function
	 */
	showEmptyView : function (sViewTitle, sLanguageKey, sInfoText) {
		this._clearSelection();

		var oView = this.oRouter.getView(this.getNoDataViewName(), sap.ui.core.mvc.ViewType.XML);
		var oSplitContainer = this.getSplitContainer();

		oSplitContainer.addDetailPage(oView);

		if (!sViewTitle) {
			sViewTitle = this._oApplicationImplementation.oConfiguration.getDetailTitleKey();
		}

		if (!sInfoText) {
			if (!sLanguageKey) {
				sLanguageKey = this._oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey();
			}
		}
		var oController = oView.getController();
		if (oController.setTitleAndMessage) {
			oController.setTitleAndMessage(sViewTitle, sLanguageKey, sInfoText);
			var oEventData = { };
		} else {
			var oEventData = {
				viewTitle : sViewTitle,
				languageKey : sLanguageKey,
				infoText : sInfoText
			};
		}
		oView.getController().setTitleAndMessage(sViewTitle, sLanguageKey, sInfoText);
		oSplitContainer.to(oView.getId(), "show", oEventData);
		return this;
	},

	/**
	 * Returns the split container, that contains the master view.
	 * @returns {sap.m.SplitContainer}
	 *     Returns the split container instance, that contains the master view.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getSplitContainer
	 * @function
	 */
	getSplitContainer : function () {
		return this._oApplicationImplementation.oSplitContainer;
//		return this.getView().getParent().getParent();
	},

	/**
	 * Gets the name of the empty view.
	 * @returns {string}
	 *     The name of the empty view. Default is "sap.ca.scfld.md.view.empty".
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#getNoDataViewName
	 * @function
	 */
	getNoDataViewName : function () {
		return "sap.ca.scfld.md.view.empty";
	},

	/**
	 * Navigates to the empty view.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#navToEmptyView
	 * @function
	 */
	navToEmptyView : function () {
		this.showEmptyView();
	},

	/**
	 * Applies the current value of the search field to the master list.
	 * Can be overwritten to define a application specific frontend search. Note that in most cases
	 * it is more sensible to override {@link applySearchPatternToListItem}.
	 *
	 * @param {string} sFilterPattern
	 *     The content of the search field.
	 * @return {number}
	 *     The number of list items still visible.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#applySearchPattern
	 * @function
	 */
	applySearchPattern : function (sFilterPattern) {
		sFilterPattern = sFilterPattern.toLowerCase();
		var aListItems = this.getList().getItems();
		var bVisibility;

		var iCount = 0;
		var oGroupItem = null;
		var iCountInGroup = 0;
		for (var i = 0; i < aListItems.length; i++) {
			if (aListItems[i] instanceof sap.m.GroupHeaderListItem) {
				if (oGroupItem) {
					if (iCountInGroup == 0) {
						oGroupItem.setVisible(false);
					} else {
						oGroupItem.setVisible(true);
						oGroupItem.setCount(iCountInGroup);
					}
				}
				oGroupItem = aListItems[i];
				iCountInGroup = 0;
			} else {
				bVisibility = this.applySearchPatternToListItem(aListItems[i], sFilterPattern);
				aListItems[i].setVisible(bVisibility);
				if (bVisibility) {
					iCount++;
					iCountInGroup++;
				}
			}
		}
		//last group check, fix for CSS 0120061532 0003589854 2013
		if (oGroupItem) {
			if (iCountInGroup == 0) {
				oGroupItem.setVisible(false);
			} else {
				oGroupItem.setVisible(true);
				oGroupItem.setCount(iCountInGroup);
			}
		}
		//if search term is set to empty, take the binding length instead of the current visible items due to paging case.
		if (!sFilterPattern) {
			if (this._oMasterListBinding) {
				iCount = this._oMasterListBinding.getLength();
			}
		}
		return iCount;
	},

	/**
	 * This function needs to be overridden in case backend search is active (see
	 * {@link isBackendSearch}). It should modify the list binding such that it reflects the filter
	 * entered in the search field. Sample coding:<br>
	 * <code>
	 * var oFilter = new sap.ui.model.Filter("MyField", sap.ui.model.FilterOperator.EQ, sFilterPattern),
	 *     aFilters = [oFilter];<br>
	 * oBinding.filter(aFilters);
	 * </code>
	 *
	 * @param {string} sFilterPattern
	 *     The content of the search field.
	 * @param {object} oBinding
	 *     The context binding of the list items to be modified.
	 *
	 * List binding needs to be updated with filter parameter -> this will trigger a new oData get
	 * automatically.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#applyBackendSearchPattern
	 * @function
	 */
	applyBackendSearchPattern : function (sFilterPattern, oBinding) {

	},

	/**
	 * Applies filter from given context.
	 * When navigating to the application via bookmark, the bookmarked item might not be part of
	 * the initially loaded list items (usually the case for scenarios where more items exist in
	 * the backend than shown at once in the list). The assumption in this case is that the
	 * backend search is active in order to be able to retrieve further list items. If the check
	 * on the initial list against the navigation context value gives no result, this function is
	 * being called. This function needs to be overridden by the application if this scenario
	 * applies; the application has then to take care about retrieving the correct item via
	 * backend search.
	 * @param {string} sContext
	 *     Contains the hash provided via bookmark navigation or deeplink navigation.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#applyFilterFromContext
	 * @function
	 */
	applyFilterFromContext : function (sContext) {
		this.showEmptyView();
	},

	/**
	 * Applies given search pattern to given list item.
	 * Override this function when defining a custom frontend search. This function will be called
	 * for each list item and decides whether it fulfills the search criteria.
	 *
	 * @param {object} oItem
	 *    The item to be tested.
	 * @param {string} sFilterPattern
	 *    The filter pattern.
	 * @returns {boolean}
	 *    Returns <code>true</code> if the item matches to the current filter pattern.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#applySearchPatternToListItem
	 * @function
	 */
	applySearchPatternToListItem : function (oItem, sFilterPattern) {
		if (sFilterPattern == "") {
			return true;
		}
		var oIteshellata = oItem.getBindingContext(this.sModelName).getProperty();
		for (var sKey in oIteshellata) {
			var sValue = oIteshellata[sKey];
			// if (sValue instanceof Date) {
			// //just for the filter take each number as string
			// sValue = sValue.getDate() + "." +
			// sValue.getMonth() + "." + sValue.getFullYear();
			// }
			if (typeof sValue == "string") {
				if (sValue.toLowerCase().indexOf(sFilterPattern) != -1) {
					return true;
				}
			}
		}
		// if nothing found in unformatted data, check UI
		// elements
		if ((oItem.getIntro() && oItem.getIntro().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getTitle() && oItem.getTitle().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getNumber() && oItem.getNumber().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getNumberUnit() && oItem.getNumberUnit().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getFirstStatus() && oItem.getFirstStatus().getText().toLowerCase().indexOf(sFilterPattern) != -1)
				|| (oItem.getSecondStatus() && oItem.getSecondStatus().getText().toLowerCase()
						.indexOf(sFilterPattern) != -1)) {
			return true;
		}
		// last source is attribute array
		var aAttributes = oItem.getAttributes();
		for (var j = 0; j < aAttributes.length; j++) {
			if (aAttributes[j].getText().toLowerCase().indexOf(sFilterPattern) != -1) {
				return true;
			}
		}
		return false;
	},
	/**
	 * @private
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#_applyClientSideSearch
	 * @function
	 */
	_applyClientSideSearch : function () {
		var sFilterPattern = this._oControlStore.oMasterSearchField.getValue();
		var iCount = this.applySearchPattern(sFilterPattern);
		this._oApplicationImplementation.oMHFHelper.setMasterTitle(this, iCount);
		this.evaluateClientSearchResult(iCount, this.getList(), this._emptyList);
	},

	/**
	 * This function is called when a client side search was done. If the search returns 0 hits
	 * an empty list is shown on the master page displaying the "noDataText" of the master List.
	 * If the search returns one or more hits the function makes sure that the master list is
	 * visible and the empty list is hidden.
	 * @param {int} iSearchHitCount
	 *     The number of elements found by the search.
	 * @param {object} oMasterList
	 *     The master list.
	 * @param {object} oEmptyList
	 *     The empty list to be displayed instead of the master list if the search returns no
	 *     results.
	 * @param {string} sNoDataText
	 *     If this parameter is provided it will be used as the "noDataText" during the search.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#evaluateClientSearchResult
	 * @function
	 */
	evaluateClientSearchResult: function (iSearchHitCount, oMasterList, oEmptyList, sNoDataText) {
		var noHitsTxt = sNoDataText;
		if (iSearchHitCount === 0) {
			if (noHitsTxt === null || noHitsTxt === undefined) {
				noHitsTxt = oMasterList.getNoDataText();
			}
			oEmptyList.setNoDataText(noHitsTxt);
			if (!oMasterList.hasStyleClass("hiddenList")) {
				oMasterList.addStyleClass("hiddenList");
			}
			oEmptyList.removeStyleClass("hiddenList");
		} else {
			oMasterList.removeStyleClass("hiddenList");
			if (!oEmptyList.hasStyleClass("hiddenList")) {
				oEmptyList.addStyleClass("hiddenList");
			}

		}
	},

	/**
	 * Determines whether search is triggered with each change of the search field content (or
	 * only when the user explicitly starts the search). Default implementation triggers search
	 * immediately, exactly when backend search is disabled (see {@link isBackendSearch}.
	 * Override this function if you want 'live' search on backend or explicit search on frontend.
	 * @returns {boolean}
	 *    Returns <code>true</code> if live search is used.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#isLiveSearch
	 * @function
	 */
	isLiveSearch : function () {
		return !this.isBackendSearch();
	},

	/**
	 * Determines whether search (triggered by search field) is performed on backend or frontend.
	 * @returns {boolean}
	 *    Returns <code>true</code> if backend search is used. Default is <code>false</code>.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#isBackendSearch
	 * @function
	 */
	isBackendSearch : function () {
		return false;
	},

	/**
	 * Whenever you bind a master list dynamically you have to call this function.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#registerMasterListBind
	 * @function
	 */
	registerMasterListBind : function () {
		var oList = this.getList();
		var oBinding = oList.getBinding("items");
		var oConnectionManager = this._oApplicationImplementation.getConnectionManager();
		var iRequestCount = oConnectionManager.iRequestCount;
		this._oApplicationImplementation.setMasterListBinding(this, oBinding);
		// when no request was sent, header and footer will be displayed immediately
		if (iRequestCount == oConnectionManager.iRequestCount) {
			this._oApplicationImplementation.oMHFHelper.defineMasterHeaderFooter(this);
		}
	},

	/**
	 * Whenever you bind a master list dynamically you have to call this function.
	 * @param {string} sModelName
	 *     The name of the model that is bound dynamically. This must be the same name as defined
	 *     in configuration.js.
	 * @public
	 * @name sap.ca.scfld.md.controller.ScfldMasterController#registerMasterListBinding
	 * @function
	 */
	registerMasterListBinding : function (sModelName) {
		this.sModelName = sModelName;
		this.registerMasterListBind();
	}

});

}; // end of sap/ca/scfld/md/controller/ScfldMasterController.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.view.empty.controller') ) {
  jQuery.sap.declare('sap.ca.scfld.md.view.empty.controller');
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */


jQuery.sap.require('sap.ca.ui.images.images'); // unlisted dependency retained

//
sap.ca.scfld.md.controller.BaseDetailController.extend("sap.ca.scfld.md.view.empty", {

	onInit : function() {
		var oImage = this.byId("flower");
		if (oImage){
			oImage.setSrc(sap.ca.ui.images.images.Flower);
		}
		jQuery.sap.includeStyleSheet(jQuery.sap.getModulePath("sap.ca.scfld.md")
			+ "/css/flower.css", "emptyView_stylesheet");

		this.getView().addEventDelegate(this, this);
		this.getView().addEventDelegate({
			onBeforeShow : jQuery.proxy(function(oEvent) {
				 if (oEvent.data && (oEvent.data.viewTitle || oEvent.data.languageKey || oEvent.data.infoText)){
			     this.setTitleAndMessage(oEvent.data.viewTitle, oEvent.data.languageKey, oEvent.data.infoText);
				 }
			}, this)
		});

		//the route handler is only here for backwards compatibility
		this.oRouter.attachRouteMatched(function(oEvent) {
			if (oEvent.getParameter("name") === "noData") {
				var oArgument = oEvent.getParameter("arguments");

				this.setTitleAndMessage(oArgument.viewTitle, oArgument.languageKey);
			}
		}, this);


	},

	setTitleAndMessage : function (sViewTitle, sLanguageKey, sInfoText) {
	// set view title
		var oPage = this.byId("sap.ca.scfld.md.view.empty");
		var sTitle = this.oApplicationFacade.oApplicationImplementation.getResourceBundle().getText(sViewTitle);
		if (!sTitle || sTitle === sViewTitle) {
			//fallback: show message also as title
			if (!sInfoText) {
				sTitle = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			} else {
				sTitle = sInfoText;
			}
		}
		oPage.setTitle(sTitle);
		oPage.setTitleLevel(sap.ui.core.TitleLevel.H2);

		// set message text
		var oLabel = this.byId("emptyLabel");
		if (!sInfoText) {
			var sMessage = this.oApplicationFacade.oApplicationImplementation.getResourceBundle().getText(sLanguageKey);
			if (!sMessage || sMessage === sLanguageKey) {
				//fallback
				sMessage = this.oApplicationFacade.oApplicationImplementation.getUiLibResourceBundle().getText(this.oApplicationFacade.oApplicationImplementation.oConfiguration.getDefaultEmptyMessageKey());
			}
			oLabel.setText(sMessage);
		} else {
			oLabel.setText(sInfoText);
		}
	}
});

}; // end of sap/ca/scfld/md/view/empty.controller.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.ApplicationImplementation') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.ApplicationImplementation");





sap.ui.base.ManagedObject.extend("sap.ca.scfld.md.app.ApplicationImplementation", {

	metadata : {

		properties : {
			identity : "string",
			component : "object",
			oViewHook : "string"
		},
		methods : ["getConnectionManager"]
	},

	init : function () {

	},

	sI18N : "i18n",

	startApplication : function (oConfiguration) {
		this.bManualMasterRefresh = false;
		// helpers need access to configuration
		this.oConfiguration = oConfiguration;
		this.oMHFHelper = new sap.ca.scfld.md.app.MasterHeaderFooterHelper(this);
		this.oDHFHelper = new sap.ca.scfld.md.app.DetailHeaderFooterHelper(this);
		this.oFHFHelper = new sap.ca.scfld.md.app.FullScreenHeaderFooterHelper(this);
		this.aMasterKeys = oConfiguration.getMasterKeyAttributes();
		this.aKeyValues = null;
        this.mApplicationModels = {};

		var oLocale = sap.ui.getCore().getConfiguration().getFormatLocale();
		var sBundleName = this.getIdentity() + ".i18n.i18n";
		this.AppI18nModel = new sap.ui.model.resource.ResourceModel({
			bundleName : sBundleName,
			bundleLocale : oLocale
		});

		var oComponent = this.getComponent();
		if (!sap.ui.getCore().getConfiguration().getDisableCustomizing()) {
			var oMetadata = oComponent.getMetadata();
			if (oMetadata) {
				var oExtServices = oMetadata.getConfig("sap.ca.i18Nconfigs");
				if (oExtServices.bundleName) {
					this.AppI18nModel.enhance(oExtServices);
				}
			}
		}
		this.UilibI18nModel = new sap.ui.model.resource.ResourceModel({
			bundleName : "sap.ca.scfld.md.i18n.i18n",
			bundleLocale : oLocale
		});

		this.oConnectionManager = sap.ca.scfld.md.app.ConnectionManager.getNewInstance(this.getIdentity(),
				this.oConfiguration, {}, this.getComponent());

		this.bIsPhone = sap.ui.Device.system.phone;
		this.bIsIPad  = sap.ui.Device.system.tablet;

		var oHookPage = sap.ui.getCore().byId(this.getOViewHook());
		oHookPage.setModel(this.AppI18nModel, this.sI18N);

		//register on device orientation change
		this.oCurController = {};
		this.oCurController.MasterCtrl = null;
		this.oCurController.DetailCtrl = null;
		this.oCurController.FullCtrl = null;
		sap.ui.Device.orientation.attachHandler(this.onChangeDeviceOrientation, this);

		this.registerExitModule(jQuery.proxy(this.onAppExit, this));
	},

	onAppExit: function () {
		sap.ui.Device.orientation.detachHandler(this.onChangeDeviceOrientation, this);
	},

	getResourceBundle : function () {
		return this.AppI18nModel.getResourceBundle();
	},

	getUiLibResourceBundle : function () {
		return this.UilibI18nModel.getResourceBundle();
	},

	getODataModel : function (sName) {
		if (sName == this.sI18N) {
			return this.AppI18nModel;
		}
		return this.oConnectionManager.getModel(sName);
	},

	setModels : function (oController) {
		var view = oController.getView();
		view.setModel(this.AppI18nModel, this.sI18N);
		// FIXME: this should not be needed but don't work if
		// not here
		view.setModel(this.getComponent().getModel("device"), "device");

		jQuery.each(this.oConnectionManager.modelList, function (name, model) {
			if (name == "undefined") {
				view.setModel(model);
			} else {
				view.setModel(model, name);
			}
		});
	},

	isMock : function () {
		// The "reponder" URL parameter defines if the app shall run with mock
		// data
		var responderOn = jQuery.sap.getUriParameters().get("responderOn");

		// set the flag for later usage
		return (responderOn === "true");
	},

	getConnectionManager : function () {

		return this.oConnectionManager;
	},

	isDetailNavigationPossible: function (oController, sCurrentHash) {
		var oList = oController.getList();
		if (oList) {
			var oListItem = oList.getSelectedItem();
			if (oListItem === null) {
				return false;
			}
			if (oController.getDetailRouteName === undefined) {
				//baseMasterController is used
				var sPath = oListItem.getBindingContext(oController.sModelName).getPath().substr(1);
				if (sPath.indexOf("/")) {
					// if sPath contains a '/' the router will break; needs to be encoded here
					// since the application cannot overwrite this;
					// with scfld master controller the behavior can be overwritten, so we don't
					// encode there
					sPath = encodeURIComponent(sPath);
				}
				if (oController.oRouter.getURL("detail", {contextPath : sPath}) !== sCurrentHash) {
					return true;
				}
			} else {
				//scfldMasterController is used
				if (oController.oRouter.getURL(oController.getDetailRouteName(), oController.getDetailNavigationParameters(oListItem)) !== sCurrentHash) {
					return true;
				}
			}
		}
		return false;
	},

	onMasterRefreshed : function (oController) {
		// get Hash before any toDetail navigation
		var oHasher = sap.ui.core.routing.HashChanger.getInstance();
		var sCurrentHash = oHasher.getHash();
		this.setStoredSelectedItem(oController);
		//check if the manual refresh will trigger a navigation by comparing the current hash with the expected navigation hash
		var bAutoNavigate = false;
		if (this.bManualMasterRefresh === true) {
			bAutoNavigate = this.isDetailNavigationPossible(oController, sCurrentHash);
		}
		this.fireEvent("_scfldOnMasterListRefresh", {bManualRefresh:this.bManualMasterRefresh, bAutoNavigation:bAutoNavigate});
		this.bManualMasterRefresh = false;
	},

	// Called each time the list binding is changed
	onMasterChanged : function (oController) {
		this.oMHFHelper.defineMasterHeaderFooter(oController);
	},

	setStoredSelectedItem : function (oController) {
		if (!this.aKeyValues || this.bManualMasterRefresh === true) {
			return;
		}
		var oList = oController.getList();
		var aItems = oList.getItems();
		oList.removeSelections();
		var bFound = false;
		for ( var i = 0; i < aItems.length && !bFound; i++) {
			var oListItem = aItems[i];
			if ((oListItem instanceof sap.m.GroupHeaderListItem)) {
				continue;
			}
			var oItemBinding = oListItem.getBindingContext(oController.sModelName);
			bFound = true;
			for ( var j = 0; bFound && j < this.aKeyValues.length; j++) {
				bFound = this.aKeyValues[j] == oItemBinding.getProperty(this.aMasterKeys[j]);
			}
		}
		// on phone or when the action was triggered by a search (and not a refresh) we are only marking the item as selected (no navigation to it)
		if (this.bIsPhone || (oController._oControlStore && oController._oControlStore.bIsSearching)) {
			if (bFound) {
			// only phone: set line as selected
				oListItem.setSelected(true);
				oList.setSelectedItem(oListItem, true);
			}
			if (oController._oControlStore) {
			  oController._oControlStore.bIsSearching = false;
			}
		} else {
			if (!bFound) {
				// if item cannot be found again, then choose first 'real' item
				var oListItem = this.getFirstListItem(oController);
			}
			// if we have an item: select it
			if (oListItem) {
				oController.setListItem(oListItem);
// Note: The difference between this implementation and the commented one is, that
// in iPad portrait mode the list will not disappear after the refresh
/*				oList.fireSelect({
					listItem : oListItem
				});	*/
			}
		}
		this.aKeyValues = null;     // prevent that this is used for future change events
	},

	// set header and footer of a detail page
	defineDetailHeaderFooter : function (oController) {
		this.oDHFHelper.defineDetailHeaderFooter(oController);
		//this.oCurController.DetailCtrl = oController;
	},

	defineFullscreenHeaderFooter : function (oController) {
		this.oFHFHelper.defineHeaderFooter(oController);
		//this.oCurController.FullCtrl = oController;
	},

	setSplitContainer : function (oSplitContainer) {
		this.oSplitContainer = oSplitContainer;
	},

	registerExitModule : function (fExitModule) {
		if (!this.aExitModules) {
			this.aExitModules = [];
			var oComponent = this.getComponent();
			if (oComponent.exit) {
			  var fAppExit = jQuery.proxy(oComponent.exit, oComponent);
			} else {
				var fAppExit = function () {};
			}
			oComponent.exit = jQuery.proxy(function () {
				for (var i = 0; i < this.aExitModules.length; i++) {
					this.aExitModules[i]();
				}
				fAppExit();
			}, this);
		}
		this.aExitModules.push(fExitModule);
	},

	setMasterListBinding : function (oController, oBinding) {
		if (oController._oMasterListBinding) {
			oController._oMasterListBinding.detachChange(oController._onMasterListLoaded, oController);
			oController._oMasterListBinding.detachChange(oController._onMasterListChanged, oController);
		}

		oController._oMasterListBinding = oBinding;
		if (oController._oMasterListBinding) {
			oController._oMasterListBinding.attachChange(oController._onMasterListLoaded, oController);
			oController._oMasterListBinding.attachChange(oController._onMasterListChanged, oController);
		}
	},

	onChangeDeviceOrientation : function (mParams) {

//		var bLandscape = mParams.landscape;
		if (this.oCurController.MasterCtrl && this.oCurController.MasterCtrl._oHeaderFooterOptions) {
			this.oMHFHelper.setHeaderFooter(this.oCurController.MasterCtrl, this.oCurController.MasterCtrl._oHeaderFooterOptions, this.oCurController.MasterCtrl._oControlStore.bAllDisabled, true);
		}
		if (this.oCurController.DetailCtrl && this.oCurController.DetailCtrl._oHeaderFooterOptions) {
			this.oDHFHelper.setHeaderFooter(this.oCurController.DetailCtrl, this.oCurController.DetailCtrl._oHeaderFooterOptions, true);
		}
		if (this.oCurController.FullCtrl && this.oCurController.FullCtrl._oHeaderFooterOptions) {
			this.oFHFHelper.setHeaderFooter(this.oCurController.FullCtrl, this.oCurController.FullCtrl._oHeaderFooterOptions, true);
		}
	},

		/**
		 * Store a sap.ui.model instance in a global hashmap for the application.
		 * This is used to allow apps to share models between different views.
		 * The models will not be assigned to the views automatically but can be retrieved and assigned manually.
		 * This is mainly made to have dirty hacks like settings model on sap.ui.getCore() or reading data from the oSplitContainer
		 * @param {string} sName The name for the model (must be non null)
		 * @param {sap.ui.model.Model} oModel the model to store
		 */
		setApplicationModel : function (sName, oModel) {
			if (sName != null) {
				if (this.mApplicationModels.hasOwnProperty(sName)) {
					jQuery.sap.log.warning("There was already an application model defined for the name " + sName + " it will be overwritten");
				}
				this.mApplicationModels[sName] = oModel;
			} else {
				jQuery.sap.log.error("You cannot set an application Model with a 'null' name");
			}
		},

		/**
		 * Retrieve a model stored in the global hashmap based on its name
		 * @param {string} sName the string of the model to retrieve
		 */
		getApplicationModel : function (sName) {
			var oModel = null;
			if (this.mApplicationModels.hasOwnProperty(sName)) {
				oModel = this.mApplicationModels[sName];
			}
			return oModel;
		},

		// returns the first non-group item of the master list
		getFirstListItem : function (oController) {
			var oList = oController.getList(),
				aItems = oList.getItems();
			for (var i = 0; i < aItems.length; i++) {
				if (!(aItems[i] instanceof sap.m.GroupHeaderListItem)) {
					return aItems[i];
				}
			}
			return null;
		}
});


}; // end of sap/ca/scfld/md/app/ApplicationImplementation.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.app.Application') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.app.Application");


jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ui.base.ManagedObject.extend("sap.ca.scfld.md.app.Application", {

    metadata: {
        properties: {
            identity: "string",
            oViewHook: "string",
            component: "object"
        }
    },
    constructor: function (sId, mSettings) {
        // super
        sap.ui.base.ManagedObject.apply(this, arguments);

        // wait until Core is initialized to create the models & root component
        sap.ui.getCore().attachInit(jQuery.proxy(function () {

            // call the application controller
            this.main();

        }, this));

    },

    createDeviceModel: function () {
        // set device model
        var deviceModel = new sap.ui.model.json.JSONModel({
            isTouch: sap.ui.Device.support.touch,
            isNoTouch: !sap.ui.Device.support.touch,
            isPhone: sap.ui.Device.system.phone,
            isNoPhone: !sap.ui.Device.system.phone,
            listMode: (sap.ui.Device.system.phone) ? "None"
                : "SingleSelectMaster",
            listItemType: (sap.ui.Device.system.phone) ? "Active"
                : "Inactive"
        });
        deviceModel.setDefaultBindingMode(sap.ui.model.BindingMode.OneWay);
        this.getComponent().setModel(deviceModel, "device");
    },

    main: function () {
        var oApplicationImplementation = new sap.ca.scfld.md.app.ApplicationImplementation(
            {
                identity: this.getIdentity(),
                oViewHook: this.getOViewHook(),
                component: this.getComponent()
            });

        this.createDeviceModel();

        // create a static method to retrieve this instance
        // (used by BaseMasterController)
        sap.ca.scfld.md.app.Application.getImpl = jQuery.sap
            .getter(oApplicationImplementation);

        var oApplicationFacade = new sap.ca.scfld.md.ApplicationFacade(
            oApplicationImplementation);

        jQuery.sap.require(this.getIdentity() + ".Configuration");

        var oConfigClass = jQuery.sap.getObject(this.getIdentity() + ".Configuration");
        var oConfiguration = new oConfigClass();
        oConfiguration._setApplicationFacade(oApplicationFacade);

        // show message if in demo mode
        if (oApplicationImplementation.isMock()) {
            var msg = "Running in demo mode with mock data";
            sap.m.MessageToast.show(msg, {
                duration: 1000
            });
        }

        oApplicationImplementation.startApplication(oConfiguration);

    }

});
}; // end of sap/ca/scfld/md/app/Application.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.controller.BaseFullscreenController') ) {
  jQuery.sap.declare('sap.ca.scfld.md.controller.BaseFullscreenController');
/*
 * Copyright (C) 2009-2015 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained






/**
 * @class This class shall be used as the base class for the fullscreen view controllers in
 *     fullscreen scenarios.
 * @name sap.ca.scfld.md.controller.BaseFullscreenController
 * @extends sap.ui.core.mvc.Controller
 * @public
 */
sap.ui.core.mvc.Controller.extend("sap.ca.scfld.md.controller.BaseFullscreenController", {

	constructor : function () {
		this.oApplicationImplementation = sap.ca.scfld.md.app.Application.getImpl();
		// Make sure that our init-coding is executed even if the App overrides onInit() and does not call
		// onInit() of the super class.
		var fMyOnInit = jQuery.proxy(function () {

			// get routing object for navigation
			this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);

			this.oApplicationFacade = this.oApplicationImplementation.oConfiguration.oApplicationFacade;

			this.oConnectionManager = this.oApplicationImplementation.getConnectionManager();

			this.oApplicationImplementation.setModels(this);

			this.oApplicationImplementation.defineFullscreenHeaderFooter(this);

			// --------------------------
			var fMyOnBeforeShow = jQuery.proxy(function (evt) {

			}, this);

			// register for onBeforeShow
			if (typeof this.onBeforeShow === "function") {
				var fAppOnBeforeShow = jQuery.proxy(this.onBeforeShow, this);
				this.onBeforeShow = function (evt) {
					fAppOnBeforeShow(evt);
					fMyOnBeforeShow(evt);
				};
			} else {
				this.getView().addEventDelegate({
					onBeforeShow : jQuery.proxy(function (evt) {
						fMyOnBeforeShow();
					}, this)
				});
			}
			// -------------------------------------
		}, this);

		var fAppOnInit = jQuery.proxy(this.onInit, this);
		this.onInit = function () {
			fMyOnInit();
			fAppOnInit();
		};
	},

	onInit : function () {
		// do not add any coding here. Just needed in case the App calls onInit() of the super class
	},

	/*
	 * override this method if you have not used the standard way to include the page in the view
	 */
	getPage : function () {
		return sap.ca.scfld.md.app.CommonHeaderFooterHelper.getPageFromController(this);
	},

	/**
	 * Obsolete: Use {@link #setHeaderFooterOptions} in order to explicitly set the header and
	 * footer when they need to be changed.
	 */
	getHeaderFooterOptions : function () {
		return null;
	},

	/**
	 * Sets the fullscreen's page header and footer content.
	 * @param {object} oOptions
	 *     An object containing meta information about the content of the header and the footer
	 *     of the detail page.<br>
	 * <b>Supported properties for buttons defined below:</b><br>
	 * There are several predefined buttons which you can use on the footer bar or in the header.
	 * If you provide properties below you can overwrite the default values of the predefined
	 * buttons. These properties are also needed for custom-defined buttons. In general, every
	 * button can have the following properties:</p>
	 * <ul>
	 *     <li>{function} <b>onBtnPressed</b><br>
	 *     Callback function of the specific button, that is called if the button is pressed.</li>
	 *     <li>{boolean} <b>bDisabled</b><br>
	 *     An <i>optional</i> property to set the button initially disabled/enabled.</li>
	 *     <li>{string} <b>sI18nBtnTxt</b><br>
	 *     If the button doesn't have a fix predefined text, you can provide the key of the i18n
	 *     text which is used as the text of the button.</li>
	 *     <li>{string} <b>sIcon</b><br>
	 *     URL of an icon for the button (usually something like <i>"sap-icon://world"</i>).
	 *     <li>{string} <b>sId</b><br>
	 *     An <i>optional</i> property to set an ID for the specific button. This ID is meant to be
	 *     used in the call of the <code>setBtnEnabled</code> or <code>setBtnText</code> method.
	 *     If you configure your application to use stable IDs
	 *     (see {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}) this ID is used to
	 *     generate a stable ID. Ensure that <code>sId</code> is a valid SAPUI5 ID.</li>
	 *     <li>{string} <b>sTooltip</b><br>
	 *     Optional tooltip for the button. Ensure that the text is localized.
	 * </ul>
	 * The following properties are supported:<br>
	 * <b>Fullscreen page header part:</b>
	 * <ul>
	 *     <li>{string} <b>oOptions.sI18NFullscreenTitle</b><br>
	 *     You can provide the i18n-key for the title in the i18n-properties file of the
	 *     application.
	 *     </li>
	 *     <li>{string} <b>oOptions.sFullscreenTitle</b><br>
	 *     You can also set the title text directly.<br>
	 *     If both are not provided, the i18n-key <code>FULLSCREEN_TITLE</code> will be taken.</li>
	 *     <li>{string} <b>oOptions.sFullscreenTitleId</b><br>
	 *     An ID for the fullscreen title. This property is supported only if application is
	 *     configured to use stable IDs (see
	 *     {@link sap.ca.scfld.md.ConfigurationBase#isUsingStableIds}). The resulting control ID is
	 *     relative to the enclosing view ID.
	 *     Ensure that <code>sFullscreenTitleId</code> is a valid SAPUI5 ID.</li>
	 *     <li>{function} <b>oOptions.onBack</b>
	 *     If the application need to overwrite the default <code>history.back</code> behavior of
	 *     the detail view, the application needs to provide a function that the framework can call.
	 *     If you want to suppress the back button in the detail page, you can set the
	 *     <code>onBack</code> property with value <code>null</code>.</li>
	 *     <li>{function} <b>onFacetFilter</b>
	 *     Callback function, if you need a FacetFilter button on the header.</li>
	 *     <li>{object} <b>oOptions.oHeaderBtnSettings</b><br>
	 *     The definition object for the header button. Only one header button can be defined and
	 *     it will be displayed on the right (left in RTL mode) hand side of the header bar.
	 *     The following settings can be made for the header button:
	 *     <ul>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.sIcon</b><br>
	 *         An <i>optional</i> icon that is added to the button.</li>
	 *         <li>{function} <b>oOptions.oHeaderBtnSettings.onBtnPressed</b><br>
	 *         The handler function for the buttons's press event.</li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.sText</b><br>
	 *         An <i>optional</i> static text that is displayed on the button.</li>
	 *         <li>{object} <b>oOptions.oHeaderBtnSettings.oTextBinding</b><br>
	 *         <i>optional</i> if <i>sText</i> is not given the <i>oTextBinding</i> object can be
	 *         used to bind the button's text to a entity in the model using element binding.<br>
	 *         The following settings need to be made:
	 *         <ul>
	 *             <li>{string} <b>oOptions.oHeaderBtnSettings.oTextBinding.elementPath</b><br>
	 *             Path to the element of the model that is used as the binding context.</li>
	 *             <li>{string} <b>oOptions.oHeaderBtnSettings.oTextBinding.property</b><br>
	 *             Name of the property containing the text to be displayed.</li>
	 *             <li>{object} <b>oOptions.oHeaderBtnSettings.oTextBinding.parameters</b><br>
	 *             <i>optional</i> map of additional parameters for the binding (e.g."select" - for
	 *             a full description of possible values check the binding documentation).</li>
	 *         </ul></li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.i18nTxt</b><br>
	 *         <i>optional</i> if <i>sText</i> and <i>oTextBinding</i> are not given <i>i18nTxt</i>
	 *         can be used to fill the button's text from the i18n files. Additionally a different
	 *         text can be defined for phones (see <i>i18nPhoneTxt</i>).</li>
	 *         <li>{string} <b>oOptions.oHeaderBtnSettings.i18nPhoneTxt</b><br>
	 *         <i>optional</i> if <i>sText</i> and <i>oTextBinding</i> are not given
	 *         <i>i18nPhoneTxt</i> can be used to fill the button's text from the i18n files if the
	 *         used device is a phone.</li>
	 *     </ul></li>
	 * </ul>
	 * <b>Fullscreen footer part:</b><br>
	 * <ul>
	 *     <li>{array} <b>oOptions.aAdditionalSettingButtons</b><br>
	 *     Array of button definitions which can be added to the technical settings menu (e.g.
	 *     About, Login Details and Logout). Every button should have the above listed meta
	 *     information.</li>
	 *     <li>{object} <b>oOptions.oFilterOptions</b><br>
	 *     If you want to get the predefined filter button, you can choose one of the following
	 *     options besides the default button properties
	 *     <code>oOptions.oFilterOptions.bDisabled</code>, <code>oOptions.oFilterOptions.sId</code>
	 *     and <code>oOptions.oFilterOptions.sTooltip</code> as described above:
	 *         <ul>
	 *         <li>{function} <b>oOptions.oFilterOptions.onFilterPressed</b><br>
	 *         Provide the callback function if you only want to get notified if the filter button
	 *         is pressed.</li>
	 *         <li>In case of your filter criterion/item can be represented by simple text with key,
	 *         you can provide the following settings:<br>
	 *             <ul><li>
	 *             {array} <b>oOptions.oFilterOptions.aFilterItems</b><br>
	 *             An array including the possible filter items with the following properties:
	 *                 <ul><li>{string}<b>oOptions.oFilterOptions.aFilterItems[i].text</b><br>
	 *                 The text to be shown to the user.</li>
	 *                 <li>{string} <b>oOptions.oFilterOptions.aFilterItems[i].key</b><br>
	 *                 The unique filter key value.</li></ul></li>
	 *            <li>{string} <b>oFilterOptions.sSelectedItemKey</b><br>
	 *            The key value of the default/current selected filter item.</li>
	 *            <li>{function (sKey)} <b>oFilterOptions.onFilterSelected</b><br>
	 *            The callback function for the application, if a filter item is selected. The
	 *            filter key will be passed as as parameter.</li>
	 *            </ul>
	 *         </li></ul>
	 *     </li>
	 *     <li>{object} <b>oOptions.oGroupOptions</b><br>
	 *     If you want to get the predefined group button, you can choose one of the following
	 *     options besides the default button properties
	 *     <code>oOptions.oGroupOptions.bDisabled</code>, <code>oOptions.oGroupOptions.sId</code>
	 *     and <code>oOptions.oGroupOptions.sTooltip</code> as described above:
	 *         <ul>
	 *         <li>{function} <b>oOptions.oGroupOptions.onGroupPressed</b><br>
	 *         Provide the callback function if you only want to get notified if the group button is
	 *         pressed.</li>
	 *         <li>In case of your group criterion/item can be represented by simple text with key,
	 *         you can provide the following settings:<br>
	 *             <ul><li>
	 *             {array} <b>oOptions.oGroupOptions.aGroupItems</b><br>
	 *             An array including the possible group items with the following properties:
	 *                 <ul><li>{string} <b>oOptions.oGroupOptions.aGroupItems[i].text</b><br>
	 *                 The text to be shown to the user.</li>
	 *                 <li>{string}<b>oOptions.oGroupOptions.aGroupItems[i].key</b><br>
	 *             The unique group key value.</li></ul></li>
	 *            <li>{string} <b>oOptions.oGroupOptions.sSelectedItemKey</b><br>
	 *            The key value of the default/current selected group item.</li>
	 *            <li>{function (sKey)} <b>oOptions.oGroupOptions.onGroupSelected</b><br>
	 *            The callback function for the application, if a group item is selected. The group
	 *            key will be passed as as parameter.</li>
	 *            </ul>
	 *         </li></ul>
	 *     </li>
	 *     <li>{object} <b>oSortOptions</b><br>
	 *     If you want to get the predefined sort button, you can choose one of the following
	 *     options besides the default button properties <code>oSortOptions.bDisabled</code>,
	 *     <code>oSortOptions.sId</code> and <code>oSortOptions.sTooltip</code> as described above:
	 *         <ul>
	 *         <li>{function} <b>oSortOptions.onSortPressed</b><br>
	 *         Provide the callback function if you only want to get notified if the sort button is
	 *         pressed.</li>
	 *         <li>In case of your sort criterion/item can be represented by simple text with key,
	 *         you can provide the following settings:<br>
	 *             <ul><li>
	 *             {array} <b>oSortOptions.aSortItems</b><br>
	 *             An array including the possible sort items with the following properties:
	 *                 <ul><li>{string}<b>oSortOptions.aSortItems[i].text</b><br>
	 *                 The text to be shown to the user.</li>
	 *                 <li>{string} <b>oSortOptions.aSortItems[i].key</b><br>
	 *                 The unique sort key value.</li></ul></li>
	 *            <li>{string} <b>oSortOptions.sSelectedItemKey</b><br>
	 *            The key value of the default/current selected sort item.</li>
	 *            <li>{function (sKey)} <b>oSortOptions.onSortSelected</b><br>
	 *            The callback function for the application, if a sort item is selected. The sort
	 *            key will be passed as as parameter.</li>
	 *            </ul>
	 *         </li></ul>
	 *     </li>
	 *     <li>{object} <b>oOptions.oEditBtn</b><br>
	 *     The button for default/recommended action of the view - usually this would be the edit
	 *     button but also other usages are possible.</li>
	 *     <li>{object} <b>oOptions.oPositiveAction</b><br>
	 *     Can be used as the positive button e.g. for "Approve" action in an approval scenario.
	 *     </li>
	 *     <li>{object} <b>oOptions.oNegativeAction</b><br>
	 *     Can be used as the negative button e.g. for "Reject" action in an approval scenario.
	 *     </li>
	 *     <li>{array} <b>oOptions.buttonList</b><br>
	 *     A list of buttons which can be defined additionally to the predefined buttons. Each
	 *     button needs meta information as described above.</li>
	 *     <li>{object} <b>oOptions.oAddBookmarkSettings</b><br>
	 *     Describes the settings for the "Add Bookmark"-button, which should have the same
	 *     parameters provided for "sap.ushell.services.Bookmark" with the exception that the
	 *     property <code>url</code> can be left out, because it is set by scaffolding.
	 *     The bookmark button will be displayed only on the main screen (see {@link #isMainScreen}
	 *     ). Even if there are no settings provided it is displayed. If you don't want to suppress
	 *     that button you have to set <b>oOptions.bSuppressBookmarkButton</b>.</li>
	 *     <li>{boolean} <b>oOptions.bSuppressBookmarkButton</b><br>
	 *     Suppresses the "Add Bookmark"-button from the 'Share' menu if this property is set to
	 *     <code>true</code>.</li>
	 *     <li>{object} <b>oOptions.oEmailSettings</b><br>
	 *     Settings for the Email functionality. Take care that the framework creates a link for
	 *     the e-mail which contains the information below and that some browsers have a length
	 *     restriction for URLs.
	 *        <ul>
	 *            <li>{string} <b>oOptions.oEmailSettings.sSubject</b><br>
	 *            The subject for the e-mail.</li>
	 *            <li>{string} <b>oOptions.oEmailSettings.sRecepient</b><br>
	 *            The e-mail addresses of the recipient as a string.</li>
	 *            <li>{function} <b>oOptions.oEmailSettings.fGetMailBody</b><br>
	 *            A callback function that is called to get the e-mail body text.</li>
	 *        </ul></li>
	 *     <li>{object} <b>oOptions.oJamOptions</b><br>
	 *     The configuration for the "Share in SAP Jam" and the "Discuss in SAP Jam" button.</li>
	 *     <ul>
	 *         <li>You can pass the share settings once or you can provide a callback function that
	 *         is called whenever the "Share" button is pressed.
	 *         <ul>
	 *             <li>{object} <b>oOptions.oJamOptions.oShareSettings</b><br>
	 *             The settings for the "Share in SAP Jam" button, for further allowed settings
	 *             check "sap.collaboration.components.fiori.sharing.Component.setSettings"
	 *             function.</li>
	 *             <li>{function} <b>oOptions.oJamOptions.fGetShareSettings</b><br>
	 *             The callback function for getting the "Share in SAP Jam" button settings. For
	 *             further allowed settings check
	 *             "sap.collaboration.components.fiori.sharing.Component.setSettings" function.
	 *             </li>
	 *         </ul></li>
	 *         <li>You can pass the discuss settings once or you can provide a callback function
	 *         that is called whenever the "Share" button is pressed.
	 *         <ul>
	 *             <li>{object} <b>oOptions.oJamOptions.oDiscussSettings</b><br>
	 *             The settings for the "Discuss in SAP Jam" button, for further allowed settings
	 *             check "sap.collaboration.components.fiori.feed.Component.setSettings"
	 *             function.</li>
	 *             <li>{function} <b>oOptions.oJamOptions.fGetDiscussSettings</b><br>
	 *             The callback function for getting the "Discuss in SAP Jam" button settings. For
	 *             further allowed settings check
	 *             "sap.collaboration.components.fiori.feed.Component.setSettings" function.
	 *             </li>
	 *         </ul></li>
	 *     </ul>
	 *     <li>{array} <b>oOptions.additionalShareButtonList</b><br>
	 *     Contains information about additional buttons in the share menu. Each button needs meta
	 *     information as described above.</li>
	 * </ul>
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseFullscreenController#setHeaderFooterOptions
	 * @function
	 */
	setHeaderFooterOptions : function (oOptions) {
		if (!this._oFullScreenHeaderFooterHelper) {
			this._oFullScreenHeaderFooterHelper = new sap.ca.scfld.md.app.FullScreenHeaderFooterHelper(this.oApplicationImplementation);
		}
		this._oFullScreenHeaderFooterHelper.setHeaderFooter(this, oOptions);
	},

	/**
	 * Enables/disables the header/footer button based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be enabled/disabled.
	 * @param {boolean} bEnabled
	 *     The indicator whether the button has to be enabled.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseFullscreenController#setBtnEnabled
	 * @function
	 */
	setBtnEnabled : function (sId, bEnabled) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnEnabled(sId, bEnabled);
		}
	},

	/**
	 * Updates the header/footer button text based on the given ID.
	 * @param {string} sId
	 *     The ID of the button to be updated.
	 * @param {string} sText
	 *     The new text for the button to be updated.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseFullscreenController#setBtnText
	 * @function
	 */
	setBtnText : function (sId, sText) {
		if (this._oControlStore.oButtonListHelper) {
			this._oControlStore.oButtonListHelper.setBtnText(sId, sText);
		}
	},

	/**
	 * Refreshes the model
	 */
	_refresh : function (channelId, eventId, data) {

		if (data && data.context) {

			// set context of selected master object
			this.getView().setBindingContext(data.context);

			// scroll to top of page
			// this.getView().byId("page").scrollTo(0);
		}
	},

	_navBack : function () {
		window.history.back();
	},

	/**
	 * Indicates whether this view is the main fullscreen view or a screen on deeper hierarchy
	 * level.
	 * If application supports deeper hierarchy and it should overwrite this function.
	 * Note: This method must only return true or false.
	 * The default implementation also returns other values for compatibility reasons.
	 * @returns {boolean}
	 *     Returns <code>true</code> if the application is on the main fullscreen view.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseFullscreenController#isMainScreen
	 * @function
	 */
	isMainScreen : function () {
		return true;
	},

	/**
	 * Gets a reference to the header button on the top right (left in RTL mode) or
	 * <code>null</code> if no header button is defined.
	 *
	 * @returns {object}
	 *     The reference to the header button or <code>null</code>.
	 * @public
	 * @name sap.ca.scfld.md.controller.BaseFullscreenController#getHeaderBtn
	 * @function
	 */
	getHeaderBtn : function () {
		if (this._oControlStore.oHeaderBtn) {
			return this._oControlStore.oHeaderBtn;
		}
		return null;
	}
});

}; // end of sap/ca/scfld/md/controller/BaseFullscreenController.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.ConfigurationBase') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
jQuery.sap.declare("sap.ca.scfld.md.ConfigurationBase");





/**
 * @class
 * @name sap.ca.scfld.md.ConfigurationBase
 * @extends sap.ui.base.ManagedObject
 * @public
 */
sap.ui.base.ManagedObject.extend("sap.ca.scfld.md.ConfigurationBase", {
	metadata : {
		properties : {
			"identifier" : "string"
		},
		publicMethods : ["setApplicationFacade"]
	},

	_setApplicationFacade : function (oApplicationFacade) {
		this.oApplicationFacade = oApplicationFacade;
		this.setApplicationFacade(oApplicationFacade);
	},


	/**
	* Override this method when you want to store a reference to the <code>ApplicationFacade</code> in some place where you can
	* access it. Note that all controllers inheriting from the <code>ScfldMaster/BaseMaster/Detail/FullscreenController</code> automatically
	* possess an attribute <code>oApplicationFacade</code>. </br>
	* However, it may be useful to have access to the facade e.g. in a class providing formatters.
	* @param {Object} oApplicationFacade the application facade for this App
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#setApplicationFacade
	* @function
	* @memberOf sap.ca.scfld.md.ConfigurationBase
	* */
	setApplicationFacade : function (oApplicationFacade) {

	},
	/**
	* @deprecated
	* This Method is deprecated. Use the corresponding method of ApplicationFacade instead.
	* @returns {boolean} true if the application runs on mock data, i.e. was started with URL parameter "responderOn=true"
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#isMock
	* @function
	*/
	// will be removed soon. Use method in ApplicationFacade
	isMock : function () {
		// The "reponder" URL parameter defines if the app shall run with mock
		// data
		var responderOn = jQuery.sap.getUriParameters().get("responderOn");

		// set the flag for later usage
		return (responderOn === "true");
	},

	/**
	* Override this method when the application wants to use a master list which allows for multi
	* selection.
	* The application needs to implement proper selection handling by itself if multi selection
	* is used.
	*
	* @returns {boolean} true if the application allows to use the master list with multi selection.
	* Default is <code>false</code>.
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#keepMultiSelection
	* @function
	* @memberOf sap.ca.scfld.md.ConfigurationBase
	* @see sap.m.ListMode.MultiSelect
	* @since 1.25.1
	*/
	keepMultiSelection : function () {
		return false;
	},

	/**
	* Specifies the list of attributes that identify a list item
	* Needs to be overwritten by the app
	* @returns {array} the list of attributes (strings) of a master list item that identify one entry.
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#getMasterKeyAttributes
	* @function
	*/
	getMasterKeyAttributes : function () {
		return null;
	},

	/**
	* Getter for the service list to be used as source for the Connection Manager
	* Needs to be overwritten by the app
	* @returns {object} the list of ODataModel to instantiate with their corresponding url / mock url
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#getServiceList
	* @function
	*/
	getServiceList : function () {
		return null;
	},

	/**
	* Getter for the list of parameters to be excluded from appending to the URL for the Services
	* Needs to be overwritten by the app if parameters need to be excluded from the service call
	* @returns {array} the list of parameters to be excluded from appending to the URL for the Service
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#getExcludedQueryStringParameters
	* @function
	*/
	getExcludedQueryStringParameters : function () {
		return null;
	},

	/**
	* returns the language key of the detail views title defined in the apps language model
	* Needs to be overwritten by the app in case the default key name doesn't match the apps title key
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#getDetailTitleKey
	* @function
	*/
	getDetailTitleKey : function () {
		return "DETAIL_TITLE";
	},

	/**
	* returns the language key of the empty views default text to be shown in cases where empty view is implicitly
	* displayed by the scaffolding
	* @public
	* @name sap.ca.scfld.md.ConfigurationBase#getDefaultEmptyMessageKey
	* @function
	*/
	getDefaultEmptyMessageKey : function () {
		return "NO_ITEMS_AVAILABLE";
	},

	/**
	* Indicates whether stable IDs should be generated for scaffolding buttons.
	* Override this method if the application wants to use stable IDs.
	*
	* @returns {boolean} true if the application uses stable IDs.
	* Default is <code>false</code>.
	* @name sap.ca.scfld.md.ConfigurationBase#isUsingStableIds
	* @function
	* @memberOf sap.ca.scfld.md.ConfigurationBase
	* @since 1.27.1
	* @public
	*/
	isUsingStableIds : function () {
		return false;
	}
});

}; // end of sap/ca/scfld/md/ConfigurationBase.js
if ( !jQuery.sap.isDeclared('sap.ca.scfld.md.ComponentBase') ) {
/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ca.scfld.md.ComponentBase");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.routing.Router'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained

jQuery.sap.require('sap.m.routing.RouteMatchedHandler'); // unlisted dependency retained

/**
 * @class This is the base class for the Component.js class of Fiori apps. IT provides a simplified routing interface for inner app navigation
 * @name sap.ca.scfld.md.ComponentBase
 * @extends sap.ui.core.UIComponent
 * @public
 */
sap.ui.core.UIComponent.extend("sap.ca.scfld.md.ComponentBase", {
	constructor : function (sId, mSettings) {
		this._aQueue = [];
		this._bRouterCloseDialogs = true;

		// merge base Init and app init
		var fBaseInit = jQuery.proxy(function () {
			sap.ui.core.UIComponent.prototype.init.apply(this, arguments); // calls createContent (among others)

			//this guy handles the navigation
			// this._bRouterCloseDialogs might have been set in the init of the application
			this._routeMatchedHandler = new sap.m.routing.RouteMatchedHandler(this.getRouter(), this._bRouterCloseDialogs);
		}, this);

		var fAppInit = jQuery.proxy(this.init, this);
		this.init = function () {
			fBaseInit();
			fAppInit();

			var oRouter = this.getRouter();
			oRouter.initialize();
		};

		// merge base Exit and app exit
		var fBaseExit = jQuery.proxy(function () {
			this._routeMatchedHandler.destroy();
		}, this);
		var fAppExit = jQuery.proxy(this.exit, this);
		this.exit = function () {
			fAppExit();
			fBaseExit();
		};
		sap.ui.core.UIComponent.prototype.constructor.apply(this, arguments);
	},
	/**
	* not yet documented
	* @public
	* @name sap.ca.scfld.md.ComponentBase#init
	* @function
	*/
	init : function () {

	},
	/**
	* not yet documented
	* @public
	* @name sap.ca.scfld.md.ComponentBase#exit
	* @function
	*/
	exit : function () {

	},
	/**
	* This method defines if open dialogs shall automatically be closed by the inner app navigation.
	* @param {boolean} bCloseDialogs "true" dialogs are automatically closed, "false" dialogs stay open
	* @public
	* @name sap.ca.scfld.md.ComponentBase#setRouterSetCloseDialogs
	* @function
	*/
	setRouterSetCloseDialogs: function (bCloseDialogs) {
		this._bRouterCloseDialogs = bCloseDialogs;
		if (this._routeMatchedHandler) {
			this._routeMatchedHandler.setCloseDialogs(bCloseDialogs);
		}
	}
});
/**
* Creates the metadata Object of the app
* @param {string} sAppType identifies the used template. Valid values are "MD" for Master/Detail and "FS" for full screen. This parameter is set automatically by the template and should not be changed manually
* @param {object} oAppMeta a metadata object containing information about the app used by the shell and the Fiori scaffolding framework.
* <p>The Object consists of the following attributes (additional attributes can be added):</p>
* <ul>
*   <li> <b>name</b> {string} Name of the application. Set automatically during the generation of the application</li>
*   <li> <b>version</b> {string} Version of the applicationSet automatically during the generation of the application</li>
*   <li> <b>library</b> Not sure... contains the artefact id. Set automatically during the generation of the application</li>
*   <li> <b>includes</b> {list} Not sure... is a list</li>
*   <li> <b>dependencies</b> {oject} JSON object containing two attributes:
*     <ul>
*      <li><b>libs</b> {list} not sure... list of libraries pre filled during creation of the app</li>
*      <li><b>components</b> {list} not sure... list of? usually empty </li>
*     </ul>
*   </li>
*   <li> <b>config</b> {object} not sure... probably obsolete don't use anymore</li>
*   <li> <b>viewPath</b> {string} Location of the views. Used by the inner app navigation to automatically create views. Set automatically during the generation of the application</li>

*   <li> <b>fullScreenPageRoutes</b> {object} -optional- This object contains one attribute for each route that leads to a full screen view. The structure
*    of such an attribute is as follows:
*     <ul>
*       <li><b>&lt;nameOfRoute></b> {object} The attribute name is the same as the name of the route it describes</li>
*       <ul>
*         <li><b>pattern</b> {string} URL pattern used to recognize the route</li>
*         <li><b>view</b> {string} Name of the view to which this route leads</li>
*       </ul>
*     </ul>
*   <li> <b>masterPageRoutes</b> {object} -optional- This object contains one attribute for each route that leads to a master view in a master/detail scenario. Please note that currently scaffolding only supports one master view per app
*     As a default a route named "master" is created leading to a view "S2". This route is defined internally by the scaffolding. If the master view is named differently the route "master" can be redefined here with a different target view. In case also the route name differs the application additionally has to redefine method getMasterRouteName of the master controller accordingly.
*     masterPageRoutes is structured the same as fullScreenPageRoutes.
*   </li>
*   <li> <b>detailPageRoutes</b> {object} -optional- This object contains one attribute for each route that leads to a detail view in a master/detail scenario. detailPageRoutes is structured the same as fullScreenPageRoutes.
*     As a default a route named "detail" is created leading to a view "S3". This is the route that the scaffolding uses to navigate to the detail view whenever an item of the master list is clicked or tapped. This route is defined internally by the scaffolding with the following values:
*     "detail" : {
*     "pattern" : "detail/{contextPath}",
*     "view" : "S3",
*     }
*     If the application uses a different view name the route "detail" can be redefined here with a different target view. In case also the route name or/and the pattern differ the application additionally has to redefine the methods getDetailRouteName, getBindingContextPathFor, getDetailNavigationParameters of the master controller accordingly (see API description of ScfldMAsterController.js)
*     masterPageRoutes is structured the same as fullScreenPageRoutes.
*   </li>
* <ul>
* @public
* @name sap.ca.scfld.md.ComponentBase#createMetaData
* @function
*/
sap.ca.scfld.md.ComponentBase.createMetaData = function (sAppType, oAppMeta) {
	var setRouteDefaults = function(oDefaults, oRoutes) {
		for ( var sRouteName in oRoutes) {
			if (!oRoutes[sRouteName].targetControl && oDefaults.targetControl) {
				oRoutes[sRouteName].targetControl = oDefaults.targetControl;
			}

			if (!oRoutes[sRouteName].targetAggregation && oDefaults.targetAggregation) {
				oRoutes[sRouteName].targetAggregation = oDefaults.targetAggregation;
			}

			if (!oRoutes[sRouteName].viewPath && oDefaults.viewPath) {
				oRoutes[sRouteName].viewPath = oDefaults.viewPath;
			}

			if (!oRoutes[sRouteName].viewLevel && oDefaults.viewLevel) {
				oRoutes[sRouteName].viewLevel = oDefaults.viewLevel;
			}
		}
		return oRoutes;
	};

	var oMeta = {};

	// build header data
	for ( var sPropName in oAppMeta) {
		if (sPropName !== "viewPath" && sPropName !== "masterPageRoutes" && sPropName !== "detailPageRoutes"
				&& sPropName !== "fullScreenPageRoutes") {
			oMeta[sPropName] = oAppMeta[sPropName];
		}
	}

	if (sAppType === "MD") {
		oMeta.routing = {
			"config" : {
				"viewType" : "XML",
				"viewPath" : oAppMeta.viewPath,
				"targetAggregation" : "detailPages",
				"viewLevel" : undefined, // the masterDetailRoute and the fioriContentRoute should rely on the browser
				// history direction
				"clearTarget" : false
			},
			"routes" : {
				"masterDetail" : {
					"view" : "MainSplitContainer",
					"name" : "masterDetail",
					"viewPath" : "sap.ca.scfld.md.view",
					"targetControl" : "fioriContent", // This is the control in which the new view will be placed
					"targetAggregation" : "pages", // This is the aggregation in which the new view will be placed
					"subroutes" : {
						"master" : { // master is the name of the route
							"pattern" : "", // will be the url and from has to be provided in the data
							"view" : "S2",
							"targetControl" : "MainSplitContainer",
							"targetAggregation" : "masterPages",
							"viewLevel" : 0,
							"subroutes" : {
								"detail" : {
									"pattern" : "detail/{contextPath}",
									"view" : "S3",
									"viewLevel" : 1
								},
								"noData" : {
									"pattern" : "noData/{viewTitle}/{languageKey}",
									"viewPath" : "sap.ca.scfld.md.view",
									"view" : "empty",
									"viewLevel" : 1
								}
							}
						}
					}
				},
				"fullScreen" : {
					"view" : "App",
					"viewPath" : "sap.ca.scfld.md.view",
					"targetControl" : "fioriContent", // This is the control in which the new view will be placed
					"targetAggregation" : "pages", // This is the aggregation in which the new view will be placed
					"subroutes" : {}
				}
			}
		};
	} else {
		oMeta.routing = {
			"config" : {
				"viewType" : "XML",
				"viewPath" : oAppMeta.viewPath,
				"targetAggregation" : "pages",
				"viewLevel" : undefined, // the masterDetailRoute and the fioriContentRoute should rely on the browser
				// history direction
				"clearTarget" : false
			},
			"routes" : {
				"fullScreen" : {
					"view" : "App",
					"viewPath" : "sap.ca.scfld.md.view",
					"targetControl" : "fioriContent", // This is the control in which the new view will be placed
					"targetAggregation" : "pages", // This is the aggregation in which the new view will be placed
					"subroutes" : {
						"noData" : {
							"pattern" : "noData/{viewTitle}/{languageKey}",
							"viewPath" : "sap.ca.scfld.md.view",
							"view" : "empty",
							"viewLevel" : 2
						}
					}
				}
			}
		};
	}
	var oDetailRoutes;
	var oMasterRoutes;
	var oFullScreenRoutes;
	try {
		oDetailRoutes = oMeta.routing.routes.masterDetail.subroutes.master.subroutes;
	} catch (e) {
	}
	try {
		oMasterRoutes = oMeta.routing.routes.masterDetail.subroutes;
	} /* We only support one master*/ catch (e) {
	}
	try {
		oFullScreenRoutes = oMeta.routing.routes.fullScreen.subroutes;
	} catch (e) {
	}

	if (oDetailRoutes) {
		jQuery.extend(true, oDetailRoutes, oAppMeta.detailPageRoutes);
	}
	if (oMasterRoutes) {
		jQuery.extend(true, oMasterRoutes, oAppMeta.masterPageRoutes);
	}
	if (oFullScreenRoutes) {
		jQuery.extend(true, oFullScreenRoutes, oAppMeta.fullScreenPageRoutes);
	}

	setRouteDefaults({
		targetControl : "MainSplitContainer",
		targetAggregation : "masterPages",
		viewPath : oAppMeta.viewPath,
		viewLevel : 0
	}, oMasterRoutes);
	setRouteDefaults({
		// targetControl : "MainSplitContainer",
		targetAggregation : "detailPages",
		viewPath : oAppMeta.viewPath,
		viewLevel : 1
	}, oDetailRoutes);
	setRouteDefaults({
		targetControl : "app",
		targetAggregation : "pages",
		viewPath : oAppMeta.viewPath,
		viewLevel : 2
	}, oFullScreenRoutes);

	// insert the style class needed for the master list to work instead of trying to load a css file
	// only do this if the style tag does not exist
	if (jQuery('#scfld-hiddenList-class').length === 0) {
		var inlineStyle = jQuery('<style id="scfld-hiddenList-class" type="text/css">.hiddenList{display:none;}</style>');
		document.getElementsByTagName('head')[0].appendChild(inlineStyle[0]);
	}


	return oMeta;

};

}; // end of sap/ca/scfld/md/ComponentBase.js
