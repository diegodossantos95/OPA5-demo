// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.vk.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.vk.BaseNodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the BaseNodeProxy class.
jQuery.sap.declare('sap.ui.vk.BaseNodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/BaseNodeProxy",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	/**
	 * Constructor for a new BaseNodeProxy.

	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @class
	 * Provides a simple, lightweight proxy object to a node in a node hierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.Object
	 * @implements sap.ui.base.Poolable, sap.ui.vk.BaseNodeProxy
	 * @alias sap.ui.vk.dvl.BaseNodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var BaseNodeProxy = BaseObject.extend("sap.ui.vk.dvl.BaseNodeProxy", /** @lends sap.ui.vk.dvl.BaseNodeProxy.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the reference object of the node.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getNodeRef
	 * @returns {any} The node's reference object.
	 * @public
	 * @abstract
	 */

	/**
	 * Gets the ID of the node.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getNodeId
	 * @returns {string} The node's ID.
	 * @public
	 * @abstract
	 */

	/**
	 * Gets the name of the node.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getName
	 * @returns {string} The node's name.
	 * @public
	 * @abstract
	 */

	// NB: We cannot name the method getMetadata as there already exists sap.ui.base.Object.prototype.getMetadata method.
	/**
	 * Gets the metadata of the node.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getNodeMetadata
	 * @returns {object} A JSON object containing the node's metadata.
	 * @public
	 * @abstract
	 */

	/**
	 * Indicates whether the node has child nodes.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getHasChildren
	 * @returns {boolean} A value of <code>true</code> indicates that the node has child nodes, and a value of <code>false</code> indicates otherwise.
	 * @public
	 * @abstract
	 */

	/**
	 * Gets the scene reference that this BaseNodeProxy object wraps.
	 * @function
	 * @name sap.ui.vk.BaseNodeProxy#getSceneRef
	 * @returns {any} A scene reference that this BaseNodeProxy object wraps.
	 * @public
	 * @abstract
	 */

	return BaseNodeProxy;
});

}; // end of sap/ui/vk/BaseNodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerBaseRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ContainerBaseRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ContainerBaseRenderer",function() {
	"use strict";

	/**
	 * @class ContainerBase renderer.
	 * @static
	 */
	var ContainerBaseRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ContainerBaseRenderer.render = function(oRm, oControl) {
		// console.log( "sap.ui.vk.ContainerBaseRenderer.render.....\r\n");

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiVkContainerBase");
		oRm.writeClasses(oControl);
		oRm.write(">");

		// wrapper
		oRm.write("<div");
		oRm.writeAttributeEscaped("id", oControl.getId() + "-wrapper");
		oRm.addClass("sapUiVkContainerBaseWrapper");
		oRm.writeClasses();
		oRm.write(">");

		this.writeContentArea(oRm, oControl);

		this.writeToolbarArea(oRm, oControl);

		oRm.write("</div>"); // end wrapper

		oRm.write("</div>");
	};

	ContainerBaseRenderer.writeContentArea = function(oRm, oControl) {
		// content part
		var selectedContent = oControl.getSelectedContent();

		oRm.write("<div");
		oRm.addClass("sapUiVkContainerBaseContentArea");
		oRm.writeClasses();
		oRm.write(">");

		if (selectedContent !== null) {
			oRm.renderControl(selectedContent);
		} else if (oControl.getContent().length > 0) {
			selectedContent = oControl.getContent()[0];
			oRm.renderControl(selectedContent);
		}

		oRm.write("</div>");// end contentArea
	};

	ContainerBaseRenderer.writeToolbarArea = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapUiVkContainerBaseToolbarArea");
		oRm.writeClasses();
		oRm.write(">");
		// toolbar
		oRm.renderControl(oControl._oToolbar);
		oRm.write("</div>");// end toolbar
	};

	return ContainerBaseRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ContainerBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerContentRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ContainerContentRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ContainerContentRenderer",function() {
	"use strict";

	/*
	 * @class ContainerContent renderer. @static
	 */
	var ContainerContentRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ContainerContentRenderer.render = function(oRm, oControl) {
		// just render the embedded control as it is. The purpose is to only provide extra properties.
		oRm.renderControl(oControl.getContent());
	};

	return ContainerContentRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ContainerContentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContentManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides object sap.ui.vk.ContentManager.
jQuery.sap.declare('sap.ui.vk.ContentManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContentManager",[
	"jquery.sap.global", "sap/ui/base/ManagedObject"
], function(jQuery, ManagedObject) {
	"use strict";

	/**
	 * Constructor for a new ContentManager.
	 *
	 * @class
	 * Provides a base loader interface.
	 *
	 * To load content a concrete loader class is to be used.
	 *
	 * @param {string} [sId] ID for the new ContentManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ContentConnector object.
	 * @protected
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ContentManager
	 * @since 1.50.0
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContentManager = ManagedObject.extend("sap.ui.vk.ContentManager", /** @lends sap.ui.vk.ContentManager.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			events: {
				/**
				 * This event will be fired when content resources are about to be loaded.
				 */
				contentChangesStarted: {
					parameters: {
					}
				},

				/**
				 * This event will be fired when content resources have been loaded successfully or with a failure.
				 */
				contentChangesFinished: {
					parameters: {
						/**
						 * The content created or updated.
						 */
						content: {
							type: "any"
						},

						/**
						 * The failure reason if any.<br>
						 * An single element or an array of elements with the following structure:
						 * <ul>
						 *   <li>error - An oject with details of the error.
						 *   <li>contentResource - A {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} object when it is possible to
						 *       match <code>error</code> to a {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} object.
						 * </ul>
						 */
						failureReason: {
							type: "object"
						}
					}
				},

				/**
				 * This event will be fired to report the progress of content changes.
				 */
				contentChangesProgress: {
					parameters: {
						/**
						 * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc.
						 * It might be null if reporting this parameter does not make sense.
						 */
						phase: {
							type: "string"
						},

						/**
						 * The overall percentage of the loading process.
						 */
						percentage: {
							type: "float"
						},

						/**
						 * The content resource currently being loaded. It might be null if reporting this parameter does not make sense.
						 */
						source: {
							type: "any"
						}
					}
				}
			}
		}
	});

	/**
	 * Starts downloading and building or updating the content from the content resources.
	 *
	 * This method is asynchronous.
	 *
	 * @function
	 * @name sap.ui.vk.ContentManager#loadContent
	 * @param {any}                         content          The current content to update. It can be <code>null</code> if this is an initial loading call.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to load or update.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @abstract
	 * @since 1.50.0
	 */

	/**
	 * Destroys the content.
	 *
	 * @param {any} content The content to destroy.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	ContentManager.prototype.destroyContent = function(content) {
		return this;
	};

	/**
	 * Collects and destroys unused objects and resources.
	 *
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	 ContentManager.prototype.collectGarbage = function() {
		 return this;
	 };

	return ContentManager;
});

}; // end of sap/ui/vk/ContentManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Core') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
// Provides the Core class.
jQuery.sap.declare('sap.ui.vk.Core'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Core",[
	"jquery.sap.global", "sap/ui/base/ManagedObject"
], function(jQuery, ManagedObject) {
	"use strict";

	/**
	 * @class Core Class of the SAP UI VK Library.
	 *
	 * This class boots the Core framework and makes it available for the application
	 * via method <code>sap.ui.vk.getCore()</code>.
	 *
	 * Example:
	 * <pre>
	 *
	 *   var vkCore = sap.ui.vk.getCore();
	 *
	 * </pre>
	 *
	 * @final
	 * @private
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.Core
	 * @since 1.50.0
	 */
	var Core = ManagedObject.extend("sap.ui.vk.Core", /** @lends sap.ui.vk.Core.prototype */ {
		metadata: {
			publicMethods: [
				"registerClass"
			]
		},

		constructor: function() {
			// Make this class only available once.
			if (sap.ui.vk.getCore && sap.ui.vk.getCore()) {
				return sap.ui.vk.getCore();
			}

			ManagedObject.call(this);

			/**
			 * Retrieve the {@link sap.ui.vk.Core Core} instance for the current window.
			 * @returns {sap.ui.vk.Core} the API of the current Core instance.
			 * @public
			 * @function
			 * @since 1.50.0
			 */
			sap.ui.vk.getCore = jQuery.sap.getter(this);

			this._classes = []; // a list of classes
		}
	});


	/**
	 * Registers class to send events when instances of the class are created or about to be destroyed.
	 *
	 * @param {function} classObject The class object to register.
	 * @returns {sap.ui.vk.Core} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	Core.prototype.registerClass = function(classObject) {
		if (this._classes.indexOf(classObject) >= 0) {
			return this;
		}

		var that = this,
		    fullClassName = classObject.getMetadata().getName(),
		    eventClassNameCreated = fullClassName + "-created",
		    eventClassNameDestroying = fullClassName + "-destroying",
		    baseRegister = classObject.prototype.register,
		    baseDeregister = classObject.prototype.deregister;

		classObject.prototype.register = function() {
			if (baseRegister) {
				baseRegister.call(this);
			}
			that.fireEvent(eventClassNameCreated, { object: this });
		};
		classObject.prototype.deregister = function() {
			that.fireEvent(eventClassNameDestroying, { object: this });
			if (baseDeregister) {
				baseDeregister.call(this);
			}
		};

		this._classes.push(classObject);

		return this;
	};

	return new Core();
});

}; // end of sap/ui/vk/Core.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DockManagerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides default renderer for control sap.ui.vk.DockManager
jQuery.sap.declare('sap.ui.vk.DockManagerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DockManagerRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";


	/**
	 * vk/DockManager renderer.
	 * @namespace
	 */
	var DockManagerRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	DockManagerRenderer.render = function(oRenderManager, oControl){
		// convenience variable
		var rm = oRenderManager;

		// write the HTML into the render manager
		rm.write("<div");
		rm.writeControlData(oControl);
		rm.writeClasses();

		if (oControl.getWidth() && oControl.getWidth() != "") {
			rm.addStyle("width", oControl.getWidth());
		}
		if (oControl.getHeight() && oControl.getHeight() != "") {
			rm.addStyle("height", oControl.getHeight());
		}

		rm.writeStyles();
		rm.write(">"); // DIV element

		// render content
		rm.write("</div>");
	};

	return DockManagerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/DockManagerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DvlException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides an exception class for DVL errors.
jQuery.sap.declare('sap.ui.vk.DvlException'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Exception'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DvlException",[ "sap/ui/base/Exception" ], function(Exception) {
	"use strict";

	/**
	 * This exception is thrown, when an error occurs in DVL API.
	 *
	 * @class
	 *
	 * @param {sap.ve.dvl.DVLRESULT} code The error code.
	 * @param {string} message The error message.
	 * @private
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.Exception
	 * @alias sap.ui.vk.DvlException
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DvlException = function(code, message) {
		this.name = "DvlException";
		this.code = code;
		this.message = message;
	};
	DvlException.prototype = Object.create(Exception.prototype);

	return DvlException;
});

}; // end of sap/ui/vk/DvlException.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides default renderer for control sap.ui.vk.FlexibleControl
jQuery.sap.declare('sap.ui.vk.FlexibleControlRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";


	/**
	 * vk/FlexibleControl renderer.
	 * @namespace
	 */
	var FlexibleControlRenderer = {
	};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oFlexibleControl An object representation of the control that should be rendered
	 */
	FlexibleControlRenderer.render = function(oRenderManager, oFlexibleControl){
		// convenience variable
		var rm = oRenderManager;

		// write the HTML into the render manager
		rm.write("<div");
		rm.writeControlData(oFlexibleControl);
		rm.addClass("sapUiFlexControl");

		if (oFlexibleControl.getWidth() && oFlexibleControl.getWidth() != "") {
			rm.addStyle("width", oFlexibleControl.getWidth());
		}
		if (oFlexibleControl.getHeight() && oFlexibleControl.getHeight() != "") {
			rm.addStyle("height", oFlexibleControl.getHeight());
		}

		rm.writeStyles();
		rm.writeClasses();
		rm.write(">"); // DIV element

		// render content
		var aContent = oFlexibleControl.getContent();
		var layout = oFlexibleControl.getLayout();

		var cellClass = "sapUiFlexCellStacked";

		if (layout == "Vertical") {
			cellClass = "sapUiFlexCellVertical";
		}

		for (var i = 0; i < aContent.length; i++) {
			var content = aContent[i];

			rm.write("<div id=\"" + oFlexibleControl.getId() + "Content_" + i + "\" class=\"" + cellClass + "\"");

			var layoutData = content.getLayoutData();
			if (layoutData && layout != "Stacked") {
				rm.write(" style=\"");

				if (layoutData.getSize() && layoutData.getSize() != "") {
					rm.write("height: " + layoutData.getSize() + ";");
				}
				if (layoutData.getMinSize() && layoutData.getMinSize() != "") {
					rm.write("min-height: " + layoutData.getMinSize() + ";");
				}
				if (layoutData.getMarginTop() && layoutData.getMarginTop() != "") {
					rm.write("margin-top: " + layoutData.getMarginTop() + ";");
				}
				if (layoutData.getMarginBottom() && layoutData.getMarginBottom() != "") {
					rm.write("margin-bottom: " + layoutData.getMarginBottom() + ";");
				}

				rm.write("\"");
			}

			rm.write(">");
			rm.renderControl(content);
			rm.write("</div>");
		}

		rm.write("</div>");
	};

	return FlexibleControlRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceKeyboard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDeviceKeyboard.
jQuery.sap.declare('sap.ui.vk.InputDeviceKeyboard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceKeyboard",[
	"jquery.sap.global", "sap/ui/base/EventProvider"
], function(jQuery, EventProvider) {
	"use strict";

	var InputDeviceKeyboard = EventProvider.extend("sap.ui.vk.InputDeviceKeyboard", {
		metadata: {
			publicMethods: [
				"enable",
				"disable"
			]
		},

		constructor: function(loco) {
			this._loco = loco;
		}
	});

	InputDeviceKeyboard.prototype.enable = function(control) {
		this._control = control;
		this._control.attachBrowserEvent("keydown keyup keypress", this._onKeyEvent, this);
	};

	InputDeviceKeyboard.prototype.disable = function() {
		this._control.detachBrowserEvent("keydown keyup keypress", this._onKeyEvent, this);
	};

	InputDeviceKeyboard.prototype._onKeyEvent = function(event) {
		this._loco.keyEventHandler(event, this._control);
	};

	return InputDeviceKeyboard;

}, true);

}; // end of sap/ui/vk/InputDeviceKeyboard.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceMouse') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDeviceMouse.
jQuery.sap.declare('sap.ui.vk.InputDeviceMouse'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceMouse",[
	"jquery.sap.global", "sap/ui/base/EventProvider"
], function(jQuery, EventProvider) {
	"use strict";

	var InputDeviceMouse = EventProvider.extend("sap.ui.vk.InputDeviceMouse", {
		metadata: {
			publicMethods: [
				"isSupported",
				"enable",
				"disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._buttons = 0;
			this._buttonFlagsValue = 0;
			this._zoomOrigin = {
				x: 0,
				y: 0
			};
			this._mousedownProxy = this._onmousedown.bind(this);
			this._mouseupProxy = this._onmouseup.bind(this);
			this._mousemoveProxy = this._onmousemove.bind(this);
			this._mousewheelProxy = this._onmousewheel.bind(this);
			this._contextmenuProxy = this._oncontextmenu.bind(this);
			this._onmouseupWindowListenerProxy = this._onmouseupWindowListener.bind(this);
		}
	});

	InputDeviceMouse.prototype._buttonFlags = function(button, down) {
		if (down) {
			this._buttonFlagsValue |= (1 << button);
		} else {
			this._buttonFlagsValue &= ~(1 << button);
		}

		return this._buttonFlagsValue;
	};

	InputDeviceMouse.prototype._eventToInput = function(event, buttonsOverride) {
		// Encapsulate HTML mouse event to Loco input event
		// "button" as bit mask: 1: left, 2: right, 4: middle, 8: Fourth, 16: Fifth, ...
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;
		if (buttonsOverride) {
			btn = buttonsOverride;
		}
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: 0,
			buttons: btn,
			scroll: event.wheelDelta,
			points: [],
			handled: false
		};
		var n = 0;

		switch (btn) {
			case 0: // Mouse up?
			case 1: // 1 finger pan
				n = 1;
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				break;
			case 3: // 2 fingers pan
			case 4:
			case 5: // Safari specific
				n = 2;
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				input.points.push({
					x: event.pageX,
					y: event.pageY,
					z: 0
				});
				break;
			case 2: // 2 fingers zoom
				n = 2;
				input.points.push({
					x: this._zoomOrigin.x,
					y: event.pageY,
					z: 0
				});
				input.points.push({
					x: this._zoomOrigin.x,
					y: event.pageY + (this._zoomOrigin.y - event.pageY) * 2,
					z: 0
				});
				break;
			default:
				n = 0;
				break;
		}

		input.n = n;

		return input;
	};

	InputDeviceMouse.prototype._onmouseup = function(event) {
		this._capturedByControl = true;
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, false);
		if (event["_sapui_handledByControl"]) {
			return;
		}

		var input = this._eventToInput(event, this._buttons);
		this._loco.endGesture(input, this._control);

		if (btn == 2) {
			this._zoomOrigin.x = event.pageX;
			this._zoomOrigin.y = event.pageY;
		}

		input = this._eventToInput(event);
		if (btn != 0) {
			input.handled = false;
			this._loco.beginGesture(input, this._control);
		}

		this._buttons = btn;

		if (input.handled) {
			event.preventDefault();
			event["_sapui_handledByControl"] = true;
		}
	};

	// This method is called when we the mouseup event is fired.
	// When you hold and drag the left mouse button and release while outside
	// the area of Viewport/NativeViewport, Loco doesn't know the gesture ended.
	// This way, we attach a listener to the window so we can capture the mouseup all the time.
	// This method is fired after the regular "InputDeviceMouse.prototype._onmouseup". We check if the mouseup event
	// was handled in that method. If not, than we call the _onmouseup method manually.
	// This fix is requiered because Loco gets confused when the mouseup event occurs outside
	// the Viewport/NativeViewport.
	InputDeviceMouse.prototype._onmouseupWindowListener = function(event) {
		if (!this._capturedByControl) {
			this._onmouseup(event);
		}
		this._capturedByControl = false;
	};


	InputDeviceMouse.prototype._onmousemove = function(event) {
		// var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;

		if (event["_sapui_handledByControl"] /* || btn == 0*/) {
			return;
		}

		// If it's a Mac computer, and the movement happens while the double-finger click is pressed,
		// then we turn it into a left-mouse + right-mouse button event so we can do pan gestures
		// as per requirements (requirements say that on mac, two finger click & drag performs panning).
		if (sap.ui.Device.os.name === sap.ui.Device.os.OS.MACINTOSH && event.buttons === 2) {
			event.buttons = 3;
		}

		var input = this._eventToInput(event);
		this._loco.move(input, this._control);

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceMouse.prototype._onmousedown = function(event) {
		var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, true);

		if (event["_sapui_handledByControl"]) {
			return;
		}

		var input;
		if (this._buttons != 0) {
			input = this._eventToInput(event, this._buttons);
			this._loco.endGesture(input, this._control);
		}

		if (btn == 2) {
			this._zoomOrigin.x = event.pageX;
			this._zoomOrigin.y = event.pageY;
		}
		input = this._eventToInput(event);

		input.handled = false;
		this._loco.beginGesture(input, this._control);
		this._prevButtons = btn;
		this._buttons = btn;

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceMouse.prototype._onmousewheel = function(ev) {
		var event = ev.originalEvent ? ev.originalEvent : ev;
		if (event["_sapui_handledByControl"] || this._buttons != 0) {
			return;
		}

		this._zoomOrigin.x = event.pageX;
		this._zoomOrigin.y = event.pageY;

		var simevent = {
			pageX: event.pageX,
			pageY: event.pageY,
			buttons: 2,
			wheelDelta: event.wheelDelta
		};
		var input = this._eventToInput(simevent);
		this._loco.beginGesture(input, this._control);

		var delta = event.detail ? event.detail * (-40) : event.wheelDelta;

		simevent.pageY -= delta / 5;
		input = this._eventToInput(simevent);

		input.handled = false;
		this._loco.move(input, this._control);

		input.handled = false;
		this._loco.endGesture(input, this._control);

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceMouse.prototype._oncontextmenu = function(event) {
		var input = this._eventToInput(event);

		this._loco.contextMenu(input, this._control);

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceMouse.prototype.isSupported = function() {
		return true;
	};

	InputDeviceMouse.prototype.enable = function(control) {
		this._buttonFlagsValue = 0;
		this._buttons = 0;
		this._control = control;

		var func = this._control ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func("mousedown", this._mousedownProxy);
		func("mouseup", this._mouseupProxy);
		func("mousemove", this._mousemoveProxy);
		func("mousewheel", this._mousewheelProxy);
		func("DOMMouseScroll", this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.addEventListener("mouseup", this._onmouseupWindowListenerProxy);
	};

	InputDeviceMouse.prototype.disable = function() {
		var func = this._control ? this._control.detachBrowserEvent.bind(this._control) : window.document.removeEventListener;
		func("mousedown", this._mousedownProxy);
		func("mouseup", this._mouseupProxy);
		func("mousemove", this._mousemoveProxy);
		func("mousewheel", this._mousewheelProxy);
		func("DOMMouseScroll", this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.removeEventListener("mouseup", this._onmouseupWindowListenerProxy);
	};

	return InputDeviceMouse;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDeviceMouse.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDevicePointer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicPointer.
jQuery.sap.declare('sap.ui.vk.InputDevicePointer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDevicePointer",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "./InputDeviceMouse"
], function(jQuery, EventProvider, InputDeviceMouse) {
	"use strict";

	var InputDevicePointer = EventProvider.extend("sap.ui.vk.InputDevicePointer", {
		metadata: {
			publicMethods: [
				"isSupported",
				"enable",
				"disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._pointerIds = [];
			this._pointers = [];
			this._count = 0;
			this._points = 0;
			this._buttons = 0;
			this._mouse = new InputDeviceMouse(this._loco);
			this._pointerdownProxy = this._onpointerdown.bind(this);
			this._pointerupProxy = this._onpointerup.bind(this);
			this._pointermoveProxy = this._onpointermove.bind(this);
			this._mousewheelProxy = this._mouse._onmousewheel.bind(this._mouse);
			this._contextmenuProxy = this._mouse._oncontextmenu.bind(this._mouse);
			this._onpointerupWindowListenerProxy = this._onpointerupWindowListener.bind(this);
		}
	});


	InputDevicePointer.prototype._clearPointers = function() {
		this._pointerIds = [];
		this._pointers = [];
		this._count = 0;
		this._points = 0;
		this._buttons = 0;
	};

	InputDevicePointer.prototype._addPointer = function(id, _x, _y) {
		// jQuery.sap.log.debug("AddPointer[" + id + "]: " + _x + ", " + _y);

		if (this._pointerIds[id] == null) {
			this._pointerIds[id] = this._count;
		}

		var index = this._pointerIds[id];

		if (this._pointers.length <= index || this._pointers[index] == null) {
			this._count++;
		}

		this._pointers[index] = {
			x: _x,
			y: _y
		};

		return this._count;
	};

	InputDevicePointer.prototype._removePointer = function(id) {
		// jQuery.sap.log.debug("RemovePointer[" + id + "]");

		if (this._pointerIds[id] == null) {
			return this._count;
		}

		var index = this._pointerIds[id];
		this._pointerIds[id] = null;

		if (this._pointers.length > index && this._pointers[index] != null) {
			this._count--;
		}

		this._pointers[index] = null;

		return this._count;
	};

	InputDevicePointer.prototype._eventToInput = function(event) {
		// Encapsulate HTML pointer event to this._loco input event
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: this._count,
			buttons: 0,
			scroll: 0,
			points: [],
			handled: false
		};

		var tp = this._pointers;
		var l = tp.length;

		for (var i = 0; i < l; i++) {
			var ep = tp[i];

			if (ep != null) {
				input.points.push({
					x: ep.x,
					y: ep.y,
					z: 0
				});
			}
		}

		return input;
	};

	InputDevicePointer.prototype._onpointerdown = function(ev) {
		var event = ev.originalEvent ? ev.originalEvent : ev;

		if (event.pointerType != "touch" && event.pointerType != "pen") {
			this._buttons = event.buttons;
			this._mouse._onmousedown(event);
			return;
		}

		if (event.isPrimary) {
			this._clearPointers();
		}

		this._addPointer(event.pointerId, event.pageX, event.pageY);

		event.target.setPointerCapture(event.pointerId);

		var input = this._eventToInput(event);

		if (this._points != 0 && this._points != input.n) {
			this._loco.endGesture(input, this._control);
		}

		this._points = input.n;
		input.handled = false;
		this._loco.beginGesture(input, this._control);

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		} else {
			this._removePointer(event.pointerId);
		}
	};

	InputDevicePointer.prototype._onpointerup = function(ev) {
		this._capturedByControl = true;

		var event = ev.originalEvent ? ev.originalEvent : ev;

		if (event.pointerType != "touch" && event.pointerType != "pen") {
			this._buttons = 0;
			this._mouse._onmouseup(event);
			return;
		}

		this._removePointer(event.pointerId);

		event.target.releasePointerCapture(event.pointerId);

		var input = this._eventToInput(event);

		this._loco.endGesture(input, this._control);

		if (input.n != 0 && this._points != input.n) {
			input.handled = false;
			this._loco.beginGesture(input, this._control);
		}

		this._points = input.n;

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	// This method is called when we the pointerup event is fired.
	// When you hold and drag the left mouse button and release while outside
	// the area of Viewport/NativeViewport, Loco doesn't know the gesture ended.
	// This way, we attach a listener to the window so we can capture the pointerup event all the time.
	// This method is fired after the regular "Pointer._prototype._onpointerup". We check if the pointerup event
	// was handled in that method. If not, we callthe _onpointerup method manually.
	// This fix is requiered because Loco gets confused when the pointerup event occurs outside
	// the Viewport/NativeViewport.
	InputDevicePointer.prototype._onpointerupWindowListener = function(event) {
		if (!this._capturedByControl) {
			this._onpointerup(event);
		}
		this._capturedByControl = false;
	};

	InputDevicePointer.prototype._onpointermove = function(ev) {
		if (ev.buttons !== 0 || sap.ui.Device.system.desktop) {
			var event = ev.originalEvent ? ev.originalEvent : ev;

			if (event.pointerType != "touch" && event.pointerType != "pen") {
				if (this._buttons != event.buttons) {
					this._mouse._onmousedown(event);
					this._buttons = event.buttons;
				} else {
					this._mouse._onmousemove(event);
				}
				return;
			}

			this._addPointer(event.pointerId, event.pageX, event.pageY);

			var input = this._eventToInput(event);

			if (this._points != input.n) {
				this._loco.endGesture(input, this._control);
				input.handled = false;
				this._loco.beginGesture(input, this._control);
				this._points = input.n;
			} else {
				this._loco.move(input, this._control);
			}

			if (input.handled) {
				event["_sapui_handledByControl"] = true;
				event.preventDefault();
			}
		}

	};

	InputDevicePointer.prototype.isSupported = function() {
        if ((sap.ui.Device.browser.edge || sap.ui.Device.browser.msie) && sap.ui.Device.support.pointer) {
            return true;
        }
        // Because of the Chrome 55 Pointer Events changes,
		// we need to disable the support for the pointers in chrome and other browsers we havn't tested.
		return false;
		/*
		 * TO DO:
		 * Implement proper pointer support
		 */
	};

	InputDevicePointer.prototype.enable = function(control) {
		this._pointerIds = [];
		this._pointers = [];
		this._points = 0;
		this._count = 0;
		this._buttons = 0;
		this._mouse._buttons = 0;

		this._control = control;
		this._mouse._control = control;

		var func = this._control ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func("pointerdown", this._pointerdownProxy);
		func("pointerup", this._pointerupProxy);
		func("pointermove", this._pointermoveProxy);
		func("mousewheel", this._mousewheelProxy);
		func("DOMMouseScroll", this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.addEventListener("pointerup", this._onpointerupWindowListenerProxy);
	};

	InputDevicePointer.prototype.disable = function() {
		var func = this._control ? this._control.detachBrowserEvent.bind(this._control) : window.document.removeEventListener;
		func("pointerdown", this._pointerdownProxy);
		func("pointerup", this._pointerupProxy);
		func("pointermove", this._pointermoveProxy);
		func("mousewheel", this._mousewheelProxy);
		func("DOMMouseScroll", this._mousewheelProxy);
		func("contextmenu", this._contextmenuProxy);
		window.document.removeEventListener("pointerup", this._onpointerupWindowListenerProxy);
	};

	return InputDevicePointer;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDevicePointer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceTouch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicTouch.
jQuery.sap.declare('sap.ui.vk.InputDeviceTouch'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceTouch",[
	"jquery.sap.global", "sap/ui/base/EventProvider"
], function(jQuery, EventProvider) {
	"use strict";

	var InputDeviceTouch = EventProvider.extend("sap.ui.vk.InputDeviceTouch", {
		metadata: {
			publicMethods: [
				"isSupported",
				"enable",
				"disable"
			]
		},

		constructor: function(Loco) {
			this._loco = Loco;
			this._points = 0;
			this._touchdownProxy = this._ontouchdown.bind(this);
			this._touchupProxy = this._ontouchup.bind(this);
			this._touchmoveProxy = this._ontouchmove.bind(this);
		}
	});


	InputDeviceTouch.prototype._eventToInput = function(event) {
		// Encapsulate HTML touch event to this._loco input event
		var input = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: event.touches.length,
			buttons: 0,
			scroll: 0,
			points: [],
			handled: false
		};

		for (var i = 0; i < input.n; i++) {
			var et = event.touches[i];
			input.points.push({
				x: et.pageX,
				y: et.pageY,
				z: 0
			});
		}

		return input;
	};

	InputDeviceTouch.prototype._ontouchdown = function(event) {
		var input = this._eventToInput(event);

		if (this._points != 0 && this._points != input.n) {
			this._loco.endGesture(input, this._control);
		}

		this._points = input.n;
		input.handled = false;
		this._loco.beginGesture(input, this._control);

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceTouch.prototype._ontouchup = function(event) {
		var input = this._eventToInput(event);


		this._loco.endGesture(input, this._control);
		this._points = 0;

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceTouch.prototype._ontouchmove = function(event) {
		var input = this._eventToInput(event);

		// console.log("points: " + input.n);
		if (this._points != input.n) {
			this._loco.endGesture(input, this._control);
			input.handled = false;
			this._loco.beginGesture(input, this._control);
			this._points = input.n;
		} else {
			this._loco.move(input, this._control);
		}

		if (input.handled) {
			event["_sapui_handledByControl"] = true;
			event.preventDefault();
		}
	};

	InputDeviceTouch.prototype.isSupported = function() {
		return typeof window.ontouchstart !== "undefined";
	};

	InputDeviceTouch.prototype.enable = function(control) {
		this._points = 0;
		this._control = control;

		var func = this._control ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
		func("touchstart", this._touchdownProxy);
		func("touchend", this._touchupProxy);
		func("touchmove", this._touchmoveProxy);
	};

	InputDeviceTouch.prototype.disable = function() {
		var func = this._control ? this._control.detachBrowserEvent.bind(this._control) : window.document.removeEventListener;
		func("touchstart", this._touchdownProxy);
		func("touchend", this._touchupProxy);
		func("touchmove", this._touchmoveProxy);
	};

	return InputDeviceTouch;
}, /* bExport= */ true);

}; // end of sap/ui/vk/InputDeviceTouch.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LayerProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the LayerProxy class.
jQuery.sap.declare('sap.ui.vk.LayerProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LayerProxy",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	/**
	 * Constructor for a new LayerProxy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy sap.ui.vk.NodeHierarchy.createLayerProxy} method
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
	 *
	 * @class
	 * Provides a proxy object to the layer in the node hierarchy.
	 *
	 * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple layers.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy sap.ui.vk.NodeHierarchy.createLayerProxy} method
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
	 *
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.BaseObject
	 * @alias sap.ui.vk.LayerProxy
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var LayerProxy = BaseObject.extend("sap.ui.vk.LayerProxy", /** @lends sap.ui.vk.LayerProxy.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the layer ID.
	 * @function
	 * @name sap.ui.vk.LayerProxy#getLayerId
	 * @returns {string} The layer ID.
	 * @public
	 */

	/**
	 * Gets the layer VE IDs.
	 * @function
	 * @name sap.ui.vk.LayerProxy#getVeIds
	 * @returns {object[]} The layer VE IDs.
	 * @public
	 */

	/**
	 * Gets the name of the layer
	 * @function
	 * @name sap.ui.vk.LayerProxy#getName
	 * @returns {string} The name of the layer.
	 * @public
	 */

	/**
	 * Gets the description of the layer.
	 * @function
	 * @name sap.ui.vk.LayerProxy#getDescription
	 * @returns {string} The description of the layer.
	 * @public
	 */

	/**
	 * Gets the layer metadata.
	 * @function
	 * @name sap.ui.vk.LayerProxy#getLayerMetadata
	 * @returns {object} The layer metadata.
	 * @public
	 */

	/**
	 * Gets an array of IDs of nodes belonging to the layer.
	 * @function
	 * @name sap.ui.vk.LayerProxy#getNodes
	 * @return {string[]} An array of IDs of nodes belonging to the layer.
	 * @public
	 */

	return LayerProxy;
});

}; // end of sap/ui/vk/LayerProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LegendItemRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.LegendItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.StandardListItemRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LegendItemRenderer",[
	"sap/m/StandardListItemRenderer", "sap/ui/core/Renderer"
], function(BaseItemRenderer, Renderer) {
	"use strict";

	/*
	 * @class Legend Item renderer. @static
	 */
	var LegendItemRenderer = Renderer.extend(BaseItemRenderer);



	LegendItemRenderer.renderLIContent = function(oRm, oControl) {
		var squareColor = oControl.getColor();
		var type = oControl.getSemanticSpotType();
		var oImg = null;
		if (squareColor) {
			oRm.write("<span");
			oRm.addClass("sapUiVkLegendItemSquare");
			oRm.addStyle("background-color", squareColor);
			oRm.writeStyles();
			oRm.writeClasses();
			oRm.write(">");
			oRm.write("</span>");
		}
		if (type) {
			switch (type) {
				case sap.ui.vbm.SemanticType.Error:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Red.png");
					break;
				case sap.ui.vbm.SemanticType.Warning:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Orange.png");
					break;
				case sap.ui.vbm.SemanticType.Success:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Green.png");
					break;
				case sap.ui.vbm.SemanticType.Default:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Blue.png");
					break;
				case sap.ui.vbm.SemanticType.Inactive:
					oImg = sap.ui.resource("sap.ui.vbm", "themes/base/img/Pin_Grey.png");
					break;
				default:
					break;
			}
			if (oImg){
				oControl.addStyleClass("sapUiVkLegendItemSpotType");
				oControl.setIcon(oImg);
			}
		}

		BaseItemRenderer.renderLIContent(oRm, oControl);
	};

	return LegendItemRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/LegendItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ListPanelRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ListPanelRenderer",function() {
	"use strict";

	/*
	 * @class ListPanel renderer. @static
	 */
	var ListPanelRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ListPanelRenderer.render = function(oRm, oControl) {
		// just render the internal Panel. The purpose is to only provide more specific properties.
		var oPanel = oControl._oPanel;
		oPanel.addStyleClass("sapUiVkListPanel");

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.write(">");
		oRm.renderControl(oPanel);
		oRm.write("</div>");

	};

	return ListPanelRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ListPanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelStackRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ListPanelStackRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/ListPanelStackRenderer",function() {
	"use strict";

	/*
	 * @class Legend renderer. @static
	 */
	var ListPanelStackRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ListPanelStackRenderer.render = function(oRm, oControl) {
		oControl._oLayout.addStyleClass("sapUiVkListPanelStack");
		// render the internal Panel.
		oRm.renderControl(oControl._oLayout);
	};

	return ListPanelStackRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/ListPanelStackRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Loco') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Loco.
jQuery.sap.declare('sap.ui.vk.Loco'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Loco",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "./InputDevicePointer", "./InputDeviceMouse", "./InputDeviceTouch", "./InputDeviceKeyboard"
], function(jQuery, EventProvider, InputDevicePointer, InputDeviceMouse, InputDeviceTouch, InputDeviceKeyboard) {
	"use strict";

	/**
	 * Constructor for a new Loco.
	 *
	 * @class
	 * Intercepts input event data for a SAPUI5 target, and interprets the data based on a supported set of gestures.
	 * @extends sap.ui.core.EventProvider
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Loco
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Loco = EventProvider.extend("sap.ui.vk.Loco", {
		metadata: {
			publicMethods: [
				"addHandler",
				"removeHandler",
				"beginGesture",
				"move",
				"endGesture",
				"contextMenu"
			]
		},

		constructor: function() {
			if (Loco._instance) {
				return Loco._instance;
			}

			EventProvider.apply(this);
			/* Array of ViewportHandler object */
			this._handlers = [];
			this._handlerMap = [];
			this._gesture = [];

			/* Click, double-click simulation */
			this._touchOrigin = {
				x: 0,
				y: 0,
				z: 0
			};
			this._touchMoved = false;
			this._touchButton = 0;

			/* Tick and timer */
			this._touchStart = 0;
			this._touchEnd = 0;
			this._clickTimer = 0;
			this._isDoubleClick = false;

			Loco._instance = this;
		}
	});


	/**
	 * Cleans up, removes all handlers.
	 *
	 * @public
	 */
	Loco.prototype.destroy = function() {
		this._gesture = [];
		this._handlers = [];
	};

	/**
	 * Adds a viewport event handler from Loco.
	 *
	 * @param {handler} handler to be added.
	 *
	 * @public
	 */
	Loco.prototype.addHandler = function(handler) {
		if (this._handlers.indexOf(handler) >= 0) {
			return;
		}
		this._handlers.push(handler);
		var viewport = handler.getViewport();
		var handlers = this._handlerMap[viewport];

		if (handlers == null) {
			this._handlerMap[viewport] = [];
			handlers = this._handlerMap[viewport];
			handlers.push(handler);
		} else if (handlers.indexOf(handler) == -1) {
			handlers.push(handler);
		}

		var pointer = new InputDevicePointer(this);
		if (pointer.isSupported()) {
			pointer.enable(viewport);
			viewport._pointer = pointer;
		} else {
			var mouse = new InputDeviceMouse(this);
			if (mouse.isSupported()) {
				mouse.enable(viewport);
				viewport._mouse = mouse;
			}

			var touch = new InputDeviceTouch(this);
			if (touch.isSupported()) {
				touch.enable(viewport);
				viewport._touch = touch;
			}
		}
		viewport._keyboard = new InputDeviceKeyboard(this);
		viewport._keyboard.enable(viewport);
	};

	/**
	 * Removes a viewport event handler from Loco.
	 *
	 * @param {handler} handler to be removed.
	 *
	 * @public
	 */
	Loco.prototype.removeHandler = function(handler) {
		var viewport = handler.getViewport();
		var h = this._handlers;
		var handlers = this._handlerMap[viewport];
		var handlerIndex;

		if (handlers != null) {
			handlerIndex = handlers.indexOf(handler);
			if (handlerIndex >= 0) {
				handlers.splice(handlerIndex, 1);
			}
		}

		handlerIndex = h.indexOf(handler);
		if (handlerIndex >= 0) {
			h.splice(handlerIndex, 1);

			if (viewport._pointer) {
				viewport._pointer.disable();
				viewport._pointer = null;
			}

			if (viewport._touch) {
				viewport._touch.disable();
				viewport._touch = null;
			}

			if (viewport._mouse) {
				viewport._mouse.disable();
				viewport._mouse = null;
			}

			if (viewport._keyboard) {
				viewport._keyboard.disable();
				viewport._keyboard = null;
			}
		}
	};

	/**
	 * It processes the click event.
	 * @param {boolean} isDoubleClick This parameter specifies whether it is a double-click event or not.
	 * @param {object} viewport The viewport which received the event.
	 * @private
	 */
	Loco.prototype._processClick = function(isDoubleClick, viewport) {
		this._clickTimer = 0;

		var event = {
			x: 0,
			y: 0,
			z: 0,
			d: 0,
			n: 0,
			buttons: 0,
			scrolls: [],
			points: [],
			handled: false
		};
		event.x = this._touchOrigin.x;
		event.y = this._touchOrigin.y;
		event.z = this._touchOrigin.z;
		event.buttons = this._touchButton;

		var handlers = this._handlerMap[viewport];
		if (handlers != null) {
			for (var i = handlers.length - 1; i >= 0; i--) {
				if (isDoubleClick) {
					var nativeViewportId = handlers[i].getViewport().getId();
					// We extract the parent viewer id.
					// if it exists, it has to be a string which ends in "-nativeViewport"
					var parentViewerId = /-nativeViewport$/.test(nativeViewportId) ? nativeViewportId.replace(/-nativeViewport$/, "") : null;
					// We get the parent viewer by id
					var parentViewer = sap.ui.getCore().byId(parentViewerId);
					// If the parent viewert exists, it has an overlay and also the overlay drawing is in progress,
					// then we don't send the double click event to the viewport handler.
					// We know the drawing is in progress because the mIACreateCB function is defined. If the drawing hasn't started
					// or it has already finished, that function is cleared and it becomes undefined.
					if (!parentViewer || !parentViewer.getOverlay() || !(typeof parentViewer.getOverlay().mIACreateCB === "function")) {
						handlers[i].doubleClick(event, viewport);
					}
				} else {
					handlers[i].click(event, viewport);
				}
			}
		}
	};

	/**
	 * @param {object} event JSON object including input event data.
	 * @returns {object} event Processed event object.
	 * @private
	 */
	Loco.prototype._processInput = function(event) {
		// Calculate action point (x, y, z) and distance (d)
		var eps = event.points;

		switch (event.n) {
			case 0:
				event.x = 0;
				event.y = 0;
				event.z = 0;
				event.d = 0;
				break;
			case 2:
				var dx = eps[0].x - eps[1].x,
					dy = eps[0].y - eps[1].y,
					dz = eps[0].z - eps[1].z;
				event.x = (eps[0].x + eps[1].x) / 2;
				event.y = (eps[0].y + eps[1].y) / 2;
				event.z = (eps[0].z + eps[1].z) / 2;
				event.d = Math.sqrt(dx * dx + dy * dy + dz * dz);
				break;
			default:
				event.x = eps[0].x;
				event.y = eps[0].y;
				event.z = eps[0].z;
				event.d = 0;
				break;
		}

		return event;
	};

	/**
	 * Signal begin of a input gesture.
	 *
	 * @param {object} event JSON object including input event data.
	 * @param {object} viewport The viewport which received the event.
	 * @public
	 */
	Loco.prototype.beginGesture = function(event, viewport) {
		if (this._gesture[viewport]) {
			return;
		}

		if (this._clickTimer > 0) {
			clearTimeout(this._clickTimer);
			this._clickTimer = 0;
			this._isDoubleClick = true;

			if (event.n == 1 && event.buttons <= 1 && this._touchButton <= 1) {
				this._processClick(true, viewport);
			}
		}

		this._processInput(event);

		var handlers = this._handlerMap[viewport];
		if (handlers != null) {
			for (var i = handlers.length - 1; i >= 0; i--) {
				handlers[i].beginGesture(event);
				if (event.handled) {
					break;
				}
			}
		}

		var now = new Date();
		this._touchStart = now.getTime();
		this._touchMoved = false;
		this._gesture[viewport] = true;

		this._touchOrigin.x = event.x;
		this._touchOrigin.y = event.y;
		this._touchOrigin.z = event.z;
		this._touchButton = event.buttons;

		if (this._touchEnd != 0 && this._touchStart - this._touchEnd < 50) {
			this._touchMoved = true;
		}
	};

	/**
	 * Signal movement of a input gesture.
	 *
	 * @param {object} event JSON object including input event data.
	 * @param {object} viewport The viewport which received the event.
	 * @public
	 */
	Loco.prototype.move = function(event, viewport) {
		this._processInput(event);
		var handlers = this._handlerMap[viewport];

		var i;
		if (this._gesture[viewport]) {
			if (handlers != null) {
				for (i = handlers.length - 1; i >= 0; i--) {
					handlers[i].move(event);
					if (event.handled) {
						break;
					}
				}
			}

			var dx = this._touchOrigin.x - event.x;
			var dy = this._touchOrigin.y - event.y;
			var dz = this._touchOrigin.z - event.z;

			if ((dx * dx + dy * dy + dz * dz) > 8) {
				this._touchMoved = true;
			}
		} else if (handlers != null) {
			for (i = handlers.length - 1; i >= 0; i--) {
				if (handlers[i].hover != undefined) {
					handlers[i].hover(event);
					if (event.handled) {
						break;
					}
				}
			}
		}
	};

	/**
	 * Signal end of a input gesture.
	 *
	 * @param {object} event JSON object including input event data.
	 * @param {object} viewport The viewport which received the event.
	 * @public
	 */
	Loco.prototype.endGesture = function(event, viewport) {
		if (!this._gesture[viewport]) {
			return;
		}

		this._processInput(event);

		var handlers = this._handlerMap[viewport];
		if (handlers != null) {
			for (var i = handlers.length - 1; i >= 0; i--) {
				handlers[i].endGesture(event);
				if (event.handled) {
					break;
				}
			}
		}

		var now = new Date();
		this._touchEnd = now.getTime();

		if (!this._touchMoved && !this._isDoubleClick && (this._touchEnd - this._touchStart) < 2000) {
			this._clickTimer = setTimeout(function(loco) {
				loco._processClick(false, viewport);
			}, 200, this);
		}

		this._isDoubleClick = false;
		this._gesture[viewport] = false;
	};

	/**
	 * Signal context menu event.
	 *
	 * @param {object} event JSON object including input event data
	 * @param {object} viewport The viewport which received the event.
	 * @public
	 */
	Loco.prototype.contextMenu = function(event, viewport) {
		this._processInput(event);
		var handlers = this._handlerMap[viewport];
		if (handlers != null) {
			for (var i = handlers.length - 1; i >= 0; i--) {
				handlers[i].contextMenu(event);
				if (event.handled) {
					break;
				}
			}
		}
	};

	/**
	 * Signal keyboard event.
	 *
	 * @param {object} event Keyboard event object.
	 * @param {object} viewport The viewport which received the event.
	 * @public
	 */
	Loco.prototype.keyEventHandler = function(event, viewport) {
		var handlers = this._handlerMap[viewport];
		if (handlers !== null && handlers !== undefined) {
			for (var i = handlers.length - 1; i >= 0; i--) {
				if (handlers[i].keyEventHandler) {
					handlers[i].keyEventHandler(event);
				}
			}
		}
	};
	return Loco;
}, /* bExport= */ true);

}; // end of sap/ui/vk/Loco.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.MapContainerRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.MapContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/MapContainerRenderer",[
	"./ContainerBaseRenderer", "sap/ui/core/Renderer", "sap/ui/Device"
], function(BaseContainerRenderer, Renderer, Device) {
	"use strict";

	/*
	 * @class MapContainer renderer. @static
	 */
	var MapContainerRenderer = Renderer.extend(BaseContainerRenderer);

	MapContainerRenderer.render = function(oRm, oControl) {
		oControl.addStyleClass("sapUiVkMapContainer");
		BaseContainerRenderer.render.apply(this, arguments);
	};

	MapContainerRenderer.writeToolbarArea = function(oRm, oControl) {
		oRm.write("<div");
		oRm.addClass("sapUiVkMapContainerOverlay");
		oRm.writeClasses();
		oRm.write(">");

		if (oControl.getShowNavbar()) {
			oRm.write("<div");
			oRm.addClass("sapUiVkMapContainerNavbarArea");
			oRm.writeClasses();
			oRm.write(">");

			// navbar
			if (oControl.getShowMapLayer() && oControl._shouldRenderMapLayerSwitch) {
				oRm.renderControl(oControl._currentText);
				oRm.renderControl(oControl._selectionMap);
			}

			oRm.write("<div");
			oRm.addClass("sapUiVkMapContainerNavbarContainer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl._oNavbar);
			oRm.write("</div>");// end navbar
			oRm.write("</div>");// end navbar
		}

		// list panel
		if (!Device.system.phone && oControl._shouldRenderListPanel) {
			oControl._oScrollCont.addStyleClass("sapUiVkMapContainerListPanelArea");
			oRm.renderControl(oControl._oScrollCont);
		}

		BaseContainerRenderer.writeToolbarArea(oRm, oControl);

		oRm.write("</div>");// end map overlay

		if (Device.system.phone) {
			oRm.write("<div id=" + oControl.getId() + "-LPW");
			oRm.addClass("sapUiVkMapContainerLPW");
			oRm.writeClasses();
			oRm.write(">");
			// close button
			oRm.renderControl(oControl._oMenuCloseButton);
			// list panel
			oControl._oScrollCont.addStyleClass("sapUiVkMapContainerListPanelArea");
			oRm.renderControl(oControl._oScrollCont);
			oRm.write("</div>");// end list panel container
		}
	};

	return MapContainerRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/MapContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Messages') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides an exception class for DVL errors.
jQuery.sap.declare('sap.ui.vk.Messages'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Messages",[
	"jquery.sap.global", "sap/ui/base/ManagedObject"
], function(jQuery, ManagedObject) {
	"use strict";

	var Messages = {
		// NativeViepwort
		VIT1: {
			summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
			cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CAUSE",
			resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CHECKEXISTS_RESOLUTION",
			code: "VIT1"
		},
		VIT2: {
			summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
			cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CAUSE",
			resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_NOTFOUND_CHECKEXISTS_RESOLUTION",
			code: "VIT2"
		},
		VIT3: {
			summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
			cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CAUSE",
			resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CHECKFILEFORMAT_RESOLUTION",
			code: "VIT3"
		},
		VIT4: {
			summary: "NATIVEVIEWPORT_MSG_NOTBELOADED_SUMMARY",
			cause: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CAUSE",
			resolution: "NATIVEVIEWPORT_MSG_NOTBELOADED_UNSUPPORTEDFILEFORMAT_CHECKFILEFORMAT_RESOLUTION",
			code: "VIT4"
		},
		// DownloadManager
		VIT5: {
			summary: "DOWNLOADMANAGER_MSG_NOTBELOADED_SUMMARY",
			cause: "DOWNLOADMANAGER_MSG_NOTBELOADED_VALUESOURCEUNSUPPORTED_CAUSE",
			resolution: "DOWNLOADMANAGER_MSG_NOTBELOADED_VALUESOURCEUNSUPPORTED_CHECKSOURCEISURLORFILE_RESOLUTION",
			code: "VIT5"
		},
		// NodeHierarchy
		VIT6: {
			summary: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
			cause: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INVALIDQUERY_CAUSE",
			resolution: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INVALIDQUERY_SPECIFYVALUEPROPERTY_RESOLUTION",
			code: "VIT6"
		},
		VIT7: {
			summary: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
			cause: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_PREDICATENOTSPECIFIED_CAUSE",
			resolution: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_PREDICATENOTSPECIFIED_SPECIFYPREDICATE_RESOLUTION",
			code: "VIT7"
		},
		VIT8: {
			summary: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
			cause: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_CAUSE",
			resolution: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_INVALIDPREDICATE_RESOLUTION",
			code: "VIT8"
		},
		VIT9: {
			summary: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
			cause: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_CAUSE",
			resolution: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_INCORRECTPREDICATEVALUE_INVALIDPREDICATE_RESOLUTION",
			code: "VIT9"
		},
		VIT10: {
			summary: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_SUMMARY",
			cause: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_NOMETADATASPECIFIED_CAUSE",
			resolution: "NODEHIERARCHY_MSG_COULDNOTSEARCHNODES_NOMETADATASPECIFIED_SPECIFYMETADATACATEGORY_RESOLUTION",
			code: "VIT10"
		},
		// Overlay
		VIT11: {
			summary: "OVERLAY_MSG_EVENTHANDLERFAILED_SUMMARY",
			cause: "OVERLAY_MSG_EVENTHANDLERFAILED_UNSUPPORTEDEVENTTYPE_CAUSE",
			resolution: "OVERLAY_MSG_EVENTHANDLERFAILED_UNSUPPORTEDEVENTTYPE_CHECKEVENTTYPE_RESOLUTION",
			code: "VIT11"
		},
		// StepNavigation
		VIT12: {
			summary: "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_SUMMARY",
			cause: "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_INCORRECTSTEPEVENTTYPE_CAUSE",
			resolution: "STEPNAVIGATION_MSG_STEPCOULDNOTBEPLAYED_INCORRECTSTEPEVENTTYPE_CHECKSTEPEVENTTYPEVALUE_RESOLUTION",
			code: "VIT12"
		},
		// Viewer
		VIT13: {
			summary: "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_SUMMARY",
			cause: "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_NONEXISTINGORUNSUPPORTEDFILE_CAUSE",
			resolution: "VIEWER_MSG_CONTENTRESOURCESNOTLOADED_NONEXISTINGORUNSUPPORTEDFILE_CHECKFILEEXISTSANDIFSUPPORT_RESOLUTION",
			code: "VIT13"
		},
		VIT14: {
			summary: "VIEWER_MSG_FAILEDTOBUILDSCENE_SUMMARY",
			cause: "VIEWER_MSG_FAILEDTOBUILDSCENE_COULDNOTCREATESCENE_CAUSE",
			resolution: "VIEWER_MSG_FAILEDTOBUILDSCENE_COULDNOTCREATESCENE_RELOADORSELECTANOTHERFILE_RESOLUTION",
			code: "VIT14"
		},
		VIT15: {
			summary: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_SUMMARY",
			cause: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_LOADINGMULTIPLE2DNOTSUPPORTED_CAUSE",
			resolution: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_LOADINGMULTIPLE2DNOTSUPPORTED_LOADONE2D_RESOLUTION",
			code: "VIT15"
		},
		VIT16: {
			summary: "VIEWER_MSG_NOTBELOADED_SUMMARY",
			cause: "VIEWER_MSG_NOTBELOADED_NONATIVESUPPORT_CAUSE",
			resolution: "VIEWER_MSG_NOTBELOADED_NONATIVESUPPORT_CHECKFILEFORMATSUPPORT_RESOLUTION",
			code: "VIT16"
		},
		VIT17: {
			summary: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_SUMMARY",
			cause: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOF2D3DNOTSUPPORTED_CAUSE",
			resolution: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOF2D3DNOTSUPPORTED_MULTIPLESUPPORTFOR3DONLY_RESOLUTION",
			code: "VIT17"
		},
		// Viewport
		VIT18: {
			summary: "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_SUMMARY",
			cause: "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_CREATINGMULTIPLEVIEWPORTINSTANCES_CAUSE",
			resolution: "VIEWPORT_MSG_ERRORLOADINGVIEWPORT_CREATINGMULTIPLEVIEWPORTINSTANCES_ONEINSTANCEOFVIEWPORTSUPPORTED_RESOLUTION",
			code: "VIT18"
		},
		VIT19: {
			summary: "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SUMMARY",
			cause: "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SPECIFIEDCAMERAPROJECTIONNOTSUPPORTED_CAUSE",
			resolution: "VIEWPORT_MSG_COULDNOTSETCAMERAPROJECTION_SPECIFIEDCAMERAPROJECTIONNOTSUPPORTED_CHECKPROJECTIONTYPESUPPORTED_RESOLUTION",
			code: "VIT19"
		},
		VIT20: {
			summary: "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_SUMMARY",
			cause: "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_CAUSE",
			resolution: "DOWNLOADMANAGER_MSG_VDS4_BETA_WARNING_RESOLUTION",
			code: "VIT20"
		},
		// Viewer
		VIT21: {
			summary: "VIEWER_MSG_FAILEDTOBUILDSCENE_SUMMARY",
			cause: "VIEWER_MSG_FAILEDTOBUILDSCENE_MISSINGPASSWORD_CAUSE",
			resolution: "VIEWER_MSG_FAILEDTOBUILDSCENE_MISSINGPASSWORD_PROVIDEPASSWORD_RESOLUTION",
			code: "VIT21"
		},
		// GraphicsCore
		VIT22: {
			summary: "GRAPHICSCORE_MSG_VDSL_NOFILEPROPERTY_SUMMARY",
			cause: "GRAPHICSCORE_MSG_VDSL_EMPTY_CAUSE",
			resolution: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_RESOLUTION",
			code: "VIT22"
		},
		VIT23: {
			summary: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_SUMMARY",
			cause: "GRAPHICSCORE_MSG_VDSL_WRONGFORMAT_CAUSE",
			resolution: "GRAPHICSCORE_MSG_VDSL_FIRSTLINE_WRONGFORMAT_RESOLUTION",
			code: "VIT23"
		},
		VIT24: {
			summary: "GRAPHICSCORE_MSG_VDSL_RELATIVE_IN_LOCAL_SUMMARY",
			cause: "GRAPHICSCORE_MSG_VDSL_WRONGFORMAT_CAUSE",
			resolution: "GRAPHICSCORE_MSG_VDSL_RELATIVE_IN_LOCAL_RESOLUTION",
			code: "VIT24"
		},
		VIT25: {
			summary: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_SUMMARY",
			cause: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_CAUSE",
			resolution: "GRAPHICSCORE_MSG_VDS3ENCRYPTED_RESOLUTION",
			code: "VIT25"
		},
		VIT26: {
			summary: "VIEWPORT_UNSUPPORTED_STEP_INDEX_SUMMARY",
			cause: "VIEWPORT_UNSUPPORTED_STEP_INDEX_CAUSE",
			resolution: "VIEWPORT_UNSUPPORTED_STEP_INDEX_RESOLUTION",
			code: "VIT26"
		},
		VIT27: {
			summary: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_SUMMARY",
			cause: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_CAUSE",
			resolution: "VIEWPORT_UNSUPPORTED_PROCEDURE_INDEX_RESOLUTION",
			code: "VIT27"
		},
		VIT28: {
			summary: "VIEWPORT_UNSUPPORTED_VISIBILITY_MODE_SUMMARY",
			cause: "VIEWPORT_UNSUPPORTED_VISIBILITY_MODE_CAUSE",
			resolution: "VIEWPORT_UNSUPPORTED_VISIBILITY_MODE_RESOLUTION",
			code: "VIT28"
		},
		VIT29: {
			summary: "VIEWER_RUNTIME_SETTINGS_NOT_CHANGEABLE_SUMMARY",
			cause: "VIEWER_RUNTIME_SETTINGS_NOT_CHANGEABLE_CAUSE",
			resolution: "VIEWER_RUNTIME_SETTINGS_NOT_CHANGEABLE_RESOLUTION",
			code: "VIT29"
		},
		VIT30: {
			summary: "VIEWER_WEBGLCONTEXTATTRIBUTES_NOT_CHANGEABLE_SUMMARY",
			cause: "VIEWER_WEBGLCONTEXTATTRIBUTES_NOT_CHANGEABLE_CAUSE",
			resolution: "VIEWER_WEBGLCONTEXTATTRIBUTES_NOT_CHANGEABLE_RESOLUTION",
			code: "VIT30"
		},
		VIT31: {
			summary: "VIEWPORT_UNSUPPORTED_RESET_OPTIONS_SUMMARY",
			cause: "VIEWPORT_UNSUPPORTED_RESET_OPTIONS_CAUSE",
			resolution: "VIEWPORT_UNSUPPORTED_RESET_OPTIONS_RESOLUTION",
			code: "VIT31"
		},
		VIT32: {
			summary: "VIEWPORT_UNSUPPORTED_VISIBILITY_TRACKING_SUMMARY",
			cause: "VIEWPORT_UNSUPPORTED_VISIBILITY_TRACKING_CAUSE",
			resolution: "VIEWPORT_UNSUPPORTED_VISIBILITY_TRACKING_RESOLUTION",
			code: "VIT32"
		},
		// Viewer
		VIT33: {
			summary: "VIEWER_SOURCE_FAILED_TO_DOWNLOAD_SUMMARY",
			cause: "VIEWER_SOURCE_FAILED_TO_DOWNLOAD_CAUSE",
			resolution: "VIEWER_SOURCE_FAILED_TO_DOWNLOAD_RESOLUTION",
			code: "VIT33"
		},
		VIT34: {
			summary: "VIEWER_SOURCE_FAILED_TO_LOAD_SUMMARY",
			cause: "VIEWER_SOURCE_FAILED_TO_LOAD_CAUSE",
			resolution: "VIEWER_SOURCE_FAILED_TO_LOAD_RESOLUTION",
			code: "VIT34"
		},
		VIT35: {
			summary: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_SUMMARY",
			cause: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOFDIFFRENTCONTENTMANAGERSNOTSUPPORTED_CAUSE",
			resolution: "VIEWER_MSG_ERRORLOADINGMULTIPLEFILES_COMBINATIONOFDIFFRENTCONTENTMANAGERSNOTSUPPORTED_MULTIPLESUPPORTFORSAMECONTENTMANAGER_RESOLUTION",
			code: "VIT35"
		},
		VIT36: {
			summary: "VIEWER_UNKNOWN_CONTENT_RESOURCE_TYPE_SUMMARY",
			cause: "VIEWER_UNKNOWN_CONTENT_RESOURCE_TYPE_CAUSE",
			resolution: "VIEWER_UNKNOWN_CONTENT_RESOURCE_TYPE_RESOLUTION",
			code: "VIT36"
		}
	};

	jQuery.sap.setObject("sap.ui.vk.Messages", Messages);

	return Messages;
});

}; // end of sap/ui/vk/Messages.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.NativeViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 */
	var NativeViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	NativeViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitNativeViewport");
		rm.writeClasses();
		rm.writeAttribute("tabindex", 0);
		rm.write(">");
		rm.write("</div>");

	};

	return NativeViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/NativeViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeHierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeHierarchy class.
jQuery.sap.declare('sap.ui.vk.NodeHierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeHierarchy",[
	"jquery.sap.global", "sap/ui/base/ManagedObject", "./Messages"
], function(jQuery, ManagedObject, Messages) {
	"use strict";

	/**
	 * Constructor for a new NodeHierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to
	 * {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
	 *
	 * @class
	 * Provides the ability to explore a Scene object's node structure.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to
	 * {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
	 *
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.NodeHierarchy
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeHierarchy = ManagedObject.extend("sap.ui.vk.NodeHierarchy", /** @lends sap.ui.vk.NodeHierarchy.prototype */ {
		metadata: {
			"abstract": true,

			events: {
				/**
				 * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
				 */
				changed: {},

				/**
				 * This event will be fired when a new node is created.
				 */
				nodeCreated: {
					parameters: {
						nodeRef: {
							type: "any"
						},
						nodeId: {
							type: "string"
						}
					}
				},

				/**
				 * This event will be fired when a node is about to be removed.
				 */
				nodeRemoving: {
					parameters: {
						nodeRef: {
							type: "any"
						},
						nodeId: {
							type: "string"
						}
					}
				}
			}
		}
	});

	/**
	 * Gets the scene reference that this NodeHierarchy object wraps.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getSceneRef
	 *
	 * @returns {any} The scene reference that this NodeHierarchy object wraps.
	 * @public
	 */

	/**
	 * Gets the Scene object the node hierarchy belongs to.
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getScene
	 * @returns {sap.ui.vk.Scene} The Scene object the node hierarchy belongs to.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Enumerates the child nodes of a particular node in the Scene object.
	 *
	 * This method gets the child nodes of a particular node, and then calls the <code>callback</code> function to which it passes the child nodes to one by one.<br/>
	 * The <code>BaseNodeProxy</code> objects passed to the <code>callback</code> fuction are temporary objects, which are reset after each call to the <code>callback</code> function.<br/>
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#enumerateChildren
	 *
	 * @param {any} [nodeRef] The reference object of a node whose child nodes we want enumerated.<br/>
	 * When <code>nodeRef</code> is specified, the child nodes of this node are enumerated.<br/>
	 * When no <code>nodeRef</code> is specified, only the top level nodes are enumerated.<br/>

	 * @param {function} callback A function to call when the child nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	 * @param {boolean} [stepIntoClosedNodes=false] Indicates whether to enumerate the child nodes if the node is <i>closed</i>. <br/>
	 * If <code>true</code>, the children of that closed node will be enumerated <br/>
	 * If <code>false</code>, the children of that node will not be enumerated<br/>

	 * @param {boolean} [passNodeRef=false] Indicates whether to pass the reference objects of the child nodes, or the whole node proxy to the <code>callback</code> function. <br/>
	 * If <code>true</code>, then only the reference objects of the child nodes are passed to the <code>callback</code> function. <br/>
	 * If <code>false</code>, then the node proxies created from the child reference objects are passed to the <code>callback</code> function.

	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Enumerates the ancestor nodes of a particular node in the Scene object.
	 *
	 * This method enumerates the ancestor nodes of a particular node, and then calls the <code>callback</code> function, to which it passes the ancestor nodes to one by one.<br/>
	 * The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, they are reset after each call to the <code>callback</code> function.<br/>
	 * The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#enumerateAncestors
	 *
	 * @param {any} nodeRef The reference object of a node whose ancestore nodes we want enumerated.

	 * @param {function} callback A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	 * @param {boolean} [passNodeRef=false] Indicates whether to pass the reference objects of the ancestore nodes, or the whole node proxy to the <code>callback</code> function.<br/>
	                                     If <code>true</code>, then only the reference objects of the ancestor nodes are passed to the <code>callback</code> function. <br/>
	                                     If <code>false</code>, then the node proxies of the ancestor nodes are passed to the <code>callback</code> function.

	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Creates a node proxy object.
	 *
	 * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#createNodeProxy
	 *
	 * @param {any} nodeRef The reference object for which to create a proxy object.
	 * @returns {sap.ui.vk.NodeProxy} The proxy object.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Destroys the node proxy object.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#destroyNodeProxy
	 *
	 * @param {sap.ui.vk.NodeProxy} nodeProxy The node proxy object.
	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Returns a list of reference objects belonging to the children of a particular node.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getChildren
	 *
	 * @param {any} nodeRef The reference object of the node whose children will be returned. If <code>nodeRef</code> is not passed to the <code>getChildren</code> function, the reference objects of the root nodes will be returned.
	 * @param {boolean} [stepIntoClosedNodes=false] Indicates whether to return only the child nodes of a <i>closed</i> node or not. If <code>true</code>, then the children of that closed node  will be returned. If <code>false</code>, then the children of that <i>closed</i> node will not be returned.
	 * @returns {any[]} A list of reference objects belonging to the children of <code>nodeRef</code>.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Returns a list of reference objects belonging to the ancestors of a particular node.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getAncestors
	 *
	 * @param {any} nodeRef The reference object of the node whose ancestors will be returned.
	 * @returns {any[]} A list of reference objects belonging to the ancestors of <code>nodeRef</code>.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Searches for VE IDs, and returns a list of reference objects of nodes with VE IDs matching the search.
	 * The query is run specifically against VE ID structures, which are strictly related to VDS4 models.
	 *
	 * @param {object} query JSON object containing the search parameters. <br/>
	 * The following example shows what the structure of the <code>query</code> object should look like:
	 * <pre>query = {
	 * 	source: <i>string</i> (if not specified, the query returns an empty array), <br>
	 * 	type: <i>string</i> (if not specified, the query returns an empty array), <br>
	 * 	fields: <i>field[]</i>
	 * 	}</pre>
	 * 	<br/>
	 * 	<ul>
	 * 		<li>
	 * 			<b>field.name</b><br/> A string containing the name of the VE ID.
	 * 			If no value is specified, then the query will return an empty array.<br/>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.value</b><br/> A string representing the search keyword.
	 * 			If no value is specified, it defaults to empty string.<br/>
	 * 			The following example shows a string being passed in:
	 * 			<pre>value: "Box #14"</pre>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.predicate</b><br/> Represents a search mode.
	 * 			The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	 * 			Using <code>"equals"</code> will search for IDs with names that exactly match the provided string. <br/>
	 * 			Using <code>"contains"</code> will search for IDs with names containing the provided string. <br/>
	 * 			Using <code>"startsWith"</code> will search for IDs with names starting with the provided string. <br/>
	 * 			If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	 * 		</li>
	 * 		<li>
	 * 			<b>field.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	 * 			If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	 * 			If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	 * 		</li>
	 * 	</ul>
	 * @returns {any[]} A list of reference objects belonging to nodes that matched the VE IDs search criteria.
	 * @public
	 * @since 1.50.0
	 */
	NodeHierarchy.prototype.findNodesById = function(query) {

		// Checking if the query id values should be case sensitive or not.
		// If they are not case sensitive, we make them all lower-case.
		if (query.fields.some(function(field) { return !field.caseSensitive; })) {
			// we clone the query object that gets passed as parameter so we don't modify the original one.
			query = jQuery.extend(true, {}, query);
			// we change all the search values to lower-case.
			query.fields.forEach(function(field) {
				if (!field.caseSensitive) {
					field.value = field.value.toLowerCase();
				}
			});
		}

		// compareValuesByPredicate compares query value for an id with the value of a ve id from the node.
		// This function compares them using the predicate from the query (equals, contains, startsWith)
		var compareValuesByPredicate = function(predicate, isCaseSensitive, veFieldValueString, queryFieldValue) {
			var matchFound;
			// if the predicate is undefined, it will default to "equals"
			predicate = predicate || "equals";
			// if the query value is undefined, we make it an empty string
			queryFieldValue = queryFieldValue || "";

			var veFieldValue = isCaseSensitive ? veFieldValueString : veFieldValueString.toLowerCase();

			switch (predicate) {
				case "equals":
					matchFound = (veFieldValue === queryFieldValue);
					break;
				case "contains":
					matchFound = (veFieldValue.indexOf(queryFieldValue) !== -1);
					break;
				case "startsWith":
					matchFound = (veFieldValue.indexOf(queryFieldValue) === 0);
					break;
				default:
					matchFound = false;
					// if the predicate is not a supported one, we show a relevant error in the console
					jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT8.summary), Messages.VIT8.code, "sap.ui.vk.dvl.NodeHierarchy");
			}
			return matchFound;
		};
		// Queries can have multiple ids in the array so we use this function to search in array of ids
		// and see if the id is missing from that list or not.
		var isQueryIdObjectMissingFromArrayOfIds = function(listOfFields, queryFieldObject) {
			return !listOfFields.some(function(veFieldObject) {
				return queryFieldObject.name === veFieldObject.name ? compareValuesByPredicate(queryFieldObject.predicate, queryFieldObject.caseSensitive, veFieldObject.value, queryFieldObject.value) : false;
			});
		};

		// The filtering function takes the query and the collection of ve ids as parameters.
		// This function throws away all the nodes that are missing query ids from their list of ve ids.
		var filteringFunction = function(query, veIds) {
			// First we check if the query source and the query type are matching.
			// Then we check if all ids from the query are found in the list of ids that each node has.
			// If at least one id is missing, that we don't need to keep that node
			// because it doesn't match the query.
			return query.source === veIds.source && query.type === veIds.type && !query.fields.some(isQueryIdObjectMissingFromArrayOfIds.bind(undefined, veIds.fields));
		};

		// We retrieve a list of all node reference objects.
		var allNodeRefs = this.findNodesByName();

		// We filter the list of reference objects and we keep only what matches the query.
		var filteredNodeRefs = allNodeRefs.filter(function(nodeRef) {
			// We create a node proxy based on each node reference.
			var nodeProxy = this.createNodeProxy(nodeRef);
			// We retrieve the ve ids from each node proxy.
			var veIds = nodeProxy.getVeIds();
			// we destroy the node proxy after using it.
			this.destroyNodeProxy(nodeProxy);
			// we filter then return the nodes that match the query.
			return veIds.some(filteringFunction.bind(undefined, query));
		}.bind(this));

		return filteredNodeRefs;
	};

	/**
	 * Finds nodes in a scene via node name.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#findNodesByName
	 *
	 * @param {object} query JSON object containing the search parameters. <br/>
	 * The following example shows what the structure of the <code>query</code> object should look like:
	 * <pre>query = {
	 * 	value: <i>string</i> | <i>string[]</i>,
	 * 	predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	 * 	caseSensitive: <i>true</i> | <i>false</i>
	 * }</pre>
	 * <br/>
	 * <ul>
	 * 	<li>
	 * 		<b>query.value</b><br/> A string or an array of strings containing the name of a node or names of nodes.
	 * 		If no value is specified, then all nodes in the scene will be returned.<br/>
	 * 		The following example shows a single string being passed in:
	 * 		<pre>value: "Box #14"</pre>
	 * 		The following example shows an array of strings being passed in:
	 * 		<pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	 * 	</li>
	 * 	<li>
	 * 		<b>query.predicate</b><br/> Represents a search mode.
	 * 		The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	 * 		Using <code>"equals"</code> will search for nodes with names that exactly match the provided string or array of strings. <br/>
	 * 		Using <code>"contains"</code> will search for nodes with names containing all or part of the provided string or array of strings. <br/>
	 * 		Using <code>"startsWith"</code> will search for nodes with names starting with the provided string or array of strings. <br/>
	 * 		If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	 * 	</li>
	 * 	<li>
	 * 		<b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	 * 		If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	 * 		If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	 * 	</li>
	 * </ul>
	 * @returns {any[]} A list of reference objects belonging to nodes that matched the search criteria.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Finds nodes in a scene via metadata information.
	 *
	 * @param {object} query JSON object containing the search parameters. <br/>
	 * The following example shows what the structure of the <code>query</code> object should look like:
	 * <pre>query = {
	 *   category: <i>string</i>,
	 *   key: <i>string</i>,
	 *   value: <i>string</i> | <i>string[]</i>,
	 *   predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	 *   caseSensitive: <i>true</i> | <i>false</i>
	 * }</pre>
	 * <br>
	 * <i>NOTE: <code>query.predicate</code> and <code>query.caseSensitive</code> refer to <code>query.value</code>.</i>
	 * <br/>
	 * <ul>
	 *   <li>
	 *     <b>query.category</b><br/>
	 *     A string indicating the name of the metadata category.<br/>
	 *     If no value is specified for <code>query.category</code>, all nodes in the scene will be returned in the search.<br/><br/>
	 *   </li>
	 *   <li>
	 *     <b>query.key</b><br/>
	 *     A string indicating the key which belongs to the metadata category specified in <code>query.category</code>.
	 *     You can only use <code>query.key</code> if <code>query.category</code> has been specified.<br/>
	 *     If no value is specified for <code>query.key</code>, then all nodes grouped under the specified category will be returned in the search.<br/><br/>
	 *   </li>
	 *   <li>
	 *     <b>query.value</b><br/>
	 *     A string or an array of strings containing the value or values associated with <code>query.key</code>.
	 *     You can only use <code>query.value</code> in the search if <code>query.key</code> has been specified.<br/>
	 *     If no value is specified for <code>query.value</code>, then all nodes containing the specified key will be returned, regardless of what the value of the key is.<br/>
	 *     The following example shows a single string being passed in:
	 *     <pre>value: "Box #14"</pre>
	 *     The following example shows an array of strings being passed in:
	 *     <pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	 *   </li>
	 *   <li>
	 *     <b>query.predicate</b><br/>
	 *     Represents a search mode.
	 *     The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	 *     Using <code>"equals"</code> will search for key values that exactly match the provided string or array of strings. <br/>
	 *     Using <code>"contains"</code> will search for key values containing all or part of the provided string or array of strings. <br/>
	 *     Using <code>"startsWith"</code> will search key values starting with the provided string or array of strings. <br/>
	 *     If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	 *   </li>
	 *   <li>
	 *     <b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	 *     If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	 *     If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	 *   </li>
	 * </ul>
	 * @returns {any[]} A list of reference objects belonging to nodes that matched the search criteria.
	 * @public
	 * @since 1.50.0
	 */
	NodeHierarchy.prototype.findNodesByMetadata = function(query) {

		// checkMetadataByPredicate is used for filtering all nodes
		// so we can keep only the ones that match the query.
		var checkMetadataByPredicate = function(metadata, category, key, values, predicate, caseSensitive) {
			if (metadata.hasOwnProperty(category)) {
				var metadataCategory = metadata[category];
				if (metadataCategory.hasOwnProperty(key)) {
					var metadataValue = metadataCategory[key];
					if (!caseSensitive) {
						metadataValue = metadataValue.toLowerCase();
					}
					return values.some(predicate.bind(undefined, metadataValue));
				}
			}
			return false;
		};

		// checkMetadataByCategory looks inside the node to see
		// if it contains the category we are querying on.
		var checkMetadataByCategory = function(metadata, category) {
			return metadata.hasOwnProperty(category);
		};

		// getFilteredResults filters the entire list of nodes
		// and returns only what matches the query.
		var getFilteredResults = function(allNodeRefs, filteringFunction, category, key, values, predicate, caseSensitive) {
			// We get all nodes, get metadata from each node and manually filter it against the query.
			// initialize empty baseNodeProxy
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			// filter the whole node collection so we can keep only the nodes that match the query
			var result = allNodeRefs.filter(function(nodeRef) {
				// get the node with the current id
				nodeProxy.init(this, nodeRef);
				// extract metadata from node
				var metadata = nodeProxy.getNodeMetadata();
				// check if the metadata matches the query
				var keepThisNode = filteringFunction(metadata, category, key, values, predicate, caseSensitive);
				// clear the data from the base node proxy
				nodeProxy.reset();
				// filter the current node
				return keepThisNode;
			}.bind(this));
			this._baseNodeProxyPool.returnObject(nodeProxy);
			return result;
		};

		// Get all nodes as a start point.
		var allNodeRefs = this.findNodesByName(),
		    result = [];

		if (query === undefined || query === null || jQuery.isEmptyObject(query)) {
			// If the query object is empty, we return a list of all nodes.
			result = allNodeRefs;
		} else if (query.category !== null && query.category !== undefined && query.category !== "") {
			var filteringFunction,
			    values,
			    predicateName,
			    predicate,
			    caseSensitive = !!(query && query.caseSensitive);
			// We determine what filtering type to use.
			// Filtering by category only as opposed to filtering by category and key-value pairs.
			if (query.key === undefined || query.key === null) {
				// If we specify the category, but not the key-value pairs,
				// we return all nodes that have that particular category.
				filteringFunction = checkMetadataByCategory;
			} else {
				// If the category and the key are specified, but the value is omitted,
				// it is expected that we return a list of all nodes containing that category
				// and that key, no matter what the value for the key is. That's why we set the
				// value to empty string and predicate to "contains".
				values = query.value;
				predicateName = query.predicate || "equals";
				if (values === undefined || values === null) {
					values = "";
					predicateName = "contains";
				}
				// If the category and the key-value pair are specified,
				// we return the nodes that match this criteria.
				if (!Array.isArray(values)) {
					values = [ values ];
				}
				if (!caseSensitive) {
					values = values.map(function(value) {
						return value.toLowerCase();
					});
				}
				switch (predicateName) {
					case "equals":
						predicate = function(metadataValue, queryValue) {
							return metadataValue === queryValue;
						};
						break;
					case "contains":
						predicate = function(metadataValue, queryValue) {
							return metadataValue.indexOf(queryValue) !== -1;
						};
						break;
					case "startsWith":
						predicate = function(metadataValue, queryValue) {
							return metadataValue.indexOf(queryValue) === 0;
						};
						break;
					default:
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT9.summary), Messages.VIT9.code, "sap.ui.vk.dvl.NodeHierarchy");
				}
				filteringFunction = checkMetadataByPredicate;
			}
			// After determining what filtering function we use,
			// we pass it as an argument to getFilteredResults.
			result = getFilteredResults.bind(this)(allNodeRefs, filteringFunction, query.category, query.key, values, predicate, caseSensitive);
		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT10.summary), Messages.VIT10.code, "sap.ui.vk.dvl.NodeHierarchy");
		}
		return jQuery.sap.unique(result);
	};

	/**
	 * Creates a layer proxy object.
	 *
	 * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#createLayerProxy
	 *
	 * @param {string} layerId The layer ID for which to create a proxy object.
	 * @returns {sap.ui.vk.LayerProxy} The proxy object.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Destroys the layer proxy object.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#destroyLayerProxy
	 *
	 * @param {sap.ui.vk.LayerProxy} layerProxy The layer proxy object.
	 * @returns {sap.ui.vk.LayerProxy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Returns a list of layer IDs.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getLayers
	 *
	 * @returns {string[]} A list of layer IDs.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Returns a list of hotspot IDs.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#getHotspotNodeIds
	 *
	 * @returns {string[]} A list of hotspot IDs.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Creates a new node.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#createNode
	 *
	 * @param {any} parentNode       The reference object of the parent node where the created node is added to. If equals <code>null</code> the newly
	 *                               created node is a top level node.
	 * @param {string} name          The name of the new node.
	 * @param {any} insertBeforeNode The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                               node is added at the end of the parent's list of nodes.
	 * @returns {any} The reference object of the newly created node.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Creates a copy of an existing node.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#createNodeCopy
	 *
	 * @param {any} nodeToCopy       The reference object of the node to copy.
	 * @param {any} parentNode       The reference object of the parent node where the created node is added to. If equals <code>null</code> the newly
	 *                               created node is a top level node.
	 * @param {string} name          The name of the new node.
	 * @param {any} insertBeforeNode The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                               node is added at the end of the parent's list of nodes.
	 * @returns {any} The reference object of the newly created node.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Deletes a node and destroys it.
	 *
	 * @function
	 * @name sap.ui.vk.NodeHierarchy#removeNode
	 *
	 * @param {any} nodeRef The reference object of the node to destroy.
	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	return NodeHierarchy;
});

}; // end of sap/ui/vk/NodeHierarchy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NotificationsRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.NotificationsRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NotificationsRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Notifications renderer.
	 * @namespace
	 */
	var NotificationsRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	NotificationsRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitNotifications");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(control.getAggregation("_messagePopoverToggleButton"));
		rm.write("</div>");

	};

	return NotificationsRenderer;

}, true);

}; // end of sap/ui/vk/NotificationsRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.OverlayRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/OverlayRenderer",function() {
	"use strict";

	/**
	 * @class Overlay renderer.
	 * @static
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var OverlayRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	OverlayRenderer.render = function(oRm, oControl) {
		// console.log( "sap.ui.vk.OverlayRenderer.render.....\r\n");

		// write the HTML into the render manager
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiVkOverlay");
		oRm.writeClasses(oControl);
		oRm.write(">"); // span element
		oRm.write("</div>");

		// update bound data......................................................//
		var oApp;
		if ((oApp = oControl._update())) {
			oControl._load(oApp);
		}
	};

	return OverlayRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/OverlayRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.vk.ProgressIndicatorRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ProgressIndicatorRenderer'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ProgressIndicatorRenderer",[ "jquery.sap.global", "sap/m/ProgressIndicatorRenderer" ],
	function(jQuery, ProgressIndicatorRenderer) {
		"use strict";

		/**
		 * ProgressIndicator renderer.
		 * @namespace
		 */
		return ProgressIndicatorRenderer;

	}, /* bExport= */ true);

}; // end of sap/ui/vk/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineDesignHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.RedlineDesignHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineDesignHandler",[
		"jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
	], function(jQuery, EventProvider, ResizeHandler) {
		"use strict";

		var RedlineDesignHandler = EventProvider.extend("RedlineDesignHandler", {
			metadata: {
				publicMethods: [
					"beginGesture",
					"move",
					"endGesture",
					"click",
					"doubleClick",
					"contextMenu",
					"getViewport"
				]
			},
			constructor: function(redlineDesignInstance) {
				this._redlineDesign = redlineDesignInstance;

				this._x = 0;
				this._y = 0;
				this._gesture = false;
			}
		});

		RedlineDesignHandler.prototype.destroy = function() {
			this._redlineDesign = null;
			this._rect = null;
			this._gesture = false;
		};

		RedlineDesignHandler.prototype._getOffset = function(domRef) {
			var rectangle = domRef.getBoundingClientRect();
			return {
				x: rectangle.left + window.pageXOffset,
				y: rectangle.top + window.pageYOffset
			};
		};

		RedlineDesignHandler.prototype._inside = function(event, redlineDesignInstance) {

			var redlineDesignDomRef = redlineDesignInstance.getDomRef(),
				isInside = false;

			if (redlineDesignDomRef !== null) {
				var redlineControlOffset = this._getOffset(redlineDesignDomRef);
				var redlineControlInfo = {
					x: redlineControlOffset.x,
					y: redlineControlOffset.y,
					width: redlineDesignDomRef.getBoundingClientRect().width,
					height: redlineDesignDomRef.getBoundingClientRect().height
				};
				isInside = (event.x >= redlineControlInfo.x && event.x <= redlineControlInfo.x + redlineControlInfo.width && event.y >= redlineControlInfo.y && event.y <= redlineControlInfo.y + redlineControlInfo.height);
			}
			return isInside;
		};

		RedlineDesignHandler.prototype._onresize = function(event) {
			this._gesture = false;
			//			this._rect = null;
		};

		/**
		 * Gesture handler to handle <i>beginGesture</i> while in redline drawing mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineDesignHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineDesignHandler.prototype.beginGesture = function(event) {
			var viewport = this.getViewport();
			if (this._inside(event, viewport) && viewport._activeElementInstance) {
				this._gesture = true;
				this._x = event.x;
				this._y = event.y;

				// activate drawing mode
				viewport._setIsDrawingOn(true);

				var domRef = viewport.getDomRef();

				// create element based on the current settings
				var translatedCoordinates = viewport._toVirtualSpace(event.x - domRef.getBoundingClientRect().left - window.pageXOffset, event.y - domRef.getBoundingClientRect().top - window.pageYOffset);
				viewport._activeElementInstance.setOriginX(translatedCoordinates.x);
				viewport._activeElementInstance.setOriginY(translatedCoordinates.y);

				// If the browser is Internet Explorer, we simply invalidate the Redline control.
				// Else, we do a manual workaround which is necessary for iPad compatibility and performance reasons.
				if (sap.ui.Device.browser.msie || sap.ui.Device.browser.edge) {
					viewport.invalidate();
				} else {
					// getting a new instance of RenderManager
					var renderManager = sap.ui.getCore().createRenderManager();
					// manually rendering the active element instance
					viewport._activeElementInstance.render(renderManager);

					// flushing the drawing surface
					renderManager.flush(viewport.getDomRef(), false, true);
					renderManager.destroy();

					// This is workaround for an issue caused by the fact that browsers can't
					// work with innerHTML for svg elements. There is a discussion on this topic here:
					// http://stackoverflow.com/a/13654655/3935427
					var x = viewport.$();
					x.html(x.html());
				}

				event.handled = true;
			}
			return this;
		};

		/**
		 * Gesture handler to handle <i>move</i> while in redline drawing mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineDesignHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineDesignHandler.prototype.move = function(event) {
			var viewport = this.getViewport();
			// if the mouse is moved while the drawing is on, we change the current element.
			// e.g: resize the rectangle, draw line while in freehand mode etc.
			if (viewport._activeElementInstance && viewport._getIsDrawingOn()) {
				var boundingClientRect = viewport.getDomRef().getBoundingClientRect(),
					offsetX = event.x - boundingClientRect.left - window.pageXOffset,
					offsetY = event.y - boundingClientRect.top - window.pageYOffset;

				viewport._editElement(viewport._activeElementInstance, offsetX, offsetY);
			}
			event.handled = true;
			return this;
		};

		/**
		 * Gesture handler to handle <i>endGesture</i> while in redline drawing mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineDesignHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineDesignHandler.prototype.endGesture = function(event) {
			var viewport = this.getViewport();
			this._gesture = false;
			if (viewport._activeElementInstance) {

				viewport.addRedlineElement(viewport._activeElementInstance);

				// fire an event containting the current element
				viewport.fireElementCreated({
					element: viewport._activeElementInstance
				});

				// deactivate drawing mode
				viewport.stopAdding();
			}
			return this;
		};

		RedlineDesignHandler.prototype.click = function(event) {

		};

		RedlineDesignHandler.prototype.doubleClick = function(event) {

		};

		RedlineDesignHandler.prototype.contextMenu = function(event) {
			event.handled = true;
		};

		RedlineDesignHandler.prototype.getViewport = function() {
			return this._redlineDesign;
		};

		return RedlineDesignHandler;
	}, /* bExport= */
	true);

}; // end of sap/ui/vk/RedlineDesignHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineElement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides a class for the redlining elements.
jQuery.sap.declare('sap.ui.vk.RedlineElement'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineElement",[
	"jquery.sap.global", "sap/ui/core/Element"
], function(jQuery, Element) {
	"use strict";
		/**
		 * Base class for redline elements such as {sap.ui.vk.RedlinElementRectangle}, {sap.ui.vk.RedlinElementEllipse}, {sap.ui.vk.RedlinElementFreehand}.
		 *
		 * @class Provides a base class for redline elements.
		 *
		 * @public
		 * @author SAP SE
		 * @version 1.50.7
		 * @extends sap.ui.core.Element
		 * @alias sap.ui.vk.RedlineElement
		 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
		 */

	var RedlineElement = Element.extend("sap.ui.vk.RedlineElement", {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				originX: {
					type: "float",
					defaultValue: 0
				},
				originY: {
					type: "float",
					defaultValue: 0
				},
				opacity: {
					type: "float",
					defaultValue: 1
				},
				strokeWidth: {
					type: "float",
					defaultValue: 2
				},
				strokeColor: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "#e6600d"
				}
			}
		}
	});

	RedlineElement.prototype.init = function() {

	};

	RedlineElement.prototype.onAfterRendering = function() {

	};

	RedlineElement.prototype.setOriginX = function(originX) {
		this.setProperty("originX", originX, true);
	};

	RedlineElement.prototype.setOriginY = function(originY) {
		this.setProperty("originY", originY, true);
	};

	RedlineElement.prototype.applyZoom = function() {

	};

	/**
	 * This method is called by the RenderManager. The current method is empty because this is a base class
	 * and the classes extending this class have their own implementations of the <code>render</code> method.
	 * @param { sap.ui.core.RenderManager} renderManager Instance of RenderManager.
	 * @public
	 */
	RedlineElement.prototype.render = function(renderManager) {

	};

	/**
	 * Exports all the relevant data contained in the redline element to a JSON-like object.
	 * @returns {object} JSON Relevant data that can be serialized and later used to restore the redline element.
	 * @public
	 */
	RedlineElement.prototype.exportJSON = function() {
		return {
			originX: this.getOriginX(),
			originY: this.getOriginY(),
			opacity: this.getOpacity(),
			strokeColor: this.getStrokeColor(),
			strokeWidth: this.getStrokeWidth()
		};
	};

	/**
	 * Imports data from a JSON-like object into the redline element.
	 * @param {object} json Relevant data that can be used to restore the redline element.
	 * @returns {sap.ui.vk.RedlineElement} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElement.prototype.importJSON = function(json) {

		if (json.hasOwnProperty("originX")) {
			this.setOriginX(json.originX);
		}

		if (json.hasOwnProperty("originY")) {
			this.setOriginY(json.originY);
		}

		if (json.hasOwnProperty("opacity")) {
			this.setOpacity(json.opacity);
		}

		if (json.hasOwnProperty("strokeColor")) {
			this.setStrokeColor(json.strokeColor);
		}

		if (json.hasOwnProperty("strokeWidth")) {
			this.setStrokeWidth(json.strokeWidth);
		}

		return this;
	};

	return RedlineElement;
});

}; // end of sap/ui/vk/RedlineElement.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineElementEllipse') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides a class for the redlining ellipse elements.
jQuery.sap.declare('sap.ui.vk.RedlineElementEllipse'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineElementEllipse",[
	"jquery.sap.global", "./RedlineElement"
], function(jQuery, RedlineElement) {
	"use strict";

	/**
	 * Redline element control for ellipse.
	 *
	 * @class Provides a control for creating ellipse redline elements.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.RedlineElement
	 * @alias sap.ui.vk.RedlineElementEllipse
	 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
	 */

	var RedlineElementEllipse = RedlineElement.extend("sap.ui.vk.RedlineElementEllipse", {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				radiusX: {
					type: "float",
					defaultValue: 0.0001
				},
				radiusY: {
					type: "float",
					defaultValue: 0.0001
				},
				fillColor: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(0, 0, 0, 0)"
				}
			}
		}
	});

	RedlineElementEllipse.prototype.init = function() {

	};

	/**
	 * Changes the current radiusX and radiusY of the ellipse redline element with the values passed as parameters.
	 * @param {number} offsetX The value in pixels that will be set as radiusX for the ellipse.
	 * @param {number} offsetY The value in pixels that will be set as radiusY for the ellipse.
	 * @returns {sap.ui.vk.RedlineElementEllipse} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementEllipse.prototype.edit = function(offsetX, offsetY) {
		var parent = this.getParent(),
			translated = parent._toVirtualSpace(offsetX, offsetY),
			radiusX = translated.x - this.getOriginX(),
			radiusY = translated.y - this.getOriginY(),
			onePixelSize = parent._toVirtualSpace(1);

		this.setRadiusX(radiusX > 0 ? radiusX : onePixelSize);
		this.setRadiusY(radiusY > 0 ? radiusY : onePixelSize);
		return this;
	};

	/**
	 * Changes the current radiusX and radiusY of the ellipse redline element by a factor which gets passed as parameter.
	 * @param {number} zoomBy The factor to be applied to the current radiusX and radiusY.
	 * @returns {sap.ui.vk.RedlineElementEllipse} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementEllipse.prototype.applyZoom = function(zoomBy) {
		this.setProperty("radiusX", this.getRadiusX() * zoomBy, true);
		this.setProperty("radiusY", this.getRadiusY() * zoomBy, true);
		return this;
	};

	RedlineElementEllipse.prototype.setRadiusX = function(radiusX) {
		this.setProperty("radiusX", radiusX, true);
		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("rx", this.getParent()._toPixelSpace(radiusX));
		}
	};

	RedlineElementEllipse.prototype.setRadiusY = function(radiusY) {
		this.setProperty("radiusY", radiusY, true);
		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("ry", this.getParent()._toPixelSpace(radiusY));
		}
	};

	/**
	 * Creates and renders the DOM element.
	 * @param {sap.ui.core.RenderManager} renderManager Instance of RenderManager.
	 * @public
	 */
	RedlineElementEllipse.prototype.render = function(renderManager) {

		var parent = this.getParent();

		renderManager.write("<ellipse");
		renderManager.writeElementData(this);
		var origin = parent._toPixelSpace(this.getOriginX(), this.getOriginY());
		renderManager.writeAttribute("cx", origin.x);
		renderManager.writeAttribute("cy", origin.y);
		renderManager.writeAttribute("rx", parent._toPixelSpace(this.getRadiusX()));
		renderManager.writeAttribute("ry", parent._toPixelSpace(this.getRadiusY()));
		renderManager.writeAttribute("fill", this.getFillColor());
		renderManager.writeAttribute("stroke", this.getStrokeColor());
		renderManager.writeAttribute("stroke-width", this.getStrokeWidth());
		renderManager.writeAttribute("opacity", this.getOpacity());
		renderManager.write("></ellipse>");

	};

	/**
	 * Exports all the relevant data contained in the ellipse redline element to a JSON object.
	 * @returns {object} Data that can be serialized and later used to restore the ellipse redline element.
	 * @public
	 */
	RedlineElementEllipse.prototype.exportJSON = function() {

		return jQuery.extend(true, RedlineElement.prototype.exportJSON.call(this), {
			type: sap.ui.vk.Redline.ElementType.Ellipse,
			version: 1,
			radiusX: this.getRadiusX(),
			radiusY: this.getRadiusY(),
			fillColor: this.getFillColor()
		});
	};

	/**
	 * Imports data from a JSON object into the ellipse redline element.
	 * @param {object} json Relevant data used to restore the ellipse redline element.
	 * @returns {sap.ui.vk.RedlineElementEllipse} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementEllipse.prototype.importJSON = function(json) {
		if (json.type === sap.ui.vk.Redline.ElementType.Ellipse) {
			if (json.version === 1) {

				RedlineElement.prototype.importJSON.call(this, json);

				if (json.hasOwnProperty("radiusX")) {
					this.setRadiusX(json.radiusX);
				}

				if (json.hasOwnProperty("radiusY")) {
					this.setRadiusY(json.radiusY);
				}

				if (json.hasOwnProperty("fillColor")) {
					this.setFillColor(json.fillColor);
				}

			} else {
				// TO DO error version number
				jQuery.sap.log.error("wrong version number");
			}
		} else {
			// TO DO error element type
			jQuery.sap.log.error("wrong element type");
		}

		return this;
	};

	return RedlineElementEllipse;
});

}; // end of sap/ui/vk/RedlineElementEllipse.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineElementFreehand') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides a class for the redlining freehand elements.
jQuery.sap.declare('sap.ui.vk.RedlineElementFreehand'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineElementFreehand",[
	"jquery.sap.global", "./RedlineElement"
], function(jQuery, RedlineElement) {
	"use strict";

	/**
	 * Redline element control for freehand.
	 *
	 * @class Provides a control for creating freehand redline elements.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.RedlineElement
	 * @alias sap.ui.vk.RedlineElementFreehand
	 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
	 */

	var RedlineElementFreehand = RedlineElement.extend("sap.ui.vk.RedlineElementFreehand", {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				path: {
					type: "float[]",
					defaultValue: null
				}
			}
		}
	});

	RedlineElementFreehand.prototype.init = function() {

	};

	RedlineElementFreehand.prototype.setPath = function(path) {
		this.setProperty("path", path, true);
		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("d", this._getProcessedPath());
		}
	};

	/**
	 * Adds a new point to the current freehand path.
	 * @param {number} offsetX The value in pixels that will be set as the origin of the x-coordinate for a new point in the freehand path.
	 * @param {number} offsetY The value in pixels that will be set as the origin of the y-coordinate for a new point in the freehand path.
	 * @returns {sap.ui.vk.RedlineElementFreehand} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementFreehand.prototype.edit = function(offsetX, offsetY) {
		var parent = this.getParent();
		var translated = parent._toVirtualSpace(offsetX, offsetY);

		var currentPath = this.getPath() || [];
		currentPath.push(translated.x - this.getOriginX(), translated.y - this.getOriginY());
		this.setPath(currentPath);

		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("d", this._getProcessedPath());
		}
		return this;
	};

	/**
	 * Applies a zoom factor to the current freehand redline element.
	 * @param {number} zoomBy The factor to be applied to the current freehand drawing.
	 * @returns {sap.ui.vk.RedlineElementFreehand} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementFreehand.prototype.applyZoom = function(zoomBy) {
		this.setProperty("path", this.getPath().map(function(value) {
			return value * zoomBy;
		}), true);
		return this;
	};

	/**
	 * Creates a string path based on the current <code>path</code> property.
	 * The string path can then be used to set the "d" attribute of an SVG <path> element.
	 * @returns {string} String to be used as "d" attribute value for <path> element.
	 * @public
	 */
	RedlineElementFreehand.prototype._getProcessedPath = function() {
		var parent = this.getParent(),
			origin = parent._toPixelSpace(this.getOriginX(), this.getOriginY());

		var d = "";
		(this.getPath() || []).forEach(function(element, index) {
			element = parent._toPixelSpace(element);
			if (index === 0) {
				d += "M " + (origin.x + element);
			} else if (index === 1) {
				d += " " + (origin.y + element);
			} else {
				d += " " + (index % 2 === 0 ? "L " + (origin.x + element) : (origin.y + element));
			}
		});
		return d;
	};

	/**
	 * Creates and renders the DOM element.
	 * @param { sap.ui.core.RenderManager} renderManager Instance of RenderManager.
	 * @public
	 */
	RedlineElementFreehand.prototype.render = function(renderManager) {
		renderManager.write("<path");
		renderManager.writeElementData(this);
		renderManager.writeAttribute("d", this._getProcessedPath());
		renderManager.writeAttribute("stroke", this.getStrokeColor());
		renderManager.writeAttribute("stroke-width", this.getStrokeWidth());
		renderManager.writeAttribute("opacity", this.getOpacity());
		renderManager.writeAttribute("fill", "none");
		renderManager.write("></path>");
	};

	/**
	 * Exports all the relevant data contained in the freehand redline element to a JSON object.
	 * @returns {object} Data that can be serialized and later used to restore the freehand redline element.
	 * @public
	 */
	RedlineElementFreehand.prototype.exportJSON = function() {

		return jQuery.extend(true, RedlineElement.prototype.exportJSON.call(this), {
			type: sap.ui.vk.Redline.ElementType.Freehand,
			version: 1,
			path: (this.getPath() || []).slice()
		});
	};

	/**
	 * Imports data from JSON into the redline element.
	 * @param {object} json Relevant data that can be used to restore the freehand redline element.
	 * @returns {sap.ui.vk.RedlineElementFreehand} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementFreehand.prototype.importJSON = function(json) {
		if (json.type === sap.ui.vk.Redline.ElementType.Freehand) {
			if (json.version === 1) {

				RedlineElement.prototype.importJSON.call(this, json);

				if (json.hasOwnProperty("path")) {
					this.setPath(json.path.slice());
				}

			} else {
				// TO DO error version number
				jQuery.sap.log.error("wrong version number");
			}
		} else {
			// TO DO error element type
			jQuery.sap.log.error("wrong element type");
		}

		return this;
	};
	return RedlineElementFreehand;
});

}; // end of sap/ui/vk/RedlineElementFreehand.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineElementRectangle') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides a class for the redlining elements.
jQuery.sap.declare('sap.ui.vk.RedlineElementRectangle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineElementRectangle",[
	"jquery.sap.global", "./RedlineElement"
], function(jQuery, RedlineElement) {
	"use strict";

	/**
	 * Redline element control for rectangle.
	 *
	 * @class Provides a control for creating rectangle redline elements.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.RedlineElement
	 * @alias sap.ui.vk.RedlineElementRectangle
	 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
	 */

	var RedlineElementRectangle = RedlineElement.extend("sap.ui.vk.RedlineElementRectangle", {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				width: {
					type: "float",
					defaultValue: 0.001
				},
				height: {
					type: "float",
					defaultValue: 0.001
				},
				fillColor: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(0, 0, 0, 0)"
				}
			}
		}
	});

	RedlineElementRectangle.prototype.init = function() {

	};

	/**
	 * Changes the current width and height of the rectangle redline element with the values passed as parameters.
	 * @param {number} offsetX The value in pixels that will be set as the width for the rectangle redline element.
	 * @param {number} offsetY The value in pixels that will be set as the height for the rectangle redline element.
	 * @returns {sap.ui.vk.RedlineElementRectangle} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementRectangle.prototype.edit = function(offsetX, offsetY) {
		var parent = this.getParent(),
			translated = parent._toVirtualSpace(offsetX, offsetY),
			width = translated.x - this.getOriginX(),
			height = translated.y - this.getOriginY(),
			onePixelSize = parent._toVirtualSpace(1);

		this.setWidth(width > 0 ? width : onePixelSize);
		this.setHeight(height > 0 ? height : onePixelSize);
		return this;
	};

	/**
	 * Changes the current width and height of the rectangle redline element by a factor which gets passed as parameter.
	 * @param {number} zoomBy The factor to be applied to the current width and height.
	 * @returns {sap.ui.vk.RedlineElementRectangle} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementRectangle.prototype.applyZoom = function(zoomBy) {
		this.setProperty("width", this.getWidth() * zoomBy, true);
		this.setProperty("height", this.getHeight() * zoomBy, true);
		return this;
	};

	RedlineElementRectangle.prototype.setWidth = function(width) {
		this.setProperty("width", width, true);
		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("width", this.getParent()._toPixelSpace(width));
		}
	};

	RedlineElementRectangle.prototype.setHeight = function(height) {
		this.setProperty("height", height, true);
		var domRef = this.getDomRef();
		if (domRef) {
			domRef.setAttribute("height", this.getParent()._toPixelSpace(height));
		}
	};

	/**
	 * Creates and renders the DOM element.
	 * @param { sap.ui.core.RenderManager} renderManager Instance of RenderManager.
	 * @public
	 */
	RedlineElementRectangle.prototype.render = function(renderManager) {
		var parent = this.getParent();
		renderManager.write("<rect");
		renderManager.writeElementData(this);
		var origin = parent._toPixelSpace(this.getOriginX(), this.getOriginY());
		renderManager.writeAttribute("x", origin.x);
		renderManager.writeAttribute("y", origin.y);
		renderManager.writeAttribute("width", parent._toPixelSpace(this.getWidth()));
		renderManager.writeAttribute("height", parent._toPixelSpace(this.getHeight()));
		renderManager.writeAttribute("fill", this.getFillColor());
		renderManager.writeAttribute("stroke", this.getStrokeColor());
		renderManager.writeAttribute("stroke-width", this.getStrokeWidth());
		renderManager.writeAttribute("opacity", this.getOpacity());
		renderManager.write("></rect>");
	};

	/**
	 * Exports all the relevant data contained in the rectangle redline element to a JSON object.
	 * @returns {object} Data that can be serialized and later used to restore the rectangle redline element.
	 * @public
	 */
	RedlineElementRectangle.prototype.exportJSON = function() {
		return jQuery.extend(true, RedlineElement.prototype.exportJSON.call(this), {
			type: sap.ui.vk.Redline.ElementType.Rectangle,
			version: 1,
			width: this.getWidth(),
			height: this.getHeight(),
			fillColor: this.getFillColor()
		});
	};

	/**
	 * Imports data from a JSON object into the rectangle redline element.
	 * @param {object} json Relevant data used to restore the rectangle redline element.
	 * @returns {sap.ui.vk.RedlineElementRectangle} <code>this</code> to allow method chaining.
	 * @public
	 */
	RedlineElementRectangle.prototype.importJSON = function(json) {
		if (json.type === sap.ui.vk.Redline.ElementType.Rectangle) {
			if (json.version === 1) {

				RedlineElement.prototype.importJSON.call(this, json);

				if (json.hasOwnProperty("width")) {
					this.setWidth(json.width);
				}

				if (json.hasOwnProperty("height")) {
					this.setHeight(json.height);
				}

				if (json.hasOwnProperty("fillColor")) {
					this.setFillColor(json.fillColor);
				}

			} else {
				// TO DO error version number
				jQuery.sap.log("wrong version number");
			}
		} else {
			// TO DO error element type
			jQuery.sap.log("wrong element type");
		}

		return this;
	};

	return RedlineElementRectangle;
});

}; // end of sap/ui/vk/RedlineElementRectangle.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineGesturesHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.RedlineGesturesHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineGesturesHandler",[
		"jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
	], function(jQuery, EventProvider, ResizeHandler) {
		"use strict";

		var RedlineGesturesHandler = EventProvider.extend("RedlineGesturesHandler", {
			metadata: {
				publicMethods: [
					"beginGesture",
					"move",
					"endGesture",
					"click",
					"doubleClick",
					"contextMenu",
					"getViewport"
				]
			},
			constructor: function(redlineDesignInstance) {
				this._redlineDesign = redlineDesignInstance;

				this._x = 0;
				this._y = 0;
				this._gesture = false;

				var viewport = this.getViewport();
				viewport._currentPosition = {
					x: 0,
					y: 0
				};

				viewport._totalMoveX = 0;
				viewport._totalMoveY = 0;
			}
		});

		RedlineGesturesHandler.prototype.destroy = function() {
			this._redlineDesign = null;
			this._rect = null;
			this._gesture = false;
		};

		RedlineGesturesHandler.prototype._getOffset = function(domRef) {
			var rectangle = domRef.getBoundingClientRect();
			return {
				x: rectangle.left + window.pageXOffset,
				y: rectangle.top + window.pageYOffset
			};
		};

		RedlineGesturesHandler.prototype._inside = function(event, redlineDesignInstance) {
			var redlineDesignDomRef = redlineDesignInstance.getDomRef(),
				isInside = false;

			if (redlineDesignDomRef !== null) {
				var redlineControlOffset = this._getOffset(redlineDesignDomRef);
				var redlineControlInfo = {
					x: redlineControlOffset.x,
					y: redlineControlOffset.y,
					width: redlineDesignDomRef.getBoundingClientRect().width,
					height: redlineDesignDomRef.getBoundingClientRect().height
				};
				isInside = (event.x >= redlineControlInfo.x && event.x <= redlineControlInfo.x + redlineControlInfo.width && event.y >= redlineControlInfo.y && event.y <= redlineControlInfo.y + redlineControlInfo.height);
			}
			return isInside;
		};

		RedlineGesturesHandler.prototype._onresize = function(event) {
			this._gesture = false;
		};

		/**
		 * Gesture handler to handle <i>beginGesture</i> while in redline interaction mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineGesturesHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineGesturesHandler.prototype.beginGesture = function(event) {
			var viewport = this.getViewport();
			if (this._inside(event, viewport)) {
				this._gesture = true;
				this._x = event.x;
				this._y = event.y;

				var offset = this._getOffset(viewport.getDomRef());
				this._gestureOriginX = event.x - offset.x;
				this._gestureOriginY = event.y - offset.y;

				this._distanceBetweenTouchPoints = null;

				if (event.n === 1) {
					this._lastMoveCoordinates = {};
					this._totalDeltaMove = {
						x: 0,
						y: 0
					};
				}
				event.handled = true;
			}
			return this;
		};

		RedlineGesturesHandler.prototype._pan = function(event) {
			if (this._totalDeltaMove) {

				var viewport = this.getViewport(),
					deltaX = event.x - (this._lastMoveCoordinates.x || event.x),
					deltaY = event.y - (this._lastMoveCoordinates.y || event.y);

				this._totalDeltaMove.x += deltaX;
				this._totalDeltaMove.y += deltaY;

				if (deltaX || deltaY) {

					var panningRatio = viewport.getPanningRatio();
					// fire the paninng event specifying how much to move on x and y axes
					viewport.firePan({
						deltaX: deltaX * panningRatio,
						deltaY: deltaY * panningRatio
					});

					viewport.getRedlineElements().forEach(function(element) {
						element.setOriginX(element.getOriginX() + viewport._toVirtualSpace(deltaX));
						element.setOriginY(element.getOriginY() + viewport._toVirtualSpace(deltaY));
					});

					this._manualRender(viewport);
				}
				this._lastMoveCoordinates.x = event.x;
				this._lastMoveCoordinates.y = event.y;
			} else {
				this._totalDeltaMove = {
					x: 0,
					y: 0
				};
				this._lastMoveCoordinates = {};
			}
		};

		RedlineGesturesHandler.prototype._zoom = function(event) {
			var viewport = this.getViewport(),
				zoomDelta;

			// For most browsers, event.scroll property is defined, but for Firefox, this property is undefined.
			// This is because we are listening for DOMMouseScroll event instead of mousewheel event.
			// DOMMouseScroll does not have the wheelDelta property which is used to calculate the scroll.
			// This is why we are looking at the event.points array and compare the y property.
			if (event.scroll !== undefined) {
				if (event.scroll > 0) {
					zoomDelta = 1.05;
				} else if (event.scroll < 0) {
					zoomDelta = 1 / 1.05;
				} else if (this._distanceBetweenTouchPoints !== null) {
					var distanceDelta = event.d - this._distanceBetweenTouchPoints;
					if (distanceDelta > 0) {
						zoomDelta = 1.05;
					} else if (distanceDelta < 0) {
						zoomDelta = 1 / 1.05;
					} else {
						return;
					}
					this._distanceBetweenTouchPoints = event.d;
				} else {
					this._distanceBetweenTouchPoints = event.d;
					return;
				}
			} else if (event.points[0].y < event.points[1].y) {
				// If the y property of the first point is lower than the y property of the second point,
				// it's a zoom-in gesture.
				zoomDelta = 1.05;
			} else {
				// Otherwise, it's a zoom out gesture.
				zoomDelta = 1 / 1.05;
			}

			var scaleChange = 1 - zoomDelta,
				pivotPoint = viewport._toVirtualSpace(this._gestureOriginX, this._gestureOriginY);

			viewport.getRedlineElements().forEach(function(element) {
				element.applyZoom(zoomDelta);
				var originX = element.getOriginX(),
					originY = element.getOriginY();
				originX += (pivotPoint.x - originX) * scaleChange;
				originY += (pivotPoint.y - originY) * scaleChange;
				element.setOriginX(originX);
				element.setOriginY(originY);
			});

			this._manualRender(viewport);

			viewport.fireZoom({
				originX: this._gestureOriginX,
				originY: this._gestureOriginY,
				zoomFactor: zoomDelta
			});

		};

		/**
		 * Gesture handler to handle <i>move</i> while in redline interaction mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineGesturesHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineGesturesHandler.prototype.move = function(event) {
			if (this.getViewport().getDomRef()) {
				if (event.n === 2 && (event.buttons === 4 || event.buttons === 3) || event.n === 1) {
					// PANNING
					this._pan(event);
				} else if ((event.n === 2 && event.buttons === 2) || (sap.ui.Device.system.tablet && event.n === 2 && event.buttons === 0)) {
					// PERFORM ZOOM
					this._zoom(event);
				}
			}
			event.handled = true;
			return this;
		};

		/**
		 * It invalidates the redline elements and it manually renders them after zooming/panning gestures were performed.
		 * @param {sap.ui.vk.RedlineSurface} redlineSurface RedlineSurface instance.
		 * @private
		 */
		RedlineGesturesHandler.prototype._manualRender = function(redlineSurface) {
			if (sap.ui.Device.browser.msie || sap.ui.Device.browser.edge) {
				redlineSurface.invalidate();
			} else {
				// creating a new instance of RenderManager
				var renderManager = sap.ui.getCore().createRenderManager();
				// manually rendering the active element instance
				redlineSurface.getRedlineElements().forEach(function(element) {
					element.render(renderManager);
				});

				// flushing the drawing surface
				renderManager.flush(redlineSurface.getDomRef(), false, false);
				renderManager.destroy();

				// This is workaround for an issue caused by the fact that browsers can't
				// work with innerHTML for svg elements. There is a discussion on this topic here:
				// http://stackoverflow.com/a/13654655/3935427
				var x = redlineSurface.$();
				x.html(x.html());
			}
		};

		/**
		 * Gesture handler to handle <i>endGesture</i> while in redline interaction mode.
		 * @param {event} event Custom event broadcast by Loco.
		 * @returns {sap.ui.vk.RedlineGesturesHandler} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineGesturesHandler.prototype.endGesture = function(event) {
			this._gestureOriginX = 0;
			this._gestureOriginY = 0;


			this._lastMoveCoordinates = {};
			this._totalDeltaMove = {
				x: 0,
				y: 0
			};

			this._gesture = false;
			event.handled = true;
			return this;
		};

		RedlineGesturesHandler.prototype.click = function(event) {

		};

		RedlineGesturesHandler.prototype.doubleClick = function(event) {

		};

		RedlineGesturesHandler.prototype.contextMenu = function(event) {
			event.handled = true;
		};

		RedlineGesturesHandler.prototype.getViewport = function() {
			return this._redlineDesign;
		};

		return RedlineGesturesHandler;
	}, /* bExport= */
	true);

}; // end of sap/ui/vk/RedlineGesturesHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineSurfaceRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.RedlineSurfaceRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineSurfaceRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * RedlineSurface renderer.
	 * @namespace
	 */
	var RedlineSurfaceRenderer = {};

	RedlineSurfaceRenderer.render = function(rm, control) {
		rm.write("<svg");
		rm.writeControlData(control);
		rm.addClass("sapUiVizkitRedlineSurface");
		rm.writeClasses();
		rm.write(">");

		control.getRedlineElements().forEach(function(redlineElement) {
			redlineElement.render(rm);
		});

		this.renderAfterRedlineElements(rm, control);

		rm.write("</svg>");
	};

	RedlineSurfaceRenderer.renderAfterRedlineElements = function(rm, control) {

	};

	return RedlineSurfaceRenderer;

}, true);

}; // end of sap/ui/vk/RedlineSurfaceRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Scene') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the Scene class.
jQuery.sap.declare('sap.ui.vk.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Scene",[
	"jquery.sap.global", "sap/ui/base/Object"
], function(jQuery, BaseObject) {
	"use strict";

	/**
	 * Constructor for a new Scene.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created via {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector}.
	 *
	 * @class Provides the interface for the 3D model.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created via {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector}.
	 *
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.Object
	 * @alias sap.ui.vk.Scene
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Scene = BaseObject.extend("sap.ui.vk.Scene", /** @lends sap.ui.vk.Scene.prototype */ {
		metadata: {
			"abstract": true
		}
	});

	/**
	 * Gets the unique ID of the Scene object.
	 *
	 * @function
	 * @name sap.ui.vk.Scene#getId
	 *
	 * @returns {string} The unique ID of the Scene object.
	 * @public
	 */

	/**
	 * Gets the default node hierarchy in the Scene object.
	 *
	 * @function
	 * @name sap.ui.vk.Scene#getDefaultNodeHierarchy
	 *
	 * @returns {sap.ui.vk.NodeHierarchy} The default node hierarchy in the Scene object.
	 * @public
	 */

	/**
	 * Gets the scene reference that this Scene object wraps.
	 *
	 * @function
	 * @name sap.ui.vk.Scene#getSceneRef
	 *
	 * @returns {any} The scene reference that this Scene object wraps.
	 * @public
	 */

	return Scene;
});

}; // end of sap/ui/vk/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTreeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.SceneTreeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTreeRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * SceneTree renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTreeRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	SceneTreeRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiSizeCompact");
		oRm.addClass("sapUiVkSceneTree");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_tree"));
		oRm.write("</div>");

	};

	return SceneTreeRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTreeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Smart2DHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Smart2DHandler.
jQuery.sap.declare('sap.ui.vk.Smart2DHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Smart2DHandler",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
   ], function(jQuery, EventProvider, ResizeHandler) {
	"use strict";

	var Smart2DHandler = EventProvider.extend("Smart2DHandler", {
		metadata: {
			publicMethods: [
				"beginGesture",
				"move",
				"endGesture",
				"click",
				"doubleClick",
				"contextMenu",
				"getViewport"
			]
		},
		constructor: function(viewport, viewStateManager) {
			this._viewport = viewport;
			this._rect = null;
			this._x = 0;
			this._y = 0;
			this._gesture = false;
			this._hitEndTimer = 0;
			this._lastRender = 0;
			this._viewport.attachEvent("resize", this, this._onresize);
			this._viewStateManager = viewStateManager;
			// This is where we save the state of the node that we hover so we can return
			// to that state when we hover out.
			this._previousColoring = {
				nodeRef: null,
				nodeId: null,
				color: null
			};
		}
	});

	Smart2DHandler.prototype.destroy = function() {
		this._viewport = null;
		this._rect = null;
		this._gesture = false;
		this._viewport.detachEvent("resize", this, this._onresize);
		this._viewStateManager = null;
		this._previousColoring = null;
	};

	Smart2DHandler.prototype._getOffset = function(domElement) {
		var rectangle = domElement.getBoundingClientRect();
		var p = {
			x: rectangle.left + window.pageXOffset,
			y: rectangle.top + window.pageYOffset
		};
		return p;
	};

	Smart2DHandler.prototype._inside = function(event) {
		var viewportDomRef = this._viewport.getDomRef();
		if (viewportDomRef == null) {
			return false;
		}

		var viewportOffset = this._getOffset(viewportDomRef);
		this._rect = {
			x: viewportOffset.x,
			y: viewportOffset.y,
			w: viewportDomRef.offsetWidth,
			h: viewportDomRef.offsetHeight
		};

		return (event.x >= this._rect.x && event.x <= this._rect.x + this._rect.w && event.y >= this._rect.y && event.y <= this._rect.y + this._rect.h);
	};

	Smart2DHandler.prototype._onresize = function(event) {
		this._gesture = false;
		this._rect = null;
	};

	Smart2DHandler.prototype.beginGesture = function(event) {
		if (this._inside(event)) {
			this._gesture = true;
			this._x = event.x;
			this._y = event.y;
		}
	};

	Smart2DHandler.prototype.callbackHover = function() {

		var nodeHierarchy = this._viewStateManager.getNodeHierarchy();

		this._lastRender = Date.now();
		this._hitEndTimer = 0;

		// Perform a hit test and see if there's any node under the mouse cursor
		var hitTestedNodeRef = this._viewport.hitTest(this._x, this._y);

		// If we hit a node different than the previously highlighted node,
		// then we remove the highlight from that old node.
		if (this._highlightedNodeRef !== hitTestedNodeRef) {

			// removing the tint from the previously highlight node
			if (this._highlightedNodeRef !== sap.ve.dvl.DVLID_INVALID) {
				// If the previously highlighted node is the one that we saved,
				// then we restore its color to what it used to be before the hover gesture.
				var tintColor = this._highlightedNodeRef === this._previousColoring.nodeRef ? this._previousColoring.color : 0;
				this._viewport.showHotspots(this._highlightedNodeRef, true, tintColor);
			}
			// If the newly hit node is a hotspot, we tint it
			if (nodeHierarchy.getHotspotNodeIds().indexOf(hitTestedNodeRef) !== -1) {
				// Retrieving and saving the hotspot color before tinting it as a result of hover gesture
				var nodeProxy = nodeHierarchy.createNodeProxy(hitTestedNodeRef);
				this._previousColoring = {
					nodeRef: hitTestedNodeRef,
					nodeId: hitTestedNodeRef,
					color: nodeProxy.getTintColorABGR()
				};
				nodeHierarchy.destroyNodeProxy(nodeProxy);
				this._viewport.showHotspots(hitTestedNodeRef, true);
			}
			// update the reference to the currently highlighted node
			this._highlightedNodeRef = hitTestedNodeRef;
		}

		this._viewport.renderFrame();
	};

	Smart2DHandler.prototype.hover = function(event) {
		if (event.n == 1 && this._inside(event)) {
			this._x = event.x - this._rect.x;
			this._y = event.y - this._rect.y;
			if (!this.getViewport().getShowAllHotspots()) {
				var timestamp = Date.now();

				if (timestamp - this._lastRender > 20) {
					this.callbackHover();
				}

				if (this._hitEndTimer != 0) {
					clearTimeout(this._hitEndTimer);
				}
				this._hitEndTimer = setTimeout(this.callbackHover.bind(this), 20);
			}
			event.handled = true;
		}
	};

	Smart2DHandler.prototype.move = function(event) {
		// Redirect 1 point touch to 2 point touch so disable rotate and do pan instead
		if (this._gesture && event.n == 1) {
			this._viewport.pan(event.x - this._x, event.y - this._y);
			this._x = event.x;
			this._y = event.y;
			event.handled = true;
		}
	};

	Smart2DHandler.prototype.endGesture = function(event) {
		this._gesture = false;
	};

	Smart2DHandler.prototype.click = function(event) {};

	Smart2DHandler.prototype.doubleClick = function(event) {};

	Smart2DHandler.prototype.contextMenu = function(event) {};

	Smart2DHandler.prototype.getViewport = function() {
		return this._viewport;
	};

	return Smart2DHandler;
}, /* bExport= */ true);

}; // end of sap/ui/vk/Smart2DHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigationRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.StepNavigationRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigationRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Step Navigation renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var StepNavigationRenderer = {};

	/**
	* Renders the HTML for the given control, using the provided
	* {@link sap.ui.core.RenderManager}.
	*
	* @param {sap.ui.core.RenderManager} rm
	*the RenderManager that can be used for writing to
	*the Render-Output-Buffer
	* @param {sap.ui.core.Control} control
	*the control to be rendered
	*/
	StepNavigationRenderer.render = function(rm, control) {
		// return immediately if control is invisible
		if (!control.getVisible()) {
		return;
		}

		if (control.getShowToolbar() || control.getShowThumbnails) {
			var oWidth = control.getWidth() !== "auto" ? control.getWidth() : "100%";
			var oHeight = control.getHeight() !== "auto" ? control.getHeight() : "auto";

			rm.write("<div");
			rm.addStyle("width", oWidth);
			rm.addStyle("height", oHeight);
			rm.writeControlData(control);
			rm.addClass("sapVizKitStepNavigation");
			rm.writeClasses();

			var sTooltip = control.getTooltip_AsString();
			if (sTooltip) {
				rm.writeAttributeEscaped("title", sTooltip);
			}

			if (!control.getVisible()) {
				rm.addStyle("visibility", "hidden");
			}
			rm.writeStyles();

			rm.write(">");
			rm.renderControl(control.getAggregation("layout"));
			if (control.getShowThumbnails()) {
				StepNavigationRenderer._renderScrollerDiv(rm, control);
			}
			rm.write("</div>");
		}

	};

	StepNavigationRenderer._renderScrollerDiv = function(rm, control) {
		rm.renderControl(control.getAggregation("thumbnailsContainer"));
	};

	return StepNavigationRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/StepNavigationRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ToolbarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ToolbarRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Toolbar renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ToolbarRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	ToolbarRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapVizKitToolbar");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_toolbar"));
		oRm.write("</div>");

	};

	return ToolbarRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.TransformationMatrix') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides data type sap.ui.vk.TransformationMatrix.
jQuery.sap.declare('sap.ui.vk.TransformationMatrix'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/TransformationMatrix",[
	"jquery.sap.global", "sap/ui/base/DataType"
], function(jQuery, DataType) {
	"use strict";

	/**
	 * @class
	 * Transformation matrix is an array of 12 numbers in a row major mode.
	 * @final
	 * @public
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var TransformationMatrix = DataType.createType("sap.ui.vk.TransformationMatrix", {
			isValid: function(value) {
				return TransformationMatrix.getBaseType().isValid(value) && value.length === 12;
			}
		},
		DataType.getType("float[]")
	);

	/**
	 * Parses the given string value and converts it into an array of numbers.
	 * @param {string} value a comma or white space delimited string
	 * @return {number[]} an array of 12 numbers
	 * @static
	 * @public
	 */
	TransformationMatrix.parseValue = function(value) {
		var componentType = TransformationMatrix.getComponentType();
		return value.split(/\s*,\s*|\s+/).map(componentType.parseValue.bind(componentType));
	};

	/**
	 * Converts matrix from 4x3 to 4x4.
	 * @param {number[]} matrix4x3 The matrix to convert.
	 * @return {number[]} The matrix 4x4 with [0, 0, 0, 1] in the last column.
	 * @static
	 * @public
	 */
	TransformationMatrix.convertTo4x4 = function(matrix4x3) {
		var m = matrix4x3;
		return [ m[0], m[1], m[2], 0, m[3], m[4], m[5], 0, m[6], m[7], m[8], 0, m[9], m[10], m[11], 1 ];
	};

	/**
	 * Converts matrix from 4x4 to 4x3.
	 * @param {number[]} matrix4x4 The matrix to convert. The last column must be [0, 0, 0, 1].
	 * @return {number[]} The matrix 4x3 with the last column removed from matrix4x4.
	 * @public
	 * @static
	 */
	TransformationMatrix.convertTo4x3 = function(matrix4x4) {
		var m = matrix4x4;
		jQuery.sap.assert(m[3] === 0 && m[7] === 0 && m[11] === 0 && m[15] === 1, "The transformation matrix is invalid. The last column must be [0, 0, 0, 1].");
		return [ m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10], m[12], m[13], m[14] ];
	};

	jQuery.sap.setObject("sap.ui.vk.TransformationMatrix", TransformationMatrix);

	return TransformationMatrix;
});

}; // end of sap/ui/vk/TransformationMatrix.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewerRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewer renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewerRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewerRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewer");
		rm.writeClasses();
		rm.addStyle("width", control.getWidth());
		rm.addStyle("height", control.getHeight());
		rm.writeStyles();

		rm.write(">");
		rm.renderControl(control._layout);
		rm.renderControl(control._progressIndicator);
		rm.write("</div>");
	};

	return ViewerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ViewportHandler.
jQuery.sap.declare('sap.ui.vk.ViewportHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportHandler",[
    "jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
], function(jQuery, EventProvider, ResizeHandler) {
	"use strict";

	var ViewportHandler = EventProvider.extend("sap.ui.vk.ViewportHandler", {
		metadata: {
			publicMethods: [
				"beginGesture",
				"move",
				"endGesture",
				"click",
				"doubleClick",
				"contextMenu",
				"getViewport"
			]
		},
		constructor: function(Viewport) {
			this._viewport = Viewport;
			this._rect = null;
			this._evt = {
				x: 0,
				y: 0,
				z: 0,
				d: 0,
                tdx: 0,
                tdy: 0,
                tdd: 0,
				initd: 0
			};
			this._gesture = false;
			this._viewport.attachEvent("resize", this, this._onresize);
			this._nomenu = false;
		}
	});

	ViewportHandler.prototype.destroy = function() {
		this._viewport = null;
		this._rect = null;
		this._evt = null;
		this._gesture = false;
	};

	ViewportHandler.prototype._getOffset = function(obj) {
		var rectangle = obj.getBoundingClientRect();
		var p = {
			x: rectangle.left + window.pageXOffset,
			y: rectangle.top + window.pageYOffset
		};
		return p;
	};

	ViewportHandler.prototype._inside = function(event) {
		if (this._rect == null || true) {
			var id = this._viewport.getIdForLabel();
			var domobj = document.getElementById(id);

			if (domobj == null) {
				return false;
			}

			var o = this._getOffset(domobj);
			this._rect = {
				x: o.x,
				y: o.y,
				w: domobj.offsetWidth,
				h: domobj.offsetHeight
			};
		}

		return (event.x >= this._rect.x && event.x <= this._rect.x + this._rect.w && event.y >= this._rect.y && event.y <= this._rect.y + this._rect.h);
	};

	ViewportHandler.prototype._onresize = function(event) {
		this._gesture = false;
		this._rect = null;
	};

	ViewportHandler.prototype.beginGesture = function(event) {
		if (this._inside(event) && !this._gesture) {
			this._gesture = true;

			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

            // begin gesture can fire when one mouse button is released and the other held down
            // this can cause problems in some browsers resulting in false pan tdx & tdy are used to try and detect such instances
            this._evt.tdx = 0;
            this._evt.tdy = 0;
            this._evt.tdd = 0;
			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;
			this._evt.initd = event.d;
			this._evt.avgd = event.d;
			this._evt.avgx = 0;
			this._evt.avgy = 0;

			jQuery.sap.log.debug("Loco: beginGesture: " + x + ", " + y);
			this._viewport.queueCommand(function() {
				this._viewport.beginGesture(x, y);
			}.bind(this));

			event.handled = true;

			if (document.activeElement) {
				try {
					document.activeElement.blur();
				} catch (e) {
					// IE can have error calling blur() in fullscreen mode
				}
			}

			var domobj = document.getElementById(this._viewport.getIdForLabel());
			domobj.focus();
		}
		this._nomenu = false;
	};

	ViewportHandler.prototype.move = function(event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			var dx = x - this._evt.x;
			var dy = y - this._evt.y;
			var dd = event.d - this._evt.d;
            this._evt.tdx = this._evt.tdx + dx;
            this._evt.tdy = this._evt.tdy + dy;
            this._evt.tdd = this._evt.tdd + dd;
			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;
			this._evt.avgx = this._evt.avgx * 0.99 + dx * 0.01;
			this._evt.avgy = this._evt.avgy * 0.99 + dy * 0.01;

			var z = 1.0;

			if (this._evt.initd > 0) {
				z = 1.0 + dd * (1.0 / this._evt.initd);
			} else if (event.n == 2) {
				if (event.points[0].y > event.points[1].y) {
					z = 1.0 - dd * 0.005;
					if (z < 0.333) {
						z = 0.333;
					}
				} else {
					z = 1.0 + dd * 0.005;
					if (z > 3) {
						z = 3;
					}
				}
			}

			// console.log("n: " + event.n + " Zoom factor: " + z);

			// Zoom smoothing
			if (this._evt.initd > 0) {
				var avgdist = Math.sqrt(this._evt.avgx * this._evt.avgx + this._evt.avgy * this._evt.avgy);

				jQuery.sap.log.debug("AvgDist: " + avgdist);
				if ((Math.abs(event.d - this._evt.avgd) / this._evt.avgd) < (avgdist / 10)) {
					z = 1.0;
				}
			}

			// Weighted average threshold
			this._evt.avgd = this._evt.avgd * 0.97 + event.d * 0.03;
            this._evt.n = event.n;
			switch (event.n) {
				case 1:
					jQuery.sap.log.debug("Loco: Rotate: " + (dx) + ", " + (dy));

					this._viewport.queueCommand(function() {
						this._viewport.rotate(dx, dy);
					}.bind(this));
					break;
				case 2:
					jQuery.sap.log.debug("Loco: Pan: " + (dx) + ", " + (dy));
					if (z != 0 && z != 1.0) {
						jQuery.sap.log.debug("Loco: Zoom: " + (z));
					}

					this._viewport.queueCommand(function() {
                        /* Issues with event processing in some browsers cause a final Pan with a dx,dy being the diff between gesture start and gesture end - resetting to original position. The following detects such an anomoly and prevents pan */
                        if (this._evt.tdx !== 0 && this._evt.tdy !== 0) {
                            this._viewport.pan(dx, dy);
                        }


                        if ((dx < 10 && dy < 10 && z != 0 && z != 1.0) && this._evt.tdd !== 0) {
                            this._viewport.zoom(z);
                        }
					}.bind(this));
					break;
				default:
					break;
			}

			this._nomenu = true;
			event.handled = true;
		}
	};

	ViewportHandler.prototype.endGesture = function(event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

			jQuery.sap.log.debug("Loco: endGesture: " + x + ", " + y);

			this._viewport.queueCommand(function() {
				this._viewport.endGesture();
			}.bind(this));

			this._gesture = false;
			event.handled = true;
		}
	};

	ViewportHandler.prototype.click = function(event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: click: " + (x) + ", " + (y));

			this._viewport.queueCommand(function() {
				this._viewport.tap(x, y, false);
			}.bind(this));

			event.handled = true;
		}
	};

	ViewportHandler.prototype.doubleClick = function(event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: doubleClick: " + (x) + ", " + (y));

			this._viewport.queueCommand(function() {
				this._viewport.tap(x, y, true);
			}.bind(this));

			event.handled = true;
		}
	};

	ViewportHandler.prototype.contextMenu = function(event) {
		if (this._inside(event) || this._nomenu || event.buttons == 5) {
			this._nomenu = false;

			// jQuery.sap.log.debug("Loco: context menu")
			event.handled = true;
		}
	};

	ViewportHandler.prototype.keyEventHandler = function(event) {

	};

	ViewportHandler.prototype.getViewport = function() {
		return this._viewport;
	};

	return ViewportHandler;
}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewportHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewportRenderer.render = function(rm, control) {

		if (control._implementation) {
			rm.renderControl(control._implementation);
		} else {
			rm.write("<div");
			rm.writeControlData(control);
			rm.addClass("sapVizKitViewport");
			rm.writeClasses();
			rm.writeAttribute("tabindex", 0);

			var addStyle = false;
			var width = control.getWidth();
			if (width) {
				rm.addStyle("width", width);
				addStyle = true;
			}
			var height = control.getHeight();
			if (height) {
				rm.addStyle("height", height);
				addStyle = true;
			}
			if (addStyle) {
				rm.writeStyles();
			}

			rm.write(">");
			rm.writeEscaped("NO CONTENT");
			rm.write("</div>");
		}
	};

	return ViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.ContentManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides object sap.ui.vk.dvl.ContentManager.
jQuery.sap.declare('sap.ui.vk.dvl.ContentManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/ContentManager",[
	"jquery.sap.global", "../DvlException", "../Messages", "../ContentManager"
], function(jQuery, DvlException, Messages, ContentManagerBase) {
	"use strict";

	/**
	 * Constructor for a new ContentManager.
	 *
	 * @class
	 * Provides a loader that uses the DVL library to load VDS and VDSL files.
	 *
	 * @param {string} [sId] ID for the new ContentManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ContentConnector object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ContentManager
	 * @alias sap.ui.vk.dvl.ContentManager
	 * @since 1.50.0
	 * @experimental Since 1.50.0. This class is experimental and might be modified or removed in future versions.
	 */
	var ContentManager = ContentManagerBase.extend("sap.ui.vk.dvl.ContentManager", /** @lends sap.ui.vk.dvl.ContentManager.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			publicMethods: [
				"collectGarbage",
				"destroyContent",
				"loadContent"
			]
		}
	});

	var basePrototype = ContentManager.getMetadata().getParent().getClass().prototype;

	ContentManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._handleDownloadingProgressProxy = this._handleDownloadingProgress.bind(this);

		this._graphicsCore = null;
		this._failedSources = [];
	};

	ContentManager.prototype.exit = function() {
		if (this._graphicsCore) {
			this._graphicsCore.destroy();
			this._graphicsCore = null;
		}

		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	var runtimeSettings = {},
	    webGLContextAttributes = {
	        antialias: true,
	        alpha: true,
	        premultipliedAlpha: true
	    },
	    decryptionHandler = null;

	/**
	 * Gets optional Emscripten runtime module settings.
	 * @returns {object} A JSON-like object. See {@link ContentManager.setRuntimeSettings ContentManager.setRuntimeSettings}.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.getRuntimeSettings = function() {
		return runtimeSettings;
	};

	/**
	 * Sets optional Emscripten runtime module settings.
	 *
	 * Emscripten runtime module settings cannot be changed after the Emscripten module is initialized.
	 * @param {object} settings                         A JSON object with the following properties.
	 * @param {int}    [settings.totalMemory=134217728] The size of Emscripten module memory in bytes, default value: 128 MB.
	 * @param {string} [settings.logElementId]          ID of a textarea DOM element to write the log to.
	 * @param {string} [settings.statusElementId]       ID of a DOM element to write the status messages to.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.setRuntimeSettings = function(settings) {
		runtimeSettings = settings;
	};

	/**
	 * Gets optional WebGL context attributes.
	 * @returns {object} A JSON-like object. See {@link ContentManager.setWebGLContextAttributes ContentManager.setWebGLContextAttributes}.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.getWebGLContextAttributes = function() {
		return webGLContextAttributes;
	};

	/**
	 * Sets optional WebGL context attributes.
	 *
	 * @param {object} attributes                             A JSON object with the following properties.
	 * @param {boolean} [attributes.antialias=true]           If set to <code>true</code>, the context will attempt to perform antialiased
	 *                                                        rendering if possible.
	 * @param {boolean} [attributes.alpha=true]               If set to <code>true</code>, the context will have an alpha (transparency) channel.
	 * @param {boolean} [attributes.premultipliedAlpha=false] If set to <code>true</code>, the color channels in the framebuffer will be stored
	 *                                                        premultiplied by the alpha channel to improve performance.
	 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported. WebGL
	 * context attributes cannot be changed after the control is fully initialized.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.setWebGLContextAttributes = function(attributes) {
		webGLContextAttributes = jQuery.extend(webGLContextAttributes, attributes);
	};

	/**
	 * Gets an object that decrypts content of encrypted models.
	 *
	 * @return {sap.ui.vk.DecryptionHandler} An object that decrypts content of encrypted models.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.getDecryptionHandler = function() {
		return decryptionHandler;
	};

	/**
	 * Sets an object that decrypts content of encrypted models.
	 *
	 * @param {sap.ui.vk.DecryptionHandler} handler An object that decrypts content of encrypted models.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentManager.setDecryptionHandler = function(handler) {
		decryptionHandler = handler;
	};

	/**
	 * Gets the instance of <code>GraphicsCore</code>.
	 * @returns {Promise} A promise that is resolved with a {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} instance when it is created and initialized.
	 * @private
	 */
	ContentManager.prototype._getGraphicsCore = function() {
		var that = this;
		return new Promise(function(resolve, reject) {
			if (that._graphicsCore) {
				resolve(that._graphicsCore);
			} else {
				sap.ui.require([ "sap/ui/vk/dvl/GraphicsCore" ], function(GraphicsCore) {
					that._graphicsCore = new GraphicsCore(runtimeSettings, webGLContextAttributes);
					that._graphicsCore.attachSceneLoadingStarted(that._handleDvlSceneLoadingStarted, that);
					that._graphicsCore.attachSceneLoadingFinished(that._handleDvlSceneLoadingFinished, that);
					that._graphicsCore.attachSceneLoadingProgress(that._handleDvlSceneLoadingProgress, that);
					resolve(that._graphicsCore);
				});
			}
		});
	};

	ContentManager.prototype._handleDownloadingProgress = function(event) {
		var source = event.getParameter("source"),
			loaded = event.getParameter("loaded"),
			total = event.getParameter("total"),
			value = total ? loaded / total * 50 : 0;
		this.fireContentChangesProgress({
			phase: "downloading",
			source: source,
			percentage: value
		});
	};

	ContentManager.prototype._handleDvlSceneLoadingProgress = function(event) {
		this.fireContentChangesProgress({
			phase: "building",
			source: event.getParameter("source"),
			percentage: 50 + event.getParameter("percentage") * 50
		});
	};

	ContentManager.prototype._handleDvlSceneLoadingStarted = function(event) {
	};

	ContentManager.prototype._handleDvlSceneLoadingFinished = function(event) {
	};

	/**
	 * Starts downloading and building or updating the content from the content resources.
	 *
	 * This method is asynchronous.
	 *
	 * @param {any}                         content          The current content to update. It can be <code>null</code> if this is an initial loading call.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to load or update.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	ContentManager.prototype.loadContent = function(content, contentResources) {
		this.fireContentChangesStarted();
		var that = this;
		this._getGraphicsCore()
			.then(
				function(graphicsCore) { // onFulfilled
					graphicsCore.setDecryptionHandler(decryptionHandler);
					graphicsCore.loadContentResourcesAsync(
						contentResources,
						function(sourcesFailedToDownload) {
							var failureReason = [];
							if (sourcesFailedToDownload) {
								sourcesFailedToDownload.forEach(function(item) {
									failureReason.push({
										error: item,
										errorMessage: "Failed to download source '" + item.source + "'."
									});
								});
							}

							var loadedScene = content ? content.scene : undefined;

							graphicsCore.updateSceneTreeAsync(loadedScene, contentResources)
								.then(function(data) {
									var result = { content: data.scene };
									if (data.failureReason) {
										failureReason = failureReason.concat(data.failureReason);
									}
									if (failureReason.length > 0) {
										result.failureReason = failureReason;
									}
									that.fireContentChangesFinished(result);
								})
								.catch(function(reason) {
									failureReason.push(reason);
									that.fireContentChangesFinished({
										content: null,
										failureReason: failureReason
									});
								});
						},
						that._handleDownloadingProgressProxy
					);
				},
				function(reason) { // onRejected
					that.fireContentChangesFinished({
						content: null,
						failureReason: {
							error: reason,
							errorMessage: "Failed to create DVL graphics core object."
						}
					});
				}
			);
		return this;
	};

	/**
	 * Destroys the content.
	 *
	 * @param {any} content The content to destroy.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	ContentManager.prototype.destroyContent = function(content) {
		this._graphicsCore.destroyScene(content);
		return this;
	};

	/**
	 * Collects and destroys unused objects and resources.
	 *
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	ContentManager.prototype.collectGarbage = function() {
		this._graphicsCore.collectGarbage();
		return this;
	};

	return ContentManager;
});

}; // end of sap/ui/vk/dvl/ContentManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.ViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.dvl.ViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/ViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewport");
		rm.writeClasses();
		rm.writeAttribute("tabindex", 0);

		var addStyle = false;
		var width = control.getWidth();
		if (width) {
			rm.addStyle("width", width);
			addStyle = true;
		}
		var height = control.getHeight();
		if (height) {
			rm.addStyle("height", height);
			addStyle = true;
		}
		if (addStyle) {
			rm.writeStyles();
		}

		rm.write(">");
		rm.write("</div>");

	};

	return ViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/dvl/ViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/* global escape */

/**
 * Initialization Code and shared classes of library sap.ui.vk
 */
jQuery.sap.declare('sap.ui.vk.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/library",[
	"jquery.sap.global", "./TransformationMatrix", "./DvlException", "./Core"
], function(jQuery, TransformationMatrix, DvlException, Core) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * SAPUI5 library with controls for displaying 3D models.
	 *
	 * @namespace
	 * @name sap.ui.vk
	 * @author SAP SE
	 * @version 1.50.7
	 * @public
	 */

	// Delegate further initialization of this library to the Core.
	sap.ui.getCore().initLibrary({
		name: "sap.ui.vk",
		dependencies: [
			"sap.ui.core"
		],
		types: [
			"sap.ui.vk.CameraFOVBindingType",
			"sap.ui.vk.CameraProjectionType",
			"sap.ui.vk.ContentResourceSourceCategory",
			"sap.ui.vk.dvl.GraphicsCoreApi",
			"sap.ui.vk.SelectionMode",
			"sap.ui.vk.TransformationMatrix",
			"sap.ui.vk.VisibilityMode",
			"sap.ui.vk.ZoomTo"
		],
		interfaces: [
			"sap.ui.vk.DecryptionHandler"
		],
		controls: [
			"sap.ui.vk.ContainerBase",
			"sap.ui.vk.ContainerContent",
			"sap.ui.vk.DockContainer",
			"sap.ui.vk.DockManager",
			"sap.ui.vk.DockPane",
			"sap.ui.vk.FlexibleControl",
			"sap.ui.vk.LegendItem",
			"sap.ui.vk.ListPanel",
			"sap.ui.vk.ListPanelStack",
			"sap.ui.vk.MapContainer",
			"sap.ui.vk.NativeViewport",
			"sap.ui.vk.Notifications",
			"sap.ui.vk.Overlay",
			"sap.ui.vk.RedlineDesign",
			"sap.ui.vk.RedlineSurface",
			"sap.ui.vk.SceneTree",
			"sap.ui.vk.StepNavigation",
			"sap.ui.vk.Toolbar",
			"sap.ui.vk.Viewer",
			"sap.ui.vk.Viewport",
			"sap.ui.vk.ViewportBase",
			"sap.ui.vk.dvl.Viewport",
			"sap.ui.vk.threejs.Viewport"
		],
		elements: [
			"sap.ui.vk.ContentConnector",
			"sap.ui.vk.OverlayArea",
			"sap.ui.vk.RedlineElement",
			"sap.ui.vk.RedlineElementEllipse",
			"sap.ui.vk.RedlineElementFreehand",
			"sap.ui.vk.RedlineElementRectangle",
			"sap.ui.vk.ViewStateManager",
			"sap.ui.vk.ViewStateManagerBase",
			"sap.ui.vk.dvl.ViewStateManager",
			"sap.ui.vk.threejs.ViewStateManager"
		],
		noLibraryCSS: false,
		version: "1.50.7"
	});

	// sap.ui.getCore().initLibrary() creates lazy stubs for controls and elements.
	// Create lazy stubs for non-Element-derived classes or extend Element-derived classed with static methods.
	var lazy = function(localClassName, staticMethods) {
		var methods = "new extend getMetadata";
		if (staticMethods) {
			methods += " " + staticMethods;
		}
		sap.ui.lazyRequire("sap.ui.vk." + localClassName, methods);
	};
	lazy("ContentConnector", "registerSourceType"); // extend the lazy stub with the static method
	lazy("ContentResource");
	lazy("ContentManager");
	lazy("DownloadManager");
	lazy("ImageContentManager");
	lazy("Loco");
	lazy("LayerProxy");
	lazy("NodeHierarchy");
	lazy("NodeProxy");
	lazy("Scene");
	lazy("ViewportHandler");
	lazy("dvl.GraphicsCore");
	lazy("dvl.BaseNodeProxy");
	lazy("dvl.ContentManager", "getRuntimeSettings setRuntimeSettings getWebGLContextAttributes setWebGLContextAttributes getDecryptionHandler setDecryptionHandler");
	lazy("dvl.LayerProxy");
	lazy("dvl.NodeHierarchy");
	lazy("dvl.NodeProxy");
	lazy("dvl.Scene");
	lazy("threejs.BaseNodeProxy");
	lazy("threejs.ContentManager", "registerLoader");
	lazy("threejs.LayerProxy");
	lazy("threejs.NodeHierarchy");
	lazy("threejs.NodeProxy");
	lazy("threejs.Scene");

	/**
	 * The types of APIs supported by the {@link sap.ui.vk.dvl.GraphicsCore} class.
	 *
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental since version 1.32.0. The enumeration might be deleted in the next version.
	 */
	sap.ui.vk.dvl.GraphicsCoreApi = {
		/**
		 * The legacy DVL API implemented in the com.sap.ve.dvl library (dvl.js).
		 * @public
		 */
		LegacyDvl: "LegacyDvl"
	};

	/**
	 * The categories of content resources.
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 * @deprecated Since version 1.50.0.
	 */
	sap.ui.vk.ContentResourceSourceCategory = {
		/**
		 * The 3D content resource.
		 * @public
		 */
		"3D": "3D",
		/**
		 * The 2D content resource.
		 * @public
		 */
		"2D": "2D"
	};

	/**
	 * Camera projection type.
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.vk.CameraProjectionType = {
		/**
		 * {@link https://en.wikipedia.org/wiki/3D_projection#Perspective_projection Perspective projection}
		 * @public
		 */
		Perspective: "perspective",
		/**
		 * {@link https://en.wikipedia.org/wiki/3D_projection#Orthographic_projection Orthographic projection}
		 * @public
		 */
		Orthographic: "orthographic"
	};

	/**
	 * Camera field of view binding types.
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.vk.CameraFOVBindingType = {
		/**
		 * The field of view is bound to the width or the height of the viewport, whichever is smaller.
		 * @public
		 */
		Minimum: "minimum",
		/**
		 * The field of view is bound to the width or the height of the viewport, whichever is bigger.
		 * @public
		 */
		Maximum: "maximum",
		/**
		 * The field of view is bound to the width of the viewport.
		 * @public
		 */
		Horizontal: "horizontal",
		/**
		 * The field of view is bound to the height of the viewport.
		 * @public
		 */
		Vertical: "vertical"
	};

	/**
	 * Visibility mode for {@link sap.ui.vk.Viewport#getViewInfo sap.ui.vk.Viewport.getViewInfo}.
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.vk.VisibilityMode = {
		/**
		 * The view information contains a full definition of all nodes that are visible or hidden.
		 * @public
		 */
		Complete: "complete",
		/**
		 * The view information contains a list of nodes that have inverted visibility state compared to their original state.
		 * @public
		 */
		Differences: "differences"
	};

	/**
	 * ZoomTo options.
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.vk.ZoomTo = {
		All: "all",
		Visible: "visible",
		Selected: "selected",
		Node: "node",
		NodeSetIsolation: "node_setisolation",
		Restore: "restore",
		RestoreRemoveIsolation: "restore_removeisolation",
		ViewLeft: "view_left",
		ViewRight: "view_right",
		ViewTop: "view_top",
		ViewBottom: "view_bottom",
		ViewBack: "view_back",
		ViewFront: "view_front"
	};

	/**
	 * SelectionMode options.
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.vk.SelectionMode = {
		None: "none",
		Exclusive: "exclusive",
		Sticky: "sticky"
	};

	/**
	 * The map from file extensions to content resource categories.
	 * @readonly
	 * @private
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 * @deprecated Since version 1.50.0.
	 */
	sap.ui.vk.ContentResourceSourceTypeToCategoryMap = {
		"vds": sap.ui.vk.ContentResourceSourceCategory["3D"],
		"vdsl": sap.ui.vk.ContentResourceSourceCategory["3D"],
		"cgm": sap.ui.vk.ContentResourceSourceCategory["3D"],
		"png": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"jpg": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"gif": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"bmp": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"tiff": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"tif": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"svg": sap.ui.vk.ContentResourceSourceCategory["2D"]
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: Utility methods used internally by the library to handle results from DVL.

	var dvlComponent = "sap.ve.dvl";

	sap.ui.vk.dvl.checkResult = function(result) {
		if (result < 0) {
			var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(result) : "";
			log.error(message, JSON.stringify({ errorCode: result }), dvlComponent);
			throw new DvlException(result, message);
		}
		return result;
	};

	sap.ui.vk.dvl.getPointer = function(pointer) {
		if (typeof pointer === "number") {
			var result = pointer;
			var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(result) : "";
			log.error(message, JSON.stringify({ errorCode: result }), dvlComponent);
			throw new DvlException(result, message);
		}
		return pointer;
	};

	sap.ui.vk.dvl.getJSONObject = function(object) {
		if (typeof object === "number") {
			var result = object;
			var message = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(result) : "";
			log.error(message, JSON.stringify({ errorCode: result }), dvlComponent);
			throw new DvlException(result, message);
		}
		return object;
	};

	// END: Utility methods used internally by the library to handle results from DVL.
	////////////////////////////////////////////////////////////////////////////

	sap.ui.vk.getResourceBundle = function() {
		var resourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
		sap.ui.vk.getResourceBundle = function() {
			return resourceBundle;
		};
		return resourceBundle;
	};

	sap.ui.vk.utf8ArrayBufferToString = function(arrayBuffer) {
		return decodeURIComponent(escape(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer))));
	};

	sap.ui.vk.Redline = {
		ElementType: {
			Rectangle: "rectangle",
			Ellipse: "ellipse",
			Freehand: "freehand"
		},
		svgNamespace: "http://www.w3.org/2000/svg"
	};

	/**
	 * Converts a {@link https://www.w3.org/TR/css3-color/#colorunits CSS Color} string to a JSON structure <code>{ red, green, blue, alpha }</code>.
	 *
	 * @function
	 * @param {string} color A {@link https://www.w3.org/TR/css3-color/#colorunits CSS Color} string.
	 * @returns {object} An object with the following structure:
	 * <pre>
	 * {
	 *   red:   <i>int</i>,
	 *   green: <i>int</i>,
	 *   blue:  <i>int</i>,
	 *   alpha: <i>float</i>
	 * }
	 * </pre>
	 * where <i>red</i>, <i>green</i>, <i>blue</i> are integers in the range of [0, 255], and <i>alpha</i> is float in the range of [0.0, 1.0].
	 * @static
	 * @public
	 */
	sap.ui.vk.cssColorToColor = (function() {
		var initialized = false;
		var div = document.createElement("div");
		div.id = "sap.ui.vk.colorConverter";
		div.style.setProperty("display", "none", "important");
		return function(color) {
			if (!initialized) {
				if (document.body) {
					document.body.appendChild(div);
					initialized = true;
				} else {
					return {
						red:   0,
						green: 0,
						blue:  0,
						alpha: 1
					};
				}
			}
			// In order to get consistent results when the color value is incorrect first reset the color to rgba(0, 0, 0, 0).
			div.style.setProperty("color", "rgba(0, 0, 0, 0)", "important");
			div.style.setProperty("color", color, "important");
			var effectiveColor = window.getComputedStyle(div).color;
			if (effectiveColor === "transparent") {
				// Some browsers (e.g. Firefox) return 'transparent' if alpha component equals 0.
				return {
					red:   0,
					green: 0,
					blue:  0,
					alpha: 0
				};
			} else {
				var components = effectiveColor.split("(")[1].split(")")[0].split(",");
				return {
					red:   parseInt(components[0], 10),
					green: parseInt(components[1], 10),
					blue:  parseInt(components[2], 10),
					alpha: components.length === 4 ? parseFloat(components[3]) : 1
				};
			}
		};
	})();

	/**
	 * Converts a JSON structure <code>{ red, green, blue, alpha }</code> to a {@link https://www.w3.org/TR/css3-color/#colorunits CSS Color} string.
	 *
	 * @function
	 * @param {object} color       A map of parameters. See below.
	 * @param {int}    color.red   The red component of the color in the range [0, 255].
	 * @param {int}    color.green The green component of the color in the rangle [0, 255].
	 * @param {int}    color.blue  The blue component of the color in the range [0, 255].
	 * @param {float}  color.alpha The alpha component of the color in the range [0.0, 1.0];
	 * @returns {string} A {@link https://www.w3.org/TR/css3-color/#colorunits CSS Color} string in the format "rgba(red, green, blue, alpha)".
	 * @static
	 * @public
	 */
	sap.ui.vk.colorToCSSColor = function(color) {
		return "rgba(" + color.red + "," + color.green + "," + color.blue + "," + color.alpha + ")";
	};

	/**
	 * Converts a 32-bit integer in the ABGR notation to a JSON structure <code>{ red, green, blue, alpha }</code>.
	 *
	 * @function
	 * @param {int} abgr A 32-bit integer in the ABGR notation.
	 * @returns {object} An object with the following structure:
	 * <pre>
	 * {
	 *   red:   <i>int</i>,
	 *   green: <i>int</i>,
	 *   blue:  <i>int</i>,
	 *   alpha: <i>float</i>
	 * }
	 * </pre>
	 * where <i>red</i>, <i>green</i>, <i>blue</i> are integer in the range [0, 255], and <i>alpha</i> is float in the range from [0.0, 1.0].
	 * @static
	 * @public
	 */
	sap.ui.vk.abgrToColor = function(abgr) {
		return {
			red:    abgr        & 0xff,
			green:  abgr >>> 8  & 0xff,
			blue:   abgr >>> 16 & 0xff,
			alpha: (abgr >>> 24 & 0xff) / 255
		};
	};

	/**
	 * Converts a structure <code>{ red, green, blue, alpha }</code> to a 32-bit integer in the ABGR notation.
	 * @function
	 * @param {object} color       A map of parameters. See below.
	 * @param {int}    color.red   The red component of the color in the range [0, 255].
	 * @param {int}    color.green The green component of the color in the range [0, 255].
	 * @param {int}    color.blue  The blue component of the color in the range [0, 255].
	 * @param {float}  color.alpha The alpha component of the color in the range [0.0, 1.0];
	 * @returns {int} A 32-bit integer in the ABGR notation.
	 * @static
	 * @public
	 */
	sap.ui.vk.colorToABGR = function(color) {
		// NB: use >>> to convert to 32 bit unsigned.
		return (color.alpha * 255 << 24 | color.blue << 16 | color.green << 8 | color.red) >>> 0;
	};

	return sap.ui.vk;
});

}; // end of sap/ui/vk/library.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.BaseNodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the BaseNodeProxy class.
jQuery.sap.declare('sap.ui.vk.threejs.BaseNodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/BaseNodeProxy",[
	"jquery.sap.global", "../library", "../BaseNodeProxy"
], function(jQuery, library, BaseNodeProxyBase) {
	"use strict";

	/**
	 * Constructor for a new BaseNodeProxy.

	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @class
	 * Provides a simple, lightweight proxy object to a node in a node hierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.BaseNodeProxy
	 * @implements sap.ui.base.Poolable
	 * @alias sap.ui.vk.threejs.BaseNodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var BaseNodeProxy = BaseNodeProxyBase.extend("sap.ui.vk.threejs.BaseNodeProxy", /** @lends sap.ui.vk.threejs.BaseNodeProxy.prototype */ {
		metadata: {
			publicMethods: [
				"getHasChildren",
				"getName",
				"getSceneRef",
				"getNodeRef",
				"getNodeId",
				"getNodeMetadata"
			]
		}
	});

	/**
	 * Initialize this BaseNodeProxy with its data.
	 *
	 * The <code>init</code> method is called by an object pool when the
	 * object is (re-)activated for a new caller.
	 *
	 * @param {sap.ui.vk.threejs.NodeHierarchy} nodeHierarchy The NodeHierarchy object this BaseNodeProxy object belongs to.
	 * @param {any} nodeRef The reference object of the node for which to get BaseNodeProxy.
	 * @private
	 * @see sap.ui.base.Poolable.prototype#init
	 */
	BaseNodeProxy.prototype.init = function(nodeHierarchy, nodeRef) {
		this._object3D = nodeRef;
	};

	/**
	 * Reset BaseNodeProxy data, needed for pooling.
	 * @private
	 * @see sap.ui.base.Poolable.prototype#reset
	 */
	BaseNodeProxy.prototype.reset = function() {
		this._object3D = null;
	};

	/**
	 * Gets the reference object of the node.
	 * @returns {object} The node's reference object.
	 * @public
	 */
	BaseNodeProxy.prototype.getNodeRef = function() {
		return this._object3D;
	};

	/**
	 * Gets the node reference.
	 * @returns {any} The node reference.
	 * @public
	 */
	BaseNodeProxy.prototype.getNodeId = function() {
		return this._object3D;
	};

	/**
	 * Gets the name of the node.
	 * @returns {string} The node's name.
	 * @public
	 */
	BaseNodeProxy.prototype.getName = function() {
		return this._object3D.name || ("<" + this._object3D.type + ">");
	};

	/**
	 * Gets the metadata of the node.
	 * @return {object} A JSON object containing the node's metadata.
	 * @public
	 */
	// NB: We cannot name the method getMetadata as there already exists sap.ui.base.Object.getMetadata method.
	BaseNodeProxy.prototype.getNodeMetadata = function() {
		return this._object3D.userData.metadata;
	};

	/**
	 * Indicates whether the node has child nodes.
	 * @returns {boolean} A value of <code>true</code> indicates that the node has child nodes, and a value of <code>false</code> indicates otherwise.
	 * @public
	 */
	BaseNodeProxy.prototype.getHasChildren = function() {
		return this._object3D.children.length > 0;
	};

	/**
	 * Gets the scene reference that this BaseNodeProxy object wraps.
	 * @returns {any} A scene reference that this BaseNodeProxy object wraps.
	 * @public
	 */
	BaseNodeProxy.prototype.getSceneRef = function() {
		return this._object3D;
	};

	return BaseNodeProxy;
});

}; // end of sap/ui/vk/threejs/BaseNodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.ViewportGestureHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.threejs.ViewportGestureHandler.
jQuery.sap.declare('sap.ui.vk.threejs.ViewportGestureHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.threejs.thirdparty.three'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/ViewportGestureHandler",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler", "./thirdparty/three"
], function(jQuery, EventProvider, ResizeHandler, threeJs) {
	"use strict";

	var ViewportGestureHandler = EventProvider.extend("sap.ui.vk.threejs.ViewportGestureHandler", {
		metadata: {
			publicMethods: [
				"beginGesture",
				"move",
				"endGesture",
				"click",
				"doubleClick",
				"contextMenu",
				"getViewport",
				"update"
			]
		},
		constructor: function(Viewport) {
			this._viewport = Viewport;
			this._rect = null;
			this._evt = {
				x: 0,
				y: 0,
				z: 0,
				d: 0,
				initd: 0
			};
			this._gesture = false;
			this._viewport.attachEvent("resize", this, this._onresize);
			this._nomenu = false;

			// camera control
			var ThreeJsCameraController = function(vp) {

				var viewport = vp;

				// target of interaction
				var gestureTarget = new THREE.Vector3(); // center of interaction
				var zoomTarget = new THREE.Vector2();
				var objectWasHit = false;

				// turn table const
				var ANGLE_EPSILON = 0.001;
				var MIN_PITCH = -Math.PI / 2 + ANGLE_EPSILON;
				var MAX_PITCH = Math.PI / 2 - ANGLE_EPSILON;

				// rotation
				var sphericalDelta = new THREE.Spherical();

				// pan
				var panOffset = new THREE.Vector3();

				this.isTurnTableMode = true; // true by default

				function calcCenter(root) {
					var minPoint = new THREE.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
					var maxPoint = new THREE.Vector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);

					root.traverse(function(object) {
						if (object instanceof THREE.Mesh) {

							var p = new THREE.Vector3();
							p.applyMatrix4(object.matrixWorld);

							minPoint.x = Math.min(minPoint.x, p.x);
							minPoint.y = Math.min(minPoint.y, p.y);
							minPoint.z = Math.min(minPoint.z, p.z);

							maxPoint.x = Math.max(maxPoint.x, p.x);
							maxPoint.y = Math.max(maxPoint.y, p.y);
							maxPoint.z = Math.max(maxPoint.z, p.z);

						}
					});
					return minPoint.add(maxPoint).multiplyScalar(0.5);
				}

				this.beginGesture = function(x, y) {
					var element = viewport.getRenderer().domElement;
					var scene = viewport.getScene().getSceneRef();
					var camera = viewport.getCamera();

					var normalisedX = (x - element.offsetLeft) / element.width * 2 - 1;
					var normalisedY = (element.offsetTop - y) / element.height * 2 + 1;
					zoomTarget.x = normalisedX;
					zoomTarget.y = normalisedY;

					var hit = viewport.hitTest(x, y, scene, camera);

					if (hit) {
						gestureTarget.copy(hit.point);
						objectWasHit = true;
					} else {
						/*
						 * TO DO:
						 * Maybe get the center from the scene from somewhere instead of calculating this everytime.
						 */
						gestureTarget = calcCenter(scene);
						objectWasHit = false;
					}
				};

				this.endGesture = function() {
					objectWasHit = false;
				};

				function panLeft(distance, matrix) {
					var v = new THREE.Vector3();
					v.setFromMatrixColumn(matrix, 0); // get X axis
					v.multiplyScalar(-distance);

					return v;
				}

				function panUp(distance, matrix) {
					var v = new THREE.Vector3();
					v.setFromMatrixColumn(matrix, 1); // get Y axis
					v.multiplyScalar(distance);

					return v;
				}

				this.pan = function(dx, dy) {
					if (dx === 0 && dy === 0) {
						return;
					}

					var camera = viewport.getCamera();
					var center = new THREE.Vector3().copy(gestureTarget);

					var element = viewport.getRenderer().domElement;
					var halfHeight = element.height / 2;

					if (camera.isPerspectiveCamera) {
						var leng = new THREE.Vector3().subVectors(camera.position, center).length();
						var halfFov = camera.fov / 180 * Math.PI / 2; // half vertical fov
						var k = halfHeight / Math.tan(halfFov);
						dx = dx * leng / k;
						dy = dy * leng / k;


					} else if (camera.isOrthographicCamera) {
						dx = dx / camera.zoom;
						dy = dy / camera.zoom;

					} else {
						jQuery.sap.log.error("threejs.ViewportGestureHandler: unsupported camera type");
					}

					panOffset.add(panLeft(dx, camera.matrix));
					panOffset.add(panUp(dy, camera.matrix));
				};

				this.rotate = function(dx, dy) {
					if (dx === 0 && dy === 0) {
						return;
					}

					sphericalDelta.theta -= (dx * 0.01); // rotate left
					sphericalDelta.phi += (dy * 0.01); // rotate up
				};


				this.zoom = function(zoomFactorScaler) {
					if (zoomFactorScaler === 0 || zoomFactorScaler === 1) {
						return;
					}

					var camera = viewport.getCamera();
					var delta = new THREE.Vector3();
					var ori, target;

					if (camera.isPerspectiveCamera) {

						if (objectWasHit) {
							ori = new THREE.Vector3(zoomTarget.x, zoomTarget.y, -1).unproject(camera);
							target = new THREE.Vector3(zoomTarget.x, zoomTarget.y, 1).unproject(camera);

							target.sub(ori);
							delta.copy(target);
						} else {
							delta.copy(camera.getWorldDirection());
						}

						var zoomDirection = new THREE.Vector3().copy(gestureTarget).sub(camera.position);
						var leng = zoomDirection.length();

						delta.normalize();
						delta.multiplyScalar(leng);
						delta.multiplyScalar(1 - 1 / zoomFactorScaler);


					} else if (camera.isOrthographicCamera) {

						if (objectWasHit) {
							ori = new THREE.Vector3(0, 0, 1).unproject(camera);
							target = new THREE.Vector3(zoomTarget.x, zoomTarget.y, 1).unproject(camera);
							target.sub(ori);

							delta.copy(target);
						}

						delta.multiplyScalar(1 - 1 / zoomFactorScaler);

						camera.zoom *= zoomFactorScaler;
						camera.updateProjectionMatrix();
					} else {
						jQuery.sap.log.error("threejs.ViewportGestureHandler: unsupported camera type");
					}
					panOffset.add(delta);
				};

				function createPitchAxis(yaw, pitch) {
					var sy = Math.sin(yaw);
					var cy = Math.cos(yaw);
					var sp = Math.sin(pitch);
					var cp = Math.cos(pitch);
					var z = cy * cp;
					var x = sy * cp;
					var y = sp;
					return new THREE.Vector3(x, y, z);
				}

				function clamp(number, min, max) {
					return Math.max(min, Math.min(number, max));
				}

				this.update = function() {
					var camera = viewport.getCamera();

					if (camera) {

						var rotationCenter = new THREE.Vector3().copy(gestureTarget);

						var cameraOrigin = new THREE.Vector3().copy(camera.position);
						cameraOrigin.sub(rotationCenter);

						var cameraLook = camera.getWorldDirection();
						cameraLook.normalize();

						var cameraUp = new THREE.Vector3().copy(camera.up);

						// rotation
						if (this.isTurnTableMode) {

							var yawAxis = new THREE.Vector3(0, 1, 0);// set as Y for now
							var yawY = Math.atan2(cameraLook.x, cameraLook.z) + Math.PI / 2;

							var pitchAxis = createPitchAxis(yawY, 0);
							pitchAxis.normalize();

							var pitchAngle = Math.atan2(cameraLook.y, Math.sqrt(cameraLook.x * cameraLook.x + cameraLook.z * cameraLook.z));

							var yawRotation = new THREE.Quaternion();
							yawRotation.setFromAxisAngle(yawAxis, sphericalDelta.theta);

							var pitchRotation = new THREE.Quaternion(); // clamp between PI/2 and -PI/2
							pitchRotation.setFromAxisAngle(pitchAxis, clamp(sphericalDelta.phi, MIN_PITCH + pitchAngle, MAX_PITCH + pitchAngle));

							cameraUp.copy(cameraLook).cross(pitchAxis);
							cameraUp.normalize();

							yawRotation.multiply(pitchRotation); // put them together

							cameraOrigin.applyQuaternion(yawRotation); // apply rotation
							cameraLook.applyQuaternion(yawRotation);
							cameraUp.applyQuaternion(yawRotation);

						} else {

							var cameraX = new THREE.Vector3().crossVectors(cameraUp, cameraLook);
							cameraX.normalize();

							var rotZ = new THREE.Quaternion();
							rotZ.setFromAxisAngle(cameraUp, sphericalDelta.theta);
							var rotX = new THREE.Quaternion();
							rotX.setFromAxisAngle(cameraX, sphericalDelta.phi);

							rotZ.multiply(rotX);

							cameraOrigin.applyQuaternion(rotZ);
							cameraLook.applyQuaternion(rotZ);
							cameraUp.applyQuaternion(rotZ);

							cameraLook.normalize();
							cameraUp.normalize();
						}

						cameraOrigin.add(rotationCenter);

						var target = cameraOrigin.clone();
						target.add(cameraLook);

						// new camera
						camera.position.copy(cameraOrigin);
						camera.up.copy(cameraUp);
						camera.lookAt(target);

						// pan offset
						camera.position.add(panOffset);

						// reset delta
						sphericalDelta.set(0, 0, 0);
						panOffset.set(0, 0, 0);

						camera.updateMatrix();
						camera.updateProjectionMatrix();
					}
				};

			};
			this._cameraController = new ThreeJsCameraController(Viewport);

		}
	});

	ViewportGestureHandler.prototype.destroy = function() {
		this._viewport = null;
		this._rect = null;
		this._evt = null;
		this._gesture = false;
	};

	ViewportGestureHandler.prototype._getOffset = function(obj) {
		var rectangle = obj.getBoundingClientRect();
		var p = {
			x: rectangle.left + window.pageXOffset,
			y: rectangle.top + window.pageYOffset
		};
		return p;
	};

	ViewportGestureHandler.prototype._inside = function(event) {
		if (this._rect == null || true) {
			var id = this._viewport.getIdForLabel();
			var domobj = document.getElementById(id);

			if (domobj == null) {
				return false;
			}

			var o = this._getOffset(domobj);
			this._rect = {
				x: o.x,
				y: o.y,
				w: domobj.offsetWidth,
				h: domobj.offsetHeight
			};
		}

		return (event.x >= this._rect.x && event.x <= this._rect.x + this._rect.w && event.y >= this._rect.y && event.y <= this._rect.y + this._rect.h);
	};

	ViewportGestureHandler.prototype._onresize = function(event) {
		this._gesture = false;
		this._rect = null;
	};

	ViewportGestureHandler.prototype.beginGesture = function(event) {
		if (this._inside(event) && !this._gesture) {
			this._gesture = true;

			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;
			this._evt.initd = event.d;
			this._evt.avgd = event.d;
			this._evt.avgx = 0;
			this._evt.avgy = 0;

			jQuery.sap.log.debug("Loco: beginGesture: " + x + ", " + y);

			this._cameraController.beginGesture(x, y);

			event.handled = true;

			if (document.activeElement) {
				try {
					document.activeElement.blur();
				} catch (e) {
					// IE can have error calling blur() in fullscreen mode
				}
			}

			var domobj = document.getElementById(this._viewport.getIdForLabel());
			domobj.focus();
		}
		this._nomenu = false;
	};

	ViewportGestureHandler.prototype.move = function(event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			var dx = x - this._evt.x;
			var dy = y - this._evt.y;
			var dd = event.d - this._evt.d;

			this._evt.x = x;
			this._evt.y = y;
			this._evt.d = event.d;

			this._evt.avgx = this._evt.avgx * 0.99 + dx * 0.01;
			this._evt.avgy = this._evt.avgy * 0.99 + dy * 0.01;

			var z = 1.0;

			if (this._evt.initd > 0) {
				z = 1.0 + dd * (1.0 / this._evt.initd);
			} else if (event.n == 2) {
				if (event.points[ 0 ].y > event.points[ 1 ].y) {
					z = 1.0 - dd * 0.005;
					if (z < 0.333) {
						z = 0.333;
					}
				} else {
					z = 1.0 + dd * 0.005;
					if (z > 3) {
						z = 3;
					}
				}
			}

			// Zoom smoothing
			if (this._evt.initd > 0) {
				var avgdist = Math.sqrt(this._evt.avgx * this._evt.avgx + this._evt.avgy * this._evt.avgy);

				jQuery.sap.log.debug("AvgDist: " + avgdist);
				if ((Math.abs(event.d - this._evt.avgd) / this._evt.avgd) < (avgdist / 10)) {
					z = 1.0;
				}
			}

			// Weighted average threshold
			this._evt.avgd = this._evt.avgd * 0.97 + event.d * 0.03;

			switch (event.n) {
				case 1:
					jQuery.sap.log.debug("Loco: Rotate: " + (dx) + ", " + (dy));

					this._cameraController.rotate(dx, dy);
					break;

				case 2:
					jQuery.sap.log.debug("Loco: Pan: " + (dx) + ", " + (dy));
					if (z != 0 && z != 1.0) {
						jQuery.sap.log.debug("Loco: Zoom: " + (z));
					}

					this._cameraController.pan(dx, dy);

					if (dx < 10 && dy < 10 && z != 0 && z != 1.0) {
						this._cameraController.zoom(z);
					}

					break;
				default:
					break;
			}

			this._nomenu = true;
			event.handled = true;
		}
	};

	ViewportGestureHandler.prototype.endGesture = function(event) {
		if (this._gesture) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;

			jQuery.sap.log.debug("Loco: endGesture: " + x + ", " + y);

			this._cameraController.endGesture();

			this._gesture = false;
			event.handled = true;
		}
	};

	ViewportGestureHandler.prototype.click = function(event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: click: " + (x) + ", " + (y));

			if (this._viewport) {
				this._viewport.tap(x, y, false);
			}

			event.handled = true;
		}
	};

	ViewportGestureHandler.prototype.doubleClick = function(event) {
		if (this._inside(event) && event.buttons <= 1) {
			var x = event.x - this._rect.x,
				y = event.y - this._rect.y;
			jQuery.sap.log.debug("Loco: doubleClick: " + (x) + ", " + (y));

			event.handled = true;
		}
	};

	ViewportGestureHandler.prototype.contextMenu = function(event) {
		if (this._inside(event) || this._nomenu || event.buttons == 5) {
			this._nomenu = false;

			event.handled = true;
		}
	};

	ViewportGestureHandler.prototype.keyEventHandler = function(event) {
	};

	ViewportGestureHandler.prototype.getViewport = function() {
		return this._viewport;
	};

	ViewportGestureHandler.prototype.update = function() {
		this._cameraController.update();
	};

	return ViewportGestureHandler;
}, /* bExport= */ true);

}; // end of sap/ui/vk/threejs/ViewportGestureHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.ViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.threejs.ViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/ViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 */
	var ViewportRenderer = {};

	ViewportRenderer.render = function(rm, control) {
		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewport");
		rm.writeClasses();
		rm.writeAttribute("tabindex", 0);
		rm.addStyle("width", control.getWidth());
		rm.addStyle("height", control.getHeight());
		rm.writeStyles();
		rm.write(">");

		rm.write("</div>");
	};

	return ViewportRenderer;

}, true);

}; // end of sap/ui/vk/threejs/ViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.CheckEye') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.CheckEye.
jQuery.sap.declare('sap.ui.vk.CheckEye'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.CheckBox'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/CheckEye",[
	"jquery.sap.global", "sap/ui/commons/CheckBox", "./library"
], function(jQuery, CheckBox, library) {
	"use strict";



	/**
	 * Constructor for a new CheckEye.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Provides a custom 'eye' checkbox for a Scene Tree, used to toggle the visibility of nodes in a scene.
	 * @extends sap.m.CheckBox
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.CheckEye
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var CheckEye = CheckBox.extend("sap.ui.vk.CheckEye", /** @lends sap.ui.vk.CheckEye.prototype */ { metadata: {

		library: "sap.ui.vk",
		properties: {
		}
	},

	onAfterRendering: function() {
		var $this = this.$();
		$this.removeClass("sapUiCb");
		$this.removeClass("sapUiCbChk");
		$this.removeClass("sapUiCbInteractive");
		$this.removeClass("sapUiCbStd");
		$this.addClass("sapUiVkCheckEye");
	},

	renderer: {

	}

	});

	return CheckEye;

}, /* bExport= */ true);

}; // end of sap/ui/vk/CheckEye.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerBase') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ContainerBase.
jQuery.sap.declare('sap.ui.vk.ContainerBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContainerBase",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/IconPool", "sap/ui/core/Popup", "sap/ui/Device", "sap/m/library"
], function(jQuery, library, Control, IconPool, Popup, Device, mobileLibrary) {
	"use strict";

	/**
	 * Abstract Constructor for a new Container.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Abstract Constructor for a new Container.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ContainerBase
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContainerBase = Control.extend("sap.ui.vk.ContainerBase", /** @lends sap.ui.vk.ContainerBase.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Show fullscreen toggle button in toolbar
				 */
				"showFullScreen": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Show settings button in toolbar
				 */
				"showSettings": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Show selection button in toolbar
				 */
				"showSelection": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls whether the control is show fullscreen or embedded
				 */
				"fullScreen": {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},
				/**
				 * Title to show in toolbar
				 */
				"title": {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},
				"autoAdjustHeight": {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			defaultAggregation: "content",
			aggregations: {
				/**
				 * Content Aggregation.
				 */
				content: {
					type: "sap.ui.vk.ContainerContent",
					multiple: true,
					singularName: "content"
				},
				/**
				 * Toolbar aggregation
				 */
				"toolbar": {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				}
			},
			associations: {},
			events: {
				"contentChange": {
					parameters: {
						selectedItemId: "string"
					}
				},
				"settingsPressed": {}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * default Content could be defined in application
	 *
	 * @param {sap.ui.vk.ContainerContent} oContent the content to be visible; involves re-rendering
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.switchContent = function(oContent) {
		this.setSelectedContent(oContent);
		// fire the change event with id of the newly selected item..
		this.rerender();// invalidate();
	};

	/**
	 * update container to allow dynamic change button layout
	 *
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.updateContainer = function() {
		this._contentChanged = true;
		this.rerender();
	};

	/**
	 * set selected content
	 *
	 * @param {sap.ui.vk.ContainerContent} oContent the selected content; involves no re-rendering
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setSelectedContent = function(oContent) {
		this._oSelectedContent = oContent;
	};

	/**
	 * get selected content
	 *
	 * @returns {sap.ui.vk.ContainerContent} the currently selected content container
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.getSelectedContent = function() {
		return this._oSelectedContent;
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	ContainerBase.prototype.init = function() {
		this._selectionState = "SINGLE";
		this._firstTime = true;
		this._aContentIcons = [];
		this._selectedContent = null;
		this._oSelectedContent = null;
		this._bSegmentedButtonSaveSelectState = false;
		this._oMenu = null;

		// Right side..
		var oLayoutData = new sap.m.OverflowToolbarLayoutData({
			priority: sap.m.OverflowToolbarPriority.High
		});
		var buttonType = sap.m.ButtonType.Transparent;

		// Full screen button
		this._oFullScreenButton = new sap.m.OverflowToolbarButton({
			layoutData: oLayoutData,
			type: buttonType,
			icon: "sap-icon://full-screen",
			text: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_FULLSCREEN"),
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_FULLSCREEN"),
			press: function() {
				this._bSegmentedButtonSaveSelectState = true;
				this._toggleFullScreen();
			}.bind(this)
		});

		// Settings button
		this._oSettingsButton = new sap.m.OverflowToolbarButton({
			layoutData: oLayoutData.clone(),
			type: buttonType,
			icon: "sap-icon://action-settings",
			text: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_SETTINGS"),
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_SETTINGS"),
			press: function() {
				this._bSegmentedButtonSaveSelectState = true;
				this.fireSettingsPressed();
			}.bind(this)
		});

		// Selection buttons
		this._oSelectionButtonSingle = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-single",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_SINGLE"),
			press: this._handleSelection.bind(this, "SINGLE")
		});

		this._oSelectionButtonRectangle = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-rectangle",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_RECT"),
			press: this._handleSelection.bind(this, "RECT")
		});

		this._oSelectionButtonLasso = new sap.m.SegmentedButtonItem({
			icon: "sap-icon://map-container/selection-lasso",
			tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU_LASSO"),
			press: this._handleSelection.bind(this, "LASSO")
		});

		this._selectionMenu = new sap.m.SegmentedButton({
			items: [
				this._oSelectionButtonSingle,
				this._oSelectionButtonRectangle,
				this._oSelectionButtonLasso
			]
		});
		// Popup for container content
		this._oPopup = new Popup({
			modal: true,
			shadow: false,
			autoClose: false
		});

		// segmentedButton for for multiple content entries
		this._oContentSegmentedButton = new sap.m.SegmentedButton({
			layoutData: oLayoutData.clone(),
			select: this._onContentButtonSelect.bind(this)
		});

		// Left side...
		// display title
		this._oContTitle = new sap.m.Label();

		// toolbar
		this._oToolbar = new sap.m.OverflowToolbar({
			// Use ToolbarDesign.Auto
			width: "auto"
		}).addStyleClass("sapUiVkContainerBaseToolbar");
		this.setAggregation("toolbar", this._oToolbar);

		this.sResizeListenerId = null;
		if (Device.system.desktop) {
			this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
		} else {
			Device.orientation.attachHandler(this._performHeightChanges, this);
			Device.resize.attachHandler(this._performHeightChanges, this);
		}

		// Adding new icons to the IconPool
		jQuery.sap.require("sap.ui.thirdparty.URI");
		var mapContainerIcons = [ {
				name: "selection-lasso",
				unicode: "E000"
			}, {
				name: "selection-rectangle",
				unicode: "E001"
			}, {
				name: "selection-single",
				unicode: "E002"
			} ],
			collectionName = "map-container",
			fontFamily = "map-container";

		mapContainerIcons.forEach(function(icon) {
			sap.ui.core.IconPool.addIcon(icon.name, collectionName, fontFamily, icon.unicode);
		});
	};

	ContainerBase.prototype.exit = function() {
		if (this._oFullScreenButton) {
			this._oFullScreenButton.destroy();
			this._oFullScreenButton = undefined;
		}
		if (this._oPopup) {
			this._oPopup.destroy();
			this._oPopup = undefined;
		}
		if (this._oContentSegmentedButton) {
			this._oContentSegmentedButton.destroy();
			this._oContentSegmentedButton = undefined;
		}
		if (this._oSelectedContent) {
			this._oSelectedContent.destroy();
			this._oSelectedContent = undefined;
		}
		if (this._oToolbar) {
			this._oToolbar.destroy();
			this._oToolbar = undefined;
		}
		if (Device.system.desktop && this.sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		} else {
			Device.orientation.detachHandler(this._performHeightChanges, this);
			Device.resize.detachHandler(this._performHeightChanges, this);
		}
	};

	/**
	 * set FullScreen - default is normal mode, but app can call this method to set the default to full screen
	 *
	 * @param {boolean} bFullScreen Fullscreen mode on or off
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setFullScreen = function(bFullScreen) {
		if (this._firstTime) {
			// can't set the full screen and toggle since dom is not loaded yet
			return;
		}
		if (this.getFullScreen() == bFullScreen) { // check setter is overridden, if not, no need to set the property
			return;
		}
		var fullScreen = this.getProperty("fullScreen");
		if (fullScreen !== bFullScreen) {
			this._toggleFullScreen();
		}
	};

	ContainerBase.prototype.onAfterRendering = function() {
		var that = this;
		if ((this.sResizeListenerId === null) && (Device.system.desktop)) {
			this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this, jQuery.proxy(this._performHeightChanges, this));
		}
		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			// fix the flickering issue when switch chart in full screen mode
			jQuery.sap.delayedCall(500, this, function() {
				that._performHeightChanges();
			});
		}
		this._firstTime = false;
		if (this.getSelectedContent() !== null) {
			var control = this.getSelectedContent().getContent();
			if (control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap) {
				if (this.getShowSelection()) {
					if (this._selectionState === "LASSO") {
						control.setLassoSelection(true);
					} else if (this._selectionState === "RECT") {
						control.setRectangularSelection(true);
					} else if (this._selectionState === "SINGLE") {
						control.setRectangularSelection(false);
						control.setLassoSelection(false);
					}
				}
			}
		}
	};

	ContainerBase.prototype.onBeforeRendering = function() {
		if (this._contentChanged) {
			this._contentChange();
		}
		// re-populate toolbar content according current settings
		this._oToolbar.removeAllContent();
		this._addToolbarContent();
	};

	/**
	 * Display title
	 *
	 * @param {string} sValue the title
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.setTitle = function(sValue) {
		this._oContTitle.setText(sValue);
		this.setProperty("title", sValue, true);
	};

	/**
	 * add container content - map, table..
	 *
	 * @param {sap.ui.vk.ContainerContent} oObject content object to add
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.addContent = function(oObject) {
		this.addAggregation("content", oObject);
		this._contentChanged = true;
	};

	/**
	 * insert container content - map, table..
	 *
	 * @param {sap.ui.vk.ContainerContent} oObject content object to insert
	 * @param {int} iIndex index in the content aggregation where to insert the new content object
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ContainerBase.prototype.insertContent = function(oObject, iIndex) {
		this.insertAggregation("content", oObject, iIndex);
		this._contentChanged = true;
	};

	/**
	 * update chartcontainer content
	 */
	ContainerBase.prototype.updateContent = function() {
		this.updateAggregation("content");
		this._contentChanged = true;
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	/**
	 * Toggle normal and full screen mode
	 *
	 * @private
	 */
	ContainerBase.prototype._toggleFullScreen = function() {
		var fullScreen = this.getProperty("fullScreen");
		var sId;
		var sHeight;
		var oContent;
		if (fullScreen) {
			this._closeFullScreen();
			this.setProperty("fullScreen", false, true);
			oContent = this.getSelectedContent().getContent();
			sId = oContent.getId();
			oContent.setWidth("100%");
			sHeight = this._contentHeight[sId];
			if (sHeight) {
				oContent.setHeight(sHeight);
			}
			this.invalidate();
		} else {
			var aObjects = this.getAggregation("content");
			this._contentHeight = {};
			if (aObjects) {
				for (var i = 0; i < aObjects.length; i++) {
					oContent = aObjects[i].getContent();
					sId = oContent.getId();
					if (jQuery.isFunction(oContent.getHeight)) {
						sHeight = oContent.getHeight();
					} else {
						sHeight = 0;
					}
					this._contentHeight[sId] = sHeight;
				}
			}
			// fix content disappear when toggle content with full screen button
			// by surpressing the invalid for the setProperty, this delay shouldn't be needed.
			this._openFullScreen(true);
			this.setProperty("fullScreen", true, true);
		}
		var sIcon = (fullScreen ? "sap-icon://full-screen" : "sap-icon://exit-full-screen");
		this._oFullScreenButton.setIcon(sIcon);
		this._oFullScreenButton.focus();
	};

	/**
	 * Open Container content with Full Screen
	 *
	 * @param {boolean} bNeedsScroll add scrolling to full screen display
	 * @private
	 */
	ContainerBase.prototype._openFullScreen = function(bNeedsScroll) {
		if ((bNeedsScroll !== null) && (bNeedsScroll === true)) {
			this._oScrollEnablement = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-wrapper", {
				horizontal: true,
				vertical: true
			});
		}
		this.$content = this.$();
		if (this.$content) {
			this.$tempNode = jQuery("<div></div>"); // id='" + this.$content.attr("id")+"-overlay"+ "'
			this.$content.before(this.$tempNode);
			this._$overlay = jQuery("<div id='" + jQuery.sap.uid() + "'></div>");
			this._$overlay.addClass("sapUiVkContainerBaseOverlay");
			this._$overlay.append(this.$content);
			this._oPopup.setContent(this._$overlay);
		} else {
			jQuery.sap.log.warn("Overlay: content does not exist or contains more than one child");
		}
		this._oPopup.open(200, undefined, undefined, jQuery("body"));
	};

	/**
	 * Close Full Screen and return to normal mode
	 */
	ContainerBase.prototype._closeFullScreen = function() {
		if (this._oScrollEnablement !== null) {
			this._oScrollEnablement.destroy();
			this._oScrollEnablement = null;
		}
		this.$tempNode.replaceWith(this.$content);
		this._oToolbar.setDesign(sap.m.ToolbarDesign.Auto);
		this._oPopup.close();
		this._$overlay.remove();
	};

	/**
	 * Height change when toggle full and normal model mobile swap between portrait and Landscape will execute height change too
	 */
	ContainerBase.prototype._performHeightChanges = function() {
		if (this.getAutoAdjustHeight() || this.getFullScreen()) {
			var $this = this.$();
			// Only adjust height after both toolbar and content area are rendered in DOM
			if (($this.find(".sapUiVkContainerBaseToolbarArea").children()[0]) && ($this.find(".sapUiVkContainerBaseContentArea").children()[0])) {
				// var iContainerHeight = $this.height();
				// var iToolbarHeight = $this.find('.sapUiVkContainerBaseToolbarArea').children()[0].clientHeight;
				// var iToolbarBottomBorder = Math.round(parseFloat($this.find('.sapUiVkContainerBaseToolbarArea').children().css("border-bottom")));
				// var iNewHeight = iContainerHeight - iToolbarHeight - iToolbarBottomBorder;
				// var iExisitngHeight = $this.find('.sapUiVkContainerBaseContentArea').children()[0].clientHeight;
				var oinnerContent = this.getSelectedContent().getContent();
				if (oinnerContent.getDomRef().offsetWidth !== this.getDomRef().clientWidth) {
					// For table/non-vizFrame case, if width changes during resize event, force a rerender to have it fit 100% width
					this.rerender();
				}
			}
		}
	};

	/**
	 * Switch Content
	 *
	 * @param {string} sContentId id of the content object
	 * @private
	 */
	ContainerBase.prototype._switchContent = function(sContentId) {

		var oContent = this._findContentById(sContentId);

		this.setSelectedContent(oContent);

		this.fireContentChange({
			selectedItemId: sContentId
		}); // fire the change event with id of the newly selected item..
		this.rerender();// invalidate();
	};

	/**
	 * collect all content and repopulate content segmented button
	 */
	ContainerBase.prototype._contentChange = function() {
		var aContent = this.getContent();
		// remove and detroy all buttons for old content
		this._oContentSegmentedButton.removeAllButtons();
		this._destroyButtons(this._aContentIcons);

		this._aContentIcons = [];
		if (aContent.length === 0) {
			this._oContentSegmentedButton.removeAllButtons();
			this._setDefaultOnSegmentedButton();
			this.switchContent(null);
		}
		if (aContent) {
			for (var i = 0; i < aContent.length; i++) {
				var innerContent = aContent[i].getContent();
				if (innerContent.setWidth) {
					innerContent.setWidth("100%");
				}
				var oButton = new sap.m.SegmentedButtonItem({
					icon: aContent[i].getIcon(),
					tooltip: aContent[i].getTitle(),
					key: innerContent.getId()
				});
				this._aContentIcons.push(oButton);
				this._oContentSegmentedButton.addItem(oButton);
				if (i === 0) {
					this.setSelectedContent(aContent[i]);
				}
			}
		}

		this._contentChanged = false;
	};

	ContainerBase.prototype._onContentButtonSelect = function(oEvent) {
		var sContentId = oEvent.getParameter("key");
		this._switchContent(sContentId);
	};

	/**
	 * get content to display by id
	 *
	 * @param {string} sId id of the content object
	 * @returns {sap.ui.vk.ContainerContent} content object found for given id
	 */
	ContainerBase.prototype._findContentById = function(sId) {
		var aContent = null;
		var aObjects = this.getAggregation("content");
		if (aObjects) {
			for (var i = 0; !aContent && i < aObjects.length; i++) {
				if (aObjects[i].getContent().getId() === sId) {
					aContent = aObjects[i];
				}
			}
		}
		return aContent;
	};

	/**
	 * adjusts customizable buttons of overflow toolbar, displays content buttons
	 * @protected
	 */
	ContainerBase.prototype._addToolbarContent = function() {
		this._oToolbar.addContent(new sap.m.ToolbarSpacer()); // right align remaining content

		if (this._aContentIcons.length > 1) {
			this._oToolbar.addContent(this._oContentSegmentedButton);
		}

		if (this.getSelectedContent() !== null) {
			var control = this.getSelectedContent().getContent();
			if (control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap) {
				if (this.getShowSelection()) {
					this._oToolbar.addContent(this._selectionMenu);
				}
			}
		}

		if (this.getShowSettings()) {
			this._oToolbar.addContent(this._oSettingsButton);
		}
		if (!Device.system.phone && this.getShowFullScreen()) {
			this._oToolbar.addContent(this._oFullScreenButton);
		}
	};

	/**
	 * The first button inside the segmented button is only set as default if the user did not click explicitly on another button inside the segmented
	 * button
	 *
	 * @private
	 */
	ContainerBase.prototype._setDefaultOnSegmentedButton = function() {
		if (!this._bSegmentedButtonSaveSelectState) {
			this._oContentSegmentedButton.setSelectedButton(null);
		}
		this._bSegmentedButtonSaveSelectState = false;
	};

	/**
	 * Buttons which are not needed anymore are destroyed here.
	 *
	 * @param {array} buttons The buttons which need to be destroyed.
	 * @private
	 */
	ContainerBase.prototype._destroyButtons = function(buttons) {
		buttons.forEach(function(oButton) {
			oButton.destroy();
		});
	};

	ContainerBase.prototype._handleSelection = function(mode) {
		var control = this.getSelectedContent().getContent();
		if (control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap) {
			if (mode === "LASSO") {
				control.setLassoSelection(true);
				this._selectionState = mode;
			} else if (mode === "RECT") {
				control.setRectangularSelection(true);
				this._selectionState = mode;
			} else if (mode === "SINGLE") {
				control.setRectangularSelection(false);
				control.setLassoSelection(false);
				this._selectionState = mode;
			}
		}

	};

	return ContainerBase;

});

}; // end of sap/ui/vk/ContainerBase.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContainerContent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ContainerContent.
jQuery.sap.declare('sap.ui.vk.ContainerContent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContainerContent",[
	"./library", "sap/ui/core/Control"
], function(library, Control) {
	"use strict";

	/**
	 * Constructor for a new ContainerContent.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation element for the Container Base
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ContainerContent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContainerContent = Control.extend("sap.ui.vk.ContainerContent", /** @lends sap.ui.vk.ContainerContent.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Icon to show up in the toolbar
				 */
				"icon": {
					type: "string",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * Title for the icon in the toolbar
				 */
				"title": {
					type: "string",
					group: "Misc",
					defaultValue: null
				}
			},
			aggregations: {
				"content": {
					type: "sap.ui.core.Control",
					multiple: false
				}
			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// ContainerContent.prototype.init = function(){
	// // do something for initialization...
	// };

	ContainerContent.prototype.setContent = function(oContent) {
		if (oContent instanceof sap.ui.vbm.GeoMap) {
			oContent.setNavcontrolVisible(false);
			oContent.setWidth("100%");
			oContent.setHeight("100%");
		}
		this.setAggregation("content", oContent);
		return this;
	};

	return ContainerContent;

});

}; // end of sap/ui/vk/ContainerContent.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContentConnector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides object sap.ui.vk.ContentConnector.
jQuery.sap.declare('sap.ui.vk.ContentConnector'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObjectObserver'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContentConnector",[
	"jquery.sap.global", "sap/ui/base/ManagedObjectObserver", "sap/ui/core/Element", "./Messages", "./Core"
], function(jQuery, ManagedObjectObserver, Element, Messages, VkCore) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * Constructor for a new ContentConnector.
	 *
	 * @class
	 * Provides an object that owns content resources, tracks their changes and loads and destroys the content built
	 * from the content resources.
	 *
	 * @param {string} [sId] ID for the new ContentConnector object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ContentConnector object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Element
	 * @alias sap.ui.vk.ContentConnector
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContentConnector = Element.extend("sap.ui.vk.ContentConnector", /** @lends sap.ui.vk.ContentConnector.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			publicMethods: [
				"getContent",
				"getContentManager"
			],

			aggregations: {
				/**
				 * Content resources to load and display.
				 */
				contentResources: {
					type: "sap.ui.vk.ContentResource",
					bindable: "bindable"
				},

				/**
				 * View state managers.
				 */
				viewStateManagers: {
					type: "sap.ui.vk.ViewStateManager"
				},

				/**
				 * Content managers.
				 * @private
				 */
				contentManagers: {
					type: "sap.ui.vk.ContentManager",
					visibility: "hidden"
				}
			},

			defaultAggregation: "contentResources",

			events: {
				/**
				 * This event will be fired when content resource changes are about to be processed.
				 */
				contentChangesStarted: {
					parameters: {
					}
				},

				/**
				 * This event will be fired when any content resource or the contentResources aggregation has been changed and processed.
				 */
				contentChangesFinished: {
					parameters: {
						/**
						 * The content created or updated.
						 *
						 * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
						 */
						content: {
							type: "any"
						},

						/**
						 * The failure reason if any.<br>
						 * An single element or an array of elements with the following structure:
						 * <ul>
						 *   <li>error - An oject with details of the error.
						 *   <li>contentResource - A {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} object when it is possible to
						 *       match the Error object to a {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} object.
						 * </ul>
						 */
						failureReason: {
							type: "any"
						}
					}
				},

				/**
				 * This event will be fired to report the progress of content changes.
				 */
				contentChangesProgress: {
					parameters: {
						/**
						 * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc.
						 * It might be null if reporting this parameter does not make sense.
						 */
						phase: {
							type: "string"
						},

						/**
						 * The overall percentage of the loading process.
						 */
						percentage: {
							type: "float"
						},

						/**
						 * The content resource currently being loaded. It might be null if reporting this parameter does not make sense.
						 */
						source: {
							type: "any"
						}
					}
				},

				/**
				 * This event will be fired when the current content is completely rebuilt or destroyed
				 * as a result of changes in content resources.
				 */
				contentReplaced: {
					parameters: {
						/**
						 * New content.
						 *
						 * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
						 */
						newContent: {
							type: "any"
						},

						/**
						 * Old content.
						 *
						 * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
						 */
						oldContent: {
							type: "any"
						}
					}
				},

				/**
				 * This event will be fired when the current content is about to be destroyed.
				 */
				contentDestroying: {
					parameters: {
						/**
						 * The content to be destroyed.
						 *
						 * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
						 */
						content: {
							type: "any"
						},

						/**
						 * Returns a <code>function(prevent: boolean)</code> with one boolean parameter.
						 * To prevent garbage collection after the content is destroyed call this function
						 * passing <code>true</code> as a parameter.
						 */
						preventGarbageCollection: {
							type: "function"
						}
					}
				}
			}
		}
	});

	sap.ui.vk.getCore().registerClass(ContentConnector);

	var basePrototype = ContentConnector.getMetadata().getParent().getClass().prototype;

	ContentConnector.prototype.isTreeBinding = function(name) {
		return name === "contentResources";
	};

	ContentConnector.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._inLoading = false;                            // Set to true when the content is being loaded. The flag is used to prevent
		                                                    // attempts to load additional content during the loading process.
		this._delayContentResourcesUpdate = false;          // Set to true if there was a request to update content resources when
		                                                    // the previous update has not finished yet.
		this._scheduleContentResourcesUpdateTimerId = null; // The timer used to schedule content resources updates.
		this._content = null;                               // The current content.
		this._contentManager = null;                        // The current content manager.

		this._selfObserver = new ManagedObjectObserver(this._observeChanges.bind(this));
		this._selfObserver.observe(this, { aggregations: [ "contentResources", "viewStateManagers" ] });
	};

	ContentConnector.prototype.exit = function() {
		this._selfObserver.disconnect();
		this._selfObserver = null;

		// Cancel the delayed call if any.
		if (this._scheduleContentResourcesUpdateTimerId) {
			jQuery.sap.clearDelayedCall(this._scheduleContentResourcesUpdateTimerId);
			this._scheduleContentResourcesUpdateTimerId = null;
		}

		// Do not schedule new updates when the previous one finishes.
		this._delayContentResourcesUpdate = false;

		this._setContent(null, null);
		// Content managers in the contentManagers aggregation will be destroyed automatically.

		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	ContentConnector.prototype._observeChanges = function(change) {
		if (change.name === "contentResources") {
			this._scheduleContentResourcesUpdate();
		} else if (change.name === "viewStateManagers") {
			if (change.mutation === "insert") {
				change.child.setContentConnector(this);
			} else if (change.mutation === "remove") {
				change.child.setContentConnector(null);
			}
		}
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: handle content resources

	ContentConnector.prototype.invalidate = function(origin) {
		if (sap.ui.vk.ContentResource && origin instanceof sap.ui.vk.ContentResource) {
			this._scheduleContentResourcesUpdate();
			return;
		}
		basePrototype.invalidate.apply(this, arguments);
	};

	/*
	 * Schedules an update of the content resource hierarchy.
	 *
	 * @returns {sap.ui.vk.ContentConnector} <code>this</code> to allow method chaining.
	 * @private
	 */
	ContentConnector.prototype._scheduleContentResourcesUpdate = function() {
		if (this._inLoading) {
			// Postpone content update until the current process has finished.
			this._delayContentResourcesUpdate = true;
			return this;
		}

		if (!this._scheduleContentResourcesUpdateTimerId) {
			this._scheduleContentResourcesUpdateTimerId = jQuery.sap.delayedCall(0, this, function() {
				// The delayed call is invoked once. Reset the ID to indicate that there is no pending delayed call.
				this._scheduleContentResourcesUpdateTimerId = null;

				var contentResources = this.getContentResources();

				if (contentResources.length > 0) {
					this._collectContentResourceSourceTypeInformation(contentResources).then(function(info) {
						if (info.dimensions.length > 1) {
							jQuery.sap.delayedCall(0, this, function() {
								this.fireContentChangesStarted();
								this._setContent(null, null);
								this.fireContentChangesFinished({
									content: null,
									failureReason: {
										errorMessage: sap.ui.vk.getResourceBundle().getText(Messages.VIT17.cause)
									}
								});
								log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT17.summary), Messages.VIT17.code, "sap.ui.vk.ContentConnector");
							});
						} else if (info.contentManagerClassNames.length > 1) {
							jQuery.sap.delayedCall(0, this, function() {
								this.fireContentChangesStarted();
								this._setContent(null, null);
								this.fireContentChangesFinished({
									content: null,
									failureReason: {
										errorMessage: sap.ui.vk.getResourceBundle().getText(Messages.VIT35.cause)
									}
								});
								log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT35.summary), Messages.VIT35.code, "sap.ui.vk.ContentConnector");
							});
						} else if (info.contentManagerClassNames.length === 0) {
							jQuery.sap.delayedCall(0, this, function() {
								this.fireContentChangesStarted();
								this._setContent(null, null);
								// Unsupported file format throws error VIEWER_UNKNOWN_CONTENT_RESOURCE_TYPE_CAUSE = VIT36.
								this.fireContentChangesFinished({
									content: null,
									failureReason: {
										errorMessage: sap.ui.vk.getResourceBundle().getText(Messages.VIT36.cause)
									}
								});
								log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT36.summary), Messages.VIT36.code, "sap.ui.vk.ContentConnector");
							});
						} else if (info.contentManagerClassNames.length === 1) {
							var contentManager = this._getContentManagerByClassName(info.contentManagerClassNames[0]);
							if (contentManager !== this._contentManager) {
								this._setContent(null, null);
							}
							contentManager.loadContent(this._content, contentResources);
						}
					}.bind(this));
				} else {
					jQuery.sap.delayedCall(0, this, function() {
						this.fireContentChangesStarted();
						this._setContent(null, null);
						this.fireContentChangesFinished({
							content: null
						});
					});
				}
			});
		}
		return this;
	};

	// END: handle content resources
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: handle content loading

	ContentConnector.prototype._handleContentChangesStarted = function(event) {
		this._inLoading = true;
		this.fireContentChangesStarted();
	};

	ContentConnector.prototype._handleContentChangesFinished = function(event) {
		var content = event.getParameter("content");
		this._setContent(content, event.getSource());
		this.fireContentChangesFinished({
			content: content,
			failureReason: event.getParameter("failureReason")
		});
		this._inLoading = false;
		if (this._delayContentResourcesUpdate) {
			this._delayContentResourcesUpdate = false;
			this._scheduleContentResourcesUpdate();
		}
	};

	ContentConnector.prototype._handleContentChangesProgress = function(event) {
		this.fireContentChangesProgress({
			phase: event.getParameter("phase"),
			source: event.getParameter("source"),
			percentage: event.getParameter("percentage")
		});
	};

	// END: handle content loading
	////////////////////////////////////////////////////////////////////////////

	/**
	 * Gets or creates a content manager object based on its class name.
	 * @param {string} className The name of the content manager class.
	 * @returns {sap.ui.vk.ContentManager} The content manager object that implements the {@link sap.ui.vk.ContentManager sap.ui.vk.ContentManager} interface.
	 * @private
	 * @since 1.50.0
	 */
	ContentConnector.prototype._getContentManagerByClassName = function(className) {
		var contentManager,
		    contentManagers = this.getAggregation("contentManagers", []);
		// Find an existing content manager.
		for (var i = 0, count = contentManagers.length; i < count; ++i) {
			contentManager = contentManagers[i];
			if (contentManager.getMetadata().getName() === className) {
				return contentManager;
			}
		}
		// Create a new content manager.
		jQuery.sap.require(className);
		contentManager = new (jQuery.sap.getObject(className));
		this.addAggregation("contentManagers", contentManager);
		contentManager.attachContentChangesStarted(this._handleContentChangesStarted, this);
		contentManager.attachContentChangesFinished(this._handleContentChangesFinished, this);
		contentManager.attachContentChangesProgress(this._handleContentChangesProgress, this);
		return contentManager;
	};

	/**
	 * Gets the content currently loaded.
	 *
	 * @returns {any} The content loaded. It can be HTMLImageElement, sap.ui.vk.Scene etc.
	 * @public
	 * @since 1.50.0
	 */
	ContentConnector.prototype.getContent = function() {
		return this._content;
	};

	/**
	 * Gets the content connector used to load the current content.
	 *
	 * @returns {sap.ui.vk.ContentManager} The content connector used to load the current content.
	 * @public
	 * @since 1.50.0
	 */
	ContentConnector.prototype.getContentManager = function() {
		return this._contentManager;
	};

	/**
	 * Sets the new content.
	 *
	 * @param {any}                          newContent        The new content. It can be HTMLImageElement, sap.ui.vk.Scene etc.
	 * @param {sap.ui.vk.ContentManagerBase} newContentManager The content manager to handle the new content.
	 * @returns {sap.ui.vk.ContentConnector} <code>this</code> to allow method chaining.
	 * @private
	 */
	ContentConnector.prototype._setContent = function(newContent, newContentManager) {
		var oldContent = this._content,
		    oldContentManager = this._contentManager;

		if (oldContent !== newContent) {
			this._content = newContent;
			this._contentManager = newContentManager;

			this.fireContentReplaced({
				oldContent: oldContent,
				newContent: newContent
			});

			if (oldContent) {
				var preventGC = false;
				// Should it be called before contentReplaced?
				this.fireContentDestroying({
					content: oldContent,
					preventGarbageCollection: function(value) {
						preventGC = value;
					}
				});
				oldContentManager.destroyContent(oldContent);
				if (!preventGC) {
					oldContentManager.collectGarbage();
				}
			}
		}

		return this;
	};

	var resolvers = [
		{
			pattern: /(^threejs[:.])|(^(threejs|stream)$)/,
			dimension: 3,
			contentManagerClassName: "sap.ui.vk.threejs.ContentManager"
		},
		{
			pattern: /^vdsl?$/,
			dimension: 3,
			contentManagerClassName: "sap.ui.vk.dvl.ContentManager"
		},
		{
			pattern: /^(png|jpg|gif|bmp|tiff?|svg)$/,
			dimension: 2,
			contentManagerClassName: "sap.ui.vk.ImageContentManager"
		},
		{
			pattern: "cgm",
			dimension: 2,
			contentManagerClassName: "sap.ui.vk.dvl.ContentManager"
		}
	];

	/**
	 * Gets content manager class name, dimension and settings associated with the content resource.
	 *
	 * @param {sap.ui.vk.ContentResource} contentResource The content resource to test.
	 * @returns {Promise} {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise} that
	 *     resolves with a value with the following structure:
	 *     <pre>
	 *         dimension:           int
	 *         contentManagerClass: string,
	 *         settings:            object
	 *     </pre>
	 * @private
	 */
	var resolveContentManager = function(contentResource) {
		return new Promise(function(resolve, reject) {
			var entries = resolvers.slice();
			var test = function(index) {
				if (index >= entries.length) {
					reject();
					return;
				}
				var resolver = entries[index];
				(function() {
					if (typeof resolver === "function") {
						return resolver(contentResource);
					} else if (typeof resolver.pattern === "string") {
						if (resolver.pattern === contentResource.getSourceType()) {
							return Promise.resolve(resolver);
						}
					} else if (resolver.pattern instanceof RegExp) {
						if (resolver.pattern.test(contentResource.getSourceType())) {
							return Promise.resolve(resolver);
						}
					}
					// Skip to the next resolver.
					return Promise.reject();
				})().then(
					function(value) { // onFulfilled
						resolve({
							dimension: value.dimension,
							contentManagerClassName: value.contentManagerClassName,
							settings: value.settings
						});
					},
					function() {      // onRejected
						test(index + 1);
					}
				);
			};
			test(0);
		});
	};

	/**
	 * Adds a new content manager resolver.
	 *
	 * The last added resolver will be executed the first.
	 *
	 * Content manager resolver analyzes the content resource definition and returns the type of the content manager to use for loading
	 * the content resource.
	 *
	 * The simplest resolver tests the content resource source type. The test can be either a string comparison or a regular expression.
	 *
	 * A more sofisticated resolver is a function that can use the full content resource definition to find a proper content manager dynamically,
	 * e.g. the resolver can use the 'HEAD' HTTP request to get the 'Content-Type' header to find out the type of the content resource.
	 *
	 * @example <caption>Add a new content manager resolver based on string comparison of the sourceType property of the content resource.</caption>
	 * <pre>
	 *     sap.ui.vk.ContentConnector.addContentManagerResolver({
	 *         pattern: "vds",
	 *         dimension: 3,
	 *         contentManagerClassName: "sap.ui.vk.dvl.ContentManager"
	 *     });
	 * </pre>
	 *
	 * @example <caption>Add a new content manager resolver based on regular expression test of the sourceType property of the content resource.</caption>
	 * <pre>
	 *     sap.ui.vk.ContentConnector.addContentManagerResolver({
	 *         pattern: /^(png|jpg|gif|bmp|tiff?|svg)$/,
	 *         dimension: 2,
	 *         contentManagerClassName: "sap.ui.vk.ImageContentManager"
	 *     });
	 * </pre>
	 *
	 * @example <caption>Add a new content manager resolver that makes a 'HEAD' HTTP request and checks the Content-Type header.</caption>
	 * <pre>
	 *     var loadCollada = function(parentNode, contentResource) {
	 *         return new Promise(function(resolve, reject) {
	 *             sap.ui.require(["sap/ui/vk/threejs/thirdparty/ColladaLoader"], function(ColladaLoader) {
	 *                 new THREE.ColladaLoader().load(contentResource.getSource(),
	 *                     function(collada) { // onload
	 *                         parentNode.add(collada.scene);
	 *                         resolve({
	 *                             node: parentNode,
	 *                             contentResource: contentResource
	 *                         });
	 *                     },
	 *                     null,   // onprogress
	 *                     reject  // onfail
	 *                 );
	 *             });
	 *         });
	 *     };
	 *
	 *     var resolveContentManager = function(contentResource) {
	 *         if (sap.ui.core.URI.isValid(contentResource.getSource())) {
	 *             return new Promise(function(resolve, reject) {
	 *                 var xhr = new XMLHttpRequest();
	 *                 xhr.onerror = function(event) {
	 *                     reject();
	 *                 };
	 *                 xhr.onload = function(event) {
	 *                     if (xhr.status === 200 && xhr.getResponseHeader("Content-Type") === "model/vnd.collada+xml") {
	 *                         resolve({
	 *                             dimension: 3,
	 *                             contentManagerClassName: "sap.ui.vk.threejs.ContentManager",
	 *                             settings: {
	 *                                 loader: loadCollada
	 *                             }
	 *                         });
	 *                     } else {
	 *                         reject();
	 *                     }
	 *                 };
	 *                 xhr.open("HEAD", contentResource.getSource(), true);
	 *                 xhr.send(null);
	 *             });
	 *         } else {
	 *             return Promise.reject();
	 *         }
	 *     };
	 *
	 *     sap.ui.vk.ContentConnector.addContentManagerResolver(resolveContentManager);
	 * </pre>
	 *
	 * @example <caption>Add a new content manager resolver to load content resources with three.js objects.</caption>
	 * <pre>
	 *     var loadThreeJSObject = function(parentNode, contentResource) {
	 *         parentNode.add(contentResource.getSource());
	 *         return Promise.resolve({
	 *             node: parentNode,
	 *             contentResource: contentResource
	 *         });
	 *     };
	 *
	 *     var resolveThreeJSContentResource = function(contentResource) {
	 *         if (contentResource.getSource() instanceof THREE.Object3D) {
	 *             return Promise.resolve({
	 *                 dimension: 3,
	 *                 contentManagerClassName: "sap.ui.vk.threejs.ContentManager",
	 *                 settings: {
	 *                     loader: loadThreeJSObject
	 *                 }
	 *             });
	 *         } else {
	 *             return Promise.reject();
	 *         }
	 *     };
	 *
	 *     ContentConnector.addContentManagerResolver(resolveThreeJSContentResource);
	 *
	 *     var torusGeometry = new THREE.TorusGeometry(10, 3, 16, 100);
	 *     var torus = new THREE.Object3D()
	 *         .add(new THREE.LineSegments(
	 *             torusGeometry,
	 *             new THREE.LineBasicMaterial({
	 *                 color: 0xffffff,
	 *                 transparent: true,
	 *                 opacity: 0.5
	 *             })
	 *         ))
	 *         .add(new THREE.Mesh(
	 *             torusGeometry,
	 *             new THREE.MeshPhongMaterial({
	 *                 color: 0x156289,
	 *                 emissive: 0x072534,
	 *                 side: THREE.DoubleSide,
	 *                 shading: THREE.FlatShading
	 *             })
	 *         ));
	 *
	 *     contentConnector.addContentResource(
	 *         new ContentResource({
	 *             source: torus,
	 *             sourceId: "abc",
	 *             name: "Torus"
	 *         })
	 *     );
	 * </pre>
	 *
	 * @param {function|object} resolver Object that defines how to find out the content manager class name.<br>
	 *     If <code>resolver</code> is a function then this function takes one parameter of type {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource}
	 *     and returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise} that resolves with
	 *     an object with the following properties:
	 *     <ul>
	 *       <li><code>dimension</code> - int - Dimension of the model. E.g. 2 or 3.</li>
	 *       <li><code>contentManagerClassName</code> - string - Name of content manager class to use for loading the content resource.</li>
	 *       <li><code>settings</code> - object - Optional settings specific to the content manager.<br>
	 *           See {@link sap.ui.vk.threejs.ContentManager sap.ui.vk.threejs.ContentManager}.</li>
	 *     </ul>
	 *     If <code>resolver</code> is an object then it has the following properties.
	 * @param {string|RegExp} [resolver.pattern] The pattern the {@link sap.ui.vk.ContentResource#getSourceType sourceType} property
	 *     of the content resource is compared with.
	 * @param {int} [resolver.dimension] Dimension of models of this source type. E.g. 2 or 3.<br/>
	 * @param {string} [resolver.contentManagerClassName] Name of the content manager class to use for loading content resources of this type.
	 *     E.g. sap.ui.vk.dvl.ContentManager, sap.ui.vk.threejs.ContentManager, sap.ui.vk.ImageContentManager.
	 * @param {object} [resolver.settings] Optional settings specific to the content manager class.
	 * @returns {function} The {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector} class to allow method chaining.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentConnector.addContentManagerResolver = function(resolver) {
		if (typeof resolver === "function") {
			resolvers.unshift(resolver);
		} else {
			resolvers.unshift({
				pattern: resolver.pattern,
				dimension: resolver.dimension,
				contentManagerClassName: resolver.contentManagerClassName,
				settings: resolver.settings
			});
		}
		return this;
	};

	/**
	 * Removes all content manager resolvers.
	 *
	 * @returns {function} The {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector} class to allow method chaining.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentConnector.removeAllContentManagerResolvers = function() {
		resolvers = [];
		return this;
	};

	/**
	 * Removes a content manager resolver.
	 *
	 * If there are more than one content manager resolver matching the <code>resolver</code> the last added is removed.
	 *
	 * @param {function|string|RegExp} resolver Object that defines how to find out the content manager class name.
	 * @returns {boolean} <code>true</code> if a matching resolver is found and removed, <code>false</code> otherwise.
	 * @public
	 * @static
	 * @since 1.50.0
	 */
	ContentConnector.removeContentManagerResolver = function(resolver) {
		var isFunction = typeof resolver === "function",
		    isString = typeof resolver === "string",
		    isRegExp = resolver instanceof RegExp;
		for (var i = 0, count = resolvers.length; i < count; ++i) {
			if (isFunction || isString) {
				if (resolvers[i] === resolver) {
					resolvers.splice(i, 1);
					return true;
				}
			} else if (isRegExp) {
				if (typeof resolvers[i] === "object" && resolvers[i].pattern instanceof RegExp && resolvers[i].pattern.source === resolver.source) {
					resolvers.splice(i, 1);
					return true;
				}
			}

		}
		return false;
	};

	/**
	 * Collects information about content resource types.
	 *
	 * Content resources can be 2D and 3D models. Depending of content type different rendering technologies
	 * should be used, e.g. DVL, ThreeJS or native browser capabilities, e.g. for raster 2D files.
	 *
	 * This method has a side effect - it assigns content manager resolvers to the content resources.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources.
	 * @returns {Promise} Promise that resolves with a value with the following format:
	 * <pre>
	 *   {
	 *     noSourceTypes: boolean,                 // true if some of the content resources have no source types.
	 *     unknownSourceTypes: boolean,            // true if some of the content resources have unknown source types.
	 *     dimensions: [int, ...],                 // a list of distinct dimensions of the content resources.
	 *     contentManagerClassNames: [string, ...] // a list of distinct content manager class names.
	 *   }
	 * </pre>
	 * @private
	 * @since 1.50.0
	 */
	ContentConnector.prototype._collectContentResourceSourceTypeInformation = function(contentResources) {
		var noSourceTypes = false,
		    unknownSourceTypes = false,
		    dimensions = {},
		    contentManagerClassNames = {},
		    flatList = [];

		contentResources.forEach(function flatten(contentResource) {
			flatList.push(contentResource);
			contentResource.getContentResources().forEach(flatten);
		});

		return Promise.all(
				flatList.map(
					function(contentResource) {
						return resolveContentManager(contentResource)
							.then(
								function(resolver) { // onFulfilled
									dimensions[resolver.dimension] = true;
									contentManagerClassNames[resolver.contentManagerClassName] = true;
									return resolver;
								},
								function() { // onRejected
									if (contentResource.getSourceType()) {
										unknownSourceTypes = true;
									} else {
										noSourceTypes = true;
									}
									return false;
								}
							);
					}
				)
			)
			.then(function(results) {
				for (var i = 0, count = flatList.length; i < count; ++i) {
					if (results[i]) {
						// Assign the resolver to the content resource.
						// It might be used by those content managers that support additional settings.
						flatList[i]._contentManagerResolver = results[i];
					}
				}
				return {
					noSourceTypes: noSourceTypes,
					unknownSourceTypes: unknownSourceTypes,
					dimensions: Object.getOwnPropertyNames(dimensions).sort(),
					contentManagerClassNames: Object.getOwnPropertyNames(contentManagerClassNames)
				};
			});
	};

	var fullClassName = ContentConnector.getMetadata().getName();

	var mixin = {
		init: function() {
			this._contentConnector = null;
			sap.ui.vk.getCore()
				.attachEvent(fullClassName + "-created", this._handleContentConnectorCreated, this)
				.attachEvent(fullClassName + "-destroying", this._handleContentConnectorDestroying, this);
		},

		exit: function() {
			this.setContentConnector(null);
			sap.ui.vk.getCore()
				.detachEvent(fullClassName + "-destroying", this._handleContentConnectorDestroying, this)
				.detachEvent(fullClassName + "-created", this._handleContentConnectorCreated, this);
		},

		setContentConnector: function(contentConnector) {
			this.setAssociation("contentConnector", contentConnector, true);
			this._updateContentConnector();
			return this;
		},

		_updateContentConnector: function() {
			var newContentConnectorId = this.getContentConnector(),
			    // sap.ui.getCore() returns 'undefined' if cannot find an element,
			    // getContentConnector() returns 'null' if there is no connector.
			    newContentConnector = newContentConnectorId && sap.ui.getCore().byId(newContentConnectorId) || null;

			if (this._contentConnector !== newContentConnector) {
				this._clearContentConnector();
				if (newContentConnector) {
					if (this._handleContentChangesStarted) {
						newContentConnector.attachContentChangesStarted(this._handleContentChangesStarted, this);
					}
					if (this._handleContentChangesFinished) {
						newContentConnector.attachContentChangesFinished(this._handleContentChangesFinished, this);
					}
					if (this._handleContentChangesProgress) {
						newContentConnector.attachContentChangesProgress(this._handleContentChangesProgress, this);
					}
					if (this._handleContentReplaced) {
						newContentConnector.attachContentReplaced(this._handleContentReplaced, this);
					}
					if (this._handleContentDestroying) {
						newContentConnector.attachContentDestroying(this._handleContentDestroying, this);
					}
					this._contentConnector = newContentConnector;
					if (this._onAfterUpdateContentConnector) {
						this._onAfterUpdateContentConnector();
					}
				}
			}
			return this;
		},

		_clearContentConnector: function() {
			if (this._contentConnector) {
				if (this._onBeforeClearContentConnector) {
					this._onBeforeClearContentConnector();
				}
				if (this._handleContentDestroying) {
					this._contentConnector.detachContentDestroying(this._handleContentDestroying, this);
				}
				if (this._handleContentReplaced) {
					this._contentConnector.detachContentReplaced(this._handleContentReplaced, this);
				}
				if (this._handleContentChangesProgress) {
					this._contentConnector.detachContentChangesProgress(this._handleContentChangesProgress, this);
				}
				if (this._handleContentChangesFinished) {
					this._contentConnector.detachContentChangesFinished(this._handleContentChangesFinished, this);
				}
				if (this._handleContentChangesStarted) {
					this._contentConnector.detachContentChangesStarted(this._handleContentChangesStarted, this);
				}
				this._contentConnector = null;
			}
			return this;
		},

		_handleContentConnectorCreated: function(event) {
			if (this.getContentConnector() === event.getParameter("object").getId()) {
				this._updateContentConnector();
			}
		},

		_handleContentConnectorDestroying: function(event) {
			if (this.getContentConnector() === event.getParameter("object").getId()) {
				this._clearContentConnector();
			}
		}
	};

	ContentConnector.injectMethodsIntoClass = function(classObject) {
		var prototype = classObject.prototype,
		    init = prototype.init,
		    exit = prototype.exit;

		prototype.init = function() {
			if (init) {
				init.call(this);
			}
			mixin.init.call(this);
		};

		prototype.exit = function() {
			mixin.exit.call(this);
			if (exit) {
				exit.call(this);
			}
		};

		prototype.setContentConnector = mixin.setContentConnector;
		prototype._updateContentConnector = mixin._updateContentConnector;
		prototype._clearContentConnector = mixin._clearContentConnector;
		prototype._handleContentConnectorCreated = mixin._handleContentConnectorCreated;
		prototype._handleContentConnectorDestroying = mixin._handleContentConnectorDestroying;
	};

	return ContentConnector;
});

}; // end of sap/ui/vk/ContentConnector.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContentResource') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides class sap.ui.vk.ContentResource.
jQuery.sap.declare('sap.ui.vk.ContentResource'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContentResource",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	/**
	 * Constructor for a new ContentResource.
	 *
	 * @class
	 * Specifies a resource to load.

	 * @param {string} [sId] ID of the new content resource. <code>sId</code>is generated automatically if no non-empty ID is given.
	 *                       Note: this can be omitted, regardless of whether <code>mSettings</code> will be provided or not.
	 * @param {object} [mSettings] An optional map/JSON object with initial property values, aggregated objects etc. for the new content resource.
	 * @param {object} [oScope] scope An object for resolving string-based type and formatter references in bindings.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ContentResource
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContentResource = ManagedObject.extend("sap.ui.vk.ContentResource", /** @lends sap.ui.vk.ContentResource.prototype */ {
		metadata: {
			properties: {
				/**
				 * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the content resource/file to load from.
				 * The source may be omitted if a grouping node is needed.
				 */
				source: "any",

				/**
				 * The source type of the content resource. Valid types:
				 * <ul>
				 *   <li>vds</li>
				 *   <li>png</li>
				 *   <li>jpg</li>
				 *   <li>gif</li>
				 * </ul>
				 * The source type may be omitted if this is a grouping content node.
				 */
				sourceType: "string",

				/**
				 * The unique ID of the content resource.
				 */
				sourceId: "string",

				/**
				 * The local transformation matrix of the node created for this content resource.
				 */
				localMatrix: "sap.ui.vk.TransformationMatrix",

				/**
				 * The name of the node created for this content resource.
				 */
				name: "string",

				/**
				 * The password to use when opening the resource.
				 */
				password: "string"
			},

			aggregations: {
				/**
				 * Child content resources.
				 */
				contentResources: "sap.ui.vk.ContentResource"
			},

			publicMethods: [
				"getNodeProxy",
				"getSourceProperties"
			]
		},

		constructor: function(sId, mSettings, oScope) {
			ManagedObject.apply(this, arguments);
		}
	});

	ContentResource.prototype.isTreeBinding = function(name) {
		return name === "contentResources";
	};

	ContentResource.prototype.destroy = function() {
		ManagedObject.prototype.destroy.call(this);
	};

	ContentResource.prototype.setLocalMatrix = function(value) {
		var nodeProxy = this.getNodeProxy();
		if (nodeProxy) {
			nodeProxy.setLocalMatrix(value);
		}
		this.setProperty("localMatrix", value, true);
		return this;
	};

	/**
	 * Gets content resource source properties.
	 *
	 * The content resource source properties depend on the content resource source type. They are different for VDS and PNG for example.
	 * The list of possible source properties:
	 * <ul>
	 *   <li>version - object
	 *     <ul>
	 *       <li>major - number</li>
	 *       <li>minor - number</li>
	 *     </ul>
	 *   </li>
	 *   <li>compressed - boolean</li>
	 *   <li>encrypted - boolean</li>
	 * </ul>
	 * The source properties are optional and the list might be extended in future versions.
	 *
	 * @returns {object} A JSON like object containing the content resource source properties.
	 * @public
	 */
	ContentResource.prototype.getSourceProperties = function() {
		return this._shadowContentResource && this._shadowContentResource.sourceProperties || {};
	};

	/**
	 * Gets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
	 *
	 * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not set since
	 * the grouping node is not created, which means that there may be multiple top level nodes.
	 *
	 * @returns {sap.ui.vk.NodeProxy} The {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource if any, otherwise <code>null</code>.
	 * @public
	 */
	ContentResource.prototype.getNodeProxy = function() {
		return this._shadowContentResource && this._shadowContentResource.nodeProxy || null;
	};

	/**
	 * Collects content resource categories. The result is tested if the content resource hierarchy has the same category - 2D or 3D.
	 *
	 * @param {sap.ui.vk.ContentResource[]} resources The array of content resources.
	 * @returns {sap.ui.vk.ContentResourceSourceCategory[]} The array of distinct content resource categories.
	 * @static
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	ContentResource.collectCategories = function(resources) {
		var categories = [];
		var map = {};

		function getResourceCategory(resource) {
			var sourceType = (resource.getSourceType() || "").toLowerCase();
			if (sourceType) {
				var category = sap.ui.vk.ContentResourceSourceTypeToCategoryMap[sourceType] || "unknown";
				if (!map.hasOwnProperty(category)) {
					map[category] = true;
					categories.push(category);
				}
			}
			resource.getContentResources().forEach(getResourceCategory);
		}

		resources.forEach(getResourceCategory);

		return categories;
	};

	return ContentResource;
});

}; // end of sap/ui/vk/ContentResource.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DockContainer') ) {
jQuery.sap.declare('sap.ui.vk.DockContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DockContainer",[
	"jquery.sap.global", "./library", "sap/ui/core/Control"
], function(jQuery, library, Control) {
	"use strict";

	var DockContainer = Control.extend("sap.ui.vk.DockContainer", {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"getMinimumWidth",
				"getMinimumHeight",
				"setOrientation",
				"getOrientation",
				"removeChild",
				"addChild",
				"resize",
				"getSplitterPosition",
				"setSplitterPosition",
				"update"
			],

			properties: {
			},

			events: {
				dock: {
					parameters: {
						pane: {
							type: "object"
						}
					}
				},

			undock: {
					parameters: {
						pane: {
							type: "object"
						}
					}
				}
			}
		},

		constructor: function(dm, parent, index) {
			if (typeof DockContainer._counter == "undefined") {
				DockContainer._counter = 0;
			}
			this._id = "DockContainer_" + DockContainer._counter;
			DockContainer._counter++;

			var x = 0, y = 0, w = dm._elem.offsetWidth, h = dm._elem.offsetHeight;

			if (parent) {
				w = parent._elem.offsetWidth;
				h = parent._elem.offsetHeight;
			}

			var elem = document.createElement("div");
			elem.setAttribute("id", this._id);
			elem.style.position = "absolute";
			elem.style.left = x + "px";
			elem.style.top = y + "px";
			elem.style.width = w + "px";
			elem.style.height = h + "px";
			elem.style.backgroundColor = "blue";
			elem.style.zIndex = 30;

			var splitter = document.createElement("div");
			splitter.setAttribute("id", this._id + "_splitter");
			splitter.style.position = "absolute";
			splitter.style.opacity = 0;
			splitter.style.backgroundColor = "blue";
			splitter.style.zIndex = 60;
			splitter.style.visibility = "hidden";

			this._elem = elem;
			this._splitter = splitter;
			this._manager = dm;
			this._parent = parent;
			this._left = null;
			this._right = null;
			this._dir = 0;	// 0: Vertical, 1: Horizontal

			this._elem.appendChild(this._splitter);

			dm.addDockContainer(parent, this, index);
		}
	});

	DockContainer.prototype._setRect = function(elem, x, y, w, h) {
		elem.style.left = x + "px";
		elem.style.top = y + "px";
		if (w != null) {
			elem.style.width = w + "px";
		}
		if (h != null) {
			elem.style.height = h + "px";
		}
	};

	DockContainer.prototype.getMinimumWidth = function() {
		var w = 0;
		if (this._left != null) {
			w = this._left.getMinimumWidth();
		}
		if (this._right != null) {
			var w2 = this._right.getMinimumWidth();
			if (this._dir == 0) {
				if (w > w2) {
					w = w2;
				}
			} else {
				w += w2;
			}
		}
		return w;
	};

	DockContainer.prototype.getMinimumHeight = function() {
		var h = 0;
		if (this._left != null) {
			h = this._left.getMinimumHeight();
		}
		if (this._right != null) {
			var h2 = this._right.getMinimumHeight();
			if (this._dir == 1) {
				if (h > h2) {
					h = h2;
				}
			} else {
				h += h2;
			}
		}
		return h;
	};

	DockContainer.prototype.setOrientation = function(dir) {
		this._dir = dir;
		this.update();
	};

	DockContainer.prototype.getOrientation = function() {
		return this._dir;
	};

	DockContainer.prototype.removeChild = function(index) {
		if (index == 1 && this._right != null) {
			this._elem.removeChild(this._right._elem);
			this._right = null;
		} else if (index == 0) {
			if (this._right != null) {
				this._elem.removeChild(this._left._elem);
				this._left = this._right;
				this._right = null;
			} else {
				this._elem.removeChild(this._left._elem);
				this._right = null;
			}
		}
		this.update();
	};

	DockContainer.prototype.addChild = function(ch, index) {
		if (this._left == null) {
			index = 0;
		}

		if (index == 0) {
			if (this._left != null) {
				this._right = this._left;
			}
			this._left = ch;
		} else if (index == 1) {
			this._right = ch;
		} else {
			// jQuery.sap.log.error("DockContainer::addChild: invalid index - " + index);
			return;
		}

		ch._parent = this;
		ch.update();
		this._elem.appendChild(ch._elem);
		this.update();
	};

	DockContainer.prototype.resize = function(w, h, spp) {
		this._elem.style.width = w + "px";
		this._elem.style.height = h + "px";

		if (this._left != null && this._right != null) {
			/*
			 * TO DO:
			 * fix naive resize algorithm
			 */
			var oleft,
				oright,
				mleft,
				mright,
				nleft,
				nright;

			if (this._dir == 0) {
				oleft = this._left._elem.offsetHeight;
				oright = this._right._elem.offsetHeight;
				mleft = this._left.getMinimumHeight();
				mright = this._right.getMinimumHeight();
				nleft = (spp != null) ? spp : h * oleft / (oleft + oright);
				if (nleft < mleft) {
					nleft = mleft;
				}
				nright = h - nleft;
				if (nright < mright) {
					nright = mright;
					nleft = h - nright;
				}

				this._left.resize(w, nleft);
				this._right.resize(w, nright);
				this._setRect(this._left._elem, 0, 0);
				this._setRect(this._right._elem, 0, nleft);
				this._setRect(this._splitter, 0, nleft - 6, w, 12);
				this._splitter.style.cursor = "ns-resize";
			} else {
				oleft = this._left._elem.offsetWidth;
				oright = this._right._elem.offsetWidth;
				mleft = this._left.getMinimumWidth();
				mright = this._right.getMinimumWidth();
				nleft = (spp != null) ? spp : w * oleft / (oleft + oright);
				if (nleft < mleft) {
					nleft = mleft;
				}
				nright = w - nleft;
				if (nright < mright) {
					nright = mright;
					nleft = w - nright;
				}

				this._left.resize(nleft, h);
				this._right.resize(nright, h);
				this._setRect(this._left._elem, 0, 0);
				this._setRect(this._right._elem, nleft, 0);
				this._setRect(this._splitter, nleft - 6, 0, 12, w);
				this._splitter.style.cursor = "ew-resize";
			}

			this._splitter.style.visibility = "visible";
		} else if (this._left != null) {
			this._left.resize(w, h);
			this._left._elem.style.left = 0;
			this._left._elem.style.top = 0;
			this._splitter.style.visibility = "hidden";
		} else {
			this._splitter.style.visibility = "hidden";
		}
	};

	DockContainer.prototype.getSplitterPosition = function() {
		return (this._dir == 0) ? this._splitter.offsetTop + 6 : this._splitter.offsetLeft + 6;
	};

	DockContainer.prototype.setSplitterPosition = function(p) {
		this.resize(this._elem.offsetWidth, this._elem.offsetHeight, p);
	};

	DockContainer.prototype.update = function() {
		this.resize(this._elem.offsetWidth, this._elem.offsetHeight);
	};

	return DockContainer;
}, true);

}; // end of sap/ui/vk/DockContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DockPane') ) {
jQuery.sap.declare('sap.ui.vk.DockPane'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DockPane",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./DockContainer"
], function(jQuery, library, Control, DockContainer) {
	"use strict";

	var DockPane = Control.extend("sap.ui.vk.DockPane", {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"getDomElement",
				"setMinimumWidth",
				"getMinimumWidth",
				"setMinimumHeight",
				"getMinimumHeight",
				"setMinimumSize",
				"close",
				"resize",
				"update",
				"addTab",
				"removeTab",
				"bringTabToFront"
			],

			properties: {
				/**
				 * Width of the Viewer control
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Height of the Viewer control
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				}
			},

			events: {
				size: {
					parameters: {
						newSize: {
							type: "object"
						}
					}
				},

				close: {
				}
			},
			aggregations: {

				/**
				 * Child Controls within the layout.
				 */
				content: { type: "sap.ui.core.Control", multiple: false, singularName: "content" }
			}
		},

		constructor: function(dm, x, y, w, h, title, fixed) {
			Control.apply(this);

			if (typeof DockPane._counter == "undefined") {
				DockPane._counter = 0;
			}
			this._id = "DockPane_" + DockPane._counter;
			DockPane._counter++;

			var elem = document.createElement("div");
			elem.setAttribute("id", this._id);
			elem.style.position = "absolute";
			elem.style.left = x + "px";
			elem.style.top = y + "px";
			elem.style.width = w + "px";
			elem.style.height = h + "px";
			elem.style.backgroundColor = "darkgrey";
			elem.style.zIndex = 50;
			elem.style.overflow = "hidden";

			this._elem = elem;
			this._manager = dm;
			this._parent = null;
			this._movable = (fixed === undefined || fixed == false) ? true : false;
			this._minWidth = 64;
			this._minHeight = 64;
			this._width = w;
			this._height = h;
			this._resizable = true;

			this._text = (title != null) ? title : ("" + this._id);

			this._tabs = [];
			this._activeTab = this;
			this._tabParent = null;
			this._telem = [];
			this._tcontent = [];

			this._hasBorder = false;
			this._hasTabs = false;

			if (this._movable) {
				title = document.createElement("div");
				title.setAttribute("id", this._id + "_title");
				title.style.position = "absolute";
				title.style.left = 0;
				title.style.top = 0;
				title.style.width = "100%";
				title.style.height = "25px";
				title.style.boxSizing = "border-box";
				title.style.padding = "3px 4px";
				title.style.backgroundColor = "black";
				title.style.color = "white";
				title.style.cursor = "default";
				title.style.userSelect = "none";
				title.style.overflow = "hidden";
				title.innerHTML = this._text;
				elem.appendChild(title);
				this._title = title;

				var btnClose = document.createElement("div");
				btnClose.setAttribute("id", this._id + "_close");
				btnClose.style.position = "absolute";
				btnClose.style.right = "4px";
				btnClose.style.top = "4px";
				btnClose.style.width = "18px";
				btnClose.style.height = "18px";
				btnClose.style.backgroundColor = "red";
				btnClose.style.opacity = 0.5;
				btnClose.style.textAlign = "center";
				btnClose.innerHTML = "X";
				this._title.appendChild(btnClose);
				this._btnClose = btnClose;

				var border = document.createElement("div");
				border.setAttribute("id", this._id + "_border");
				border.style.position = "absolute";
				border.style.left = 0;
				border.style.top = 0;
				border.style.width = "100%";
				border.style.height = "100%";
				border.style.boxSizing = "border-box";
				border.style.zIndex = 10;
				border.style.pointerEvents = "none";
				this._border = border;

				// Border resize regions
				var resizeRegionTop = document.createElement("div");
				resizeRegionTop.style.position = "absolute";
				resizeRegionTop.style.left = "8px";
				resizeRegionTop.style.top = 0;
				resizeRegionTop.style.right = "8px";
				resizeRegionTop.style.height = "8px";
				resizeRegionTop.style.cursor = "ns-resize";
				border.appendChild(resizeRegionTop);

				var resizeRegionBottom = document.createElement("div");
				resizeRegionBottom.style.position = "absolute";
				resizeRegionBottom.style.left = "8px";
				resizeRegionBottom.style.bottom = 0;
				resizeRegionBottom.style.right = "8px";
				resizeRegionBottom.style.height = "8px";
				resizeRegionBottom.style.cursor = "ns-resize";
				border.appendChild(resizeRegionBottom);

				var resizeRegionLeft = document.createElement("div");
				resizeRegionLeft.style.position = "absolute";
				resizeRegionLeft.style.left = 0;
				resizeRegionLeft.style.top = "8px";
				resizeRegionLeft.style.width = "8px";
				resizeRegionLeft.style.bottom = "8px";
				resizeRegionLeft.style.cursor = "ew-resize";
				border.appendChild(resizeRegionLeft);

				var resizeRegionRight = document.createElement("div");
				resizeRegionRight.style.position = "absolute";
				resizeRegionRight.style.right = 0;
				resizeRegionRight.style.top = "8px";
				resizeRegionRight.style.width = "8px";
				resizeRegionRight.style.bottom = "8px";
				resizeRegionRight.style.cursor = "ew-resize";
				border.appendChild(resizeRegionRight);

				var resizeRegionTopLeft = document.createElement("div");
				resizeRegionTopLeft.style.position = "absolute";
				resizeRegionTopLeft.style.left = 0;
				resizeRegionTopLeft.style.top = 0;
				resizeRegionTopLeft.style.width = "8px";
				resizeRegionTopLeft.style.height = "8px";
				resizeRegionTopLeft.style.cursor = "nwse-resize";
				border.appendChild(resizeRegionTopLeft);

				var resizeRegionTopRight = document.createElement("div");
				resizeRegionTopRight.style.position = "absolute";
				resizeRegionTopRight.style.right = 0;
				resizeRegionTopRight.style.top = 0;
				resizeRegionTopRight.style.width = "8px";
				resizeRegionTopRight.style.height = "8px";
				resizeRegionTopRight.style.cursor = "nesw-resize";
				border.appendChild(resizeRegionTopRight);

				var resizeRegionBottomLeft = document.createElement("div");
				resizeRegionBottomLeft.style.position = "absolute";
				resizeRegionBottomLeft.style.left = 0;
				resizeRegionBottomLeft.style.bottom = 0;
				resizeRegionBottomLeft.style.width = "8px";
				resizeRegionBottomLeft.style.height = "8px";
				resizeRegionBottomLeft.style.cursor = "nesw-resize";
				border.appendChild(resizeRegionBottomLeft);

				var resizeRegionBottomRight = document.createElement("div");
				resizeRegionBottomRight.style.position = "absolute";
				resizeRegionBottomRight.style.right = 0;
				resizeRegionBottomRight.style.bottom = 0;
				resizeRegionBottomRight.style.width = "8px";
				resizeRegionBottomRight.style.height = "8px";
				resizeRegionBottomRight.style.cursor = "nwse-resize";
				border.appendChild(resizeRegionBottomRight);
			}

			var tabBox = document.createElement("div");
			tabBox.setAttribute("id", this._id + "_tabbox");
			tabBox.style.position = "absolute";
			tabBox.style.left = 0;
			tabBox.style.right = 0;
			tabBox.style.bottom = 0;
			tabBox.style.height = "24px";
			tabBox.style.overflow = "hidden";
			this._tabBox = tabBox;

			var content = document.createElement("div");
			content.setAttribute("id", this._id + "_content");
			content.style.position = "absolute";
			content.style.left = 0;
			content.style.top = this._movable ? "25px" : "0";
			content.style.right = 0;
			content.style.bottom = 0;
			content.style.boxSizing = "border-box";
			content.style.backgroundColor = this._movable ? "lightgrey" : "grey";
			content.style.border = "1px solid darkgrey";
			content.style.overflow = "hidden";
			// content.innerHTML = "Content: " + this._id;
			elem.appendChild(content);
			this._content = content;

			this.update();
			dm.addDockPane(this);
		}
	});

	DockPane.prototype.setContent = function(content) {
		this.setAggregation("content", content);
		this.renderContent();
	};

	DockPane.prototype.renderContent = function() {
		if (this._manager.isRendered()) {
			var content = this.getAggregation("content");
			if (content != null) {
				sap.ui.getCore().getRenderManager().render(content, this._content);
			}
		}
	};

	DockPane.prototype.destroy = function() {
		this._manager.removeDockPane(this);
	};

	DockPane.prototype.getDomElement = function() {
		return this._elem;
	};

	DockPane.prototype.setMinimumWidth = function(w) {
		this._minWidth = w;
		if (this._parent != null) {
			this._parent.update();
		} else {
			this.update();
		}
	};

	DockPane.prototype.getMinimumWidth = function() {
		return this._minWidth;
	};

	DockPane.prototype.setMinimumHeight = function(h) {
		this._minHeight = h;
		if (this._parent != null) {
			this._parent.update();
		} else {
			this.update();
		}
	};

	DockPane.prototype.getMinimumHeight = function() {
		return this._minHeight;
	};

	DockPane.prototype.setMinimumSize = function(w, h) {
		this._minWidth = w;
		this._minHeight = h;
		if (this._parent != null) {
			this._parent.update();
		} else {
			this.update();
		}
	};

	DockPane.prototype.close = function() {
		if (this._parent != null) {
			this._manager.undock(this);
		}
		this._manager.removeDockPane(this);
	};

	DockPane.prototype._saveSize = function() {
		this._floatW = this._elem.offsetWidth;
		this._floatH = this._elem.offsetHeight;
	};

	DockPane.prototype._restoreSize = function() {
		this.resize(this._floatW, this._floatH);
	};

	DockPane.prototype.resize = function(w, h) {
		this._elem.style.width = w + "px";
		this._elem.style.height = h + "px";
		this._updateTabs(w);
	};

	DockPane.prototype.update = function() {
		// Shadow and border
		if (this._parent == null) {
			this._elem.style.boxShadow = "2px 6px 20px 3px rgba(0,0,0,0.5)";
			this._elem.style.borderTopLeftRadius = "6px";
			this._elem.style.borderTopRightRadius = "6px";
			if (this._border != null && !this._hasBorder) {
				this._elem.appendChild(this._border);
				this._hasBorder = true;
			}
		} else {
			this._elem.style.boxShadow = "";
			this._elem.style.borderRadius = "0";
			if (this._border != null && this._hasBorder) {
				this._elem.removeChild(this._border);
				this._hasBorder = false;
			}
		}

		// Tab area
		if (this._tcontent.length > 0) {
			this._content.style.bottom = "24px";
			this._content.style.borderBottom = "0";
			for (var i = 0; i < this._tcontent.length; i++) {
				var tcontent = this._tcontent[i];
				tcontent.style.bottom = "24px";
				tcontent.style.borderBottom = "0";
			}
		} else {
			this._content.style.bottom = 0;
			this._content.style.borderBottom = "1px solid darkgrey";
		}

		this._updateTabs();
	};

	DockPane.prototype._updateTabs = function(_w) {
		if (this._tabs.length > 0) {
			if (!this._hasTabs) {
				this._hasTabs = true;
				this._elem.appendChild(this._tabBox);
			}

			var count = this._telem.length;
			var w = 0;
			if (_w == undefined) {
				_w = this._tabBox.offsetWidth;
			}

			// Update tab buttons layout and style
			var tabw = (_w - 2) / count;
			for (var i = 0; i < count; i++) {
				var elem = this._telem[i];
				var active = ((i == 0 && this._activeTab == this) ||
							(i > 0 && this._activeTab == this._tabs[i - 1]));
				elem.style.position = "absolute";
				elem.style.left = w + "px";
				elem.style.top = 0;
				if (i == count - 1) {
					tabw = this._tabBox.offsetWidth - w;
				}
				elem.style.width = tabw + "px";
				elem.style.height = "24px";
				elem.style.boxSizing = "border-box";
				elem.style.overflow = "hidden";
				elem.style.padding = "0 4px";
				elem.style.backgroundColor = active ? "lightgrey" : "darkgrey";
				elem.style.border = "1px solid grey";
				elem.style.fontWeight = active ? "bold" : "normal";

				if (active) {
					elem.style.borderTop = "0";
				}

				var tcontent = (i == 0) ? this._content : this._tcontent[i - 1];
				tcontent.style.visibility = (active) ? "visible" : "hidden";

				if (active) {
					this._title.innerHTML = elem.innerHTML;
				}
				w += tabw;
			}
		} else if (this._movable) {
			if (this._hasTabs) {
				this._hasTabs = false;
				this._elem.removeChild(this._tabBox);
			}
			this._content.style.visibility = "visible";
			this._title.innerHTML = this._text;
		}
	};

	DockPane.prototype.addTab = function(cp) {
		// Create tabbed layout
		if (this._tabs.length == 0) {
			var t1 = document.createElement("div");
			t1.innerHTML = this._text;
			this._tabBox.appendChild(t1);
			this._telem.push(t1);
		} else if (this._tabs.indexOf(cp) >= 0) {
			return;
		}

		// Add cp to my tab list
		this._tabs.push(cp);
		var t2 = document.createElement("div");
		t2.innerHTML = cp._text;
		this._tabBox.appendChild(t2);
		this._telem.push(t2);
		this._tcontent.push(cp._content);
		this._activeTab = cp;
		cp._tabParent = this;
		cp._elem.removeChild(cp._content);
		this._elem.appendChild(cp._content);
		cp._saveSize();
		cp._elem.style.display = "none";

		// Migrate cp's tabs to my tab list
		var count = cp._tabs.length;
		if (count > 0) {
			for (var i = 0; i < count; i++) {
				this._tabs.push(cp._tabs[i]);
				cp._tabBox.removeChild(cp._telem[i + 1]);
				this._tabBox.appendChild(cp._telem[i + 1]);
				this._telem.push(cp._telem[i + 1]);
				this._tcontent.push(cp._tabs[i]._content);
				cp._tabs[i]._tabParent = this;
				cp._elem.removeChild(cp._tabs[i]._content);
				this._elem.appendChild(cp._tabs[i]._content);
			}
			cp._tabs = [];
			cp._tcontent = [];
			cp._telem = [];
		}

		this.update();
	};

	DockPane.prototype._removeSelfMigrate = function() {
		var count = this._tabs.length;
		if (count > 0) {
			var parent = this._parent;
			var pw = this._elem.offsetWidth, ph = this._elem.offsetHeight;
			var newParent = this._tabs[0];
			newParent._elem.style.top = this._elem.offsetTop + "px";
			newParent._elem.style.left = this._elem.offsetLeft + "px";

			this.removeTab(newParent);

			for (var i = 1; i < count; i++) {
				var tab = this._tabs[0];
				this.removeTab(tab);
				newParent.addTab(tab);
			}

			// Replace a docked pane with newParent
			if (parent != null) {
				if (parent._left == this) {
					parent._left = newParent;
				} else if (parent._right == this) {
					parent._right = newParent;
				}
				parent._elem.removeChild(this._elem);
				this._manager._elem.appendChild(this._elem);
				this._parent = null;
				this._manager._elem.removeChild(newParent._elem);
				parent._elem.appendChild(newParent._elem);
				newParent._parent = parent;
				newParent._elem.style.width = pw + "px";
				newParent._elem.style.height = ph + "px";

				this._restoreSize();
				parent.update();
				newParent.update();
				this.update();
			}
		}
	};

	DockPane.prototype.removeTab = function(cp) {
		if (cp == this) {
			this._removeSelfMigrate();
			return;
		}

		var index = this._tabs.indexOf(cp);
		if (index >= 0) {
			this._tabBox.removeChild(this._telem[index + 1]);
			this._tabs.splice(index, 1);
			this._telem.splice(index + 1, 1);
			var tcontent = this._tcontent[index];
			tcontent.style.bottom = 0;
			tcontent.style.borderBottom = "1px solid darkgrey";
			cp._elem.appendChild(tcontent);
			cp._tabParent = null;
			this._tcontent.splice(index, 1);
			cp._elem.style.display = "inherit";
			cp._restoreSize();

			if (this._tabs.length == 0) {
				this._activeTab = this;
				this._tabBox.removeChild(this._telem[0]);
				this._telem = [];
			} else if (index == 0) {
				this._activeTab = this;
			} else {
				this._activeTab = this._tabs[index - 1];
			}

			this.update();
		}
	};

	DockPane.prototype.bringTabToFront = function(cp) {
		if (cp == this || this._tabs.indexOf(cp) >= 0) {
			this._activeTab = cp;
			this.update();
		}
	};

	return DockPane;
}, true);

}; // end of sap/ui/vk/DockPane.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DownloadManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/* global File, sinon */

// Provides the DownloadManager class.
jQuery.sap.declare('sap.ui.vk.DownloadManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DownloadManager",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "./Messages"
], function(jQuery, library, EventProvider, Messages) {
	"use strict";

	/**
	 * Creates a new DownloadManager object.
	 *
	 * @class
	 * Provides the functionality to download multiple files from remote locations (URLs) and from local files.
	 *
	 * @param {any[]} sources An array of strings (URLs) and File objects to download.
	 * @param {int} maxParallelTasks The maximum number of downloading tasks to execute in parallel.
	 * @private
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.DownloadManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DownloadManager = EventProvider.extend("sap.ui.vk.DownloadManager", /** @lends sap.ui.vk.DownloadManager.prototype */ {
		metadata: {
			publicMethods: [
				"start",
				"attachItemSucceeded",
				"detachItemSucceeded",
				"attachItemFailed",
				"detachItemFailed",
				"attachAllItemsCompleted",
				"detachAllItemsCompleted"
			],

			events: {
				/**
				 * Item is successfully downloaded.
				 */
				itemSucceeded: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The content of source of type ArrayBuffer.
						 */
						response: {
							type: "object"
						}
					}
				},
				/**
				 * Event that is fired when the downloaded progress.
				 */
				itemProgress: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The size of data which has been downloaded so far for a particular file.
						 */
						loaded: {
							type: "int"
						},
						/**
						 * The total size of the file being currently downloaded.
						 */
						total: {
							type: "int"
						}
					}
				},

				/**
				 * Item is not downloaded due to an error.
				 */
				itemFailed: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: {
							type: "any"
						},
						/**
						 * The status of the downloading process. Type might be int or string.
						 */
						status: {
							type: "any"
						},
						/**
						 * The status text.
						 */
						statusText: {
							type: "string"
						}
					}
				},

				/**
				 * Downloading all items is completed, successfully or not.
				 */
				allItemsCompleted: {}
			}
		},
		constructor: function(sources, maxParallelTasks) {
			EventProvider.apply(this);

			this._maxParallelTasks = maxParallelTasks || 5;
			this._sourcesToProcess = sources.slice();
			this._sourcesBeingProcessed = [];
		}
	});

	/**
	 * Starts the downloading process.
	 * @returns {sap.ui.vk.DownloadManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	DownloadManager.prototype.start = function() {
		// Schedule simultaneous downloading of up to this._maxParallelTasks.
		/* eslint-disable no-empty */
		while (this._pickAndDispatchTask()) {
			// A comment to avoid ESLint warnings.
		}
		/* eslint-enable no-empty */

		return this;
	};

	/**
	 * Adds a new source to the download queue.
	 *
	 * @param {any} source A new source to download.
	 * @returns {sap.ui.vk.DownloadManager} <code>this</code> to allow method chaining.
	 */
	DownloadManager.prototype.queue = function(source) {
		this._sourcesToProcess.push(source);
		this._pickAndDispatchTask();
		return this;
	};

	/**
	 * Picks and dispatches a source for downloading.
	 * @returns {boolean} Returns <code>true</code> if a source is picked and dispatched, returns <code>false</code> otherwise.
	 * @private
	 */
	DownloadManager.prototype._pickAndDispatchTask = function() {
		if (this._sourcesToProcess.length > 0 && this._sourcesBeingProcessed.length < this._maxParallelTasks) {
			var source = this._sourcesToProcess.shift();
			this._sourcesBeingProcessed.push(source);
			this._runTask(source);
			return true;
		}
		return false;
	};

	/**
	 * @param {sap.ui.core.URI|File} source The URL or File that is completed.
	 * @returns {sap.ui.vk.DownloadManager} <code>this</code> to allow method chaining.
	 * @private
	 */
	DownloadManager.prototype._taskFinished = function(source) {
		var index = this._sourcesBeingProcessed.indexOf(source);
		if (index >= 0) {
			this._sourcesBeingProcessed.splice(index, 1);
		}

		return this;
	};

	DownloadManager.prototype._queueIsEmpty = function() {
		return this._sourcesToProcess.length === 0 && this._sourcesBeingProcessed.length === 0;
	};

	DownloadManager.prototype._runTask = function(source) {
		var that = this;
		if (typeof source === "string") {
			// When sap.ui.core.util.MockServer is in use it loads the sinon.js library which replaces
			// the native XMLHttpRequest provided by the browser with its own implementation. That
			// implementation does not support 'arraybuffer' response type. For downloading 3D models
			// we should always use the native XMLHttpRequest object.
			var xhr = new (typeof sinon === "object" && sinon.xhr && sinon.xhr.XMLHttpRequest || XMLHttpRequest);

			xhr.onerror = function(event) {
				that._taskFinished(source);
				that._pickAndDispatchTask();

				// onerror event caters for events such as CORS errors
				that.fireItemFailed({
					source: source,
					status: xhr.status,
					statusText: xhr.statusText
				});

				if (that._queueIsEmpty()) {
					that._asyncFireAllItemsCompleted();
				}
			};

			xhr.onload = function(event) {
				that._taskFinished(source);
				that._pickAndDispatchTask();

				// When file is loaded from a Cordova container the status equals 0.
				if (xhr.status === 200 || xhr.status === 0) {
					that.fireItemSucceeded({
						source: source,
						response: xhr.response
					});
				} else {
					// onload event is also called in the case of status code 404 Not Found.
					// This is why we have to check for the right status. If the status is not
					// something that indicates success, we fire the fireItemFailed event.
					that.fireItemFailed({
						source: source,
						status: xhr.status,
						statusText: xhr.statusText
					});
				}
				if (that._queueIsEmpty()) {
					that._asyncFireAllItemsCompleted();
				}
			};

			xhr.onprogress = function(event) {
				that.fireItemProgress({
					source: source,
					loaded: event.loaded,
					total: event.total
				});
			};

			xhr.open("GET", source, true);
			xhr.responseType = "arraybuffer";
			xhr.send(null);
		} else if (source instanceof File) {
			var fileReader = new FileReader();

			fileReader.onload = function(event) {
				that._taskFinished(source);
				that._pickAndDispatchTask();

				that.fireItemSucceeded({
					source: source,
					response: fileReader.result
				});

				if (that._queueIsEmpty()) {
					that._asyncFireAllItemsCompleted();
				}
			};

			fileReader.onerror = function(event) {
				that._taskFinished(source);
				that._pickAndDispatchTask();

				that.fireItemFailed({
					source: source,
					status: fileReader.error.name,
					statusText: fileReader.error.message
				});

				if (that._queueIsEmpty()) {
					that._asyncFireAllItemsCompleted();
				}
			};

			fileReader.onprogress = function(event) {
				that.fireItemProgress({
					source: source.name,
					loaded: event.loaded,
					total: event.total
				});
			};

			fileReader.readAsArrayBuffer(source);
		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT5.summary), Messages.VIT5.code, "sap.ui.vk.DownloadManager");
		}

		return this;
	};

	/**
	 * The allItemsCompleted event is fired asynchronously as otherwise something is wrong in Emscripten
	 * e.g. std::cout is unusable, some global variables are uninitialised.
	 * @private
	 */
	DownloadManager.prototype._asyncFireAllItemsCompleted = function() {
		jQuery.sap.delayedCall(0, this, this.fireAllItemsCompleted);
	};

	DownloadManager.prototype.attachItemSucceeded = function(data, func, listener) {
		return this.attachEvent("itemSucceeded", data, func, listener);
	};

	DownloadManager.prototype.detachItemSucceeded = function(func, listener) {
		return this.detachEvent("itemSucceeded", func, listener);
	};

	DownloadManager.prototype.fireItemSucceeded = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemSucceeded", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachItemFailed = function(data, func, listener) {
		return this.attachEvent("itemFailed", data, func, listener);
	};

	DownloadManager.prototype.detachItemFailed = function(func, listener) {
		return this.detachEvent("itemFailed", func, listener);
	};

	DownloadManager.prototype.fireItemFailed = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemFailed", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachAllItemsCompleted = function(data, func, listener) {
		return this.attachEvent("allItemsCompleted", data, func, listener);
	};

	DownloadManager.prototype.detachAllItemsCompleted = function(func, listener) {
		return this.detachEvent("allItemsCompleted", func, listener);
	};

	DownloadManager.prototype.fireAllItemsCompleted = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("allItemsCompleted", parameters, allowPreventDefault, enableEventBubbling);
	};

	DownloadManager.prototype.attachItemProgress = function(data, func, listener) {
		return this.attachEvent("itemProgress", data, func, listener);
	};

	DownloadManager.prototype.detachItemProgress = function(func, listener) {
		return this.detachEvent("itemProgress", func, listener);
	};

	DownloadManager.prototype.fireItemProgress = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("itemProgress", parameters, allowPreventDefault, enableEventBubbling);
	};

	return DownloadManager;
});

}; // end of sap/ui/vk/DownloadManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControl.
jQuery.sap.declare('sap.ui.vk.FlexibleControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControl",[
	"jquery.sap.global", "sap/ui/core/Control", "sap/ui/core/EnabledPropagator", "./library"
], function(jQuery, Control, EnabledPropagator, library) {
	"use strict";

	/**
	 * Constructor for a new FlexibleControl.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the FlexibleControl contents.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.FlexibleControl
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControl = Control.extend("sap.ui.vk.FlexibleControl", /** @lends sap.ui.vk.FlexibleControl.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * CSS width of the vertical layout.
				 */
				width: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: null },
				height: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: null },

				layout: { type: "string", group: "Behavior", defaultValue: "Stacked" },
				/**
				 * If not enabled all controls inside are not enabled automatically.
				 */
				enabled: { type: "boolean", group: "Behavior", defaultValue: true }
			},
			defaultAggregation: "content",
			aggregations: {
				/**
				 * Child Controls within the layout.
				 */
				content: { type: "sap.ui.core.Control", multiple: true, singularName: "content" }
			},
			designTime: true
		}
	});


	EnabledPropagator.call(FlexibleControl.prototype);

	return FlexibleControl;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControl.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControlLayoutData.
jQuery.sap.declare('sap.ui.vk.FlexibleControlLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlLayoutData",[
	"jquery.sap.global", "sap/ui/core/LayoutData", "./library"
], function(jQuery, LayoutData, library) {
	"use strict";


	/**
	 * Constructor for a new FlexibleControlLayoutData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the FlexibleControl contents.
	 * Allowed size values are numeric values ending in "px" and "%" and the
	 * special case "auto".
	 * (The CSS value "auto" is used internally to recalculate the size of the content
	 * dynamically and is not directly set as style property.)
	 * @extends sap.ui.core.LayoutData
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @since 1.22.0
	 * @experimental Since version 1.22.0.
	 * API is not yet finished and might change completely
	 * @alias sap.ui.vk.FlexibleControlLayoutData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControlLayoutData = LayoutData.extend("sap.ui.vk.FlexibleControlLayoutData", /** @lends sap.ui.vk.FlexibleControlLayoutData.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Sets the size of the content.
				 */
				size: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "auto" },

				/**
				 * Sets the minimum size of the content in px.
				 */
				minSize: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "0px" },

				/**
				 * Sets the margin-bottom of the content in px.
				 */
				marginTop: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "0px" },
				marginBottom: { type: "sap.ui.core.CSSSize", group: "Dimension", defaultValue: "0px" }
			}
		}
	});

	return FlexibleControlLayoutData;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControlLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ImageContentManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides object sap.ui.vk.ImageContentManager.
jQuery.sap.declare('sap.ui.vk.ImageContentManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ImageContentManager",[
	"jquery.sap.global", "./Messages", "./ContentManager"
], function(jQuery, Messages, ContentManagerBase) {
	"use strict";

	/**
	 * Constructor for a new ImageContentManager.
	 *
	 * @class
	 * Provides a loader that loads a 2D raster or vector image into an HTMLImageElement or HTMLObjectElement object.
	 *
	 * @param {string} [sId] ID for the new ImageContentManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ContentConnector object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ContentManager
	 * @alias sap.ui.vk.ImageContentManager
	 * @since 1.50.0
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ImageContentManager = ContentManagerBase.extend("sap.ui.vk.ImageContentManager", /** @lends sap.ui.vk.ImageContentManager.prototype */ {
		metadata: {
			library: "sap.ui.vk"
		}
	});

	var basePrototype = ImageContentManager.getMetadata().getParent().getClass().prototype;

	ImageContentManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._handleLoadSucceededProxy = this._handleLoadSucceeded.bind(this);
		this._handleLoadFailedProxy    = this._handleLoadFailed.bind(this);
		// NB: We do not have a listener for the "progress" event as it is not implemented for the HTMLImageElement interface.
		// See http://blogs.adobe.com/webplatform/2012/07/10/image-progress-event-progress/.
	};

	ImageContentManager.prototype.exit = function() {
		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	ImageContentManager.prototype.loadContent = function(content, contentResources) {
		if (contentResources.length !== 1) {
			jQuery.sap.delayedCall(0, this, function() {
				this.fireContentChangesStarted();
				this.fireContentChangesFinished({
					content: null,
					failureReason: {
						errorMessage: "Only a single image can be loaded."
					}
				});
			});
		} else if (contentResources[0].getContentResources().length > 0) {
			jQuery.sap.delayedCall(0, this, function() {
				this.fireContentChangesStarted();
				this.fireContentChangesFinished({
					content: null,
					failureReason: {
						errorMessage: "Cannot load a hierarchy of images."
					}
				});
			});
		} else {
			var contentResource = contentResources[0],
			    source = contentResource.getSource(),
			    sourceType = contentResource.getSourceType();

			if (source instanceof File) {
				var fileReader = new FileReader();
				fileReader.onload = function(event) {
					this._loadImageFromUrl(content, fileReader.result, sourceType);
				}.bind(this);
				fileReader.readAsDataURL(source);
			} else {
				this._loadImageFromUrl(content, source, sourceType);
			}
		}
	};

	ImageContentManager.prototype._addEventListeners = function(htmlElement) {
		htmlElement.addEventListener("load", this._handleLoadSucceededProxy);
		htmlElement.addEventListener("error", this._handleLoadFailedProxy);
	};

	ImageContentManager.prototype._removeEventListeners = function(htmlElement) {
		htmlElement.removeEventListener("error", this._handleLoadFailedProxy);
		htmlElement.removeEventListener("load", this._handleLoadSucceededProxy);
	};

	// NB: without adding the SVG element to the document downloading does not start.
	// Also we need to set some style properties to hide the svg element while downloading.
	// This properties will be removed when downloading finishes.
	ImageContentManager.prototype._addSvgQuirks = function(htmlElement) {
		htmlElement.style.setProperty("visibility", "collapse");
		htmlElement.style.setProperty("width", "0");
		htmlElement.style.setProperty("height", "0");
		htmlElement.style.setProperty("position", "absolute");
		document.body.appendChild(htmlElement);
		return this;
	};

	ImageContentManager.prototype._removeSvgQuirks = function(htmlElement) {
		htmlElement.parentElement.removeChild(htmlElement);
		htmlElement.style.removeProperty("visibility");
		htmlElement.style.removeProperty("width");
		htmlElement.style.removeProperty("height");
		htmlElement.style.removeProperty("position");
		return this;
	};

	ImageContentManager.prototype._loadImageFromUrl = function(content, url, sourceType) {
		this.fireContentChangesStarted();
		switch (sourceType.toLowerCase()) {
			case "svg":
				var svg = document.createElement("object");
				this._addEventListeners(svg);
				svg.type = "image/svg+xml";
				svg.data = url;
				svg.className = "SVGImage";
				this._addSvgQuirks(svg);
				break;
			case "jpg":
			case "png":
			case "gif":
			case "bmp":
			case "tif":
			case "tiff":
				var image = document.createElement("img");
				this._addEventListeners(image);
				image.src = url;
				break;
			default:
				jQuery.sap.delayedCall(0, this, function() {
					this.fireContentChangesFinished({
						content: null,
						failureReason: {
							errorMessage: "Unsupported image type.",
							sourcesFailedToDownload: [
								{
									source: url
								}
							]
						}
					});
				});
				break;
		}
	};

	ImageContentManager.prototype._handleLoadSucceeded = function(event) {
		var content = event.target;
		if (content instanceof HTMLObjectElement) {
			try {
				// NB: when HTMLObjectElement fails to load the content it does not fire 'error' event like HTMLImageElement,
				// so we check if it contains an SVG document.
				// If the document is not loaded then getSVGDocument() returns null.
				// If the document is loaded then getSVGDocument() returns a valid object, but in case of a cross-origin request
				// the call to getSVGDocument() throws an exception.
				if (!content.getSVGDocument()) {
					this._handleLoadFailed(event);
					return;
				}
			} catch (e) {
				// When getSVGDocument() fails then the document is from another domain. But the document is loaded.
			}
		}
		this._removeEventListeners(content);
		if (content instanceof HTMLObjectElement) {
			this._removeSvgQuirks(content);
		}
		this.fireContentChangesFinished({
			content: content
		});
	};

	ImageContentManager.prototype._handleLoadFailed = function(event) {
		var content = event.target;
		this._removeEventListeners(content);
		if (content instanceof HTMLObjectElement) {
			this._removeSvgQuirks(content);
		}
		// If resource has supported type but file doesn't exist throws error "Failed to load the image".
		this.fireContentChangesFinished({
			content: null,
			failureReason: {
				errorMessage: "Failed to load the image.",
				sourcesFailedToDownload: [
					{
						source: content instanceof HTMLImageElement ? content.src : content.data
					}
				]
			}
		});
	};

	return ImageContentManager;
});

}; // end of sap/ui/vk/ImageContentManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.LegendItem') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.LegendItem.
jQuery.sap.declare('sap.ui.vk.LegendItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/LegendItem",[
	"./library", "sap/m/StandardListItem"
], function(library, StandardListItem) {
	"use strict";

	/**
	 * Constructor for a new LegendItem.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Legend item control
	 * @extends sap.m.StandardListItem
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.LegendItem
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var LegendItem = StandardListItem.extend("sap.ui.vk.LegendItem", /** @lends sap.ui.vk.LegendItem.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties:
			{
				/**
				 * show color square
				 */
				color: {
					type: "sap.ui.core.CSSColor",
					group: "Appearance",
					defaultValue: null
				},
				/**
				 * The semantic spot type for the legend marker.
				 */
				semanticSpotType: {
					type: "sap.ui.vbm.SemanticType",
					group: "Behavior",
					defaultValue: null
				}
			},
			aggregations: {
			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// LegendItem.prototype.init = function(){
	    // do something for initialization...

	// };

	return LegendItem;

});

}; // end of sap/ui/vk/LegendItem.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanel') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ListPanel.
jQuery.sap.declare('sap.ui.vk.ListPanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ListPanel",[
	"./library", "sap/ui/core/Control", "sap/m/library"
], function(library, Control, mobileLibrary) {
	"use strict";

	/**
	 * Constructor for a new ListPanel.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation control for the Legend
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ListPanel
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ListPanel = Control.extend("sap.ui.vk.ListPanel", /** @lends sap.ui.vk.ListPanel.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Header text
				 */
				"headerText": {
					type: "string",
					group: "Misc"
				},
				/**
				 * Header icon
				 */
				"headerIcon": {
					type: "sap.ui.core.URI",
					group: "Misc"
				},
				/**
				 * Expansion state
				 */
				"expanded": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Expand animation
				 */
				"expandAnimation": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Selection Mode
				 */
				"selectionMode": {
					type: "sap.m.ListMode",
					group: "Misc",
					defaultValue: sap.m.ListMode.MultiSelect
				}

			},
			aggregations: {
				/**
				 * Item aggregation
				 */
				"items": {
					type: "sap.m.ListItemBase",
					multiple: true,
					singularName: "item"
				},
				/**
				 * hidden panel aggregation needed for binding
				 */
				"panel": {
					type: "sap.m.Panel",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				/**
				 * Event is fired if the header icon is pressed
				 */
				headerIconPress: {},
				/**
				 * Event is fired if the panel is expanded of collapsed
				 */
				expand: {},
				/**
				 * Event is fired when selection is changed via user interaction inside the control.
				 */
				selectionChange: {
					parameters: {

						/**
						 * The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This
						 * parameter can be used for single-selection modes.
						 */
						listItem: {
							type: "sap.m.ListItemBase"
						},

						/**
						 * Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
						 */
						listItems: {
							type: "sap.m.ListItemBase[]"
						},

						/**
						 * Indicates whether the <code>listItem</code> parameter is selected or not.
						 */
						selected: {
							type: "boolean"
						}
					}
				},
				/**
				 * Event is fired when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
				 */
				itemPress: {
					parameters: {

						/**
						 * The item which fired the pressed event.
						 */
						listItem: { type: "sap.m.ListItemBase" },

						/**
						 * The control which caused the press event within the container.
						 */
						srcControl: { type: "sap.ui.core.Control" }
					}
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
	 * @returns {sap.m.ListItemBase} Selected item.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.getSelectedItem = function() {
		return this._oList.getSelectedItem();
	};

	/**
	 * Selects or deselects the given list item.
	 *
	 * @param {sap.m.ListItemBase} oListItem
	 *         The list item whose selection to be changed. This parameter is mandatory.
	 * @param {boolean} bSelect
	 *         Sets selected status of the list item. Default value is true.
	 * @param {boolean} bFireEvent Whether to fire the even or not.
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.setSelectedItem = function(oListItem, bSelect, bFireEvent) {
		this._oList.setSelectedItem(oListItem, bSelect, bFireEvent);
	};

	/**
	 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
	 *
	 * @returns {sap.m.ListItemBase[]} Selected items
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	ListPanel.prototype.getSelectedItems = function() {
		return this._oList.getSelectedItems();
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//
	ListPanel.prototype.init = function() {
		// do something for initialization...
		this._oList = new sap.m.ListBase({
			mode: this.getSelectionMode(),
			itemPress: this.fireItemPress.bind(this),
			selectionChange: this.fireSelectionChange.bind(this)
		});

		this._oPanel = new sap.m.Panel({
			expandable: true,
			expanded: true,
			expandAnimation: true,
			headerToolbar: new sap.m.Toolbar({
				active: true,
				press: this._onHeaderToolbarPress.bind(this)
			}),
			content: [
				this._oList
			],
			expand: this.fireExpand.bind(this)
		});
		this._oPanel.getHeaderToolbar().addStyleClass("sapUiVkLPTb");
		this.setAggregation("panel", this._oPanel, /* bSuppressInvalidate= */ true);

		this._oHeaderIcon = null;
		this._oHeaderText = null;
		this._bHeaderToolbarChanged = true;

	};

	ListPanel.prototype.exit = function() {
		this._destroyControl(this._oList);
		this._destroyControl(this._oPanel);
		this._destroyControl(this._oHeaderIcon);
		this._destroyControl(this._oHeaderText);
	};

	ListPanel.prototype.getItems = function() {
		return this._oList.getItems();
	};

	ListPanel.prototype.addItem = function(oObject) {
		return this._oList.addItem(oObject);
	};

	ListPanel.prototype.insertItem = function(oObject, iIndex) {
		return this._oList.insertItem(oObject, iIndex);
	};

	ListPanel.prototype.removeItem = function(oObject) {
		return this._oList.removeItem(oObject);
	};

	ListPanel.prototype.removeAllItems = function() {
		return this._oList.removeAllItems();
	};

	ListPanel.prototype.setHeaderText = function(value) {
		if (!this._oHeaderText) {
			this._oHeaderText = new sap.m.Title();
		}
		this._oHeaderText.setText(value);
		this._bHeaderToolbarChanged = true;
		return this.setProperty("headerText", value);
	};

	ListPanel.prototype.getExpanded = function() {
		return this._oPanel.getExpanded();
	};

	ListPanel.prototype.setExpanded = function(value) {
		return this._oPanel.setExpanded(value);
	};

	ListPanel.prototype.getExpandAnimation = function() {
		return this._oPanel.getExpandAnimation();
	};

	ListPanel.prototype.setExpandAnimation = function(value) {
		return this._oPanel.setExpandAnimation(value);
	};

	ListPanel.prototype.setHeaderIcon = function(value) {
		if (!this._oHeaderIcon) {
			this._oHeaderIcon = new sap.m.Button({
				press: this.fireHeaderIconPress.bind(this),
				type: sap.m.ButtonType.Transparent
			});
		}
		this._oHeaderIcon.setIcon(value);
		this._bHeaderToolbarChanged = true;
		return this.setProperty("headerIcon", value);
	};

	ListPanel.prototype.setSelectionMode = function(value) {
		this._oList.setMode(value);
		return this.setProperty("selectionMode", value);
	};

	ListPanel.prototype.onBeforeRendering = function() {
		if (this._bHeaderToolbarChanged) {
			var oToolbar = this._oPanel.getHeaderToolbar();
			oToolbar.removeAllContent();
			if (this._oHeaderIcon) {
				oToolbar.addContent(this._oHeaderIcon);
			}
			if (this._oHeaderText) {
				oToolbar.addContent(this._oHeaderText);
			}
			this._bHeaderToolbarChanged = false;
		}
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	ListPanel.prototype._destroyControl = function(oControl) {
		if (oControl) {
			oControl.destroy();
			oControl = undefined;
		}
	};

	ListPanel.prototype._onHeaderToolbarPress = function(oEvent) {
		this._oPanel.setExpanded(!this._oPanel.getExpanded());
	};

	return ListPanel;

});

}; // end of sap/ui/vk/ListPanel.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ListPanelStack') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ListPanelStack.
jQuery.sap.declare('sap.ui.vk.ListPanelStack'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ListPanelStack",[
	"./library", "sap/ui/core/Control", "sap/ui/layout/library"
], function(library, Control, layoutLibrary) {
	"use strict";

	/**
	 * Constructor for a new ListPanelStack.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class ListPanelStack control
	 * @extends sap.ui.core.Control
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.ListPanelStack
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ListPanelStack = Control.extend("sap.ui.vk.ListPanelStack", /** @lends sap.ui.vk.ListPanelStack.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Control width
				 */
				"width": {
					type: "sap.ui.core.CSSSize",
					group: "Misc",
					defaultValue: "100%"
				},
				/**
				 * Expansion state
				 */
				"expanded": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Expand animation
				 */
				"expandAnimation": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Ability to collapse
				 */
				"collapsible": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {

				"content": {
					type: "sap.ui.vk.ListPanel",
					multiple: true,
					singularName: "content"
				},
				/**
				 * hidden layout aggregation needed for binding
				 */
				"layout": {
					type: "sap.ui.layout.VerticalLayout",
					multiple: false,
					visibility: "hidden"
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//
	ListPanelStack.prototype.init = function() {
		// do something for initialization...
		this._oLayout = new sap.ui.layout.VerticalLayout();
		// default expandAnimation: true
		this._oLayout.addStyleClass("sapUiVkLPSTrans");
		this.setAggregation("layout", this._oLayout, /* bSuppressInvalidate= */ true);
		this._bFirstTime = true;
	};

	ListPanelStack.prototype.exit = function() {
		if (this._oLayout) {
			this._oLayout.destroy();
			this._oLayout = undefined;
		}
	};

	ListPanelStack.prototype.getContent = function() {
		return this._oLayout.getContent();
	};

	ListPanelStack.prototype.addContent = function(oObject) {
		oObject.attachExpand(this._onContentExpand.bind(this));
		oObject.attachHeaderIconPress(this._onContentHeaderIconPress.bind(this));
		return this._oLayout.addContent(oObject);
	};

	ListPanelStack.prototype.removeContent = function(oObject) {
		return this._oLayout.removeContent(oObject);
	};

	ListPanelStack.prototype.insertContent = function(oObject, iIndex) {
		return this._oLayout.insertContent(oObject, iIndex);
	};

	ListPanelStack.prototype.removeAllContent = function() {
		return this._oLayout.removeAllContent();
	};

	ListPanelStack.prototype.getWidth = function() {
		return this._oLayout.getWidth();
	};

	ListPanelStack.prototype.setWidth = function(value) {
		this.setProperty("width", value, true);
		return this._oLayout.setWidth(value);
	};

	ListPanelStack.prototype.setExpanded = function(value) {
		if (value != this.getExpanded()) {
			if (value) {
				this._expand();
			} else {
				this._collapse();
			}
		}
		return this;
	};

	ListPanelStack.prototype.setExpandAnimation = function(value) {
		this._oLayout.removeStyleClass("sapUiVkLPSTrans");
		if (value) {
			this._oLayout.addStyleClass("sapUiVkLPSTrans");
		}
		return this.setProperty("expandAnimation", value, true);
	};

	ListPanelStack.prototype.onBeforeRendering = function() {
		if (this._bFirstTime) {
			// check expand state of all content panels to determine initial expand state for stack
			var bExpanded = false;
			var aContent = this.getContent();
			for (var i = 0; i < aContent.length; ++i) {
				if (aContent[i].getExpanded()) {
					bExpanded = true;
				}
			}
			this.setExpanded(bExpanded);
			this._bFirstTime = false;
		}
	};

	ListPanelStack.prototype.onAfterRendering = function() {
		// If the control is not expanded, then it means it's collapsed
		// so we applied the requiered width.
		if (!this.getExpanded()) {
			this._updateCollapsedLayoutWidth();
		}
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	ListPanelStack.prototype._onContentExpand = function(oEvent) {
		var expanded = false;
		var aContent = this._oLayout.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			if (aContent[i].getExpanded()) {
				expanded = true;
			}
		}
		this.setExpanded(expanded);
	};

	ListPanelStack.prototype._onContentHeaderIconPress = function(oEvent) {
		var bsetExpand = oEvent.oSource.getExpanded() ? false : true;
		oEvent.oSource.setExpanded(bsetExpand);
		var bExpand = false;
		var aContent = this._oLayout.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			if (aContent[i].getExpanded()) {
				bExpand = true;
				break;
			}
		}
		this.setExpanded(bExpand);

	};

	ListPanelStack.prototype._expand = function() {
		this._oLayout.removeStyleClass("sapUiVkLPSCollapse");
		this._oLayout.setWidth(this.getProperty("width"));
		this.setProperty("expanded", true, true);
	};

	ListPanelStack.prototype._collapse = function() {
		if (!this.getCollapsible()) {
			return;
		}

		// make sure all panels are collapsed
		var aContent = this.getContent();
		for (var i = 0; i < aContent.length; ++i) {
			aContent[i].setExpanded(false);
		}
		// collapse the stack
		this._oLayout.addStyleClass("sapUiVkLPSCollapse");

		this._updateCollapsedLayoutWidth();

		this.setProperty("expanded", false, true);
	};

	ListPanelStack.prototype._updateCollapsedLayoutWidth = function() {
		// Checking if any ancestor of this element has the compact class;
		// we do not to apply the cozy size if the sapUiSizeCompact class
		// exists on an element which is not an ancestor.
		if (this._oLayout.$().closest(".sapUiSizeCompact").length === 0) {
			this._oLayout.setWidth("3rem");
		} else {
			this._oLayout.setWidth("2.5rem");
		}
	};

	return ListPanelStack;

});

}; // end of sap/ui/vk/ListPanelStack.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.MapContainer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.MapContainer.
jQuery.sap.declare('sap.ui.vk.MapContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.lib.sapvbi'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/MapContainer",[
	"jquery.sap.global", "./library", "sap/ui/vk/ContainerBase", "sap/ui/core/IconPool", "sap/ui/vbm/lib/sapvbi", "sap/ui/Device"
], function(jQuery, library, ContainerBase, IconPool, sapvbi, Device) {
	"use strict";

	/**
	 * Constructor for a new MapContainer.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Abstract Constructor for a new Container.
	 * @extends sap.ui.vk.ContainerBase
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.MapContainer
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var MapContainer = ContainerBase.extend("sap.ui.vk.MapContainer", /** @lends sap.ui.vk.MapContainer.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Show navbar
				 */
				"showNavbar": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the home button
				 */
				"showHome": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the Map Layer Select
				 */
				"showMapLayer": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the rectangular zoom button
				 */
				"showRectangularZoom": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				},
				/**
				 * Controls the visibility of the zoom buttons
				 */
				"showZoom": {
					type: "boolean",
					group: "Misc",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * List Panel aggregation
				 */
				"listPanelStack": {
					type: "sap.ui.vk.ListPanelStack",
					multiple: false
				},
				/**
				 * hidden scroll container aggregation needed for binding
				 */
				"scrollCont": {
					type: "sap.m.ScrollContainer",
					multiple: false,
					visibility: "hidden"
				}
			},
			associations: {},
			events: {}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	MapContainer.prototype.init = function() {
		this._currentText = new sap.m.Text({
		}).addStyleClass("mapLayerSelectedText");
		// call super init
		ContainerBase.prototype.init.apply(this, arguments);

		// create model and set the data
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			rectZoom: false
		});
		this.setModel(oModel, "rectZoom");

		// navbar
		this._oNavbar = new sap.m.Toolbar({
			// Use ToolbarDesign.Auto
			width: "auto"
		});
		// scroll container for list panel stack
		this._oScrollCont = new sap.m.ScrollContainer({
			horizontal: false,
			vertical: true,
			focusable: false
		});
		this.setAggregation("scrollCont", this._oScrollCont, /* bSuppressInvalidate= */ true);

		// create potential nabar buttons
		this._oHomeButton = new sap.m.Button({
			icon: "sap-icon://home",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_HOME"),
			press: this._onNavbarHome.bind(this)
		});
		this._oRectZoomButton = new sap.m.ToggleButton({
			icon: "sap-icon://draw-rectangle",
			type: sap.m.ButtonType.Transparent,
			pressed: "{rectZoom>/rectZoom}",
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_RECT_ZOOM")
		}).setModel(oModel, "rectZoom");
		this._oZoomInButton = new sap.m.Button({
			icon: "sap-icon://add",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_ZOOMIN"),
			press: this._onNavbarZoomIn.bind(this)
		});
		this._oZoomOutButton = new sap.m.Button({
			icon: "sap-icon://less",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("MAPCONTAINER_ZOOMOUT"),
			press: this._onNavbarZoomOut.bind(this)
		});

		// Menu buttons for ListPanelStack on mobile phone
		if (Device.system.phone) {
			this._oMenuOpenButton = new sap.m.Button({
				layoutData: new sap.m.OverflowToolbarLayoutData({
					priority: sap.m.OverflowToolbarPriority.NeverOverflow
				}),
				icon: "sap-icon://menu2",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("CONTAINERBASE_MENU"),
				press: function() {
					this._bSegmentedButtonSaveSelectState = true;
					this._showListPanelStack();
				}.bind(this)
			});
			this._oMenuCloseButton = new sap.m.Button({
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://nav-back",
				press: function() {
					this._bSegmentedButtonSaveSelectState = true;
					this._hideListPanelStack();
				}.bind(this)
			});
		}
	};

	MapContainer.prototype.exit = function() {
		if (this._oNavbar) {
			this._oNavbar.destroy();
			this._oNavbar = undefined;
		}
		if (this._oScrollCont) {
			this._oScrollCont.destroy();
			this._oScrollCont = undefined;
		}
		// call super exit
		ContainerBase.prototype.exit.apply(this, arguments);
	};

	// delegate listPanelStack aggregation to ScrollContainer content aggregation
	MapContainer.prototype.getListPanelStack = function() {
		return this._oScrollCont.getContent()[0];
	};

	MapContainer.prototype.setListPanelStack = function(oPanel) {
		if (Device.system.phone) {
			// Do not allow to collapse List Panel Stack on mobile phones, since it is rendered in a side container there
			oPanel.setCollapsible(false);
			oPanel.setWidth("100%");
		}
		this._oScrollCont.removeAllContent();
		return this._oScrollCont.addContent(oPanel);
	};

	// ...............................................................................
	// Redefined functions
	// ...............................................................................

	MapContainer.prototype.onBeforeRendering = function() {
		// call super implementation
		ContainerBase.prototype.onBeforeRendering.apply(this, arguments);

		this._oNavbar.removeAllContent();
		// repopulate navbar buttons according current settings

		var content = this.getSelectedContent();
		if (content !== null) {
			var control = content.getContent();
			this._isInstanceGeoAnalytic = control instanceof sap.ui.vbm.GeoMap || control instanceof sap.ui.vbm.AnalyticMap;
			if (this._isInstanceGeoAnalytic) {
				if (this.getShowHome()) {
					this._oNavbar.addContent(this._oHomeButton);
				}
				if (!Device.system.phone && this.getShowRectangularZoom()) {
					this._oNavbar.addContent(this._oRectZoomButton);
				}
				if (this.getShowZoom()) {
					this._oNavbar.addContent(this._oZoomInButton);
					this._oNavbar.addContent(this._oZoomOutButton);
				}
				this._shouldRenderListPanel = true;
			} else {
				this._shouldRenderListPanel = false;
			}
			this._isSupportingMapLayerSwitch = control instanceof sap.ui.vbm.GeoMap && !(control instanceof sap.ui.vbm.AnalyticMap);
			if (this._isSupportingMapLayerSwitch && control.getMapConfiguration() !== null && this.getShowMapLayer()) {

				var config = control.getMapConfiguration();
				var layers = [].concat(config.MapLayerStacks);

				if (layers.length > 1) {

					this._box = new sap.m.HBox({}).addStyleClass("mapContainerHboxPopover");

						this._popover = new sap.m.Popover({
							placement: sap.m.PlacementType.Horizontal,
							content: this._box,
							showHeader: false
						});

						this._selectionMap = new sap.m.Image({
							width: "4.7rem",
							press: function(event) {
								if (this._popover.isOpen()) {
									this._popover.close();
								} else {
									this._popover.openBy(this._selectionMap);
								}
							}.bind(this)
						}).addStyleClass("mapLayerPopoverItem");

				}
				this._shouldRenderMapLayerSwitch = true;
			} else {
				this._shouldRenderMapLayerSwitch = false;
			}
		}
	};

	MapContainer.prototype.onAfterRendering = function() {
		if (Device.system.phone) {
			// append ListPanelStackWrapper to control div to be a sibling of the content wrapper
			var oListPanelWrapperDiv = document.getElementById(this.getId() + "-LPW");
			this.getDomRef().appendChild(oListPanelWrapperDiv);
		}

		// call super implementation
		ContainerBase.prototype.onAfterRendering.apply(this, arguments);

		if (this.getSelectedContent() !== null) {
			var control = this.getSelectedContent().getContent();
			if (this._isSupportingMapLayerSwitch === true && control.getMapConfiguration()) {

				var config = control.getMapConfiguration();
				var layers = [].concat(config.MapLayerStacks);

				if (layers.length > 1) {
					layers.forEach(function(v, index) {

						var verticalLayout = new sap.ui.layout.VerticalLayout({});

						// Access the scene to use getPreviewImage callback
						var scene = control.mVBIContext.GetMainScene();
						var currentMapLayerStack = control.mVBIContext.m_MapLayerStackManager.GetMapLayerStack(v.name);

						var oItem = new sap.m.Image({
							width: "4.5rem",
							press: function(event) {
								this._popover.close();
								oItem.setAlt(v.name);
								var eventSource = event.getSource();
								var text = eventSource.getAlt();
								control.setRefMapLayerStack(text);
								this._currentText.setText(v.name);

								// Call GetPreviewImage with selected map layer stack and set callback image source
								scene.GetPreviewImage(currentMapLayerStack, function(img) {
									// Set the source of selected tile button
									jQuery(".mapLayerPopoverItem").attr("src", img.src);
								});
								this._currentMapLayerStackIndex = index;
							}.bind(this)
						});

						var oItemText = new sap.m.Text({
							text: v.name
						}).addStyleClass("mapLayerPopoverItemText");

						oItem.addStyleClass("layerType");

						// set the source of items in popover
						scene.GetPreviewImage(currentMapLayerStack, function(img) {
							oItem.setSrc(img.src);
						});

						// set tile of selected map layer stack on initial load
						scene.GetPreviewImage(scene.m_MapLayerStack, function(img) {
							jQuery(".mapLayerPopoverItem").attr("src", img.src);
						});

						var name = layers[this._currentMapLayerStackIndex || 0].name;
						this._currentText.setText(name);
						this._box.addItem(verticalLayout);

						verticalLayout.addContent(oItem);
						verticalLayout.addContent(oItemText);
					}, this);
				}
			}
		}
	};

	MapContainer.prototype.setSelectedContent = function(oContent) {
		var oOldControl;
		if (this._oSelectedContent) {
			if ((oOldControl = this._oSelectedContent.getContent()) instanceof sap.ui.vbm.GeoMap) {
				oOldControl.unbindProperty("rectZoom", "rectZoom>/rectZoom");
			}
		}
		// call super implementation
		ContainerBase.prototype.setSelectedContent.apply(this, arguments);

		var oNewControl = this._oSelectedContent.getContent();
		if (oNewControl instanceof sap.ui.vbm.GeoMap) {
			oNewControl.bindProperty("rectZoom", "rectZoom>/rectZoom");
		}
	};

	MapContainer.prototype._addToolbarContent = function() {
		if (Device.system.phone) {
			this._oToolbar.addContent(this._oMenuOpenButton);
		}
		// call super implemetation
		ContainerBase.prototype._addToolbarContent.apply(this, arguments);
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	MapContainer.prototype._onNavbarZoomIn = function(oEvent) {

		var control = this.getSelectedContent().getContent();
		if (control.getZoomlevel && control.setZoomlevel && control.setEnableAnimation) {
			control.setEnableAnimation(true);
			control.setZoomlevel(control.getZoomlevel() + 1);
		}
	};

	MapContainer.prototype._onNavbarZoomOut = function(oEvent) {
		var control = this.getSelectedContent().getContent();
		if (control.getZoomlevel && control.setZoomlevel && control.setEnableAnimation) {
			control.setEnableAnimation(true);
			control.setZoomlevel(control.getZoomlevel() - 1);
		}
	};

	MapContainer.prototype._onNavbarHome = function(oEvent) {
		var control = this.getSelectedContent().getContent();
		if (control.goToStartPosition) {
			control.goToStartPosition();
		}
	};

	MapContainer.prototype._showListPanelStack = function() {
		jQuery("#" + this.getId() + "-LPW").addClass("sapUiVkMapContainerLPWIn");
		jQuery("#" + this.getId() + "-wrapper").addClass("sapUiVkMapContainerMapOut");
	};

	MapContainer.prototype._hideListPanelStack = function() {
		jQuery("#" + this.getId() + "-LPW").removeClass("sapUiVkMapContainerLPWIn");
		jQuery("#" + this.getId() + "-wrapper").removeClass("sapUiVkMapContainerMapOut");
	};

	return MapContainer;

});

}; // end of sap/ui/vk/MapContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewport') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.NativeViewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewport",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler", "./Messages", "./ContentConnector"
], function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler, Messages, ContentConnector) {
	"use strict";

	/**
	 * Constructor for a new NativeViewport.
	 *
	 * @param {string} [sId] ID for the new Native Viewport control, generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Native Viewport control.
	 * @class Enables loading, pan, zoom and overlay capabilities for a subset of file formats capable of being loaded into a browser natively.
	 *
	 * <pre>
	 * viewer.loadContent(&quot;https://www.google.co.nz/images/srpr/logo11w.png&quot;, &quot;png&quot;, true);
	 * </pre>
	 *
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @version 1.50.7
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.NativeViewport
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NativeViewport = Control.extend("sap.ui.vk.NativeViewport", /** @lends sap.ui.vk.NativeViewport.prototype */
	{
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full view (best fit).
				 */
				limitZoomOut: {
					type: "boolean",
					group: "Behavior",
					defaultValue: false
				}
			},
			publicMethods: [
				"beginGesture",
				"endGesture",
				"getViewInfo",
				"loadUrl",
				"pan",
				"queueCommand",
				"rotate",
				"setViewInfo",
				"tap",
				"zoom"
			],
			associations: {
				/**
				 * An association to the <code>ContentConnector</code> instance that manages content resources.
				 */
				contentConnector: {
					type: "sap.ui.vk.ContentConnector",
					multiple: false
				}
			},
			events: {
				/**
				 * Raised when the display size of the image in the Native Viewport changes.
				 *
				 * @param {object} [oldSize] The starting size of the image.
				 * @param {object} [size] The final size of the image after the <code>resize</code> event.
				 */
				"resize": {
					parameters: {
						oldSize: "object",
						size: "object"
					}
				},
				/**
				 * Raised when the display position or magnification of the image in the Native Viewport changes.
				 *
				 * @param {object} [pan] The change in distance along the x, y-coordinates.
				 * @param {float} [zoom] The change in zoom factor.
				 */
				"move": {
					parameters: {
						pan: "object",
						zoom: "float"
					}
				}
			}
		}
	});

	NativeViewport.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.call(this);
		}

		this._canvas = null;
		this._canvas = document.createElement("div");
		// When we are doing the position calculations, we always assume this element is adding children
		// to its left, which is not the case in RTL mode. This is why we are setting the alignment to be "left".
		this._canvas.style.textAlign = "left";

		this._canvas.id = jQuery.sap.uid();

		this._resizeListenerId = null;

		this._viewportHandler = new ViewportHandler(this);
		this._loco = new Loco();
		this._loco.addHandler(this._viewportHandler);

		this._img = null;
		this._svg = null;
		this._svgError = null;
		this._reset();

		this._gx = 0;
		this._gy = 0;

		this._errorImageWidth = 550;
		this._errorImageHeight = 512;

		this._imageW = 0;
		this._imageH = 0;

		this._s4BestFit = 0;

		this._update = function() {};

		this._svgid = this.getId() + "-svg";

		this._doBestFitAfterResize = false;
	};

	NativeViewport.prototype.exit = function() {
		this._loco.removeHandler(this._viewportHandler);
		this._viewportHandler.destroy();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
		if (Control.prototype.exit) {
			Control.prototype.exit.call(this);
		}
	};

	NativeViewport.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	NativeViewport.prototype.onAfterRendering = function() {
		if (this._canvas) {
			var domRef = this.getDomRef();
			domRef.appendChild(this._canvas);
			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
		}
	};

	/**
	 * @param {object} event Event broadcast by the {sap.ui.core.ResizeHandler}
	 * @private
	 */
	NativeViewport.prototype._handleResize = function(event) {
		this.fireResize({
			oldSize: event.oldSize,
			size: event.size
		});

		if (this._doBestFitAfterResize) {
			this._doBestFitAfterResize = false;
			this._bestFit();
		}

		this._update();

	};

	/**
	 * @private
	 */
	NativeViewport.prototype._reset = function() {
		this._x = 0;
		this._y = 0;
		this._s = 1.0;
		this._r = 0;
	};

	/**
	 * @private
	 */
	NativeViewport.prototype._updateIMG = function() {
		if (this._img != null) {
			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;
			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ")";

			this._img.style.transform = transform;
			this._img.style.webkitTransform = transform;
			this._img.style.msTransform = transform;
			this._img.style.MozTransform = transform;
			this._img.style.OTransform = transform;
		}
	};

	NativeViewport.prototype._updateSVG = function() {
		if (this._svg != null) {

			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;

			if ((this.x < 0) && (this.y < 0)) {
				x = 0;
				y = 0;
			}
			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ");";

			this._svg.setAttribute("style", "transform:" + transform +
				"webkitTransform:" + transform +
				"msTransform:" + transform +
				"MozTransform:" + transform +
				"OTransform:" + transform);
		}
	};

	NativeViewport.prototype._updateError = function() {
		if (this._svgError != null) {
			var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
			var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;

			if ((this.x < 0) && (this.y < 0)) {
				x = 0;
				y = 0;
			}

			var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ");";

			this._svgError.setAttribute("style", "transform:" + transform +
				"webkitTransform:" + transform +
				"msTransform:" + transform +
				"MozTransform:" + transform +
				"OTransform:" + transform);
		}
	};
	/**
	 * @private
	 */
	NativeViewport.prototype._bestFit = function() {
		if (this._canvas.children[0] && this._canvas.children[0].getBoundingClientRect()) {
			// Zoom to best fit
			var widthParentChildRatio = this._canvas.clientWidth / this._canvas.children[0].getBoundingClientRect().width,
				heightParentChildRatio = this._canvas.clientHeight / this._canvas.children[0].getBoundingClientRect().height,
				scale = widthParentChildRatio < heightParentChildRatio ? widthParentChildRatio : heightParentChildRatio;
			this.zoom(scale);

			// Getting the image and nativeViewport dimensions so we can center the image
			var offsetLeft = jQuery(this._canvas.children[0]).position().left - jQuery(this._canvas).position().left,
				offsetTop = jQuery(this._canvas.children[0]).position().top - jQuery(this._canvas).position().top,
				imageWidth = this._canvas.children[0].getBoundingClientRect().width,
				imageHeight = this._canvas.children[0].getBoundingClientRect().height,
				viewportWidth = this._canvas.getBoundingClientRect().width,
				viewportHeight = this._canvas.getBoundingClientRect().height;

			// Center horizontally and vertically
			var deltaX = (viewportWidth - imageWidth) / 2 - offsetLeft,
				deltaY = (viewportHeight - imageHeight) / 2 - offsetTop;
			this.pan(deltaX, deltaY);

			// saving the scale used for best fit
			this._s4BestFit = this._s;
		}
	};

	/**
	 * Loads a image URL into Viewport.
	 *
	 * @param {string} url: The URL of the resource.
	 * @param {function} onload: onload callback, called when the resource is loaded successfully.
	 * @param {function} onerror: onerror callback, called when an error occurs during the loading process.
	 * @param {function} onprogress: onprogress callback, called during the loading process.
	 * @param {array} resourceType: an array of type of resources to load.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	NativeViewport.prototype.loadUrl = function(url, onload, onerror, onprogress, resourceType) {

		if (/^(svg)$/.test(resourceType.toLowerCase())) {

			while (this._canvas.lastChild) {
				this._canvas.removeChild(this._canvas.lastChild);
			}
			this._reset();

			this._svg = document.createElement("object");
			this._svg.setAttribute("type", "image/svg+xml");
			this._svg.setAttribute("data", url);
			this._svg.setAttribute("id", this._svgid);
			this._svg.setAttribute("class", "SVGImage");
			this._canvas.appendChild(this._svg);

			var svgCover = document.createElement("div");
			this._canvas.appendChild(svgCover);
			svgCover.style.position = "absolute";
			svgCover.style.top = 0;
			svgCover.style.left = 0;
			svgCover.style.height = "100%";
			svgCover.style.width = "100%";

			this._svg.style.visibility = "hidden";
			this._svg.onload = function() {
				setTimeout(function() {
					this._imageW = this._svg.getBoundingClientRect().width;
					this._imageH = this._svg.getBoundingClientRect().height;
					this._s = 1;
					this._update = this._updateSVG.bind(this);
					this._bestFit();
					onload();
					// we want the onload event to be triggered only initially
					this._svg.onload = undefined;
				}.bind(this), 0);
			}.bind(this);

			this._svg.src = url;

			this._svg.onerror = function() {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT1.summary), Messages.VIT1.code, "sap.ui.vk.NativeViewport");
				onerror();
				if (this._svg.parentNode === this._canvas) {
					this._canvas.removeChild(this._svg);
				}
			}.bind(this);

			return this;

		} else if (/^(jpg|png|gif|bmp|tif|tiff)$/.test(resourceType.toLowerCase())) {
			while (this._canvas.lastChild) {
				this._canvas.removeChild(this._canvas.lastChild);
			}

			// pdf rendering
			// http://mozilla.github.io/pdf.js/web/viewer.html
			// http://stackoverflow.com/questions/15341010/render-pdf-to-single-canvas-using-pdf-js-and-imagedata
			// https://github.com/mozilla/pdf.js
			this._reset();

			this._img = new Image();
			this._img.onload = function() {
				this._imageW = this._img.width;
				this._imageH = this._img.height;

				setTimeout(function() {
					this._canvas.appendChild(this._img);
					this._update = this._updateIMG.bind(this);
					this._bestFit();
				}.bind(this), 0);

				onload();
			}.bind(this);

			this._img.onerror = function() {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT2.summary), Messages.VIT2.code, "sap.ui.vk.NativeViewport");
				onerror();
			};

			this._img.src = url;

			return this;

		} else {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT3.summary), Messages.VIT3.code, "sap.ui.vk.NativeViewport");
			onerror();
		}
	};

	NativeViewport.prototype.loadFailed = function(textContent) {

		while (this._canvas.lastChild) {
			this._canvas.removeChild(this._canvas.lastChild);
		}
		this._reset();

			// We need the svg to be in a div container because SVGS
			// do not handle the offset properties properly.
			// These properties will be deprecated by the browser vendors.
			this._svgError = document.createElement("div");
			this._svgError.className = "svgErrorContainer";

			this._svgErrorElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
				this._svgErrorElement.setAttribute("width", "550px");
				this._svgErrorElement.setAttribute("height", "512px");
				this._svgErrorElement.setAttribute("viewBox", "-244 -244 512 512");
				this._svgErrorElement.setAttribute("enable-background", "new -244 -244 512 512");
				this._svgErrorElement.setAttribute("id", "SVGError");

			var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
				rect.setAttribute("fill", "#FFFFFF");
				rect.setAttribute("x", "-244");
				rect.setAttribute("y", "-244");
				rect.setAttribute("width", "512");
				rect.setAttribute("height", "512");
				rect.setAttribute("opacity", "0.1");
				this._svgErrorElement.appendChild(rect);

			var pathCircle = document.createElementNS("http://www.w3.org/2000/svg", "path");
				pathCircle.setAttribute("fill", "#474747");
				pathCircle.setAttribute("d", "M12.833,89.742c-70.781,0-128.366-57.584-128.366-128.366c0-70.781,57.584-128.365,128.366-128.365 s128.365,57.584,128.365,128.365C141.198,32.158,83.614,89.742,12.833,89.742z M12.833-146.989 c-59.753,0-108.366,48.612-108.366,108.365c0,59.752,48.613,108.366,108.366,108.366S121.198,21.129 121.198-38.624 C121.198-98.376,72.586-146.989,12.833-146.989z");
				pathCircle.setAttribute("opacity", "0.3");
				this._svgErrorElement.appendChild(pathCircle);

			var rectExclamation = document.createElementNS("http://www.w3.org/2000/svg", "rect");
				rectExclamation.setAttribute("fill", "#474747");
				rectExclamation.setAttribute("x", "-2.167");
				rectExclamation.setAttribute("y", "-120.847");
				rectExclamation.setAttribute("width", "30");
				rectExclamation.setAttribute("height", "119.447");
				rectExclamation.setAttribute("fill", "#474747");
				rectExclamation.setAttribute("opacity", "0.3");
				this._svgErrorElement.appendChild(rectExclamation);

			var rectExclamationCircle = document.createElementNS("http://www.w3.org/2000/svg", "rect");
				rectExclamationCircle.setAttribute("fill", "#474747");
				rectExclamationCircle.setAttribute("x", "-2.167");
				rectExclamationCircle.setAttribute("y", "13.6");
				rectExclamationCircle.setAttribute("width", "30");
				rectExclamationCircle.setAttribute("height", "30");
				rectExclamationCircle.setAttribute("opacity", "0.3");
				this._svgErrorElement.appendChild(rectExclamationCircle);

			var pathCircleOverlay = document.createElementNS("http://www.w3.org/2000/svg", "path");
				pathCircleOverlay.setAttribute("fill", "#474747");
				pathCircleOverlay.setAttribute("d", "M10.833,87.33c-70.781,0-128.366-57.584-128.366-128.365c0-70.781,57.584-128.365,128.366-128.365 s128.365,57.584,128.365,128.365C139.198,29.746,81.614,87.33,10.833,87.33z M10.833-149.4 c-59.753,0-108.366,48.612-108.366,108.365S-48.92,67.33,10.833,67.33S119.198,18.718,119.198-41.035S70.586-149.4,10.833-149.4z");
				this._svgErrorElement.appendChild(pathCircleOverlay);

			var rectExclamationOverlay = document.createElementNS("http://www.w3.org/2000/svg", "rect");
				rectExclamationOverlay.setAttribute("fill", "#474747");
				rectExclamationOverlay.setAttribute("x", "-4.167");
				rectExclamationOverlay.setAttribute("y", "-123.259");
				rectExclamationOverlay.setAttribute("width", "30");
				rectExclamationOverlay.setAttribute("height", "119.447");
				rectExclamationOverlay.setAttribute("fill", "#474747");
				this._svgErrorElement.appendChild(rectExclamationOverlay);

			var rectExclamationCircleOverlay = document.createElementNS("http://www.w3.org/2000/svg", "rect");
				rectExclamationCircleOverlay.setAttribute("fill", "#474747");
				rectExclamationCircleOverlay.setAttribute("x", "-4.167");
				rectExclamationCircleOverlay.setAttribute("y", "11.188");
				rectExclamationCircleOverlay.setAttribute("width", "30");
				rectExclamationCircleOverlay.setAttribute("height", "30");
				rectExclamationCircleOverlay.setAttribute("fill", "#474747");
				this._svgErrorElement.appendChild(rectExclamationCircleOverlay);

			var textOverlay = document.createElementNS("http://www.w3.org/2000/svg", "text");
				textOverlay.setAttribute("id", "textError");
				textOverlay.setAttribute("left", "auto");
				textOverlay.setAttribute("right", "auto");
				textOverlay.setAttribute("y", "150");
				textOverlay.setAttribute("x", "10");
				textOverlay.setAttribute("display", "block");
				textOverlay.setAttribute("text-anchor", "middle");
				textOverlay.setAttribute("fill", "#474747");
				textOverlay.setAttribute("style", "font-family:Arial");
				textOverlay.setAttribute("font-size", "32");
				textOverlay.textContent = textContent ? textContent : sap.ui.vk.getResourceBundle().getText("VIEWPORT_MESSAGEUNSUPPORTEDFILEFORMAT");
				this._svgErrorElement.appendChild(textOverlay);

				this._svgError.appendChild(this._svgErrorElement);
				this._canvas.appendChild(this._svgError);
				this._imageW = this._errorImageWidth;
				this._imageH = this._errorImageHeight;
				this._update = this._updateError.bind(this);
				this._doBestFitAfterResize = true;

				setTimeout(function() {
					this._bestFit();
				}.bind(this), 0);

				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT4.summary), Messages.VIT4.code, "sap.ui.vk.NativeViewport");

				return this;
		};

	/**
	 * Marks the start of the current gesture operation.
	 *
	 * @param {int} x: x-coordinate in screen space.
	 * @param {int} y: y-coordinate in screen space.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.beginGesture = function(x, y) {
		this._gx = (x - this._canvas.clientWidth / 2 - this._x) / this._s;
		this._gy = (y - this._canvas.clientHeight / 2 - this._y) / this._s;
		return this;
	};

	/**
	 * Marks the end of the current gesture operation.
	 *
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.endGesture = function() {
		this._gx = 0;
		this._gy = 0;
		return this;
	};

	/**
	 * Performs a <code>pan</code> gesture to pan across the Viewport.
	 *
	 * @param {int} dx: The change in distance along the x-coordinate.
	 * @param {int} dy: The change in distance along the y-coordinate.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.pan = function(dx, dy) {
		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: 1.0
		});

		return this;
	};

	/**
	 * Rotates the content of the Viewport.
	 *
	 * @param {int} dx: The change in x-coordinate used to define the desired rotation.
	 * @param {int} dy: The change in y-coordinate used to define the desired rotation.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.rotate = function(dx, dy) {
		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: 1.0
		});

		return this;
	};

	/**
	 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
	 *
	 * @param {double} z: Zoom factor. A scale factor that specifies how much to zoom in or out by.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.zoom = function(z) {
		// Canvas zooming: http://stackoverflow.com/questions/3420975/html5-canvas-zooming
		var gxo = this._gx * this._s;
		var gyo = this._gy * this._s;

		// limit zoom out to a quarter of best fit if limiting is active
		var newScale = this._s * z;
		var zoomOutLimit = (this.getLimitZoomOut()) ? this._s4BestFit * 0.25 : 0.0001;
		var zoomInLimit = 500;
		if ((newScale > zoomOutLimit) && (newScale < zoomInLimit)){
			this._s = newScale;
		} else if (newScale < zoomInLimit) {
			z = zoomOutLimit / this._s;
			this._s = zoomOutLimit;
		} else {
			z = zoomInLimit / this._s;
			this._s = zoomInLimit;
		}

		var gxn = this._gx * this._s;
		var gyn = this._gy * this._s;
		var dx = gxo - gxn;
		var dy = gyo - gyn;

		this._x += dx;
		this._y += dy;
		this._update();
		this.fireMove({
			pan: {
				x: dx,
				y: dy
			},
			zoom: z
		});

		return this;
	};

	/**
	 * Executes a click or tap gesture.
	 *
	 * @param {int} x: The tap gesture's x-coordinate.
	 * @param {int} y: The tap gesture's y-coordinate.
	 * @param {boolean} isDoubleClick: Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code>
	 *        indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.tap = function(x, y, isDoubleClick) {
		if (isDoubleClick) {
			this._bestFit();
		}
		return this;
	};

	/**
	 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
	 *
	 * @param {function} command: The function to be executed.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.queueCommand = function(command) {
		command();
		return this;
	};

	/**
	 * Gets information about the Viewport's attributes; for example, camera.
	 *
	 * @return {object} ViewInfo object.
	 * @public
	 */
	NativeViewport.prototype.getViewInfo = function() {
		var viewInfo = {};
		viewInfo.camera = [
			this._s, 0, 0, this._s, this._x, this._y
		];

		return viewInfo;
	};

	/**
	 * Sets information about the Viewport's attributes; for example, camera.
	 *
	 * @param {object} viewInfo: ViewInfo object.
	 * @return {sap.ui.vk.NativeViewport} this
	 * @public
	 */
	NativeViewport.prototype.setViewInfo = function(viewInfo) {
		var cam = viewInfo.camera;

		this._s = cam[0];
		this._x = cam[4];
		this._y = cam[5];

		this._update();

		return this;
	};

	/**
	 * It retrieves information about the current virtual native viewport.
	 * The information can used for making calculations when restoring Redlining elements.
	 * @returns {object} outputSize The information in this object:
	 <ul>
		<li><b>left</b> - The x coordinate of the top-left corner of the virtual native viewport</li>
		<li><b>top</b> - The y coordinate of the top-left corner of the virtual native viewport</li>
		<li><b>sideLength</b> - The side length of the virtual native viewport</li>
	 </ul>
	 * @public
	 */
	NativeViewport.prototype.getOutputSize = function() {
		var cameraInfo = this.getViewInfo().camera,
			boundingClientRect = this.getDomRef().getBoundingClientRect();
		// x and y coordinates are showing the position of the top-left
		// corner of the virtual viewport within the NativeViewport.
		// Because the getViewInfo method considers the center of the viewport (0,0),
		// we have to divide the width and height by 2 and add the current x (or y) position.
		return {
			left: boundingClientRect.width / 2 + cameraInfo[4],
			top: boundingClientRect.height / 2 + cameraInfo[5],
			sideLength: this._canvas.children[0].getBoundingClientRect().width
		};
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	NativeViewport.prototype._onAfterUpdateContentConnector = function() {
		this._setImage(this._contentConnector.getContent());
	};

	NativeViewport.prototype._onBeforeClearContentConnector = function() {
		this._setImage(null);
	};

	NativeViewport.prototype._handleContentReplaced = function(event) {
		this._setImage(event.getParameter("newContent"));
	};

	NativeViewport.prototype._setImage = function(image) {
		while (this._canvas.lastChild) {
			this._canvas.removeChild(this._canvas.lastChild);
		}
		this._reset();
		if (image instanceof HTMLObjectElement) {
			this._svg = image;
			this._svg.setAttribute("id", this._svgid);
			this._canvas.appendChild(this._svg);

			var svgCover = document.createElement("div");
			this._canvas.appendChild(svgCover);
			svgCover.style.position = "absolute";
			svgCover.style.top = 0;
			svgCover.style.left = 0;
			svgCover.style.height = "100%";
			svgCover.style.width = "100%";

			jQuery.sap.delayedCall(10, this, function() {
				this._imageW = this._svg.getBoundingClientRect().width;
				this._imageH = this._svg.getBoundingClientRect().height;
				this._s = 1;
				this._update = this._updateSVG.bind(this);
				this._bestFit();
			});
		} else if (image instanceof HTMLImageElement) {
			this._img = image;
			this._canvas.appendChild(this._img);

			jQuery.sap.delayedCall(10, this, function() {
				this._imageW = this._img.width;
				this._imageH = this._img.height;
				this._update = this._updateIMG.bind(this);
				this._bestFit();
			});
		}
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Keyboard handling begins.

	var rotateDelta = 2;
	var panDelta = 2;

	[
		{ key: "left",  dx: -panDelta, dy:         0 },
		{ key: "right", dx: +panDelta, dy:         0 },
		{ key: "up",    dx:         0, dy: -panDelta },
		{ key: "down",  dx:         0, dy: +panDelta }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.pan(item.dx, item.dy);
			this.endGesture();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	[
		{ key: "left",  dx: -rotateDelta, dy:            0 },
		{ key: "right", dx: +rotateDelta, dy:            0 },
		{ key: "up",    dx:            0, dy: -rotateDelta },
		{ key: "down",  dx:            0, dy: +rotateDelta }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key + "modifiers"] = function(event) {
			if (event.shiftKey && !(event.ctrlKey || event.altKey || event.metaKey)) {
				this.beginGesture(this.$().width() / 2, this.$().height() / 2);
				this.rotate(item.dx, item.dy);
				this.endGesture();
				event.preventDefault();
				event.stopPropagation();
			}
		};
	});

	[
		{ key: "minus", d: 0.98 },
		{ key: "plus",  d: 1.02 }
	].forEach(function(item) {
		NativeViewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.zoom(item.d);
			this.endGesture();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	// Keyboard handling ends.
	////////////////////////////////////////////////////////////////////////

	ContentConnector.injectMethodsIntoClass(NativeViewport);

	return NativeViewport;

});

}; // end of sap/ui/vk/NativeViewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeProxy class.
jQuery.sap.declare('sap.ui.vk.NodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	/**
	 * Constructor for a new NodeProxy.
	 *
	 * @class
	 * Provides a proxy object to the node in the node hierarchy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy} method.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.NodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeProxy = ManagedObject.extend("sap.ui.vk.NodeProxy", /** @lends sap.ui.vk.NodeProxy.prototype */ {
		metadata: {
			properties: {
				/**
				 * The node reference. This property is read-only.
				 */
				nodeRef: "any",

				/**
				 * The node VE IDs. This property is read-only.
				 */
				veIds: "object[]",

				/**
				 * The name of the node. This property is read-only.
				 */
				name: "string",

				/**
				 * The local transformation matrix of the node.
				 */
				localMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The world transformation matrix of the node.
				 */
				worldMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The node opacity.
				 */
				opacity: {
					type: "float",
					bindable: "bindable"
				},

				/**
				 * The tint color.<br/>
				 *
				 * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material color and tint color.
				 */
				tintColorABGR: {
					type: "int",
					bindable: "bindable"
				},

				/**
				 * The tint color.
				 */
				tintColor: {
					type: "sap.ui.core.CSSColor",
					bindable: "bindable"
				},

				/**
				 * The node metadata. This property is read-only.
				 */
				nodeMetadata: "object",

				/**
				 * The indicator showing if the node has child nodes. This property is read-only.
				 */
				hasChildren: "boolean",

				/**
				 * The indicator showing if the node is closed. This property is read-only.
				 */
				closed: "boolean"
			},

			publicMethods: [
				"getSceneRef"
			]
		}
	});

	/**
	 * Gets the scene reference that this NodeProxy object wraps.
	 *
	 * @function
	 * @name sap.ui.vk.NodeProxy#getSceneRef
	 *
	 * @returns {any} The scene reference that this NodeProxy object wraps.
	 * @public
	 */

	NodeProxy.prototype.setClosed = function(value) {
		return this;
	};

	NodeProxy.prototype.setHasChildren = function(value) {
		return this;
	};

	NodeProxy.prototype.setName = function(value) {
		return this;
	};

	NodeProxy.prototype.setNodeId = function(value) {
		return this;
	};

	NodeProxy.prototype.setNodeMetadata = function(value) {
		return this;
	};

	NodeProxy.prototype.setVeIds = function(value) {
		return this;
	};


	return NodeProxy;
});

}; // end of sap/ui/vk/NodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Notifications') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Notifications.
jQuery.sap.declare('sap.ui.vk.Notifications'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Notifications",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./Messages"
], function(jQuery, library, Control, Messages) {
	"use strict";

	/**
	 * Constructor for a new Notifications.
	 *
	 * @class
	 * Provides the ability to display logged console messages within your application.
	 *
	 * @param {string} [sId] ID for the new Notifications control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Notifications control.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Notifications
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Notifications = Control.extend("sap.ui.vk.Notifications", /** @lends sap.ui.vk.Notifications.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"clearAllMessages"
			],
			aggregations: {
				_messagePopover: {
					type: "sap.m.MessagePopover",
					multiple: false,
					visibility: "hidden"
				},
				_messagePopoverToggleButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				/**
				 * This event will be fired when all messages in the log are deleted.
				 */
				allMessagesCleared: {},

				/**
				 * This event will be fired when a new log message is added.
				 */
				messageAdded: {}
			}
		}
	});

	Notifications.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.call(this);
		}

		var messagePopover; // forward declaration.

		var messagePopoverToggleButton = new sap.m.ToggleButton({
			icon: "sap-icon://message-popup",
			type: sap.m.ButtonType.Emphasized,
			tooltip: sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVERBUTTON"),
			text: "0",
			press: function(event) {
				if (messagePopoverToggleButton.getPressed()) {
					messagePopover.openBy(messagePopoverToggleButton);
				} else {
					messagePopover.close();
				}
			}
		});
		messagePopoverToggleButton.addStyleClass("messagePopoverButton");
		this.setAggregation("_messagePopoverToggleButton", messagePopoverToggleButton);

		messagePopover = new sap.m.MessagePopover({
			headerButton: new sap.m.Button({
				text: sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVER_CLEARBUTTON"),
				type: sap.m.ButtonType.Emphasized,
				tooltip: sap.ui.vk.getResourceBundle().getText("MESSAGEPOPOVER_CLEARBUTTON"),
				press: function(event) {
					messagePopover.getParent().clearAllMessages();
				}
			}),
			// If the popover is closed via its Close button we need to change the toggle button's state.
			afterClose: messagePopoverToggleButton.setPressed.bind(messagePopoverToggleButton, false)
		});
		messagePopover.addStyleClass("sapVizKitNotificationPopover");
		this.setAggregation("_messagePopover", messagePopover);

		jQuery.sap.log.addLogListener(this);
	};

	Notifications.prototype.exit = function() {
		jQuery.sap.log.removeLogListener(this);

		if (Control.prototype.exit) {
			Control.prototype.exit.call(this);
		}
	};

	// Implementation of LogListener.onLogEntry() interface method.
	Notifications.prototype.onLogEntry = function(event) {
		if (/^sap\.ui\.vk/.test(event.component)) {
			var mess = event.details,
				cause,
				reso,
				code;
			if (Messages[event.details]) {
				mess = sap.ui.vk.getResourceBundle().getText(Messages[event.details].summary);
				cause = sap.ui.vk.getResourceBundle().getText(Messages[event.details].cause);
				reso = sap.ui.vk.getResourceBundle().getText(Messages[event.details].resolution);
				code = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_CODE");
			}
			var component = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_COMPONENT");
			var date = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_DATE");
			var time = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_TIME");
			var level = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_LEVEL");
			var messageTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_MESSAGE");
			var causeTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_CAUSE");
			var resolutionTitle = sap.ui.vk.getResourceBundle().getText("ERROR_DESCRIPTION_RESOLUTION");

			var description =
				"<div><b>" + component + ":</b><br>" + event.component + "</div><br>" +
				"<div><b>" + date + ":</b><br>" + event.date + "</div><br>" +
				(code ? "<div><b>" + code + ":</b><br>" + event.details + "</div><br>" : "") +
				"<div><b>" + time + ":</b><br>" + event.time.slice(0, event.time.indexOf(".")) + "</div><br>" +
				"<div><b>" + level + ":</b><br>" + event.level + "</div><br>" +
				"<div><b>" + messageTitle + ":</b><br>" + mess + "</div><br>" +
				(cause ? "<div><b>" + causeTitle + ":</b><br>" + cause + "</div><br>" : "") +
				(reso ? "<div><b>" + resolutionTitle + ":</b><br>" + reso + "</div>" : "");

			var item = new sap.m.MessagePopoverItem({
				markupDescription: true,
				title: event.message,
				description: description
			});
			var messagePopover = this.getAggregation("_messagePopover");
			messagePopover.addItem(item);
			this.getAggregation("_messagePopoverToggleButton").setText(messagePopover.getItems().length);
			this.fireMessageAdded();
		}
	};

	/**
	 * Clears the items in the Message Popover list.
	 * @returns {sap.ui.vk.Notifications} <code>this</code> to allow method chaining.
	 * @public
	 */
	Notifications.prototype.clearAllMessages = function() {
		var messagePopover = this.getAggregation("_messagePopover");
		messagePopover.removeAllItems();
		messagePopover.close();
		this.getAggregation("_messagePopoverToggleButton").setText(messagePopover.getItems().length);
		this.fireAllMessagesCleared();
		return this;
	};

	return Notifications;
});

}; // end of sap/ui/vk/Notifications.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Overlay') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Overlay.
jQuery.sap.declare('sap.ui.vk.Overlay'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.lib.sapvbi'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Overlay",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/vbm/library", "sap/ui/vbm/lib/sapvbi", "./Messages"
], function(jQuery, library, Control, vbmLibrary, sapvbi, Messages) {
	"use strict";

	/* global VBI */

	/**
	 * Constructor for a new Overlay.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Constructor for a new Overlay.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Overlay
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Overlay = Control.extend("sap.ui.vk.Overlay", /** @lends sap.ui.vk.Overlay.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				zoomOnResize: {
					type: "boolean",
					group: "Behavior",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				areas: {
					type: "sap.ui.vk.OverlayArea",
					multiple: true,
					singularName: "area"
				}
			},
			associations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				target: {
					type: "sap.ui.core.Control",
					cardinality: "0..1"

				}
			},
			events: {
				/**
				 * Raised when the Control is clicked.
				 */
				click: {
					parameters: {
						/**
						 * Client coordinate X
						 */
						clientX: {
							type: "int"
						},

						/**
						 * Client coordinate Y
						 */
						clientY: {
							type: "int"
						},

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						}
					}
				},

				/**
				 * Raised when the Control is right clicked/longPress(tap and hold).
				 */
				contextMenu: {
					parameters: {

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * Trigger the interactive creation mode to get a position or position array.
	 *
	 * @param {boolean} bPosArray Indicator if a single position or an array is requested
	 * @param {function} callback Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in format
	 *        "x;y;0;..."
	 * @returns {boolean} Indicator whether the creation mode could be triggered successfully or not.
	 * @public
	 * @experimental Since 1.32.0 This method is experimental and might be modified or removerd in future versions.
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.getPositionInteractive = function(bPosArray, callback) {
		if (!this.mIACreateCB && callback && typeof (callback) === "function") {
			this.mIACreateCB = callback;

			var sType = "POS";
			if (bPosArray) {
				sType += "ARRAY";
			}
			// trigger interactive creation mode by defining an automation call
			var oLoad = {
				"SAPVB": {
					"Automation": {
						"Call": {
							"handler": "OBJECTCREATIONHANDLER",
							"name": "CreateObject",
							"object": "MainScene",
							"scene": "MainScene",
							"instance": "",
							"Param": {
								"name": "data",
								"#": "{" + sType + "}"
							}
						}
					}
				}
			};
			this._load(oLoad);
			return true;
		} else {
			// callback function registered -> other create still pending!
			return false;
		}
	};

	/**
	 * open the context menu
	 *
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.openContextMenu = function(oMenu) {
		this._openContextMenu("Overlay", this, oMenu);
	};

	/**
	 * Pan and Zoom for the Overlay. The offsets <i><code>nDeltaX</code></i> and <i><code>nDeltaY</code></i> are applied to the current center
	 * position. If zooming is involved as well the offsets are applied after the zooming.
	 *
	 * @param {int} nDeltaX the move of the center in x-direction in pixels
	 * @param {int} nDeltaY the move of the center in y-direction in pixels
	 * @param {float} fZoom the zoom factor to apply to the current state
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.setPanAndZoom = function(nDeltaX, nDeltaY, fZoom) {
		if (nDeltaX === 0 && nDeltaY === 0 && fZoom === 1) {
			return;
		}
		var scene = this.mVBIContext.GetMainScene();

		// sum up total center offset
		this.totalCenterOffset.dx += nDeltaX;
		this.totalCenterOffset.dy += nDeltaY;

		if (fZoom === 1) {
			// pan
			scene.MoveMap(nDeltaX, nDeltaY);
		} else {
			// zoom to center pos
			var canvas = scene.m_Canvas[0];
			var newLOD = canvas.m_nExactLOD + Math.log(fZoom) * Math.LOG2E;
			scene.ZoomToGeoPosition(VBI.MathLib.DegToRad([
				0.5, 0.5
			]), newLOD);
			scene.MoveMap(this.totalCenterOffset.dx, this.totalCenterOffset.dy);
		}
	};

	/**
	 * Reset the Overlay to its initial size and position.
	 *
	 * @returns {sap.ui.vk.Overlay} This allows method chaining
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.reset = function() {
		this.totalCenterOffset.dx = this.totalCenterOffset.dy = 0;
		var scene = this.mVBIContext.GetMainScene();
		if (scene) {
			scene.ZoomToGeoPosition(VBI.MathLib.DegToRad([
				0.5, 0.5
			]), this.initialZoom);
		} // else: nothing to reset!
		return this;
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	Overlay.prototype.init = function() {
		this.aLoadQueue = null; // load queue...................//

		this.oTargetDomRef = null;

		// create the vbi control
		// context.........................................//
		this.mVBIContext = new VBI.VBIContext(this);
		this.resizeID = "";
		this.resizeIDTarget = "";

		// initially set dirty state for all elements............................//
		this.bVosDirty = true;
		this.bWindowsDirty = true;
		this.bSceneDirty = true;
		this.bDataDeltaUpdate = false;

		// internal state markers
		this.bHandleDataChangeActive = false;
		this.bForceDataUpdate = false;

		this.mAddMenuItems = [];

		this.totalCenterOffset = {
			dx: 0,
			dy: 0
		};
		this.initialZoom = 10;
	};

	Overlay.prototype.exit = function() {
		if (this.mVBIContext) {
			this.mVBIContext.clear(); // clear the resources...................//
		}

		if (this.resizeID != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeID);
			this.resizeID = "";
		}
		if (this.resizeIDTarget != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeIDTarget);
			this.resizeIDTarget = "";
		}

	};

	Overlay.prototype.resize = function(event) {
		var cntrl = (this.oControl != undefined) ? this.oControl : this;

		var ctx = cntrl.mVBIContext;
		if (ctx) {
			var scene = ctx.GetMainScene();
			if (scene) {
				if (cntrl.getZoomOnResize() && event && event.oldSize.width > 0) {
					var zoomChange = Math.log(event.size.width / event.oldSize.width) * Math.LOG2E;
					scene.ZoomToGeoPosition(scene.GetCenterPos(), scene.GetCurrentZoomlevel() + zoomChange, false, true, true);
				}
				scene.resizeCanvas(event, true, true);
			}
		}
	};

	Overlay.prototype.setTarget = function(oTarget) {
		if (!oTarget) {
			return;
		}

		this.setAssociation("target", oTarget);

		this.reset();
		// adapt to target
		if (oTarget instanceof sap.m.Image) {
			// image requires asynchronous adaptation when image file is loaded
			oTarget.addDelegate({
				onAfterRendering: function(oEvent) {
					this.oTargetDomRef = oTarget.getDomRef();
					this.oTargetDomRef.addEventListener("load", jQuery.proxy(this._adaptSizeOfTarget, this));
				}.bind(this)
			});
		} else {
			// the default for arbitrary controls is synchronous adaptation
			oTarget.addDelegate({
				onAfterRendering: function(oEvent) {
					this.oTargetDomRef = oTarget.getDomRef();
					this._adaptSizeOfTarget();
				}.bind(this)
			});
		}

		// set resize Handler on target to observe its size
		if (this.resizeIDTarget != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeIDTarget);
			this.resizeIDTarget = "";
		}
		this.resizeIDTarget = sap.ui.core.ResizeHandler.register(oTarget, this._adaptSizeOfTarget.bind(this));

	};

	Overlay.prototype._adaptSizeOfTarget = function() {
		var target = this.oTargetDomRef;
		var domref = this.getDomRef();
		if (target) {
			try {
				var jTarget = jQuery(target);
				var placing = {
					top: jTarget.offset().top,
					left: jTarget.offset().left,
					width: jTarget.outerWidth(),
					height: jTarget.outerHeight()
				};
				jQuery(domref).width(placing.width).height(placing.height).css("position", "absolute");

				/*
				 * TO DO:
				 * Find a better solution.
				 */
				// jQuery(domref).css("top", placing.top + "px");
				// jQuery(domref).css("left", placing.left + "px");
				jQuery(domref).css("top", "0px").css("left", "0px").css("visibility", "");
			} catch (e) {

				jQuery.sap.log.error(e);
			}
		} else {
			jQuery(domref).css("position", "fixed").width("0px").height("0px").css("top", "0px").css("left", "0px").css("visibility", "hidden");
		}

	};

	// ...........................................................................//
	// once Overlay control is rendered, we attach navigation bar and map it
	// self....//

	Overlay.prototype.onAfterRendering = function() {
		// when there is preserved content restore
		// it.............................//
		if (this.$oldContent.length > 0) {
			this.$().append(this.$oldContent);
		}

		this._adaptSizeOfTarget();

		// process the load
		// queue.................................................//
		if (this.aLoadQueue) {
			var nJ;
			for (nJ = 0; nJ < this.aLoadQueue.length; ++nJ) {
				this._load(this.aLoadQueue[nJ]);
			}
			this.aLoadQueue = null;
		}

		if (this.resizeID == "") {
			this.resize();
			this.resizeID = sap.ui.core.ResizeHandler.register(this, this.resize);
		}

		// do a new adjust of DOM placed
		// elements.................................//
		// the function should do nothing if nothing needs to be
		// done.............//
		var sOverlayId = this.getId();
		if (this.mVBIContext.m_Windows) {
			this.mVBIContext.m_Windows.Awake(sOverlayId);
		}

	};

	Overlay.prototype.onBeforeRendering = function() {
		// this is called before the renderer is
		// called...........................//

		this.$oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	};

	Overlay.prototype.invalidate = function(oSource) {
		// invalidate scene in any case to trigger updateScene
		this.bSceneDirty = true;
		// set the vos dirty state when the aggregations have changed
		if (oSource instanceof sap.ui.vk.OverlayArea) {
			this.bVosDirty = true;
			// if invalidate results from internal data change we allow delta update for data
			this.bDataDeltaUpdate = this.bHandleDataChangeActive;
		}

		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	Overlay.prototype._load = function(dat) {
		// when the control is not yet rendered, queue the load
		// calls.............//
		if (!this.isRendered()) {
			// create the queue and push load
			// requests.............................//
			if (!this.aLoadQueue) {
				this.aLoadQueue = [];
			}
			this.aLoadQueue.push(dat);
			return;
		}

		// do processing when running as a
		// plugin.................................//
		this._loadHtml(dat);

	};

	Overlay.prototype._loadHtml = function(data) {
		var sOverlayId = this.getId();

		var dat = null;

		// ensure that data is converted to a json
		// object.........................//
		// when this is a string, due ABAP servers sometimes sets a BOM at
		// the....//
		// beginning of the string we try to skip
		// this............................//
		if (typeof data == "string") {
			dat = JSON.parse(data.indexOf("{") ? data.substr(data.indexOf("{")) : data);
		} else if (typeof data == "object") {
			dat = data; // this is already an object
		}
		// return immediately when data can not be
		// interpreted....................//
		if (!dat) {
			return;
		}

		// check for data
		// binding.................................................//
		if (!dat["SAPVB"]) {
			var md;
			if (this.mVBIContext && (md = (new VBI.Adaptor(this.mVBIContext)).CreateLoadData(dat))) {
				this.loadHtml(md);
				return;
			} else {
				return; // this is no valid data..............
			}
		}

		/*
		 * TO DO:
		 * Do correct handling when change flags set
		 */
		// set....................//
		var bModifiedData = false;
		var bModifiedScenes = false;
		var bModifiedWindows = false;

		// the data can be a json
		// object..........................................//
		if (jQuery.type(dat) == "object") {
			if (dat.SAPVB) {
				// process configuration
				// ...........................................//
				if (dat.SAPVB.Config) {
					// load the configuraiont
					// .......................................//
					this.mVBIContext.GetConfig().load(dat.SAPVB.Config, this.mVBIContext);
				}
				// process
				// resources................................................//
				if (dat.SAPVB.Resources) {
					// load the
					// resources............................................//
					this.mVBIContext.GetResources().load(dat.SAPVB.Resources, this.mVBIContext);
				}
				// process
				// datatypes................................................//
				if (dat.SAPVB.DataTypes) {
					// load the datatype
					// provider....................................//
					if (!this.mVBIContext["m_DataTypeProvider"]) {
						this.mVBIContext["m_DataTypeProvider"] = new VBI.DataTypeProvider();
					}

					this.mVBIContext["m_DataTypeProvider"].load(dat.SAPVB.DataTypes, this.mVBIContext);
				}
				// process
				// datacontext..............................................//
				if (dat.SAPVB.Data) {
					// load the
					// datacontext..........................................//
					// when the datacontext is loaded, provide the datatype
					// info.....//
					if (!this.mVBIContext["m_DataProvider"]) {
						this.mVBIContext["m_DataProvider"] = new VBI.DataProvider();
					}

					this.mVBIContext["m_DataProvider"].load(dat.SAPVB.Data, this.mVBIContext);
					bModifiedData = true;
				}

				// process
				// windows..................................................//
				if (dat.SAPVB.Windows) {
					if (!this.mVBIContext["m_Windows"]) {
						this.mVBIContext["m_Windows"] = new VBI.Windows();
					}
					this.mVBIContext["m_Windows"].load(dat.SAPVB.Windows, this.mVBIContext);
					bModifiedWindows = true;
				}
				// process
				// actions..................................................//
				if (dat.SAPVB.Actions) {
					if (!this.mVBIContext["m_Actions"]) {
						this.mVBIContext["m_Actions"] = new VBI.Actions();
					}
					this.mVBIContext["m_Actions"].load(dat.SAPVB.Actions, this.mVBIContext);
				}
				// process
				// automations..............................................//
				if (dat.SAPVB.Automation) {
					if (!this.mVBIContext["m_Automations"]) {
						this.mVBIContext["m_Automations"] = new VBI.Automations();
					}
					this.mVBIContext["m_Automations"].load(dat.SAPVB.Automation, this.mVBIContext);
				}
				// context menues
				// ..................................................//
				if (dat.SAPVB.Menus) {
					if (!this.mVBIContext["m_Menus"]) {
						this.mVBIContext["m_Menus"] = new VBI.Menus();
					}
					this.mVBIContext["m_Menus"].load(dat.SAPVB.Menus, this.mVBIContext);
				}

				// process
				// scenes...................................................//
				// Note: process scenes last! Since it triggers a re-rendering
				// everything should be updated before
				if (dat.SAPVB.Scenes) {
					if (!this.mVBIContext["m_SceneManager"]) {
						this.mVBIContext["m_SceneManager"] = new VBI.SceneManager();
					}
					this.mVBIContext["m_SceneManager"].load(dat.SAPVB.Scenes, this.mVBIContext);
					bModifiedScenes = true;
				}

			}

			// notify framework about data
			// modifications...........................//
			if (bModifiedData) {
				if (this.mVBIContext["m_Windows"]) {
					this.mVBIContext["m_Windows"].NotifyDataChange();
				}
			}

			// control context is loaded
			if (bModifiedScenes || bModifiedWindows) {
				if (this.mVBIContext["m_Windows"]) {
					this.mVBIContext["m_Windows"].Awake(sOverlayId);
				}
			}

			if (bModifiedScenes || bModifiedData) {
				if (this.mVBIContext["m_Windows"]) {
					this.mVBIContext["m_Windows"].RenderAsync();
				}
			}
		}
	};

	Overlay.prototype._openContextMenu = function(sTyp, oInst, oMenu) {
		if (oMenu && oMenu.vbi_data && oMenu.vbi_data.VBIName == "DynContextMenu") {
			if (!this.mVBIContext["m_Menus"]) {
				this.mVBIContext["m_Menus"] = new window.VBI.Menus();
			}
			// add additional menu items
			for (var nI = 0; nI < this.mAddMenuItems.length; ++nI) {
				oMenu.addItem(this.mAddMenuItems[nI]);
			}
			this.mVBIContext.m_Menus.m_menus.push(oMenu);
			this._loadHtml({
				"SAPVB": {
					"version": "2.0",
					"Automation": {
						"Call": {
							"earliest": "0",
							"handler": "CONTEXTMENUHANDLER",
							"instance": oInst.sId,
							"name": "SHOW",
							"object": sTyp,
							"refID": "CTM",
							"Param": [
								{
									"name": "x",
									"#": oInst.mClickPos[0]
								}, {
									"name": "y",
									"#": oInst.mClickPos[1]
								}, {
									"name": "scene",
									"#": "MainScene"
								}
							]
						}
					}
				}
			});
		}
		this.mAddMenuItems = [];
	};

	Overlay.prototype._update = function() {
		// set the frame
		// application..............................................//
		var oApp = {
			SAPVB: {}
		};

		// update the scene
		// data.....................................................//
		if (this.bSceneDirty) {
			this._updateScene(oApp);
		}
		this._updateWindows(oApp);

		// add non VO related actions
		if (oApp.SAPVB.Actions) {
			Array.prototype.push.apply(oApp.SAPVB.Actions.Set.Action, this._getActionArray());
		}

		// remove unnecessary sections and return application
		// JSON...................//
		return this._minimizeApp(oApp);
	};

	Overlay.prototype._minimizeApp = function(oApp) {
		/*
		 * TO DO:
		 * calculate a hash instead of caching the json string
		 */

		// remove windows section when not necessary..............................//
		var t, s;
		// We use the condition variable as a temporary variable to replace the shortcircuits
		var condition;
		s = null;
		if (!this.bWindowsDirty) {
			condition = (t = oApp) && (t = t.SAPVB) && (t = t.Windows) && (s = JSON.stringify(t)) && (s == this.mCurWindows) && (delete oApp.SAPVB.Windows);
			if (!condition) {
				this.mCurWindows = s ? s : this.mCurWindows;
			}
		} else {
			this.bWindowsDirty = false;
		}

		// remove unmodified scenes...............................................//
		s = null;
		condition = (t = oApp) && (t = t.SAPVB) && (t = t.Scenes) && (s = JSON.stringify(t)) && (s == this.mCurScenes) && (delete oApp.SAPVB.Scenes);
		if (!condition) {
			this.mCurScenes = s ? s : this.mCurScenes;
		}

		// remove unmodified actions..............................................//
		s = null;
		condition = (t = oApp) && (t = t.SAPVB) && (t = t.Actions) && (s = JSON.stringify(t)) && (s == this.mCurActions) && (delete oApp.SAPVB.Actions);
		if (!condition) {
			this.mCurActions = s ? s : this.mCurActions;
		}

		// remove unmodified datatypes............................................//
		s = null;
		condition = (t = oApp) && (t = t.SAPVB) && (t = t.DataTypes) && (s = JSON.stringify(t)) && (s == this.mCurDataTypes) && (delete oApp.SAPVB.DataTypes);
		if (!condition) {
			this.mCurDataTypes = s ? s : this.mCurDataTypes;
		}

		// remove unmodified data.................................................//
		if (!this.bForceDataUpdate) {
			s = null;
			condition = (t = oApp) && (t = t.SAPVB) && (t = t.Data) && (s = JSON.stringify(t)) && (s == this.mCurData) && (delete oApp.SAPVB.Data);
			if (!condition) {
				this.mCurData = s ? s : this.mCurData;
			}
		} else {
			this.bForceDataUpdate = false; // reset
		}

		return oApp;
	};

	Overlay.prototype._updateWindows = function(oApp) {
		// Main window -> needs always to be defined
		oApp.SAPVB.Windows = {
			"Set": [
				{
					"name": "Main",
					"Window": {
						"id": "Main",
						"caption": "MainWindow",
						"type": "geo",
						"refParent": "",
						"refScene": "MainScene",
						"modal": "true"
					}
				}
			]
		};
	};

	Overlay.prototype._updateScene = function(oApp) {
		var saVO = []; // visual object array in the scene..................//
		var saData = []; // data array in the data section....................//
		var saType = []; // type array in the type section ...................//
		var saAction = []; // actions...........................................//

		this._updateVOData(saVO, saData, saType, saAction);

		// check if an update of the scene is
		// necessary...........................//
		// failsafe but data has to be created
		// first..............................//
		var _saVO = JSON.stringify(saVO);
		var bMetaUpdate = true; // might be reset in else part
		if (!this.saVO) { // no prior VO data -> initial scene definition
			((((oApp.SAPVB.Scenes = {}).Set = {}).SceneGeo = {
				id: "MainScene",
				scaleVisible: "false",
				navControlVisible: "false",
				VisualFrame: {
					minLOD: 5
				},
				NavigationDisablement: {
					move: "true",
					zoom: "true"
				},
				initialZoom: this.initialZoom.toString(),
				initialStartPosition: "0.5;0.5;0"
			}).VO = saVO);
		} else if (this.bRefMapLayerStackDirty || !(this.saVO === _saVO)) {
			// prior VO data exists -> calculate delta and preserve scene
			(oApp.SAPVB.Scenes = this._getSceneVOdelta(JSON.parse(this.m_saVO), saVO));
		} else {
			bMetaUpdate = false;
		}
		this.saVO = _saVO;

		// now we should have data, data types and instance
		// information...........//
		// merge it into the
		// app..................................................//
		if (this.bDataDeltaUpdate) {
			oApp.SAPVB.Data = [];
			for (var nI = 0; nI < saData.length; ++nI) {
				oApp.SAPVB.Data.push({
					Set: {
						name: saData[nI].name,
						type: "N",
						N: saData[nI]
					}
				});
			}
		} else {
			((oApp.SAPVB.Data = {}).Set = {}).N = saData;
		}
		if (bMetaUpdate) {
			(((oApp.SAPVB.DataTypes = {}).Set = {}).N = saType);
		}
		// Update Actions always, since handler could be added or removed at any time!
		(((oApp.SAPVB.Actions = {}).Set = {}).Action = saAction);

		// reset dirty states
		this.bSceneDirty = this.bVosDirty = this.bDataDeltaUpdate = false;
	};

	Overlay.prototype._isEventRegistered = function(sAggregation, sEvent) {
		var aAggregation = this.getAggregation(sAggregation);
		if (!aAggregation) {
			return false;
		}

		for (var nJ = 0; nJ < aAggregation.length; ++nJ) {
			// get the element.....................................................//
			var oInstance = aAggregation[nJ];

			// if one registers for an event we can return........................//
			if (oInstance.hasListeners(sEvent)) {
				return true;
			}
		}
		return false;
	};

	Overlay.prototype._getTemplateBindingInfo = function(sAggregation) {
		// read binding info to check what is bound and what is static
		var oBindingInfo = this.getBindingInfo(sAggregation);
		if (oBindingInfo && oBindingInfo.template) {
			return oBindingInfo.template.mBindingInfos;
		}
	};

	Overlay.prototype._getBindInfo = function(sAggregation) {
		var oBindInfo = {};
		var oTemplateBindingInfo = this._getTemplateBindingInfo(sAggregation);

		// Note: Without Template no static properties -> all bound in the sense of VB JSON!
		oBindInfo.C = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("color") : true;
		oBindInfo.CB = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorBorder") : true;
		oBindInfo.DCH = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("deltaColorHot") : true;
		oBindInfo.CS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorSelect") : true;
		oBindInfo.CNS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorNonSelect") : true;
		oBindInfo.TT = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("tooltip") : true;
		oBindInfo.M = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("changeable") : true;

		oBindInfo.hasTemplate = (oTemplateBindingInfo) ? true : false;

		return oBindInfo;
	};

	Overlay.prototype._updateVOData = function(saVO, saData, saType, saAction) {
		var oBindInfo, oVoTemplate;

		// Overlay Area
		this.AreaBindInfo = oBindInfo = (this.AreaBindInfo) ? this.AreaBindInfo : this._getBindInfo("areas");
		oVoTemplate = (oBindInfo.hasTemplate) ? this.getBindingInfo("areas").template : null;

		// VO Def
		var oOverlayAreaDef = {
			id: "OverlayArea",
			datasource: "OverlayArea",
			type: "{00100000-2012-0004-B001-F311DE491C77}"
		};
		oOverlayAreaDef["posarray.bind"] = oOverlayAreaDef.id + ".P";
		if (oBindInfo.C) {
			oOverlayAreaDef["color.bind"] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.color = oVoTemplate.getColor();
		}
		if (oBindInfo.CB) {
			oOverlayAreaDef["colorBorder.bind"] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorBorder = oVoTemplate.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oOverlayAreaDef["hotDeltaColor.bind"] = oOverlayAreaDef.id + ".DCH";
		} else {
			oOverlayAreaDef.hotDeltaColor = oVoTemplate.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oOverlayAreaDef["colorSelect.bind"] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorSelect = oVoTemplate.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oOverlayAreaDef["colorNonSelect.bind"] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorNonSelect = oVoTemplate.getColorNonSelect();
		}
		if (!oBindInfo.M) {
			oOverlayAreaDef["VB:c"] = oVoTemplate.getChangeable();
		}
		saVO.push(oOverlayAreaDef);

		// Overlay Area Data Type
		var oOverlayAreaType = {
			name: oOverlayAreaDef.id,
			key: "K"
		};
		// extend the object type.................................................//
		oOverlayAreaType.A = [
			{
				"name": "K", // key
				"alias": "K",
				"type": "string"
			}, {
				"name": "VB:s", // selection flag
				"alias": "VB:s",
				"type": "boolean"
			}, {
				"name": "P", // position array
				"alias": "P",
				"type": "vectorarray",
				"changeable": "true"
			}
		];
		if (oBindInfo.C) {
			oOverlayAreaType.A.push({
				"name": "C", // color
				"alias": "C",
				"type": "color"
			});
		}
		if (oBindInfo.CB) {
			oOverlayAreaType.A.push({
				"name": "CB", // color border
				"alias": "CB",
				"type": "string"
			});
		}
		if (oBindInfo.DCH) {
			oOverlayAreaType.A.push({
				"name": "DCH", // delta color hot
				"alias": "DCH",
				"type": "string"
			});
		}
		if (oBindInfo.CS) {
			oOverlayAreaType.A.push({
				"name": "CS", // color select
				"alias": "CS",
				"type": "string"
			});
		}
		if (oBindInfo.CNS) {
			oOverlayAreaType.A.push({
				"name": "CNS", // Color non select
				"alias": "CNS",
				"type": "string"
			});
		}
		if (oBindInfo.TT) {
			oOverlayAreaType.A.push({
				"name": "TT", // tooltip
				"alias": "TT",
				"type": "string"
			});
		}
		saType.push(oOverlayAreaType);

		// Overlay Area Actions
		// check if the different vo events are registered..............................//
		var id = oOverlayAreaDef.id;

		if (this._isEventRegistered("areas", "click")) {
			saAction.push({
				"id": id + "1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this._isEventRegistered("areas", "contextMenu")) {
			saAction.push({
				"id": id + "2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "ContextMenu"
			});
		}
		if (this._isEventRegistered("areas", "edgeClick")) {
			saAction.push({
				"id": id + "7",
				"name": "edgeClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "EdgeClick"
			});
		}
		// register handleMoved in any case for two way binding
		saAction.push({
			"id": id + "4",
			"name": "handleMoved",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleMoved"
		});
		// register edge and handle context menu in any case for build in functions
		saAction.push({
			"id": id + "5",
			"name": "handleContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleContextMenu"
		});
		saAction.push({
			"id": id + "8",
			"name": "edgeContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "EdgeContextMenu"
		});
		if (this._isEventRegistered("areas", "handleClick")) {
			saAction.push({
				"id": id + "6",
				"name": "handleClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "HandleClick"
			});
		}

		// Overlay Area Data
		var oOverlayAreaData = {
			name: oOverlayAreaDef.id,
			E: []
		};
		var aOverlayAreas = this.getAreas();
		for (var nK = 0; nK < aOverlayAreas.length; ++nK) {
			oOverlayAreaData.E.push(aOverlayAreas[nK].getDataElement());
		}
		saData.push(oOverlayAreaData);
	};

	Overlay.prototype._getSceneVOdelta = function(oCurrent, oNew) {
		var aVO = [];
		var aRemove = [];
		// build map of current VOs
		var oVOMap = {};
		for (var nI = 0, len = oCurrent.length; nI < len; ++nI) {
			oVOMap[oCurrent[nI].id] = oCurrent[nI];
		}
		for (var nJ = 0; nJ < oNew.length; ++nJ) {
			if (oVOMap[oNew[nJ].id]) { // VO already exists ...
				if (JSON.stringify(oNew[nJ]) != JSON.stringify(oVOMap[oNew[nJ].id])) { // ...
					// but
					// is
					// different
					aRemove.push({
						"id": oNew[nJ].id,
						"type": "VO"
					}); // remove old VO version from scene and
					aVO.push(oNew[nJ]); // add new VO version
				} // else {} // nothing to do

			} else { // new VO -> add it
				aVO.push(oNew[nJ]);
			}
			delete oVOMap[oNew[nJ].id]; // remove processed VOs from map
		}
		// remove VOs remaining on map
		for (var id in oVOMap) {
			aRemove.push({
				"id": id,
				"type": "VO"
			});
		}
		var retVal = {
			"Merge": {
				"name": "MainScene",
				"type": "SceneGeo",
				"SceneGeo": {
					"id": "MainScene"
				}
			}
		};
		if (aRemove.length) {
			retVal.Merge.SceneGeo.Remove = aRemove;
		}
		if (aVO.length) {
			retVal.Merge.SceneGeo.VO = aVO;
		}

		return retVal;
	};

	Overlay.prototype._getActionArray = function() {
		var aActions = [];
		// subscribe for map event
		// Note: We register Action only if event are subscribed..............................//
		if (this.mEventRegistry["click"]) {
			aActions.push({
				"id": "Overlay1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this.mEventRegistry["contextMenu"]) {
			aActions.push({
				"id": "Overlay2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "ContextMenu",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		aActions.push({
			"id": "Overlay3",
			"name": "GetPosComplete",
			"refScene": "MainScene",
			"refVO": "General",
			"refEvent": "CreateComplete"
		});

		return aActions;
	};

	Overlay.prototype._handleChangedData = function(aNodes) {
		try {
			this.bHandleDataChangeActive = true;
			if (aNodes && aNodes.length) {
				for (var nI = 0, oNode; nI < aNodes.length; ++nI) {
					oNode = aNodes[nI];
					if (oNode.E && oNode.E.length) {
						for (var nJ = 0, oElement, oInst; nJ < oNode.E.length; ++nJ) {
							oElement = oNode.E[nJ];
							oInst = this._findInstance(oElement.K);
							if (oInst) {
								oInst.handleChangedData(oElement);
							}
						}
					}

				}
			}
			this.bHandleDataChangeActive = false;
		} catch (exc) {
			this.bHandleDataChangeActive = false;
			throw exc;
		}
	};

	Overlay.prototype._findInstance = function(sId) {
		var Id = (sId.indexOf(".") !== -1) ? sId.split(".")[1] : sId;
		var aAreas = this.getAreas();
		for (var nI = 0; nI < aAreas.length; ++nI) {
			var oElem = aAreas[nI];
			if (oElem.getId() === Id) {
				return oElem;
			}
		}
		return null;
	};

	Overlay.prototype._handleAggregationEvent = function(event) {
		var oElem;
		if ((oElem = this._findInstance(event.Action.instance))) {
			try {
				oElem.handleEvent(event);
			} catch (exc) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT11.summary), Messages.VIT11.code, "sap.ui.vk.Overlay");
			}
		}

	};

	// ...........................................................................//
	// diagnostics...............................................................//

	Overlay.prototype.isRendered = function() {
		return this.getDomRef() ? true : false;
	};

	// ..........................................................................//
	// Compatibility functions, needed by VBI context
	/**
	 * @param {object} e Event fired by the VBI context.
	 * @private
	 */
	Overlay.prototype.fireSubmit = function(e) {
		// handle VBI submit data
		// analyze the event......................................................//
		var datEvent = JSON.parse(e.data);

		// write changed data back to aggregated elements
		if (datEvent.Data && datEvent.Data.Merge) {
			this._handleChangedData(datEvent.Data.Merge.N);
		}

		// handle actual event
		if (datEvent.Action.object === "OverlayArea") {
			// Event belongs to an aggregated object -> delegate
			this._handleAggregationEvent(datEvent);
		} else {
			// own event -> handle it
			var sActionName = datEvent.Action.name, clickPos;
			if (sActionName === "click" || sActionName === "contextMenu") {
				clickPos = [
					datEvent.Action.Params.Param[0]["#"], datEvent.Action.Params.Param[1]["#"]
				];
			}
			switch (sActionName) {
				case "GetPosComplete":
					// Interactive Position gathering finished
					if (this.mIACreateCB) {
						try {
							this.mIACreateCB(datEvent.Action.Params.Param[0]["#"]);
							this.mIACreateCB = null;
						} catch (exc) {
							// clear callback function in any case
							this.mIACreateCB = null;
							throw exc;
						}
					}
					break;
				case "click":
					// fire the click..................................................//
					this.fireClick({
						clientX: clickPos[0],
						clientY: clickPos[1],
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]["#"]
					});
					break;
				case "contextMenu":
					// create an empty menu
					if (this.mVBIContext.m_Menus) {
						this.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
					}
					sap.ui.getCore().loadLibrary("sap.ui.unified");
					var oMenuObject = new sap.ui.unified.Menu();
					oMenuObject["vbi_data"] = {};
					oMenuObject["vbi_data"].menuRef = "CTM";
					oMenuObject["vbi_data"].VBIName = "DynContextMenu";
					// store the click pos
					this.mClickPos = clickPos;
					// fire the contextMenu..................................................//
					this.fireContextMenu({
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]["#"],
						menu: oMenuObject
					});
					break;
				default:
					break;

			}
		}
	};
	/**
	 * @param {object} data Object whose only property is the VBI scene canvas element.
	 * @private
	 */
	Overlay.prototype.fireRender = function(data) {
	};
	/**
	 * @param {object} data Object whose only property is the VBI scene canvas element.
	 * @private
	 */
	Overlay.prototype.fireMove = function(data) {
	};
	/**
	 * @param {object} data Object whose only property is the VBI scene canvas element.
	 * @private
	 */
	Overlay.prototype.fireZoom = function(data) {
	};
	/**
	 * @param {object} data Object whose only property is the VBI scene canvas element.
	 * @private
	 */
	Overlay.prototype.fireOpenWindow = function(data) {
	};
	/**
	 * @param {object} data Object whose only property is the VBI scene canvas element.
	 * @private
	 */
	Overlay.prototype.fireCloseWindow = function(data) {
	};

	return Overlay;

});

}; // end of sap/ui/vk/Overlay.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayArea') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.OverlayArea.
jQuery.sap.declare('sap.ui.vk.OverlayArea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/OverlayArea",[
	"./library", "sap/ui/core/Element"
], function(library, Element) {
	"use strict";

	/**
	 * Constructor for a new OverlayArea.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation element for the Overlay Control
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.OverlayArea
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var OverlayArea = Element.extend("sap.ui.vk.OverlayArea", /** @lends sap.ui.vk.OverlayArea.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Unique identifier for the object. This is optional. If not provided the default identifier sId is used. However, sId is generated
				 * if template binding is used and thus it is not stable. Provide the key if the object really needs a unique and stable identifier.
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
				 */
				position: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The fill color of the OverlayArea.
				 */
				color: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 0.3)"
				},

				/**
				 * The border color of the OverlayArea.
				 */
				colorBorder: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 1.0)"
				},

				/**
				 * The select color of the OverlayArea in case selection highligthing is desired.
				 */
				colorSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
				 */
				colorNonSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(<hue shift in degree>;<lightness
				 * multiplier>;<saturation multiplier>;<opacity multiplier>)
				 */
				deltaColorHot: {
					type: "string",
					group: "Misc",
					defaultValue: "RHLSA(0;1.3;1.0;1.0)"
				},

				/**
				 * set to true if the element is selected
				 */
				select: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Set to true if OverlayArea is changeable.
				 */
				changeable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			events: {

				/**
				 * The event is raised when there is a click action on an OverlayArea.
				 */
				click: {
					/**
					 * Client coordinate X
					 */
					clientX: {
						type: "int"
					},

					/**
					 * Client coordinate Y
					 */
					clientY: {
						type: "int"
					}
				},

				/**
				 * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
				 */
				contextMenu: {
					parameters: {

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is clicked.
				 */
				edgeClick: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is right clicked.
				 */
				edgeContextMenu: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is moved.
				 */
				handleMoved: {},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is right clicked.
				 */
				handleContextMenu: {
					parameters: {
						/**
						 * Index of the clicked handle. The numbering is zero based.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is clicked.
				 */
				handleClick: {
					/**
					 * Index of the clicked handle. The numbering is zero based.
					 */
					index: {
						type: "int"
					}
				}

			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// OverlayArea.prototype.init = function(){
	// // do something for initialization...
	// };

	/**
	 * open the context menu
	 *
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	OverlayArea.prototype.openContextMenu = function(oMenu) {
		this.getParent().openContextMenu("OverlayArea", this, oMenu);
	};

	OverlayArea.prototype.getDataElement = function() {
		var oElement = {};
		var oBindInfo = this.getParent().AreaBindInfo;
		oElement.K = this.getId(); // Use the Id as key here, since the Event dispatching relies on the structure of the Id!

		// add the VO specific properties..................................//
		if (oBindInfo.C) {
			oElement.C = this.getColor();
		}
		if (oBindInfo.CB) {
			oElement.CB = this.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oElement.DCH = this.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oElement.CS = this.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oElement.CNS = this.getColorNonSelect();
		}
		if (oBindInfo.TT) {
			oElement.TT = this.getTooltip();
		}
		oElement["VB:s"] = this.getSelect();
		oElement.P = this.getPosition();
		if (oBindInfo.M) {
			oElement["VB:c"] = this.getChangeable();
		}
		return oElement;
	};

	OverlayArea.prototype.handleChangedData = function(oElement) {
		if (oElement.P) {
			this.setPosition(oElement.P);
		}
	};

	OverlayArea.prototype.handleEvent = function(event) {
		// construct function name from action name
		var sActionName = event.Action.name;
		var funcname = "fire" + sActionName[0].toUpperCase() + sActionName.slice(1);

		if (sActionName === "contextMenu" || sActionName === "edgeContextMenu" || sActionName === "handleContextMenu") {
			var oParent = this.getParent();
			this.mClickPos = [
				event.Action.Params.Param[0]["#"], event.Action.Params.Param[1]["#"]
			];
			// create an empty menu
			if (oParent.mVBIContext.m_Menus) {
				oParent.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
			}

			sap.ui.getCore().loadLibrary("sap.ui.unified");
			var oMenuObject = new sap.ui.unified.Menu();
			oMenuObject["vbi_data"] = {};
			oMenuObject["vbi_data"].menuRef = "CTM";
			oMenuObject["vbi_data"].VBIName = "DynContextMenu";

			// prepare own menu items for certian events
			if (this.getChangeable()) {
				if (sActionName === "edgeContextMenu") {
					var sEdge = event.Action.Params.Param[2]["#"];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: sap.ui.vk.getResourceBundle().getText("OVL_AREA_EDGE_SPLIT"),
						select: this._handleCtxFunction.bind(this, "SPLIT", sEdge)
					}));
				} else if (sActionName === "handleContextMenu") {
					var sHandle = event.Action.Params.Param[2]["#"];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: sap.ui.vk.getResourceBundle().getText("OVL_AREA_HANDLE_REMOVE"),
						select: this._handleCtxFunction.bind(this, "REMOVE", sHandle)
					}));
				}
			}

			if (this.hasListeners(sActionName)) {
				// fire the event..................................................//
				if (sActionName === "contextMenu") {
					this.firecontextMenu({
						menu: oMenuObject
					});
				} else {
					this[funcname]({
						index: event.Action.Params.Param[2]["#"],
						menu: oMenuObject
					});
				}
			} else {
				oParent._openContextMenu(event.Action.object, this, oMenuObject);
			}

		} else if (sActionName == "click") {
			this.mClickPos = event.Action.AddActionProperties.AddActionProperty[0]["#"];
			this.fireClick({
				clientX: event.Action.Params.Param[0]["#"],
				clientY: event.Action.Params.Param[1]["#"]
			});
		} else if (sActionName.indexOf("Click") > -1) {
			// edgeClick or handleClick
			this[funcname]({
				index: event.Action.Params.Param[2]["#"]
			});
		} else {
			this[funcname]();
		}
	};

	OverlayArea.prototype.getKey = function() {
		var sKey = this.getProperty("key");
		if (!sKey) {
			// Key not given -> return Id instead
			sKey = this.getId();
		}
		return sKey;
	};

	OverlayArea.prototype._handleCtxFunction = function(sFunc, sContext) {
		var aPos = this.getPosition().split(";");
		var offset = sContext * 3;
		if (sFunc === "REMOVE") {
			// delete handle
			aPos.splice(offset, 3);
		} else if (sFunc === "SPLIT") {
			// split edge at midpoint
			var startPos = [
				aPos[offset], aPos[offset + 1]
			];
			var endPos = (offset + 3 < aPos.length) ? [
				aPos[offset + 3], aPos[offset + 4]
			] : [
				aPos[0], aPos[1]
			];
			var midPoint = [
				parseFloat(startPos[0]) + (endPos[0] - startPos[0]) / 2, parseFloat(startPos[1]) + (endPos[1] - startPos[1]) / 2
			];
			aPos.splice(offset + 3, 0, midPoint[0].toString(), midPoint[1].toString(), "0");
		}
		this.setPosition(aPos.toString().replace(/,/g, ";"));
	};

	return OverlayArea;

});

}; // end of sap/ui/vk/OverlayArea.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ProgressIndicator.
jQuery.sap.declare('sap.ui.vk.ProgressIndicator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.ProgressIndicator'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ProgressIndicator",[ "jquery.sap.global", "./library", "sap/m/ProgressIndicator" ], function(jQuery, library, MobileProgressIndicator) {
	"use strict";

	/**
	 * Constructor for a new ProgressIndicator.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator is filled with a color.
	 * Additionally, a user-defined string can be displayed on the ProgressIndicator.
	 * @extends sap.m.ProgressIndicator
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @since 1.50.0
	 * @alias sap.ui.vk.ProgressIndicator
	 */
	var ProgressIndicator = MobileProgressIndicator.extend("sap.ui.vk.ProgressIndicator");

	ProgressIndicator.prototype.setPercentValue = function(fPercentValue) {

		var isValidPercentValue = function isValidPercentValue(value) {
			return (typeof (value) === "number") && !isNaN(value) && value >= 0 && value <= 100;
		};

		var that = this,
			$progressBar,
			fPercentDiff,
			$progressIndicator = this.$(),
			fAnimationDuration,
			bUseAnimations = false;

		if (!isValidPercentValue(fPercentValue)) {
			fPercentValue = 0;
			jQuery.sap.log.warning(this + ": percentValue (" + fPercentValue + ") is not correct! Setting the default percentValue:0.");
		}

		if (this.getPercentValue() !== fPercentValue) {
			fPercentDiff = this.getPercentValue() - fPercentValue;
			this.setProperty("percentValue", fPercentValue, true);

			if (!$progressIndicator.length) {
				return this;
			}

			[ "sapMPIValueMax", "sapMPIValueMin", "sapMPIValueNormal", "sapMPIValueGreaterHalf" ].forEach(function(sClass) {
				$progressIndicator.removeClass(sClass);
			});

			$progressIndicator.addClass(this._getCSSClassByPercentValue(fPercentValue));
			$progressIndicator.addClass("sapMPIAnimate")
				.attr("aria-valuenow", fPercentValue)
				.attr("aria-valuetext", this._getAriaValueText({
					fPercent: fPercentValue
				}));

			fAnimationDuration = bUseAnimations ? Math.abs(fPercentDiff) * 20 : 0;
			$progressBar = this.$("bar");
			$progressBar.animate({
				"flex-basis": fPercentValue + "%"
			}, fAnimationDuration, "linear", function() {
				that._setText.apply(that);
				that.$().removeClass("sapMPIAnimate");
			});
		}

		return this;
	};

	return ProgressIndicator;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineDesignRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.RedlineDesignRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineDesignRenderer",[
	"jquery.sap.global", "./RedlineSurfaceRenderer", "sap/ui/core/Renderer"
], function(jQuery, RedlineSurfaceRenderer, Renderer) {
	"use strict";

	/**
	 * RedlineDesign renderer.
	 * @namespace
	 */
	var RedlineDesignRenderer = Renderer.extend(RedlineSurfaceRenderer);

	RedlineDesignRenderer.render = function(rm, control) {
		RedlineSurfaceRenderer.render.call(this, rm, control);
	};

	RedlineDesignRenderer.renderAfterRedlineElements = function(rm, control) {
		if (control._activeElementInstance && control._getIsDrawingOn()) {
			control._activeElementInstance.render(rm);
		}
	};

	return RedlineDesignRenderer;

}, true);

}; // end of sap/ui/vk/RedlineDesignRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineSurface') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
// Provides control sap.ui.vk.RedlineSurface.
jQuery.sap.declare('sap.ui.vk.RedlineSurface'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineSurface",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./Loco", "./RedlineGesturesHandler"
],
	function(jQuery, library, Control, Loco) {
		"use strict";

		/**
		 *  Constructor for a new RedlineSurface.
		 *
		 * @class Provides a bass class control for redlining.
		 *
		 * @public
		 * @author SAP SE
		 * @version 1.50.7
		 * @extends sap.ui.core.Control
		 * @alias sap.ui.vk.RedlineSurface
		 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
		 */
		var RedlineSurface = Control.extend("sap.ui.vk.RedlineSurface", /** @lends sap.ui.vk.RedlineDesign.prototype */ {
			metadata: {
				library: "sap.ui.vk",
				aggregations: {
					redlineElements: {
						type: "sap.ui.vk.RedlineElement"
					}
				},
				properties: {
					virtualLeft: {
						type: "float"
					},
					virtualTop: {
						type: "float"
					},
					virtualSideLength: {
						type: "float"
					},
					/*
					 * Panning ratio is applied to deltaX and deltaY when broadcasting pan events
					 */
					panningRatio: {
						type: "float",
						defaultValue: 1
					}
				},
				events: {
					pan: {
						parameters: {
							deltaX: "float",
							deltaY: "float"
						}
					},
					zoom: {
						parameters: {
							originX: "float",
							originY: "float",
							zoomFactor: "float"
						}
					}
				}
			}
		});

		RedlineSurface.prototype.init = function() {

		};

		RedlineSurface.prototype.onAfterRendering = function() {

		};

		/**
		 * Exports all the current redline elements as an array of JSON objects.
		 * @returns {object[]} An array of JSON objects.
		 * @public
		 */
		RedlineSurface.prototype.exportJSON = function() {
			return this.getRedlineElements().map(function(element) {
				return element.exportJSON();
			});
		};

		/**
		 * Iterates through all JSON objects from the array passed as parameter, and creates and restores
		 * the redline elements serialized in the array.
		 * @param {object[]} jsonElements An array of serialized redline elements.
		 * @returns {sap.ui.vk.RedlineSurface} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineSurface.prototype.importJSON = function(jsonElements) {
			if (!jQuery.isArray(jsonElements)) {
				jsonElements = [ jsonElements ];
			}

			var virtualLeft = this.getVirtualLeft(),
				virtualTop = this.getVirtualTop(),
				virtualSideLength = this.getVirtualSideLength();

			jsonElements.forEach(function(json) {
				var ElementClass;
				switch (json.type) {
					case sap.ui.vk.Redline.ElementType.Rectangle:
						ElementClass = sap.ui.vk.RedlineElementRectangle;
						break;
					case sap.ui.vk.Redline.ElementType.Ellipse:
						ElementClass = sap.ui.vk.RedlineElementEllipse;
						break;
					case sap.ui.vk.Redline.ElementType.Freehand:
						ElementClass = sap.ui.vk.RedlineElementFreehand;
						break;
					default:
						// TO DO error handling for unsupported element type
				}
				this.addRedlineElement(new ElementClass().importJSON(json, virtualLeft, virtualTop, virtualSideLength));
			}.bind(this));
			return this;
		};

		/**
		 * Translates one or two values from the absolute pixel space to the relative values
		 * calculated in relation to the virtual viewport.
		 * @param {number} x A value in pixels.
		 * @param {number?} y A value in pixels.
		 * @returns {number | object} A relative value, or object containing two properties.
		 * @private
		 */
		RedlineSurface.prototype._toVirtualSpace = function(x, y) {
			if (arguments.length === 1) {
				return x / this.getVirtualSideLength();
			} else {
				return {
					x: (x - this.getVirtualLeft()) / this.getVirtualSideLength(),
					y: (y - this.getVirtualTop()) / this.getVirtualSideLength()
				};
			}
		};

		/**
		 * Translates one or two values from the relative space to the absolute pixel space.
		 * @param {number} x A relative value.
		 * @param {number?} y A relative value.
		 * @returns {number | object} Absolute pixel value corresponding to the parameters.
		 * @private
		 */
		RedlineSurface.prototype._toPixelSpace = function(x, y) {
			if (arguments.length === 1) {
				return x * this.getVirtualSideLength();
			} else {
				return {
					x: x * this.getVirtualSideLength() + this.getVirtualLeft(),
					y: y * this.getVirtualSideLength() + this.getVirtualTop()
				};
			}
		};

		RedlineSurface.prototype.setPanningRatio = function(panningRatio) {
			this.setProperty("panningRatio", panningRatio, true);
		};

		/**
		 * Updates the panning ratio by making calculations based on virtual viewport size and actual viewport size.
		 * @returns {sap.ui.vk.RedlineSurface} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineSurface.prototype.updatePanningRatio = function() {
			var virtualLeft = this.getVirtualLeft(),
				virtualTop = this.getVirtualTop(),
				redlineDomRef = this.getDomRef(),
				redlineClientRect = redlineDomRef.getBoundingClientRect(),
				height = redlineClientRect.height,
				width = redlineClientRect.width,
				panningRatio;

			// Before broadcasting the pan event from within the redline gesture handler,
			// we need to apply a certain ratio to deltaX and deltaY.
			// Usually, the panning ratio is 1 which means no change, but we need to change the ratio when the
			// size of the virtual viewport is greater than the size of the actual viewport.
			if (virtualLeft === 0 && (height < width && virtualTop < 0 || (height > width && virtualTop > 0))) {
				panningRatio = height / width;
			} else {
				panningRatio = 1;
			}
			this.setPanningRatio(panningRatio);
			return this;
		};

		return RedlineSurface;

	});

}; // end of sap/ui/vk/RedlineSurface.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.StepNavigation.
jQuery.sap.declare('sap.ui.vk.StepNavigation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigation",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler",
	"sap/ui/core/Popup", "sap/ui/core/IconPool", "./Messages", "./DvlException", "./ContentConnector"
], function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler,
            Popup, IconPool, Messages, DvlException, ContentConnector) {
	"use strict";

	/**
	 *  Constructor for a new StepNavigation.
	 *
	 * @class
	 * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
	 *
	 * @param {string} [sId] ID for the new control. This ID is generated automatically if no ID is provided.
	 * @param {object} [mSettings] Initial settings for the new Step Navigation control.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.StepNavigation
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var StepNavigation = Control.extend("sap.ui.vk.StepNavigation", /** @lends sap.ui.vk.StepNavigation.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Managed settings and properties for Step Navigation events.
				 */
				settings: "object",

				/**
				 * Width of the Step Navigation control.
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Height of the Step Navigation control.
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Indicates that the Step Navigation control should display thumbnails.
				 * If set to <code>true</code>, then thumbnails are rendered. If set to <code>false</code>, then thumbnails are hidden.
				 */
				showThumbnails: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Indicates that the Step Navigation control should display a toolbar.
				 * If set to <code>true</code>, then the toolbar is rendered. If set to <code>false</code>, then the toolbar is hidden.
				 */
				showToolbar: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Indicates that the Step Navigation control should display a popup containing information around the step that is playing.
				 * If set to <code>true</code>, then the popup is rendered. If set to <code>false</code>, the popup is hidden.
				 */
				showStepInfo: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				}
			},

			publicMethods: [
				"setScene",
				"playStep",
				"pauseStep",
				"playAllSteps",
				"getStep",
				"getNextStep",
				"getPreviousStep",
				"getProceduresAndSteps",
				"refresh",
				"clear"
			],

			associations: {
				contentConnector: {
					type: "sap.ui.vk.ContentConnector"
				}
			},

			aggregations: {
				/**
				 * Template control for Procedure items.
				 */
				procedureItemTemplate: {
					type: "sap.ui.core.Item",
					multiple: false
				},

				/**
				 * sap.ui.core.Popup used to render step information in a popup.
				 */
				stepInfoPopup: {
					type: "sap.ui.core.Control",
					multiple: false
				},

				/**
				 * sap.m.Panel used to render the entire Step Navigation control's content.
				 */
				layout: {
					type: "sap.m.Toolbar",
					multiple: false
				},
				/**
				 * sap.m.Panel used to render a list of thumbnails for the available steps.
				 */
				thumbnailsContainer: {
					type: "sap.m.Panel",
					multiple: false
				}
			},

			events: {
				"resize": {
					parameters: {
						oldSize: "object",
						size: "object"
					}
				},

				/**
				 * Raised each time a step starts, changes, or finishes.
				 */
				"stepChanged": {
					parameters: {
						/**
						 * The ID of the rendering client that raised the event.
						 */
						clientId: "object",

						/**
						 * The type of sap.ve.dvl.DVLSTEPEVENT that has been raised; for example, DVLSTEPEVENT_FINISHED, DVLSTEPEVENT_SWITCHED, DVLSTEPEVENT_STARTED.
						 */
						type: "object",

						/**
						 * The ID of the step affected by this stepId event.
						 */
						stepId: "object"
					}
				}
			}
		}
	});

	StepNavigation.prototype._onStepEvent = function(parameters) {
		var oSettings = this.getSettings();
		this.instanceSettings.currentStepId = parameters.stepId;
		switch (parameters.type) {
			case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_FINISHED:
				oSettings.currentStepFinished = true;
				oSettings.currentStepPaused = false;
				oSettings.playAllActive = false;
				oSettings.isPlaying = false;
				this._togglePlayPause(true);
				break;
			case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_SWITCHED: // WARNING
			case sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_STARTED:
				oSettings.currentStepId = parameters.stepId;
				oSettings.currentStepFinished = false;
				this._highlightStep(parameters.stepId);
					// The user may have attempted to pause the step as it changed.
					// The following attempts to honor the intent by pausing the current step
					if (oSettings.currentStepPaused) {
						this.pauseStep();
					}
				break;
			default:
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT12.summary), Messages.VIT12.code, "sap.ui.vk.StepNavigation");
		}

		this.fireStepChanged({
			clientId: parameters.clientId,
			type: parameters.type,
			stepId: parameters.stepId
		});
	};

	/**
	 * Attaches a Scene object to the Step Navigation control so that it can access the Scene’s procedures and steps.
	 *
	 * @param {object} scene The Scene object to attach to the Step Navigation control.
	 * @public
	 */
	StepNavigation.prototype.setScene = function(scene) {
		if (this._scene) {
			this.oDvl.Client.detachStepEvent(this._onStepEvent, this);
			this.oDvl = null;
		}

		// temporary fix to prevent crash for non-dvl scene. Need proper fix
		if (scene) {
			var sceneType = scene.getMetadata().getName();
			if (sceneType !== "sap.ui.vk.dvl.Scene") {
				return;
			}
		}

		this._scene = scene;
		this.instanceSettings = {};

		if (this._scene) {
			this.oDvl = scene.getGraphicsCore().getApi(sap.ui.vk.dvl.GraphicsCoreApi.LegacyDvl);
			this.oDvl.Client.attachStepEvent(this._onStepEvent, this);
		}

		delete this._procedures;
		var oProcedureList = this.getProcedureList();
		var oSettings = this.getSettings();
		oSettings.reset();
		oProcedureList.unbindItems();
		oProcedureList.setSelectedItem(oProcedureList.getFirstItem()); // oProcedureList.setSelectedItem(null);

		// Destroy the step info popup if it exists
		if (oSettings.stepInfo.stepMessagePopup) {
			if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
				oSettings.stepInfo.stepMessagePopup.close();
			}
			oSettings.stepInfo.stepMessagePopup.destroy();
			oSettings.stepInfo.stepMessagePopup = null;
			this.getShowStepInfoButton().setText(sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
		}

		// Get Steps and decide whether to enable/disable controls
		var data = this._getStepThumbnails();
		this.oModel.setData(data);
		this._togglePlayPause(true);
		this._refreshControl();
		this.refresh();
	};

	StepNavigation.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.call(this);
		}

		if (this.getSettings() == undefined) {
			this.setSettings(new this._settings());
		}
		this._scene = null;

		// Create JSON data model
		this.oModel = new sap.ui.model.json.JSONModel();
		// Create layout panel

		this._layout = new sap.m.Toolbar({
			design: sap.m.ToolbarDesign.Solid
		});

		// this._layout.addContent();
		this.setAggregation("layout", this._layout);

		if (this.getShowThumbnails()) {
			this._thumbnailsScroller = new sap.m.ScrollContainer(this.getId() + "-scroller", {
				width: "100%",
				horizontal: true,
				vertical: false,
				focusable: true
			});
			this._thumbnailsContainer = new sap.m.Panel({
				expandable: false,
				content: [
					this._thumbnailsScroller
				]
			});
			this.setAggregation("thumbnailsContainer", this._thumbnailsContainer);
		}
		// Create the play previous button
		this.playPreviousButton = new sap.m.Button(this.getId() + "-playPreviousButton", {
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://slim-arrow-left",
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PREVIOUSSTEPBUTTON"),
			visible: true,
			press: function(e) {
				var oSettings = this.getSettings();
				var prevStep = this.getPreviousStep(oSettings.currentProcedureIndex);
				if (prevStep) {
					oSettings.currentStepPaused = false;
					this.playStep(prevStep.id, true, oSettings.playAllActive);
					this._togglePlayPause(false);
				}
			}.bind(this)
		});

		// Create the play next button
		this.playNextButton = new sap.m.Button(this.getId() + "-playNextButton", {
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://slim-arrow-right",
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_NEXTSTEPBUTTON"),
			visible: true,
			press: function(e) {
				var oSettings = this.getSettings();
				var nextStep = this.getNextStep(oSettings.currentProcedureIndex);
				if (nextStep) {
					oSettings.currentStepPaused = false;
					this.playStep(nextStep.id, true, oSettings.playAllActive);
					this._togglePlayPause(false);
				}
			}.bind(this)
		});

		// Create the play next button
		this.playOptionButton = new sap.m.Button(this.getId() + "-playOptionButton", {
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://media-play",
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYBUTTON_PLAY"),
			visible: true,
			press: function(e) {
				var key = this.getPlayMenuButton().getSelectedKey(); // e.oSource.getSelectedKey();
				var oSettings = this.getSettings();
				var firstStep = null;
				switch (key) {
					case "0":
						// Play
						if (!oSettings.currentStepId) {
							firstStep = this.getNextStep(oSettings.currentProcedureIndex);
							if (firstStep) {
								oSettings.currentStepId = firstStep.id;
							} else {
								return; // If there is no first step then do nothing
							}

						}
						oSettings.playAllActive = false;
						this.playStep(oSettings.currentStepId, !oSettings.currentStepPaused, oSettings.playAllActive);
						oSettings.isPlaying = true;
						oSettings.currentStepPaused = false;
						this._togglePlayPause(false);
						break;
					case "1":
						oSettings.playAllActive = true;
						oSettings.currentStepPaused = false;
						this.playAllSteps(oSettings.currentProcedureId);
						oSettings.isPlaying = true;
						this._togglePlayPause(false);
						break;
					case "2":
						if (!oSettings.currentStepId) {
							firstStep = this.getNextStep(oSettings.currentProcedureIndex);
							if (firstStep) {
								oSettings.currentStepId = firstStep.id;
							} else {
								return; // If there is no first step then do nothing
							}
						}
						oSettings.playAllActive = true;
						var playFromBeginning = !oSettings.currentStepPaused;
						oSettings.currentStepPaused = false;
						this.playStep(oSettings.currentStepId, playFromBeginning, oSettings.playAllActive);
						oSettings.isPlaying = true;
						this._togglePlayPause(false);
						break;
					default:
						break;
				}
			}.bind(this)
		});


		// Create the procedures dropdown list
		this.procedureList = new sap.m.Select(this.getId() + "-procedureList", {
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PROCEDURESLISTHEADING"),
			selectedKey: "0",
			type: sap.m.SelectType.Default,
			enabled: true,
			width: "30%",
			autoAdjustWidth: true,
			change: function(oControlEvent) {
				// Reset the control info when they change the selected procedure
				var oProcedureList = this.getProcedureList();
				var oSettings = this.getSettings();
				oSettings.currentProcedureIndex = 0; // Set the default to the first procedure
				oSettings.currentProcedureId = this.instanceSettings.currentProcedureId = oProcedureList.getSelectedKey();
				oSettings.currentStepId = this.instanceSettings.currentStepId = null;
				for (var ip = 0; ip < this.oModel.oData.procedures.length; ip++) {
					if (this.oModel.oData.procedures[ip].id == oSettings.currentProcedureId) {
						oSettings.currentProcedureIndex = ip;
						oSettings.currentProcedure = this.oModel.oData.procedures[ip];
						break;
					}
				}

				// Destroy the step info popup if it exists
				if (oSettings.stepInfo.stepMessagePopup) {
					if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
						oSettings.stepInfo.stepMessagePopup.close();
					}
					oSettings.stepInfo.stepMessagePopup.destroy();
					oSettings.stepInfo.stepMessagePopup = null;
				}

				this._refreshItems();
			}.bind(this)
		});

		this.procedureList.addStyleClass("sapVizKitStepNavigationProcedureList");

		// Create the item template for the procedure drop down list
		this.setAggregation("procedureItemTemplate", (
			new sap.ui.core.ListItem()
			.bindProperty("text", "name")
			.bindProperty("key", "id")
			.bindProperty("tooltip", "name")));

		// Create the play menu
		this.playMenuButton = (new sap.m.Select(this.getId() + "-playMenuButtonIcon", {
			selectedKey: "0",
			type: sap.m.SelectType.Default,
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYOPTIONS"),
			enabled: true,
			autoAdjustWidth: false,
			items: [
				new sap.ui.core.ListItem({
					key: "0",
					icon: "sap-icon://media-play",
					text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAY"),
					tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAY")
				}),
				new sap.ui.core.ListItem({
					key: "1",
					icon: "sap-icon://media-play",
					text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALL"),
					tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALL")
				}),
				new sap.ui.core.ListItem({
					key: "2",
					icon: "sap-icon://media-play",
					text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING"),
					tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING")
				})
			]
		}));

		this.playMenuButton.addStyleClass("sapVizKitStepNavigationPlayOptionsSelect");


		// Create the pause button
		this.pauseButton = new sap.m.Button(this.getId() + "-pauseButton", {
			type: sap.m.ButtonType.Transparent,
			icon: "sap-icon://media-pause",
			visible: false,
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_PLAYMENU_PAUSE"),
			press: function(e) {
				var oSettings = this.getSettings();
				this.pauseStep();
				oSettings.currentStepPaused = true;
				oSettings.isPlaying = false;
				this._togglePlayPause(true);
			}.bind(this)
		});

		this.showStepInfoButton = new sap.m.ToggleButton(this.getId() + "-showStepInfoButton", {
			icon: "sap-icon://hide",
			type: sap.m.ButtonType.Transparent,
			pressed: false,
			text: sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
			press: function(oEvent) {
				var target = oEvent.getSource();
				if (target.getPressed()) {
					this.setShowStepInfo(true);
					target.setIcon("sap-icon://show");
					target.setTooltip(sap.ui.vk.getResourceBundle().getText("STEP_NAV_HIDESTEPDESCRIPTIONBUTTON"));
				} else {
					this.setShowStepInfo(false);
					target.setIcon("sap-icon://hide");
					target.setTooltip(sap.ui.vk.getResourceBundle().getText("STEP_NAV_SHOWSTEPDESCRIPTIONBUTTON"));
				}
			}.bind(this)
		});


		this._layout.addContent(this.playPreviousButton)
		            .addContent(this.playOptionButton)
		            .addContent(this.pauseButton)
		            .addContent(this.playMenuButton)
		            .addContent(this.procedureList)
		            .addContent(this.showStepInfoButton)
		            .addContent(new sap.m.ToolbarSpacer())
		            .addContent(this.playNextButton);
	};

	StepNavigation.prototype.destroy = function() {
		return Control.prototype.destroy.call(this);
	};

	StepNavigation.prototype.getScroller = function() {
		return this._thumbnailsScroller;
	};

	StepNavigation.prototype.getProcedureList = function() {
		var id = this.getId() + "-procedureList";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getPlayMenuButton = function() {
		var id = this.getId() + "-playMenuButtonIcon";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getPlayOptionButton = function() {
		var id = this.getId() + "-playOptionButton";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getPauseButton = function() {
		var id = this.getId() + "-pauseButton";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getPlayNextButton = function() {
		var id = this.getId() + "-playNextButton";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getPlayPreviousButton = function() {
		var id = this.getId() + "-playPreviousButton";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.getShowStepInfoButton = function() {
		var id = this.getId() + "-showStepInfoButton";
		var ht = this._layout;
		var cnt = sap.ui.getCore().byId(id);
		return ht.getContent()[ht.indexOfContent(cnt)];
	};

	StepNavigation.prototype.exit = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
		if (Control.prototype.exit) {
			Control.prototype.exit.apply(this);
		}
	};

	/**
	 * Control runtime settings (intended as internal/read-only).
	 * @return {object} It returns the control runtime settings.
	 * @private
	 */
	StepNavigation.prototype._settings = function() {
		return {
			enabled: false,
			toggle: {
				addCss: function(key, property, onValue, offValue) {
					if (!this.targets[key]) {
						this.targets[key] = {
							"type": "css",
							"property": property,
							"onValue": onValue,
							"offValue": offValue
						};
					}
				},

				addMethod: function(target, method, onValue, offValue, useJQuery) {
					var key = target.getId();
					if (!this.targets[key]) {
						this.targets[key] = {
							"type": "method",
							"target": target,
							"method": method,
							"onValue": onValue,
							"offValue": offValue,
							"useJQuery": useJQuery
						};
					}
				},

				targets: {}
			},

			currentProcedureIndex: 0,
			currentProcedureId: "",
			currentProcedure: null, // Managed and used by popup step info
			currentStepId: null,
			currentStep: null, // Managed and used by popup step info
			currentStepPaused: false,
			isPlaying: false,
			currentStepFinished: true,
			playAllActive: false,
			showToolbar: true,
			showThumbnails: true,
			portfolioMode: false,
			reset: function() {
				this.currentStep = null;
				this.currentProcedure = null;
				this.currentProcedureIndex = 0;
				this.currentProcedureId = "";
				this.currentStepId = null;
				this.currentStepPaused = false;
				this.currentStepFinished = true;
				this.playAllActive = false;
				this.portfolioMode = false;
			},

			stepInfo: {
				lastTop: null,
				lastLeft: null,
				stepMessagePopup: null,
				openPopup: function(popupTitle, textContent, target, placement) {

					this._customHeaderText = this._customHeaderText || new sap.m.Text({
						width: "100%",
						textAlign: sap.ui.core.TextAlign.Center
					}).addStyleClass("sapVizKitStepNavigationPopoverTitle");
					this._customHeaderText.setText(popupTitle);
					this._customHeaderText.setTooltip(popupTitle);

					// We are creating a custom header for the popup title.
					// If the title is too long, we show only what it fits in the popup,
					// the rest is hidden using ellipsis.
					// If you hover your mouse over the truncated title, a tooltip will be displayed
					// showing the entire title.
					this._customHeader = this._customHeader || new sap.m.Bar({
						contentLeft: [
							this._customHeaderText
						]
					});

					this._textContent = this._textContent || new sap.m.Text({});
					this._textContent.addStyleClass("sapVizKitStepNavigationPopoverContent");
					this._textContent.setText(textContent);

					// If the popup hasn't been created so far,
					// we create a new instance and populate it.
					this.stepMessagePopup = this.stepMessagePopup || new sap.m.ResponsivePopover({
						placement: placement,
						showCloseButton: true,
						verticalScrolling: true,
						contentHeight: "10%",
						contentWidth: "30%",
						content: [
							this._textContent
						],
						customHeader: this._customHeader
					});
					this.stepMessagePopup.addStyleClass("sapVizKitStepNavigationPopoverStepInfo");

					this.stepMessagePopup.openBy(target);
				}
			}
		};
	};

	/**
	 * Rebuilds the content of the Step Navigation control from the current Scene.
	 * @param {object} oScene The scene object to be used.
	 * @return {boolean} Returns <code>true</code> if the content of the Step Navigation control was rebuilt successfully.
	 * @public
	 */
	StepNavigation.prototype.refresh = function(oScene) {
		jQuery.sap.log.info("StepNavigation refresh() called.");
		if (this.getVisible() && (this["_getStepThumbnails"] && this._scene != null)) {
			var oProcedureList = this.getProcedureList();
			var oSettings = this.getSettings();
			oSettings.reset();
			oProcedureList.setSelectedItem(oProcedureList.getFirstItem());

			// Get Steps and decide whether to enable/disable controls
			var data = this._getStepThumbnails();

			// Destroy the step info popup if it exists
			if (oSettings.stepInfo.stepMessagePopup) {
				if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
					oSettings.stepInfo.stepMessagePopup.close();
				}
				oSettings.stepInfo.stepMessagePopup.destroy();
				oSettings.stepInfo.stepMessagePopup = null;
			}

			//
			this.oModel.setData(data);
			this._togglePlayPause(true);
			this._refreshControl();
		} else if (this.getVisible()) {
			this._refreshControl();
		}
		return true;
	};

	/**
	 * Clears the content of the Step Navigation control.
	 *
	 * @return {boolean} Returns <code>true</code> if the method was called successfully.
	 * @public
	 */
	StepNavigation.prototype.clear = function() {
		jQuery.sap.log.info("StepNavigation clear() called.");
		return true;
	};

	StepNavigation.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		// **********************************************************************
		// **** CONFIGURE THE DROP DOWN LIST OF PROCEDURES					****
		// **********************************************************************
		if (this.getShowToolbar()) {
			var oProcedureList = this.getProcedureList();
			oProcedureList.setModel(this.oModel);
			var oProcedureItemTemplate = this.getProcedureItemTemplate();
			oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
		}
	};

	StepNavigation.prototype.onAfterRendering = function() {
		if (this._canvas) {
			var domRef = this.getDomRef();
			domRef
				.appendChild(this._canvas);
			this._resizeListenerId = ResizeHandler
				.register(
					this,
					this._handleResize
					.bind(this));
			this._bestFit();
			this
				.fireResize({
					size: {
						width: domRef.clientWidth,
						height: domRef.clientHeight
					}
				});
		}

		// Events like the Toggle Step Info button are causing a re-render. The following workaround
		// ensures that the play/pause button do not get reset to incorrect defaults. This should be handled differently and will be updated in the future.
		var oSettings = this.getSettings();
		this._togglePlayPause(!oSettings.isPlaying);
		if (oSettings.currentStepId) {
			this._highlightStep(oSettings.currentStepId);
		}
	};

	/**
	 * @param {object} event The resize event object.
	 * @private
	 */
	StepNavigation.prototype._handleResize = function(event) {
		this.fireResize({
			oldSize: event.oldSize,
			size: event.size
		});
		this._update();
	};

	/**
	 * @private
	 */
	StepNavigation.prototype._reset = function() {
		this._x = 0;
		this._y = 0;
		this._s = 1.0;
		this._r = 0;
	};

	/**
	 * @private
	 */
	StepNavigation.prototype._update = function() {
		var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
		var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;
		var transform = "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ")";

		this._img.style.transform = transform;
		this._img.style.webkitTransform = transform;
		this._img.style.msTransform = transform;
		this._img.style.MozTransform = transform;
		this._img.style.OTransform = transform;
	};

	StepNavigation.prototype._bestFit = function() {
		this._reset();
		var sx = this._canvas.clientWidth / this._img.width;
		var sy = this._canvas.clientHeight / this._img.height;
		this._s = sx < sy ? sx : sy;
		if (this._s == 0) {
			this._s = 1.0;
		}
		this._x = 0;
		this._y = 0;
		this._update();
	};

	// This delegate is called to set focus on controls that are not rendered yet.
	var deferredFocusDelegate = {
		onAfterRendering: function(event) {
			event.srcControl.focus();
			event.srcControl.removeEventDelegate(this); // Here 'this' equals the delegate itself.
		}
	};

	/**
	 * Toggle Play/Pause button visibility.
	 * @param {boolean} pauseActive Parameter that tells whether the pause is active or not.
	 * @private
	 */
	StepNavigation.prototype._togglePlayPause = function(pauseActive) {
		this.togglePlayPauseActive = true;
		if (this.getSettings().showToolbar) {
			var playOptionButton = this.getPlayOptionButton(),
				pauseButton = this.getPauseButton();
			if (pauseActive) {
				if (sap.ui.getCore().getCurrentFocusedControlId() === pauseButton.getId()) {
					playOptionButton.addEventDelegate(deferredFocusDelegate); // Do not pass the 'oThis' parameter, so that it would be equal to the delegate itself.
				}
				pauseButton.setVisible(false);
				playOptionButton.setVisible(true);
			} else {
				if (sap.ui.getCore().getCurrentFocusedControlId() === playOptionButton.getId()) {
					pauseButton.addEventDelegate(deferredFocusDelegate); // Do not pass the 'oThis' parameter, so that it would be equal to the delegate itself.
				}
				playOptionButton.setVisible(false);
				pauseButton.setVisible(true);
			}
		}
	};

	/**
	 * Used internally to refresh and update the controls and their data.
	 *
	 * @private
	 */
	StepNavigation.prototype._refreshControl = function() {

		// temporary fix to prevent crash when scene is not dvl scene
		if (!this.oModel.oData.procedures) {
			return;
		}

		// var that = this;
		var oProcedureList = this.getProcedureList();
		var oProcedureItemTemplate = this.getProcedureItemTemplate();
		var oSettings = this.getSettings();

		// Destroy the step info popup if it exists
		if (oSettings.stepInfo.stepMessagePopup) {
			if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
				oSettings.stepInfo.stepMessagePopup.close();
			}
			oSettings.stepInfo.stepMessagePopup.destroy();
			oSettings.stepInfo.stepMessagePopup = null;
			this.getShowStepInfoButton().setText(sap.ui.vk.getResourceBundle().getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
		}

		oProcedureList.unbindItems();
		if (this.oModel.oData.procedures.length > 0) {
			var first = this.oModel.oData.procedures[0];
			if (this.getShowToolbar()) {
				oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
				oProcedureList.selectedKey = first.id;
				oProcedureList.enabled = true;
			}
			this._refreshItems();
		} else {
			if (this.getShowToolbar()) {
				oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
				oProcedureList.enabled = false;
			}

			if (this.getShowThumbnails()) {
				var oScroller = this.getScroller();
				oScroller.destroyContent();
			}
		}
	};

	/**
	 * Refreshes the step thumbnail list items.
	 *
	 * @private
	 */
	StepNavigation.prototype._refreshItems = function() {
		var that = this;
		var steps = [];
		var oProcedureList = this.getProcedureList();
		var oSettings = that.getSettings();
		var itemLayout = new sap.m.HBox();

		// Get the procedure info
		if (!oSettings.currentProcedure) {
			oSettings.currentProcedure = that.oModel.oData.procedures[oSettings.currentProcedureIndex];
			oProcedureList.setSelectedItem(oProcedureList.getFirstItem());
		}

		if (oSettings.currentProcedureId != "" || that.oModel.oData.procedures.length > 0) {
			if (that.getShowThumbnails()) {
				var oScroller = that.getScroller();
				// Clear the current controller layout
				oScroller.removeAllContent();
				steps = that.oModel.oData.procedures[oSettings.currentProcedureIndex].steps;
				var imagePress = function(ev) {
					oSettings.currentStepPaused = false;
					var cnt = sap.ui.getCore().byId(ev.getSource().getId());
					that.playStep(cnt.getCustomData()[0].getValue("stepId"));
					oSettings.playAllActive = false;
					that._togglePlayPause(false);
				};

				for (var i = 0; i < steps.length; i++) {
					var img = new sap.m.Image({
						alt: steps[i].name,
						src: "data:image/" + steps[i].thumbnailType + ";base64," + steps[i].thumbnailData,
						densityAware: false,
						tooltip: steps[i].name,
						press: imagePress.bind(that),
						layoutData: new sap.m.FlexItemData({
							shrinkFactor: 0
						})
					});

					img.data("stepId", steps[i].id); // Use for jQuery to change style - possibly refactor to iterate through sap.m.Image objects instead
					img.addCustomData(new sap.ui.core.CustomData({
						key: "stepId",
						value: steps[i].id
					}));
					img.addStyleClass("sapVizKitStepNavigationStepItem");
					itemLayout.addItem(img);
				}
				oScroller.addContent(itemLayout);
			}
		}
	};

	/**
	 * Calculates the distance between the Step Description button and the top of the DOCUMENT.
	 * If there is enough room, place the pop-up at the top.
	 * If there isn't, place it right under the Step Description button.
	 * @param {object} element The DOM element next to which the popup will be placed.
	 * @return {string} It returns the popup position as a string which will be passed to the popup renderer.
	 * @private
	 */
	StepNavigation.prototype._getPopupPlacement = function(element) {
		var placement = null;
		var yPos = 0;
		while (element) {
			yPos += element.offsetTop;
			element = element.offsetParent;
		}
		if (yPos > 200) {
			placement = sap.m.PlacementType.Top;
		} else {
			placement = sap.m.PlacementType.Bottom;
		}
		return placement;
	};

	/**
	 * It checks if it's necessary to scroll the container which holds
	 * the step thumbnails. We only need to scroll when the selected item is close to the margin.
	 * @param {object} item The currently active step navigation thumbnails item.
	 * @param {object} scroller The thumbnail scroller from the step navigation.
	 * @return {boolean} It returns <code>true</code> or <code>false</code> depending on whether the scrolling is necessary or not.
	 * @private
	 */
	StepNavigation.prototype._isScrollingNecessary = function(item, scroller) {
		var isNecessary;
		// if item or scroller are not defined, it means the step navigation
		// is not rendered so we don't need to do any scrolling.
		if (item && scroller) {
			var itemLeftPosition = jQuery(item).offset().left + jQuery(item).width();
			var totalWidth = jQuery(scroller).width();
			if (itemLeftPosition - jQuery(item).width() < 0) {
				// the thumbnail is too much to the left (thumbnail not fully visible)
				isNecessary = true;
			} else	if ((totalWidth - itemLeftPosition) < jQuery(item).width()) {
				// the thumbnail is too much to the right
				isNecessary = true;
			} else {
				// the thumbnail is visibile, no scrolling needed
				isNecessary = false;
			}
		} else {
			isNecessary = false;
		}
		return isNecessary;
	};

	/**
	 * It moves the scroller for the step thumbnails container
	 * so we can have the current step in sight.
	 * @param {object} item The item that we need to scroll to.
	 * @param {object} scrollableElement The thumbnail scroller from the step navigation.
	 * @private
	 */
	StepNavigation.prototype._scrollToItem = function(item, scrollableElement) {
		var properties = {},
			originalOffset = jQuery(item).offset(),
			containerScrollLeft = jQuery(scrollableElement).scrollLeft();

		properties.scrollLeft = originalOffset.left + (containerScrollLeft - jQuery(scrollableElement).offset().left);
		properties.scrollLeft -= parseInt(jQuery(item).css("marginLeft"), 10) || 0;
		properties.scrollLeft -= parseInt(jQuery(item).css("borderLeftWidth"), 10) || 0;
		// apply the scrolling effect
		jQuery(scrollableElement).animate(properties, 50);
	};

	/**
	 * Highlights a step - used to indicate that a step has recently played or is playing.
	 * @param {string} stepId The ID of the step that we want to highlight.
	 * @private
	 */
	StepNavigation.prototype._highlightStep = function(stepId) {
		var that = this;
		if (that.getVisible()) {
			var oSettings = that.getSettings();

			// Logic for connecting popup to step changed event
			var stepInfo = that.getStep(0, oSettings.currentProcedureIndex, stepId);
			if (!oSettings.currentProcedure) {
				oSettings.currentProcedure = that.oModel.oData.procedures[that.oSettings.currentProcedureIndex];
			}

			var oShowStepInfoButton = that.getShowStepInfoButton();

			// Placement refers to the Popup position in relation to the Step Description button .
			// It can be "Top" (default) or "Bottom" (in case there isn't enough room at the top.
			var placement;
			var stepDescriptionButton = document.getElementById(oShowStepInfoButton.getId());
			placement = that._getPopupPlacement(stepDescriptionButton);

			// oShowStepInfoButton.setText(title);
			if (that.getShowStepInfo()) {
				oSettings.stepInfo.openPopup.call(this, stepInfo.name, stepInfo.description, oShowStepInfoButton, placement);
			} else if (oSettings.stepInfo.stepMessagePopup && oSettings.stepInfo.stepMessagePopup.isOpen()) {
				oSettings.stepInfo.stepMessagePopup.close();
			}

			// Highlight the selected thumbnail
			if (that.getShowThumbnails()) {
				var oScroller = that.getScroller();
				var oThumbnailItems = oScroller.getContent()[0].getItems();
				for (var i = 0; i < oThumbnailItems.length; i++) {
					if (oThumbnailItems[i].getCustomData()[0].getValue("stepId") == stepId) {
						oThumbnailItems[i].addStyleClass("selected");
						if (that._isScrollingNecessary(oThumbnailItems[i].$()[0], jQuery("#" + oScroller.sId)[0])) {
							that._scrollToItem(oThumbnailItems[i].$()[0], jQuery("#" + oScroller.sId)[0]);
						}
					} else {
						oThumbnailItems[i].removeStyleClass("selected");
					}
				}
			}
		}
	};

	/**
	 * Returns the procedures list with steps for the current scene, and appends base64 data as thumbnailData and an
	 * image type as thumbnailType.
	 *
	 * @return {JSON} <this> For example:
	 * <code>{sceneId : string, hasThumbnails : boolean, "procedures" : [id:string, name: string, steps: [{id: string, name: string, thumnailData: string, thumbnailType: string}], "portfolios": [] }</code>
	 * @public
	 */
	StepNavigation.prototype.getProceduresAndSteps = function() {
		return this._getStepThumbnails();
	};

	/**
	 * Obtains the procedures and portfolios list for the current scene and appends base64 data as thumbnailData and an
	 * image type as thumbnailType.
	 *
	 * @return {JSON} procs
	 * @private
	 */
	StepNavigation.prototype._getStepThumbnails = function() {

		// This function gets passed as argument to forEach when we iterate
		// through all steps from all procedures and all portfolios.
		var processStepThumbnail = function(sceneId, dvl, step) {
			var thumbDataRaw,
				imgType,
				prefix;

			try {
				// Trying to retrieve the thumbnail image for this particular step from DVL
				thumbDataRaw = sap.ui.vk.dvl.getPointer(dvl.Scene.RetrieveThumbnail(sceneId, step.id));

				// Check the prefix to detect whether this is a PNG or JPG
				prefix = thumbDataRaw.substring(0, 3);
				if (prefix === "iVB") {
					imgType = "png";
				} else {
					imgType = "jpg";
				}

				// Mutating the original step object by assigning the thumbnail information
				// that we retrieved from DVL
				step.thumbnailData = thumbDataRaw;
				step.thumbnailType = imgType;
			} catch (error) {
				// If the code is NOTFOUND, it means the step doesn't have a thumbnail
				if (error.code !== sap.ve.dvl.DVLRESULT.NOTFOUND) {
					jQuery.sap.log.error(error.message, error.code, "sap.ui.vk.StepNavigation");
				}
				step.thumbnailData = null;
				step.thumbnailType = null;
			}
		};

		var procs = this._retrieveProcedures();
		if (procs.sceneId != null) {
			// Get thumbnails for procedures
			// Iterating through each step from each procedure
			procs.procedures.forEach(function(procedure) {
				procedure.steps.forEach(processStepThumbnail.bind(this, procs.sceneId, this.oDvl));
			}, this);

			// Get thumbnails for portfolios
			// Iterating through each step from each portfolio
			procs.portfolios.forEach(function(portfolio) {
				portfolio.steps.forEach(processStepThumbnail.bind(this, procs.sceneId, this.oDvl));
			}, this);

			procs.hasThumbnails = true;
		}
		this._procedures = procs;
		return procs;
	};

	/**
	 * Returns or retrieves the list of procedures and portfolios for the current scene.
	 *
	 * @param {string} sceneId ID of the scene from which to retrieve procedures and portfolios.
	 * @return {JSON} procs
	 * @private
	 */
	StepNavigation.prototype._retrieveProcedures = function(sceneId) {
		var that = this;
		var procs = {};
		if (!that._procedures) {
			procs = {
				sceneId: null,
				hasThumbnails: false,
				"procedures": [],
				"portfolios": []
			};
		} else {
			procs = that._procedures;
		}

		if (that._scene && (procs.sceneId != (sceneId || that._scene._dvlSceneRef))) {
			var s = sceneId || that._scene._dvlSceneRef;
			if (s != null) {
				procs = {
					sceneId: null,
					hasThumbnails: false,
					"procedures": [],
					"portfolios": []
				};
				try {
					var ps = sap.ui.vk.dvl.getJSONObject(that.oDvl.Scene.RetrieveProcedures(s));
					if (ps != null) {
						procs.hasThumbnails = false;
						procs.sceneId = that._scene._dvlSceneRef;
						procs.procedures = ps.procedures;
						procs.portfolios = ps.portfolios;
					}
				} catch (e) {
					if (!(e instanceof DvlException && e.code === sap.ve.dvl.DVLRESULT.NOTIMPLEMENTED)) {
						throw e;
					}
				}
			}
		}

		return procs;
	};

	/**
	 * Gets a step based on a positive or negative integer, which is used as an index relative to the index of the current step.
	 * An index value of <code>0</code> can be used to retrieve the details of the current step.
	 *
	 * @param {number}
	 *          relIndex Positive or negative integer representing the number to add or subtract from the index of the
	 *          current step to return the desired step; for example, //next 1, current 0, previous -1
	 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
	 * @param {string} specificStepId The ID of the step that we want to retrieve.
	 * @return {JSON} step
	 * @public
	 */
	StepNavigation.prototype.getStep = function(relIndex, procedureIndex, specificStepId) {
		var that = this;
		var sc = that.oDvl.Settings.LastLoadedSceneId;
		var step = null;
		if (sc != null) {
			procedureIndex = procedureIndex != null ? procedureIndex : 0;
			var curs = specificStepId ? specificStepId : that.instanceSettings.currentStepId;
			var p = that._retrieveProcedures(sc);
			var curProc = p.procedures[procedureIndex];

			// If current or next step requested with no current step requested then return first
			if (curProc && curProc.steps.length > 0) {
				step = curProc.steps[0];
			} else {
				// If curProc is false, we the function returns null; it means there are no steps.
				// If we don't do this, curProc.steps will throw an exception
				return null;
			}

			if (curs != "") {
				// Look for the current step in the specified procedure return the requested relative step
				for (var si = 0; si < curProc.steps.length; si++) {
					var _s = curProc.steps[si];
					if (_s.id == curs) {
						var x = si + relIndex;
						if (x < curProc.steps.length && x >= 0) {
							step = curProc.steps[x];
						} else {
							step = null;
						}
						break;
					}
				}
			}
		}
		return step;
	};

	/**
	 * Pauses the step that is currently playing.
	 *
	 * @return {void}
	 * @public
	 */
	StepNavigation.prototype.pauseStep = function() {
		var that = this;
		var s = that.oDvl.Settings.LastLoadedSceneId;
		if (s != null) {
			that.oDvl.Scene.PauseCurrentStep(s);
		}
	};

	/**
	 * Gets the total number of steps for a specified procedure, or for all procedures.
	 *
	 * @param {string} [procedureId] An optional ID for a procedure for which to retrieve a count.
	 * If a value for <code>procedureId</code> is specified, then get a count of the steps for the specified procedure.
	 * Otherwise, get the total number of steps in all of the procedures for the Scene.
	 * @return {number} The number of steps for the specified procedure.
	 * @private
	 */
	StepNavigation.prototype._stepCount = function(procedureId) {
		var that = this;
		var sc = that.oDvl.Settings.LastLoadedSceneId;
		var stepCount = 0;
		if (sc != null) {
			var p = that._retrieveProcedures(sc);
			for (var pi = 0; pi < p.procedures.length; pi++) {
				if (p.procedures[pi].id == procedureId) {
					stepCount = p.procedures[pi].steps.length;
					break;
				} else if (procedureId == null) {
					stepCount += p.procedures[pi].steps.length;
				}
			}
		}
		return stepCount;
	};

	/**
	 * Cycles through steps and procedures for the last loaded scene (<code>lastLoadedScene</code>), and returns the step preceding the current step (currentStepId.
	 *
	 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
	 * @return {JSON} The step preceding the current step.
	 * @public
	 */
	StepNavigation.prototype.getPreviousStep = function(procedureIndex) {
		var that = this;
		return that.getStep(-1, procedureIndex);
	};

	/**
	 * Cycles through steps and procedures for the lastLoadedScene and returns the step that follows after the currentStepId.
	 *
	 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
	 * @return {JSON} The step that follows after the current step.
	 * @public
	 */
	StepNavigation.prototype.getNextStep = function(procedureIndex) {
		var that = this;
		return that.getStep(1, procedureIndex);
	};

	/**
	 * Plays the specified procedure step.
	 *
	 * @param {string} stepId The ID of the procedure step to play.
	 * @param {boolean} fromTheBeginning Default: true If <code>true</code>, tells the Viewer to play the step from the first frame.
	 * @param {boolean} continueToTheNext Default: false If <code>true</code>, tells the Viewer to play the next step in sequence.
	 * @return {void}
	 * @public
	 */
	StepNavigation.prototype.playStep = function(stepId, fromTheBeginning, continueToTheNext) {
		var that = this;
		var s = that.oDvl.Settings.LastLoadedSceneId;
		if (s != null) {
			that.instanceSettings.currentStepId = stepId;

			// call ActivateStep(sceneId, dvlid, fromTheBeginning, continueToTheNext)
			that.oDvl.Scene.ActivateStep(s, stepId, fromTheBeginning != null ? fromTheBeginning : true,
				continueToTheNext != null ? continueToTheNext : false);
		}
	};

	/**
	 * Plays all the steps in the specified procedure.
	 *
	 * @param {string} [procedureId] The ID of the procedure for which to play all steps. If <code>procedureId == null</code>, then only the first step is played.
	 * @return {void}
	 * @public
	 */
	StepNavigation.prototype.playAllSteps = function(procedureId) {
		var that = this;
		var sc = that.oDvl.Settings.LastLoadedSceneId;
		if (sc != null) {
			var ps = that._retrieveProcedures(sc);
			var procedureIndex = 0;
			if (procedureId != null && ps.procedures.length > 1) {
				for (var ip = 0; ip < ps.procedures.length; ip++) {
					if (ps.procedures[ip].id == procedureId) {
						procedureIndex = ip;
						break;
					}
				}
			}

			if (ps.procedures.length > 0) {
				var s = ps.procedures[procedureIndex].steps[0];
				if (s) {
					that.instanceSettings.currentStepId = s.id;
					that.oDvl.Scene.ActivateStep(sc, s.id, true, true);
				}
			}
		}
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	StepNavigation.prototype._onAfterUpdateContentConnector = function() {
		this.setScene(this._contentConnector.getContent());
	};

	StepNavigation.prototype._onBeforeClearContentConnector = function() {
		this.setScene(null);
	};

	StepNavigation.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");
		if (!(content instanceof sap.ui.vk.dvl.Scene)) {
			content = null;
		}
		this.setScene(content);
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	ContentConnector.injectMethodsIntoClass(StepNavigation);

	return StepNavigation;

});

}; // end of sap/ui/vk/StepNavigation.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.Toolbar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Toolbar",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/model/json/JSONModel"
], function(jQuery, library, Control, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new Toolbar.
	 *
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 *
	 * @class
	 * Provides buttons to hide or show certain sap.ui.vk controls.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Toolbar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Toolbar = Control.extend("sap.ui.vk.Toolbar", /** @lends sap.ui.vk.Toolbar.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Used to set the title of the Toolbar
				 * @private
				 */
				title: {
					type: "string",
					group: "Appearance",
					defaultValue: ""
				}
			},
			events: {},
			associations: {
				/**
				 * A toolbar instance is associated with an instance of the Viewer
				 *
				 * @private
				 */
				viewer: {
					type: "sap.ui.vk.Viewer",
					cardinality: "0..1"
				}
			},
			aggregations: {
				_toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "hidden"
				},
				_helpButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				_stepNavigationButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_sceneTreeButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_enterFullScreenButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				_exitFullScreenButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				_toolbarTitle: {
					type: "sap.m.Title",
					multiple: false,
					visibility: "hidden"
				}
			}
		}
	});

	/*
	 * It checks if the user is using iOS.
	 * The reason for this is that sometimes we need to turn off the full screen buttons
	 * because Safari iOS doesn't support the Full Screen API (see caniuse.com for support)
	 */
	Toolbar.prototype._isUsingIOS = function() {
		return (sap.ui.Device.system.tablet || sap.ui.Device.system.phone) && sap.ui.Device.os.ios;
	};

	/*
	 * Toggles the step navigation control visibility and updates its button
	 */
	Toolbar.prototype._onSceneTree = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			this.oViewer._componentsState.sceneTree.userInteractionShow = this._sceneTreeButton.getPressed();
			this.oViewer.setShowSceneTree(this.oViewer._componentsState.sceneTree.userInteractionShow);
		}
	};

	Toolbar.prototype._onStepNavigation = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			this.oViewer._componentsState.stepNavigation.userInteractionShow = this._stepNavigationButton.getPressed();
			this.oViewer.setShowStepNavigation(this.oViewer._componentsState.stepNavigation.userInteractionShow);
		}
	};

	Toolbar.prototype._onFullScreen = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer != null) {
			var newStateFullScreenButton = this._enterFullScreenButton.getPressed();
			this.oViewer.activateFullScreenMode(newStateFullScreenButton);
		}
	};

	Toolbar.prototype._fullScreenHandler = function(event) {
		var bFull = event.mParameters.isFullScreen;
		this._enterFullScreenButton.setPressed(bFull);

		if (bFull) {
			this._enterFullScreenButton.setIcon("sap-icon://exit-full-screen");
		} else {
			this._enterFullScreenButton.setIcon("sap-icon://full-screen");
		}
	};

	Toolbar.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}
		var _toolbarSpacer = new sap.m.ToolbarSpacer();

		var _helpButton = new sap.m.Button({
			icon: "sap-icon://sys-help",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_HELPBUTTONTOOLTIP")
		});
		this.setAggregation("_helpButton", _helpButton);

		this._stepNavigationButton = new sap.m.ToggleButton({
			icon: "sap-icon://step",
			type: sap.m.ButtonType.Transparent,
			enabled: false,
			tooltip: sap.ui.vk.getResourceBundle().getText("STEP_NAV_MENUBUTTONTOOLTIP"),
			press: this._onStepNavigation.bind(this)
		});
		this.setAggregation("_stepNavigationButton", this._stepNavigationButton);

		this._sceneTreeButton = new sap.m.ToggleButton({
			icon: "sap-icon://tree",
			type: sap.m.ButtonType.Transparent,
			tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_MENUBUTTONTOOLTIP"),
			press: this._onSceneTree.bind(this)
		});
		this.setAggregation("_sceneTreeButton", this._sceneTreeButton);

		// If the user is using iOS, HTML5 Full Screen API is not supported,
		// so we are not creating and adding the Enter Full Screen and Exit Full Screen buttons
		// into the Viewer Toolbar.
		var toolbarContent;
		this._toolbarTitle = new sap.m.Title();
		if (!this._isUsingIOS()) {
			this._enterFullScreenButton = new sap.m.ToggleButton({
				icon: "sap-icon://full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_FULLSCREENBUTTONTOOLTIP"),
				press: this._onFullScreen.bind(this)
			});
			this.setAggregation("_enterFullScreenButton", this._enterFullScreenButton);

			var _exitFullScreenButton = new sap.m.Button({
				icon: "sap-icon://exit-full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip: sap.ui.vk.getResourceBundle().getText("VIEWER_FULLSCREENBUTTONTOOLTIP")
			});
			this.setAggregation("_exitFullScreenButton", _exitFullScreenButton);
			toolbarContent = [
				this._toolbarTitle,
				_toolbarSpacer,
				new sap.m.ToolbarSeparator(),
				this._sceneTreeButton,
				new sap.m.ToolbarSeparator(),
				this._stepNavigationButton,
				new sap.m.ToolbarSeparator(),
				this._enterFullScreenButton
			];
		} else {
			toolbarContent = [
				this._toolbarTitle,
				_toolbarSpacer,
				new sap.m.ToolbarSeparator(),
				this._sceneTreeButton,
				new sap.m.ToolbarSeparator(),
				this._stepNavigationButton
			];
		}

		this.setAggregation("_toolbarTitle", this._toolbarTitle);

		this._toolbar = new sap.m.Toolbar({
			design: sap.m.ToolbarDesign.Solid,
			content: toolbarContent
		});

		this.setAggregation("_toolbar", this._toolbar, true);
	};

	Toolbar.prototype.exit = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		if (this.oViewer) {
			this.oViewer.detachFullScreen(this._fullScreenHandler.bind(this));
		}
	};

	Toolbar.prototype.onBeforeRendering = function() {
		this._toolbar.setVisible(true);
		this._toolbarTitle.setText(this.getTitle());
	};

	Toolbar.prototype.refresh = function() {
		this.oViewer = sap.ui.getCore().byId(this.getViewer());
		this._stepNavigationButton.setPressed(this.oViewer.getShowStepNavigation());
		this._stepNavigationButton.setEnabled(this.oViewer.getEnableStepNavigation());
		this._sceneTreeButton.setPressed(this.oViewer.getShowSceneTree());
		this._sceneTreeButton.setEnabled(this.oViewer.getEnableSceneTree());

		this.oViewer.attachFullScreen(this._fullScreenHandler.bind(this));
		return true;
	};

	Toolbar.prototype.onAfterRendering = function() {
		this.refresh();
	};

	return Toolbar;

}, /* bExport= */ true);

}; // end of sap/ui/vk/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewStateManagerBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the ViewStateManagerBase class.
jQuery.sap.declare('sap.ui.vk.ViewStateManagerBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewStateManagerBase",[
	"jquery.sap.global", "sap/ui/core/Element", "./ContentConnector", "./Scene"
], function(jQuery, Element, ContentConnector, Scene) {
	"use strict";

	/**
	 * Constructor for a new ViewStateManagerBase.
	 *
	 * @class
	 * Manages the visibility and selection states of nodes in the scene.
	 *
	 * @param {string} [sId] ID for the new ViewStateManagerBase object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ViewStateManagerBase object.
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Element
	 * @alias sap.ui.vk.ViewStateManagerBase
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewStateManagerBase = Element.extend("sap.ui.vk.ViewStateManagerBase", /** @lends sap.ui.vk.ViewStateManagerBase.prototype */ {
		metadata: {
			"abstract": true,

			properties: {
				shouldTrackVisibilityChanges: {
					type: "boolean",
					defaultValue: false
				},

				canTrackVisibilityChanges: {
					type: "boolean",
					defaultValue: false
				}
			},

			associations: {
				contentConnector: {
					type: "sap.ui.vk.ContentConnector"
				}
			},

			events: {
				/**
				 * This event is fired when the visibility of the node changes.
				 */
				visibilityChanged: {
					parameters: {
						/**
						 * References of newly shown nodes.
						 */
						visible: {
							type: "any[]"
						},
						/**
						 * IDs of newly hidden nodes.
						 */
						hidden: {
							type: "any[]"
						}
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * References of newly selected nodes.
						 */
						selected: {
							type: "any[]"
						},
						/**
						 * References of newly unselected nodes.
						 */
						unselected: {
							type: "any[]"
						}
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when opacity of the nodes is changed.
				 */
				opacityChanged: {
					parameters: {
						/**
						 * References of nodes whose opacity changed.
						 */
						changed: {
							type: "any[]"
						},
						/**
						 * Opacity assigned to the nodes.
						 */
						opacity: {
							type: "float"
						}
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when tint color of the nodes is changed.
				 */
				tintColorChanged: {
					parameters: {
						/**
						 * References of nodes whose tint color changed.
						 */
						changed: {
							type: "any[]"
						},
						/**
						 * Tint color assigned to the nodes.
						 */
						tintColor: {
							type: "sap.ui.core.CSSColor"
						},
						/**
						 * Tint color in the ABGR format assigned to the nodes.
						 */
						tintColorABGR: {
							type: "int"
						}
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when the node hierarchy is replaced.
				 */
				nodeHierarchyReplaced: {
					parameters: {
						/**
						 * Old node hierarchy
						 */
						oldNodeHierarchy: {
							type: "sap.ui.vk.NodeHierarchy"
						},

						/**
						 * New node hierarchy
						 */
						newNodeHierarchy: {
							type: "sap.ui.vk.NodeHierarchy"
						}
					}
				},

				/**
				 * This event is fired when highlighting color  is changed.
				 */
				highlightColorChanged: {
					parameters: {
						/**
						 * Highlighting color
						 */
						highlightColor: {
							type: "sap.ui.core.CSSColor"
						},
						/**
						 * Highlighting color in the ABGR format.
						 */
						highlightColorABGR: {
							type: "int"
						}
					},
					enableEventBubbling: true
				}
			}
		}
	});

	/**
	 * Gets the NodeHierarchy object associated with this ViewStateManagerBase object.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getNodeHierarchy
	 * @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManagerBase object.
	 * @public

	/**
	 * Gets the visibility changes in the current ViewStateManagerBase object.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getVisibilityChanges
	 * @returns {string[]} The visibility changes are in the form of an array. The array is a list of node VE ids which suffered a visibility changed relative to the default state.
	 * @public
	 */

	/**
	 * Gets the visibility state of all nodes.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getVisibilityComplete
	 * @returns {object} An object with following structure.
	 * <pre>
	 * {
	 *     visible: [string, ...] - an array of VE IDs of visible nodes
	 *     hidden:  [string, ...] - an array of VE IDs of hidden nodes
	 * }
	 * </pre>
	 */

	/**
	 * Gets the visibility state of nodes.
	 *
	 * If a single node reference is passed to the method then a single visibility state is returned.<br/>
	 * If an array of node references is passed to the method then an array of visibility states is returned.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getVisibilityState
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
	 * @public
	 */

	/**
	 * Sets the visibility state of the nodes.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#setVisibilityState
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} visible The new visibility state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManagerBase} <code>this</code> to allow method chaining.
	 * @public
	 */

	/**
	 * Enumerates IDs of the selected nodes.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#enumerateSelection
	 * @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
	 * @returns {sap.ui.vk.ViewStateManagerBase} <code>this</code> to allow method chaining.
	 * @public
	 */

	/**
	 * Gets the selection state of the node.
	 *
	 * If a single node reference is passed to the method then a single selection state is returned.<br/>
	 * If an array of node references is passed to the method then an array of selection states is returned.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getSelectionState
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
	 * @public
	 */

	/**
	 * Sets the selection state of the nodes.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#setSelectionState
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} selected The new selection state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManagerBase} <code>this</code> to allow method chaining.
	 * @public
	 */

	/**
	 * Gets the opacity of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getOpacity
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {float|float[]} A single value or an array of values. Value <code>null</code> means that the node's own opacity should be used.
	 * @public
	 */

	/**
	 * Sets the opacity of the nodes.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#setOpacity
	 * @param {any|any[]}       nodeRefs          The node reference or the array of node references.
	 * @param {float|null}      opacity           The new opacity of the nodes. If <code>null</code> is passed then the opacity is reset
	 *                                            and the node's own opacity should be used.
	 * @param {boolean}         [recursive=false] The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManagerBase} <code>this</code> to allow method chaining.
	 * @public
	 */

	/**
	 * Gets the tint color of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#getTintColor
	 * @param {any|any[]}       nodeRefs             The node reference or the array of node references.
	 * @param {boolean}         [inABGRFormat=false] This flag indicates to return the tint color in the ABGR format,
	 *                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	 * @returns {sap.ui.core.CSSColor|sap.ui.core.CSSColor[]|int|int[]}
	 *                                               A single value or an array of values. Value <code>null</code> means that
	 *                                               the node's own tint color should be used.
	 * @public
	 */

	/**
	 * Sets the tint color of the nodes.
	 * @function
	 * @name sap.ui.vk.ViewStateManagerBase#setTintColor
	 * @param {any|any[]}                   nodeRefs          The node reference or the array of node references.
	 * @param {sap.ui.vk.CSSColor|int|null} tintColor         The new tint color of the nodes. The value can be defined as a string
	 *                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	 *                                                        is passed then the tint color is reset and the node's own tint color should be used.
	 * @param {boolean}                     [recursive=false] This flag indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManagerBase} <code>this</code> to allow method chaining.
	 * @public
	 */

	return ViewStateManagerBase;
});

}; // end of sap/ui/vk/ViewStateManagerBase.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.BaseNodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the BaseNodeProxy class.
jQuery.sap.declare('sap.ui.vk.dvl.BaseNodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/BaseNodeProxy",[
	"jquery.sap.global", "../library", "../BaseNodeProxy"
], function(jQuery, library, BaseNodeProxyBase) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new BaseNodeProxy.

	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @class
	 * Provides a simple, lightweight proxy object to a node in a node hierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.BaseNodeProxy
	 * @implements sap.ui.base.Poolable
	 * @alias sap.ui.vk.dvl.BaseNodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var BaseNodeProxy = BaseNodeProxyBase.extend("sap.ui.vk.dvl.BaseNodeProxy", /** @lends sap.ui.vk.dvl.BaseNodeProxy.prototype */ {
		metadata: {
			publicMethods: [
				"getHasChildren",
				"getName",
				"getSceneRef",
				"getNodeRef",
				"getNodeId",
				"getNodeMetadata"
			]
		}
	});

	/**
	 * Initialize this BaseNodeProxy with its data.
	 *
	 * The <code>init</code> method is called by an object pool when the
	 * object is (re-)activated for a new caller.
	 *
	 * @param {sap.ui.vk.dvl.NodeHierarchy} nodeHierarchy The NodeHierarchy object this BaseNodeProxy object belongs to.
	 * @param {string} nodeRef The ID of the node for which to get BaseNodeProxy.
	 * @private
	 * @see sap.ui.base.Poolable.prototype#init
	 */
	BaseNodeProxy.prototype.init = function(nodeHierarchy, nodeRef) {
		this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
		this._dvlSceneRef = nodeHierarchy ? nodeHierarchy.getSceneRef() : null;
		this._dvlNodeRef = nodeRef;
	};

	/**
	 * Reset BaseNodeProxy data, needed for pooling.
	 * @private
	 * @see sap.ui.base.Poolable.prototype#reset
	 */
	BaseNodeProxy.prototype.reset = function() {
		this._dvlNodeRef = null;
		this._dvlSceneRef = null;
		this._dvl = null;
	};

	/**
	 * Gets the reference object of the node.
	 * @returns {string} The node's reference object.
	 * @public
	 */
	BaseNodeProxy.prototype.getNodeRef = function() {
		return this._dvlNodeRef;
	};

	/**
	 * Gets the ID of the node.
	 * @returns {string} The node's ID.
	 * @public
	 */
	BaseNodeProxy.prototype.getNodeId = function() {
		return this._dvlNodeRef;
	};

	/**
	 * Gets the name of the node.
	 * @returns {string} The node's name.
	 * @public
	 */
	BaseNodeProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
	};

	/**
	 * Gets the metadata of the node.
	 * @return {object} A JSON object containing the node's metadata.
	 * @public
	 */
	// NB: We cannot name the method getMetadata as there already exists sap.ui.base.Object.getMetadata method.
	BaseNodeProxy.prototype.getNodeMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneRef, this._dvlNodeRef)).metadata;
	};

	/**
	 * Indicates whether the node has child nodes.
	 * @returns {boolean} A value of <code>true</code> indicates that the node has child nodes, and a value of <code>false</code> indicates otherwise.
	 * @public
	 */
	BaseNodeProxy.prototype.getHasChildren = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
	};

	/**
	 * Gets the scene reference that this BaseNodeProxy object wraps.
	 * @returns {any} A scene reference that this BaseNodeProxy object wraps.
	 * @public
	 */
	BaseNodeProxy.prototype.getSceneRef = function() {
		return this._dvlNodeRef;
	};

	return BaseNodeProxy;
});

}; // end of sap/ui/vk/dvl/BaseNodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.LayerProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the LayerProxy class.
jQuery.sap.declare('sap.ui.vk.dvl.LayerProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/LayerProxy",[
	"jquery.sap.global", "../library", "../LayerProxy"
], function(jQuery, library, LayerProxyBase) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new LayerProxy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy sap.ui.vk.NodeHierarchy.createLayerProxy} method
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
	 *
	 * @class
	 * Provides a proxy object to the layer in the node hierarchy.
	 *
	 * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple layers.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy sap.ui.vk.NodeHierarchy.createLayerProxy} method
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.LayerProxy
	 * @alias sap.ui.vk.dvl.LayerProxy
	 * @experimental Since 1.38.0 This class is experimental and might be modified or removed in future versions.
	 */
	var LayerProxy = LayerProxyBase.extend("sap.ui.vk.dvl.LayerProxy", /** @lends sap.ui.vk.dvl.LayerProxy.prototype */ {
		metadata: {
			publicMethods: [
				"getDescription",
				"getLayerId",
				"getLayerMetadata",
				"getName",
				"getNodes",
				"getVeIds"
			]
		},

		constructor: function(nodeHierarchy, layerId) {
			LayerProxyBase.call(this);

			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneRef = nodeHierarchy ? nodeHierarchy.getSceneRef() : null;
			this._dvlLayerId = layerId;
		}
	});

	LayerProxy.prototype.destroy = function() {
		this._dvlLayerId = null;
		this._dvlSceneRef = null;
		this._dvl = null;

		LayerProxyBase.prototype.destroy.call(this);
	};

	/**
	 * Gets the layer ID.
	 * @returns {string} The layer ID.
	 * @public
	 */
	LayerProxy.prototype.getLayerId = function() {
		return this._dvlLayerId;
	};

	/**
	 * Gets the layer VE IDs.
	 * @returns {object[]} The layer VE IDs.
	 * @public
	 */
	LayerProxy.prototype.getVeIds = function() {
		return getJSONObject(this._dvl.Scene.RetrieveVEIDs(this._dvlSceneRef, this._dvlLayerId));
	};

	/**
	 * Gets the name of the layer
	 * @returns {string} The name of the layer.
	 * @public
	 */
	LayerProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneRef, this._dvlLayerId)).name;
	};

	/**
	 * Gets the description of the layer.
	 * @returns {string} The description of the layer.
	 * @public
	 */
	LayerProxy.prototype.getDescription = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneRef, this._dvlLayerId)).description;
	};

	/**
	 * Gets the layer metadata.
	 * @returns {object} The layer metadata.
	 * @public
	 */
	LayerProxy.prototype.getLayerMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneRef, this._dvlLayerId)).metadata;
	};

	/**
	 * Gets an array of IDs of nodes belonging to the layer.
	 * @return {string[]} An array of IDs of nodes belonging to the layer.
	 * @public
	 */
	LayerProxy.prototype.getNodes = function() {
		return getJSONObject(this._dvl.Scene.RetrieveLayerInfo(this._dvlSceneRef, this._dvlLayerId)).nodes;
	};

	return LayerProxy;
});

}; // end of sap/ui/vk/dvl/LayerProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.NodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeProxy class.
jQuery.sap.declare('sap.ui.vk.dvl.NodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/NodeProxy",[
	"jquery.sap.global", "../library", "../NodeProxy"
], function(jQuery, library, NodeProxyBase) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Constructor for a new NodeProxy.
	 *
	 * @class
	 * Provides a proxy object to the node in the node hierarchy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy} method.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.NodeProxy
	 * @alias sap.ui.vk.dvl.NodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeProxy = NodeProxyBase.extend("sap.ui.vk.dvl.NodeProxy", /** @lends sap.ui.vk.dvl.NodeProxy.prototype */ {
		metadata: {
		},

		constructor: function(nodeHierarchy, nodeRef) {
			NodeProxyBase.call(this);

			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneRef = nodeHierarchy ? nodeHierarchy.getSceneRef() : null;
			this._dvlNodeRef = nodeRef;
		}
	});

	NodeProxy.prototype.destroy = function() {
		this._dvlNodeRef = null;
		this._dvlSceneRef = null;
		this._dvl = null;

		NodeProxyBase.prototype.destroy.call(this);
	};

	NodeProxy.prototype.getNodeRef = function() {
		return this._dvlNodeRef;
	};

	NodeProxy.prototype.getNodeId = function() {
		return this._dvlNodeRef;
	};

	NodeProxy.prototype.getVeIds = function() {
		return getJSONObject(this._dvl.Scene.RetrieveVEIDs(this._dvlSceneRef, this._dvlNodeRef));
	};

	NodeProxy.prototype.getName = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
	};

	NodeProxy.prototype.getLocalMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeLocalMatrix(this._dvlSceneRef, this._dvlNodeRef)).matrix);
	};

	NodeProxy.prototype.setLocalMatrix = function(value) {
		this._dvl.Scene.SetNodeLocalMatrix(this._dvlSceneRef, this._dvlNodeRef, value && sap.ui.vk.TransformationMatrix.convertTo4x4(value));
		this.setProperty("localMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getWorldMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeWorldMatrix(this._dvlSceneRef, this._dvlNodeRef)).matrix);
	};

	NodeProxy.prototype.setWorldMatrix = function(value) {
		this._dvl.Scene.SetNodeWorldMatrix(this._dvlSceneRef, this._dvlNodeRef, value && sap.ui.vk.TransformationMatrix.convertTo4x4(value));
		this.setProperty("worldMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getOpacity = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_OPACITY)).Opacity;
	};

	NodeProxy.prototype.setOpacity = function(value) {
		this._dvl.Scene.SetNodeOpacity(this._dvlSceneRef, this._dvlNodeRef, value);
		this.setProperty("opacity", value, true);
		return this;
	};

	NodeProxy.prototype.getTintColorABGR = function() {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_HIGHLIGHT_COLOR)).HighlightColor;
	};

	NodeProxy.prototype.setTintColorABGR = function(value) {
		this._dvl.Scene.SetNodeHighlightColor(this._dvlSceneRef, this._dvlNodeRef, value);
		this.setProperty("tintColorABGR", value, true);
		this.setProperty("tintColor", sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(value)), true);
		return this;
	};

	NodeProxy.prototype.getTintColor = function() {
		return sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(this.getTintColorABGR()));
	};

	NodeProxy.prototype.setTintColor = function(value) {
		var abgr = sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(value));
		this._dvl.Scene.SetNodeHighlightColor(this._dvlSceneRef, this._dvlNodeRef, abgr);
		this.setProperty("tintColorABGR", abgr, true);
		this.setProperty("tintColor", value, true);
		return this;
	};

	NodeProxy.prototype.getNodeMetadata = function() {
		return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneRef, this._dvlNodeRef)).metadata;
	};

	NodeProxy.prototype.getHasChildren = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
	};

	NodeProxy.prototype.getClosed = function() {
		return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, this._dvlNodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) !== 0;
	};

	return NodeProxy;
});

}; // end of sap/ui/vk/dvl/NodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.ViewStateManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the ViewStateManager class.
jQuery.sap.declare('sap.ui.vk.dvl.ViewStateManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/ViewStateManager",[
	"jquery.sap.global", "sap/ui/core/Element", "../ContentConnector", "../ViewStateManagerBase"
], function(jQuery, Element, ContentConnector, ViewStateManagerBase) {
	"use strict";

	var VisibilityTracker;

	/**
	 * Constructor for a new ViewStateManager.
	 *
	 * @class
	 * Manages the visibility and selection states of nodes in the scene.
	 *
	 * @param {string} [sId] ID for the new ViewStateManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ViewStateManager object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ViewStateManagerBase
	 * @alias sap.ui.vk.dvl.ViewStateManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewStateManager = ViewStateManagerBase.extend("sap.ui.vk.dvl.ViewStateManager", /** @lends sap.ui.vk.dvl.ViewStateManager.prototype */ {
		metadata: {
			publicMethods: [
				"enumerateSelection",
				"getNodeHierarchy",
				"getOpacity",
				"getSelectionState",
				"getTintColor",
				"getVisibilityChanges",
				"getVisibilityState",
				"setOpacity",
				"setSelectionState",
				"setTintColor",
				"setVisibilityState"
			]
		}
	});

	var basePrototype = ViewStateManager.getMetadata().getParent().getClass().prototype;

	ViewStateManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._nodeHierarchy = null;
		this._dvl = null;

		// The keys in this map are node references.
		// The values in this map are structures with the following format:
		// {
		//   flags: number,         // 32-bit integer
		//   opacity: number?,      // optional float
		//   tintColorABGR: number? // optional 32-bit integer
		// }
		this._nodeStates = new Map();
		this._selectedNodes = new Set(); // a collection of selected nodes for quick access,
		                                 // usually there are not many selected objects,
		                                 // so it is OK to store them in a collection.

		this._visibilityTracker = new VisibilityTracker();
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	ViewStateManager.prototype._onAfterUpdateContentConnector = function() {
		this._setScene(this._contentConnector.getContent());
	};

	ViewStateManager.prototype._onBeforeClearContentConnector = function() {
		this._setScene(null);
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Node hierarchy handling begins.

	ViewStateManager.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");
		if (!(content instanceof sap.ui.vk.dvl.Scene)) {
			content = null;
		}
		this._setScene(content);
	};

	ViewStateManager.prototype._setScene = function(scene) {
		if (scene) {
			this._setNodeHierarchy(scene.getDefaultNodeHierarchy());
		} else {
			this._setNodeHierarchy(null);
		}
		return this;
	};

	ViewStateManager.prototype._setNodeHierarchy = function(nodeHierarchy) {
		var oldNodeHierarchy = this._nodeHierarchy;

		if (this._nodeHierarchy) {
			this._dvl.Client.detachStepEvent(this._handleStepEvent, this);
			this._nodeHierarchy = null;
			this._dvl = null;
			this._nodeStates.clear();
			this._selectedNodes.clear();
			this._visibilityTracker.clear();
		}

		if (nodeHierarchy) {
			var scene = nodeHierarchy.getScene(),
			    dvlSceneId = scene.getSceneRef();

			this._nodeHierarchy = nodeHierarchy;
			this._dvl = scene.getGraphicsCore().getApi(sap.ui.vk.dvl.GraphicsCoreApi.LegacyDvl);
			this._dvl.Client.attachStepEvent(this._handleStepEvent, this);

			var that = this,
			    visible = [],
			    hidden = [],
			    selected = [],
			    unselected = [];

			that._dvl.Scene.RetrieveSceneInfo(dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN | sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_HOTSPOTS).ChildNodes
				.forEach(function addNodeRecursive(nodeRef) {
					var info = that._dvl.Scene.RetrieveNodeInfo(dvlSceneId, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS | sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN);
					that._nodeStates.set(nodeRef, { flags: info.Flags });
					if (info.Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) {
						that._selectedNodes.add(nodeRef);
					}
					(info.Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE ? visible : hidden).push(nodeRef);
					(info.Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED ? selected : unselected).push(nodeRef);
					info.ChildNodes.forEach(addNodeRecursive);
				});

			this.fireSelectionChanged({
				selected: selected,
				unselected: unselected
			});

			this.fireVisibilityChanged({
				visible: visible,
				hidden: hidden
			});
		}

		if (nodeHierarchy !== oldNodeHierarchy) {
			this.fireNodeHierarchyReplaced({
				oldNodeHierarchy: oldNodeHierarchy,
				newNodeHierarchy: nodeHierarchy
			});
		}

		return this;
	};

	// Node hierarchy handling ends.
	////////////////////////////////////////////////////////////////////////

	/**
	 * Gets the NodeHierarchy object associated with this ViewStateManager object.
	 * @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManager object.
	 * @public
	 */
	ViewStateManager.prototype.getNodeHierarchy = function() {
		return this._nodeHierarchy;
	};

	/**
	 * Gets the visibility changes in the current ViewStateManager object.
	 * @returns {string[]} The visibility changes are in the form of an array. The array is a list of node VE ids which suffered a visibility changed relative to the default state.
	 * @public
	 */
	ViewStateManager.prototype.getVisibilityChanges = function() {
		return this.getShouldTrackVisibilityChanges() ? this._visibilityTracker.getInfo(this.getNodeHierarchy()) : null;
	};

	ViewStateManager.prototype.getVisibilityComplete = function() {
		var nodeHierarchy = this.getNodeHierarchy(),
			allNodeRefs = nodeHierarchy.findNodesByName(),
			visible = [],
			hidden = [];

		allNodeRefs.forEach(function(nodeRef) {
			// create node proxy based on dynamic node reference
			var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef),
				// get the VE_LOCATOR ve id
				veId = jQuery.grep(nodeProxy.getVeIds(), function(veId) {
					return veId.type === "VE_LOCATOR";
				});
			veId = Array.isArray(veId) && veId.length > 0 ? veId[ 0 ].fields[ 0 ].value : null;
			// destroy the node proxy
			nodeHierarchy.destroyNodeProxy(nodeProxy);
			if (veId) {
				// push the ve id to either visible/hidden array
				if (this.getVisibilityState(nodeRef)) {
					visible.push(veId);
				} else {
					hidden.push(veId);
				}
			}
		}, this);

		return {
			visible: visible,
			hidden: hidden
		};
	};

	var getFlagState = function(nodeStates, flagsMask, nodeRef) {
		return nodeStates.has(nodeRef) && (nodeStates.get(nodeRef).flags & flagsMask) !== 0;
	};

	ViewStateManager.prototype._getVisibilityFlagState = function(nodeRef) {
		return getFlagState(this._nodeStates, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE, nodeRef);
	};

	ViewStateManager.prototype._getSelectionFlagState = function(nodeRef) {
		return getFlagState(this._nodeStates, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED, nodeRef);
	};

	var setFlagState = function(nodeStates, flags, flagsMask, nodeRef) {
		if (nodeStates.has(nodeRef)) {
			var item = nodeStates.get(nodeRef);
			item.flags = item.flags & ~flagsMask | flags & flagsMask;
		} else {
			nodeStates.set(nodeRef, { flags: flags & flagsMask });
		}
	};

	ViewStateManager.prototype._setFlags = function(nodeRef, flags, flagsMask) {
		if (flagsMask & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) {
			this.setVisibilityState(nodeRef, (flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0, false);
		}
		if (flagsMask & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) {
			this.setSelectionState(nodeRef, (flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0, false);
		}
		// The VISIBLE and SELECTED flags are handled separately above to fire proper events.
		setFlagState(this._nodeStates, flags, flagsMask & ~(sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED), nodeRef);
		return this;
	};

	ViewStateManager.prototype._getFlags = function(nodeRef, flagsMask) {
		var nodeState = this._nodeStates.get(nodeRef),
		    flags = nodeState && nodeState.flags;
		return flags !== undefined ? flags & flagsMask : null;
	};

	/**
	 * Gets the visibility state of nodes.
	 *
	 * If a single node reference is passed to the method then a single visibility state is returned.<br/>
	 * If an array of node references is passed to the method then an array of visibility states is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getVisibilityState = function(nodeRefs) {
		return Array.isArray(nodeRefs) ?
			nodeRefs.map(this._getVisibilityFlagState, this) :
			this._getVisibilityFlagState(nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
	};

	/**
	 * Sets the visibility state of the nodes.
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} visible The new visibility state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setVisibilityState = function(nodeRefs, visible, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		var changed = jQuery.sap.unique(recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs)
			.filter(function(nodeRef) {
				return nodeRef && this._getVisibilityFlagState(nodeRef) !== visible;
			}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				var nodeState = this._nodeStates.get(nodeRef);
				if (nodeState) {
					if (nodeState.flags === undefined) {
						nodeState.flags = 0;
					}
					if (visible) {
						nodeState.flags |= sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_TEMPORARY_PREVIOUS_VISIBILITY;
					} else {
						nodeState.flags &= ~(sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_TEMPORARY_PREVIOUS_VISIBILITY);
					}
				} else {
					// A new node was added to the scene. Most likely a camera.
					this._nodeStates.set(nodeRef, { flags: visible ? sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE : 0 });
				}
			}, this);

			if (this.getShouldTrackVisibilityChanges()) {
				changed.forEach(this._visibilityTracker.trackNodeRef, this._visibilityTracker);
			}

			this.fireVisibilityChanged({
				visible: visible ? changed : [],
				hidden: visible ? [] : changed
			});
		}

		return this;
	};

	/**
	 * Enumerates IDs of the selected nodes.
	 *
	 * @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.enumerateSelection = function(callback) {
		this._selectedNodes.forEach(callback);
		return this;
	};

	/**
	 * Gets the selection state of the node.
	 *
	 * If a single node reference is passed to the method then a single selection state is returned.<br/>
	 * If an array of node references is passed to the method then an array of selection states is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getSelectionState = function(nodeRefs) {
		return Array.isArray(nodeRefs) ?
			nodeRefs.map(this._getSelectionFlagState, this) :
			this._getSelectionFlagState(nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
	};

	/**
	 * Sets the selection state of the nodes.
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} selected The new selection state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setSelectionState = function(nodeRefs, selected, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		var changed = jQuery.sap.unique(recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs)
			.filter(function(nodeRef) {
				return nodeRef && this._getSelectionFlagState(nodeRef) !== selected;
			}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				var nodeState = this._nodeStates.get(nodeRef);
				if (nodeState) {
					if (nodeState.flags === undefined) {
						nodeState.flags = this._dvl.Scene.RetrieveNodeInfo(this._nodeHierarchy.getScene().getSceneRef(), nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags;
					}
					if (selected) {
						nodeState.flags |= sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED;
					} else {
						nodeState.flags &= ~sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED;
					}
				} else {
					// A new node was added to the scene. Most likely a camera.
					var flags = this._dvl.Scene.RetrieveNodeInfo(this._nodeHierarchy.getScene().getSceneRef(), nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags;
					this._nodeStates.set(nodeRef, { flags: flags | (selected ? sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED : 0) });
				}
				this._selectedNodes[selected ? "add" : "delete"](nodeRef);
			}, this);

			this.fireSelectionChanged({
				selected: selected ? changed : [],
				unselected: selected ? [] : changed
			});
		}

		return this;
	};

	ViewStateManager.prototype._handleStepEvent = function(event) {
		if (event.type === sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_STARTED) {
			this._visibilityTracker.clear();
		}
	};

	ViewStateManager.prototype._collectNodesRecursively = function(nodeRefs) {
		var result = [],
		    that = this;
		nodeRefs.forEach(function collectChildNodes(nodeRef) {
			result.push(nodeRef);
			that._nodeHierarchy.enumerateChildren(nodeRef, collectChildNodes, false, true);
		});
		return result;
	};

	/**
	 * Gets the opacity of the node.
	 *
	 * A helper method to ensure the returned value is either <code>float</code> or <code>null</code>.
	 *
	 * @param {any} nodeRef The node reference.
	 * @returns {float|null} The opacity or <code>null</code> if no opacity set.
	 * @private
	 */
	ViewStateManager.prototype._getOpacity = function(nodeRef) {
		if (this._nodeStates.has(nodeRef)) {
			var opacity = this._nodeStates.get(nodeRef).opacity;
			return opacity === undefined ? null : opacity;
		} else {
			return null;
		}
	};

	/**
	 * Gets the opacity of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {float|float[]} A single value or an array of values. Value <code>null</code> means that the node's own opacity should be used.
	 * @public
	 */
	ViewStateManager.prototype.getOpacity = function(nodeRefs) {
		if (Array.isArray(nodeRefs)) {
			return nodeRefs.map(this._getOpacity, this);
		} else {
			return this._getOpacity(nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
		}
	};

	/**
	 * Sets the opacity of the nodes.
	 *
	 * @param {any|any[]} nodeRefs                The node reference or the array of node references.
	 * @param {float|null}      opacity           The new opacity of the nodes. If <code>null</code> is passed then the opacity is reset
	 *                                            and the node's own opacity should be used.
	 * @param {boolean}         [recursive=false] The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setOpacity = function(nodeRefs, opacity, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		var changed = jQuery.sap.unique(recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs)
			.filter(function(nodeRef) {
				return nodeRef && this._getOpacity(nodeRef) !== opacity;
			}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				var nodeState = this._nodeStates.get(nodeRef);
				if (nodeState) {
					if (opacity === null) {
						delete nodeState.opacity;
					} else {
						nodeState.opacity = opacity;
					}
				} else if (opacity !== null) {
					// A new node was added to the scene. Most likely a camera.
					this._nodeStates.set(nodeRef, { opacity: opacity });
				}
			}, this);

			this.fireOpacityChanged({
				changed: changed,
				opacity: opacity
			});
		}

		return this;
	};

	/**
	 * Gets the tint color of the node in the ABGR format.
	 *
	 * A helper method to ensure that the returned value is either <code>int</code> or <code>null</code>.
	 *
	 * @param {any} nodeRef The node reference.
	 * @returns {int|null} The color in the ABGR format or <code>null</code> if no tint color is set.
	 * @private
	 */
	ViewStateManager.prototype._getTintColorABGR = function(nodeRef) {
		if (this._nodeStates.has(nodeRef)) {
			var tintColorABGR = this._nodeStates.get(nodeRef).tintColorABGR;
			return tintColorABGR === undefined ? null : tintColorABGR;
		} else {
			return null;
		}
	};

	/**
	 * Gets the tint color in the CSS color format.
	 *
	 * A helper method to ensure that the returned value is either {@link sap.ui.core.CSSColor} or <code>null</code>.
	 *
	 * @param {any} nodeRef The node reference.
	 * @returns {sap.ui.core.CSSColor|null} The color in the CSS color format or <code>null</code> if no tint color is set.
	 * @private
	 */
	ViewStateManager.prototype._getTintColor = function(nodeRef) {
		if (this._nodeStates.has(nodeRef)) {
			var tintColorABGR = this._nodeStates.get(nodeRef).tintColorABGR;
			return tintColorABGR === undefined ? null : sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(tintColorABGR));
		} else {
			return null;
		}
	};

	/**
	 * Gets the tint color of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @param {any|any[]}       nodeRefs             The node reference or the array of node references.
	 * @param {boolean}         [inABGRFormat=false] This flag indicates to return the tint color in the ABGR format,
	 *                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	 * @returns {sap.ui.core.CSSColor|sap.ui.core.CSSColor[]|int|int[]}
	 *                                               A single value or an array of values. Value <code>null</code> means that
	 *                                               the node's own tint color should be used.
	 * @public
	 */
	ViewStateManager.prototype.getTintColor = function(nodeRefs, inABGRFormat) {
		var getTintColorMethodName = inABGRFormat ? "_getTintColorABGR" : "_getTintColor";
		if (Array.isArray(nodeRefs)) {
			return nodeRefs.map(this[getTintColorMethodName], this);
		} else {
			return this[getTintColorMethodName](nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
		}
	};

	/**
	 * Sets the tint color of the nodes.
	 * @param {any|any[]}                   nodeRefs          The node reference or the array of node references.
	 * @param {sap.ui.vk.CSSColor|int|null} tintColor         The new tint color of the nodes. The value can be defined as a string
	 *                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	 *                                                        is passed then the tint color is reset and the node's own tint color should be used.
	 * @param {boolean}                     [recursive=false] This flag indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setTintColor = function(nodeRefs, tintColor, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		var tintColorABGR = null;
		switch (typeof tintColor) {
			case "number":
				tintColorABGR = tintColor;
				break;
			case "string":
				if (sap.ui.core.CSSColor.isValid(tintColor)) {
					tintColorABGR = sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(tintColor));
				}
				break;
			default:
				tintColor = null; // The input tint color is invalid, reset it to null.
				break;
		}

		var changed = jQuery.sap.unique(recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs)
			.filter(function(nodeRef) {
				return nodeRef && this._getTintColorABGR(nodeRef) !== tintColorABGR;
			}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				var nodeState = this._nodeStates.get(nodeRef);
				if (nodeState) {
					if (tintColorABGR === null) {
						delete nodeState.tintColorABGR;
					} else {
						nodeState.tintColorABGR = tintColorABGR;
					}
				} else if (tintColorABGR !== null) {
					// A new node was added to the scene. Most likely a camera.
					this._nodeStates.set(nodeRef, { tintColorABGR: tintColorABGR });
				}
			}, this);

			this.fireTintColorChanged({
				changed: changed,
				tintColor: tintColor,
				tintColorABGR: tintColorABGR
			});
		}

		return this;
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: VisibilityTracker

	// Visibility Tracker is an object which keeps track of visibility changes.
	// These changes will be used in Viewport getViewInfo/setViewInfo
	VisibilityTracker = function() {
		// all visibility changes are saved in a Set. When a node changes visibility,
		// we add that id to the Set. When the visibility is changed back, we remove
		// the node reference from the set.
		this._visibilityChanges = new Set();
	};

	// It returns an object with all the relevant information about the node visibility
	// changes. In this case, we need to retrieve a list of all nodes that suffered changes
	// and an overall state against which the node visibility changes is applied.
	// For example: The overall visibility state is ALL VISIBLE and these 2 nodes changed state.
	VisibilityTracker.prototype.getInfo = function(nodeHierarchy) {

		var findVeLocator = function(veId) {
			return veId.type === "VE_LOCATOR";
		};

		// converting the collection of changed node references to ve ids
		var changedNodes = [];
		this._visibilityChanges.forEach(function(nodeRef) {
			// create node proxy based on dynamic node reference
			var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef),
				// get the VE_LOCATOR ve id
				veId = jQuery.grep(nodeProxy.getVeIds(), findVeLocator);
			veId = Array.isArray(veId) && veId.length > 0 ? veId[ 0 ].fields[ 0 ].value : null;
			// destroy the node proxy
			nodeHierarchy.destroyNodeProxy(nodeProxy);
			if (veId) {
				changedNodes.push(veId);
			}
		});

		return changedNodes;
	};

	// It clears all the node references from the _visibilityChanges set.
	// This action can be performed for example, when a step is activated or
	// when the nodes are either all visible or all not visible.
	VisibilityTracker.prototype.clear = function() {
		this._visibilityChanges.clear();
	};

	// If a node suffers a visibility change, we check if that node is already tracked.
	// If it is, we remove it from the list of changed nodes. If it isn't, we add it.
	VisibilityTracker.prototype.trackNodeRef = function(nodeRef) {
		if (this._visibilityChanges.has(nodeRef)) {
			this._visibilityChanges.delete(nodeRef);
		} else {
			this._visibilityChanges.add(nodeRef);
		}
	};

	// END: VisibilityTracker
	////////////////////////////////////////////////////////////////////////////

	ContentConnector.injectMethodsIntoClass(ViewStateManager);

	return ViewStateManager;
});

}; // end of sap/ui/vk/dvl/ViewStateManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.NodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeProxy class.
jQuery.sap.declare('sap.ui.vk.threejs.NodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/NodeProxy",[
	"jquery.sap.global", "../library", "../NodeProxy"
], function(jQuery, library, NodeProxyBase) {
	"use strict";

	/**
	 * Constructor for a new NodeProxy.
	 *
	 * @class
	 * Provides a proxy object to the node in the node hierarchy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy} method.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.NodeProxy
	 * @alias sap.ui.vk.threejs.NodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeProxy = NodeProxyBase.extend("sap.ui.vk.threejs.NodeProxy", /** @lends sap.ui.vk.threejs.NodeProxy.prototype */ {
		metadata: {
		},

		constructor: function(nodeHierarchy, obj3D) {
			NodeProxyBase.call(this);

			this._object3D = obj3D; // THREE.Object3D
		}
	});

	NodeProxy.prototype.destroy = function() {
		this._object3D = null;

		NodeProxyBase.prototype.destroy.call(this);
	};

	NodeProxy.prototype.getNodeRef = function() {
		return this._object3D;
	};

	NodeProxy.prototype.getNodeId = function() {
		return this._object3D;
	};

	NodeProxy.prototype.getVeIds = function() {
		return this._object3D.userData.veIds;
	};

	NodeProxy.prototype.getName = function() {
		return this._object3D.name || ("<" + this._object3D.type + ">");
	};

	NodeProxy.prototype.getLocalMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(this._object3D.matrix.elements);
	};

	NodeProxy.prototype.setLocalMatrix = function(value) {
		if (value) {
			var obj3D = this._object3D;
			obj3D.matrix.fromArray(sap.ui.vk.TransformationMatrix.convertTo4x4(value));
			obj3D.matrix.decompose(obj3D.position, obj3D.quaternion, obj3D.scale);
			obj3D.matrixWorldNeedsUpdate = true;
		}
		this.setProperty("localMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getWorldMatrix = function() {
		return sap.ui.vk.TransformationMatrix.convertTo4x3(this._object3D.matrixWorld.elements);
	};

	NodeProxy.prototype.setWorldMatrix = function(value) {
		if (value) {
			var obj3D = this._object3D;
			obj3D.matrixWorld.fromArray(sap.ui.vk.TransformationMatrix.convertTo4x4(value));
			if (obj3D.parent) {
				obj3D.matrix.multiplyMatrices(new THREE.Matrix4().getInverse(obj3D.parent.matrixWorld), obj3D.matrixWorld);
			} else {
				obj3D.matrix.copy(obj3D.matrixWorld);
			}
			obj3D.matrix.decompose(obj3D.position, obj3D.quaternion, obj3D.scale);
		}
		this.setProperty("worldMatrix", value, true);
		return this;
	};

	NodeProxy.prototype.getOpacity = function() {
		return this._object3D.userData.opacity;
	};

	NodeProxy.prototype.setOpacity = function(value) {
		this._object3D.userData.opacity = value;
		this.setProperty("opacity", value, true);
		return this;
	};

	NodeProxy.prototype.getTintColorABGR = function() {
		return this._object3D.userData.tintColor;
	};

	NodeProxy.prototype.setTintColorABGR = function(value) {
		this._object3D.userData.tintColor = value;
		this.setProperty("tintColorABGR", value, true);
		this.setProperty("tintColor", sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(value)), true);
		return this;
	};

	NodeProxy.prototype.getTintColor = function() {
		return sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(this._object3D.userData.tintColor));
	};

	NodeProxy.prototype.setTintColor = function(value) {
		var abgr = sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(value));
		this._object3D.userData.tintColor = abgr;
		this.setProperty("tintColorABGR", abgr, true);
		this.setProperty("tintColor", value, true);
		return this;
	};

	NodeProxy.prototype.getNodeMetadata = function() {
		return this._object3D.userData.metadata;
	};

	NodeProxy.prototype.getHasChildren = function() {
		return this._object3D.children.length > 0;
	};

	NodeProxy.prototype.getClosed = function() {
		return !!this._object3D.userData.closed;
	};

	return NodeProxy;
});

}; // end of sap/ui/vk/threejs/NodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.ViewStateManager') ) {
/*!
* SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
*/

// Provides the ViewStateManager class.
jQuery.sap.declare('sap.ui.vk.threejs.ViewStateManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/ViewStateManager",[
	"jquery.sap.global", "sap/ui/core/Element", "../ContentConnector", "../ViewStateManagerBase"
], function(jQuery, Element, ContentConnector, ViewStateManagerBase) {
	"use strict";

	var VisibilityTracker;

	/**
	* Constructor for a new ViewStateManager.
	*
	* @class
	* Manages the visibility and selection states of nodes in the scene.
	*
	* @param {string} [sId] ID for the new ViewStateManager object. Generated automatically if no ID is given.
	* @param {object} [mSettings] Initial settings for the new ViewStateManager object.
	* @public
	* @author SAP SE
	* @version 1.50.7
	* @extends sap.ui.vk.ViewStateManagerBase
	* @alias sap.ui.vk.dvl.ViewStateManager
	* @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	*/
	var ViewStateManager = ViewStateManagerBase.extend("sap.ui.vk.threejs.ViewStateManager", /** @lends sap.ui.vk.threejs.ViewStateManager.prototype */ {
		metadata: {
			publicMethods: [
				"enumerateSelection",
				"getNodeHierarchy",
				"getOpacity",
				"getSelectionState",
				"getTintColor",
				"getVisibilityChanges",
				"getVisibilityState",
				"setOpacity",
				"setSelectionState",
				"setTintColor",
				"setVisibilityState"
			]
		}
	});

	var basePrototype = ViewStateManager.getMetadata().getParent().getClass().prototype;

	ViewStateManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._nodeHierarchy = null;
		this._nodeStates = new Map();
		this._selectedNodes = new Set(); // a collection of selected nodes for quick access,
		// usually there are not many selected objects,
		// so it is OK to store them in a collection.

		this._visibilityTracker = new VisibilityTracker();

		this.setHighlightColor("rgba(255, 0, 0, 1.0)");
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	ViewStateManager.prototype._onAfterUpdateContentConnector = function() {
		this._setScene(this._contentConnector.getContent());
	};

	ViewStateManager.prototype._onBeforeClearContentConnector = function() {
		this._setScene(null);
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Node hierarchy handling begins.

	ViewStateManager.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");
		this._setScene(content instanceof sap.ui.vk.threejs.Scene ? content : null);
	};

	ViewStateManager.prototype._setScene = function(scene) {
		this._setNodeHierarchy(scene ? scene.getDefaultNodeHierarchy() : null);
		return this;
	};

	ViewStateManager.prototype._setNodeHierarchy = function(nodeHierarchy) {
		var oldNodeHierarchy = this._nodeHierarchy;

		if (this._nodeHierarchy) {
			this._nodeHierarchy = null;
			this._nodeStates.clear();
			this._selectedNodes.clear();
			this._visibilityTracker.clear();
		}

		if (nodeHierarchy) {
			this._nodeHierarchy = nodeHierarchy;

			var visible = [],
				hidden = [];

			var allNodeRefs = nodeHierarchy.findNodesByName();
			allNodeRefs.forEach(function(nodeRef) {
				(nodeRef.visible ? visible : hidden).push(nodeRef);
			});

			this.fireVisibilityChanged({
				visible: visible,
				hidden: hidden
			});
		}

		if (nodeHierarchy !== oldNodeHierarchy) {
			this.fireNodeHierarchyReplaced({
				oldNodeHierarchy: oldNodeHierarchy,
				newNodeHierarchy: nodeHierarchy
			});
		}

		return this;
	};

	// Node hierarchy handling ends.
	////////////////////////////////////////////////////////////////////////

	/**
	* Gets the NodeHierarchy object associated with this ViewStateManager object.
	* @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManager object.
	* @public
	*/
	ViewStateManager.prototype.getNodeHierarchy = function() {
		return this._nodeHierarchy;
	};

	/**
	* Gets the visibility changes in the current ViewStateManager object.
	* @returns {string[]} The visibility changes are in the form of an array. The array is a list of node VE ids which suffered a visibility changed relative to the default state.
	* @public
	*/
	ViewStateManager.prototype.getVisibilityChanges = function() {
		return this.getShouldTrackVisibilityChanges() ? this._visibilityTracker.getInfo(this.getNodeHierarchy()) : null;
	};

	ViewStateManager.prototype.getVisibilityComplete = function() {
		var nodeHierarchy = this.getNodeHierarchy(),
			allNodeRefs = nodeHierarchy.findNodesByName(),
			visible = [],
			hidden = [];

		allNodeRefs.forEach(function(nodeRef) {
			// create node proxy based on dynamic node reference
			var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef),
				// get the VE_LOCATOR ve id
				veId = jQuery.grep(nodeProxy.getVeIds(), function(veId) {
					return veId.type === "VE_LOCATOR";
				})[ 0 ].fields[ 0 ].value;
			// destroy the node proxy
			nodeHierarchy.destroyNodeProxy(nodeProxy);
			// push the ve id to either visible/hidden array
			if (this.getVisibilityState(nodeRef)) {
				visible.push(veId);
			} else {
				hidden.push(veId);
			}
		}, this);

		return {
			visible: visible,
			hidden: hidden
		};
	};

	/**
	* Gets the visibility state of nodes.
	*
	* If a single node is passed to the method then a single visibility state is returned.<br/>
	* If an array of nodes is passed to the method then an array of visibility states is returned.
	*
	* @param {any|any[]} nodeRefs The node reference or the array of node references.
	* @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
	* @public
	*/
	ViewStateManager.prototype.getVisibilityState = function(nodeRefs) {
		return Array.isArray(nodeRefs) ?
			nodeRefs.map(function(nodeRef) { return nodeRef.visible; }) :
			nodeRefs.visible; // NB: The nodeRefs argument is a single nodeRef.
	};

	/**
	* Sets the visibility state of the nodes.
	* @param {any|any[]} nodeRefs The node reference or the array of node references.
	* @param {boolean} visible The new visibility state of the nodes.
	* @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.setVisibilityState = function(nodeRefs, visible, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}
		nodeRefs = (recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs).filter(function(value, index, self) {
			return self.indexOf(value) === index;
		});

		var changed = nodeRefs.filter(function(nodeRef) {
			return nodeRef.visible != visible;
		}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				nodeRef.visible = visible;
			}, this);

			if (this.getShouldTrackVisibilityChanges()) {
				changed.forEach(this._visibilityTracker.trackNodeRef, this._visibilityTracker);
			}

			this.fireVisibilityChanged({
				visible: visible ? changed : [],
				hidden: visible ? [] : changed
			});
		}
		return this;
	};

	/**
	* Enumerates IDs of the selected nodes.
	*
	* @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.enumerateSelection = function(callback) {
		this._selectedNodes.forEach(callback);
		return this;
	};

	/**
	* Gets the selection state of the node.
	*
	* If a single node reference is passed to the method then a single selection state is returned.<br/>
	* If an array of node references is passed to the method then an array of selection states is returned.
	*
	* @param {any|any[]} nodeRefs The node reference or the array of node references.
	* @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
	* @public
	*/
	ViewStateManager.prototype.getSelectionState = function(nodeRefs) {
		var selectionSet = this._selectedNodes;
		function isSelected(nodeRef) {
			return selectionSet.has(nodeRef);
		}

		return Array.isArray(nodeRefs) ?
			nodeRefs.map(isSelected) : isSelected(nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
	};


	ViewStateManager.prototype._applyColor = function(nodeRef, colorRGBA) {
		if (nodeRef && nodeRef.material) {
			if (!nodeRef.userData.originalMaterial) {
				nodeRef.userData.originalMaterial = nodeRef.material;
			}

			if (nodeRef.userData.originalMaterial) {
				nodeRef.material = nodeRef.userData.originalMaterial.clone();
			}

			var color = sap.ui.vk.abgrToColor(colorRGBA);

			nodeRef.material.color.r = color.red / 255.0;
			nodeRef.material.color.g = color.green / 255.0;
			nodeRef.material.color.b = color.blue / 255.0;
			nodeRef.material.opacity = color.alpha;
			if (Math.abs(color.alpha - 1.0) > 0.0001) {
				nodeRef.material.transparent = true;
			}
		}
	};

	ViewStateManager.prototype._applyOpacity = function(nodeRef, opacity) {
		if (nodeRef && nodeRef.material) {
			if (!nodeRef.userData.originalMaterial) {
				nodeRef.userData.originalMaterial = nodeRef.material;
			}

			if (nodeRef.userData.originalMaterial === nodeRef.material) {
				nodeRef.material = nodeRef.userData.originalMaterial.clone();
			}
			nodeRef.material.opacity = opacity;
			if (Math.abs(opacity - 1.0) > 0.0001) {
				nodeRef.material.transparent = true;
			} else {
				nodeRef.material.transparent = false;
			}
		}
	};

	ViewStateManager.prototype._resetColor = function(nodeRef) {
		if (nodeRef && nodeRef.material) {
			if (typeof nodeRef.userData.beHighlighted == "undefined") {
				if (nodeRef.userData.tintColorABGR) {
					this._applyColor(nodeRef, nodeRef.userData.tintColorABGR);
				} else if (nodeRef.userData.originalMaterial) {
					nodeRef.material = nodeRef.userData.originalMaterial;
				}
			}
			if (nodeRef.userData.opacity) {
				this._applyOpacity(nodeRef, nodeRef.userData.opacity);
			} else if (nodeRef.userData.beHighlighted) {
				this._applyColor(nodeRef, this._highlightColorABGR);
			}
		}
	};

	ViewStateManager.prototype._isAChild = function(childNodeRef, nodeRefs) {
		var ancestor = childNodeRef.parent;
		while (ancestor) {
			if (nodeRefs.has(ancestor)) {
				return true;
			}
			ancestor = ancestor.parent;
		}
		return false;
	};

	ViewStateManager.prototype._ApplyHighlightingColor = function(nodeRef) {
		this._applyColor(nodeRef, this._highlightColorABGR);
		if (nodeRef.userData.opacity) {
			this._applyOpacity(nodeRef, nodeRef.userData.opacity);
		}
		nodeRef.userData.beHighlighted = true;
		var children = this._nodeHierarchy.getChildren(nodeRef);
		var ni;
		for (ni = 0; ni < children.length; ni++) {
			this._ApplyHighlightingColor(children[ ni ]);
		}
	};

	ViewStateManager.prototype._RemoveHighlightingColor = function(nodeRef) {
		if (!this._selectedNodes.has(nodeRef)) {
			delete nodeRef.userData.beHighlighted;
			this._resetColor(nodeRef);
			var children = this._nodeHierarchy.getChildren(nodeRef);
			var ni;
			for (ni = 0; ni < children.length; ni++) {
				this._RemoveHighlightingColor(children[ ni ]);
			}
		}
	};

	/**
	* Sets the selection state of the nodes.
	* @param {any|any[]} nodeRefs The node reference or the array of node references.
	* @param {boolean} selected The new selection state of the nodes.
	* @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.setSelectionState = function(nodeRefs, selected, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		nodeRefs = (recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs).filter(function(value, index, self) {
			return self.indexOf(value) === index;
		});

		var changed = nodeRefs.filter(function(nodeRef) {
			return this._selectedNodes.has(nodeRef) !== selected;
		}, this);

		if (changed.length > 0) {

			changed.forEach(function(nodeRef) {
				this._selectedNodes[ selected ? "add" : "delete" ](nodeRef);
			}, this);

			var ni;
			var nodesToBeRenderred = [];
			for (ni = 0; ni < changed.length; ni++) {
				if (!this._isAChild(changed[ ni ], this._selectedNodes)) {
					nodesToBeRenderred.push(changed[ ni ]);
				}
			}

			for (ni = 0; ni < nodesToBeRenderred.length; ni++) {
				if (selected) {
					this._ApplyHighlightingColor(nodesToBeRenderred[ ni ]);
				} else {
					this._RemoveHighlightingColor(nodesToBeRenderred[ ni ]);
				}
			}

			this.fireSelectionChanged({
				selected: selected ? changed : [],
				unselected: selected ? [] : changed
			});
		}

		return this;
	};

	ViewStateManager.prototype._collectNodesRecursively = function(nodeRefs) {
		var result = [],
			that = this;
		nodeRefs.forEach(function collectChildNodes(nodeRef) {
			result.push(nodeRef);
			that._nodeHierarchy.enumerateChildren(nodeRef, collectChildNodes, false, true);
		});
		return result;
	};

	/**
	* Gets the opacity of the node.
	*
	* A helper method to ensure the returned value is either <code>float</code> or <code>null</code>.
	*
	* @param {any} nodeRef The node reference.
	* @returns {float|null} The opacity or <code>null</code> if no opacity set.
	* @private
	*/
	ViewStateManager.prototype._getOpacity = function(nodeRef) {
		return nodeRef.userData && nodeRef.userData.opacity ? nodeRef.userData.opacity : null;
	};

	/**
	* Gets the opacity of the node.
	*
	* If a single node is passed to the method then a single value is returned.<br/>
	* If an array of nodes is passed to the method then an array of values is returned.
	*
	* @param {any|any[]} nodeRefs The node reference or the array of node references.
	* @returns {float|float[]} A single value or an array of values. Value <code>null</code> means that the node's own opacity should be used.
	* @public
	*/
	ViewStateManager.prototype.getOpacity = function(nodeRefs) {
		if (Array.isArray(nodeRefs)) {
			return nodeRefs.map(this._getOpacity, this);
		} else {
			return this._getOpacity(nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
		}
	};

	/**
	* Sets the opacity of the nodes.
	*
	* @param {any|any[]}       nodeRefs          The node reference or the array of node references.
	* @param {float|null}      opacity           The new opacity of the nodes. If <code>null</code> is passed then the opacity is reset
	*                                            and the node's own opacity should be used.
	* @param {boolean}         [recursive=false] The flags indicates if the change needs to propagate recursively to child nodes.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.setOpacity = function(nodeRefs, opacity, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		nodeRefs = (recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs).filter(function(value, index, self) {
			return self.indexOf(value) === index;
		});

		var changed = nodeRefs.filter(function(nodeRef) {
			return this._getOpacity(nodeRef) !== opacity;
		}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				if (opacity) {
					nodeRef.userData.opacity = opacity;
				} else {
					delete nodeRef.userData.opacity;
				}

			}, this);

			changed.forEach(function(nodeRef) {
				this._resetColor(nodeRef);
			}, this);

			this.fireOpacityChanged({
				changed: changed,
				opacity: opacity
			});
		}

		return this;
	};

	/**
	* Gets the tint color of the node in the ABGR format.
	*
	* A helper method to ensure that the returned value is either <code>int</code> or <code>null</code>.
	*
	* @param {any} nodeRef The node reference.
	* @returns {int|null} The color in the ABGR format or <code>null</code> if no tint color is set.
	* @private
	*/
	ViewStateManager.prototype._getTintColorABGR = function(nodeRef) {
		return nodeRef.userData && nodeRef.userData.tintColorABGR ? nodeRef.userData.tintColorABGR : null;
	};

	/**
	* Gets the tint color in the CSS color format.
	*
	* A helper method to ensure that the returned value is either {@link sap.ui.core.CSSColor} or <code>null</code>.
	*
	* @param {any} nodeRef The node reference.
	* @returns {sap.ui.core.CSSColor|null} The color in the CSS color format or <code>null</code> if no tint color is set.
	* @private
	*/
	ViewStateManager.prototype._getTintColor = function(nodeRef) {
		return nodeRef.userData && nodeRef.userData.tintColorABGR ?
			sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(nodeRef.userData.tintColorABGR)) : null;
	};

	/**
	* Gets the tint color of the node.
	*
	* If a single node reference is passed to the method then a single value is returned.<br/>
	* If an array of node references is passed to the method then an array of values is returned.
	*
	* @param {any|any[]}       nodeRefs             The node reference or the array of node references.
	* @param {boolean}         [inABGRFormat=false] This flag indicates to return the tint color in the ABGR format,
	*                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	* @returns {sap.ui.core.CSSColor|sap.ui.core.CSSColor[]|int|int[]}
	*                                               A single value or an array of values. Value <code>null</code> means that
	*                                               the node's own tint color should be used.
	* @public
	*/
	ViewStateManager.prototype.getTintColor = function(nodeRefs, inABGRFormat) {
		var getTintColorMethodName = inABGRFormat ? "_getTintColorABGR" : "_getTintColor";
		if (Array.isArray(nodeRefs)) {
			return nodeRefs.map(this[ getTintColorMethodName ], this);
		} else {
			return this[ getTintColorMethodName ](nodeRefs); // NB: The nodeRefs argument is a single nodeRef.
		}
	};

	/**
	* Sets the tint color of the nodes.
	* @param {any|any[]}                   nodeRefs          The node reference or the array of node references.
	* @param {sap.ui.vk.CSSColor|int|null} tintColor         The new tint color of the nodes. The value can be defined as a string
	*                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	*                                                        is passed then the tint color is reset and the node's own tint color should be used.
	* @param {boolean}                     [recursive=false] This flag indicates if the change needs to propagate recursively to child nodes.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.setTintColor = function(nodeRefs, tintColor, recursive) {
		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		var tintColorABGR = null;
		switch (typeof tintColor) {
			case "number":
				tintColorABGR = tintColor;
				break;
			case "string":
				if (sap.ui.core.CSSColor.isValid(tintColor)) {
					tintColorABGR = sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(tintColor));
				}
				break;
			default:
				tintColor = null; // The input tint color is invalid, reset it to null.
				break;
		}

		nodeRefs = (recursive ? this._collectNodesRecursively(nodeRefs) : nodeRefs).filter(function(value, index, self) {
			return self.indexOf(value) === index;
		});

		var changed = nodeRefs.filter(function(nodeRef) {
			return this._getTintColorABGR(nodeRef) !== tintColorABGR;
		}, this);

		if (changed.length > 0) {
			changed.forEach(function(nodeRef) {
				if (tintColorABGR) {
					nodeRef.userData.tintColorABGR = tintColorABGR;
				} else if (nodeRef.userData && nodeRef.userData.tintColorABGR) {
					delete nodeRef.userData.tintColorABGR;
				}
			}, this);

			changed.forEach(function(nodeRef) {
				this._resetColor(nodeRef);
			}, this);

			this.fireTintColorChanged({
				changed: changed,
				tintColor: tintColor,
				tintColorABGR: tintColorABGR
			});
		}

		return this;
	};

	/**
	* Sets the default highlighting color
	* @param {sap.ui.vk.CSSColor|string|int} color           The new highlighting color. The value can be defined as a string
	*                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	*                                                        is passed then the tint color is reset and the node's own tint color should be used.
	* @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	* @public
	*/
	ViewStateManager.prototype.setHighlightColor = function(color) {

		switch (typeof color) {
			case "number":
				this._highlightColorABGR = color;
				break;
			case "string":
				if (sap.ui.core.CSSColor.isValid(color)) {
					this._highlightColorABGR = sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(color));
				}
				break;
			default:
				return this;
		}
		if (this._selectedNodes.size > 0) {
			this._selectedNodes.forEach(function(nodeRef) {
				this._resetColor(nodeRef);
			}, this);

			var selectedNodesArray = Array.from(this._selectedNodes);
			for (var ni = 0; ni < selectedNodesArray.length; ni++) {
				this._ApplyHighlightingColor(selectedNodesArray[ ni ]);
			}

			this.fireHighlightColorChanged({
				highlightColor: sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(this._highlightColorABGR)),
				highlightColorABGR: this._highlightColorABGR
			});
		}
		return this;
	};


	/**
	* Gets the default highlighting color
	*
	* @param {boolean}         [inABGRFormat=false] This flag indicates to return the highlighting color in the ABGR format,
	*                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	* @returns {sap.ui.core.CSSColor|string|int}
	*                                               A single value or an array of values. Value <code>null</code> means that
	*                                               the node's own tint color should be used.
	* @public
	*/
	ViewStateManager.prototype.getHighlightColor = function(inABGRFormat) {
		return inABGRFormat ? this._highlightColorABGR : sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(this._highlightColorABGR));
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: VisibilityTracker

	// Visibility Tracker is an object which keeps track of visibility changes.
	// These changes will be used in Viewport getViewInfo/setViewInfo
	VisibilityTracker = function() {
		// all visibility changes are saved in a Set. When a node changes visibility,
		// we add that id to the Set. When the visibility is changed back, we remove
		// the node reference from the set.
		this._visibilityChanges = new Set();
	};

	// It returns an object with all the relevant information about the node visibility
	// changes. In this case, we need to retrieve a list of all nodes that suffered changes
	// and an overall state against which the node visibility changes is applied.
	// For example: The overall visibility state is ALL VISIBLE and these 2 nodes changed state.
	VisibilityTracker.prototype.getInfo = function(nodeHierarchy) {

		var findVeLocator = function(veId) {
			return veId.type === "VE_LOCATOR";
		};

		// converting the collection of changed node references to ve ids
		var changedNodes = [];

		this._visibilityChanges.forEach(function(nodeRef) {
			// create node proxy based on dynamic node reference
			var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef);
			// get the VE_LOCATOR ve id
			var ids = nodeProxy.getVeIds();
			var veId = jQuery.grep(ids, findVeLocator)[ 0 ].fields[ 0 ].value;
			// destroy the node proxy
			nodeHierarchy.destroyNodeProxy(nodeProxy);
			changedNodes.push(veId);
		});

		return changedNodes;
	};

	// It clears all the node references from the _visibilityChanges set.
	// This action can be performed for example, when a step is activated or
	// when the nodes are either all visible or all not visible.
	VisibilityTracker.prototype.clear = function() {
		this._visibilityChanges.clear();
	};

	// If a node suffers a visibility change, we check if that node is already tracked.
	// If it is, we remove it from the list of changed nodes. If it isn't, we add it.
	VisibilityTracker.prototype.trackNodeRef = function(nodeRef) {
		if (this._visibilityChanges.has(nodeRef)) {
			this._visibilityChanges.delete(nodeRef);
		} else {
			this._visibilityChanges.add(nodeRef);
		}
	};

	// END: VisibilityTracker
	////////////////////////////////////////////////////////////////////////////

	ContentConnector.injectMethodsIntoClass(ViewStateManager);

	return ViewStateManager;
});

}; // end of sap/ui/vk/threejs/ViewStateManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DockManager') ) {
jQuery.sap.declare('sap.ui.vk.DockManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DockManager",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./DockContainer", "./DockPane", "./Loco", "sap/ui/core/ResizeHandler"
], function(jQuery, library, Control, DockContainer, DockPane, Loco, ResizeHandler) {
	"use strict";

	var DockManager = Control.extend("sap.ui.vk.DockManager", {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"getDomElement",
				"addDockPane",
				"removeDockPane",
				"addDockContainer",
				"removeDockContainer",
				"dock",
				"undock",
				"bringToFront",
				"beginGesture",
				"move",
				"endGesture",
				"resize"
			],

			properties: {
				/**
				 * Width of the Viewer control
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Height of the Viewer control
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				}
			}
		}
	});

	DockManager.prototype.init = function() {
		if (typeof DockManager._counter == "undefined") {
			DockManager._counter = 0;
		}
		this._id = "DockManager_" + DockManager._counter;
		DockManager._counter++;

		var elem = document.createElement("div");
		elem.setAttribute("id", this._id);
		// elem.addClass("sapUiDockManager_elem");
		elem.style.width = "100%";
		elem.style.height = "100%";
		elem.style.overflow = "hidden";
		elem.style.position = "relative";
		elem.style.backgroundColor = "blue";

		this._elem = elem;
		this._root = null;
		this._panes = [];
		this._containers = [];
		this._dockIcons = null;
		this._gesture = false;
		this._oPane = null;
		this._oParent = null;
		this._oDir = null;
		this._oContainer = null;
		this._oResize = null;
		this._oResizeDir = 0;
		this._oIsTab = false;
		this._rendered = false;

		/*
		 * TO DO:
		 * install Loco handlers
		 */
		this._loco = new Loco();
		this._loco.addHandler(this);
	};

	DockManager.prototype.exit = function() {
		this._loco.removeHandler(this._viewportHandler);

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	DockManager.prototype.isRendered = function() {
		return this._rendered;
	};

	DockManager.prototype.alwaysOnTop = function() {
		this._loco = new Loco();
		this._loco.removeHandler(this);
		this._loco.addHandler(this);
	};

	DockManager.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
		this._rendered = false;
	};

	DockManager.prototype.onAfterRendering = function() {
		var domObj = document.getElementById(this.getId());
		domObj.appendChild(this._elem);

		this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
		this._handleResize({
			size: {
				width: domObj.clientWidth,
				height: domObj.clientHeight
			}
		});

		this._rendered = true;
		var count = this._panes.length;
		for (var i = 0; i < count; i++) {
			this._panes[i].renderContent();
		}
	};

	DockManager.prototype._handleResize = function(event) {
		this.resize(event.size.width, event.size.height);
	};

	DockManager.prototype._setRect = function(elem, x, y, w, h) {
		elem.style.left = x + "px";
		elem.style.top = y + "px";
		if (w != null) {
			elem.style.width = w + "px";
		}
		if (h != null) {
			elem.style.height = h + "px";
		}
	};

	DockManager.prototype.getDomElement = function() {
		return this._elem;
	};

	DockManager.prototype._getBounding = function(obj, root) {
		var rect = obj.getBoundingClientRect();
		var p = {
			x: rect.left,
			y: rect.top,
			w: obj.offsetWidth,
			h: obj.offsetHeight
		};

		if (root !== undefined) {
			var r = root.getBoundingClientRect();
			p.x -= r.left;
			p.y -= r.top;
		}

		return p;
	};

	DockManager.prototype._isInside = function(bounding, x, y) {
		return (x >= bounding.x && x <= bounding.x + bounding.w && y >= bounding.y && y <= bounding.y + bounding.h);
	};

	DockManager.prototype._createDockIcon = function(id, x, y, hide) {
		var drt = document.createElement("div");
		drt.setAttribute("id", this._id + "_dockIcon_" + id);
		drt.style.position = "absolute";
		this._setRect(drt, x, y, 48, 48);
		drt.style.backgroundColor = "white";
		drt.style.border = "1px solid darkgrey";
		drt.style.opacity = 0.9;
		drt.style.cursor = "default";
		drt.style.zIndex = 100;
		drt.pointerEvents = "none";
		if (hide) {
			drt.style.display = "none";
		}
		this._dockIcons.push(drt);
		this._elem.appendChild(drt);
	};

	DockManager.prototype._showDockIconsAt = function(elem, cntr, hideTab, hideDock) {
		var p = this._getBounding(elem, this._elem);

		if (cntr) {
			var apex = { x: p.x + p.w / 2 - 24, y: p.y + p.h / 2 - 24 };

			if (apex.x < 110) {
				apex.x = 110;
			} else if (apex.x > this._elem.offsetWidth - 158) {
				apex.x = this._elem.offsetWidth - 158;
			}
			if (apex.y < 110) {
				apex.y = 110;
			} else if (apex.y > this._elem.offsetHeight - 158) {
				apex.y = this._elem.offsetHeight - 158;
			}

			this._createDockIcon("center", apex.x, apex.y, hideTab);
			this._createDockIcon("top", apex.x, apex.y - 49, hideDock);
			this._createDockIcon("right", apex.x + 49, apex.y, hideDock);
			this._createDockIcon("bottom", apex.x, apex.y + 49, hideDock);
			this._createDockIcon("left", apex.x - 49, apex.y, hideDock);
		} else {
			this._createDockIcon("root_top", p.x + p.w / 2 - 24, p.y + 8);
			this._createDockIcon("root_right", p.x + p.w - 48 - 8, p.y + p.h / 2 - 24);
			this._createDockIcon("root_bottom", p.x + p.w / 2 - 24, p.y + p.h - 48 - 8);
			this._createDockIcon("root_left", p.x + 8, p.y + p.h / 2 - 24);
		}
	};

	DockManager.prototype._showDockShadow = function(elem, dir) {
		var ds = this._dockShadow;
		if (ds == null) {
			ds = document.createElement("div");
			ds.setAttribute("id", this._id + "_dockShadow");
			ds.style.position = "absolute";
			ds.style.backgroundColor = "blue";
			ds.style.opacity = 0.3;
			ds.style.zIndex = 90;
			ds.style.cursor = "default";
			ds.pointerEvents = "none";
			this._elem.appendChild(ds);
			this._dockShadow = ds;
		}

		var p = elem ? this._getBounding(elem, this._elem) : {};
		var w = (p.w > 480) ? 240 : (p.w / 2);
		var h = (p.h > 320) ? 160 : (p.h / 2);

		switch (dir) {
		case 0: // paged
			this._setRect(ds, p.x, p.y, p.w, p.h);
			break;
		case 1:	// top
			this._setRect(ds, p.x, p.y, p.w, h);
			break;
		case 2:	// right
			this._setRect(ds, p.x + (p.w - w), p.y, w, p.h);
			break;
		case 3:	// bottom
			this._setRect(ds, p.x, p.y + p.h - h, p.w, h);
			break;
		case 4:	// left
			this._setRect(ds, p.x, p.y, w, p.h);
			break;
		default: // hide
			ds.style.visibility = "hidden";
			return;
		}

		ds.style.visibility = "visible";
	};

	DockManager.prototype._showDockIcons = function(show) {
		if (show) {
			if (this._dockIcons == null || this._dockParent != this._dockParentCurr) {
				this._showDockIcons(false);
				this._dockIcons = [];
				this._showDockIconsAt(this._elem);
				if (this._dockParent != null && this._containers.length > 1) {
					this._showDockIconsAt(this._dockParent._elem, true, !this._dockParent._movable, this._dockParent._parent == null);
				}
				this._dockParentCurr = this._dockParent;
			}
		} else if (!show && this._dockIcons != null) {
			for (var i in this._dockIcons) {
				this._elem.removeChild(this._dockIcons[i]);
			}
			this._dockIcons = null;
		}
	};

	DockManager.prototype.addDockPane = function(dp) {
		this._panes.push(dp);
		this._elem.appendChild(dp._elem);
		this._updateZIndex();
	};

	DockManager.prototype.removeDockPane = function(dp) {
		var index = this._panes.indexOf(dp);
		if (index > -1) {
			this._panes.splice(index, 1);
			this._elem.removeChild(dp._elem);
		} else {
			jQuery.sap.log.error("DockManager.removeDockPane failed, element does not exist - " + dp._id);
		}
		this._updateZIndex();
	};

	DockManager.prototype.addDockContainer = function(parent, dc, index) {
		this._containers.push(dc);

		if (parent) {
			if (parent._left != null) {
				var o;
				if (index == 0) {
					o = parent._left;
					dc._elem.style.width = o._elem.offsetWidth + "px";
					dc._elem.style.height = o._elem.offsetHeight + "px";
					parent._elem.removeChild(o._elem);
					if (parent._right) {
						parent._elem.insertBefore(dc._elem, parent._right._elem);
					} else {
						parent._elem.appendChild(dc._elem);
					}
					parent._left = dc;
					o._parent = dc;
					dc._left = o;
					dc._elem.appendChild(o._elem);
				} else if (index == 1) {
					o = parent._right;
					dc._elem.style.width = o._elem.offsetWidth + "px";
					dc._elem.style.height = o._elem.offsetHeight + "px";
					parent._elem.removeChild(o._elem);
					parent._elem.appendChild(dc._elem);
					parent._right = dc;
					o._parent = dc;
					dc._left = o;
					dc._elem.appendChild(o._elem);
				}
				parent.update();
			} else {
				parent.addChild(dc, 0);
			}
		} else {
			this._root = dc;
			this._elem.appendChild(dc._elem);
			dc.resize(this._elem.offsetWidth, this._elem.offsetHeight);
		}
	};

	DockManager.prototype.removeDockContainer = function(dc) {
		var index = this._containers.indexOf(dc);
		if (index > -1) {
			this._containers.splice(index, 1);
		} else {
			jQuery.sap.log.error("DockManager.removeDockContainer failed, element does not exist - " + dc._id);
		}
	};

	DockManager.prototype._dock = function(dp, dc, dir) {
		if (dp._parent != null) {
			this.undock(dp);
		}
		var index = 0;
		if (dir == 2 || dir == 3) {
			index = 1;
		}

		dp._parent = dc;
		if (dp._saveSize) {
			dp._saveSize();
		}
		dc.setOrientation((dir == 1 || dir == 3) ? 0 : 1);
		dc.addChild(dp, index);
	};

	DockManager.prototype.dock = function(dp, parent, dir) {
		if (dp._parent != null) {
			this.undock(dp);
		}

		if (parent == null) {
			var oldroot = this._root;
			this._elem.removeChild(oldroot._elem);
			parent = new DockContainer(this, null);
			this._dock(oldroot, parent, 1);
			this._dock(dp, parent, dir);
		} else if (dir == 0) {
			parent.addTab(dp);
		} else {
			var pp = parent._parent;
			var index = (pp._left == parent) ? 0 : 1;
			var pdc = new DockContainer(this, pp, index);

			this._dock(dp, pdc, dir);
		}
	};

	DockManager.prototype.undock = function(dp, isTab) {
		if (dp._tabParent != null) {
			dp._tabParent.removeTab(dp);
			return;
		} else if (isTab && dp._tabs.length > 0) {
			dp.removeTab(dp);
			return;
		}

		var parent = dp._parent;

		if (parent == null) {
			jQuery.sap.log.error("DockManager::undock: cannot undock a floating DockPane - " + dp._id);
			return;
		}

		if (parent._left && parent._right) {
			var orphan = null;

			if (parent._left == dp) {
				orphan = parent._right;
			} else if (parent._right == dp) {
				orphan = parent._left;
			} else {
				jQuery.sap.log.error("DockManager::undock: internal error, tree mis-match - " + this._id);
			}

			parent.removeChild(1);
			parent.removeChild(0);
			var pp = parent._parent;

			// Orphan DC/DP re-parenting
			if (pp) {
				if (pp._left == parent) {
					pp._elem.removeChild(parent._elem);
					if (pp._right) {
						pp._elem.insertBefore(orphan._elem, pp._right._elem);
					} else {
						pp._elem.appendChild(orphan._elem);
					}
					pp._left = orphan;
					orphan._parent = pp;
				} else if (pp._right == parent) {
					pp._elem.removeChild(parent._elem);
					pp._elem.appendChild(orphan._elem);
					pp._right = orphan;
					orphan._parent = pp;
				}
				pp.update();
			} else if (this._root == parent) {
				this._elem.removeChild(parent._elem);
				this._elem.appendChild(orphan._elem);
				this._root = orphan;
				orphan._parent = null;
				orphan._elem.style.left = 0;
				orphan._elem.style.top = 0;
				orphan.resize(this._elem.offsetWidth, this._elem.offsetHeight);
				orphan.update();
			}

			this.removeDockContainer(parent);

			dp._parent = null;
			this._elem.appendChild(dp._elem);
			dp._restoreSize();
			dp.update();
		}
	};

	DockManager.prototype.bringToFront = function(dp) {
		if (dp._parent == null) {
			var index = this._panes.indexOf(dp);
			if (index > -1) {
				this._panes.splice(index, 1);
				this._panes.push(dp);
				this._updateZIndex();
			}
		}
	};

	DockManager.prototype._updateZIndex = function() {
		var count = this._panes.length;
		for (var i = 0; i < count; i++) {
			this._panes[i]._elem.style.zIndex = 50 + i;
		}
	};

	DockManager.prototype._tabBoxGesture = function(dp, e) {
		// Tab box hit test for tab activation / drag unsnap
		if (dp._tabs.length > 0) {
			var tboxBounding = this._getBounding(dp._tabBox);
			if (this._isInside(tboxBounding, e.x, e.y)) {
				var count = dp._tabs.length + 1;
				var index = Math.floor((e.x - tboxBounding.x) / (dp._elem.offsetWidth - 2) * count);
				if (index > dp._tabs.length) {
					index = dp._tabs.length;
				}
				var tdp = (index == 0) ? dp : dp._tabs[index - 1];
				dp.bringTabToFront(tdp);

				this._oPane = tdp;
				this._snapX = this._ox;
				this._snapY = this._oy;
				this._snapRect = this._getBounding(dp._elem);
				return true;
			}
		}

		return false;
	};

	// --------------------- Gesture handling ---------------------------
	DockManager.prototype.beginGesture = function(event) {
		var e = event; // {n : event.button == 0 ? 1 : 0, x: event.clientX, y: event.clientY};
		if (e.n == 1 && !this._gesture) {
			this._ox = e.x;
			this._oy = e.y;
			this._oIsTab = false;

			if (this._isInside(this._getBounding(this._elem), e.x, e.y)) {
				this._dockParent = null;
				var i,
					dp;
				for (i = this._panes.length - 1; i >= 0; i--) {
					dp = this._panes[i];
					if (dp._parent != null && this._isInside(this._getBounding(dp._elem), e.x, e.y)) {
						this._dockParent = dp;
						break;
					}
				}

				var anyHit = false;

				for (i = this._panes.length - 1; i >= 0; i--) {
					dp = this._panes[i];
					if (dp._parent == null && dp._movable) {
						// Floating pane hit test for bring to front
						var bounding = this._getBounding(dp._elem);
						if (this._isInside(bounding, e.x, e.y)) {
							this.bringToFront(dp);
							// Border hit test for resize start
							var border = { x: bounding.x + 8, y: bounding.y + 8, w: bounding.w - 16, h: bounding.h - 16 };
							if (!this._isInside(border, e.x, e.y)) {
								this._oResize = dp;
								if (e.x <= border.x) {
									if (e.y <= border.y) {
										this._oResizeDir = 5;
									} else if (e.y >= border.y + border.h) {
										this._oResizeDir = 8;
									} else {
										this._oResizeDir = 4;
									}
								} else if (e.x >= border.x + border.w) {
									if (e.y <= border.y) {
										this._oResizeDir = 6;
									} else if (e.y >= border.y + border.h) {
										this._oResizeDir = 7;
									} else {
										this._oResizeDir = 2;
									}
								} else if (e.y <= border.y) {
									this._oResizeDir = 1;
								} else if (e.y >= border.y + border.h) {
									this._oResizeDir = 3;
								} else {
									this._oResizeDir = 0;
								}

								anyHit = true;
								break;
							}

							// Title hit test for drag start
							if (this._isInside(this._getBounding(dp._title), e.x, e.y)) {
								if (this._isInside(this._getBounding(dp._btnClose), e.x, e.y)) {
									anyHit = true;
									dp.close();
								} else {
									anyHit = true;
									this._oPane = dp;
									this._showDockIcons(true);
								}
								break;
							}

							this._oIsTab = this._tabBoxGesture(dp, e);
							if (this._oIsTab) {
								anyHit = true;
							}

							break;
						}
					}
				}

				if (!anyHit) {
					for (i = 0; i < this._containers.length; i++) {
						var dc = this._containers[i];
						// Splitter bar hit test for drag resize
						if (dc._right != null && this._isInside(this._getBounding(dc._splitter), e.x, e.y)) {
							this._oContainer = dc;
							this._oContainer._splitter.style.opacity = 0.3;
							this._snapX = this._ox;
							this._snapY = this._oy;
							anyHit = true;
							break;
						}
					}
				}

				if (!anyHit) {
					for (i = this._panes.length - 1; i >= 0; i--) {
						dp = this._panes[i];
						// Title hit test for drag unsnap
						if (dp._parent != null && dp._movable && this._isInside(this._getBounding(dp._title), e.x, e.y)) {
							if (this._isInside(this._getBounding(dp._btnClose), e.x, e.y)) {
								dp.close();
							} else {
								this._oPane = dp;
								this._snapX = this._ox;
								this._snapY = this._oy;
								this._snapRect = this._getBounding(dp._elem);
							}
							anyHit = true;
							break;
						}

						this._oIsTab = this._tabBoxGesture(dp, e);
						if (this._oIsTab) {
							anyHit = true;
							break;
						}
					}
				}

				event.handled = anyHit;
				this._gesture = anyHit;
			}
		}
	};

	DockManager.prototype.move = function(event) {
		var e = event; // {n : event.button == 0 ? 1 : 0, x: event.clientX, y: event.clientY};
		if (e.n == 1 && this._gesture) {
			var dx = e.x - this._ox;
			var dy = e.y - this._oy;
			this._ox = e.x;
			this._oy = e.y;

			var dp,
				x,
				y;
			// Resize border areas
			if (this._oResize) {
				dp = this._oResize;
				var od = this._oResizeDir;
				x = dp._elem.offsetLeft;
				y = dp._elem.offsetTop;
				var w = dp._elem.offsetWidth;
				var h = dp._elem.offsetHeight;
				var mw = dp.getMinimumWidth();
				var mh = dp.getMinimumHeight();

				switch (od) {
					case 1:
						if (h - dy >= mh) {
							dp._elem.style.top = (y + dy) + "px";
							dp.resize(w, h - dy);
						}
						break;
					case 2:
						if (w + dx >= mw) {
							dp.resize(w + dx, h);
						}
						break;
					case 3:
						if (h + dy >= mh) {
							dp.resize(w, h + dy);
						}
						break;
					case 4:
						if (w - dx >= mw) {
							dp._elem.style.left = (x + dx) + "px";
							dp.resize(w - dx, h);
						}
						break;
					case 5:
						if (w - dx >= mw && h - dy >= mh) {
							dp._elem.style.top = (y + dy) + "px";
							dp._elem.style.left = (x + dx) + "px";
							dp.resize(w - dx, h - dy);
						} else if (w - dx > mw) {
							dp._elem.style.left = (x + dx) + "px";
							dp.resize(w - dx, h);
						} else if (h - dy > mh) {
							dp._elem.style.top = (y + dy) + "px";
							dp.resize(w, h - dy);
						}
						break;
					case 6:
						if (w + dx >= mw && h - dy >= mh) {
							dp._elem.style.top = (y + dy) + "px";
							dp.resize(w + dx, h - dy);
						} else if (w + dx >= mw) {
							dp.resize(w + dx, h);
						} else if (h - dy >= mh) {
							dp._elem.style.top = (y + dy) + "px";
							dp.resize(w, h - dy);
						}
						break;
					case 7:
						if (w + dx >= mw && h + dy >= mh) {
							dp.resize(w + dx, h + dy);
						} else if (w + dx >= mw) {
							dp.resize(w + dx, h);
						} else if (h + dy >= mh) {
							dp.resize(w, h + dy);
						}
						break;
					case 8:
						if (w - dx >= mw && h + dy >= mh) {
							dp._elem.style.left = (x + dx) + "px";
							dp.resize(w - dx, h + dy);
						} else if (w - dx >= mw) {
							dp._elem.style.left = (x + dx) + "px";
							dp.resize(w - dx, h);
						} else if (h + dy >= mh) {
							dp.resize(w, h + dy);
						}
						break;
					default:
						break;
				}
				return;
			}

			// Dock icon parent determination
			this._dockParent = null;

			var i;
			for (i = this._panes.length - 1; i >= 0; i--) {
				dp = this._panes[i];
				if (dp._parent != null && dp != this._oPane && this._isInside(this._getBounding(dp._elem), e.x, e.y)) {
					this._dockParent = dp;
					break;
				}
			}
			if (this._dockIcons != null) {
				this._showDockIcons(true);
			}

			dp = this._oPane;
			if (dp) {
				if (dp._parent == null && dp._tabParent == null && !(this._oIsTab && dp._tabs.length > 0)) {
					// Floating pane move
					x = dp._elem.offsetLeft + dx;
					y = dp._elem.offsetTop + dy;
					dp._elem.style.left = x + "px";
					dp._elem.style.top = y + "px";
				} else if (Math.abs(this._snapX - e.x) > 16 || Math.abs(this._snapY - e.y) > 16) {
					// Undock from container / tab
					var snapBottom = (dp._tabParent != null || this._oIsTab);
					this.undock(dp, this._oIsTab);
					var pmBounding = this._getBounding(this._elem);
					var nx = this._snapRect.x - (this._snapX - e.x) - 16 - pmBounding.x;
					var ny = this._snapRect.y - (this._snapY - e.y) - 16 - pmBounding.y;
					var offx = this._snapRect.x + this._snapRect.w / 2 - e.x;
					dp._elem.style.left = (nx + (this._snapRect.w - dp._elem.offsetWidth) / 2 - offx) + "px";
					if (snapBottom) {
						dp._elem.style.top = (ny + this._snapRect.h - 24) + "px";
					} else {
						dp._elem.style.top = ny + "px";
					}
					this.bringToFront(dp);
					this._showDockIcons(true);
				}
			}

			// Container resize
			var dc = this._oContainer;
			if (dc) {
				x = dc.getSplitterPosition();
				if (dc.getOrientation() == 0) {
					x += dy;
				} else {
					x += dx;
				}
				dc.setSplitterPosition(x);
			}

			// Dock shadow display
			this._oParent = null;
			this._oDir = -1;
			if (this._dockIcons != null) {
				var bselem = null;
				var bsdir = -1;

				for (i = 0; i < this._dockIcons.length; i++) {
					var di = this._dockIcons[i];
					var bound = this._getBounding(di);

					if (this._isInside(bound, e.x, e.y)) {
						if (i < 4) {
							bselem = this._elem;
							bsdir = i + 1;
							this._oParent = null;
							this._oDir = bsdir;
						} else if (i >= 4 && this._dockParent != null) {
							bselem = this._dockParent._elem;
							bsdir = i - 4;
							this._oParent = this._dockParent;
							this._oDir = bsdir;
						}
						break;
					}
				}

				this._showDockShadow(bselem, bsdir);
			} else {
				this._showDockShadow(null, -1);
			}

			event.handled = true;
		}
	};

	DockManager.prototype.endGesture = function(event) {
		// Dock gesture end
		if (this._dockIcons != null && this._oPane != null && this._oDir > -1) {
			this.dock(this._oPane, this._oParent, this._oDir);
			event.handled = true;
		}

		// Container resize end
		if (this._oContainer != null) {
			this._oContainer._splitter.style.opacity = 0;
			event.handled = true;
		}

		var target = this._oResize ? this._oResize : this._oPane;
		if (target) {
			var elem = target._elem;
			if (elem.offsetTop < -8) {
				elem.style.top = "-8px";
			} else if (elem.offsetTop > this._elem.offsetHeight - 8) {
				elem.style.top = (this._elem.offsetHeight - 8) + "px";
			}
			if (elem.offsetLeft + elem.offsetWidth < 32) {
				elem.style.left = (-elem.offsetWidth + 32) + "px";
			} else if (elem.offsetLeft > this._elem.offsetWidth - 32) {
				elem.style.left = (this._elem.offsetWidth - 32) + "px";
			}
			event.handled = true;
		}

		this._oContainer = null;
		this._oPane = null;
		this._oParent = null;
		this._oDir = -1;
		this._showDockIcons(false);
		this._showDockShadow(this._elem, -1);
		this._gesture = false;
		this._oResize = null;
	};

	DockManager.prototype.click = function(event) {

	};

	DockManager.prototype.doubleClick = function(event) {

	};

	DockManager.prototype.contextMenu = function(event) {

	};

	DockManager.prototype.getViewport = function() {
		return this;
	};

	DockManager.prototype.getId = function() {
		return this._id;
	};

	DockManager.prototype.resize = function(w, h) {
		if (this._root) {
			this._root.resize(w, h);
		}
	};

	return DockManager;
}, true);

}; // end of sap/ui/vk/DockManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.RedlineDesign') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
// Provides control sap.ui.vk.RedlineDesign.
jQuery.sap.declare('sap.ui.vk.RedlineDesign'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/RedlineDesign",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./RedlineSurface", "./RedlineElement", "./RedlineGesturesHandler", "./RedlineDesignHandler", "./Loco"
], function(jQuery, library, Control, RedlineSurface, RedlineElement, RedlineGesturesHandler, RedlineDesignHandler, Loco) {
		"use strict";

		/**
		 *  Constructor for a new RedlineDesign.
		 *
		 * @class Provides a control for designing redlining shapes.
		 *
		 * @public
		 * @author SAP SE
		 * @version 1.50.7
		 * @extends sap.ui.vk.RedlineSurface
		 * @alias sap.ui.vk.RedlineDesign
		 * @experimental Since 1.40.0 This class is experimental and might be modified or removed in future versions.
		 */
		var RedlineDesign = RedlineSurface.extend("sap.ui.vk.RedlineDesign", /** @lends sap.ui.vk.RedlineDesign.prototype */ {
			metadata: {
				library: "sap.ui.vk",
				events: {
					elementCreated: {
						parameters: {
							element: "object"
						}
					}
				},
				aggregations: {
					/**
					 * activeElementInstance is the element being currently drawn.
					 */
					activeElementInstance: {
						type: "sap.ui.vk.RedlineElement",
						multiple: false,
						visibility: "hidden"
					}
				}
			}
		});

		RedlineDesign.prototype.init = function() {
			this._isAddingModeActive = false;
			this._isDrawingOn = false;
			this._activeElementInstance = null;
			this.addStyleClass("sapUiVizkitRedlineInteractionMode");

			// Instantiating the interaction and design handlers
			this._gestureHandler = new RedlineGesturesHandler(this);
			this._designHandler = new RedlineDesignHandler(this);
		};

		RedlineDesign.prototype.onBeforeRendering = function() {
			// If there is a Loco already registered, we remove it.
			if (this._loco) {
				this._loco.removeHandler(this._gestureHandler);
				this._loco.removeHandler(this._designHandler);
			}
		};

		RedlineDesign.prototype.onAfterRendering = function() {
			var domRef = this.getDomRef();
			// We make the RedlineDesign control take the full width and size of the parent container.
			domRef.style.width = "100%";
			domRef.style.height = "100%";

			// Registering a Loco handler for gestures.
			this._loco = new Loco();
			if (this._isAddingModeActive) {
				this._loco.addHandler(this._designHandler);
			} else {
				this._loco.addHandler(this._gestureHandler);
			}
			this.updatePanningRatio();
		};

		/**
		 * Wrapper method that calls the <code>edit</code> method from {sap.ui.vk.RedlineElement}.
		 * @param {sap.ui.vk.RedlineElement} element The redlining element which needs to be edited.
		 * @param {number} offsetX The number of pixels representing the horizontal offset of the event.
		 * @param {number} offsetY The number of pixels representing the vertical offset of the event.
		 * @returns {sap.ui.vk.RedlineDesign} <code>this</code> to allow method chaining.
		 * @private
		 */
		RedlineDesign.prototype._editElement = function(element, offsetX, offsetY) {
			element.edit(offsetX, offsetY);
			return this;
		};

		/**
		 * Determines whether you are currently in drawing mode or not.
		 * @returns {boolean} Returns <code>true</code> if drawing mode is ON.
		 * @private
		 */
		RedlineDesign.prototype._getIsDrawingOn = function() {
			return this._isDrawingOn;
		};

		/**
		 * Sets the drawing mode to either ON or OFF.
		 * @param {boolean} isDrawingOn <code>true</code> or <code>false</code> depending on whether you want to set the drawing mode to ON or OFF.
		 * @returns {sap.ui.vk.RedlineDesign} <code>this</code> to allow method chaining.
		 * @private
		 */
		RedlineDesign.prototype._setIsDrawingOn = function(isDrawingOn) {
			this._isDrawingOn = isDrawingOn;
			return this;
		};

		/**
		 * Prepares the RedlineDesign control for adding a new instance of {sap.ui.vk.RedlineElement}.
		 * @param {sap.ui.vk.RedlineElement} elementInstance The redlining element which needs to be added.
		 * @returns {sap.ui.vk.RedlineDesign} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineDesign.prototype.startAdding = function(elementInstance) {
			this._isAddingModeActive = true;
			// save a reference to the current element instance
			this._activeElementInstance = elementInstance;
			this.setAggregation("activeElementInstance", this._activeElementInstance);

			// set the correct style class for this mode
			this.addStyleClass("sapUiVizkitRedlineDesignMode");
			this.removeStyleClass("sapUiVizkitRedlineInteractionMode");
			return this;
		};

		/**
		 * Stops the mode for adding redlining, which begins when the {@link sap.ui.vk.RedlineDesign#startAdding startAdding} method is called.
		 * @returns {sap.ui.vk.RedlineDesign} <code>this</code> to allow method chaining.
		 * @public
		 */
		RedlineDesign.prototype.stopAdding = function() {
			this._isAddingModeActive = false;
			this._setIsDrawingOn(false);
			this.setAggregation("activeElementInstance", null);
			this._activeElementInstance = null;

			this.addStyleClass("sapUiVizkitRedlineInteractionMode");
			this.removeStyleClass("sapUiVizkitRedlineDesignMode");
			return this;
		};

		RedlineDesign.prototype._getOffset = function(obj) {
			var rectangle = obj.getBoundingClientRect();
			return {
				x: rectangle.left + window.pageXOffset,
				y: rectangle.top + window.pageYOffset
			};
		};

		return RedlineDesign;
	});

}; // end of sap/ui/vk/RedlineDesign.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewStateManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the ViewStateManager class.
jQuery.sap.declare('sap.ui.vk.ViewStateManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewStateManager",[
	"jquery.sap.global", "sap/ui/core/Element", "./ContentConnector", "./Scene", "./ViewStateManagerBase", "./Core"
], function(jQuery, Element, ContentConnector, Scene, ViewStateManagerBase, VkCore) {
	"use strict";

	/**
	 * Constructor for a new ViewStateManager.
	 *
	 * @class
	 * Manages the visibility and selection states of nodes in the scene.
	 *
	 * @param {string} [sId] ID for the new ViewStateManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ViewStateManager object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ViewStateManagerBase
	 * @alias sap.ui.vk.ViewStateManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewStateManager = ViewStateManagerBase.extend("sap.ui.vk.ViewStateManager", /** @lends sap.ui.vk.ViewStateManager.prototype */ {
		metadata: {
			publicMethods: [
				"enumerateSelection",
				"getNodeHierarchy",
				"getOpacity",
				"getSelectionState",
				"getTintColor",
				"getVisibilityChanges",
				"getVisibilityState",
				"setOpacity",
				"setSelectionState",
				"setTintColor",
				"setVisibilityState"
			]
		}
	});

	var basePrototype = ViewStateManager.getMetadata().getParent().getClass().prototype;

	ViewStateManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._implementation = null;
	};

	ViewStateManager.prototype.exit = function() {
		this._destroyImplementation();

		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	ViewStateManager.prototype._destroyImplementation = function() {
		if (this._implementation) {
			this._implementation.destroy();
			this._implementation = null;
		}
		return this;
	};

	ViewStateManager.prototype.getImplementation = function() {
		return this._implementation;
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	ViewStateManager.prototype._onAfterUpdateContentConnector = function() {
		this._setScene(this._contentConnector.getContent());
	};

	ViewStateManager.prototype._onBeforeClearContentConnector = function() {
		this._setScene(null);
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Node hierarchy handling begins.

	ViewStateManager.prototype._handleContentReplaced = function(event) {
		this._setScene(event.getParameter("newContent"));
	};

	ViewStateManager.prototype._setScene = function(scene) {
		if (scene && scene instanceof Scene) {
			var sceneType = scene.getMetadata().getName(),
				implementationType = this._implementation && this._implementation.getMetadata().getName(),
				reuseImplemenation = sceneType === "sap.ui.vk.dvl.Scene" && implementationType === "sap.ui.vk.dvl.ViewStateManager" ||
					sceneType === "sap.ui.vk.threejs.Scene" && implementationType === "sap.ui.vk.threejs.ViewStateManager";

			if (!reuseImplemenation) {
				this._destroyImplementation();
				var newImplementationType;
				if (sceneType === "sap.ui.vk.dvl.Scene") {
					newImplementationType = "sap.ui.vk.dvl.ViewStateManager";
				} else if (sceneType === "sap.ui.vk.threejs.Scene") {
					newImplementationType = "sap.ui.vk.threejs.ViewStateManager";
				}

				if (newImplementationType) {
					var that = this;
					jQuery.sap.require(newImplementationType);
					this._implementation = new (jQuery.sap.getObject(newImplementationType))({
						shouldTrackVisibilityChanges: this.getShouldTrackVisibilityChanges(),
						contentConnector: this.getContentConnector(),
						visibilityChanged: function(event) {
							that.fireVisibilityChanged({
								visible: event.getParameter("visible"),
								hidden: event.getParameter("hidden")
							});
						},
						selectionChanged: function(event) {
							that.fireSelectionChanged({
								selected: event.getParameter("selected"),
								unselected: event.getParameter("unselected")
							});
						},
						opacityChanged: function(event) {
							that.fireOpacityChanged({
								changed: event.getParameter("changed"),
								opacity: event.getParameter("opacity")
							});
						},
						tintColorChanged: function(event) {
							that.fireTintColorChanged({
								changed: event.getParameter("changed"),
								tintColor: event.getParameter("tintColor"),
								tintColorABGR: event.getParameter("tintColorABGR")
							});
						},
						nodeHierarchyReplaced: function(event) {
							that.fireNodeHierarchyReplaced({
								oldNodeHierarchy: event.getParameter("oldNodeHierarchy"),
								newNodeHierarchy: event.getParameter("newNodeHierarchy")
							});
						}
					});
				}
			}
		} else {
			this._destroyImplementation();
		}

		return this;
	};

	// Node hierarchy handling ends.
	////////////////////////////////////////////////////////////////////////

	/**
	 * Gets the NodeHierarchy object associated with this ViewStateManager object.
	 * @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManager object.
	 * @public
	 */
	ViewStateManager.prototype.getNodeHierarchy = function() {
		return this._implementation && this._implementation.getNodeHierarchy();
	};

	/**
	 * Gets the visibility changes in the current ViewStateManager object.
	 * @returns {string[]} The visibility changes are in the form of an array. The array is a list of node VE ids which suffered a visibility changed relative to the default state.
	 * @public
	 */
	ViewStateManager.prototype.getVisibilityChanges = function() {
		return this._implementation && this._implementation.getVisibilityChanges();
	};

	/**
	 * Gets the visibility state of all nodes.
	 * @function
	 * @name sap.ui.vk.ViewStateManager#getVisibilityComplete
	 * @returns {object} An object with following structure.
	 * <pre>
	 * {
	 *     visible: [string, ...] - an array of VE IDs of visible nodes
	 *     hidden:  [string, ...] - an array of VE IDs of hidden nodes
	 * }
	 * </pre>
	 */
	ViewStateManager.prototype.getVisibilityComplete = function() {
		return this._implementation && this._implementation.getVisibilityComplete();
	};

	/**
	 * Gets the visibility state of nodes.
	 *
	 * If a single node reference is passed to the method then a single visibility state is returned.<br/>
	 * If an array of node references is passed to the method then an array of visibility states is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getVisibilityState = function(nodeRefs) {
		return this._implementation && this._implementation.getVisibilityState(nodeRefs);
	};

	/**
	 * Sets the visibility state of the nodes.
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} visible The new visibility state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setVisibilityState = function(nodeRefs, visible, recursive) {
		if (this._implementation) {
			this._implementation.setVisibilityState(nodeRefs, visible, recursive);
		}
		return this;
	};

	/**
	 * Enumerates IDs of the selected nodes.
	 *
	 * @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.enumerateSelection = function(callback) {
		if (this._implementation) {
			this._implementation.enumerateSelection(callback);
		}
		return this;
	};

	/**
	 * Gets the selection state of the node.
	 *
	 * If a single node reference is passed to the method then a single selection state is returned.<br/>
	 * If an array of node references is passed to the method then an array of selection states is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
	 * @public
	 */
	ViewStateManager.prototype.getSelectionState = function(nodeRefs) {
		return this._implementation && this._implementation.getSelectionState(nodeRefs);
	};

	/**
	 * Sets the selection state of the nodes.
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @param {boolean} selected The new selection state of the nodes.
	 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setSelectionState = function(nodeRefs, selected, recursive) {
		if (this._implementation) {
			this._implementation.setSelectionState(nodeRefs, selected, recursive);
		}
		return this;
	};

	/**
	 * Gets the opacity of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @param {any|any[]} nodeRefs The node reference or the array of node references.
	 * @returns {float|float[]} A single value or an array of values. Value <code>null</code> means that the node's own opacity should be used.
	 * @public
	 */
	ViewStateManager.prototype.getOpacity = function(nodeRefs) {
		return this._implementation && this._implementation.getOpacity(nodeRefs);
	};

	/**
	 * Sets the opacity of the nodes.
	 *
	 * @param {any|any[]}       nodeRefs          The node reference or the array of node references.
	 * @param {float|null}      opacity           The new opacity of the nodes. If <code>null</code> is passed then the opacity is reset
	 *                                            and the node's own opacity should be used.
	 * @param {boolean}         [recursive=false] The flags indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setOpacity = function(nodeRefs, opacity, recursive) {
		if (this._implementation) {
			this._implementation.setOpacity(nodeRefs, opacity, recursive);
		}
		return this;
	};

	/**
	 * Gets the tint color of the node.
	 *
	 * If a single node reference is passed to the method then a single value is returned.<br/>
	 * If an array of node references is passed to the method then an array of values is returned.
	 *
	 * @param {any|any[]}       nodeRefs             The node reference or the array of node references.
	 * @param {boolean}         [inABGRFormat=false] This flag indicates to return the tint color in the ABGR format,
	 *                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	 * @returns {sap.ui.core.CSSColor|sap.ui.core.CSSColor[]|int|int[]}
	 *                                               A single value or an array of values. Value <code>null</code> means that
	 *                                               the node's own tint color should be used.
	 * @public
	 */
	ViewStateManager.prototype.getTintColor = function(nodeRefs, inABGRFormat) {
		return this._implementation && this._implementation.getTintColor(nodeRefs, inABGRFormat);
	};

	/**
	 * Sets the tint color of the nodes.
	 * @param {any|any[]}                   nodeRefs          The node reference or the array of node references.
	 * @param {sap.ui.vk.CSSColor|int|null} tintColor         The new tint color of the nodes. The value can be defined as a string
	 *                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	 *                                                        is passed then the tint color is reset and the node's own tint color should be used.
	 * @param {boolean}                     [recursive=false] This flag indicates if the change needs to propagate recursively to child nodes.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setTintColor = function(nodeRefs, tintColor, recursive) {
		if (this._implementation) {
			this._implementation.setTintColor(nodeRefs, tintColor, recursive);
		}
		return this;
	};

	/**
	 * Sets the default highlighting color
	 * @param {sap.ui.vk.CSSColor|string|int} color           The new default highlighting color. The value can be defined as a string
	 *                                                        in the CSS color format or as an integer in the ABGR format. If <code>null</code>
	 *                                                        is passed then the tint color is reset and the node's own tint color should be used.
	 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
	 * @public
	 */
	ViewStateManager.prototype.setHighlightColor = function(color) {
		if (this._implementation && this._implementation.setHighlightColor) {
			this._implementation.setHighlightColor(color);
		}
		return this;
	};


	/**
	 * Gets the default highlighting color
	 *
	 * @param {boolean}         [inABGRFormat=false] This flag indicates to return the default highlighting color in the ABGR format,
	 *                                               if it equals <code>false</code> then the color is returned in the CSS color format.
	 * @returns {sap.ui.core.CSSColor|string|int}
	 *                                               A single value or an array of values. Value <code>null</code> means that
	 *                                               the node's own tint color should be used.
	 * @public
	 */
	ViewStateManager.prototype.getHighlightColor = function(inABGRFormat) {
		if (this._implementation && this._implementation.getHighlightColor) {
			return this._implementation.getHighlightColor(inABGRFormat);
		}
	};


	var fullClassName = ViewStateManager.getMetadata().getName();

	var mixin = {
		init: function() {
			this._viewStateManager = null;
			sap.ui.vk.getCore()
				.attachEvent(fullClassName + "-created", this._handleViewStateManagerCreated, this)
				.attachEvent(fullClassName + "-destroying", this._handleViewStateManagerDestroying, this);
		},

		exit: function() {
			this.setViewStateManager(null);
			sap.ui.vk.getCore()
				.detachEvent(fullClassName + "-destroying", this._handleViewStateManagerDestroying, this)
				.detachEvent(fullClassName + "-created", this._handleViewStateManagerCreated, this);
		},

		setViewStateManager: function(viewStateManager) {
			this.setAssociation("viewStateManager", viewStateManager, true);
			this._updateViewStateManager();
			return this;
		},

		_updateViewStateManager: function() {
			var newViewStateManagerId = this.getViewStateManager(),
				// sap.ui.getCore() returns 'undefined' if cannot find an element,
				// getViewStateManager() returns 'null' if there is no connector.
				newViewStateManager = newViewStateManagerId && sap.ui.getCore().byId(newViewStateManagerId) || null;

			if (this._viewStateManager !== newViewStateManager) {
				this._clearViewStateManager();
				if (newViewStateManager) {
					if (this._handleNodeHierarchyReplaced) {
						newViewStateManager.attachNodeHierarchyReplaced(this._handleNodeHierarchyReplaced, this);
					}
					if (this._handleVisibilityChanged) {
						newViewStateManager.attachVisibilityChanged(this._handleVisibilityChanged, this);
					}
					if (this._handleSelectionChanged) {
						newViewStateManager.attachSelectionChanged(this._handleSelectionChanged, this);
					}
					if (this._handleOpacityChanged) {
						newViewStateManager.attachOpacityChanged(this._handleOpacityChanged, this);
					}
					if (this._handleTintColorChanged) {
						newViewStateManager.attachTintColorChanged(this._handleTintColorChanged, this);
					}
					this._viewStateManager = newViewStateManager;
					if (this._onAfterUpdateViewStateManager) {
						this._onAfterUpdateViewStateManager();
					}
				}
			}
			return this;
		},

		_clearViewStateManager: function() {
			if (this._viewStateManager) {
				if (this._onBeforeClearViewStateManager) {
					this._onBeforeClearViewStateManager();
				}
				if (this._handleTintColorChanged) {
					this._viewStateManager.detachTintColorChanged(this._handleTintColorChanged, this);
				}
				if (this._handleOpacityChanged) {
					this._viewStateManager.detachOpacityChanged(this._handleOpacityChanged, this);
				}
				if (this._handleSelectionChanged) {
					this._viewStateManager.detachSelectionChanged(this._handleSelectionChanged, this);
				}
				if (this._handleVisibilityChanged) {
					this._viewStateManager.detachVisibilityChanged(this._handleVisibilityChanged, this);
				}
				if (this._handleNodeHierarchyReplaced) {
					this._viewStateManager.detachNodeHierarchyReplaced(this._handleNodeHierarchyReplaced, this);
				}
				this._viewStateManager = null;
			}
			return this;
		},

		_handleViewStateManagerCreated: function(event) {
			if (this.getViewStateManager() === event.getParameter("object").getId()) {
				this._updateViewStateManager();
			}
		},

		_handleViewStateManagerDestroying: function(event) {
			if (this.getViewStateManager() === event.getParameter("object").getId()) {
				this._clearViewStateManager();
			}
		}
	};

	ViewStateManager.injectMethodsIntoClass = function(classObject) {
		var prototype = classObject.prototype,
			init = prototype.init,
			exit = prototype.exit;

		prototype.init = function() {
			if (init) {
				init.call(this);
			}
			mixin.init.call(this);
		};

		prototype.exit = function() {
			mixin.exit.call(this);
			if (exit) {
				exit.call(this);
			}
		};

		prototype.setViewStateManager = mixin.setViewStateManager;
		prototype._updateViewStateManager = mixin._updateViewStateManager;
		prototype._clearViewStateManager = mixin._clearViewStateManager;
		prototype._handleViewStateManagerCreated = mixin._handleViewStateManagerCreated;
		prototype._handleViewStateManagerDestroying = mixin._handleViewStateManagerDestroying;
	};

	sap.ui.vk.getCore().registerClass(ViewStateManager);
	ContentConnector.injectMethodsIntoClass(ViewStateManager);

	return ViewStateManager;
});

}; // end of sap/ui/vk/ViewStateManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
// Provides control sap.ui.vk.Viewer.
jQuery.sap.declare('sap.ui.vk.Viewer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewer",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./Scene", "./ContentResource",
	"./FlexibleControl", "sap/ui/layout/VerticalLayout", "sap/ui/core/ResizeHandler", "./DvlException", "./Messages", "./ProgressIndicator", "./Notifications",
	"./ContentConnector", "./ViewStateManager", "./dvl/ContentManager"
], function(
	jQuery, library, Control, Scene, ContentResource,
	FlexibleControl, VerticalLayout, ResizeHandler, DvlException, Messages, ProgressIndicator, Notifications,
	ContentConnector, ViewStateManager, DvlContentManager
) {
	"use strict";

	var log = jQuery.sap.log;

	sap.ui.lazyRequire("sap.ui.vk.NativeViewport");
	sap.ui.lazyRequire("sap.ui.vk.Overlay");
	sap.ui.lazyRequire("sap.ui.vk.SceneTree");
	sap.ui.lazyRequire("sap.ui.vk.StepNavigation");
	sap.ui.lazyRequire("sap.ui.vk.Toolbar");
	sap.ui.lazyRequire("sap.ui.vk.Viewport");

	/**
	 * Constructor for a new Viewer.
	 *
	 * @class Provides simple 3D visualization capability by connecting, configuring and presenting the essential Visualization Toolkit controls a single composite control.
	 * @param {string} [sId] ID for the new Viewer control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new Viewer control
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Viewer
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewer = Control.extend("sap.ui.vk.Viewer", /** @lends sap.ui.vk.Viewer.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			properties: {
				/**
				 * Enables or disables the Overlay control
				 */
				enableOverlay: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Disables the scene tree control Button on the menu
				 */
				enableSceneTree: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides the scene tree control
				 */
				showSceneTree: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Disables the Step Navigation Control Button on the menu
				 */
				enableStepNavigation: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Disables the Message Popover Control
				 */
				enableNotifications: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides the Step Navigation Control
				 */
				showStepNavigation: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides the Step Navigation thumbnails
				 */
				showStepNavigationThumbnails: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Shows or hides Toolbar control
				 */
				enableToolbar: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Enable / disable progress indicator for downloading and rendering VDS files
				 */
				enableProgressIndicator: {
					type: "boolean",
					defaultValue: true
				},
				/**
				 * Width of the Viewer control
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Height of the Viewer control
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * The toolbar title
				 */
				toolbarTitle: {
					type: "string",
					defaultValue: ""
				},
				/**
				 * Whether or not we want ViewStateManager to keep track of visibility changes.
				 */
				shouldTrackVisibilityChanges: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Optional Emscripten runtime module settings. A JSON object with the following properties:
				 * <ul>
				 * <li>totalMemory {int} size of Emscripten module memory in bytes, default value: 128 MB.</li>
				 * <li>logElementId {string} ID of a textarea DOM element to write the log to.</li>
				 * <li>statusElementId {string} ID of a DOM element to write the status messages to.</li>
				 * </ul>
				 * Emscripten runtime module settings cannot be changed after the control is fully initialized.
				 */
				runtimeSettings: {
					type: "object",
					defaultValue: {}
				},
				/**
				 * Optional WebGL context attributes. A JSON object with the following boolean properties:
				 * <ul>
				 * <li>antialias {boolean} default value <code>true</code>. If set to <code>true</code>, the context will attempt to perform
				 * antialiased rendering if possible.</li>
				 * <li>alpha {boolean} default value <code>true</code>. If set to <code>true</code>, the context will have an alpha
				 * (transparency) channel.</li>
				 * <li>premultipliedAlpha {boolean} default value <code>false</code>. If set to <code>true</code>, the color channels in the
				 * framebuffer will be stored premultiplied by the alpha channel to improve performance.</li>
				 * </ul>
				 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported. WebGL
				 * context attributes cannot be changed after the control is fully initialized.
				 */
				webGLContextAttributes: {
					type: "object",
					defaultValue: {
						antialias: true,
						alpha: true,
						premultipliedAlpha: false
					}
				},
				/**
				 * Enables or disables showing of all hotspots
				 */
				showAllHotspots: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Color used for highlighting Smart2D hotspots in the ABGR format.
				 */
				hotspotColorABGR: {
					type: "int",
					defaultValue: 0xc00000ff
				},
				/**
				 * Color used for highlighting Smart2D hotspots in the CSS Color format.
				 */
				hotspotColor: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(255, 0, 0, 0.7529411764705882)"
				}
			},

			publicMethods: [
				"activateFullScreenMode",
				"activateRedlineDesign",
				"destroyRedlineDesign",
				"getDecryptionHandler",
				"getGraphicsCore",
				"getNativeViewport",
				"getRedlineDesign",
				"getScene",
				"getViewport",
				"getViewStateManager",
				"setDecryptionHandler"
			],

			aggregations: {
				/**
				 * Content resources to load and display in the Viewer control.
				 */
				contentResources: {
					type: "sap.ui.vk.ContentResource"
				},

				overlay: {
					type: "sap.ui.vk.Overlay",
					multiple: false
				},

				toolbar: {
					type: "sap.ui.vk.Toolbar",
					multiple: false,
					visibility: "hidden"
				},

				progressIndicator: {
					type: "sap.ui.vk.ProgressIndicator",
					multiple: false,
					visibility: "hidden"
				},

				viewport: {
					type: "sap.ui.vk.ViewportBase",
					multiple: false,
					visibility: "hidden"
				},

				nativeViewport: {
					type: "sap.ui.vk.NativeViewport",
					multiple: false,
					visibility: "hidden"
				},

				stepNavigation: {
					type: "sap.ui.vk.StepNavigation",
					multiple: false,
					visibility: "hidden"
				},

				sceneTree: {
					type: "sap.ui.vk.SceneTree",
					multiple: false,
					visibility: "hidden"
				},

				layout: {
					type: "sap.ui.layout.VerticalLayout",
					multiple: false,
					visibility: "hidden"
				},

				contentConnector: {
					type: "sap.ui.vk.ContentConnector",
					multiple: false,
					visibility: "hidden"
				},

				viewStateManager: {
					type: "sap.ui.vk.ViewStateManager",
					multiple: false,
					visibility: "hidden"
				},

				messagePopover: {
					type: "sap.ui.vk.Notifications",
					multiple: false,
					visibility: "hidden"
				}
			},

			defaultAggregation: "contentResources",

			events: {
				/**
				 * This event will be fired when any content resource or the contentResources aggregation has been changed and processed.
				 */
				contentResourceChangesProcessed: {},

				/**
				 * This event will be fired when a scene / image has been loaded into the Viewer.
				 */
				sceneLoadingSucceeded: {
					parameters: {
						/**
						 * Returns a reference to the loaded Scene.
						 */
						scene: {
							type: "sap.ui.vk.Scene"
						}
					}
				},

				/**
				 * This event will be fired when a critical error occurs during scene / image loading.
				 */
				sceneLoadingFailed: {
					parameters: {
						/**
						 * Returns an optional object describing the reason of the failure.
						 */
						reason: {
							type: "object"
						}
					}
				},

				/**
				 * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
				 */
				sceneDestroying: {
					parameters: {
						/**
						 * Returns a reference to the scene to be destroyed.
						 */
						scene: {
							type: "sap.ui.vk.Scene"
						},

						/**
						 * Returns a <code>function(prevent: boolean)</code> with one boolean parameter.
						 * To prevent garbage collection after the scene is destroyed call this function
						 * passing <code>true</code> as a parameter.
						 */
						preventGarbageCollection: {
							type: "function"
						}
					}
				},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * Node references to the newly selected nodes.
						 */
						selected: {
							type: "any[]"
						},
						/**
						 * Node references to the newly unselected nodes.
						 */
						unselected: {
							type: "any[]"
						}
					}
				},

				/**
				 * This event is fired when viewer enters/exits full screen mode.
				 */
				fullScreen: {
					parameters: {
						/**
						 * true: entered full screen; false: exited full screen.
						 */
						isFullScreen: {
							type: "boolean"
						}
					}
				},

				/**
				 * This event will be fired when a URL in a note is clicked.
				 */
				urlClicked: {
					parameters: {
						/**
						 * Returns a node reference of the note that contains the URL.
						 */
						nodeRef: "any",
						/**
						 * Returns a URL that was clicked.
						 */
						url: "string"
					}
				},

				/**
				 * This event will be fired when a node is clicked.
				 */
				nodeClicked: {
					parameters: {
						/**
						 * Returns a node reference.
						 */
						nodeRef: "any",
						x: "int",
						y: "int"
					}
				}
			}
		}
	});

	Viewer.prototype.applySettings = function(settings) {
		this._inApplySettings = true;
		Control.prototype.applySettings.apply(this, arguments);
		delete this._inApplySettings;

		if (this._viewStateManager) {
			this._viewStateManager.setShouldTrackVisibilityChanges(this.getShouldTrackVisibilityChanges());
		}

		// _componentsState stores the default state of the scene tree and step navigation.
		// It also stores the last user interaction such as show/hide.
		// These settings are used to restore states after switching between 2D and 3D.
		this._componentsState = {
			sceneTree: {
				defaultEnable: this.getEnableSceneTree(),
				// shouldBeEnabled refers to certain scenarios when the scene tree should not be dsiplayed (for example Smart2D files)
				shouldBeEnabled: true,
				// saving the last state set by user interaction (turn scene tree ON/OFF)
				userInteractionShow: this.getShowSceneTree()
			},
			stepNavigation: {
				defaultEnable: this.getEnableStepNavigation(),
				userInteractionShow: this.getShowStepNavigation()
			},
			progressIndicator: {
				defaultEnable: this.getEnableProgressIndicator()
			},
			messagePopover: {
				defaultEnable: this.getEnableNotifications()
			}
		};
		// We initialise the viewer with the both scene tree and step navigation disabled.
		this.setEnableSceneTree(false);
		this.setEnableStepNavigation(false);
	};

	Viewer.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}

		this._contentConnector = new ContentConnector(this.getId() + "-contentconnector");
		this.setAggregation("contentConnector", this._contentConnector);
		this._contentConnector.attachContentReplaced(this._handleContentReplaced, this);
		this._contentConnector.attachContentChangesStarted(this._handleContentChangesStarted, this);
		this._contentConnector.attachContentChangesFinished(this._handleContentChangesFinished, this);
		this._contentConnector.attachContentChangesProgress(this._handleContentChangesProgress, this);

		this._viewStateManager = new ViewStateManager(this.getId() + "-viewstatemanager", {
			contentConnector: this._contentConnector
		});
		this.setAggregation("viewStateManager", this._viewStateManager);

		log.debug("sap.ui.vk.Viewer.init() called.");

		this._mainScene = null;
		this._resizeListenerId = null;
		this._busyIndicatorCounter = 0;
		this._toolbar = null;
		this._viewport = null;
		this._nativeViewport = null;
		this._redlineDesign = null;
		this._stepNavigation = null;
		this._sceneTree = null;
		this._overlayManager = {
			initialized: false,
			changed: false,
			control: null,
			// Event handler for Native Viewport zoom & pan
			onNativeViewportMove: function(event) {
				var oPan = event.getParameter("pan");
				var zoomFactor = event.getParameter("zoom");
				this.control.setPanAndZoom(oPan.x, oPan.y, zoomFactor);
			},
			// Event handler for Viewport zoom
			onViewportZoom: function(event) {
				var zoomFactor = event.getParameter("zoomFactor");
				this.control.setPanAndZoom(0, 0, zoomFactor);
			},
			// Event handler for Viewport pan
			onViewportPan: function(event) {
				var dx = event.getParameter("dx");
				var dy = event.getParameter("dy");
				this.control.setPanAndZoom(dx, dy, 1);
			}
		};
		this._overlayManager.delegate = {
			onAfterRendering: this._onAfterRenderingOverlay.bind(this, this._viewport, this._nativeViewport, this._overlayManager)
		};

		this._updateSizeTimer = 0;

		this._layout = new sap.ui.layout.VerticalLayout(this.getId() + "-verticalLayout").addStyleClass("sapUiVizKitLayout");
		this.setAggregation("layout", this._layout);

		this._toolbar = new sap.ui.vk.Toolbar({
			title: this.getToolbarTitle(),
			visible: this.getEnableToolbar(),
			viewer: this
		});
		this.setAggregation("toolbar", this._toolbar);
		this._layout.addContent(this._toolbar);

		this._splitter = new sap.ui.layout.Splitter(this.getId() + "-splitter", {
			orientation: "Horizontal"
		});
		this._layout.addContent(this._splitter);

		this._stackedViewport = new FlexibleControl(this.getId() + "-stackedViewport", {
			width: "100%",
			height: "100%",
			layout: "Stacked",
			layoutData: new sap.ui.layout.SplitterLayoutData({
				size: "auto",
				minSize: 200
			})
		});
		this._splitter.addContentArea(this._stackedViewport);

		this._messagePopover = new Notifications({ visible: true });
		this._messagePopover.attachAllMessagesCleared(this._updateLayout, this);
		this._messagePopover.attachMessageAdded(this._updateLayout, this);
		this.setAggregation("messagePopover", this._messagePopover);
		this._layout.addContent(this._messagePopover);

		this.setTooltip(sap.ui.vk.getResourceBundle().getText("VIEWER_TITLE"));

		if (this.getEnableProgressIndicator()) {
			this._progressIndicator = new ProgressIndicator({
				visible: false
			}).addStyleClass("sapUiVizKitProgressIndicator");
			this.setAggregation("progressIndicator", this._progressIndicator);
		}
	};

	/**
	 * Destroys the Viewer control. All scenes will be destroyed and all Viewports will be unregistered by the Graphics Core.
	 *
	 * @private
	 */
	Viewer.prototype.exit = function() {
		log.debug("sap.ui.vk.Viewer.exit() called.");

		if (this._viewport) {
			this._viewport.detachEvent("viewActivated", this._onViewportViewActivated, this);
		}

		// All scenes will be destroyed and all viewports will be unregistered by GraphicsCore.destroy.
		this._setMainScene(null);
		this._toolbar = null;
		this._messagePopover = null;
		this._sceneTree = null;
		this._nativeViewport = null;
		this._stepNavigation = null;
		this._viewport = null;
		this._componentsState = null;
		this._viewStateManager = null;
		this._contentConnector = null;

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		if (Control.prototype.exit) {
			Control.prototype.exit.apply(this);
		}
	};

	Viewer.prototype._setMainScene = function(scene) {
		if (scene) {
			if (scene !== this._mainScene) {
				this._mainScene = scene;
				this._showViewport();

				// Set the scene tree & step navigation state based on default settings and last user interaction (if any).
				if (this._componentsState.sceneTree.defaultEnable) {
					this._instantiateSceneTree();
					this.setEnableSceneTree(true);
					this._sceneTree.setScene(scene, this._viewStateManager);
					if (this._componentsState.sceneTree.userInteractionShow && this._componentsState.sceneTree.shouldBeEnabled) {
						this.setShowSceneTree(true);
						this._sceneTree.setVisible(true);
					} else {
						this.setShowSceneTree(false);
					}
				} else if (this._sceneTree && this._viewStateManager){
					this._sceneTree.setScene(scene, this._viewStateManager);
				}

				if (this._componentsState.stepNavigation.defaultEnable) {
					this._instantiateStepNavigation();
					this.setEnableStepNavigation(true);
					if (this._componentsState.stepNavigation.userInteractionShow) {
						this.setShowStepNavigation(true);
						this._stepNavigation.setVisible(true);
					} else {
						this.setShowStepNavigation(false);
					}
				}
			}

			if (this._sceneTree) {
				this._sceneTree.refresh();
			}
			if (this._stepNavigation) {
				this._stepNavigation.refresh(scene);
			}
		} else {
			this._mainScene = null;
			this.setEnableSceneTree(false);
			this.setEnableStepNavigation(false);
		}
		return this;
	};

	/**
	 * Gets the GraphicsCore object if the currently loaded content is a 3D model.
	 *
	 * @returns {sap.ui.vk.dvl.GraphicsCore} The GraphicsCore object. If there is no 3D scene loaded then <code>null</code> is returned.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	Viewer.prototype.getGraphicsCore = function() {
		return this._mainScene instanceof sap.ui.vk.dvl.Scene ? this._mainScene.getGraphicsCore() : null;
	};

	/**
	 * Gets the Scene currently loaded in the Viewer control.
	 *
	 * @returns {sap.ui.vk.Scene} The scene loaded in the control.
	 * @public
	 */
	Viewer.prototype.getScene = function() {
		return this._mainScene;
	};

	/**
	 * Gets the view state manager object used for handling visibility and selection of nodes.
	 *
	 * @returns {sap.ui.vk.ViewStateManager} The view state manager object.
	 * @public
	 */
	Viewer.prototype.getViewStateManager = function() {
		return this._viewStateManager;
	};

	/**
	 * Gets the 3D viewport.
	 *
	 * @returns {sap.ui.vk.dvl.Viewport | sap.ui.vk.threejs.Viewport} The 3D viewport.
	 * @public
	 */
	Viewer.prototype.getViewport = function() {
		return this._viewport ? this._viewport.getImplementation() : null;
	};

	/**
	 * Gets the 2D viewport used for displaying format natively supported by the browser - 2D images etc.
	 *
	 * @returns {sap.ui.vk.NativeViewport} The 2D viewport.
	 * @public
	 */
	Viewer.prototype.getNativeViewport = function() {
		return this._nativeViewport;
	};

	/**
	 * Gets the RedlineDesign instance used for creating redlining shapes.
	 *
	 * @returns {sap.ui.vk.RedlineDesign} The RedlineDesign instance.
	 * @public
	 */
	Viewer.prototype.getRedlineDesign = function() {
		if (isDvlViewport(this.getViewport())) {
			return this._redlineDesign;
		} else {
			return null;
		}
	};

	Viewer.prototype.getOverlay = function() {
		// overlay control is not stored in overlay aggregation, since it may be aggregated by the stavked viewport
		// therefore we keep an additional reference in the _overlayManager
		return this._overlayManager.control;
	};

	Viewer.prototype.setEnableOverlay = function(oProperty) {
		if (oProperty !== this.getProperty("enableOverlay")) {
			this.setProperty("enableOverlay", oProperty);
			this._overlayManager.changed = true;
		}
		return this;
	};

	Viewer.prototype.setEnableSceneTree = function(oProperty) {
		this.setProperty("enableSceneTree", oProperty, true);
		if (!oProperty) {
			this.setProperty("showSceneTree", false);
		}
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableNotifications = function(oProperty) {
		this.setProperty("enableNotifications", oProperty, true);
		this._messagePopover.setVisible(false);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setShowSceneTree = function(oProperty) {
		this.setProperty("showSceneTree", oProperty, true);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableStepNavigation = function(oProperty) {
		this.setProperty("enableStepNavigation", oProperty, true);
		if (!oProperty) {
			this.setProperty("showStepNavigation", false);
		}
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setShowStepNavigation = function(oProperty) {
		this.setProperty("showStepNavigation", oProperty, true);
		this._updateLayout();
		return this;
	};

	Viewer.prototype.setEnableToolbar = function(oProperty) {
		this.setProperty("enableToolbar", oProperty, true);
		this._updateLayout();
		return this;
	};

	/**
	 * It activates or deactivates full screen mode.
	 * @param {boolean} value Parameter which specifies whether to activate or deactivate full screen mode.
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewer.prototype.activateFullScreenMode = function(value) {
		// It checks if the current document is in full screen mode
		var isInFullScreenMode = function(document) {
			return !!(document.fullScreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement);
		};

		// Fullscreen toggle
		if (value) {
			if (!isInFullScreenMode(document)) {
				if (!this._fullScreenHandler) {
					var that = this;
					this._fullScreenHandler = function(event) {
						var isFullScreen = isInFullScreenMode(document);
						if (!isFullScreen) {
							document.removeEventListener("fullscreenchange", that._fullScreenHandler);
							document.removeEventListener("mozfullscreenchange", that._fullScreenHandler);
							document.removeEventListener("webkitfullscreenchange", that._fullScreenHandler);
							document.removeEventListener("MSFullscreenChange", that._fullScreenHandler);
						}

						that.fireFullScreen({
							isFullScreen: isFullScreen
						});
					};
				}

				var bodyElement = document.getElementsByTagName("body")[0];
				if (bodyElement.requestFullScreen) {
					document.addEventListener("fullscreenchange", this._fullScreenHandler);
					bodyElement.requestFullScreen();
				} else if (bodyElement.webkitRequestFullScreen) {
					document.addEventListener("webkitfullscreenchange", this._fullScreenHandler);
					bodyElement.webkitRequestFullScreen();
				} else if (bodyElement.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange", this._fullScreenHandler);
					bodyElement.mozRequestFullScreen();
				} else if (bodyElement.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange", this._fullScreenHandler);
					bodyElement.msRequestFullscreen();
				}
			}

			this.addStyleClass("sapVizKitViewerFullScreen");
		} else {
			if (isInFullScreenMode(document)) {
				if (document.cancelFullScreen) {
					document.cancelFullScreen();
				} else if (document.webkitCancelFullScreen) {
					document.webkitCancelFullScreen();
				} else if (document.mozCancelFullScreen) {
					document.mozCancelFullScreen();
				} else if (document.msExitFullscreen) {
					document.msExitFullscreen();
				}
			}

			this.removeStyleClass("sapVizKitViewerFullScreen");
		}

		return this;
	};

	function isDvlViewport(vp) {
		if (!vp) {
			return false;
		}
		return vp instanceof sap.ui.vk.dvl.Viewport;
	}

	Viewer.prototype.getShowAllHotspots = function() {
		return isDvlViewport(this.getViewport()) ? this.getViewport().getShowAllHotspots() : this.getProperty("showAllHotspots");
	};

	Viewer.prototype.setShowAllHotspots = function(value) {
		this.setProperty("showAllHotspots", value, true);
		if (isDvlViewport(this.getViewport())) {
			this.getViewport().setShowAllHotspots(value);
		}
		return this;
	};

	Viewer.prototype.getHotspotColorABGR = function() {
		return isDvlViewport(this.getViewport()) ? this.getViewport().getHotspotColorABGR() : this.getProperty("hotspotColorABGR");
	};

	Viewer.prototype.setHotspotColorABGR = function(value) {
		this.setProperty("hotspotColorABGR", value, true);
		this.setProperty("hotspotColor", sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(value)), true);
		if (isDvlViewport(this.getViewport())) {
			this.getViewport().setHotspotColorABGR(value);
		}
		return this;
	};

	Viewer.prototype.getHotspotColor = function() {
		return isDvlViewport(this.getViewport()) ? this.getViewport().getHotspotColor() : this.getProperty("hotspotColor");
	};

	Viewer.prototype.setHotspotColor = function(value) {
		this.setProperty("hotspotColor", value, true);
		this.setProperty("hotspotColorABGR", sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(value)), true);
		if (isDvlViewport(this.getViewport())) {
			this.getViewport().setHotspotColor(value);
		}
		return this;
	};

	Viewer.prototype.setRuntimeSettings = function(settings) {
		if (this._inApplySettings) {
			this.setProperty("runtimeSettings", settings, true);
			DvlContentManager.setRuntimeSettings(settings);
		} else {
			// runtimeSettings property should not be changeable in other cases than the constructor
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT29.summary), Messages.VIT29.code, "sap.ui.vk.Viewer");
		}
		return this;
	};

	Viewer.prototype.setWebGLContextAttributes = function(attributes) {
		if (this._inApplySettings) {
			this.setProperty("webGLContextAttributes", attributes, true);
			DvlContentManager.setWebGLContextAttributes(attributes);
		} else {
			// webGLContextAttributes property should not be changeable in other cases than the constructor
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT30.summary), Messages.VIT30.code, "sap.ui.vk.Viewer");
		}
		return this;
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: forward access to the contentResources aggregation to the content connector.

	Viewer.prototype.invalidate = function(origin) {
		if (origin instanceof ContentResource) {
			this._contentConnector.invalidate(origin);
			return;
		}
		Control.prototype.invalidate.apply(this, arguments);
	};

	Viewer.prototype.validateAggregation = function(aggregationName, object, multiple) {
		if (aggregationName === "contentResources") {
			return this._contentConnector.validateAggregation(aggregationName, object, multiple);
		}
		return Control.prototype.validateAggregation.call(this, aggregationName, object, multiple);
	};

	Viewer.prototype.getAggregation = function(aggregationName, defaultForCreation) {
		if (aggregationName === "contentResources") {
			return this._contentConnector.getAggregation(aggregationName, defaultForCreation);
		}
		return Control.prototype.getAggregation.call(this, aggregationName, defaultForCreation);
	};

	Viewer.prototype.setAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			this._contentConnector.setAggregation(aggregationName, object, suppressInvalidate);
			return this;
		}
		return Control.prototype.setAggregation.call(this, aggregationName, object, suppressInvalidate);
	};

	Viewer.prototype.addAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			this._contentConnector.addAggregation(aggregationName, object, suppressInvalidate);
			return this;
		}
		return Control.prototype.addAggregation.call(this, aggregationName, object, suppressInvalidate);
	};

	Viewer.prototype.insertAggregation = function(aggregationName, object, index, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			this._contentConnector.insertAggregation(aggregationName, object, index, suppressInvalidate);
			return this;
		}
		return Control.prototype.insertAggregation.call(this, aggregationName, object, index, suppressInvalidate);
	};

	Viewer.prototype.removeAggregation = function(aggregationName, object, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			return this._contentConnector.removeAggregation(aggregationName, object, suppressInvalidate);
		}
		return Control.prototype.removeAggregation.call(this, aggregationName, object, suppressInvalidate);
	};

	Viewer.prototype.removeAllAggregation = function(aggregationName, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			return this._contentConnector.removeAllAggregation(aggregationName, suppressInvalidate);
		}
		return Control.prototype.removeAllAggregation.call(this, aggregationName, suppressInvalidate);
	};

	Viewer.prototype.destroyAggregation = function(aggregationName, suppressInvalidate) {
		if (aggregationName === "contentResources") {
			this._contentConnector.destroyAggregation(aggregationName, suppressInvalidate);
			return this;
		}
		return Control.prototype.destroyAggregation.call(this, aggregationName, suppressInvalidate);
	};

	// END: forward access to the contentResources aggregation to the content connector.
	////////////////////////////////////////////////////////////////////////////

	Viewer.prototype.onBeforeRendering = function() {
		this._showOverlay();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}
	};

	Viewer.prototype.onAfterRendering = function() {
		this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
		this._handleResize();
	};

	/**
	 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
	 *
	 * @param {jQuery.Event} event The event object.
	 * @private
	 */
	Viewer.prototype._handleResize = function(event) {
		this._updateSize();

		if (this.getRedlineDesign()) {
			var x = this.getRedlineDesign().exportJSON();
			this.getRedlineDesign().removeAllRedlineElements();

			jQuery.sap.delayedCall(200, this, function() {
				var virtualViewportSize;
				if (this.getViewport() && this.getViewport().getVisible()) {
					virtualViewportSize = this.getViewport().getOutputSize();
				} else if (this.getNativeViewport() && this.getNativeViewport().getVisible()) {
					virtualViewportSize = this.getNativeViewport().getOutputSize();
				}
				this.getRedlineDesign().setProperty("virtualLeft", virtualViewportSize.left, true);
				this.getRedlineDesign().setProperty("virtualTop", virtualViewportSize.top, true);
				this.getRedlineDesign().setProperty("virtualSideLength", virtualViewportSize.sideLength, true);
				this.getRedlineDesign().invalidate();

				this.getRedlineDesign().importJSON(x);
			});
		}
	};

	Viewer.prototype._delayedUpdateSize = function() {
		if (this.getDomRef()) {
			if (this._updateSizeTimer) {
				clearTimeout(this._updateSizeTimer);
			}
			this._updateSizeTimer = setTimeout(this._updateSize.bind(this), 0);
		}
	};

	Viewer.prototype._updateSize = function() {
		this._updateSizeTimer = 0;
		if (!this.getDomRef()) {
			return;
		}

		var height = this.getDomRef().clientHeight;

		if (this._toolbar && this._toolbar.getDomRef() && this.getEnableToolbar()) {
			height -= this._toolbar.getDomRef().clientHeight;
		}

		if (this._stepNavigation && this._stepNavigation.getDomRef() && this.getShowStepNavigation()) {
			height -= this._stepNavigation.getDomRef().clientHeight;
		}

		if (this._messagePopover && this._messagePopover.getDomRef() && this._messagePopover.getVisible()) {
			height -= this._messagePopover.getDomRef().clientHeight;
		}

		if (this._sceneTree){
			this._sceneTree.updateHeight(height);
		}

		this._splitter.setHeight(Math.max(height, 100) + "px"); // set content height
	};

	Viewer.prototype.isTreeBinding = function(name) {
		return name === "contentResources";
	};

	Viewer.prototype.setBusy = function(busy) {
		if (busy) {
			if (this._busyIndicatorCounter === 0) {
				this.setBusyIndicatorDelay(0);
				Control.prototype.setBusy.call(this, true);
			}
			this._busyIndicatorCounter += 1;
		} else {
			this._busyIndicatorCounter -= 1;
			if (this._busyIndicatorCounter == 0) {
				Control.prototype.setBusy.call(this, false);
			}
		}
	};

	Viewer.prototype._updateLayout = function() {
		if (this._bIsBeingDestroyed) {
			return;
		}

		if (this._sceneTree) {
			if (this.getShowSceneTree() && this.getEnableSceneTree()) {
				this._sceneTree.setVisible(true);
				if (this._splitter.indexOfContentArea(this._sceneTree) < 0) {
					this._splitter.insertContentArea(this._sceneTree, 0);
				}
			} else {
				if (this._splitter.indexOfContentArea(this._sceneTree) >= 0) {
					this._splitter.removeContentArea(this._sceneTree);
				}
				this._sceneTree.setVisible(false);
			}
		}

		if (this._stepNavigation) {
			this._stepNavigation.setVisible(this.getShowStepNavigation() && this.getEnableStepNavigation());
		}

		if (this._messagePopover) {
			this._messagePopover.setVisible(this.getEnableNotifications() && this._messagePopover.getAggregation("_messagePopover").getItems().length > 0);
		}

		if (this._toolbar) {
			this._toolbar.setVisible(this.getEnableToolbar());
			this._toolbar.refresh();
		}

		this._delayedUpdateSize();
	};

	Viewer.prototype._instantiateSceneTree = function() {
		if (!this._sceneTree) {
			this._sceneTree = new sap.ui.vk.SceneTree({
				layoutData: new sap.ui.layout.SplitterLayoutData({
					size: "320px",
					minSize: 200
				}),
				viewStateManager: this._viewStateManager,
				contentConnector: this._contentConnector
			});
			this.setAggregation("sceneTree", this._sceneTree);
		}
		return this;
	};

	Viewer.prototype._instantiateStepNavigation = function() {
		if (!this._stepNavigation) {
			this._stepNavigation = new sap.ui.vk.StepNavigation(this.getId() + "-stepNavigation", {
				showThumbnails: this.getShowStepNavigationThumbnails(),
				contentConnector: this._contentConnector
			});
			this.setAggregation("stepNavigation", this._stepNavigation);
			this._layout.insertContent(this._stepNavigation, 3);
		}
		return this;
	};

	Viewer.prototype._showViewport = function() {
		if (!this._viewport) {
			this._viewport = new sap.ui.vk.Viewport(this.getId() + "-viewport", {
				viewStateManager: this._viewStateManager,
				selectionMode: sap.ui.vk.SelectionMode.Exclusive,
				contentConnector: this._contentConnector // content connector must be the last parameter in the list!
			});

			this.setAggregation("viewport", this._viewport);
			this._viewport.attachEvent("viewActivated", this._onViewportViewActivated, this);

			var vp = this.getViewport();
			if (isDvlViewport(vp)) {
				vp.setHotspotColor(this.getProperty("hotspotColor"));
				vp.setHotspotColorABGR(this.getProperty("hotspotColorABGR"));
				vp.setShowAllHotspots(this.getProperty("showAllHotspots"));
			}
		}

		if (this._nativeViewport) {
			this._nativeViewport.setVisible(false);
		}
		this._stackedViewport.removeAllContent();
		this._stackedViewport.addContent(this._viewport);
		this._viewport.setVisible(true);

		return this;
	};

	Viewer.prototype._showNativeViewport = function() {
		if (!this._nativeViewport) {
			this._nativeViewport = new sap.ui.vk.NativeViewport(this.getId() + "-nativeViewport", {
				limitZoomOut: true,
				contentConnector: this._contentConnector
			});
			this.setAggregation("nativeViewport", this._nativeViewport);
		}

		if (this._viewport) {
			this._viewport.setVisible(false);
		}
		this._stackedViewport.removeAllContent();
		this._stackedViewport.addContent(this._nativeViewport);
		this._nativeViewport.setVisible(true);

		return this;
	};

	Viewer.prototype._showOverlay = function() {
		var oOverlayManager = this._overlayManager;
		if (oOverlayManager.changed) {
			var oOverlay;
			if (this.getEnableOverlay()) {
				if (!oOverlayManager.initialized) {
					// overlay not yet initialized -> check if overlay is given
					if (!(oOverlay = this.getAggregation("overlay"))) {
						// no Overlay control given -> create one
						oOverlay = new sap.ui.vk.Overlay();
					}
					oOverlay.setZoomOnResize(false);
					oOverlayManager.control = oOverlay;
					oOverlayManager.initialized = true;
				} else {
					oOverlay = oOverlayManager.control;
					oOverlay.reset();
				}
				// The Overlay needs to be appended to either Viewport or Native Viewport
				// so we check which one is active.
				if (this._nativeViewport && this._nativeViewport.getVisible()) {
					oOverlay.setTarget(this._nativeViewport);
					// set zoom restriction
					oOverlayManager.savedLimitZoomOutState = this._nativeViewport.getLimitZoomOut();
					this._nativeViewport.setLimitZoomOut(true);
					// register move event of native Viewport to adapt pan and zoom state
					this._nativeViewport.attachEvent("move", oOverlayManager.onNativeViewportMove, oOverlayManager);
				} else if (this._viewport && this._viewport.getVisible()) {
					oOverlay.setTarget(this._viewport);
					oOverlayManager.savedLimitZoomOutState = false;
					// Capturing the Viewport zooming and panning events so we can pass them
					// through to the Overlay so it can zoom and pan the overlay areas (hotspots).
					this._viewport.attachEvent("zoom", oOverlayManager.onViewportZoom, oOverlayManager);
					this._viewport.attachEvent("pan", oOverlayManager.onViewportPan, oOverlayManager);
				}

				// add Overlay to stacked Viewport
				this._stackedViewport.addContent(oOverlay);
				this._stackedViewport.addDelegate(oOverlayManager.delegate);
			} else {
				// de-register move event of native Viewport to adapt pan and zoom state
				this._nativeViewport.detachEvent("move", oOverlayManager.onNativeViewportMove, oOverlayManager);
				// remove Overlay from stacked Viewport
				this._stackedViewport.removeDelegate(oOverlayManager.delegate);
				this._stackedViewport.removeContent(oOverlayManager.control);
				// remove zoom restriction
				this._nativeViewport.setLimitZoomOut(oOverlayManager.savedLimitZoomOutState);
			}
			oOverlayManager.changed = false;
		}
	};

	Viewer.prototype._onAfterRenderingOverlay = function(oEvent) {
		// manipulate DOM tree after rendering of stacked viewport
		var overlayDiv = this._overlayManager.control.getDomRef();

		if (overlayDiv && (this._nativeViewport || this._viewport)) {
			// viewportToAppend is the domRef to either viewport or nativeViewport
			var viewportToAppend = this._nativeViewport && this._nativeViewport.getVisible() ? this._nativeViewport.getDomRef() : this._viewport.getDomRef();

			if (overlayDiv.parentNode !== viewportToAppend) {
				// Do not display the content div the overlay belongs to;
				// otherwise it would receive all events we expect on the overlay
				overlayDiv.parentNode.style.display = "none";
			}
			// make overlay a child of viewport/nativeViewport to get event bubbling right
			viewportToAppend.appendChild(overlayDiv);
			// adapt overlay size to parent node
			overlayDiv.style.width = "100%";
			overlayDiv.style.height = "100%";
		}
	};

	/**
	 * Sets an object that decrypts content of encrypted models.
	 *
	 * @param {sap.ui.vk.DecryptionHandler} handler An object that decrypts content of encrypted models.
	 * @return {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewer.prototype.setDecryptionHandler = function(handler) {
		DvlContentManager.setDecryptionHandler(handler);
		return this;
	};

	/**
	 * Gets an object that decrypts content of encrypted models.
	 *
	 * @return {sap.ui.vk.DecryptionHandler} An object that decrypts content of encrypted models.
	 * @public
	 */
	Viewer.prototype.getDecryptionHandler = function() {
		return DvlContentManager.getDecryptionHandler();
	};

	/*
	 * It creates a new instance of {sap.ui.vk.RedlineDesign}.
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewer.prototype._instantiateRedlineDesign = function(redlineElements) {

		// if either Viewport/NativeViewport exist and are visible, we instantiate RedlineDesign
		if ((this.getViewport() && this.getViewport().getVisible()) || (this.getNativeViewport() && this.getNativeViewport().getVisible())) {
			var activeViewport = this.getViewport() && this.getViewport().getVisible() ? this.getViewport() : this.getNativeViewport();
			var virtualViewportSize = activeViewport.getOutputSize();

			this._redlineDesign = new sap.ui.vk.RedlineDesign({
				visible: false,
				virtualTop: virtualViewportSize.top,
				virtualLeft: virtualViewportSize.left,
				virtualSideLength: virtualViewportSize.sideLength,
				redlineElements: redlineElements
			});
		}
		return this;
	};

	/*
	 * Activates the redline design control.
	 * @param {sap.ui.vk.RedlineElement | sap.ui.vk.RedlineElement[]} The redline element/elements which will be rendered
	 * as soon as the redline design control is activated.
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewer.prototype.activateRedlineDesign = function(redlineElements) {
		if (!isDvlViewport(this.getViewport())) {
			return this; // red lining only works for dvl viewport atm
		}

		redlineElements = redlineElements || [];
		this._instantiateRedlineDesign(redlineElements);
		// placing the RedlineDesign inside the _stackedViewport
		this.getRedlineDesign().placeAt(this._stackedViewport);
		this.getRedlineDesign().setVisible(true);

		var onRedlineDesignPanViewport = function(event) {
			var deltaX = event.getParameter("deltaX"),
				deltaY = event.getParameter("deltaY");
			this.getViewport().queueCommand(function(deltaX, deltaY) {
				this.getViewport().pan(deltaX, deltaY);
				this.getViewport().endGesture();
			}.bind(this, deltaX, deltaY));
		};

		var onRedlineDesignZoomViewport = function(event) {
			var originX = event.getParameter("originX"),
				originY = event.getParameter("originY"),
				zoomFactor = event.getParameter("zoomFactor");
			this.getViewport().queueCommand(function(originX, originY, zoomFactor) {
				this.getViewport().beginGesture(originX, originY);
				this.getViewport().zoom(zoomFactor);
				this.getViewport().endGesture();
			}.bind(this, originX, originY, zoomFactor));
		};

		var onRedlineDesignPanNativeViewport = function(event) {
			var deltaX = event.getParameter("deltaX"),
				deltaY = event.getParameter("deltaY");

			this.getNativeViewport().queueCommand(function() {
				this.getNativeViewport().pan(deltaX, deltaY);
				this.getNativeViewport().endGesture();
			}.bind(this));
		};

		var onRedlineDesignZoomNativeViewport = function(event) {
			var originX = event.getParameter("originX"),
				originY = event.getParameter("originY"),
				zoomFactor = event.getParameter("zoomFactor");

			this.getNativeViewport().queueCommand(function(originX, originY, zoomFactor) {
				this.getNativeViewport().beginGesture(originX, originY);
				this.getNativeViewport().zoom(zoomFactor);
				this.getNativeViewport().endGesture();
			}.bind(this, originX, originY, zoomFactor));
		};

		// Subscribing to the events fired by the RedlineDesign.
		// Everytime the RedlineDesign moves, we receive the new coordinates/zoom level
		// and we use them to update the Viewport/NativeViewport
		if (this.getNativeViewport() && this.getNativeViewport().getVisible()) {
			this.getRedlineDesign().attachEvent("pan", onRedlineDesignPanNativeViewport.bind(this));
			this.getRedlineDesign().attachEvent("zoom", onRedlineDesignZoomNativeViewport.bind(this));
		} else if (this.getViewport() && this.getViewport().getVisible()) {
			this.getRedlineDesign().attachEvent("pan", onRedlineDesignPanViewport.bind(this));
			this.getRedlineDesign().attachEvent("zoom", onRedlineDesignZoomViewport.bind(this));
		}

		return this;
	};

	/*
	 * It destroys the current instance of {sap.ui.vk.RedlineDesign}.
	 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewer.prototype.destroyRedlineDesign = function() {
		if (this.getRedlineDesign()) {
			this.getRedlineDesign().destroy();
			this._redlineDesign = null;
		}
		return this;
	};

	Viewer.prototype._onViewportViewActivated = function(event) {
		// If it's 3D content, we mark the scene tree as 'usable'.
		// In case of 2D, the scene tree should not be enabled.
		this._componentsState.sceneTree.shouldBeEnabled = event.getParameter("type") === "3D";
	};

	Viewer.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");

		if (content instanceof sap.ui.vk.Scene) {
			this._showViewport();

			// each time we load a 3D mode, we have to update the panning ratio of the redline control
			if (this.getRedlineDesign()) {
				this.getRedlineDesign().updatePanningRatio();
			}

			this._setMainScene(content);

			// this.fireSceneLoadingSucceeded({
			// 	scene: content
			// });
		} else if (content instanceof HTMLImageElement || content instanceof HTMLObjectElement) {
			this._setMainScene(null);
			this._showNativeViewport();

			if (this.getEnableOverlay()) {
				this._overlayManager.changed = true;
				this._showOverlay();
			}

			// this.fireSceneLoadingSucceeded({
			// 	scene: content
			// });
		} else {
			this._setMainScene(null);
			if (this._viewport) {
				this._viewport.setVisible(false);
			}
			if (this._nativeViewport) {
				this._nativeViewport.setVisible(false);
			}
			this._stackedViewport.removeAllContent();
		}
	};

	Viewer.prototype._handleContentChangesStarted = function(event) {
		this.setBusy(true);
		if (this._componentsState.progressIndicator.defaultEnable) {
			this._progressIndicator.setPercentValue(0.0);
			this._progressIndicator.setVisible(true);
		}
	};

	Viewer.prototype._handleContentChangesFinished = function(event) {
		log.info("Finished");
		this._progressIndicator.setVisible(false);
		this._progressIndicator.setDisplayValue("");
		this._progressIndicator.setPercentValue(0);
		this.setBusy(false);
		var content = event.getParameter("content");
		if (content) {
			this.fireSceneLoadingSucceeded({
				scene: content
			});
		}
		var failureReason = event.getParameter("failureReason");
		if (failureReason) {
			this.fireSceneLoadingFailed({
				reason: failureReason
			});
			// We check if Notifications control is off before showing the error images
			if (this.getEnableNotifications() === false) {
				this._showNativeViewport();
				// Content Connector throws this error if resource type is not supported.
				if (failureReason.errorMessage === "The content resources cannot be loaded. The type of content resources is unknown.") {
					// We call NV loadFiled method without parameter so that we use unsupported file text in method already.
					this._nativeViewport.loadFailed();
				} else {
					// If resource has supported type but other issues exist we throw Error loading image.
					// Translated text from Message library
					var errorLoadingFile = sap.ui.vk.getResourceBundle().getText("VIEWPORT_MESSAGEERRORLOADINGFILE");
					// LoadFailed passes parameter as text to present.
					this._nativeViewport.loadFailed(errorLoadingFile);
				}
			}
			(Array.isArray(failureReason) ? failureReason : [ failureReason ]).forEach(function(reason) {
				log.error(reason.errorMessage, "", "sap.ui.vk.Viewer");
			});
		}
		this.fireContentResourceChangesProcessed();
	};

	Viewer.prototype._handleContentChangesProgress = function(event) {
		if (this._progressIndicator.getVisible()) {
			var source = event.getParameter("source"),
			    percentage = event.getParameter("percentage"),
			    extension = source.match(/\..{3,4}$/),         // if the source has a proper filename with extension, we display it.
			                                                   // if the file is tokenized, we don't display anything.
			    processedSource = extension && extension[0] ? source.split(/\\|\//).pop() + " " : "";

			this._progressIndicator.setPercentValue(percentage);
			this._progressIndicator.setDisplayValue(processedSource + sap.ui.vk.getResourceBundle().getText("PROGRESS_INDICATOR_DOWNLOADING") + " " + (percentage ? Math.floor(percentage) + "%" : ""));
		}
	};

	Viewer.prototype._handleContentDestroying = function(event) {
		this.fireSceneDestroying({
			scene: event.getParameter("content"),
			preventGarbageCollection: event.getParameter("preventGarbageCollection")
		});
	};

	return Viewer;
});

}; // end of sap/ui/vk/Viewer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ViewportBase.
jQuery.sap.declare('sap.ui.vk.ViewportBase'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportBase",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler",
	"./Smart2DHandler", "./Messages", "./ContentConnector", "./ViewStateManager"
], function(
	jQuery, library, Control, ResizeHandler, Loco, ViewportHandler,
	Smart2DHandler, Messages, ContentConnector, ViewStateManager
) {
	"use strict";

	/**
	 * Constructor for a new Viewport.
	 *
	 * @class
	 * Provides a rendering canvas for the 3D elements of a loaded scene.
	 *
	 * @param {string} [sId] ID for the new Viewport control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Viewport control.
	 * @public
	 * @abstract
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.ViewportBase
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewportBase = Control.extend("sap.ui.vk.ViewportBase", /** @lends sap.ui.vk.ViewportBase.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			"abstract": true,

			properties: {
				/**
				 * Shows or hides the debug info.
				 */
				showDebugInfo: {
					type: "boolean",
					defaultValue: false
				},

				/**
				 * Viewport background top color in the CSS Color format
				 */
				backgroundColorTop: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(0, 0, 0, 1)" // black
				},

				/**
				 * Viewport background bottom color in the CSS Color format
				 */
				backgroundColorBottom: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(255, 255, 255, 1)" // white
				},

				/**
				 * Viewport width
				 */
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Viewport height
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Selection mode
				 */
				selectionMode: {
					type: "sap.ui.vk.SelectionMode",
					defaultValue: sap.ui.vk.SelectionMode.Sticky
				}
			},

			associations: {
				/**
				 * An association to the <code>ContentConnector</code> instance that manages content resources.
				 */
				contentConnector: {
					type: "sap.ui.vk.ContentConnector",
					multiple: false
				},

				/**
				 * An association to the <code>ViewStateManager</code> instance.
				 */
				viewStateManager: {
					type: "sap.ui.vk.ViewStateManager",
					multiple: false
				}
			},

			events: {
				resize: {
					parameters: {
						/**
						 * Returns the width and height of new size { width: number, height: number } in CSS pixels.
						 */
						size: "object"
					}
				},

				/**
				 * This event is fired when nodes in the scene are picked.
				 * If application requires different selection behaviour then it can handle this event and implement its own selection method.
				 * In this case selectionMode property should be set to 'none'
				 * Application can modify list of picked node references
				 */
				nodesPicked: {
					parameters: {
						/**
						 * References of the nodes that are picked.
						 */
						picked: {
							type: "any[]"
						}
					},
					enableEventBubbling: true
				}
			}
		}
	});

	/**
	 * Helper method to provide "sticky" selection method. If this method is used then nodes are
	 * added into selection if they were not selected before, otherwise they are removed from selection.
	 * If this is called with empty nodes list then all already selected nodes are deselected.
	 *
	 * @param {any[]} nodes Array of node references
	 * @protected
	 */
	ViewportBase.prototype.stickySelectionHandler = function(nodes) {
		if (this._viewStateManager == null){
			return;
		}

		if (nodes.length === 0) {
			// Clear selection.
			var currentlySelected = [];
			this._viewStateManager.enumerateSelection(function(selectedNode) {
				currentlySelected.push(selectedNode);
			});
			if (currentlySelected.length > 0) {
				this._viewStateManager.setSelectionState(currentlySelected, false, false);
			}
		} else {
			var select = [];
			var deselect = [];
			var isSelected = this._viewStateManager.getSelectionState(nodes);
			for (var ni = 0; ni < isSelected.length; ni++) {
				if (isSelected[ni]) {
					deselect.push(nodes[ni]);
				} else {
					select.push(nodes[ni]);
				}
			}
			this._viewStateManager.setSelectionState(select, true);
			this._viewStateManager.setSelectionState(deselect, false);
		}
	};

	/**
	 * Helper method used to provide exclusive selection method. If this method is used then nodes are
	 * marked as selected while all previously selected objects are deselected.
	 * If this is called with empty nodes list then all already selected nodes are deselected.
	 *
	 * @param {any[]} nodes Array of node references
	 * @protected
	 */
	ViewportBase.prototype.exclusiveSelectionHandler = function(nodes) {
		if (this._viewStateManager == null){
			return;
		}
		var notInCurrentSelection = true;
		if (nodes.length === 1) {
			notInCurrentSelection = !this._viewStateManager.getSelectionState(nodes[0]);
		} else if (nodes.length > 1) {
			var isSelected = this._viewStateManager.getSelectionState(nodes);
			for (var ni = 0; ni < isSelected.length; ni++) {
				if (isSelected[ ni ]) {
					notInCurrentSelection = false;
					break;
				}
			}
		}

		if (this._viewStateManager && (nodes.length === 0 || notInCurrentSelection)) {
			// Clear selection.
			var currentlySelected = [];
			this._viewStateManager.enumerateSelection(function(selectedNode) {
				currentlySelected.push(selectedNode);
			});
			if (currentlySelected.length > 0) {
				this._viewStateManager.setSelectionState(currentlySelected, false, false);
			}
		}

		if (this._viewStateManager && nodes.length) {
			this._viewStateManager.setSelectionState(nodes, true);
		}
	};

	return ViewportBase;
});

}; // end of sap/ui/vk/ViewportBase.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.NodeHierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeHierarchy class.
jQuery.sap.declare('sap.ui.vk.dvl.NodeHierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ObjectPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/NodeHierarchy",[
	"jquery.sap.global", "../library", "../NodeHierarchy", "sap/ui/base/ObjectPool", "./BaseNodeProxy", "./NodeProxy", "./LayerProxy", "../Messages"
], function(jQuery, library, NodeHierarchyBase, ObjectPool, BaseNodeProxy, NodeProxy, LayerProxy, Messages) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	// This is a dictionary that we use to convert query values
	// from strings to actual numbers that are passed to DVL when finding nodes.
	// The DVL method FindNodes requires integer values as parameters so it's better
	// to avoid passing "0" or "1" as arguments. Instead we can make conversions such as
	// string "equals" to the DvlEnum "sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL"
	// which is an integer.
	var searchDictionary = {
		modeDictionary: {
			equals: function(isCaseSensitive) {
				return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_EQUAL_CASE_INSENSITIVE;
			},
			contains: function(isCaseSensitive) {
				return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_SUBSTRING : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_SUBSTRING_CASE_INSENSITIVE;
			},
			startsWith: function(isCaseSensitive) {
				return isCaseSensitive ? sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_STARTS_WITH : sap.ve.dvl.DVLFINDNODEMODE.DVLFINDNODEMODE_STARTS_WITH_CASE_INSENSITIVE;
			}
		}
	};

	/**
	 * Constructor for a new NodeHierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to
	 * {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
	 *
	 * @class
	 * Provides the ability to explore a Scene object's node structure.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to
	 * {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.NodeHierarchy
	 * @alias sap.ui.vk.dvl.NodeHierarchy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeHierarchy = NodeHierarchyBase.extend("sap.ui.vk.dvl.NodeHierarchy", /** @lends sap.ui.vk.dvl.NodeHierarchy.prototype */ {
		metadata: {
			publicMethods: [
				"createLayerProxy",
				"createNode",
				"createNodeCopy",
				"createNodeProxy",
				"destroyLayerProxy",
				"destroyNodeProxy",
				"enumerateAncestors",
				"enumerateChildren",
				"findNodesById",
				"findNodesByMetadata",
				"findNodesByName",
				"getAncestors",
				"getChildren",
				"getGraphicsCore",
				"getLayers",
				"getSceneRef",
				"getScene",
				"removeNode"
			]
		},

		_baseNodeProxyPool: new ObjectPool(BaseNodeProxy),

		constructor: function(scene) {
			NodeHierarchyBase.call(this);

			this._graphicsCore = scene.getGraphicsCore();
			this._scene = scene;
			this._dvlSceneRef = this._scene.getSceneRef();
			this._dvl = this._graphicsCore._getDvl();
			this._nodeProxies = [];
			this._layerProxies = [];
		}
	});

	NodeHierarchy.prototype.destroy = function() {
		this._layerProxies.slice().forEach(this.destroyLayerProxy, this);
		this._nodeProxies.slice().forEach(this.destroyNodeProxy, this);
		this._dvl = null;
		this._dvlSceneRef = null;
		this._scene = null;
		this._graphicsCore = null;

		NodeHierarchyBase.prototype.destroy.call(this);
	};

	/**
	 * Gets the GraphicsCore object this Scene object belongs to.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} The GraphicsCore object this Scene object belongs to.
	 * @public
	 */
	NodeHierarchy.prototype.getGraphicsCore = function() {
		return this._graphicsCore;
	};

	/**
	 * Gets the Scene object the node hierarchy belongs to.
	 * @returns {sap.ui.vk.Scene} The Scene object the node hierarchy belongs to.
	 * @public
	 */
	NodeHierarchy.prototype.getScene = function() {
		return this._scene;
	};

	/**
	 * Gets the scene reference that this NodeHierarchy object wraps.
	 * @returns {any} The scene reference that this NodeHierarchy object wraps.
	 * @public
	 */
	NodeHierarchy.prototype.getSceneRef = function() {
		return this._dvlSceneRef;
	};

	/**
	 * Enumerates the child nodes of a particular node in the Scene object.
	 *
	 * This method gets the child nodes of a particular node, and then calls the <code>callback</code> function to which it passes the child nodes to one by one.<br/>
	 * The <code>BaseNodeProxy</code> objects passed to the <code>callback</code> fuction are temporary objects, which are reset after each call to the <code>callback</code> function.<br/>
	 *
	 * @param {any} [nodeRef] The node reference whose child nodes we want enumerated.<br/>
	 * When <code>nodeRef</code> is specified, the child nodes of this node are enumerated.<br/>
	 * When no <code>nodeRef</code> is specified, only the top level nodes are enumerated.<br/>

	 * @param {function} callback A function to call when the child nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	 * @param {boolean} [stepIntoClosedNodes=false] Indicates whether to enumerate the child nodes if the node is <i>closed</i>. <br/>
	 * If <code>true</code>, the children of that closed node will be enumerated <br/>
	 * If <code>false</code>, the children of that node will not be enumerated<br/>

	 * @param {boolean} [passNodeRef=false] Indicates whether to pass the node references of the child nodes, or the whole node proxy to the <code>callback</code> function. <br/>
	 * If <code>true</code>, then only the node references of the child nodes are passed to the <code>callback</code> function. <br/>
	 * If <code>false</code>, then the node proxies created from the child node references are passed to the <code>callback</code> function.

	 * @returns {sap.ui.vk.dvl.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.enumerateChildren = function(nodeRef, callback, stepIntoClosedNodes, passNodeRef) {
		if (typeof nodeRef === "function") {
			// The 'nodeRef' parameter is omitted, let's shift the parameters to right.
			passNodeRef = stepIntoClosedNodes;
			stepIntoClosedNodes = callback;
			callback = nodeRef;
			nodeRef = undefined;
		}

		// NB: At the moment DVL scenes support only one hierarchy, so we just enumerate top level nodes of the scene if nodeRef is omitted.
		var nodeRefs;
		if (nodeRef) {
			// Child nodes of the node.
			if (stepIntoClosedNodes || (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
				nodeRefs = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN)).ChildNodes;
			} else {
				// Do not step into closed nodes.
				nodeRefs = [];
			}
		} else {
			// Top level nodes.
			nodeRefs = getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN)).ChildNodes;
		}
		if (passNodeRef) {
			nodeRefs.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeRefs.forEach(function(nodeRef) {
					nodeProxy.init(this, nodeRef);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	* Enumerates the ancestor nodes of a particular node in the Scene object.
	*
	* This method enumerates the ancestor nodes of a particular node, and then calls the <code>callback</code> function, to which it passes the ancestor nodes to one by one.<br/>
	* The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, they are reset after each call to the <code>callback</code> function.<br/>
	* The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
	*
	* @param {any} nodeRef The node reference whose ancestore nodes we want enumerated.

	* @param {function} callback A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	* @param {boolean} [passNodeRef=false] Indicates whether to pass the node references of the ancestore nodes, or the whole node proxy to the <code>callback</code> function.<br/>
	If <code>true</code>, then only the node references of the ancestor nodes are passed to the <code>callback</code> function. <br/>
	If <code>false</code>, then the node proxies of the ancestor nodes are passed to the <code>callback</code> function.

	* @returns {sap.ui.vk.dvl.NodeHierarchy} <code>this</code> to allow method chaining.
	* @public
	*
	*/
	NodeHierarchy.prototype.enumerateAncestors = function(nodeRef, callback, passNodeRef) {
		var nodeRefs = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_PARENTS)).ParentNodes;

		if (passNodeRef) {
			nodeRefs.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeRefs.forEach(function(nodeRef) {
					nodeProxy.init(this, nodeRef);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	 * Creates a node proxy object.
	 *
	 * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
	 *
	 * @param {any} nodeRef The node reference for which to create a proxy object.
	 * @returns {sap.ui.vk.dvl.NodeProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createNodeProxy = function(nodeRef) {
		var nodeProxy = new NodeProxy(this, nodeRef);
		this._nodeProxies.push(nodeProxy);
		return nodeProxy;
	};

	/**
	 * Destroys the node proxy object.
	 *
	 * @param {sap.ui.vk.dvl.NodeProxy} nodeProxy The node proxy object.
	 * @returns {sap.ui.vk.dvl.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyNodeProxy = function(nodeProxy) {
		var index = this._nodeProxies.indexOf(nodeProxy);
		if (index >= 0) {
			this._nodeProxies.splice(index, 1)[0].destroy();
		}
		return this;
	};

	/**
	* Returns a list of IDs belonging to the children of a particular node.
	*
	* @param {any} nodeRef The node reference of the node whose children will be returned. If <code>nodeRef</code> is not passed to the <code>getChildren</code> function, the IDs of the root nodes will be returned.
	* @param {boolean} [stepIntoClosedNodes=false] Indicates whether to return only the child nodes of a <i>closed</i> node or not. If <code>true</code>, then the children of that closed node  will be returned. If <code>false</code>, then the children of that <i>closed</i> node will not be returned.
	* @returns {string[]} A list of IDs belonging to the children of <code>nodeRef</code>.
	* @public
	*/
	NodeHierarchy.prototype.getChildren = function(nodeRef, stepIntoClosedNodes) {
		// if nodeRef is not passed, but stepIntoClosedNodes is passed as a boolean
		if (typeof nodeRef === "boolean") {
			stepIntoClosedNodes = nodeRef;
			nodeRef = undefined;
		}

		if (nodeRef) {
			// Child nodes of the node.
			if (stepIntoClosedNodes || (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
				return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN)).ChildNodes;
			} else {
				// Do not step into closed nodes.
				return [];
			}
		} else {
			// Top level nodes.
			return getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN)).ChildNodes;
		}
	};

	/**
	* Returns a list of IDs belonging to the ancestors of a particular node.
	*
	* @param {any} nodeRef The node reference of the node whose ancestors will be returned.
	* @returns {string[]} A list of IDs belonging to the ancestors of <code>nodeRef</code>.
	* @public
	*/
	NodeHierarchy.prototype.getAncestors = function(nodeRef) {
		return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_PARENTS)).ParentNodes;
	};

	/**
	* Finds nodes in a scene via node name.
	*
	* @param {object} query JSON object containing the search parameters. <br/>
	* The following example shows what the structure of the <code>query</code> object should look like:
	* <pre>query = {
	* 	value: <i>string</i> | <i>string[]</i>,
	* 	predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	* 	caseSensitive: <i>true</i> | <i>false</i>
	* }</pre>
	* <br/>
	* <ul>
	* 	<li>
	* 		<b>query.value</b><br/> A string or an array of strings containing the name of a node or names of nodes.
	* 		If no value is specified, then all nodes in the scene will be returned.<br/>
	* 		The following example shows a single string being passed in:
	* 		<pre>value: "Box #14"</pre>
	* 		The following example shows an array of strings being passed in:
	* 		<pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	* 	</li>
	* 	<li>
	* 		<b>query.predicate</b><br/> Represents a search mode.
	* 		The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	* 		Using <code>"equals"</code> will search for nodes with names that exactly match the provided string or array of strings. <br/>
	* 		Using <code>"contains"</code> will search for nodes with names containing all or part of the provided string or array of strings. <br/>
	* 		Using <code>"startsWith"</code> will search for nodes with names starting with the provided string or array of strings. <br/>
	* 		If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	* 		If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	* 		If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	* 	</li>
	* </ul>
	* @returns {string[]} A list of IDs belonging to nodes that matched the search criteria.
	* @public
	*/
	NodeHierarchy.prototype.findNodesByName = function(query) {

			// searchType is in this case by name
		var searchType = sap.ve.dvl.DVLFINDNODETYPE.DVLFINDNODETYPE_NODE_NAME,
			// allSearchResults is the array that the function returns
			allSearchResults = [],
			// search mode can be  "equals", "contains", "startsWith",
			// each of these modes having a caseSensitive true or false option
			searchMode,
			searchStringsArray;

		if (query === undefined || query === null || jQuery.isEmptyObject(query)) {
			// this condition caters for the case where the query is null, undefined or empty object
			// we search for nodes that contain an empty string ("");
			searchMode = searchDictionary.modeDictionary.contains(false);
			searchStringsArray = [ "" ];
		} else {
			// query object validation
			if (query.value === undefined || query.value === null || query.value === "") {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT6.summary), Messages.VIT6.code, "sap.ui.vk.dvl.NodeHierarchy");
			}

			var predicate = query.hasOwnProperty("predicate") ? query.predicate : "equals";
			if (predicate === undefined || predicate === null || predicate === "") {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT7.summary), Messages.VIT7.code, "sap.ui.vk.dvl.NodeHierarchy");
			} else if ([ "equals", "contains", "startsWith" ].indexOf(predicate) === -1) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT8.summary), Messages.VIT8.code, "sap.ui.vk.dvl.NodeHierarchy");
			}

			searchMode = searchDictionary.modeDictionary[predicate](query.caseSensitive);
			// If we search for a string, we create an array having one element, the string.
			// If we search for an array of strings, we leave the array as is.
			searchStringsArray = (typeof query.value === "string") ? [ query.value ] : query.value;
		}

		// We multiple calls to the DVL api; one call pe search string from array of search strings.
		for (var i = 0; i < searchStringsArray.length; i++) {
			allSearchResults = allSearchResults.concat(getJSONObject(this._dvl.Scene.FindNodes(this._dvlSceneRef, searchType, searchMode, searchStringsArray[i])).nodes);
		}

		// We sort the array and remove all duplicate node references
		return jQuery.sap.unique(allSearchResults);
	};

	/**
	 * Creates a layer proxy object.
	 *
	 * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
	 *
	 * @param {string} layerId The layer ID for which to create a proxy object.
	 * @returns {sap.ui.vk.LayerProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createLayerProxy = function(layerId) {
		var layerProxy = new LayerProxy(this, layerId);
		this._layerProxies.push(layerProxy);
		return layerProxy;
	};

	/**
	 * Destroys the layer proxy object.
	 *
	 * @param {sap.ui.vk.LayerProxy} layerProxy The layer proxy object.
	 * @returns {sap.ui.vk.LayerProxy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyLayerProxy = function(layerProxy) {
		var index = this._layerProxies.indexOf(layerProxy);
		if (index >= 0) {
			this._layerProxies.splice(index, 1)[0].destroy();
		}
		return this;
	};

	/**
	* Returns a list of layer IDs.
	*
	* @returns {string[]} A list of layer IDs.
	* @public
	*/
	NodeHierarchy.prototype.getLayers = function() {
		return getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_LAYERS)).Layers;
	};

	/**
	* Returns a list of hotspot IDs.
	*
	* @returns {string[]} A list of hotspot IDs.
	* @public
	*/
	NodeHierarchy.prototype.getHotspotNodeIds = function() {
		var hotspotNodeRefs = getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_HOTSPOTS).ChildNodes);
		return hotspotNodeRefs.length > 0 ? hotspotNodeRefs : this._getLegacyHotspotNodeIds();
	};

	/**
	* Returns a list of node references which are sitting the Hotspots layer. This is used for the legacy hotspots.
	*
	* @returns {string[]} A list of node references.
	* @private
	*/
	NodeHierarchy.prototype._getLegacyHotspotNodeIds = function() {
		var allLayerIds = this.getLayers(),
		    hotspotNodeRefs = [];

		// searching the layer which happens to be named "Hotspots".
		// By convention, this layer will contain the actual hotspots.
		for (var i = 0; i < allLayerIds.length; i++) {
			// create layer proxy
			var layerProxy = this.createLayerProxy(allLayerIds[i]),
			    layerName = layerProxy.getName();
			// check name
			if (layerName.toLowerCase() === "hotspots") {
				hotspotNodeRefs = layerProxy.getNodes();
				this.destroyLayerProxy(layerProxy);
				break;
			}
			this.destroyLayerProxy(layerProxy);
		}
		return hotspotNodeRefs;
	};

	/**
	 * Creates a new node.
	 * @param {any} parentNode          The parent node reference where the created node is added to. If equals <code>null</code> the newly
	 *                                  created node is a top level node.
	 * @param {string} name             The name of the new node.
	 * @param {any} insertBeforeNode    The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                                  node is added at the end of the parent's list of nodes.
	 * @returns {any}                   The node reference of the newly created node.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.createNode = function(parentNode, name, insertBeforeNode) {
		var nodeRef = this._dvl.Scene.CreateNode(this._dvlSceneRef, parentNode, name, insertBeforeNode);
		this.fireNodeCreated({ nodeRef: nodeRef, nodeId: nodeRef });
		this.fireChanged();
		return nodeRef;
	};

	/**
	 * Creates a copy of an existing node.
	 * @param {any} nodeToCopy          The reference to the node to copy.
	 * @param {any} parentNode          The reference to the parent node where the created node is added to. If equals <code>null</code> the newly
	 *                                  created node is a top level node.
	 * @param {string} name             The name of the new node.
	 * @param {any} insertBeforeNode    The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                                  node is added at the end of the parent's list of nodes.
	 * @returns {any}                   The node reference of the newly created node.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.createNodeCopy = function(nodeToCopy, parentNode, name, insertBeforeNode) {
		var nodeRef = this._dvl.Scene.CreateNodeCopy(this._dvlSceneRef, nodeToCopy, parentNode, sap.ve.dvl.DVLCREATENODECOPYFLAG.COPY_CHILDREN, name, insertBeforeNode);
		this.fireNodeCreated({ nodeRef: nodeRef, nodeId: nodeRef });
		this.fireChanged();
		return nodeRef;
	};

	/**
	 * Deletes a node and destroys it.
	 * @param {any} nodeRef The reference to the node to destroy.
	 * @returns {sap.ui.vk.dvl.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.removeNode = function(nodeRef) {
		this.fireNodeRemoving({ nodeRef: nodeRef, nodeId: nodeRef });
		this._dvl.Scene.DeleteNode(this._dvlSceneRef, nodeRef);
		this.fireChanged();
		return this;
	};

	return NodeHierarchy;
});

}; // end of sap/ui/vk/dvl/NodeHierarchy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.Scene') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the Scene class.
jQuery.sap.declare('sap.ui.vk.dvl.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/Scene",[
	"jquery.sap.global", "../library", "../Scene", "./NodeHierarchy"
], function(jQuery, library, SceneBase, NodeHierarchy) {
	"use strict";

	/**
	 * Constructor for a new Scene.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created via {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector}.
	 *
	 * @class Provides the interface for the 3D model.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created via {@link sap.ui.vk.ContentConnector sap.ui.vk.ContentConnector}.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.Scene
	 * @alias sap.ui.vk.dvl.Scene
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Scene = SceneBase.extend("sap.ui.vk.dvl.Scene", /** @lends sap.ui.vk.dvl.Scene.prototype */ {
		metadata: {
			publicMethods: [
				"getDefaultNodeHierarchy",
				"getId",
				"getSceneRef"
			]
		},

		constructor: function(graphicsCore, dvlSceneId) {
			// Replace EventProvider with SceneBase.
			SceneBase.call(this);

			this._id = jQuery.sap.uid();
			this._graphicsCore = graphicsCore;
			this._dvlSceneRef = dvlSceneId;
			this._defaultNodeHierarchy = null;
		}
	});


	Scene.prototype.destroy = function() {
		if (this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy.destroy();
			this._defaultNodeHierarchy = null;
		}
		this._dvlSceneRef = null;
		this._graphicsCore = null;

		SceneBase.prototype.destroy.call(this);
	};

	/**
	 * Gets the unique ID of the Scene object.
	 * @returns {string} The unique ID of the Scene object.
	 * @public
	 */
	Scene.prototype.getId = function() {
		return this._id;
	};

	/**
	 * Gets the GraphicsCore object this Scene object belongs to.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} The GraphicsCore object this Scene object belongs to.
	 * @public
	 */
	Scene.prototype.getGraphicsCore = function() {
		return this._graphicsCore;
	};

	/**
	 * Gets the default node hierarchy in the Scene object.
	 * @returns {sap.ui.vk.NodeHierarchy} The default node hierarchy in the Scene object.
	 * @public
	 */
	Scene.prototype.getDefaultNodeHierarchy = function() {
		if (!this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy = new NodeHierarchy(this);
		}
		return this._defaultNodeHierarchy;
	};

	/**
	 * Gets the DVL scene ID.
	 * @returns {string} The DVL scene ID.
	 * @public
	 */
	Scene.prototype.getSceneRef = function() {
		return this._dvlSceneRef;
	};

	return Scene;
});

}; // end of sap/ui/vk/dvl/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.NodeHierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeHierarchy class.
jQuery.sap.declare('sap.ui.vk.threejs.NodeHierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ObjectPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/NodeHierarchy",[
	"jquery.sap.global", "../NodeHierarchy", "sap/ui/base/ObjectPool", "./BaseNodeProxy", "./NodeProxy", "../Messages"
], function(jQuery, NodeHierarchyBase, ObjectPool, BaseNodeProxy, NodeProxy, Messages) {
	"use strict";

	var searchModeFunctions = {
		equals: function(str, searchString) {
			return str === searchString;
		},
		contains: function(str, searchString) {
			return str.indexOf(searchString) !== -1;
		},
		startsWith: function(str, searchString) {
			return str.indexOf(searchString) === 0;
		}
	};

	/**
	 * Constructor for a new NodeHierarchy.
	 *
	 * @class
	 * Provides the ability to explore a Scene object's node structure.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
	 *
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.NodeHierarchy
	 * @alias sap.ui.vk.threejs.NodeHierarchy
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeHierarchy = NodeHierarchyBase.extend("sap.ui.vk.threejs.NodeHierarchy", /** @lends sap.ui.vk.threejs.NodeHierarchy.prototype */ {
		metadata: {
			publicMethods: [
				"createLayerProxy",
				"createNode",
				"createNodeCopy",
				"createNodeProxy",
				"destroyLayerProxy",
				"destroyNodeProxy",
				"enumerateAncestors",
				"enumerateChildren",
				"findNodesById",
				"findNodesByMetadata",
				"findNodesByName",
				"getAncestors",
				"getChildren",
				"getLayers",
				"getSceneRef",
				"getScene",
				"removeNode"
			]
		},

		_baseNodeProxyPool: new ObjectPool(BaseNodeProxy),

		constructor: function(scene) {
			NodeHierarchyBase.call(this);

			this._scene = scene;
			this._nodeProxies = [];
		}
	});

	NodeHierarchy.prototype.destroy = function() {
		this._nodeProxies.slice().forEach(this.destroyNodeProxy, this);
		this._scene = null;

		NodeHierarchyBase.prototype.destroy.call(this);
	};

	/**
	 * Gets the Scene object the node hierarchy belongs to.
	 * @returns {sap.ui.vk.Scene} The Scene object the node hierarchy belongs to.
	 * @public
	 */
	NodeHierarchy.prototype.getScene = function() {
		return this._scene;
	};

	/**
	 * Gets the scene reference that this NodeHierarchy object wraps.
	 * @returns {any} The scene reference that this NodeHierarchy object wraps.
	 * @public
	 */
	NodeHierarchy.prototype.getSceneRef = function() {
		return this._scene.getSceneRef();
	};


	/**
	 * Enumerates the child nodes of a particular node in the Scene object.
	 *
	 * This method gets the child nodes of a particular node, and then calls the <code>callback</code> function to which it passes the child nodes to one by one.<br/>
	 * The <code>BaseNodeProxy</code> objects passed to the <code>callback</code> fuction are temporary objects, which are reset after each call to the <code>callback</code> function.<br/>
	 *
	 * @param {any} nodeRef The reference object of a node whose child nodes we want enumerated.<br/>
	 * When <code>nodeRef</code> is specified, the child nodes of this node are enumerated.<br/>
	 * When no <code>nodeRef</code> is specified, only the top level nodes are enumerated.<br/>

	 * @param {function} callback A function to call when the child nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	 * @param {boolean} [stepIntoClosedNodes=false] Indicates whether to enumerate the child nodes if the node is <i>closed</i>. <br/>
	 * If <code>true</code>, the children of that closed node will be enumerated <br/>
	 * If <code>false</code>, the children of that node will not be enumerated<br/>

	 * @param {boolean} [passNodeRef=false] Indicates whether to pass the node references of the child nodes, or the whole node proxy to the <code>callback</code> function. <br/>
	 * If <code>true</code>, then only the node references of the child nodes are passed to the <code>callback</code> function. <br/>
	 * If <code>false</code>, then the node proxies created from the child node references are passed to the <code>callback</code> function.

	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.enumerateChildren = function(nodeRef, callback, stepIntoClosedNodes, passNodeRef) {
		if (typeof nodeRef === "function") {
			// The 'nodeRef' parameter is omitted, let's shift the parameters to right.
			passNodeRef = stepIntoClosedNodes;
			stepIntoClosedNodes = callback;
			callback = nodeRef;
			nodeRef = undefined;
		}

		var nodeRefs = this.getChildren(nodeRef, stepIntoClosedNodes);

		if (passNodeRef) {
			nodeRefs.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeRefs.forEach(function(nodeRef) {
					nodeProxy.init(this, nodeRef);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	* Enumerates the ancestor nodes of a particular node in the Scene object.
	*
	* This method enumerates the ancestor nodes of a particular node, and then calls the <code>callback</code> function, to which it passes the ancestor nodes to one by one.<br/>
	* The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, they are reset after each call to the <code>callback</code> function.<br/>
	* The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
	*
	* @param {any} nodeRef The reference object of a node whose ancestore nodes we want enumerated.

	* @param {function} callback A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}, or string if parameter <code>passNodeRef</code> parameter is <code>true</code>.

	* @param {boolean} [passNodeRef=false] Indicates whether to pass the node references of the ancestore nodes, or the whole node proxy to the <code>callback</code> function.<br/>
	If <code>true</code>, then only the node references of the ancestor nodes are passed to the <code>callback</code> function. <br/>
	If <code>false</code>, then the node proxies of the ancestor nodes are passed to the <code>callback</code> function.

	* @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	* @public
	*
	*/
	NodeHierarchy.prototype.enumerateAncestors = function(nodeRef, callback, passNodeRef) {
		var nodeRefs = this.getAncestors(nodeRef);

		if (passNodeRef) {
			nodeRefs.forEach(callback);
		} else {
			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeRefs.forEach(function(nodeRef) {
					nodeProxy.init(this, nodeRef);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}
		}

		return this;
	};

	/**
	 * Creates a node proxy object.
	 *
	 * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
	 *
	 * @param {any} nodeRef The reference object for which to create a proxy object.
	 * @returns {sap.ui.vk.NodeProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createNodeProxy = function(nodeRef) {
		var nodeProxy = new NodeProxy(this, nodeRef);
		this._nodeProxies.push(nodeProxy);
		return nodeProxy;
	};

	/**
	 * Destroys the node proxy object.
	 *
	 * @param {sap.ui.vk.NodeProxy} nodeProxy The node proxy object.
	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyNodeProxy = function(nodeProxy) {
		var index = this._nodeProxies.indexOf(nodeProxy);
		if (index >= 0) {
			this._nodeProxies.splice(index, 1)[0].destroy();
		}
		return this;
	};

	/**
	* Returns a list of reference objects belonging to the children of a particular node.
	*
	* @param {any} nodeRef The reference object of the node whose children will be returned. If <code>nodeRef</code> is not passed to the <code>getChildren</code> function, the reference objects of the root nodes will be returned.
	* @param {boolean} [stepIntoClosedNodes=false] Indicates whether to return only the child nodes of a <i>closed</i> node or not. If <code>true</code>, then the children of that closed node  will be returned. If <code>false</code>, then the children of that <i>closed</i> node will not be returned.
	* @returns {any[]} A list of reference objects belonging to the children of <code>nodeRef</code>.
	* @public
	*/
	NodeHierarchy.prototype.getChildren = function(nodeRef, stepIntoClosedNodes) {
		// if nodeRef is not passed, but stepIntoClosedNodes is passed as a boolean
		if (typeof nodeRef === "boolean") {
			stepIntoClosedNodes = nodeRef;
			nodeRef = undefined;
		}

		if (!nodeRef) {
			nodeRef = this._scene.getSceneRef(); // the scene root node
		}

		return (stepIntoClosedNodes || !nodeRef.userData.closed) ? nodeRef.children.slice() : [];
	};

	/**
	* Returns a list of reference objects belonging to the ancestors of a particular node.
	*
	* @param {any} nodeRef The reference object of the node whose ancestors will be returned.
	* @returns {any[]} A list of reference objects belonging to the ancestors of <code>nodeRef</code>.
	* @public
	*/
	NodeHierarchy.prototype.getAncestors = function(nodeRef) {
		var nodeRefs = [];
		nodeRef.traverseAncestors(function(parent) {
			// ancestor array starts from top
			nodeRefs.unshift(parent);
		});
		if (nodeRefs.length > 0 && nodeRefs[nodeRefs.length - 1] === this._scene.getSceneRef()) {
			nodeRefs.length--; // ignore root node
		}
		return nodeRefs;
	};

	/**
	* Finds nodes in a scene via node name.
	*
	* @param {object} query JSON object containing the search parameters. <br/>
	* The following example shows what the structure of the <code>query</code> object should look like:
	* <pre>query = {
	* 	value: <i>string</i> | <i>string[]</i>,
	* 	predicate: <i>"equals"</i> | <i>"contains"</i> | <i>"startsWith"</i>,
	* 	caseSensitive: <i>true</i> | <i>false</i>
	* }</pre>
	* <br/>
	* <ul>
	* 	<li>
	* 		<b>query.value</b><br/> A string or an array of strings containing the name of a node or names of nodes.
	* 		If no value is specified, then all nodes in the scene will be returned.<br/>
	* 		The following example shows a single string being passed in:
	* 		<pre>value: "Box #14"</pre>
	* 		The following example shows an array of strings being passed in:
	* 		<pre>value: ["Box #3", "box #4", "BOX #5"]</pre>
	* 	</li>
	* 	<li>
	* 		<b>query.predicate</b><br/> Represents a search mode.
	* 		The available search modes are <code>"equals"</code>, <code>"contains"</code>, and <code>"startsWith"</code>. <br/>
	* 		Using <code>"equals"</code> will search for nodes with names that exactly match the provided string or array of strings. <br/>
	* 		Using <code>"contains"</code> will search for nodes with names containing all or part of the provided string or array of strings. <br/>
	* 		Using <code>"startsWith"</code> will search for nodes with names starting with the provided string or array of strings. <br/>
	* 		If no value is specified, the search mode will default to <code>"equals"</code>. <br/><br/>
	* 	</li>
	* 	<li>
	* 		<b>query.caseSensitive</b><br/> Indicates whether the search should be case sensitive or not. <br/>
	* 		If <code>true</code>, the search will be case sensitive, and <code>false</code> indicates otherwise. <br/>
	* 		If no value is specified, <code>caseSensitive</code> will default to <code>false</code> (that is, the search will be a case-insensitive search).
	* 	</li>
	* </ul>
	* @returns {THREE.Object3D[]} A list of reference objects belonging to nodes that matched the search criteria.
	* @public
	*/
	NodeHierarchy.prototype.findNodesByName = function(query) {
		var result = [];
		if (query === undefined || query === null || jQuery.isEmptyObject(query)) {
			// If the query is empty then find all nodes in the scene.
			this._scene.getSceneRef().children.forEach(function(rootChild) {
				rootChild.traverse(function(obj3D) {
					result.push(obj3D);
				});
			});
		} else {
			// query object validation
			var searchModeFunction = searchModeFunctions[query.predicate || "equals"];
			if (searchModeFunction === undefined) {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT8.summary), Messages.VIT8.code, "sap.ui.vk.threejs.NodeHierarchy");
			} else if (!Array.isArray(query.value) && typeof query.value !== "string") {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT6.summary), Messages.VIT6.code, "sap.ui.vk.threejs.NodeHierarchy");
			} else {
				// If we search for a string, we create an array having one element, the string.
				// If we search for an array of strings, we leave the array as is.
				var searchStringsArray = Array.isArray(query.value) ? query.value : [ query.value ];
				if (!query.caseSensitive) {
					for (var i in searchStringsArray) {
						searchStringsArray[i] = searchStringsArray[i].toLowerCase();
					}
				}

				this._scene.getSceneRef().children.forEach(function(rootChild) {
					rootChild.traverse(function(obj3D) {
						var name = obj3D.name || "";
						if (!query.caseSensitive) {
							name = name.toLowerCase();
						}
						for (var i in searchStringsArray) {
							if (searchModeFunction(name, searchStringsArray[i])) {
								result.push(obj3D);
								break;
							}
						}
					});
				});
			}
		}

		return result;
	};

	/**
	 * Creates a layer proxy object.
	 *
	 * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
	 *
	 * @param {string} layerId The layer ID for which to create a proxy object.
	 * @returns {sap.ui.vk.LayerProxy} The proxy object.
	 * @public
	 */
	NodeHierarchy.prototype.createLayerProxy = function(layerId) {
		// TODO: implement.
		return null;
	};

	/**
	 * Destroys the layer proxy object.
	 *
	 * @param {sap.ui.vk.LayerProxy} layerProxy The layer proxy object.
	 * @returns {sap.ui.vk.LayerHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 */
	NodeHierarchy.prototype.destroyLayerProxy = function(layerProxy) {
		// TODO: implement.
		return this;
	};

	/**
	* Returns a list of layer IDs.
	*
	* @returns {string[]} A list of layer IDs.
	* @public
	*/
	NodeHierarchy.prototype.getLayers = function() {
		// TODO: implement.
		return [];
	};

	/**
	* Returns a list of hotspot IDs.
	*
	* @returns {string[]} A list of hotspot IDs.
	* @public
	*/
	NodeHierarchy.prototype.getHotspotNodeIds = function() {
		// TODO: implement.
		return null;
	};

	NodeHierarchy.prototype.attachChanged = function(data, func, listener) {
		return this.attachEvent("changed", data, func, listener);
	};

	NodeHierarchy.prototype.detachChanged = function(data, func, listener) {
		return this.detachEvent("changed", data, func, listener);
	};

	NodeHierarchy.prototype.fireChanged = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("changed", parameters, allowPreventDefault, enableEventBubbling);
	};

	NodeHierarchy.prototype.attachNodeCreated = function(data, func, listener) {
		return this.attachEvent("nodeCreated", data, func, listener);
	};

	NodeHierarchy.prototype.detachNodeCreated = function(data, func, listener) {
		return this.detachEvent("nodeCreated", data, func, listener);
	};

	NodeHierarchy.prototype.fireNodeCreated = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("nodeCreated", parameters, allowPreventDefault, enableEventBubbling);
	};

	NodeHierarchy.prototype.attachNodeRemoving = function(data, func, listener) {
		return this.attachEvent("nodeRemoving", data, func, listener);
	};

	NodeHierarchy.prototype.detachNodeRemoving = function(data, func, listener) {
		return this.detachEvent("nodeRemoving", data, func, listener);
	};

	NodeHierarchy.prototype.fireNodeRemoving = function(parameters, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("nodeRemoving", parameters, allowPreventDefault, enableEventBubbling);
	};

	/**
	 * Creates a new node.
	 * @param {THREE.Object3D} parentNode	The reference object of the parent node where the created node is added to. If equals <code>null</code>
	 *                                      the newly created node is a top level node.
	 * @param {string} name                 The name of the new node.
	 * @param {THREE.Object3D} insertBeforeNode The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                                      node is added at the end of the parent's list of nodes.
	 * @returns {THREE.Object3D} The reference object of the newly created node.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.createNode = function(parentNode, name, insertBeforeNode) {
		if (!parentNode) {
			parentNode = this._scene.getSceneRef(); // the scene root node
		}

		var insertIndex = parentNode.children.indexOf(insertBeforeNode);
		var object3D = new THREE.Group();
		object3D.name = name;
		parentNode.add(object3D);
		jQuery.sap.assert(parentNode.children[parentNode.children.length - 1] === object3D, "The newly created node must be at the end of the children array.");
		if (insertIndex >= 0) {
			parentNode.children.splice(insertIndex, 0, parentNode.children.pop());
		}

		this.fireNodeCreated({ nodeRef: object3D, nodeId: object3D });
		this.fireChanged();
		return object3D;
	};

	/**
	 * Creates a copy of an existing node.
	 * @param {any} nodeToCopy              The reference object of the node to copy.
	 * @param {any} parentNode              The reference object of the parent node where the created node is added to. If equals <code>null</code>
	 *                                      the newly created node is a top level node.
	 * @param {string} name                 The name of the new node.
	 * @param {any}    insertBeforeNode     The created node is added before this specified node. If equals <code>null</code> the newly created
	 *                                      node is added at the end of the parent's list of nodes.
	 * @returns {any}                       The reference object of the newly created node.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.createNodeCopy = function(nodeToCopy, parentNode, name, insertBeforeNode) {
		if (!parentNode) {
			parentNode = this._scene.getSceneRef(); // the scene root node
		}

		var insertIndex = parentNode.children.indexOf(insertBeforeNode);
		var clone = nodeToCopy.clone(true);
		clone.name = name;
		parentNode.add(clone);
		jQuery.sap.assert(parentNode.children[parentNode.children.length - 1] === clone, "The newly created node must be at the end of the children array.");
		if (insertIndex >= 0) {
			parentNode.children.splice(insertIndex, 0, parentNode.children.pop());
		}

		this.fireNodeCreated({ nodeRef: clone, nodeId: clone });
		this.fireChanged();
		return clone;
	};

	/**
	 * Deletes a node and destroys it.
	 * @param {any} nodeRef The reference object of the node to destroy.
	 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.48.0
	 */
	NodeHierarchy.prototype.removeNode = function(nodeRef) {
		if (nodeRef && nodeRef.parent) {
			this.fireNodeRemoving({ nodeRef: nodeRef, nodeId: nodeRef });
			nodeRef.parent.remove(nodeRef);
			this.fireChanged();
		}
		return this;
	};

	return NodeHierarchy;
});

}; // end of sap/ui/vk/threejs/NodeHierarchy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.Scene') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */


// Provides the Scene class.
jQuery.sap.declare('sap.ui.vk.threejs.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/Scene",[
	"jquery.sap.global", "../Scene", "./NodeHierarchy"
], function(jQuery, SceneBase, NodeHierarchy) {
	"use strict";

	/**
	 * Constructor for a new Scene.
	 *
	 * @class Provides the interface for the 3D model.
	 *
	 * The objects of this class should not be created directly.
	 *
	 * @param {THREE.Scene} scene The three.js scene object.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.Scene
	 * @alias sap.ui.vk.threejs.Scene
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Scene = SceneBase.extend("sap.ui.vk.threejs.Scene", /** @lends sap.ui.vk.threejs.Scene.prototype */ {
		metadata: {
			publicMethods: [
				"getDefaultNodeHierarchy",
				"getId",
				"getSceneRef"
			]
		},

		constructor: function(scene) {
			SceneBase.call(this);

			this._id = jQuery.sap.uid();
			this._scene = scene;
			this._state = null;
			this._defaultNodeHierarchy = null;
		}
	});

	Scene.prototype.destroy = function() {
		if (this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy.destroy();
			this._defaultNodeHierarchy = null;
		}
		this._state = null;
		this._scene = null;

		SceneBase.prototype.destroy.call(this);
	};

	/**
	 * Gets the unique ID of the Scene object.
	 * @returns {string} The unique ID of the Scene object.
	 * @public
	 */
	Scene.prototype.getId = function() {
		return this._id;
	};

	/**
	 * Gets the default node hierarchy in the Scene object.
	 * @returns {sap.ui.vk.NodeHierarchy} The default node hierarchy in the Scene object.
	 * @public
	 */
	Scene.prototype.getDefaultNodeHierarchy = function() {
		if (!this._defaultNodeHierarchy) {
			this._defaultNodeHierarchy = new NodeHierarchy(this);
		}
		return this._defaultNodeHierarchy;
	};

	/**
	 * Gets the scene reference for the Scene object.
	 * @returns {THREE.Scene} The three.js scene.
	 * @public
	 */
	Scene.prototype.getSceneRef = function() {
		return this._scene;
	};

	Scene.prototype._setState = function(state) {
		this._state = state;
	};

	return Scene;
});

}; // end of sap/ui/vk/threejs/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.Viewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
// Provides control sap.ui.vk.threejs.Viewport.
jQuery.sap.declare('sap.ui.vk.threejs.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.threejs.thirdparty.three'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/Viewport",[ "jquery.sap.global", "../library", "../ViewportBase", "sap/ui/core/ResizeHandler",
	"../Loco", "./thirdparty/three", "../ContentConnector", "../ViewStateManager", "./ViewportGestureHandler" ],
	function(jQuery, library, ViewportBase, ResizeHandler, Loco, threeJs, ContentConnector, ViewStateManager, ViewportGestureHandler) {
		"use strict";

		/**
		 *  Constructor for a new three js viewport.
		 *
		 * @class Provides a base class control for three js canvas.
		 *
		 * @public
		 * @author SAP SE
		 * @version 1.50.7
		 * @extends sap.ui.core.Control
		 * @alias sap.ui.vk.threejs.Viewport
		 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
		 */
		var Viewport = ViewportBase.extend("sap.ui.vk.threejs.Viewport", /** @lends sap.ui.vk.threejs.Viewport.prototype  */ {
			metadata: {
				library: "sap.ui.vk",
				publicMethods: [
					"setScene",
					"getScene",
					"setCamera", // need to find out if we want to expose threejs object directly or not BEGIN
					"getCamera",
					"getRenderer", // END
					"hitTest",
					"tap",
					"render"
				]
			}
		});

		var basePrototype = Viewport.getMetadata().getParent().getClass().prototype;

		Viewport.prototype.init = function() {

			if (basePrototype.init) {
				basePrototype.init.call(this);
			}

			this._resizeListenerId = null;
			this._renderLoopRequestId = 0;
			this._renderLoopFunction = this._renderLoop.bind(this);

			var dummyWidth = 1; // resize event will correct this later
			var dummyHeight = 1;

			this._renderer = new THREE.WebGLRenderer({ antialias: true });
			this._renderer.setClearColor(0xf0f0f0);
			this._renderer.setPixelRatio(window.devicePixelRatio);
			this._renderer.setSize(dummyWidth, dummyHeight);

			// default scene and camera since we want this viewport to function by its own.
			var near = 1;
			var far = 20000;
			this._camera = new THREE.OrthographicCamera(dummyWidth / -2, dummyWidth / 2, dummyHeight / 2, dummyHeight / -2, near, far);

			this._camera.position.set(0, 0, 10000);
			this._camera.zoom = 10;


			this._viewportGestureHandler = new ViewportGestureHandler(this);

			this._loco = new Loco();
			this._loco.addHandler(this._viewportGestureHandler);
		};

		Viewport.prototype.exit = function() {
			this._loco.removeHandler(this._viewportGestureHandler);
			this._viewportGestureHandler.destroy();

			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			this._stopRenderLoop();

			this.setScene(null);
			this.setCamera(null);
			this._renderer = null;
			this._loco = null;
			this._viewportGestureHandler = null;

			if (basePrototype.exit) {
				basePrototype.exit.call(this);
			}
		};

		/**
		 * Starts the render loop.
		 * @returns {sap.ui.vk.threejs.Viewport} <code>this</code> to allow method chaining.
		 * @private
		 */
		Viewport.prototype._startRenderLoop = function() {
			if (!this._renderLoopRequestId) {
				this._renderLoopRequestId = window.requestAnimationFrame(this._renderLoopFunction);
			}
			return this;
		};

		/**
		 * Stops the render loop.
		 * @returns {sap.ui.vk.threejs.Viewport} <code>this</code> to allow method chaining.
		 * @private
		 */
		Viewport.prototype._stopRenderLoop = function() {
			if (this._renderLoopRequestId) {
				window.cancelAnimationFrame(this._renderLoopRequestId);
				this._renderLoopRequestId = 0;
			}
			return this;
		};

		Viewport.prototype.onBeforeRendering = function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			this._stopRenderLoop();
		};

		Viewport.prototype.onAfterRendering = function() {

			var domRef = this.getDomRef();
			domRef.appendChild(this._renderer.domElement);

			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));

			var rect = domRef.getBoundingClientRect();
			this._handleResize({
				size: {
					width: rect.width,
					height: rect.height
				}
			});

			this._startRenderLoop();
		};

		Viewport.prototype._updateCamera = function(width, height) {
			if (!this._camera) {
				return false;
			}

			if (this._camera.isPerspectiveCamera) {
				this._camera.aspect = width / height;
			} else {
				this._camera.left = width / -2;
				this._camera.right = width / 2;
				this._camera.top = height / 2;
				this._camera.bottom = height / -2;
			}
			this._camera.updateProjectionMatrix();

			return true;
		};

		Viewport.prototype._handleResize = function(event) {

			if (!this._camera || !this._renderer) {
				// nothing to do
				return false;
			}

			var width = event.size.width;
			var height = event.size.height;
			this._updateCamera(width, height);
			this._renderer.setSize(width, height);

			this.fireResize({
				size: {
					width: width,
					height: height
				}
			});

			return true;

		};

		Viewport.prototype.setScene = function(scene) {
			this._scene = scene;

			var nativeScene = this._scene ? this._scene.getSceneRef() : undefined;
			if (nativeScene) {

				// we create the scene and assume we have lights. Grab 1st one so we do 'CAD optimize light'
				// Basically light at your eye position
				var group;
				for (var i = 0; i < nativeScene.children.length; i++) {
					group = nativeScene.children[ i ];
					if (group.name === "DefaultLights" && group.children.length) {
						if (group.children[0] instanceof THREE.DirectionalLight) {
							this._eyePointLight = group.children[0];
						}
					}
				}
			}
		};

		Viewport.prototype.getScene = function() {
			return this._scene;
		};

		Viewport.prototype.setCamera = function(camera) {
			this._camera = camera;

			var devicePixelRatio = window.devicePixelRatio || 1;

			if (this._camera && this._renderer) {
				this._updateCamera(this._renderer.domElement.width * devicePixelRatio, this._renderer.domElement.height * devicePixelRatio);
			}
		};

		Viewport.prototype.getCamera = function() {
			return this._camera;
		};

		Viewport.prototype.getRenderer = function() {
			return this._renderer;
		};

		/**
 		 * Performs a screen-space hit test and gets the hit node reference, it must be called between beginGesture() and endGesture()
 		 *
 		 * @param {int} x: x coordinate in viewport to perform hit test
 	     * @param {int} y: y coordinate in viewport to perform hit test
 	     * @returns {object} object under the viewport coordinates (x, y).
 		 * @experimental
 		*/
		Viewport.prototype.hitTest = function(x, y) {
			var nativeScene = this._scene ? this._scene.getSceneRef() : undefined;
			if (!this._camera || !nativeScene) {
				return null;
			}

			var element = this._renderer.domElement;
			var mouse = new THREE.Vector2((x - element.offsetLeft) / element.width * 2 - 1,
				(element.offsetTop - y) / element.height * 2 + 1);
			var raycaster = new THREE.Raycaster();

			raycaster.setFromCamera(mouse, this._camera);
			var intersects = raycaster.intersectObjects(nativeScene.children, true);

			if (intersects && intersects.length) {
				return intersects[ 0 ];
			}

			return null;
		};

		/**
		 * Executes a click or tap gesture.
		 *
		 * @param {int} x The tap gesture's x-coordinate.
		 * @param {int} y The tap gesture's y-coordinate.
		 * @param {boolean} isDoubleClick Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code> indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
		 * @returns {sap.ui.vk.threejs.Viewport} this
		 */
		Viewport.prototype.tap = function(x, y, isDoubleClick) {

			if (!isDoubleClick) {
				if (this._viewStateManager) {
					var hit = this.hitTest(x, y); // NB: pass (x, y) in CSS pixels, hitTest will convert them to device pixels.

					var node = hit && hit.object;

					var parameters = {
						picked: node ? [ node ] : []
					};
					this.fireNodesPicked(parameters);

					if (this.getSelectionMode() === sap.ui.vk.SelectionMode.Exclusive) {
						this.exclusiveSelectionHandler(parameters.picked);
					} else if (this.getSelectionMode() === sap.ui.vk.SelectionMode.Sticky) {
						this.stickySelectionHandler(parameters.picked);
					}
				}

			} else {
				// do double click thingy
			}

			return this;
		};

		////////////////////////////////////////////////////////////////////////
		// Keyboard handling begins.

		var offscreenPosition = { x: -2, y: -2 };
		var rotateDelta = 2;
		var panDelta = 5;

		[
			{ key: "left", dx: -rotateDelta, dy: 0 },
			{ key: "right", dx: +rotateDelta, dy: 0 },
			{ key: "up", dx: 0, dy: -rotateDelta },
			{ key: "down", dx: 0, dy: +rotateDelta }
		].forEach(function(item) {
			Viewport.prototype[ "onsap" + item.key ] = function(event) {
				var cameraController = this._viewportGestureHandler._cameraController;
				cameraController.beginGesture(offscreenPosition.x, offscreenPosition.y);
				cameraController.rotate(item.dx, item.dy, true);
				cameraController.endGesture();
				event.preventDefault();
				event.stopPropagation();
			};
		});

		[
			{ key: "left", dx: -panDelta, dy: 0 },
			{ key: "right", dx: +panDelta, dy: 0 },
			{ key: "up", dx: 0, dy: -panDelta },
			{ key: "down", dx: 0, dy: +panDelta }
		].forEach(function(item) {
			Viewport.prototype[ "onsap" + item.key + "modifiers" ] = function(event) {
				if (event.shiftKey && !(event.ctrlKey || event.altKey || event.metaKey)) {
					var cameraController = this._viewportGestureHandler._cameraController;
					cameraController.beginGesture(offscreenPosition.x, offscreenPosition.y);
					cameraController.pan(item.dx, item.dy);
					cameraController.endGesture();
					event.preventDefault();
					event.stopPropagation();
				}
			};
		});

		[
			{ key: "minus", d: 0.98 },
			{ key: "plus", d: 1.02 }
		].forEach(function(item) {
			ViewportBase.prototype[ "onsap" + item.key ] = function(event) {
				var cameraController = this._viewportGestureHandler._cameraController;
				cameraController.beginGesture(this.$().width() / 2, this.$().height() / 2);
				cameraController.zoom(item.d);
				cameraController.endGesture();
				event.preventDefault();
				event.stopPropagation();
			};
		});

		// Keyboard handling ends.
		////////////////////////////////////////////////////////////////////////

		Viewport.prototype._handleVisibilityChanged =
		Viewport.prototype._handleSelectionChanged =
		Viewport.prototype._handleOpacityChanged =
		Viewport.prototype._handleTintColorChanged =
		Viewport.prototype._handleHighlightColorChanged =
			function(event) {
				this.render();
			};

		Viewport.prototype._renderLoop = function() {
			if (!this._renderer || !this.getDomRef()) {// break render loop
				this._renderLoopRequestId = 0;
				return;
			}

			if (this._viewportGestureHandler) {
				this._viewportGestureHandler.update();
			}

			// move light to eye position
			if (this._eyePointLight && this._camera) {
				this._eyePointLight.position.copy(this._camera.position);
				this._eyePointLight.position.normalize();
			}

			// TODO: onBefore Rendering callback?

			this.render();

			this._renderLoopRequestId = window.requestAnimationFrame(this._renderLoopFunction); // request next frame
		};

		Viewport.prototype.render = function() {
			var nativeScene = this._scene ? this._scene.getSceneRef() : undefined;
			if (!nativeScene || !this._camera || !this._renderer) {
				return;
			}
			this._renderer.render(nativeScene, this._camera);
		};

		Viewport.prototype._onAfterUpdateContentConnector = function() {
			this.setScene(this._contentConnector.getContent());
		};

		Viewport.prototype._onBeforeClearContentConnector = function() {
			this.setScene(null);
		};

		Viewport.prototype._handleContentReplaced = function(event) {
			var content = event.getParameter("newContent");
			if (!(content instanceof sap.ui.vk.threejs.Scene)) {
				content = null;
			}
			this.setScene(content);
		};

		Viewport.prototype._onAfterUpdateViewStateManager = function() {
		};

		Viewport.prototype._onBeforeClearViewStateManager = function() {
		};

		ContentConnector.injectMethodsIntoClass(Viewport);
		ViewStateManager.injectMethodsIntoClass(Viewport);

		return Viewport;
	});

}; // end of sap/ui/vk/threejs/Viewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.SceneTree'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTree",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/table/TreeTable", "sap/ui/table/Column", "sap/ui/model/json/JSONModel",
	"sap/m/Title", "./CheckEye", "./ContentConnector", "./ViewStateManager"
], function(jQuery, library, Control, TreeTable, Column, JSONModel,
		Title, CheckEye, ContentConnector, ViewStateManager) {
	"use strict";

	/**
	 * Constructor for a new SceneTree.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class Provides a hierarchical view of all the nodes in a given scene in table format.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.50.7
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.SceneTree
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTree = Control.extend("sap.ui.vk.SceneTree", /** @lends sap.ui.vk.SceneTree.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			aggregations: {
				_tree: {
					type: "sap.ui.table.TreeTable",
					multiple: false,
					visibility: "hidden"
				}
			},
			associations: {
				/**
				 * An association to the <code>ContentConnector</code> instance that manages content resources.
				 */
				contentConnector: {
					type: "sap.ui.vk.ContentConnector",
					multiple: false
				},

				/**
				 * An association to the <code>ViewStateManager</code> instance.
				 */
				viewStateManager: {
					type: "sap.ui.vk.ViewStateManager",
					multiple: false
				}
			}
		}
	});

	var getCheckEyeTooltip = function(isVisible, sceneTree) {
		return sap.ui.vk.getResourceBundle().getText(isVisible ? "SCENETREE_VISIBILITYSTATEVISIBLE" : "SCENETREE_VISIBILITYSTATEHIDDEN");
	};

	SceneTree.prototype._createNodeForSceneTree = function(nodeName, nodeRef, viewStateManager) {
		var nodeVisibility = viewStateManager.getVisibilityState(nodeRef);
		return {
			name: nodeName,
			id: nodeRef,
			visible: nodeVisibility,
			checkEyeTooltip: getCheckEyeTooltip(nodeVisibility, this)
		};
	};

	// This methods is kept here for backward compatibility.
	SceneTree.prototype.setScene = function(scene, viewStateManager) {
		this.setViewStateManager(viewStateManager);
		this._setScene(scene);
	};

	SceneTree.prototype._setScene = function(scene) {
		this._scene = scene;
		this.refresh();
	};

	SceneTree.prototype.init = function() {
		if (Control.prototype.init) {
			Control.prototype.init.apply(this);
		}

		var _title = new Title({
			text: sap.ui.vk.getResourceBundle().getText("SCENETREE_TITLE"),
			tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_TITLE")
		});

		_title.onAfterRendering = function() {
			var $this = this.$();
			$this.addClass("sapUiVkTitle");
		};

		this._visibilityColumnHeader = new CheckEye({
			checked: true,
			tooltip: getCheckEyeTooltip(true, this),
			change: function(event) {
				var isVisible = event.getParameters("checked").checked;
				this.setTooltip(getCheckEyeTooltip(isVisible, this));
				this._toggleVisibilityForAllChildren(this._model.getData(), isVisible);
			}.bind(this)
		});

		this._tree = new TreeTable({
			title: _title,
			columnHeaderHeight: 32,
			columns: [
				new Column({
					label: sap.ui.vk.getResourceBundle().getText("SCENETREE_NAME"),
					tooltip: sap.ui.vk.getResourceBundle().getText("SCENETREE_NAME"),
					template: new sap.m.Text({
						text: "{name}",
						maxLines: 1,
						tooltip: "{name}"
					}),
					resizable: false
				}),
				new Column({
					label: this._visibilityColumnHeader,
					template: new CheckEye({
						checked: "{visible}",
						tooltip: "{checkEyeTooltip}"
					}),
					width: "2.7em",
					resizable: false,
					hAlign: "Center"
				})
			],
			selectionMode: "MultiToggle",
			selectionBehavior: "RowSelector",
			visibleRowCountMode: "Fixed",
			expandFirstLevel: false,
			collapseRecursive: true,
			rowHeight: 32
		});

		this.setAggregation("_tree", this._tree, true);

		this._model = new JSONModel();
		this._tree.setModel(this._model);
		this._tree.bindRows({
			path: "/"
		});
		this._tree.attachRowSelectionChange(this._nodeSelection.bind(this));
		this._tree.getBinding("rows").attachChange(this._dataChange.bind(this));

		this._scene = null;

		this._syncing = false;
		this._selected = {};
		this._toggled = {};
		this._vsmSelected = {};

		this._forwardTimer = 0;
		this._reverseTimer = 0;

		this._vSyncing = false;
		this._lastChangeIsExpand = false;
		this._forwardVTimer = 0;
		this._reverseVTimer = 0;
		this._scrollTimer = 0;
		this._totalNodes = null;
	};

	SceneTree.prototype.onBeforeRendering = function() {
		this._tree.setVisible(true);
	};

	SceneTree.prototype._pathToNode = function(path, data, toReplace) {
		path = path.substr(1);
		if (data == undefined) {
			data = this._model.getData();
		}

		var node = data;
		var prev = node;
		var level = "";

		while (path.length > 0) {
			var pos = path.indexOf("/");

			if (pos >= 0) {
				level = path.substr(0, pos);
				path = path.substr(pos + 1);
			} else {
				level = path;
				path = "";
			}

			prev = node;
			node = prev[level];
		}

		if (toReplace != undefined) {
			prev[level] = toReplace;
		}

		return node;
	};

	SceneTree.prototype._indexToNodeRef = function(index) {
		var context = this._tree.getContextByIndex(index);
		if (context) {
			var node = this._pathToNode(context.sPath, context.oModel.oData);
			return node.id;
		} else {
			return null;
		}
	};

	SceneTree.prototype._deselectHidden = function() {
		var vsm = this._vsmSelected;
		var vs = this._viewStateManager;
		var desel = [];
		var undodesel = {};

		for (var i = 0; ; i++) {
			var ref = this._indexToNodeRef(i);
			if (ref == null) {
				break;
			}

			if (vsm.hasOwnProperty(ref)) {
				undodesel[ref] = true;
			}
		}

		for (var key in vsm) {
			if (vsm.hasOwnProperty(key) && vsm[key] == true && !undodesel.hasOwnProperty(key) && key != "") {
				desel.push(key);
				vsm[key] = false;
			}
		}

		if (desel.length > 0) {
			this._syncing = true;
			vs.setSelectionState(desel, false, false);
			this._syncing = false;
		}
	};

	SceneTree.prototype._nodeSelection = function(event) {
		if (this._tree.getBinding("rows")._aSelectedContexts != undefined) {
			// If we hit this, it means TreeTable is trying to restore selection, ignore it.
			return;
		}
		if (!this._syncing) {
			if (this._forwardTimer > 0) {
				clearTimeout(this._forwardTimer);
			}

			var param = event.mParameters;
			var indices = param.rowIndices;
			var curr = this._tree.getSelectedIndices();

			if (indices.length >= 1 && curr.length == 1) {
				if (indices.indexOf(curr[0]) != -1) {
					this._deselectHidden();
				}
			}

			for (var i = 0; i < indices.length; i++) {
				var id = indices[i];

				if (this._toggled.hasOwnProperty(id)) {
					this._toggled[id] = !this._toggled[id];
				} else {
					this._toggled[id] = true;
				}

				if (!this._selected.hasOwnProperty(id)) {
					this._selected[id] = false;
				}
			}

			this._forwardTimer = setTimeout(this._resyncSelectionForward.bind(this, indices), 100);
		}
	};

	SceneTree.prototype._handleSelectionChanged = function(event) {
		if (!this._syncing) {
			if (this._reverseTimer > 0) {
				clearTimeout(this._reverseTimer);
			}

			var sel = event.mParameters.selected;
			var desel = event.mParameters.unselected;

			for (var i = 0; i < desel.length; i++) {
				if (this._vsmSelected[desel[i]] != undefined) {
					delete this._vsmSelected[desel[i]];
				}
			}
			for (var j = 0; j < sel.length; j++) {
				this._vsmSelected[sel[j]] = true;
			}

			if (sel.length == 1) {
				this._expandToNode(sel[0], this._resyncSelectionReverse.bind(this));
			} else {
				this._reverseTimer = setTimeout(this._resyncSelectionReverse.bind(this), 100, true);
			}
		}
	};

	SceneTree.prototype._resyncSelectionForward = function(targetedNodesIndexes) {
		this._forwardTimer = 0;
		if (this._syncing) {
			return false;
		}

		// this for loop goes through the list of nodes which ar margked as selected,
		// finds the row that was just clicked and it applies selection to it
		// via the ViewStateManager method "setSelection"
		for (var i in this._selected) {
			if (this._selected.hasOwnProperty(i)) {
				var ref = this._indexToNodeRef(parseInt(i, 10));
				if (ref == null || ref == "") {
					continue;
				}

				var isSelected = this._selected[i]; // tree.isIndexSelected(i);

				if (this._toggled[i]) {
					isSelected = !isSelected;
				}

				// We check if the current element fron "this._selected" array is the clicked row,
				// so we can set the selection/deselection on it.
				if (targetedNodesIndexes.indexOf(parseInt(i, 10)) !== -1) {
					this._viewStateManager.setSelectionState(ref, isSelected, false);

					// Sometimes, a clicked row is part of a parent which is selected which causes all its children
					// to be selected. If we deselect a particular child, we have to make sure we also deselect its parent.
					if (!isSelected) {
						var nodeHierarchy = this._viewStateManager.getNodeHierarchy();
						var ancestors = nodeHierarchy.getAncestors(ref);
						// the immediat parent of a node is the last element in the ancestors array
						var parentNodeRef = ancestors[ancestors.length - 1];
						// We check if the parnet is in the list of currently selected rows.
						if (this._viewStateManager.getSelectionState(parentNodeRef)) {
							this._viewStateManager.setSelectionState(parentNodeRef, false);
							// We update "this._selected" and "his._vsmSelected"
							var selectedIndices = this._tree.getSelectedIndices();
							for (var j = 0, length = selectedIndices.length; j < length; j++) {
								var index = selectedIndices[j];
								if (parentNodeRef === this._indexToNodeRef(index)) {
									this._selected[index] = false;
									this._tree.removeSelectionInterval(index, index);
									break;
								}
							}
							this._vsmSelected[parentNodeRef] = false;
						}
					}
				}
				this._selected[i] = isSelected;
				this._vsmSelected[ref] = isSelected;
			}
		}

		this._toggled = {};

		this._syncing = false;
	};

	SceneTree.prototype._resyncSelectionReverse = function(bScrollToSelection) {
		this._reverseTimer = 0;
		if (this._syncing) {
			return;
		}

		this._syncing = true;
		// Slow: Tree table de-selects everything after node expand or collapse, so have to resync the selection state.
		var vs = this._viewStateManager;
		var tree = this._tree;
		var selCount = 0;
		this._selected = {};

		for (var i = 0; ; i++) {
			var ref = this._indexToNodeRef(i);
			if (ref == null || ref == "") {
				break;
			}

			var sel = vs.getSelectionState(ref);

			if (sel) {
				this._selected[i] = true;
				selCount++;
			}

			if (sel != tree.isIndexSelected(i)) {
				if (sel) {
					tree.addSelectionInterval(i, i);
				} else {
					tree.removeSelectionInterval(i, i);
				}
			}
		}

		this._syncing = false;
	};

	SceneTree.prototype._expandToNode = function(nodeRef, callback) {

		var totalNodes = this._totalNodes;

		// we pass tree structure and an array of positions and it returns the resulting tree component
		// For example: if we pas [0, 2, 3, 2], it returns dataModel[0][2][3][2]
		var getFormattedDataModel = function(dataModel, pathInModel) {
			pathInModel.forEach(function(position) {
				dataModel = dataModel[position];
			});
			return dataModel;
		};

		// getScrollPosition - When we know the index of the row where we want to scroll,
		// we do some calculations so we position that row in the middle
		// of the table. For example if we want to scroll index 30 into view
		// and the table can fit 12 rows into the view, we will display the rows
		// starting from 24 until 36 so row number 30 is in the middle.
		var getScrollPosition = function(currentRow, rowIndex, rowCapacity) {
			var position;
			if ((rowIndex < currentRow) || (rowIndex >= (currentRow + rowCapacity))) {
				// if the relevant row index is not in the view,
				// we perform the necessary calculations.
				position = rowIndex - (rowCapacity / 2);
			} else {
				// if the relevant row is already visible,
				// we don't change anything and we return the current index.
				position = currentRow;
			}
			// We round the index so it's an integer
			// and we also make sure it's greater than 0 at all times.
			position = position > 0 ? Math.floor(position) : 0;
			return position;
		};

		// This is the method that performs the actual scrolling
		var scrollNodeIntoView = function(tree, rowIndex) {
			var rowCapacity = tree.getVisibleRowCount(),
				currentRow = tree.getFirstVisibleRow(),
				rowToScrollTo = getScrollPosition(currentRow, rowIndex, rowCapacity);
			if (rowToScrollTo !== currentRow) {
				tree.setFirstVisibleRow(rowToScrollTo);
			}
		};

		// This method takes a tree table and a node reference as parameters and
		// it returns the row index for the node with that id.
		var getIndexFromNodeRef = function(treeTable, nodeRef) {

			var rowIndex = null,
				context;

			// we iterate over all row indexes
			for (var currentIndex = 0; currentIndex < totalNodes; currentIndex++) {
				context = treeTable.getContextByIndex(currentIndex);
				if (context) {
					var pathInModel = context.getPath().split("/");
					pathInModel.shift();
					var dataModel = context.getModel().getData();

					if (getFormattedDataModel(dataModel, pathInModel).id === nodeRef) {
						// when we find the node reference that we need, we save the index
						// and break out of the while loop
						rowIndex = currentIndex;
						break;
					}
				}
			}
			return rowIndex;
		};

		var nodeHierarchy = this._scene.getDefaultNodeHierarchy(),
			ancestors = nodeHierarchy.getAncestors(nodeRef);

		// expandHandler it's called after the tree table expands a row.
		// This is a way of expanding nodes recursively. We start with the
		// "oldest" ancestors and we continue down the tree to the relevant node.
		var expandHandler = function(ancestorsProcessorCallback, tree, ancestors, event) {
			if (event.getParameter("reason") === "expand") {
				ancestorsProcessorCallback(tree, ancestors);
			}
		};

		var expandHandlerProxy; // forward declaration.

		// processAncestors removes the first ancestor from the collection,
		// it gets the row index from the tree table, it expands that row
		// and at the end, it scrolls the relevant row into view.
		var processAncestors = function(tree, ancestors) {
			setTimeout(function() {
				if (ancestors.length) {
					// retrieve the first ancestor from the collection and remove it
					var ancestorRef = ancestors.shift();
					var rowIndex = getIndexFromNodeRef(tree, ancestorRef);
					if (rowIndex !== null) {
						tree.expand(rowIndex);
					}
				} else {
					// after we expand the last node, we scroll the selected element into view
					var scrollIndex = getIndexFromNodeRef(tree, nodeRef);
					if (scrollIndex !== null) {
						scrollNodeIntoView(tree, scrollIndex);
						tree.getBinding("rows").detachChange(expandHandlerProxy);
						callback();
					}
				}
			}, 70);
		};

		expandHandlerProxy = expandHandler.bind(this, processAncestors, this._tree, ancestors);

		// We listen for the change event so we now when the tree.expand() method has finished
		this._tree.getBinding("rows").attachChange(expandHandlerProxy);

		// start processing the ancestors:
		// get ancestor => find its index => expand that index => repeat
		processAncestors(this._tree, ancestors);

	};

	SceneTree.prototype._dataChange = function(event) {
		if (this._viewStateManager == null || this._scene == null || this._vSyncing) {
			return;
		}

		if (this._lastChangeIsExpand) {
			this._lastChangeIsExpand = false;
			return;
		}

		if (this._forwardVTimer > 0) {
			clearTimeout(this._forwardVTimer);
		}

		this._forwardVTimer = setTimeout(this._resyncVisibilityForward.bind(this), 100);
	};

	SceneTree.prototype._resyncVisibilityForward = function() {
		if (!this._vSyncing) {
			this._vSyncing = true;
			this._forwardVTimer = 0;
			this._setNodeVisibilityRecursive(this._model.getData(), this._viewStateManager);
			this._vSyncing = false;
		}
	};

	SceneTree.prototype._enumerateChildrenIntoArray = function(nodeRef, list) {
		var nodeInfo = this._scene.getDefaultNodeHierarchy();
		nodeInfo.enumerateChildren(nodeRef, function(pnode) {
			var ref = pnode.getNodeRef();
			list.push(ref);
			if (pnode.getHasChildren()) {
				this._enumerateChildrenIntoArray(ref, list);
			}
		});
	};

	SceneTree.prototype._setNodeVisibilityRecursive = function(node, viewStateManager) {
		if (node.id != null && viewStateManager.getVisibilityState(node.id) != node.visible) {
			// setVisbility state with a "true" value as third parameter
			// will change the visibility of a node and its children recursively.
			viewStateManager.setVisibilityState(node.id, node.visible, true);

			if (node[0] !== undefined || node.hasOwnProperty("children")) {
				if (this._reverseVTimer > 0) {
					clearTimeout(this._reverseVTimer);
				}
				this._reverseVTimer = setTimeout(this._resyncVisibilityReverse.bind(this), 100);
			}
		} else {
			var children = node.hasOwnProperty("children") ? node.children : node;
			for (var i = 0; children[i] != null; i++) {
				this._setNodeVisibilityRecursive(children[i], viewStateManager);
			}
		}
	};

	SceneTree.prototype._toggleVisibilityForAllChildren = function(node, isVisible) {
		var children = node.hasOwnProperty("children") ? node.children : node;
		for (var i = 0; children[i] != null; i++) {
			this._viewStateManager.setVisibilityState(children[i].id, isVisible, true);
		}
	};

	SceneTree.prototype._handleVisibilityChanged = function(event) {
		if (!this._vSyncing) {
			if (this._reverseVTimer > 0) {
				clearTimeout(this._reverseVTimer);
			}
			this._reverseVTimer = setTimeout(this._resyncVisibilityReverse.bind(this), 100);
		}
	};

	SceneTree.prototype._resyncVisibilityReverse = function() {
		if (!this._vSyncing) {
			this._vSyncing = true;
			this._forwardVTimer = 0;
			this._getNodeVisibilityRecursive(this._model.getData(), this._viewStateManager);
			this._tree.getModel().refresh(true);
			this._vSyncing = false;
		}
	};

	SceneTree.prototype._getNodeVisibilityRecursive = function(node, vsm) {
		if (node.id != null) {
			node.visible = vsm.getVisibilityState(node.id);
			// Updating the tooltip for each node
			node.checkEyeTooltip = getCheckEyeTooltip(node.visible, this);
		}

		var children = node.hasOwnProperty("children") ? node.children : node;
		for (var i = 0; children[i] != null; i++) {
			this._getNodeVisibilityRecursive(children[i], vsm);
		}
	};

	SceneTree.prototype.updateHeight = function(height) {
		this._tree.setVisibleRowCount(Math.floor(height / this._tree.getRowHeight()) - 2);
	};

	SceneTree.prototype.refresh = function() {
		if (this._scene == null || !this._viewStateManager || !this._viewStateManager.getNodeHierarchy()) {
			this._model.setData([]);
			return;
		}

		var nodeHierarchy = this._scene.getDefaultNodeHierarchy();

		// building the tree model which is going to be passed to the TreeTable control.
		var tree = [];
		this._totalNodes = 0;
		var getChildrenRecursively = function(tree, nodeRefs) {
			nodeRefs.forEach(function(nodeRef, index) {
				var node = nodeHierarchy.createNodeProxy(nodeRef);
				var treeNode = this._createNodeForSceneTree(node.getName(), node.getNodeRef(), this._viewStateManager);
				tree[index] = treeNode;
				nodeHierarchy.destroyNodeProxy(node);
				this._totalNodes++;
				treeNode.children = [];
				getChildrenRecursively.bind(this)(treeNode.children, nodeHierarchy.getChildren(nodeRef));
			}.bind(this));
		};
		getChildrenRecursively.bind(this)(tree, nodeHierarchy.getChildren());

		// set the object that we've just build as data model for the TreeTable control
		this._model.setData(tree);
		this._tree.setModel(this._model);
		this._tree.bindRows({
			path: "/",
			parameters: {
				arrayNames: [ "children" ]
			}
		});
		this._tree.getBinding("rows").attachChange(this._dataChange.bind(this));
		this._visibilityColumnHeader.setChecked(true);
		this._visibilityColumnHeader.setTooltip(getCheckEyeTooltip(true, this));
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector and view state manager handling begins.

	SceneTree.prototype._onBeforeClearContentConnector =
	SceneTree.prototype._onBeforeClearViewStateManager = function() {
		this._setScene(null);
	};

	SceneTree.prototype._onAfterUpdateContentConnector =
	SceneTree.prototype._onAfterUpdateViewStateManager = function() {
		this._setScene(this._contentConnector && this._contentConnector.getContent());
	};

	// Content connector and view state manager handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Scene handling begins.

	SceneTree.prototype._handleContentReplaced = function(event) {
		this._setScene(event.getParameter("newContent"));
	};

	SceneTree.prototype._handleNodeHierarchyReplaced = function(event) {
		this._setScene(this._scene);
	};

	SceneTree.prototype._handleContentChangesFinished = function(event) {
		this.refresh();
	};

	// Scene handling ends.
	////////////////////////////////////////////////////////////////////////

	// This mixin adds and maintains private property _contentConnector.
	ContentConnector.injectMethodsIntoClass(SceneTree);

	// This mixin adds and maintains private property _viewStateManager.
	ViewStateManager.injectMethodsIntoClass(SceneTree);

	return SceneTree;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTree.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewport",[
	"jquery.sap.global", "./library", "./ViewportBase", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler",
	"./Smart2DHandler", "./Messages", "./ContentConnector", "./ViewStateManager"
], function(
	jQuery, library, ViewportBase, ResizeHandler, Loco, ViewportHandler,
	Smart2DHandler, Messages, ContentConnector, ViewStateManager
) {
	"use strict";

	/**
	 * Constructor for a new Viewport.
	 *
	 * @class
	 * Provides a rendering canvas for the 3D elements of a loaded scene.
	 *
	 * @param {string} [sId] ID for the new Viewport control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Viewport control.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ViewportBase
	 * @alias sap.ui.vk.Viewport
	 * @experimental Since 1.50.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewport = ViewportBase.extend("sap.ui.vk.Viewport", /** @lends sap.ui.vk.Viewport.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			publicMethods: [

			]
		}
	});

	var basePrototype = Viewport.getMetadata().getParent().getClass().prototype;

	Viewport.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._implementation = null;
		this._deferred = {};              // properties/objects that are to be forwarded to _implementation when it is created.
	};

	Viewport.prototype.exit = function() {
		this._deferred = null;
		this._destroyImplementation();

		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	Viewport.prototype.getImplementation = function() {
		return this._implementation;
	};

	Viewport.prototype._destroyImplementation = function() {
		if (this._implementation) {
			this._implementation.destroy();
			this._implementation = null;
		}
		return this;
	};

	////////////////////////////////////////////////////////////////////////
	// Propagate public properties to implementation

	Viewport.prototype.getShowDebugInfo = function() {
		if (this._implementation) {
			return this._implementation.getShowDebugInfo();
		}
		return basePrototype.getShowDebugInfo.call(this);
	};

	Viewport.prototype.setShowDebugInfo = function(value) {
		basePrototype.setShowDebugInfo.call(this, value);
		if (this._implementation) {
			this._implementation.setShowDebugInfo(value);
		}
		return this;
	};

	Viewport.prototype.getBackgroundColorTop = function() {
		if (this._implementation) {
			return this._implementation.getBackgroundColorTop();
		}
		return basePrototype.getBackgroundColorTop.call(this);
	};

	Viewport.prototype.setBackgroundColorTop = function(value) {
		basePrototype.setBackgroundColorTop.call(this, value);
		if (this._implementation) {
			this._implementation.setBackgroundColorTop(value);
		}
		return this;
	};

	Viewport.prototype.getBackgroundColorBottom = function() {
		if (this._implementation) {
			return this._implementation.getBackgroundColorBottom();
		}
		return basePrototype.getBackgroundColorBottom.call(this);
	};

	Viewport.prototype.setBackgroundColorBottom = function(value) {
		basePrototype.setBackgroundColorBottom.call(this, value);
		if (this._implementation) {
			this._implementation.setBackgroundColorBottom(value);
		}
		return this;
	};

	Viewport.prototype.setWidth = function(value) {
		basePrototype.setWidth.call(this, value);
		if (this._implementation) {
			this._implementation.setWidth(value);
		}
		return this;
	};

	Viewport.prototype.setHeight = function(value) {
		basePrototype.setHeight.call(this, value);
		if (this._implementation) {
			this._implementation.setHeight(value);
		}
		return this;
	};

	Viewport.prototype.setSelectionMode = function(value) {
		basePrototype.setSelectionMode.call(this, value);
		if (this._implementation) {
			this._implementation.setSelectionMode(value);
		}
		return this;
	};

	Viewport.prototype.getSelectionMode = function() {
		if (this._implementation) {
			return this._implementation.getSelectionMode();
		}
		return basePrototype.getSelectionMode.call(this);
	};

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	Viewport.prototype._onAfterUpdateContentConnector = function() {
		this._setScene(this._contentConnector.getContent());
	};

	Viewport.prototype._onBeforeClearContentConnector = function() {
		this._setScene(null);
	};

	Viewport.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");
		if (!(content instanceof sap.ui.vk.Scene)) {
			content = null;
		}
		this._setScene(content);
	};

	Viewport.prototype._setScene = function(scene) {
		if (scene instanceof sap.ui.vk.Scene) {
			var sceneType = scene.getMetadata().getName(),
			    implementationType = this._implementation && this._implementation.getMetadata().getName(),
			    reuseImplemenation = sceneType === "sap.ui.vk.dvl.Scene" && implementationType === "sap.ui.vk.dvl.Viewport" ||
			                         sceneType === "sap.ui.vk.threejs.Scene" && implementationType === "sap.ui.vk.threejs.Viewport";

			if (!reuseImplemenation) {
				this._destroyImplementation();
				var newImplementationType;
				var that = this;

				if (sceneType === "sap.ui.vk.dvl.Scene") {
					newImplementationType = "sap.ui.vk.dvl.Viewport";

					jQuery.sap.require(newImplementationType);
					this._implementation = new (jQuery.sap.getObject(newImplementationType))({
						viewStateManager: this.getViewStateManager(),
						// Check.. as we don't have these in the base....
						// urlClicked: function(event) {
						// 	that.fireUrlClicked({
						// 		nodeRef: event.getParameter("nodeRef"),
						// 		url: event.getParameter("url")
						// 	});
						// },
						// nodeClicked: function(event) {
						// 	that.fireNodeClicked({
						// 		nodeRef: event.getParameter("nodeRef"),
						// 		x: event.getParameter("x"),
						// 		y: event.getParameter("y")
						// 	});
						// },
						// pan: function(event) {
						// 	that.firePan({
						// 		dx: event.getParameter("dx"),
						// 		dy: event.getParameter("dy")
						// 	});
						// },
						// zoom: function(event) {
						// 	that.fireZoom({
						// 		zoomFactor: event.getParameter("zoomFactor")
						// 	});
						// },
						// rotate: function(event) {
						// 	that.fireRotate({
						// 		dx: event.getParameter("dx"),
						// 		dy: event.getParameter("dy")
						// 	});
						// },
						resize: function(event) {
							that.fireResize({
								size: event.getParameter("size")
							});
						},
						// viewActivated: function(event) {
						// 	that.fireViewActivated({
						// 		type: event.getParameter("type")
						// 	});
						// },
						// frameRenderingFinished: function(event) {
						// 	that.fireFrameRenderingFinished();
						// },
						showDebugInfo: this.getShowDebugInfo(),
						width: this.getWidth(),
						height: this.getHeight(),
						backgroundColorTop: this.getBackgroundColorTop(),
						backgroundColorBottom: this.getBackgroundColorBottom(),
						selectionMode: this.getSelectionMode(),
						contentConnector: this.getContentConnector() // content connector must be the last parameter in the list!
					});

				} else if (sceneType === "sap.ui.vk.threejs.Scene") {
					newImplementationType = "sap.ui.vk.threejs.Viewport";

					jQuery.sap.require(newImplementationType);
					this._implementation = new (jQuery.sap.getObject(newImplementationType))({
						viewStateManager: this.getViewStateManager(),
						showDebugInfo: this.getShowDebugInfo(),
						width: this.getWidth(),
						height: this.getHeight(),
						backgroundColorTop: this.getBackgroundColorTop(),
						backgroundColorBottom: this.getBackgroundColorBottom(),
						selectionMode: this.getSelectionMode(),
						contentConnector: this.getContentConnector() // content connector must be the last parameter in the list!
					});
				}

				if (newImplementationType) {
					if ("graphicsCore" in this._deferred && this._implementation.setGraphicsCore) {
						this._implementation.setGraphicsCore(this._deferred.graphicsCore);
					}
					delete this._deferred.graphicsCore;

					if ("scene" in this._deferred && this._implementation.setScene) {
						this._implementation.setScene(this._deferred.scene);
					}
					delete this._deferred.scene;

					this._implementation.attachNodesPicked(function(event) {
						this.fireNodesPicked({
							picked: event.getParameter("picked")
						});
					}, this);
				}

				this.invalidate();
			}
		} else {
			this._destroyImplementation();
			this.invalidate();
		}
		return this;
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	Viewport.prototype._onAfterUpdateViewStateManager = function() {
		if (this._implementation) {
			this._implementation.setViewStateManager(this._viewStateManager);
		}
	};

	Viewport.prototype._onBeforeClearViewStateManager = function() {
		if (this._implementation) {
			this._implementation.setViewStateManager(null);
		}
	};

	ContentConnector.injectMethodsIntoClass(Viewport);
	ViewStateManager.injectMethodsIntoClass(Viewport);

	return Viewport;
});

}; // end of sap/ui/vk/Viewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.GraphicsCore') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
/* global File, URI */
// Provides the GraphicsCore class.
jQuery.sap.declare('sap.ui.vk.dvl.GraphicsCore'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.ve.thirdparty.html2canvas'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vk.ve.dvl'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/GraphicsCore",[
	"jquery.sap.global", "../library", "sap/ui/base/EventProvider", "../ve/thirdparty/html2canvas", "../ve/dvl", "./Scene", "./NodeHierarchy",
	"../ContentResource", "../DownloadManager", "./ViewStateManager", "../DvlException", "../Messages"
], function(
	jQuery, library, EventProvider, Html2Canvas, Dvl, Scene, NodeHierarchy,
	ContentResource, DownloadManager, ViewStateManager, DvlException, Messages
) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * Gets the name of the storage in Emscripten file system to use.
	 * @param {string|File} source The source to test.
	 * @returns {string} The name of the storage in Emscripten file system to use:
	 *                   "remote" for files downloaded from remote servers,
	 *                   "local" for files loaded from the local file system.
	 */
	function getStorageName(source) {
		return source instanceof File ? "local" : "remote";
	}

	/**
	 * Gets the name of the source.
	 * @param {string|File} source The source to get the name of.
	 * @returns {string} The name of the source. If the source is string then the source itself, if the source is File then source.name.
	 */
	function getSourceName(source) {
		return source instanceof File ? source.name : source;
	}

	// The SourceDatum class is used to record information about sources used in content resource hierarchies.
	// Sources correspond to files/models downloaded from remote servers or from local file systems.
	// To optimise the usage of sources we use caching - if multiple content resources reference the same source
	// the source is not downloaded multiple times, it is downloaded only once, and is destroyed when the last content
	// resource is destroyed.
	var SourceDatum = function(source) {
		Object.defineProperties(this, {
			source: {
				value: source,
				writable: false,
				enumerable: true
			},
			_refCount: {
				value: 0,
				writable: true,
				enumerable: false
			}
		});
	};

	SourceDatum.prototype.isInUse = function() {
		return this._refCount > 0;
	};

	SourceDatum.prototype.addRef = function() {
		++this._refCount;
		return this;
	};

	SourceDatum.prototype.release = function() {
		--this._refCount;
		jQuery.sap.assert(this._refCount >= 0, "Too many calls to SourceDatum.release().");
		return this;
	};

	SourceDatum.prototype.destroy = function() {
	};

	// The VdslSourceDatum is used to record information about VDSL sources.
	var VdslSourceDatum = function(source, vdsSourceDatum, vdslContent) {
		SourceDatum.call(this, source);
		Object.defineProperties(this, {
			content: {
				value: vdslContent,
				writable: false,
				enumerable: true
			},
			vdsSourceDatum: {
				value: vdsSourceDatum,
				writable: false,
				enumerable: true
			}
		});
	};

	VdslSourceDatum.prototype = Object.create(SourceDatum.prototype);
	VdslSourceDatum.prototype.constructor = VdslSourceDatum;

	VdslSourceDatum.prototype.destroy = function() {
		jQuery.sap.assert(this.vdsSourceDatum, "VDSL source without VDS reference");
		if (this.vdsSourceDatum) {
			this.vdsSourceDatum.release();
		}
		SourceDatum.prototype.destroy.call(this);
	};

	// The DvlSceneDatum class is used to record information about what source a DVL scene is created from
	// and whether it is a root scene. Root scenes are not shared. Non-root scenes are read only and can be
	// used as sources for cloning nodes into the root scene. It might happen that the same source is used
	// as a root scene and non-root scene, e.g. if there is a hierarchy of content resources and all content
	// resources are built from the same source, e.g. a model with just one box.
	var DvlSceneDatum = function(dvlSceneId, sourceDatum, root) {
		Object.defineProperties(this, {
			dvlSceneId: {
				value: dvlSceneId,
				writable: false,
				enumerable: true
			},
			sourceDatum: {              // This field can be null which means the DVL scene is created as empty, not from a source.
				value: sourceDatum,
				writable: false,
				enumerable: true
			},
			root: {
				value: !!root,
				writable: false,
				enumerable: true
			},
			_refCount: {
				value: 0,
				writable: true,
				enumerable: false
			}
		});
	};

	DvlSceneDatum.prototype.isInUse = function() {
		return this._refCount > 0;
	};

	DvlSceneDatum.prototype.addRef = function() {
		++this._refCount;
		return this;
	};

	DvlSceneDatum.prototype.release = function() {
		--this._refCount;
		jQuery.sap.assert(this._refCount >= 0, "Too many calls to DvlSceneDatum.release().");
		// NB: we do not release the reference to the SourceDatum object as this object can be re-used later.
		// The reference to the SoruceDatum object is released in the destroy method when this object is about to be completely dead.
		return this;
	};

	DvlSceneDatum.prototype.destroy = function() {
		// This object will not be re-used so we need to release the reference to the SourceDatum object if any.
		if (this.sourceDatum) {
			this.sourceDatum.release();
		}
	};

	// When the hierarchy of content resources changes we need to find what was changed.
	// The ShadowContentResource class is used to keep the original information of content resources.
	// We cannot keep references to the ContentResource objects because they can be rebuilt any time due
	// to data binding. The lifetime of objects of this class is controlled by the graphics core, so
	// content resource object can have references to shadow content resources.
	var ShadowContentResource = function(contentResource, fake) {
		// nodeProxy and dvlSceneId are mutually exclusive.
		Object.defineProperties(this, {
			source: {
				value: contentResource.getSource()
			},
			sourceType: {
				value: contentResource.getSourceType()
			},
			sourceId: {
				value: contentResource.getSourceId(),
				writable: true
			},
			name: {
				value: contentResource.getName()
			},
			localMatrix: {
				value: contentResource.getLocalMatrix(),
				writable: true
			},
			password: {
				value: contentResource.getPassword()
			},
			children: {
				value: contentResource.getContentResources().map(function(contentResource) {
					return new ShadowContentResource(contentResource);
				})
			},
			dvlSceneDatum: {         // This field can be null which means this content resource is a pure grouping node.
				value: null,
				writable: true
			},
			nodeProxy: {             // This field is null when dvlSceneDatum.root equals true.
				value: null,
				writable: true
			},
			fake: {
				value: !!fake
			},
			sourceProperties: {
				value: null,
				writable: true
			}
		});
		contentResource._shadowContentResource = this;
	};

	ShadowContentResource.prototype.destroy = function() {
		// This object will not be re-used so we need to release the reference to DvlSceneData is any.
		if (this.dvlSceneDatum) {
			this.dvlSceneDatum.release();
		}
	};

	var VkSceneDatum = function(vkScene, shadowContentResource) {
		Object.defineProperties(this, {
			vkScene: {
				value: vkScene
			},
			shadowContentResource: {
				value: shadowContentResource
			}
		});
	};

	/**
	 * Constructor for a new GraphicsCore.
	 *
	 * @class
	 * Loads the DVL library, wraps it, and makes the wrapper available for the application.
	 *
	 * Example:<br/>
	 * <pre>   var oGraphicsCore = new GraphicsCore();</pre><br/>
	 *
	 * @param {object} runtimeSettings The Emscripten runtime settings.
	 * @param {int}    runtimeSettings.totalMemory The size of Emscripten module memory in bytes.
	 * @param {string} runtimeSettings.logElementId The ID of a textarea DOM element to write the log to.
	 * @param {string} runtimeSettings.statusElementId The ID of a DOM element to write the status messages to.
	 * @param {object} webGLContextAttributes The WebGL context attributes. See {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes}.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.dvl.GraphicsCore
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var GraphicsCore = EventProvider.extend("sap.ui.vk.dvl.GraphicsCore", /** @lends sap.ui.vk.dvl.GraphicsCore.prototype */ {
		metadata: {
			publicMethods: [
				"attachSceneLoadingFinished",
				"attachSceneLoadingProgress",
				"attachSceneLoadingStarted",
				"buildSceneTree",
				"buildSceneTreeAsync",
				"createViewStateManager",
				"destroyScene",
				"destroyViewStateManager",
				"detachSceneLoadingFinished",
				"detachSceneLoadingProgress",
				"detachSceneLoadingStarted",
				"getApi",
				"loadContentResourcesAsync",
				"showDebugInfo",
				"updateSceneTree",
				"updateSceneTreeAsync"
			]
		},
		constructor: function(runtimeSettings, webGLContextAttributes) {
			EventProvider.apply(this);

			var settings = jQuery.extend({}, runtimeSettings, {
				filePackagePrefixURL: jQuery.sap.getResourcePath("sap/ve") + "/"
			});
			this._dvlClientId = jQuery.sap.uid();
			this._dvl = sap.ve.dvl.createRuntime(settings);
			this._dvl.CreateCoreInstance(this._dvlClientId);
			sap.ui.vk.dvl.checkResult(this._dvl.Core.Init(this._DVLMajorVersion, this._DVLMinorVersion));

			var ui5Core = sap.ui.getCore();
			ui5Core.attachLocalizationChanged(this._onlocalizationChanged, this);
			sap.ui.vk.dvl.checkResult(this._dvl.Core.SetLocale(ui5Core.getConfiguration().getLanguageTag()));

			// The rendering WebGL canvas. If there is only one viewport then this canvas is used by that viewport directly.
			// If there are more than one viewport, then this canvas is used for off-screen rendering. Its content is copied
			// to viewports' 2D canvases. The size of this off-screen canvas is big enough to fit content of any viewport.
			this._canvas = this._createRenderingCanvasAndContext(webGLContextAttributes);

			// At least one renderer needs to be created and initialised at the very beginning because it is required
			// to load geometry into the GPU memory when loading models.
			this._rendererId = sap.ui.vk.dvl.getPointer(this._dvl.Core.CreateRenderer());
			this._dvl.Renderer.SetOptionF(sap.ve.dvl.DVLRENDEROPTIONF.DVLRENDEROPTIONF_DPI, 96 * window.devicePixelRatio, this._rendererId);

			// The list of URLs and File objects. Their content is downloaded and copied to the Emscripten file system.
			// The content of files in the Emscripten file system is read only.
			this._sourceData = [];

			// The list of records with information about what sources the DVL scenes are created from.
			// These records can be shared among multiple vkScenes.
			this._dvlSceneData = [];

			// The list of VkSceneDatum objects.
			this._vkSceneData = [];

			// The list of viewport controls and associated data { control: sap.ui.vk.Viewport, canvas: HTMLCanvasElement, rendererId: String }.
			this._viewports = [];

			// An ID of pending refresh callback request.
			this._renderLoopRequestId = null;

			// The render loop function.
			this._renderLoopFunction = this._renderLoop.bind(this);

			// The list of view state managers. Deprecated. Kept for backward compatibility.
			this._viewStateManagers = [];
		},

		// NB: Change these numbers when changing dependency on dvl.js in pom.xml.
		_DVLMajorVersion: 7,
		_DVLMinorVersion: 1
	});

	GraphicsCore.prototype.destroy = function() {
		sap.ui.getCore().detachLocalizationChanged(this._onlocalizationChanged, this);

		// GraphicsCore does not own Viewport objects, it should not destroy them, it can only reset their association with GraphicsCore.
		var viewports = this._viewports.slice();
		viewports.reverse();
		viewports.forEach(function(viewport) {
			viewport.control.setGraphicsCore(null);
		});
		this._viewports = null;

		this._cleanupVkSceneData();
		this._vkSceneData = null;

		this._cleanupDvlSceneData();
		jQuery.sap.assert(this._dvlSceneData.length === 0, "Not all DVL scenes are destroyed when sap.ui.vk.dvl.Scene objects are destroyed.");
		this._dvlSceneData = null;

		this._cleanupSourceData();
		jQuery.sap.assert(this._sourceData.length === 0, "Not all sources are deleted.");
		this._sourceData = null;

		this._viewStateManagers.slice().forEach(this.destroyViewStateManager.bind(this));
		this._viewStateManagers = null;

		this._webGLContext = null;
		this._canvas = null;

		// The default renderer.
		this._dvl.Core.DeleteRenderer(this._rendererId);
		this._rendererId = null;

		this._dvl.Core.Release();
		this._dvl = null;

		EventProvider.prototype.destroy.apply(this);
	};

	/**
	 * Creates a canvas element for the 3D viewport and initializes the WebGL context.
	 * @param {object} webGLContextAttributes WebGL context attributes. A JSON object with the following boolean properties:
	 * <ul>
	 *   <li>antialias {boolean} default value <code>true</code>.</li>
	 *   <li>alpha {boolean} default value <code>true</code>.</li>
	 *   <li>premultipliedAlpha {boolean} default value <code>false</code>.</li>
	 * </ul>
	 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
	 * @returns {HTMLCanvasElement} The canvas element for the 3D viewport.
	 * @private
	 */
	GraphicsCore.prototype._createRenderingCanvasAndContext = function(webGLContextAttributes) {
		// _canvas is a private DOMElement used for WebGL rendering.
		// At the moment there can be only one canvas element and one viewport,
		// and the viewport uses the canvas.
		var canvas = document.createElement("canvas");
		canvas.id = jQuery.sap.uid();
		this._webGLContext = this._dvl.Core.CreateWebGLContext(canvas, webGLContextAttributes);
		return canvas;
	};

	/**
	 * Gets the canvas element used for 3D rendering.
	 * @returns {HTMLCanvasElement} The canvas element used for 3D rendering.
	 * @private
	 */
	GraphicsCore.prototype._getCanvas = function() {
		return this._canvas;
	};

	/**
	 * Gets the WebGL context used for 3D rendering.
	 * @returns {WebGLRenderingContext} The WebGL rendering context.
	 * @private
	 */
	GraphicsCore.prototype._getWebGLContext = function() {
		return this._webGLContext;
	};

	/**
	 * Gets the DVL object.
	 * @returns {DVL} The DVL object.
	 * @private
	 */
	GraphicsCore.prototype._getDvl = function() {
		return this._dvl;
	};

	/**
	 * Gets the DVL client ID used in processing notifications from DVL module.
	 * @returns {string} The DVL client ID.
	 * @private
	 */
	GraphicsCore.prototype._getDvlClientId = function() {
		return this._dvlClientId;
	};

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Source Data related methods.

	/**
	 * Returns an array of items from this._sourceData that matche the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { source }.
	 * @returns {SourceDatum[]} An array of items from this._dvlSourceData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findSourceData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._sourceData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	/**
	 * Destroys a single source.
	 * @param {SourceDatum} sourceDatum A SourceDatum object to destroy.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._destroySourceDatum = function(sourceDatum) {
		if (!(sourceDatum instanceof VdslSourceDatum)) {
			this._dvl.Core.DeleteFileByUrl(getSourceName(sourceDatum.source), getStorageName(sourceDatum.source));
		}
		sourceDatum.destroy();
		return this;
	};

	/**
	 * Cleans up unused sources.
	 *
	 * This method is called via jQuery.sap.delayedCall after multiple sources are released to collect unused objects.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._cleanupSourceData = function() {
		var needAnotherPass = false; // Another pass is needed when any VDSL source datum is destroyed and its referenced VDS source datum gets unused.
		for (var i = this._sourceData.length - 1; i >= 0; --i) {
			var sourceDatum = this._sourceData[i];
			if (!sourceDatum.isInUse()) {
				var referencedSourceDatum = sourceDatum instanceof VdslSourceDatum ? sourceDatum.vdsSourceDatum : null;
				this._sourceData.splice(i, 1);
				this._destroySourceDatum(sourceDatum);
				if (referencedSourceDatum && !referencedSourceDatum.isInUse()) {
					needAnotherPass = true;
				}
			}
		}
		if (needAnotherPass) {
			this._cleanupSourceData();
		}
		return this;
	};

	// END: Source Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: DVL Scene Data related methods.

	/**
	 * Returns an array of items from this._dvlSceneData that match the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { dvlSceneId, source, root }.
	 * @return {DvlSceneDatum[]} An array of items from this._dvlSceneData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findDvlSceneData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._dvlSceneData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	/**
	 * Destroys a single DVL scene datum object.
	 * @param {DvlSceneDatum} dvlSceneDatum A DvlSceneDatum object to destroy.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._destroyDvlSceneDatum = function(dvlSceneDatum) {
		this._dvl.Scene.Release(dvlSceneDatum.dvlSceneId);
		dvlSceneDatum.destroy();
		return this;
	};

	/**
	 * Cleans up unused DVL scene data.
	 *
	 * This method is called via jQuery.sap.delayedCall after multiple DVL scene data are released to collect unused objects.
	 * @private
	 */
	GraphicsCore.prototype._cleanupDvlSceneData = function() {
		for (var i = this._dvlSceneData.length - 1; i >= 0; --i) {
			var dvlSceneDatum = this._dvlSceneData[i];
			if (!dvlSceneDatum.isInUse()) {
				this._dvlSceneData.splice(i, 1);
				this._destroyDvlSceneDatum(dvlSceneDatum);
			}
		}
	};

	// END: DVL Scene Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: VK Scene Data related methods.

	/**
	 * Returns an array of items from this._vkSceneData that match the search criteria.
	 * @param {object} properties A JSON like object with one or several properties { vkSceneId, etc }.
	 * @return {VkSceneDatum[]} An array of items from this._vkSceneData that match the search criteria.
	 * @private
	 */
	GraphicsCore.prototype._findVkSceneData = function(properties) {
		var propNames = Object.getOwnPropertyNames(properties);
		return this._vkSceneData.filter(function(item) {
			return propNames.every(function(propName) {
				return properties[propName] === item[propName];
			});
		});
	};

	GraphicsCore.prototype._cleanupVkSceneData = function() {
		for (var i = this._vkSceneData.length - 1; i >= 0; --i) {
			this.destroyScene(this._vkSceneData[i].vkScene);
		}
	};

	// END: VK Scene Data related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Shadow Content Resource related methods.

	GraphicsCore.prototype._destroyShadowContentResource = function(vkScene, shadowContentResource) {
		if (shadowContentResource.children) {
			shadowContentResource.children.forEach(this._destroyShadowContentResource.bind(this, vkScene));
		}
		if (shadowContentResource.nodeProxy) {
			try {
				sap.ui.vk.dvl.checkResult(this._dvl.Scene.DeleteNode(vkScene.getSceneRef(), shadowContentResource.nodeProxy.getNodeRef()));
			} catch (e) {
				var message = "Failed to delete node with ID = " + shadowContentResource.nodeProxy.getNodeRef() + ".";
				if (e instanceof DvlException) {
					message += " Error code: " + e.code + ". Message: " + e.message + ".";
				}
				log.error(message);
			}
			vkScene.getDefaultNodeHierarchy().destroyNodeProxy(shadowContentResource.nodeProxy);
		}
		shadowContentResource.destroy();
	};

	// END: Shadow Content Resource related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Generic Content Resource related methods.

	/**
	 * Gets a list of filtered content resources.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to filter.
	 * @param {function} filter A function to test each content resource. Invoked with one argument <code>contentResource</code>.
	 * @return {sap.ui.vk.ContentResource[]} The content resources that are matched by the filter.
	 * @private
	 */
	GraphicsCore.prototype._filterContentResources = function(contentResources, filter) {
		var result = [];
		contentResources.forEach(function enumerate(contentResource) {
			if (filter(contentResource)) {
				result.push(contentResource);
			}
			contentResource.getContentResources().forEach(enumerate);
		});
		return result;
	};

	/**
	 * Gets a list of encrypted content resources without passwords.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to check.
	 * @return {sap.ui.vk.ContentResource[]} The content resources that are encrypted and have no passwords.
	 * @private
	 */
	GraphicsCore.prototype._getContentResourcesWithMissingPasswords = function(contentResources) {
		var library = this._dvl.Library;
		return this._filterContentResources(contentResources, function(contentResource) {
			var source = contentResource.getSource();
			try {
				return source && (sap.ui.vk.dvl.getJSONObject(library.RetrieveInfo(getSourceName(source), getStorageName(source))).flags & sap.ve.dvl.DVLFILEFLAG.ENCRYPTED) && !contentResource.getPassword();
			} catch (e) {
				log.warning("Failed to get information from Emscripten virtual file system about file '" + getSourceName(source) + "'");
				return false;
			}
		});
	};

	/**
	 * Gets a list of content resources with encrypted VDS3 models.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to check.
	 * @return {sap.ui.vk.ContentResource[]} The content resources with encrypted VDS3 models.
	 * @private
	 */
	GraphicsCore.prototype._getContentResourcesWithEncryptedVds3 = function(contentResources) {
		var library = this._dvl.Library;
		return this._filterContentResources(contentResources, function(contentResource) {
			var source = contentResource.getSource();
			if (source) {
				try {
					var fileInfo = sap.ui.vk.dvl.getJSONObject(library.RetrieveInfo(getSourceName(source), getStorageName(source)));
					return fileInfo.major <= 3 && (fileInfo.flags & sap.ve.dvl.DVLFILEFLAG.ENCRYPTED);
				} catch (e) {
					log.warning("Failed to get information from Emscripten virtual file system about file '" + getSourceName(source) + "'");
					return false;
				}
			} else {
				return false;
			}
		});
	};

	/**
	 * Collects content resource source properties.
	 *
	 * @param {ShadowContentResource} shadowContentResource The shadow content resource to inspect.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._collectAndCheckSourceProperties = function(shadowContentResource) {
		var sourceDatum = shadowContentResource.dvlSceneDatum.sourceDatum;
		if (!sourceDatum) {
			return this;
		}
		try {
			// VDSL files are not stored in Emscripten virtual file system.
			// Get the properties of the vds file which the vdsl file references to.
			if (sourceDatum instanceof VdslSourceDatum) {
				sourceDatum = sourceDatum.vdsSourceDatum;
			}
			var sourceInfo = sap.ui.vk.dvl.getJSONObject(this._dvl.Library.RetrieveInfo(getSourceName(sourceDatum.source), getStorageName(sourceDatum.source)));
			shadowContentResource.sourceProperties = {
				version: {
					major: sourceInfo.major,
					minor: sourceInfo.minor
				}
			};
			if (sourceInfo.flags & (sap.ve.dvl.DVLFILEFLAG.PAGESCOMPRESSED | sap.ve.dvl.DVLFILEFLAG.WHOLEFILECOMPRESSED)) {
				shadowContentResource.sourceProperties.compressed = true;
			}
			if (sourceInfo.flags & sap.ve.dvl.DVLFILEFLAG.ENCRYPTED) {
				shadowContentResource.sourceProperties.encrypted = true;
			}
		} catch (e) {
			log.warning("Failed to get information from Emscripten virtual file system about file '" + getSourceName(shadowContentResource.source) + "'");
		}
		return this;
	};

	/**
	 * Loads content resources.
	 *
	 * Content resources can be downloaded from a URL or loaded from a local file.
	 *
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to build the scene from.
	 * @param {function} onComplete The callback function to call when all content resources are processed.
	 *                              The callback takes one parameter <code>sourcesFailedToLoad</code> - an array of
	 *                              the 'source' attribute values that are failed to be loaded.
	 * @param {function} onProgress The callback function to call to report the file loading progress.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.loadContentResourcesAsync = function(contentResources, onComplete, onProgress) {
		var that = this,
			sources = [], // this can be declared as new Set(), but in this case it will need to be converted to an array to pass to DownloadManager.
			vdslSources = new Map();

		// Collect unique sources that are not loaded yet.
		contentResources.forEach(function enumerate(contentResource) {
			var source = contentResource.getSource();
			if (source && sources.indexOf(source) < 0 && that._findSourceData({ source: source }).length === 0) {
				sources.push(source);
				if (contentResource.getSourceType() === "vdsl") {
					vdslSources.set(source, {});
				}
			}
			contentResource.getContentResources().forEach(enumerate);
		});

		// Accumulate source data in a local variable and then pass it to onComplete handler
		// otherwise the cleanup process can garbage collect them.
		var sourceData = [];

		// Asynchronously download all content resources with URLs or local files.
		if (sources.length > 0) {
			var sourcesFailedToLoad;
			var downloadManager = new DownloadManager(sources)
				.attachItemSucceeded(function(event) {
					var source = event.getParameter("source");
					var response = event.getParameter("response");

					if (vdslSources.has(source)) {
						// We do not add SourceDatum for VDSL file yet.
						// We will add it after we successfully download the referenced VDS file.
						var content = sap.ui.vk.utf8ArrayBufferToString(response);
						if (content.trim().length === 0) {
							sourcesFailedToLoad = sourcesFailedToLoad || [];
							sourcesFailedToLoad.push({
								source: source,
								status: Messages.VIT22.code,
								statusText: sap.ui.vk.getResourceBundle().getText(Messages.VIT22.summary)
							});
							log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT22.summary), Messages.VIT22.code, "sap.ui.vk.dvl.GraphicsCore");
							return;
						} else {
							var lines = content.split(/\n|\r\n/);
							var m = lines[0].match(/^file=(.+)$/);
							if (!m) {
								sourcesFailedToLoad = sourcesFailedToLoad || [];
								sourcesFailedToLoad.push({
									source: source,
									status: Messages.VIT23.code,
									statusText: sap.ui.vk.getResourceBundle().getText(Messages.VIT23.summary)
								});
								log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT23.summary), Messages.VIT23.code, "sap.ui.vk.dvl.GraphicsCore");
								return;
							} else {
								var vdslSourceData = vdslSources.get(source);
								vdslSourceData.content = lines;
								var referencedSource = m[1];
								var originalReferencedSource = referencedSource;
								var originalReferencedSourceUrl = new URI(originalReferencedSource);
								if (originalReferencedSourceUrl.is("relative")) {
									if (source instanceof File) {
										sourcesFailedToLoad = sourcesFailedToLoad || [];
										sourcesFailedToLoad.push({
											source: source,
											status: Messages.VIT24.code,
											statusText: sap.ui.vk.getResourceBundle().getText(Messages.VIT24.summary)
										});
										log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT24.summary), Messages.VIT24.code, "sap.ui.vk.dvl.GraphicsCore");
										return;
									} else {
										var vdslSourceUrl = new URI(source);
										referencedSource = originalReferencedSourceUrl.absoluteTo(vdslSourceUrl).href();
									}
								}
								vdslSourceData.referencedSource = referencedSource;
								vdslSourceData.content[0] = vdslSourceData.content[0].replace(originalReferencedSource, this._dvl.Core.GetFilename(vdslSourceData.referencedSource, "remote"));
								if (sources.indexOf(vdslSourceData.referencedSource) < 0 && this._findSourceData({ source: vdslSourceData.referencedSource }).length === 0) {
									// The referenced source is not downloaded previously and is not queued for downloading yet.
									// It is possible to have a content resource hierarchy of VDSL files, some of them
									// can reference the same VDS file. In such cases we do not need to download the same
									// refereneced VDS file multiple times.
									sources.push(vdslSourceData.referencedSource);
									downloadManager.queue(vdslSourceData.referencedSource);
								}
							}
						}
					} else {
						// If it is not a vdsl file, just store in the Emscripten file system.
						var isFile = source instanceof File;
						var name = isFile ? source.name : source;
						var storageName = getStorageName(source);
						this._dvl.Core.CreateFileFromArrayBuffer(response, name, storageName);
						sourceData.push(new SourceDatum(source));
					}
				}, this)
				.attachAllItemsCompleted(function(event) {
					Array.prototype.push.apply(this._sourceData, sourceData);
					// Create VdslSourceDatum for VDSL sources.
					vdslSources.forEach(function(vdslSourceData, vdslSource) {
						var vdsSourceDatum = this._findSourceData({ source: vdslSourceData.referencedSource })[0];
						var sourceDatum = new VdslSourceDatum(vdslSource, vdsSourceDatum, vdslSourceData.content.join("\n"));
						this._sourceData.push(sourceDatum);
						vdsSourceDatum.addRef();
						// VdslSourceDatum will be addRef'ed when the corresponding scene is created.
					}.bind(this));

					if (onComplete) {
						onComplete(sourcesFailedToLoad);
					}
				}, this)
				.attachItemFailed(function(event) {
					sourcesFailedToLoad = sourcesFailedToLoad || [];
					sourcesFailedToLoad.push({
						source: event.getParameter("source"),
						status: event.getParameter("status"),
						statusText: event.getParameter("statusText")
					});
				}, this);
			if (onProgress) {
				downloadManager.attachItemProgress(onProgress, this);
			}
			downloadManager.start();
		} else if (onComplete) {
			// Nothing to download or everything is already downloaded.
			onComplete();
		}

		return this;
	};

	/**
	 * Builds placeholder nodes for the content resources and their children.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy          The node hierarchy.
	 * @param {any}                     parentNodeRef          The parent node reference.
	 * @param {any}                     insertBeforeNodeRef    The node reference to insert the top level nodes before.
	 * @param {ShadowContentResource[]} shadowContentResources The root shadow content resource.
	 * @returns {ShadowContentResource[]} A flat list of shadow content resources that have a non-empty source property.
	 * @private
	 */
	GraphicsCore.prototype._buildPlaceholders = function(nodeHierarchy, parentNodeRef, insertBeforeNodeRef, shadowContentResources) {
		var shadowContentResourcesToLoad = [];

		shadowContentResources.forEach(function build(parentNodeRef, insertBeforeNodeRef, shadowContentResource) {
			var nodeRef = this._dvl.Scene.CreateNode(nodeHierarchy.getSceneRef(), parentNodeRef, shadowContentResource.name, insertBeforeNodeRef);
			shadowContentResource.nodeProxy = nodeHierarchy.createNodeProxy(nodeRef);

			if (shadowContentResource.localMatrix) {
				shadowContentResource.nodeProxy.setLocalMatrix(shadowContentResource.localMatrix);
			}

			if (shadowContentResource.source) {
				shadowContentResourcesToLoad.push(shadowContentResource);
			}

			shadowContentResource.children.forEach(build.bind(this, nodeRef, null));
		}.bind(this, parentNodeRef, insertBeforeNodeRef));

		return shadowContentResourcesToLoad;
	};

	/**
	 * Updates the full tree of placeholder nodes.
	 *
	 * @param {sap.ui.vk.dvl.Scene}         vkScene                   The scene to update.
	 * @param {ShadowContentResource}       rootShadowContentResource The root shadow content resource.
	 * @param {sap.ui.vk.ContentResource[]} contentResources          The content resources. Changes in content resources need to be
	 *                                                                propagated to the shadow content resources.
	 * @returns {ShadowContentResource[]} A flat list of shadow content resources that have a non-empty source property and need to be loaded.
	 * @private
	 */
	GraphicsCore.prototype._updatePlaceholders = function(vkScene, rootShadowContentResource, contentResources) {
		var that = this,
		    nodeHierarchy = vkScene.getDefaultNodeHierarchy(),
		    shadowContentResourcesToLoad = [];

		(function update(shadowContentResources, contentResources, parentNodeRef) {
			// This function compares changes in properties which might lead to DVL node re-creation or deletion.
			function equals(shadowContentResource, contentResource) {
				if (!shadowContentResource && !contentResource) {
					// Both are undefined/null.
					return true;
				} else if (!!shadowContentResource ^ !!contentResource) {
					// One is undefined/null, another is not undefined/null.
					return false;
				} else {
					// Both are not undefined/null.
					return shadowContentResource.source === contentResource.getSource()
					    && shadowContentResource.sourceType === contentResource.getSourceType()
					    && shadowContentResource.name === contentResource.getName()
					    && shadowContentResource.password === contentResource.getPassword();
				}
			}

			// The mutable properties do not lead to re-creation of DVL nodes.
			function copyMutableProperties(shadowContentResource, contentResource) {
				contentResource._shadowContentResource = shadowContentResource;
				shadowContentResource.sourceId = contentResource.getSourceId();
				shadowContentResource.localMatrix = contentResource.getLocalMatrix();
				if (shadowContentResource.nodeProxy) {
					shadowContentResource.nodeProxy.setLocalMatrix(shadowContentResource.localMatrix);
				}
			}

			// Scan shadow content resources comparing them with new content resources.
			// Equal content resources are scanned recursively.
			var i = 0; // Shadow content resource index.
			var changes = jQuery.sap.arrayDiff(shadowContentResources, contentResources, equals, true);
			changes.forEach(function(change) {
				// Compare unchanged items.
				for (; i < change.index; ++i) {
					update(shadowContentResources[i].children, contentResources[i].getContentResources(), shadowContentResources[i].nodeProxy.getNodeRef());
					copyMutableProperties(shadowContentResources[i], contentResources[i]);
				}
				if (change.type === "delete") {
					that._destroyShadowContentResource(vkScene, shadowContentResources[change.index]);
					shadowContentResources.splice(change.index, 1);
				} else if (change.type === "insert") {
					var nextNodeRef;
					if (i < shadowContentResources.length && shadowContentResources[i].nodeProxy) {
						nextNodeRef = shadowContentResources[i].nodeProxy.getNodeRef();
					}
					var shadowContentResource = new ShadowContentResource(contentResources[change.index]);
					shadowContentResourcesToLoad = shadowContentResourcesToLoad.concat(that._buildPlaceholders(nodeHierarchy, parentNodeRef, nextNodeRef, [ shadowContentResource ]));
					shadowContentResources.splice(change.index, 0, shadowContentResource);
					++i;
				}
			});
			// Compare remaining unchanged items.
			for (; i < shadowContentResources.length; ++i) {
				update(shadowContentResources[i].children, contentResources[i].getContentResources(), shadowContentResources[i].nodeProxy && shadowContentResources[i].nodeProxy.getNodeRef());
				copyMutableProperties(shadowContentResources[i], contentResources[i]);
			}
		})(rootShadowContentResource.fake ? rootShadowContentResource.children : [ rootShadowContentResource ], contentResources, null);

		return shadowContentResourcesToLoad;
	};

	// END: Generic Content Resource related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: Synchronous Content Resource related methods.

	/**
	 * Loads and merges a content resources to the root scene.
	 *
	 * This is a private helper method used in methods buildSceneTree and updateSceneTree.
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy object.
	 * @param {ShadowContentResource} shadowContentResource The content resource to merge into the root scene.
	 * @private
	 */
	GraphicsCore.prototype._loadAndMergeContentResource = function(nodeHierarchy, shadowContentResource) {
		if (shadowContentResource.source) {
			var sourceDatum = this._findSourceData({ source: shadowContentResource.source })[0];
			if (!sourceDatum) {
				log.warning("Failed to load content resource with sourceId '" + shadowContentResource.sourceId + "' due to failed downloading from URL '" + getSourceName(shadowContentResource.source) + "'.");
			} else {
				var groupingNodeRef = shadowContentResource.nodeProxy.getNodeRef();
				var dvlSceneDatum = this._findDvlSceneData({ sourceDatum: sourceDatum, root: false })[0];
				if (!dvlSceneDatum) {
					// The DVL scene is not created yet.
					try {
						dvlSceneDatum = new DvlSceneDatum(
							sap.ui.vk.dvl.getPointer(
								sourceDatum instanceof VdslSourceDatum ?
									this._dvl.Core.LoadSceneFromVDSL(sourceDatum.content, shadowContentResource.password) :
									this._dvl.Core.LoadSceneByUrl(getSourceName(shadowContentResource.source), shadowContentResource.password, getStorageName(shadowContentResource.source))),
							sourceDatum, false);
					} catch (e) {
						log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT34.summary) + ": " + getSourceName(shadowContentResource.source), Messages.VIT34.code, "sap.ui.vk.dvl.GraphicsCore");
						return;
					}
					this._dvlSceneData.push(dvlSceneDatum);
					sourceDatum.addRef();
				}
				shadowContentResource.dvlSceneDatum = dvlSceneDatum;
				dvlSceneDatum.addRef();
				this._collectAndCheckSourceProperties(shadowContentResource);
				// Clone top level nodes from the merged content resource under the newly created grouping node.
				var rootSceneRef = nodeHierarchy.getSceneRef(),
				    insertBeforeNodeRef = nodeHierarchy.getChildren(groupingNodeRef)[0];
				this._dvl.Scene.RetrieveSceneInfo(dvlSceneDatum.dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN).ChildNodes.forEach(function(nodeRef) {
					this._dvl.Scene.CreateNodeCopy(rootSceneRef, nodeRef, groupingNodeRef, sap.ve.dvl.DVLCREATENODECOPYFLAG.COPY_CHILDREN, null, insertBeforeNodeRef);
				}.bind(this));
			}
		}
	};

	/**
	 * Builds a scene tree from the hierarchy of content resources. The content resources must be already downloaded.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to build the scene from.
	 * @returns {sap.ui.vk.dvl.Scene} The scene built from the content resources.
	 * @public
	 */
	GraphicsCore.prototype.buildSceneTree = function(contentResources) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return null;
		}

		var rootDvlSceneDatum;
		var rootShadowContentResource;
		var shadowContentResources = contentResources.map(function(contentResource) {
			return new ShadowContentResource(contentResource);
		});

		// First create a DVL scene either from the root content resource or an empty one if there are more than one
		// root content resource.
		// Then for each child content resource create a placeholder node.
		// Then load child DVL scenes and clone their top level nodes under placeholder nodes of the corresponding
		// content resources.

		// Process top level content contentResources in a special way. Then process next level content contentResources recursively.
		if (shadowContentResources.length === 1) {
			rootShadowContentResource = shadowContentResources[0];
			if (rootShadowContentResource.source) {
				// If there is a single top level content resource with a URL or File then load the resource without creating
				// a grouping node and merging. Always create a new DVL scene because root DVL scenes are not shared among vkScenes.
				var sourceDatum = this._findSourceData({ source: rootShadowContentResource.source })[0];
				try {
					rootDvlSceneDatum = new DvlSceneDatum(
						sap.ui.vk.dvl.getPointer(
							sourceDatum instanceof VdslSourceDatum ?
								this._dvl.Core.LoadSceneFromVDSL(sourceDatum.content, rootShadowContentResource.password) :
								this._dvl.Core.LoadSceneByUrl(getSourceName(rootShadowContentResource.source), rootShadowContentResource.password, getStorageName(rootShadowContentResource.source))),
						sourceDatum, true);
				} catch (e) {
					log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT34.summary) + ": " + getSourceName(rootShadowContentResource.source), Messages.VIT34.code, "sap.ui.vk.dvl.GraphicsCore");
					return null;
				}
				sourceDatum.addRef();
			} else {
				rootDvlSceneDatum = new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true);
			}
		} else {
			// Create a fake root content resource.
			var fakeRootContentResource = new ContentResource({
				sourceType: "vds",
				sourceId: jQuery.sap.uid()
			});
			rootShadowContentResource = new ShadowContentResource(fakeRootContentResource, true);
			fakeRootContentResource.destroy();
			fakeRootContentResource = null;
			Array.prototype.push.apply(rootShadowContentResource.children, shadowContentResources);
			shadowContentResources = [ rootShadowContentResource ];
			// Always create a new empty scene for the root node.
			rootDvlSceneDatum = new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true);
		}
		this._dvlSceneData.push(rootDvlSceneDatum);
		rootShadowContentResource.dvlSceneDatum = rootDvlSceneDatum;
		rootDvlSceneDatum.addRef();
		this._collectAndCheckSourceProperties(rootShadowContentResource);

		var vkScene = new Scene(this, rootDvlSceneDatum.dvlSceneId);
		this._vkSceneData.push(new VkSceneDatum(vkScene, rootShadowContentResource));

		this._buildPlaceholders(vkScene.getDefaultNodeHierarchy(), null, null, rootShadowContentResource.children)
			.forEach(this._loadAndMergeContentResource.bind(this, vkScene.getDefaultNodeHierarchy()));

		return vkScene;
	};

	/**
	 * Updates or rebuilds a scene tree from the hierarchy of content resources.
	 *
	 * The content resources must be already loaded. Some changes in the content resource hierarchy can lead to
	 * rebuilding the scene completely. In this case a new scene is created.
	 *
	 * @param {sap.ui.vk.dvl.Scene} vkScene The scene to update or null to force to create a new one.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to update or build the scene from.
	 * @param {function} [onError] The callback function to call when an error happens.
	 * @returns {sap.ui.vk.dvl.Scene} The scene updated or created.
	 * @public
	 */
	GraphicsCore.prototype.updateSceneTree = function(vkScene, contentResources, onError) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return null;
		}

		var errors;
		var contentResourcesWithEncryptedVds3 = this._getContentResourcesWithEncryptedVds3(contentResources);
		if (contentResourcesWithEncryptedVds3.length > 0) {
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT25.summary), Messages.VIT25.code, "sap.ui.vk.dvl.GraphicsCore");
			errors = errors || {};
			errors.contentResourcesWithEncryptedVds3 = contentResourcesWithEncryptedVds3;
		}
		var contentResourcesWithMissingPasswords = this._getContentResourcesWithMissingPasswords(contentResources);
		if (contentResourcesWithMissingPasswords.length > 0) {
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT21.summary), Messages.VIT21.code, "sap.ui.vk.dvl.GraphicsCore");
			errors = errors || {};
			errors.contentResourcesWithMissingPasswords = contentResourcesWithMissingPasswords;
		}
		if (errors && onError) {
			onError(errors);
		}

		if (!vkScene) {
			return this.buildSceneTree(contentResources);
		}

		var rootShadowContentResource = this._findVkSceneData({ vkScene: vkScene })[0].shadowContentResource;
		var oldRootIsFromFile = !!rootShadowContentResource.source;
		var newRootIsFromFile = contentResources.length === 1 && !!contentResources[0].getSource();

		if (!(oldRootIsFromFile && newRootIsFromFile && rootShadowContentResource.source === contentResources[0].getSource()
				|| !oldRootIsFromFile && !newRootIsFromFile && rootShadowContentResource.fake === contentResources.length > 1)) {
			return this.buildSceneTree(contentResources);
		}

		this._updatePlaceholders(vkScene, rootShadowContentResource, contentResources)
			.forEach(this._loadAndMergeContentResource.bind(this, vkScene.getDefaultNodeHierarchy()));

		vkScene.getDefaultNodeHierarchy().fireChanged();

		return vkScene;
	};

	// END: Synchronous Content Resource related methods.
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: Asynchronous Content Resource related methods.

	/**
	 * Loads a DVL scene asynchronously.
	 * @param {SourceDatum} sourceDatum A source to load.
	 * @param {string}      [password]  A password to use to decrypt the model.
	 * @returns {Promise} A promise object which resolves with a scene ID.
	 * @private
	 */
	GraphicsCore.prototype._loadDvlSceneAsync = function(sourceDatum, password) {
		return new Promise(function(resolve, reject) {
			var deregisterEventHandlers;

			var handleSucceeded = function(parameters) {
				deregisterEventHandlers();
				this.fireSceneLoadingFinished({
					source: sourceDatum.source,
					sceneId: parameters.sceneId
				});
				resolve(parameters.sceneId);
			};

			var handleFailed = function(parameters) {
				deregisterEventHandlers();
				var errorMessage = sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(parameters.errorCode) : "";
				var reason = {
					source: sourceDatum.source,
					errorCode: parameters.errorCode,
					errorMessage: errorMessage
				};
				this.fireSceneLoadingFinished(reason);
				reject(reason);
			};

			var handleProgress = function(clientId, percentage) {
				this.fireSceneLoadingProgress({
					source: getSourceName(sourceDatum.source),
					percentage: percentage
				});
				return true; // Continue loading the model.
			}.bind(this);

			deregisterEventHandlers = function() {
				this._dvl.Client.NotifyFileLoadProgress = null;
				this._dvl.Client.detachSceneFailed(handleFailed, this);
				this._dvl.Client.detachSceneLoaded(handleSucceeded, this);
			}.bind(this);

			this._dvl.Client.attachSceneLoaded(handleSucceeded, this);
			this._dvl.Client.attachSceneFailed(handleFailed, this);
			this._dvl.Client.NotifyFileLoadProgress = handleProgress;

			this.fireSceneLoadingStarted({
				source: getSourceName(sourceDatum.source)
			});

			try {
				sap.ui.vk.dvl.checkResult(sourceDatum instanceof VdslSourceDatum ?
					this._dvl.Core.LoadSceneFromVDSLAsync(sourceDatum.content, password) :
					this._dvl.Core.LoadSceneByUrlAsync(getSourceName(sourceDatum.source), password, getStorageName(sourceDatum.source)));
			} catch (e) {
				deregisterEventHandlers();
				handleFailed.call(this, { errorCode: e instanceof DvlException ? e.code : sap.ve.dvl.DVLRESULT.FAIL });
			}
		}.bind(this));
	};

	 var forEachAsynchronousSequential = function(objects, action) {
		return new Promise(function(resolve /* , reject */) {
			(function step(index) {
				if (index >= objects.length) {
					resolve();
				} else {
					action(objects[index])
						.catch(function() {
							// If the action fails we still need to go to the next object in the object list.
							// Pass through to the 'then' method below.
						})
						.then(function() {
							step(index + 1);
						});
				}
			})(0); // Start with the first item.
		});
	};

	/**
	 * Loads and merges a content resources to the root scene.
	 *
	 * This is a private helper method used in methods buildSceneTree and updateSceneTree.
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy object.
	 * @param {ShadowContentResource[]} shadowContentResources The content resources to merge into the root scene.
	 * @returns {Promise} A Promise object that resolves when all content resources have been loaded.
	 * @private
	 */
	GraphicsCore.prototype._loadAndMergeContentResourcesAsync = function(nodeHierarchy, shadowContentResources) {
		var errors,
		    that = this;
		return forEachAsynchronousSequential(shadowContentResources, function(shadowContentResource) {
			if (shadowContentResource.source) {
				var sourceDatum = that._findSourceData({ source: shadowContentResource.source })[0];
				if (!sourceDatum) {
					var message = "Failed to load content resource with sourceId '" + shadowContentResource.sourceId + "' due to failed downloading from URL '" + getSourceName(shadowContentResource.source) + "'.";
					log.warning(message);
					errors = errors || [];
					errors.push({
						errorMessage: message,
						source: shadowContentResource.source
					});
					return Promise.reject();
				}
				return (function() {
						var dvlSceneDatum = that._findDvlSceneData({ sourceDatum: sourceDatum, root: false })[0];
						if (dvlSceneDatum) {
							return Promise.resolve(dvlSceneDatum);
						} else {
							// The DVL scene is not created yet.
							return that._loadDvlSceneAsync(sourceDatum, shadowContentResource.password).then(
								function(dvlSceneId) { // onFulfilled
									dvlSceneDatum = new DvlSceneDatum(dvlSceneId, sourceDatum, false);
									that._dvlSceneData.push(dvlSceneDatum);
									sourceDatum.addRef();
									return Promise.resolve(dvlSceneDatum);
								},
								function(reason) { // onRejected
									errors = errors || [];
									errors.push(reason);
									return Promise.reject();
								}
							);
						}
					})().then(function(dvlSceneDatum) {
						shadowContentResource.dvlSceneDatum = dvlSceneDatum;
						dvlSceneDatum.addRef();
						that._collectAndCheckSourceProperties(shadowContentResource);
						var groupingNodeRef = shadowContentResource.nodeProxy.getNodeRef(),
						    rootSceneRef = nodeHierarchy.getSceneRef(),
						    firstChild = nodeHierarchy.getChildren(groupingNodeRef)[0];
						that._dvl.Scene.RetrieveSceneInfo(dvlSceneDatum.dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN).ChildNodes.forEach(function(nodeRef) {
							that._dvl.Scene.CreateNodeCopy(rootSceneRef, nodeRef, groupingNodeRef, sap.ve.dvl.DVLCREATENODECOPYFLAG.COPY_CHILDREN, null, firstChild);
						});
						return Promise.resolve();
					});
			}
			return Promise.resolve();
		}).then(function() {
			return Promise.resolve(errors);
		});
	};

	/**
	 * Builds a scene tree from the hierarchy of content resources. The content resources must be already loaded.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to build the scene from.
	 * @returns {Promise} A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise} object
	 *     that resolves with an object with two fields:
	 *     <ul>
	 *         <li><code>scene</code> - {@link sap.ui.vk.dvl.Scene sap.ui.vk.dvl.Scene} - the scene object.</li>
	 *         <li><code>failureReason</code> - object[] - the list of errors if any.</li>
	 *     </ul>
	 * @public
	 */
	GraphicsCore.prototype.buildSceneTreeAsync = function(contentResources) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return Promise.resolve(null);
		}

		var shadowContentResources = contentResources.map(function(contentResource) {
			return new ShadowContentResource(contentResource);
		});

		// First create a DVL scene either from the root content resource or an empty one if there are more than one
		// root content resource.
		// Then for each child content resource create a placeholder node.
		// Then load child DVL scenes and clone their top level nodes under placeholder nodes of the corresponding
		// content resources.

		return function() {
			var rootShadowContentResource;
			// Process top level content contentResources in a special way. Then process next level content contentResources recursively.
			if (shadowContentResources.length === 1) {
				rootShadowContentResource = shadowContentResources[0];
				if (rootShadowContentResource.source) {
					// If there is a single top level content resource with a URL or File then load the resource without creating
					// a grouping node and merging. Always create a new DVL scene because root DVL scenes are not shared among vkScenes.
					var sourceDatum = this._findSourceData({ source: rootShadowContentResource.source })[0];
					if (sourceDatum) {
						return this._loadDvlSceneAsync(sourceDatum, rootShadowContentResource.password).then(
							function(dvlSceneId) { // onFulfilled
								var rootDvlSceneDatum = new DvlSceneDatum(dvlSceneId, sourceDatum, true);
								sourceDatum.addRef();
								return Promise.resolve({
									shadowContentResource: rootShadowContentResource,
									dvlSceneDatum: rootDvlSceneDatum
								});
							}
						);
					} else {
						return Promise.reject({
							errorMessage: "Failed to download the root content resource.",
							source: rootShadowContentResource.source
						});
					}
				}
				return Promise.resolve({
					shadowContentResource: rootShadowContentResource,
					dvlSceneDatum: new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true)
				});
			} else {
				// Create a fake root content resource.
				var fakeRootContentResource = new ContentResource({
					sourceType: "vds",
					sourceId: jQuery.sap.uid()
				});
				rootShadowContentResource = new ShadowContentResource(fakeRootContentResource, true);
				fakeRootContentResource.destroy();
				fakeRootContentResource = null;
				Array.prototype.push.apply(rootShadowContentResource.children, shadowContentResources);
				shadowContentResources = [ rootShadowContentResource ];
				// Always create a new empty scene for the root node.
				return Promise.resolve({
					shadowContentResource: rootShadowContentResource,
					dvlSceneDatum: new DvlSceneDatum(this._dvl.Core.CreateEmptyScene(), null, true)
				});
			}
		}.call(this).then(
			function(root) { // onFulfilled
				this._dvlSceneData.push(root.dvlSceneDatum);
				root.shadowContentResource.dvlSceneDatum = root.dvlSceneDatum;
				root.dvlSceneDatum.addRef();
				this._collectAndCheckSourceProperties(root.shadowContentResource);

				var vkScene = new Scene(this, root.dvlSceneDatum.dvlSceneId);
				this._vkSceneData.push(new VkSceneDatum(vkScene, root.shadowContentResource));

				var nodeHierarchy = vkScene.getDefaultNodeHierarchy();
				return this._loadAndMergeContentResourcesAsync(nodeHierarchy, this._buildPlaceholders(vkScene.getDefaultNodeHierarchy(), null, null, root.shadowContentResource.children)).then(function(errors) {
					return Promise.resolve({
						scene: vkScene,
						failureReason: errors
					});
				});
			}.bind(this)
		);
	};

	/**
	 * Updates or rebuilds a scene tree from the hierarchy of content resources.
	 *
	 * The content resources must be already loaded. Some changes in the content resource hierarchy can lead to
	 * rebuilding the scene completely. In this case a new scene is created.
	 *
	 * @param {sap.ui.vk.dvl.Scene} vkScene The scene to update or null to force to create a new one.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to update or build the scene from.
	 * @returns {Promise} A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise} object
	 *     that resolves with an object with two fields:
	 *     <ul>
	 *         <li><code>scene</code> - {@link sap.ui.vk.dvl.Scene sap.ui.vk.dvl.Scene} - the scene object.</li>
	 *         <li><code>failureReason</code> - object[] - the list of errors if any.</li>
	 *     </ul>
	 * @public
	 */
	GraphicsCore.prototype.updateSceneTreeAsync = function(vkScene, contentResources) {
		// At this point all content contentResources must be downloaded.

		if (contentResources.length === 0) {
			return Promise.resolve(null);
		}

		var contentResourcesWithEncryptedVds3 = this._getContentResourcesWithEncryptedVds3(contentResources);
		if (contentResourcesWithEncryptedVds3.length > 0) {
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT25.summary), Messages.VIT25.code, "sap.ui.vk.dvl.GraphicsCore");
		}
		var contentResourcesWithMissingPasswords = this._getContentResourcesWithMissingPasswords(contentResources);
		if (contentResourcesWithMissingPasswords.length > 0) {
			log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT21.summary), Messages.VIT21.code, "sap.ui.vk.dvl.GraphicsCore");
		}

		if (!vkScene) {
			return this.buildSceneTreeAsync(contentResources);
		}

		var rootShadowContentResource = this._findVkSceneData({ vkScene: vkScene })[0].shadowContentResource;
		var oldRootIsFromFile = !!rootShadowContentResource.source;
		var newRootIsFromFile = contentResources.length === 1 && !!contentResources[0].getSource();

		if (!(oldRootIsFromFile && newRootIsFromFile && rootShadowContentResource.source === contentResources[0].getSource()
				|| !oldRootIsFromFile && !newRootIsFromFile && rootShadowContentResource.fake === contentResources.length > 1)) {
			return this.buildSceneTreeAsync(contentResources);
		}

		return new Promise(function(resolve, reject) {
			var nodeHierarchy = vkScene.getDefaultNodeHierarchy();
			this._loadAndMergeContentResourcesAsync(nodeHierarchy, this._updatePlaceholders(vkScene, rootShadowContentResource, contentResources)).then(function(errors) {
				resolve({
					scene: vkScene,
					failureReason: errors
				});
				nodeHierarchy.fireChanged();
			});
		}.bind(this));
	};

	// END: Asynchronous Content Resource related methods.
	////////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Scene related methods.

	/**
	 * Destroys the scene object.
	 * @param {sap.ui.vk.dvl.Scene} vkScene The scene to destroy.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.destroyScene = function(vkScene) {
		var vkSceneDataIndex;
		for (vkSceneDataIndex = 0; vkSceneDataIndex < this._vkSceneData.length; ++vkSceneDataIndex) {
			if (this._vkSceneData[vkSceneDataIndex].vkScene === vkScene) {
				break;
			}
		}
		if (vkSceneDataIndex === this._vkSceneData.length) {
			log.warning("Scene with id '" + vkScene.getId() + "' is not created by this GraphicsCore.");
			return this;
		}
		var vkSceneData = this._vkSceneData.splice(vkSceneDataIndex, 1)[0];
		this._destroyShadowContentResource(vkScene, vkSceneData.shadowContentResource);
		vkScene.destroy();
		return this;
	};

	// END: Scene related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Viewport related methods.

	var findIndex = function(array, predicate, thisArg) {
		jQuery.sap.assert(Array.isArray(array), "The first parameter must be an array.");
		jQuery.sap.assert(typeof predicate === "function", "The second parameter must be a function.");
		for (var i = 0, count = array.length; i < count; ++i) {
			if (predicate.call(thisArg, array[i], i, array)) {
				return i;
			}
		}
		return -1;
	};

	var findViewportByControl = function(viewports, control) {
		return findIndex(viewports, function(viewport) {
			return viewport.control === control;
		});
	};

	var findViewportByRendererId = function(viewports, rendererId) {
		return findIndex(viewports, function(viewport) {
			return viewport.rendererId === rendererId;
		});
	};

	/**
	 * Registers the viewport control in GraphicsCore.
	 * Viewports are registered when corresponding DVLRenderers are created.
	 * @param {sap.ui.vk.Viewport} viewportControl The viewport control to register.
	 * @returns {boolean} <code>true</code> if <code>viewportControl</code> gets registered, <code>false</code> if <code>viewportControl</code> was already registered.
	 * @private
	 */
	GraphicsCore.prototype._registerViewport = function(viewportControl) {
		jQuery.sap.assert(viewportControl, "The viewportControl parameter must not be null.");

		if (findViewportByControl(this._viewports, viewportControl) >= 0) {
			return false;
		}

		var newViewport = {
			control: viewportControl,
			canvas: null,
			rendererId: null
		};

		if (this._viewports.length === 0) {
			// As this is the only viewport use the WebGL canvas on screen and the default renderer.
			newViewport.canvas     = this._canvas;
			newViewport.rendererId = this._rendererId;
			// As there is at least one viewport we can start the render loop.
			this._startRenderLoop();
		} else {
			// There are more than 1 viewport.

			if (this._viewports.length === 1) {
				// When a second viewport is registered the WebGL canvas associated with the first viewport goes off screen.
				// Create a 2D canvas for the first viewport.
				var firstViewport = this._viewports[0];
				firstViewport.control._setCanvas(firstViewport.canvas = document.createElement("canvas"));

				// The renderer for the first viewport remains the same.

				// Add a FrameFinished event handler to copy the image from the offscreen WebGL canvas to the 2D canvases.
				this._dvl.Client.attachFrameFinished(this._handleFrameFinished, this);
			}

			newViewport.canvas     = document.createElement("canvas");
			newViewport.rendererId = this._dvl.Core.CreateRenderer();
		}

		viewportControl._setCanvas(newViewport.canvas);
		viewportControl._setRenderer(newViewport.rendererId);

		// When a viewport control changes its size we need to resize the WebGL canvas.
		viewportControl.attachResize(this._handleViewportResize, this);

		this._viewports.push(newViewport);

		return true;
	};

	/**
	 * Deregisters the viewport control in GraphicsCore.
	 * Viewports are unregistered when corresponding DVLRenderers are destroyed.
	 * @param {sap.ui.vk.Viewport} viewportControl The viewport to unregister.
	 * @returns {boolean} <code>true</code> if <code>viewportControl</code> gets unregistered, <code>false</code> if <code>viewportControl</code> was already unregistered.
	 * @private
	 */
	GraphicsCore.prototype._deregisterViewport = function(viewportControl) {
		jQuery.sap.assert(viewportControl, "The viewportControl parameter must not be null.");

		var index = findViewportByControl(this._viewports, viewportControl);
		if (index < 0) {
			return false;
		}

		// The default renderer should not be deleted otherwise the behaviour is undefined.
		jQuery.sap.assert(index > 0 || this._viewports.length === 1, "The first registered viewport control must be deregistered last.");

		var viewport = this._viewports.splice(index, 1)[0];

		if (this._viewports.length === 0) {
			// It is the last viewport control, no need to run the render loop any more.
			// We do not delete the default renderer and the on-screen WebGL renderer used by the last viewport.
			this._stopRenderLoop();

			// NB: do not delete the last renderer as it is the default renderer required to keep geometry in GPU.
		} else {
			if (this._viewports.length === 1) {
				// As only one viewport remains there is no need to copy from the WebGL canvas to the 2D canvases any more,
				// so remove the FrameFinished event handler.
				this._dvl.Client.detachFrameFinished(this._handleFrameFinished, this);

				// As only one viewport remains use the WebGL canvas on screen.
				var remainingViewport = this._viewports[1 - index];
				remainingViewport.control._setCanvas(remainingViewport.canvas = this._canvas);
			}

			this._dvl.Core.DeleteRenderer(viewport.rendererId);
		}

		viewportControl.detachResize(this._handleViewportResize, this);
		viewportControl._setRenderer(null);
		viewportControl._setCanvas(null);

		return true;
	};

	/**
	 * Gets the Viewport object count.
	 * @returns {int} The number of Viewport objects registered in GraphicsCore.
	 * @private
	 */
	GraphicsCore.prototype._getViewportCount = function() {
		return this._viewports.length;
	};

	/**
	 * A [sap.ui.vk.Viewport.resize]{@link sap.ui.vk.Viewport#resize} event handler.
	 * @param {sap.ui.base.Event} event The event object.
	 * @private
	 */
	GraphicsCore.prototype._handleViewportResize = function(event) {
		if (this._viewports.length > 1) {
			this._canvas.width  = Math.max.apply(null, this._viewports.map(function(viewport) { return viewport.canvas.width;  }));
			this._canvas.height = Math.max.apply(null, this._viewports.map(function(viewport) { return viewport.canvas.height; }));
		}
	};

	/**
	 * Starts the render loop.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._startRenderLoop = function() {
		if (!this._renderLoopRequestId) {
			this._renderLoopRequestId = window.requestAnimationFrame(this._renderLoopFunction);
		}
		return this;
	};

	/**
	 * Stops the render loop.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @private
	 */
	GraphicsCore.prototype._stopRenderLoop = function() {
		if (this._renderLoopRequestId) {
			window.cancelAnimationFrame(this._renderLoopRequestId);
			this._renderLoopRequestId = null;
		}
		return this;
	};

	/**
	 * Render a frame if needed and schedule rendering another frame.
	 * @private
	 */
	GraphicsCore.prototype._renderLoop = (function() {
		var lastRendererId; // The last renderer that rendered a frame. Used to optimise number of calls to SetDimensions in _renderLoop.

		return function() {
			var multipleViewports = this._viewports.length > 1;

			this._viewports.forEach(function(viewport) {
				var canvas     = viewport.canvas,
				    rendererId = viewport.rendererId;

				this._dvl.Renderer._processCommandQueue(rendererId);

				// NB: in some browsers the drawImage function fails when the canvas size is zero.
				if (canvas.width > 0 && canvas.height > 0 && this._dvl.Renderer.ShouldRenderFrame(rendererId)) {
					if (multipleViewports && lastRendererId !== rendererId) {
						// If there are more than one renderer we have to set OpenGL viewport for each frame.
						this._dvl.Renderer.SetDimensions(canvas.width, canvas.height, rendererId);
					}

					this._dvl.Renderer.RenderFrame(rendererId);
					lastRendererId = rendererId;
					// jQuery.sap.assert(!this._dvl.Renderer.ShouldRenderFrame(rendererId), "ShouldRenderFrame should return false after RenderFrame.");
				}
			}, this);

			this._renderLoopRequestId = window.requestAnimationFrame(this._renderLoopFunction);
		};
	})();

	/**
	 * A callback called when rendering a frame finishes.
	 * @param {object} event            A map of parameters. See below.
	 * @param {string} event.clientId   Token representing the target client instance. This is usually the canvas ID.
	 * @param {string} event.rendererId Token representing the renderer instance.
	 * @private
	 */
	GraphicsCore.prototype._handleFrameFinished = function(event) {
		jQuery.sap.assert(this._viewports.length > 1, "Method _handleFrameFinished should be only called when there are multiple viewports.");

		if (this._viewports.length > 1) {
			// There are multiple viewports, copy from the WebGL canvas to the 2D canvas associated with the viewport.
			var index = findViewportByRendererId(this._viewports, event.rendererId);
			if (index >= 0) {
				var targetCanvas  = this._viewports[index].canvas,
					targetContext = targetCanvas.getContext("2d"),
					targetWidth   = targetCanvas.width,
					targetHeight  = targetCanvas.height;
				// The origin of the WebGL context is in the left lower corner. The origin of the 2D context is in the left top corner.
				// That's why sourceY does not equal 0 in general case.
				targetContext.drawImage(this._canvas,
					0, this._canvas.height - targetHeight, targetWidth, targetHeight,
					0, 0, targetWidth, targetHeight);
			}
		}
	};

	// END: Viewport related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: View State Manager related methods.

	/**
	 * Creates a new ViewStateManager object.
	 *
	 * GraphicsCore owns the new ViewStateManager object. The object must be destroyed with the {@link #destroyViewStateManager destroyViewStateManager} method;
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object the view state manager is created for.
	 * @param {boolean} shouldTrackVisibilityChanges Flag set by the application to decide whether the {sap.ui.vk.ViewStateManager} should track the visibility changes or not.
	 * @param {boolean} canTrackVisibilityChanges Flag which indicates if the current content resource can track visibility changes.
	 * @returns {sap.ui.vk.ViewStateManager} The newly created ViewStateManager object.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	GraphicsCore.prototype.createViewStateManager = function(nodeHierarchy, shouldTrackVisibilityChanges, canTrackVisibilityChanges) {
		var viewStateManager = new sap.ui.vk.dvl.ViewStateManager();
		viewStateManager._setNodeHierarchy(nodeHierarchy)
		                .setShouldTrackVisibilityChanges(shouldTrackVisibilityChanges)
		                .setCanTrackVisibilityChanges(canTrackVisibilityChanges);
		this._viewStateManagers.push(viewStateManager);
		return viewStateManager;
	};

	/**
	 * Destroys the ViewStateManager object created with the {@link #createViewStateManager createViewStateManager} method.
	 *
	 * @param {sap.ui.vk.ViewStateManager} viewStateManager The ViewStateManagerObject to destroy.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	GraphicsCore.prototype.destroyViewStateManager = function(viewStateManager) {
		var index = this._viewStateManagers.indexOf(viewStateManager);
		if (index >= 0) {
			this._viewStateManagers.splice(index, 1)[0].destroy();
		}
		return this;
	};

	// END: View State Manager related methods.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// BEGIN: Utility methods.

	/**
	 * Shows or hides debug information in the viewports.
	 *
	 * @param {boolean} enable <code>true</code> to show debug information, <code>false</code> to hide debug information.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 * @experimental since version 1.32.0. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.showDebugInfo = function(enable) {
		this._viewports.forEach(function(viewport) {
			viewport.control.setShowDebugInfo(enable);
		});
		return this;
	};

	/**
	 * Gets one of APIs supported by the DVL library.
	 *
	 * @param {sap.ui.vk.dvl.GraphicsCoreApi} apiId The API identifier.
	 * @returns {object} The object that implements the requested API or null if the API is not supported.
	 * @public
	 * @experimental since version 1.32.0. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.getApi = function(apiId) {
		switch (apiId) {
			case sap.ui.vk.dvl.GraphicsCoreApi.LegacyDvl:
				return this._dvl;
			default:
				return null;
		}
	};

	/**
	 * Collects and destroys unused objects and resources.
	 *
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 * @experimental since version 1.34.1. The behavior might change in the next version.
	 */
	GraphicsCore.prototype.collectGarbage = function() {
		this._cleanupDvlSceneData();
		this._cleanupSourceData();
		return this;
	};

	// END: Utility methods.
	////////////////////////////////////////////////////////////////////////

	GraphicsCore.prototype._onlocalizationChanged = function(event) {
		if (event.getParameter("changes").language) {
			sap.ui.vk.dvl.checkResult(this._dvl.Core.SetLocale(sap.ui.getCore().getConfiguration().getLanguageTag()));
		}
	};

	/**
	 * Sets an object that decrypts content of encrypted models.
	 *
	 * @param {sap.ui.vk.DecryptionHandler} handler An object that decrypts content of encrypted models.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} <code>this</code> to allow method chaining.
	 * @public
	 */
	GraphicsCore.prototype.setDecryptionHandler = function(handler) {
		this._dvl.Client.setDecryptionHandler(handler);
		return this;
	};

	/**
	 * Gets an object that decrypts content of encrypted models.
	 *
	 * @return {sap.ui.vk.DecryptionHandler} An object that decrypts content of encrypted models.
	 * @public
	 */
	GraphicsCore.prototype.getDecryptionHandler = function() {
		return this._dvl.Client.getDecryptionHandler();
	};

	////////////////////////////////////////////////////////////////////////////
	// BEGIN: Event handling

	GraphicsCore.prototype.attachSceneLoadingFinished = function(data, func, listener) {
		return this.attachEvent("sceneLoadingFinished", data, func, listener);
	};

	GraphicsCore.prototype.detachSceneLoadingFinished = function(func, listener) {
		return this.detachEvent("sceneLoadingFinished", func, listener);
	};

	GraphicsCore.prototype.fireSceneLoadingFinished = function(parameter, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("sceneLoadingFinished", parameter, allowPreventDefault, enableEventBubbling);
	};

	GraphicsCore.prototype.attachSceneLoadingProgress = function(data, func, listener) {
		return this.attachEvent("sceneLoadingProgress", data, func, listener);
	};

	GraphicsCore.prototype.detachSceneLoadingProgress = function(func, listener) {
		return this.detachEvent("sceneLoadingProgress", func, listener);
	};

	GraphicsCore.prototype.fireSceneLoadingProgress = function(parameter, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("sceneLoadingProgress", parameter, allowPreventDefault, enableEventBubbling);
	};

	GraphicsCore.prototype.attachSceneLoadingStarted = function(data, func, listener) {
		return this.attachEvent("sceneLoadingStarted", data, func, listener);
	};

	GraphicsCore.prototype.detachSceneLoadingStarted = function(func, listener) {
		return this.detachEvent("sceneLoadingStarted", func, listener);
	};

	GraphicsCore.prototype.fireSceneLoadingStarted = function(parameter, allowPreventDefault, enableEventBubbling) {
		return this.fireEvent("sceneLoadingStarted", parameter, allowPreventDefault, enableEventBubbling);
	};

	// END: Event handling
	////////////////////////////////////////////////////////////////////////////

	/**
	 * @interface Contract for objects that implement decryption.
	 *
	 * An interface for an object provided by an application to decrypt content of encrypted models.
	 *
	 * Content is encrypted with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard AES128} algorithm
	 * in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29 CBC} mode.
	 *
	 * A key is derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying the
	 * {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2 SHA256}
	 * function 10,000 times.
	 *
	 * @example <caption>A sample implementation and usage of the sap.ui.vk.DecryptionHandler interface with the {@link https://github.com/vibornoff/asmcrypto.js asmCrypto} library.</caption>
	 *
	 *   ...
	 *   <script src="http://vibornoff.com/asmcrypto.js"></script>
	 *   ...
	 *   var decryptionHandler = {
	 *       deriveKey: function(salt, password) {
	 *           try {
	 *               return asmCrypto.PBKDF2_HMAC_SHA256.bytes(password, salt, 10000, 16);
	 *           } catch (ex) {
	 *               return null;
	 *           }
	 *       },
	 *       decrypt: function(key, iv, input) {
	 *           try {
	 *               return asmCrypto.AES_CBC.decrypt(input, key, true, iv);
	 *           } catch (ex) {
	 *               return null;
	 *           }
	 *       }
	 *   };
	 *   ...
	 *   var viewer = new sap.ui.vk.Viewer();
	 *   viewer.setDecryptionHandler(decryptionHandler);
	 *   var contentResource = new sap.ui.vk.ContentResource({
	 *       source: "http://my-web-server.com/my-encrypted-model.vds",
	 *       sourceType: "vds",
	 *       sourceId: "abc",
	 *       password: "abracadabra"
	 *   });
	 *   viewer.addContentResource(contentResource);
	 *
	 * @name sap.ui.vk.DecryptionHandler
	 * @public
	 */

	/**
	 * Generates a cryptographic session key derived from a base data value.
	 *
	 * The key must be derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying the
	 * {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2 SHA256}
	 * function 10,000 times.
	 *
	 * The resulting 128-bit key should be passed to subseqeunt calls to {@link sap.ui.vk.DecryptionHandler#decrypt sap.ui.vk.DecryptionHandler.decrypt}.
	 *
	 * @name sap.ui.vk.DecryptionHandler.prototype.deriveKey
	 * @function
	 * @param {Uint8Array} salt Random data that is used as an additional input to a one-way function that "hashes" a password or passphrase.
	 * @param {Uint8Array} password A password used for encryption/decryption.
	 * @return {object} A derived 128-bit key that should be passed to subsequent calls to {@link sap.ui.vk.DecryptionHandler#decrypt sap.ui.vk.DecryptionHandler.decrypt}.
	 * @public
	 */

	/**
	 * Decrypts the input buffer with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard AES128} algorithm
	 * in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29 CBC} mode.
	 *
	 * @name sap.ui.vk.DecryptionHandler.prototype.decrypt
	 * @function
	 * @param {object} key The derived key generated by the previous call to {@link sap.ui.vk.DecryptionHandler#deriveKey sap.ui.vk.DecryptionHandler.deriveKey}.
	 * @param {Uint8Array} iv The 128-bit {@link https://en.wikipedia.org/wiki/Initialization_vector initialization vector}.
	 * @param {Uint8Array} encryptedData The encrypted buffer.
	 * @return {Uint8Array} The decrypted buffer.
	 * @public
	 */

	return GraphicsCore;
});

}; // end of sap/ui/vk/dvl/GraphicsCore.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.dvl.Viewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.dvl.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/dvl/Viewport",[
	"jquery.sap.global", "../library", "../ViewportBase", "sap/ui/core/ResizeHandler", "../Loco", "../ViewportHandler",
	"../Smart2DHandler", "../Messages", "../ContentConnector", "../ViewStateManager",  "./GraphicsCore"
], function(
	jQuery, library, ViewportBase, ResizeHandler, Loco, ViewportHandler,
	Smart2DHandler, Messages, ContentConnector, ViewStateManager, GraphicsCore
) {
	"use strict";

	// dictionaries for strings
	var dictionary = {
		encodedProjectionType: {},
		decodedProjectionType: {},
		encodedBindingType: {},
		decodedBindingType: {},
		decodedZoomTo: {}
	};

	// camera projection type
	dictionary.decodedProjectionType[sap.ui.vk.CameraProjectionType.Perspective] = sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE;
	dictionary.decodedProjectionType[sap.ui.vk.CameraProjectionType.Orthographic] = sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC;
	dictionary.encodedProjectionType[sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE] = sap.ui.vk.CameraProjectionType.Perspective;
	dictionary.encodedProjectionType[sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC] = sap.ui.vk.CameraProjectionType.Orthographic;

	// camera FOVBinding
	dictionary.decodedBindingType[sap.ui.vk.CameraFOVBindingType.Minimum] = sap.ve.dvl.DVLCAMERAFOVBINDING.MIN;
	dictionary.decodedBindingType[sap.ui.vk.CameraFOVBindingType.Maximum] = sap.ve.dvl.DVLCAMERAFOVBINDING.Max;
	dictionary.decodedBindingType[sap.ui.vk.CameraFOVBindingType.Horizontal] = sap.ve.dvl.DVLCAMERAFOVBINDING.HORZ;
	dictionary.decodedBindingType[sap.ui.vk.CameraFOVBindingType.Vertical] = sap.ve.dvl.DVLCAMERAFOVBINDING.VERT;
	dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.MIN] = sap.ui.vk.CameraFOVBindingType.Minimum;
	dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.MAX] = sap.ui.vk.CameraFOVBindingType.Maximum;
	dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.HORZ] = sap.ui.vk.CameraFOVBindingType.Horizontal;
	dictionary.encodedBindingType[sap.ve.dvl.DVLCAMERAFOVBINDING.VERT] = sap.ui.vk.CameraFOVBindingType.Vertical;

	// zoom to options
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.All] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_ALL;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.Visible] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_VISIBLE;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.Selected] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_SELECTED;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.Node] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_NODE;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.NodeSetIsolation] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_NODE_SETISOLATION;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.Restore] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_RESTORE;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.RestoreRemoveIsolation] = sap.ve.dvl.DVLZOOMTO.DVLZOOMTO_RESTORE_REMOVEISOLATION;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewLeft] = sap.ve.dvl.DVLZOOMTO.VIEW_LEFT;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewRight] = sap.ve.dvl.DVLZOOMTO.VIEW_RIGHT;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewTop] = sap.ve.dvl.DVLZOOMTO.VIEW_TOP;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewBottom] = sap.ve.dvl.DVLZOOMTO.VIEW_BOTTOM;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewBack] = sap.ve.dvl.DVLZOOMTO.VIEW_BACK;
	dictionary.decodedZoomTo[sap.ui.vk.ZoomTo.ViewFront] = sap.ve.dvl.DVLZOOMTO.VIEW_FRONT;

	/**
	 * Constructor for a new Viewport.
	 *
	 * @class
	 * Provides a rendering canvas for the 3D elements of a loaded scene.
	 *
	 * @param {string} [sId] ID for the new Viewport control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Viewport control.
	 * @public
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ViewportBase
	 * @alias sap.ui.vk.dvl.Viewport
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewport = ViewportBase.extend("sap.ui.vk.dvl.Viewport", /** @lends sap.ui.vk.dvl.Viewport.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"beginGesture",
				"endGesture",
				"getGraphicsCore",
				"getViewInfo",
				"hitTest",
				"pan",
				"queueCommand",
				"rotate",
				"setGraphicsCore",
				"setScene",
				"setViewInfo",
				"tap",
				"zoom"
			],

			properties: {
				/**
				 * Enables or disables showing of all hotspots
				 */
				showAllHotspots: {
					type: "boolean",
					defaultValue: false
				},

				/**
				 * Color used for highlighting Smart2D hotspots in the ABGR format
				 */
				hotspotColorABGR: {
					type: "int",
					defaultValue: 0xc00000ff
				},

				/**
				 * Color used for highlighting Smart2D hotspots in the CSS Color format
				 */
				hotspotColor: {
					type: "sap.ui.core.CSSColor",
					defaultValue: "rgba(255, 0, 0, 0.7529411764705882)"
				},

				/**
				 * Viewport background top color in the ABGR format
				 */
				backgroundColorTopABGR: {
					type: "int",
					defaultValue: 0xff000000 // rgba(0, 0, 0, 1) black
				},

				/**
				 * Viewport background bottom color in the ABGR format
				 */
				backgroundColorBottomABGR: {
					type: "int",
					defaultValue: 0xffffffff // rgba(255, 255, 255, 1) white
				}

			},

			events: {
				/**
				 * This event will be fired when a URL in a note is clicked.
				 */
				urlClicked: {
					parameters: {
						/**
						 * Returns a node reference of the note that contains the URL.
						 */
						nodeRef: "any",
						/**
						 * Returns a URL that was clicked.
						 */
						url: "string"
					},
					enableEventBubbling: true
				},

				/**
				 * This event will be fired when a node is clicked.
				 */
				nodeClicked: {
					parameters: {
						/**
						 * Returns a node reference.
						 */
						nodeRef: "any",
						x: "int",
						y: "int"
					},
					enableEventBubbling: true
				},

				pan: {
					parameters: {
						dx: "int",
						dy: "int"
					}
				},

				zoom: {
					parameters: {
						zoomFactor: "float"
					}
				},

				rotate: {
					parameters: {
						dx: "int",
						dy: "int"
					}
				},
				/**
				 * This event will be fired when a VDS file has been loaded into the Viewport.
				 */
				viewActivated: {
					parameters: {
						/**
						 * The type of content loaded into the Viewport (for example: 2D, 3D).
						 */
						type: {
							type: "string"
						}
					}
				},

				/**
				 * This event will be fired when the frame rendering has finished.
				 */
				frameRenderingFinished: {
				}
			}
		}
	});

	var basePrototype = Viewport.getMetadata().getParent().getClass().prototype;

	Viewport.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}

		this._graphicsCore = null;
		this._dvl = null;
		this._dvlRendererId = null;
		this._viewStateManager = null;
		this._canvas = null;
		this._resizeListenerId = null;
		// _is2D indicated whether this is a 2D Viewport or not
		this._is2D = false;

		this._viewportHandler = new ViewportHandler(this);
		this._loco = new Loco();
		this._loco.addHandler(this._viewportHandler);
		this._smart2DHandler = null;

		// we keep track of which was the last played step; this info will be used in getViewInfo/setViewInfo
		this._lastPlayedStep = null;

		this._contentConnector = null;
	};

	Viewport.prototype.exit = function() {
		this._loco.removeHandler(this._viewportHandler);
		this._viewportHandler.destroy();

		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		this._clearContentConnector();

		this.setViewStateManager(null);
		this.setScene(null);
		this.setGraphicsCore(null);
		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	/**
	 * Attaches or detaches the Viewport to the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object.
	 *
	 * @param {sap.ui.vk.dvl.GraphicsCore} graphicsCore The {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object or <code>null</code>.
	 * If the <code>graphicsCore</code> parameter is not <code>null</code>, a rendering object corresponding to the Viewport is created.
	 * If the <code>graphicsCore</code> parameter is <code>null</code>, the rendering object corresponding to the Viewport is destroyed.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	Viewport.prototype.setGraphicsCore = function(graphicsCore) {
		if (graphicsCore != this._graphicsCore) {
			if (this._graphicsCore) {
				this._dvl.Client.detachFrameFinished(this._handleFrameFinished, this);
				this._dvl.Client.detachStepEvent(this._updateLastPlayedStep, this);
				this._dvl.Renderer.SetViewStateManager(null, this._dvlRendererId);
				this._graphicsCore._deregisterViewport(this);
				this._dvl = null;
			}

			this._graphicsCore = graphicsCore;

			if (this._graphicsCore) {
				this._dvl = this._graphicsCore._getDvl();
				this._graphicsCore._registerViewport(this);
				this.setShowDebugInfo(this.getShowDebugInfo()); // Synchronise DVL internals with viewport properties.
				this._dvl.Client.attachStepEvent(this._updateLastPlayedStep, this);
				this._dvl.Client.attachFrameFinished(this._handleFrameFinished, this);
				this._dvl.Renderer.SetViewStateManager(this._viewStateManager /* && this._viewStateManager.getImplementation() */, this._dvlRendererId);
			}
		}
		return this;
	};

	/**
	 * Gets the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object the Viewport is attached to.
	 * @returns {sap.ui.vk.dvl.GraphicsCore} The {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object the Viewport is attached to, or <code>null</code>.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	Viewport.prototype.getGraphicsCore = function() {
		return this._graphicsCore;
	};

	/**
	 * Sets the {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element for rendering 3D content.
	 * @param {HTMLCanvasElement} canvas The {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewport.prototype._setCanvas = function(canvas) {
		// Invalidate the viewport only when it is already rendered.
		var shouldInvalidate = this.getDomRef() && this._canvas !== canvas;
		this._canvas = canvas;
		if (shouldInvalidate) {
			this.invalidate();
		}
		return this;
	};

	/**
	 * Sets a renderer instance for the viewport.
	 * @param {string} rendererId The renderer ID.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @private
	 */
	Viewport.prototype._setRenderer = function(rendererId) {
		this._dvlRendererId = rendererId;
		return this;
	};

	/**
	 * Updates the last played step.
	 * @param {object} parameters          A map of parameters. See below.
	 * @param {string} parameters.clientId Token representing the target client instance. This is usually the canvas ID.
	 * @param {number} parameters.type     The [DVLSTEPEVENT]{@link sap.ve.dvl.DVLSTEPEVENT} type of the event that happened to the step.
	 * @param {string} parameters.stepId   The identifier of the step.
	 * @private
	 */
	Viewport.prototype._updateLastPlayedStep = function(parameters) {
		if (parameters.type === sap.ve.dvl.DVLSTEPEVENT.DVLSTEPEVENT_STARTED) {
			this._lastPlayedStep = parameters.stepId;
		}
	};

	/**
	 * Attaches the scene to the Viewport for rendering.
	 * @param {sap.ui.vk.Scene} scene The scene to attach to the Viewport.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 * @deprecated Since version 1.50.0.
	 */
	Viewport.prototype.setScene = function(scene) {
		// jQuery.sap.assert(this._dvlRendererId, "The viewport is not registered with GraphicsCore.");

		if (this._dvlRendererId) {
			this._dvl.Renderer.AttachScene(scene && scene.getSceneRef() || null, this._dvlRendererId);
			this._dvlSceneRef = scene ? scene.getSceneRef() : null;
			if (scene) {
				this._dvl.Client.attachUrlClicked(this._fireUrlClicked, this);

				var isSmart2DContent = this._isSmart2DContent() || this._isSmart2DContentLegacy();
				// setting the Viewport background color
				if (isSmart2DContent) {
					// If it's smart 2D, make the viewport background white.
					this._dvl.Renderer.SetBackgroundColor(1, 1, 1, 1, 1, 1, 1, 1, this._dvlRendererId);
				} else {
					var topColor = this._getDecomposedABGR(this.getBackgroundColorTopABGR());
					var bottomColor = this._getDecomposedABGR(this.getBackgroundColorBottomABGR());
					this._dvl.Renderer.SetBackgroundColor(topColor.red, topColor.green, topColor.blue, topColor.alpha, bottomColor.red, bottomColor.green, bottomColor.blue, bottomColor.alpha, this._dvlRendererId);
				}
				// Firing the 'viewActivated' event. We are notifying the listeners that a 2D/3D models has been loaded.
				this.fireViewActivated({
					type: isSmart2DContent ? "2D" : "3D"
				});
			} else {
				this._dvl.Client.detachUrlClicked(this._fireUrlClicked, this);
				if (this._smart2DHandler) {
					var loco = new Loco();
					loco.removeHandler(this._smart2DHandler);
				}
				this.invalidate();
			}
		}
		return this;
	};

	Viewport.prototype._isSmart2DContent = function() {
		var hotspotNodeRefs = sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_HOTSPOTS).ChildNodes);
		// If a model has nodes flagged as hotspots, it means it's a Smart 2D model.
		return hotspotNodeRefs && hotspotNodeRefs.length > 0;
	};

	Viewport.prototype._isSmart2DContentLegacy = function() {
		var cameraId = this._dvl.Scene.GetCurrentCamera(this._dvlSceneRef),
			rotation = this._dvl.Camera.GetRotation(cameraId),
			projection = this._dvl.Camera.GetProjection(cameraId);
		return rotation[0] === 90 && rotation[1] === -90 && rotation[2] === 0 && projection === sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC;
	};

	Viewport.prototype._initializeSmart2DHandler = function() {

		if (this._viewStateManager) {
			if (this._smart2DHandler) {
				this._loco.removeHandler(this._smart2DHandler);
			}
			this._smart2DHandler = new Smart2DHandler(this, this._viewStateManager);
			this._loco.addHandler(this._smart2DHandler);
		}

		if (this.getShowAllHotspots()) {
			var nodeHierarchy = this._viewStateManager.getNodeHierarchy(),
				hotspotsNodeRefs = nodeHierarchy.getHotspotNodeIds();
			this.showHotspots(hotspotsNodeRefs, true);
		}
	};

	Viewport.prototype._fireUrlClicked = function(paramaters) {
		this.fireUrlClicked({
			url: paramaters.url,
			nodeRef: paramaters.nodeRef,
			nodeId: paramaters.nodeId
		});
	};

	// Override the generated method to suppress invalidation.
	Viewport.prototype.setHotspotColorABGR = function(value) {
		this.setProperty("hotspotColorABGR", value, true);

		// If value is null or undefined then previous call will assign default value to hotspotColorABGR
		// In this case we will use this default value to set hotspotColor by getting it from getProperty instead of using 'value'
		this.setProperty("hotspotColor", sap.ui.vk.colorToCSSColor(sap.ui.vk.abgrToColor(this.getProperty("hotspotColorABGR"))), true);
		return this;
	};

	// Override the generated method to suppress invalidation.
	Viewport.prototype.setHotspotColor = function(value) {
		this.setProperty("hotspotColor", value, true);

		// If value is null or undefined then previous call will assign default value to hotspotColor
		// In this case we will use this default value to set hotspotColorABGR by getting it from getProperty instead of using 'value'
		this.setProperty("hotspotColorABGR", sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(this.getProperty("hotspotColor"))), true);
		return this;
	};

	/**
	 * Retrieves the step index and the procedure index that can be used to store different steps since you cannot the save the dynamically generated stepId.
	 * @param {array} procedures The first argument is the procedure array where the search takes place.
	 * @param {string} stepId The second argument is the stepId for which we need to retrieve the step index and procedure index.
	 * @returns {object} An object which has two properties: <code>stepIndex</code> and <code>procedureIndex</code>.
	 * @private
	 */
	Viewport.prototype._getStepAndProcedureIndexes = function(procedures, stepId) {
		var procedureIndex = -1,
			stepIndex = -1,
			isFound = false;

		for (var i = 0; i < procedures.length; i++) {
			if (!isFound) {
				for (var j = 0; j < procedures[i].steps.length; j++) {
					if (procedures[i].steps[j].id === stepId) {
						stepIndex = j;
						procedureIndex = i;
						isFound = true;
						break;
					}
				}
			} else {
				break;
			}
		}

		return {
			stepIndex: stepIndex,
			procedureIndex: procedureIndex
		};
	};

	/**
	 * Gets the VE ID of the step.
	 *
	 * @param {string} stepId The step ID.
	 * @returns {string} The step VE ID.
	 * @private
	 */
	Viewport.prototype._getStepVeIdById = function(stepId) {
		if (stepId) {
			var veIds = this._dvl.Scene.RetrieveVEIDs(this._dvlSceneRef, stepId);
			if (Array.isArray(veIds)) {
				for (var idIndex = 0, idCount = veIds.length; idIndex < idCount; ++idIndex) {
					var veId = veIds[idIndex];
					if (veId.source === "SAP" && veId.type === "VE_VIEWPORT" && Array.isArray(veId.fields)) {
						for (var fieldIndex = 0, fieldCount = veId.fields.length; fieldIndex < fieldCount; ++fieldIndex) {
							var field = veId.fields[fieldIndex];
							if (field.name === "ID") {
								return field.value;
							}
						}
					}
				}
			}
		}
		return null;
	};

	/**
	 * Gets the step ID by VE ID.
	 *
	 * @param {array}  procedures A list of procedures to search the step in.
	 * @param {string} stepVeId The VE ID of the step.
	 * @returns {string} The step ID.
	 * @private
	 */
	Viewport.prototype._getStepIdByVeId = function(procedures, stepVeId) {
		for (var procedureIndex = 0, procedureCount = procedures.length; procedureIndex < procedureCount; ++procedureIndex) {
			var steps = procedures[procedureIndex].steps;
			for (var stepIndex = 0, stepCount = steps.length; stepIndex < stepCount; ++stepIndex) {
				var stepId = steps[stepIndex].id;
				if (this._getStepVeIdById(stepId) === stepVeId) {
					return stepId;
				}
			}
		}
		return null;
	};

	var setDefaultQueryCamera = function(effectiveQuery) {
		effectiveQuery.camera = {};
	};

	var setDefaultQueryCameraMatrices = function(effectiveQuery) {
		if (typeof effectiveQuery.camera === "object" && effectiveQuery.camera !== null) {
			effectiveQuery.camera.matrices = false;
		}
	};

	var setDefaultQueryCameraUseTransitionCamera = function(effectiveQuery) {
		if (typeof effectiveQuery.camera === "object" && effectiveQuery.camera !== null) {
			effectiveQuery.camera.useTransitionCamera = false;
		}
	};

	var setDefaultQueryAnimation = function(effectiveQuery) {
		effectiveQuery.animation = true;
	};

	var setDefaultQueryVisibility = function(effectiveQuery) {
		effectiveQuery.visibility = false;
	};

	var setDefaultQueryVisibilityMode = function(effectiveQuery) {
		if (typeof effectiveQuery.visibility === "object" && effectiveQuery.visibility !== null) {
			effectiveQuery.visibility.mode = sap.ui.vk.VisibilityMode.Complete;
		}
	};

	/**
	 * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like object.
	 * The information can then be used at a later time to restore the scene to the same camera view using the
	 * {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.<br/>
	 * @param {object}         [query]                       Query object which indicates what information to be retrieved.
	 * @param {boolean|object} [query.camera=true]           Indicator to retrieve camera information.
	 * @param {boolean}        [query.camera.matrices=false] Indicator to retrieve camera view and projection matrices.
	 * @param {boolean}        [query.camera.useTransitionCamera=false] Indicator to retrieve the transition camera properties instead of regular one's.
	 * @param {boolean}        [query.animation=true]        Indicator to retrieve animation information.
	 * @param {boolean|object} [query.visibility=false]      Indicator to retrieve visibility information.
	 * @param {sap.ui.vk.VisibilityMode} [query.visibility.mode=sap.ui.vk.VisibilityMode.Complete]
	 *                                                       Indicator to retrieve the complete visibility definition or just the difference.
	 * @returns {object} JSON-like object which holds the current view information. See {@link sap.ui.vk.Viewport#setViewInfo setViewInfo}.
	 *                   In addition to properties defined in {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} the output from
	 *                   {@link sap.ui.vk.Viewport#getViewInfo getViewInfo} contains camera view and projection matrices
	 * <pre>
	 *   {
	 *     ...
	 *     camera: {
	 *       ...
	 *       matrices: {
	 *         view:       [number, ...],
	 *         projection: [number, ...],
	 *       }
	 *       ...
	 *     },
	 *     ...
	 *   }
	 * </pre>
	 * @public
	 */
	Viewport.prototype.getViewInfo = function(query) {
		if (!this._dvlSceneRef) {
			return null;
		}

		var effectiveQuery = {};

		if (typeof query !== "object" || query === null) {
			setDefaultQueryCamera(effectiveQuery);
			setDefaultQueryCameraMatrices(effectiveQuery);
			setDefaultQueryCameraUseTransitionCamera(effectiveQuery);
			setDefaultQueryAnimation(effectiveQuery);
			setDefaultQueryVisibility(effectiveQuery);
			setDefaultQueryVisibilityMode(effectiveQuery);
		} else {
			if (typeof query.camera === "object" && query.camera !== null) {
				effectiveQuery.camera = {};
				if (typeof query.camera.matrices === "boolean") {
					effectiveQuery.camera.matrices = query.camera.matrices;
				} else if ("matrices" in query.camera) {
					// If camera.matrices is defined but not of type boolean, this is an error.
					effectiveQuery.camera.matrices = false;
				} else {
					// If camera.matrices is not defined, use default value.
					setDefaultQueryCameraMatrices(effectiveQuery);
				}
				if (typeof query.camera.useTransitionCamera === "boolean") {
					effectiveQuery.camera.useTransitionCamera = query.camera.useTransitionCamera;
				} else if ("useTransitionCamera" in query.camera) {
					// If camera.useTransitionCamera is defined but not of type boolean, this is an error.
					effectiveQuery.camera.useTransitionCamera = false;
				} else {
					// If camera.useTransitionCamera is not defined, use default value.
					setDefaultQueryCameraUseTransitionCamera(effectiveQuery);
				}
			} else if (typeof query.camera === "boolean") {
				if (query.camera === true) {
					effectiveQuery.camera = {};
					setDefaultQueryCameraMatrices(effectiveQuery);
					setDefaultQueryCameraUseTransitionCamera(effectiveQuery);
				} else {
					effectiveQuery.camera = false;
				}
			} else if ("camera" in query) {
				// If camera is defined but is not of type object or boolean, this is an error.
				effectiveQuery.camera = false;
			} else {
				// If camera is not defined at all, use default values.
				setDefaultQueryCamera(effectiveQuery);
				setDefaultQueryCameraMatrices(effectiveQuery);
				setDefaultQueryCameraUseTransitionCamera(effectiveQuery);
			}

			if (typeof query.animation === "boolean") {
				effectiveQuery.animation = query.animation;
			} else if ("animation" in query) {
				// If animation is defiend but is not of type boolean, this is an error.
				effectiveQuery.animation = false;
			} else {
				// If animation is not defined, use default value.
				setDefaultQueryAnimation(effectiveQuery);
			}

			if (typeof query.visibility === "object" && query.visibility !== null) {
				effectiveQuery.visibility = {};
				if (query.visibility.mode === sap.ui.vk.VisibilityMode.Complete || query.visibility.mode === sap.ui.vk.VisibilityMode.Differences) {
					effectiveQuery.visibility.mode = query.visibility.mode;
				} else {
					// If visibility.mode is not defined or does not equal "complete" or "differences", use default value.
					// This condition is different from camera.matrices because the mode property must have a valid string value.
					setDefaultQueryVisibilityMode(effectiveQuery);
				}
			} else if (typeof query.visibility === "boolean") {
				if (query.visibility === true) {
					effectiveQuery.visibility = {};
					setDefaultQueryVisibilityMode(effectiveQuery);
				} else {
					effectiveQuery.visibility = false;
				}
			} else if ("visibility" in query) {
				// If visibility is defined but is not of type object or boolean, this is an error.
				effectiveQuery.visibility = false;
			} else {
				// If visibility is not defined, use default values.
				setDefaultQueryVisibility(effectiveQuery);
				setDefaultQueryVisibilityMode(effectiveQuery);
			}
		}

		var viewInfo = {};

		if (effectiveQuery.camera) {
			var cameraId = null;

			if (effectiveQuery.camera.useTransitionCamera) {
				cameraId = this._dvl.Renderer.GetTransitionCamera(this._dvlRendererId);
				if (cameraId === sap.ve.dvl.DVLID_INVALID) {
					cameraId = null;
				}
			}
			if (cameraId === null) {
				cameraId = this._dvl.Renderer.GetCurrentCamera(this._dvlRendererId);
			}

			var rotation = this._dvl.Camera.GetRotation(cameraId),
			    cameraOrigin = this._dvl.Camera.GetOrigin(cameraId);

			viewInfo.camera = {
				rotation: {
					yaw:   rotation[0],
					pitch: rotation[1],
					roll:  rotation[2]
				},
				position: {
					x: cameraOrigin[0],
					y: cameraOrigin[1],
					z: cameraOrigin[2]
				},
				projectionType: dictionary.encodedProjectionType[this._dvl.Camera.GetProjection(cameraId)],
				bindingType: dictionary.encodedBindingType[this._dvl.Camera.GetFOVBinding(cameraId)]
			};

			if (viewInfo.camera.projectionType === sap.ui.vk.CameraProjectionType.Perspective) {
				// Perspective camera defines Field of View.
				viewInfo.camera.fieldOfView = this._dvl.Camera.GetFOV(cameraId);
			} else if (viewInfo.camera.projectionType === sap.ui.vk.CameraProjectionType.Orthographic) {
				// Orthographic defines Zoom Factor.
				viewInfo.camera.zoomFactor = this._dvl.Camera.GetOrthoZoomFactor(cameraId);
			}

			if (effectiveQuery.camera.matrices) {
				var matrices = this._dvl.Renderer.GetCameraMatrices(this._dvlRendererId);
				viewInfo.camera.matrices = {
					view: matrices.view,
					projection: matrices.projection
				};
			}
		}

		if (effectiveQuery.animation) {
			var stepInfo = this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneRef, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_STEP_INFO),
				isStepBeingPlayed = stepInfo.StepId !== sap.ve.dvl.DVLID_INVALID;

			var stepId = isStepBeingPlayed ? stepInfo.StepId : this._lastPlayedStep,
				animationTime = isStepBeingPlayed ? stepInfo.StepTime : 0,
				procedures = this._dvl.Scene.RetrieveProcedures(this._dvlSceneRef),
				stepAndProcedureIndexes = this._getStepAndProcedureIndexes(procedures.procedures, stepId),
				stepVeId = this._getStepVeIdById(stepId);

			viewInfo.animation = {
				animationTime: animationTime,
				stepIndex: stepAndProcedureIndexes.stepIndex,
				procedureIndex: stepAndProcedureIndexes.procedureIndex
			};

			if (stepVeId) {
				viewInfo.animation.stepVeId = stepVeId;
			}
		}

		if (effectiveQuery.visibility && this._viewStateManager) {
			viewInfo.visibility = {
				mode: effectiveQuery.visibility.mode
			};
			if (effectiveQuery.visibility.mode === sap.ui.vk.VisibilityMode.Complete) {
				var allVisibility = this._viewStateManager.getVisibilityComplete();
				viewInfo.visibility.visible = allVisibility.visible;
				viewInfo.visibility.hidden = allVisibility.hidden;
			} else if (this._viewStateManager.getShouldTrackVisibilityChanges()) {
				viewInfo.visibility.changes = this._viewStateManager.getVisibilityChanges();
			} else {
				jQuery.sap.log.warning(sap.ui.vk.getResourceBundle().getText(Messages.VIT32.summary), Messages.VIT32.code, "sap.ui.vk.dvl.Viewport");
			}
		}

		return viewInfo;
	};

	/**
	 * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo getViewInfo} method.<br/>
	 * Internally, the <code>setViewInfo</code> method activates certain steps at certain animation times,
	 * and then changes the camera position, rotation and field of view (FOV) / zoom factor.
	 * @param {object}   viewInfo                             A JSON-like object containing view information acquired using
	 *                                                        the {@link sap.ui.vk.Viewport#getViewInfo getViewInfo} method.<br/>
	 * @param {object}   [viewInfo.camera]                    A JSON-like object containing the camera information.
	 * @param {object}   viewInfo.camera.rotation             Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
	 * @param {float}    viewInfo.camera.rotation.yaw         Angle around the vertical axis in degrees.
	 * @param {float}    viewInfo.camera.rotation.pitch       Angle around the lateral axis in degrees.
	 * @param {float}    viewInfo.camera.rotation.roll        Angle around the longitudinal axis in degrees.
	 * @param {object}   viewInfo.camera.position             Position defined in 3-dimensional space.
	 * @param {float}    viewInfo.camera.position.x           X coordinate.
	 * @param {float}    viewInfo.camera.position.y           Y coordinate.
	 * @param {float}    viewInfo.camera.position.z           Z coordinate.
	 * @param {sap.ui.vk.CameraFOVBindingType} viewInfo.camera.bindingType Camera field of view binding type.
	 * @param {sap.ui.vk.CameraProjectionType} viewInfo.camera.projectionType Camera projection type.
	 * @param {float}    viewInfo.camera.fieldOfView          Camera field of view in degrees. Applicable only to perspective cameras.
	 * @param {float}    viewInfo.camera.zoomFactor           Camera zoom factor. Applicable only to orthographic cameras.
	 * @param {object}   [viewInfo.animation]                 A JSON-like object containing the animation information.
	 * @param {string}   [viewInfo.animation.stepVeId]        Step VE ID. If it is omitted then procedure and step indices are used.
	 * @param {int}      [viewInfo.animation.procedureIndex]  Procedure index in the list of procedures.
	 * @param {int}      [viewInfo.animation.stepIndex]       Step index in the list of steps in the procedure.
	 * @param {float}    [viewInfo.animation.animationTime=0] Time at which to activate the step.
	 * @param {object}   [viewInfo.visibility]                A JSON-like object containing the visibility information.
	 * @param {sap.ui.vk.VisibilityMode} viewInfo.visibility.mode If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete}
	 *                                                        then the visible and hidden fields are defined. If the mode
	 *                                                        equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
	 *                                                        the changes field is defined.
	 * @param {string[]} viewInfo.visibility.visible          List of Ids of visible nodes.
	 * @param {string[]} viewInfo.visibility.hidden           List of Ids of hidden nodes.
	 * @param {string[]} viewInfo.visibility.changes          List of Ids of nodes with inverted visibility.
	 * @param {float}    [flyToDuration=0]                    Fly-to animation duration in seconds.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.setViewInfo = function(viewInfo, flyToDuration) {
		var shouldResetVisibility = false; // We need to reset view when viewInfo.visiblity.mode equals "differences" and no procedure/step is provided.
		if (viewInfo.animation) {
			// retrieve all procedures from model
			var procedures = this._dvl.Scene.RetrieveProcedures(this._dvlSceneRef),
			    procedureIndex = viewInfo.animation.procedureIndex,
			    stepIndex = viewInfo.animation.stepIndex,
			    stepVeId = viewInfo.animation.stepVeId,
			    stepId,
			    animationTime = viewInfo.animation.animationTime || 0;
			if (stepVeId || stepIndex >= 0 && procedureIndex >= 0) {
				if (stepVeId) {
					stepId = this._getStepIdByVeId(procedures.procedures, viewInfo.animation.stepVeId);
				} else if (procedureIndex >= 0 && procedureIndex < procedures.procedures.length) {
					// checking if step index has a valid value
					if (stepIndex >= 0 && stepIndex < procedures.procedures[procedureIndex].steps.length) {
						// retrieving stepId from step index and procedure index
						stepId = procedures.procedures[procedureIndex].steps[stepIndex].id;
					} else {
						// Unsupported value for step index
						jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT26.summary), Messages.VIT26.code, "sap.ui.vk.dvl.Viewport");
					}
				} else {
					// Unsupported value for procedure index
					jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT27.summary), Messages.VIT27.code, "sap.ui.vk.dvl.Viewport");
				}
				if (stepId) {
					// activating the current step
					this._dvl.Renderer.ActivateStep(this._dvlRendererId, stepId, false, false, animationTime);
					this._dvl.Renderer.PauseCurrentStep(this._dvlRendererId);
				}
			} else {
				shouldResetVisibility = true;
			}
		}

		if (viewInfo.camera) {
			var projectionType;

			if (viewInfo.camera.projectionType === sap.ui.vk.CameraProjectionType.Perspective || viewInfo.camera.projectionType === sap.ui.vk.CameraProjectionType.Orthographic) {
				projectionType = dictionary.decodedProjectionType[viewInfo.camera.projectionType];
			} else {
				jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT19.summary), Messages.VIT19.code, "sap.ui.vk.dvl.Viewport");
				projectionType = sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE;
			}

			// creating a new camera
			var currentCamera = this._dvl.Scene.CreateCamera(this._dvlSceneRef, projectionType, sap.ve.dvl.DVLID_INVALID);

			if (projectionType === sap.ve.dvl.DVLCAMERAPROJECTION.PERSPECTIVE) {
				this._dvl.Camera.SetFOV(currentCamera, viewInfo.camera.fieldOfView);
			} else if (projectionType === sap.ve.dvl.DVLCAMERAPROJECTION.ORTHOGRAPHIC) {
				this._dvl.Camera.SetOrthoZoomFactor(currentCamera, viewInfo.camera.zoomFactor);
			}

			if (viewInfo.camera.position) {
				this._dvl.Camera.SetOrigin(currentCamera, viewInfo.camera.position.x, viewInfo.camera.position.y, viewInfo.camera.position.z);
			}

			if (viewInfo.camera.rotation) {
				this._dvl.Camera.SetRotation(currentCamera, viewInfo.camera.rotation.yaw, viewInfo.camera.rotation.pitch, viewInfo.camera.rotation.roll);
			}

			if (viewInfo.camera.bindingType) {
				var bindingType = dictionary.decodedBindingType[viewInfo.camera.bindingType] || sap.ve.dvl.DVLCAMERAFOVBINDING.MIN;
				this._dvl.Camera.SetFOVBinding(currentCamera, bindingType);
			}

			flyToDuration = flyToDuration || 0;

			// activating the camera
			this._dvl.Renderer.ActivateCamera(this._dvlRendererId, currentCamera, flyToDuration);
			// removing the camera that we created from the memory
			this._dvl.Scene.DeleteNode(this._dvlSceneRef, currentCamera);
		}

		// restoring the visibility state
		if (viewInfo.visibility) {
			var nodeHierarchy = this._viewStateManager.getNodeHierarchy(),
				veIdToNodeRefMap = new Map(),
				allNodeRefs = nodeHierarchy.findNodesByName();

			allNodeRefs.forEach(function(nodeRef) {
				// create node proxy based on dynamic node reference
				var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef),
					// get the VE_LOCATOR ve id
					veId = jQuery.grep(nodeProxy.getVeIds(), function(veId) {
						return veId.type === "VE_LOCATOR";
					});
				veId = Array.isArray(veId) && veId.length > 0 ? veId[ 0 ].fields[ 0 ].value : null;
				// destroy the node proxy
				nodeHierarchy.destroyNodeProxy(nodeProxy);
				if (veId) {
					// push the ve id to either visible/hidden array
					veIdToNodeRefMap.set(veId, nodeRef);
				}
			});

			switch (viewInfo.visibility.mode) {
				case sap.ui.vk.VisibilityMode.Complete:
					var visibleVeIds = viewInfo.visibility.visible,
					    hiddenVeIds = viewInfo.visibility.hidden;

					visibleVeIds.forEach(function(veId) {
						this._viewStateManager.setVisibilityState(veIdToNodeRefMap.get(veId), true, false);
					}, this);

					hiddenVeIds.forEach(function(veId) {
						this._viewStateManager.setVisibilityState(veIdToNodeRefMap.get(veId), false, false);
					}, this);

					break;

				case sap.ui.vk.VisibilityMode.Differences:
					if (shouldResetVisibility) {
						this.resetView({
							camera: false,
							visibility: true,
							transition: false
						});
					}
					viewInfo.visibility.changes.forEach(function(veId) {
						var nodeRef = veIdToNodeRefMap.get(veId);
						// reverting the visibility for this particular node
						if (nodeRef) {
							this._viewStateManager.setVisibilityState(nodeRef, !this._viewStateManager.getVisibilityState(nodeRef), false);
						}
					}, this);

					break;

				default:
					jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT28.summary), Messages.VIT28.code, "sap.ui.vk.dvl.Viewport");
					break;
			}
		}

		return this;
	};

	/**
	 * Gets position and size of the viewport square.
	 * The information can be used for making calculations when restoring Redlining elements.
	 * @returns {object} The information in this object:
	 *   <ul>
	 *     <li><b>left</b> - The x coordinate of the top-left corner of the square.</li>
	 *     <li><b>top</b> - The y coordinate of the top-left corner of the square.</li>
	 *     <li><b>sideLength</b> - The length of the square.</li>
	 *   </ul>
	 * @public
	 */
	Viewport.prototype.getOutputSize = function() {
		var bindingType = this.getViewInfo().camera.bindingType,
			boundingClientRect = this.getDomRef().getBoundingClientRect(),
			// The height and width of the sap.ui.vk.Viewport() control
			viewportWidth = boundingClientRect.width,
			viewportHeight = boundingClientRect.height,
			// relevantDimension is either viewportWidth or viewportHeight,
			// depending which of them drives the viewport output size when resizing
			relevantDimension;

		switch (dictionary.decodedBindingType[bindingType]) {
			case sap.ve.dvl.DVLCAMERAFOVBINDING.MIN:
				relevantDimension = Math.min(viewportWidth, viewportHeight);
				break;
			case sap.ve.dvl.DVLCAMERAFOVBINDING.MAX:
				relevantDimension = Math.max(viewportWidth, viewportHeight);
				break;
			case sap.ve.dvl.DVLCAMERAFOVBINDING.HORZ:
				relevantDimension = viewportWidth;
				break;
			case sap.ve.dvl.DVLCAMERAFOVBINDING.VERT:
				relevantDimension = viewportHeight;
				break;
			default:
				break;
		}

		return {
			left: (viewportWidth - relevantDimension) / 2,
			top: (viewportHeight - relevantDimension) / 2,
			sideLength: relevantDimension
		};
	};

	Viewport.prototype.onBeforeRendering = function() {
		if (this._resizeListenerId) {
			ResizeHandler.deregister(this._resizeListenerId);
			this._resizeListenerId = null;
		}

		// this._updateContentConnector();
	};

	Viewport.prototype.onAfterRendering = function() {
		if (this._canvas) {
			var domRef = this.getDomRef();
			domRef.appendChild(this._canvas);
			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
			this._handleResize({
				size: {
					width: domRef.clientWidth,
					height: domRef.clientHeight
				}
			});
		}
	};

	/**
	 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
	 * @param {jQuery.Event} event The event object.
	 * @returns {boolean} Returns <code>true</code>, unless the <code>if</code> statement inside the method is false which causes the method to return <code>undefined</code>.
	 * @private
	 */
	Viewport.prototype._handleResize = function(event) {
		if (this._dvlRendererId && this._canvas) {
			var drawingBufferWidth = event.size.width * window.devicePixelRatio;
			var drawingBufferHeight = event.size.height * window.devicePixelRatio;

			this._dvl.Renderer.SetDimensions(drawingBufferWidth, drawingBufferHeight, this._dvlRendererId);
			this._dvl.Renderer.SetOptionF(sap.ve.dvl.DVLRENDEROPTIONF.DVLRENDEROPTIONF_DPI, 96 * window.devicePixelRatio, this._dvlRendererId);
			this._canvas.width = drawingBufferWidth;
			this._canvas.height = drawingBufferHeight;
			// Using explicit sizes in pixels instead of CSS value "100%" reduces visual artifacts (stretching) when resizing the viewport via UI.
			this._canvas.style.width = event.size.width + "px";
			this._canvas.style.height = event.size.height + "px";

			this.fireResize({
				size: {
					width: event.size.width,
					height: event.size.height
				}
			});

			return true;
		}
	};

	Viewport.prototype._handleVisibilityChanged =
	Viewport.prototype._handleSelectionChanged =
	Viewport.prototype._handleOpacityChanged =
	Viewport.prototype._handleTintColorChanged =
		function(event) {
			if (this._dvlRendererId) {
				// Set the flag that viewport needs to be re-rendered.
				this._dvl.Renderer.ForceRenderFrame(this._dvlRendererId);
			}
		};

	/**
	 * @param {any|any[]} nodeRefs The node reference or the array of node references that we want to tint.
	 * @param {boolean} show Whether to highlight the nodes or remove the highlight.
	 * @param {int|sap.ui.vk.CSSColor} color The color to use for highlighting the nodes passed as argument.
	 * @return {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.showHotspots = function(nodeRefs, show, color) {
		var setTintColor = sap.ui.vk.dvl.NodeProxy.prototype[typeof color === "string" ? "setTintColor" : "setTintColorABGR"];
		// this function creates a node proxy based on the node reference and then changes its tint
		var setNodeProxyTintColor = function(nodeHierarchy, color, nodeRef) {
			var nodeProxy = nodeHierarchy.createNodeProxy(nodeRef);
			setTintColor.call(nodeProxy, color);
			nodeHierarchy.destroyNodeProxy(nodeProxy);
		};

		if (!Array.isArray(nodeRefs)) {
			nodeRefs = [ nodeRefs ];
		}

		// if the highlight color is not passed as argument, we use the default hightlight color
		var highlightColor = color === undefined ? this.getHotspotColorABGR() : color;

		// if show is falsy, we remove the highlight (which means highlight color becomes 0)
		if (!show) {
			highlightColor = 0;
		}

		var nodeHierarchy = this._viewStateManager.getNodeHierarchy();

		if (this._isSmart2DContent()) {
			// When we tint the hotspots, we have to tint their children as-well.
			var children = [];
			nodeRefs.forEach(function(nodeRef) {
				var nodeChildren = sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneRef, nodeRef, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN).ChildNodes);
				Array.prototype.push.apply(children, nodeChildren);
			}.bind(this));

			// joining together the nodes to be tinted and their children
			Array.prototype.push.apply(children, nodeRefs);

			// Tinting the nodes
			children.forEach(setNodeProxyTintColor.bind(null, nodeHierarchy, highlightColor));
		} else {

			var descendants = [];
			var getAllDescendants = function(nodeRef) {
				// Getting children of the node
				var children = nodeHierarchy.getChildren(nodeRef);
				// Adding the children to the list of nodes to be tinted
				Array.prototype.push.apply(descendants, children);
				// collecting children recursively
				children.forEach(getAllDescendants);
			};
			nodeRefs.forEach(getAllDescendants);

			// Tinting all the node references that were passed as argument together with their descendants
			Array.prototype.push.apply(descendants, nodeRefs);
			descendants.forEach(setNodeProxyTintColor.bind(null, nodeHierarchy, highlightColor));
		}

		return this;
	};

	/**
	 * @param {number} integerColor The ABGR integer format (with 0x prefix) color to be decomposed into RGBA. For example,
	 * 0xFF00FF00 stands for prefix (0x) + 100% opacity (FF) + 0% red (00) + 100% green (FF) + 0% blue (00) .
	 * @returns {object} Object whose properties are the red, green, blue and alpha components in a 0-1 format.
	 * @private
	 */
	Viewport.prototype._getDecomposedABGR = function(integerColor) {
		return {
			red: (integerColor >>> 0 & 0xff) / 255,
			green: (integerColor >>> 8 & 0xff) / 255,
			blue: (integerColor >>> 16 & 0xff) / 255,
			alpha: (integerColor >>> 24 & 0xff) / 255
		};
	};

	/**
	 * It retrieves the current background colors from the public properties and it applies them via DVL Renderer.
	 * @private
	 */
	Viewport.prototype._setBackgroundColor = function() {
		if (this._dvl) {
			var top = this._getDecomposedABGR(this.getBackgroundColorTopABGR()),
			    bottom = this._getDecomposedABGR(this.getBackgroundColorBottomABGR());
			this._dvl.Renderer.SetBackgroundColor(top.red, top.green, top.blue, top.alpha, bottom.red, bottom.green, bottom.blue, bottom.alpha, this._dvlRendererId);
		}
	};

	/**
	 * Sets the background color for the top area of the Viewport.
	 * @param {int} integerColor Takes an integer value as parameter.
	 * For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha, FF blue, FF green, FF red)
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.setBackgroundColorTopABGR = function(integerColor) {
		this.setProperty("backgroundColorTopABGR", integerColor, true);
		// applying the background color
		this._setBackgroundColor();
		return this;
	};

	Viewport.prototype.setBackgroundColorTop = function(value) {
		this.setProperty("backgroundColorTop", value, true);
		return this.setBackgroundColorTopABGR(sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(value)));
	};

	/**
	 * Sets the background color for the bottom area of the Viewport.
	 * @param {int} integerColor Takes an integer value as parameter.
	 * For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha, FF blue, FF green, FF red)
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @public
	 */
	Viewport.prototype.setBackgroundColorBottomABGR = function(integerColor) {
		this.setProperty("backgroundColorBottomABGR", integerColor, true);
		// applying the background color
		this._setBackgroundColor();
		return this;
	};

	Viewport.prototype.setBackgroundColorBottom = function(value) {
		this.setProperty("backgroundColorBottom", value, true);
		return this.setBackgroundColorBottomABGR(sap.ui.vk.colorToABGR(sap.ui.vk.cssColorToColor(value)));
	};

	////////////////////////////////////////////////////////////////////////
	// 3D Rendering handling begins.

	/**
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @protected
	 */
	Viewport.prototype.setShouldRenderFrame = function() {
		if (this._dvlRendererId) {
			// Set the flag that viewport needs to be re-rendered.
			this._dvl.Renderer.ForceRenderFrame(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @returns {bool} It returns <code>true</code> or <code>false</code> whether the frame should be rendered or not.
	 * @experimental
	 */
	Viewport.prototype.shouldRenderFrame = function() {
		return this._dvlRendererId && this._dvl.Renderer.ShouldRenderFrame(this._dvlRendererId);
	};

	/**
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @experimental
	 */
	Viewport.prototype.renderFrame = function() {
		if (this._dvlRendererId) {
			this._dvl.Renderer.RenderFrame(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @param {array} viewMatrix The <code>viewMatrix</code> array.
	 * @param {array} projectionMatrix The <code>projectionMatrix</code> array.
	 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
	 * @experimental
	 */
	Viewport.prototype.renderFrameEx = function(viewMatrix, projectionMatrix) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.RenderFrameEx.apply(this, [].concat(viewMatrix, projectionMatrix), this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @param {object} resetOptions An object which is used for configuring the 'resetView' method.<br>
	 * It has three properties: <br>
	 <ul>
		<li> camera: boolean (defaults to true) - whether to reset the camera position to the initial state </li>
		<li> visibility: boolean (defaults to false) - whether to reset the visibility state to the default state </li>
		<li> transition: boolean (defaults to true) - whether to use transition or not when performing the reset </li>
	 </ul>
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.resetView = function(resetOptions) {
		// if 'resetOptions' is defined, it has to be an object
		if (resetOptions !== undefined && !jQuery.isPlainObject(resetOptions)) {
			jQuery.sap.log.error(sap.ui.vk.getResourceBundle().getText(Messages.VIT31.summary), Messages.VIT31.code, "sap.ui.vk.dvl.Viewport");
		}

		// default options
		var options = {
			camera: true,
			transition: true,
			visibility: false
		};
		// attaching the options passed as argument to the default options
		jQuery.extend(options, resetOptions);

		// we perform the reset only if we need to reset the camera or the visibility
		if (options.camera || options.visibility) {

			var dvlOption = (options.camera ? sap.ve.dvl.DVLRESETVIEWFLAG.CAMERA : 0)
			| (options.transition ? sap.ve.dvl.DVLRESETVIEWFLAG.SMOOTHTRANSITION : 0)
			| (options.visibility ? sap.ve.dvl.DVLRESETVIEWFLAG.VISIBILITY : 0);

			if (this._dvlRendererId) {
				this._dvl.Renderer.ResetView(dvlOption, this._dvlRendererId);
				this._lastPlayedStep = null;
			}
		}
		return this;
	};

	/**
	 * @param {any} nodeRef The ID of the node to check.
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.canIsolateNode = function(nodeRef) {
		if (this._dvlRendererId) {
			return this._dvl.Renderer.CanIsolateNode(nodeRef, this._dvlRendererId);
		} else {
			return false;
		}
	};

	/**
	 * @param {string} nodeId The ID of the node that we want to set as isolated.
	 * @returns {sap.ui.vk.Viewport} this
	 * @experimental
	 */
	Viewport.prototype.setIsolatedNode = function(nodeId) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.SetIsolatedNode(nodeId, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * @returns {string} The ID of the node that is currently set as isolated.
	 * @public
	 * @experimental
	 */
	Viewport.prototype.getIsolatedNode = function() {
		if (this._dvlRendererId) {
			return this._dvl.Renderer.GetIsolatedNode(this._dvlRendererId);
		} else {
			return sap.ve.dvl.DVLID_INVALID;
		}
	};

	/**
	 * Performs a screen-space hit test and gets the hit node reference, it must be called between beginGesture() and endGesture()
	 *
	 * @param {int} x: x coordinate in viewport to perform hit test
	 * @param {int} y: y coordinate in viewport to perform hit test
	 * @returns {string} The ID of the node that is under the viewport coordinates (x, y).
	 * @experimental
	 */
	Viewport.prototype.hitTest = function(x, y) {
		if (this._dvlRendererId) {
			var result = this._dvl.Renderer.HitTest(x * window.devicePixelRatio, y * window.devicePixelRatio, this._dvlRendererId).id;
			this.setShouldRenderFrame();
			return result;
		} else {
			return sap.ve.dvl.DVLID_INVALID;
		}
	};

	Viewport.prototype.setShowDebugInfo = function(value) {
		this.setProperty("showDebugInfo", value, true);
		if (this._dvlRendererId) {
			this._dvl.Renderer.SetOption(sap.ve.dvl.DVLRENDEROPTION.DVLRENDEROPTION_SHOW_DEBUG_INFO, value, this._dvlRendererId);
		}
		return this;
	};

	Viewport.prototype._handleFrameFinished = function(parameters) {
		if (parameters.rendererId === this._dvlRendererId) {
			this.fireFrameRenderingFinished();
		}
	};

	// 3D Rendering handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Gesture handling ends.

	/**
	 * Marks the start of the current gesture operation.
	 *
	 * @param {int} x The x-coordinate of the gesture.
	 * @param {int} y The y-coordinate of the gesture.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.beginGesture = function(x, y) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.BeginGesture(x * window.devicePixelRatio, y * window.devicePixelRatio, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Marks the end of the current gesture operation.
	 *
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.endGesture = function() {
		if (this._dvlRendererId) {
			this._dvl.Renderer.EndGesture(this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Performs a <code>pan</code> gesture to pan across the Viewport.
	 *
	 * @param {int} dx The change in distance along the x-coordinate.
	 * @param {int} dy The change in distance along the y-coordinate.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.pan = function(dx, dy) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.Pan(dx * window.devicePixelRatio, dy * window.devicePixelRatio, this._dvlRendererId);
			this.firePan({
				dx: dx,
				dy: dy
			});
		}
		return this;
	};

	/**
	 * Rotates the content resource displayed on the Viewport.
	 *
	 * @param {int} dx The change in x-coordinate used to define the desired rotation.
	 * @param {int} dy The change in y-coordinate used to define the desired rotation.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.rotate = function(dx, dy) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.Rotate(dx * window.devicePixelRatio, dy * window.devicePixelRatio, this._dvlRendererId);
			this.fireRotate({
				dx: dx,
				dy: dy
			});
		}
		return this;
	};

	/**
	 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
	 * @param {double} dy Zoom factor. A scale factor that specifies how much to zoom in or out by.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.zoom = function(dy) {
		if (this._dvlRendererId) {
			this._dvl.Renderer.Zoom(dy, this._dvlRendererId);
			this.fireZoom({
				zoomFactor: dy
			});
		}
		return this;
	};

	/**
	 * Zooms the scene to a bounding box created from a particular set of nodes.
	 * @param {sap.ui.vk.ZoomTo|sap.ui.vk.ZoomTo[]} what What set of nodes to zoom to.
	 * @param {any} nodeRef Is only used if what == sap.ui.vk.ZoomTo.Node.
	 * @param {float} crossFadeSeconds Time to perform the "fly to" animation. Set to 0 to do this immediately.
	 * @param {float} margin Margin. Set to 0 to zoom to the entire screen.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.zoomTo = function(what, nodeRef, crossFadeSeconds, margin) {
		if (this._dvlRendererId) {
			var flags = 0;
			if (Array.isArray(what)) {
				for (var i in what) {
					flags |= dictionary.decodedZoomTo[what[i]];
				}
			} else {
				flags = dictionary.decodedZoomTo[what];
			}
			this._dvl.Renderer.ZoomTo(flags, nodeRef, crossFadeSeconds, margin, this._dvlRendererId);
		}
		return this;
	};

	/**
	 * Executes a click or tap gesture.
	 *
	 * @param {int} x The tap gesture's x-coordinate.
	 * @param {int} y The tap gesture's y-coordinate.
	 * @param {boolean} isDoubleClick Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code> indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.tap = function(x, y, isDoubleClick) {
		if (this._dvlRendererId) {
			var px = x * window.devicePixelRatio, py = y * window.devicePixelRatio;
			if (!isDoubleClick) {
				var node = this.hitTest(x, y); // NB: pass (x, y) in CSS pixels, hitTest will convert them to device pixels.
				var parameters = {
					picked: node !== sap.ve.dvl.DVLID_INVALID ? [ node ] : []
				};
				this.fireNodesPicked(parameters);

				if (this.getSelectionMode() === sap.ui.vk.SelectionMode.Exclusive) {
					this.exclusiveSelectionHandler(parameters.picked);
				} else if (this.getSelectionMode() === sap.ui.vk.SelectionMode.Sticky) {
					this.stickySelectionHandler(parameters.picked);
				}

				if (node !== sap.ve.dvl.DVLID_INVALID) {
					this.fireNodeClicked({ nodeRef: node, nodeId: node, x: x, y: y }, true, true);
				}
			} else {
				this._dvl.Renderer.Tap(px, py, isDoubleClick, this._dvlRendererId);
			}
		}
		return this;
	};

	/**
	 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
	 *
	 * @param {function} command The command to be executed.
	 * @returns {sap.ui.vk.Viewport} this
	 * @public
	 */
	Viewport.prototype.queueCommand = function(command) {
		if (this._dvlRendererId) {
			this._dvl.Renderer._queueCommand(command, this._dvlRendererId);
		}
		return this;
	};

	// Gesture handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Content connector handling begins.

	Viewport.prototype._onAfterUpdateContentConnector = function() {
		this._setScene(this._contentConnector.getContent());
	};

	Viewport.prototype._onBeforeClearContentConnector = function() {
		this._setScene(null);
	};

	Viewport.prototype._handleContentReplaced = function(event) {
		var content = event.getParameter("newContent");
		if (!(content instanceof sap.ui.vk.dvl.Scene)) {
			content = null;
		}
		this._setScene(content);
	};

	Viewport.prototype._setScene = function(scene) {
		var graphicsCore = scene && scene.getGraphicsCore();
		this.setGraphicsCore(graphicsCore);
		this.setScene(scene);
		if (scene && (this._isSmart2DContent() || this._isSmart2DContentLegacy())) {
			this._initializeSmart2DHandler();
		}
	};

	Viewport.prototype._handleContentChangesFinished = function(event) {
		this.setShouldRenderFrame();
	};

	// Content connector handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// View state manager handling begins.

	Viewport.prototype._onAfterUpdateViewStateManager = function() {
		if (this._dvl) {
			this._dvl.Renderer.SetViewStateManager(this._viewStateManager/* && this._viewStateManager.getImplementation()*/, this._dvlRendererId);
		}
	};

	Viewport.prototype._onBeforeClearViewStateManager = function() {
		if (this._dvl) {
			this._dvl.Renderer.SetViewStateManager(null, this._dvlRendererId);
		}
	};

	// View state manager handling ends.
	////////////////////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////
	// Keyboard handling begins.

	var offscreenPosition = { x: -2, y: -2 };
	var rotateDelta = 2;
	var panDelta = 5;

	[
		{ key: "left",  dx: -rotateDelta, dy:            0 },
		{ key: "right", dx: +rotateDelta, dy:            0 },
		{ key: "up",    dx:            0, dy: -rotateDelta },
		{ key: "down",  dx:            0, dy: +rotateDelta }
	].forEach(function(item) {
		Viewport.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(offscreenPosition.x, offscreenPosition.y);
			this.rotate(item.dx, item.dy);
			this.endGesture();
			this.setShouldRenderFrame();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	[
		{ key: "left",  dx: -panDelta, dy:         0 },
		{ key: "right", dx: +panDelta, dy:         0 },
		{ key: "up",    dx:         0, dy: -panDelta },
		{ key: "down",  dx:         0, dy: +panDelta }
	].forEach(function(item) {
		Viewport.prototype["onsap" + item.key + "modifiers"] = function(event) {
			if (event.shiftKey && !(event.ctrlKey || event.altKey || event.metaKey)) {
				this.beginGesture(offscreenPosition.x, offscreenPosition.y);
				this.pan(item.dx, item.dy);
				this.endGesture();
				this.setShouldRenderFrame();
				event.preventDefault();
				event.stopPropagation();
			}
		};
	});

	[
		{ key: "minus", d: 0.98 },
		{ key: "plus",  d: 1.02 }
	].forEach(function(item) {
		ViewportBase.prototype["onsap" + item.key] = function(event) {
			this.beginGesture(this.$().width() / 2, this.$().height() / 2);
			this.zoom(item.d);
			this.endGesture();
			this.setShouldRenderFrame();
			event.preventDefault();
			event.stopPropagation();
		};
	});

	// Keyboard handling ends.
	////////////////////////////////////////////////////////////////////////

	ContentConnector.injectMethodsIntoClass(Viewport);
	ViewStateManager.injectMethodsIntoClass(Viewport);

	return Viewport;
});

}; // end of sap/ui/vk/dvl/Viewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.threejs.ContentManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides object sap.ui.vk.threejs.ContentManager.
jQuery.sap.declare('sap.ui.vk.threejs.ContentManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/threejs/ContentManager",[
	"jquery.sap.global", "../ContentManager", "./Scene", "../TransformationMatrix"
], function(
	jQuery, ContentManagerBase, Scene, TransformationMatrix
) {
	"use strict";

	/**
	 * Constructor for a new ContentManager.
	 *
	 * @class
	 * Provides a content manager object that uses the three.js library to load 3D files.
	 *
	 * When registering a content manager resolver with {@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
	 * you can pass a function that will load a model and merge it into the three.js scene.
	 *
	 * The loader function takes two parameters:
	 * <ul>
	 *   <li>parentNode - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - a grouping node to merge the content into</li>
	 *   <li>contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - a content resource to load</li>
	 * </ul>
	 * The loader function returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise}
	 * object. If the loading the model succeeds the promise object resolves with a value with the following structure:
	 * <ul>
	 *   <li>node - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - the grouping node to which the content
	 *       is merged into. It should be the <code>parentNode</code> parameter that was passed to the loader function.</li>
	 *   <li>contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - the content resource that was loaded.</li>
	 * </ul>
	 *
	 * @see {@link ContentConnector.addContentManagerResolver ContentConnector.addContentManagerResolver} or an example.
	 *
	 * @param {string} [sId] ID for the new ContentManager object. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new ContentConnector object.
	 * @protected
	 * @author SAP SE
	 * @version 1.50.7
	 * @extends sap.ui.vk.ContentManager
	 * @alias sap.ui.vk.threejs.ContentManager
	 * @since 1.50.0
	 * @experimental Since 1.50.0. This class is experimental and might be modified or removed in future versions.
	 */
	var ContentManager = ContentManagerBase.extend("sap.ui.vk.threejs.ContentManager", /** @lends sap.ui.vk.threejs.ContentManager.prototype */ {
		metadata: {
			library: "sap.ui.vk"
		}
	});

	var basePrototype = ContentManager.getMetadata().getParent().getClass().prototype;

	var testLoader = function(parentNode, contentResource) {
		return new Promise(function(resolve, reject) {
			var loader = new THREE.ObjectLoader();
			loader.load(
				// resource URL
				contentResource.getSource(),

				// pass the loaded data to the onLoad function.
				// Here it is assumed to be an object
				function(obj) {
					// add the loaded object to the scene
					parentNode.add(obj);

					resolve({
						node: parentNode,
						contentResource: contentResource
					});
				},

				// Function called when download progresses
				function(xhr) {
					// console.log((xhr.loaded / xhr.total * 100) + '% loaded');
				},

				// Function called when download errors
				function(xhr) {
					// console.error('An error happened');
					reject(new Error("Not object json"));
				}
			);
		});
	};

	ContentManager.prototype.init = function() {
		if (basePrototype.init) {
			basePrototype.init.call(this);
		}
	};

	ContentManager.prototype.exit = function() {
		if (basePrototype.exit) {
			basePrototype.exit.call(this);
		}
	};

	function initLights(nativeScene) {
		// temp measure to add light automatically. remove this later
		if (nativeScene) {
			var lightColors = [
				new THREE.Color(0.8, 0.8, 0.9).multiplyScalar(0.9),
				new THREE.Color(0.5, 0.5, 0.5).multiplyScalar(0.4),
				new THREE.Color(0.8, 0.8, 0.9).multiplyScalar(0.4),
				new THREE.Color(0.9, 0.9, 0.9).multiplyScalar(0.4) ];

			var lightDirs = [
				new THREE.Vector3(0, 0, 1).normalize(),
				new THREE.Vector3(-2.0, -1.5, -0.5).normalize(),
				new THREE.Vector3(2.0, 1.1, -2.5).normalize(),
				new THREE.Vector3(0.04, 0.01, 2.0).normalize() ];

			var lightGroup = new THREE.Group();
			nativeScene.add(lightGroup);
			lightGroup.name = "DefaultLights";

			for (var l = 0, lMax = lightColors.length; l < lMax; l++) {
				var directionalLight = new THREE.DirectionalLight();

				directionalLight.color.copy(lightColors[ l ]);
				directionalLight.position.copy(lightDirs[ l ]);
				lightGroup.add(directionalLight);
			}
		}
	}

	/**
	 * Starts downloading and building or updating the content from the content resources.
	 *
	 * This method is asynchronous.
	 *
	 * @param {any}                         content          The current content to update. It can be <code>null</code> if this is an initial loading call.
	 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to load or update.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */
	ContentManager.prototype.loadContent = function(content, contentResources) {
		var that = this;
		var load = function() {
			that.fireContentChangesStarted();

			var nativeScene = new THREE.Scene(),
				scene = new Scene(nativeScene);
			initLights(nativeScene);

			that._loadContentResources(scene, contentResources).then(
				function(values) { // onFulfilled
					scene._setState(values[0].state);

					that.fireContentChangesFinished({
						content: scene
					});
				},
				function(reason) { // onRejected
					jQuery.sap.log.error("Failed to load content resources.");
					that.fireContentChangesFinished({
						content: null,
						failureReason: [
							{
								error: reason,
								errorMessage: "Failed to load content resources."
							}
						]
					});
				}
			);
		};

		// This test allows to use application provided three.js.
		if (window.THREE) {
			load();
		} else {
			sap.ui.require([ "sap/ui/vk/threejs/thirdparty/three" ], function(dummy) {
				load();
			});
		}

		return this;
	};

	var findLoader = function(contentResource) {
		if (contentResource._contentManagerResolver
			&& contentResource._contentManagerResolver.settings
			&& contentResource._contentManagerResolver.settings.loader
		) {
			return contentResource._contentManagerResolver.settings.loader;
		}

		if (contentResource.getSource()) {
			// Try one of default loaders.
			var sourceType = contentResource.getSourceType();

			if (sourceType === "threejs.test.json") {
				return testLoader;
			}
			// TODO: report an error.
			return null;
		}
		return null;
	};

	ContentManager.prototype._loadContentResources = function(scene, contentResources) {
		var promises = [];

		contentResources.forEach(function loadContentResource(parentNode, contentResource) {
			var node = new THREE.Group();
			node.name = contentResource.getName();
			node.sourceId = contentResource.getSourceId();
			contentResource._shadowContentResource = {
				nodeProxy: scene.getDefaultNodeHierarchy().createNodeProxy(node)
			};
			var localMatrix = contentResource.getLocalMatrix();
			if (localMatrix) {
				node.applyMatrix(new THREE.Matrix4().fromArray(TransformationMatrix.convertTo4x4(localMatrix)));
			}
			parentNode.add(node);

			var loader = findLoader(contentResource);
			if (loader) {
				promises.push(loader(node, contentResource));
			} else {
				// TODO: report error if the content resource has a non-empty source property.
				promises.push(Promise.resolve({
					node: node,
					contentResource: contentResource
				}));
			}

			contentResource.getContentResources().forEach(loadContentResource.bind(this, node));
		}.bind(this, scene.getSceneRef()));

		return Promise.all(promises);
	};

	/**
	 * Destroys the content.
	 *
	 * @function
	 * @name sap.ui.vk.threejs.ContentManager#destroyContent
	 * @param {any} content The content to destroy.
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	/**
	 * Collects and destroys unused objects and resources.
	 *
	 * @function
	 * @name sap.ui.vk.threejs.ContentManager#collectGarbage
	 * @returns {sap.ui.vk.ContentManager} <code>this</code> to allow method chaining.
	 * @public
	 * @since 1.50.0
	 */

	return ContentManager;
});

}; // end of sap/ui/vk/threejs/ContentManager.js
